TITLE: Printing output to console in Java
DESCRIPTION: This snippet demonstrates how to print output to the console using `System.out.println()` in Java. This is a fundamental operation for displaying information to the user or for debugging purposes. No external dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/java/content/basic-syntax@OlbQNB6YXZjO1J7D0lZU1.md#_snippet_0

LANGUAGE: Java
CODE:
```
System.out.println();
```

----------------------------------------

TITLE: Listing Running Processes with ps
DESCRIPTION: The `ps aux` command lists all currently running processes in Linux, providing details like process ID (PID), user, CPU usage, memory usage, and the command used to start the process. It's a fundamental tool for understanding system activity and identifying processes to manage.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
ps aux
```

----------------------------------------

TITLE: Changing Directory with `cd` command in Bash
DESCRIPTION: The `cd` command is used to change the current working directory in the Linux file system.  The `/path/to/directory` should be replaced with the absolute or relative path to the desired directory. This command is fundamental for navigating through directories.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/basic-commands.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Change directory
cd /path/to/directory
```

----------------------------------------

TITLE: Prepared Statement for SQL Insertion (PHP, PDO)
DESCRIPTION: This code snippet demonstrates the use of prepared statements with PDO to prevent SQL injection vulnerabilities. The `prepare()` method creates a parameterized query, and `execute()` binds the `$safe_variable` as a parameter. This ensures that the input is treated as data, not as part of the SQL command, thus preventing injection attacks. The `$pdo` variable is assumed to be an existing PDO database connection object.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/sql-injection@801vB_JMas4ucriUmfrLg.md#_snippet_1

LANGUAGE: PHP
CODE:
```
$stmt = $pdo->prepare('INSERT INTO `table` (`column`) VALUES (?)');
$stmt->execute([$safe_variable]);
```

----------------------------------------

TITLE: Polymorphism with Virtual Functions
DESCRIPTION: This snippet demonstrates polymorphism using virtual functions. The `Animal` class has a virtual `makeSound` function, which is overridden in the `Dog` and `Cat` classes. This allows a single interface (`makeSound`) to behave differently based on the actual object type at runtime, even when accessed through an `Animal` pointer.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/object-oriented-programming@b3-QYKNcW3LYCNOza3Olf.md#_snippet_5

LANGUAGE: cpp
CODE:
```
class Animal {
public:
    virtual void makeSound() {
        std::cout << "The Animal makes a sound\n";
    }
};

class Dog : public Animal {
public:
    void makeSound() override {
        std::cout << "Dog barks!\n";
    }
};

class Cat : public Animal {
public:
    void makeSound() override {
        std::cout << "Cat meows!\n";
    }
};
```

----------------------------------------

TITLE: JavaScript if...else Example
DESCRIPTION: This JavaScript snippet demonstrates the basic syntax of an if...else statement. It executes `statement1` if `condition` is truthy and `statement2` if `condition` is falsy. The `else` block is optional.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/javascript/content/ifelse@ndbDXAx6bL4lZmpXv16Y_.md#_snippet_0

LANGUAGE: js
CODE:
```
if (condition) {
  statement1;
} else {
  statement2;
}
```

----------------------------------------

TITLE: Initializing a Git Repository
DESCRIPTION: The `git init` command initializes a new Git repository in the current directory. This creates a .git subdirectory that contains all the necessary repository metadata and object database. It's the first step in starting to track changes in a project.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/basic-git-usage@PtU5Qwfzn3N1i3oRlCGoR.md#_snippet_0

LANGUAGE: bash
CODE:
```
git init
```

----------------------------------------

TITLE: Creating a Book
DESCRIPTION: This Go code defines a handler function `CreateBook` that creates a new book in the database. It binds the request body to a `Book` struct, validates the input, creates the book using GORM, and returns a JSON response indicating success or failure.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_6

LANGUAGE: go
CODE:
```
func CreateBook(c *gin.Context) {
	var book Book

	//bind the request body
	if err := c.ShouldBindJSON(&book); err != nil {
		ResponseJSON(c, http.StatusBadRequest, "Invalid input", nil)
		return
	}
	DB.Create(&book)
	ResponseJSON(c, http.StatusCreated, "Book created successfully", book)
}
```

----------------------------------------

TITLE: Taking User Input in Java
DESCRIPTION: This snippet highlights that the `Scanner` or `BufferedReader` class can be used to take input from the user in Java.  These classes provide methods to read various data types from standard input. You need to import either `java.util.Scanner` or `java.io.BufferedReader` to use these classes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/java/content/basic-syntax@OlbQNB6YXZjO1J7D0lZU1.md#_snippet_1

LANGUAGE: Java
CODE:
```
Scanner or BufferedReader class can be used
```

----------------------------------------

TITLE: Password Hashing and Verification in PHP
DESCRIPTION: This snippet demonstrates password hashing using `password_hash()` and verification using `password_verify()` in PHP. It hashes the password 'mypassword' using the default algorithm and then verifies if the same password matches the generated hash. The output depends on whether the verification is successful or not.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/password-hashing@JbWFfJiCRrXDhnuIx_lqx.md#_snippet_0

LANGUAGE: PHP
CODE:
```
// Hashing the password
$hash = password_hash('mypassword', PASSWORD_DEFAULT);

// Verifying the password
if (password_verify('mypassword', $hash)) {
    echo 'Password is valid!';
} else {
    echo 'Invalid password.';
}
```

----------------------------------------

TITLE: Dynamic Cast Example in C++
DESCRIPTION: This code demonstrates the use of `dynamic_cast` to safely downcast a base class pointer to a derived class pointer in C++. It checks if the downcast is valid and avoids undefined behavior.  It requires the `<iostream>` library and defines a base and derived class with a virtual function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/dynamic_cast@4BdFcuQ5KNW94cu2jz-vE.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

class BaseClass {
   public:
    virtual void display() {
        std::cout << "BaseClass\n";
    }
};

class DerivedClass : public BaseClass {
   public:
    void display() {
        std::cout << "DerivedClass\n";
    }
};

int main() {
    BaseClass *basePtr = new DerivedClass();  // Upcasting
    DerivedClass *derivedPtr;

    derivedPtr = dynamic_cast<DerivedClass *>(basePtr);  // Downcasting
    if (derivedPtr) {
        derivedPtr->display();  // Output: DerivedClass
    } else {
        std::cout << "Invalid type conversion.";
    }

    delete basePtr;
    return 0;
}

```

----------------------------------------

TITLE: Preventing SQL Injection with Parameterized Queries (JavaScript)
DESCRIPTION: This snippet demonstrates the use of parameterized queries in JavaScript to prevent SQL injection attacks. The `db.query` function takes a SQL query string with placeholders and an array of parameters. The database library handles the proper escaping of parameters, preventing malicious SQL code from being executed. It depends on a database library (e.g., MySQL, PostgreSQL) being initialized as `db`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/security-vulnerabilities.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.query('SELECT * FROM users WHERE id = ?', [userId]);
```

----------------------------------------

TITLE: Installing Certbot via Snap
DESCRIPTION: These commands install Certbot using snap and create a symbolic link to make it accessible from the command line. Certbot is used to obtain and install Let's Encrypt SSL certificates.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/setup-and-auto-renew-ssl-certificates.md#_snippet_1

LANGUAGE: shell
CODE:
```
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot
```

----------------------------------------

TITLE: Creating JWT Authentication Middleware in Go
DESCRIPTION: This Go code snippet creates a Gin middleware function `JWTAuthMiddleware` that intercepts HTTP requests. It checks for an 'Authorization' header containing a JWT, validates the token's signature, and proceeds to the next handler if the token is valid. If the token is missing or invalid, it returns an unauthorized status.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_27

LANGUAGE: go
CODE:
```
package api

import (
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
	"net/http"
	"os"
)

// Secret key for signing JWT
var jwtSecret = []byte(os.Getenv("SECRET_TOKEN"))

func JWTAuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		tokenString := c.GetHeader("Authorization")
		if tokenString == "" {
			ResponseJSON(c, http.StatusUnauthorized, "Authorization token required", nil)
			c.Abort()
			return
		}
		// parse and validate the token
		_, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
			// Validate the signing method
			if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
				return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
			}
			return jwtSecret, nil
		})
		if err != nil {
			ResponseJSON(c, http.StatusUnauthorized, "Invalid token", nil)
			c.Abort()
			return
		}
		// Token is valid, proceed to the next handler
		c.Next()
	}
}
```

----------------------------------------

TITLE: C++ Function Example: Add Two Integers
DESCRIPTION: This snippet demonstrates a simple C++ function 'add' that takes two integer arguments and returns their sum. It also shows how to call the function from the main function and print the result to the console. This example highlights the basic function definition and calling mechanism in C++.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/introduction-to-language@NvODRFR0DLINB0RlPSsvt.md#_snippet_9

LANGUAGE: cpp
CODE:
```
int add(int a, int b) {
    return a + b;
}

int main() {
    int result = add(3, 4);
    std::cout << "3 + 4 = " << result << '\n';
    return 0;
}
```

----------------------------------------

TITLE: Generic Identity Function in TypeScript
DESCRIPTION: This TypeScript code defines a generic identity function called `identity`. This function takes a single argument of type `T` and returns the same argument. The type `T` is a type parameter that can be specified when the function is called, allowing it to work with different data types while maintaining type safety. The example demonstrates calling the function with a string type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/generic-types@T2-VAVfntouJOoWHpHZ3n.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function identity<T>(arg: T): T {
  return arg;
}

let output = identity<string>('Hello'); // type of output will be 'string'
```

----------------------------------------

TITLE: Sanitizing User Input with htmlspecialchars() in PHP
DESCRIPTION: This PHP code snippet demonstrates how to sanitize user input using the `htmlspecialchars()` function to prevent XSS attacks. It takes raw user input `$raw_text` and converts potentially harmful characters to their HTML entities using `htmlspecialchars()`.  The function parameters `ENT_QUOTES` ensures that both single and double quotes are encoded, and `UTF-8` specifies the character encoding.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/xss-prevention@DxqQrToZSayWplKdCkTgT.md#_snippet_0

LANGUAGE: PHP
CODE:
```
$secure_text = htmlspecialchars($raw_text, ENT_QUOTES, 'UTF-8');
```

----------------------------------------

TITLE: Removing elements from a vector using Erase-Remove Idiom in C++
DESCRIPTION: This code snippet demonstrates the erase-remove idiom in C++. It initializes a std::vector<int> and removes all occurrences of the value 3. The std::remove algorithm moves elements to be removed towards the end, and numbers.erase() then removes those elements. Dependencies include <algorithm>, <vector>, and <iostream>.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/erase-remove@YvmjrZSAOmjhVPo05MJqN.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 3, 2, 4, 3, 5, 3};
    
    // Remove all occurrences of 3 from the vector.
    numbers.erase(std::remove(numbers.begin(), numbers.end(), 3), numbers.end());

    for (int number : numbers) {
        std::cout << number << " ";
    }

    return 0;
}
```

----------------------------------------

TITLE: MongoDB $lookup Example
DESCRIPTION: This JavaScript snippet demonstrates a practical example of using the $lookup operator within a MongoDB aggregation pipeline. It joins the 'orders' and 'products' collections based on the 'productId', then uses $unwind and $project to calculate and display the total amount of each order.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/lookup.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.orders.aggregate([
  {
    $lookup: {
      from: 'products',
      localField: 'productId',
      foreignField: 'productId',
      as: 'productDetails',
    },
  },
  {
    $unwind: '$productDetails',
  },
  {
    $project: {
      orderId: 1,
      totalAmount: {
        $multiply: ['$quantity', '$productDetails.price'],
      },
    },
  },
]);
```

----------------------------------------

TITLE: Committing Changes to Repository
DESCRIPTION: The `git commit` command saves the changes from the staging area to the repository. It creates a new commit object containing the changes, the committer information, and a commit message. A commit message should describe the changes being made.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/basic-git-usage@PtU5Qwfzn3N1i3oRlCGoR.md#_snippet_2

LANGUAGE: bash
CODE:
```
git commit
```

----------------------------------------

TITLE: Defining a Class in C++
DESCRIPTION: This code defines a class named `Student` in C++. It includes private data members (`roll_no`, `name`, `marks`) and public member functions (`set_data`, `display`).  The `set_data` function is used to assign values to the private variables and `display` function prints the values.  An object `s1` of type `Student` is also created. Depends on the iostream and string libraries.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/structures-and-classes@CMlWNQwpywNhO9B6Yj6Me.md#_snippet_2

LANGUAGE: C++
CODE:
```
class Student {
    int roll_no;
    std::string name;
    float marks;

public:
    void set_data(int r, std::string n, float m) {
        roll_no = r;
        name = n;
        marks = m;
    }

    void display() {
        std::cout << "Roll no: " << roll_no
                  << "\nName: " << name
                  << "\nMarks: " << marks << '\n';
    }
};

Student s1; // create an object of the 'Student' class
```

----------------------------------------

TITLE: Lambda Functions in C++11
DESCRIPTION: Shows how to define and use lambda functions, which are anonymous functions that can be created easily. They are often used for short, self-contained pieces of code that can be passed as arguments to other functions or stored in variables. It requires a C++11 compliant compiler.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-11--14@T6rCTv9Dxkm-tEA-l9XEv.md#_snippet_2

LANGUAGE: cpp
CODE:
```
auto add = [](int a, int b) -> int { return a + b; };
int sum = add(42, 13); // sum is equal to 55
```

----------------------------------------

TITLE: Homepage Route Handler
DESCRIPTION: Defines a route handler for the homepage (`/`). If the user is not logged in (no `userid` in the session), it redirects to the login page. Otherwise, it displays a welcome message with the user's `userid` and a logout link. Depends on express and express-session.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = function HomeHandler(req, res) {
  if (!req.session.userid) {
    return res.redirect('/login');
  }

  res.setHeader('Content-Type', 'text/HTML');
  res.write(`
    <h1>Welcome back ${req.session.userid}</h1>
    <a href=\"/logout\">Logout</a>
  `);

  res.end();
};
```

----------------------------------------

TITLE: MongoDB Transaction Example (JavaScript)
DESCRIPTION: This code snippet demonstrates how to start a transaction, perform operations within it (insertOne, updateOne, deleteOne), and then either commit the transaction if all operations are successful or abort it if any operation fails. It uses the MongoDB Node.js driver.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/transactions.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Start a session
const session = client.startSession();

// Start a transaction within the session
session.startTransaction();

try {
  // Perform various operations within the transaction
  const operation1 = await collection1.insertOne(doc1, { session });
  const operation2 = await collection2.updateOne(condition, update, {
    session,
  });
  const operation3 = await collection3.deleteOne(doc3, { session });

  // Commit the transaction
  await session.commitTransaction();
} catch (error) {
  // If any operation fails, abort the transaction
  await session.abortTransaction();
} finally {
  // End the session
  session.endSession();
}
```

----------------------------------------

TITLE: Implementing Coffee Decorators in PHP
DESCRIPTION: This code demonstrates the Decorator pattern using coffee add-ons like milk, whip, and vanilla. Each decorator class (`MilkCoffee`, `WhipCoffee`, `VanillaCoffee`) implements the `Coffee` interface and wraps another `Coffee` object. They extend the base coffee's behavior by adding their own cost and description. This shows how decorators can dynamically add responsibilities to objects.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_32

LANGUAGE: PHP
CODE:
```
class MilkCoffee implements Coffee
{
    protected $coffee;

    public function __construct(Coffee $coffee)
    {
        $this->coffee = $coffee;
    }

    public function getCost()
    {
        return $this->coffee->getCost() + 2;
    }

    public function getDescription()
    {
        return $this->coffee->getDescription() . ', milk';
    }
}

class WhipCoffee implements Coffee
{
    protected $coffee;

    public function __construct(Coffee $coffee)
    {
        $this->coffee = $coffee;
    }

    public function getCost()
    {
        return $this->coffee->getCost() + 5;
    }

    public function getDescription()
    {
        return $this->coffee->getDescription() . ', whip';
    }
}

class VanillaCoffee implements Coffee
{
    protected $coffee;

    public function __construct(Coffee $coffee)
    {
        $this->coffee = $coffee;
    }

    public function getCost()
    {
        return $this->coffee->getCost() + 3;
    }

    public function getDescription()
    {
        return $this->coffee->getDescription() . ', vanilla';
    }
}
```

----------------------------------------

TITLE: Defining a Person Interface in TypeScript
DESCRIPTION: This code snippet demonstrates how to define an interface named `Person` in TypeScript. The interface specifies the structure of a `Person` object, including required properties like `firstName` and `lastName`, an optional property `age`, and a method signature for `getFullName`. Any object implementing this interface must conform to this structure.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/interface-declaration@fY40W8prpgiNqRL50w7ub.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface Person {
  firstName: string;
  lastName: string;
  age?: number;

  getFullName(): string;
}
```

----------------------------------------

TITLE: Fetching data using async/await
DESCRIPTION: This JavaScript code snippet demonstrates fetching data from an API using `async/await`. The `fetchData` function is declared as `async`, allowing the use of the `await` keyword. The `await` keyword pauses execution until the promise returned by `fetch` and `response.json()` resolves. A `try/catch` block handles any errors that may occur during the fetch process.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/async-javascript.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const fetchData = async () => {
  try {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    console.log('Fetched data:', data);
  } catch (error) {
    console.error('Error fetching data:', error);
  }
};

fetchData();
```

----------------------------------------

TITLE: Displaying Network Interface Information
DESCRIPTION: This command displays information about all active network interfaces on the Linux system. While widely used, it is becoming obsolete and is being replaced by the `ip` command.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/networking/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
ifconfig
```

----------------------------------------

TITLE: Parsing JSON string to JavaScript object
DESCRIPTION: This code snippet demonstrates how to parse a JSON string into a JavaScript object using the `JSON.parse()` method. The parsed object's properties can then be accessed directly. The input is a JSON string and the output is a JavaScript object.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/parse-json.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const json = '{"name":"JavaScript","year":1995}';
const roadmap = JSON.parse(json);

console.log(roadmap.name); // JavaScript
console.log(roadmap.year); // 1995
```

----------------------------------------

TITLE: Using Polymorphism
DESCRIPTION: This snippet demonstrates how to use polymorphism by creating an array of `Animal` pointers, which point to `Dog` and `Cat` objects. When `makeSound` is called on each element, the appropriate version (either `Dog::makeSound` or `Cat::makeSound`) is executed, depending on the actual object type. This requires the class definitions from the previous snippet.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/object-oriented-programming@b3-QYKNcW3LYCNOza3Olf.md#_snippet_6

LANGUAGE: cpp
CODE:
```
Animal *animals[2] = {new Dog, new Cat};
animals[0]->makeSound(); // Output: Dog barks!
animals[1]->makeSound(); // Output: Cat meows!
```

----------------------------------------

TITLE: Implicitly Calling a Template Function in C++
DESCRIPTION: This code shows how the compiler can deduce the type parameter when calling the template function `max`.  Since the arguments are integers, the compiler infers that `T` should be `int`. The return value of the function call is stored in the integer variable `result`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/templates@-6AOrbuOE7DJCmxlcgCay.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int result = max(10, 20);
```

----------------------------------------

TITLE: Cache-Control with private directive
DESCRIPTION: Demonstrates using `Cache-Control: private` to indicate that a response is intended for a single user and should only be cached by the client (browser), not by any shared caches like proxies.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_1

LANGUAGE: html
CODE:
```
Cache-Control: private
```

----------------------------------------

TITLE: Using Class Member Functions in C++
DESCRIPTION: This snippet demonstrates how to use the public member functions of the `Student` class to set and display data. It calls the `set_data` function to initialize the `s1` object's data members and then calls the `display` function to print the data. Requires prior definition of the `Student` class and the object `s1`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/structures-and-classes@CMlWNQwpywNhO9B6Yj6Me.md#_snippet_3

LANGUAGE: C++
CODE:
```
s1.set_data(1, "Alice", 95.0);
s1.display();
```

----------------------------------------

TITLE: Create Blog Post Request Example
DESCRIPTION: This snippet illustrates the request body for creating a new blog post using the POST method. It defines the structure and data types for the 'title', 'content', 'category', and 'tags' fields, which represent the core attributes of a blog post. The endpoint should validate this request body.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/blogging-platform-api.md#_snippet_0

LANGUAGE: plaintext
CODE:
```
POST /posts
{
  "title": "My First Blog Post",
  "content": "This is the content of my first blog post.",
  "category": "Technology",
  "tags": ["Tech", "Programming"]
}
```

----------------------------------------

TITLE: InstanceType Usage in TypeScript
DESCRIPTION: Illustrates how to use the InstanceType utility type in TypeScript to get the instance type of a constructor function (class). It demonstrates usage with a class, `any`, `never`, `string`, and `Function` types, showcasing the resulting types or type errors. It highlights constraints on input types.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/instancetype@izGAjNtrh3BzQt3KiZX0W.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
  x = 0;
  y = 0;
}

type T0 = InstanceType<typeof C>;
// type T0 = C

type T1 = InstanceType<any>;
// type T1 = any

type T2 = InstanceType<never>;
// type T2 = never

type T3 = InstanceType<string>;
// ^ Type 'string' does not satisfy the constraint 'abstract new (...args: any) => any'.

type T4 = InstanceType<Function>;
// ^ Type 'Function' does not satisfy the constraint 'abstract new (...args: any) => any'.
```

----------------------------------------

TITLE: Creating a Dockerfile for a Node.js Application
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a Node.js application. It starts from a Node.js 14 base image, sets the working directory, copies application files, installs dependencies using npm, and specifies the command to start the application.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/docker-role.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
FROM node:14
WORKDIR /app
COPY . .
RUN npm install
CMD ["npm", "start"]
```

----------------------------------------

TITLE: throw Keyword Usage in C++
DESCRIPTION: This example demonstrates the use of the `throw` keyword to generate an exception of a specific type when an error condition is met within a `try` block.  The thrown exception is then handled by the corresponding `catch` block.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/exceptions@NJud5SXBAUZ6Sr78kZ7jx.md#_snippet_2

LANGUAGE: cpp
CODE:
```
try {
  int num1 = 10, num2 = 0;
  if (num2 == 0) {
    throw "Division by zero not allowed!";
  } else {
    int result = num1 / num2;
    std::cout << "Result: " << result << '\n';
  }
}
catch (const char* e) {
  std::cout << "Error: " << e << '\n';
}
```

----------------------------------------

TITLE: Defining a Class in C++
DESCRIPTION: This code snippet defines a simple `Dog` class with data members `name` and `age`, and a member function `bark`. It illustrates the basic structure of a class in C++ and how to define its members. This allows the creation of `Dog` objects with specific properties and behaviors.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/object-oriented-programming@b3-QYKNcW3LYCNOza3Olf.md#_snippet_0

LANGUAGE: cpp
CODE:
```
class Dog {
public:
    std::string name;
    int age;

    void bark() {
        std::cout << name << " barks!\n";
    }
};
```

----------------------------------------

TITLE: Controlled Input Component in React (JSX)
DESCRIPTION: Demonstrates a controlled input component in React. The `value` prop is bound to a state variable, and the `onChange` prop is used to update the state whenever the input value changes. The component's value is controlled by the parent component.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/controlled-vs-uncontrolled.md#_snippet_0

LANGUAGE: JSX
CODE:
```
// Controlled:
<input type="text" value={value} onChange={handleChange} />
```

----------------------------------------

TITLE: Cloning a Repository using git clone
DESCRIPTION: This command clones a remote Git repository to a local machine. It creates a copy of the repository, including all its files and history, allowing for local development and contribution.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/collaboration@bXfCUG3h1TIFPgD4WUDph.md#_snippet_0

LANGUAGE: Git
CODE:
```
git clone
```

----------------------------------------

TITLE: Defining a Type Predicate in TypeScript
DESCRIPTION: This snippet demonstrates how to define a type predicate function in TypeScript. The `isString` function checks if a given value is a string and returns `true` if it is, narrowing the type of the value to string within the scope where the function returns `true`. It is used for type guards.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/type-predicates@1DOSAieOmWUNNsQQrqf2m.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function isString(value: unknown): value is string {
  return typeof value === 'string';
}
```

----------------------------------------

TITLE: Basic Exception Handling in C++
DESCRIPTION: This code snippet demonstrates the basic usage of exception handling in C++. It defines a `divide` function that throws an exception (a C-style string) if the divisor is zero. The `main` function uses a `try` block to call `divide` and catch the exception if it's thrown, printing an error message to `std::cerr`. Dependencies: iostream.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/exception-handling@B2SGBENzUMl0SAjG4j91V.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

int divide(int a, int b) {
    if (b == 0) {
        throw "Division by zero!";
    }
    return a / b;
}

int main() {
    int num1, int num2;

    std::cout << "Enter two numbers for division: ";
    std::cin >> num1 >> num2;

    try {
        int result = divide(num1, num2);
        std::cout << "The result is: " << result << '\n';
    } catch (const char* msg) {
        std::cerr << "Error: " << msg << '\n';
    }

    return 0;
}
```

----------------------------------------

TITLE: Template Function Example in C++
DESCRIPTION: Illustrates the use of templates in C++ to create a generic `print` function. The template allows the function to work with different data types without explicit overloading. The compiler generates specific code for each type used at compile time. Requires the iostream library.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/static-polymorphism@obZIxRp0eMWdG7gplNIBc.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>

// Template function to print any type
template<typename T>
void print(const T& value) {
    std::cout << "Printing value: " << value << '\n';
}

int main() {
    print(42);           // int
    print(3.14159);      // double
    print("Hello");      // const char*

    return 0;
}
```

----------------------------------------

TITLE: Cache-Control with max-age directive
DESCRIPTION: Illustrates how to specify the maximum time for which content is considered fresh using `Cache-Control: max-age=seconds`. This tells caches how long they can serve the content without revalidation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_5

LANGUAGE: html
CODE:
```
Cache-Control: max-age=3600, public
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options in JSON
DESCRIPTION: This JSON snippet shows a sample tsconfig.json file, which configures the TypeScript compiler. It specifies the target JavaScript version, module system, strict type checking, output directory, root directory, files to include, and files to exclude. The `compilerOptions` section defines the core compilation settings, while `include` and `exclude` control which files are processed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/tsconfigjson@DmqrX56d9KnBcOSwlJR2q.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "strict": true,
    "outDir": "./dist",
    "rootDir": "./src",
  },
  "exclude": ["node_modules"],
  "include": ["src"]
}
```

----------------------------------------

TITLE: Try/Catch with Async/Await in JavaScript
DESCRIPTION: This code snippet demonstrates how to use a `try/catch` statement with `async/await` to handle errors. The `async` function `main` awaits a Promise, and if the Promise rejects or an error is thrown within the `try` block, the `catch` block will execute, logging the error message.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/error-in-async-await.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
async function main() {
  try {
    const result = await promise;
    console.log(result);
  } catch (error) {
    console.log(error.message);
  }
}
```

----------------------------------------

TITLE: Installing a Package using apt-get
DESCRIPTION: This command is used to install a software package on Debian-based Linux distributions using the `apt-get` package manager. `sudo` is required for administrative privileges to install software. Replace `<package-name>` with the actual name of the software package you wish to install. The command will download and install the package and any dependencies.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/package-management/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
sudo apt-get install <package-name>
```

----------------------------------------

TITLE: Merging Arrays using concat() in JavaScript
DESCRIPTION: This snippet demonstrates merging two arrays, `arr1` and `arr2`, into a new array `arr3` using the `concat()` method. The `concat()` method does not modify the original arrays but returns a new array containing all the elements from the concatenated arrays. The resulting array is then printed to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/merge-arrays.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];

const arr3 = arr1.concat(arr2);
console.log(arr3); // [1, 2, 3, 4, 5, 6]
```

----------------------------------------

TITLE: Abstract Factory: DoorFactory Interface and Implementations in PHP
DESCRIPTION: Defines the DoorFactory interface and its concrete implementations, WoodenDoorFactory and IronDoorFactory. Each factory provides methods to create a Door and a DoorFittingExpert, ensuring that the correct expert is paired with the corresponding door type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_9

LANGUAGE: PHP
CODE:
```
interface DoorFactory
{
    public function makeDoor(): Door;
    public function makeFittingExpert(): DoorFittingExpert;
}

// Wooden factory to return carpenter and wooden door
class WoodenDoorFactory implements DoorFactory
{
    public function makeDoor(): Door
    {
        return new WoodenDoor();
    }

    public function makeFittingExpert(): DoorFittingExpert
    {
        return new Carpenter();
    }
}

// Iron door factory to get iron door and the relevant fitting expert
class IronDoorFactory implements DoorFactory
{
    public function makeDoor(): Door
    {
        return new IronDoor();
    }

    public function makeFittingExpert(): DoorFittingExpert
    {
        return new Welder();
    }
}
```

----------------------------------------

TITLE: Installing package using apt-get on Debian-based system
DESCRIPTION: This snippet shows how to update the package list and install a new package using `apt-get` on Debian-based systems like Ubuntu. `sudo apt-get update` refreshes the package index, and `sudo apt-get install package-name` installs the specified package.  Replace `package-name` with the desired package name. Requires root privileges.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/package-management/finding-installing-packages.md#_snippet_0

LANGUAGE: Shell
CODE:
```
sudo apt-get update
sudo apt-get install package-name
```

----------------------------------------

TITLE: Initializing Database Connection
DESCRIPTION: This Go code initializes the database connection using GORM and Postgres. It loads the database URL from the environment variables using `godotenv`, connects to the database, and performs automatic schema migration for the `Book` model.  Error handling is included for connection and migration failures.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_5

LANGUAGE: go
CODE:
```
package api

import (
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"log"
	"net/http"
	"os"
)

var DB *gorm.DB

func InitDB() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}

	dsn := os.Getenv("DB_URL")
	DB, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}

	// migrate the schema
	if err := DB.AutoMigrate(&Book{}); err != nil {
		log.Fatal("Failed to migrate schema:", err)
	}
}
```

----------------------------------------

TITLE: Implementing Autoloading with spl_autoload_register (PHP)
DESCRIPTION: This snippet demonstrates how to implement autoloading in PHP using the spl_autoload_register function. It registers an anonymous function that includes a PHP file based on the class name when a class is instantiated. It assumes that the class file is named after the class with a .php extension and resides in the same directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/autoloading@qFiTsf6Es-gwqe6J6bdL1.md#_snippet_0

LANGUAGE: php
CODE:
```
spl_autoload_register(function ($class_name) {
    include $class_name . '.php';
});

$obj = new MyClass();
```

----------------------------------------

TITLE: Get Blog Post Request Example
DESCRIPTION: This snippet illustrates how to retrieve a specific blog post using the GET method. It requests the /posts/{id} endpoint, where {id} is the identifier of the desired blog post. A successful request should return a 200 OK status code and the blog post data in JSON format.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/blogging-platform-api.md#_snippet_6

LANGUAGE: plaintext
CODE:
```
GET /posts/1
```

----------------------------------------

TITLE: Parameters Utility Type Usage
DESCRIPTION: Demonstrates the usage of the `Parameters` utility type in TypeScript to extract the parameter types from different function types.  It shows how the resulting type varies based on the function's signature, including functions with no parameters, single parameters, generic parameters, and declared functions. It also illustrates the behavior with `any`, `never`, `string`, and `Function` types.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/parameters@a7hl0iMZ-jcUACxqIYVqv.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type T0 = Parameters<() => string>;
// type T0 = []

type T1 = Parameters<(s: string) => void>;
// type T1 = [s: string]

type T2 = Parameters<<T>(arg: T) => T>;
// type T2 = [arg: unknown]

declare function f1(arg: { a: number; b: string }): void;
type T3 = Parameters<typeof f1>;
// type T3 = [arg: {
//     a: number;
//     b: string;
// }]

type T4 = Parameters<any>;
// type T4 = unknown[]

type T5 = Parameters<never>;
// type T5 = never

type T6 = Parameters<string>;
// ^ Type 'string' does not satisfy the constraint '(...args: any) => any'.

type T7 = Parameters<Function>;
// ^ Type 'Function' does not satisfy the constraint '(...args: any) => any'.
```

----------------------------------------

TITLE: Function Declaration with Types
DESCRIPTION: This code snippet demonstrates a function declaration in TypeScript with explicitly typed parameters and a return type. The `add` function takes two number parameters (`a` and `b`) and returns their sum, which is also a number. This enforces type safety by ensuring the function only accepts numbers as input and returns a number as output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/typing-functions@9FIhHwDNzyKpb42NmSv3K.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function add(a: number, b: number): number {
  return a + b;
}
```

----------------------------------------

TITLE: Using std::any for Dynamic Typing in C++17
DESCRIPTION: This code snippet demonstrates the use of `std::any` to achieve dynamic typing in C++17. `std::any` is a type-safe container that can hold values of any type. The example shows how to assign values of different types (int, double, string) to a `std::any` object and then use `std::any_cast` to retrieve the value as the original type.  It requires the `<iostream>` and `<any>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/dynamic-typing@i0EAFEUB-F0wBJWOtrl1A.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <any>

int main() {
    std::any any_value;

    any_value = 42;
    std::cout << "int value: " << std::any_cast<int>(any_value) << '\n';

    any_value = 3.14;
    std::cout << "double value: " << std::any_cast<double>(any_value) << '\n';

    any_value = std::string("Hello, world!");
    std::cout << "string value: " << std::any_cast<std::string>(any_value) << '\n';

    return 0;
}
```

----------------------------------------

TITLE: Using a Type Predicate in TypeScript
DESCRIPTION: This code snippet shows how to utilize a type predicate function like `isString` within another function to conditionally narrow the type of a variable. If `isString(x)` returns `true`, the `x` variable is treated as a string within the `if` block, allowing string-specific methods like `toUpperCase()` to be called. Otherwise, the code proceeds to the `else` block, where `x` is treated as its original `unknown` type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/type-predicates@1DOSAieOmWUNNsQQrqf2m.md#_snippet_1

LANGUAGE: typescript
CODE:
```
function example(x: unknown) {
  if (isString(x)) {
    // We can now call any 'string' method on 'x'.
    x.toUpperCase();
  } else {
    console.log(x);
  }
}
```

----------------------------------------

TITLE: Creating a Custom Role in MongoDB with JavaScript
DESCRIPTION: This code snippet demonstrates how to create a custom role in MongoDB using the `db.createRole()` method.  It defines the role name, privileges (actions allowed on a specific database and collection), and any inherited roles. The role is created with permissions to find, insert, update, and remove documents in the `exampleDB` database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-security/role-based-access-control.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.createRole({
  role: 'customRole',
  privileges: [
    {
      resource: { db: 'exampleDB', collection: '' },
      actions: ['find', 'insert', 'update', 'remove'],
    },
  ],
  roles: [],
});
```

----------------------------------------

TITLE: Fetching Data with React Native Fetch API
DESCRIPTION: This snippet demonstrates how to use the `fetch` API in React Native to make an HTTP GET request to a specified URL. It retrieves JSON data and logs it to the console, also including error handling for failed requests. The URL 'https://jsonplaceholder.typicode.com/todos/1' serves as the endpoint to retrieve data from.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/react-native/content/networking/index.md#_snippet_0

LANGUAGE: jsx
CODE:
```
fetch('https://jsonplaceholder.typicode.com/todos/1')
  .then((response) => response.json())
  .then((json) => console.log(json))
  .catch((error) => console.error(error));
```

----------------------------------------

TITLE: Viewing active TCP/IP connections using netstat -at
DESCRIPTION: This command displays all active TCP/IP network connections on a Linux system. The `netstat` utility is used with the `-at` options. The `-a` option shows both listening and non-listening sockets, and the `-t` option shows TCP connections.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/networking/tcp-ip.md#_snippet_0

LANGUAGE: bash
CODE:
```
netstat -at
```

----------------------------------------

TITLE: Displaying the PATH Environment Variable
DESCRIPTION: This shell command displays the current value of the $PATH environment variable. The $PATH variable contains a colon-separated list of directories that the shell searches for executable files when a command is entered. This allows users to run commands without specifying their absolute paths.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-basics/command-path.md#_snippet_0

LANGUAGE: Shell
CODE:
```
echo $PATH
```

----------------------------------------

TITLE: Generating JSON object from text
DESCRIPTION: This prompt requests a language model to generate a JSON object from a given text review. The JSON object should contain the product name, a boolean indicating whether the review is positive, and a one-sentence summary of the review.  The text review is enclosed within `<review>` tags. The model's understanding of context and sentiment is crucial for producing accurate JSON output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/good-prompts/structured-data.md#_snippet_0

LANGUAGE: text
CODE:
```
Help me generate a JSON object with keys `product` (name of product), `isPositive` (boolean), `summary` (one sentence summary of review) from the text enclosed in <review> tag.

<review>Regrettably, the "XYZ ProTech 2000" product failed to meet even the most basic expectations. From its lackluster build quality and confusing user interface to its abysmal performance and disappointing customer support, this product left me deeply dissatisfied. If you're considering purchasing the "XYZ ProTech 2000," I strongly advise you to explore alternative options that offer superior quality and reliability.
</review>
```

----------------------------------------

TITLE: Implementing Copy-Swap in C++ String Class
DESCRIPTION: This code demonstrates the copy-swap idiom within a `String` class in C++. The assignment operator takes the right-hand side object by value, creating a copy. It then swaps the contents of the left-hand side object with the copy. The temporary copy is automatically destroyed when the function exits, releasing the old resources. This approach simplifies the assignment operator and ensures exception safety.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/copy-and-swap@lxAzI42jQdaofzQ5MXebG.md#_snippet_0

LANGUAGE: cpp
CODE:
```
class String {
    // ... rest of the class ...

    String(const String& other);
    
    friend void swap(String& first, String& second) {
        using std::swap; // for arguments-dependent lookup (ADL)
        swap(first.size_, second.size_);
        swap(first.buffer_, second.buffer_);
    }

    String& operator=(String other) {
        swap(*this, other);
        return *this;
    }
};
```

----------------------------------------

TITLE: Thread Support in C++11
DESCRIPTION: Demonstrates the basic usage of the `<thread>` library for creating and managing threads. This example creates a new thread that prints a message to the console, and then waits for the thread to finish execution using `join()`. Requires including the `<iostream>` and `<thread>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-11--14@T6rCTv9Dxkm-tEA-l9XEv.md#_snippet_4

LANGUAGE: cpp
CODE:
```
std::thread t([]() { std::cout << "Hello from another thread\n"; });
t.join();
```

----------------------------------------

TITLE: Generating JWT Token in Go
DESCRIPTION: This Go code snippet defines a `GenerateJWT` function that handles user login requests. It expects a JSON payload containing username and password, checks for default credentials ("admin" and "password"), and generates a JWT token with an expiration time of 15 minutes if authentication is successful. The generated token is returned in the response.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_28

LANGUAGE: go
CODE:
```
package api

import (
	//other imports
	"github.com/golang-jwt/jwt/v5"
)

func GenerateJWT(c *gin.Context) {
	var loginRequest LoginRequest
	if err := c.ShouldBindJSON(&loginRequest); err != nil {
		ResponseJSON(c, http.StatusBadRequest, "Invalid request payload", nil)
		return
	}
	if loginRequest.Username != "admin" || loginRequest.Password != "password" {
		ResponseJSON(c, http.StatusUnauthorized, "Invalid credentials", nil)
		return
	}
	expirationTime := time.Now().Add(15 * time.Minute)
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"exp": expirationTime.Unix(),
	})
	// Sign the token
	tokenString, err := token.SignedString(jwtSecret)
	if err != nil {
		ResponseJSON(c, http.StatusInternalServerError, "Could not generate token", nil)
		return
	}
	ResponseJSON(c, http.StatusOK, "Token generated successfully", gin.H{"token": tokenString})
}
```

----------------------------------------

TITLE: Registering Homepage Route
DESCRIPTION: Registers the homepage route handler with the Express application. Maps the GET request to '/' to the `HomeHandler` function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const HomeHandler = require('./handlers/home.js');

app.get('/', HomeHandler);
```

----------------------------------------

TITLE: Fetching data using promises
DESCRIPTION: This code snippet demonstrates fetching data from an API using promises in JavaScript. The `fetch` function returns a promise that resolves with the response. The `.then()` method is used to chain operations, first parsing the response as JSON and then logging the fetched data to the console. The `.catch()` method handles any errors that occur during the process.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/async-javascript.md#_snippet_2

LANGUAGE: javascript
CODE:
```
fetch('https://api.example.com/data')
  .then((response) => response.json())
  .then((data) => {
    console.log('Fetched data:', data);
  })
  .catch((error) => {
    console.error('Error fetching data:', error);
  });
```

----------------------------------------

TITLE: Listing Installed Packages with dnf
DESCRIPTION: This command lists all installed packages on Fedora-based systems using the `dnf` package manager. It retrieves information about the installed software packages. It may require sudo privileges depending on the system configuration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/package-management/listing-installed-packages.md#_snippet_1

LANGUAGE: shell
CODE:
```
dnf list installed
```

----------------------------------------

TITLE: Creating tsconfig.json
DESCRIPTION: This JSON configuration file specifies the compiler options for building your TypeScript project.  It defines settings such as the target ECMAScript version, module system, strict mode, output directory, and root directory for the TypeScript source files.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/installation-and-configuration@dA8CNQOgJRDa0T7rmyS7f.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "strict": true,
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "exclude": ["node_modules"]
}
```

----------------------------------------

TITLE: Overloading operator<< with ADL in C++
DESCRIPTION: This code demonstrates Argument Dependent Lookup (ADL) in C++ using namespaces and an overloaded `operator<<`. The overloaded operator is defined within `MyNamespace`, and ADL allows the compiler to find this operator when used with an object of type `MyNamespace::MyClass`, even though the operator is not explicitly imported or qualified in the `main` function. Requires iostream to be included.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/argument-dependent-lookup-adl@YSWN7nS8vA9nMldSUrZRT.md#_snippet_0

LANGUAGE: cpp
CODE:
```
namespace MyNamespace {
    class MyClass {
    public:
        int value;
    };

    std::ostream& operator<<(std::ostream& os, const MyClass& obj) {
        os << "MyClass: " << obj.value;
        return os;
    }
}

int main() {
    MyNamespace::MyClass obj;
    obj.value = 42;
    using std::cout; // Required to use 'cout' without fully qualifying it.
    cout << obj << '\n'; // ADL is used to find the correct overloaded 'operator<<'.
}
```

----------------------------------------

TITLE: Function Overloading Example in C++
DESCRIPTION: Demonstrates function overloading in C++ with the `print` function for different data types (int, double, const char*). The compiler selects the appropriate function based on the argument type at compile time. This example requires the iostream library.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/static-polymorphism@obZIxRp0eMWdG7gplNIBc.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

void print(int i) {
    std::cout << "Printing int: " << i << '\n';
}

void print(double d) {
    std::cout << "Printing double: " << d << '\n';
}

void print(const char* s) {
    std::cout << "Printing string: " << s << '\n';
}

int main() {
    print(5);          // Calls print(int i)
    print(3.14);       // Calls print(double d)
    print("Hello");    // Calls print(const char* s)

    return 0;
}
```

----------------------------------------

TITLE: Exception Handling with Standard Exceptions in C++
DESCRIPTION: This code snippet illustrates exception handling using standard exception classes from the `<stdexcept>` library. The `divide` function throws a `std::runtime_error` if the divisor is zero. The `main` function uses a `try` block to call `divide` and catches exceptions derived from `std::exception`, using the `what()` method to display the error message. Dependencies: iostream, stdexcept.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/exception-handling@B2SGBENzUMl0SAjG4j91V.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <stdexcept>

int divide(int a, int b) {
    if (b == 0) {
        throw std::runtime_error("Division by zero!");
    }
    return a / b;
}

int main() {
    int num1, int num2;

    std::cout << "Enter two numbers for division: ";
    std::cin >> num1 >> num2;

    try {
        int result = divide(num1, num2);
        std::cout << "The result is: " << result << '\n';
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << '\n';
    }

    return 0;
}
```

----------------------------------------

TITLE: NGINX Configuration for PHP-FPM
DESCRIPTION: This code snippet configures Nginx to use PHP-FPM for handling PHP files. It sets the `fastcgi_pass` directive to the Unix socket where PHP-FPM is listening, and also includes the `fastcgi_params` file which contains necessary FastCGI parameters. The `$uri` represents the incoming request, and the location block ensures that only requests ending in `.php` are processed by PHP-FPM.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/php-fpm@AoGS-5MSkp8gtJFQVPSBE.md#_snippet_0

LANGUAGE: bash
CODE:
```
location ~ \.php$ {
    try_files $uri =404;
    fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
}
```

----------------------------------------

TITLE: Creating an Index in MongoDB with createIndex()
DESCRIPTION: This snippet demonstrates how to create an index on specific fields within a MongoDB collection using the `createIndex()` method. Indexes are crucial for optimizing query performance by reducing the number of documents scanned during queries. The example creates a compound index on `field1` in ascending order and `field2` in descending order.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/query-optimization.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
db.collection.createIndex({ field1: 1, field2: -1 });
```

----------------------------------------

TITLE: Creating a Single Field Index in MongoDB
DESCRIPTION: This snippet demonstrates how to create a single-field index on the 'username' field in the 'users' collection using the createIndex() method. The '1' indicates ascending order. No external dependencies are required other than a MongoDB connection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/indexes.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.users.createIndex({ username: 1 });
```

----------------------------------------

TITLE: Defining and Using a TypeScript Interface
DESCRIPTION: This code snippet defines a TypeScript interface named `Person` with properties `name` (string) and `age` (number). It then defines a function `greet` that takes a `Person` object as input and returns a greeting string using the person's name. This demonstrates how to define an interface and use it to type function parameters, ensuring type safety.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/interface@mVKsM7R4Ivpdhnbwt1aRb.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface Person {
  name: string;
  age: number;
}

function greet(person: Person) {
  return 'Hello ' + person.name;
}
```

----------------------------------------

TITLE: Enabling Strict Mode in JavaScript
DESCRIPTION: This snippet demonstrates how to enable strict mode in JavaScript. Strict mode helps to write safer and more robust code by throwing errors for common coding mistakes. It can be applied to entire files or individual functions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/javascript.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
'use strict';
```

----------------------------------------

TITLE: Record Utility Type in TypeScript
DESCRIPTION: This code snippet showcases the `Record` utility type in TypeScript.  It defines an interface `CatInfo` representing information about a cat, and a type `CatName` which is a union of string literals representing possible cat names.  It then uses `Record<CatName, CatInfo>` to define the type of the `cats` object, ensuring that the keys of the object are valid cat names and the values are `CatInfo` objects. This ensures type safety when accessing properties of the `cats` object.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/record@DRdBmF5Dt_r09LoPOxOuq.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface CatInfo {
  age: number;
  breed: string;
}

type CatName = 'miffy' | 'boris' | 'mordred';

const cats: Record<CatName, CatInfo> = {
  miffy: { age: 10, breed: 'Persian' },
  boris: { age: 5, breed: 'Maine Coon' },
  mordred: { age: 16, breed: 'British Shorthair' },
};
```

----------------------------------------

TITLE: Removing element from vector using std::remove in C++
DESCRIPTION: This code demonstrates the use of `std::remove` to remove all occurrences of a specific value from a vector. It requires `<algorithm>`, `<vector>`, and `<iostream>`. The `std::remove` function shifts elements to overwrite those being removed, and `vector::erase` resizes the vector to physically remove the elements from the end.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/algorithms@whyj6Z4RXFsVQYRfYYn7B.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> nums = {5, 6, 7, 6, 8, 6, 9, 6, 10};
    nums.erase(std::remove(nums.begin(), nums.end(), 6), nums.end());

    for (int num : nums) {
        std::cout << num << ' ';
    }
    // Output: 5 7 8 9 10
}
```

----------------------------------------

TITLE: Login Route Handler
DESCRIPTION: Defines a route handler for the login page (`/login`). If the user is already logged in, it redirects to the homepage. Otherwise, it displays a login form. Depends on express and express-session.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_6

LANGUAGE: javascript
CODE:
```
module.exports = function LoginHandler(req, res) {
  if (req.session.userid) {
    return res.redirect('/');
  }

  res.setHeader('Content-Type', 'text/HTML');
  res.write(`
    <h1>Login</h1>
    <form method=\"post\" action=\"/process-login\">
      <input type=\"text\" name=\"username\" placeholder=\"Username\" /> <br>
      <input type=\"password\" name=\"password\" placeholder=\"Password\" /> <br>
      <button type=\"submit\">Login</button>
    </form>
  `);

  res.end();
};
```

----------------------------------------

TITLE: Event Listener Implementation for DOM Elements (JavaScript)
DESCRIPTION: This code snippet demonstrates event bubbling in JavaScript using event listeners attached to parent and child elements. When the child element is clicked, its click handler executes first, followed by the parent's click handler due to event bubbling. The `event.stopPropagation()` method can be used to prevent this bubbling.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/event-bubbling.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const parent = document.querySelector('.parent');
const child = document.querySelector('.child');

// Scenario of clicking on the child element
parent.addEventListener('click', () => {
  console.log('Handled Last');
});

child.addEventListener('click', () => {
  console.log('Handled First');
});
```

----------------------------------------

TITLE: Retrieving a Single Book
DESCRIPTION: This Go code defines a handler function `GetBook` that retrieves a single book from the database based on its ID. It uses GORM to query the `Book` record with the given ID and returns a JSON response containing the book. If the book is not found, it returns a 404 status code.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_8

LANGUAGE: go
CODE:
```
func GetBook(c *gin.Context) {
	var book Book
	if err := DB.First(&book, c.Param("id")).Error; err != nil {
		ResponseJSON(c, http.StatusNotFound, "Book not found", nil)
		return
	}
	ResponseJSON(c, http.StatusOK, "Book retrieved successfully", book)
}
```

----------------------------------------

TITLE: Starting a PHP Session
DESCRIPTION: This snippet demonstrates how to start a PHP session. The `session_start()` function initializes the session and retrieves any existing session data for the current user.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/sessions@qobzzgzArNHLLn9Oiqc6G.md#_snippet_0

LANGUAGE: PHP
CODE:
```
session_start();
```

----------------------------------------

TITLE: Escaping Content for XSS Prevention (JavaScript)
DESCRIPTION: This snippet shows how to escape user input before rendering it in the browser to prevent Cross-Site Scripting (XSS) attacks. The `sanitize` function is a placeholder for a library or custom function that properly escapes or encodes HTML entities in the user input. This prevents malicious scripts embedded in the input from being executed when the content is rendered. The example shows JSX syntax within a React component.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/security-vulnerabilities.md#_snippet_1

LANGUAGE: javascript
CODE:
```
<div>{sanitize(userInput)}</div>
```

----------------------------------------

TITLE: Protecting API Routes with JWT Middleware in Go
DESCRIPTION: This Go code snippet updates the `main` function to include a route for generating tokens and to protect API routes using the `JWTAuthMiddleware`. It defines a public route `/token` for generating JWTs and groups the other API routes under the middleware, requiring a valid token for access.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_29

LANGUAGE: go
CODE:
```
package main

import (
	"github.com/gin-gonic/gin"
	"go_book_api/api"
)

func main() {
	api.InitDB()
	r := gin.Default()

	// Public routes
	r.POST("/token", api.GenerateJWT)

	// protected routes
	protected := r.Group("/", api.JWTAuthMiddleware())
	{
		protected.POST("/book", api.CreateBook)
		protected.GET("/books", api.GetBooks)
		protected.GET("/book/:id", api.GetBook)
		protected.PUT("/book/:id", api.UpdateBook)
		protected.DELETE("/book/:id", api.DeleteBook)
	}

	r.Run(":8080")
}
```

----------------------------------------

TITLE: Generic Class in TypeScript
DESCRIPTION: This TypeScript code defines a generic class called `GenericNumber`. This class has a type parameter `T` which is used to define the type of the `zeroValue` property and the parameters and return type of the `add` method. The example demonstrates creating an instance of `GenericNumber` with the type parameter set to `number` and assigning values to the `zeroValue` and `add` properties.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/generic-types@T2-VAVfntouJOoWHpHZ3n.md#_snippet_1

LANGUAGE: typescript
CODE:
```
class GenericNumber<T> {
  zeroValue: T;
  add: (x: T, y: T) => T;
}

let myGenericNumber = new GenericNumber<number>();
myGenericNumber.zeroValue = 0;
myGenericNumber.add = function (x, y) {
  return x + y;
};
```

----------------------------------------

TITLE: Java: Error Handling with Try-Catch-Finally
DESCRIPTION: This code demonstrates error handling in Java using a try-catch-finally block. It defines a method `divide` that attempts to divide two integers and handles `ArithmeticException` (division by zero) and general `Exception` cases. The `finally` block ensures that a message is printed regardless of whether an exception occurred.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/java-vs-python.md#_snippet_0

LANGUAGE: java
CODE:
```
// java code examples
public class ErrorHandlingExample {
    public static void main(String[] args) {
        System.out.println(divide(10, 2)); // Result: 5.0
        System.out.println(divide(10, 0)); // Error: Division by zero is not allowed.
    }

    public static String divide(int a, int b) {
        try {
            int result = a / b;
            return "Result: " + result;
        } catch (ArithmeticException e) {
            return "Error: Division by zero is not allowed.";
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        } finally {
            System.out.println("Execution completed.");
        }
    }
}
```

----------------------------------------

TITLE: Creating a MongoDB Collection with Options
DESCRIPTION: This snippet demonstrates how to create a collection in MongoDB with specific options using the `db.createCollection()` method. The options parameter allows for configuring properties like `capped`, `size`, and `max`. A MongoDB database connection is the only prerequisite.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/index.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.createCollection('users', { capped: true, size: 100000, max: 5000 });
```

----------------------------------------

TITLE: Post-increment Operator in JavaScript
DESCRIPTION: This code snippet demonstrates the post-increment operator in JavaScript.  It returns the original value of the variable 'x' and then increments it by 1.  The initial value of 'x' is 1. The first console.log will output 1, and the second console.log will output 2.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/increment-operator.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
let x = 1;
console.log(x++); // 1
console.log(x); // 2
```

----------------------------------------

TITLE: Retrieving Binary Data from MongoDB with Python
DESCRIPTION: This code snippet shows how to retrieve binary data from a MongoDB collection using the `find_one` method and save it to a new file. It retrieves a document by name, accesses the `image_data` field (which contains the binary data), and writes the data to a file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/binary-data.md#_snippet_1

LANGUAGE: Python
CODE:
```
# Retrieve binary data from the database
document = data_collection.find_one({"name": "Sample Image"})
retrieved_image_data = document["image_data"]

# Save the retrieved binary data to a new file
with open("retrieved_image.jpg", "wb") as f:
    f.write(retrieved_image_data)
```

----------------------------------------

TITLE: Restarting a Service using systemctl (Bash)
DESCRIPTION: This command restarts a specified service in Linux utilizing the systemctl utility. Root privileges, commonly acquired via sudo, are required. Replace `service_name` with the name of the service to restart. This command stops and then starts the service, applying any configuration changes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/service-management/start-stop-service.md#_snippet_2

LANGUAGE: bash
CODE:
```
sudo systemctl restart service_name
```

----------------------------------------

TITLE: Creating custom error and implementing Error() method in Go
DESCRIPTION: This code snippet demonstrates how to define a custom error type `MyError` as a struct with fields `Code` and `Message`. It implements the `Error()` method to satisfy the `error` interface. The `mightFail` function returns either a `MyError` instance or `nil` depending on the input flag. The `main` function shows how to use type assertion to check if an error is of type `MyError` and access its fields.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/golang/content/custom-error-types.md#_snippet_0

LANGUAGE: Go
CODE:
```
package main

import (
    "fmt"
)

//The struct to hold the error
type MyError struct {
    Code    int
    Message string
}

//The custom Error method.
func (e MyError) Error() string {
    return fmt.Sprintf("Error %d: %s", e.Code, e.Message)
}

func mightFail(flag bool) error {
    if flag {
        return MyError{Code: 500, Message: "Internal error occurred"}
    }
    return nil
}

func main() {
    err := mightFail(true)
    if err != nil {
        if myErr, ok := err.(MyError); ok {
            fmt.Printf("Handled custom error with code %d and message: %s\n", myErr.Code, myErr.Message)
        } else {
            fmt.Println("An error occurred:", err)
        }
    }
}
```

----------------------------------------

TITLE: Defining TypeScript Type Aliases
DESCRIPTION: This code snippet demonstrates how to define type aliases for primitive types (string, number) and a complex object type in TypeScript. It creates aliases 'Name' for string, 'Age' for number, and 'User' for an object with 'name' and 'age' properties. The user object is then declared using the 'User' type alias.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/type-aliases@M_3O21zjppgWptIT5dtu8.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type Name = string;
type Age = number;
type User = { name: Name; age: Age };

const user: User = { name: 'John', age: 30 };
```

----------------------------------------

TITLE: Creating a Single Field Index in MongoDB
DESCRIPTION: This snippet demonstrates how to create a basic ascending single field index on the 'name' field of the 'users' collection in MongoDB. It uses the `db.collection.createIndex()` method with the field name and sorting order (1 for ascending).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/single-field.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.users.createIndex({ name: 1 });
```

----------------------------------------

TITLE: Implementing Basic Authentication Middleware in Node.js
DESCRIPTION: This code defines the authentication middleware for the Express server. It extracts and decodes the username and password from the 'Authorization' header using base64 decoding. If the credentials match 'admin:admin', it allows access, otherwise it sends a 401 Unauthorized response with a 'WWW-Authenticate' header.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-basic-authentication.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// src/auth.js
const base64 = require('base-64');

function decodeCredentials(authHeader) {
  // ...
}

module.exports = function (req, res, next) {
  // Take the header and decode credentials
  const [username, password] = decodeCredentials(
    req.headers.authorization || ''
  );

  // Verify the credentials
  if (username === 'admin' && password === 'admin') {
    return next();
  }

  // Respond with authenticate header on auth failure.
  res.set('WWW-Authenticate', 'Basic realm="user_pages"');
  res.status(401).send('Authentication required.');
};
```

----------------------------------------

TITLE: Updating a Book
DESCRIPTION: This Go code defines a handler function `UpdateBook` that updates an existing book in the database. It retrieves the book by ID, binds the request body to update the book's fields, saves the updated book using GORM, and returns a JSON response indicating success or failure.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_9

LANGUAGE: go
CODE:
```
func UpdateBook(c *gin.Context) {
	var book Book
	if err := DB.First(&book, c.Param("id")).Error; err != nil {
		ResponseJSON(c, http.StatusNotFound, "Book not found", nil)
		return
	}

	// bind the request body
	if err := c.ShouldBindJSON(&book); err != nil {
		ResponseJSON(c, http.StatusBadRequest, "Invalid input", nil)
		return
	}

	DB.Save(&book)
	ResponseJSON(c, http.StatusOK, "Book updated successfully", book)
}
```

----------------------------------------

TITLE: Defining Document with Embedded Array - JavaScript
DESCRIPTION: This JavaScript snippet illustrates a MongoDB document structure containing an embedded array called `addresses`. Each element within the `addresses` array is a sub-document representing address details, including `street`, `city`, and `zipcode`. This demonstrates how to model one-to-many relationships directly within a document for enhanced data locality and retrieval efficiency.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/embedded-documents-arrays.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
    _id: 1,
    name: 'John Doe',
    addresses: [
        {
            street: '123 Main St',
            city: 'New York',
            zipcode: '10001'
        },
        {
            street: '456 Broadway',
            city: 'Los Angeles',
            zipcode: '90001'
        }
    ]
}
```

----------------------------------------

TITLE: WebSocket Server Setup with Socket.IO
DESCRIPTION: This JavaScript snippet demonstrates setting up a WebSocket server using the `socket.io` library. It listens for 'chat message' events from clients and re-emits those messages to all connected clients. This requires the `socket.io` library and a running HTTP server (referenced as `server`).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/real-time-updates.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const io = require('socket.io')(server);
io.on('connection', (socket) => {
  socket.on('chat message', (msg) => io.emit('chat message', msg));
});
```

----------------------------------------

TITLE: Debugging Python code to avoid division by zero
DESCRIPTION: This snippet contains Python code that calculates the cost per person for pizza at a party. It highlights a logical error where the `while` loop condition can lead to `partygoers` becoming zero, resulting in a division by zero error.  The corrected version ensures the loop continues only when `partygoers` is greater than zero.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/coding-assistance.md#_snippet_2

LANGUAGE: python
CODE:
```
1. pizza_cost = 100
2. partygoers = 10
3. while partygoers = 0:
4.    cost_per_person = pizza_cost / partygoers
5.    print("the cost per person is $", "{:.2f}".format(cost_per_person))
6.    partygoers -= 2
```

LANGUAGE: python
CODE:
```
3. while partygoers > 0:
```

----------------------------------------

TITLE: Confirming User Actions in JavaScript
DESCRIPTION: This snippet demonstrates the use of the `confirm()` function to display a confirmation dialog to the user. The `confirm()` function takes a string as an argument, which is the message displayed to the user. It returns `true` if the user clicks OK, and `false` if the user clicks Cancel. The result is then logged to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/alert-prompt-confirm.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const result = confirm('Are you sure?');
console.log(result); // true/false
```

----------------------------------------

TITLE: Setting Local Git Configuration
DESCRIPTION: This command sets a local configuration setting for the current Git repository. The configuration will only apply to the specific repository where the command is executed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/local-vs-global-config@tVvxC5JQgUb_B8kOqYpD8.md#_snippet_0

LANGUAGE: bash
CODE:
```
git config --local [key] [value]
```

----------------------------------------

TITLE: Explicit Binding with call, apply, bind - JavaScript
DESCRIPTION: This code snippet demonstrates how to explicitly bind the `this` keyword to an object using the `call`, `apply`, and `bind` methods in JavaScript. It defines an object `roadmap` with a `name` property and a function `printName` that logs `this.name`. The `this` context of `printName` is then explicitly bound to `roadmap` using each of the three methods.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/explicit-binding.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const roadmap = {
  name: 'JavaScript',
};

function printName() {
  console.log(this.name);
}

printName.call(roadmap); // JavaScript
printName.apply(roadmap); // JavaScript

const printRoadmapName = printName.bind(roadmap);
printRoadmapName(); // JavaScript
```

----------------------------------------

TITLE: Finding Unique Values Using reduce() in JavaScript
DESCRIPTION: This code snippet demonstrates how to use the `reduce()` method in JavaScript to find unique values in an array. It accumulates unique values into a new array by checking if the current value is already present in the accumulator. Dependencies: None. Input: Array with possible duplicate values. Output: Array with only unique values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/find-unique-array-values.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const roadmaps = ['JavaScript', 'React', 'Node.js', 'Node.js', 'JavaScript'];
const uniqueRoadmaps = roadmaps.reduce((unique, roadmap) => {
  return unique.includes(roadmap) ? unique : [...unique, roadmap];
}, []);
console.log(uniqueRoadmaps); // ['JavaScript', 'React', 'Node.js']
```

----------------------------------------

TITLE: Defining Concepts in C++20
DESCRIPTION: This snippet demonstrates how to define a concept using the `concept` keyword in C++20. The `Addable` concept checks if two objects of type `T` can be added together and if the result is also of type `T`. The `add` function uses the `Addable` concept to constrain the template parameter.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-20@o3no4a5_iMFzEAGs56-BJ.md#_snippet_0

LANGUAGE: cpp
CODE:
```
template <typename T>
concept Addable = requires (T a, T b) {
    { a + b } -> std::same_as<T>;
};

template <Addable T>
T add(T a, T b) {
    return a + b;
}
```

----------------------------------------

TITLE: nullptr in C++11
DESCRIPTION: Explains the use of 'nullptr' as a type-safe way to represent null pointers, replacing the traditional '0' or 'NULL'. This avoids potential ambiguity and type-related issues. The example shows declaring an integer pointer and assigning it to nullptr.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-11--14@T6rCTv9Dxkm-tEA-l9XEv.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int *ptr = nullptr;
```

----------------------------------------

TITLE: Range-Based For Loop in C++11
DESCRIPTION: Illustrates the range-based for loop, providing a convenient way to iterate through elements in containers or arrays similar to a foreach loop. Requires the `<vector>` and `<iostream>` headers. Output is the numbers printed to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-11--14@T6rCTv9Dxkm-tEA-l9XEv.md#_snippet_1

LANGUAGE: cpp
CODE:
```
std::vector<int> numbers {1, 2, 3, 4};
for (int number : numbers) {
    std::cout << number << '\n';
}
```

----------------------------------------

TITLE: SQL INSERT INTO (all columns)
DESCRIPTION: The `INSERT INTO` statement adds a new row to a table.  If the columns are not named, the statement expects a full set of column values in the order defined in the table schema. This snippet demonstrates inserting data into all columns of the table.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/sql/content/insert@-Hew0y53ziZK3epQnGA0O.md#_snippet_0

LANGUAGE: SQL
CODE:
```
INSERT INTO table_name VALUES (value1, value2, value3, ...);
```

----------------------------------------

TITLE: Initializing std::queue in C++
DESCRIPTION: This code snippet demonstrates how to initialize a `std::queue` in C++. `std::queue` is a container adapter that provides FIFO (First-In-First-Out) functionality. It is based on other containers like `deque` or `list`. It requires including the `<queue>` header file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_8

LANGUAGE: cpp
CODE:
```
std::queue<int> my_queue;
```

----------------------------------------

TITLE: Implementing Inheritance and Polymorphism with TypeScript
DESCRIPTION: This code snippet demonstrates inheritance and polymorphism in TypeScript. The `Dog` and `Cat` classes inherit from the `Animal` class and override the `makeSound` method.  A variable of type `Animal` can hold instances of `Dog` or `Cat`, and calling `makeSound` on it will invoke the overridden method in the respective class. This showcases polymorphism.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/inheritance-vs-polymorphism@8P0-vb9nlnmz7iC4UvyJZ.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Animal {
  makeSound(): void {
    console.log('Making animal sound');
  }
}

class Dog extends Animal {
  makeSound(): void {
    console.log('Bark');
  }
}

class Cat extends Animal {
  makeSound(): void {
    console.log('Meow');
  }
}

let animal: Animal;

animal = new Dog();
animal.makeSound(); // Output: Bark

animal = new Cat();
animal.makeSound(); // Output: Meow
```

----------------------------------------

TITLE: Improved Lambda Expression Example in C++17
DESCRIPTION: This example showcases the improved lambda expression in C++17, which allows capturing a single object without changing its type or constness. It captures `obj` by moving it into the lambda's scope as `x`. Assumes `obj` is defined elsewhere, is movable, and that you intend to transfer ownership of `obj` to the lambda. Requires a C++17 compiler.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-17@R2-qWGUxsTOeSHRuUzhd2.md#_snippet_5

LANGUAGE: cpp
CODE:
```
auto func = [x = std::move(obj)] { /* use x */ };
```

----------------------------------------

TITLE: Installing a package using apt-get
DESCRIPTION: This command installs a package using the apt-get package manager, commonly used in Debian/Ubuntu-based Linux distributions. The `sudo` command is used to execute the command with administrative privileges. Replace `packagename` with the name of the package you wish to install.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/package-management/install-remove-ugprade-packages.md#_snippet_0

LANGUAGE: bash
CODE:
```
sudo apt-get install packagename
```

----------------------------------------

TITLE: Combining $exists and $type in MongoDB (JavaScript)
DESCRIPTION: This snippet demonstrates how to combine the `$exists` and `$type` operators in MongoDB to query for documents where the `age` field exists and is of type `number`.  The `db.collection.find()` method is used with a combined query criteria.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/index.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.find({ age: { $exists: true, $type: 'number' } });
```

----------------------------------------

TITLE: Retrieving Environment Variable using getenv() in PHP
DESCRIPTION: Retrieves the value of an environment variable using the `getenv()` function in PHP.  It takes the name of the environment variable as a string argument and returns its value.  Returns false if the variable is not found.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/environment-variables@fitjnLYKLHJ2P5G7JAvzm.md#_snippet_1

LANGUAGE: PHP
CODE:
```
echo getenv("FOO"); // returns "bar"
```

----------------------------------------

TITLE: Using PHP Traits
DESCRIPTION: This snippet demonstrates how to define a trait named `Greeting` with a `sayHello` method and use it in a `User` class. The `use` keyword includes the trait's methods into the class, allowing them to be called as if they were directly defined in the class. The expected output of the code is "Hello".
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/traits@GR09ns9B-0cONQaQ_uj-7.md#_snippet_0

LANGUAGE: PHP
CODE:
```
trait Greeting {
    public function sayHello() {
        return "Hello";
    }
}
class User {
    use Greeting;
}
$user = new User();
echo $user->sayHello(); // Outputs: Hello
```

----------------------------------------

TITLE: Creating LVM with pvcreate, vgcreate, lvcreate (Bash)
DESCRIPTION: This snippet demonstrates how to create a basic LVM (Logical Volume Manager) setup in Linux using the `pvcreate`, `vgcreate`, and `lvcreate` commands.  It initializes a physical volume on `/dev/sdb1`, creates a volume group named `my-vg`, and carves out a 10GB logical volume named `my-lv` from the volume group. This process allows for flexible disk management.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/disks-filesystems/lvm.md#_snippet_0

LANGUAGE: bash
CODE:
```
pvcreate /dev/sdb1
vgcreate my-vg /dev/sdb1
lvcreate -L 10G my-vg -n my-lv
```

----------------------------------------

TITLE: Encoding and Decoding JSON in PHP
DESCRIPTION: This code snippet demonstrates how to encode a PHP array into a JSON string using `json_encode()` and decode a JSON string back into a PHP array using `json_decode()`. The `json_decode()` function takes an optional second parameter, which if set to `true`, will return an associative array instead of an object.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/json-processing@DB2cxZE58WCCavW2PNwmf.md#_snippet_0

LANGUAGE: PHP
CODE:
```
// Create an array
$data = array('a' => 1, 'b' => 2, 'c' => 3);

// Encode the array into a JSON string
$json = json_encode($data);
echo $json;

// Output: {"a":1,"b":2,"c":3}

// Decode the JSON string back into an array
$decoded = json_decode($json, true);
print_r($decoded);

// Output: Array ( [a] => 1 [b] => 2 [c] => 3 )
```

----------------------------------------

TITLE: Augmenting Namespace in TypeScript
DESCRIPTION: This code demonstrates namespace augmentation in TypeScript. It adds a new function, `newFunction`, to the existing `MyModule` namespace. This is achieved by declaring an interface in a declaration file and then implementing it in the main TypeScript file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/namespace-augmentation@16TT8R4N-9tCfWmPetqMP.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// myModule.d.ts
declare namespace MyModule {
  export interface MyModule {
    newFunction(): void;
  }
}

// main.ts
/// <reference path="myModule.d.ts" />
namespace MyModule {
  export class MyModule {
    public newFunction() {
      console.log('I am a new function in MyModule!');
    }
  }
}

const obj = new MyModule.MyModule();
obj.newFunction(); // Output: "I am a new function in MyModule!"
```

----------------------------------------

TITLE: Using Named Arguments with array_fill in PHP
DESCRIPTION: This code demonstrates how to use named arguments with the `array_fill()` function in PHP. It specifies the `start_index`, `count`, and `value` parameters by name, rather than relying on their position in the function signature. This allows for improved code readability and the ability to skip optional parameters. No external dependencies are required other than PHP 8.0 or later.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/named-arguments@RkNjYva8o_jXp9suz5YdG.md#_snippet_0

LANGUAGE: php
CODE:
```
<?php
$a = array_fill(start_index: 0, count: 100, value: 50);
```

----------------------------------------

TITLE: SQL Pagination Query
DESCRIPTION: This SQL query retrieves items from a table with pagination, using `LIMIT` to specify the number of items to return per page, and `OFFSET` to specify the starting position. This assumes a standard SQL database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/rest-pagination.md#_snippet_1

LANGUAGE: sql
CODE:
```
SELECT * FROM items LIMIT 10 OFFSET 20;
```

----------------------------------------

TITLE: Setting up Express Server
DESCRIPTION: Sets up an Express server with session management using `express-session`. It configures the session middleware with options like `secret`, `cookie`, `resave`, and `saveUninitialized`. It also includes middleware for parsing JSON and URL-encoded data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const express = require('express');
const sessions = require('express-session');

const app = express();

app.use(
  sessions({
    secret: 'some secret',
    cookie: {
      maxAge: 1000 * 60 * 60 * 24, // 24 hours
    },
    resave: true,
    saveUninitialized: false,
  })
);

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// @todo register routes

app.listen(3000, () => {
  console.log(`Server Running at port 3000`);
});
```

----------------------------------------

TITLE: Promise Chaining to Avoid Callback Hell in JavaScript
DESCRIPTION: This code snippet demonstrates how to use Promise chaining to avoid callback hell in JavaScript. Each `callAsyncN` function is assumed to return a Promise. The `.then()` method is used to chain the asynchronous operations, creating a more readable and maintainable structure. The `.catch()` method is used for error handling.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/callback-hell.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
callAsync1()
  .then(() => callAsync2())
  .then(() => callAsync3())
  .then(() => callAsync4())
  .then(() => callAsync5())
  .catch((err) => console.error(err));
```

----------------------------------------

TITLE: Role-Based Authorization Middleware (JavaScript)
DESCRIPTION: This middleware example shows how to implement role-based authorization. It checks if the user's role is 'admin'. If not, it returns a 403 Forbidden status. Otherwise, it calls `next()` to proceed to the next middleware or route handler. It requires the `req.user` object to be populated with user information, including the role.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/api-security.md#_snippet_1

LANGUAGE: javascript
CODE:
```
app.use((req, res, next) => {
  if (req.user.role !== 'admin') return res.status(403).send('Forbidden');
  next();
});
```

----------------------------------------

TITLE: Running a command in the background - Bash
DESCRIPTION: This snippet shows how to run a command in the background by appending an ampersand (&) to the command. This allows the user to continue using the terminal while the command executes in the background.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/bg-fg-processes.md#_snippet_0

LANGUAGE: bash
CODE:
```
command &
```

----------------------------------------

TITLE: Prototype Inheritance with Object.setPrototypeOf JavaScript
DESCRIPTION: This code snippet demonstrates prototypal inheritance in JavaScript using `Object.setPrototypeOf()`. The `javascript` object inherits the `getRoadmapUrl()` method from the `roadmap` object, demonstrating how methods are accessed through the prototype chain. The `greet()` method is defined directly on the `javascript` object. The expected output from the `javascript.getRoadmapUrl()` call is a console log of "https://roadmap.sh/javascript" and the `javascript.greet()` call will log "JavaScript Roadmap - Learn JavaScript".
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/prototype-chain.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const roadmap = {
  getRoadmapUrl() {
    console.log(`https://roadmap.sh/${this.slug}`);
  },
};

const javascript = {
  name: 'JavaScript Roadmap',
  description: 'Learn JavaScript',
  slug: 'javascript',
  greet() {
    console.log(`${this.name} - ${this.description}`);
  },
};

Object.setPrototypeOf(javascript, roadmap); // or javascript.__proto__ = roadmap;

javascript.getRoadmapUrl(); // https://roadmap.sh/javascript
javascript.greet(); // JavaScript Roadmap - Learn JavaScript
```

----------------------------------------

TITLE: Proxy Pattern Secured Door Implementation
DESCRIPTION: This PHP code implements a `SecuredDoor` proxy class that controls access to a `Door` object. The `open` method requires a password, which is checked by the `authenticate` method before calling the `open` method on the underlying `Door` object. This adds a layer of security to the door's functionality. SecuredDoor class depends on Door interface.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_41

LANGUAGE: php
CODE:
```
class SecuredDoor
{
    protected $door;

    public function __construct(Door $door)
    {
        $this->door = $door;
    }

    public function open($password)
    {
        if ($this->authenticate($password)) {
            $this->door->open();
        } else {
            echo "Big no! It ain't possible.";
        }
    }

    public function authenticate($password)
    {
        return $password === '$ecr@t';
    }

    public function close()
    {
        $this->door->close();
    }
}

```

----------------------------------------

TITLE: Installing package using dnf on Fedora/CentOS
DESCRIPTION: This snippet demonstrates how to update the package list and install a new package using `dnf` on Fedora or CentOS systems. `sudo dnf update` updates the package repository, and `sudo dnf install package-name` installs the desired package. Replace `package-name` with the actual package name.  Requires root privileges.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/package-management/finding-installing-packages.md#_snippet_1

LANGUAGE: Shell
CODE:
```
sudo dnf update
sudo dnf install package-name
```

----------------------------------------

TITLE: Ordered Bulk Write in MongoDB with JavaScript
DESCRIPTION: This code snippet demonstrates an ordered bulk write operation in MongoDB using JavaScript. It initializes an ordered bulk operation, inserts a document, updates another, and removes a third. The operations are executed in sequence, and any error will halt the process.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/bulk-write.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const orderedBulk = db.collection('mycollection').initializeOrderedBulkOp();

orderedBulk.insert({ _id: 1, name: 'John Doe' });
orderedBulk.find({ _id: 2 }).updateOne({ $set: { name: 'Jane Doe' } });
orderedBulk.find({ _id: 3 }).remove();

orderedBulk.execute((err, result) => {
  // Handle error or result
});
```

----------------------------------------

TITLE: Initializing std::priority_queue in C++
DESCRIPTION: This code snippet demonstrates how to initialize a `std::priority_queue` in C++. `std::priority_queue` is a container adapter that provides a sorted queue.  It is based on other containers like `vector` or `deque`. It requires including the `<queue>` header file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_9

LANGUAGE: cpp
CODE:
```
std::priority_queue<int> my_priority_queue;
```

----------------------------------------

TITLE: Defining Object Type in TypeScript
DESCRIPTION: This code defines a function `printCoord` that takes an object with properties `x` and `y` of type `number`. It then prints the values of these properties to the console. The function is invoked with a sample object containing x and y coordinates.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/object@vnqvm_WiaKqpdxrW4wRGa.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// The parameter's type annotation is an object type
function printCoord(pt: { x: number; y: number }) {
  console.log("The coordinate's x value is " + pt.x);
  console.log("The coordinate's y value is " + pt.y);
}

printCoord({ x: 3, y: 7 });
```

----------------------------------------

TITLE: Creating useNetworkStatus Hook in React
DESCRIPTION: This code snippet creates a custom React hook called `useNetworkStatus`. It uses the `useState` and `useEffect` hooks to track the network status (online/offline) of the browser. It returns a boolean value (`isOnline`) indicating the current network status. The hook adds and removes event listeners for 'online' and 'offline' events.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/custom-hook.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { useState, useEffect } from 'react';

function useNetworkStatus() {
  const [isOnline, setIsOnline] = useState(true);

  useEffect(() => {
    function handleOnline() {
      setIsOnline(true);
    }

    function handleOffline() {
      setIsOnline(false);
    }

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  return isOnline;
}
```

----------------------------------------

TITLE: Adding a Remote Repository in Git
DESCRIPTION: This command adds a new remote repository to the Git configuration. The `[name]` is a shorthand you'll use to refer to the remote, and `[url]` is the URL of the remote repository (e.g., a GitHub repository). This allows you to fetch from and push to the remote.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/managing-remotes@sBQOInoFBU9XfkPZ-JlyT.md#_snippet_0

LANGUAGE: git
CODE:
```
git remote add [name] [url]
```

----------------------------------------

TITLE: Auto Type Deduction Example - C++
DESCRIPTION: This code demonstrates the basic usage of the `auto` keyword in C++ for automatic type deduction. It includes examples of declaring variables with `auto`, iterating through a vector using `auto` for iterator type deduction, and shows a compile-time error when `auto` is used without an initializer.  The code requires the `<iostream>` and `<vector>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/auto-automatic-type-deduction@CG01PTVgHtjfKvsJkJLGl.md#_snippet_0

LANGUAGE: C++
CODE:
```
#include <iostream>
#include <vector>

int main() {
    // Traditional way of declaring a variable:
    int myInt = 5;

    // Using auto for type deduction:
    auto myAutoInt = 5; // Automatically deduces the type as 'int'

    // Example with more complex types:
    std::vector<int> myVector = {1, 2, 3, 4, 5};

    // Without auto, iterating the vector would look like this:
    for (std::vector<int>::iterator it = myVector.begin(); it != myVector.end(); ++it) {
        std::cout << *it << '\n';
    }

    // With auto, the iterator declaration becomes simpler:
    for (auto it = myVector.begin(); it != myVector.end(); ++it) {
        std::cout << *it << '\n';
    }
}
```

----------------------------------------

TITLE: decltype(auto) in C++14
DESCRIPTION: Shows how to use 'decltype(auto)' to deduce the exact type of a variable based on the type of the expression it is initialized with. In this example, result deduces to `double` since `func` returns the product of an int and double. Requires a C++14 compliant compiler.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-11--14@T6rCTv9Dxkm-tEA-l9XEv.md#_snippet_7

LANGUAGE: cpp
CODE:
```
auto func = [](auto a, auto b) { return a * b; };
decltype(auto) result = func(5, 3.14); // decltype(auto) deduces to "double"
```

----------------------------------------

TITLE: Preventing Multiple Header Inclusions with Include Guards in C++
DESCRIPTION: This snippet demonstrates how to use include guards to prevent multiple inclusions of a header file. The preprocessor directives #ifndef, #define, and #endif ensure that the header file's content is included only once, even if it's included multiple times in different parts of the project. This avoids compilation errors and potential conflicts.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/structuring-codebase@Zw2AOTK5uc9BoKEpY7W1C.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#ifndef MY_HEADER_FILE_H
#define MY_HEADER_FILE_H

// Your code here

#endif // MY_HEADER_FILE_H
```

----------------------------------------

TITLE: Implementing Function Overloading in TypeScript
DESCRIPTION: This TypeScript code demonstrates function overloading by defining multiple signatures for the `add` function. The function can accept either two numbers or two strings as input. The implementation handles both cases, returning the sum or concatenation accordingly. The `console.log` statements show example usages.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/function-overloading@-0Zp6b8NjDyz9MAQE3HfS.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function add(a: number, b: number): number;
function add(a: string, b: string): string;

function add(a: any, b: any): any {
  return a + b;
}

console.log(add(1, 2)); // 3
console.log(add('Hello', ' World')); // "Hello World"
```

----------------------------------------

TITLE: Creating a Compound Index in MongoDB (JavaScript)
DESCRIPTION: This code snippet creates a compound index on the 'username' and 'email' fields in the 'users' collection. This index is useful for queries that filter or sort based on both username and email. The order of the fields in the index definition matters for query performance.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/indexes.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.users.createIndex({ username: 1, email: 1 });
```

----------------------------------------

TITLE: Handling Null Values with Strict Null Checks in TypeScript
DESCRIPTION: This code snippet demonstrates how to handle potentially null values in TypeScript when `strictNullChecks` is enabled. It defines a function `doSomething` that accepts a string or null value and uses a conditional check to ensure that the string is not null before attempting to access its `toUpperCase` method. This prevents runtime errors that could occur if `x` is null.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/null@cjAwawhZLo1qVQ93XIdm2.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function doSomething(x: string | null) {
  if (x === null) {
    // do nothing
  } else {
    console.log('Hello, ' + x.toUpperCase());
  }
}
```

----------------------------------------

TITLE: useEffect Hook on Every Render in React
DESCRIPTION: This useEffect hook runs after every render of the React component. It is equivalent to 'componentDidUpdate' without any dependency restrictions. Use it cautiously as it may lead to performance issues if not optimized.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/component-lifecycle.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
useEffect(() => {
  // do something after every render
});
```

----------------------------------------

TITLE: Get All Blog Posts Request Example
DESCRIPTION: This snippet demonstrates retrieving all blog posts using the GET method. It requests the /posts endpoint, returning an array of blog post objects. This endpoint is expected to return a 200 OK status code with the array of blog posts in JSON format.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/blogging-platform-api.md#_snippet_8

LANGUAGE: plaintext
CODE:
```
GET /posts
```

----------------------------------------

TITLE: Implementing Coroutines in C++20
DESCRIPTION: This snippet demonstrates how to implement a coroutine in C++20 using `co_await` and `co_return`. The `async_value` function returns a `std::future<int>` and asynchronously computes a value. It requires the `<coroutine>`, `<iostream>`, and `<future>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-20@o3no4a5_iMFzEAGs56-BJ.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include <coroutine>
#include <iostream>
#include <future>

std::future<int> async_value(int value) {
    co_await std::chrono::seconds(1);
    co_return value * 2;
}

int main() {
    auto result = async_value(42);
    std::cout << "Result: " << result.get() << '\n';
}
```

----------------------------------------

TITLE: Defining and Implementing a PHP Interface
DESCRIPTION: This code snippet demonstrates how to define a PHP interface `iTemplate` with two methods: `setVariable` and `getHtml`.  It then shows how to create a class `Template` that implements this interface, providing concrete implementations for both methods. The `setVariable` method stores variable names and values in an array, while `getHtml` replaces placeholders in a template string with the stored values. This allows for a consistent contract to be enforced across multiple classes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/interfaces@vu0H-TsD7hkJgOQbSRj92.md#_snippet_0

LANGUAGE: php
CODE:
```
interface iTemplate {
    public function setVariable($name, $var);
    public function getHtml($template); 
}

class Template implements iTemplate {
    private $vars = array();

    public function setVariable($name, $var) {
        $this->vars[$name] = $var;
    }

    public function getHtml($template) {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }
        return $template;
    }
}
```

----------------------------------------

TITLE: SSH Configuration File Example
DESCRIPTION: This is an example of an SSH configuration file (`~/.ssh/config`) that defines host entries for the application and database servers. It simplifies SSH connections by allowing the use of aliases (e.g., `ssh app` and `ssh db`) instead of typing out the full command with IP addresses and user names.  `ProxyJump` defines the jump server for the database connection.  AgentForwarding is enabled in the app entry.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_11

LANGUAGE: bash
CODE:
```
Host app
  HostName 3.112.5.67
  User ec2-user
  Port 22
  IdentityFile /Users/yourusername/.ssh/mykey.pem
  ForwardAgent yes

Host db
  HostName 192.168.1.0
  User ec2-user
  Port 22
  ProxyJump app
```

----------------------------------------

TITLE: Dynamic Polymorphism Example with Virtual Functions in C++
DESCRIPTION: Demonstrates dynamic polymorphism in C++ using a base class `Shape` with a virtual `draw` function, and derived classes `Circle` and `Rectangle` that override this function. The `main` function uses a `Shape` pointer to call the appropriate `draw` function based on the object type at runtime.  Requires the iostream library for console output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/dynamic-polymorphism@7h1VivjCPDwriL7FirtFv.md#_snippet_0

LANGUAGE: C++
CODE:
```
#include <iostream>

// Base class
class Shape {
public:
    virtual void draw() {
        std::cout << "Drawing a shape\n"; 
    }
};

// Derived class 1
class Circle : public Shape {
public:
    void draw() override {
        std::cout << "Drawing a circle\n"; 
    }
};

// Derived class 2
class Rectangle : public Shape {
public:
    void draw() override {
        std::cout << "Drawing a rectangle\n";
    }
};

int main() {
    Shape* shape;
    Circle circle;
    Rectangle rectangle;

    // Storing the address of circle
    shape = &circle;

    // Call circle draw function
    shape->draw();

    // Storing the address of rectangle
    shape = &rectangle;

    // Call rectangle draw function
    shape->draw();

    return 0;
}
```

----------------------------------------

TITLE: Registering Process Login Route
DESCRIPTION: Registers the process login route handler with the Express application. Maps the POST request to '/process-login' to the `ProcessLoginHandler` function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const ProcessLoginHandler = require('./handlers/process-login.js');

app.post('/process-login', ProcessLoginHandler);
```

----------------------------------------

TITLE: Equality Narrowing in TypeScript
DESCRIPTION: This code snippet demonstrates how TypeScript narrows the types of variables `x` and `y` within an `if` statement based on an equality check (`x === y`). If `x` and `y` are equal, TypeScript infers that both must be of the same type, allowing type-specific methods to be called safely. The function takes two arguments, `x` which can be a string or number, and `y` which can be a string or boolean.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/equality@Wy2yIK5vgLjEcc9VjuQK5.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function example(x: string | number, y: string | boolean) {
  if (x === y) {
    // We can now call any 'string' method on 'x' or 'y'.
    x.toUpperCase();
    y.toLowerCase();
  } else {
    console.log(x);
    console.log(y);
  }
}
```

----------------------------------------

TITLE: Creating an Intersection Type in TypeScript
DESCRIPTION: This code snippet demonstrates how to create an intersection type in TypeScript using the `&` operator.  The `typeAB` type will have all the properties and methods of both `typeA` and `typeB`.  Dependencies: typeA and typeB must be defined.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/intersection-types@RWYXEZMODUrqwRWf_Lqi9.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type typeAB = typeA & typeB;
```

----------------------------------------

TITLE: Testing Get Books Endpoint (Go)
DESCRIPTION: This Go test function, `TestGetBooks`, tests the functionality of retrieving all books via the `/books` endpoint using a mock HTTP request.  It uses `gin-gonic/gin` for routing and `net/http/httptest` for request/response handling. It asserts that the HTTP status code is 200 (OK) and that the response contains a non-empty list of books.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_20

LANGUAGE: go
CODE:
```
func TestGetBooks(t *testing.T) {
	setupTestDB()
	addBook()
	router := gin.Default()
	router.GET("/books", api.GetBooks)

	req, _ := http.NewRequest("GET", "/books", nil)
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if status := w.Code; status != http.StatusOK {
		t.Errorf("Expected status %d, got %d", http.StatusOK, status)
	}

	var response api.JsonResponse
	json.NewDecoder(w.Body).Decode(&response)

	if len(response.Data.([]interface{})) == 0 {
		t.Errorf("Expected non-empty books list")
	}
}
```

----------------------------------------

TITLE: Monitoring System Processes with top
DESCRIPTION: The `top` command displays a real-time, dynamic view of system resource usage and processes. It provides an interactive interface to monitor CPU usage, memory consumption, and individual process statistics, enabling administrators to identify resource-intensive processes and diagnose performance bottlenecks.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
top
```

----------------------------------------

TITLE: Using Ranges in C++20
DESCRIPTION: This code snippet demonstrates the use of C++20 ranges to filter a vector of integers, selecting only the even numbers. It utilizes `std::views::filter` to create a view of the vector containing only even numbers. The resulting `even_view` is then iterated over, and the even numbers are printed to the console. This showcases the composability and ease of use of ranges.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/newest@sxbbKtg7kMNbkx7fXhjR9.md#_snippet_1

LANGUAGE: C++
CODE:
```
#include <iostream>
#include <vector>
#include <ranges>

int main() {
    std::vector<int> numbers{1, 2, 3, 4, 5};
    auto even_view = numbers | std::views::filter([](int n) { return n % 2 == 0; });

    for (int n : even_view) {
        std::cout << n << ' ';
    }
}
```

----------------------------------------

TITLE: Including iostream Library in C++
DESCRIPTION: This code snippet demonstrates how to include the iostream library in C++ using the #include directive. The iostream library provides functionalities for standard input and output operations. This is a fundamental step in any C++ program that interacts with the user through the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/introduction-to-language@NvODRFR0DLINB0RlPSsvt.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>
```

----------------------------------------

TITLE: Tuple Class Implementation with Variadic Template (C++)
DESCRIPTION: This code implements a simple `Tuple` class using variadic templates. The class can hold a variable number of elements of different types. It employs recursion via template specialization: a base case for an empty tuple and a recursive case to handle tuples with one or more elements. The `main` function instantiates a tuple with an int, float, and double, demonstrating usage.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/variadic-templates@w4EIf58KP-Pq-yc0HlGxc.md#_snippet_1

LANGUAGE: cpp
CODE:
```
template <typename... Types>
class Tuple;

// Base case: empty tuple
template <>
class Tuple<> {};

// Recursive case: Tuple with one or more elements
template <typename Head, typename... Tail>
class Tuple<Head, Tail...> : public Tuple<Tail...> {
 public:
  Tuple(Head head, Tail... tail) : Tuple<Tail...>(tail...), head_(head) {}

  Head head() const { return head_; }

 private:
  Head head_;
};

int main() {
  Tuple<int, float, double> tuple(1, 2.0f, 3.0);
  std::cout << "First element: " << tuple.head() << '\n';
  return 0;
}
```

----------------------------------------

TITLE: Setting a Cookie in PHP
DESCRIPTION: This snippet demonstrates how to set a cookie named "user" with the value "John Doe". The cookie is set to expire after 30 days and is available across the entire website. The `setcookie()` function takes the cookie name, value, expiration time, and path as parameters.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/cookies@so03-fK7E2WvTm6XsPq4i.md#_snippet_0

LANGUAGE: PHP
CODE:
```
setcookie("user", "John Doe", time() + (86400 * 30), "/");
```

----------------------------------------

TITLE: Async/Await to Avoid Callback Hell in JavaScript
DESCRIPTION: This code snippet demonstrates how to use `async/await` to avoid callback hell in JavaScript. The `async` keyword is used to define an asynchronous function, and the `await` keyword is used to pause the execution of the function until a Promise is resolved. The `try...catch` block is used for error handling. Each `callAsyncN` function is assumed to return a Promise.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/callback-hell.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
async function asyncCall() {
  try {
    await callAsync1();
    await callAsync2();
    await callAsync3();
    await callAsync4();
    await callAsync5();
  } catch (err) {
    console.error(err);
  }
}
```

----------------------------------------

TITLE: Deleting Multiple Documents with deleteMany() in MongoDB
DESCRIPTION: This code snippet demonstrates how to delete all documents from the 'users' collection where the 'country' field is equal to 'Australia'. All matching documents will be deleted. This requires a MongoDB database instance and a 'users' collection to exist.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/delete-methods.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.users.deleteMany({ country: 'Australia' });
```

----------------------------------------

TITLE: Declaring and Accessing Namespace - C++
DESCRIPTION: This snippet demonstrates how to declare a namespace and access its elements using the scope resolution operator `::`. It includes the necessary header file `<iostream>` and defines a namespace `animals` containing string variables `dog` and `cat`. The `main` function accesses these variables using `animals::dog` and `animals::cat` to print their values to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/namespaces@iIdC7V8sojwyEqK1xMuHn.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

namespace animals {
    std::string dog = "Bobby";
    std::string cat = "Lilly";
}

int main() {
    std::cout << "Dog's name: " << animals::dog << '\n';
    std::cout << "Cat's name: " << animals::cat << '\n';

    return 0;
}
```

----------------------------------------

TITLE: Static Assertions in C++11
DESCRIPTION: Demonstrates the use of static assertions for compile-time assertions in C++11. Static assertions allow verifying conditions at compile time, catching errors early in the development process. No dependencies are required. The example checks if the size of an integer is 4 bytes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-0x@PPg0V5EzGBeJsysg1215V.md#_snippet_6

LANGUAGE: cpp
CODE:
```
static_assert(sizeof(int) == 4, "This code requires int to be 4 bytes.");
```

----------------------------------------

TITLE: Using Limits and Projections in MongoDB Queries
DESCRIPTION: This snippet illustrates how to use limits and projections in MongoDB queries to optimize performance. `limit(10)` restricts the number of documents returned to 10, and `{ projectionField: 1 }` specifies that only `projectionField` should be returned in the results. This reduces the amount of data transferred and improves query efficiency. The example finds documents where `field` equals `value`, projects only the `projectionField`, and limits the results to 10 documents.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/query-optimization.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
db.collection.find({ field: value }, { projectionField: 1 }).limit(10);
```

----------------------------------------

TITLE: Creating and Executing a Simple Bash Script
DESCRIPTION: This snippet demonstrates the creation, permission modification, content writing, and execution of a basic bash script. It utilizes the `touch`, `chmod`, `echo`, and execution (`./`) commands.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-basics/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
touch my_first_script.sh
```

LANGUAGE: bash
CODE:
```
chmod +x my_first_script.sh
```

LANGUAGE: bash
CODE:
```
echo "date" > my_first_script.sh
```

LANGUAGE: bash
CODE:
```
./my_first_script.sh
```

----------------------------------------

TITLE: Implementing Mediator Interface and Class in PHP
DESCRIPTION: This code defines the `ChatRoomMediator` interface and the `ChatRoom` class, which implements the mediator in the Mediator pattern. The `ChatRoom` class is responsible for showing messages sent by users and centralizing the communication logic.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_55

LANGUAGE: php
CODE:
```
interface ChatRoomMediator
{
    public function showMessage(User $user, string $message);
}

// Mediator
class ChatRoom implements ChatRoomMediator
{
    public function showMessage(User $user, string $message)
    {
        $time = date('M d, y H:i');
        $sender = $user->getName();

        echo $time . '[' . $sender . ']:' . $message;
    }
}
```

----------------------------------------

TITLE: Forbidden Response Example
DESCRIPTION: Illustrates the JSON response when a user is not authorized to update a specific resource. A 403 status code should be sent along with the message when the authenticated user does not have permission to modify the requested to-do item.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_8

LANGUAGE: JSON
CODE:
```
{
  "message": "Forbidden"
}
```

----------------------------------------

TITLE: Logout Route Handler
DESCRIPTION: Defines a route handler for the logout route (`/logout`). It destroys the session and redirects the user to the homepage. Depends on express and express-session.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_10

LANGUAGE: javascript
CODE:
```
module.exports = function Logout(req, res) {
  req.session.destroy();
  res.redirect('/');
};
```

----------------------------------------

TITLE: Implementing the Strategy Pattern in PHP
DESCRIPTION: This PHP code demonstrates the Strategy pattern, allowing you to switch algorithms at runtime. It defines a `SortStrategy` interface and two concrete strategies: `BubbleSortStrategy` and `QuickSortStrategy`. The `Sorter` class uses the selected strategy to sort a dataset.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_71

LANGUAGE: PHP
CODE:
```
interface SortStrategy
{
    public function sort(array $dataset): array;
}

class BubbleSortStrategy implements SortStrategy
{
    public function sort(array $dataset): array
    {
        echo "Sorting using bubble sort";

        // Do sorting
        return $dataset;
    }
}

class QuickSortStrategy implements SortStrategy
{
    public function sort(array $dataset): array
    {
        echo "Sorting using quick sort";

        // Do sorting
        return $dataset;
    }
}
```

LANGUAGE: PHP
CODE:
```
class Sorter
{
    protected $sorter;

    public function __construct(SortStrategy $sorter)
    {
        $this->sorter = $sorter;
    }

    public function sort(array $dataset): array
    {
        return $this->sorter->sort($dataset);
    }
}
```

LANGUAGE: PHP
CODE:
```
$dataset = [1, 5, 4, 3, 2, 8];

$sorter = new Sorter(new BubbleSortStrategy());
$sorter->sort($dataset); // Output : Sorting using bubble sort

$sorter = new Sorter(new QuickSortStrategy());
$sorter->sort($dataset); // Output : Sorting using quick sort
```

----------------------------------------

TITLE: Mutex and Locks in C++
DESCRIPTION: This code demonstrates the use of mutexes and locks to protect shared resources from data races. It includes the `<iostream>`, `<mutex>`, and `<thread>` headers. A `std::mutex` object `mtx` is declared. The `print_block` function prints a given character `n` times, but only after acquiring a lock on the mutex using `std::unique_lock`. This ensures that only one thread can access the standard output stream at a time, preventing interleaved output. Two threads, `t1` and `t2`, are created, each calling `print_block` with different arguments. The `join()` calls ensure the main thread waits for the other threads to complete.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/multithreading@OXQUPqxzs1-giAACwl3X1.md#_snippet_2

LANGUAGE: C++
CODE:
```
#include <iostream>
#include <mutex>
#include <thread>

std::mutex mtx;

void print_block(int n, char c) {
    {
        std::unique_lock<std::mutex> locker(mtx);
        for (int i = 0; i < n; ++i) {
            std::cout << c;
        }
        std::cout << '\n';
    }
}

int main() {
    std::thread t1(print_block, 50, '*');
    std::thread t2(print_block, 50, '$');

    t1.join();
    t2.join();

    return 0;
}
```

----------------------------------------

TITLE: Explain Query Execution in MongoDB
DESCRIPTION: This snippet uses the explain() method to analyze the query execution plan for a find() operation on the 'username' field.  It returns detailed information, including the index used. Requires a MongoDB connection and existing data in the 'users' collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/indexes.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.users.find({ username: 'John' }).explain();
```

----------------------------------------

TITLE: Main Application Entry Point - Go
DESCRIPTION: This is the main function of the BitTorrent client application. It parses the input torrent file path and output file path from command-line arguments. It then opens the torrent file using the `torrentfile` package and initiates the download process to the specified output file. Errors during file opening or downloading will cause the application to terminate.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_13

LANGUAGE: go
CODE:
```
package main

import (
	"log"
	"os"

	"github.com/veggiedefender/torrent-client/torrentfile"
)

func main() {
	inPath := os.Args[1]
	outPath := os.Args[2]

	tf, err := torrentfile.Open(inPath)
	if err != nil {
		log.Fatal(err)
	}

	err = tf.DownloadToFile(outPath)
	if err != nil {
		log.Fatal(err)
	}
}
```

----------------------------------------

TITLE: Mounting and Unmounting useEffect Hook in React
DESCRIPTION: This useEffect hook simulates the 'componentDidMount' and 'componentWillUnmount' lifecycle methods in React functional components. The effect runs after the component mounts. The returned function is executed when the component unmounts, allowing for cleanup.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/component-lifecycle.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
useEffect(() => {
  // do something after component mounts
  return () => {
    // do something before component unmounts
  };
}, []);
```

----------------------------------------

TITLE: Pulling Changes from a Remote Repository
DESCRIPTION: The `git pull` command fetches from and integrates with another repository or a local branch. It combines `git fetch` and `git merge`, automatically downloading and merging changes from a remote branch into your current working branch.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/basic-git-usage@PtU5Qwfzn3N1i3oRlCGoR.md#_snippet_7

LANGUAGE: bash
CODE:
```
git pull
```

----------------------------------------

TITLE: MongoDB Aggregation Pipeline Example (JavaScript)
DESCRIPTION: This code snippet demonstrates a simple MongoDB aggregation pipeline. It filters documents with status 'A', groups them by 'cust_id' summing the 'amount', and sorts the results in descending order of the total amount. Requires MongoDB and a collection with fields like 'status', 'cust_id', and 'amount'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/index.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.aggregate([
  { $match: { status: 'A' } },
  { $group: { _id: '$cust_id', total: { $sum: '$amount' } } },
  { $sort: { total: -1 } },
]);
```

----------------------------------------

TITLE: Readline Interface for Command Line Input in Node.js
DESCRIPTION: This code snippet uses the `readline` module in Node.js to create an interactive command-line interface. It prompts the user for input, logs the response, and closes the interface. It also handles the `close` event to exit the process gracefully.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/input-from-command-line.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import readline from 'node:readline';
import { stdin as input, stdout as output } from 'node:process';

const rl = readline.createInterface({ input, output });

rl.question('What do you think of Node.js? ', (answer) => {
  console.log(`Thank you for your valuable feedback: ${answer}`);
  rl.close();
});

rl.on('close', () => {
  console.log('\nBYE BYE !!!');
  process.exit(0);
});
```

----------------------------------------

TITLE: Auto Type Inference in C++11
DESCRIPTION: Demonstrates the use of the `auto` keyword for automatic type inference in C++11.  The compiler deduces the type of the variable based on the initializer. This eliminates the need to explicitly specify the type, making the code more concise and readable.  No dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-0x@PPg0V5EzGBeJsysg1215V.md#_snippet_0

LANGUAGE: cpp
CODE:
```
auto i = 42; // i is an int
auto s = "hello"; // s is a const char*
```

----------------------------------------

TITLE: Adding Changes to Staging Area
DESCRIPTION: The `git add` command adds changes from the working directory to the staging area. This prepares the changes to be included in the next commit.  You can specify individual files, directories, or use `.` to add all changes in the current directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/basic-git-usage@PtU5Qwfzn3N1i3oRlCGoR.md#_snippet_1

LANGUAGE: bash
CODE:
```
git add
```

----------------------------------------

TITLE: Sanitizing String Data with filter_var in PHP
DESCRIPTION: This code snippet demonstrates how to use the `filter_var()` function in PHP to sanitize a string, removing HTML tags and potentially harmful script code.  The `$dirty_data` variable contains a string with HTML tags and a JavaScript alert. The `filter_var()` function with `FILTER_SANITIZE_STRING` is used to remove these elements, assigning the cleaned string to `$clean_data`, which is then outputted.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/sanitization-techniques@tfC1tCrbvH5J43WUpG9Yb.md#_snippet_0

LANGUAGE: php
CODE:
```
$dirty_data = "<p>We love PHP!</p><script>alert('Virus!')</script>";   
$clean_data = filter_var($dirty_data, FILTER_SANITIZE_STRING);
echo $clean_data;
```

----------------------------------------

TITLE: Forking Process with pcntl_fork in PHP
DESCRIPTION: This PHP code snippet demonstrates how to create a new process using `pcntl_fork()`. The code checks the return value of `pcntl_fork()` to determine if it's the parent or child process. The parent process waits for the child to complete using `pcntl_wait()`, while the child process executes its own code. Requires the `pcntl` extension to be enabled in PHP.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/process-control@NTKUMgsKGYISIyhgOJPQn.md#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php 
$pid = pcntl_fork();
if ($pid == -1) {
     die('could not fork');
} else if ($pid) {
     // we are the parent
     pcntl_wait($status); // Protect against Zombie children
} else {
     // we are the child
}
?>
```

----------------------------------------

TITLE: Transform Image Endpoint
DESCRIPTION: This endpoint allows a user to apply transformations to an image. It expects a JSON payload defining the transformations to apply, such as resize, crop, rotate, format and filters. The response includes the transformed image details (URL, metadata).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/image-processing-service.md#_snippet_3

LANGUAGE: HTTP
CODE:
```
POST /images/:id/transform
{
  "transformations": {
    "resize": {
      "width": "number",
      "height": "number"
    },
    "crop": {
      "width": "number",
      "height": "number",
      "x": "number",
      "y": "number"
    },
    "rotate": "number",
    "format": "string",
    "filters": {
      "grayscale": "boolean",
      "sepia": "boolean"
    }
  }
}
```

----------------------------------------

TITLE: Deleting a Book
DESCRIPTION: This Go code defines a handler function `DeleteBook` that deletes a book from the database based on its ID. It retrieves the book by ID, deletes it using GORM, and returns a JSON response indicating success or failure.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_10

LANGUAGE: go
CODE:
```
func DeleteBook(c *gin.Context) {
	var book Book
	if err := DB.Delete(&book, c.Param("id")).Error; err != nil {
		ResponseJSON(c, http.StatusNotFound, "Book not found", nil)
		return
	}
	ResponseJSON(c, http.StatusOK, "Book deleted successfully", nil)
}
```

----------------------------------------

TITLE: Example-based Prompting
DESCRIPTION: This snippet demonstrates how to use successful examples within a prompt to guide a language model's responses. The prompt provides input-output pairs that define a pattern (classifying items as Fruit or Vegetable) and then asks the model to continue that pattern with new inputs. This technique is useful for teaching models to perform specific tasks or adopt certain behaviors.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/good-prompts/give-examples.md#_snippet_0

LANGUAGE: None
CODE:
```
Read the examples carefully and use them as a basis for your responses.

Input: Banana
Output: Fruit

Input: Apple
Output: Fruit

Input: Carrot
Output: Vegetable

Given the provided examples, generate the appropriate response for the following inputs:

- Turnip
- Orange
- Pear
- Potato
- Cucumber
- Celery
- Broccoli
- Cauliflower
```

----------------------------------------

TITLE: Starting Node.js Debugger
DESCRIPTION: This command starts Node.js in inspect mode, allowing you to debug the specified JavaScript file. Replace `myscript.js` with the path to your script.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/nodejs/content/using-debugger@XEGTeGWw05xWYOfUo3POE.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ node inspect myscript.js
```

----------------------------------------

TITLE: User Registration Request Example
DESCRIPTION: Illustrates the structure of a POST request to the /register endpoint for registering a new user. It includes the user's name, email, and password. The email should be unique, and the password must be hashed before storage. The response should include a token for authentication.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_0

LANGUAGE: HTTP
CODE:
```
POST /register
{
  "name": "John Doe",
  "email": "john@doe.com",
  "password": "password"
}
```

----------------------------------------

TITLE: Function Expression Syntax in TypeScript
DESCRIPTION: This code snippet demonstrates the function expression syntax in TypeScript. It shows how to define a function as an expression assigned to a variable.  The function has parameters with their types, and a return type, similar to function declarations. The function body contains the code to be executed and returns a value of the specified return type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/typescript-functions@qOynVkDi1gFz0mxyJHjfJ.md#_snippet_1

LANGUAGE: typescript
CODE:
```
let name = function(param1: type1, param2: type2, ...): returnType {
  return value;
};
```

----------------------------------------

TITLE: PImpl Idiom - C++
DESCRIPTION: This snippet demonstrates the PImpl (Pointer to Implementation) idiom. It separates the interface of a class from its implementation, reducing compile-time dependencies.  Changes to the implementation file do not require recompilation of files that only include the header.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/idioms@fb3bnfKXjSIjPAk4b95lg.md#_snippet_3

LANGUAGE: cpp
CODE:
```
// header file
class MyClass {
public:
    MyClass();
    ~MyClass();
    void someMethod();

private:
    class Impl;
    Impl* pImpl;
};

// implementation file
class MyClass::Impl {
public:
    void someMethod() { /* Implementation */ }
};

MyClass::MyClass() : pImpl(new Impl()) {}
MyClass::~MyClass() { delete pImpl; }
void MyClass::someMethod() { pImpl->someMethod(); }
```

----------------------------------------

TITLE: Initializing API and Routes with Gin
DESCRIPTION: This Go snippet sets up the main application entry point, initializes the database connection, defines API routes using the Gin framework, and starts the server on port 8080. It depends on the `gin-gonic/gin` and `go_book_api/api` packages.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_11

LANGUAGE: go
CODE:
```
package main

import (
	"github.com/gin-gonic/gin"
	"go_book_api/api"
)

func main() {
	api.InitDB()
	r := gin.Default()

	//routes
	r.POST("/book", api.CreateBook)
	r.GET("/books", api.GetBooks)
	r.GET("/book/:id", api.GetBook)
	r.PUT("/book/:id", api.UpdateBook)
	r.DELETE("/book/:id", api.DeleteBook)

	r.Run(":8080")
}
```

----------------------------------------

TITLE: Adding to an Array with $push in MongoDB
DESCRIPTION: This code snippet shows how to use the `$push` operator with the `updateOne()` method to add an item to an array field in MongoDB. In this example, the string 'mongodb' is added to the `tags` array for the document where the `name` field is `Jane Doe`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/update-methods.md#_snippet_5

LANGUAGE: javascript
CODE:
```
db.collection.updateOne({ name: 'Jane Doe' }, { $push: { tags: 'mongodb' } });
```

----------------------------------------

TITLE: Opening a file with Vim
DESCRIPTION: This command opens the file 'example.txt' in the Vim text editor. If the file doesn't exist, it will be created when the user saves the changes.  The user can then use Vim commands to edit the file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/editing-files/vim.md#_snippet_0

LANGUAGE: bash
CODE:
```
vim example.txt
```

----------------------------------------

TITLE: Defer JavaScript Loading using defer attribute
DESCRIPTION: This code snippet demonstrates the use of the `defer` attribute in a `<script>` tag. The `defer` attribute ensures that the script is fetched asynchronously but executed after the HTML document has been fully parsed. It's suitable for scripts that depend on the DOM or other scripts.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/best-practices/frontend-performance/content/use-non-blocking-javascript.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<script defer src="foo.js"></script>
```

----------------------------------------

TITLE: Defining Schema with MinKey Default Value
DESCRIPTION: This code snippet shows how to define a schema in MongoDB with a field that defaults to the MinKey value. This ensures that the field will always have the lowest possible value for sorting purposes. It leverages Schema.Types.MinKey to specify the data type in the schema.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/min-key.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Example schema with a field default set to MinKey
const mySchema = new Schema({
  name: String,
  priority: { type: Schema.Types.MinKey, default: new MinKey() },
});
```

----------------------------------------

TITLE: Filtering Logs for a Specific Service using journalctl
DESCRIPTION: This command is used to display logs specifically for a designated service. It uses the `-u` option followed by the service's name.  This allows administrators to focus on the logs relevant to a particular service, which is useful for troubleshooting issues related to that service. Replace `service_name` with the actual service name.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/service-management/check-logs.md#_snippet_1

LANGUAGE: shell
CODE:
```
journalctl -u service_name
```

----------------------------------------

TITLE: Displaying processes with user-friendly interface using htop
DESCRIPTION: This command provides an interactive and user-friendly interface for monitoring system performance and managing processes. It displays a real-time view and allows for process manipulation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/listing-finding-proc.md#_snippet_2

LANGUAGE: bash
CODE:
```
htop
```

----------------------------------------

TITLE: updateOne() Syntax in MongoDB
DESCRIPTION: This code snippet demonstrates the syntax for the `updateOne()` method in MongoDB. The `updateOne()` method updates the first document that matches the provided filter. The `<filter>` specifies the selection criteria, `<update>` specifies the modifications, and `<options>` are optional settings for the operation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/update-methods.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.updateOne(<filter>, <update>, <options>)
```

----------------------------------------

TITLE: Creating Git Tags
DESCRIPTION: This snippet demonstrates how to create a new tag in Git, either as a lightweight tag or an annotated tag with a message. The `git tag` command is used with different options to achieve this.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/managing-tags@NeU38WPbEphJuJ_AMkH82.md#_snippet_0

LANGUAGE: Shell
CODE:
```
git tag [name] [commit-hash]
```

LANGUAGE: Shell
CODE:
```
git tag -a [name] -m "[message]" [commit-hash]
```

----------------------------------------

TITLE: Using std::map in C++
DESCRIPTION: This code snippet demonstrates the usage of `std::map`, an associative container that stores key-value pairs in C++. It shows how to insert key-value pairs and iterate through the map to print the keys and values. The code requires the `<iostream>` and `<map>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/containers@1pydf-SR0QUfVNuBEyvzc.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> m;

    m["one"] = 1;
    m["two"] = 2;

    std::cout << "Map contains:\n";
    for (const auto &pair : m) {
        std::cout << pair.first << ": " << pair.second << '\n';
    }
}
```

----------------------------------------

TITLE: Function Prototype Example in C++
DESCRIPTION: This code shows how to use a function prototype in C++. It declares the function `multiplyNumbers` before its definition, allowing it to be called from `main` before the full function definition appears in the code. It calculates the product of two integers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/functions@oYi3YOc1GC2Nfp71VOkJt.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include <iostream>

// Function prototype
int multiplyNumbers(int x, int y);

int main() {
    int num1 = 3, num2 = 7;
    int result = multiplyNumbers(num1, num2); // Calling the function
    std::cout << "The product is: " << result << '\n';
    return 0;
}

// Function definition
int multiplyNumbers(int x, int y) {
    int product = x * y;
    return product;
}
```

----------------------------------------

TITLE: Declaring a Function in PHP
DESCRIPTION: This code snippet demonstrates how to declare a function in PHP. The `function` keyword is used, followed by the function name `greeting` and a parameter `$name`. The function body echoes a greeting message using the provided name. No dependencies are needed other than PHP itself.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/function-declaration@1nODJchgSuWbcvSlxnWeE.md#_snippet_0

LANGUAGE: PHP
CODE:
```
function greeting($name) {
    echo "Hello, " . $name;
}
```

----------------------------------------

TITLE: Lambda Function in C++11
DESCRIPTION: Shows the creation of an anonymous function using lambda expressions in C++11.  Lambdas allow defining functions inline where they are needed, improving code locality. No specific dependencies are required. The example defines a lambda function 'add' that takes two integers as input and returns their sum.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-0x@PPg0V5EzGBeJsysg1215V.md#_snippet_2

LANGUAGE: cpp
CODE:
```
auto add = [](int a, int b) { return a + b; };
int result = add(3, 4); // result is 7
```

----------------------------------------

TITLE: Using Awaited Utility Type in TypeScript
DESCRIPTION: This code demonstrates how the `Awaited` utility type in TypeScript recursively unwraps Promise types. It shows examples with nested Promises and union types, resolving to the underlying type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/awaited@aEhI_9mFWXRIZh1ZxTuzu.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type A = Awaited<Promise<string>>;
// type A = string

type B = Awaited<Promise<Promise<number>>>;
// type B = number

type C = Awaited<boolean | Promise<number>>;
// type C = number | boolean
```

----------------------------------------

TITLE: Enabling Retryable Writes in MongoDB (JavaScript)
DESCRIPTION: This code snippet shows how to enable retryable writes in the MongoDB client settings. By setting `retryWrites` to `true`, the MongoDB driver can automatically retry write operations that fail due to transient errors. This setting is crucial for ensuring data consistency and preventing data loss.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/useful-concepts/retryable-reads-writes.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
{
  retryWrites: true;
}
```

----------------------------------------

TITLE: Installing a package using vcpkg
DESCRIPTION: This snippet demonstrates how to install a package using the vcpkg package manager. It specifies the package name and the target architecture (x64-windows). The vcpkg executable is invoked directly from the command line.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/package-managers@h29eJG1hWHa7vMhSqtfV2.md#_snippet_1

LANGUAGE: sh
CODE:
```
./vcpkg install boost:x64-windows
```

----------------------------------------

TITLE: Stopping a Service using systemctl (Bash)
DESCRIPTION: This command stops a specified service in Linux using the systemctl utility. It requires root privileges, usually obtained through sudo. Replace `service_name` with the actual name of the service you wish to stop. The command gracefully terminates the service.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/service-management/start-stop-service.md#_snippet_1

LANGUAGE: bash
CODE:
```
sudo systemctl stop service_name
```

----------------------------------------

TITLE: Thread with Arguments in C++
DESCRIPTION: This code demonstrates how to pass arguments to a thread function. It includes the `<iostream>` and `<thread>` headers. The `print_sum` function takes two integer arguments and prints their sum. A `std::thread` object `t` is created, passing `print_sum` along with the integer arguments 3 and 5.  The `t.join()` call ensures the main thread waits for the new thread to finish before exiting. This illustrates how to parameterize thread execution.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/multithreading@OXQUPqxzs1-giAACwl3X1.md#_snippet_1

LANGUAGE: C++
CODE:
```
#include <iostream>
#include <thread>

void print_sum(int a, int b) {
    std::cout << "The sum is: " << a + b << '\n';
}

int main() {
    std::thread t(print_sum, 3, 5);
    t.join();
    return 0;
}
```

----------------------------------------

TITLE: Defining and Accessing Static Method and Property in PHP
DESCRIPTION: This code demonstrates how to define a static property and a static method within a PHP class. The static method accesses the static property using the `self::$property` syntax.  The code then shows how to call the static method directly using the class name and scope resolution operator (`MyClass::myStaticMethod()`), without creating an instance of the class. This highlights the key feature of static members: they belong to the class itself, not to any specific instance.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/static-methods-and-properties@qlkpwXfOc1p7j37hrzffI.md#_snippet_0

LANGUAGE: PHP
CODE:
```
class MyClass {
    static $myStaticProperty = "Hello, world";

    static function myStaticMethod() { 
        return self::$myStaticProperty; 
    }
}

echo MyClass::myStaticMethod();
```

----------------------------------------

TITLE: Implementing MyClass with Pimpl - C++ Source
DESCRIPTION: Implements the `MyClass` class using the Pimpl idiom. It includes the definition of the `MyClass_Impl` class, the constructor, destructor, and the `some_method` which delegates to the implementation. This source file provides the actual implementation details.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/pimpl@MEoWt8NKjPLVTeGgYf3cR.md#_snippet_1

LANGUAGE: C++
CODE:
```
#include "my_class.h"
#include <iostream>

class MyClass_Impl // the actual implementation
{
public:
    void some_method()
    {
        std::cout << "Implementation method called!\n";
    }
};

MyClass::MyClass() : pimpl(new MyClass_Impl()) {}

MyClass::~MyClass() { delete pimpl; }

void MyClass::some_method()
{
    pimpl->some_method(); // delegation to the implementation
}
```

----------------------------------------

TITLE: Fold Expressions Example in C++17
DESCRIPTION: This example demonstrates fold expressions for variadic templates in C++17. The `sum` function takes a variable number of arguments (`Ts... ts`) and uses a fold expression `(ts + ...)` to compute their sum. The result is returned as an `auto` deduced type. This requires a C++17 compiler and the use of variadic templates.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-17@R2-qWGUxsTOeSHRuUzhd2.md#_snippet_3

LANGUAGE: cpp
CODE:
```
template <typename... Ts>
auto sum(Ts... ts)
{
    return (ts + ...);
}
```

----------------------------------------

TITLE: Installing and Running PHPStan
DESCRIPTION: This code snippet demonstrates how to install PHPStan as a development dependency using Composer and then run it against the 'src' directory to analyze the PHP codebase. It requires Composer to be installed and configured.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/static-analysis@PrG_5dyBblXsWYYRcOJMa.md#_snippet_0

LANGUAGE: Bash
CODE:
```
composer require --dev phpstan/phpstan
./vendor/bin/phpstan analyse src
```

----------------------------------------

TITLE: Defining Union Types in TypeScript Function
DESCRIPTION: This code snippet demonstrates the usage of union types in a TypeScript function definition. The `combine` function accepts two arguments, `input1` and `input2`, which can be either a `string` or a `number`.  It attempts to add the two inputs together and return the result. Note: The actual implementation might require additional type checking or conversion to ensure correct behavior depending on the runtime types of `input1` and `input2`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/union-types@5z5w3yv1HbOpMlzEd4Iot.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function combine(input1: string | number, input2: string | number) {
  return input1 + input2;
}
```

----------------------------------------

TITLE: Constructor Overloading Example in TypeScript
DESCRIPTION: This code snippet demonstrates constructor overloading in TypeScript. It defines a class `Point` with multiple constructor signatures that accept different types and numbers of parameters. Only one constructor implementation exists, handling different input types through the `xs` and `y` parameters.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/constructor-overloading@oxzcYXxy2I7GI7nbvFYVa.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Point {
  // Overloads
  constructor(x: number, y: string);
  constructor(s: string);
  constructor(xs: any, y?: any) {
    // TBD
  }
}
```

----------------------------------------

TITLE: JavaScript Pagination Implementation
DESCRIPTION: This JavaScript snippet demonstrates how to implement pagination using a database query.  It uses `skip(offset)` and `limit(limit)` methods to retrieve a specific page of data. It assumes the presence of a `db` object with a `find` method.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/rest-pagination.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const items = await db.find().skip(offset).limit(limit);
res.json({ data: items });
```

----------------------------------------

TITLE: Include 'name' and 'age' fields using $project (JavaScript)
DESCRIPTION: This JavaScript snippet shows how to use the `$project` operator to include only the `name` and `age` fields, while excluding the `_id` field.  The other fields are implicitly excluded.  The aggregation pipeline is executed against the `students` collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/project.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.students.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      age: 1,
    },
  },
]);
```

----------------------------------------

TITLE: SSH into Application Server with Agent Forwarding
DESCRIPTION: This command uses SSH to connect to the application server with agent forwarding enabled.  The `-A` flag enables agent forwarding, which allows the application server to use the SSH agent on the local machine for authentication when connecting to other servers. It still requires the `-i` flag to specify the identity file initially.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_7

LANGUAGE: bash
CODE:
```
ssh -A -i ~/.ssh/mykey.pem ec2-user@3.112.5.67
#  ^^^ -A flag is used to enable agent forwarding
```

----------------------------------------

TITLE: Implementing Command Pattern Interface and Commands in PHP
DESCRIPTION: This code defines the `Command` interface and two concrete command classes, `TurnOn` and `TurnOff`. Each command class encapsulates a specific action to be performed on a `Bulb` object, allowing for the decoupling of the client from the receiver.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_49

LANGUAGE: php
CODE:
```
interface Command
{
    public function execute();
    public function undo();
    public function redo();
}

// Command
class TurnOn implements Command
{
    protected $bulb;

    public function __construct(Bulb $bulb)
    {
        $this->bulb = $bulb;
    }

    public function execute()
    {
        $this->bulb->turnOn();
    }

    public function undo()
    {
        $this->bulb->turnOff();
    }

    public function redo()
    {
        $this->execute();
    }
}

class TurnOff implements Command
{
    protected $bulb;

    public function __construct(Bulb $bulb)
    {
        $this->bulb = $bulb;
    }

    public function execute()
    {
        $this->bulb->turnOff();
    }

    public function undo()
    {
        $this->bulb->turnOn();
    }

    public function redo()
    {
        $this->execute();
    }
}
```

----------------------------------------

TITLE: Querying with $gte operator in MongoDB
DESCRIPTION: This snippet demonstrates how to use the `$gte` operator in MongoDB to find documents where the value of a specified field is greater than or equal to a given value. The example queries a collection to find all documents where the `age` field is greater than or equal to 25.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/index.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.collection.find({ age: { $gte: 25 } });
```

----------------------------------------

TITLE: Adding New Disks - Shell Commands
DESCRIPTION: These commands demonstrate how to add a new disk in Linux. The process involves listing available disks and partitions using `lsblk`, creating a new partition on the disk using `fdisk`, creating a filesystem on the partition using `mkfs.ext4`, and finally mounting the filesystem to a directory using `mount`.  Ensure `/dev/sdb` and `/dev/sdb1` are replaced with actual identifiers and `/mnt` with preferred mount point.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/disks-filesystems/adding-disks.md#_snippet_0

LANGUAGE: shell
CODE:
```
lsblk                     # list all disks and partitions
sudo fdisk /dev/sdb       # let's suppose new disk is /dev/sdb
sudo mkfs.ext4 /dev/sdb1  # make filesystem(e.g., ext4) on partition 1
sudo mount /dev/sdb1 /mnt # mount new filesystem to /mnt directory
```

----------------------------------------

TITLE: MongoDB Aggregation Pipeline Example (JavaScript)
DESCRIPTION: This JavaScript code snippet demonstrates a basic MongoDB aggregation pipeline. It filters documents with a 'status' of 'A', groups them by 'cust_id' to calculate the sum of 'amount', and then sorts the results by 'total' in descending order. The pipeline uses the $match, $group, and $sort aggregation stages.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/pipelines-stages-operators.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.aggregate([
  { $match: { status: 'A' } },
  { $group: { _id: '$cust_id', total: { $sum: '$amount' } } },
  { $sort: { total: -1 } },
]);
```

----------------------------------------

TITLE: Initializing Class with __construct in PHP
DESCRIPTION: This code snippet demonstrates the usage of the `__construct` magic method in PHP. The `__construct` method is automatically called when a new object of the class is created.  It allows for the initialization of object properties with provided arguments. In this example, the `$color` property of the `Car` class is initialized with a color value passed during object instantiation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/magic-methods@rSXsPWto7Jeyw3Szl9pvf.md#_snippet_0

LANGUAGE: php
CODE:
```
class Car {
    public $color;
    public function __construct($color) {
        $this->color = $color;
    }
}
$blueCar = new Car("Blue"); // This will call the __construct() method.
echo $blueCar->color;  // Outputs "Blue".
```

----------------------------------------

TITLE: Bringing a background process to the foreground - Bash
DESCRIPTION: This snippet shows how to bring a background process back to the foreground using the `fg` command.  This will allow the user to interact with the process directly from the terminal.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/bg-fg-processes.md#_snippet_2

LANGUAGE: bash
CODE:
```
fg
```

----------------------------------------

TITLE: Compiling C++ Code with GCC
DESCRIPTION: This command compiles a C++ source file (hello.cpp) using the GNU Compiler Collection (GCC). The -o flag specifies the name of the output executable file.  The executable will be named 'hello' (or 'hello.exe' on Windows).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/compilers@FTMHsUiE8isD_OVZr62Xc.md#_snippet_1

LANGUAGE: Bash
CODE:
```
g++ hello.cpp -o hello
```

----------------------------------------

TITLE: MongoDB $project Output Example (JSON)
DESCRIPTION: This JSON snippet shows the expected output after applying the `$project` operator to include the `name` and `totalPosts` fields.  The `totalPosts` field is calculated using the `$size` operator on the original `posts` array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/project.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "_id": 1,
  "name": "John Doe",
  "totalPosts": 2
}
```

----------------------------------------

TITLE: Importing a module using ES Modules
DESCRIPTION: This snippet demonstrates how to import the 'fs' module in JavaScript using the ES Modules syntax, which is standard in browsers and TypeScript. The `import` statement loads the module asynchronously, and the `from` keyword specifies the module's source.  The imported module is assigned to the `fs` constant.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/commonjs-vs-esm.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import fs from 'fs';
```

----------------------------------------

TITLE: Defining Multiline Strings in JavaScript
DESCRIPTION: This snippet demonstrates how to define multiline strings in JavaScript using template literals. Template literals are enclosed by backticks (``) and can contain placeholders using `${expression}`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/javascript.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
In order to define multiline strings in JavaScript, you need to use template literals. Template literals are enclosed by the backtick (```` ` ` ````) character instead of double or single quotes. Template literals can contain placeholders. These are indicated by the dollar sign and curly braces (``` `${expression}` ```).
```

----------------------------------------

TITLE: Enabling Retryable Reads in MongoDB (JavaScript)
DESCRIPTION: This code snippet shows how to enable retryable reads in the MongoDB client settings. Setting `retryReads` to `true` allows the MongoDB driver to automatically retry read operations that fail due to transient errors, enhancing application resilience.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/useful-concepts/retryable-reads-writes.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
{
  retryReads: true;
}
```

----------------------------------------

TITLE: Parsing Peer List from Tracker Response in Go
DESCRIPTION: This Go snippet defines a `Peer` struct and a function `Unmarshal` to parse a byte slice containing peer IP addresses and ports, which are received from a BitTorrent tracker.  It iterates through the byte slice, extracting IP addresses and ports, and creates a list of `Peer` structs. The peer data is assumed to be in network byte order (big-endian).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_2

LANGUAGE: go
CODE:
```
// Peer encodes connection information for a peer
type Peer struct {
	IP   net.IP
	Port uint16
}

// Unmarshal parses peer IP addresses and ports from a buffer
func Unmarshal(peersBin []byte) ([]Peer, error) {
	const peerSize = 6 // 4 for IP, 2 for port
	numPeers := len(peersBin) / peerSize
	if len(peersBin)%peerSize != 0 {
		err := fmt.Errorf("Received malformed peers")
		return nil, err
	}
	peers := make([]Peer, numPeers)
	for i := 0; i < numPeers; i++ {
		offset := i * peerSize
		peers[i].IP = net.IP(peersBin[offset : offset+4])
		peers[i].Port = binary.BigEndian.Uint16(peersBin[offset+4 : offset+6])
	}
	return peers, nil
}
```

----------------------------------------

TITLE: Run MongoDB in Docker
DESCRIPTION: This command starts a MongoDB instance in a Docker container. It maps port 27017 on the host to port 27017 in the container, names the container 'mdb', and runs it in detached mode. Requires Docker to be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/single-command-database-setup.md#_snippet_4

LANGUAGE: bash
CODE:
```
docker run \
  --name mdb \
  --publish 27017:27017 \
  --detach \
  mongo
```

----------------------------------------

TITLE: Creating a new user in Linux
DESCRIPTION: This command creates a new user account on a Linux system. The `sudo` command is required to execute with administrative privileges. The user will be prompted to set the new user's password and other related information.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/user-management/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
sudo adduser newuser
```

----------------------------------------

TITLE: Finding documents with implicit $and
DESCRIPTION: This JavaScript snippet demonstrates finding documents in MongoDB that satisfy multiple conditions without explicitly using the `$and` operator. It assumes a collection named `orders` exists and that MongoDB is accessible.  The query searches for orders with a `price` greater than 1 and a `quantity` less than 10.  This approach is often more concise than using `$and` when conditions apply to different fields.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/and.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.orders.find({ price: { $gt: 1 }, quantity: { $lt: 10 } });
```

----------------------------------------

TITLE: Mutex Lock Management with RAII in C++
DESCRIPTION: This code snippet implements RAII for managing a mutex lock.  The `Lock` class acquires the mutex in its constructor and releases it in its destructor, ensuring that the mutex is always released, even in case of exceptions. Dependencies: std::mutex.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/raii@OmHDlLxCnH8RDdu5vx9fl.md#_snippet_2

LANGUAGE: cpp
CODE:
```
class Lock {
public:
    Lock(std::mutex& mtx) : mutex_(mtx) {
        mutex_.lock();
    }

    ~Lock() {
        mutex_.unlock();
    }

private:
    std::mutex& mutex_;
};
```

----------------------------------------

TITLE: Updating with $addToSet in MongoDB (JavaScript)
DESCRIPTION: This code snippet demonstrates the usage of the `$addToSet` operator in MongoDB to add 'green' to the `colors` array in the document with `_id` equal to 1, only if 'green' is not already present in the array. This ensures that only unique values are added to the array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/index.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.collection.updateOne({ _id: 1 }, { $addToSet: { colors: 'green' } });
```

----------------------------------------

TITLE: Conditional Statement Example in Shell
DESCRIPTION: This script demonstrates the use of `if`, `elif`, and `else` statements in a shell script. It compares two variables, `a` and `b`, and prints a message based on whether `a` is less than, greater than, or equal to `b`. It requires a shell environment to execute and does not take any external input.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-programming/conditionals.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/bin/sh
a=10
b=20

if [ $a -lt 20 ]
then
   echo "a is less than b"
elif [ $a -gt 20 ]
then
   echo "a is greater than b"
else
   echo "a is equal to b"
fi
```

----------------------------------------

TITLE: Iterating with a For Loop in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates a simple 'for' loop that iterates five times.  The loop variable 'step' starts at 0 and increments in each iteration until it reaches 5.  Inside the loop, a message is logged to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/javascript/content/loops-and-iterations@YD-2l_amfqqqCdtc_Zdzo.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
for (let step = 0; step < 5; step++) {
  // Runs 5 times, with values of step 0 through 4.
  console.log('Walking east one step');
}
```

----------------------------------------

TITLE: Using Partial Type in TypeScript
DESCRIPTION: This snippet demonstrates how to use the `Partial` type to make all properties of the `User` interface optional. The `createUser` function accepts a `Partial<User>` and merges it with default values to create a complete `User` object. This allows creating user objects with only a subset of the required properties.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/partial@gBTem9Dp3IQLAkqGX4fOF.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface User {
  name: string;
  age: number;
  email: string;
}

function createUser(user: Partial<User>): User {
  return {
    name: 'John Doe',
    age: 30,
    email: 'john.doe@example.com',
    ...user,
  };
}

const newUser = createUser({ name: 'Jane Doe' });

console.log(newUser);
// Output: { name: 'Jane Doe', age: 30, email: 'john.doe@example.com' }
```

----------------------------------------

TITLE: Connecting to a Remote Server using SSH (Bash)
DESCRIPTION: This bash command establishes an SSH connection to a remote server. It requires the username for the remote account and the IP address of the server. Upon execution, the user will be prompted for the password associated with the provided username on the remote server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/networking/ssh.md#_snippet_0

LANGUAGE: bash
CODE:
```
ssh username@server_ip_address
```

----------------------------------------

TITLE: Sorting std::vector in C++
DESCRIPTION: This code snippet demonstrates sorting a `std::vector` using `std::sort`. The `std::sort` algorithm sorts the elements within the specified range (from `begin()` to `end()`). Requires including `<algorithm>` and `<vector>`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_10

LANGUAGE: cpp
CODE:
```
std::vector<int> my_vec = {4, 2, 5, 1, 3};
std::sort(my_vec.begin(), my_vec.end());
```

----------------------------------------

TITLE: Running a Docker Container
DESCRIPTION: This command pulls the Ubuntu image from Docker Hub and runs it as a container on the system. The `-it` flags provide an interactive terminal inside the container. This is a basic example demonstrating how to run a container using Docker. Requires Docker to be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/containerization/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run -it ubuntu bash
```

----------------------------------------

TITLE: Login User Endpoint
DESCRIPTION: This endpoint allows an existing user to log in. It expects a JSON payload with 'username' and 'password'.  The response is expected to be a user object with a JWT for authentication.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/image-processing-service.md#_snippet_1

LANGUAGE: HTTP
CODE:
```
POST /login
{
  "username": "user1",
  "password": "password123"
}
```

----------------------------------------

TITLE: List Directory Contents in Linux
DESCRIPTION: This command lists the files and directories in the current working directory. Without any arguments, it displays the names of the files and directories.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
ls
```

----------------------------------------

TITLE: Encapsulation using Access Specifiers
DESCRIPTION: This snippet demonstrates encapsulation by making the `name` and `age` data members `private` and providing public `setName` and `setAge` functions to modify them. This controls access to the internal data of the `Dog` class, protecting it from direct modification. It showcases the use of `public` and `private` access specifiers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/object-oriented-programming@b3-QYKNcW3LYCNOza3Olf.md#_snippet_2

LANGUAGE: cpp
CODE:
```
class Dog {
private:
    std::string name;
    int age;

public:
    void setName(std::string n) {
        name = n;
    }

    void setAge(int a) {
        age = a;
    }

    void bark() {
        std::cout << name << " barks!\n";
    }
};
```

----------------------------------------

TITLE: Promise Handling with Finally Block - JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to use the `finally` block in conjunction with `then` and `catch` blocks to handle promises. The `finally` block executes regardless of whether the promise resolves successfully (in `then`) or rejects with an error (in `catch`). It provides a way to perform cleanup or final actions after the promise has settled. The code logs the result of the promise, catches and logs any errors, and then executes the `finally` block, which logs a message indicating that the promise has settled.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/finally-block-in-promise.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
promise
  .then((result) => {
    console.log(result);
  })
  .catch((error) => {
    console.log(error.message);
  })
  .finally(() => {
    console.log('Finally Promise has settled');
  });
```

----------------------------------------

TITLE: Comparing with loose (==) and strict (===) equality in JavaScript
DESCRIPTION: This snippet illustrates the difference between the loose equality operator (==) and the strict equality operator (===) in JavaScript. The loose equality operator `==` converts the operands if they are not of the same type before comparison. The strict equality operator `===` checks if operands are of the same type, and if so, compares their values without any type conversion. Outputs true for `1 == '1'` due to type coercion and `false` for `1 === '1'` because the types are different.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/equality-operator.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
console.log(1 == '1'); // true
console.log(1 === '1'); // false
console.log(1 === 1); // true
```

----------------------------------------

TITLE: Linking with Dynamic Library
DESCRIPTION: This command compiles the main C++ source file and links it with the dynamic library `libmydynamiclibrary.so`. It uses the `-L` flag to specify the directory containing the library and the `-l` flag to specify the library name without the `lib` prefix and `.so` extension. The program is outputted as `myprogram`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/working-with-libraries@4kkX5g_-plX9zVqr0ZoiR.md#_snippet_3

LANGUAGE: C++
CODE:
```
g++ main.cpp -o myprogram -L/path/to/your/library/ -lmydynamiclibrary
```

----------------------------------------

TITLE: Flyweight Pattern Usage Example
DESCRIPTION: This PHP code illustrates how to use the `TeaShop` and `TeaMaker` classes to place and serve tea orders. It creates instances of `TeaMaker` and `TeaShop`, adds several orders with different preferences, and then serves the orders. This demonstrates the memory efficiency of the Flyweight pattern by reusing tea objects.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_39

LANGUAGE: php
CODE:
```
$teaMaker = new TeaMaker();
$shop = new TeaShop($teaMaker);

$shop->takeOrder('less sugar', 1);
$shop->takeOrder('more milk', 2);
$shop->takeOrder('without sugar', 5);

$shop->serve();
// Serving tea to table# 1
// Serving tea to table# 2
// Serving tea to table# 5

```

----------------------------------------

TITLE: Function Type Definition
DESCRIPTION: This snippet demonstrates how to define a function type in TypeScript and assign a function to a variable of that type. The `divide` variable is declared with a function type that accepts two number parameters and returns a number. The subsequent assignment ensures that the assigned function adheres to this type definition, promoting type safety.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/typing-functions@9FIhHwDNzyKpb42NmSv3K.md#_snippet_2

LANGUAGE: typescript
CODE:
```
let divide: (a: number, b: number) => number;

divide = (a, b) => {
  return a / b;
};
```

----------------------------------------

TITLE: Inserting Document Without _id - MongoDB JavaScript
DESCRIPTION: Inserts a document into a MongoDB collection without explicitly specifying the _id field. MongoDB automatically generates a unique ObjectId for the _id field. The output shows the inserted document with the generated ObjectId.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/object-id.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
db.collection.insertOne({ title: 'Example' });
```

LANGUAGE: JavaScript
CODE:
```
{
  "_id": ObjectId("60c4237a89293ddc1ef23245"),
  "title": "Example"
}
```

----------------------------------------

TITLE: Creating Binary Data Object in MongoDB with Python
DESCRIPTION: This code snippet demonstrates how to create a binary data object from an image file, store it in a MongoDB collection, and insert it into a document. It utilizes the `bson.binary.Binary` class to represent the image data in a binary format compatible with MongoDB.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/binary-data.md#_snippet_0

LANGUAGE: Python
CODE:
```
from bson.binary import Binary
from bson import ObjectId

# Create a binary data object
image_data = open("image.jpg", "rb").read()
binary_image_data = Binary(image_data)

# Storing binary data in a MongoDB collection
data_collection = db.collection_name
document = {
    "name": "Sample Image",
    "image_data": binary_image_data,
}
stored_data = data_collection.insert_one(document)
```

----------------------------------------

TITLE: Clearing a Timeout using clearTimeout in JavaScript
DESCRIPTION: This code snippet demonstrates how to use the `clearTimeout` function to cancel a pending timeout. It requires the timeout ID returned by the `setTimeout` function as an argument. This prevents the callback function associated with that timeout from being executed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/set-timeout.md#_snippet_1

LANGUAGE: js
CODE:
```
clearTimeout(timeoutId);
```

----------------------------------------

TITLE: Makefile for C++ project
DESCRIPTION: This Makefile defines variables for the C++ compiler (g++), compiler flags (including warning flags and include directories), source files, object files, and the final executable name. It defines rules for building the executable from the object file and the object file from the source file. It also includes a phony target for cleaning the build by removing the object and executable files. This allows for automated compilation and linking.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/makefile@t6rZLH7l8JQm99ax_fEJ9.md#_snippet_0

LANGUAGE: Makefile
CODE:
```
# Variables
CXX = g++
CXXFLAGS = -Wall -Iinclude
SRC = src/main.cpp
OBJ = main.o
EXE = my_program

# Rules
$(EXE): $(OBJ)
	$(CXX) $(CXXFLAGS) -o $(EXE) $(OBJ)

$(OBJ): $(SRC)
	$(CXX) $(CXXFLAGS) -c $(SRC)

# Phony targets
.PHONY: clean
clean:
	rm -f $(OBJ) $(EXE)
```

----------------------------------------

TITLE: Unordered Bulk Write in MongoDB with JavaScript
DESCRIPTION: This code snippet demonstrates an unordered bulk write operation in MongoDB using JavaScript. It initializes an unordered bulk operation, inserts a document, updates another, and removes a third. The operations can be executed in any order, and errors in one operation do not prevent others from executing.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/bulk-write.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const unorderedBulk = db.collection('mycollection').initializeUnorderedBulkOp();

unorderedBulk.insert({ _id: 1, name: 'John Doe' });
unorderedBulk.find({ _id: 2 }).updateOne({ $set: { name: 'Jane Doe' } });
unorderedBulk.find({ _id: 3 }).remove();

unorderedBulk.execute((err, result) => {
  // Handle error or result
});
```

----------------------------------------

TITLE: Function Declaration Syntax in TypeScript
DESCRIPTION: This code snippet demonstrates the function declaration syntax in TypeScript. It shows how to define a function with a name, parameters with their types, and a return type. The function body contains the code to be executed and returns a value of the specified return type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/typescript-functions@qOynVkDi1gFz0mxyJHjfJ.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function name(param1: type1, param2: type2, ...): returnType {
  return value;
}
```

----------------------------------------

TITLE: Using std::unordered_map in C++
DESCRIPTION: This code snippet illustrates the use of `std::unordered_map`, an associative container that stores key-value pairs using a hash table in C++. It shows how to insert key-value pairs and iterate through the unordered map to print the keys and values. The code requires the `<iostream>` and `<unordered_map>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/containers@1pydf-SR0QUfVNuBEyvzc.md#_snippet_3

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> um;

    um["one"] = 1;
    um["two"] = 2;

    std::cout << "Unordered map contains:\n";
    for (const auto &pair : um) {
        std::cout << pair.first << ": " << pair.second << '\n';
    }
}
```

----------------------------------------

TITLE: Chaining MongoDB Cursor Methods
DESCRIPTION: This snippet demonstrates how to chain multiple cursor methods to build complex queries. It includes `find()`, `sort()`, `limit()`, `skip()`, and `project()` methods.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/useful-concepts/cursors.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const cursor = db
  .collection('myCollection')
  .find({ age: { $gt: 25 } })
  .sort('name', 1)
  .limit(10)
  .skip(20)
  .project({ name: 1, _id: 0 });
```

----------------------------------------

TITLE: Setting up Secret Token in .env file
DESCRIPTION: Defines the environment variable `SECRET_TOKEN` to store a secret key. This key is used for signing and verifying JWT tokens, enhancing the security of the authentication process. This is a critical step to ensure the integrity of the generated tokens.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_26

LANGUAGE: text
CODE:
```
SECRET_TOKEN=<REPLACE WITH A RANDOM LONG STRING>
```

----------------------------------------

TITLE: Using Regular Expression Flags in MongoDB (JavaScript)
DESCRIPTION: Illustrates how to use regular expression flags in MongoDB queries with the `$regex` operator. The example shows a case-insensitive and multi-line match. Available flags include 'i' (case-insensitive), 'm' (multi-line), 'x' (ignore whitespace), and 's' (dotall).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/regex.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.find({ field: { $regex: /example/im } }); // Case-insensitive and multi-line match
```

----------------------------------------

TITLE: Partial Template Specialization in C++
DESCRIPTION: This code demonstrates partial template specialization for a class. The `MyPair` template class is partially specialized when the second template parameter is an `int`, providing a different print implementation. It includes the iostream library for console output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/template-specialization@sObOuccY0PDeGG-9GrFDF.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>

template <typename K, typename V>
class MyPair {
public:
    MyPair(K k, V v) : key(k), value(v) {}

    void print() const {
        std::cout << "General template: key = " << key << ", value = " << value << '\n';
    }

private:
    K key;
    V value;
};

template <typename T>
class MyPair<T, int> {
public:
    MyPair(T k, int v) : key(k), value(v) {}

    void print() const {
        std::cout << "Partial specialization for int values: key = " << key
                  << ", value = " << value << '\n';
    }

private:
    T key;
    int value;
};

int main() {
    MyPair<double, std::string> p1(3.2, "example");
    MyPair<char, int> p2('A', 65);
    p1.print(); // General template: key = 3.2, value = example
    p2.print(); // Partial specialization for int values: key = A, value = 65
}
```

----------------------------------------

TITLE: Defining a Class in TypeScript
DESCRIPTION: This snippet demonstrates how to define a class in TypeScript, including defining properties, a constructor, and a method. The `Animal` class has a `name` property, a constructor to initialize the `name`, and a `makeSound` method that logs a message to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/classes@ib0jfZzukYOZ42AdJqt_W.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Animal {
  name: string;
  constructor(name: string) {
    this.name = name;
  }

  makeSound(): void {
    console.log(`${this.name} is making a sound`);
  }
}

const dog = new Animal('Dog');
dog.makeSound(); // Output: Dog is making a sound
```

----------------------------------------

TITLE: Assigning Roles to a User in MongoDB with JavaScript
DESCRIPTION: This code snippet shows how to create a new user in MongoDB and assign roles to them using the `db.createUser()` method. It specifies the username, password, and an array of roles, each associated with a specific database. The example assigns the built-in `read` role and a custom `customRole` to the new user for the `exampleDB` database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-security/role-based-access-control.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.createUser({
  user: 'exampleUser',
  pwd: 'examplePassword',
  roles: [
    { role: 'read', db: 'exampleDB' },
    { role: 'customRole', db: 'exampleDB' },
  ],
});
```

----------------------------------------

TITLE: Extending Interfaces with TypeScript
DESCRIPTION: This code snippet demonstrates how to extend a TypeScript interface named `Shape` with a new interface named `Square`. The `Square` interface inherits the `width` and `height` properties from `Shape` and adds a new property `sideLength`. A variable of type `Square` is then created and initialized with values for all the required properties.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/extending-interfaces@O-9WQqidujLIEOTcOfy4n.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface Shape {
  width: number;
  height: number;
}

interface Square extends Shape {
  sideLength: number;
}

let square: Square = {
  width: 10,
  height: 10,
  sideLength: 10,
};
```

----------------------------------------

TITLE: Changing Process Priority Using renice
DESCRIPTION: The `renice` command adjusts the priority of a running process.  The `-n` option (or absence of it before the value) is used to specify the niceness increment. A negative value increases priority (makes it higher), while a positive value decreases priority (makes it lower). `-p` specifies the process id to change.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/proc-priorities.md#_snippet_1

LANGUAGE: Shell
CODE:
```
renice -5 -p [PID]
```

----------------------------------------

TITLE: Using Template Specialization C++
DESCRIPTION: This code demonstrates how to use the generic template and its full specialization. When `MyContainer` is instantiated with `double`, the generic version is used. When instantiated with `int`, the specialized version is used.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/full-template-specialization@6hTcmJwNnQstbWWzNCfTe.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int main() {
    MyContainer<double> d;
    MyContainer<int> i;

    d.print(); // Output: Generic container.
    i.print(); // Output: Container for integers.

    return 0;
}
```

----------------------------------------

TITLE: Update operation in MongoDB using Mongoose
DESCRIPTION: This code snippet demonstrates an update operation in MongoDB using Mongoose. It updates the user with the name 'John Doe' to 'Jane Doe'.  Requires Mongoose to be initialized and connected to the database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/nodejs-database-crud.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
User.updateOne({ name: 'John Doe' }, { name: 'Jane Doe' });
```

----------------------------------------

TITLE: Transferring file to remote server with scp command (Bash)
DESCRIPTION: This command copies a local file to a remote server using the scp (Secure Copy Protocol) command. It requires the `scp` command to be installed and the user to have appropriate permissions on both the local and remote systems. The command securely transfers the specified file from the local path to the destination path on the remote server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/networking/file-transfer.md#_snippet_0

LANGUAGE: bash
CODE:
```
scp /path/to/local/file username@remote:/path/to/destination
```

----------------------------------------

TITLE: Incrementing a Field with $inc in MongoDB
DESCRIPTION: This code snippet demonstrates how to use the `$inc` operator with the `updateMany()` method to increment a numeric field in MongoDB.  In this example, the `views` field is incremented by `1` for all documents where the `status` field is `new`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/update-methods.md#_snippet_4

LANGUAGE: javascript
CODE:
```
db.collection.updateMany({ status: 'new' }, { $inc: { views: 1 } });
```

----------------------------------------

TITLE: Inheritance in C++
DESCRIPTION: This code demonstrates inheritance by deriving the `Dog` class from the `Animal` class. The `Dog` class inherits the `breathe` function from the `Animal` class and adds its own `bark` function. It illustrates how to reuse code and create hierarchical relationships between classes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/object-oriented-programming@b3-QYKNcW3LYCNOza3Olf.md#_snippet_3

LANGUAGE: cpp
CODE:
```
class Animal {
public:
    void breathe() {
        std::cout << "I can breathe\n";
    }
};

class Dog : public Animal {
public:
    void bark() {
        std::cout << "Dog barks!\n";
    }
};
```

----------------------------------------

TITLE: Listing Git Tags
DESCRIPTION: This snippet shows how to list all existing tags in the Git repository. The `git tag` command without any arguments displays all tags.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/managing-tags@NeU38WPbEphJuJ_AMkH82.md#_snippet_1

LANGUAGE: Shell
CODE:
```
git tag
```

----------------------------------------

TITLE: Defining PHP Function with Default Parameter
DESCRIPTION: This PHP code defines a function `greet` with a default parameter `$name`. If no argument is passed to the function, `$name` defaults to "guest". If an argument is passed, it overrides the default value. The function then echoes a greeting using the provided or default name.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/default--optional-params@RgVP99rJJ8FVecIA45w20.md#_snippet_0

LANGUAGE: PHP
CODE:
```
function greet($name = "guest") {
  echo "Hello, $name!";
}

greet(); // Outputs: Hello, guest!
greet("John"); // Outputs: Hello, John!
```

----------------------------------------

TITLE: Inserting Decimal128 with BSON Library - JavaScript
DESCRIPTION: This snippet demonstrates how to insert a Decimal128 value into a MongoDB collection using the JavaScript BSON library. It utilizes the `Decimal128.fromString()` function to create a Decimal128 value from a string. Requires the 'bson' library to be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/decimal128.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { Decimal128 } = require('bson');

const decimalValue = Decimal128.fromString(
  '1234.567890123456789012345678901234'
);
db.example.insertOne({ amount: decimalValue });
```

----------------------------------------

TITLE: Get Current Directory Info in Node.js (JavaScript)
DESCRIPTION: This code snippet demonstrates how to retrieve the current working directory using `process.cwd()` and the directory of the current module using `__dirname` in a Node.js environment. `process.cwd()` returns the current working directory of the Node.js process. `__dirname` returns the directory where the current JavaScript file is located.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/process-cwd-vs-dirname.md#_snippet_0

LANGUAGE: javascript
CODE:
```
console.log(process.cwd());
// /Users/username/projects/nodejs

console.log(__dirname);
// /Users/username/projects/nodejs/src
```

----------------------------------------

TITLE: Install Git on Linux with apt-get
DESCRIPTION: This command installs Git on Debian-based Linux distributions (e.g., Ubuntu) using the `apt-get` package manager. The `sudo` command is required to execute the installation with administrative privileges. The `apt-get install git` command downloads and installs the latest version of Git from the configured repositories.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/installing-git-locally@v7hCNbgPByi3YiLSs46BK.md#_snippet_1

LANGUAGE: bash
CODE:
```
sudo apt-get install git
```

----------------------------------------

TITLE: Server Performance Stats Script in Bash
DESCRIPTION: This script, `server-stats.sh`, is designed to analyze server performance statistics on Linux. It calculates and displays total CPU usage, total memory usage (free vs used, including percentage), total disk usage (free vs used, including percentage), the top 5 processes by CPU usage, and the top 5 processes by memory usage. The script should be executable on any Linux server. No dependencies are explicitly required beyond standard Linux utilities. The output is intended to be human-readable, providing a snapshot of the server's current resource utilization.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/server-stats.md#_snippet_0

LANGUAGE: bash
CODE:
```
N/A
```

----------------------------------------

TITLE: Find with Query Filters - MongoDB
DESCRIPTION: This snippet demonstrates how to use query filters with the `find()` method to search for specific documents in a MongoDB collection. It requires a JSON object containing key-value pairs that the documents must match. The `age` field must exist in the `users` collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/find-methods.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.users.find({ age: 25 });
```

----------------------------------------

TITLE: Testing Protected Route with JWT in Go
DESCRIPTION: This Go code snippet demonstrates how to update an existing unit test to include JWT authentication.  It updates the test to create a protected route group with the JWT authentication middleware and then sets the Authorization header for the HTTP request to the protected route to use a generated JWT.  It then checks that accessing the protected endpoint with a valid token results in the expected status code and data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_35

LANGUAGE: go
CODE:
```
func TestCreateBook(t *testing.T) {
	setupTestDB()
	router := gin.Default()
	protected := router.Group("/", api.JWTAuthMiddleware()) // add
	protected.POST("/book", api.CreateBook)                 // add

	token := generateValidToken() // add

	book := api.Book{
		Title: "Demo Book name", Author: "Demo Author name", Year: 2021,
	}
	jsonValue, _ := json.Marshal(book)

	req, _ := http.NewRequest("POST", "/book", bytes.NewBuffer(jsonValue))
	req.Header.Set("Authorization", token) // add

	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if status := w.Code; status != http.StatusCreated {
		t.Errorf("Expected status %d, got %d", http.StatusCreated, status)
	}

	var response api.JsonResponse
	json.NewDecoder(w.Body).Decode(&response)

	if response.Data == nil {
		t.Errorf("Expected book data, got nil")
	}
}
```

----------------------------------------

TITLE: Calculate Sum of Field Values in MongoDB
DESCRIPTION: This snippet demonstrates how to calculate the total revenue from a collection of `orders` in MongoDB using the `$sum` operator in conjunction with the `$group` stage of the aggregation pipeline.  The pipeline groups all documents into a single group (identified by `_id: null`) and calculates the sum of the 'price' field for each order. The result is stored in the `totalRevenue` field.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/sum.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.orders.aggregate([
  {
    $group: {
      _id: null,
      totalRevenue: { $sum: '$price' },
    },
  },
]);
```

----------------------------------------

TITLE: Compound Index Example
DESCRIPTION: Demonstrates how to create a compound index on the `author` field in ascending order and the `title` field in descending order in MongoDB using Javascript.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/compound.md#_snippet_1

LANGUAGE: javascript
CODE:
```
{
  author: 1,
  title: -1
}
```

----------------------------------------

TITLE: Writing a Formal Email - Example Prompt
DESCRIPTION: This code snippet demonstrates how to specify a desired tone (formal) in a prompt to influence the language model's writing style. The instruction explicitly states the desired tone as "formal", guiding the model to generate a response appropriate for declining a job offer.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/good-prompts/style-information.md#_snippet_0

LANGUAGE: none
CODE:
```
Write a formal email to decline a job offer.
```

----------------------------------------

TITLE: Getting Current Time Point with Chrono in C++
DESCRIPTION: This snippet shows how to obtain the current time point using the `std::chrono::system_clock` in C++. The `std::chrono::system_clock::now()` function is used to get the current time, which is stored in a `std::chrono::system_clock::time_point` object. The program requires the `<iostream>` and `<chrono>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/date--time@yGvE6eHKlPMBB6rde0llR.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <chrono>

int main() {
    std::chrono::system_clock::time_point tp = std::chrono::system_clock::now();
    return 0;
}
```

----------------------------------------

TITLE: Finding Unique Values Using Set in JavaScript
DESCRIPTION: This code snippet demonstrates how to use the `Set` object in JavaScript to find unique values in an array.  It creates a new Set from the input array, which automatically removes duplicate values, and then uses the spread syntax to convert the Set back into an array. Dependencies: None. Input: Array with possible duplicate values. Output: Array with only unique values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/find-unique-array-values.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const roadmaps = ['JavaScript', 'React', 'Node.js', 'Node.js', 'JavaScript'];
const uniqueRoadmaps = [...new Set(roadmaps)];
console.log(uniqueRoadmaps); // ['JavaScript', 'React', 'Node.js']
```

----------------------------------------

TITLE: Monitoring Memory Usage in Linux (Bash)
DESCRIPTION: This command displays the amount of free and used memory in megabytes. It's useful for quickly assessing memory usage and identifying potential memory leaks or bottlenecks. It requires the `free` utility to be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/server-review/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
free -m
```

----------------------------------------

TITLE: Pushing Changes to a Remote Repository
DESCRIPTION: The `git push` command uploads local repository content to a remote repository. It's used to share commits with others or to back up your work. You typically specify the remote name and the branch to push to.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/basic-git-usage@PtU5Qwfzn3N1i3oRlCGoR.md#_snippet_6

LANGUAGE: bash
CODE:
```
git push
```

----------------------------------------

TITLE: Listing Installed Packages with apt
DESCRIPTION: This command lists all installed packages on Debian-based systems using the `apt` package manager. It requires sudo privileges to execute and retrieves information about the installed software.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/package-management/listing-installed-packages.md#_snippet_0

LANGUAGE: shell
CODE:
```
sudo apt list --installed
```

----------------------------------------

TITLE: Creating File with cat in Bash
DESCRIPTION: This snippet demonstrates creating a file and adding content using the `cat` command in Linux. The `cat > filename` command redirects the standard input (keyboard) to a file.  The user types the content, and when finished, presses Ctrl+D to save the content to the file. It overwrites existing files.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/creating-files.md#_snippet_1

LANGUAGE: bash
CODE:
```
cat > newfile.txt
```

----------------------------------------

TITLE: Accessing a value using a pointer in C++
DESCRIPTION: This code snippet demonstrates how to access the value of the variable that a pointer points to. The `*` operator is used to dereference the pointer and retrieve the value.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/pointers-and-references@DWw8NxkLpIpiOSUaZZ1oA.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int value = *ptr; // Value now contains the value of the variable that 'ptr' points to (i.e., 10)
```

----------------------------------------

TITLE: Using dynamic_cast Operator in C++
DESCRIPTION: This code snippet illustrates the usage of the `dynamic_cast` operator in C++ for safe downcasting of pointers. It attempts to downcast a base class pointer to different derived class pointers and checks the result to determine if the downcast was successful. If the downcast fails, the resulting pointer will be null. The code demonstrates how to handle potential downcasting failures, using conditional checks to determine if the cast was successful before dereferencing the resulting pointer. A virtual function in the base class is necessary for dynamic_cast to work.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/rtti@r0yD1gfn03wTpEBi6zNsu.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>

class Base { virtual void dummy() {} };
class Derived1 : public Base { /* ... */ };
class Derived2 : public Base { /* ... */ };

int main() {
    Base* base_ptr = new Derived1;

    // Using dynamic_cast to safely downcast the pointer
    Derived1* derived1_ptr = dynamic_cast<Derived1*>(base_ptr);
    if (derived1_ptr) {
        std::cout << "Downcast to Derived1 successful\n";
    }
    else {
        std::cout << "Downcast to Derived1 failed\n";
    }

    Derived2* derived2_ptr = dynamic_cast<Derived2*>(base_ptr);
    if (derived2_ptr) {
        std::cout << "Downcast to Derived2 successful\n";
    }
    else {
        std::cout << "Downcast to Derived2 failed\n";
    }

    delete base_ptr;
    return 0;
}
```

----------------------------------------

TITLE: Testing Update Book Endpoint (Go)
DESCRIPTION: This Go test function, `TestUpdateBook`, tests updating a book via the `/book/:id` endpoint using a mock HTTP request and a PUT method.  It employs `gin-gonic/gin` for routing and `net/http/httptest` for creating test requests. The test checks the HTTP status code and confirms that the book's title is updated as expected.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_22

LANGUAGE: go
CODE:
```
func TestUpdateBook(t *testing.T) {
	setupTestDB()
	book := addBook()
	router := gin.Default()
	router.PUT("/book/:id", api.UpdateBook)

	updateBook := api.Book{
		Title: "Advanced Go Programming", Author: "Demo Author name", Year: 2021,
	}
	jsonValue, _ := json.Marshal(updateBook)

	req, _ := http.NewRequest("PUT", "/book/"+strconv.Itoa(int(book.ID)), bytes.NewBuffer(jsonValue))
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if status := w.Code; status != http.StatusOK {
		t.Errorf("Expected status %d, got %d", http.StatusOK, status)
	}

	var response api.JsonResponse
	json.NewDecoder(w.Body).Decode(&response)

	if response.Data == nil || response.Data.(map[string]interface{})["title"] != "Advanced Go Programming" {
		t.Errorf("Expected updated book title 'Advanced Go Programming', got %v", response.Data)
	}
}
```

----------------------------------------

TITLE: Declaring a reference in C++
DESCRIPTION: This code snippet demonstrates how to declare a reference to an existing variable. The `&` symbol is used to create a reference. References must be initialized during declaration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/pointers-and-references@DWw8NxkLpIpiOSUaZZ1oA.md#_snippet_4

LANGUAGE: cpp
CODE:
```
dataType &referenceName = existingVariable;
```

----------------------------------------

TITLE: Auto Function Return Type Deduction - C++14
DESCRIPTION: This code demonstrates the use of `auto` for function return type deduction in C++14.  The compiler automatically deduces the return type of the function based on the returned expression. The `add` function takes two integers as input and returns their sum. The compiler will deduce the return type as `int`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/auto-automatic-type-deduction@CG01PTVgHtjfKvsJkJLGl.md#_snippet_2

LANGUAGE: C++
CODE:
```
auto add(int x, int y) {
    return x + y; // The compiler deduces the return type as 'int'
}
```

----------------------------------------

TITLE: Managing Dynamic Array with RAII in C++
DESCRIPTION: This code snippet demonstrates the RAII idiom by managing a dynamically allocated array using a class. The constructor allocates memory, and the destructor releases it.  This prevents memory leaks by ensuring the memory is deallocated when the object goes out of scope. Dependencies: none.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/raii@OmHDlLxCnH8RDdu5vx9fl.md#_snippet_0

LANGUAGE: cpp
CODE:
```
class ManagedArray {
public:
    ManagedArray(size_t size) : size_(size), data_(new int[size]) {
    }

    ~ManagedArray() {
        delete[] data_;
    }

    // Access function
    int& operator [](size_t i) {
        return data_[i];
    }

private:
    size_t size_;
    int* data_;
};
```

----------------------------------------

TITLE: Creating a Unique Single Field Index in MongoDB
DESCRIPTION: This snippet shows how to create a unique single field index on the 'email' field of the 'users' collection in MongoDB.  The `unique: true` option prevents duplicate email values from being inserted. It uses `db.collection.createIndex()` with the field name and the `unique` option.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/single-field.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.users.createIndex({ email: 1 }, { unique: true });
```

----------------------------------------

TITLE: Overriding Method in TypeScript
DESCRIPTION: Demonstrates how to override a method in a TypeScript subclass. The `Dog` class extends the `Animal` class and overrides the `makeSound` method to provide a specific implementation for dogs. The example shows that when `makeSound` is called on a `Dog` instance, the `Dog` class's implementation is executed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/method-overriding@aknqutxN2WDQ4RFcT-szM.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Animal {
  makeSound(): void {
    console.log('Making animal sound');
  }
}

class Dog extends Animal {
  makeSound(): void {
    console.log('Bark');
  }
}

let animal: Animal;

animal = new Dog();
animal.makeSound(); // Output: Bark
```

----------------------------------------

TITLE: Security Auditer Role JSON Template
DESCRIPTION: This JSON template defines a security auditer role, granting read-only access to security-related settings. It's intended for use in an infrastructure environment where granular access control is needed for auditing purposes. The expected output is a role definition that can be applied to users or services.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/best-practices/aws/content/security-audit.md#_snippet_0

LANGUAGE: JSON
CODE:
```
See: https://gist.github.com/bigsnarfdude/d0758b4fd335085623be
```

----------------------------------------

TITLE: Opening file with Gedit in Linux
DESCRIPTION: This command opens a file in the gedit text editor. Gedit is a GUI-based text editor commonly available in Linux environments, offering a graphical interface for file editing. `[filename]` should be the name of the file you want to edit.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/editing-files/index.md#_snippet_2

LANGUAGE: bash
CODE:
```
gedit [filename]
```

----------------------------------------

TITLE: Querying Objects in MongoDB
DESCRIPTION: This code snippet demonstrates how to query objects in MongoDB using dot notation to access nested fields. It finds all documents where the `city` field within the `address` object is equal to 'New York'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/object.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.find({
  'address.city': 'New York',
});
```

----------------------------------------

TITLE: Querying with $elemMatch in MongoDB (JavaScript)
DESCRIPTION: This code snippet demonstrates the usage of the `$elemMatch` operator in MongoDB to find documents where the `scores` array has at least one element between 80 and 90. It filters documents based on a condition applied to elements within an array field.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/index.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.find({ scores: { $elemMatch: { $gte: 80, $lt: 90 } } });
```

----------------------------------------

TITLE: Arrow Function with Types
DESCRIPTION: This code snippet demonstrates an arrow function in TypeScript with explicitly typed parameters and a return type. The `multiply` function takes two number parameters (`a` and `b`) and returns their product, which is also a number.  This approach is a concise way to define functions with type safety.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/typing-functions@9FIhHwDNzyKpb42NmSv3K.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const multiply = (a: number, b: number): number => {
  return a * b;
};
```

----------------------------------------

TITLE: Updating a Field with $set in MongoDB
DESCRIPTION: This code snippet demonstrates how to use the `$set` operator within the `updateOne()` method in MongoDB to update a specific field's value. In this example, the `age` field is updated to `30` for the document where the `name` field is `John Doe`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/update-methods.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.collection.updateOne({ name: 'John Doe' }, { $set: { age: 30 } });
```

----------------------------------------

TITLE: BitTorrent Message Structure and Serialization in Go
DESCRIPTION: This Go code defines constants for different BitTorrent message types (choke, unchoke, interested, etc.) and a `Message` struct to represent a BitTorrent message. The `Serialize` method serializes a message into a byte slice, including a length prefix, message ID, and payload.  It handles keep-alive messages (nil messages) as well.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_5

LANGUAGE: go
CODE:
```
type messageID uint8

const (
	MsgChoke         messageID = 0
	MsgUnchoke       messageID = 1
	MsgInterested    messageID = 2
	MsgNotInterested messageID = 3
	MsgHave          messageID = 4
	MsgBitfield      messageID = 5
	MsgRequest       messageID = 6
	MsgPiece         messageID = 7
	MsgCancel        messageID = 8
)

// Message stores ID and payload of a message
type Message struct {
	ID      messageID
	Payload []byte
}

// Serialize serializes a message into a buffer of the form
// <length prefix><message ID><payload>
// Interprets `nil` as a keep-alive message
func (m *Message) Serialize() []byte {
	if m == nil {
		return make([]byte, 4)
	}
	length := uint32(len(m.Payload) + 1) // +1 for id
	buf := make([]byte, 4+length)
	binary.BigEndian.PutUint32(buf[0:4], length)
	buf[4] = byte(m.ID)
	copy(buf[5:], m.Payload)
	return buf
}
```

----------------------------------------

TITLE: MongoDB $lte Query Example - JavaScript
DESCRIPTION: An example of using the `$lte` operator to query a MongoDB collection for products with a price of 15 or less. The `db.products.find()` method executes the query, filtering documents based on the `price` field.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/lte.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.products.find({ price: { $lte: 15 } });
```

----------------------------------------

TITLE: Deleting a Single Document with deleteOne() in MongoDB
DESCRIPTION: This code snippet demonstrates how to delete a single document from the 'users' collection where the 'firstName' field is equal to 'John'. Only the first matching document will be deleted. This requires a MongoDB database instance and a 'users' collection to exist.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/delete-methods.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.users.deleteOne({ firstName: 'John' });
```

----------------------------------------

TITLE: Virtual Function Example in C++
DESCRIPTION: This code demonstrates how to define a virtual function in a base class and override it in a derived class. When the `speak()` function is called via a base class pointer to a derived class object, the derived class's implementation is executed due to dynamic dispatch. The `override` keyword ensures that the function is actually overriding a virtual function from the base class. Standard output is used to display the sounds.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/virtual-methods@hNBErGNiegLsUJn_vgcOR.md#_snippet_0

LANGUAGE: cpp
CODE:
```
// Base class with virtual function
class Animal {
public:
    virtual void speak() { std::cout << "Generic sound"; }
};

// Derived class override
class Dog : public Animal {
public:
    void speak() override { std::cout << "Woof!"; } // Dynamic dispatch
};
```

----------------------------------------

TITLE: Compile-Time Evaluation with constexpr/consteval
DESCRIPTION: This snippet demonstrates the use of `constexpr` and `consteval` for compile-time evaluation in C++20. `constexpr` functions can be evaluated at compile time or runtime, while `consteval` functions can only be evaluated at compile time. The example showcases how `constexpr` and `consteval` functions are used.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-20@o3no4a5_iMFzEAGs56-BJ.md#_snippet_3

LANGUAGE: cpp
CODE:
```
constexpr int add(int a, int b) {
    return a + b;
}

consteval int square(int x) {
    return x * x;
}

int main() {
    constexpr int result1 = add(3, 4);   // evaluated at compile-time
    int result2 = add(5, 6);             // evaluated at runtime
    constexpr int result3 = square(7);   // evaluated at compile-time
}
```

----------------------------------------

TITLE: Prime Number Generation using Sieve of Eratosthenes in Python
DESCRIPTION: This snippet demonstrates an optimized method for finding prime numbers between 1 and 100 using the Sieve of Eratosthenes algorithm. The original code was inefficient. The optimized code creates a list of numbers and iteratively removes multiples of each number to identify primes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/coding-assistance.md#_snippet_3

LANGUAGE: python
CODE:
```
for num in range(1, 101):
    if num  1:
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
```

LANGUAGE: python
CODE:
```
numbers = list(range(2, 101))
for i in numbers:
    for j in range(i * 2, 101, i):
        if j in numbers:
            numbers.remove(j)
print(numbers)
```

----------------------------------------

TITLE: Moving Files with mv command
DESCRIPTION: This code snippet demonstrates the basic syntax of the `mv` command in Linux. It moves a file or directory from the `source` location to the `destination` location. It can also be used for renaming files if the destination is the same directory with a different name.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/moving-files.md#_snippet_0

LANGUAGE: bash
CODE:
```
mv [options] source destination
```

----------------------------------------

TITLE: Header File Example
DESCRIPTION: This code snippet demonstrates a basic header file in C++. Header files declare classes, functions, and variables that are needed by multiple source files. It uses include guards to prevent multiple inclusions of the same header file. The `Example` class is declared with a `printMessage` method.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/headers--cpp-files@CK7yf8Bo7kfbV6x2tZTrh.md#_snippet_0

LANGUAGE: cpp
CODE:
```
// example.h
#ifndef EXAMPLE_H
#define EXAMPLE_H

class Example {
public:
    void printMessage();
};

#endif
```

----------------------------------------

TITLE: Listing Indexes in MongoDB
DESCRIPTION: This snippet shows how to list all indexes for a collection. Replace COLLECTION_NAME with the actual collection name. It needs a MongoDB connection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/indexes.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.COLLECTION_NAME.getIndexes()
```

----------------------------------------

TITLE: Running the API Server
DESCRIPTION: This bash command starts the Go application server using the `go run` command. It executes the `cmd/main.go` file, initiating the API server. Requires Go to be installed and configured correctly.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_12

LANGUAGE: bash
CODE:
```
go run cmd/main.go
```

----------------------------------------

TITLE: Updating a Book via Curl
DESCRIPTION: This bash command uses `curl` to send a PUT request to the `/book/{id}` endpoint to update an existing book.  It includes the `Content-Type` header set to `application/json` and the updated book information in the request body.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_16

LANGUAGE: bash
CODE:
```
curl --location --request PUT 'localhost:8080/book/3' \
    --header 'Content-Type: application/json' \
    --data '{
        "title": "Go by Example: Programmer'\''s guide to idiomatic and testable code - Updated",
        "author": "Inanc Gumus",
        "year": 2023
    }'
```

----------------------------------------

TITLE: Implementing Copy-Write Idiom in C++
DESCRIPTION: This C++ code implements the Copy-Write idiom using a `MyString` class. It uses `std::shared_ptr` to manage string data and shares the underlying data between copies of `MyString` objects until a write operation is performed. The `write` function checks the reference count and only creates a new copy if there are multiple references, thereby minimizing unnecessary copying.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/copy-on-write@O2Du5gHHxFxAI2u5uO8wu.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <memory>

class MyString {
public:
    MyString(const std::string &str) : data(std::make_shared<std::string>(str)) {}

    // Use the same shared data for copying.
    MyString(const MyString &other) : data(other.data) { 
        std::cout << "Copied using the Copy-Write idiom.\n";
    }

    // Make a copy only if we want to modify the data.
    void write(const std::string &str) {
        // Check if there's more than one reference.
        if (data.use_count() > 1) {
            data = std::make_shared<std::string>(*data);
            std::cout << "Copy is actually made for writing.\n";
        }
        *data = str;
    }

private:
    std::shared_ptr<std::string> data;
};

int main() {
    MyString str1("Hello");
    MyString str2 = str1; // No copy operation, just shared references.

    str1.write("Hello, World!"); // This is where the actual duplication happens.
    return 0;
}
```

----------------------------------------

TITLE: Understanding Event Loop in JavaScript
DESCRIPTION: This snippet explains the concept of the Event Loop in JavaScript, emphasizing its role in enabling non-blocking operations and asynchronous code execution. The Event Loop continuously checks for tasks and executes them or waits for new tasks to arrive.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/javascript.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
The Event loop is one the most important aspect to understand in JavaScript. It is the mechanism that allows JavaScript to perform non-blocking operations. It is the reason why we can use asynchronous code in JavaScript. The Event loop is a loop that constantly checks if there are any tasks that need to be executed. If there are, it will execute them. If there are no tasks to execute, it will wait for new tasks to arrive.
```

----------------------------------------

TITLE: Opening file with Vi/Vim in Linux
DESCRIPTION: This command opens a file in either the vi or vim text editor. Vi/Vim are more advanced text editors, providing a wide range of features for file editing in Linux. Replace `[filename]` with the name of the file to be edited.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/editing-files/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
vi [filename] or vim [filename]
```

----------------------------------------

TITLE: Defining build process with GNU Make
DESCRIPTION: This snippet demonstrates a basic Makefile for a C++ project named HelloWorld. It defines the compiler, compiler flags, target executable, and build rules for compiling and linking the main.cpp file.  The clean rule removes the generated executable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/build-systems@jVXFCo6puMxJ_ifn_uwim.md#_snippet_0

LANGUAGE: Makefile
CODE:
```
# Makefile
CXX = g++
CPPFLAGS = -Wall -std=c++11
TARGET = HelloWorld

all: $(TARGET)

$(TARGET): main.cpp
	$(CXX) $(CPPFLAGS)main.cpp -o $(TARGET)

clean:
	rm $(TARGET)
```

----------------------------------------

TITLE: Defining Lion Interface and Implementations
DESCRIPTION: This snippet defines the `Lion` interface and two concrete implementations, `AfricanLion` and `AsianLion`. These classes define a contract (the `roar` method) for all types of lions in the game.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_18

LANGUAGE: php
CODE:
```
interface Lion
{
    public function roar();
}

class AfricanLion implements Lion
{
    public function roar()
    {
    }
}

class AsianLion implements Lion
{
    public function roar()
    {
    }
}
```

----------------------------------------

TITLE: Verify Git Installation
DESCRIPTION: This command verifies the Git installation by displaying the installed version. It executes the `git` command with the `--version` flag, which prints the Git version number to the console. This command confirms that Git is installed correctly and accessible from the command line.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/installing-git-locally@v7hCNbgPByi3YiLSs46BK.md#_snippet_3

LANGUAGE: bash
CODE:
```
git --version
```

----------------------------------------

TITLE: Defining Constants for Block Size and Backlog - Go
DESCRIPTION: This code defines constants for the maximum block size (16KB) that can be requested from a peer and the maximum backlog (5) of unfulfilled requests in the download pipeline. `MaxBlockSize` limits the size of individual data requests, while `MaxBacklog` controls the number of pending requests, helping to optimize network throughput by pipelining requests.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_11

LANGUAGE: go
CODE:
```
// MaxBlockSize is the largest number of bytes a request can ask for
const MaxBlockSize = 16384

// MaxBacklog is the number of unfulfilled requests a client can have in its pipeline
const MaxBacklog = 5
```

----------------------------------------

TITLE: Proxy Pattern Usage Example
DESCRIPTION: This PHP code demonstrates the usage of the `SecuredDoor` proxy class. It creates a `LabDoor` object and wraps it with a `SecuredDoor` object. It then attempts to open the door with an invalid password, which is denied, and then with the correct password, which is allowed. This shows how the proxy controls access to the real object.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_42

LANGUAGE: php
CODE:
```
$door = new SecuredDoor(new LabDoor());
$door->open('invalid'); // Big no! It ain't possible.

$door->open('$ecr@t'); // Opening lab door
$door->close(); // Closing lab door

```

----------------------------------------

TITLE: Aborting Fetch Requests with AbortController (JavaScript)
DESCRIPTION: This snippet demonstrates how to abort fetch requests using `AbortController` in JavaScript.  It creates an `AbortController` instance, passes its signal to the fetch options, and then aborts the request in a cleanup function. This prevents memory leaks by canceling pending API calls when they are no longer needed. It requires a URL to fetch and depends on the `AbortController` API.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/memory-leaks.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const controller = new AbortController();
fetch(url, { signal: controller.signal });
return () => controller.abort();
```

----------------------------------------

TITLE: Defining Template Literal Type in TypeScript
DESCRIPTION: This code snippet demonstrates how to define a template literal type in TypeScript to enforce a specific string format.  It concatenates the string "Mr. " with any string, creating a type `Name` that requires values to start with "Mr. ".  The example shows a valid assignment and an example that would cause a type error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/template-literal-types@xP25nGw42VqdfZ_9pDMXd.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type Name = `Mr. ${string}`;

let name: Name = `Mr. Smith`;  // ok
let name: Name = `Mrs. Smith`;  // error
```

----------------------------------------

TITLE: Connecting to PostgreSQL using pg
DESCRIPTION: This code snippet shows how to connect to a PostgreSQL database using the 'pg' driver. It creates a new Pool instance with connection details such as user, host, database name, password, and port. The 'pg' package must be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/nodejs-database-crud.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const { Pool } = require('pg');
const pool = new Pool({ user: 'user', host: 'localhost', database: 'mydb', password: 'password', port: 5432 });
```

----------------------------------------

TITLE: Querying with $eq in MongoDB
DESCRIPTION: This code snippet demonstrates how to use the $eq operator in a MongoDB query to find documents where a specific field matches a given value.  The example searches for documents in the `products` collection where the `price` field is equal to 100. No specific dependencies are required, just a MongoDB database instance.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/eq.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.find({ field: { $eq: value } });
```

LANGUAGE: javascript
CODE:
```
db.products.find({ price: { $eq: 100 } });
```

----------------------------------------

TITLE: Rvalue References and Move Semantics in C++11
DESCRIPTION: Illustrates the use of rvalue references and move semantics to optimize the handling of temporary objects in C++11.  Move semantics avoid unnecessary copying of data, improving performance. Requires `<string>`. The example moves the content of `str1` to `str2`, avoiding a deep copy.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-0x@PPg0V5EzGBeJsysg1215V.md#_snippet_4

LANGUAGE: cpp
CODE:
```
std::string str1 = "hello";
std::string str2 = std::move(str1); // move the content of str1 to str2
```

----------------------------------------

TITLE: Sort Query with Compound Index
DESCRIPTION: Demonstrates how to use a compound index to sort query results in MongoDB. This example finds books by 'John Smith' and sorts them by title in ascending order.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/compound.md#_snippet_4

LANGUAGE: javascript
CODE:
```
db.books.find({ author: 'John Smith' }).sort({ title: 1 });
```

----------------------------------------

TITLE: Using Input Iterator in C++
DESCRIPTION: This code demonstrates the usage of an input iterator in C++. It reads integer values from the standard input (std::cin) and copies them into a vector named 'nums'. It utilizes std::istream_iterator to read the input stream and std::back_inserter to add elements to the vector.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/iterators@Ebu8gzbyyXEeJryeE0SpG.md#_snippet_0

LANGUAGE: cpp
CODE:
```
std::vector<int> nums = {1, 2, 3, 4};
std::istream_iterator<int> input(std::cin);
std::copy(input, std::istream_iterator<int>(), std::back_inserter(nums));
```

----------------------------------------

TITLE: Dependency Injection Example
DESCRIPTION: Demonstrates dependency injection in PHP. Class B depends on class A, and an instance of A is passed to B's constructor, allowing B to use A's methods without creating A itself. This promotes loose coupling and testability.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/dependency-injection@KEE50C6lOS4eX8sAbfhYe.md#_snippet_0

LANGUAGE: PHP
CODE:
```
class A {
    function display(){
        echo 'Hello, PHP dependency injection!';
    }
}

class B {
    private $a;

    public function __construct(A $classAInstance) {
        $this->a = $classAInstance;
    }

    public function callDisplayOwn() {
        $this->a->display();
    }
}

$instanceA = new A();
$instanceB = new B($instanceA);
$instanceB->callDisplayOwn();  // Outputs: "Hello, PHP dependency injection!"
```

----------------------------------------

TITLE: Connecting to MongoDB using Mongoose
DESCRIPTION: This code snippet demonstrates how to connect to a MongoDB database using the Mongoose ORM. It requires the 'mongoose' package to be installed. The connection string includes the database host, port, and name. Options are passed to handle deprecated features.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/nodejs-database-crud.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });
```

----------------------------------------

TITLE: insertMany() Example in MongoDB
DESCRIPTION: This code snippet illustrates the usage of `insertMany()` to insert multiple documents into the 'inventory' collection in MongoDB. The array of documents includes items like 'pen', 'pencil', and 'notebook' with their respective quantities.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/insert-methods.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.inventory.insertMany([
  { item: 'pen', qty: 5 },
  { item: 'pencil', qty: 10 },
  { item: 'notebook', qty: 25 },
]);
```

----------------------------------------

TITLE: Resetting Changes
DESCRIPTION: The `git reset` command is used to undo changes in the working directory or staging area. It can be used to unstage files, revert commits, or even discard changes. Its behavior depends on the options used with the command (e.g., `--hard`, `--soft`).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/basic-git-usage@PtU5Qwfzn3N1i3oRlCGoR.md#_snippet_3

LANGUAGE: bash
CODE:
```
git reset
```

----------------------------------------

TITLE: Initializing Array in C++
DESCRIPTION: This code snippet demonstrates the declaration and initialization of an integer array in C++. Arrays store multiple values of the same data type in consecutive memory locations. This specific array stores 5 integer values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/data-types@MwznA4qfpNlv6sqSNjPZi.md#_snippet_5

LANGUAGE: cpp
CODE:
```
int numbers[5] = {1, 2, 3, 4, 5};
```

----------------------------------------

TITLE: Few-Shot Prompting for Sentiment Analysis Example
DESCRIPTION: This code snippet demonstrates few-shot prompting for a sentiment analysis task. It provides labeled input/output pairs (examples) to the model, allowing it to understand the desired behavior before analyzing a new query. The model learns from these examples and is expected to classify the sentiment of the new input.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/prompting-techniques/few-shot-prompting.md#_snippet_0

LANGUAGE: text
CODE:
```
The movie was fantastic! - Positive
I didn't enjoy the food at all. - Negative
Amazing vacation, I had a great time! - Positive
She looks upset and angry. - Negative
```

----------------------------------------

TITLE: Installing Snap Package using Snap Command
DESCRIPTION: This shell command demonstrates how to install a Snap package. Replace `[package-name]` with the actual name of the package you want to install. It requires superuser privileges (using sudo) to execute because installing packages needs root permissions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/package-management/snap.md#_snippet_0

LANGUAGE: sh
CODE:
```
sudo snap install [package-name]
```

----------------------------------------

TITLE: Create Readonly Mapped Type in TypeScript
DESCRIPTION: This code snippet defines a mapped type called `Readonly<T>`. It iterates through the properties of an object type `T` using `keyof T` and sets each property to `readonly`. The type of each property `P` is accessed using `T[P]`. This effectively creates a new type where all properties of the original type are read-only.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/mapped-types@VQ-V9qIdKgnpSJg2UnpuB.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type Readonly<T> = {
  readonly [P in keyof T]: T[P];
};

let obj = { x: 10, y: 20 };
let readonlyObj: Readonly<typeof obj> = obj;
```

----------------------------------------

TITLE: Querying with $lt operator in MongoDB
DESCRIPTION: This snippet demonstrates how to use the `$lt` operator in MongoDB to find documents where the value of a specified field is less than a given value. The example queries a collection to find all documents where the `age` field is less than 25.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/index.md#_snippet_4

LANGUAGE: javascript
CODE:
```
db.collection.find({ age: { $lt: 25 } });
```

----------------------------------------

TITLE: MongoDB $or Operator Example (JavaScript)
DESCRIPTION: This example demonstrates how to use the `$or` operator to find documents that satisfy at least one of the given conditions. The query finds documents where either `key1` equals `value1` or `key2` equals `value2`. It assumes a MongoDB database connection and a collection named `collection_name`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/index.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.collection_name.find({ $or: [{ key1: value1 }, { key2: value2 }] });
```

----------------------------------------

TITLE: Validating Email Address with filter_var in PHP
DESCRIPTION: This PHP code snippet demonstrates how to validate an email address using the `filter_var()` function with the `FILTER_VALIDATE_EMAIL` filter. It checks if the `$email` variable contains a valid email address format. If the email is valid, it outputs "Email is valid"; otherwise, it outputs "Email is not valid".
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/input-validation@93oEIZttb85S23C1fLraP.md#_snippet_0

LANGUAGE: php
CODE:
```
if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
  echo("Email is valid");
} else {
  echo("Email is not valid");
}
```

----------------------------------------

TITLE: Display Routing Table - Linux Shell
DESCRIPTION: This command displays the current routing table in Linux. The `-n` option is used to display network addresses numerically, avoiding hostname lookups, which can be useful for speed and troubleshooting.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/networking/subnetting.md#_snippet_0

LANGUAGE: shell
CODE:
```
# Display current routing table
$ route -n
```

----------------------------------------

TITLE: Enhancements to constexpr in C++20
DESCRIPTION: This code snippet illustrates the usage of `constexpr` enhancements in C++20. A `Point` struct is defined with a `constexpr` constructor. A `constexpr` function `create_points` dynamically allocates an array of `Point` objects and initializes them. The `points` variable is also declared as `constexpr`, meaning it's computed at compile time. This example showcases the ability to perform more complex operations at compile time.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/newest@sxbbKtg7kMNbkx7fXhjR9.md#_snippet_4

LANGUAGE: C++
CODE:
```
struct Point {
    constexpr Point(int x, int y): x_{x}, y_{y} {}
    int x_, y_;
};

constexpr auto create_points() {
    Point points[3]{};

    for (int i = 0; i < 3; ++i) {
        points[i] = Point{i, i * i};
    }

    return points;
}

constexpr auto points = create_points();
```

----------------------------------------

TITLE: Saving a Value in PHP Session
DESCRIPTION: This snippet shows how to save a value into the PHP session using the `$_SESSION` superglobal array. The data is stored server-side and associated with the user's session.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/sessions@qobzzgzArNHLLn9Oiqc6G.md#_snippet_1

LANGUAGE: PHP
CODE:
```
$_SESSION['username'] = 'John';
```

----------------------------------------

TITLE: Defining project using CMake
DESCRIPTION: This CMakeLists.txt file configures a C++ project named HelloWorld. It specifies the minimum CMake version, sets the C++ standard to C++11, and defines the executable to be built from main.cpp. CMake generates platform-specific build files.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/build-systems@jVXFCo6puMxJ_ifn_uwim.md#_snippet_1

LANGUAGE: CMake
CODE:
```
# CMakeLists.txt
cmake_minimum_required(VERSION 3.10)
project(HelloWorld)

set(CMAKE_CXX_STANDARD 11)

add_executable(HelloWorld main.cpp)
```

----------------------------------------

TITLE: Bitwise XOR Operation
DESCRIPTION: Performs a bitwise XOR (exclusive OR) operation between two integers. The result is a new integer where each bit is 1 if the corresponding bits in the input integers are different. Requires the C++ standard library. Input integers are 5 and 3. Output is 6.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/bitwise-operators@zE4iPSq2KsrDSByQ0sGK_.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int result = 5 ^ 3; // result will be 6 (0000 0101 ^ 0000 0011 = 0000 0110)
```

----------------------------------------

TITLE: Updating MongoDB Array with $pull Operator (JavaScript)
DESCRIPTION: This code snippet demonstrates how to remove a specific item ('reading') from the `hobbies` array using the `$pull` operator. It updates a specific document identified by its `_id`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/array.md#_snippet_7

LANGUAGE: javascript
CODE:
```
db.collection.updateOne(
  { _id: ObjectId('123xyz') },
  { $pull: { hobbies: 'reading' } }
);
```

----------------------------------------

TITLE: Creating gzip compressed tar archive
DESCRIPTION: This command creates a gzip compressed tar archive from a directory. The `cvzf` options specify create, verbose, gzip, and file, respectively. The first argument is the name of the archive to create, and the second argument is the directory to archive. Using `z` option compresses the archive using `gzip`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/working-with-files/archiving.md#_snippet_2

LANGUAGE: bash
CODE:
```
tar cvzf archive_name.tar.gz directory_to_archive/
```

----------------------------------------

TITLE: Importing and Using a Function in TypeScript
DESCRIPTION: This code snippet demonstrates how to import a function from an external module in TypeScript using the `import` statement. The `doSomething` function is imported from `./myModule` and then called. Requires that `myModule.ts` exists in the same directory and exports `doSomething`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/external-modules@egQWk1n3p8Pep83yIwCtI.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// main.ts
import { doSomething } from './myModule';
doSomething(); // Output: "Doing something..."
```

----------------------------------------

TITLE: Using $elemMatch Query Operator in MongoDB
DESCRIPTION: This code snippet shows how to use the $elemMatch query operator in a MongoDB query. The $elemMatch operator matches documents that contain an array field with at least one element that satisfies multiple given conditions. The example retrieves documents with at least one `subjects` element having a `score` greater than or equal to 80 and a `type` of 'exam'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/index.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.find({
  subjects: { $elemMatch: { score: { $gte: 80 }, type: 'exam' } },
});
```

----------------------------------------

TITLE: updateMany() Syntax in MongoDB
DESCRIPTION: This code snippet shows the syntax for the `updateMany()` method in MongoDB. The `updateMany()` method updates all documents that match the specified filter. The `<filter>` argument sets the query criteria, `<update>` defines the modifications, and `<options>` provides optional settings for the update operation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/update-methods.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.updateMany(<filter>, <update>, <options>)
```

----------------------------------------

TITLE: Querying for Field Type in MongoDB (JavaScript)
DESCRIPTION: This snippet shows how to use the `$type` operator in MongoDB to find documents where the `age` field is of type `number`. The `db.collection.find()` method is used to query the collection, filtering for documents where the `age` field's value is a number.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/index.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.find({ age: { $type: 'number' } });
```

----------------------------------------

TITLE: Process Login Route Handler
DESCRIPTION: Defines a route handler for processing the login form submission (`/process-login`). It checks if the username and password are 'admin'. If the credentials are valid, it sets the `userid` in the session and redirects to the homepage. Otherwise, it sends an error message. Depends on express and express-session.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_8

LANGUAGE: javascript
CODE:
```
module.exports = function processLogin(req, res) {
  if (req.body.username !== 'admin' || req.body.password !== 'admin') {
    return res.send('Invalid username or password');
  }

  req.session.userid = req.body.username;

  res.redirect('/');
}
```

----------------------------------------

TITLE: Piping Operators Example
DESCRIPTION: This code snippet demonstrates the use of the `pipe()` method to chain multiple RxJS operators. It shows how to apply operators sequentially to an Observable, improving readability compared to nested function calls. The operators `op1()`, `op2()`, `op3()`, and `op4()` are assumed to be defined elsewhere.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/angular/content/operators@ihsjIcF0tkhjs56458teE.md#_snippet_0

LANGUAGE: bash
CODE:
```
 obs.pipe(op1(), op2(), op3(), op4());
```

----------------------------------------

TITLE: Sorting Documents by Title in MongoDB
DESCRIPTION: This code snippet demonstrates how to sort documents in a MongoDB collection named 'books' by the 'title' field in ascending order using the `$sort` operator within an aggregation pipeline.  It uses the `db.books.aggregate()` method with an array containing a single stage: a `$sort` stage specifying the 'title' field with a value of 1 for ascending order. The result is a sorted set of documents.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/sort.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.books.aggregate([{ $sort: { title: 1 } }]);
```

----------------------------------------

TITLE: Defining and Using a Function in C++
DESCRIPTION: This code defines a simple `add` function that takes two integer arguments and returns their sum. The `main` function calls the `add` function and prints the result to the console. Requires the iostream library for standard output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/language-concepts@-6fwJQOfsorgHkoQGp4T3.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int add(int a, int b) {
    return a + b;
}

int main() {
    int sum = add(10, 20);
    std::cout << "The sum is: " << sum;
    return 0;
}
```

----------------------------------------

TITLE: Setting Cache Control Header in .htaccess
DESCRIPTION: This snippet demonstrates how to configure aggressive caching in Apache using a `.htaccess` file. It sets the `Cache-Control` header to cache all content within the directory for one year (31536000 seconds) and marks it as public.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_13

LANGUAGE: html
CODE:
```
# Cache everything for an year Header set Cache-Control "max-age=31536000,
public"
```

----------------------------------------

TITLE: Find with Projection - MongoDB
DESCRIPTION: This snippet demonstrates how to use projection with the `find()` method to control which fields are returned in the search results. It allows you to include or exclude specific fields in the output. The `age`, and `first_name` fields must exist in the `users` collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/find-methods.md#_snippet_4

LANGUAGE: javascript
CODE:
```
db.users.find({ age: 25 }, { first_name: 1, age: 1 });
```

----------------------------------------

TITLE: Implementing the Computer Facade in PHP
DESCRIPTION: This code implements the Facade pattern with a `ComputerFacade` class that provides a simplified interface to the complex `Computer` class. The `ComputerFacade` has `turnOn()` and `turnOff()` methods that encapsulate the sequence of operations required to start and shut down the computer, respectively. The facade shields the client from the complexity of the underlying subsystem.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_35

LANGUAGE: PHP
CODE:
```
class ComputerFacade
{
    protected $computer;

    public function __construct(Computer $computer)
    {
        $this->computer = $computer;
    }

    public function turnOn()
    {
        $this->computer->getElectricShock();
        $this->computer->makeSound();
        $this->computer->showLoadingScreen();
        $this->computer->bam();
    }

    public function turnOff()
    {
        $this->computer->closeEverything();
        $this->computer->pullCurrent();
        $this->computer->sooth();
    }
}
```

----------------------------------------

TITLE: Updating Document with $currentDate Operator
DESCRIPTION: This code snippet uses the `$currentDate` operator within an `updateOne` operation to update the `eventDate` field with the current date and time. The `$type: 'date'` option ensures that the field is stored as a Date type in MongoDB.  The `ObjectId` must be replaced with a valid document ID.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/date.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.events.updateOne(
  { _id: ObjectId('your_document_id') },
  {
    $set: {
      title: 'Sample Event',
      eventDate: { $currentDate: { $type: 'date' } }
    }
  }
);
```

----------------------------------------

TITLE: Aggregating with $eq in MongoDB
DESCRIPTION: This code snippet shows how to use the $eq operator within a MongoDB aggregation pipeline. It adds a new field called 'discounted' to each document, setting its value to `true` if the `price` field is equal to 50, and `false` otherwise. It utilizes the `$addFields` aggregation stage. It assumes a MongoDB database and a 'products' collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/eq.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.products.aggregate([
  {
    $addFields: {
      discounted: {
        $eq: ['$price', 50],
      },
    },
  },
]);
```

----------------------------------------

TITLE: MongoDB $not Operator Example (JavaScript)
DESCRIPTION: This example demonstrates how to use the `$not` operator to find documents where a specific condition is not met. The query finds documents where `key1` is not equal to `value1`. It assumes a MongoDB database connection and a collection named `collection_name`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/index.md#_snippet_5

LANGUAGE: javascript
CODE:
```
db.collection_name.find({ key1: { $not: { $eq: value1 } } });
```

----------------------------------------

TITLE: Installing Nano on Ubuntu-based Linux
DESCRIPTION: This snippet shows the commands to update the package list and install Nano on Ubuntu-based Linux distributions such as Ubuntu and Linux Mint. It first updates the package list using `sudo apt update`, then installs Nano using `sudo apt install nano`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/editing-files/nano.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Ubuntu based distributions
sudo apt update
sudo apt install nano
```

----------------------------------------

TITLE: Implementing Constructor and Destructor in PHP
DESCRIPTION: This code demonstrates the implementation of a constructor and destructor within a PHP class. The constructor `__construct()` initializes the `$value` property of the class. The destructor `__destruct()` echoes a message when the object is being destroyed. The example also includes instantiation of the class and accessing the initialized value, followed by the implicit destructor call when the script finishes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/constructor--destructor@oNUt1oT8pYBVvH0S2P6cb.md#_snippet_0

LANGUAGE: php
CODE:
```
class TestClass {
  public $value;

  // Constructor Method
  public function __construct($val) {
    $this->value = $val;
  }

  // Destructor Method
  public function __destruct() {
    echo "Object is being destroyed.";
  }
}

$obj = new TestClass("Hello World");
echo $obj->value;
// Displays: Hello World
// And when the script ends, "Object is being destroyed."
```

----------------------------------------

TITLE: Conditional Iteration with While Loop in C++
DESCRIPTION: This code demonstrates the use of a `while` loop in C++. The loop continues to execute as long as the condition `i < 5` is true. Inside the loop, the current value of `i` is printed, and then `i` is incremented. This example shows how to use a `while` loop for conditional iteration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/for--while--do-while-loops@_IP_e1K9LhNHilYTDh7L5.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>

int main() {
    int i = 0;
    while (i < 5) {
        std::cout << "Iteration: " << i << '\n';
        i++;
    }
    return 0;
}
```

----------------------------------------

TITLE: Using References in C++
DESCRIPTION: This code snippet shows how to create a reference to an integer variable in C++. References provide an alternative way to share memory locations between variables, creating an alias. Changes to the reference affect the original variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/data-types@MwznA4qfpNlv6sqSNjPZi.md#_snippet_7

LANGUAGE: cpp
CODE:
```
int num = 42;
int& numRef = num;
```

----------------------------------------

TITLE: Declaring a mutable variable in Rust
DESCRIPTION: This code snippet demonstrates how to declare a mutable variable `x` and assign it the value `5` in Rust. The `let` keyword is used for variable declaration, and the `mut` keyword makes the variable mutable, allowing its value to be changed later.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/syntax/variables.md#_snippet_0

LANGUAGE: Rust
CODE:
```
let mut x = 5;
```

----------------------------------------

TITLE: Defining a Class in TypeScript
DESCRIPTION: This snippet defines a `Car` class with properties `make`, `model`, and `year`.  The constructor initializes these properties, and the `drive` method logs a message to the console. This demonstrates basic class structure in TypeScript, which is a blueprint for creating objects.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/class@tTSITP1W1ymS-njbFb8Ts.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Car {
  make: string;
  model: string;
  year: number;

  constructor(make: string, model: string, year: number) {
    this.make = make;
    this.model = model;
    this.year = year;
  }

  drive() {
    console.log(`Driving my ${this.year} ${this.make} ${this.model}`);
  }
}
```

----------------------------------------

TITLE: Register User Endpoint
DESCRIPTION: This endpoint allows a new user to register. It expects a JSON payload with 'username' and 'password'.  The response is expected to be a user object with a JWT for authentication.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/image-processing-service.md#_snippet_0

LANGUAGE: HTTP
CODE:
```
POST /register
{
  "username": "user1",
  "password": "password123"
}
```

----------------------------------------

TITLE: Defining and Using Tuples in TypeScript
DESCRIPTION: This code snippet demonstrates how to define a tuple type in TypeScript, initialize a tuple variable with the defined type, and access its elements using index-based access. It also shows how accessing an out-of-bounds index results in a type error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/tuple@jq-GD0DLyzrEXQKUmt5kv.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type StringNumberPair = [string, number];

const pair: StringNumberPair = ['hello', 42];

const first = pair[0];
const second = pair[1];

// Error: Index out of bounds
const third = pair[2];
```

----------------------------------------

TITLE: Updating MongoDB Array with $addToSet Operator (JavaScript)
DESCRIPTION: This snippet shows how to add a new item ('painting') to the `hobbies` array only if it doesn't already exist, using the `$addToSet` operator. It ensures that the array contains only unique values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/array.md#_snippet_6

LANGUAGE: javascript
CODE:
```
db.collection.updateOne(
  { _id: ObjectId('123xyz') },
  { $addToSet: { hobbies: 'painting' } }
);
```

----------------------------------------

TITLE: Sample MongoDB Orders Collection
DESCRIPTION: This JavaScript code snippet represents a sample 'orders' collection in MongoDB. It consists of an array of document objects, each containing _id, customer_id, and amount fields, demonstrating sales data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/group.md#_snippet_1

LANGUAGE: javascript
CODE:
```
[  { _id: 1, customer_id: 'C1', amount: 110 },  { _id: 2, customer_id: 'C2', amount: 150 },  { _id: 3, customer_id: 'C1', amount: 90 },  { _id: 4, customer_id: 'C3', amount: 200 },  { _id: 5, customer_id: 'C2', amount: 50 },];
```

----------------------------------------

TITLE: Searching Text with grep in Bash
DESCRIPTION: This command utilizes the `grep` utility to search for a specific pattern (in this case, 'Linux') within a file named `sample.txt`. It will print all lines from `sample.txt` that contain the specified pattern. No specific dependencies are needed beyond the standard grep utility available in most Linux distributions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
grep 'Linux' sample.txt
```

----------------------------------------

TITLE: Querying MongoDB Array with $in Operator (JavaScript)
DESCRIPTION: This snippet shows how to use the `$in` operator to find documents where the `hobbies` array contains at least one of the specified values ('swimming' or 'coding'). It allows you to query for multiple possible values within the array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/array.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.find({ hobbies: { $in: ['swimming', 'coding'] } });
```

----------------------------------------

TITLE: Defining CMake Project with CMakeLists.txt
DESCRIPTION: This CMakeLists.txt file sets up a basic C++ project. It specifies the minimum CMake version, project name, source files, executable, include directories, and C++ standard. It demonstrates how to define a project, add source files, set include directories, and specify C++ standard requirements.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/cmake@ysnXvSHGBMMozBJyXpHl5.md#_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.0)

project(MyProject)

set(SRC_DIR "${CMAKE_CURRENT_LIST_DIR}/src")
set(SOURCES "${SRC_DIR}/main.cpp" "${SRC_DIR}/file1.cpp" "${SRC_DIR}/file2.cpp")

add_executable(${PROJECT_NAME} ${SOURCES})

target_include_directories(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_LIST_DIR}/include")

set_target_properties(${PROJECT_NAME} PROPERTIES
    CXX_STANDARD 14
    CXX_STANDARD_REQUIRED ON
    CXX_EXTENSIONS OFF
)
```

----------------------------------------

TITLE: Using Explain to Analyze Query Performance in MongoDB
DESCRIPTION: This snippet shows how to use the `explain()` method in MongoDB to understand the query plan and evaluate the effectiveness of indexes. By executing `explain('executionStats')`, you can gain insights into the query's execution statistics, helping identify bottlenecks and optimize query performance. The example finds documents where `field` equals `value` and explains the execution.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/query-optimization.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
db.collection.find({ field: value }).explain('executionStats');
```

----------------------------------------

TITLE: Querying with $all in MongoDB (JavaScript)
DESCRIPTION: This code snippet demonstrates the usage of the `$all` operator in MongoDB to find documents where the `tags` array contains both 'mongodb' and 'database'. The `$all` operator ensures that all specified elements are present in the array field, regardless of their order.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/index.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.find({ tags: { $all: ['mongodb', 'database'] } });
```

----------------------------------------

TITLE: TypeScript Type Compatibility Example
DESCRIPTION: Demonstrates type compatibility in TypeScript using structural typing. It defines an interface `Point` and assigns a value of type `Point` to a variable with an inline type definition that has the same structure.  This illustrates that TypeScript considers types compatible based on their structure, not their names.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/type-compatibility@alMJCEyUZ90xz-2_g3YRj.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface Point {
  x: number;
  y: number;
}

let p1: Point = { x: 10, y: 20 };
let p2: { x: number; y: number } = p1;

console.log(p2.x); // Output: 10
```

----------------------------------------

TITLE: Usage of Mutex Lock with RAII in C++
DESCRIPTION: This snippet demonstrates the usage of the `Lock` class. The mutex is locked when the `lock` object is created and automatically unlocked when it goes out of scope. Dependencies: Lock class, std::mutex.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/raii@OmHDlLxCnH8RDdu5vx9fl.md#_snippet_3

LANGUAGE: cpp
CODE:
```
std::mutex some_mutex;

void protected_function() {
    Lock lock(some_mutex);

    // Do some work that must be synchronized

    // No need to explicitly unlock the mutex, it will be automatically unlocked when lock goes out of scope.
}
```

----------------------------------------

TITLE: Using Composite Pattern: Calculating Net Salaries in PHP
DESCRIPTION: This code snippet demonstrates how to use the `Organization` class to calculate the net salaries of a group of employees. It creates instances of `Developer` and `Designer`, adds them to an `Organization` object, and then calculates the total salaries using the `getNetSalaries()` method.  This usage shows how the composite pattern lets clients treat the individual objects in a uniform manner.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_30

LANGUAGE: PHP
CODE:
```
// Prepare the employees
$john = new Developer('John Doe', 12000);
$jane = new Designer('Jane Doe', 15000);

// Add them to organization
$organization = new Organization();
$organization->addEmployee($john);
$organization->addEmployee($jane);

echo "Net salaries: " . $organization->getNetSalaries(); // Net Salaries: 27000
```

----------------------------------------

TITLE: REST API Pagination Query Parameters
DESCRIPTION: This snippet shows how to use query parameters `limit` and `offset` to implement pagination in a REST API. The `limit` parameter defines the number of items per page, and the `offset` parameter defines the starting position of the items.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/rest-pagination.md#_snippet_0

LANGUAGE: http
CODE:
```
GET /api/items?limit=10&offset=20
```

----------------------------------------

TITLE: Debugging with GDB
DESCRIPTION: Demonstrates how to use GDB (GNU Debugger) to debug a C++ program. It involves compiling the code with debug information, starting a GDB session, setting a breakpoint, running the program, and stepping through the code line by line. It assumes a Linux environment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/debuggers@qmHs6_BzND_xpMmls5YUH.md#_snippet_0

LANGUAGE: Shell
CODE:
```
g++ -g main.cpp -o main    # compile the code with debug info
gdb ./main                 # start gdb session
b main                     # set a breakpoint at the start of the main function
run                        # run the program
next                       # step to the next line
```

----------------------------------------

TITLE: Time Tracking CLI - Example CLI Commands
DESCRIPTION: These commands provide examples of how a user might interact with the time-tracking CLI utility. The `freelance start` command starts tracking time for a specific project, while `freelance stop` stops tracking time. The `report` command generates a report of time spent on a project since a specific date.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/backend-project-ideas.md#_snippet_1

LANGUAGE: CLI
CODE:
```
freelance start project1
```

LANGUAGE: CLI
CODE:
```
freelance stop project2
```

LANGUAGE: CLI
CODE:
```
report project1 since 1/2/24
```

----------------------------------------

TITLE: Retrieving All Books
DESCRIPTION: This Go code defines a handler function `GetBooks` that retrieves all books from the database. It uses GORM to query all `Book` records and returns a JSON response containing the list of books.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_7

LANGUAGE: go
CODE:
```
func GetBooks(c *gin.Context) {
	var books []Book
	DB.Find(&books)
	ResponseJSON(c, http.StatusOK, "Books retrieved successfully", books)
}
```

----------------------------------------

TITLE: Getting Future Time Point with Chrono in C++
DESCRIPTION: This example demonstrates how to obtain the current time and calculate a time point one hour in the future using the `chrono` library. It uses `std::chrono::system_clock::now()` to get the current time, then adds one hour to it using `std::chrono::hours(1)`. The code includes `<iostream>` and `<chrono>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/date--time@yGvE6eHKlPMBB6rde0llR.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <chrono>

int main() {
    // Get the current time_point using system_clock
    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();

    // Get the time_point 1 hour from now
    std::chrono::system_clock::time_point one_hour_from_now = now + std::chrono::hours(1);
    return 0;
}
```

----------------------------------------

TITLE: Decoding Bencode Structures using `bencode-go` library
DESCRIPTION: This snippet demonstrates how to decode bencoded data from a .torrent file using the `github.com/jackpal/bencode-go` library. It defines structs `bencodeInfo` and `bencodeTorrent` to map the bencoded data. The `Open` function reads from an io.Reader, unmarshals the bencoded data into a `bencodeTorrent` struct, and returns a pointer to it.  Error handling is included to catch potential unmarshaling errors.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_0

LANGUAGE: Go
CODE:
```
import (
	"github.com/jackpal/bencode-go"
)

type bencodeInfo struct {
	Pieces      string `bencode:"pieces"`
	PieceLength int    `bencode:"piece length"`
	Length      int    `bencode:"length"`
	Name        string `bencode:"name"`
}

type bencodeTorrent struct {
	Announce string      `bencode:"announce"`
	Info     bencodeInfo `bencode:"info"`
}

// Open parses a torrent file
func Open(r io.Reader) (*bencodeTorrent, error) {
	bto := bencodeTorrent{}
	err := bencode.Unmarshal(r, &bto)
	if err != nil {
		return nil, err
	}
	return &bto, nil
}
```

----------------------------------------

TITLE: Starting a Service using systemctl (Bash)
DESCRIPTION: This command starts a specified service in Linux using the systemctl utility. It requires root privileges, typically obtained using sudo. Replace `service_name` with the actual name of the service to be started. The command initiates the service according to its configuration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/service-management/start-stop-service.md#_snippet_0

LANGUAGE: bash
CODE:
```
sudo systemctl start service_name
```

----------------------------------------

TITLE: Adding a Remote Repository
DESCRIPTION: The `git remote add` command adds a remote repository to the local Git configuration. This allows you to push and pull changes from a remote location.  It takes two arguments: a name for the remote (e.g., origin) and the URL of the remote repository.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/basic-git-usage@PtU5Qwfzn3N1i3oRlCGoR.md#_snippet_4

LANGUAGE: bash
CODE:
```
git remote add
```

----------------------------------------

TITLE: Using Forward Declared Class in C++
DESCRIPTION: Demonstrates how to use a forward-declared class within a function parameter or as a member of another class. The forward declaration allows the compiler to understand the type without needing the full class definition at this point. Full definition is required before any instantiations or member function calls.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/forward-declaration@ZHjU60uzJTezADRhDTESG.md#_snippet_1

LANGUAGE: cpp
CODE:
```
void do_something (ClassA& obj);

class ClassB {
public:
    void another_function(ClassA& obj);
};
```

----------------------------------------

TITLE: Using Ranges in C++20
DESCRIPTION: This snippet demonstrates how to use ranges in C++20 to filter a vector of integers and print the even numbers. It utilizes `std::views::filter` to create a view of the even numbers. It requires the `<algorithm>`, `<iostream>`, `<ranges>`, and `<vector>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-20@o3no4a5_iMFzEAGs56-BJ.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <algorithm>
#include <iostream>
#include <ranges>
#include <vector>

int main() {
    std::vector<int> numbers = { 1, 2, 3, 4, 5 };

    auto even_numbers = numbers | std::views::filter([](int n) { return n % 2 == 0; });

    for (int n : even_numbers) {
        std::cout << n << ' ';
    }
}
```

----------------------------------------

TITLE: Aggregating Dates with $dayOfYear and $year
DESCRIPTION: This code aggregates documents in the `events` collection by year and day of year using the `$year` and `$dayOfYear` operators. It groups the events and counts the number of events for each day of each year, providing insights into event distribution over time.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/date.md#_snippet_5

LANGUAGE: javascript
CODE:
```
db.events.aggregate([
  {
    $group: {
      _id: {
        year: { $year: '$eventDate' },
        day: { $dayOfYear: '$eventDate' },
      },
      count: { $sum: 1 },
    },
  },
]);
```

----------------------------------------

TITLE: C++ Basic Arithmetic Example
DESCRIPTION: This C++ code demonstrates basic arithmetic operations using a standalone function for addition and a class with a member function for multiplication. It includes the iostream library for output, defines an add function and a Calculator class, and utilizes these in the main function to calculate and display the sum and product of two numbers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/what-is-c@x_28LiDVshqWns_aIBsdx.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

// A simple function to add two numbers
int add(int a, int b) {
    return a + b;
}

class Calculator {
public:
    // A member function to multiply two numbers
    int multiply(int a, int b) {
        return a * b;
    }
};

int main() {
    int x = 5;
    int y = 3;

    // Using the standalone function 'add'
    int sum = add(x, y);
    std::cout << "Sum: " << sum << '\n';

    // Using a class and member function
    Calculator calc;
    int product = calc.multiply(x, y);
    std::cout << "Product: " << product << '\n';

    return 0;
}
```

----------------------------------------

TITLE: Explicit Return Function Example in Rust
DESCRIPTION: This snippet defines a function `add` that takes two `i32` integer parameters and returns their sum using the explicit `return` keyword. The semicolon is required when using `return`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/syntax/functions.md#_snippet_1

LANGUAGE: Rust
CODE:
```
fn add(one: i32, two: i32) -> i32 { return one + two; }
```

----------------------------------------

TITLE: Display manual entry for a command - bash
DESCRIPTION: This command displays the manual entry for a specified command. The manual entry provides detailed information about the command, including its syntax, options, and usage.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-basics/command-help.md#_snippet_0

LANGUAGE: bash
CODE:
```
man [command]
```

----------------------------------------

TITLE: Attempting to Download a Piece - Go
DESCRIPTION: This function attempts to download a single piece from a peer. It initializes a `pieceProgress` struct to track the download state and sets a deadline for the connection to avoid getting stuck. It then enters a loop, sending requests for blocks of data until the entire piece is downloaded. Request pipelining ensures that multiple requests are sent before receiving responses.  Received messages are processed to update the download progress.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_12

LANGUAGE: go
CODE:
```
func attemptDownloadPiece(c *client.Client, pw *pieceWork) ([]byte, error) {
	state := pieceProgress{
		index:  pw.index,
		client: c,
		buf:    make([]byte, pw.length),
	}

	// Setting a deadline helps get unresponsive peers unstuck.
	// 30 seconds is more than enough time to download a 262 KB piece
	c.Conn.SetDeadline(time.Now().Add(30 * time.Second))
	defer c.Conn.SetDeadline(time.Time{}) // Disable the deadline

	for state.downloaded < pw.length {
		// If unchoked, send requests until we have enough unfulfilled requests
		if !state.client.Choked {
			for state.backlog < MaxBacklog && state.requested < pw.length {
				blockSize := MaxBlockSize
				// Last block might be shorter than the typical block
				if pw.length-state.requested < blockSize {
					blockSize = pw.length - state.requested
				}

				err := c.SendRequest(pw.index, state.requested, blockSize)
				if err != nil {
					return nil, err
				}
				state.backlog++
				state.requested += blockSize
			}
		}

		err := state.readMessage()
		if err != nil {
			return nil, err
		}
	}

	return state.buf, nil
}
```

----------------------------------------

TITLE: Searching for element using std::find in C++
DESCRIPTION: This code snippet demonstrates how to use `std::find` to search for a specific element within a vector. The code includes necessary headers such as `<algorithm>`, `<vector>`, and `<iostream>`. `std::find` searches the vector and returns an iterator to the element if found, or the end iterator if not found. The position of the found element is calculated and printed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/algorithms@whyj6Z4RXFsVQYRfYYn7B.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> nums = {5, 6, 7, 8, 9, 10};
    auto it = std::find(nums.begin(), nums.end(), 9);

    if (it != nums.end()) {
        std::cout << "Found 9 at position: " << (it - nums.begin());
    } else {
        std::cout << "9 not found";
    }
    // Output: Found 9 at position: 4
}
```

----------------------------------------

TITLE: Simple Struct Example (Rule of Zero) - C++
DESCRIPTION: Illustrates the Rule of Zero, where a simple struct without explicit resource management doesn't need to define special member functions. The compiler automatically generates these functions. This example defines a struct `MyResource` containing a string and an integer, requiring no manual resource handling.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/rule-of-zero-five-three@7sdEzZCIoarzznwO4XcCv.md#_snippet_0

LANGUAGE: cpp
CODE:
```
struct MyResource {
    std::string name;
    int value;
};
```

----------------------------------------

TITLE: Asynchronous JavaScript Example with setTimeout
DESCRIPTION: This JavaScript snippet demonstrates asynchronous execution using the `setTimeout` function. The `setTimeout` function schedules a callback function to be executed after a specified delay (1000 milliseconds in this case). The code continues to execute without waiting for the callback, illustrating non-blocking behavior. The expected output order is 'Before', 'After', and then 'Hello' after the delay.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/async-vs-sync.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
console.log('Before');

setTimeout(() => {
  console.log('Hello');
}, 1000);

console.log('After');
```

----------------------------------------

TITLE: Backing up MongoDB database with mongodump
DESCRIPTION: This command creates a backup of a specified MongoDB database using mongodump. It requires the MongoDB connection URI and an output directory path. The backup will be stored in BSON format in the specified output directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/backup-recovery/mongodump.md#_snippet_0

LANGUAGE: bash
CODE:
```
mongodump --uri "mongodb://username:password@host:port/database" --out /path/to/output/dir
```

----------------------------------------

TITLE: Local Scope Variable Example in C++
DESCRIPTION: This snippet illustrates local variable scope. A variable `localVar` is defined within the `localExample` function. It can only be accessed within that function. An attempt to access it from `main` would result in a compilation error because it's out of scope.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/scope@dKCYmxDNZubCVcR5rf8b-.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>

void localExample() {
    int localVar; // This is a local variable
    localVar = 5;
    std::cout << "Local variable: " << localVar << '\n';
}

int main() {
    localExample();
    // std::cout << localVar << '\n'; //error: ‘localVar’ was not declared in this scope
}
```

----------------------------------------

TITLE: Using Inheritance
DESCRIPTION: This snippet shows how to create a `Dog` object and use both the `breathe` (inherited from `Animal`) and `bark` functions. It requires the class definitions from the previous snippet. It demonstrates that the derived class inherits the functions of the base class.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/object-oriented-programming@b3-QYKNcW3LYCNOza3Olf.md#_snippet_4

LANGUAGE: cpp
CODE:
```
Dog myDog;
myDog.breathe(); // Output: I can breathe
myDog.bark(); // Output: Dog barks!
```

----------------------------------------

TITLE: Using useNetworkStatus Hook in React Component
DESCRIPTION: This code snippet demonstrates how to use the custom `useNetworkStatus` hook within a functional React component called `NetworkStatus`. The component calls the hook to get the current network status (`isOnline`) and renders a paragraph indicating whether the user is online or offline. It depends on the previously defined `useNetworkStatus` hook.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/custom-hook.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function NetworkStatus() {
  const isOnline = useNetworkStatus();

  return (
    <div>
      <p>You are {isOnline ? 'online' : 'offline'}.</p>
    </div>
  );
}
```

----------------------------------------

TITLE: Converting ObjectId to String - MongoDB JavaScript
DESCRIPTION: Converts an ObjectId instance to its string representation using the toString() method.  This is useful for storing the ObjectId in systems or formats that do not natively support ObjectIds.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/object-id.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const objectIdStr = objectId.toString();
```

----------------------------------------

TITLE: Hello World Example in C++
DESCRIPTION: This C++ code snippet demonstrates the classic "Hello, World!" program.  It includes the iostream library for input/output operations.  The main function prints "Hello, World!" to the console using std::cout and returns 0 to indicate successful execution. The program requires a C++ compiler to build and run.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/setting-up-your-environment@Zc_TTzmM36yWsu3GvOy9x.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

int main() {
    std::cout << "Hello, World!\n";
    return 0;
}
```

----------------------------------------

TITLE: React Lazy Loading with Suspense
DESCRIPTION: This snippet shows how to implement code splitting in React using `React.lazy` to dynamically import a component and `Suspense` to display a fallback UI while the component is loading.  It improves initial load time by loading components only when they are needed. Requires React and React DOM.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/code-splitting.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const LazyComponent = React.lazy(() => import('./Component'));

function App() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <LazyComponent />
    </Suspense>
  );
}
```

----------------------------------------

TITLE: Querying Embedded Array Elements - JavaScript
DESCRIPTION: This JavaScript code demonstrates how to query a MongoDB collection (`users`) to find documents where the `addresses` array contains an element with a specific `street` value. The `db.users.find()` method is used with dot notation (`'addresses.street'`) to target the field within the embedded document. This allows for precise filtering of documents based on embedded array content.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/embedded-documents-arrays.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.users.find({ 'addresses.street': '123 Main St' });
```

----------------------------------------

TITLE: Greeter Interface Implementation in Go
DESCRIPTION: This code snippet demonstrates how to define an interface (Greeter) in Go, implement it with a struct (Person), and then use the interface as a parameter in a function (SayHello). It illustrates polymorphism and loose coupling. The Person struct's Greet method returns a greeting string, which is then printed by the SayHello function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/golang/content/code-reusability.md#_snippet_0

LANGUAGE: Go
CODE:
```
package main

import "fmt"

type Greeter interface {
    Greet() string
}

// Person struct implements the Greeter interface
type Person struct {
    Name string
}

func (p Person) Greet() string {
    return "Hello, " + p.Name + "!"
}

// SayHello accepts any type that satisfies the interface value Greeter.
func SayHello(g Greeter) {
    fmt.Println(g.Greet())
}

func main() {
    p := Person{Name: "John"}
    SayHello(p)
}
```

----------------------------------------

TITLE: Closing Issues with GitHub CLI
DESCRIPTION: This command closes an issue by its issue number. It requires the issue number as an argument. The GitHub CLI must be installed and authenticated.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/issue-management@kGnZifvXbHBf5zXIsfAQw.md#_snippet_4

LANGUAGE: Shell
CODE:
```
gh issue close <issue-number>
```

----------------------------------------

TITLE: Restore with Gzip Compression (Bash)
DESCRIPTION: This command restores a database dump that has been compressed using gzip. The `--gzip` option instructs `mongorestore` to decompress the BSON files before importing them.  This is suitable for compressed backups created with `mongodump --gzip`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/backup-recovery/mongorestore.md#_snippet_2

LANGUAGE: bash
CODE:
```
mongorestore --gzip /path/to/your/compressed/dump/folder
```

----------------------------------------

TITLE: Chain of Responsibility Account Base Class
DESCRIPTION: This PHP code defines an abstract `Account` class that forms the base for a chain of responsibility. It includes methods for setting the next account in the chain (`setNext`), attempting to pay an amount (`pay`), and checking if the account can pay the amount (`canPay`). The `pay` method either handles the payment or passes it to the next account in the chain. This Account class serves as the base for other account implementations like Bank, Paypal and Bitcoin.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_43

LANGUAGE: php
CODE:
```
abstract class Account
{
    protected $successor;
    protected $balance;

    public function setNext(Account $account)
    {
        $this->successor = $account;
    }

    public function pay(float $amountToPay)
    {
        if ($this->canPay($amountToPay)) {
            echo sprintf('Paid %s using %s' . PHP_EOL, $amountToPay, get_called_class());
        } elseif ($this->successor) {
            echo sprintf('Cannot pay using %s. Proceeding ..' . PHP_EOL, get_called_class());
            $this->successor->pay($amountToPay);
        } else {
            throw new Exception('None of the accounts have enough balance');
        }
    }

    public function canPay($amount): bool
    {
        return $this->balance >= $amount;
    }
}

```

----------------------------------------

TITLE: Defining and Using a Struct in Go
DESCRIPTION: This code snippet demonstrates how to define a struct in Go and then use it. The struct `Book` contains the fields `Title` and `Author`. In the `main` function, an instance of `Book` is created and initialized.  The fields of the struct are accessed using dot notation and printed to the console. Dependencies: `fmt` package for printing.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/golang/content/structs.md#_snippet_0

LANGUAGE: Go
CODE:
```
// Define the struct
type Book struct {
    Title  string
    Author string
}

func main() {
    myBook := Book{Title: "Go in Action", Author: "William Kennedy"}
    // Access the properties through dot notation
    fmt.Println("Book:", myBook.Title, "by", myBook.Author)
}
```

----------------------------------------

TITLE: Registering Logout Route
DESCRIPTION: Registers the logout route handler with the Express application. Maps the GET request to '/logout' to the `LogoutHandler` function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const LogoutHandler = require('./handlers/logout.js');

app.get('/logout', LogoutHandler);
```

----------------------------------------

TITLE: Storing Integer Values in MongoDB Document (JavaScript)
DESCRIPTION: This code snippet demonstrates how to store integer values in a MongoDB document using JavaScript. It shows a simple example of a document with "age" and "upvotes" fields, which are integer values. This is a basic illustration and doesn't require any external libraries.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/int.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "name": "John Doe",
  "age": 30,
  "upvotes": 150
}
```

----------------------------------------

TITLE: Async IIFE Example JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates an asynchronous Immediately-Invoked Function Expression (IIFE).  The IIFE defines a block of code that executes immediately. It declares two constants, x and y, and logs their sum to the console. The asynchronous nature allows for the use of `await` if needed within the function body.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/javascript/content/iifes@YZlCoPvZuX5MmpLOTj5d4.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// An Async IIFE
( async() => {
    
    const x = 1;
    const y = 9;

    console.log(`Hello, The Answer is ${x+y}`);

})();
```

----------------------------------------

TITLE: Implementing Singleton Pattern in PHP
DESCRIPTION: This snippet demonstrates the Singleton pattern in PHP, ensuring that only one instance of the `President` class can be created. It includes a private constructor, disables cloning and unserialization, and provides a static method (`getInstance`) to access the single instance.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_16

LANGUAGE: php
CODE:
```
final class President
{
    private static $instance;

    private function __construct()
    {
        // Hide the constructor
    }

    public static function getInstance(): President
    {
        if (!self::$instance) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    private function __clone()
    {
        // Disable cloning
    }

    private function __wakeup()
    {
        // Disable unserialize
    }
}
```

----------------------------------------

TITLE: Performing Text Searches in MongoDB
DESCRIPTION: This code snippet performs a text search on the 'books' collection, finding documents where the 'title' field contains the words 'mongodb' or 'guide'. It uses the `$text` operator within the `db.collection.find()` method to specify the search query.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/text.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.books.find({ $text: { $search: 'mongodb guide' } });
```

----------------------------------------

TITLE: MongoDB Document Example
DESCRIPTION: Presents a sample MongoDB document structure for the `articles` collection. Each document represents an article with fields like `_id`, `title`, and `tags`. The `tags` field is an array of strings, which allows for multiple tags per article, making it suitable for demonstrating the `$in` operator.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/in.md#_snippet_2

LANGUAGE: javascript
CODE:
```
[
  { _id: 1, title: 'MongoDB', tags: ['database', 'NoSQL'] },
  { _id: 2, title: 'Node.js', tags: ['javascript', 'runtime'] },
  { _id: 3, title: 'React', tags: ['library', 'javascript'] },
];
```

----------------------------------------

TITLE: Using Auto Keyword with Iterators in C++
DESCRIPTION: This code demonstrates using the 'auto' keyword to declare iterators with a std::vector. It iterates through the vector and prints each element to the console. This avoids explicitly specifying the iterator type, making the code more concise.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/iterators@Ebu8gzbyyXEeJryeE0SpG.md#_snippet_6

LANGUAGE: cpp
CODE:
```
std::vector<int> nums = {1, 2, 3, 4};
for (auto itr = nums.begin(); itr != nums.end(); ++itr) {
    std::cout << *itr << " ";
}
```

----------------------------------------

TITLE: Display Last Lines of Syslog File - Bash
DESCRIPTION: This command displays the last 10 lines of the `/var/log/syslog` file using the `tail` command. It's a common use case for monitoring system logs and viewing the most recent entries. The command requires access to the specified file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/tail.md#_snippet_0

LANGUAGE: bash
CODE:
```
tail /var/log/syslog
```

----------------------------------------

TITLE: Unsetting a Variable and Memory Usage in PHP
DESCRIPTION: This code snippet demonstrates the use of the `unset()` function in PHP and its impact on memory usage. It initializes a long string variable, outputs the current memory usage, unsets the variable, and then outputs the memory usage again. It highlights that `unset()` reduces the reference count but the memory might not be immediately freed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/memory-management@bt7dK2PcOZ72B9HXPyMwL.md#_snippet_0

LANGUAGE: PHP
CODE:
```
$string = "This is a long string that's going to use a lot of memory!";
echo memory_get_usage();  // Outputs: 36640
unset($string);
echo memory_get_usage();  // Outputs: 36640
```

----------------------------------------

TITLE: Declaring Read-Only Array with 'as const' in TypeScript
DESCRIPTION: Demonstrates how to use the `as const` type assertion to create a read-only array in TypeScript. This assertion ensures that the array's values cannot be modified, and TypeScript infers a more specific type for the array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/as-const@pGFnTqi0-RSj0YRmNA5iy.md#_snippet_0

LANGUAGE: typescript
CODE:
```
const colors = ['red', 'green', 'blue'] as const;

// colors is now of type readonly ['red', 'green', 'blue']
```

----------------------------------------

TITLE: Type Checking JavaScript with TypeScript
DESCRIPTION: This snippet demonstrates how to enable type checking for plain JavaScript files using the `// @ts-check` comment at the top of the file. The TypeScript compiler then validates types by inspecting the JSDoc comments. Requires a TypeScript compiler configured to check JavaScript files.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/ts-and-js-interoperability@dcLaEU_lb0z_QypL1ZhpX.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// @ts-check

/**
 * Adds two numbers together.
 * @param {number} a - The first number.
 * @param {number} b - The second number.
 * @returns {number} The sum of the two numbers.
 */
function add(a, b) {
  return a + b;
}
```

----------------------------------------

TITLE: Listing Text Files Using Pipe Command in Bash
DESCRIPTION: This command uses the pipe operator (|) to chain the output of the `ls` command to the input of the `grep` command.  The `ls` command lists all files and directories in the current directory. The `grep` command filters this output, selecting only lines that match the regular expression `\.txt$`, which identifies files ending with the `.txt` extension. The result is a list of text files in the current directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/pipe.md#_snippet_0

LANGUAGE: bash
CODE:
```
ls | grep '\.txt$' 
```

----------------------------------------

TITLE: Defining a Concept in C++20
DESCRIPTION: This code snippet defines a C++20 concept named `Printable`. It specifies a constraint that a type `T` must support being outputted to `std::cout`. A template function `print` is then defined, which only accepts types that satisfy the `Printable` concept. This example illustrates compile-time checking of template parameter requirements.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/newest@sxbbKtg7kMNbkx7fXhjR9.md#_snippet_0

LANGUAGE: C++
CODE:
```
template<typename T>
concept Printable = requires(T x) {
    {std::cout << x}; 
};

template<Printable T>
void print(const T& x) {
    std::cout << x << '\n';
}
```

----------------------------------------

TITLE: Using Ranges in C++
DESCRIPTION: This C++20 snippet demonstrates the use of ranges to transform a vector of integers (`numbers`) into a new range (`doubled`) where each element is multiplied by 2.  The `std::views::transform` adaptor applies a lambda function to each element in the input range.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standards@vvE1aUsWbF1OFcmMUHbJa.md#_snippet_7

LANGUAGE: cpp
CODE:
```
std::vector<int> numbers = {1, 2, 3, 4};
auto doubled = numbers | std::views::transform([](int n) { return n * 2; });
```

----------------------------------------

TITLE: Basic Thread Creation in C++
DESCRIPTION: This code demonstrates the creation of a basic thread in C++. It includes the `<iostream>` and `<thread>` headers. A function `my_function` is defined, which will be executed in a separate thread. The `std::thread` object `t` is created and initialized with `my_function`. Finally, `t.join()` waits for the thread to complete before the main function exits. This example showcases the simplest form of multithreading.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/multithreading@OXQUPqxzs1-giAACwl3X1.md#_snippet_0

LANGUAGE: C++
CODE:
```
#include <iostream>
#include <thread>

void my_function() {
    std::cout << "This function is executing in a separate thread\n";
}

int main() {
    std::thread t(my_function);
    t.join(); // waits for the thread to complete
    return 0;
}
```

----------------------------------------

TITLE: Pulling Docker Image using Docker CLI
DESCRIPTION: This snippet demonstrates how to pull a Docker image from Docker Hub using the `docker pull` command.  It requires Docker to be installed on the system and sudo privileges.  The command fetches the specified image from the registry.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/containerization/docker.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Pull the Docker image from Docker Hub
sudo docker pull hello-world
```

----------------------------------------

TITLE: Creating a firewall rule with iptables and netfilter
DESCRIPTION: This iptables command creates a firewall rule that drops packets from the 192.168.0.0/24 network arriving on the eth0 interface. It uses the netfilter module to name the rule 'example' and specifies the action to drop matching packets. The rule is added to the INPUT chain.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/networking/netfilter.md#_snippet_0

LANGUAGE: bash
CODE:
```
iptables -A INPUT -i eth0 -s 192.168.0.0/24 -m netfilter --netfilter-name example --action drop
```

----------------------------------------

TITLE: Starting a Download Worker - Go
DESCRIPTION: This function starts a download worker goroutine for a given peer. It handles the connection, handshake, unchoking, and interest signaling. The worker retrieves work from a shared queue, attempts to download the piece, checks its integrity, and sends the downloaded piece back to the main thread using a results channel.  The function utilizes channels for managing the concurrent download process.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_9

LANGUAGE: go
CODE:
```
func (t *Torrent) startDownloadWorker(peer peers.Peer, workQueue chan *pieceWork, results chan *pieceResult) {
	c, err := client.New(peer, t.PeerID, t.InfoHash)
	if err != nil {
		log.Printf("Could not handshake with %s. Disconnecting\n", peer.IP)
		return
	}
	defer c.Conn.Close()
	log.Printf("Completed handshake with %s\n", peer.IP)

	c.SendUnchoke()
	c.SendInterested()

	for pw := range workQueue {
		if !c.Bitfield.HasPiece(pw.index) {
			workQueue <- pw // Put piece back on the queue
			continue
		}

		// Download the piece
		buf, err := attemptDownloadPiece(c, pw)
		if err != nil {
			log.Println("Exiting", err)
			workQueue <- pw // Put piece back on the queue
			return
		}

		err = checkIntegrity(pw, buf)
		if err != nil {
			log.Printf("Piece #%d failed integrity check\n", pw.index)
			workQueue <- pw // Put piece back on the queue
			continue
		}

		c.SendHave(pw.index)
		results <- &pieceResult{pw.index, buf}
	}
}
```

----------------------------------------

TITLE: Initializing npm
DESCRIPTION: This command initializes npm in your project directory.  It creates a package.json file that tracks the project's dependencies and metadata. It's a necessary first step before installing any npm packages.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/installation-and-configuration@dA8CNQOgJRDa0T7rmyS7f.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm init
```

----------------------------------------

TITLE: Starting MongoDB with Config File using Bash
DESCRIPTION: This snippet shows how to start MongoDB using a configuration file. The `--config` option specifies the path to the `mongod.conf` file.  The config file contains the encryption settings.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-security/encryption/encryption-at-rest.md#_snippet_1

LANGUAGE: bash
CODE:
```
mongod --config /etc/mongod.conf
```

----------------------------------------

TITLE: Generating and Verifying CSRF Token in PHP
DESCRIPTION: This PHP code snippet demonstrates how to generate a unique CSRF token using `bin2hex(random_bytes(32))` and store it in the session. It also shows how to verify the token submitted with a form against the stored session token. If the tokens match, the code proceeds with performing the action; otherwise, it indicates a potential CSRF attack. The code depends on the `$_SESSION` superglobal and the `$_POST` superglobal.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/csrf-protection@J9yIXZTtwbFzH2u4dI1ep.md#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
// Generate CSRF token
if(empty($_SESSION['csrf'])) {
    $_SESSION['csrf'] = bin2hex(random_bytes(32));
}

// Verify CSRF token
if(isset($_POST['csrf']) && $_POST['csrf'] === $_SESSION['csrf']) {
    // valid CSRF token, perform action
}
?>
```

----------------------------------------

TITLE: Flyweight Pattern Tea Example
DESCRIPTION: This PHP code implements the Flyweight pattern to optimize memory usage when dealing with multiple instances of tea orders. The `KarakTea` class represents the flyweight, `TeaMaker` acts as a factory to cache and reuse tea objects, and `TeaShop` takes and serves orders. The `TeaMaker` ensures that only one instance of each tea type is created, regardless of how many orders are placed for that type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_37

LANGUAGE: php
CODE:
```
// Anything that will be cached is flyweight.
// Types of tea here will be flyweights.
class KarakTea
{
}

// Acts as a factory and saves the tea
class TeaMaker
{
    protected $availableTea = [];

    public function make($preference)
    {
        if (empty($this->availableTea[$preference])) {
            $this->availableTea[$preference] = new KarakTea();
        }

        return $this->availableTea[$preference];
    }
}

```

----------------------------------------

TITLE: Running Docker Container using Docker CLI
DESCRIPTION: This snippet shows how to run a Docker container using the `docker run` command. It assumes the specified Docker image has already been pulled or is available locally.  The command creates and starts a container based on the specified image.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/containerization/docker.md#_snippet_1

LANGUAGE: bash
CODE:
```
# Run the Docker container
sudo docker run hello-world
```

----------------------------------------

TITLE: Returning Exit Codes from main Function in C++
DESCRIPTION: This code snippet demonstrates how to return an exit code from the `main` function in C++.  It uses conditional statements to check for error conditions and returns different exit codes accordingly. A return value of 0 indicates successful execution, while non-zero values indicate errors.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/exit-codes@oWygnpwHq2poXQMTTSCpl.md#_snippet_0

LANGUAGE: C++
CODE:
```
#include <iostream>

int main() {
    // Some code here...

    if (/*some error condition*/) {
        std::cout << "An error occurred.\n";
        return 1;
    }

    // More code here...

    if (/*another error condition*/) {
        std::cout << "Another error occurred.\n";
        return 2;
    }

    return 0; // Successful execution
}
```

----------------------------------------

TITLE: Creating a Book via Curl
DESCRIPTION: This bash command uses `curl` to send a POST request to the `/book` endpoint to create a new book. It sets the `Content-Type` header to `application/json` and provides the book details in the request body.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_13

LANGUAGE: bash
CODE:
```
curl --location 'localhost:8080/book' \
     --header 'Content-Type: application/json' \
     --data '{
       "title": "Go by Example: Programmer'\''s guide to idiomatic and testable code",
       "author": "Inanc Gumus",
       "year": 2021
     }'
```

----------------------------------------

TITLE: Creating a Conan package with conanfile.py
DESCRIPTION: Creates a Conan package by defining a `conanfile.py` file. This file includes the package's name, version, license, URL, description, settings, and build instructions. It uses the ConanFile class and defines methods for building, packaging, and providing package information. It includes build instructions with cmake, package configuration, and package info to inform the dependency manager of the names of the generated libraries.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/conan@ky_UqizToTZHC_b77qFi2.md#_snippet_4

LANGUAGE: python
CODE:
```
from conans import ConanFile, CMake


class MyLibraryConan(ConanFile):
    name = "MyLibrary"
    version = "0.1"
    license = "MIT"
    url = "https://github.com/username/mylibrary"
    description = "A simple example library"
    settings = "os", "compiler", "build_type", "arch"
    generators = "cmake"

    def build(self):
        cmake = CMake(self)
        cmake.configure(source_folder="src")
        cmake.build()

    def package(self):
        self.copy("*.hpp", dst="include", src="src/include")
        self.copy("*.lib", dst="lib", keep_path=False)
        self.copy("*.dll", dst="bin", keep_path=False)
        self.copy("*.so", dst="lib", keep_path=False)
        self.copy("*.a", dst="lib", keep_path=False)

    def package_info(self):
        self.cpp_info.libs = ["MyLibrary"]
```

----------------------------------------

TITLE: GREP command for pattern matching
DESCRIPTION: This bash command searches for a specified pattern within a given file and prints any lines containing that pattern to the terminal. The pattern is enclosed in double quotes, followed by the name of the file to be searched.  The command assumes GREP is installed and accessible in the environment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/grep.md#_snippet_0

LANGUAGE: bash
CODE:
```
grep "pattern" fileName
```

----------------------------------------

TITLE: Displaying Memory Usage with `free` command in Bash
DESCRIPTION: This snippet demonstrates the usage of the `free` command with the `-h` option to display memory usage statistics in a human-readable format. It shows the total, used, free, shared, buff/cache, and available memory, as well as swap memory usage. This helps in understanding the current state of memory usage in the Linux server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/server-review/available-mem.md#_snippet_0

LANGUAGE: bash
CODE:
```
free -h
```

----------------------------------------

TITLE: Tee Command Usage in Text Processing (Bash)
DESCRIPTION: This code snippet demonstrates the basic syntax of the `tee` command in a Linux environment. It takes the output of a command, displays it in the terminal (standard output), and simultaneously saves it to a specified file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/tee.md#_snippet_0

LANGUAGE: bash
CODE:
```
command | tee file
```

----------------------------------------

TITLE: Defining and Using Union in C++
DESCRIPTION: This code snippet defines a union named `Data` that can hold either an integer (`num`), a character (`letter`), or a float (`decimal`). It creates an instance of the `Data` union and assigns a value to the `num` member. Only one member of a union can be active at a time, sharing the same memory location.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/data-types@MwznA4qfpNlv6sqSNjPZi.md#_snippet_10

LANGUAGE: cpp
CODE:
```
union Data {
    int num;
    char letter;
    float decimal;
};

Data myData;
myData.num = 42;
```

----------------------------------------

TITLE: Setting Up Test Database and Adding Book (Go)
DESCRIPTION: This Go snippet defines helper functions for setting up an in-memory SQLite database for testing and adding a book to the database.  It utilizes the `gorm.io/gorm` and `gorm.io/driver/sqlite` packages.  The in-memory database ensures tests do not affect persistent data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_18

LANGUAGE: go
CODE:
```
package tests

import (
	"go_book_api/api"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

func setupTestDB() {
	var err error
	api.DB, err = gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	if err != nil {
		panic("failed to connect test database")
	}
	api.DB.AutoMigrate(&api.Book{})
}

func addBook() api.Book {
	book := api.Book{Title: "Go Programming", Author: "John Doe", Year: 2023}
	api.DB.Create(&book)
	return book
}
```

----------------------------------------

TITLE: Defining NonCopyable Class in C++
DESCRIPTION: Defines a `NonCopyable` class with a deleted copy constructor and copy assignment operator, preventing objects of this class from being copied. The default constructor and destructor are explicitly defined. This base class can be inherited to make other classes non-copyable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/non-copyable--non-moveable@xjUaIp8gGxkN-cp8emJ2M.md#_snippet_0

LANGUAGE: cpp
CODE:
```
class NonCopyable {
public:
  NonCopyable() = default;
  ~NonCopyable() = default;

  // Delete the copy constructor
  NonCopyable(const NonCopyable&) = delete;

  // Delete the copy assignment operator
  NonCopyable& operator=(const NonCopyable&) = delete;
};
```

----------------------------------------

TITLE: Data Analysis with Python
DESCRIPTION: Some business analysts use Python for more in-depth data analysis. This includes data cleaning, transformation, and statistical analysis using libraries like Pandas and NumPy. Python allows for complex data manipulations and advanced analytical techniques beyond the capabilities of standard tools like Excel.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/ai-data-scientist-vs-business-analytics.md#_snippet_1

LANGUAGE: Python
CODE:
```
import pandas as pd

df = pd.read_csv('data.csv')
print(df.describe())
```

----------------------------------------

TITLE: Asynchronous JavaScript Timer Example
DESCRIPTION: This code demonstrates how `setTimeout` works in JavaScript.  It shows that even with a 0ms delay, the callback function is added to the callback queue and executed only after the main thread is finished. This example highlights the asynchronous nature of `setTimeout` and its interaction with the event loop.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/event-loop.md#_snippet_0

LANGUAGE: javascript
CODE:
```
setTimeout(() => console.log('Hello from the timer'), 0);
console.log('Hello from the main code');
```

----------------------------------------

TITLE: Basic mongorestore Usage (Bash)
DESCRIPTION: This command restores a MongoDB database dump located in the specified folder. It assumes default settings for the host (localhost) and port (27017). No authentication is used in this basic example.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/backup-recovery/mongorestore.md#_snippet_0

LANGUAGE: bash
CODE:
```
mongorestore /path/to/your/dump/folder
```

----------------------------------------

TITLE: Using the exit() Function in C++
DESCRIPTION: This code snippet shows how to use the `exit()` function to terminate a program and return an exit code. The `exit()` function, part of the C++ Standard Library, allows exiting from any point in the program, not just from the `main` function. The `cstdlib` header must be included.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/exit-codes@oWygnpwHq2poXQMTTSCpl.md#_snippet_1

LANGUAGE: C++
CODE:
```
#include <iostream>
#include <cstdlib>

void some_function() {
    // Some code here...

    if (/*some error condition*/) {
        std::cout << "An error occurred.\n";
        std::exit(1);
    }

    // More code here...
}

int main() {
    some_function();

    // Some other code here...

    return 0; // Successful execution
}
```

----------------------------------------

TITLE: Null Pointer in C++11
DESCRIPTION: Demonstrates the use of `nullptr` for representing null pointer values in C++11, replacing the older `NULL` macro.  `nullptr` provides type safety and avoids potential ambiguities. No dependencies are required. The example initializes an integer pointer 'p' to a null value.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-0x@PPg0V5EzGBeJsysg1215V.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int* p = nullptr;
```

----------------------------------------

TITLE: Defining Conan dependencies in conanfile.txt
DESCRIPTION: Defines dependencies for a project in a `conanfile.txt` file. This file specifies the required packages (e.g., boost/1.75.0) and generators (e.g., cmake) for the project. The `[requires]` section lists the project dependencies, and the `[generators]` section defines the build system generator to use. The boost library version 1.75.0 is requested, and cmake generator will be used.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/conan@ky_UqizToTZHC_b77qFi2.md#_snippet_1

LANGUAGE: ini
CODE:
```
[requires]
boost/1.75.0

[generators]
cmake
```

----------------------------------------

TITLE: Creating Empty File with touch in Bash
DESCRIPTION: This snippet shows how to create an empty file using the `touch` command in Linux. The `touch` command updates the access and modification times of a file. If the file does not exist, it creates an empty file with the specified name. No dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/creating-files.md#_snippet_0

LANGUAGE: bash
CODE:
```
touch newfile.txt
```

----------------------------------------

TITLE: Bootstrapping vcpkg on Windows
DESCRIPTION: Runs the bootstrap script to initialize vcpkg on Windows. This script prepares vcpkg for use by installing necessary tools and dependencies.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/vcpkg@PKG5pACLfRS2ogfzBX47_.md#_snippet_1

LANGUAGE: Batch
CODE:
```
.\bootstrap-vcpkg.bat
```

----------------------------------------

TITLE: Compound Index Structure
DESCRIPTION: Shows the general structure of a compound index in MongoDB using Javascript. This includes specifying the field and its sort order (ascending/descending).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/compound.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
    field1: <sort order>,
    field2: <sort order>,
    ...
}
```

----------------------------------------

TITLE: Resource Management with Moving (Rule of Five) - C++
DESCRIPTION: Illustrates the Rule of Five, extending the Rule of Three to include move constructor and move assignment operator for efficient resource transfer. The example shows a class managing an array of integers, implementing move semantics to avoid unnecessary copying by transferring ownership of the resource to the new object.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/rule-of-zero-five-three@7sdEzZCIoarzznwO4XcCv.md#_snippet_2

LANGUAGE: cpp
CODE:
```
class MyResource {
public:
    // Constructors and destructor
    MyResource() : data(new int[100]) {}
    ~MyResource() { delete[] data; }

    // Copy constructor
    MyResource(const MyResource& other) : data(new int[100]) {
        std::copy(other.data, other.data + 100, data);
    }

    // Copy assignment operator
    MyResource& operator=(const MyResource& other) {
        if (&other == this) { return *this; }
        std::copy(other.data, other.data + 100, data);
        return *this;
    }

    // Move constructor
    MyResource(MyResource&& other) noexcept : data(other.data) {
        other.data = nullptr;
    }

    // Move assignment operator
    MyResource& operator=(MyResource&& other) noexcept {
        if (&other == this) { return *this; }
        delete[] data;
        data = other.data;
        other.data = nullptr;
        return *this;
    }

private:
    int* data;
};
```

----------------------------------------

TITLE: User Login Response Example
DESCRIPTION: Presents the JSON response structure for a successful login attempt.  It includes a token that the user will use for authentication when accessing protected endpoints. The server should generate and return this token upon successful authentication.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
}
```

----------------------------------------

TITLE: Expense Tracker CLI Usage Examples
DESCRIPTION: These examples showcase how to interact with the expense tracker application via the command line.  They cover adding expenses with descriptions and amounts, listing all expenses, viewing expense summaries, deleting expenses by ID, and filtering summaries by month. The examples demonstrate the expected input and output format for each command, providing a clear understanding of the application's functionality.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/expense-tracker.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ expense-tracker add --description "Lunch" --amount 20
# Expense added successfully (ID: 1)

$ expense-tracker add --description "Dinner" --amount 10
# Expense added successfully (ID: 2)

$ expense-tracker list
# ID  Date       Description  Amount
# 1   2024-08-06  Lunch        $20
# 2   2024-08-06  Dinner       $10

$ expense-tracker summary
# Total expenses: $30

$ expense-tracker delete --id 2
# Expense deleted successfully

$ expense-tracker summary
# Total expenses: $20

$ expense-tracker summary --month 8
# Total expenses for August: $20
```

----------------------------------------

TITLE: C++ While Loop
DESCRIPTION: This code demonstrates a while loop in C++. The code within the loop will continue to execute as long as the 'condition' evaluates to true. It's essential to ensure that the condition eventually becomes false to avoid an infinite loop. 'condition' represents any boolean expression.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/introduction-to-language@NvODRFR0DLINB0RlPSsvt.md#_snippet_5

LANGUAGE: cpp
CODE:
```
while (condition) {
    // Code to execute while the condition is true
}
```

----------------------------------------

TITLE: Creating Array in MongoDB Document (JavaScript)
DESCRIPTION: This code snippet shows how to create a MongoDB document with an array field.  The `hobbies` field is an array containing string values.  The `_id` field is of type ObjectId.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/array.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{  "_id": ObjectId("123xyz"),  "name": "John Doe",  "hobbies": ["reading", "swimming", "coding"]}
```

----------------------------------------

TITLE: Processing Files as a Stream in Java 8+
DESCRIPTION: This snippet demonstrates processing files as a stream using `Files.lines()` in Java 8 and later. It opens a file and processes each line using a stream. The parameter `Paths.get("file.txt")` specifies the file to be read.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/java/content/file-operations@NowpzyPVFcX082j5YS5i8.md#_snippet_2

LANGUAGE: Java
CODE:
```
Files.lines(Paths.get("file.txt")) // Processing the files as a stream. Since Java 8
```

----------------------------------------

TITLE: Creating a Pure Component with memo in React
DESCRIPTION: This code demonstrates creating a pure component using React's `memo` function. The `memo` function is a higher-order component that prevents re-renders if the props haven't changed. The `ChildComponent` is wrapped with `memo` to create `PureChildComponent`.  The `ParentComponent` manages state (`count` and `name`) and includes buttons to update the state, and the `PureChildComponent` receives the `name` state as a prop.  The re-render of `PureChildComponent` is dependent on whether the `name` prop changes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/pure-components.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, { memo } from 'react';

const ChildComponent = ({ name }) => {
  console.log('Rendering child component');
  return <div>{name}</div>;
};

const PureChildComponent = memo(ChildComponent);

const ParentComponent = () => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('John');

  return (
    <div>
      <button onClick={() => setCount(count + 1)}>Count - {count}</button>
      <button onClick={() => setName('Jane')}>Change name</button>
      <PureChildComponent name={name} />
    </div>
  );
};
```

----------------------------------------

TITLE: Updating User Data with Write-Through
DESCRIPTION: This code shows the implementation of the `set_user` function in the cache. It updates the user data in the database and then updates the cache with the new values, ensuring data consistency. The database `db` and cache object `cache` are assumed to be pre-initialized.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/system-design/content/write-through@RNITLR1FUQWkRbSBXTD_z.md#_snippet_1

LANGUAGE: python
CODE:
```
def set_user(user_id, values):
    user = db.query("UPDATE Users WHERE id = {0}", user_id, values)
    cache.set(user_id, user)
```

----------------------------------------

TITLE: CLI Usage Example (Bash)
DESCRIPTION: This demonstrates how to run the CLI application from the command line, providing the GitHub username as an argument.  The CLI is expected to fetch and display the activity of the specified user. It serves as an example of how the user interacts with the CLI.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/github-user-activity.md#_snippet_0

LANGUAGE: bash
CODE:
```
github-activity <username>
```

----------------------------------------

TITLE: Inserting Decimal128 with $numberDecimal - JavaScript
DESCRIPTION: This snippet demonstrates how to insert a Decimal128 value into a MongoDB collection using the `$numberDecimal` keyword.  The decimal value is provided as a string within the `$numberDecimal` operator.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/decimal128.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.example.insertOne({
  amount: {
    $numberDecimal: '1234.567890123456789012345678901234',
  },
});
```

----------------------------------------

TITLE: Directly Connecting to Private Server via SSH (Bash)
DESCRIPTION: This command establishes an SSH connection to the private server directly, using the ProxyJump setting in the SSH configuration file. This method allows access to the private server from the local machine, leveraging the bastion host as an intermediary.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/bastion-host.md#_snippet_3

LANGUAGE: bash
CODE:
```
ssh private-server
```

----------------------------------------

TITLE: Defining and Calling a Function in Python
DESCRIPTION: This code snippet demonstrates how to define a function in Python using the `def` keyword, give it a name (`greet`), accept a parameter (`name`), and execute a block of code when the function is called. The `greet` function prints a greeting message to the console. The code then calls the function with the argument "Roadmap.sh".
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/python/content/functions-builtin-functions@-DJgS6l2qngfwurExlmmT.md#_snippet_0

LANGUAGE: Python
CODE:
```
def greet(name):
    print(f"Hello, {name}!")


greet("Roadmap.sh")
```

----------------------------------------

TITLE: Summarized SSH Steps with Agent Forwarding
DESCRIPTION: These commands summarize the process of using SSH agent forwarding to access the database server. They include adding the key to the agent, connecting to the application server with agent forwarding, and then connecting to the database server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_9

LANGUAGE: bash
CODE:
```
# Add the private key to the local SSH agent
ssh-add ~/.ssh/mykey.pem

# SSH into the application server using the private key
ssh -A -i ~/.ssh/mykey.pem ec2-user@3.112.5.67
# you don't need to specify the private key here because it is already added to the SSH agent, so you can simply use the following command
ssh -A ec2-user@3.112.5.67

# SSH into the database server from the application server
ssh ec2-user@192.168.1.0
```

----------------------------------------

TITLE: Divide function with error handling in Go
DESCRIPTION: This Go code defines a `divide` function that takes two integers as input and returns the quotient and an error.  It checks for division by zero and returns an error if `b` is zero. Otherwise, it returns the result of the division and a `nil` error.  The `errors` package is used to create a new error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/go-vs-java.md#_snippet_0

LANGUAGE: go
CODE:
```
func divide(a, b int) (int, error) {
	if b == 0 {
		return 0, errors.New("division by zero")
	}
	return a / b, nil
}

// Usage
result, err := divide(10, 0)
if err != nil {
	log.Fatal(err)
}
```

----------------------------------------

TITLE: Running the Application
DESCRIPTION: Runs the Node.js application using the `npm start` command. This will execute the `index.js` file and start the Express server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_13

LANGUAGE: shell
CODE:
```
npm run start
```

----------------------------------------

TITLE: Testing JWT Generation Endpoint in Go
DESCRIPTION: This Go code snippet tests the `/token` endpoint to ensure that a JWT is generated successfully when valid credentials are provided. It creates a mock HTTP request with username and password, sends it to the endpoint, and verifies that the response contains a valid JWT.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_34

LANGUAGE: go
CODE:
```
func TestGenerateJWT(t *testing.T) {
	router := gin.Default()
	router.POST("/token", api.GenerateJWT)

	loginRequest := map[string]string{
		"username": "admin",
		"password": "password",
	}

	jsonValue, _ := json.Marshal(loginRequest)
	req, _ := http.NewRequest("POST", "/token", bytes.NewBuffer(jsonValue))

	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if status := w.Code; status != http.StatusOK {
		t.Errorf("Expected status %d, got %d", http.StatusOK, status)
	}

	var response api.JsonResponse
	json.NewDecoder(w.Body).Decode(&response)

	if response.Data == nil || response.Data.(map[string]interface{})["token"] == "" {
		t.Errorf("Expected token in response, got nil or empty")
	}
}
```

----------------------------------------

TITLE: Defining Book Model and Response Structs
DESCRIPTION: This Go code defines the `Book` struct, representing the data model for a book, including its ID, Title, Author and Year.  It also defines `JsonResponse` for standardizing the API responses.  The `ResponseJSON` helper function is used to construct and send JSON responses with specified status, message, and data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_4

LANGUAGE: go
CODE:
```
package api

import "github.com/gin-gonic/gin"

type Book struct {
	ID     uint   `json:"id" gorm:"primaryKey"`
	Title  string `json:"title"`
	Author string `json:"author"`
	Year   int    `json:"year"`
}

type JsonResponse struct {
	Status  int    `json:"status"`
	Message string `json:"message"`
	Data    any    `json:"data"`
}

func ResponseJSON(c *gin.Context, status int, message string, data any) {
	response := JsonResponse{
		Status:  status,
		Message: message,
		Data:    data,
	}

	c.JSON(status, response)
}
```

----------------------------------------

TITLE: Querying DNS with nslookup on Linux
DESCRIPTION: This command uses the `nslookup` utility to query the DNS server for the IP address of a specified domain name (e.g., www.example.com). It relies on the system's configured DNS resolver to perform the lookup. The output will include the IP address associated with the domain.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/networking/dns-resolution.md#_snippet_0

LANGUAGE: bash
CODE:
```
nslookup www.example.com
```

----------------------------------------

TITLE: Find with Skip - MongoDB
DESCRIPTION: This snippet demonstrates how to skip a specific number of rows before fetching records using the `skip()` function with the `find()` method. The `skip()` function accepts an integer representing the number of documents to skip.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/find-methods.md#_snippet_7

LANGUAGE: javascript
CODE:
```
db.users.find().skip(10);
```

----------------------------------------

TITLE: Setting Expires Header
DESCRIPTION: Shows how to set the `Expires` HTTP header to specify the expiration date for cached content. It defines the time until which the content is considered fresh and is expressed as an absolute GMT date.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_0

LANGUAGE: html
CODE:
```
Expires: Mon, 13 Mar 2017 12:22:00 GMT
```

----------------------------------------

TITLE: Implementing RadioStation Class in PHP
DESCRIPTION: This code defines the `RadioStation` class, representing a radio station with a specific frequency. It includes a constructor to set the frequency and a getter method to retrieve it.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_52

LANGUAGE: php
CODE:
```
class RadioStation
{
    protected $frequency;

    public function __construct(float $frequency)
    {
        $this->frequency = $frequency;
    }

    public function getFrequency(): float
    {
        return $this->frequency;
    }
}
```

----------------------------------------

TITLE: Static Cast in C++
DESCRIPTION: Demonstrates the use of `static_cast` for type conversion from an integer to a float. This is a compile-time cast, and it's suitable for explicit conversions between compatible types.  It performs some type checking at compile time.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/type-casting@PiMhw1oP9-NZEa6I9u4lX.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int a = 10;
float b = static_cast<float>(a);  // static_cast from int to float
```

----------------------------------------

TITLE: Creating Dynamic Library
DESCRIPTION: These commands compile a C++ source file into a position-independent object file and then create a dynamic library (shared object) from the object file. The dynamic library is named `libmydynamiclibrary.so`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/working-with-libraries@4kkX5g_-plX9zVqr0ZoiR.md#_snippet_2

LANGUAGE: C++
CODE:
```
g++ -c -fPIC sourcefile.cpp -o objectfile.o
g++ -shared -o libmydynamiclibrary.so objectfile.o
```

----------------------------------------

TITLE: Updating Racket packages
DESCRIPTION: This command updates all installed packages in the Racket programming language. It ensures you have the latest versions of your Racket libraries and dependencies. It uses the `raco pkg update` command.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/package-management/repositories.md#_snippet_1

LANGUAGE: racket
CODE:
```
raco pkg update      # command in Racket to update all installed packages
```

----------------------------------------

TITLE: Defining a Type in TypeScript
DESCRIPTION: This code snippet demonstrates how to define a type alias named `Person` in TypeScript. The type `Person` is defined as an object with `name` (string) and `age` (number) properties. It then shows an example of creating a constant object of type `Person`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/types-vs-interfaces@TxkEpoOiuUm-fXJuFVKcH.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type Person = {
  name: string;
  age: number;
};

const person: Person = {
  name: 'John Doe',
  age: 30,
};
```

----------------------------------------

TITLE: CRTP Implementation in C++
DESCRIPTION: This code demonstrates the Curiously Recurring Template Pattern (CRTP) in C++. The `Base` class is a template that takes the derived class as a type parameter. The `interface()` method calls the `implementation()` method of the derived class, allowing for custom implementations without virtual function calls. Derived classes `Derived1` and `Derived2` inherit from `Base` and provide their own or use the default implementation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/crtp@ttt-yeIi4BPWrgvW324W7.md#_snippet_0

LANGUAGE: cpp
CODE:
```
template <typename Derived>
class Base {
public:
    void interface() {
        static_cast<Derived*>(this)->implementation();
    }

    void implementation() {
        std::cout << "Default implementation in Base\n";
    }
};

class Derived1 : public Base<Derived1> {
public:
    void implementation() {
        std::cout << "Custom implementation in Derived1\n";
    }
};

class Derived2 : public Base<Derived2> {
    // No custom implementation, so Base::implementation will be used.
};

int main() {
    Derived1 d1;
    d1.interface();  // Output: "Custom implementation in Derived1"

    Derived2 d2;
    d2.interface();  // Output: "Default implementation in Base"

    return 0;
}
```

----------------------------------------

TITLE: Analyzing Query Execution with Explain in MongoDB (JavaScript)
DESCRIPTION: This code snippet uses the `explain()` method to analyze the query execution plan for a find operation on the 'username' field. This helps determine which index (if any) is being used for the query and identify potential performance bottlenecks. The output of `explain()` provides detailed information about the query execution process.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/indexes.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.users.find({ username: 'John' }).explain();
```

----------------------------------------

TITLE: Using Coffee Decorators: Building a Custom Coffee in PHP
DESCRIPTION: This code shows how to use the coffee decorators to dynamically build a custom coffee with various add-ons. It starts with a `SimpleCoffee` and then wraps it with `MilkCoffee`, `WhipCoffee`, and `VanillaCoffee` decorators, each adding to the cost and description. This demonstrates how the Decorator pattern allows for flexible and extensible object modification at runtime.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_33

LANGUAGE: PHP
CODE:
```
$someCoffee = new SimpleCoffee();
echo $someCoffee->getCost(); // 10
echo $someCoffee->getDescription(); // Simple Coffee

$someCoffee = new MilkCoffee($someCoffee);
echo $someCoffee->getCost(); // 12
echo $someCoffee->getDescription(); // Simple Coffee, milk

$someCoffee = new WhipCoffee($someCoffee);
echo $someCoffee->getCost(); // 17
echo $someCoffee->getDescription(); // Simple Coffee, milk, whip

$someCoffee = new VanillaCoffee($someCoffee);
echo $someCoffee->getCost(); // 20
echo $someCoffee->getDescription(); // Simple Coffee, milk, whip, vanilla
```

----------------------------------------

TITLE: Changing File Permissions using chmod() in PHP
DESCRIPTION: This PHP code snippet demonstrates how to change file permissions using the `chmod()` function. The function takes the file path and the desired permission mode as arguments. The example shows setting permissions to 0755, which grants the owner read, write, and execute permissions, and everyone else read and execute permissions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/file-permissions@tgIyG6vHWpe9sz6lHmj5a.md#_snippet_0

LANGUAGE: PHP
CODE:
```
chmod($file, 0755)
```

----------------------------------------

TITLE: Lambda Function with Capture-by-Value
DESCRIPTION: This example demonstrates capturing a variable from the surrounding scope by value.  The `multiplier` variable is captured by value, meaning that the lambda function receives a copy of its value. Any changes to `multiplier` outside the lambda function will not affect the value inside the lambda. This example multiplies an input with the captured value.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/lambdas@xjiFBVe-VGqCqWfkPVGKf.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int multiplier = 3;
auto times = [multiplier](int a) {
    return a * multiplier;
};
int result = times(5); // result = 15
```

----------------------------------------

TITLE: Asynchronous JavaScript Loading using async attribute
DESCRIPTION: This code snippet demonstrates the use of the `async` attribute in a `<script>` tag. The `async` attribute ensures that the script is fetched and executed asynchronously without blocking the HTML parser. It's suitable for independent scripts that don't rely on other scripts or the DOM.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/best-practices/frontend-performance/content/use-non-blocking-javascript.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<script async src="foo.js"></script>
```

----------------------------------------

TITLE: Accessing Command-Line Arguments in Node.js
DESCRIPTION: This snippet shows how to access command-line arguments in a Node.js script using the `process.argv` array. The first two elements of the array are the path to the Node.js executable and the path to the script file, respectively.  Subsequent elements are the command-line arguments passed to the script.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/process-argv.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
console.log(process.argv);
// [
//   '/usr/local/bin/node', -> path to the Node.js executable
//   '/Users/username/projects/nodejs/index.js', -> path to the JavaScript file being executed
//   'hello', -> command-line argument
//   'world' -> command-line argument
// ]
```

----------------------------------------

TITLE: Interval Creation Operator
DESCRIPTION: This code snippet showcases the use of the `interval` creation operator from RxJS. It imports the `interval` function and uses it to create an Observable that emits sequentially increasing numbers at a specified interval (in milliseconds). The created Observable is assigned to the `observable` constant.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/angular/content/operators@ihsjIcF0tkhjs56458teE.md#_snippet_1

LANGUAGE: bash
CODE:
```
import { interval } from 'rxjs';

const observable = interval(1000 /* number of milliseconds */);
```

----------------------------------------

TITLE: Create To-Do Item Request Example
DESCRIPTION: Illustrates the POST request structure for creating a new to-do item at the /todos endpoint. The request body includes the 'title' and 'description' of the to-do item. Authentication is required via the `Authorization` header.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_4

LANGUAGE: HTTP
CODE:
```
POST /todos
{
  "title": "Buy groceries",
  "description": "Buy milk, eggs, and bread"
}
```

----------------------------------------

TITLE: Redirecting stdout and stderr to files in Bash
DESCRIPTION: This bash command demonstrates how to redirect standard output (stdout) and standard error (stderr) to separate text files. The `>` operator redirects stdout to `stdout.txt`, and `2>` redirects stderr to `stderr.txt`. This is useful for separating normal output from error messages for later analysis.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/stdout-in-err.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ command > stdout.txt 2>stderr.txt
```

----------------------------------------

TITLE: Using Output Iterator in C++
DESCRIPTION: This code snippet demonstrates the usage of an output iterator in C++. It copies the elements from the 'nums' vector to the standard output (std::cout), separating them with a comma and a space. It utilizes std::ostream_iterator to write to the output stream.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/iterators@Ebu8gzbyyXEeJryeE0SpG.md#_snippet_1

LANGUAGE: cpp
CODE:
```
std::vector<int> nums = {1, 2, 3, 4};
std::ostream_iterator<int> output(std::cout, ", ");
std::copy(nums.begin(), nums.end(), output);
```

----------------------------------------

TITLE: Running Bash Script in Debug Mode
DESCRIPTION: This snippet demonstrates how to run a bash script in debug mode from the command line using `bash -x`. This option forces bash to display each command before executing it, providing a detailed execution trace useful for debugging.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-programming/debugging.md#_snippet_1

LANGUAGE: bash
CODE:
```
bash -x script.sh
```

----------------------------------------

TITLE: Renaming a Remote Repository in Git
DESCRIPTION: This command renames an existing remote repository. `[old-name]` is the current name of the remote, and `[new-name]` is the desired new name. This can be useful for organizational purposes or when the remote's location or purpose changes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/managing-remotes@sBQOInoFBU9XfkPZ-JlyT.md#_snippet_2

LANGUAGE: git
CODE:
```
git remote rename [old-name] [new-name]
```

----------------------------------------

TITLE: Storing Boolean Data in MongoDB
DESCRIPTION: This code snippet demonstrates how to store a boolean value (true) in a MongoDB document. The document includes fields for name, isActive (boolean), and email. The 'isActive' field represents a binary state for the user.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/boolean.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
    "name": "John Doe",
    "isActive": true,
    "email": "john.doe@example.com"
}
```

----------------------------------------

TITLE: Initializing std::stack in C++
DESCRIPTION: This code snippet demonstrates how to initialize a `std::stack` in C++. `std::stack` is a container adapter that provides LIFO (Last-In-First-Out) functionality.  It is based on other containers like `deque` or `list`. It requires including the `<stack>` header file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_7

LANGUAGE: cpp
CODE:
```
std::stack<int> my_stack;
```

----------------------------------------

TITLE: Unmarshal JSON to Struct in Go
DESCRIPTION: This code snippet demonstrates how to unmarshal JSON data into a Go struct using the `encoding/json` package. It defines a `User` struct with fields `Name` and `Age`, then unmarshals a JSON string into an instance of the `User` struct. The code includes error handling for the unmarshaling process and prints the resulting struct.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/golang/content/json-processing.md#_snippet_0

LANGUAGE: Go
CODE:
```
package main

import (
    "encoding/json"
    "fmt"
)

type User struct {
    Name string `json:"name"`
    Age  int    `json:"age"`
}

func main() {
    jsonData := `{"name": "Jane", "age": 28}`
    var user User
    if err := json.Unmarshal([]byte(jsonData), &user); err != nil {
        fmt.Println("Error parsing JSON:", err)
    }
    fmt.Printf("User: %+v\n", user)
}
```

----------------------------------------

TITLE: Initializing Date Object in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a new Date object in JavaScript. The new Date() constructor returns a Date object representing the current date and time. This is useful for capturing the current timestamp or initializing date-related variables.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/date.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const currentDate = new Date();
```

----------------------------------------

TITLE: Configuring Nginx to Serve PHP Files
DESCRIPTION: This snippet configures Nginx to process PHP files using PHP-FPM. It includes the `fastcgi-php.conf` snippet and specifies the socket for the PHP-FPM process.  This configuration ensures that requests for PHP files are handled by the PHP-FPM server, which improves performance compared to traditional CGI.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/nginx@aspZpACHEKOsi_Er5FYPY.md#_snippet_0

LANGUAGE: php
CODE:
```
location ~ \.php$ {
    include snippets/fastcgi-php.conf;
    fastcgi_pass unix:/run/php/php7.0-fpm.sock;
}
```

----------------------------------------

TITLE: Python: Error Handling with Try-Except-Finally
DESCRIPTION: This code demonstrates error handling in Python using a try-except-finally block. It defines a function `divide` that attempts to divide two numbers and handles `ZeroDivisionError` and general `Exception` cases. The `else` clause executes if no exception occurs, and the `finally` block ensures that a message is printed regardless of whether an exception occurred.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/java-vs-python.md#_snippet_1

LANGUAGE: python
CODE:
```
# python code examples
def divide(a, b):
    try:
        result = a / b
    except ZeroDivisionError:
        return "Error: Division by zero is not allowed."
    except Exception as e:
        return f"Error: {str(e)}"
    else:
        return f"Result: {result}"
    finally:
        print("Execution completed.")


print(divide(10, 2))  # Result: 5.0
print(divide(10, 0))  # Error: Division by zero is not allowed.
```

----------------------------------------

TITLE: Creating a 2dsphere Index in MongoDB
DESCRIPTION: This snippet demonstrates how to create a 2dsphere index in MongoDB using the `createIndex` method. The 2dsphere index is used for querying geospatial data on a sphere, like Earth, and uses GeoJSON format for storing geospatial data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/geospatial.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.createIndex({ location: '2dsphere' });
```

----------------------------------------

TITLE: Installing Xcode Command Line Tools - CLI
DESCRIPTION: Installs Xcode Command Line Tools which are required for CLI development and popular tools like clang, gcc, and git. It uses `xcode-select` command with `--install` flag.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/ios/content/installing@R8LdFpfyS0MFYJuMLk8RG.md#_snippet_0

LANGUAGE: Shell
CODE:
```
Xcode-select --install
```

----------------------------------------

TITLE: Omit Utility Type in TypeScript
DESCRIPTION: This code snippet demonstrates how to use the `Omit` utility type in TypeScript. It defines a `Todo` interface and then uses `Omit` to create two new types, `TodoPreview` and `TodoInfo`, each excluding different properties from the original `Todo` interface. The example also shows how to create objects of these new types.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/omit@yjlxygHl8QONNUrdx-Q0A.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface Todo {
  title: string;
  description: string;
  completed: boolean;
  createdAt: number;
}

type TodoPreview = Omit<Todo, 'description'>;

const todo: TodoPreview = {
  title: 'Clean room',
  completed: false,
  createdAt: 1615544252770,
};

type TodoInfo = Omit<Todo, 'completed' | 'createdAt'>;

const todoInfo: TodoInfo = {
  title: 'Pick up kids',
  description: 'Kindergarten closes at 5pm',
};
```

----------------------------------------

TITLE: Finding Unique Values Using filter() in JavaScript
DESCRIPTION: This code snippet demonstrates how to use the `filter()` method in JavaScript to find unique values in an array.  It iterates through the array, and only includes elements in the new array if their first index in the original array matches the current index.  This effectively filters out duplicate values. Dependencies: None. Input: Array with possible duplicate values. Output: Array with only unique values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/find-unique-array-values.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const roadmaps = ['JavaScript', 'React', 'Node.js', 'Node.js', 'JavaScript'];
const uniqueRoadmaps = roadmaps.filter(
  (roadmap, index) => roadmaps.indexOf(roadmap) === index
);
console.log(uniqueRoadmaps); // ['JavaScript', 'React', 'Node.js']
```

----------------------------------------

TITLE: Inserting Multiple Documents into MongoDB
DESCRIPTION: This snippet demonstrates how to insert multiple documents into a MongoDB collection using the `insertMany()` method. An array of documents is passed as an argument. Requires a connection to a MongoDB database and an existing collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/index.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.users.insertMany([
    { name: 'Jane Doe', age: 28, email: 'jane@example.com' },
    { name: 'Mary Jane', age: 32, email: 'mary@example.com' },
  ]);
```

----------------------------------------

TITLE: Creating and Configuring Cgroup - Bash
DESCRIPTION: This bash script demonstrates how to create a new cgroup for a container, assign a process to it, and limit its CPU usage. It utilizes the `cgcreate` command to create the cgroup, the `tee` command to write the process ID to the cgroup's tasks file, and the `tee` command again to set the CPU quota. Requires root privileges (sudo).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/containerization/cgroups.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Create a new cgroup for a container;
sudo cgcreate -g cpu:/my_new_container

# Assign the current shell's process to the new cgroup;
echo $$ | sudo tee /sys/fs/cgroup/cpu/my_new_container/tasks

# Limit the CPU usage of the cgroup to 20%;
echo 200000 | sudo tee /sys/fs/cgroup/cpu/my_new_container/cpu.cfs_quota_us
```

----------------------------------------

TITLE: MongoDB $size Operator Syntax
DESCRIPTION: This code snippet shows the general syntax for using the `$size` operator in a MongoDB query.  The `<array_field>` should be replaced with the name of the array field to check, and `<numer_of_elements>` should be replaced with the desired size of the array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/size.md#_snippet_1

LANGUAGE: javascript
CODE:
```
{ "<array_field>": { "$size": <numer_of_elements> } }
```

----------------------------------------

TITLE: Java forEach Loop Syntax
DESCRIPTION: This snippet shows the basic syntax of a `forEach` loop in Java. The loop iterates over each element in an array or collection. The `data_type` specifies the type of the elements in the array, `variable` is a variable that holds the current element being iterated over, and `array_name` is the name of the array being iterated over.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/java/content/loops@JHUhVEjWFXTn6-wKcKevg.md#_snippet_1

LANGUAGE: Java
CODE:
```
for(data_type variable:array_name){}
```

----------------------------------------

TITLE: Split Command Syntax
DESCRIPTION: This code snippet shows the basic syntax of the `split` command in Linux.  It includes the `split` command itself, options, input file, and output file prefix. The options allow you to customize how the file is split, such as by number of lines or bytes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/split.md#_snippet_0

LANGUAGE: bash
CODE:
```
split [options] [input [prefix]]
```

----------------------------------------

TITLE: Increment Operator (Prefix/Postfix) in C++
DESCRIPTION: Demonstrates the use of prefix and postfix increment operators. Prefix increment (`++x`) increments the value of 'x' before returning it. Postfix increment (`x++`) returns the current value of 'x' and then increments it. The variables 'x', 'y', and 'z' are assumed to be integers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/arithmetic-operators@8aOSpZLWwZv_BEYiurhyR.md#_snippet_6

LANGUAGE: cpp
CODE:
```
int x = 5;
int y = ++x; // x = 6, y = 6
int z = x++; // x = 7, z = 6
```

----------------------------------------

TITLE: Filtering MongoDB Audit Events
DESCRIPTION: This YAML snippet demonstrates how to filter audit events in MongoDB using the `auditLog.filter` parameter in the configuration file. The filter is a JSON-like query that specifies the types of events to be included in the audit log, such as 'authCheck', 'createUser', 'dropUser', and 'revokeRolesFromUser'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-security/mongodb-audit.md#_snippet_1

LANGUAGE: yaml
CODE:
```
auditLog:
  filter: "{ atype: { $in: ['authCheck', 'createUser', 'dropUser', 'revokeRolesFromUser'] }}"
```

----------------------------------------

TITLE: Displaying Linux File Permissions in Bash
DESCRIPTION: This code snippet shows how file permissions are displayed in Linux using the ls -l command (implied). The output string explains the meaning of each character representing file type, owner permissions, group permissions, and others permissions.  r, w, and x indicate read, write, and execute respectively. - means permission is not granted.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/working-with-files/permissions.md#_snippet_0

LANGUAGE: bash
CODE:
```
-rwxr--r-- 1 root root 4096 Jan 1 12:00 filename
```

----------------------------------------

TITLE: Enabling MongoDB Auditing
DESCRIPTION: This YAML snippet shows how to enable MongoDB auditing by configuring the `auditLog` settings in the `mongod` or `mongos` configuration file. It specifies the log destination as a file, the format as JSON, the path to the log file, and a filter to only log specific authentication-related events.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-security/mongodb-audit.md#_snippet_0

LANGUAGE: yaml
CODE:
```
auditLog:
  destination: file
  format: JSON
  path: '/path/to/audit/log/file.json'
  filter: "{ atype: { $in: ['authenticate', 'createUser', 'dropUser', 'revokeRolesFromUser'] }}"
```

----------------------------------------

TITLE: Defining a Rust Enum
DESCRIPTION: This code snippet demonstrates how to define an enum in Rust. The `enum` keyword is used, followed by the name of the enum and a list of its possible variants, each representing a different choice. In this case, the `RpsChoice` enum has three variants: `Rock`, `Paper`, and `Scissors`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/constructs/enums.md#_snippet_0

LANGUAGE: Rust
CODE:
```
enum RpsChoice { Rock, Paper, Scissors }
```

----------------------------------------

TITLE: Querying for a specific Long value
DESCRIPTION: Queries a MongoDB collection for documents that have a Long field with a specific value. It uses the NumberLong() constructor in the query to match 64-bit integer values accurately. Depends on having a MongoDB collection populated with Long values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/long.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.find({
  largeValue: NumberLong('1234567890123456789'),
});
```

----------------------------------------

TITLE: Implementing the Jump Visitor
DESCRIPTION: This class implements the `AnimalOperation` interface to define the Jump behavior for each animal. Each `visit` method describes the jumping action of the respective animal.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_69

LANGUAGE: PHP
CODE:
```
class Jump implements AnimalOperation
{
    public function visitMonkey(Monkey $monkey)
    {
        echo 'Jumped 20 feet high! on to the tree!';
    }

    public function visitLion(Lion $lion)
    {
        echo 'Jumped 7 feet! Back on the ground!';
    }

    public function visitDolphin(Dolphin $dolphin)
    {
        echo 'Walked on water a little and disappeared';
    }
}
```

----------------------------------------

TITLE: Lazy Loading Component with Suspense in React
DESCRIPTION: This snippet demonstrates lazy loading a React component (`RoadmapRender`) using `lazy()` and `Suspense`.  It imports necessary React hooks and the `RoadmapRender` component. A state variable `showRoadmapRender` controls whether to render the lazily loaded component within a `Suspense` boundary. A fallback is displayed while loading.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/lazy-loading.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { lazy, Suspense } from 'react';

const LazyRoadmapRender = lazy(() => delay(import('./RoadmapRender')));

export function App() {
  const [showRoadmapRender, setShowRoadmapRender] = useState(false);
  return (
    <>
      <button onClick={() => setShowRoadmapRender(true)}>
        Show RoadmapRender
      </button>
      {showRoadmapRender && (
        <Suspense fallback={<div>Loading...</div>}>
          <LazyRoadmapRender />
        </Suspense>
      )}
    </>
  );
}

// Helper function to simulate a 2 seconds delay
function delay(promise) {
  return new Promise((resolve) => setTimeout(resolve, 2000)).then(
    () => promise
  );
}
```

----------------------------------------

TITLE: Dropping a Collection with drop() in MongoDB
DESCRIPTION: This code snippet demonstrates how to delete an entire collection named 'users' from the database. All documents and metadata associated with the collection will be removed. This operation is irreversible and should be used with caution. Requires a MongoDB database instance.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/delete-methods.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.users.drop();
```

----------------------------------------

TITLE: Creating a Pull Request with git request-pull
DESCRIPTION: This command generates a summary of changes between two branches to create a pull request. It is useful for submitting contributions from a forked repository to the original repository.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/collaboration@bXfCUG3h1TIFPgD4WUDph.md#_snippet_1

LANGUAGE: Git
CODE:
```
git request-pull
```

----------------------------------------

TITLE: Merging Arrays using Spread Operator in JavaScript
DESCRIPTION: This snippet demonstrates merging two arrays, `arr1` and `arr2`, into a new array `arr3` using the spread operator (`...`). The spread operator expands each array into its individual elements, which are then combined into a new array. The resulting array is then printed to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/merge-arrays.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];

const arr3 = [...arr1, ...arr2];
console.log(arr3); // [1, 2, 3, 4, 5, 6]
```

----------------------------------------

TITLE: Creating and Manipulating DOM element with JavaScript
DESCRIPTION: This code snippet demonstrates how to create a new `div` element using `document.createElement('div')`. It then sets the `id` attribute to 'roadmap-wrapper' directly and sets the `data-id` attribute to 'javascript' using `setAttribute`. Finally, it logs the newly created and modified `div` element to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/create-element.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const div = document.createElement('div');

div.id = 'roadmap-wrapper';
div.setAttribute('data-id', 'javascript');
console.log(div); // <div id="roadmap-wrapper" data-id="javascript"></div>
```

----------------------------------------

TITLE: Displaying current directory with `pwd` command in Bash
DESCRIPTION: The `pwd` command displays the current working directory. It outputs the absolute path of the directory the user is currently in. It is useful for confirming the current location in the file system.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/basic-commands.md#_snippet_2

LANGUAGE: bash
CODE:
```
# View current working directory
pwd
```

----------------------------------------

TITLE: Checking Disk Usage in Linux (Bash)
DESCRIPTION: This command shows the disk space usage of all mounted filesystems in a human-readable format. It's helpful for identifying disks that are running out of space. The `-h` flag ensures the output is easily understandable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/server-review/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
df -h
```

----------------------------------------

TITLE: Builder Pattern: Burger Class Definition in PHP
DESCRIPTION: Defines the Burger class, which represents a burger with various options such as size, cheese, pepperoni, lettuce, and tomato. The constructor takes a BurgerBuilder object to initialize the burger's properties.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_11

LANGUAGE: PHP
CODE:
```
class Burger
{
    protected $size;

    protected $cheese = false;
    protected $pepperoni = false;
    protected $lettuce = false;
    protected $tomato = false;

    public function __construct(BurgerBuilder $builder)
    {
        $this->size = $builder->size;
        $this->cheese = $builder->cheese;
        $this->pepperoni = $builder->pepperoni;
        $this->lettuce = $builder->lettuce;
        $this->tomato = $builder->tomato;
    }
}
```

----------------------------------------

TITLE: Listing Active Services using systemctl (Bash)
DESCRIPTION: This command lists all active services on a Linux system along with their current status.  It utilizes the `systemctl` utility, a standard tool for managing system services. It's a foundational command for monitoring service health and troubleshooting issues.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/server-review/services-running.md#_snippet_0

LANGUAGE: bash
CODE:
```
systemctl --type=service
```

----------------------------------------

TITLE: Obtaining SSL Certificate (Nginx)
DESCRIPTION: This command initiates Certbot in interactive mode to obtain an SSL certificate for Nginx. The user will be prompted to enter their email and domain name.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/setup-and-auto-renew-ssl-certificates.md#_snippet_3

LANGUAGE: shell
CODE:
```
# Replace --nginx with --apache if you are using Apache
sudo certbot --nginx
```

----------------------------------------

TITLE: MongoDB $lte Query Syntax - JavaScript
DESCRIPTION: Demonstrates the syntax for using the `$lte` operator within a MongoDB query. The `$lte` operator is used to filter documents where the value of the specified field is less than or equal to the given value. It is used inside the `find` method to filter the results.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/lte.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{  field: {    $lte: value;  }}
```

----------------------------------------

TITLE: Setting a Cookie in PHP
DESCRIPTION: This code snippet demonstrates how to set a cookie in PHP using the `setcookie()` function. The cookie is named "test_cookie", its value is "test", it expires in one hour (3600 seconds), and it's available in the root directory ('/').
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/state-management@CGehmZjcgTWC7fQAvxmNW.md#_snippet_0

LANGUAGE: PHP
CODE:
```
setcookie("test_cookie", "test", time() + 3600, '/');
```

----------------------------------------

TITLE: Fetching Data from API using cURL in PHP
DESCRIPTION: This PHP code snippet initializes a cURL session, sets the URL to fetch data from, configures the transfer to return the result as a string, executes the request, handles potential errors, and closes the cURL session. It uses the `curl_init`, `curl_setopt`, `curl_exec`, `curl_errno`, `curl_error`, and `curl_close` functions. The expected output is the data returned from the API or an error message if the request fails.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/curl@KC6D81-T-FwQc7Osw1rlY.md#_snippet_0

LANGUAGE: php
CODE:
```
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, "http://example.com/api/data");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

$result = curl_exec($ch);

if(curl_errno($ch)){
   echo 'Error:' . curl_error($ch);
}

curl_close($ch);
```

----------------------------------------

TITLE: Pausing and resuming a process in the background - Bash
DESCRIPTION: This snippet demonstrates how to pause a running process using `CTRL + Z` and then resume it in the background using the `bg` command.  The CTRL+Z key combination sends a SIGTSTP signal to the running process, pausing its execution. The `bg` command then resumes the paused process in the background.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/bg-fg-processes.md#_snippet_1

LANGUAGE: bash
CODE:
```
CTRL + Z       # This will pause the process
bg             # This resumes the paused process in the background
```

----------------------------------------

TITLE: Numeric Enum Definition in TypeScript
DESCRIPTION: This code defines a numeric enum called `Direction` in TypeScript. The first member, `Up`, is initialized with the value `1`. Subsequent members (`Down`, `Left`, and `Right`) are automatically assigned incrementing values (2, 3, and 4, respectively). Enums improve code readability and maintainability by providing named constants.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/enum@bfZIXHceDKDGQl-24kQpT.md#_snippet_0

LANGUAGE: typescript
CODE:
```
enum Direction {
  Up = 1,
  Down,
  Left,
  Right,
}
```

----------------------------------------

TITLE: Range-based For Loop in C++11
DESCRIPTION: Illustrates the use of the range-based for loop for iterating over containers in C++11. This simplifies iteration by automatically handling the start and end conditions. Requires the `<vector>` header for `std::vector`. It iterates through each element of the vector 'vec' and prints its value.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-0x@PPg0V5EzGBeJsysg1215V.md#_snippet_1

LANGUAGE: cpp
CODE:
```
std::vector<int> vec = {1, 2, 3};
for (int i : vec) {
    std::cout << i << '\n';
}
```

----------------------------------------

TITLE: Redirecting Output to File - Bash
DESCRIPTION: This snippet demonstrates how to redirect the standard output of the `ls -al` command to a file named `file_list.txt`. If the file exists, it will be overwritten; otherwise, a new file will be created.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-basics/redirects.md#_snippet_0

LANGUAGE: bash
CODE:
```
ls -al > file_list.txt
```

----------------------------------------

TITLE: Connect to MongoDB in Docker
DESCRIPTION: This command executes the mongo shell within the running MongoDB Docker container named 'mdb'. It allows you to interact with the database. Requires the MongoDB Docker container to be running.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/single-command-database-setup.md#_snippet_5

LANGUAGE: bash
CODE:
```
docker exec -it mdb \
  mongo
```

----------------------------------------

TITLE: Initializing Integer (int) in C++
DESCRIPTION: This code snippet demonstrates how to declare and initialize an integer variable in C++. Integers are used to store whole numbers, both positive and negative. The size of `int` is system-dependent, typically 4 bytes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/data-types@MwznA4qfpNlv6sqSNjPZi.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int num = 42;
```

----------------------------------------

TITLE: Conditional Caching with filesMatch in .htaccess
DESCRIPTION: This snippet shows how to use the `filesMatch` directive in Apache's `.htaccess` to apply different caching strategies to different file types. Images are cached for a year, while CSS and JS files are cached for a month.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_14

LANGUAGE: html
CODE:
```
# Cache any images for one year
<filesMatch ".(png|jpg|jpeg|gif)$">
    Header set Cache-Control "max-age=31536000, public"
</filesMatch>

# Cache any CSS and JS files for a month
<filesMatch ".(css|js)$">
    Header set Cache-Control "max-age=2628000, public"
</filesMatch>
```

----------------------------------------

TITLE: String Creation from Literal String - Rust
DESCRIPTION: This code snippet demonstrates how to create a `String` from a string literal using `String::from()`. This is a common way to initialize a `String` with a known value. The created `String` owns the data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/data-structures/string.md#_snippet_0

LANGUAGE: Rust
CODE:
```
String::from("Hello, world!")
```

----------------------------------------

TITLE: Finding Unique Values Using forEach() in JavaScript
DESCRIPTION: This code snippet demonstrates how to use the `forEach()` method in JavaScript to find unique values in an array.  It iterates over the array, checking if the current value is already in the unique array. If it is not, it pushes the value into the unique array. Dependencies: None. Input: Array with possible duplicate values. Output: Array with only unique values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/find-unique-array-values.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const roadmaps = ['JavaScript', 'React', 'Node.js', 'Node.js', 'JavaScript'];
const uniqueRoadmaps = [];
roadmaps.forEach((roadmap) => {
  if (!uniqueRoadmaps.includes(roadmap)) {
    uniqueRoadmaps.push(roadmap);
  }
});
console.log(uniqueRoadmaps); // ['JavaScript', 'React', 'Node.js']
```

----------------------------------------

TITLE: Example of using a reference in C++
DESCRIPTION: This code snippet demonstrates how to declare and use a reference. Modifying the reference will modify the original variable as they both refer to the same memory location.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/pointers-and-references@DWw8NxkLpIpiOSUaZZ1oA.md#_snippet_5

LANGUAGE: cpp
CODE:
```
int num = 10;
int &ref = num; // Reference 'ref' is now an alias of 'num'
```

----------------------------------------

TITLE: Updating MongoDB Array with $pop Operator (JavaScript)
DESCRIPTION: This snippet shows how to remove the first or last item from the `hobbies` array using the `$pop` operator.  Using `$pop: -1` removes the first item, and `$pop: 1` removes the last item.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/array.md#_snippet_8

LANGUAGE: javascript
CODE:
```
// Remove the first item (use $pop with -1)
db.collection.updateOne({ _id: ObjectId('123xyz') }, { $pop: { hobbies: -1 } });
```

LANGUAGE: javascript
CODE:
```
// Remove the last item (use $pop with 1)
db.collection.updateOne({ _id: ObjectId('123xyz') }, { $pop: { hobbies: 1 } });
```

----------------------------------------

TITLE: Defining a Long value
DESCRIPTION: Defines a field with the Long data type in MongoDB using the $numberLong keyword. This allows storing 64-bit integer values. It showcases the basic syntax for representing Long values in JSON documents within MongoDB.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/long.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "largeValue": { "$numberLong": "1234567890123456789" }
}
```

----------------------------------------

TITLE: Displaying CPU Load in Linux (Bash)
DESCRIPTION: This command shows how long the system has been running, the number of users logged on, and the system load averages for the past 1, 5, and 15 minutes. It's useful for quickly assessing CPU utilization and identifying potential overload situations.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/server-review/index.md#_snippet_2

LANGUAGE: bash
CODE:
```
uptime
```

----------------------------------------

TITLE: Saving Data using Doctrine ORM in PHP
DESCRIPTION: This code snippet demonstrates how to save data into a 'products' table using Doctrine ORM in PHP. It uses object-oriented style code instead of writing SQL queries directly.  It assumes the existence of a `Product` class and an `$entityManager` instance.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/object-relational-mapping-orm@SeqGIfcLuveZ2z5ZSXcOd.md#_snippet_0

LANGUAGE: PHP
CODE:
```
$product = new Product();
$product->setName('New Product');
$entityManager->persist($product);
$entityManager->flush();
```

----------------------------------------

TITLE: Add Private Key to SSH Agent
DESCRIPTION: This command adds the specified private key file (`~/.ssh/mykey.pem`) to the SSH agent on the local machine. This allows SSH to use the key for authentication without needing to specify it explicitly in subsequent commands.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_5

LANGUAGE: bash
CODE:
```
ssh-add ~/.ssh/mykey.pem
```

----------------------------------------

TITLE: Including User-Defined Headers in C++
DESCRIPTION: This code snippet illustrates how to include user-defined header files in a C++ program using the `#include` directive with double quotes `""`. This method is used for including custom headers or headers from third-party libraries. The compiler will search for these files in the project's include directories.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/library-inclusion@5mNqH_AEiLxUmgurNW1Fq.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include "myHeader.h"
#include "thirdPartyLibrary.h"
```

----------------------------------------

TITLE: Using Template Specialization in C++
DESCRIPTION: This code demonstrates the use of the specialized `Pair` class for `char` types.  When creating the `charPair` object, the specialized constructor logic (converting characters to uppercase) will be executed. The output will be a pair of uppercase characters.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/templates@-6AOrbuOE7DJCmxlcgCay.md#_snippet_6

LANGUAGE: cpp
CODE:
```
Pair<char, char> charPair('a', 'b');
```

----------------------------------------

TITLE: useEffect Hook with Dependencies in React
DESCRIPTION: This useEffect hook runs only when the specified dependencies (state1, state2) change. This allows for controlled updates, ensuring the effect only runs when necessary, optimizing performance. Changes in state1 or state2 will trigger the effect.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/component-lifecycle.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
useEffect(() => {
  // do something after specific prop/state changes
}, [state1, state2]);
```

----------------------------------------

TITLE: Connect to MySQL in Docker
DESCRIPTION: This command executes the mysql client within the running MySQL Docker container named 'ms'. It connects as the 'root' user with the password 'admin', allowing you to interact with the database. Requires the MySQL Docker container to be running.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/single-command-database-setup.md#_snippet_3

LANGUAGE: bash
CODE:
```
docker exec -it ms \
  mysql -u root -padmin
```

----------------------------------------

TITLE: Defining Interviewer Interface - PHP
DESCRIPTION: Defines an `Interviewer` interface with an `askQuestions` method, along with implementations for `Developer` and `CommunityExecutive`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_3

LANGUAGE: PHP
CODE:
```
interface Interviewer
{
    public function askQuestions();
}

class Developer implements Interviewer
{
    public function askQuestions()
    {
        echo 'Asking about design patterns!';
    }
}

class CommunityExecutive implements Interviewer
{
    public function askQuestions()
    {
        echo 'Asking about community building';
    }
}
```

----------------------------------------

TITLE: Thread Support in C++11
DESCRIPTION: Illustrates the use of the `<thread>` library for multithreading programming in C++11.  This example demonstrates how to create and start a new thread using `std::thread`. Requires the `<thread>` header.  The 'my_function' will be executed in a separate thread.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-0x@PPg0V5EzGBeJsysg1215V.md#_snippet_7

LANGUAGE: cpp
CODE:
```
#include <thread>

void my_function() {
    // thread function body
}

int main() {
    std::thread t(my_function);
    t.join();
    return 0;
}
```

----------------------------------------

TITLE: insertMany() Syntax in MongoDB
DESCRIPTION: This code snippet demonstrates the syntax for using `insertMany()` in MongoDB to insert multiple documents into a collection. It accepts an array of documents and optional parameters like writeConcern, ordered, bypassDocumentValidation, and comment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/insert-methods.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.insertMany(
   [ <document_1>, <document_2>, ... ],
   {
      writeConcern: <document>,
      ordered: <boolean>,
      bypassDocumentValidation: <boolean>,
      comment: <any>
   }
)
```

----------------------------------------

TITLE: Initializing std::unordered_set in C++
DESCRIPTION: This code snippet demonstrates how to initialize a `std::unordered_set` in C++. `std::unordered_set` is an unordered associative container that stores unique elements using a hash table. It requires including the `<unordered_set>` header file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_5

LANGUAGE: cpp
CODE:
```
std::unordered_set<int> my_unordered_set;
```

----------------------------------------

TITLE: Selecting elements with querySelector in JavaScript
DESCRIPTION: This code snippet demonstrates how to use the `querySelector` method to select the first element that matches a specified CSS selector. It shows examples of selecting an element by class name (`.roadmap-wrapper`) and by ID (`#roadmap-title`). If no matching element is found, `querySelector` returns `null`. Dependencies: None.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/query-selector.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const roadmapWrapper = document.querySelector('.roadmap-wrapper');
const roadmapTitle = document.querySelector('#roadmap-title');
```

----------------------------------------

TITLE: Creating Issues with GitHub CLI
DESCRIPTION: This command creates a new issue with the specified title and body. The title and body are passed as arguments to the command. The GitHub CLI must be installed and authenticated.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/issue-management@kGnZifvXbHBf5zXIsfAQw.md#_snippet_1

LANGUAGE: Shell
CODE:
```
gh issue create --title "Issue Title" --body "Issue body"
```

----------------------------------------

TITLE: List SSH Agent Keys
DESCRIPTION: This command lists the keys currently added to the SSH agent. It's used to verify that the private key has been successfully added to the agent.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_6

LANGUAGE: bash
CODE:
```
ssh-add -l
```

----------------------------------------

TITLE: Defining 'never' Returning Functions in TypeScript
DESCRIPTION: This code demonstrates functions that return the `never` type in TypeScript. A function returns `never` if it always throws an error or enters an infinite loop.  The `error` function throws an exception, `fail` calls the `error` function, and `infiniteLoop` runs indefinitely.  These functions have no reachable end point.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/never@0pi9VTbngcAIswuu5LIYg.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// Function returning never must not have a reachable end point
function error(message: string): never {
  throw new Error(message);
}

// Inferred return type is never
function fail() {
  return error('Something failed');
}

// Function returning never must not have a reachable end point
function infiniteLoop(): never {
  while (true) {}
}
```

----------------------------------------

TITLE: Defining Structures and Classes in C++
DESCRIPTION: This example demonstrates the definition of a `struct` named `Student` and a `class` named `Employee` in C++. It illustrates how to group variables and functions under a single name. It requires the string and iostream libraries.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/language-concepts@-6fwJQOfsorgHkoQGp4T3.md#_snippet_5

LANGUAGE: cpp
CODE:
```
// Structure
struct Student {
    std::string name;
    int age;
};

// Class
class Employee {
public:
    std::string name;
    int age;
    void displayInfo() {
        std::cout << "Name: " << name << "\nAge: " << age;
    }
};
```

----------------------------------------

TITLE: MongoDB $or Operator Syntax (JavaScript)
DESCRIPTION: The `$or` operator returns documents where at least one of the specified conditions is true. This snippet shows the syntax for using the `$or` operator within a MongoDB query. It requires a MongoDB database connection and a collection to query.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/index.md#_snippet_2

LANGUAGE: javascript
CODE:
```
{ $or: [ { condition1 }, { condition2 }, ... ] }
```

----------------------------------------

TITLE: Implementing a Logging Decorator in TypeScript
DESCRIPTION: This code snippet demonstrates how to create and use a decorator in TypeScript to log the arguments of a method before it is executed. It defines a `log` decorator that wraps the original method, logs the arguments, and then calls the original method. The decorator is then applied to the `add` method of the `Calculator` class.  Dependencies: Requires TypeScript compiler.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/decorators@TRx3wvWnRdJJf5eL-GBG4.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function log(
  target: Object,
  propertyKey: string | symbol,
  descriptor: PropertyDescriptor
) {
  const originalMethod = descriptor.value;

  descriptor.value = function (...args: any[]) {
    console.log(`Calling ${propertyKey} with arguments: ${args}`);
    return originalMethod.apply(this, args);
  };

  return descriptor;
}

class Calculator {
  @log
  add(a: number, b: number): number {
    return a + b;
  }
}

const calculator = new Calculator();
calculator.add(1, 2);
// Output: Calling add with arguments: 1,2
// Output: 3
```

----------------------------------------

TITLE: Capturing Packets with tcpdump in Linux
DESCRIPTION: This command uses `tcpdump` to capture and display network packets on the `eth0` network interface. `sudo` is required to gain the necessary privileges to capture network traffic. This provides detailed information about the packets being transmitted or received, useful for network diagnostics and debugging.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/troubleshooting/packet-analysis.md#_snippet_0

LANGUAGE: sh
CODE:
```
sudo tcpdump -i eth0
```

----------------------------------------

TITLE: JSON Response with Pagination Metadata
DESCRIPTION: This JSON response includes an array of `data` along with `total` number of items, current `page`, and `size` (number of items per page). This provides helpful metadata for the client-side implementation of pagination.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/rest-pagination.md#_snippet_3

LANGUAGE: json
CODE:
```
{ 
  "data": [...], 
  "total": 100,
  "page": 3,
  "size": 10 
}
```

----------------------------------------

TITLE: Escaping Special Characters in $regex Query
DESCRIPTION: This code snippet shows how to escape special characters like `+` within a regular expression in MongoDB.  The backslash `\` is used to escape the `+` character so it's treated as a literal plus sign. Replace `fieldName` with the field to be searched.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/regex.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.find({ fieldName: { $regex: '\\+' } });
```

----------------------------------------

TITLE: Using ping for ICMP Echo Request (Bash)
DESCRIPTION: This snippet demonstrates how to use the `ping` command in a Linux terminal to send an ICMP echo request to a specified host. The `ping` command sends packets to the target host and waits for a response, providing information about network connectivity and latency. It is a fundamental tool for network troubleshooting.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/troubleshooting/icmp.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Use of ICMP via the ping command to send an echo request to a specific host
ping www.google.com
```

----------------------------------------

TITLE: Nullish Coalescing (??) Example JavaScript
DESCRIPTION: Demonstrates the Nullish Coalescing Operator (`??`) in JavaScript, which returns the right operand if the left one is `null` or `undefined`, otherwise, it returns the left operand. The examples illustrate its behavior with null, undefined, empty strings, and numbers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/logical-operators.md#_snippet_3

LANGUAGE: js
CODE:
```
console.log(null ?? 'hello'); // hello
console.log(undefined ?? 'hello'); // hello
console.log('' ?? 'hello'); // ''
console.log(0 ?? 'hello'); // 0
```

----------------------------------------

TITLE: Removing Custom Event Listener
DESCRIPTION: This snippet demonstrates how to remove an event listener using the `removeEventListener` method. It first attaches an event listener for 'roadmap-updated' using the `handleEvent` function and then removes the same event listener using `removeEventListener`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/custom-event.md#_snippet_2

LANGUAGE: js
CODE:
```
function handleEvent(event) {
  console.log(event.detail); // { name: 'JavaScript' }
}

element.addEventListener('roadmap-updated', handleEvent);
element.removeEventListener('roadmap-updated', handleEvent);
```

----------------------------------------

TITLE: Checking Systemd Timer for Certbot Renewal
DESCRIPTION: This command lists the systemd timers to check if Certbot has set up an automatic renewal timer. This is an alternative method to cronjobs for ensuring automatic SSL certificate renewal.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/setup-and-auto-renew-ssl-certificates.md#_snippet_6

LANGUAGE: shell
CODE:
```
sudo systemctl list-timers
```

----------------------------------------

TITLE: Get command information using --help - bash
DESCRIPTION: This command displays help information for a command using the '--help' flag. It provides a description of the command and its available options. It works for most commands.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-basics/command-help.md#_snippet_2

LANGUAGE: bash
CODE:
```
date --help
```

----------------------------------------

TITLE: Automatic Storage Duration Example
DESCRIPTION: Shows the use of automatic storage duration in C++. Local variables within a function (excluding static local variables) have automatic storage duration. They are created when the function is called and destroyed when the function exits.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/lifetime-of-objects@9aA_-IfQ9WmbPgwic0mFN.md#_snippet_2

LANGUAGE: cpp
CODE:
```
void myFunction() {
  int local_var;           // Automatic storage duration
}
```

----------------------------------------

TITLE: Removing a Remote Repository in Git
DESCRIPTION: This command removes a remote repository from the Git configuration. `[name]` is the name of the remote to remove. This is useful when you no longer need to track or interact with a particular remote repository.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/managing-remotes@sBQOInoFBU9XfkPZ-JlyT.md#_snippet_3

LANGUAGE: git
CODE:
```
git remote remove [name]
```

----------------------------------------

TITLE: Connecting to Bastion Host via SSH (Bash)
DESCRIPTION: This command establishes an SSH connection to the configured bastion host. It assumes that the SSH configuration is already set up with the correct HostName, User, and IdentityFile. This is the first step in accessing the private server through the bastion.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/bastion-host.md#_snippet_1

LANGUAGE: bash
CODE:
```
ssh bastion
```

----------------------------------------

TITLE: Accessing Arguments with arguments Object in JavaScript
DESCRIPTION: This code snippet demonstrates how to access arguments passed to a JavaScript function using the `arguments` object.  The `arguments` object is an array-like object accessible inside functions that contains the values of the arguments passed to that function. The code iterates through the `arguments` object and logs each argument to the console. The function is then called with four arguments.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/variable-number-of-arguments.md#_snippet_0

LANGUAGE: js
CODE:
```
function displayArgs() {
  for (let i = 0; i < arguments.length; i++) {
    console.log(arguments[i]);
  }
}
displayArgs(1, 2, 3, 4); // Outputs: 1, 2, 3, 4
```

----------------------------------------

TITLE: Defining a Template Function in C++
DESCRIPTION: This code defines a template function `max` that takes two arguments of the same type `T` and returns the larger of the two. The `template <typename T>` declaration introduces the template parameter `T`, which can be any data type. The function uses the ternary operator to return either `a` or `b` based on their comparison. No external dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/templates@-6AOrbuOE7DJCmxlcgCay.md#_snippet_0

LANGUAGE: cpp
CODE:
```
template <typename T>
T max(T a, T b) {
    return (a > b) ? a : b;
}
```

----------------------------------------

TITLE: Mixing Cache-Control directives
DESCRIPTION: Illustrates the result of specifying both `no-store` and `no-cache`, showing that `no-store` will be given precedence. It prevents caching of the response by any cache (client or proxy).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_8

LANGUAGE: html
CODE:
```
; If specified both Cache-Control: no-store, no-cache ; Below will be considered
Cache-Control: no-store
```

----------------------------------------

TITLE: Implementing a Coroutine in C++20
DESCRIPTION: This code snippet shows the implementation of a C++20 coroutine using `std::generator`. The `generator` function yields integers from 0 to 4.  The `co_yield` keyword suspends the function, returning a value. The `main` function iterates through the values produced by the generator and prints them to the console. This example demonstrates the ability to split a complex function into smaller, manageable chunks.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/newest@sxbbKtg7kMNbkx7fXhjR9.md#_snippet_2

LANGUAGE: C++
CODE:
```
#include <iostream>
#include <coroutine>

std::generator<int> generator() {
    for (int i = 0; i < 5; ++i)
        co_yield i;
}

int main() {
    for (int value : generator())
        std::cout << value << ' ';
}
```

----------------------------------------

TITLE: Using Reverse Iterator in C++
DESCRIPTION: This code snippet showcases the use of a reverse iterator with a std::list. It iterates through the list in reverse order and prints each element to the console. The iterator traverses the list from the last element to the first.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/iterators@Ebu8gzbyyXEeJryeE0SpG.md#_snippet_3

LANGUAGE: cpp
CODE:
```
std::list<int> nums = {1, 2, 3, 4};
std::list<int>::reverse_iterator itr = nums.rbegin();
while (itr != nums.rend()) {
    std::cout << *itr << " ";
    ++itr;
}
```

----------------------------------------

TITLE: PSR-4 Autoloading in PHP
DESCRIPTION: This PHP snippet demonstrates the implementation of PSR-4 autoloading. It registers an autoloader function using `spl_autoload_register` that converts namespace paths into directory structures and includes the corresponding PHP file if it exists. This adheres to the PSR-4 standard for autoloading, allowing for easy and consistent class loading.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/psr-standards@3tONibbRgK7HCwGTE2Gqw.md#_snippet_0

LANGUAGE: PHP
CODE:
```
// Register the autoloader
spl_autoload_register(function ($class) {
    // Convert namespace to directory structure
    $class = str_replace('\\', DIRECTORY_SEPARATOR, $class) . '.php';

    // Get file if it exists
    if (file_exists($class)) {
        require $class;
    }
});
```

----------------------------------------

TITLE: Displaying an Alert Message in JavaScript
DESCRIPTION: This snippet demonstrates the usage of the `alert()` function to display a simple message to the user.  The `alert()` function takes a string as input, which is the message to be displayed in the alert box. No dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/alert-prompt-confirm.md#_snippet_0

LANGUAGE: javascript
CODE:
```
alert('Hello World!');
```

----------------------------------------

TITLE: Initializing Promises in JavaScript
DESCRIPTION: Initializes two promises: promise1 which resolves with a string, and promise2 which rejects with a string. These promises are used to demonstrate the behavior of Promise.all() and Promise.allSettled().
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/promise-all-vs-all-settled.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const promise1 = Promise.resolve('Promise 1 resolved');
const promise2 = Promise.reject('Promise 2 rejected');
```

----------------------------------------

TITLE: Update To-Do Item Request Example
DESCRIPTION: Depicts the structure of a PUT request to update an existing to-do item at the /todos/{id} endpoint.  The request body includes updated 'title' and 'description' values. User authentication is required, and authorization to update the specific item must be verified.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_7

LANGUAGE: HTTP
CODE:
```
PUT /todos/1
{
  "title": "Buy groceries",
  "description": "Buy milk, eggs, bread, and cheese"
}
```

----------------------------------------

TITLE: Dashboard Testing Script (test_dashboard.sh)
DESCRIPTION: This script simulates load on the system to test the Netdata monitoring dashboard. It generates activity that should be visible within the Netdata interface. Adapt the script to create relevant load based on the system metrics being monitored.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/simple-monitoring-dashboard.md#_snippet_1

LANGUAGE: Shell
CODE:
```
#!/bin/bash
# This script puts some load on the system to test the monitoring dashboard.

# Add commands here to generate load on the system.
# Example:  stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 60s

echo "Dashboard testing script placeholder. Add load generation commands here."

```

----------------------------------------

TITLE: Set Initialization and Operations in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize a JavaScript Set, add elements (showing the uniqueness feature), check for the existence of elements using `has()`, delete elements using `delete()`, and determine the size of the set using `size`. The `add()` method only adds the element if it's not already present.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/set.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const roadmap = new Set();
roadmap.add('JavaScript');
roadmap.add('JavaScript');

roadmap.add('dynamic');
roadmap.add(1995);

console.log(roadmap.size); // 3, because the value 'JavaScript' is already present in the set
console.log(roadmap.has('JavaScript')); // true

roadmap.delete('JavaScript');
console.log(roadmap.has('JavaScript')); // false
console.log(roadmap.size); // 2
```

----------------------------------------

TITLE: Chain of Responsibility Usage Example
DESCRIPTION: This PHP code demonstrates how to use the `Account`, `Bank`, `Paypal`, and `Bitcoin` classes to create a chain of responsibility for handling payments. It creates instances of each account type, sets up the chain order, and then attempts to pay an amount using the chain. The output shows which account is used to make the payment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_47

LANGUAGE: php
CODE:
```
// Let's prepare a chain like below
//      $bank->$paypal->$bitcoin
//
// First priority bank
//      If bank can't pay then paypal
//      If paypal can't pay then bit coin

$bank = new Bank(100);          // Bank with balance 100
$paypal = new Paypal(200);      // Paypal with balance 200
$bitcoin = new Bitcoin(300);    // Bitcoin with balance 300

$bank->setNext($paypal);
$paypal->setNext($bitcoin);

// Let's try to pay using the first priority i.e. bank
$bank->pay(259);

// Output will be
// ==============
// Cannot pay using bank. Proceeding ..
// Cannot pay using paypal. Proceeding ..:
// Paid 259 using Bitcoin!

```

----------------------------------------

TITLE: Handling Promise Rejection with Catch - JavaScript
DESCRIPTION: This snippet shows how to handle a rejected Promise using the `catch` method. The `catch` method is called with a callback function that will be executed if the promise is rejected. The callback receives the error object as an argument, and the message is logged to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/error-in-promise.md#_snippet_1

LANGUAGE: javascript
CODE:
```
promise
  .then((result) => {
    console.log(result);
  })
  .catch((error) => {
    console.log(error.message);
  });
```

----------------------------------------

TITLE: Establish TCP Connection with Peer in Go
DESCRIPTION: This Go snippet demonstrates how to establish a TCP connection with a peer using the `net.DialTimeout` function. It attempts to connect to the peer's address (obtained from the `peer.String()` method) using the TCP protocol, with a timeout of 3 seconds. If the connection fails, it returns an error; otherwise, it returns the established connection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_3

LANGUAGE: go
CODE:
```
conn, err := net.DialTimeout("tcp", peer.String(), 3*time.Second)
if err != nil {
	return nil, err
}
```

----------------------------------------

TITLE: Using If-None-Match Header in HTML
DESCRIPTION: This snippet shows how a browser sends the ETag of a stale resource in the `If-None-Match` header when making a conditional HTTP request. The server compares this ETag to determine if the resource has changed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_10

LANGUAGE: html
CODE:
```
If-None-Match: "abc123xyz"
```

----------------------------------------

TITLE: Closing MongoDB Cursor
DESCRIPTION: This snippet shows how to manually close a MongoDB cursor using the `close()` method. This is useful when working with large result sets or when you want to explicitly manage resources.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/useful-concepts/cursors.md#_snippet_3

LANGUAGE: javascript
CODE:
```
cursor.close();
```

----------------------------------------

TITLE: Simple Pest Test Case in PHP
DESCRIPTION: This PHP code snippet demonstrates a basic test case using Pest. It asserts that the homepage returns a 200 status code. This example highlights Pest's concise syntax and ease of use for writing test cases.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/pest@d6MydchA52HIxfAUjmZui.md#_snippet_0

LANGUAGE: PHP
CODE:
```
it('has homepage', function () {
    $response = get('/');
    $response->assertStatus(200);
});
```

----------------------------------------

TITLE: NOT Operator (!) Example JavaScript
DESCRIPTION: Demonstrates the NOT operator (`!`) in JavaScript, which inverts the boolean value of its operand. The examples show its behavior with boolean, string, and number values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/logical-operators.md#_snippet_2

LANGUAGE: js
CODE:
```
console.log(!true); // false
console.log(!false); // true
console.log(!'hello'); // false
console.log(!0); // true
```

----------------------------------------

TITLE: Executing 'ls' command with exec() in PHP
DESCRIPTION: This PHP code snippet demonstrates the use of the `exec()` function to execute the 'ls' command on the system. The output of the command is captured in the `$output` array, which is then iterated over to print each line of the output to the console. This example requires PHP to be installed and configured correctly on the system. It's a basic example and may need adjustments depending on the specific environment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/executing-system-commands@VhyYNGhOdKKrz_-uTkrjD.md#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
// Outputs all lines
exec('ls', $output);
foreach($output as $out){
    echo $out, PHP_EOL;
}
?>
```

----------------------------------------

TITLE: Forking a Repository using git fork
DESCRIPTION: This command creates a personal copy of a repository on a remote hosting platform like GitHub. It allows users to make changes independently without directly affecting the original project.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/collaboration@bXfCUG3h1TIFPgD4WUDph.md#_snippet_2

LANGUAGE: Git
CODE:
```
git fork
```

----------------------------------------

TITLE: Defining an Interface in TypeScript
DESCRIPTION: This code snippet demonstrates how to define an interface named `Person` in TypeScript. The interface `Person` defines an object structure with `name` (string) and `age` (number) properties. It then shows an example of creating a constant object conforming to the `Person` interface.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/types-vs-interfaces@TxkEpoOiuUm-fXJuFVKcH.md#_snippet_1

LANGUAGE: typescript
CODE:
```
interface Person {
  name: string;
  age: number;
}

const person: Person = {
  name: 'John Doe',
  age: 30,
};
```

----------------------------------------

TITLE: Find with Logical Operators ($and) - MongoDB
DESCRIPTION: This snippet demonstrates how to use the `$and` logical operator with the `find()` method to perform more advanced filtering. It requires an array of conditions specified as JSON objects. The `age` and `first_name` fields must exist in the `users` collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/find-methods.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.users.find({ $and: [{ age: 25 }, { first_name: 'John' }] });
```

----------------------------------------

TITLE: Implementing Adapter Pattern for WildDog
DESCRIPTION: This snippet demonstrates the Adapter pattern by creating a `WildDogAdapter` class that implements the `Lion` interface. The adapter takes a `WildDog` object as a dependency and translates the `bark` method to the `roar` method, making it compatible with the `Hunter` class.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_21

LANGUAGE: php
CODE:
```
// Adapter around wild dog to make it compatible with our game
class WildDogAdapter implements Lion
{
    protected $dog;

    public function __construct(WildDog $dog)
    {
        $this->dog = $dog;
    }

    public function roar()
    {
        $this->dog->bark();
    }
}
```

----------------------------------------

TITLE: Deleting File with Confirmation in Bash
DESCRIPTION: This snippet showcases how to delete a file with confirmation using the `rm -i` command in Linux. The `rm -i` command prompts the user for confirmation before deleting each file, providing an additional layer of security against accidental deletion.  Replace [filename] with the actual file name.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/creating-files.md#_snippet_3

LANGUAGE: bash
CODE:
```
# Ask for confirmation
rm -i [filename]
```

----------------------------------------

TITLE: Listing Issues with GitHub CLI
DESCRIPTION: This command lists all open and closed issues in the repository. It requires the GitHub CLI to be installed and authenticated.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/issue-management@kGnZifvXbHBf5zXIsfAQw.md#_snippet_0

LANGUAGE: Shell
CODE:
```
gh issue list
```

----------------------------------------

TITLE: Division Assignment Operator in C++
DESCRIPTION: Demonstrates the division assignment operator (/=) in C++. This operator divides the left-hand operand by the right-hand operand and assigns the quotient to the left-hand operand. The example divides x (which is initially 15) by 3 and assigns the quotient (5) back to x.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_18

LANGUAGE: cpp
CODE:
```
int x = 15;
x /= 3; // x gets the value 5 (15 / 3)
```

----------------------------------------

TITLE: Get To-Do Items Request Example
DESCRIPTION: Illustrates the structure of a GET request to retrieve a list of to-do items from the /todos endpoint with pagination parameters.  The query parameters 'page' and 'limit' control the pagination of the results. Authentication is required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_11

LANGUAGE: HTTP
CODE:
```
GET /todos?page=1&limit=10
```

----------------------------------------

TITLE: React Suspense with Lazy Loading
DESCRIPTION: This React code demonstrates lazy loading a component using `lazy` and displaying a fallback using `Suspense`. The `LazyRoadmapRender` component is lazily loaded, and a `Suspense` component is used to display "Loading..." while the component is loading. A button toggles the visibility of the lazily loaded component.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/suspense.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { lazy, Suspense } from 'react';

const LazyRoadmapRender = lazy(() => import('./RoadmapRender'));

export function App() {
  const [show, setShow] = useState(false);
  return (
    <>
      <button onClick={() => setShow(true)}>Show</button>
      {show && (
        <Suspense fallback={<div>Loading...</div>}>
          <LazyRoadmapRender />
        </Suspense>
      )}
    </>
  );
}
```

----------------------------------------

TITLE: Compiling and running C++ code with GDB debugger
DESCRIPTION: These shell commands demonstrate how to compile a C++ program with debugging information and run it using the GDB debugger. The g++ command compiles the test.cpp file with the -g flag, which includes debugging symbols. The gdb command then starts the GDB debugger on the compiled executable. Finally, the run command executes the program within GDB, allowing the debugger to catch any errors or exceptions during runtime.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/understanding-debugger-messages@VtPb8-AJKzhTB0QbMtoU4.md#_snippet_1

LANGUAGE: shell
CODE:
```
$ g++ -g -o test test.cpp  // Compile with -g flag to include debugging information
$ gdb ./test               // Run the GDB debugger
(gdb) run                  // Execute the program inside GDB
```

----------------------------------------

TITLE: Reading CSV File with fgetcsv() in PHP
DESCRIPTION: This snippet demonstrates how to read a CSV file line by line using `fgetcsv()` in PHP. It opens the CSV file, reads each line as an array, and then prints the array. The code handles file opening and closing, ensuring proper resource management.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/csv-processing@MRDjEjbkMpk7shcWAoPOF.md#_snippet_0

LANGUAGE: PHP
CODE:
```
if (($handle = fopen("sample.csv", "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        print_r($data);
    }
    fclose($handle);
}
```

----------------------------------------

TITLE: Querying with Regular Expressions in MongoDB (JavaScript)
DESCRIPTION: Shows how to use regular expressions within MongoDB queries using both the plain regex pattern and the `$regex` operator.  The code snippets demonstrate equivalent ways to find documents where the 'field' contains the pattern 'example' (case-insensitive).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/regex.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.find({ field: /example/i }); // Using plain regex pattern
db.collection.find({ field: { $regex: /example/i } }); // Using $regex operator
```

----------------------------------------

TITLE: Querying with $gt operator in MongoDB
DESCRIPTION: This snippet demonstrates how to use the `$gt` operator in MongoDB to find documents where the value of a specified field is greater than a given value. The example queries a collection to find all documents where the `age` field is greater than 25.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/index.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.find({ age: { $gt: 25 } });
```

----------------------------------------

TITLE: Using std::vector in C++
DESCRIPTION: This code snippet demonstrates the usage of `std::vector`, a dynamic array in C++. It includes adding elements to the vector using `push_back()` and iterating through the vector to print its contents. The code requires the `<iostream>` and `<vector>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/containers@1pydf-SR0QUfVNuBEyvzc.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <vector>

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};

    vec.push_back(6); // Add an element to the end

    std::cout << "Vector contains:";
    for (int x : vec) {
        std::cout << ' ' << x;
    }
    std::cout << '\n';
}
```

----------------------------------------

TITLE: Using 'any' Type in TypeScript
DESCRIPTION: This code snippet showcases the usage of the 'any' type in TypeScript. When a variable is declared with the 'any' type, the TypeScript compiler bypasses all type checks for that variable. This allows accessing properties, calling it as a function, and assigning any value to it without errors. However, this approach disables type safety and should be used cautiously.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/any@yXiLegSlL7SveU8rBGj8U.md#_snippet_0

LANGUAGE: typescript
CODE:
```
let obj: any = { x: 0 };
// None of the following lines of code will throw compiler errors.
// Using `any` disables all further type checking, and it is assumed
// you know the environment better than TypeScript.
obj.foo();
obj();
obj.bar = 100;
obj = 'hello';
const n: number = obj;
```

----------------------------------------

TITLE: Source File Example
DESCRIPTION: This code snippet shows a source file in C++. Source files implement the functionality declared in the header files. It includes the corresponding header file "example.h" and the `<iostream>` header for output. The `printMessage` method of the `Example` class is defined here, printing "Hello, code splitting!" to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/headers--cpp-files@CK7yf8Bo7kfbV6x2tZTrh.md#_snippet_1

LANGUAGE: cpp
CODE:
```
// example.cpp
#include "example.h"
#include <iostream>

void Example::printMessage() {
    std::cout << "Hello, code splitting!\n";
}
```

----------------------------------------

TITLE: GitHub API Endpoint Example
DESCRIPTION: This shows the GitHub API endpoint used to fetch user activity. It explains how to construct the URL by substituting the desired username into the endpoint.  This API call returns a JSON payload containing the user's recent activity.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/github-user-activity.md#_snippet_1

LANGUAGE: HTTP
CODE:
```
# https://api.github.com/users/<username>/events
# Example: https://api.github.com/users/kamranahmedse/events
```

----------------------------------------

TITLE: Type Checking with typeof in TypeScript
DESCRIPTION: This code snippet demonstrates how to use the `typeof` operator in TypeScript to check the type of a variable.  The `value` variable is declared as a union type of `string` or `number`.  The `typeof` operator is used in an `if` statement to determine the actual type of `value` and execute the appropriate code block.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/typeof@ZiOcFZy85p7tLzUkyKDei.md#_snippet_0

LANGUAGE: typescript
CODE:
```
let value: string | number = 'hello';

if (typeof value === 'string') {
  console.log('value is a string');
} else {
  console.log('value is a number');
}
```

----------------------------------------

TITLE: Using $slice Operator to Limit Array Elements in MongoDB
DESCRIPTION: This code snippet demonstrates the use of the $slice operator to limit the number of elements projected from an array in MongoDB. The first example returns the `name` field and the first 3 `grades` elements for all documents. The second example returns the `name` field and 2 `grades` elements after skipping the first element.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/index.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.find({}, { name: 1, grades: { $slice: 3 } });
```

LANGUAGE: javascript
CODE:
```
db.collection.find({}, { name: 1, grades: { $slice: [1, 2] } });
```

----------------------------------------

TITLE: Demonstrating Asynchronous Execution Order in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates the order in which different asynchronous operations are executed. It uses `process.nextTick`, `Promise`, `setTimeout`, and `setImmediate` to illustrate their relative priorities within the event loop. The expected output shows the order of execution, highlighting the higher priority of `process.nextTick` and `Promise` over `setTimeout` and `setImmediate`. It prints 'start', 'end', 'process.nextTick', 'Promise', 'setTimeout', and 'setImmediate' to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/order-priority.md#_snippet_0

LANGUAGE: javascript
CODE:
```
console.log('start');
Promise.resolve().then(() => console.log('Promise'));
setTimeout(() => console.log('setTimeout'), 0);
process.nextTick(() => console.log('process.nextTick'));
setImmediate(() => console.log('setImmediate'));
console.log('end');

// Output:
// start
// end
// process.nextTick
// Promise
// setTimeout
// setImmediate
```

----------------------------------------

TITLE: Declaring and Initializing a C++ Reference
DESCRIPTION: This snippet demonstrates how to declare and initialize a C++ reference. The reference `ref` is initialized to refer to the variable `var`, making it an alias for `var`.  References must be initialized upon declaration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/references@uUzRKa9wGzdUwwmAg3FWr.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int var = 10;        // Declare an integer variable
int& ref = var;      // Declare a reference that "points to" var
```

----------------------------------------

TITLE: Deleting File with rm in Bash
DESCRIPTION: This snippet explains how to delete a file using the `rm` command in Linux. The `rm` command permanently removes the specified file from the file system. Use with caution, as deleted files are typically not recoverable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/creating-files.md#_snippet_2

LANGUAGE: bash
CODE:
```
# Deletes the file named example.txt
rm example.txt
```

----------------------------------------

TITLE: Querying with $include & Excluding _id - JavaScript
DESCRIPTION: This snippet demonstrates a MongoDB query using the `$include` operator to retrieve only the `title` and `author` fields from the `books` collection, and explicitly excludes the `_id` field. The `find` method is used with an empty query filter and the projection specification.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/include.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.books.find({}, { title: 1, author: 1, _id: 0 });
```

----------------------------------------

TITLE: Enabling CORS with Express
DESCRIPTION: This code snippet demonstrates how to enable CORS for a specific origin in an Express application using the `cors` middleware. It requires the `cors` package to be installed (`npm install cors`).  The `origin` option specifies the allowed origin, ensuring that only requests from `https://example.com` will be permitted.  This prevents cross-origin errors when the frontend and backend are served from different domains.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/cors-handling.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const cors = require('cors');
app.use(cors({ origin: 'https://example.com' }));
```

----------------------------------------

TITLE: Displaying ongoing list of processes using top
DESCRIPTION: This command displays a real-time view of system performance and a list of running processes, continuously updating with their resource usage.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/listing-finding-proc.md#_snippet_1

LANGUAGE: bash
CODE:
```
top
```

----------------------------------------

TITLE: Using ReturnType with Various Function Types
DESCRIPTION: Examples demonstrating the usage of `ReturnType` to extract return types from various function types in TypeScript, including functions with specific return types, generic functions, and declared functions. The snippet showcases how `ReturnType` infers the return type based on the function signature.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/returntype@On75JR_UkiIlha0_qaSeu.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type T0 = ReturnType<() => string>;
// type T0 = string

type T1 = ReturnType<(s: string) => void>;
// type T1 = void

type T2 = ReturnType<<T>() => T>;
// type T2 = unknown

type T3 = ReturnType<<T extends U, U extends number[]>() => T>;
// type T3 = number[]

declare function f1(): { a: number; b: string };
type T4 = ReturnType<typeof f1>;
// type T4 = {
//     a: number;
//     b: string;
// }

type T5 = ReturnType<any>;
// type T5 = any

type T6 = ReturnType<never>;
// type T6 = never

type T7 = ReturnType<string>;
// ^ Type 'string' does not satisfy the constraint '(...args: any) => any'.

type T8 = ReturnType<Function>;
// ^ Type 'Function' does not satisfy the constraint '(...args: any) => any'.
```

----------------------------------------

TITLE: Preconnecting to Google Fonts
DESCRIPTION: This HTML snippet demonstrates how to preconnect to the Google Fonts server to improve font loading performance. By using `rel="preconnect"` the browser can begin establishing a connection to the server before it discovers the need for font files, reducing latency. The `crossorigin` attribute is also included.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/best-practices/frontend-performance/content/use-preconnect-to-load-fonts.md#_snippet_0

LANGUAGE: html
CODE:
```
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
```

----------------------------------------

TITLE: Using 'require' in PHP
DESCRIPTION: The 'require' statement in PHP includes and evaluates a specified file during script execution. If the file is not found, PHP throws a fatal error and stops the execution of the script. This statement is essential for code reusability and organization.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/require@Kaaqu-mN7xvHN6CbIn616.md#_snippet_0

LANGUAGE: PHP
CODE:
```
require 'filename';
```

----------------------------------------

TITLE: Building Tracker URL
DESCRIPTION: This snippet demonstrates how to construct the URL to announce our presence to the tracker.  It takes a `TorrentFile` struct, a `peerID`, and a `port` as input, and builds the URL with necessary query parameters such as `info_hash`, `peer_id`, `port`, `uploaded`, `downloaded`, `compact`, and `left`. It uses the `net/url` package to parse the announce URL and encode the query parameters. It returns the constructed URL as a string and any potential error encountered during parsing.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_1

LANGUAGE: Go
CODE:
```
func (t *TorrentFile) buildTrackerURL(peerID [20]byte, port uint16) (string, error) {
	base, err := url.Parse(t.Announce)
	if err != nil {
		return "", err
	}
	params := url.Values{
		"info_hash":  []string{string(t.InfoHash[:])},
		"peer_id":    []string{string(peerID[:])},
		"port":       []string{strconv.Itoa(int(Port))},
		"uploaded":   []string{"0"},
		"downloaded": []string{"0"},
		"compact":    []string{"1"},
		"left":       []string{strconv.Itoa(t.Length)},
	}
	base.RawQuery = params.Encode()
	return base.String(), nil
}
```

----------------------------------------

TITLE: Run MySQL in Docker
DESCRIPTION: This command starts a MySQL instance in a Docker container. It maps port 3306 on the host to port 3306 in the container, sets the MYSQL_ROOT_PASSWORD environment variable to 'admin', names the container 'ms', and runs it in detached mode. Requires Docker to be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/single-command-database-setup.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker run \
  --name ms \
  --publish 3306:3306 \
  --detach \
  --env MYSQL_ROOT_PASSWORD=admin \
  mysql
```

----------------------------------------

TITLE: Defining a Function in C++
DESCRIPTION: This code snippet demonstrates the general format for defining a function in C++. It shows the structure including return type, function name, and parameter list. The function body contains the statements that perform the specific task.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/functions@oYi3YOc1GC2Nfp71VOkJt.md#_snippet_0

LANGUAGE: cpp
CODE:
```
return_type function_name(parameter list) {
    // function body
}
```

----------------------------------------

TITLE: Initializing std::deque in C++
DESCRIPTION: This code snippet demonstrates how to initialize a `std::deque` in C++. `std::deque` is a sequence container that allows insertion and deletion at both ends (double-ended queue). It requires including the `<deque>` header file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_2

LANGUAGE: cpp
CODE:
```
std::deque<int> my_deque;
```

----------------------------------------

TITLE: Running Ansible Playbook with Tags (Bash)
DESCRIPTION: This example demonstrates how to execute an Ansible playbook and target specific roles using tags. The first command runs all roles defined in the `setup.yml` playbook. The second command executes only the role tagged as "app".
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/configuration-management.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Run all the roles
ansible-playbook setup.yml

# Run only the app role
ansible-playbook setup.yml --tags "app"
```

----------------------------------------

TITLE: Switch Case Example - JavaScript
DESCRIPTION: Illustrates the basic syntax of a switch statement in JavaScript. It evaluates an expression and compares its value to a series of case clauses. If a match is found, the corresponding statements are executed until a break statement is encountered. The default case is executed if no other case matches.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/javascript/content/switch@H_QlcUlavKKfcNK8CYAvb.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
switch (expression) {
  case value1:
    //Statements executed when the result of expression matches value1
    break;
  case value2:
    //Statements executed when the result of expression matches value2
    break;
  ...
  case valueN:
    //Statements executed when the result of expression matches valueN
    break;
  default:
    //Statements executed when none of the values match the value of the expression
    break;
}
```

----------------------------------------

TITLE: Chain of Responsibility Paypal Account Class
DESCRIPTION: This PHP code defines a `Paypal` class that extends the `Account` class. It represents a PayPal account with a specific balance. It inherits the `pay` and `canPay` methods from the base class, allowing it to participate in the chain of responsibility for handling payments.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_45

LANGUAGE: php
CODE:
```
class Paypal extends Account
{
    protected $balance;

    public function __construct(float $balance)
    {
        $this->balance = $balance;
    }
}

```

----------------------------------------

TITLE: Updating a Single Document in MongoDB
DESCRIPTION: This snippet demonstrates how to update a single document in a MongoDB collection using the `updateOne()` method. It takes a query object to identify the document to update and an update object specifying the changes. Requires a connection to a MongoDB database and an existing collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/index.md#_snippet_5

LANGUAGE: javascript
CODE:
```
db.users.updateOne({ name: 'John Doe' }, { $set: { age: 31 } });
```

----------------------------------------

TITLE: Implementing the Template Method Pattern in PHP
DESCRIPTION: This PHP code demonstrates the Template Method pattern, defining the skeleton of an algorithm while allowing subclasses to implement specific steps. It defines an abstract `Builder` class with a `build` method that outlines the algorithm. Concrete subclasses like `AndroidBuilder` and `IosBuilder` implement the abstract methods to provide specific implementations for each step.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_73

LANGUAGE: PHP
CODE:
```
abstract class Builder
{

    // Template method
    final public function build()
    {
        $this->test();
        $this->lint();
        $this->assemble();
        $this->deploy();
    }

    abstract public function test();
    abstract public function lint();
    abstract public function assemble();
    abstract public function deploy();
}
```

LANGUAGE: PHP
CODE:
```
class AndroidBuilder extends Builder
{
    public function test()
    {
        echo 'Running android tests';
    }

    public function lint()
    {
        echo 'Linting the android code';
    }

    public function assemble()
    {
        echo 'Assembling the android build';
    }

    public function deploy()
    {
        echo 'Deploying android build to server';
    }
}

class IosBuilder extends Builder
{
    public function test()
    {
        echo 'Running ios tests';
    }

    public function lint()
    {
        echo 'Linting the ios code';
    }

    public function assemble()
    {
        echo 'Assembling the ios build';
    }

    public function deploy()
    {
        echo 'Deploying ios build to server';
    }
}
```

LANGUAGE: PHP
CODE:
```
$androidBuilder = new AndroidBuilder();
$androidBuilder->build();

// Output:
// Running android tests
// Linting the android code
// Assembling the android build
// Deploying android build to server

$iosBuilder = new IosBuilder();
$iosBuilder->build();

// Output:
// Running ios tests
// Linting the ios code
// Assembling the ios build
// Deploying ios build to server
```

----------------------------------------

TITLE: Iterating with For Loop in C++
DESCRIPTION: This code demonstrates the use of a `for` loop in C++ to iterate a specific number of times. It initializes a counter variable `i`, sets a condition for loop continuation (`i < 5`), and increments `i` in each iteration. The loop prints the current iteration number to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/for--while--do-while-loops@_IP_e1K9LhNHilYTDh7L5.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

int main() {
    for (int i = 0; i < 5; i++) {
        std::cout << "Iteration: " << i << '\n';
    }
    return 0;
}
```

----------------------------------------

TITLE: Filtering Array of Numbers (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates filtering an array of numbers to extract only the even numbers. It uses the `filter()` method with a callback function that checks if a number is even using the modulo operator (`%`). The original array remains unchanged, and a new array containing only the even numbers is created.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/filter-method.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const numbers = [1, 2, 3, 4, 5, 6];

const evenNumbers = numbers.filter((number) => {
  return number % 2 === 0;
});

console.log(numbers); // [1, 2, 3, 4, 5, 6]
console.log(evenNumbers); // [2, 4, 6]
```

----------------------------------------

TITLE: Abstract Class Definition and Implementation - TypeScript
DESCRIPTION: Defines an abstract class `Animal` with an abstract method `makeSound` and a concrete method `move`. The `Dog` class extends `Animal` and provides an implementation for the `makeSound` method. Abstract classes cannot be instantiated directly and serve as a base for other classes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/abstract-classes@tZFWeWHdOUJcCEtHfXH9p.md#_snippet_0

LANGUAGE: typescript
CODE:
```
abstract class Animal {
  abstract makeSound(): void;

  move(): void {
    console.log('moving...');
  }
}

class Dog extends Animal {
  makeSound(): void {
    console.log('bark');
  }
}
```

----------------------------------------

TITLE: Executing Traceroute Command in Bash
DESCRIPTION: This bash command executes the traceroute utility to trace the route to www.example.com. It displays the path that packets take to reach the destination and measures the round-trip time for each hop.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/troubleshooting/traceroute.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ traceroute www.example.com
```

----------------------------------------

TITLE: Adding Numbers Using Parameters and Return Value in PHP
DESCRIPTION: This code snippet demonstrates a simple PHP function that takes two numerical parameters (`$num1` and `$num2`), calculates their sum, and returns the result using the `return` statement. The function `addNumbers` encapsulates the addition logic, making it reusable. The example illustrates how to call the function and print the returned value.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/parameters--return-values@mpQKoBzsOa-5iWo08sOhQ.md#_snippet_0

LANGUAGE: php
CODE:
```
function addNumbers($num1, $num2) {
  $sum = $num1 + $num2;
  return $sum;
}

echo addNumbers(3, 4);  // Outputs: 7
```

----------------------------------------

TITLE: Using react-i18next for Translation
DESCRIPTION: This snippet demonstrates how to use the `react-i18next` library to translate text in a React component. It utilizes the `useTranslation` hook to access the translation function `t`, which retrieves the translated string based on a key. The translated text is then displayed within an `<h1>` tag.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/internationalization.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { useTranslation } from 'react-i18next';
const { t } = useTranslation();
<h1>{t('welcome_message')}</h1>;
```

----------------------------------------

TITLE: Initializing and Using JavaScript Map
DESCRIPTION: This code snippet demonstrates how to create a new JavaScript Map, set key-value pairs, retrieve values, delete entries, check for the existence of keys, and get the size of the map. It also showcases how to clear the map.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/map.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const roadmap = new Map();
roadmap.set('name', 'JavaScript');
roadmap.set('type', 'dynamic');
roadmap.set('year', 1995);

console.log(roadmap.get('name')); // JavaScript

roadmap.delete('year');
console.log(roadmap.has('year')); // false
console.log(roadmap.size); // 2

roadmap.clear();
console.log(roadmap.size); // 0
```

----------------------------------------

TITLE: Listing files/directories using `ls` command in Bash
DESCRIPTION: The `ls` command lists files and directories in the current directory. It takes various options to modify the output, such as showing hidden files or displaying detailed information. It is essential for understanding the contents of a directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/basic-commands.md#_snippet_1

LANGUAGE: bash
CODE:
```
# Lists files and directories in the current directory.
ls
```

----------------------------------------

TITLE: C++ Main Function
DESCRIPTION: This code snippet shows the structure of the main function in C++. The main function is the entry point of any C++ program. It returns an integer value, typically 0, to indicate successful execution. All program logic resides within this function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/introduction-to-language@NvODRFR0DLINB0RlPSsvt.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int main() {
    // Your code goes here
    return 0;
}
```

----------------------------------------

TITLE: Creating a Basic HTTP Server in Node.js
DESCRIPTION: This code snippet creates a simple HTTP server using Node.js's built-in `http` module. The server listens on port 3000 and responds to all requests with the 'Hello, World!' message. It requires the `http` module and uses the `createServer` method to define the server's behavior, including setting the response headers and sending the response body.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/web-server.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import http from 'node:http';

const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Hello World\n');
});

server.listen(3000, () => {
  console.log('Server running at http://localhost:3000/');
});
```

----------------------------------------

TITLE: Handling errors using try...catch block in Node.js
DESCRIPTION: This code snippet demonstrates how to use a `try...catch` block to handle errors when reading a file synchronously in Node.js. It uses the `fs.readFileSync` method to read the file and handles any errors that occur during the process in the `catch` block.  The module 'fs' is imported from 'node:fs'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/error-handling.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import fs from 'node:fs';

try {
  const data = fs.readFileSync('file.md', 'utf-8');
  console.log(data);
} catch (err) {
  console.error(err);
}
```

----------------------------------------

TITLE: NonNullable Type Usage in TypeScript
DESCRIPTION: Demonstrates how to use the NonNullable utility type in TypeScript to exclude null and undefined from a union type. The first example excludes null and undefined from a union of string, number, and undefined, resulting in a type that can be either a string or a number. The second example excludes null and undefined from a union of string array, null, and undefined, resulting in a type that is a string array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/nonnullable@_BAZlBEzE7ddr315OeHvl.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type T0 = NonNullable<string | number | undefined>;
// type T0 = string | number

type T1 = NonNullable<string[] | null | undefined>;
// type T1 = string[]
```

----------------------------------------

TITLE: Generating Internal Debug Symbols with g++
DESCRIPTION: This command compiles a C++ source file into an executable with internal debugging symbols. The `-g` flag instructs the g++ compiler to include debugging information within the compiled binary.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/debugging-symbols@sR_FxGZHoMCV9Iv7z2_SX.md#_snippet_0

LANGUAGE: bash
CODE:
```
g++ -g -o my_program my_program.cpp
```

----------------------------------------

TITLE: Starting the Caching Proxy Server via CLI
DESCRIPTION: This command demonstrates how to start the caching proxy server using the command line. It specifies the port and origin URL for the proxy to listen on and forward requests to, respectively. The `--port` argument sets the port number, and the `--origin` argument specifies the target server's URL.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/caching-server.md#_snippet_0

LANGUAGE: shell
CODE:
```
caching-proxy --port <number> --origin <url>
```

----------------------------------------

TITLE: Iterating with a For Loop in PHP
DESCRIPTION: This PHP code snippet demonstrates a 'for' loop that iterates five times.  The loop initializes a variable `$i` to 0, continues as long as `$i` is less than 5, and increments `$i` by one after each iteration.  Inside the loop, the current value of `$i` is echoed to the output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/loops@qwt8xN4vuTrY-D0czYITI.md#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
for ($i = 0; $i < 5; $i++) {
    echo $i;
}
?>
```

----------------------------------------

TITLE: Get Element by ID - JavaScript
DESCRIPTION: This snippet shows how to get an HTML element using its unique ID attribute with `document.getElementById()`. This function returns the element matching the provided ID, which can then be used for further manipulation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/js-dom-manipulation.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
document.getElementById("id")
```

----------------------------------------

TITLE: Greater than or equal to (>=) in C++
DESCRIPTION: Demonstrates the 'greater than or equal to' relational operator in C++. This operator compares two values and returns true if the first operand is greater than or equal to the second, and false otherwise.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_9

LANGUAGE: cpp
CODE:
```
5 >= 5 // true
6 >= 2 // true
3 >= 4 // false
```

----------------------------------------

TITLE: Conditional Instruction Extraction
DESCRIPTION: This snippet provides a set of instructions for a language model to extract and reformat instructions from a given text. If the text contains a sequence of instructions, the model is asked to rewrite them in a numbered step format. If no instructions are found, the model should return "No steps provided". The recipe text needs to be inserted in the placeholder provided.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/good-prompts/give-conditions.md#_snippet_0

LANGUAGE: Text
CODE:
```
You will be provided with text delimited by triple quotes. 
If it contains a sequence of instructions, \ 
re-write those instructions in the following format:

Step 1 - ...
Step 2 - …
…
Step N - …

If the text does not contain a sequence of instructions, \ 
then simply write \"No steps provided


\"INSERT YOUR RECIPE TEXT HERE\"
```

----------------------------------------

TITLE: Greater than (>) in C++
DESCRIPTION: Demonstrates the 'greater than' relational operator in C++. This operator compares two values and returns true if the first operand is greater than the second, and false otherwise.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_7

LANGUAGE: cpp
CODE:
```
5 > 3 // true
2 > 3 // false
```

----------------------------------------

TITLE: Structured Binding Declarations Example in C++17
DESCRIPTION: This snippet illustrates structured binding declarations in C++17. It unpacks the return value of `data.emplace`, which is a `std::pair` containing an iterator and a boolean indicating success. The `auto [iter, success]` syntax directly assigns the elements of the pair to the variables `iter` and `success`. Requires a C++17 compliant compiler and the `<map>` header to define `std::map`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-17@R2-qWGUxsTOeSHRuUzhd2.md#_snippet_1

LANGUAGE: cpp
CODE:
```
map<string, int> data;
auto [iter, success] = data.emplace("example", 42);
```

----------------------------------------

TITLE: Installing TypeScript
DESCRIPTION: This command installs TypeScript as a project dependency. The `--save-dev` flag adds TypeScript to your project's `devDependencies` in `package.json`, indicating that it's only needed during development.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/installation-and-configuration@dA8CNQOgJRDa0T7rmyS7f.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install --save-dev typescript
```

----------------------------------------

TITLE: Deleting Multiple Documents in MongoDB
DESCRIPTION: This snippet demonstrates how to delete multiple documents from a MongoDB collection using the `deleteMany()` method. A query object is passed as an argument to identify the documents to delete. Requires a connection to a MongoDB database and an existing collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/index.md#_snippet_8

LANGUAGE: javascript
CODE:
```
db.users.deleteMany({ age: { $lt: 30 } });
```

----------------------------------------

TITLE: Testing Get Book Endpoint (Go)
DESCRIPTION: This Go test function, `TestGetBook`, tests the functionality of retrieving a single book by ID via the `/book/:id` endpoint using a mock HTTP request.  It relies on `gin-gonic/gin` for routing and `net/http/httptest` for creating a test environment. It verifies the HTTP status code and checks if the returned book's ID matches the requested ID.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_21

LANGUAGE: go
CODE:
```
func TestGetBook(t *testing.T) {
	setupTestDB()
	book := addBook()
	router := gin.Default()
	router.GET("/book/:id", api.GetBook)

	req, _ := http.NewRequest("GET", "/book/"+strconv.Itoa(int(book.ID)), nil)
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if status := w.Code; status != http.StatusOK {
		t.Errorf("Expected status %d, got %d", http.StatusOK, status)
	}

	var response api.JsonResponse
	json.NewDecoder(w.Body).Decode(&response)

	if response.Data == nil || response.Data.(map[string]interface{})["id"] != float64(book.ID) {
		t.Errorf("Expected book ID %d, got nil or wrong ID", book.ID)
	}
}
```

----------------------------------------

TITLE: Implementing Command Pattern Invoker in PHP
DESCRIPTION: This code defines the `RemoteControl` class, which acts as the invoker in the Command pattern. It has a `submit` method that takes a `Command` object and executes it, further decoupling the client from the receiver.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_50

LANGUAGE: php
CODE:
```
// Invoker
class RemoteControl
{
    public function submit(Command $command)
    {
        $command->execute();
    }
}
```

----------------------------------------

TITLE: Implementing the Speak Visitor
DESCRIPTION: This class implements the `AnimalOperation` interface. It defines `visit` methods for each animal type, specifying the action (sound) each animal makes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_67

LANGUAGE: PHP
CODE:
```
class Speak implements AnimalOperation
{
    public function visitMonkey(Monkey $monkey)
    {
        $monkey->shout();
    }

    public function visitLion(Lion $lion)
    {
        $lion->roar();
    }

    public function visitDolphin(Dolphin $dolphin)
    {
        $dolphin->speak();
    }
}
```

----------------------------------------

TITLE: Add New Subnet - Linux Shell
DESCRIPTION: This command adds a new subnet to the routing table in Linux. `xxx.xxx.xxx.x/xx` should be replaced with the subnet address and network mask, and `yyy.yyy.yyy.y` should be replaced with the default gateway for the subnet. This allows the system to route traffic to the newly defined subnet.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/networking/subnetting.md#_snippet_1

LANGUAGE: shell
CODE:
```
# Add a new subnet
$ route add -net xxx.xxx.xxx.x/xx gw yyy.yyy.yyy.y
```

----------------------------------------

TITLE: Monitoring System Processes with Top Command (Bash)
DESCRIPTION: The `top` command provides a dynamic real-time view of running processes. It's used to identify resource-intensive processes that may be causing performance bottlenecks. No specific dependencies are required, as `top` is a standard utility in most Linux distributions. The output is a constantly updating table of processes, sorted by CPU usage by default.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/troubleshooting/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
# example of using a command-line tool for troubleshooting
top
```

----------------------------------------

TITLE: Using Null Coalescing Operator in PHP
DESCRIPTION: This PHP code snippet demonstrates the use of the null coalescing operator (??) to assign a default value to a variable if the primary value is null or not set.  It checks if the 'username' key exists in the $_POST array. If it does, $username is assigned the value from $_POST['username']; otherwise, it's assigned the default value 'Guest'. This avoids potential 'undefined index' errors.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/null-coalescing-operator@w0ntgFBhgGd5RUFd-qlPK.md#_snippet_0

LANGUAGE: PHP
CODE:
```
$username = $_POST['username'] ?? 'Guest';
```

----------------------------------------

TITLE: Execute Command as Superuser
DESCRIPTION: This code snippet shows how to execute a specific command as the superuser (root) in a Linux environment using `sudo`. It requires that the user is allowed to use `sudo` in the `sudoers` list. The user's password will likely be requested to confirm the action.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-basics/super-user.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ sudo <command>
```

----------------------------------------

TITLE: HTTP/1.0 GET Request Example
DESCRIPTION: A sample HTTP/1.0 GET request, demonstrating the inclusion of headers such as Host, User-Agent, and Accept. These headers provide additional information to the server about the client and its preferences.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/journey-to-http2.md#_snippet_2

LANGUAGE: html
CODE:
```
GET / HTTP/1.0 Host: kamranahmed.info User-Agent: Mozilla/5.0 (Macintosh; Intel
Mac OS X 10_10_5) Accept: */*
```

----------------------------------------

TITLE: Configuring Encryption in MongoDB with YAML
DESCRIPTION: This snippet shows a sample `mongod.conf` file for configuring encryption at rest in MongoDB. It configures the WiredTiger storage engine to use AES256-CBC encryption and specifies the location of the encryption key. It uses local key management.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-security/encryption/encryption-at-rest.md#_snippet_0

LANGUAGE: yaml
CODE:
```
storage:
  wiredTiger:
    engineConfig:
      encryptWith: 'AES256-CBC'
      encryptionKeyManager:
        keyLocation: '/path/to/encryption/key'
        keyManagement: 'local'
```

----------------------------------------

TITLE: Rendering a List in React with Map
DESCRIPTION: This code snippet demonstrates how to render a list of fruit items within a React component using the JavaScript `map` function. Each list item is assigned a key based on its index in the array. While the index is used here, it's generally not recommended for dynamic lists with frequent reordering, additions, or removals.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/render-list.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const items = ['Apple', 'Banana', 'Cherry'];

function FruitList() {
  return (
    <ul>
      {items.map((fruit, index) => (
        <li key={index}>{fruit}</li>
      ))}
    </ul>
  );
}
```

----------------------------------------

TITLE: Merging Arrays with Spread Operator in JavaScript
DESCRIPTION: This snippet demonstrates how to merge two arrays into a new array using the spread operator. It initializes two arrays, `roadmaps` and `bestPractices`, and then creates a new array `resources` by spreading the elements of the original arrays. The resulting `resources` array contains all the elements from both initial arrays.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/spread-operator.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const roadmaps = ['JavaScript', 'React', 'Node.js'];
const bestPractices = ['AWS', 'API Security'];

const resources = [...roadmaps, ...bestPractices];
console.log(resources); // ['JavaScript', 'React', 'Node.js', 'AWS', 'API Security']
```

----------------------------------------

TITLE: Defining EmploymentAgency class
DESCRIPTION: This class represents the Employment Agency. It implements the Observable interface, allowing JobSeekers to subscribe and receive notifications about new job postings.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_63

LANGUAGE: PHP
CODE:
```
class EmploymentAgency implements Observable
{
    protected $observers = [];

    protected function notify(JobPost $jobPosting)
    {
        foreach ($this->observers as $observer) {
            $observer->onJobPosted($jobPosting);
        }
    }

    public function attach(Observer $observer)
    {
        $this->observers[] = $observer;
    }

    public function addJob(JobPost $jobPosting)
    {
        $this->notify($jobPosting);
    }
}
```

----------------------------------------

TITLE: Searching for a Package using vcpkg
DESCRIPTION: Searches for a specific package within the vcpkg repository. Replace <package_name> with the actual name of the package you are looking for.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/vcpkg@PKG5pACLfRS2ogfzBX47_.md#_snippet_3

LANGUAGE: Shell
CODE:
```
vcpkg search <package_name>
```

----------------------------------------

TITLE: Iterating over array with forEach in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to iterate over an array named `roadmaps` using the `forEach()` method. The method takes a callback function as an argument, which is executed for each element in the array.  In this example, each roadmap is logged to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/for-each-method.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const roadmaps = ['JavaScript', 'React', 'Node.js'];

roadmaps.forEach((roadmap) => {
  console.log(roadmap);
});
```

----------------------------------------

TITLE: Echoing a string in PHP
DESCRIPTION: This code snippet demonstrates a simple PHP script that echoes the string 'Hello, World!'. It is used to verify that PHP has been successfully installed and configured. The script should be placed in a file with a `.php` extension and accessed through a web browser served by a web server that is configured to process PHP files.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/installing-php@3_TuxOSzBuktBlBF05r_z.md#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php echo 'Hello, World!'; ?>
```

----------------------------------------

TITLE: Create Short URL - POST Request Example
DESCRIPTION: This code snippet illustrates the structure of a POST request to create a new short URL.  It includes the endpoint and the expected JSON body containing the original URL. The server should validate the URL and generate a unique short code.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/url-shortening-service.md#_snippet_0

LANGUAGE: plaintext
CODE:
```
POST /shorten
{
  "url": "https://www.example.com/some/long/url"
}
```

----------------------------------------

TITLE: Object.is() Examples in JavaScript
DESCRIPTION: Demonstrates the usage of Object.is() method to compare different values. It showcases the behavior of Object.is() with strings, numbers, NaN, -0, and objects.  The method returns true if the values are the same and false otherwise, handling edge cases like NaN and -0 differently from == and ===.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/javascript/content/objectis@ATma3bLKdmWY_WTsPIKxh.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
console.log(Object.is('1', 1));
// Expected output: false

console.log(Object.is(NaN, NaN));
// Expected output: true

console.log(Object.is(-0, 0));
// Expected output: false

const obj = {};
console.log(Object.is(obj, {}));
// Expected output: false
```

----------------------------------------

TITLE: Arithmetic Subtraction Operator in C++
DESCRIPTION: Demonstrates the subtraction operator (-) in C++. This operator subtracts the second operand from the first and returns the difference. The example shows subtracting two integer literals and assigning the result to an integer variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int difference = 5 - 3; // difference will be 2
```

----------------------------------------

TITLE: Converting to Uppercase with tr Command
DESCRIPTION: This code snippet demonstrates the basic usage of the `tr` command in Linux to convert lowercase characters to uppercase. It reads 'hello' from standard input and transforms it to 'HELLO' on standard output. The `tr` command is essential for stream-based text manipulations in Linux.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/tr.md#_snippet_0

LANGUAGE: bash
CODE:
```
echo 'hello' | tr 'a-z' 'A-Z'
```

----------------------------------------

TITLE: Using If with Initializer in C++
DESCRIPTION: This C++17 snippet demonstrates the use of an `if` statement with an initializer. It first searches for a key in `my_map`. If the key is found (i.e., `it != my_map.end()`), it executes the code within the `if` block, where 'it' is in scope.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standards@vvE1aUsWbF1OFcmMUHbJa.md#_snippet_4

LANGUAGE: cpp
CODE:
```
if (auto it = my_map.find(key); it != my_map.end()) {
    // use 'it' here
}
```

----------------------------------------

TITLE: Content Structure Example
DESCRIPTION: This code block illustrates the required format and structure for adding content to the roadmap topics. It demonstrates how to include the topic title, content description, and links to external resources with specified types.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/contributing.md#_snippet_1

LANGUAGE: markdown
CODE:
```
# Topic Title

(Content)

Visit the following resources to learn more:

- [@type@Title/Description of Link](Link)
```

----------------------------------------

TITLE: Bitwise Right Shift Operation
DESCRIPTION: Performs a bitwise right shift operation on an integer by a specified number of positions. The bits of the value are shifted to the right by the shift amount, and vacated bits are filled with zeros or the sign bit, depending on whether the input value is signed or unsigned. Requires the C++ standard library. Input value is 5 and shift amount is 1. Output is 2.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/bitwise-operators@zE4iPSq2KsrDSByQ0sGK_.md#_snippet_5

LANGUAGE: cpp
CODE:
```
int result = 5 >> 1; // result will be 2 (0000 0101 >> 1 = 0000 0010)
```

----------------------------------------

TITLE: Uncontrolled Input Component in React (JSX)
DESCRIPTION: Demonstrates an uncontrolled input component in React. The component maintains its own internal state, and a `ref` is used to access the current value directly from the DOM. The `defaultValue` prop sets the initial value of the input.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/controlled-vs-uncontrolled.md#_snippet_1

LANGUAGE: JSX
CODE:
```
// Uncontrolled:
<input type="text" defaultValue="foo" ref={inputRef} />
// Use `inputRef.current.value` to read the current value of <input>
```

----------------------------------------

TITLE: Creating and Printing a User-Defined Variable in Bash
DESCRIPTION: This code snippet demonstrates how to create a user-defined variable in bash and print its value using the `echo` command. The variable is assigned the string "Hello World". To access the value of the variable, the variable name is prefixed with a dollar sign ($).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-programming/variables.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Create a User-Defined Variable
MY_VARIABLE="Hello World"

# Print the value of the Variable
echo $MY_VARIABLE  # Output: Hello World
```

----------------------------------------

TITLE: Display first 10 lines of a file using head command in Bash
DESCRIPTION: This command displays the first 10 lines of the file 'file.txt'. It uses the `head` command without any options, which defaults to printing the first 10 lines.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/head.md#_snippet_0

LANGUAGE: bash
CODE:
```
head file.txt
```

----------------------------------------

TITLE: If-init-statement Example in C++17
DESCRIPTION: This code snippet demonstrates the use of the if-init-statement feature in C++17. It allows initializing a variable within the if condition's scope. In this example, it checks if a key exists in a map and then uses the iterator `it` within the if block if the key is found. The `map` and `key` are assumed to be defined elsewhere in the code. No dependencies are required beyond a C++17 compliant compiler.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-17@R2-qWGUxsTOeSHRuUzhd2.md#_snippet_0

LANGUAGE: cpp
CODE:
```
if (auto it = map.find(key); it != map.end())
{
    // Use it
}
```

----------------------------------------

TITLE: Managing Organization with Employees in PHP
DESCRIPTION: This code defines an `Organization` class that manages a collection of `Employee` objects. It demonstrates how to add employees to the organization and calculate the net salaries of all employees. It uses the `Employee` interface defined previously, allowing different types of employees (e.g., `Developer`, `Designer`) to be treated uniformly. It shows how the composite pattern lets clients treat the individual objects in a uniform manner.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_29

LANGUAGE: PHP
CODE:
```
class Organization
{
    protected $employees;

    public function addEmployee(Employee $employee)
    {
        $this->employees[] = $employee;
    }

    public function getNetSalaries(): float
    {
        $netSalary = 0;

        foreach ($this->employees as $employee) {
            $netSalary += $employee->getSalary();
        }

        return $netSalary;
    }
}
```

----------------------------------------

TITLE: Querying Dates with $gt Operator
DESCRIPTION: This code shows how to query MongoDB for documents where the `eventDate` is greater than a specific date, utilizing the `$gt` (greater than) operator. A Date object for the comparison is constructed, and the `find` method returns documents matching the criteria.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/date.md#_snippet_4

LANGUAGE: javascript
CODE:
```
// Find events that are happening after a certain date
const filterDate = new Date('2022-01-01');
db.events.find({ eventDate: { $gt: filterDate } });
```

----------------------------------------

TITLE: Verifying Certbot Installation
DESCRIPTION: This command verifies that Certbot is installed correctly by displaying its version. It confirms that Certbot is ready to be used for obtaining SSL certificates.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/setup-and-auto-renew-ssl-certificates.md#_snippet_2

LANGUAGE: shell
CODE:
```
certbot --version
```

----------------------------------------

TITLE: Sorting a file using sort command
DESCRIPTION: This command sorts the lines of the specified text file alphabetically and prints the sorted output to the standard output (screen). The original file remains unchanged. It takes the filename as an argument.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/sort.md#_snippet_0

LANGUAGE: bash
CODE:
```
sort filename.txt
```

----------------------------------------

TITLE: SSH into Application Server (Initial Attempt)
DESCRIPTION: This command attempts to SSH into the application server using a private key. It assumes the key is located at `~/.ssh/mykey.pem` and connects as the `ec2-user` to the server at IP address `3.112.5.67`. This is the initial step to then access the database server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_0

LANGUAGE: bash
CODE:
```
ssh -i ~/.ssh/mykey.pem ec2-user@3.112.5.67
```

----------------------------------------

TITLE: C++ Header File Example
DESCRIPTION: This is an example of a C++ header file. It contains the declaration of a class named `MyClass` along with its public members, which include a constructor and a method named `myMethod`. Include guards are used to prevent multiple inclusions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/structuring-codebase@Zw2AOTK5uc9BoKEpY7W1C.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#ifndef MY_CLASS_H
#define MY_CLASS_H

class MyClass
{
public:
    MyClass();
    int myMethod();
};
 
#endif // MY_CLASS_H
```

----------------------------------------

TITLE: Hoisting Demonstration with Variable Declaration - JavaScript
DESCRIPTION: Demonstrates hoisting in JavaScript using a variable declaration. The variable `x` is accessed before its initialization, resulting in `undefined`.  After initialization, the value of `x` is printed.  This illustrates that only the declaration is hoisted, not the initialization.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/hoisting.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
console.log(x === undefined); // true
var x = 3;
console.log(x); // 3
```

----------------------------------------

TITLE: Initializing Work Queues and Starting Download Workers - Go
DESCRIPTION: This code initializes work queues using Go channels for managing concurrent download tasks.  It creates a channel for distributing piece work and another for collecting results.  Workers are then spawned to download pieces from peers and send the downloaded data back through the results channel for assembly.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_8

LANGUAGE: go
CODE:
```
// Init queues for workers to retrieve work and send results
workQueue := make(chan *pieceWork, len(t.PieceHashes))
results := make(chan *pieceResult)
for index, hash := range t.PieceHashes {
	length := t.calculatePieceSize(index)
	workQueue <- &pieceWork{index, hash, length}
}

// Start workers
for _, peer := range t.Peers {
	go t.startDownloadWorker(peer, workQueue, results)
}

// Collect results into a buffer until full
buf := make([]byte, t.Length)
donePieces := 0
for donePieces < len(t.PieceHashes) {
	res := <-results
	begin, end := t.calculateBoundsForPiece(res.index)
	copy(buf[begin:end], res.buf)
	donePieces++
}
close(workQueue)

```

----------------------------------------

TITLE: Dual Prompt: Detailed guide writing
DESCRIPTION: This snippet shows the second prompt in a dual-prompt approach. It uses the topics generated from the first prompt to write a detailed guide. The first prompt's output is the input for this prompt. No specific dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/prompting-techniques/dual-prompt.md#_snippet_2

LANGUAGE: text
CODE:
```
Write me a detailed guide about each of the points you gave above.
```

----------------------------------------

TITLE: Delete Blog Post Request Example
DESCRIPTION: This snippet shows how to delete a blog post using the DELETE method. The request is made to the /posts/{id} endpoint, where {id} is the identifier of the blog post to be deleted. Upon successful deletion, a 204 No Content status code should be returned.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/blogging-platform-api.md#_snippet_5

LANGUAGE: plaintext
CODE:
```
DELETE /posts/1
```

----------------------------------------

TITLE: ErrorBoundary Implementation with Fallback Component - React
DESCRIPTION: This code demonstrates how to implement an error boundary using the `react-error-boundary` package. It defines an `ErrorFallback` component that is rendered when an error occurs within the `ErrorBoundary`. The `ErrorBoundary` component wraps the `FetchData` component, which is designed to throw an error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/error-boundaries.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { ErrorBoundary } from 'react-error-boundary';
import { FetchData } from './FetchData';

function ErrorFallback({ error, resetErrorBoundary }) {
  return (
    <div role="alert">
      <p>Something went wrong:</p>
      <pre>{error.message}</pre>
      <button onClick={resetErrorBoundary}>Try again</button>
    </div>
  );
}

export function App() {
  return (
    <ErrorBoundary FallbackComponent={ErrorFallback}>
      <FetchData />
    </ErrorBoundary>
  );
}
```

----------------------------------------

TITLE: Creating bzip2 compressed tar archive
DESCRIPTION: This command creates a bzip2 compressed tar archive from a directory. The `cvjf` options specify create, verbose, bzip2, and file, respectively. The first argument is the name of the archive to create, and the second argument is the directory to archive. The `j` option uses `bzip2` to compress the archive.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/working-with-files/archiving.md#_snippet_3

LANGUAGE: bash
CODE:
```
tar cvjf archive_name.tar.bz2 directory_to_archive/
```

----------------------------------------

TITLE: Get URL Statistics - Successful Response Example
DESCRIPTION: This JSON snippet demonstrates a successful response (200 OK) when retrieving statistics for a short URL.  It includes the ID, original URL, short code, timestamps, and the access count.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/url-shortening-service.md#_snippet_8

LANGUAGE: json
CODE:
```
{
  "id": "1",
  "url": "https://www.example.com/some/long/url",
  "shortCode": "abc123",
  "createdAt": "2021-09-01T12:00:00Z",
  "updatedAt": "2021-09-01T12:00:00Z",
  "accessCount": 10
}
```

----------------------------------------

TITLE: Installing g++ and build-essential on Ubuntu/Debian
DESCRIPTION: This command installs the GNU C++ compiler (g++) and build-essential package on Ubuntu, Debian, and their derivatives using the apt-get package manager. The `build-essential` package includes essential tools required for compiling software.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/installing-c@0J_ltQEJh2g28OE2ZEYJj.md#_snippet_1

LANGUAGE: shell
CODE:
```
sudo apt-get install g++ build-essential
```

----------------------------------------

TITLE: Assembly Language Example (x86)
DESCRIPTION: Shows an example of assembly language code (x86 architecture).  This code snippet demonstrates basic arithmetic operations. The assembler converts this code into machine code, which can be executed by the processor.  The example shows moving values into registers and adding them.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/compiler-stages@DVckzBUMgk_lWThVkLyAT.md#_snippet_2

LANGUAGE: assembly
CODE:
```
mov eax, 10
mov ebx, 20
add eax, ebx
```

----------------------------------------

TITLE: OOP example using C++
DESCRIPTION: This code snippet demonstrates object-oriented programming (OOP) in C++. It defines a class `MyClass` with a public method `myFunction`.  The `main` function creates an object of `MyClass` and calls its method. Dependencies: None
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/why-use-c@tl6VCQ5IEGDVyFcgj7jDm.md#_snippet_0

LANGUAGE: C++
CODE:
```
class MyClass {
    public:
        void myFunction() {
            // Code here
        }
};

int main() {
    MyClass obj;
    obj.myFunction();
}
```

----------------------------------------

TITLE: Defining JobSeeker class
DESCRIPTION: This class represents a Job Seeker. It implements the Observer interface. It has a constructor to set the name and an `onJobPosted` method to handle new job postings.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_62

LANGUAGE: PHP
CODE:
```
class JobSeeker implements Observer
{
    protected $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    public function onJobPosted(JobPost $job)
    {
        // Do something with the job posting
        echo 'Hi ' . $this->name . '! New job posted: '. $job->getTitle();
    }
}
```

----------------------------------------

TITLE: Using Namespaces in C++
DESCRIPTION: This snippet demonstrates how to define and use a namespace in C++. Namespaces help organize code and prevent naming conflicts by providing a named scope for identifiers such as functions, classes, and variables. To access members of the namespace, use the scope resolution operator (::).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/structuring-codebase@Zw2AOTK5uc9BoKEpY7W1C.md#_snippet_0

LANGUAGE: cpp
CODE:
```
namespace MyNamespace {
    int aFunction() {
        // function implementation
    }
}
// to use the function
MyNamespace::aFunction();
```

----------------------------------------

TITLE: Creating Hard and Soft Links in Linux
DESCRIPTION: This code snippet demonstrates how to create a hard link and a soft link in Linux using the `ln` command. A hard link is created using `ln source_file hard_link`, while a soft link is created using `ln -s source_file soft_link`. The `source_file` is the original file, and `hard_link` and `soft_link` are the names of the created links. If the original file for hard link is deleted, it still works, but soft link will break.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/working-with-files/soft-hard-links.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Create a hard link
ln source_file.txt hard_link.txt

# Create a soft link
ln -s source_file.txt soft_link.txt
```

----------------------------------------

TITLE: Ping Target IP or Hostname in Bash
DESCRIPTION: This command sends ICMP ECHO_REQUEST packets to the specified target (IP address or hostname) and listens for ECHO_RESPONSE returns.  It checks the connectivity status between the host machine and the target device. The user should replace `<target IP or hostname>` with the actual IP address or hostname of the target machine.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/troubleshooting/ping.md#_snippet_0

LANGUAGE: bash
CODE:
```
ping <target IP or hostname>
```

----------------------------------------

TITLE: Connect to PostgreSQL in Docker
DESCRIPTION: This command executes the psql client within the running PostgreSQL Docker container named 'pg'. It connects as the 'postgres' user, allowing you to interact with the database. Requires the PostgreSQL Docker container to be running.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/single-command-database-setup.md#_snippet_1

LANGUAGE: bash
CODE:
```
docker exec -it pg \
  psql -U postgres
```

----------------------------------------

TITLE: Vue v-for Directive Example
DESCRIPTION: This code snippet demonstrates how to use the `v-for` directive in a Vue.js template to render a list of foods. It includes a script setup with a reactive `foods` array and a template that iterates through the array, displaying each food's name. The `:key` attribute is used to provide a unique identifier for each item in the list, which is essential for Vue's reactivity system to efficiently update the DOM.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/vue/content/v-for@3ftwRjQ9e1-qDT9BV53zr.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<script setup>
  import { ref } from 'vue';
  const foods = ref([
    {id: 1, name: "apple"},
    {id: 2, name: "pear"},
    {id: 3, name: "pizza"}
  ]);
</script>

<template>
  <p v-for="food in foods" :key="food.id">{{ food.name }}</p>
</template>
```

----------------------------------------

TITLE: Expanding a File
DESCRIPTION: The `expand` command is used to convert tabs in a file to spaces. By default, each tab is replaced by 8 spaces.  The filename is passed as an argument to the command.  The converted content is printed to standard output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/expand.md#_snippet_0

LANGUAGE: bash
CODE:
```
expand filename
```

----------------------------------------

TITLE: Adding a Git Submodule
DESCRIPTION: This command adds a submodule to the repository. It creates a new folder for the submodule and checks it out at the specified revision.  The URL specifies the submodule repository.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/adding--updating@x4bnsPVTiX2xOCSyrgWpF.md#_snippet_0

LANGUAGE: git
CODE:
```
git submodule add https://github.com/user/submodule-repo.git
```

----------------------------------------

TITLE: Creating Expiring Index in MongoDB (JavaScript)
DESCRIPTION: This code snippet demonstrates how to create an expiring index on the `createdAt` field of a MongoDB collection. The `expireAfterSeconds` option sets the time-to-live (TTL) to 3600 seconds (1 hour), after which documents with dates older than 1 hour will be automatically removed. The index is created using the `createIndex()` method.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/expiring.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.createIndex({ createdAt: 1 }, { expireAfterSeconds: 3600 });
```

----------------------------------------

TITLE: Install Git on Linux with yum
DESCRIPTION: This command installs Git on Red Hat-based Linux distributions (e.g., CentOS, Fedora) using the `yum` package manager. The `sudo` command is required to execute the installation with administrative privileges. The `yum install git` command downloads and installs the latest version of Git from the configured repositories.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/installing-git-locally@v7hCNbgPByi3YiLSs46BK.md#_snippet_2

LANGUAGE: bash
CODE:
```
sudo yum install git
```

----------------------------------------

TITLE: Defer attribute example
DESCRIPTION: This HTML snippet demonstrates the use of the `defer` attribute in `<script>` tags.  Scripts with the `defer` attribute will download in parallel but execute in order after the HTML document has been completely parsed. The scripts are executed in the order they appear in the HTML.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/defer-vs-async.md#_snippet_0

LANGUAGE: html
CODE:
```
<script defer src="script1.js"></script>
<script defer src="script2.js"></script>
```

----------------------------------------

TITLE: OR Operator (||) Example JavaScript
DESCRIPTION: Demonstrates the OR operator (`||`) in JavaScript, which returns the first truthy value or the last value if none are truthy. The examples illustrate its behavior with strings and numbers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/logical-operators.md#_snippet_0

LANGUAGE: js
CODE:
```
console.log('hello' || 0); // hello
console.log(false || 'hello'); // hello
console.log('hello' || 'world'); // hello
```

----------------------------------------

TITLE: Debugging Variables with var_dump in PHP
DESCRIPTION: This code snippet demonstrates how to use the `var_dump` function in PHP to inspect the contents and data types of a variable. `var_dump` is useful for debugging, as it provides detailed information about a variable's structure and values. The example initializes an array `$myVar` and then uses `var_dump` to output its contents.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/var_dump@JCCeVC0hOrvIeyfg1ScKA.md#_snippet_0

LANGUAGE: php
CODE:
```
$myVar = array( "Hello", "World!");
var_dump($myVar);
```

----------------------------------------

TITLE: Preprocessing Example in C++
DESCRIPTION: Demonstrates the preprocessing stage in C++.  The code includes a header file using `#include` and defines a macro using `#define`. The preprocessor expands the header file and replaces the macro with its value before compilation.  This example showcases the use of `iostream` for output and defining a constant `PI`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/compiler-stages@DVckzBUMgk_lWThVkLyAT.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>
#define PI 3.14

int main() {
    std::cout << "The value of PI is: " << PI << '\n';
    return 0;
}
```

----------------------------------------

TITLE: Mounting a Filesystem in Linux
DESCRIPTION: This snippet demonstrates how to mount a filesystem to a specific directory in Linux using the `mount` command. It mounts the filesystem located on the second partition of the second hard drive (/dev/sdb1) to the `/mnt` directory.  After mounting, files on the partition are accessible through the `/mnt` directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/disks-filesystems/mounts.md#_snippet_0

LANGUAGE: sh
CODE:
```
mount /dev/sdb1 /mnt
```

----------------------------------------

TITLE: Connecting to Private Server via SSH (Bash)
DESCRIPTION: This command establishes an SSH connection to the private server, assuming that the SSH configuration includes the ProxyJump directive to route traffic through the bastion. It simplifies access to the private server by automatically using the bastion host as a gateway.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/bastion-host.md#_snippet_2

LANGUAGE: bash
CODE:
```
ssh private-server
```

----------------------------------------

TITLE: Loading Example Program into GDB
DESCRIPTION: This command starts the GDB debugger and loads the `example` executable. This allows the user to set breakpoints, step through the code, and examine variables during program execution.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/gdb@BmWsoL9c_Aag5nVlMsKm2.md#_snippet_4

LANGUAGE: sh
CODE:
```
gdb example
```

----------------------------------------

TITLE: Retrieve Original URL - Successful Response Example
DESCRIPTION: This JSON snippet shows a successful response (200 OK) when retrieving the original URL by short code.  It includes the ID, original URL, short code, and timestamps.  A 404 status should be returned if the short code is not found.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/url-shortening-service.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "id": "1",
  "url": "https://www.example.com/some/long/url",
  "shortCode": "abc123",
  "createdAt": "2021-09-01T12:00:00Z",
  "updatedAt": "2021-09-01T12:00:00Z"
}
```

----------------------------------------

TITLE: Building Project with Make
DESCRIPTION: This command builds the project using the generated build files by CMake. This assumes that Make is installed and available in the system's PATH. It compiles the source code and links it into an executable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/cmake@ysnXvSHGBMMozBJyXpHl5.md#_snippet_3

LANGUAGE: shell
CODE:
```
make
```

----------------------------------------

TITLE: MongoDB $gt Operator Example
DESCRIPTION: This code snippet shows an example of using the `$gt` operator to find students whose age is greater than 21 in a `students` collection. It demonstrates how to query the database and filter based on a numeric field.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/gt.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.students.find({ age: { $gt: 21 } });
```

----------------------------------------

TITLE: Comparison Greater Than Or Equal To Operator in C++
DESCRIPTION: Demonstrates the greater than or equal to operator (>=) in C++. This operator checks if the first operand is greater than or equal to the second. It returns true if it is, and false otherwise. The example shows comparing two integer literals and assigning the boolean result to a boolean variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_10

LANGUAGE: cpp
CODE:
```
bool isGreaterOrEqual = (5 >= 3); // isGreaterOrEqual will be true
```

----------------------------------------

TITLE: Division Operator (Floating-Point) in C++
DESCRIPTION: Divides one number by another, performing floating-point division. Both 'a' and 'b' are explicitly cast to float before the division to ensure a floating-point result. Ensure 'b' is not zero to avoid division by zero error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/arithmetic-operators@8aOSpZLWwZv_BEYiurhyR.md#_snippet_4

LANGUAGE: cpp
CODE:
```
float quotient = float(a) / float(b);
```

----------------------------------------

TITLE: Restoring MongoDB database with mongorestore
DESCRIPTION: This command restores a MongoDB database from a backup directory using mongorestore. It requires the MongoDB connection URI and the path to the backup directory. The `--drop` flag removes existing data in the target database before restoring.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/backup-recovery/mongodump.md#_snippet_1

LANGUAGE: bash
CODE:
```
mongorestore --uri "mongodb://username:password@host:port/database" --drop /path/to/backup/dir
```

----------------------------------------

TITLE: MongoDB Map-Reduce Example (JavaScript)
DESCRIPTION: This code snippet illustrates a basic MongoDB map-reduce function. The map function emits the 'cust_id' and 'amount'. The reduce function sums the amounts for each 'cust_id'. The query filters documents with 'status' as 'A', and outputs the results to a collection named 'order_totals'. Requires MongoDB and a collection with fields 'cust_id', 'amount', and 'status'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/index.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.mapReduce(
  function () {
    emit(this.cust_id, this.amount);
  },
  function (key, values) {
    return Array.sum(values);
  },
  {
    query: { status: 'A' },
    out: 'order_totals',
  }
);
```

----------------------------------------

TITLE: Cache-Control with no-cache directive
DESCRIPTION: Demonstrates using `Cache-Control: no-cache` which indicates that the cache can be maintained but the cached content is to be re-validated from the server before being served.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_4

LANGUAGE: html
CODE:
```
Cache-Control: max-age=3600, no-cache, public
```

----------------------------------------

TITLE: Converting Time Point to Calendar Time in C++
DESCRIPTION: This snippet illustrates converting a `std::chrono::system_clock::time_point` to calendar time using `std::chrono::system_clock::to_time_t`.  The resulting `std::time_t` object is then used with `std::ctime` to format the time as a human-readable string. The program requires the `<iostream>`, `<chrono>`, and `<ctime>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/date--time@yGvE6eHKlPMBB6rde0llR.md#_snippet_3

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <chrono>
#include <ctime>

int main() {
    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
    std::time_t now_c = std::chrono::system_clock::to_time_t(now);
    std::cout << "Current time: " << std::ctime(&now_c) << '\n';
    return 0;
}
```

----------------------------------------

TITLE: Implementing and Using Global Function in TypeScript
DESCRIPTION: This snippet demonstrates the implementation of the globally augmented function and its usage. It assigns a function to the `global.myGlobalFunction` and then calls the function directly from the global scope, showcasing its availability.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/global-augmentation@JQwWeB1gkANSYfQmH69Bs.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
// main.ts
global.myGlobalFunction = function () {
  console.log('I am a global function!');
};

myGlobalFunction(); // Output: "I am a global function!"
```

----------------------------------------

TITLE: Removing DOM elements with removeChild and remove methods in Javascript
DESCRIPTION: This code snippet demonstrates how to remove DOM elements from the document. It first selects the parent and child elements, then uses `removeChild` to remove the child from the parent. Finally, it uses the `remove` method to remove the parent element itself from the DOM.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/remove-element.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const roadmapWrapper = document.querySelector('.roadmap-wrapper');
const roadmapTitle = document.querySelector('#roadmap-title');

roadmapWrapper.removeChild(roadmapTitle);
roadmapWrapper.remove();
```

----------------------------------------

TITLE: Modifying PHP Configuration Parameters
DESCRIPTION: This PHP code snippet demonstrates how to modify the `memory_limit` and `max_execution_time` parameters at runtime using the `ini_set()` function.  It sets the memory limit to 256MB and the maximum execution time to 300 seconds. These settings can be adjusted to optimize the performance of PHP scripts.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/configuration-tuning@VpwwF8j5ZtXVSbzNfE7Sx.md#_snippet_0

LANGUAGE: PHP
CODE:
```
// Updating memory_limit
ini_set('memory_limit','256M');

// Updating max_execution_time
ini_set('max_execution_time', '300');
```

----------------------------------------

TITLE: Defining a PHP Namespace
DESCRIPTION: This code snippet demonstrates how to define a namespace in PHP. The `namespace` keyword is used to declare a namespace, which encapsulates the subsequent code (in this case, a function).  This allows for the function to be uniquely identified even if another function with the same name exists in a different namespace.  The namespace declaration must be at the top of the PHP file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/namespaces@9raJ06lKRZITbjWeLil-F.md#_snippet_0

LANGUAGE: php
CODE:
```
namespace MyNamespace\SubNamespace; 
function displayGreeting() {
     echo 'Hello World!'; 
}
```

----------------------------------------

TITLE: Counting Documents with Filter (countDocuments)
DESCRIPTION: This JavaScript code snippet demonstrates how to use the `countDocuments()` method in MongoDB to count documents in a collection based on a specified filter. It takes an optional filter and options, and returns an accurate count.  The example counts orders with a 'completed' status. It uses the MongoDB driver API and assumes a database connection `db` is already established.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/counting-documents.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection('orders').countDocuments(
  { status: 'completed' },
  (err, count) => {
    console.log('Number of completed orders: ', count);
  }
);
```

----------------------------------------

TITLE: Sorting vector using std::sort in C++
DESCRIPTION: This code snippet demonstrates the use of `std::sort` to sort a vector of integers in non-descending order. It includes necessary header files: `<algorithm>`, `<vector>`, and `<iostream>`. The `std::sort` function is called with the beginning and end iterators of the vector. Finally, the sorted vector is printed to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/algorithms@whyj6Z4RXFsVQYRfYYn7B.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> nums = {10, 9, 8, 7, 6, 5};
    std::sort(nums.begin(), nums.end());

    for (int num : nums) {
        std::cout << num << ' ';
    }
    // Output: 5 6 7 8 9 10
}
```

----------------------------------------

TITLE: MongoDB $nor Operator Example (JavaScript)
DESCRIPTION: This example demonstrates how to use the `$nor` operator to find documents that do not satisfy any of the given conditions. The query finds documents where `key1` is not equal to `value1` and `key2` is not equal to `value2`. It assumes a MongoDB database connection and a collection named `collection_name`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/index.md#_snippet_7

LANGUAGE: javascript
CODE:
```
db.collection_name.find({ $nor: [{ key1: value1 }, { key2: value2 }] });
```

----------------------------------------

TITLE: Using the Computer Facade in PHP
DESCRIPTION: This code demonstrates how to use the `ComputerFacade` to simplify the process of turning on and off a computer. It creates an instance of `ComputerFacade`, passing in a `Computer` object. It then calls the `turnOn()` and `turnOff()` methods on the facade, which in turn calls the appropriate methods on the `Computer` object. This demonstrates how the Facade pattern provides a simple interface to a complex subsystem.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_36

LANGUAGE: PHP
CODE:
```
$computer = new ComputerFacade(new Computer());
$computer->turnOn(); // Ouch! Beep beep! Loading.. Ready to be used!
$computer->turnOff(); // Bup bup buzzz! Haah! Zzzzz
```

----------------------------------------

TITLE: SFINAE Example with std::enable_if_t in C++
DESCRIPTION: This C++ code demonstrates SFINAE (Substitution Failure Is Not An Error) by specializing a function template based on whether the type `T` is arithmetic or not. It uses `std::enable_if_t` and `std::is_arithmetic` to conditionally enable different specializations of the `foo_impl` struct. The `foo` function calls the appropriate specialization based on the type of the input.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/sfinae@3C5UfejDX-1Z8ZF6C53xD.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <type_traits>

template <typename T, typename = void>
struct foo_impl {
    void operator()(T t) {
        std::cout << "Called when T is not arithmetic\n";
    }
};

template <typename T>
struct foo_impl<T, std::enable_if_t<std::is_arithmetic<T>::value>> {
    void operator()(T t) {
        std::cout << "Called when T is arithmetic\n";
    }
};

template <typename T>
void foo(T t) {
    foo_impl<T>()(t);
}

int main() {
    int a = 5;
    foo(a); // output: Called when T is arithmetic

    std::string s = "example";
    foo(s); // output: Called when T is not arithmetic
}
```

----------------------------------------

TITLE: Using void* Pointers for Dynamic Typing in C++
DESCRIPTION: This code snippet demonstrates the use of `void*` pointers to achieve dynamic typing in C++. A `void*` pointer is a generic pointer that can point to objects of any data type. The example shows how to assign the address of variables of different types (int, float, string) to a `void*` pointer and then cast it back to the original type before dereferencing it to access the value. It requires the `<iostream>` header.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/dynamic-typing@i0EAFEUB-F0wBJWOtrl1A.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

int main() {
    int x = 42;
    float y = 3.14f;
    std::string z = "Hello, world!";

    void* void_ptr;

    void_ptr = &x;
    std::cout << "int value: " << *(static_cast<int*>(void_ptr)) << '\n';

    void_ptr = &y;
    std::cout << "float value: " << *(static_cast<float*>(void_ptr)) << '\n';

    void_ptr = &z;
    std::cout << "string value: " << *(static_cast<std::string*>(void_ptr)) << '\n';

    return 0;
}
```

----------------------------------------

TITLE: Using Bridge Pattern with WebPage and Theme
DESCRIPTION: This snippet shows how to use the Bridge pattern to create web pages with different themes. It creates a `DarkTheme` instance and uses it to create `About` and `Careers` pages.  The output demonstrates that both pages are rendered with the dark theme.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_27

LANGUAGE: php
CODE:
```
$darkTheme = new DarkTheme();

$about = new About($darkTheme);
$careers = new Careers($darkTheme);

echo $about->getContent(); // "About page in Dark Black";
echo $careers->getContent(); // "Careers page in Dark Black";
```

----------------------------------------

TITLE: Checking g++ Compiler Version
DESCRIPTION: This command checks the version of the g++ compiler installed on the system. It prints the version number and other relevant information to the console, verifying that the compiler is installed correctly and accessible.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/installing-c@0J_ltQEJh2g28OE2ZEYJj.md#_snippet_4

LANGUAGE: shell
CODE:
```
g++ --version
```

----------------------------------------

TITLE: Heap and Stack Storage Example JavaScript
DESCRIPTION: This code demonstrates how primitive values are stored on the stack, while objects are stored on the heap, with the stack holding a reference to the object in the heap. The `name` variable stores a primitive string value directly on the stack. The `roadmap` variable stores a reference on the stack that points to the actual object in the heap.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/heap-and-stack.md#_snippet_0

LANGUAGE: js
CODE:
```
const name = 'JavaScript'; // Stored on the stack
const roadmap = { name: 'JS' }; // `roadmap` reference on the stack, actual object { name: 'JS' } in the heap
```

----------------------------------------

TITLE: Using Promise.allSettled() in JavaScript
DESCRIPTION: Demonstrates the use of Promise.allSettled() with a resolving and a rejecting promise. Promise.allSettled() waits for all promises to either resolve or reject. The .then() block iterates through the results array, logging whether each promise was fulfilled or rejected, along with its value or reason.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/promise-all-vs-all-settled.md#_snippet_2

LANGUAGE: javascript
CODE:
```
Promise.allSettled([promise1, promise2]).then((results) => {
  results.forEach((result, index) => {
    if (result.status === 'fulfilled') {
      console.log(
        `Promise ${index + 1} was fulfilled with value:`, result.value
      );
    } else {
      console.log(
        `Promise ${index + 1} was rejected with reason:`, result.reason
      );
    }
  });
});

// Output:
// Promise 1 was fulfilled with value: Promise 1 resolved
// Promise 2 was rejected with reason: Promise 2 rejected
```

----------------------------------------

TITLE: Executing Node.js script with arguments
DESCRIPTION: Demonstrates how to execute a Node.js script from the command line with additional arguments. The arguments 'hello' and 'world' are passed to the `index.js` script.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/process-argv.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
node index.js hello world
```

----------------------------------------

TITLE: Get Blog Post Response Example
DESCRIPTION: This JSON snippet shows the expected response when retrieving a single blog post. It includes the blog post's attributes, such as 'id', 'title', 'content', 'category', 'tags', 'createdAt', and 'updatedAt'. This data is returned with a 200 OK status code.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/blogging-platform-api.md#_snippet_7

LANGUAGE: json
CODE:
```
{
  "id": 1,
  "title": "My First Blog Post",
  "content": "This is the content of my first blog post.",
  "category": "Technology",
  "tags": ["Tech", "Programming"],
  "createdAt": "2021-09-01T12:00:00Z",
  "updatedAt": "2021-09-01T12:00:00Z"
}
```

----------------------------------------

TITLE: Accessing Array Elements in Rust
DESCRIPTION: This snippet shows how to access array elements in Rust using their indices, starting from 0.  In the given example, it accesses the first element (at index 0) of the 'numbers' array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/data-structures/array.md#_snippet_2

LANGUAGE: Rust
CODE:
```
numbers[0]
```

----------------------------------------

TITLE: Flyweight Pattern TeaShop Example
DESCRIPTION: This PHP code demonstrates the usage of the Flyweight pattern within a `TeaShop` class. The `TeaShop` manages tea orders, utilizing a `TeaMaker` to create or retrieve tea objects. The `takeOrder` method adds orders to the shop, and the `serve` method iterates through the orders and serves the corresponding tea to each table. The TeaShop depends on TeaMaker.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_38

LANGUAGE: php
CODE:
```
class TeaShop
{
    protected $orders;
    protected $teaMaker;

    public function __construct(TeaMaker $teaMaker)
    {
        $this->teaMaker = $teaMaker;
    }

    public function takeOrder(string $teaType, int $table)
    {
        $this->orders[$table] = $this->teaMaker->make($teaType);
    }

    public function serve()
    {
        foreach ($this->orders as $table => $tea) {
            echo "Serving tea to table# " . $table;
        }
    }
}

```

----------------------------------------

TITLE: MongoDB $group Aggregate Result Example
DESCRIPTION: This JavaScript code snippet shows the expected result of the $group aggregation example.  It is an array of documents, each representing a customer and their total spent amount.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/group.md#_snippet_3

LANGUAGE: javascript
CODE:
```
[  { _id: 'C1', total_spent: 200 },  { _id: 'C2', total_spent: 200 },  { _id: 'C3', total_spent: 200 },];
```

----------------------------------------

TITLE: Querying documents with $type operator in MongoDB using alias
DESCRIPTION: This code snippet demonstrates how to use the `$type` operator to find documents in the `products` collection where the `price` field has the data type 'double'. It uses the string alias 'double' for the data type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/type.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.products.find({ price: { $type: 'double' } });
```

----------------------------------------

TITLE: MongoDB $ne Operator Example Query
DESCRIPTION: This example demonstrates how to query a MongoDB collection (`products`) to find documents where the `category` field is not equal to 'Fruits'. The code assumes the existence of a MongoDB collection named 'products' and a connection to a MongoDB database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/ne.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.products.find({ category: { $ne: 'Fruits' } });
```

----------------------------------------

TITLE: Creating Text Index in MongoDB
DESCRIPTION: This code snippet creates a text index on the 'title' field of the 'books' collection. The `db.collection.createIndex()` method is used with the `{ fieldName: "text" }` syntax. This enables text searches on the specified field.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/text.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.books.createIndex({ title: 'text' });
```

----------------------------------------

TITLE: Accessing DOM Node with useRef in Parent Component in React
DESCRIPTION: This code shows how a parent component can access the DOM node of a child component using `useRef`. It creates a ref using `useRef(null)`, passes it to the `MyInput` component, and then accesses the DOM node via `ref.current` within the `handleClick` function to call `focus()` on the input element.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/ref-forwarding.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function Form() {
  const ref = useRef(null);

  function handleClick() {
    ref.current.focus();
  }

  return (
    <form>
      <MyInput label="Enter your name:" ref={ref} />
      <button type="button" onClick={handleClick}>
        Edit
      </button>
    </form>
  );
}
```

----------------------------------------

TITLE: MongoDB $nor Operator Syntax (JavaScript)
DESCRIPTION: The `$nor` operator returns documents where none of the specified conditions are true. This snippet shows the basic syntax for using the `$nor` operator in a MongoDB query. It requires a MongoDB database connection and a collection to query.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/index.md#_snippet_6

LANGUAGE: javascript
CODE:
```
{ $nor: [ { condition1 }, { condition2 }, ... ] }
```

----------------------------------------

TITLE: Defining a Template Class in C++
DESCRIPTION: This code defines a template class `Pair` that can store two values of potentially different types `T1` and `T2`. The class has two public members `first` and `second` and a constructor that initializes these members. The `template <typename T1, typename T2>` declaration introduces the two type parameters, specifying the types for the stored values. No external dependencies are needed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/templates@-6AOrbuOE7DJCmxlcgCay.md#_snippet_3

LANGUAGE: cpp
CODE:
```
template <typename T1, typename T2>
class Pair {
public:
    T1 first;
    T2 second;

    Pair(T1 first, T2 second) : first(first), second(second) {}
};
```

----------------------------------------

TITLE: Updating package repositories - bash
DESCRIPTION: These commands update the package repositories on Ubuntu, CentOS, and Fedora based systems.  `sudo apt update` refreshes the package lists for upgrades and new packages on Debian/Ubuntu. `sudo yum update` performs a similar function on CentOS/Fedora based systems. Requires root privileges to execute.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/package-management/repositories.md#_snippet_0

LANGUAGE: bash
CODE:
```
sudo apt update      # command to update the repository in Ubuntu
sudo yum update      # command to update the repository in CentOS or Fedora
```

----------------------------------------

TITLE: Full Template Specialization for int C++
DESCRIPTION: This snippet demonstrates full template specialization for the `int` type in the `MyContainer` class. The specialized `print` method outputs "Container for integers.", overriding the generic behavior.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/full-template-specialization@6hTcmJwNnQstbWWzNCfTe.md#_snippet_1

LANGUAGE: cpp
CODE:
```
// Full template specialization for int
template <>
class MyContainer<int> {
public:
    void print() {
        std::cout << "Container for integers.\n";
    }
};
```

----------------------------------------

TITLE: Separate Compilation Example
DESCRIPTION: This code snippet demonstrates separate compilation and linking in C++. Each source file (`main.cpp`, `example.cpp`) is compiled independently into an object file (`main.o`, `example.o`) using `g++ -c`. The object files are then linked together using `g++` to create the final executable `my_program`. This process provides faster build times when making changes to single source files.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/headers--cpp-files@CK7yf8Bo7kfbV6x2tZTrh.md#_snippet_2

LANGUAGE: sh
CODE:
```
# Compile each source file into an object file
g++ -c main.cpp -o main.o
g++ -c example.cpp -o example.o

# Link object files together to create the executable
g++ main.o example.o -o my_program
```

----------------------------------------

TITLE: Run PostgreSQL in Docker
DESCRIPTION: This command starts a PostgreSQL instance in a Docker container. It maps port 5432 on the host to port 5432 in the container, sets the POSTGRES_PASSWORD environment variable to 'admin', names the container 'pg', and runs it in detached mode. Requires Docker to be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/single-command-database-setup.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run \
  --name pg \
  --detach \
  --publish 5432:5432 \
  --env POSTGRES_PASSWORD=admin \
  postgres
```

----------------------------------------

TITLE: Sorting and saving the sorted file
DESCRIPTION: This command sorts the lines of the specified text file alphabetically and redirects the sorted output to a new file. The original file remains unchanged. It uses redirection (`>`) to save the sorted output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/sort.md#_snippet_1

LANGUAGE: bash
CODE:
```
sort filename.txt > sorted_filename.txt
```

----------------------------------------

TITLE: Appending Data to File (PHP)
DESCRIPTION: This code snippet demonstrates how to append new data to an existing file using PHP. It first reads the current content of the file using `file_get_contents()`, appends new data to the content, and then writes the combined content back to the file using `file_put_contents()`. The `$file` variable specifies the path to the file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/writing-files@two4UycJaCfSp6jQqtTAb.md#_snippet_0

LANGUAGE: php
CODE:
```
$file = 'data.txt';
$current = file_get_contents($file);
$current .= "New Data\n";
file_put_contents($file, $current);
```

----------------------------------------

TITLE: Deleting Git Tags
DESCRIPTION: This snippet demonstrates how to delete an existing tag in the Git repository. The `git tag -d` command is used followed by the tag name to remove the tag.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/managing-tags@NeU38WPbEphJuJ_AMkH82.md#_snippet_2

LANGUAGE: Shell
CODE:
```
git tag -d [tag-name]
```

----------------------------------------

TITLE: Querying MySQL with PDO in PHP
DESCRIPTION: This code snippet demonstrates how to connect to a MySQL database using PDO, execute a query, and fetch data from the result set. It includes error handling to catch PDOExceptions, which can occur during connection or query execution. It requires the PDO extension to be enabled in PHP.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/pdo@cJtPz1RMN1qDE4eRdv4N_.md#_snippet_0

LANGUAGE: php
CODE:
```
try {
    $pdo = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');
    $stmt = $pdo->query('SELECT * FROM myTable');
    while ($row = $stmt->fetch()) {
        echo $row['name'] . "\n";
    }
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}
```

----------------------------------------

TITLE: Using Rest Parameter to Capture Arguments in JavaScript
DESCRIPTION: This code demonstrates how to use the rest parameter (`...`) in JavaScript to capture a variable number of arguments as an array. The `displayArgs` function uses the rest parameter to collect all arguments into the `args` array. It then iterates through the `args` array using `forEach` and logs each argument to the console. The function is called with four arguments, showcasing how they are collected into the array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/variable-number-of-arguments.md#_snippet_1

LANGUAGE: js
CODE:
```
function displayArgs(...args) {
  args.forEach((arg) => console.log(arg));
}
displayArgs(1, 2, 3, 4); // Outputs: 1, 2, 3, 4
```

----------------------------------------

TITLE: HTTP/1.0 Response Example
DESCRIPTION: A sample HTTP/1.0 response including the HTTP version, status code, content type, content length, expiration date, last modified date, and server information. This showcases the extended capabilities compared to HTTP/0.9.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/journey-to-http2.md#_snippet_3

LANGUAGE: html
CODE:
```
HTTP/1.0 200 OK Content-Type: text/plain Content-Length: 137582 Expires: Thu, 05
Dec 1997 16:00:00 GMT Last-Modified: Wed, 5 August 1996 15:55:28 GMT Server:
Apache 0.84 (response body) (connection closed)
```

----------------------------------------

TITLE: SSH Configuration for Bastion Host and Private Server (Bash)
DESCRIPTION: This code snippet configures SSH to allow jumping through the bastion host to access the private server. It defines host configurations for both the bastion and private server, specifying usernames, IP addresses, identity files, and the ProxyJump directive to route traffic through the bastion.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/bastion-host.md#_snippet_0

LANGUAGE: bash
CODE:
```
Host bastion
    HostName <bastion-ip>
    User <bastion-user>
    IdentityFile <path-to-bastion-private-key>

Host private-server
    HostName <private-server-ip>
    User <private-server-user>
    ProxyJump bastion
    IdentityFile <path-to-private-server-private-key>
```

----------------------------------------

TITLE: Declaring and Using Pointers in C++
DESCRIPTION: This code snippet demonstrates how to declare a pointer and assign it the memory address of an integer variable. Pointers store memory addresses of variables. The `&` operator retrieves the address of a variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/data-types@MwznA4qfpNlv6sqSNjPZi.md#_snippet_6

LANGUAGE: cpp
CODE:
```
int num = 42;
int* pNum = &num;
```

----------------------------------------

TITLE: MongoDB $project Stage Syntax (JavaScript)
DESCRIPTION: This code snippet illustrates the basic syntax of the `$project` stage within a MongoDB aggregation pipeline. The `field: <1 or 0>` pairs specify whether to include (1) or exclude (0) a given field from the output document.  The snippet provides a template for defining the projection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/project.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.aggregate([
  {
    $project:
      {
        field1: <1 or 0>,
        field2: <1 or 0>,
        ...
      }
  }
])
```

----------------------------------------

TITLE: Installing Angular CLI globally using npm
DESCRIPTION: This command installs the Angular CLI globally using npm, allowing you to use the `ng` command from any terminal location. The `-g` flag specifies a global installation. Requires npm to be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/angular/content/angular-cli@4YSk6I63Ew--zoXC3xmrC.md#_snippet_0

LANGUAGE: npm
CODE:
```
npm install -g @angular/cli
```

----------------------------------------

TITLE: Installing JWT Package
DESCRIPTION: This bash command uses `go get` to install the `github.com/golang-jwt/jwt/v5` package, which is used for working with JSON Web Tokens (JWT) in Go applications. This command retrieves and installs the specified package and its dependencies into the Go module.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_25

LANGUAGE: bash
CODE:
```
go get -u github.com/golang-jwt/jwt/v5
```

----------------------------------------

TITLE: Wrapping Component with forwardRef in React
DESCRIPTION: This code snippet shows how to wrap a functional component with `forwardRef` in React. It imports `forwardRef` from 'react' and passes a function to it. The function receives `props` and `ref` as arguments and returns a React element.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/ref-forwarding.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { forwardRef } from 'react';

const MyInput = forwardRef(function MyInput(props, ref) {
  const { label, ...otherProps } = props;
  return (
    <label>
      {label}
      <input {...otherProps} />
    </label>
  );
});
```

----------------------------------------

TITLE: Compiling TypeScript to JavaScript
DESCRIPTION: This command uses the TypeScript compiler (tsc) to transpile a TypeScript file (app.ts) into JavaScript. The output will be a JavaScript file with the same name (app.js) in the same directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/running-typescript@qdy4ZIY2EKgmPNdu_ndcg.md#_snippet_0

LANGUAGE: bash
CODE:
```
tsc app.ts
```

----------------------------------------

TITLE: Dropping Text Index in MongoDB
DESCRIPTION: This code snippet drops a text index named 'title_text' from the 'books' collection. The `db.collection.dropIndex()` method is used, with the index name provided as a parameter.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/text.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.books.dropIndex('title_text');
```

----------------------------------------

TITLE: Dynamic Cast in C++
DESCRIPTION: Illustrates `dynamic_cast` for safe downcasting in a class hierarchy.  It converts a pointer of a base class to a pointer of a derived class. This cast performs a runtime check to ensure the validity of the conversion; it returns `nullptr` if the cast is invalid.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/type-casting@PiMhw1oP9-NZEa6I9u4lX.md#_snippet_2

LANGUAGE: cpp
CODE:
```
class Base {};
class Derived : public Base {};

Base* base_ptr = new Derived();
Derived* derived_ptr = dynamic_cast<Derived*>(base_ptr);  // dynamic_cast from Base* to Derived*
```

----------------------------------------

TITLE: MongoDB $nin Syntax - JavaScript
DESCRIPTION: Demonstrates the general syntax for using the `$nin` operator in a MongoDB query. The `<field>` is the field to check and the array contains the values to exclude.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/nin.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
{ field: { $nin: [<value1>, <value2>, ..., <valueN>] } }
```

----------------------------------------

TITLE: Const Cast in C++
DESCRIPTION: Illustrates `const_cast`, which is used to remove the `const` qualifier from a variable.  It allows modification of a `const` object through a non-`const` pointer or reference. This is generally discouraged and should be used with extreme caution, as modifying truly `const` objects can lead to undefined behavior.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/type-casting@PiMhw1oP9-NZEa6I9u4lX.md#_snippet_4

LANGUAGE: cpp
CODE:
```
const int a = 10;
int* ptr = const_cast<int*>(&a);  // const_cast from const int* to int*
*ptr = 20;  // Not recommended, use with caution
```

----------------------------------------

TITLE: Example GraphQL Query
DESCRIPTION: This is a basic GraphQL query example that fetches a user's name and their posts' titles based on the user's ID.  It demonstrates how GraphQL allows clients to specify exactly what data they need in a single request.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/graphql-vs-rest.md#_snippet_0

LANGUAGE: graphql
CODE:
```
query {
  user(id: 1) {
    name
    posts {
      title
    }
  }
}
```

----------------------------------------

TITLE: Data Segment Examples in C++
DESCRIPTION: This code snippet shows examples of variables stored in the initialized and uninitialized data segments. Global, static, and constant variables with initial values are stored in the initialized data segment, while uninitialized global and static variables are stored in the uninitialized data segment.  These variables have static storage duration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/memory-model@mSFwsTYvmg-GwG4_DEIEf.md#_snippet_2

LANGUAGE: cpp
CODE:
```
// Initialized data segment
int globalVar = 10; // global variables
static int staticVar = 10; // static local variables
const int constVar = 10; // constant variables with value

// Uninitialized data segment
int globalVar; // uninitialized global variables
```

----------------------------------------

TITLE: Expanding a File with Custom Tab Size
DESCRIPTION: The `expand` command is used to convert tabs in a file to a specified number of spaces.  The `-t` option specifies the number of spaces to use for each tab. The filename is passed as an argument to the command.  The converted content is printed to standard output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/expand.md#_snippet_1

LANGUAGE: bash
CODE:
```
expand -t 4 filename
```

----------------------------------------

TITLE: Generated Email Response
DESCRIPTION: This code snippet showcases an example email response generated by an LLM based on the provided prompt. It serves as a model for automated customer inquiry confirmation, including placeholders for customer name and order number.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/writing-emails.md#_snippet_1

LANGUAGE: text
CODE:
```
Subject: Confirmation - Inquiry Received - Order #123456

Dear [Customer's Name],

I'm writing to confirm that we have received your inquiry regarding your recent order. We appreciate you taking the time to reach out to us.

Your order number is #123456, and we understand the importance of your inquiry. Rest assured, our team is already reviewing your case and will address it promptly. We strive to provide a timely response and a satisfactory resolution to all customer inquiries.

If we require any additional information or clarification, we will reach out to you directly. In the meantime, please feel free to contact us if you have any further questions or concerns about your order.

We value your business and are committed to ensuring your complete satisfaction. Thank you for choosing our company, and we appreciate your patience as we work on addressing your inquiry.

Best regards,
AI Customer Service
```

----------------------------------------

TITLE: MongoDB Query Result Example
DESCRIPTION: Shows the expected result after running the example query using the `$in` operator. The query returns documents from the `articles` collection that have either "NoSQL" or "javascript" in their `tags` array. This highlights the filtering capability of the `$in` operator in MongoDB.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/in.md#_snippet_3

LANGUAGE: javascript
CODE:
```
[
  { _id: 1, title: 'MongoDB', tags: ['database', 'NoSQL'] },
  { _id: 2, title: 'Node.js', tags: ['javascript', 'runtime'] },
  { _id: 3, title: 'React', tags: ['library', 'javascript'] },
];
```

----------------------------------------

TITLE: Netdata Installation Script (setup.sh)
DESCRIPTION: This script automates the installation of Netdata on a Linux system. It is designed to streamline the initial setup process and reduce manual configuration. The script can be enhanced to include specific configuration steps tailored to the user's monitoring needs.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/simple-monitoring-dashboard.md#_snippet_0

LANGUAGE: Shell
CODE:
```
#!/bin/bash
# This script installs Netdata on a Linux system.

# Add your Netdata installation commands here.
# Example:  bash <(curl -Ss https://my-netdata.io/kickstart.sh)

echo "Netdata installation script placeholder. Add the actual installation commands here."

```

----------------------------------------

TITLE: SSH into Application Server (Again)
DESCRIPTION: This command attempts to SSH into the application server using a private key.  It assumes the key is located at `~/.ssh/mykey.pem` and connects as the `ec2-user` to the server at IP address `3.112.5.67`.  This is repeated for clarity.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_2

LANGUAGE: bash
CODE:
```
ssh -i ~/.ssh/mykey.pem ec2-user@3.112.5.67
```

----------------------------------------

TITLE: BitTorrent Message Deserialization in Go
DESCRIPTION: This Go code defines a `Read` function that deserializes a BitTorrent message from an `io.Reader`. It reads the length prefix, the message ID, and the payload. It returns a `Message` struct containing the ID and payload or nil if it's a keep-alive message.  It handles potential errors during reading from the stream.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_6

LANGUAGE: go
CODE:
```
// Read parses a message from a stream. Returns `nil` on keep-alive message
func Read(r io.Reader) (*Message, error) {
	lengthBuf := make([]byte, 4)
	_, err := io.ReadFull(r, lengthBuf)
	if err != nil {
		return nil, err
	}
	length := binary.BigEndian.Uint32(lengthBuf)

	// keep-alive message
	if length == 0 {
		return nil, nil
	}

	messageBuf := make([]byte, length)
	_, err = io.ReadFull(r, messageBuf)
	if err != nil {
		return nil, err
	}

	m := Message{
		ID:      messageID(messageBuf[0]),
		Payload: messageBuf[1:],
	}

	return &m, nil
}
```

----------------------------------------

TITLE: Modify Element Content - JavaScript
DESCRIPTION: This snippet showcases how to modify the content of an HTML element using `element.innerHTML`. By assigning a new string to `element.innerHTML`, the existing content is replaced with the new content.  This is often used to dynamically update text and HTML within the DOM.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/js-dom-manipulation.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
element.innerHTML = "New Content"
```

----------------------------------------

TITLE: Handling Promise Rejection with then's 2nd Arg - JavaScript
DESCRIPTION: This example demonstrates handling a rejected Promise by providing two callback functions to the `then` method. The first callback is for the resolved state, and the second is for the rejected state.  The error callback function receives the error object as an argument, and the error message is logged.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/error-in-promise.md#_snippet_2

LANGUAGE: javascript
CODE:
```
promise.then(
  (result) => {
    console.log(result);
  },
  (error) => {
    console.log(error.message);
  }
);
```

----------------------------------------

TITLE: Installing gcc and make on Arch Linux
DESCRIPTION: This command installs the GNU C compiler (gcc) and the `make` utility on Arch Linux and its derivatives using the pacman package manager. The `-S` flag instructs pacman to synchronize package databases and install the specified packages.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/installing-c@0J_ltQEJh2g28OE2ZEYJj.md#_snippet_3

LANGUAGE: shell
CODE:
```
sudo pacman -S gcc make
```

----------------------------------------

TITLE: Installing DHCP server
DESCRIPTION: This command installs the ISC DHCP server package on a Debian-based Linux distribution. It uses the `apt-get` package manager with superuser privileges (`sudo`).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/networking/dhcp.md#_snippet_0

LANGUAGE: bash
CODE:
```
sudo apt-get install isc-dhcp-server
```

----------------------------------------

TITLE: Querying Documents in MongoDB
DESCRIPTION: This snippet demonstrates how to query documents in a MongoDB collection using the `find()` method. A query object is passed as an argument to filter the results. Requires a connection to a MongoDB database and an existing collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/index.md#_snippet_4

LANGUAGE: javascript
CODE:
```
db.users.find({ age: { $gt: 30 } });
```

----------------------------------------

TITLE: Executing PHP_CodeSniffer
DESCRIPTION: This command-line example demonstrates how to run PHP_CodeSniffer on a specific PHP file to detect coding standard violations.  It requires PHP_CodeSniffer to be installed and accessible in the system's PATH. The `/path/to/code/myfile.php` argument specifies the file to be analyzed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/style-tools@6eWgZVLV479oQzl0fu-Od.md#_snippet_0

LANGUAGE: PHP
CODE:
```
phpcs /path/to/code/myfile.php
```

----------------------------------------

TITLE: Static Cast Pointers in Inheritance
DESCRIPTION: This example demonstrates how to use `static_cast` to convert a base class pointer to a derived class pointer in C++. The `Base` class pointer `bPtr` is converted to a `Derived` class pointer `dPtr`.  Requires `Base` and `Derived` classes with `Derived` inheriting from `Base`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/static_cast@_XB2Imyf23-6AOeoNLhYQ.md#_snippet_2

LANGUAGE: cpp
CODE:
```
class Base { /* ... */ };
class Derived : public Base { /* ... */ };

Base *bPtr = new Derived;
Derived *dPtr = static_cast<Derived *>(bPtr); // Converts Base pointer bPtr to Derived pointer dPtr
```

----------------------------------------

TITLE: Bitfield Implementation in Go
DESCRIPTION: This Go code implements a `Bitfield` type (a byte slice) to represent the pieces a peer has. It includes `HasPiece` function to check if a peer has a particular piece, and a `SetPiece` function to set a piece in the bitfield.  It uses bitwise operations to efficiently store and retrieve piece information.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_7

LANGUAGE: go
CODE:
```
// A Bitfield represents the pieces that a peer has
type Bitfield []byte

// HasPiece tells if a bitfield has a particular index set
func (bf Bitfield) HasPiece(index int) bool {
	byteIndex := index / 8
	offset := index % 8
	return bf[byteIndex]>>(7-offset)&1 != 0
}

// SetPiece sets a bit in the bitfield
func (bf Bitfield) SetPiece(index int) {
	byteIndex := index / 8
	offset := index % 8
	bf[byteIndex] |= 1 << (7 - offset)
}
```

----------------------------------------

TITLE: Namespace Scope Example in C++
DESCRIPTION: This code shows how to use namespaces to organize code in C++.  The `namespaceVar` is declared within `MyNamespace`, and can be accessed from outside the namespace using the scope resolution operator `::`.  This helps avoid naming conflicts and organize code into logical groups.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/scope@dKCYmxDNZubCVcR5rf8b-.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include <iostream>

namespace MyNamespace {
    int namespaceVar = 42;
}

int main() {
    std::cout << "Namespace variable: " << MyNamespace::namespaceVar << '\n';
}
```

----------------------------------------

TITLE: Using Pick to Create a Subset Type in TypeScript
DESCRIPTION: This snippet demonstrates how to use the `Pick` utility type in TypeScript. It defines an interface `Todo` with properties `title`, `description`, and `completed`. Then, it uses `Pick` to create a new type `TodoPreview` that only includes the `title` and `completed` properties from the `Todo` interface. Finally, it shows an example of creating an object of type `TodoPreview`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/pick@E88tHQvARkHURZwGaO02l.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface Todo {
  title: string;
  description: string;
  completed: boolean;
}

type TodoPreview = Pick<Todo, 'title' | 'completed'>;

const todo: TodoPreview = {
  title: 'Clean room',
  completed: false,
};
```

----------------------------------------

TITLE: Reinterpret Cast in C++
DESCRIPTION: Demonstrates `reinterpret_cast`, which changes the type of a pointer or an integer value.  This cast performs no type checking and simply reinterprets the bits of the underlying data. Use with caution, as it can lead to undefined behavior if misused.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/type-casting@PiMhw1oP9-NZEa6I9u4lX.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int* a = new int(42);
long b = reinterpret_cast<long>(a);  // reinterpret_cast from int* to long
```

----------------------------------------

TITLE: Instantiating a Template Class in C++
DESCRIPTION: This code demonstrates how to create an object of the template class `Pair`, specifying the type parameters as `int` and `std::string`. This creates a `Pair` object that can store an integer and a string.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/templates@-6AOrbuOE7DJCmxlcgCay.md#_snippet_4

LANGUAGE: cpp
CODE:
```
Pair<int, std::string> pair(1, "Hello");
```

----------------------------------------

TITLE: insertOne() Syntax in MongoDB
DESCRIPTION: This code snippet shows the syntax for using `insertOne()` in MongoDB to insert a single document into a collection. It includes the document to be inserted and optional parameters such as writeConcern, ordered, bypassDocumentValidation, and comment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/insert-methods.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.insertOne(
   <document>,
   {
      writeConcern: <document>,
      ordered: <boolean>,
      bypassDocumentValidation: <boolean>,
      comment: <any>
   }
)
```

----------------------------------------

TITLE: Proxy Pattern Door Interface and Implementation
DESCRIPTION: This PHP code defines a `Door` interface and a concrete implementation `LabDoor`. The interface specifies the `open` and `close` methods, while the `LabDoor` class provides a simple implementation that echoes messages when these methods are called. This represents the real object that the proxy will control access to.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_40

LANGUAGE: php
CODE:
```
interface Door
{
    public function open();
    public function close();
}

class LabDoor implements Door
{
    public function open()
    {
        echo "Opening lab door";
    }

    public function close()
    {
        echo "Closing the lab door";
    }
}

```

----------------------------------------

TITLE: Linking Example (Bash)
DESCRIPTION: Demonstrates the linking stage using the g++ compiler in a bash environment.  This command links the object file `main.o` to create an executable named `main`, using the math library (`-lm`). The linker resolves external references and generates the final executable file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/compiler-stages@DVckzBUMgk_lWThVkLyAT.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ g++ main.o -o main -lm
```

----------------------------------------

TITLE: Display Filesystem Information in Linux
DESCRIPTION: This command displays filesystem information in Linux.  It shows the type of filesystem for each mounted device, along with its disk usage statistics, including total size, used space, available space, and mount point. It is commonly used to check disk space and understand filesystem types.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/disks-filesystems/filesystems.md#_snippet_0

LANGUAGE: bash
CODE:
```
df -T
```

----------------------------------------

TITLE: Calculating Serial Availability
DESCRIPTION: Calculates the total availability when two components (Foo and Bar) are arranged in sequence. The overall availability is the product of the individual availabilities.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/system-design/content/availability-in-numbers@uHdrZllrZFAnVkwIB3y5-.md#_snippet_0

LANGUAGE: N/A
CODE:
```
Availability (Total) = Availability (Foo) * Availability (Bar)
```

----------------------------------------

TITLE: Display first 5 lines of a file using head command in Bash
DESCRIPTION: This command displays the first 5 lines of the file 'file.txt'. It uses the `head` command with the `-n` option, followed by the number of lines to display.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/head.md#_snippet_1

LANGUAGE: bash
CODE:
```
head -n 5 file.txt
```

----------------------------------------

TITLE: Resource Management with Copying (Rule of Three) - C++
DESCRIPTION: Demonstrates the Rule of Three, requiring the definition of a destructor, copy constructor, and copy assignment operator when a class manages resources. This example manages an array of integers, necessitating manual memory allocation, deep copying during copy operations, and deallocation in the destructor to prevent memory leaks.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/rule-of-zero-five-three@7sdEzZCIoarzznwO4XcCv.md#_snippet_1

LANGUAGE: cpp
CODE:
```
class MyResource {
public:
    // Constructor and destructor
    MyResource() : data(new int[100]) {}
    ~MyResource() { delete[] data; }

    // Copy constructor
    MyResource(const MyResource& other) : data(new int[100]) {
        std::copy(other.data, other.data + 100, data);
    }

    // Copy assignment operator
    MyResource& operator=(const MyResource& other) {
        if (&other == this) { return *this; }
        std::copy(other.data, other.data + 100, data);
        return *this;
    }

private:
    int* data;
};
```

----------------------------------------

TITLE: Defining Named Slots with v-slot in Vue.js
DESCRIPTION: This code snippet demonstrates how to define named slots within a custom Vue.js component using the `v-slot` directive. It shows how to pass different HTML content to the `header` and `footer` slots. The parent component provides the content to be rendered inside the `<custom-component>`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/vue/content/v-slot@m9pQ3daR3KiwRATcQysHA.md#_snippet_0

LANGUAGE: html
CODE:
```
<template>
  <custom-component>
    <template v-slot:header>
      <h1>Header Content</h1>
    </template>
    <template v-slot:footer>
      <p>Footer Content</p>
    </template>
  </custom-component>
</template>
```

----------------------------------------

TITLE: Nesting Namespaces - C++
DESCRIPTION: This snippet illustrates how to nest namespaces within each other. It declares an outer namespace `outer` containing an integer variable `x` and an inner namespace `inner` containing an integer variable `y`. The `main` function accesses these variables using the scope resolution operator to print their values to the console, demonstrating the nested structure using `outer::x` and `outer::inner::y`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/namespaces@iIdC7V8sojwyEqK1xMuHn.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>

namespace outer {
    int x = 10;

    namespace inner {
        int y = 20;
    }
}

int main() {
    std::cout << "Outer x: " << outer::x << '\n';
    std::cout << "Inner y: " << outer::inner::y << '\n';

    return 0;
}
```

----------------------------------------

TITLE: Converting String to ObjectId - MongoDB JavaScript
DESCRIPTION: Converts a string representation of an ObjectId back into an ObjectId instance using the ObjectId() constructor. This requires a valid ObjectId string as input. Requires the mongodb package.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/object-id.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const objectIdFromStr = ObjectId(objectIdStr);
```

----------------------------------------

TITLE: Auto Type Inference in C++11
DESCRIPTION: Demonstrates the use of the 'auto' keyword to allow the compiler to infer the variable type based on the initializing expression. This simplifies code and reduces the need for explicit type declarations. It requires a C++11 compliant compiler.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-11--14@T6rCTv9Dxkm-tEA-l9XEv.md#_snippet_0

LANGUAGE: cpp
CODE:
```
auto integer = 42; // integer is of int type
auto floating = 3.14; // floating is of double type
```

----------------------------------------

TITLE: HTML Form Using GET Method
DESCRIPTION: This HTML code defines a form that uses the GET method to submit data to the 'test.php' script. The form contains a text input field named 'fname'. When the form is submitted, the value entered in the 'fname' field will be appended to the URL as a query parameter.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/_get@GFYGFVfxkOoPI5mI4zSt1.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<form method="get" action="test.php">
  Name: <input type="text" name="fname">
  <input type="submit">
</form>
```

----------------------------------------

TITLE: Find with Limit - MongoDB
DESCRIPTION: This snippet demonstrates how to limit the number of results returned by the `find()` method using the `limit()` function. The `limit()` function accepts an integer representing the maximum number of documents to return.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/find-methods.md#_snippet_6

LANGUAGE: javascript
CODE:
```
db.users.find().limit(5);
```

----------------------------------------

TITLE: Using If-Modified-Since Header in HTML
DESCRIPTION: This snippet demonstrates the `If-Modified-Since` header, which is sent by the client to the server with the client's last known modification date. The server compares this date to determine if the resource has been updated.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_12

LANGUAGE: html
CODE:
```
If-Modified-Since: Wed, 15 Mar 2017 12:30:26 GMT
```

----------------------------------------

TITLE: Installing NuGet Package via Command Line (Bash)
DESCRIPTION: This bash command demonstrates how to install a NuGet package named 'PackageName' using the command-line tool `nuget.exe`. It assumes that `nuget.exe` is installed and accessible in the system's PATH. The command will download and install the specified package into the current directory or project.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/nuget@g0s0F4mLV16eNvMBflN2e.md#_snippet_1

LANGUAGE: Bash
CODE:
```
nuget install PackageName
```

----------------------------------------

TITLE: Defining and calling a function in PHP
DESCRIPTION: This PHP code snippet demonstrates the definition and usage of a function named `greet`. The function takes a `$name` parameter, concatenates it with the string "Hello, ", and returns the resulting string. The example then calls the function with the argument "John" and prints the output to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/functions@WiGv7vi7Mtw-YqPMcnnyw.md#_snippet_0

LANGUAGE: PHP
CODE:
```
function greet($name) {
    return "Hello, " . $name;
}

echo greet("John"); // Outputs: Hello, John
```

----------------------------------------

TITLE: Updating GRUB Bootloader in Linux (Bash)
DESCRIPTION: This command updates the GRUB bootloader configuration. It ensures that any changes made to the system, such as installing new kernels or operating systems, are reflected in the GRUB menu. Requires sudo privileges to modify system boot configuration files.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/booting-linux/boot-loaders.md#_snippet_0

LANGUAGE: bash
CODE:
```
# This command updates the GRUB bootloader 
sudo update-grub
```

----------------------------------------

TITLE: Setting Last-Modified Header in HTML
DESCRIPTION: This snippet illustrates the `Last-Modified` header, which indicates the date and time a resource was last modified on the server. This header is used by clients to check if their cached version is up-to-date.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_11

LANGUAGE: html
CODE:
```
Last-Modified: Wed, 15 Mar 2017 12:30:26 GMT
```

----------------------------------------

TITLE: Using MongoDB Shell (mongo)
DESCRIPTION: This code snippet demonstrates how to invoke the MongoDB shell (mongo) with optional parameters to connect to a MongoDB instance.  It shows the basic syntax for connecting to a MongoDB server from the command line. The options allow you to configure the connection and specify the target database address.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
mongo [options] [db address]
```

----------------------------------------

TITLE: Extending HiringManager - PHP
DESCRIPTION: Demonstrates extending the `HiringManager` class to create `DevelopmentManager` and `MarketingManager` classes, each returning a different type of `Interviewer`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_5

LANGUAGE: PHP
CODE:
```
class DevelopmentManager extends HiringManager
{
    protected function makeInterviewer(): Interviewer
    {
        return new Developer();
    }
}

class MarketingManager extends HiringManager
{
    protected function makeInterviewer(): Interviewer
    {
        return new CommunityExecutive();
    }
}
```

----------------------------------------

TITLE: Lambda Function Syntax
DESCRIPTION: This snippet shows the general syntax of a lambda function in C++, including the capture list, parameters, return type, and function body. The return type is often optional as the compiler can deduce it in many cases.  Understanding this syntax is crucial for creating lambda functions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/lambdas@xjiFBVe-VGqCqWfkPVGKf.md#_snippet_0

LANGUAGE: cpp
CODE:
```
[capture-list](parameters) -> return_type {
    // function body
};
```

----------------------------------------

TITLE: Cloning a Git Repository
DESCRIPTION: Clones a remote Git repository to a local machine. Requires a valid repository URL. This allows users to create a local copy for modification and collaboration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/version-control.md#_snippet_0

LANGUAGE: Git
CODE:
```
git clone <repo_url>
```

----------------------------------------

TITLE: Setting Database URL in .env
DESCRIPTION: This is an example of the `.env` file content.  It defines the `DB_URL` environment variable, which should be set to the actual database URL for the project. This is used to configure the database connection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_3

LANGUAGE: bash
CODE:
```
DB_URL=<REPLACE THIS WITH YOUR DATABASE URL>
```

----------------------------------------

TITLE: Defining Strong and Weak ETags in HTML
DESCRIPTION: This snippet demonstrates the syntax for defining strong and weak ETags in HTTP responses. Strong ETags indicate identical resources, while weak ETags (prefixed with `W/`) allow for slight variations, suitable for dynamic content.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_9

LANGUAGE: html
CODE:
```
ETag: "j82j8232ha7sdh0q2882" - Strong Etag ETag: W/"j82j8232ha7sdh0q2882" - Weak
Etag (prefixed with `W/`)
```

----------------------------------------

TITLE: Creating and Using Objects in C++
DESCRIPTION: This snippet demonstrates how to create an object of the `Dog` class, assign values to its data members (`name` and `age`), and call its member function `bark`. It requires the `Dog` class definition from the previous snippet. It exemplifies how to instantiate classes and interact with their members.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/object-oriented-programming@b3-QYKNcW3LYCNOza3Olf.md#_snippet_1

LANGUAGE: cpp
CODE:
```
Dog myDog;
myDog.name = "Fido";
myDog.age = 3;
myDog.bark(); // Output: Fido barks!
```

----------------------------------------

TITLE: NL Command Syntax
DESCRIPTION: This snippet shows the basic syntax for the `nl` command in Linux. It includes the options and the file name as arguments. If no file is provided, the command will read from stdin.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/nl.md#_snippet_0

LANGUAGE: bash
CODE:
```
nl [options] [file_name]
```

----------------------------------------

TITLE: Creating project directory
DESCRIPTION: Creates a new directory named 'session-auth-example' to hold the application files.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_0

LANGUAGE: shell
CODE:
```
mkdir session-auth-example
```

----------------------------------------

TITLE: Display Filesystem Types with df
DESCRIPTION: This command displays the filesystem types of mounted devices in Linux. The `df -T` command provides information about disk space usage, including the filesystem type. It shows device names, filesystem types, total space, used space, and available space.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/disks-filesystems/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
df -T
```

----------------------------------------

TITLE: Querying Documents by Timestamp
DESCRIPTION: This snippet demonstrates how to query MongoDB documents based on a Timestamp field using the `$gt` operator. It finds documents where the `timestampFieldName` is greater than a specified Timestamp. Requires a MongoDB connection and the relevant collection to exist.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/timestamp.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// Find all documents with a Timestamp greater than a specified date
db.collection.find({
  timestampFieldName: {
    $gt: new Timestamp(Math.floor(new Date('2021-01-01').getTime() / 1000), 1),
  },
});
```

----------------------------------------

TITLE: MongoDB $not with $and, $lt, $gt Operators in JavaScript
DESCRIPTION: This example shows how to combine the $not operator with $and and other comparison operators ($lt, $gt) to find documents that do not fall within a specified range. It retrieves electronics products whose price is not less than 50 and not greater than 200 from the 'products' collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/not.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.products.find({
  $and: [
    { category: 'Electronics' },
    { price: { $not: { $lt: 50, $gt: 200 } } },
  ],
});
```

----------------------------------------

TITLE: Querying DNS with dig on Linux
DESCRIPTION: This command utilizes the `dig` (domain information groper) utility to query DNS servers for information about a domain name (e.g., www.example.com).  `dig` is more advanced than `nslookup` and provides more detailed DNS information. The output includes details like the answer section, authority section, and additional section of the DNS response.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/networking/dns-resolution.md#_snippet_1

LANGUAGE: bash
CODE:
```
dig www.example.com
```

----------------------------------------

TITLE: Filter Blog Posts Request Example
DESCRIPTION: This snippet demonstrates how to filter blog posts using a search term. The 'term' parameter is passed in the query string to the /posts endpoint. The server should perform a wildcard search on the title, content, or category fields.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/blogging-platform-api.md#_snippet_10

LANGUAGE: plaintext
CODE:
```
GET /posts?term=tech
```

----------------------------------------

TITLE: Initializing std::map in C++
DESCRIPTION: This code snippet demonstrates how to initialize a `std::map` in C++. `std::map` is an associative container that stores key-value pairs, sorted by key. Keys must be unique. It requires including the `<map>` header file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_4

LANGUAGE: cpp
CODE:
```
std::map<std::string, int> my_map;
```

----------------------------------------

TITLE: Querying with $eq operator in MongoDB
DESCRIPTION: This snippet demonstrates how to use the `$eq` operator in MongoDB to find documents where the value of a specified field is equal to a given value. The example queries a collection to find all documents where the `age` field is equal to 25.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/index.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.find({ age: { $eq: 25 } });
```

----------------------------------------

TITLE: Bootstrapping vcpkg on Linux/macOS
DESCRIPTION: Runs the bootstrap script to initialize vcpkg on Linux and macOS. This script prepares vcpkg for use by installing necessary tools and dependencies.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/vcpkg@PKG5pACLfRS2ogfzBX47_.md#_snippet_2

LANGUAGE: Shell
CODE:
```
./bootstrap-vcpkg.sh
```

----------------------------------------

TITLE: Creating systemd Service File
DESCRIPTION: This snippet demonstrates the structure of a systemd service file. It defines the service description, execution path, and installation target. The file is placed in `/etc/systemd/system/` to be recognized by systemd. `ExecStart` specifies the path to the executable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/service-management/creating-services.md#_snippet_0

LANGUAGE: systemd
CODE:
```
[Unit]
Description=My Custom Service
After=network.target

[Service]
ExecStart=/path/to/your/executable

[Install]
WantedBy=multi-user.target
```

----------------------------------------

TITLE: MongoDB $limit Syntax
DESCRIPTION: The `$limit` operator limits the number of documents passed to the next stage in the pipeline. The `<number>` specifies the maximum number of documents to include in the result set.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/limit.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{ $limit: <number> }
```

----------------------------------------

TITLE: Unexpand Command with Tab Conversion
DESCRIPTION: The `unexpand` command converts spaces to tabs in a file. The `-t 4` option specifies that every four spaces should be replaced with a tab. The input is `file.txt`, and the output will be the modified content with spaces converted to tabs based on the specified tab stop.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/unexpand.md#_snippet_0

LANGUAGE: bash
CODE:
```
unexpand -t 4 file.txt
```

----------------------------------------

TITLE: Initializing std::set in C++
DESCRIPTION: This code snippet demonstrates how to initialize a `std::set` in C++. `std::set` is an associative container that stores unique elements in a sorted order. It requires including the `<set>` header file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_3

LANGUAGE: cpp
CODE:
```
std::set<int> my_set;
```

----------------------------------------

TITLE: Preventing Default Link Navigation with JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to prevent the default action of a link click event.  It uses `event.preventDefault()` to stop the browser from navigating to the link's URL. A `console.log` statement confirms the click event was captured and processed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/prevent-default.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const link = document.querySelector('a');

link.addEventListener('click', (event) => {
  event.preventDefault();
  console.log('Clicked on link!');
});
```

----------------------------------------

TITLE: Testing Certbot Auto-Renewal (Dry Run)
DESCRIPTION: This command performs a dry run of the Certbot renewal process. It simulates the renewal without actually renewing the certificate, allowing verification of the auto-renewal setup.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/setup-and-auto-renew-ssl-certificates.md#_snippet_7

LANGUAGE: shell
CODE:
```
sudo certbot renew --dry-run
```

----------------------------------------

TITLE: Summing Arguments with Variadic Template (C++)
DESCRIPTION: This code snippet demonstrates how to use variadic templates to create a `sum` function that can accept a variable number of arguments. The function recursively calls itself, summing each argument until the base case is reached. The base case handles the single argument scenario. The main function shows an example of summing integers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/variadic-templates@w4EIf58KP-Pq-yc0HlGxc.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

// Base case for recursion
template <typename T>
T sum(T t) {
  return t;
}

// Variadic template
template <typename T, typename... Args>
T sum(T t, Args... args) {
  return t + sum(args...);
}

int main() {
  int result = sum(1, 2, 3, 4, 5);  // expands to 1 + 2 + 3 + 4 + 5
  std::cout << "The sum is: " << result << '\n';

  return 0;
}
```

----------------------------------------

TITLE: Get All Blog Posts Response Example
DESCRIPTION: This JSON snippet shows the expected response when retrieving all blog posts. It's an array of blog post objects, each containing the standard blog post attributes. This data is returned with a 200 OK status code.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/blogging-platform-api.md#_snippet_9

LANGUAGE: json
CODE:
```
[
  {
    "id": 1,
    "title": "My First Blog Post",
    "content": "This is the content of my first blog post.",
    "category": "Technology",
    "tags": ["Tech", "Programming"],
    "createdAt": "2021-09-01T12:00:00Z",
    "updatedAt": "2021-09-01T12:00:00Z"
  },
  {
    "id": 2,
    "title": "My Second Blog Post",
    "content": "This is the content of my second blog post.",
    "category": "Technology",
    "tags": ["Tech", "Programming"],
    "createdAt": "2021-09-01T12:30:00Z",
    "updatedAt": "2021-09-01T12:30:00Z"
  }
]
```

----------------------------------------

TITLE: Printing a Specific Variable in Bash
DESCRIPTION: This command prints the value of a specific environment variable, such as PATH. The '$' symbol is used to dereference the variable and access its value.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-basics/environment-variables.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ echo $PATH
```

----------------------------------------

TITLE: Finding documents where a field exists
DESCRIPTION: This code snippet demonstrates how to use the `$exists` operator with `true` to find all documents in the `books` collection where the `author` field exists. It queries the `books` collection and returns documents containing the 'author' field, regardless of its value.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/exists.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.books.find({ author: { $exists: true } });
```

----------------------------------------

TITLE: Abstract Factory: Usage Example in PHP
DESCRIPTION: Demonstrates how to use the WoodenDoorFactory and IronDoorFactory to create doors and fitting experts. It showcases that each factory returns the appropriate door and expert type, ensuring consistency.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_10

LANGUAGE: PHP
CODE:
```
$woodenFactory = new WoodenDoorFactory();

$door = $woodenFactory->makeDoor();
$expert = $woodenFactory->makeFittingExpert();

$door->getDescription();  // Output: I am a wooden door
$expert->getDescription(); // Output: I can only fit wooden doors

// Same for Iron Factory
$ironFactory = new IronDoorFactory();

$door = $ironFactory->makeDoor();
$expert = $ironFactory->makeFittingExpert();

$door->getDescription();  // Output: I am an iron door
$expert->getDescription(); // Output: I can only fit iron doors
```

----------------------------------------

TITLE: Multiplication Assignment Operator in C++
DESCRIPTION: Demonstrates the multiplication assignment operator (*=) in C++. This operator multiplies the left-hand operand by the right-hand operand and assigns the result to the left-hand operand. The example multiplies x (which is initially 5) by 3 and assigns the product (15) back to x.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_17

LANGUAGE: cpp
CODE:
```
int x = 5;
x *= 3; // x gets the value 15 (5 * 3)
```

----------------------------------------

TITLE: Setting textContent with v-text Directive in Vue.js
DESCRIPTION: This code snippet demonstrates the usage of the `v-text` directive in a Vue.js template. It sets the `textContent` of a `<p>` element to the string "I am some text". The directive overwrites any existing HTML content within the element. Single quotes are required to specify a literal string.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/vue/content/v-text@NCIzs3jbQTv1xXhAaGfZN.md#_snippet_0

LANGUAGE: html
CODE:
```
<template>
  <p v-text="'I am some text'"></p>
</template>
```

----------------------------------------

TITLE: Importing and Using Ambient Module in TypeScript
DESCRIPTION: This snippet showcases how to import and utilize a previously declared ambient module named 'my-module' within a TypeScript file (`.ts`). It demonstrates calling the 'doSomething' function exported by the module.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/ambient-modules@k_5y77k8ZZ9_O2WpWXWTY.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// main.ts
import * as myModule from 'my-module';
myModule.doSomething();
```

----------------------------------------

TITLE: Querying Dates with $lt Operator
DESCRIPTION: This code demonstrates how to query MongoDB for documents where the `eventDate` field is less than a specified date using the `$lt` (less than) operator. A Date object is created for comparison and the `find` method is used to retrieve the matching documents.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/date.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// Find events that are happening before a certain date
const filterDate = new Date('2021-12-31');
db.events.find({ eventDate: { $lt: filterDate } });
```

----------------------------------------

TITLE: Declaring Number Variables in TypeScript
DESCRIPTION: This code snippet demonstrates how to declare variables of type `number` in TypeScript. It shows examples for both integer and floating-point values. The `number` type encompasses all numeric values in TypeScript.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/number@UH9d3cvGy_e67WFNFwCyf.md#_snippet_0

LANGUAGE: typescript
CODE:
```
let intValue: number = 42;
let floatValue: number = 3.14;
```

----------------------------------------

TITLE: Arithmetic Addition Operator in C++
DESCRIPTION: Demonstrates the addition operator (+) in C++. This operator adds two operands and returns the sum. The example shows adding two integer literals and assigning the result to an integer variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int sum = 5 + 3; // sum will be 8
```

----------------------------------------

TITLE: Removing a Package using vcpkg
DESCRIPTION: Removes a previously installed package using vcpkg. Replace <package_name> with the name of the package you want to remove.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/vcpkg@PKG5pACLfRS2ogfzBX47_.md#_snippet_5

LANGUAGE: Shell
CODE:
```
vcpkg remove <package_name>
```

----------------------------------------

TITLE: Upload Image Endpoint
DESCRIPTION: This endpoint allows a user to upload an image. It expects a multipart form-data request with an image file. The response includes the uploaded image details (URL, metadata).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/image-processing-service.md#_snippet_2

LANGUAGE: HTTP
CODE:
```
POST /images
Request Body: Multipart form-data with image file
Response: Uploaded image details (URL, metadata).
```

----------------------------------------

TITLE: Non-Virtual Interface (NVI) - C++
DESCRIPTION: This snippet demonstrates the NVI (Non-Virtual Interface) idiom. It enforces a fixed public interface by calling a private/protected virtual method.  This allows subclasses to only override specific parts of the functionality while maintaining control over the overall process.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/idioms@fb3bnfKXjSIjPAk4b95lg.md#_snippet_4

LANGUAGE: cpp
CODE:
```
class Base {
public:
    void publicMethod() {
        // Common behavior
        privateMethod(); // Calls overridden implementation
    }

protected:
    virtual void privateMethod() = 0; // Pure virtual method
};

class Derived : public Base {
protected:
    virtual void privateMethod() override {
        // Derived implementation
    }
};
```

----------------------------------------

TITLE: Instantiating and Using JavaScript Class
DESCRIPTION: Creates an instance of the JavaScript class, passing in values for name, description, and slug. It then calls both the inherited getRoadmapUrl method and the JavaScript class's own greet method, demonstrating how the child class can use both inherited and its own methods.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/inheritance.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const js = new JavaScript(
  'JavaScript Roadmap',
  'Learn JavaScript',
  'javascript'
);

js.getRoadmapUrl(); // https://roadmap.sh/javascript
js.greet(); // JavaScript Roadmap - Learn JavaScript
```

----------------------------------------

TITLE: User Registration Response Example
DESCRIPTION: Demonstrates the JSON response expected after successful user registration. The response includes a token that the client can use for subsequent authenticated requests.  The token can be a JWT or a random string.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
}
```

----------------------------------------

TITLE: Using a Namespace in TypeScript
DESCRIPTION: This code snippet demonstrates how to use the `MyNamespace` defined in the `myNamespace.ts` file.  The `/// <reference path="myNamespace.ts" />` directive includes the namespace definition. The `MyNamespace.doSomething()` call invokes the exported function. This file is named `main.ts`. Dependencies: `myNamespace.ts`. Input: None. Output: Console output "Doing something...". Limitations: Assumes `myNamespace.ts` is in the same directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/namespaces@EtVwQ4lnWi3IIFHGb2Qib.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
/// <reference path="myNamespace.ts" />
MyNamespace.doSomething(); // Output: "Doing something..."
```

----------------------------------------

TITLE: Integrating vcpkg with Visual Studio
DESCRIPTION: Integrates vcpkg with Visual Studio, allowing you to easily use vcpkg-managed libraries in your Visual Studio projects. This command is only applicable on Windows.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/vcpkg@PKG5pACLfRS2ogfzBX47_.md#_snippet_7

LANGUAGE: Shell
CODE:
```
vcpkg integrate install
```

----------------------------------------

TITLE: Deleting a user in Linux
DESCRIPTION: This command removes an existing user account from a Linux system.  `sudo` is needed to execute with root privileges. The specified username will be removed from the system.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/user-management/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
sudo deluser newuser
```

----------------------------------------

TITLE: Updating a Git Submodule
DESCRIPTION: This command updates an existing submodule to its latest commit. This pulls the latest changes from the submodule's remote repository into the local submodule directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/adding--updating@x4bnsPVTiX2xOCSyrgWpF.md#_snippet_1

LANGUAGE: git
CODE:
```
git submodule update
```

----------------------------------------

TITLE: Writing Comments in JSX - React
DESCRIPTION: This snippet demonstrates how to write comments in JSX within a React component. It utilizes JavaScript's multi-line comment syntax wrapped in curly braces to embed the comment directly in the JSX.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/react.md#_snippet_0

LANGUAGE: js
CODE:
```
{/* This is a comment */}
```

----------------------------------------

TITLE: Polymorphism with Interface in PHP
DESCRIPTION: This code demonstrates polymorphism in PHP using an interface called 'Shape'.  The 'Circle' and 'Rectangle' classes implement the 'Shape' interface, providing their own implementations of the 'draw' method. The 'drawShape' function accepts any object that implements the 'Shape' interface and calls its 'draw' method, showcasing polymorphism.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/polymorphism@gtq5KrghF28f5G8nuDcYQ.md#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
interface Shape {
  public function draw();
}

class Circle implements Shape {
  public function draw() {
    echo "Draw a circle";
  }
}

class Rectangle implements Shape {
  public function draw() {
    echo "Draw a rectangle";
  }
}

function drawShape(Shape $shape) {
  $shape->draw();
}

drawShape(new Circle());  
drawShape(new Rectangle()); 
?>
```

----------------------------------------

TITLE: Installing gcc-c++ and make on Fedora/CentOS/RHEL
DESCRIPTION: This command installs the GNU C++ compiler (gcc-c++) and the `make` utility on Fedora, CentOS, RHEL, and their derivatives using the dnf package manager. These tools are essential for building C++ projects.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/installing-c@0J_ltQEJh2g28OE2ZEYJj.md#_snippet_2

LANGUAGE: shell
CODE:
```
sudo dnf install gcc-c++ make
```

----------------------------------------

TITLE: Creating Static Library
DESCRIPTION: These commands compile a C++ source file into an object file and then create a static library archive from the object file. The archive is named `libmystaticlibrary.a`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/working-with-libraries@4kkX5g_-plX9zVqr0ZoiR.md#_snippet_0

LANGUAGE: C++
CODE:
```
g++ -c sourcefile.cpp -o objectfile.o
ar rcs libmystaticlibrary.a objectfile.o
```

----------------------------------------

TITLE: Storing String Data in MongoDB
DESCRIPTION: This example demonstrates how to store string data in a MongoDB document using key-value pairs. The strings are UTF-8 encoded, allowing for a wide range of characters. The 'name', 'city', and 'description' fields store different kinds of textual information.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/string.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
    "name": "John Doe",
    "city": "New York",
    "description": "A software developer working at XYZ company.",
}
```

----------------------------------------

TITLE: Defining the main() Function in C++
DESCRIPTION: This code snippet defines the `main()` function in C++. The `main()` function is the entry point of every C++ program. It must return an integer value to the operating system.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/running-your-first-program@SEq0D2Zg5WTsIDtd1hW9f.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int main() {
  // Your code goes here.
}
```

----------------------------------------

TITLE: Cache-Control with must-revalidate directive
DESCRIPTION: Demonstrates the use of `Cache-Control: must-revalidate` to force caches to always revalidate the content with the origin server before serving it. This prevents stale content from being served, even in case of network issues.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_7

LANGUAGE: html
CODE:
```
Cache-Control: max-age=3600, public, must-revalidate
```

----------------------------------------

TITLE: Arithmetic Multiplication Operator in C++
DESCRIPTION: Demonstrates the multiplication operator (*) in C++. This operator multiplies two operands and returns the product. The example shows multiplying two integer literals and assigning the result to an integer variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int product = 5 * 3; // product will be 15
```

----------------------------------------

TITLE: Implementing Simple Factory - PHP
DESCRIPTION: Implements a `DoorFactory` class with a `makeDoor` method that creates and returns a `WoodenDoor` instance.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_1

LANGUAGE: PHP
CODE:
```
class DoorFactory
{
    public static function makeDoor($width, $height): Door
    {
        return new WoodenDoor($width, $height);
    }
}
```

----------------------------------------

TITLE: Create Short URL - Successful Response Example
DESCRIPTION: This JSON snippet demonstrates a successful response (201 Created) after creating a short URL. It includes the ID, original URL, generated short code, and timestamps for creation and update.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/url-shortening-service.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "id": "1",
  "url": "https://www.example.com/some/long/url",
  "shortCode": "abc123",
  "createdAt": "2021-09-01T12:00:00Z",
  "updatedAt": "2021-09-01T12:00:00Z"
}
```

----------------------------------------

TITLE: Decrement Operator (Prefix/Postfix) in C++
DESCRIPTION: Demonstrates the use of prefix and postfix decrement operators. Prefix decrement (`--x`) decrements the value of 'x' before returning it. Postfix decrement (`x--`) returns the current value of 'x' and then decrements it. The variables 'x', 'y', and 'z' are assumed to be integers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/arithmetic-operators@8aOSpZLWwZv_BEYiurhyR.md#_snippet_7

LANGUAGE: cpp
CODE:
```
int x = 5;
int y = --x; // x = 4, y = 4
int z = x--; // x = 3, z = 4
```

----------------------------------------

TITLE: Syncing and Updating a Git Submodule
DESCRIPTION: These commands sync the submodule's remote URL configuration and then update the submodule. This pulls in changes from upstream while keeping the submodule's history intact.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/adding--updating@x4bnsPVTiX2xOCSyrgWpF.md#_snippet_2

LANGUAGE: git
CODE:
```
git submodule sync
```

LANGUAGE: git
CODE:
```
git submodule update
```

----------------------------------------

TITLE: Generating String Permutations with O(n!) Complexity in Python
DESCRIPTION: This Python code defines a function `generate_permutations` that generates all possible permutations of a given string `s`. It utilizes a recursive approach where the base case is when the string length is 1, returning a list containing the string itself. For longer strings, it iterates through each character, treating it as the first character and recursively generating permutations of the remaining characters, ultimately concatenating the current character with each permutation of the remaining characters. The time complexity of this algorithm is O(n!).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/computer-science/content/factorial@m0umGQNdvg95UiNpQZsQN.md#_snippet_0

LANGUAGE: Python
CODE:
```
def generate_permutations(s):
    # Base case: If the string length is 1, return a list containing the string
    if len(s) == 1:
        return [s]

    # Initialize the result list
    permutations = []

    # Recursively generate all permutations
    for i in range(len(s)):
        # Current character
        current_char = s[i]
        # Remaining characters
        remaining_chars = s[:i] + s[i + 1 :]
        # Generate all permutations of the remaining characters
        for perm in generate_permutations(remaining_chars):
            # Add the current character to the front of each generated permutation
            permutations.append(current_char + perm)

    return permutations
```

----------------------------------------

TITLE: Using rsync for Directory Backup in Linux
DESCRIPTION: This code snippet demonstrates a basic usage of the `rsync` command to back up a directory in Linux. It synchronizes the `/source/directory/` with `/destination/directory/` using archive mode, verbose output, and data compression. `rsync` is a versatile tool that can be used for both local and remote backups.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/backup-tools.md#_snippet_0

LANGUAGE: bash
CODE:
```
rsync -avz /source/directory/ /destination/directory
```

----------------------------------------

TITLE: Update Short URL - PUT Request Example
DESCRIPTION: This code snippet illustrates the PUT request format for updating an existing short URL. It includes the endpoint with the short code and the JSON body containing the updated URL.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/url-shortening-service.md#_snippet_4

LANGUAGE: plaintext
CODE:
```
PUT /shorten/abc123
{
  "url": "https://www.example.com/some/updated/url"
}
```

----------------------------------------

TITLE: Creating ObjectId Manually - MongoDB JavaScript
DESCRIPTION: Creates a new ObjectId instance manually in JavaScript using the mongodb driver. Requires the mongodb package. This allows for generating ObjectIds outside of document insertion. The 'mongodb' package must be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/object-id.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const { ObjectId } = require('mongodb');
const objectId = new ObjectId();
```

----------------------------------------

TITLE: Create operation in MongoDB using Mongoose
DESCRIPTION: This code snippet demonstrates a create operation in MongoDB using Mongoose. It defines a simple User model with a name field, and then creates a new user with the name 'John Doe'.  Requires Mongoose to be initialized and connected to the database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/nodejs-database-crud.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const User = mongoose.model('User', { name: String });
User.create({ name: 'John Doe' });
```

----------------------------------------

TITLE: Using C++ References as Function Parameters
DESCRIPTION: This code shows how to use C++ references as function parameters to modify the original variables passed into the function. The `swap` function uses references to exchange the values of two integer variables directly, without needing to return any values. The `std::cout` calls display the variables before and after the swap.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/references@uUzRKa9wGzdUwwmAg3FWr.md#_snippet_2

LANGUAGE: cpp
CODE:
```
void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

int main() {
   int x = 5, y = 10;
   std::cout << "Before Swap: x = " << x << " y = " << y << '\n'; // Outputs 5 10
   
   swap(x, y);
   std::cout << "After Swap: x = " << x << " y = " << y << '\n';  // Outputs 10 5
}
```

----------------------------------------

TITLE: Accessing $_REQUEST parameter in PHP
DESCRIPTION: This code snippet demonstrates how to access a parameter from the $_REQUEST superglobal in PHP. It retrieves the value associated with the 'name' key.  Sanitizing user input accessed through $_REQUEST is crucial to prevent security vulnerabilities like cross-site scripting (XSS).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/_request@A6rfW4uJhyfAX2b18_EEC.md#_snippet_0

LANGUAGE: php
CODE:
```
$name = $_REQUEST['name'];
```

----------------------------------------

TITLE: Logical OR Operator in C++
DESCRIPTION: Demonstrates the logical OR operator (||) in C++. This operator returns true if at least one of the operands is true, and false otherwise. The example shows applying the OR operator to two boolean literals and assigning the result to a boolean variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_12

LANGUAGE: cpp
CODE:
```
bool result = (true || false); // result will be true
```

----------------------------------------

TITLE: Translate English to French using Prompting
DESCRIPTION: This code snippet demonstrates a basic prompt for translating English text to French. It shows how to provide instructions to a language model using delimiters to clearly separate the text to be translated from the instructions themselves. The model will then output the translated text in French.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompting-introduction/index.md#_snippet_0

LANGUAGE: None
CODE:
```
Translate the text delimited by triple quotes from English to French: 

"""Hello, how are you?"""
```

----------------------------------------

TITLE: Testing Delete Book Endpoint (Go)
DESCRIPTION: This Go test function, `TestDeleteBook`, tests deleting a book via the `/book/:id` endpoint using a mock HTTP request and a DELETE method.  It utilizes `gin-gonic/gin` for routing and `net/http/httptest` for simulating HTTP requests. It verifies the HTTP status code and confirms the deletion message, and that the book is actually deleted from the test database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_23

LANGUAGE: go
CODE:
```
func TestDeleteBook(t *testing.T) {
	setupTestDB()
	book := addBook()
	router := gin.Default()
	router.DELETE("/book/:id", api.DeleteBook)

	req, _ := http.NewRequest("DELETE", "/book/"+strconv.Itoa(int(book.ID)), nil)
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if status := w.Code; status != http.StatusOK {
		t.Errorf("Expected status %d, got %d", http.StatusOK, status)
	}

	var response api.JsonResponse
	json.NewDecoder(w.Body).Decode(&response)

	if response.Message != "Book deleted successfully" {
		t.Errorf("Expected delete message 'Book deleted successfully', got %v", response.Message)
	}

	//verify that the book was deleted
	var deletedBook api.Book
	result := api.DB.First(&deletedBook, book.ID)
	if result.Error == nil {
		t.Errorf("Expected book to be deleted, but it still exists")
	}
}
```

----------------------------------------

TITLE: Hiding v-cloak Elements with CSS
DESCRIPTION: This CSS snippet demonstrates how to hide elements with the v-cloak attribute using CSS. The [v-cloak] selector targets elements with the v-cloak attribute and sets their display property to none.  This ensures that the element is hidden until the Vue instance has been mounted and the v-cloak attribute is removed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/vue/content/v-cloak@RrSekP8Ub01coegMwLP6a.md#_snippet_1

LANGUAGE: css
CODE:
```
[v-cloak] {
  display: none;
}
```

----------------------------------------

TITLE: Conditional Compilation with Macros in C++
DESCRIPTION: This code demonstrates conditional compilation using macros. The code within the `#ifdef DEBUG_MODE` block will only be compiled if the `DEBUG_MODE` macro is defined. Otherwise, the code within the `#else` block will be compiled.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/macros@zKdlfZTRHwjtmRUGW9z9-.md#_snippet_4

LANGUAGE: cpp
CODE:
```
#define DEBUG_MODE

#ifdef DEBUG_MODE
  // Code to be compiled only in debug mode
#else
  // Code to be compiled only if DEBUG_MODE is not defined
#endif
```

----------------------------------------

TITLE: Debugging with LLDB
DESCRIPTION: Demonstrates how to use LLDB to debug a C++ program. It involves compiling the code with debug information, starting an LLDB session, setting a breakpoint, running the program, and stepping through the code line by line. It assumes a macOS or iOS development environment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/debuggers@qmHs6_BzND_xpMmls5YUH.md#_snippet_1

LANGUAGE: Shell
CODE:
```
clang++ -g main.cpp -o main # compile the code with debug info
lldb ./main                 # start lldb session
breakpoint set --name main  # set a breakpoint at the start of the main function
run                         # run the program
next                        # step to the next line
```

----------------------------------------

TITLE: Initializing std::unordered_map in C++
DESCRIPTION: This code snippet demonstrates how to initialize a `std::unordered_map` in C++. `std::unordered_map` is an unordered associative container that stores key-value pairs using a hash table. It requires including the `<unordered_map>` header file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_6

LANGUAGE: cpp
CODE:
```
std::unordered_map<std::string, int> my_unordered_map;
```

----------------------------------------

TITLE: Enabling Execution Tracing in Bash Script
DESCRIPTION: This snippet shows how to enable execution tracing directly in a bash script by adding `-x` to the shebang line. This causes bash to print each command to standard error before executing it, aiding in debugging.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-programming/debugging.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/bin/bash -x
```

----------------------------------------

TITLE: Vue.js v-pre Directive Example
DESCRIPTION: This example demonstrates the use of the `v-pre` directive in a Vue.js template. The `v-pre` directive is applied to a `<p>` element, causing it to render the mustache syntax `{{ text }}` literally, instead of interpolating the value of the `text` variable. The script imports `ref` from Vue and defines a reactive variable `text`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/vue/content/v-pre@mlsrhioiEkqnRIL6O3hNa.md#_snippet_0

LANGUAGE: html
CODE:
```
<script setup>
  import { ref } from 'vue';
  const text = ref("Some Text")
</script>

<template>
  <p v-pre >{{ text }}</p>
</template>
```

----------------------------------------

TITLE: Initializing Boolean (bool) in C++
DESCRIPTION: This code demonstrates how to declare and initialize a boolean variable in C++ using the `bool` data type. Booleans represent logical values, either `true` or `false`, and typically occupy 1 byte.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/data-types@MwznA4qfpNlv6sqSNjPZi.md#_snippet_4

LANGUAGE: cpp
CODE:
```
bool is_cpp_great = true;
```

----------------------------------------

TITLE: MongoDB $group Aggregate Example
DESCRIPTION: This JavaScript code snippet demonstrates the usage of the $group operator within an aggregation pipeline in MongoDB. It groups the 'orders' collection by 'customer_id' and calculates the 'total_spent' for each customer using the $sum accumulator on the 'amount' field.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/group.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.orders.aggregate([  {    $group: {      _id: '$customer_id',      total_spent: { $sum: '$amount' },    },  },]);
```

----------------------------------------

TITLE: Sample MongoDB Document
DESCRIPTION: Presents a sample document structure within a sales collection. The structure includes an orders array consisting of nested documents, each describing an order.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/unwind.md#_snippet_2

LANGUAGE: javascript
CODE:
```
{  _id: 1,  item: "itemA",  orders: [    { quantity: 2, unitPrice: 10 },    { quantity: 3, unitPrice: 20 },    { quantity: 1, unitPrice: 15 }  ]}
```

----------------------------------------

TITLE: Compilation Example in C++
DESCRIPTION: Illustrates the compilation stage in C++.  The code performs a simple addition operation. The compiler translates this C++ code into an intermediate representation specific to the target architecture. This involves syntax checking and semantic analysis.  No external dependencies are needed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/compiler-stages@DVckzBUMgk_lWThVkLyAT.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int main() {
    int a = 10;
    int b = 20;
    int sum = a + b;
    return 0;
}
```

----------------------------------------

TITLE: Using a C++ Reference to Modify a Variable
DESCRIPTION: This snippet illustrates how modifying a C++ reference also modifies the original variable.  Both `var` and `ref` share the same memory location, so changes to one affect the other. The `std::cout` is used to display the values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/references@uUzRKa9wGzdUwwmAg3FWr.md#_snippet_1

LANGUAGE: cpp
CODE:
```
var = 20;            // Sets the value of var to 20
std::cout << ref << '\n'; // Outputs 20

ref = 30;            // Sets the value of ref to 30
std::cout << var << '\n'; // Outputs 30
```

----------------------------------------

TITLE: Declaring Number Array in TypeScript
DESCRIPTION: This code snippet demonstrates how to declare an array of numbers in TypeScript using the `number[]` syntax. It initializes a constant variable named `numbers` with an array containing the numbers 1, 2, and 3. The type annotation `number[]` specifies that the array can only contain numbers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/array@YbDuIo1BbZKEAZwmXlCdZ.md#_snippet_0

LANGUAGE: typescript
CODE:
```
const numbers: number[] = [1, 2, 3];
```

----------------------------------------

TITLE: HTTP/0.9 GET Request Example
DESCRIPTION: A simple GET request example for retrieving a webpage using the HTTP/0.9 protocol. This early version only supported the GET method and HTML responses.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/journey-to-http2.md#_snippet_0

LANGUAGE: html
CODE:
```
GET /index.html
```

----------------------------------------

TITLE: Match Expression Example in PHP
DESCRIPTION: This code snippet demonstrates the use of a match expression in PHP to assign a message based on the value of `$statusCode`. It checks for specific status codes (200, 300, 400) and assigns corresponding messages, with a default case for unknown status codes. The result is stored in the `$message` variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/match@3gNzX-bw2iqur7U7-_W38.md#_snippet_0

LANGUAGE: PHP
CODE:
```
$message = match ($statusCode) {
  200, 300 => 'OK',
  400 => 'error',
  default => 'unknown status code',
};
```

----------------------------------------

TITLE: Generating Text with LLM Prompt
DESCRIPTION: This code snippet shows a basic prompt for generating introductory content on a topic using a Large Language Model. It comprises instructions for the model to write an introduction about Prompt Engineering.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompting-introduction/basic-prompting.md#_snippet_2

LANGUAGE: text
CODE:
```
Write me an introductory guide about Prompt Engineering.
```

----------------------------------------

TITLE: Generating SEO guide with a single prompt
DESCRIPTION: This code snippet demonstrates a basic single prompt used to generate a guide about SEO. The result might be generic. No specific dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/prompting-techniques/dual-prompt.md#_snippet_0

LANGUAGE: text
CODE:
```
Write me a guide about SEO.
```

----------------------------------------

TITLE: Static Cast Integer to Enumeration
DESCRIPTION: This example shows how to convert an integer to an enumeration type using `static_cast` in C++. The integer variable `value` is converted to a `Color` enumeration value and assigned to the variable `color`. Requires the `Color` enum to be defined.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/static_cast@_XB2Imyf23-6AOeoNLhYQ.md#_snippet_3

LANGUAGE: cpp
CODE:
```
enum Color { RED, GREEN, BLUE };
int value = 1;
Color color = static_cast<Color>(value); // Converts integer value to corresponding Color enumeration
```

----------------------------------------

TITLE: Result of including 'name' and 'age' (JSON)
DESCRIPTION: This JSON snippet represents the result of the previous aggregation pipeline. It shows that only the `name` and `age` fields are present in the output documents.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/project.md#_snippet_3

LANGUAGE: json
CODE:
```
[
  { "name": "John Doe", "age": 20 },
  { "name": "Jane Smith", "age": 23 }
]
```

----------------------------------------

TITLE: Vue.js v-once Example
DESCRIPTION: This example demonstrates the usage of the `v-once` directive. The input field is bound to a reactive variable `input`. The `p` element uses `v-once` to display the initial value of `input` and will not update even when the value in the input field changes. It requires the Vue.js framework and the `ref` function from the Vue library.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/vue/content/v-once@5k9CrbzhNy9iiS6ez2UE6.md#_snippet_0

LANGUAGE: html
CODE:
```
<script setup>
  import { ref } from 'vue';
  const input = ref("Some Text");
</script>

<template>
  <input v-model="input">
  <p v-once>{{ input }}</p>
</template>
```

----------------------------------------

TITLE: Copy Private Key to Server with SCP
DESCRIPTION: This command uses `scp` to securely copy a private key file from the local machine to the application server.  It requires specifying the path to the local key file, the user and hostname of the application server, and the destination path on the application server.  The application server will then have the key necessary for logging into the database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_4

LANGUAGE: bash
CODE:
```
scp -i path/to/key.pem examplefile yourusername@yourserver:/home/yourusername/
```

LANGUAGE: bash
CODE:
```
scp -i ~/.ssh/mykey.pem ~/.ssh/mykey.pem ec2-user@3.112.5.67:/home/ubuntu/
#   --------^---------- -------^-------- ----^--- ----^----- ----^--------
#      key file path      file to copy     user      host    path to copy
```

----------------------------------------

TITLE: Querying Data by Boolean Value in MongoDB
DESCRIPTION: This code snippet shows how to query MongoDB for documents where the 'isActive' field is true. It uses the `db.users.find()` method with a query filter that specifies the desired boolean value.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/boolean.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.users.find({ isActive: true });
```

----------------------------------------

TITLE: Appending Element to DOM with appendChild - JavaScript
DESCRIPTION: This code snippet demonstrates how to create a new `div` element, assign an ID, and then append it as the last child of an existing element with the class `roadmap-wrapper` using the `appendChild` method.  The code first selects the parent element, creates a new `div`, sets its `id`, and then appends the new element to the parent.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/append-child-vs-insert-before.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const roadmapWrapper = document.querySelector('.roadmap-wrapper');

const roadmap = document.createElement('div');
roadmap.id = 'javascript-roadmap';

roadmapWrapper.appendChild(roadmap);
```

----------------------------------------

TITLE: MongoDB Document Example (JSON)
DESCRIPTION: This JSON snippet shows an example document in a MongoDB collection named "users". It contains fields like `_id`, `name`, and an array of `posts`. The `posts` array contains objects with `title` and `views` fields. This document is used in the other examples.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/project.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "_id": 1,
  "name": "John Doe",
  "posts": [
    { "title": "Sample Post 1", "views": 43 },
    { "title": "Sample Post 2", "views": 89 }
  ]
}
```

----------------------------------------

TITLE: Getting All Books via Curl
DESCRIPTION: This bash command uses `curl` to send a GET request to the `/books` endpoint to retrieve a list of all books. It does not require any request body or special headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_14

LANGUAGE: bash
CODE:
```
curl --location 'localhost:8080/books'
```

----------------------------------------

TITLE: Function with Type Declarations - PHP
DESCRIPTION: This code snippet demonstrates the use of type declarations in a PHP function. The `add` function is defined to accept two integer parameters, `$a` and `$b`, and to return an integer value.  It requires PHP 7 or later to support scalar type hints. The example demonstrates passing valid integer arguments, and the result of the addition is echoed to the output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/type-declarations@sPW-Ti2VyNYzxq6EYkbn7.md#_snippet_0

LANGUAGE: PHP
CODE:
```
function add(int $a, int $b): int {
    return $a + $b;
}

echo add(1, 2);  // prints: 3
```

----------------------------------------

TITLE: Generic Function with Constraint
DESCRIPTION: This function `loggingIdentity` takes a generic type `T` constrained by the `Lengthwise` interface.  It logs the length property of the argument and returns the argument. The constraint ensures that the `length` property is accessible.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/generic-constraints@0NXHAOUYGIwuPwlN7r_B3.md#_snippet_1

LANGUAGE: typescript
CODE:
```
function loggingIdentity<T extends Lengthwise>(arg: T): T {
  // Now we know it has a .length property, so no more error
  console.log(arg.length);

  return arg;
}
```

----------------------------------------

TITLE: Console Logging in JavaScript
DESCRIPTION: This code snippet demonstrates how to use `console.log()` to print the value of a variable `x` to the browser's developer console. This is a basic technique for debugging JavaScript code by inspecting variable values during runtime. No external dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/debug-javascript.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
console.log('Value of x:', x);
```

----------------------------------------

TITLE: Template Specialization in C++
DESCRIPTION: This code specializes the `Pair` class for the `char` type. When the template arguments are both `char`, this specialized version of the class will be used.  The constructor now converts both character members to uppercase using `std::toupper`. The iostream library is implicitly included via std::toupper.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/templates@-6AOrbuOE7DJCmxlcgCay.md#_snippet_5

LANGUAGE: cpp
CODE:
```
template <>
class Pair<char, char> {
public:
    char first;
    char second;

    Pair(char first, char second) : first(first), second(second) {
        // Special behavior for characters (e.g., convert to uppercase)
        this->first = std::toupper(this->first);
        this->second = std::toupper(this->second);
    }
};
```

----------------------------------------

TITLE: Generating JSON object from text
DESCRIPTION: This code snippet shows how to generate a JSON object from a delimited text using prompts. The prompt asks for extracting gender, occasion, and age in years from the provided text. The expected output is a JSON object with specified fields.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/structured-data.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "gender": "female",
  "occasion": "birthday",
  "age_years": 1.5
}
```

----------------------------------------

TITLE: View examples with TLDR - bash
DESCRIPTION: This command displays simplified and community-driven examples for a specified command using the TLDR package. The TLDR package is not included by default, and must be installed separately.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-basics/command-help.md#_snippet_3

LANGUAGE: bash
CODE:
```
tldr [command]
```

----------------------------------------

TITLE: Defining Piece Progress State - Go
DESCRIPTION: This code defines a struct named `pieceProgress` to manage the state of a piece being downloaded from a peer. It includes fields for the piece index, the client connection, a buffer to store the downloaded data, the number of downloaded and requested bytes, and the backlog of unfulfilled requests. A `readMessage` method updates the state based on incoming messages from the peer, such as choke/unchoke signals, HAVE messages, and piece data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_10

LANGUAGE: go
CODE:
```
type pieceProgress struct {
	index      int
	client     *client.Client
	buf        []byte
	downloaded int
	requested  int
	backlog    int
}

func (state *pieceProgress) readMessage() error {
	msg, err := state.client.Read() // this call blocks
	switch msg.ID {
	case message.MsgUnchoke:
		state.client.Choked = false
	case message.MsgChoke:
		state.client.Choked = true
	case message.MsgHave:
		index, err := message.ParseHave(msg)
		state.client.Bitfield.SetPiece(index)
	case message.MsgPiece:
		n, err := message.ParsePiece(state.index, state.buf, msg)
		state.downloaded += n
		state.backlog--
	}
	return nil
}
```

----------------------------------------

TITLE: C++ Function Definition
DESCRIPTION: Defines a simple `add` function that takes two integer arguments and returns their sum. This function serves as an example to illustrate how a C++ compiler might mangle its name. The mangled name encodes information about the function's name and the types of its parameters.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/name-mangling@Lt7ss59KZw9Jwqj234jm2.md#_snippet_0

LANGUAGE: C++
CODE:
```
int add(int a, int b)
{
    return a + b;
}
```

----------------------------------------

TITLE: Posts Component with Artificial Delay
DESCRIPTION: This code snippet defines a `Posts` component that simulates slow rendering by creating 500 `SlowPost` components. The `SlowPost` component introduces a 1ms delay per item to emulate slow code. This delay is used to demonstrate the effect of `useTransition` on UI responsiveness.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/use-transition.md#_snippet_3

LANGUAGE: javascript
CODE:
```
export function Posts() {
  const items = [];
  for (let i = 0; i < 500; i++) {
    items.push(<SlowPost key={i} />);
  }
  return <ul>{items}</ul>;
}

function SlowPost() {
  const startTime = performance.now();
  while (performance.now() - startTime < 1) {
    // Do nothing for 1 ms per item to emulate extremely slow code
  }

  return <li>Post</li>;
}
```

----------------------------------------

TITLE: Executing Roadmap Directory Script
DESCRIPTION: This command is used to generate the content folders and files for the roadmap interactivity. It creates the necessary directory structure for a specified roadmap type (e.g., frontend, backend, devops).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/scripts/readme.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run roadmap-dirs [frontend|backend|devops|...]
```

----------------------------------------

TITLE: Removing Debug Symbols using strip command
DESCRIPTION: This command removes internal debugging symbols from a compiled binary.  The `--strip-debug` option tells the strip command to remove only the debugging sections, reducing the file size while preserving functionality.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/debugging-symbols@sR_FxGZHoMCV9Iv7z2_SX.md#_snippet_2

LANGUAGE: bash
CODE:
```
strip --strip-debug my_program
```

----------------------------------------

TITLE: Using 'any' Type in TypeScript
DESCRIPTION: This code snippet demonstrates the usage of the 'any' type in TypeScript. A variable declared with 'any' can be assigned values of any type without causing type errors. This bypasses TypeScript's type checking, so it should be used with caution.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/as-any@afTNr36VqeXoJpHxm2IoS.md#_snippet_0

LANGUAGE: typescript
CODE:
```
let anyValue: any = 42;

// we can assign any value to anyValue, regardless of its type
anyValue = 'Hello, world!';
anyValue = true;
```

----------------------------------------

TITLE: Media Query for Responsive Layout
DESCRIPTION: This CSS media query adjusts the flex-direction of the .container element to 'column' when the screen width is 768px or less. It is used to create a responsive layout that adapts to smaller screens.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/responsive-design.md#_snippet_0

LANGUAGE: CSS
CODE:
```
@media (max-width: 768px) {
  .container { flex-direction: column; }
}
```

----------------------------------------

TITLE: Using Bidirectional Iterator in C++
DESCRIPTION: This code demonstrates the use of a bidirectional iterator with a std::list. It iterates forward through the list and prints each element, then iterates backward from the second-to-last element to the first and prints each element.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/iterators@Ebu8gzbyyXEeJryeE0SpG.md#_snippet_4

LANGUAGE: cpp
CODE:
```
std::list<int> nums = {1, 2, 3, 4};
std::list<int>::iterator itr;
for (itr = nums.begin(); itr != nums.end(); ++itr) {
    std::cout << *itr << " ";
}
for (--itr; itr != nums.begin(); --itr) {
    std::cout << *itr << " ";
}
```

----------------------------------------

TITLE: String Concatenation and Manipulation - Rust
DESCRIPTION: This code snippet lists various methods available for string concatenation and manipulation in Rust. These methods include `push_str()`, `push()`, the `+` operator, and the `format!()` macro. Each method provides different functionality and performance characteristics for building strings.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/data-structures/string.md#_snippet_2

LANGUAGE: Rust
CODE:
```
push_str()
push()
+
format!()
```

----------------------------------------

TITLE: Initializing Double in C++
DESCRIPTION: This code snippet demonstrates the declaration and initialization of a double-precision floating-point variable using the `double` data type in C++. `double` consumes 8 bytes and provides higher precision than `float`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/data-types@MwznA4qfpNlv6sqSNjPZi.md#_snippet_2

LANGUAGE: cpp
CODE:
```
double pi_high_precision = 3.1415926535;
```

----------------------------------------

TITLE: Running PHP CS Fixer on a PHP project
DESCRIPTION: This command runs PHP CS Fixer on the specified directory of PHP files. Replace `/path-to-your-php-files` with the actual path to your PHP project's files. This command analyzes and fixes code style issues according to the configured rules.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/php-cs-fixer@r07k_hT2z2EiIBH4q3F7-.md#_snippet_1

LANGUAGE: bash
CODE:
```
php-cs-fixer fix /path-to-your-php-files
```

----------------------------------------

TITLE: Variadic Templates in C++11
DESCRIPTION: Shows how to create templates that take a variable number of arguments using variadic templates in C++11. This allows writing generic functions that can handle different argument lists. No dependencies are required. The example shows a function `printArgs` that accepts a variable number of arguments of any type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-0x@PPg0V5EzGBeJsysg1215V.md#_snippet_5

LANGUAGE: cpp
CODE:
```
template <typename... Args>
void printArgs(Args... args) {
    // function body
}
```

----------------------------------------

TITLE: Accessing Structure Members in C++
DESCRIPTION: This snippet illustrates how to access the members of the `Employee` structure using the dot operator (`.`). It assigns values to the `id`, `name`, and `salary` members of the `e1` object. Requires the prior definition of `Employee` struct and object `e1`
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/structures-and-classes@CMlWNQwpywNhO9B6Yj6Me.md#_snippet_1

LANGUAGE: C++
CODE:
```
e1.id = 1;
e1.name = "John Doe";
e1.salary = 40000;
```

----------------------------------------

TITLE: Compiling TypeScript
DESCRIPTION: This command compiles your TypeScript code using the TypeScript compiler (`tsc`).  `npx` is used to execute the locally installed `tsc` command. By default, it compiles all TypeScript files in the project based on the `tsconfig.json` configuration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/installation-and-configuration@dA8CNQOgJRDa0T7rmyS7f.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx tsc
```

----------------------------------------

TITLE: Conditional (Ternary) Operator Syntax
DESCRIPTION: Demonstrates the basic syntax of the conditional (ternary) operator in JavaScript. It evaluates a condition and returns one of two values based on whether the condition is true or false. No dependencies are required. The `condition` is a boolean expression, `val_for_true` is the value returned if the condition is true, and `val_for_false` is the value returned if the condition is false.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/javascript/content/conditional-operators@640mk-m5mB90Mme-7jcXV.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
condition ? val_for_true : val_for_false
```

----------------------------------------

TITLE: Inserting a Long value into a collection
DESCRIPTION: Inserts a document with a Long field into a MongoDB collection. It uses the NumberLong() constructor to ensure the value is treated as a 64-bit integer. Requires MongoDB to be running and accessible via the `db` object.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/long.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.insert({
  largeValue: NumberLong('1234567890123456789'),
});
```

----------------------------------------

TITLE: BitTorrent Handshake Structure and Serialization in Go
DESCRIPTION: This Go code defines a `Handshake` struct representing the BitTorrent handshake message format. It includes fields for the protocol string (`Pstr`), info hash (`InfoHash`), and peer ID (`PeerID`). The `Serialize` method serializes the handshake data into a byte slice for transmission over the network.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/torrent-client.md#_snippet_4

LANGUAGE: go
CODE:
```
// A Handshake is a special message that a peer uses to identify itself
type Handshake struct {
	Pstr     string
	InfoHash [20]byte
	PeerID   [20]byte
}

// Serialize serializes the handshake to a buffer
func (h *Handshake) Serialize() []byte {
	buf := make([]byte, len(h.Pstr)+49)
	buf[0] = byte(len(h.Pstr))
	curr := 1
	curr += copy(buf[curr:], h.Pstr)
	curr += copy(buf[curr:], make([]byte, 8)) // 8 reserved bytes
	curr += copy(buf[curr:], h.InfoHash[:])
	curr += copy(buf[curr:], h.PeerID[:])
	return buf
}

// Read parses a handshake from a stream
func Read(r io.Reader) (*Handshake, error) {
	// Do Serialize(), but backwards
	// ...
}
```

----------------------------------------

TITLE: Example Zero-Shot Chain of Thought Prompt
DESCRIPTION: This example shows how to craft a zero-shot chain of thought prompt that requests a step-by-step explanation of how a solar panel works. The prompt encourages the model to clarify how each step leads to the next, resulting in a more comprehensive answer.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/prompting-techniques/zeroshot-chain-of-thought.md#_snippet_0

LANGUAGE: text
CODE:
```
Please explain the process of how a solar panel works, starting with sunlight hitting the panel's surface and ending with electricity being produced. Structure your response as a step-by-step chain of thought, taking care to clarify how each step leads to the next.
```

----------------------------------------

TITLE: Out-of-bounds Memory Access in C++
DESCRIPTION: This code demonstrates undefined behavior due to accessing memory outside the bounds of an array. The array `arr` is declared with a size of 5, meaning valid indices are 0 to 4. Accessing `arr[5]` attempts to read memory beyond the allocated boundary, resulting in unpredictable behavior.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/undefined-behavior-ub@IDOlquv6jlfecwQoBwkGZ.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int arr[5];
int val = arr[5]; // Undefined behavior since the valid indices are 0 to 4
```

----------------------------------------

TITLE: TMDB CLI Usage Examples
DESCRIPTION: This snippet demonstrates how to use the TMDB CLI tool to fetch different types of movie data. The `--type` argument specifies the type of movies to retrieve, such as "playing", "popular", "top", or "upcoming". This is a command-line interface usage example, not actual code to execute.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/tmdb-cli.md#_snippet_0

LANGUAGE: bash
CODE:
```
tmdb-app --type "playing"
tmdb-app --type "popular"
tmdb-app --type "top"
tmdb-app --type "upcoming"
```

----------------------------------------

TITLE: catch Block in C++
DESCRIPTION: This code shows the `catch` block structure for handling exceptions thrown by a `try` block. Multiple `catch` blocks can be used to handle different exception types, including a general catch-all block.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/exceptions@NJud5SXBAUZ6Sr78kZ7jx.md#_snippet_1

LANGUAGE: cpp
CODE:
```
catch (int e) {
  // handle exception of type int
}
catch (char e) {
  // handle exception of type char
}
catch (...) {
  // handle any other exception
}
```

----------------------------------------

TITLE: Setting Environment Variable using putenv() in PHP
DESCRIPTION: Sets an environment variable using the `putenv()` function in PHP. This function takes a string in the format "NAME=VALUE" as an argument. The variable is set only for the current request.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/environment-variables@fitjnLYKLHJ2P5G7JAvzm.md#_snippet_0

LANGUAGE: PHP
CODE:
```
putenv("FOO=bar");
```

----------------------------------------

TITLE: Initializing MongoDB Cursor
DESCRIPTION: This snippet demonstrates how to initialize a MongoDB cursor using the `find()` method on a collection. The `find()` method returns a cursor object that can be used to iterate over the documents in the collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/useful-concepts/cursors.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const cursor = db.collection('myCollection').find();
```

----------------------------------------

TITLE: Querying with $size in MongoDB (JavaScript)
DESCRIPTION: This code snippet demonstrates the usage of the `$size` operator in MongoDB to find documents where the `comments` array contains exactly 3 elements. The `$size` operator matches arrays that have a specific number of elements.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/index.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.find({ comments: { $size: 3 } });
```

----------------------------------------

TITLE: Sample RPC GET Request
DESCRIPTION: This code snippet demonstrates a sample RPC call using a GET request. It shows how data can be passed as a query parameter in the URL to specify the operation and the input.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/system-design/content/rpc@ixqucoAkgnphWYAFnsMe-.md#_snippet_0

LANGUAGE: HTTP
CODE:
```
GET /someoperation?data=anId
```

----------------------------------------

TITLE: Escaping Special Characters in MongoDB Regex (JavaScript)
DESCRIPTION: Explains and demonstrates how to escape special characters in MongoDB regular expressions using a backslash (`\`).  The example shows how to search for 'example.com' literally, where the dot would otherwise be interpreted as matching any character.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/regex.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.collection.find({ field: /example\.com/i }); // Search for 'example.com'
```

----------------------------------------

TITLE: Systemd Service Management Commands in Bash
DESCRIPTION: These commands demonstrate how to interact with a systemd service. They include starting, stopping, enabling, disabling, and checking the status of the 'dummy' service. Additionally, it shows how to view the logs using `journalctl`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/dummy-systemd-service.md#_snippet_1

LANGUAGE: bash
CODE:
```
# Interacting with the service
sudo systemctl start dummy
sudo systemctl stop dummy
sudo systemctl enable dummy
sudo systemctl disable dummy
sudo systemctl status dummy

# Check the logs
sudo journalctl -u dummy -f
```

----------------------------------------

TITLE: C++ Input and Output Example
DESCRIPTION: This snippet illustrates input and output operations in C++ using std::cin and std::cout. It prompts the user to enter an integer, reads the input using std::cin, and then prints the entered value back to the console using std::cout. This demonstrates basic user interaction in C++.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/introduction-to-language@NvODRFR0DLINB0RlPSsvt.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include <iostream>

int main() {
    int number;
    std::cout << "Enter an integer: ";
    std::cin >> number;
    std::cout << "You entered: " << number << '\n';
    return 0;
}
```

----------------------------------------

TITLE: Loading Program into GDB
DESCRIPTION: This command starts the GDB debugger and loads the specified executable file for debugging. The executable should be compiled with the `-g` flag. The input is the name of the executable file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/gdb@BmWsoL9c_Aag5nVlMsKm2.md#_snippet_1

LANGUAGE: sh
CODE:
```
gdb myfile
```

----------------------------------------

TITLE: Global Scope Declaration and Usage in C++
DESCRIPTION: This code snippet demonstrates the declaration and usage of a global variable in C++. Global variables are declared outside any function or class and can be accessed from anywhere in the program. The `globalVar` is defined and then printed from within the `main` function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/scope@dKCYmxDNZubCVcR5rf8b-.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

int globalVar; // This is a global variable

int main() {
    std::cout << "Global variable: " << globalVar << '\n';
}
```

----------------------------------------

TITLE: Creating a new scope with IIFE in JavaScript
DESCRIPTION: This example illustrates how an IIFE creates a new scope in JavaScript, preventing variable hoisting and scope pollution. The 'roadmap' variable is defined within the IIFE and is not accessible outside of it, resulting in a ReferenceError when accessed outside the function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/iife.md#_snippet_1

LANGUAGE: javascript
CODE:
```
(function () {
  var roadmap = 'JavaScript';
  console.log(roadmap);
})();

console.log(roadmap); // ReferenceError: name is not defined
```

----------------------------------------

TITLE: Translate English to French using Prompting (Alternative)
DESCRIPTION: This code snippet shows an alternative, less structured prompt for translating English text to French. While it can still work, it highlights the benefit of using more structured and explicit prompts. It demonstrates a simpler, direct instruction without delimiters.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompting-introduction/index.md#_snippet_1

LANGUAGE: None
CODE:
```
Translate the following to French:

Hello, how are you?
```

----------------------------------------

TITLE: Declaring a Class with Multiple Inheritance in C++
DESCRIPTION: This code snippet demonstrates the syntax for declaring a class that inherits from multiple base classes using the `access-specifier` (public, protected, private) to control the accessibility of inherited members. The `DerivedClass` inherits members from `BaseClass1` and `BaseClass2`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/multiple-inheritance@WjHpueZDK-d3oDNMVZi9w.md#_snippet_0

LANGUAGE: cpp
CODE:
```
class DerivedClass : access-specifier BaseClass1, access-specifier BaseClass2, ...
{
    // class body
};
```

----------------------------------------

TITLE: Solving the First Subproblem with Step-by-Step Guidance
DESCRIPTION: This snippet focuses on solving the first identified subproblem: determining if the customer is within the 30-day return window. It provides the customer inquiry, instructions, and explicitly asks the model to determine if the return is within the allowed timeframe. The "Let's go step by step" prompt encourages the model to reason more carefully and arrive at the correct conclusion.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/prompting-techniques/least-to-most.md#_snippet_2

LANGUAGE: text
CODE:
```
CUSTOMER INQUIRY:
I just bought a T-shirt from your Arnold collection on March 1st. 
I saw that it was on discount, so bought a shirt that was originally $30, and got 40% off. 
I saw that you have a new discount for shirts at 50%. 
I'm wondering if I can return the shirt and have enough store credit to buy two of your shirts?

INSTRUCTIONS:
You are a customer service agent tasked with kindly responding to customer inquiries. 
Returns are allowed within 30 days. 
Today's date is March 29th. 
There is currently a 50% discount on all shirts. 
Shirt prices range from $18-$100 at your store. 
Do not make up any information about discount policies.
Determine if the customer is within the 30-day return window.
Let's go step by step.
```

----------------------------------------

TITLE: Building with CMake after Conan install
DESCRIPTION: Builds a project using CMake after Conan has installed the dependencies. The example shows configuration of the cmake project setting the `CMAKE_BUILD_TYPE` to `Release`. Finally the project is compiled using the cmake build tool.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/conan@ky_UqizToTZHC_b77qFi2.md#_snippet_3

LANGUAGE: bash
CODE:
```
cmake .. -DCMAKE_BUILD_TYPE=Release
cmake --build .
```

----------------------------------------

TITLE: Understanding JavaScript as interpreted language
DESCRIPTION: This snippet describes that Javascript is an interpreted language, the javascript engine interprets the code at runtime.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/javascript.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
JavaScript is an interpreted language. This means that the JavaScript code is not compiled before it is executed. Instead, the JavaScript engine interprets the code at runtime.
```

----------------------------------------

TITLE: Displaying Boot Logs Using dmesg
DESCRIPTION: This shell command displays the kernel ring buffer, which contains boot-time messages.  The output is piped to `less` for easier navigation. The kernel ring buffer is of a fixed size, meaning older messages will eventually be discarded.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/booting-linux/logs.md#_snippet_0

LANGUAGE: Shell
CODE:
```
dmesg | less
```

----------------------------------------

TITLE: MongoDB $not with Regular Expression in JavaScript
DESCRIPTION: This snippet illustrates how to use the $not operator with a regular expression to exclude documents matching a specific pattern. It finds products from the 'products' collection whose name does not start with "apple" (case-insensitive).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/not.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.products.find({ name: { $not: /^apple/i } });
```

----------------------------------------

TITLE: Compiling Example with Debugging Symbols (g++)
DESCRIPTION: This command compiles the `example.cpp` file with debugging symbols, creating an executable named `example`. The `-g` flag ensures that the executable contains the necessary debugging information for GDB.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/gdb@BmWsoL9c_Aag5nVlMsKm2.md#_snippet_3

LANGUAGE: sh
CODE:
```
g++ -g example.cpp -o example
```

----------------------------------------

TITLE: Retrieve Original URL - GET Request Example
DESCRIPTION: This code snippet shows the GET request format for retrieving the original URL using the short code. The endpoint requires the short code as part of the URL path.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/url-shortening-service.md#_snippet_2

LANGUAGE: plaintext
CODE:
```
GET /shorten/abc123
```

----------------------------------------

TITLE: Creating a Compound Index in MongoDB
DESCRIPTION: This snippet shows how to create a compound index on the 'username' and 'email' fields in the 'users' collection. Both fields are indexed in ascending order. Requires a MongoDB connection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/indexes.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.users.createIndex({ username: 1, email: 1 });
```

----------------------------------------

TITLE: Showing IP Routing Table - Bash
DESCRIPTION: This command is used to display the current IP routing table in a Linux system. It retrieves a list of all routes known to the kernel, showing the destination networks, gateways, and interfaces used for routing packets. No specific dependencies are required beyond a functioning network configuration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/networking/ip-routing.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ ip route show
```

----------------------------------------

TITLE: Basic $regex Query in MongoDB
DESCRIPTION: This code snippet demonstrates the basic usage of the `$regex` operator within a `find()` query in MongoDB. It searches for documents where the specified `fieldName` matches the provided regular expression `your-pattern`. Replace `fieldName` and `your-pattern` with the desired values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/regex.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.find({ fieldName: { $regex: 'your-pattern' } });
```

----------------------------------------

TITLE: Accessing Global Variable in PHP
DESCRIPTION: This PHP code demonstrates how to access a global variable within a function using the `global` keyword. The global variable `$x` is defined outside the function, and then accessed inside the function `test()` after declaring it as global using `global $x;`. The function then echoes the value of `$x`. Requires PHP runtime environment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/variables-and-scope@D0BtyxyjIBcpfn5wP23WC.md#_snippet_0

LANGUAGE: php
CODE:
```
$x = 10; //global variable
function test() {
    global $x; // accessing the global variable
    echo $x;
}
test(); //prints 10
```

----------------------------------------

TITLE: Using the Visitor Pattern with Speak Visitor
DESCRIPTION: This code demonstrates the use of the `Speak` visitor. It creates animal objects and a `Speak` visitor and then calls the `accept` method on each animal with the `Speak` visitor, resulting in each animal making its specific sound.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_68

LANGUAGE: PHP
CODE:
```
$monkey = new Monkey();
$lion = new Lion();
$dolphin = new Dolphin();

$speak = new Speak();

$monkey->accept($speak);    // Ooh oo aa aa!
$lion->accept($speak);      // Roaaar!
$dolphin->accept($speak);   // Tuut tutt tuutt!
```

----------------------------------------

TITLE: Using instanceof Operator in TypeScript
DESCRIPTION: This snippet demonstrates how to use the `instanceof` operator in TypeScript to check if an object is an instance of a class. It defines a `Bird` class and creates an instance of it. The `instanceof` operator is then used to verify if the object is an instance of the `Bird` class, and if so, the `fly()` method is called. Otherwise, a message is logged indicating that the pet is not a bird.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/instanceof@EDOU5a7UK17yp3PdFBJMc.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Bird {
  fly() {
    console.log('flying...');
  }
  layEggs() {
    console.log('laying eggs...');
  }
}

const pet = new Bird();

// instanceof
if (pet instanceof Bird) {
  pet.fly();
} else {
  console.log('pet is not a bird');
}
```

----------------------------------------

TITLE: Implementing Switch Statement in PHP
DESCRIPTION: This code snippet demonstrates a basic switch statement in PHP. It evaluates the value of the `$fruit` variable and executes the corresponding code block based on the case that matches the value. The `break` statement is used to prevent fall-through to the next case, and the `default` case handles scenarios where none of the specified cases match the value of the switch expression. Dependencies: None. Input: A string value assigned to the `$fruit` variable. Output: A string printed to the console based on the matching case or the default case.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/switch@bgJ9-m6Fiu3VCc-NZlbpn.md#_snippet_0

LANGUAGE: php
CODE:
```
$fruit = "apple";
switch ($fruit) {
  case "apple":
    echo "You chose apple.";
    break;
  case "banana":
    echo "You chose banana.";
    break;
  default:
    echo "Invalid choice.";
}
// Outputs: You chose apple.
```

----------------------------------------

TITLE: Static Analysis using Phan
DESCRIPTION: This code snippet demonstrates the basic usage of Phan for static analysis in PHP. It includes the necessary dependencies and provides a sample code with a type error. Phan analyzes the provided PHP code and identifies potential issues like type mismatches. The analysis is triggered by calling `Phan::analyzeFile` which takes a filename (here 'test.php') and the PHP code as input.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/phan@B45YVzov8X_iOtneiFEqa.md#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
// Phan sample usage

require 'vendor/autoload.php';    // Autoload files using Composer autoload

use Phan\Phan;
use Phan\CLI;

$code = "<?php function add(int $a, int $b): int { return $a + $b; } echo add('hello', 'world');"; // code with a type error

Phan::analyzeFile('test.php', $code);
```

----------------------------------------

TITLE: Querying with $ne operator in MongoDB
DESCRIPTION: This snippet demonstrates how to use the `$ne` operator in MongoDB to find documents where the value of a specified field is not equal to a given value. The example queries a collection to find all documents where the `age` field is not equal to 25.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/index.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.find({ age: { $ne: 25 } });
```

----------------------------------------

TITLE: Creating Build Directory with Shell
DESCRIPTION: This command creates a new directory named 'build' in the current location and then changes the current directory to 'build'. This is a common practice to keep the source code clean and separate from the build artifacts.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/cmake@ysnXvSHGBMMozBJyXpHl5.md#_snippet_1

LANGUAGE: shell
CODE:
```
mkdir build
cd build
```

----------------------------------------

TITLE: Unwind Syntax Example
DESCRIPTION: Demonstrates the general syntax for the `$unwind` operator in MongoDB's aggregation pipeline. Includes optional parameters for handling array indices and null/empty arrays.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/unwind.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{  $unwind: {    path: <field path>,    includeArrayIndex: <string>, // Optional    preserveNullAndEmptyArrays: <boolean> // Optional  }}
```

----------------------------------------

TITLE: Example Usage with Error
DESCRIPTION: This example shows an incorrect usage of the `loggingIdentity` function. Passing the number 3 as an argument results in a compilation error because `number` does not satisfy the `Lengthwise` constraint (i.e., it doesn't have a `.length` property).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/generic-constraints@0NXHAOUYGIwuPwlN7r_B3.md#_snippet_2

LANGUAGE: typescript
CODE:
```
loggingIdentity(3); // Error, number doesn't have a .length property
```

----------------------------------------

TITLE: Declaring variables in Java
DESCRIPTION: This code snippet demonstrates how to declare variables with explicit types in Java, showcasing its statically typed nature. It requires declaring the data type (e.g., int, String) before the variable name. This helps to catch errors during compilation and ensures type safety during runtime.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/java-vs-javascript.md#_snippet_0

LANGUAGE: java
CODE:
```
int number = 5;
String message = "Sign up on roadmap";
```

----------------------------------------

TITLE: Combined Dual Prompt for SEO guide
DESCRIPTION: This code snippet combines the two separate prompts into a single prompt, requesting the AI to generate key topics and a detailed introduction for each topic. No specific dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/prompting-techniques/dual-prompt.md#_snippet_3

LANGUAGE: text
CODE:
```
I am writing a guide about SEO. Take the 10 key topics about SEO and write a detailed introduction to each.
```

----------------------------------------

TITLE: Calling a Function in Go
DESCRIPTION: This Go code defines a simple function `greet` that takes a string as input and returns a greeting message. The `main` function calls the `greet` function with the argument "Bob" and prints the returned message using `fmt.Println`. It showcases basic function definition, calling, and argument passing in Go.  The `fmt` package is imported to enable formatted I/O.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/golang/content/function-calls.md#_snippet_0

LANGUAGE: Go
CODE:
```
package main

import "fmt"

func greet(name string) string {
    return "Hello, " + name + "!"
}

func main() {
    // Here we call the function.
    message := greet("Bob")
    fmt.Println(message)
}
```

----------------------------------------

TITLE: Defining Lengthwise Interface
DESCRIPTION: This interface defines a `length` property of type number. It's used as a constraint in the `loggingIdentity` function to ensure that the generic type `T` has a `length` property.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/generic-constraints@0NXHAOUYGIwuPwlN7r_B3.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface Lengthwise {
  length: number;
}
```

----------------------------------------

TITLE: Defining a Complex Computer Class in PHP
DESCRIPTION: This code defines a `Computer` class with several methods that represent the various operations a computer performs when turned on or off. These methods include `getElectricShock()`, `makeSound()`, `showLoadingScreen()`, `bam()`, `closeEverything()`, `pullCurrent()`, and `sooth()`. The class represents a complex subsystem that needs a simplified interface. It is meant to be wrapped by a facade.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_34

LANGUAGE: PHP
CODE:
```
class Computer
{
    public function getElectricShock()
    {
        echo "Ouch!";
    }

    public function makeSound()
    {
        echo "Beep beep!";
    }

    public function showLoadingScreen()
    {
        echo "Loading..";
    }

    public function bam()
    {
        echo "Ready to be used!";
    }

    public function closeEverything()
    {
        echo "Bup bup bup buzzzz!";
    }

    public function sooth()
    {
        echo "Zzzzz";
    }

    public function pullCurrent()
    {
        echo "Haaah!";
    }
}
```

----------------------------------------

TITLE: Using typeid Operator in C++
DESCRIPTION: This code snippet demonstrates the usage of the `typeid` operator in C++ to obtain the type information of an object at runtime. It includes the necessary header file `<typeinfo>` and shows how to retrieve the type name using the `name()` method of the `std::type_info` object. It creates a base class pointer to a derived class object and then prints the type of the pointed-to object.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/rtti@r0yD1gfn03wTpEBi6zNsu.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <typeinfo>

class Base { virtual void dummy() {} };
class Derived : public Base { /* ... */ };

int main() {
    Base* base_ptr = new Derived;

    // Using typeid to get the type of the object
    std::cout << "Type: " << typeid(*base_ptr).name() << '\n';

    delete base_ptr;
    return 0;
}
```

----------------------------------------

TITLE: SSH into Database Server using Jump Server (-J flag)
DESCRIPTION: This command uses the `-J` flag in SSH to specify a jump server. It allows directly connecting to the database server by first connecting to the application server, effectively tunneling the SSH connection. Agent forwarding must still be configured for this to work.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_10

LANGUAGE: bash
CODE:
```
ssh -A -J ec2-user@3.112.5.67 ec2-user@192.168.1.0
#         -------^----------- --------^-----------
#            jump server          destination
```

----------------------------------------

TITLE: Debugger Statement in JavaScript
DESCRIPTION: This code snippet shows how to use the `debugger;` statement in a JavaScript function. When the browser's developer tools are open, execution will pause at the `debugger;` line, allowing for inspection of variables and the call stack. No external dependencies are needed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/debug-javascript.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function myFunction() {
  debugger; // Execution will pause here when dev tools are open
  // ... rest of the code
}
```

----------------------------------------

TITLE: Arithmetic Modulo Operator in C++
DESCRIPTION: Demonstrates the modulo operator (%) in C++. This operator returns the remainder of a division. The example shows finding the remainder when dividing two integer literals and assigning the result to an integer variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_4

LANGUAGE: cpp
CODE:
```
int remainder = 7 % 3; // remainder will be 1
```

----------------------------------------

TITLE: Using the Modal Component in React (JS)
DESCRIPTION: This snippet shows how to use the Modal component within a parent component (App). It uses the useState hook to manage the modal's visibility. The modal is opened and closed using button clicks that update the 'isOpen' state.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/create-portal.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { useState } from 'react';
import { Modal } from './modal';

export function App() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div>
      <button onClick={() => setIsOpen(true)}>Open Modal</button>
      <Modal isOpen={isOpen} onClose={() => setIsOpen(false)}>
        <h1>Modal Title</h1>
        <p>Modal Content</p>
      </Modal>
    </div>
  );
}
```

----------------------------------------

TITLE: Printing a string with print in PHP
DESCRIPTION: This snippet demonstrates how to print a string literal using the `print` statement in PHP. The `print` statement outputs the given string to the output stream.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/print@NQUmO90sqe7fnzod3Ia8H.md#_snippet_0

LANGUAGE: PHP
CODE:
```
print("Hello, World!");
```

----------------------------------------

TITLE: Using useTransition Hook in React
DESCRIPTION: This code snippet demonstrates the usage of the `useTransition` hook in a React component. It initializes `isPending` and `startTransition` from the hook.  The `changePage` function uses `startTransition` to update the page state, marking the update as a transition, thus allowing other urgent updates to be processed first.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/use-transition.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { useTransition, useState } from 'react';
import { Posts } from './Posts';
import { Home } from './Home';
import { Contact } from './Contact';

export function App() {
  const [isPending, startTransition] = useTransition();
  const [page, setPage] = useState('home');

  function changePage(newPage: string) {
    startTransition(() => {
      setPage(newPage);
    });
  }

  return (
    <>
      <button onClick={() => changePage('home')}>Home</button>
      <button onClick={() => changePage('posts')}>Posts</button>
      <button onClick={() => changePage('contact')}>Contact</button>
      <hr />
      {isPending && <div>Loading...</div>}
      {page === 'home' && <Home />}
      {page === 'posts' && <Posts />}
      {page === 'contact' && <Contact />}
    </>
  );
}
```

----------------------------------------

TITLE: Running JavaScript with Node.js
DESCRIPTION: This command executes a JavaScript file (app.js) using the Node.js runtime environment. Node.js interprets and runs the JavaScript code, producing any output or side effects defined in the script.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/running-typescript@qdy4ZIY2EKgmPNdu_ndcg.md#_snippet_1

LANGUAGE: bash
CODE:
```
node app.js
```

----------------------------------------

TITLE: Validating a MongoDB collection
DESCRIPTION: This code snippet demonstrates the basic syntax for validating a MongoDB collection using the `db.runCommand` method. It uses the `validate` operator with the name of the collection to be validated. The command checks the internal structures of the collection for correctness.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/validate.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.runCommand({validate: "<collection_name>", options...})
```

----------------------------------------

TITLE: Initializing a pointer in C++
DESCRIPTION: This code snippet shows how to initialize a pointer to point to the memory address of another variable. The `&` operator is used to get the address of the variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/pointers-and-references@DWw8NxkLpIpiOSUaZZ1oA.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int num = 10;
int *ptr = &num;  // Pointer 'ptr' now points to the memory address of 'num'
```

----------------------------------------

TITLE: Xdebug Tracing
DESCRIPTION: This code snippet demonstrates how to use Xdebug to trace the execution of PHP code. `xdebug_start_trace()` starts the tracing process, and `xdebug_stop_trace()` stops it. All code executed between these two functions will be profiled by Xdebug, and the profiling data can then be analyzed to identify performance bottlenecks.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/profiling-techniques@_Dh78x_tPLqZweg--qZFQ.md#_snippet_0

LANGUAGE: PHP
CODE:
```
xdebug_start_trace();
// Your code here
xdebug_stop_trace();
```

----------------------------------------

TITLE: Comma Operator Evaluation in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how the comma operator evaluates multiple expressions and returns the value of the last expression. The variable 'x' is incremented and then reassigned to its incremented value.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/comma-operator.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
let x = 1;
x = (x++, x);

console.log(x); // 2
```

----------------------------------------

TITLE: Calculus Quiz Questions - LLM Output
DESCRIPTION: This code snippet represents the output of an LLM after being prompted to generate calculus quiz questions. The questions cover various topics from Calculus I including derivatives, integrals, and tangent lines. The expected input is the prompt provided in the previous snippet, and the output is a series of questions related to calculus.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/study-buddy.md#_snippet_2

LANGUAGE: text
CODE:
```
1. What is the derivative of y = x3?
2. Evaluate the indefinite integral of x3 + 5x2 + 7x + 4.
3. What is the product rule for derivatives?
4. Find the equation of the line tangent to y = x2 at the point (4, 16).
5. What is the second derivative of y = x4?
```

----------------------------------------

TITLE: Explaining Terms with LLMs - Prompt
DESCRIPTION: This code snippet demonstrates a prompt used to ask an LLM to explain a complex term from a textbook passage. The prompt includes the relevant context and a direct question about the term's meaning. The expected output is a clear and concise explanation suitable for someone unfamiliar with the topic.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/study-buddy.md#_snippet_0

LANGUAGE: text
CODE:
```
Because of adaptations to xeric conditions and the presence of less derived woods in Pereskioideae, the Cactaceae is one of the most interesting families both anatomically and morphologically. 

What do less derived woods mean?
```

----------------------------------------

TITLE: MongoDB $lookup Syntax
DESCRIPTION: This JSON snippet shows the general syntax for the $lookup operator in a MongoDB aggregation pipeline. It specifies the 'from' collection to join, the 'localField' from the input documents, the 'foreignField' from the 'from' collection, and the 'as' output array field name.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/lookup.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "$lookup": {
    "from": "<collection_name>",
    "localField": "<field_from_input_documents>",
    "foreignField": "<field_from_documents_of_the_from_collection>",
    "as": "<output_array_field>"
  }
}
```

----------------------------------------

TITLE: String Creation from String Slice - Rust
DESCRIPTION: This code snippet shows how to convert a string slice (`&str`) to a `String` using the `to_string()` method. This is another way to initialize a `String` when you have a string slice available.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/data-structures/string.md#_snippet_1

LANGUAGE: Rust
CODE:
```
"Hello, world!".to_string()
```

----------------------------------------

TITLE: Callback hell example
DESCRIPTION: This JavaScript code snippet illustrates the problem of "callback hell", where multiple nested callbacks make the code difficult to read and maintain. Each `doTask` function is assumed to perform an asynchronous operation, and the callbacks are chained to execute tasks sequentially. The nesting quickly becomes unmanageable as the number of tasks increases.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/async-javascript.md#_snippet_1

LANGUAGE: javascript
CODE:
```
doTask1(() => {
  doTask2(() => {
    doTask3(() => {
      console.log('All tasks done!');
    });
  });
});
```

----------------------------------------

TITLE: C++ For Loop
DESCRIPTION: This code demonstrates a for loop in C++. It consists of three parts: 'initialization', 'condition', and 'update'. The 'initialization' is executed once at the beginning. The loop continues as long as the 'condition' is true. The 'update' is executed after each iteration. 'condition' represents any boolean expression.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/introduction-to-language@NvODRFR0DLINB0RlPSsvt.md#_snippet_6

LANGUAGE: cpp
CODE:
```
for (initialization; condition; update) {
    // Code to execute while the condition is true
}
```

----------------------------------------

TITLE: Using Command Pattern in PHP
DESCRIPTION: This code demonstrates how to use the Command pattern.  It creates instances of the `Bulb`, `TurnOn`, `TurnOff`, and `RemoteControl` classes. Then it submits the turn on and turn off commands to the remote control, which executes them.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_51

LANGUAGE: php
CODE:
```
$bulb = new Bulb();

$turnOn = new TurnOn($bulb);
$turnOff = new TurnOff($bulb);

$remote = new RemoteControl();
$remote->submit($turnOn); // Bulb has been lit!
$remote->submit($turnOff); // Darkness!
```

----------------------------------------

TITLE: Display help for a shell built-in - bash
DESCRIPTION: This command displays help information for a specified shell built-in function. It provides a brief description of the function and its usage.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-basics/command-help.md#_snippet_1

LANGUAGE: bash
CODE:
```
help [command]
```

----------------------------------------

TITLE: Initializing Express Server with Basic Authentication Middleware
DESCRIPTION: This code snippet sets up a basic Express server and registers the authentication middleware.  It requires the 'express' package and a custom 'authMiddleware' module. The middleware handles authentication checks for all routes. The server listens on port 3000 and displays a message upon successful start.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-basic-authentication.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// src/index.js

const express = require('express');
const authMiddleware = require('./auth');

const app = express();
const port = 3000;

// This middleware is where we have the
// basic authentication implementation
app.use(authMiddleware);

app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(port, () => {
  console.log(`App running @ http://localhost:${port}`);
});
```

----------------------------------------

TITLE: Inserting Max Key into a MongoDB Document (JavaScript)
DESCRIPTION: This code snippet demonstrates how to insert a Max Key value into a MongoDB document using JavaScript.  It creates a document with an ObjectId, a string field, and a field assigned the MaxKey() value. The MaxKey() ensures this document sorts after other documents.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/max-key.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
  _id: ObjectId("some_id_value"),
  field1: "value1",
  myMaxKeyField: MaxKey()
}
```

----------------------------------------

TITLE: SSH into Database Server (Using Config)
DESCRIPTION: This command uses the SSH configuration file to connect to the database server using the alias `db`. The configuration file handles the jump server and other necessary settings for the connection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_13

LANGUAGE: bash
CODE:
```
# SSH into the database server
ssh db
```

----------------------------------------

TITLE: Reading/Writing Entire File as String in Java 11+
DESCRIPTION: This snippet demonstrates the use of `Files.readString` and `Files.writeString` introduced in Java 11. These methods read the entire file content into a string or write a string to a file. The snippet does not contain explicit implementation but specifies functionality.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/java/content/file-operations@NowpzyPVFcX082j5YS5i8.md#_snippet_3

LANGUAGE: Java
CODE:
```
Files.readString / Files.writeString // reads the whole file and puts it into a string - since Java 11
```

----------------------------------------

TITLE: Delete To-Do Item Request Example
DESCRIPTION: Shows the structure of a DELETE request to remove a to-do item from the /todos/{id} endpoint. User authentication and authorization are required to delete the resource.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_10

LANGUAGE: HTTP
CODE:
```
DELETE /todos/1
```

----------------------------------------

TITLE: Labeling Issues with GitHub CLI
DESCRIPTION: This command adds a label to an existing issue. The issue number and label name are required as arguments. The GitHub CLI must be installed and authenticated.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/issue-management@kGnZifvXbHBf5zXIsfAQw.md#_snippet_3

LANGUAGE: Shell
CODE:
```
gh issue label <issue-number> <label-name>
```

----------------------------------------

TITLE: Implementing the State Pattern in PHP
DESCRIPTION: This PHP code showcases the State pattern, which allows an object to alter its behavior when its internal state changes. It defines a `WritingState` interface and three state implementations: `UpperCase`, `LowerCase`, and `DefaultText`. The `TextEditor` class manages the current state and delegates writing behavior to it.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_72

LANGUAGE: PHP
CODE:
```
interface WritingState
{
    public function write(string $words);
}

class UpperCase implements WritingState
{
    public function write(string $words)
    {
        echo strtoupper($words);
    }
}

class LowerCase implements WritingState
{
    public function write(string $words)
    {
        echo strtolower($words);
    }
}

class DefaultText implements WritingState
{
    public function write(string $words)
    {
        echo $words;
    }
}
```

LANGUAGE: PHP
CODE:
```
class TextEditor
{
    protected $state;

    public function __construct(WritingState $state)
    {
        $this->state = $state;
    }

    public function setState(WritingState $state)
    {
        $this->state = $state;
    }

    public function type(string $words)
    {
        $this->state->write($words);
    }
}
```

LANGUAGE: PHP
CODE:
```
$editor = new TextEditor(new DefaultText());

$editor->type('First line');

$editor->setState(new UpperCase());

$editor->type('Second line');
$editor->type('Third line');

$editor->setState(new LowerCase());

$editor->type('Fourth line');
$editor->type('Fifth line');

// Output:
// First line
// SECOND LINE
// THIRD LINE
// fourth line
// fifth line
```

----------------------------------------

TITLE: Multiple Inheritance Example in C++
DESCRIPTION: This code demonstrates multiple inheritance with the `Dog` class inheriting from both `Animal` and `Mammal` classes. It shows how the derived class can access members from both base classes and define its own members. The example includes the necessary iostream header for console output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/multiple-inheritance@WjHpueZDK-d3oDNMVZi9w.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>

// Base class 1
class Animal
{
public:
    void eat()
    {
        std::cout << "I can eat!\n";
    }
};

// Base class 2
class Mammal
{
public:
    void breath()
    {
        std::cout << "I can breathe!\n";
    }
};

// Derived class inheriting from both Animal and Mammal
class Dog : public Animal, public Mammal
{
public:
    void bark()
    {
        std::cout << "I can bark! Woof woof!\n";
    }
};

int main()
{
    Dog myDog;

    // Calling members from both base classes
    myDog.eat();
    myDog.breath();
    
    // Calling a member from the derived class
    myDog.bark();

    return 0;
}
```

----------------------------------------

TITLE: MongoDB Sample Documents for $gte Example
DESCRIPTION: This code snippet provides sample documents in a MongoDB collection named `products`. These documents contain `_id`, `product`, and `price` fields. They are used to illustrate the usage of the `$gte` operator.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/gte.md#_snippet_1

LANGUAGE: javascript
CODE:
```
[  { _id: 1, product: 'A', price: 10 },  { _id: 2, product: 'B', price: 20 },  { _id: 3, product: 'C', price: 30 },  { _id: 4, product: 'D', price: 40 },  { _id: 5, product: 'E', price: 50 },];
```

----------------------------------------

TITLE: Log Archive Tool Usage - Bash
DESCRIPTION: This code snippet demonstrates how to use the `log-archive` tool from the command line. It takes the log directory as an argument.  The tool is expected to archive the logs present in the provided directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/log-archive-tool.md#_snippet_0

LANGUAGE: bash
CODE:
```
log-archive <log-directory>
```

----------------------------------------

TITLE: Comparison Greater Than Operator in C++
DESCRIPTION: Demonstrates the greater than operator (>) in C++. This operator checks if the first operand is greater than the second. It returns true if it is, and false otherwise. The example shows comparing two integer literals and assigning the boolean result to a boolean variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_8

LANGUAGE: cpp
CODE:
```
bool isGreater = (5 > 3); // isGreater will be true
```

----------------------------------------

TITLE: Simple Bash Script
DESCRIPTION: This is a basic bash script that prints "Hello, World!" to the terminal. It starts with the shebang `#!/bin/bash` to specify the interpreter. The `echo` command is used to output the string.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-programming/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/bin/bash
# My first script
echo "Hello, World!"
```

----------------------------------------

TITLE: Creating Markdown table from structured data
DESCRIPTION: This snippet shows an example of a Markdown table representation of structured data.  It displays Gender, Occasion, and Age in years, showcasing the conversion from potentially a JSON format.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/structured-data.md#_snippet_1

LANGUAGE: markdown
CODE:
```
| Gender | Occasion | Age (years) |
|--------|----------|-------------|
| Female | Birthday | 1.5         |
```

----------------------------------------

TITLE: Internal CSS Styling in HTML
DESCRIPTION: Illustrates how to embed CSS styles within an HTML document using the `<style>` tag inside the `<head>` section. This is suitable for page-specific styles. Changes will be applied to all matching elements on the page.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/include-css.md#_snippet_1

LANGUAGE: html
CODE:
```
<style>
p { color: red; }
</style>
```

----------------------------------------

TITLE: Declaring a pointer in C++
DESCRIPTION: This code snippet demonstrates how to declare a pointer variable in C++. The `dataType` specifies the type of variable the pointer will point to, and `pointerName` is the name of the pointer variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/pointers-and-references@DWw8NxkLpIpiOSUaZZ1oA.md#_snippet_0

LANGUAGE: cpp
CODE:
```
dataType *pointerName;
```

----------------------------------------

TITLE: replaceOne() Syntax in MongoDB
DESCRIPTION: This code snippet illustrates the syntax for the `replaceOne()` method in MongoDB.  The `replaceOne()` method replaces the first document that matches the filter with a new document.  The `<filter>` specifies the document to replace, `<replacement>` is the new document, and `<options>` provides optional configuration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/update-methods.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.replaceOne(<filter>, <replacement>, <options>)
```

----------------------------------------

TITLE: Including a Single Field - JavaScript
DESCRIPTION: This snippet demonstrates the basic syntax for using the `$include` operator to include a single field in the query result. The field is specified by its name, and the value `1` indicates inclusion.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/include.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
  field: 1;
}
```

----------------------------------------

TITLE: Handling errors using event emitters in Node.js
DESCRIPTION: This code snippet demonstrates how to handle errors when reading a file asynchronously using event emitters in Node.js. The `fs.createReadStream` method is used to create a readable stream, and the `.on('data')` and `.on('error')` methods are used to handle data and errors that occur during the process. The module 'fs' is imported from 'node:fs'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/error-handling.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import fs from 'node:fs';

const reader = fs.createReadStream('file.md', 'utf-8');
reader.on('data', (data) => {
  console.log(data);
});

reader.on('error', (err) => {
  console.error(err);
});
```

----------------------------------------

TITLE: Using Singleton Instance in PHP
DESCRIPTION: This snippet shows how to access the Singleton instance of the `President` class using the `getInstance` method.  It demonstrates that subsequent calls to `getInstance` return the same object instance.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_17

LANGUAGE: php
CODE:
```
$president1 = President::getInstance();
$president2 = President::getInstance();

var_dump($president1 === $president2); // true
```

----------------------------------------

TITLE: Sum Array with reduce() - JavaScript
DESCRIPTION: This example demonstrates summing the numbers in an array using the `reduce()` method in JavaScript. The reducer function adds the current value to the accumulator, starting with an initial value of 0. The result is the sum of all numbers in the array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/reduce-method.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const numbers = [1, 2, 3, 4, 5, 6];

const sum = numbers.reduce((accumulator, currentValue) => {
  return accumulator + currentValue;
}, 0);

console.log(numbers); // [1, 2, 3, 4, 5, 6]
console.log(sum); // 21
```

----------------------------------------

TITLE: OR (||) in C++
DESCRIPTION: Demonstrates the 'OR' logical operator in C++. This operator combines two boolean values and returns true if at least one of the operands is true, and false only if both operands are false.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_12

LANGUAGE: cpp
CODE:
```
true || false // true
false || false // false
```

----------------------------------------

TITLE: Infinite While Loop in JavaScript
DESCRIPTION: This code snippet demonstrates how to create an infinite loop using a `while` loop in JavaScript. The loop continues indefinitely because the condition is always `true`.  No dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/infinite-loop.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
while (true) {
  // do something
}
```

----------------------------------------

TITLE: Zend Debugger: Connector Address Retrieval (PHP)
DESCRIPTION: This code snippet illustrates the usage of `zend_debugger_connector_address()` function in PHP. This function is used to retrieve the IP address of the debugger currently being used. It is part of the Zend Debugger extension and requires the debugger to be properly configured and active.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/zend-debugger@KpQb5Zh3GUcbYUyXHvyu2.md#_snippet_0

LANGUAGE: PHP
CODE:
```
`zend_debugger_connector_address()`
```

----------------------------------------

TITLE: Checking Pointer Types with std::is_pointer C++
DESCRIPTION: This code demonstrates how to use `std::is_pointer` from the `<type_traits>` header to check if a given type is a pointer. It includes the necessary header, declares an integer and a pointer to an integer, and uses `std::is_pointer` with `decltype` to determine if each variable is a pointer. The results are printed to the console using `std::cout` and `std::boolalpha` for boolean output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/type-traits@WptReUOwVth3C9-AVmMHF.md#_snippet_0

LANGUAGE: C++
CODE:
```
#include <iostream>
#include <type_traits>

int main() {
    int a;
    int* a_ptr = &a;

    std::cout << "Is 'a' a pointer? " << std::boolalpha << std::is_pointer<decltype(a)>::value << '\n';
    std::cout << "Is 'a_ptr' a pointer? " << std::boolalpha << std::is_pointer<decltype(a_ptr)>::value << '\n';

    return 0;
}
```

----------------------------------------

TITLE: Cache-Aside Implementation in Python
DESCRIPTION: This Python code demonstrates the cache-aside pattern. It first attempts to retrieve user data from the cache using `cache.get()`. If the data is not found in the cache (cache miss), it queries the database using `db.query()`. If the data is found in the database, it's serialized to JSON format using `json.dumps()` and added to the cache using `cache.set()` before being returned.  The function expects a `user_id` as input and returns the user object, either from the cache or the database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/system-design/content/cache-aside@bffJlvoLHFldS0CluWifP.md#_snippet_0

LANGUAGE: python
CODE:
```
def get_user(self, user_id):
  user = cache.get("user.{0}", user_id)
  if user is None:
    user = db.query("SELECT * FROM users WHERE user_id = {0}", user_id)
      if user is not None:
        key = "user.{0}".format(user_id)
        cache.set(key, json.dumps(user))
  return user
```

----------------------------------------

TITLE: Testing Create Book Endpoint (Go)
DESCRIPTION: This Go test function, `TestCreateBook`, tests the functionality of creating a book via the `/book` endpoint using a mock HTTP request. It utilizes the `gin-gonic/gin` framework for routing and `net/http/httptest` for creating test requests and responses.  It verifies the HTTP status code and response data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_19

LANGUAGE: go
CODE:
```
func TestCreateBook(t *testing.T) {
	setupTestDB()
	router := gin.Default()
	router.POST("/book", api.CreateBook)

	book := api.Book{
		Title: "Demo Book name", Author: "Demo Author name", Year: 2021,
	}

	jsonValue, _ := json.Marshal(book)
	req, _ := http.NewRequest("POST", "/book", bytes.NewBuffer(jsonValue))

	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	if status := w.Code; status != http.StatusCreated {
		t.Errorf("Expected status %d, got %d", http.StatusCreated, status)
	}
	var response api.JsonResponse
	json.NewDecoder(w.Body).Decode(&response)

	if response.Data == nil {
		t.Errorf("Expected book data, got nil")
	}
}
```

----------------------------------------

TITLE: MongoDB $not Operator Syntax (JavaScript)
DESCRIPTION: The `$not` operator negates a condition, returning documents where the condition is false. This snippet displays the general syntax for using the `$not` operator in a MongoDB query. It requires a MongoDB database connection and a collection to query.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/index.md#_snippet_4

LANGUAGE: javascript
CODE:
```
{
  key: {
    $not: {
      operator_expression;
    }
  }
}
```

----------------------------------------

TITLE: Performing Text Search Query (JavaScript)
DESCRIPTION: This JavaScript code snippet shows how to perform a text search query on a MongoDB collection using Atlas Search. It utilizes the `$search` operator with the `text` operator to search for the phrase 'mongodb atlas search' within the 'title' field of documents in the collection.  The `db.collection.find()` method executes the query.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/atlas-search-indexes.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.find({
  $search: {
    text: {
      query: 'mongodb atlas search',
      path: 'title',
    },
  },
});
```

----------------------------------------

TITLE: Using Pointers in C++
DESCRIPTION: This snippet shows how to declare a pointer variable `p` and assign it the memory address of an integer variable `num` using the `&` operator. It explains how pointers store memory addresses.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/language-concepts@-6fwJQOfsorgHkoQGp4T3.md#_snippet_4

LANGUAGE: cpp
CODE:
```
int num = 10;
int* p = &num; // p stores the address of num
```

----------------------------------------

TITLE: Comparison Less Than Or Equal To Operator in C++
DESCRIPTION: Demonstrates the less than or equal to operator (<=) in C++. This operator checks if the first operand is less than or equal to the second. It returns true if it is, and false otherwise. The example shows comparing two integer literals and assigning the boolean result to a boolean variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_9

LANGUAGE: cpp
CODE:
```
bool isLessOrEqual = (5 <= 3); // isLessOrEqual will be false
```

----------------------------------------

TITLE: MongoDB $and Operator Syntax (JavaScript)
DESCRIPTION: The `$and` operator combines multiple conditions, returning documents where all conditions are true. This snippet shows the basic syntax for using the `$and` operator within a MongoDB query. It requires a MongoDB database connection and a collection to query.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/index.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{ $and: [ { condition1 }, { condition2 }, ... ] }
```

----------------------------------------

TITLE: Using reinterpret_cast to Convert Pointers in C++
DESCRIPTION: This code demonstrates how to use `reinterpret_cast` to convert an integer pointer (`int*`) to a character pointer (`char*`). It iterates through the bytes of the integer and prints them as characters. It is crucial to be careful when dereferencing pointers cast with `reinterpret_cast` to avoid undefined behavior. The code depends on the iostream library.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/reinterpret_cast@ZMyFDJrpCauGrY5NZkOwg.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

int main() {
    int num = 42;
    int *num_ptr = &num;

    // Disguise the integer pointer as a char pointer
    char *char_ptr = reinterpret_cast<char *>(num_ptr);

    for (size_t i = 0; i < sizeof(int); ++i) {
        // Print the individual bytes of the integer as characters
        std::cout << "Byte " << i << ": " << char_ptr[i] << '\n';
    }

    return 0;
}
```

----------------------------------------

TITLE: Update Blog Post Response Example
DESCRIPTION: This JSON snippet shows the expected response when a blog post is successfully updated using the PUT method. It includes the updated values along with the 'createdAt' and 'updatedAt' timestamps. A 200 OK status code should accompany this response.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/blogging-platform-api.md#_snippet_4

LANGUAGE: json
CODE:
```
{
  "id": 1,
  "title": "My Updated Blog Post",
  "content": "This is the updated content of my first blog post.",
  "category": "Technology",
  "tags": ["Tech", "Programming"],
  "createdAt": "2021-09-01T12:00:00Z",
  "updatedAt": "2021-09-01T12:30:00Z"
}
```

----------------------------------------

TITLE: Implementing Colleague Class in Mediator Pattern in PHP
DESCRIPTION: This code defines the `User` class, which represents a colleague in the Mediator pattern. Each user has a name and a reference to the `ChatRoomMediator`. The `send` method allows users to send messages through the mediator.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_56

LANGUAGE: php
CODE:
```
class User {
    protected $name;
    protected $chatMediator;

    public function __construct(string $name, ChatRoomMediator $chatMediator) {
        $this->name = $name;
        $this->chatMediator = $chatMediator;
    }

    public function getName() {
        return $this->name;
    }

    public function send($message) {
        $this->chatMediator->showMessage($this, $message);
    }
}
```

----------------------------------------

TITLE: Updating Boolean Data in MongoDB
DESCRIPTION: This code snippet demonstrates how to update a boolean value in a MongoDB document using the `$set` operator. It changes the 'isActive' field of the user named 'John Doe' to false.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/boolean.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.users.updateOne({ name: 'John Doe' }, { $set: { isActive: false } });
```

----------------------------------------

TITLE: Delete operation in MongoDB using Mongoose
DESCRIPTION: This code snippet demonstrates a delete operation in MongoDB using Mongoose. It deletes the user with the name 'Jane Doe'. Requires Mongoose to be initialized and connected to the database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/nodejs-database-crud.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
User.deleteOne({ name: 'Jane Doe' });
```

----------------------------------------

TITLE: Getting Element Dimensions with getBoundingClientRect
DESCRIPTION: This code snippet demonstrates how to retrieve the dimensions and position of an HTML element using the `getBoundingClientRect()` method. It selects an element with the class `.roadmap-wrapper` and then logs the resulting `DOMRect` object to the console. The `DOMRect` object contains properties such as x, y, width, height, top, right, bottom, and left, which represent the element's position and size relative to the viewport.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/measure-dimensions.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const roadmapWrapper = document.querySelector('.roadmap-wrapper');
const dimensions = roadmapWrapper.getBoundingClientRect();

console.log(dimensions); // DOMRect { x: 8, y: 8, width: 784, height: 784, top: 8, right: 792, bottom: 792, left: 8 }
```

----------------------------------------

TITLE: Defining Constructor Parameters with Access Modifiers (TypeScript)
DESCRIPTION: This code snippet demonstrates how to define constructor parameters with access modifiers (private, public) and type annotations in a TypeScript class. The parameters are automatically assigned to properties of the class with the same name. The 'name' parameter is private and the 'age' parameter is public, controlling their accessibility.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/constructor-params@3XrKbK5Od2eoM0BLaS4kU.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Example {
  constructor(private name: string, public age: number) {}
}
```

----------------------------------------

TITLE: Rendering HTML with v-html in Vue.js
DESCRIPTION: This code snippet demonstrates how to use the `v-html` directive in Vue.js to render HTML content.  The directive binds the innerHTML of the element to the expression. Be cautious when using `v-html` with user-provided content due to potential security risks like XSS attacks. No specific dependencies are required beyond Vue.js itself.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/vue/content/v-html@bZxtIBeIfeUcR32LZWrPW.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<template>
  <p v-html="'<h1>Text</h1>'"></p>
</template>
```

----------------------------------------

TITLE: Listening for Custom Event
DESCRIPTION: This snippet demonstrates how to listen for a custom event using the `addEventListener` method. It attaches a callback function to the 'roadmap-updated' event. When the event is dispatched, the callback function logs the event detail to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/custom-event.md#_snippet_1

LANGUAGE: js
CODE:
```
element.addEventListener('roadmap-updated', (event) => {
  console.log(event.detail); // { name: 'JavaScript' }
});
```

----------------------------------------

TITLE: MongoDB $ne Operator Example Result
DESCRIPTION: This snippet illustrates the expected result of the example query when the `category` is _not_ 'Fruits'. It shows a document with `_id`, `name`, and `category` fields where the category value is 'Vegetables'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/ne.md#_snippet_2

LANGUAGE: javascript
CODE:
```
{ "_id" : 3, "name" : "Carrot", "category" : "Vegetables" }
```

----------------------------------------

TITLE: Remove Child Element - JavaScript
DESCRIPTION: This snippet demonstrates how to remove a child element from its parent using the `removeChild()` method. Requires a reference to both the parent and the child element to be removed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/js-dom-manipulation.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
removeChild()
```

----------------------------------------

TITLE: Forking a Process in C
DESCRIPTION: This C code snippet demonstrates the process of forking using the `fork()` system call in a Linux environment. The `fork()` call creates a child process, which is a copy of the parent process.  If successful, `fork()` returns the child's process ID to the parent and 0 to the child. On failure, it returns a negative value.  The code includes error handling to check if the forking process was successful.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/proc-forking.md#_snippet_0

LANGUAGE: C
CODE:
```
#include<sys/types.h>
#include<unistd.h>
#include<stdio.h>

int main()
{
    pid_t child_pid;

    // Try creating a child process
    child_pid = fork();

    // If a child is successfully created
    if(child_pid >= 0)
    printf("Child created with PID: %d\n", child_pid);
    else
    printf("Fork failed\n");
    return 0;
}
```

----------------------------------------

TITLE: Getting a Single Book via Curl
DESCRIPTION: This bash command uses `curl` to send a GET request to the `/book/{id}` endpoint to retrieve a specific book by its ID.  The book ID is appended to the URL.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_15

LANGUAGE: bash
CODE:
```
curl --location 'localhost:8080/book/3'
```

----------------------------------------

TITLE: Initializing Spack Environment (Bash)
DESCRIPTION: This snippet clones the Spack Git repository, navigates into it, and then sets up the Spack environment using the provided setup script. It is a crucial first step to using Spack, ensuring that the Spack commands are available in your shell. It requires Git to be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/spack@3ehBc2sKVlPj7dn4RVZCH.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/spack/spack.git
cd spack
. share/spack/setup-env.sh
```

----------------------------------------

TITLE: Implementing Theme Classes
DESCRIPTION: These snippets define the `DarkTheme`, `LightTheme`, and `AquaTheme` classes, which implement the `Theme` interface. Each class provides a different color scheme for the web pages.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_26

LANGUAGE: php
CODE:
```
class DarkTheme implements Theme
{
    public function getColor()
    {
        return 'Dark Black';
    }
}
class LightTheme implements Theme
{
    public function getColor()
    {
        return 'Off white';
    }
}
class AquaTheme implements Theme
{
    public function getColor()
    {
        return 'Light blue';
    }
}
```

----------------------------------------

TITLE: Pre-increment Operator in JavaScript
DESCRIPTION: This code snippet demonstrates the pre-increment operator in JavaScript.  It increments the value of the variable 'x' by 1 before returning the incremented value.  The initial value of 'x' is 1. The expected output is 2 for both console.log statements.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/increment-operator.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
let x = 1;
console.log(++x); // 2
console.log(x); // 2
```

----------------------------------------

TITLE: Using std::enable_if for Template Specialization C++
DESCRIPTION: This code demonstrates how to use `std::enable_if` to conditionally define a template function based on whether the template parameter `T` is an arithmetic type.  The `find_max` function is defined only when `std::is_arithmetic<T>::value` is true. This prevents the function from being used with non-arithmetic types and ensures that it is only defined for types like int, float, and double.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/type-traits@WptReUOwVth3C9-AVmMHF.md#_snippet_1

LANGUAGE: C++
CODE:
```
#include <iostream>
#include <type_traits>

template <typename T>
typename std::enable_if<std::is_arithmetic<T>::value, T>::type find_max(T a, T b) {
    return a > b ? a : b;
}

int main() {
    int max = find_max(10, 20);
    std::cout << "Max: " << max << '\n';

    return 0;
}
```

----------------------------------------

TITLE: Generating Madlibs with Random Choices in Python
DESCRIPTION: This snippet generates a madlib sentence by randomly selecting elements from three lists: prepositions, verbs, and nouns. The code uses the `random.choice()` function to pick a random item from each list and then formats them into a sentence. It demonstrates basic string formatting in Python.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/coding-assistance.md#_snippet_0

LANGUAGE: python
CODE:
```
import random

prepositions = ["at", "in", "on", "with", "under", "over"]
verbs = ["run", "jump", "dance", "sing", "laugh", "cry"]
nouns = ["cat", "dog", "tree", "flower", "book", "computer"]

preposition = random.choice(prepositions)
verb = random.choice(verbs)
noun = random.choice(nouns)

madlib = f"I {verb} {preposition} the {noun}."

print(madlib)
```

----------------------------------------

TITLE: Append Child Element - JavaScript
DESCRIPTION: This shows how to append a new child element to a parent element using the `appendChild()` method.  Before using this method you need to create the element using `document.createElement()`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/js-dom-manipulation.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
appendChild()
```

----------------------------------------

TITLE: Generating External Debug Symbols with g++
DESCRIPTION: This command compiles a C++ source file into an executable and generates a separate file containing debugging symbols. The `-gsplit-dwarf` flag instructs the g++ compiler to create an external debug symbol file (``.dwo``).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/debugging-symbols@sR_FxGZHoMCV9Iv7z2_SX.md#_snippet_1

LANGUAGE: bash
CODE:
```
g++ -g -gsplit-dwarf -o my_program my_program.cpp
```

----------------------------------------

TITLE: Prototype Pattern: Cloning Example in PHP
DESCRIPTION: Demonstrates how to use the clone keyword to create a copy of a Sheep object and modify its properties. The example creates an original Sheep object and then clones it, changing the name of the cloned object.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_15

LANGUAGE: PHP
CODE:
```
$original = new Sheep('Jolly');
echo $original->getName(); // Jolly
echo $original->getCategory(); // Mountain Sheep

// Clone and modify what is required
$cloned = clone $original;
$cloned->setName('Dolly');
echo $cloned->getName(); // Dolly
echo $cloned->getCategory(); // Mountain sheep
```

----------------------------------------

TITLE: Generating Build Files with CMake
DESCRIPTION: This command generates build files using CMake. The '..' argument specifies that the CMakeLists.txt file is located in the parent directory. This step is crucial for setting up the build environment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/cmake@ysnXvSHGBMMozBJyXpHl5.md#_snippet_2

LANGUAGE: shell
CODE:
```
cmake ..
```

----------------------------------------

TITLE: Visualizing Hoisting of Variable - JavaScript
DESCRIPTION: This code snippet provides a visualization of how the previous hoisting example is interpreted by JavaScript. The declaration `var x;` is implicitly moved to the top of the scope before execution. This shows that the variable exists, but it is undefined until initialized.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/hoisting.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
var x;
console.log(x === undefined); // true
x = 3;
console.log(x); // 3
```

----------------------------------------

TITLE: cppan.yml Configuration File Example
DESCRIPTION: This snippet provides an example of a `cppan.yml` file used to define project dependencies for the cppan package manager. It specifies the API version and a list of dependent packages.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/package-managers@h29eJG1hWHa7vMhSqtfV2.md#_snippet_2

LANGUAGE: yaml
CODE:
```
#
# cppan.yml
#

project:
  api_version: 1

  depend:
    - pvt.cppan.demo.sqlite3
    - pvt.cppan.demo.xz_utils.lzma
```

----------------------------------------

TITLE: Installing a library using Conan
DESCRIPTION: This snippet demonstrates how to install a specific version of a library using the Conan package manager. It utilizes the `conan install` command followed by the package name and version identifier.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/package-managers@h29eJG1hWHa7vMhSqtfV2.md#_snippet_0

LANGUAGE: sh
CODE:
```
conan install poco/1.9.4@
```

----------------------------------------

TITLE: Builder Pattern: Usage Example in PHP
DESCRIPTION: Demonstrates how to use the BurgerBuilder class to create a Burger object with specific options.  The example creates a burger of size 14, with pepperoni, lettuce, and tomato.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_13

LANGUAGE: PHP
CODE:
```
$burger = (new BurgerBuilder(14))
                    ->addPepperoni()
                    ->addLettuce()
                    ->addTomato()
                    ->build();
```

----------------------------------------

TITLE: Delete operation in PostgreSQL using pg
DESCRIPTION: This code snippet demonstrates a delete operation in PostgreSQL using the pg driver. It deletes the user with the name 'Jane Doe'. The 'pool' object must be initialized and connected to the database. Uses parameterized query to prevent SQL injection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/nodejs-database-crud.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
pool.query('DELETE FROM users WHERE name = $1', ['Jane Doe']);
```

----------------------------------------

TITLE: Printing Client IP using $_SERVER in PHP
DESCRIPTION: This code snippet demonstrates how to retrieve and print the client's IP address using the `$_SERVER['REMOTE_ADDR']` variable in PHP. It's a simple example that shows how to access server-related information. Ensure you sanitize the output to prevent potential security vulnerabilities.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/_server@7Ja2at_N9tRTlvSGahrqn.md#_snippet_0

LANGUAGE: php
CODE:
```
echo 'Your IP is: ' . $_SERVER['REMOTE_ADDR'];
```

----------------------------------------

TITLE: Comparison Not Equal To Operator in C++
DESCRIPTION: Demonstrates the not equal to operator (!=) in C++. This operator checks if two operands are not equal. It returns true if they are not equal, and false otherwise. The example shows comparing two integer literals and assigning the boolean result to a boolean variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_6

LANGUAGE: cpp
CODE:
```
bool isNotEqual = (5 != 3); // isNotEqual will be true
```

----------------------------------------

TITLE: Vue.js Image URL Binding with v-bind
DESCRIPTION: This code snippet demonstrates how to dynamically bind the `src` attribute of an `img` tag to a reactive data property `image_url` in Vue.js using the `v-bind` directive (shorthand `:`) . The `image_url` is defined as a ref, and its value is bound to the `src` attribute.  Changes to `image_url` will automatically update the image source.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/vue/content/v-bind@cuM9q9vYy8JpZPGeBffd1.md#_snippet_0

LANGUAGE: html
CODE:
```
<script setup>
  import { ref } from 'vue';
  const image_url = ref("path/to/image.png")
</script>

<template>
  <img :src="image_url" />
</template>
```

----------------------------------------

TITLE: Running Ansible Playbook
DESCRIPTION: This command executes the Ansible playbook `node_service.yml` with the tag `app`. This will run the tasks defined within the `app` role to deploy the Node.js application to the server. The application should then be accessible on port 80.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/nodejs-service-deployment.md#_snippet_0

LANGUAGE: bash
CODE:
```
ansible-playbook node_service.yml --tags app
```

----------------------------------------

TITLE: Customer Service Inquiry - Subproblem Identification
DESCRIPTION: This snippet presents the same customer inquiry but asks the language model to identify the subproblems that need to be solved first before answering the inquiry. This demonstrates the initial step of the Least to Most prompting technique: breaking down a complex problem into smaller, manageable parts. The prompt guides the model to think about the individual steps required to address the customer's question.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/prompting-techniques/least-to-most.md#_snippet_1

LANGUAGE: text
CODE:
```
CUSTOMER INQUIRY:
I just bought a T-shirt from your Arnold collection on March 1st. 
I saw that it was on discount, so bought a shirt that was originall $30, and got 40% off. 
I saw that you have a new discount for shirts at 50%. I'm wondering if 
I can return the shirt and have enough store credit to buy two of your shirts?

INSTRUCTIONS:
You are a customer service agent tasked with kindly responding to customer inquiries. 
Returns are allowed within 30 days. 
Today's date is March 29th. 
There is currently a 50% discount on all shirts. 
Shirt prices range from $18-$100 at your store. 
Do not make up any information about discount policies.
What subproblems must be solved before answering the inquiry?
```

----------------------------------------

TITLE: Multiplication Operator in C++
DESCRIPTION: Multiplies two numbers together and assigns the result to an integer variable 'product'. The variables 'a' and 'b' must be defined as integers before this operation. The resulting 'product' variable will store the product of 'a' and 'b'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/arithmetic-operators@8aOSpZLWwZv_BEYiurhyR.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int product = a * b;
```

----------------------------------------

TITLE: Declaring Ambient Module in TypeScript
DESCRIPTION: This code snippet demonstrates how to declare an ambient module named 'my-module' in a TypeScript declaration file (`.d.ts`). It defines the module's structure, including the exported `doSomething` function with its return type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/ambient-modules@k_5y77k8ZZ9_O2WpWXWTY.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// myModule.d.ts
declare module 'my-module' {
  export function doSomething(): void;
}
```

----------------------------------------

TITLE: MIT License Inclusion in C++
DESCRIPTION: This snippet demonstrates how to include the MIT license in a C++ project. It involves adding a license file and placing a notice at the top of source code files. The notice includes the copyright, SPDX identifier, and license details.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/licensing@sLVs95EOeHZldoKY0L_dH.md#_snippet_0

LANGUAGE: C++
CODE:
```
/* Copyright (C) [year] [author]
 * SPDX-License-Identifier:    MIT
 */
```

----------------------------------------

TITLE: Listing Installed Packages with Spack (Bash)
DESCRIPTION: This command lists all packages currently installed by Spack. It provides an overview of the software available in the Spack environment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/spack@3ehBc2sKVlPj7dn4RVZCH.md#_snippet_5

LANGUAGE: bash
CODE:
```
spack find
```

----------------------------------------

TITLE: Demonstrate Static Typing and Type Conversion in C++
DESCRIPTION: This C++ code demonstrates static typing by declaring variables with specific data types (int, double, char) at compile time. It also shows implicit type conversion when assigning values between variables of different types (double to int, int to char). Includes printing of converted and original values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/static-typing@f1djN0GxoeVPr_0cl6vMq.md#_snippet_0

LANGUAGE: C++
CODE:
```
#include <iostream>

int main() {
    int num = 65;        // 'num' is statically typed as an integer
    double pi = 3.14159; // 'pi' is statically typed as a double
    char c = 'c';        // 'c' is statically typed as a char

    c = num;    // This asssigment would convert num's value to ASCII equivalent character
    num = pi; // This assignment would convert pi's value from double type to int type
    
    std::cout << "The value of num is: " << num << '\n';
    std::cout << "The value of pi is: " << pi << '\n';
    std::cout << "The value of c is: "<< c << '\n';
    return 0;
}
```

----------------------------------------

TITLE: Initializing std::vector in C++
DESCRIPTION: This code snippet demonstrates how to initialize a `std::vector` in C++.  `std::vector` is a sequence container representing a dynamic array that can grow or shrink as needed. It requires including the `<vector>` header file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_0

LANGUAGE: cpp
CODE:
```
std::vector<int> my_vector;
```

----------------------------------------

TITLE: Builder Pattern: BurgerBuilder Class Definition in PHP
DESCRIPTION: Defines the BurgerBuilder class, which is responsible for building Burger objects step by step. It includes methods to add cheese, pepperoni, lettuce, and tomato, and a build method to create the final Burger object.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_12

LANGUAGE: PHP
CODE:
```
class BurgerBuilder
{
    public $size;

    public $cheese = false;
    public $pepperoni = false;
    public $lettuce = false;
    public $tomato = false;

    public function __construct(int $size)
    {
        $this->size = $size;
    }

    public function addPepperoni()
    {
        $this->pepperoni = true;
        return $this;
    }

    public function addLettuce()
    {
        $this->lettuce = true;
        return $this;
    }

    public function addCheese()
    {
        $this->cheese = true;
        return $this;
    }

    public function addTomato()
    {
        $this->tomato = true;
        return $this;
    }

    public function build(): Burger
    {
        return new Burger($this);
    }
}
```

----------------------------------------

TITLE: Animal Factory Class
DESCRIPTION: Defines the `AnimalFactory` class with a `createAnimal()` method. This method takes a string `type` as input and returns an instance of either `Dog` or `Cat` based on the type. It returns `null` if the type is not recognized.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/android/content/factory-pattern@DeOxj6RzQBYfEWV-M1Ybm.md#_snippet_3

LANGUAGE: Java
CODE:
```
public class AnimalFactory {
    public Animal createAnimal(String type) {
        if ("Dog".equals(type)) {
            return new Dog();
        } else if ("Cat".equals(type)) {
            return new Cat();
        }
        return null;
    }
}
```

----------------------------------------

TITLE: Using Random Access Iterator in C++
DESCRIPTION: This code snippet demonstrates the usage of random access iterators with a std::vector. It iterates forward through the vector and prints each element, then iterates backward from the second-to-last element to the first and prints each element. The iterator can jump directly to any element in the vector.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/iterators@Ebu8gzbyyXEeJryeE0SpG.md#_snippet_5

LANGUAGE: cpp
CODE:
```
std::vector<int> nums = {1, 2, 3, 4};
std::vector<int>::iterator itr;
for (itr = nums.begin(); itr != nums.end(); ++itr) {
    std::cout << *itr << " ";
}
for (itr -= 1; itr != nums.begin() - 1; --itr) {
    std::cout << *itr << " ";
}
```

----------------------------------------

TITLE: Creating Project Directory
DESCRIPTION: These bash commands create a directory named `go_book_api` and then change the current directory to the newly created directory. This is the initial step in setting up the project environment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_0

LANGUAGE: bash
CODE:
```
mkdir go_book_api && cd go_book_api
```

----------------------------------------

TITLE: Query Element by Class - JavaScript
DESCRIPTION: This snippet demonstrates how to select an element using its CSS class with `querySelector()`. The `querySelector()` method returns the first element within the document that matches the specified selector.  Using the class selector ".class".
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/js-dom-manipulation.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
querySelector(".class")
```

----------------------------------------

TITLE: Stack Memory Allocation Example in C++
DESCRIPTION: This code snippet demonstrates how local variables are stored in the stack memory.  The variable `x` is allocated on the stack when `functionExample` is called and automatically deallocated when the function returns.  No explicit allocation or deallocation is required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/memory-model@mSFwsTYvmg-GwG4_DEIEf.md#_snippet_0

LANGUAGE: cpp
CODE:
```
void functionExample() {
    int x = 10; // x is stored in the stack memory
}
```

----------------------------------------

TITLE: AND Operator (&&) Example JavaScript
DESCRIPTION: Demonstrates the AND operator (`&&`) in JavaScript, which returns the first falsy value or the last value if none are falsy. The examples show its behavior with strings, booleans and numbers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/logical-operators.md#_snippet_1

LANGUAGE: js
CODE:
```
console.log('hello' && 0); // 0
console.log(false && 'hello'); // false
console.log('hello' && 'world'); // world
```

----------------------------------------

TITLE: Chain of Responsibility Bitcoin Account Class
DESCRIPTION: This PHP code defines a `Bitcoin` class that extends the `Account` class. It represents a Bitcoin account with a specific balance. It inherits the `pay` and `canPay` methods from the base class, allowing it to participate in the chain of responsibility for handling payments.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_46

LANGUAGE: php
CODE:
```
class Bitcoin extends Account
{
    protected $balance;

    public function __construct(float $balance)
    {
        $this->balance = $balance;
    }
}

```

----------------------------------------

TITLE: Rule of Five - C++
DESCRIPTION: This snippet showcases the Rule of Five (C++11).  It extends the Rule of Three by including move constructor and move assignment operator.  This optimizes resource management by allowing efficient transfer of ownership.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/idioms@fb3bnfKXjSIjPAk4b95lg.md#_snippet_2

LANGUAGE: cpp
CODE:
```
class MyClass {
public:
    MyClass();
    MyClass(const MyClass& other); // Copy constructor
    MyClass(MyClass&& other); // Move constructor
    MyClass& operator=(const MyClass& other); // Copy assignment operator
    MyClass& operator=(MyClass&& other); // Move assignment operator
    ~MyClass(); // Destructor
};
```

----------------------------------------

TITLE: Example Debugger Output (GDB)
DESCRIPTION: This output shows an example of a debugger message generated by GDB when a SIGFPE (Arithmetic exception) signal is received due to division by zero. The message indicates the location of the error (file and line number) within the C++ code, providing information about the line that caused the exception. This helps the developer identify the cause of the error and make the necessary code changes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/understanding-debugger-messages@VtPb8-AJKzhTB0QbMtoU4.md#_snippet_2

LANGUAGE: text
CODE:
```
Program received signal SIGFPE, Arithmetic exception.
0x00005555555546fb in main () at test.cpp:7
7       int result = num1 / num2;
```

----------------------------------------

TITLE: Implicit Return Function Example in Rust
DESCRIPTION: This snippet defines a simple function `add` that takes two `i32` integer parameters and returns their sum implicitly. The absence of a semicolon at the end of the `one + two` expression makes it the implicit return value.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/syntax/functions.md#_snippet_0

LANGUAGE: Rust
CODE:
```
fn add(one: i32, two: i32) -> i32 { one + two }
```

----------------------------------------

TITLE: Adding Two Numbers Function in C++
DESCRIPTION: This code defines a function `addNumbers` that takes two integer parameters, `a` and `b`, and returns their sum. The `main` function calls `addNumbers` and prints the result to the console, demonstrating function usage.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/functions@oYi3YOc1GC2Nfp71VOkJt.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>

// Function to add two numbers
int addNumbers(int a, int b) {
    int sum = a + b;
    return sum;
}

int main() {
    int num1 = 5, num2 = 10;
    int result = addNumbers(num1, num2); // Calling the function
    std::cout << "The sum is: " << result << '\n';
    return 0;
}
```

----------------------------------------

TITLE: Generating JWT for Unit Tests in Go
DESCRIPTION: This Go code snippet creates a helper function `generateValidToken` to generate valid JWT tokens for testing purposes.  The secret key is retrieved from the environment variable. The generated token is signed using the secret key and can then be used to authenticate test requests.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_33

LANGUAGE: go
CODE:
```
package tests

import (
	// other imports
	"github.com/golang-jwt/jwt/v5"
)

var jwtSecret = []byte(os.Getenv("SECRET_TOKEN"))

func setupTestDB() {
	// setupTestDB goes here
}

func addBook() api.Book {
	// add book code goes here
}

func generateValidToken() string {
	expirationTime := time.Now().Add(15 * time.Minute)
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"exp": expirationTime.Unix(),
	})
	tokenString, _ := token.SignedString(jwtSecret)
	return tokenString
}
```

----------------------------------------

TITLE: Calculate Sum with Expression in MongoDB
DESCRIPTION: This snippet shows how to calculate the total quantity of items sold from an `orders` collection in MongoDB using the `$sum` operator along with an expression. The expression uses the `$multiply` operator to calculate the total price for each order (price * quantity), and then `$sum` adds up these total prices to give the total quantity. The aggregation groups all documents into a single group.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/sum.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.orders.aggregate([
  {
    $group: {
      _id: null,
      totalQuantity: { $sum: { $multiply: ['$price', '$quantity'] } },
    },
  },
]);
```

----------------------------------------

TITLE: if/else Statement in PHP
DESCRIPTION: This PHP snippet demonstrates a simple if/else statement. It checks if a number is greater than 5 and prints a corresponding message based on the outcome of the condition. The snippet uses the `echo` function to display the output to the console or browser.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/ifelse@-McOv-ZPTGayX7Mx2Thw1.md#_snippet_0

LANGUAGE: PHP
CODE:
```
$number = 10;
if ($number > 5) {
    echo "The number is greater than 5";
} else {
    echo "The number is not greater than 5";
}
```

----------------------------------------

TITLE: Using v-cloak Directive in HTML
DESCRIPTION: This code snippet demonstrates how to use the v-cloak directive in an HTML template. The v-cloak attribute is added to a div element containing a Vue.js binding ({{ message }}). This prevents the uncompiled template from being displayed until Vue has compiled it.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/vue/content/v-cloak@RrSekP8Ub01coegMwLP6a.md#_snippet_0

LANGUAGE: html
CODE:
```
<div v-cloak>
  {{ message }}
</div>
```

----------------------------------------

TITLE: Inheriting NonCopyable in C++
DESCRIPTION: Demonstrates inheriting from the `NonCopyable` class to make `MyClass` non-copyable. Any attempt to copy or assign objects of `MyClass` will result in a compilation error. The inheritance is private to prevent external access to the base class's public members.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/non-copyable--non-moveable@xjUaIp8gGxkN-cp8emJ2M.md#_snippet_1

LANGUAGE: cpp
CODE:
```
class MyClass : private NonCopyable {
  // MyClass is now non-copyable
};
```

----------------------------------------

TITLE: Testing API Endpoints without a Token using cURL
DESCRIPTION: This bash command demonstrates accessing a protected endpoint (/books) without providing a JWT. The expected outcome is an unauthorized response, highlighting the effectiveness of the JWT authentication middleware. It demonstrates that accessing any endpoint without a token will result in an 'Unauthorized' response.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_30

LANGUAGE: bash
CODE:
```
curl --location 'localhost:8080/books'
```

----------------------------------------

TITLE: Contact Component in React
DESCRIPTION: This code snippet defines a simple functional component `Contact` in React. It returns a `div` element containing the text "Contact". It serves as one of the pages in the example application and is used to demonstrate transitions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/use-transition.md#_snippet_2

LANGUAGE: javascript
CODE:
```
export function Contact() {
  return <div>Contact</div>;
}
```

----------------------------------------

TITLE: Uninstalling a Package with Spack (Bash)
DESCRIPTION: This command uninstalls a specified package using Spack. Replace `<package-name>` with the actual name of the package you wish to uninstall. Use with caution as it removes the package and its dependencies from the Spack environment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/spack@3ehBc2sKVlPj7dn4RVZCH.md#_snippet_6

LANGUAGE: bash
CODE:
```
spack uninstall <package-name>
```

----------------------------------------

TITLE: Update Short URL - Successful Response Example
DESCRIPTION: This JSON snippet shows a successful response (200 OK) after updating a short URL. It includes the ID, updated URL, short code, and timestamps for creation and update.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/url-shortening-service.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  "id": "1",
  "url": "https://www.example.com/some/updated/url",
  "shortCode": "abc123",
  "createdAt": "2021-09-01T12:00:00Z",
  "updatedAt": "2021-09-01T12:30:00Z"
}
```

----------------------------------------

TITLE: Divide function with exception handling in Java
DESCRIPTION: This Java code defines a `divide` method that takes two integers as input and returns the quotient. It throws an `ArithmeticException` if `b` is zero.  The `try-catch` block demonstrates how to handle the exception. `System.err.println` prints the error message to the standard error stream.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/go-vs-java.md#_snippet_1

LANGUAGE: java
CODE:
```
public int divide(int a, int b) throws ArithmeticException {
    if (b == 0) {
        throw new ArithmeticException("division by zero");
    }
    return a / b;
}

// Usage
try {
    int result = divide(10, 0);
} catch (ArithmeticException e) {
    System.err.println(e.getMessage());
}
```

----------------------------------------

TITLE: Prototype Pattern: Sheep Class Definition in PHP
DESCRIPTION: Defines the Sheep class, which represents a sheep with properties such as name and category. It includes methods to set and get the name and category of the sheep.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_14

LANGUAGE: PHP
CODE:
```
class Sheep
{
    protected $name;
    protected $category;

    public function __construct(string $name, string $category = 'Mountain Sheep')
    {
        $this->name = $name;
        $this->category = $category;
    }

    public function setName(string $name)
    {
        $this->name = $name;
    }

    public function getName()
    {
        return $this->name;
    }

    public function setCategory(string $category)
    {
        $this->category = $category;
    }

    public function getCategory()
    {
        return $this->category;
    }
}
```

----------------------------------------

TITLE: Division in C++
DESCRIPTION: Demonstrates division of two integers in C++. Defines two integer variables 'a' and 'b', and calculates their quotient, storing the result in the 'quotient' variable. The example uses the '/' operator to divide 'a' by 'b'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int a = 12;
int b = 4;
int quotient = a / b; // quotient is 3
```

----------------------------------------

TITLE: Parsing XML Data with PHP Parser
DESCRIPTION: This snippet demonstrates the basic structure for parsing XML data in PHP using the `xml_parser_create()`, `xml_set_element_handler()`, `xml_parse()`, and `xml_parser_free()` functions. It initializes an XML parser, sets handler functions for start and end elements, parses the provided XML data, and then frees the parser. The `$xml_data` variable is expected to contain the XML content to be parsed.  It assumes that `startElement` and `endElement` functions are defined elsewhere.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/xml-processing@ggkWo0DRSSDDkHpbiyUyf.md#_snippet_0

LANGUAGE: php
CODE:
```
$parser = xml_parser_create();
xml_set_element_handler($parser, "startElement", "endElement");
xml_parse($parser, $xml_data);
xml_parser_free($parser);
```

----------------------------------------

TITLE: Map-Reduce with JavaScript Functions in MongoDB
DESCRIPTION: This snippet demonstrates using JavaScript functions with MongoDB's Map-Reduce framework. It defines `map` and `reduce` functions to calculate the total price for each product category. The `map` function emits the category and price, and the `reduce` function sums the prices for each category. The results are stored in the `total_by_category` collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/javascript.md#_snippet_2

LANGUAGE: javascript
CODE:
```
var map = function () {
  emit(this.category, this.price);
};

var reduce = function (key, values) {
  return Array.sum(values);
};

db.products.mapReduce(map, reduce, { out: 'total_by_category' });
```

----------------------------------------

TITLE: Hunter Class Hunts Lions
DESCRIPTION: The `Hunter` class takes a `Lion` interface as a dependency for its `hunt` method. This ensures that the hunter can hunt any object that implements the `Lion` interface.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_19

LANGUAGE: php
CODE:
```
class Hunter
{
    public function hunt(Lion $lion)
    {
        $lion->roar();
    }
}
```

----------------------------------------

TITLE: COBOL to Python Code Translation
DESCRIPTION: This snippet demonstrates the translation of a simple COBOL program to its Python equivalent. The COBOL program calculates social security tax based on employee salary. The Python code replicates this functionality using `float()` for input, performing the same calculation, and formatting the output using `round()` to two decimal places.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/coding-assistance.md#_snippet_4

LANGUAGE: COBOL
CODE:
```
IDENTIFICATION DIVISION.
PROGRAM-ID. CALCULATE-SS-TAX.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 SALARY PIC 9(7)V99.
01 SS-TAX PIC 9(7)V99.

PROCEDURE DIVISION.
DISPLAY "Enter employee's salary: ".
ACCEPT SALARY.

COMPUTE SS-TAX = SALARY * 0.062.

DISPLAY "Social Security tax is: $", SS-TAX.
STOP RUN.
```

LANGUAGE: python
CODE:
```
salary = float(input("Enter employee's salary: "))
ss_tax = salary * 0.062

print("Social Security tax is: $", round(ss_tax, 2))
```

----------------------------------------

TITLE: Defining Originator (Editor) Object
DESCRIPTION: This code defines the Originator, `Editor`, which manages the content and interacts with the Memento. The `type()` function appends text, `getContent()` retrieves the content, `save()` creates a Memento, and `restore()` resets the content from a Memento. This forms the core of the Memento implementation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_59

LANGUAGE: PHP
CODE:
```
class Editor
{
    protected $content = '';

    public function type(string $words)
    {
        $this->content = $this->content . ' ' . $words;
    }

    public function getContent()
    {
        return $this->content;
    }

    public function save()
    {
        return new EditorMemento($this->content);
    }

    public function restore(EditorMemento $memento)
    {
        $this->content = $memento->getContent();
    }
}
```

----------------------------------------

TITLE: Handling Error Objects with Try-Catch in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to handle errors using a `try-catch` block. It attempts to execute a function `willGiveErrorSometime()`. If an error occurs, the `catch` block checks the type of error using `instanceof` and calls a specific handler function (`rangeErrorHandler`, `referenceErrorHandle`, or `errorHandler`) based on the error type.  The error object contains information about the error that occurred.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/javascript/content/error-objects@-z-4VTaC3tOThqChgyoMs.md#_snippet_0

LANGUAGE: javascript
CODE:
```
try {
  willGiveErrorSometime();
} catch (error) {
  if (error instanceof RangeError) {
    rangeErrorHandler(error);
  } else if (error instanceof ReferenceError) {
    referenceErrorHandle(error);
  } else {
    errorHandler(error);
  }
}
```

----------------------------------------

TITLE: Using Entire Namespace - C++
DESCRIPTION: This snippet shows how to use the `using namespace` directive to import all elements from a namespace into the current scope. It imports the entire `animals` namespace, allowing direct access to its elements `dog` and `cat` without the namespace qualifier. The `main` function then prints the values of `dog` and `cat` to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/namespaces@iIdC7V8sojwyEqK1xMuHn.md#_snippet_3

LANGUAGE: cpp
CODE:
```
#include <iostream>

namespace animals {
    std::string dog = "Bobby";
    std::string cat = "Lilly";
}

int main() {
    using namespace animals;
    
    std::cout << "Dog's name: " << dog << '\n';
    std::cout << "Cat's name: " << cat << '\n';

    return 0;
}
```

----------------------------------------

TITLE: Example MongoDB Documents
DESCRIPTION: This JSON snippet shows example documents from a MongoDB collection named `orders`. Each document represents an order and contains fields such as `_id`, `item`, `price`, and `quantity`.  These documents are used as sample data for the MongoDB `$and` operator examples.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/and.md#_snippet_2

LANGUAGE: json
CODE:
```
{ "_id": 1, "item": "apple", "price": 1, "quantity": 5 }
{ "_id": 2, "item": "banana", "price": 1, "quantity": 10 }
{ "_id": 3, "item": "orange", "price": 2, "quantity": 5 }
{ "_id": 4, "item": "mango", "price": 3, "quantity": 15 }
```

----------------------------------------

TITLE: Rendering React Element with ReactDOM.createPortal
DESCRIPTION: This snippet demonstrates the basic syntax of using ReactDOM.createPortal to render a React element into a specified DOM container. The 'child' argument represents the React element to be rendered, and 'container' is the target DOM element where the 'child' will be placed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/create-portal.md#_snippet_0

LANGUAGE: javascript
CODE:
```
ReactDOM.createPortal(child, container);
```

----------------------------------------

TITLE: Iterating with Bash For Loop
DESCRIPTION: This bash script demonstrates a simple `for` loop that iterates through a sequence of numbers (1, 2, 3) and prints each number to the console. The loop variable `i` takes on each value in the sequence, and the `echo` command displays the current value of `i`. No dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-programming/loops.md#_snippet_0

LANGUAGE: bash
CODE:
```
for i in 1 2 3
do
   echo "$i"
done
```

----------------------------------------

TITLE: Unwinded MongoDB Output
DESCRIPTION: Depicts the output after applying the $unwind operator on the orders array of the sample document. Each document now represents a single order, flattening the original array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/unwind.md#_snippet_3

LANGUAGE: javascript
CODE:
```
[  { _id: 1, item: 'itemA', orders: { quantity: 2, unitPrice: 10 } },  { _id: 1, item: 'itemA', orders: { quantity: 3, unitPrice: 20 } },  { _id: 1, item: 'itemA', orders: { quantity: 1, unitPrice: 15 } },];
```

----------------------------------------

TITLE: File Reading using FileReader in Java
DESCRIPTION: This snippet describes the use of `FileReader` class in Java. It is used to read data in the form of characters from a file. No code is directly presented, but the description provides the class and its use.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/java/content/file-operations@NowpzyPVFcX082j5YS5i8.md#_snippet_1

LANGUAGE: Java
CODE:
```
FileReader // Class used to read data in form of characters from file
```

----------------------------------------

TITLE: MongoDB $group Basic Syntax
DESCRIPTION: This code snippet presents the basic syntax for the $group operator in MongoDB aggregation pipelines. It defines the structure for grouping documents based on a specified _id and applying accumulator functions to create new fields.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/group.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{  $group: {    _id: <expression>,    <field1>: { <accumulator1> : <expression1> },    ...  }}
```

----------------------------------------

TITLE: Renaming or Moving files with mv command in Linux
DESCRIPTION: This command renames or moves a file from a source location to a destination location. The `mv` command requires two arguments: the path to the original file and the path to the new file or directory. If the destination is a file, the original file will be renamed. If the destination is a directory, the original file will be moved into that directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/working-with-files/copying-renaming.md#_snippet_1

LANGUAGE: bash
CODE:
```
mv /path/to/original/file /path/to/new/file
```

----------------------------------------

TITLE: WildDog Class Definition
DESCRIPTION: This snippet defines the `WildDog` class with a `bark` method.  It represents a class that is incompatible with the existing `Lion` interface.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_20

LANGUAGE: php
CODE:
```
// This needs to be added to the game
class WildDog
{
    public function bark()
    {
    }
}
```

----------------------------------------

TITLE: Listing All Connections with Numerical Values in Netstat (Bash)
DESCRIPTION: This command uses netstat with the '-n' option to display all network connections and listening ports with numerical addresses instead of resolving them to hostnames or service names. This is useful for avoiding DNS lookups and getting a quick overview of active connections and ports.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/troubleshooting/netstat.md#_snippet_0

LANGUAGE: bash
CODE:
```
netstat -n
```

----------------------------------------

TITLE: Full Template Specialization in C++
DESCRIPTION: This code demonstrates full template specialization for a function. The `printData` template function is specialized for `const char*` to print a different message. It includes the iostream library for console output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/template-specialization@sObOuccY0PDeGG-9GrFDF.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

template <typename T>
void printData(const T& data) {
    std::cout << "General template: " << data << '\n';
}

template <>
void printData(const char* const & data) {
    std::cout << "Specialized template for const char*: " << data << '\n';
}

int main() {
    int a = 5;
    const char* str = "Hello, world!";
    printData(a); // General template: 5
    printData(str); // Specialized template for const char*: Hello, world!
}
```

----------------------------------------

TITLE: MongoDB $not with $gt Operator in JavaScript
DESCRIPTION: This snippet demonstrates how to use the $not operator in MongoDB to find documents where the 'price' field is not greater than 100. The query selects products with a price of 100 or less from the 'products' collection.  It relies on the MongoDB database and the 'products' collection to be present.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/not.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.products.find({ price: { $not: { $gt: 100 } } });
```

----------------------------------------

TITLE: Defining Complex Hybrid Types with Interfaces in TypeScript
DESCRIPTION: This code snippet demonstrates how to define complex hybrid types using interfaces in TypeScript. It defines two types, `Education` and `User`. The `User` type includes an `education` property of type `Education`, which is another type defining degree, school and year. This illustrates how to create nested types.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/hybrid-types@lvtTSHH9yBTCiLng8btnI.md#_snippet_1

LANGUAGE: typescript
CODE:
```
type Education = {
  degree: string;
  school: string;
  year: number;
};

type User = {
  name: string;
  age: number;
  email: string;
  education: Education;
};
```

----------------------------------------

TITLE: Defining Conditional Type with Extends
DESCRIPTION: This code defines a conditional type named `Extends` in TypeScript. It takes two generic type parameters, `T` and `U`. If `T` extends `U`, the type resolves to `T`; otherwise, it resolves to `U`. This allows for type selection based on inheritance or assignability.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/conditional-types@ubGIhi-WLE0EopTYXzmPL.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type Extends<T, U> = T extends U ? T : U;

type A = Extends<string, any>; // type A is 'string'
type B = Extends<any, string>; // type B is 'string'
```

----------------------------------------

TITLE: Apache 2.0 License Inclusion in C++
DESCRIPTION: This snippet demonstrates how to include the Apache 2.0 license in a C++ project.  It involves adding a `LICENSE` file with the full text of the license and adding a notice to the source code files. The notice includes the copyright and SPDX identifier.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/licensing@sLVs95EOeHZldoKY0L_dH.md#_snippet_2

LANGUAGE: C++
CODE:
```
/* Copyright (C) [year] [author]
 * SPDX-License-Identifier:    Apache-2.0
 */
```

----------------------------------------

TITLE: Generic Lambdas in C++14
DESCRIPTION: Illustrates the use of 'auto' in lambda function parameter declarations, enabling generic lambda functions that can work with different types. The 'add' lambda function can now add both integers and doubles. Requires a C++14 compliant compiler.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-11--14@T6rCTv9Dxkm-tEA-l9XEv.md#_snippet_5

LANGUAGE: cpp
CODE:
```
auto add = [](auto a, auto b) { return a + b; };
auto sum_i = add(42, 13); // Still works with integers
auto sum_f = add(3.14, 2.72); // Now works with doubles too
```

----------------------------------------

TITLE: Using Promise.all() in JavaScript
DESCRIPTION: Demonstrates the use of Promise.all() with a resolving and a rejecting promise.  Promise.all() rejects immediately when any of the input promises reject, triggering the .catch() block. The code logs an error message to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/promise-all-vs-all-settled.md#_snippet_1

LANGUAGE: javascript
CODE:
```
Promise.all([promise1, promise2])
  .then((values) => {
    console.log(values);
  })
  .catch((error) => {
    console.log('An error occurred in Promise.all():', error);
  });

// Output:
// An error occurred in Promise.all(): Promise 2 rejected
```

----------------------------------------

TITLE: Using Iterator Pattern in PHP
DESCRIPTION: This code shows how to use the `StationList` iterator to add radio stations, iterate through them using a `foreach` loop, and remove a specific station.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_54

LANGUAGE: php
CODE:
```
$stationList = new StationList();

$stationList->addStation(new RadioStation(89));
$stationList->addStation(new RadioStation(101));
$stationList->addStation(new RadioStation(102));
$stationList->addStation(new RadioStation(103.2));

foreach($stationList as $station) {
    echo $station->getFrequency() . PHP_EOL;
}

$stationList->removeStation(new RadioStation(89)); // Will remove station 89
```

----------------------------------------

TITLE: Data Manipulation & Analysis with SQL
DESCRIPTION: Business analysts need to use SQL for querying databases. This involves extracting structured data for analysis and reporting. SQL is a fundamental skill for retrieving specific information from relational databases, essential for informing data-driven business decisions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/ai-data-scientist-vs-business-analytics.md#_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT column1, column2 FROM table_name WHERE condition;
```

----------------------------------------

TITLE: Creating and Enabling a Swap File in Linux
DESCRIPTION: This snippet creates a swap file, sets the correct permissions, formats it as swap space, and enables it for use by the system. It uses `fallocate` to preallocate space, `chmod` to restrict access, `mkswap` to format the file system, and `swapon` to activate it. These operations allow the system to use the specified file as an extension of RAM.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/disks-filesystems/swap.md#_snippet_0

LANGUAGE: bash
CODE:
```
fallocate -l 1G /swapfile # creates a swap file
chmod 600 /swapfile # secures the swap file by preventing regular users from reading it
mkswap /swapfile # sets up the Linux swap area
swapon /swapfile # enables the file for swapping
```

----------------------------------------

TITLE: Defining Coffee Interface and Simple Coffee in PHP
DESCRIPTION: This code defines a `Coffee` interface with methods to get the cost and description of a coffee. It also provides a concrete implementation `SimpleCoffee` that represents a basic coffee with a fixed cost and description. The Decorator pattern is implemented on top of it. It serves as the base component for adding additional behaviors using decorators.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_31

LANGUAGE: PHP
CODE:
```
interface Coffee
{
    public function getCost();
    public function getDescription();
}

class SimpleCoffee implements Coffee
{
    public function getCost()
    {
        return 10;
    }

    public function getDescription()
    {
        return 'Simple coffee';
    }
}
```

----------------------------------------

TITLE: Creating a Closure in JavaScript
DESCRIPTION: This JavaScript code demonstrates the creation of a closure. The `inner` function retains access to the `name` variable from the `outer` function's scope, even after `outer` has completed execution. This allows the `inner` function, when invoked through the `closure` variable, to still print the value of `name`.  The outer function returns the inner function which maintains the closure over the outer function's variables.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/closure.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function outer() {
  const name = 'Roadmap';

  function inner() {
    console.log(name);
  }

  return inner;
}

const closure = outer();
closure(); // Roadmap
```

----------------------------------------

TITLE: Exponential Function in Python
DESCRIPTION: This Python function demonstrates an exponential algorithm. It calculates a value recursively by calling itself twice with a decremented input. The runtime grows exponentially with the input 'n'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/computer-science/content/exponential@5mMLr6tWbiSZuox1lx0_B.md#_snippet_0

LANGUAGE: Python
CODE:
```
def exponential(n):
    if n == 0:
        return 1
    return exponential(n - 1) + exponential(n - 1)
```

----------------------------------------

TITLE: Updating MongoDB Array with $push Operator (JavaScript)
DESCRIPTION: This code snippet demonstrates how to add a new item ('painting') to the `hobbies` array using the `$push` operator.  It updates a specific document identified by its `_id`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/array.md#_snippet_5

LANGUAGE: javascript
CODE:
```
db.collection.updateOne(
  { _id: ObjectId('123xyz') },
  { $push: { hobbies: 'painting' } }
);
```

----------------------------------------

TITLE: Accessing GET Data in PHP
DESCRIPTION: This PHP code snippet demonstrates how to access the value of the 'fname' parameter from the URL using the $_GET superglobal array. It retrieves the value associated with the 'fname' key and outputs it as part of a string. This snippet depends on data being passed via the GET method, typically from a form submission.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/_get@GFYGFVfxkOoPI5mI4zSt1.md#_snippet_1

LANGUAGE: PHP
CODE:
```
echo "Name is: " . $_GET['fname'];
```

----------------------------------------

TITLE: Counting lines, words, and characters in a file using wc command
DESCRIPTION: This command counts the number of lines, words, and characters in the specified file (myfile.txt) using the wc command. The output displays the line count, word count, and character count, followed by the filename.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/wc.md#_snippet_0

LANGUAGE: bash
CODE:
```
wc myfile.txt
```

----------------------------------------

TITLE: Home Component in React
DESCRIPTION: This code snippet defines a simple functional component `Home` in React. It returns a `div` element containing the text "Home". It serves as one of the pages in the example application to demonstrate the transition hook.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/use-transition.md#_snippet_1

LANGUAGE: javascript
CODE:
```
export function Home() {
  return <div>Home</div>;
}
```

----------------------------------------

TITLE: Define Internal Module (Namespace) in TypeScript
DESCRIPTION: This code snippet demonstrates how to define an internal module (namespace) in TypeScript. It uses the `namespace` keyword to encapsulate the `MyModule` code. The `doSomething` function is exported to make it accessible from outside the namespace. This enables code organization within a single file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/typescript-modules@sE9lqkkqwnsVJxTJv37YZ.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// myModule.ts
namespace MyModule {
  export function doSomething() {
    console.log('Doing something...');
  }
}
```

----------------------------------------

TITLE: Importing a module using CommonJS
DESCRIPTION: This snippet demonstrates how to import the 'fs' module in JavaScript using the CommonJS module system, which is primarily used in Node.js environments.  The `require()` function loads the module synchronously, making it available for use immediately after the import statement.  The imported module is assigned to the `fs` constant.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/commonjs-vs-esm.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const fs = require('fs');
```

----------------------------------------

TITLE: Finding Unique Values Using for...of in JavaScript
DESCRIPTION: This code snippet demonstrates how to use a `for...of` loop in JavaScript to find unique values in an array. It iterates over the input array, checking if the current value already exists in the `uniqueRoadmaps` array. If not, the current roadmap is pushed into the array of unique values. Dependencies: None. Input: Array with possible duplicate values. Output: Array with only unique values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/find-unique-array-values.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const roadmaps = ['JavaScript', 'React', 'Node.js', 'Node.js', 'JavaScript'];
const uniqueRoadmaps = [];
for (const roadmap of roadmaps) {
  if (!uniqueRoadmaps.includes(roadmap)) {
    uniqueRoadmaps.push(roadmap);
  }
}
console.log(uniqueRoadmaps); // ['JavaScript', 'React', 'Node.js']
```

----------------------------------------

TITLE: Equal to (==) in C++
DESCRIPTION: Demonstrates the 'equal to' relational operator in C++. This operator compares two values and returns true if they are equal, and false otherwise.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_5

LANGUAGE: cpp
CODE:
```
5 == 5 // true
3 == 4 // false
```

----------------------------------------

TITLE: Usage of Managed Array with RAII in C++
DESCRIPTION: This snippet demonstrates how to use the `ManagedArray` class. When `arr` goes out of scope, its destructor is called, automatically releasing the allocated memory. Dependencies: ManagedArray class.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/raii@OmHDlLxCnH8RDdu5vx9fl.md#_snippet_1

LANGUAGE: cpp
CODE:
```
{
    ManagedArray arr(10);
    arr[0] = 42;

    // No need to explicitly free memory, it will be automatically released when arr goes out of scope.
}
```

----------------------------------------

TITLE: Using Factory Method - PHP
DESCRIPTION: Illustrates how to use the `DevelopmentManager` and `MarketingManager` to conduct interviews with different types of interviewers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_6

LANGUAGE: PHP
CODE:
```
$devManager = new DevelopmentManager();
$devManager->takeInterview(); // Output: Asking about design patterns

$marketingManager = new MarketingManager();
$marketingManager->takeInterview(); // Output: Asking about community building.
```

----------------------------------------

TITLE: Defining and Using Class in C++
DESCRIPTION: This code defines a class named `Person` with public member variables `name` and `age`, and a member function `printInfo`. It creates an instance of the `Person` class, sets the values of its member variables, and calls the `printInfo` function. Class members are private by default.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/data-types@MwznA4qfpNlv6sqSNjPZi.md#_snippet_9

LANGUAGE: cpp
CODE:
```
class Person {
public:
    std::string name;
    int age;

    void printInfo() {
        std::cout << "Name: " << name << ", Age: " << age << '\n';
    };
};

Person p1;
p1.name = "John Doe";
p1.age = 30;
```

----------------------------------------

TITLE: Constexpr If Statement Example in C++17
DESCRIPTION: This snippet demonstrates `constexpr if` statements in C++17, allowing conditional compilation during compile time based on template arguments. The `get_value` function returns the value pointed to by a pointer if the template argument `T` is a pointer type; otherwise, it returns the value directly. This requires a C++17 compiler and the `<type_traits>` header to determine if `T` is a pointer.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-17@R2-qWGUxsTOeSHRuUzhd2.md#_snippet_4

LANGUAGE: cpp
CODE:
```
template <typename T>
auto get_value(T t)
{
    if constexpr (std::is_pointer_v<T>)
    {
        return *t;
    }
    else
    {
        return t;
    }
}
```

----------------------------------------

TITLE: Synchronous JavaScript Example with Loop
DESCRIPTION: This JavaScript snippet demonstrates synchronous execution using a long-running `for` loop.  The loop iterates a large number of times (1000000000), blocking the execution of the subsequent `console.log('After')` statement until the loop completes. This illustrates how synchronous code can cause delays and freeze the user interface. The expected output is 'Before' followed by a noticeable delay, and then 'After'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/async-vs-sync.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
console.log('Before');

for (let i = 0; i < 1000000000; i++) {}

console.log('After');
```

----------------------------------------

TITLE: Creating User Administrator with X.509 Certificate (JavaScript)
DESCRIPTION: This code snippet creates a user administrator in the `$external` database with roles for managing the MongoDB cluster and databases. It uses the `createUser` command with the X.509 certificate's subject as the username. Replace the `createUser` field with the appropriate X.509 certificate's subject.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-security/x509-certificate-auth.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.getSiblingDB('$external').runCommand({
    createUser:
      'C=US,ST=New York,L=New York City,O=MongoDB,OU=kerneluser,CN=client@example.com',
    roles: [
      { role: 'userAdminAnyDatabase', db: 'admin' },
      { role: 'clusterAdmin', db: 'admin' },
      { role: 'readWriteAnyDatabase', db: 'admin' },
      { role: 'dbAdminAnyDatabase', db: 'admin' },
    ],
    writeConcern: { w: 'majority', wtimeout: 5000 },
  });
```

----------------------------------------

TITLE: Defining Ninja Build File - C++ Project
DESCRIPTION: This code snippet demonstrates a basic `build.ninja` file for building a simple C++ project. It defines variables for the C++ compiler and flags, rules for compiling and linking, and build statements for the source files and final executable. This file is used by the Ninja build system to compile the project.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/ninja@HkUCD5A_M9bJxJRElkK0x.md#_snippet_0

LANGUAGE: Ninja
CODE:
```
# Variable declarations
cxx = g++
cflags = -Wall -Wextra -std=c++17

# Rule for compiling the C++ files
rule cxx_compile
  command = $cxx $cflags -c $in -o $out

# Build statements for the source files
build main.o: cxx_compile main.cpp
build foo.o: cxx_compile foo.cpp

# Rule for linking the object files
rule link
  command = $cxx $in -o $out

# Build statement for the final executable
build my_program: link main.o foo.o
```

----------------------------------------

TITLE: Creating a Shallow Copy of an Object with Spread Operator in JavaScript
DESCRIPTION: This snippet demonstrates how to create a shallow copy of an object using the spread operator. It initializes an object `roadmap` with `name` and `type` properties, then creates a new object `roadmapClone` by spreading the properties of the original object. Note that this is a shallow copy, so changes to nested objects within the clone will affect the original.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/spread-operator.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const roadmap = {
  name: 'JavaScript',
  type: 'dynamic',
};

const roadmapClone = { ...roadmap }; // shallow copy
console.log(roadmapClone); // { name: 'JavaScript', type: 'dynamic' }
```

----------------------------------------

TITLE: Task Tracker CLI Usage Examples (Bash)
DESCRIPTION: These are example commands for interacting with the task-cli application via the command line. These examples demonstrate how to add, update, delete, mark tasks, and list tasks by status. The application uses positional arguments for user inputs.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/task-tracker.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Adding a new task
task-cli add "Buy groceries"
# Output: Task added successfully (ID: 1)

# Updating and deleting tasks
task-cli update 1 "Buy groceries and cook dinner"
task-cli delete 1

# Marking a task as in progress or done
task-cli mark-in-progress 1
task-cli mark-done 1

# Listing all tasks
task-cli list

# Listing tasks by status
task-cli list done
task-cli list todo
task-cli list in-progress
```

----------------------------------------

TITLE: Printing array using print_r in PHP
DESCRIPTION: This code snippet demonstrates the use of the `print_r` function in PHP to display the contents of an array. The `print_r` function provides a human-readable representation of the array, including its keys and values.  It is commonly used for debugging purposes to inspect the structure and contents of variables.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/print_r@wsC7OGXOyfCY4pLLNrR2v.md#_snippet_0

LANGUAGE: PHP
CODE:
```
$array = array('apple', 'banana', 'cherry'); print_r($array);
```

----------------------------------------

TITLE: Querying Data by Boolean Value (false) in MongoDB
DESCRIPTION: This code snippet demonstrates how to retrieve documents where the 'isActive' field is false, representing inactive users. It uses `db.users.find()` with a filter set to `false`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/boolean.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.users.find({ isActive: false });
```

----------------------------------------

TITLE: Reading file using callback
DESCRIPTION: This code snippet demonstrates how to read a file asynchronously using the `fs.readFile` method with a callback function in JavaScript. The callback function is executed after the file is read, and it handles both the success and error cases. The `err` parameter contains any error information, and the `data` parameter contains the file content as a buffer, which is then converted to a string using `toString()`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/async-javascript.md#_snippet_0

LANGUAGE: javascript
CODE:
```
fs.readFile('file.txt', (err, data) => {
  if (err) {
    console.error('Error reading file:', err);
    return;
  }
  console.log('File content:', data.toString());
});
```

----------------------------------------

TITLE: Local Development Setup
DESCRIPTION: This code block provides the commands for setting up a local development environment for the Developer Roadmap project. It includes cloning the repository, installing dependencies, and running the development server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/contributing.md#_snippet_2

LANGUAGE: bash
CODE:
```
git clone git@github.com:kamranahmedse/developer-roadmap.git --depth 1
cd developer-roadmap
pnpm add @roadmapsh/editor@npm:@roadmapsh/dummy-editor -w
pnpm install
```

----------------------------------------

TITLE: Sum with Variadic Function - PHP
DESCRIPTION: This PHP code defines a function `sum` that accepts a variable number of arguments using the `...` syntax. These arguments are then treated as an array named `$numbers`. The `array_sum` function is used to calculate the sum of all the numbers in the array. The example then calls the `sum` function with four integer arguments and prints the result (10).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/variadic-functions@rtmytETfyyLdcXUC0QyzL.md#_snippet_0

LANGUAGE: PHP
CODE:
```
function sum(...$numbers) {
    return array_sum($numbers);
}
echo sum(1, 2, 3, 4);
```

----------------------------------------

TITLE: Defining a Namespace in TypeScript
DESCRIPTION: This code snippet defines a namespace called `MyNamespace` in TypeScript.  The `export` keyword is used to make the `doSomething` function accessible from outside the namespace. This file is named `myNamespace.ts`. Dependencies: None. Input: None. Output: None. Limitations: Basic example, no error handling.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/namespaces@EtVwQ4lnWi3IIFHGb2Qib.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
namespace MyNamespace {
  export function doSomething() {
    console.log('Doing something...');
  }
}
```

----------------------------------------

TITLE: Less than or equal to (<=) in C++
DESCRIPTION: Demonstrates the 'less than or equal to' relational operator in C++. This operator compares two values and returns true if the first operand is less than or equal to the second, and false otherwise.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_10

LANGUAGE: cpp
CODE:
```
4 <= 4 // true
2 <= 3 // true
5 <= 4 // false
```

----------------------------------------

TITLE: Unit Testing the Add Function using `testing` Package in Go
DESCRIPTION: This code snippet demonstrates how to write a unit test for the `Add` function using Go's built-in `testing` package. It defines a test function `TestAdd` that calls the `Add` function with specific inputs and asserts that the output matches the expected value.  If the assertion fails, it reports an error using `t.Errorf`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/golang/content/testing-package.md#_snippet_1

LANGUAGE: go
CODE:
```
package math

import "testing"

func TestAdd(t *testing.T) {
    got := Add(2, 3)
    want := 5
    if got != want {
        t.Errorf("Add(2, 3) = %d; want %d", got, want)
    }
}
```

----------------------------------------

TITLE: Executing Autotools build commands
DESCRIPTION: This snippet demonstrates the commands used to build a project using Autotools.  `autoreconf --install` prepares the build environment, `./configure` configures the build based on the system, `make` compiles the project, and `make install` installs the built files.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/build-systems@jVXFCo6puMxJ_ifn_uwim.md#_snippet_2

LANGUAGE: Shell
CODE:
```
autoreconf --install
./configure
make
make install
```

----------------------------------------

TITLE: Querying with $gte Operator in MongoDB
DESCRIPTION: This code snippet demonstrates how to use the `$gte` operator in a MongoDB query to find documents where the `price` field is greater than or equal to 20. The query is performed on the `products` collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/gte.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.products.find({ price: { $gte: 20 } });
```

----------------------------------------

TITLE: Installing NuGet Package in C++ project using PackageReference (XML)
DESCRIPTION: This XML snippet demonstrates how to install a NuGet package called "PackageName" with version 1.0.0 into a C++ project using the PackageReference format within the vcxproj file.  It requires a C++ project file (.vcxproj) to be present. The package will be added as a dependency to the project.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/nuget@g0s0F4mLV16eNvMBflN2e.md#_snippet_0

LANGUAGE: XML
CODE:
```
<Project>
  <ItemGroup>
    <PackageReference Include="PackageName" Version="1.0.0" />
  </ItemGroup>
  ...
</Project>
```

----------------------------------------

TITLE: Creating a Timestamp for Current Time
DESCRIPTION: This snippet creates a MongoDB Timestamp representing the current time. It calculates the seconds since the Unix epoch using `Date().getTime()` and sets the incrementing ordinal to 1. Requires the MongoDB driver or shell environment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/timestamp.md#_snippet_1

LANGUAGE: javascript
CODE:
```
var currentTimestamp = new Timestamp(
  Math.floor(new Date().getTime() / 1000),
  1
);
```

----------------------------------------

TITLE: HTML Form for Unit Conversion
DESCRIPTION: This code snippet demonstrates a basic HTML form structure used for unit conversion. It includes input fields for the value to convert, select elements for the 'from' and 'to' units, and a submit button. The form targets the current page for submission (`target="_self"`) so the backend can process and display the converted value on the same page.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/unit-converter.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<form method="post" target="_self">
  <label for="value">Value:</label>
  <input type="text" id="value" name="value"><br><br>

  <label for="from_unit">From:</label>
  <select id="from_unit" name="from_unit">
    <option value="meter">Meter</option>
    <option value="kilometer">Kilometer</option>
    <!-- Add more options -->
  </select><br><br>

  <label for="to_unit">To:</label>
  <select id="to_unit" name="to_unit">
    <option value="centimeter">Centimeter</option>
    <option value="inch">Inch</option>
    <!-- Add more options -->
  </select><br><br>

  <input type="submit" value="Convert">
</form>
```

----------------------------------------

TITLE: Implementing Factory Method - PHP
DESCRIPTION: Implements an abstract `HiringManager` class with a factory method `makeInterviewer` and a `takeInterview` method that uses the created interviewer.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_4

LANGUAGE: PHP
CODE:
```
abstract class HiringManager
{

    // Factory method
    abstract protected function makeInterviewer(): Interviewer;

    public function takeInterview()
    {
        $interviewer = $this->makeInterviewer();
        $interviewer->askQuestions();
    }
}

```

----------------------------------------

TITLE: Retrieving a Cookie Value in PHP
DESCRIPTION: This snippet shows how to retrieve the value of the "user" cookie using the `$_COOKIE` superglobal array.  The `$_COOKIE` array contains all cookies sent by the browser. This allows you to access cookie values by their names.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/cookies@so03-fK7E2WvTm6XsPq4i.md#_snippet_1

LANGUAGE: PHP
CODE:
```
echo $_COOKIE["user"];
```

----------------------------------------

TITLE: Using std::list in C++
DESCRIPTION: This code snippet illustrates the use of `std::list`, a doubly-linked list in C++. It shows how to add elements to the end of the list using `push_back()` and iterate through the list to print its elements. The code needs the `<iostream>` and `<list>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/containers@1pydf-SR0QUfVNuBEyvzc.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <list>

int main() {
    std::list<int> lst = {1, 2, 3, 4, 5};

    lst.push_back(6); // Add an element to the end
    
    std::cout << "List contains:";
    for (int x : lst) {
        std::cout << ' ' << x;
    }
    std::cout << '\n';
}
```

----------------------------------------

TITLE: Enabling OPCache in php.ini
DESCRIPTION: This code snippet shows how to enable and configure OPCache in the php.ini file. It sets the `opcache.enable` directive to 1 to activate OPCache, `opcache.memory_consumption` to 128MB for memory allocation, `opcache.max_accelerated_files` to 4000, and `opcache.revalidate_freq` to 60 seconds for cache revalidation frequency.  It improves PHP performance by caching compiled script bytecode.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/opcode-caching@NieqZd1juaNYoZOrB7e31.md#_snippet_0

LANGUAGE: INI
CODE:
```
   opcache.enable=1 
   opcache.memory_consumption=128 
   opcache.max_accelerated_files=4000 
   opcache.revalidate_freq=60
```

----------------------------------------

TITLE: Defining a LinkedList Recursive Type in TypeScript
DESCRIPTION: This code defines a recursive type `LinkedList<T>` in TypeScript. It represents a linked list where each node contains a value of type `T` and a reference (`next`) to the next node in the list, which can be another `LinkedList<T>` or `null`. This allows creating linked lists of arbitrary length. The type parameter `T` represents the type of data stored in the linked list nodes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/recursive-types@N8xBTJ74xv1E5hSLYZtze.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type LinkedList<T> = {
  value: T;
  next: LinkedList<T> | null;
};

let list: LinkedList<number> = {
  value: 1,
  next: { value: 2, next: { value: 3, next: null } },
};
```

----------------------------------------

TITLE: Using Structured Bindings in C++
DESCRIPTION: This C++17 snippet demonstrates the use of structured bindings to unpack the key-value pairs from a `std::map` during iteration.  The `auto& [key, value]` syntax automatically decomposes each element in the map into separate `key` (string) and `value` (integer) variables, making it easier to access them.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standards@vvE1aUsWbF1OFcmMUHbJa.md#_snippet_5

LANGUAGE: cpp
CODE:
```
std::map<std::string, int> my_map = {{"A", 1}, {"B", 2}};
for (const auto& [key, value] : my_map) {
    // use 'key' and 'value' here
}
```

----------------------------------------

TITLE: Using Lambda Template Parameters in C++20
DESCRIPTION: This code snippet demonstrates the use of `auto` as a lambda parameter in C++20, allowing for generic lambdas with templated parameters. The `sum` lambda function accepts two parameters of any type and returns their sum. The lambda is then used to add integers and doubles, demonstrating its versatility.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/newest@sxbbKtg7kMNbkx7fXhjR9.md#_snippet_3

LANGUAGE: C++
CODE:
```
auto sum = [](auto a, auto b) {
    return a + b;
};

int res1 = sum(1, 2);           // int
double res2 = sum(1.0, 2.0);    // double
```

----------------------------------------

TITLE: Selecting multiple elements with querySelectorAll in JavaScript
DESCRIPTION: This code snippet demonstrates how to use the `querySelectorAll` method to select all elements that match a specified CSS selector.  It shows an example of selecting all elements with the class name `.roadmap-item`. The method returns a `NodeList` which is similar to an array. If no matching elements are found, `querySelectorAll` returns an empty `NodeList`. Dependencies: None.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/query-selector.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const roadmapItems = document.querySelectorAll('.roadmap-item');
```

----------------------------------------

TITLE: Writing to Standard Error Streams using iostream
DESCRIPTION: This code snippet demonstrates how to write to the standard error output (`std::cerr`) and the buffered standard error output (`std::clog`). It includes the necessary `iostream` header and uses the `main` function as the entry point. `cerr` is typically used for unbuffered error messages, while `clog` is for buffered logging information.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/iostream@VeVxZ230xkesQsIDig8zQ.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>

int main() {
    std::cerr << "An error occurred.\n";
    std::clog << "Logging information.\n";
    return 0;
}
```

----------------------------------------

TITLE: getServerSideProps Data Fetching in Next.js
DESCRIPTION: This code snippet demonstrates how to use `getServerSideProps` in Next.js to fetch data on the server before rendering the page. It fetches data from an API endpoint and returns it as props to be used by the page component. This ensures that the page is rendered with the latest data on the server, improving SEO and initial load time.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/react-ssr.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export async function getServerSideProps() {
  const data = await fetch('https://api.example.com');
  return { props: { data } };
}
```

----------------------------------------

TITLE: Using Memento Pattern in PHP
DESCRIPTION: This code demonstrates how to use the Memento pattern with the `Editor` and `EditorMemento` classes. It shows saving the editor state, modifying the editor, and then restoring to the saved state.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_60

LANGUAGE: PHP
CODE:
```
$editor = new Editor();

// Type some stuff
$editor->type('This is the first sentence.');
$editor->type('This is second.');

// Save the state to restore to : This is the first sentence. This is second.
$saved = $editor->save();

// Type some more
$editor->type('And this is third.');

// Output: Content before Saving
echo $editor->getContent(); // This is the first sentence. This is second. And this is third.

// Restoring to last saved state
$editor->restore($saved);

$editor->getContent(); // This is the first sentence. This is second.
```

----------------------------------------

TITLE: Querying MongoDB Array for Specific Item (JavaScript)
DESCRIPTION: This code snippet demonstrates how to query a MongoDB collection to find documents where the `hobbies` array contains the string 'swimming'. It uses the `find` method to locate documents matching the specified criteria.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/array.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.find({ hobbies: 'swimming' });
```

----------------------------------------

TITLE: Using a function pointer in C++
DESCRIPTION: This code snippet demonstrates how to use a function pointer to point to a function. This allows calling the function indirectly through the pointer.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/pointers-and-references@DWw8NxkLpIpiOSUaZZ1oA.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int add(int a, int b)
{
  return a + b;
}

int main()
{
  int (*funcptr) (int, int) = add; // Pointer 'funcptr' now points to the functions 'add'
  funcptr(4, 5); // Return 9
}
```

----------------------------------------

TITLE: Implementing Composite Pattern with Employees in PHP
DESCRIPTION: This code demonstrates the Composite pattern using an employee example. It defines an `Employee` interface and concrete classes `Developer` and `Designer` implementing it. The `Organization` class uses these to represent a part-whole hierarchy, treating individual employees uniformly when calculating total salaries. It shows how the composite pattern lets clients treat the individual objects in a uniform manner.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_28

LANGUAGE: PHP
CODE:
```
interface Employee
{
    public function __construct(string $name, float $salary);
    public function getName(): string;
    public function setSalary(float $salary);
    public function getSalary(): float;
    public function getRoles(): array;
}

class Developer implements Employee
{
    protected $salary;
    protected $name;
    protected $roles;

    public function __construct(string $name, float $salary)
    {
        $this->name = $name;
        $this->salary = $salary;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setSalary(float $salary)
    {
        $this->salary = $salary;
    }

    public function getSalary(): float
    {
        return $this->salary;
    }

    public function getRoles(): array
    {
        return $this->roles;
    }
}

class Designer implements Employee
{
    protected $salary;
    protected $name;
    protected $roles;

    public function __construct(string $name, float $salary)
    {
        $this->name = $name;
        $this->salary = $salary;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setSalary(float $salary)
    {
        $this->salary = $salary;
    }

    public function getSalary(): float
    {
        return $this->salary;
    }

    public function getRoles(): array
    {
        return $this->roles;
    }
}
```

----------------------------------------

TITLE: External CSS Styling in HTML
DESCRIPTION: Shows how to link an external CSS file to an HTML document using the `<link>` tag within the `<head>` section. This is the preferred method for managing styles across multiple pages. Requires an external CSS file (styles.css) to be present.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/include-css.md#_snippet_2

LANGUAGE: html
CODE:
```
<link rel="stylesheet" href="styles.css">
```

----------------------------------------

TITLE: MongoDB $size Query Example
DESCRIPTION: This code snippet demonstrates how to use the $size operator in a MongoDB query to find documents where the 'colors' array field has exactly 5 elements. It queries the 'products' collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/size.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.products.find({ colors: { $size: 5 } });
```

----------------------------------------

TITLE: Modal Component Using createPortal in React (JS)
DESCRIPTION: This snippet implements a Modal component using ReactDOM.createPortal.  The component renders its children into a DOM element with the id 'root'. It accepts 'isOpen', 'onClose', and 'children' props to control visibility and content.  The component returns null if 'isOpen' is false.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/create-portal.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { createPortal } from 'react-dom';

export function Modal({ isOpen, onClose, children }) {
  if (!isOpen) return null;

  return createPortal(
    <div
      role="dialog"
      aria-modal="true"
      style={{
        position: 'fixed',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        backgroundColor: 'white',
        padding: '20px',
        zIndex: 1000,
      }}
    >
      <button onClick={onClose} aria-label="Close Modal">
        Close
      </button>
      {children}
    </div>,
    document.getElementById('root')
  );
}
```

----------------------------------------

TITLE: Installing PHP CS Fixer with Composer
DESCRIPTION: This command installs PHP CS Fixer globally using Composer, the PHP package manager. It allows you to access the `php-cs-fixer` command from any directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/php-cs-fixer@r07k_hT2z2EiIBH4q3F7-.md#_snippet_0

LANGUAGE: bash
CODE:
```
composer global require friendsofphp/php-cs-fixer
```

----------------------------------------

TITLE: Generic Identity Function in TypeScript
DESCRIPTION: This TypeScript code defines a generic function `identity` that accepts an argument of type `T` and returns the same value. The type `T` is a type parameter that is specified when the function is called, allowing the function to work with different data types without being rewritten. The example shows how to call the function with a string argument, explicitly specifying the type parameter as `string`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/generics@4gaKqNtGLFqpk9WVKZl0v.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function identity<T>(arg: T): T {
  return arg;
}

let output = identity<string>('Hello'); // type of output will be 'string'
```

----------------------------------------

TITLE: Handling errors using callbacks in Node.js
DESCRIPTION: This code snippet demonstrates how to handle errors when reading a file asynchronously using callbacks in Node.js. The `fs.readFile` method is used to read the file, and a callback function is provided to handle the result or any errors that occur during the process. The module 'fs' is imported from 'node:fs'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/error-handling.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import fs from 'node:fs';

fs.readFile('file.md', 'utf-8', (err, data) => {
  if (err) {
    console.error(err);
    return;
  }

  console.log(data);
});
```

----------------------------------------

TITLE: Implementing Inheritance in PHP
DESCRIPTION: This PHP code snippet demonstrates inheritance. The `Car` class extends the `Vehicle` class, inheriting its `color` property and `drive` method. It also adds a `horn` method specific to the `Car` class. The example shows how to create an instance of the `Car` class and call both the inherited `drive` method and the `horn` method.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/inheritance@c5q2e_jyMt8Pir5Od3lRi.md#_snippet_0

LANGUAGE: php
CODE:
```
class Vehicle {
  public $color;
  function drive() {
    echo "Driving...";
  }
}

class Car extends Vehicle {
  function horn() {
    echo "Beeping...";
  }
}

$myCar = new Car();
$myCar->drive(); // Inherits drive method from Vehicle
$myCar->horn(); // Unique to Car
```

----------------------------------------

TITLE: Type Intersection in TypeScript
DESCRIPTION: Defines two interfaces, `A` and `B`, with different properties.  A new type `AB` is created by intersecting `A` and `B`, meaning `AB` must have all properties of both `A` and `B`. A variable `value` of type `AB` is created, requiring both `a` (string) and `b` (number) properties to be present. No specific dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/combining-types@qefnsugcveizVq2TORRgn.md#_snippet_1

LANGUAGE: typescript
CODE:
```
interface A {
  a: string;
}

interface B {
  b: number;
}

type AB = A & B;
let value: AB = { a: 'hello', b: 42 };
```

----------------------------------------

TITLE: Accessing Protected API Route using cURL with JWT
DESCRIPTION: This bash command showcases how to access a protected API route (/books) using a JWT. It includes the 'Authorization' header with the JWT obtained from the /token endpoint. The server validates the token and returns the requested data if the token is valid.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_32

LANGUAGE: bash
CODE:
```
curl --location 'localhost:8080/books' \
     --header 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MzM3MDU3Njl9.ULspm6GR9Q0zqZWHifdFEeLZqgtw7k2FDDhSOpwcw4U'
```

----------------------------------------

TITLE: Writing to Freed Memory in C++
DESCRIPTION: This code demonstrates an access violation caused by writing to memory that has been freed.  The memory is allocated using `new int[10]`, then deallocated using `delete[] p2`. Attempting to write to `p2[3]` after it has been freed results in an access violation.  This requires dynamic memory allocation using `new` and `delete`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/access-violations@y4-P4UNC--rE1vni8HdTn.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int* p2 = new int[10];
delete[] p2;
p2[3] = 42;  // Access violation: writing to memory that has been freed
```

----------------------------------------

TITLE: Filtering unique lines with sort and uniq
DESCRIPTION: This bash command pipeline sorts the lines in the `names.txt` file and then filters out adjacent duplicate lines using the `uniq` command. The `sort` command ensures that identical lines are adjacent, enabling `uniq` to effectively remove duplicates. The output is a list of unique names from the original file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/uniq.md#_snippet_0

LANGUAGE: bash
CODE:
```
sort names.txt | uniq
```

----------------------------------------

TITLE: Defining Lambda Expression in C++
DESCRIPTION: This C++11 snippet defines a lambda expression named `sum` that takes two integer arguments (`a` and `b`) and returns their sum. The `auto` keyword is used to automatically deduce the return type, and the `[]` captures nothing from the surrounding scope.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standards@vvE1aUsWbF1OFcmMUHbJa.md#_snippet_0

LANGUAGE: cpp
CODE:
```
auto sum = [](int a, int b) -> int { return a + b; };
```

----------------------------------------

TITLE: Creating a MongoDB Collection Explicitly
DESCRIPTION: This snippet demonstrates how to explicitly create a collection in MongoDB using the `db.createCollection()` method. The method takes the collection name as the first argument.  No specific dependencies are required beyond a connection to a MongoDB database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/index.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.createCollection('users');
```

----------------------------------------

TITLE: Installing PHPStan with Composer
DESCRIPTION: This snippet demonstrates how to install PHPStan as a development dependency using Composer.  It uses the `composer require` command with the `--dev` flag to install the `phpstan/phpstan` package. This command will add PHPStan to your project's `composer.json` file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/phpstan@12k71gNfwAcT9K5aLWgbZ.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ composer require --dev phpstan/phpstan
```

----------------------------------------

TITLE: Caching MySQL Query in PHP
DESCRIPTION: This PHP code snippet demonstrates caching MySQL query results to improve performance. It checks if a cache file exists for a given query. If it exists, it retrieves the cached result; otherwise, it executes the query, stores the result in a cache file using serialization, and returns the result set.  It relies on the deprecated `mysql_*` functions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/performance-optimization@M1nVsh_sCSFJRf6-7Ttsj.md#_snippet_0

LANGUAGE: php
CODE:
```
$query = "SELECT * FROM my_table";
$cache_file = '/tmp/cache/' . md5($query);

if (file_exists($cache_file)) {
    $result_set = unserialize(file_get_contents($cache_file));
} else {
    $result= mysql_query($query);
    $result_set= array();
    while ($row = mysql_fetch_array($result)) {
        $result_set[]= $row;
    }
    file_put_contents($cache_file, serialize($result_set));
}
```

----------------------------------------

TITLE: Implementing Command Pattern Receiver in PHP
DESCRIPTION: This code defines the `Bulb` class, which acts as the receiver in the Command pattern. It contains methods to turn the bulb on and off, representing actions that can be encapsulated as commands.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_48

LANGUAGE: php
CODE:
```
// Receiver
class Bulb
{
    public function turnOn()
    {
        echo "Bulb has been lit";
    }

    public function turnOff()
    {
        echo "Darkness!";
    }
}
```

----------------------------------------

TITLE: Handling Null Values with Type Narrowing in TypeScript
DESCRIPTION: This code snippet demonstrates how to handle potential null values in TypeScript using type narrowing. The function `doSomething` accepts a parameter `x` that can be either a string or null. It checks if `x` is null and, if so, does nothing; otherwise, it converts `x` to uppercase and logs it to the console. This approach avoids errors that could occur when attempting to access properties or methods on a null value when `strictNullChecks` is enabled.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/undefined@Sa6IZtM4XJstultz-pbh0.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function doSomething(x: string | null) {
  if (x === null) {
    // do nothing
  } else {
    console.log('Hello, ' + x.toUpperCase());
  }
}
```

----------------------------------------

TITLE: Identifying POST Request using $_SERVER in PHP
DESCRIPTION: This code snippet demonstrates how to check if an HTTP request is a POST request using the `$_SERVER['REQUEST_METHOD']` variable in PHP.  The code checks if the request method equals 'POST' and executes the code within the conditional block if true. This is a simple method for determining the request type for basic form processing or API endpoints.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/http-methods@tn_iIfaJZVtPK6vFds7FH.md#_snippet_0

LANGUAGE: PHP
CODE:
```
if ($_SERVER['REQUEST_METHOD'] == 'POST') { // your code here }
```

----------------------------------------

TITLE: SSH into Database Server (From App Server - Fails)
DESCRIPTION: This command attempts to SSH into the database server from the application server, using the private key that the application server does not have. This is why it results in a "Permission denied (publickey)" error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_3

LANGUAGE: bash
CODE:
```
ssh -i ~/.ssh/mykey.pem ec2-user@192.168.1.0
```

----------------------------------------

TITLE: Creating a Conan package
DESCRIPTION: Creates a Conan package from the `conanfile.py` file and stores it in the Conan cache. This command compiles the package and assigns it a username and channel for identification. The command `conan create . username/channel` specifies the current directory (.) as the location of `conanfile.py` and `username/channel` as the package identifier.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/conan@ky_UqizToTZHC_b77qFi2.md#_snippet_5

LANGUAGE: bash
CODE:
```
conan create . username/channel
```

----------------------------------------

TITLE: Adding dependency using Composer
DESCRIPTION: This command adds a specified package as a dependency to your PHP project. It automatically updates the `composer.json` file and downloads the required files into the `vendor` directory. The `vendor/package` represents the vendor and package name to be added.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/composer@yVFDu2aTiEZ4PWMdKdW2P.md#_snippet_0

LANGUAGE: shell
CODE:
```
composer require vendor/package
```

----------------------------------------

TITLE: Strict Equality Comparison - Different Types - JavaScript
DESCRIPTION: This snippet demonstrates the strict equality operator comparing a string and a number with the same value. The operator returns false because the types are different, and no type coercion is performed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/javascript/content/@lJwcc6JoUIQoiQ6FkV2KW.md#_snippet_1

LANGUAGE: sh
CODE:
```
"5" === 5   // false
```

----------------------------------------

TITLE: Implementing Recursion with countDown Function in PHP
DESCRIPTION: This PHP code demonstrates recursion through a `countDown` function. The function prints the current count and then calls itself with a decremented count until the count reaches zero. It showcases a simple example of a recursive function with a clear stopping condition to avoid an infinite loop. The function takes an integer `$count` as input and prints the numbers from that integer down to 0. It depends on PHP being installed to execute.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/recursion@D9ybK5INH5zSOcYMb5ZPi.md#_snippet_0

LANGUAGE: PHP
CODE:
```
function countDown($count) {
    echo $count;
    if($count > 0) {
        countDown($count - 1);
    }
}
countDown(5);
```

----------------------------------------

TITLE: Strict Equality Comparison - Same Type - JavaScript
DESCRIPTION: This snippet demonstrates the strict equality operator comparing two strings with the same value. The operator returns true because both the value and type are identical.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/javascript/content/@lJwcc6JoUIQoiQ6FkV2KW.md#_snippet_0

LANGUAGE: sh
CODE:
```
"5" === "5"   // true
```

----------------------------------------

TITLE: Divide function with Error Handling in Go
DESCRIPTION: This Go code snippet defines a `Divide` function that takes two float64 numbers as input and returns the result of the division as a float64 and an error. If the divisor `b` is zero, it returns a custom error using `errors.New`. Otherwise, it returns the result of the division and a nil error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/golang/content/error-handling-comparison.md#_snippet_0

LANGUAGE: Go
CODE:
```
package main

import (
    "errors"
    "fmt"
)

// Divide divides two numbers and returns an error if division by zero is attempted.
func Divide(a, b float64) (float64, error) {
    if b == 0 {
        // Explicitly return an error value when b is zero.
        return 0, errors.New("division by zero is not allowed")
    }
    // Return the result and nil for error if division is successful.
    return a / b, nil
}
```

----------------------------------------

TITLE: Setting an Interval using setInterval JavaScript
DESCRIPTION: This snippet demonstrates how to use the `setInterval` function in JavaScript to execute a callback function repeatedly at a specified interval. The function takes a callback function and an interval in milliseconds as arguments. It returns a unique interval ID that can be used to clear the interval later. In this example, "Hello World" is printed to the console every 1000 milliseconds (1 second).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/set-interval.md#_snippet_0

LANGUAGE: js
CODE:
```
const intervalId = setInterval(() => {
  console.log('Hello World');
}, 1000);

// Output:
// Hello World
// Hello World
```

----------------------------------------

TITLE: Connecting to MySQL database using MySQLi in PHP
DESCRIPTION: This PHP snippet demonstrates how to connect to a MySQL database using the MySQLi extension. It initializes connection parameters (servername, username, password, dbname), establishes a connection, and checks for connection errors. If the connection fails, it terminates the script. If successful, it outputs "Connected successfully".
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/mysqli@YLuo0oZJzTCoiZoOSG57z.md#_snippet_0

LANGUAGE: PHP
CODE:
```
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "myDB";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}
echo "Connected successfully";
```

----------------------------------------

TITLE: Rejecting a Promise in JavaScript
DESCRIPTION: This code snippet shows how to reject a Promise in JavaScript. A new `Promise` is created, and the `reject` function is called with a new `Error` object to signal that the promise has failed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/error-in-async-await.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const promise = new Promise((resolve, reject) => {
  reject(new Error('Something went wrong'));
});
```

----------------------------------------

TITLE: Finding documents with non-null fields
DESCRIPTION: This code snippet demonstrates how to find documents where a field exists and has a non-null value. It combines the `$exists` and `$ne` operators to filter documents in the `books` collection where the `edition` field exists and is not equal to `null`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/exists.md#_snippet_4

LANGUAGE: javascript
CODE:
```
db.books.find({ edition: { $exists: true, $ne: null } });
```

----------------------------------------

TITLE: Querying documents with $type operator in MongoDB using BSON data type
DESCRIPTION: This code snippet demonstrates how to use the `$type` operator to find documents in the `products` collection where the `price` field has the data type Double (1). It uses the numeric BSON data type value instead of the alias.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/type.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.products.find({ price: { $type: 1 } });
```

----------------------------------------

TITLE: Example validate command output
DESCRIPTION: This is an example of the output returned by the `validate` command. The output includes information about the validated collection such as its namespace (`ns`), the number of indexes (`nIndexes`), the number of keys per index (`keysPerIndex`), whether the collection is valid (`valid`), any errors or warnings encountered, and the overall status of the command execution (`ok`).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/validate.md#_snippet_3

LANGUAGE: javascript
CODE:
```
{
    "ns": <string>, // Namespace of the validated collection
    "nIndexes": <number>, // Number of indexes in the collection
    "keysPerIndex": {
        <index_name>: <number> // Number of keys per index
    },
    "valid": <boolean>, // If true, the collection is valid
    "errors": [<string>, ...], // Array of error messages, if any
    "warnings": [<string>, ...], // Array of warning messages, if any
    "ok": <number> // If 1, the validation command executed successfully
}
```

----------------------------------------

TITLE: Illustrating null vs undefined in MongoDB document - JavaScript
DESCRIPTION: This code snippet demonstrates the difference between using `null` and `undefined` values in a MongoDB document represented in JavaScript object notation. It highlights that while `undefined` is supported for backward compatibility, `null` is the recommended way to represent missing or absent values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/undefined.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "field1": null,
  "field2": undefined
}
```

----------------------------------------

TITLE: Implementing Iterator Pattern in PHP
DESCRIPTION: This code implements the Iterator pattern using the `StationList` class. This class implements `Countable` and `Iterator` interfaces to manage and iterate over a collection of `RadioStation` objects. It includes methods to add, remove, and iterate through the stations.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_53

LANGUAGE: php
CODE:
```
use Countable;
use Iterator;

class StationList implements Countable, Iterator
{
    /** @var RadioStation[] $stations */
    protected $stations = [];

    /** @var int $counter */
    protected $counter;

    public function addStation(RadioStation $station)
    {
        $this->stations[] = $station;
    }

    public function removeStation(RadioStation $toRemove)
    {
        $toRemoveFrequency = $toRemove->getFrequency();
        $this->stations = array_filter($this->stations, function (RadioStation $station) use ($toRemoveFrequency) {
            return $station->getFrequency() !== $toRemoveFrequency;
        });
    }

    public function count(): int
    {
        return count($this->stations);
    }

    public function current(): RadioStation
    {
        return $this->stations[$this->counter];
    }

    public function key()
    {
        return $this->counter;
    }

    public function next()
    {
        $this->counter++;
    }

    public function rewind()
    {
        $this->counter = 0;
    }

    public function valid(): bool
    {
        return isset($this->stations[$this->counter]);
    }
}
```

----------------------------------------

TITLE: Inline Variables Example in C++17
DESCRIPTION: This code shows the use of inline variables in C++17, enabling the definition of global and class static variables in header files without linker errors due to multiple definitions. The `inline` keyword allows the variable `globalVar` to be defined in a header file included in multiple translation units. No special dependencies beyond C++17 are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-17@R2-qWGUxsTOeSHRuUzhd2.md#_snippet_2

LANGUAGE: cpp
CODE:
```
inline int globalVar = 0;
```

----------------------------------------

TITLE: Compiling with TypeScript Compiler Options (Bash)
DESCRIPTION: This code snippet shows how to use the TypeScript compiler (`tsc`) with specific compiler options passed via the command line. It sets the target ECMAScript version to ES5 and the module system to CommonJS, which are common configurations for compatibility and module management. The `--` prefix indicates that these are compiler options.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/compiler-options@RrExVb7l2gd0s_TlNdLeD.md#_snippet_0

LANGUAGE: bash
CODE:
```
tsc --target ES5 --module commonjs
```

----------------------------------------

TITLE: Security Configuration Audit Script
DESCRIPTION: This Python script retrieves all security-related configurations within an account and generates a canonical output representing the current security settings. It is designed for use in automated security auditing. The script needs to be executed with sufficient privileges to access all relevant configurations, and cronjob to be scheduled regularly to compare with previous runs.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/best-practices/aws/content/security-audit.md#_snippet_1

LANGUAGE: Python
CODE:
```
See: https://gist.github.com/jlevy/cce1b44fc24f94599d0a4b3e613cc15d
```

----------------------------------------

TITLE: Print Hello World in C++
DESCRIPTION: This C++ code snippet demonstrates a "Hello, World!" program using object-oriented programming. It defines a `HelloWorld` class with a `printHello` method that prints the message to the console. The `main` function creates an object of the class and calls the `printHello` method, illustrating object-oriented features in C++.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-vs-c@2Ag0t3LPryTF8khHLRfy-.md#_snippet_1

LANGUAGE: C++
CODE:
```
#include <iostream>

class HelloWorld {
public:
    void printHello() {
        std::cout << "Hello, World!\n";
    }
};

int main() {
    HelloWorld obj;
    obj.printHello();
    return 0;
}
```

----------------------------------------

TITLE: Heap Memory Allocation Example in C++
DESCRIPTION: This code snippet demonstrates how to allocate and deallocate memory on the heap using `new` and `delete`. Memory for an integer is dynamically allocated using `new int`, assigned the value 10, and then deallocated using `delete p`.  Failure to deallocate memory with `delete` leads to memory leaks.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/memory-model@mSFwsTYvmg-GwG4_DEIEf.md#_snippet_1

LANGUAGE: cpp
CODE:
```
void functionExample() {
    int* p = new int; // dynamically allocated int in heap memory
    *p = 10;
    // more code
    delete p; // deallocate memory
}
```

----------------------------------------

TITLE: Implementing Inheritance and Polymorphism in C++
DESCRIPTION: This code showcases inheritance and polymorphism in C++. The `Derived` class inherits from the `Base` class, and both classes have a `display` method, demonstrating method overriding and the ability to use a base class type to represent derived class objects. Requires the iostream library.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/language-concepts@-6fwJQOfsorgHkoQGp4T3.md#_snippet_6

LANGUAGE: cpp
CODE:
```
class Base {
public:
    void display() {
        std::cout << "This is the base class.";
    }
};

class Derived : public Base {
public:
    void display() {
        std::cout << "This is the derived class.";
    }
};
```

----------------------------------------

TITLE: Installing Go Dependencies
DESCRIPTION: These bash commands use the `go get` command to download and install the necessary dependencies for the project. These dependencies include Gin (a web framework), GORM (an ORM), Postgres and SQLite drivers for GORM, and godotenv (for loading environment variables).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_2

LANGUAGE: bash
CODE:
```
go get -u github.com/gin-gonic/gin
go get -u gorm.io/gorm
go get -u gorm.io/driver/postgres
go get -u gorm.io/driver/sqlite
go get -u github.com/joho/godotenv
```

----------------------------------------

TITLE: Defining Class with Property and Method in PHP
DESCRIPTION: This PHP code snippet demonstrates how to define a class with a public property `$color` and a method `setColor()` that sets the value of the property. The `public` keyword makes the property accessible from anywhere. The `setColor` method takes a `$color` parameter and assigns it to the object's `$color` property using `$this->color`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/properties-and-methods@MRAPXshy9RoYdReY6grf_.md#_snippet_0

LANGUAGE: PHP
CODE:
```
class Car {
  public $color; // Property

  // Method
  public function setColor($color) {
    $this->color = $color;
  }
}
```

----------------------------------------

TITLE: Instruction Tuned LLM Formula
DESCRIPTION: This formula describes the construction of Instruction Tuned LLMs. It shows that Instruction Tuned LLMs are created by taking Base LLMs and further training and fine-tuning them using techniques like Reinforcement Learning with Human Feedback (RLHF).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/basic-llm/llm-types.md#_snippet_0

LANGUAGE: plaintext
CODE:
```
Instruction Tuned LLMs = Base LLMs + Further Tuning + RLHF
```

----------------------------------------

TITLE: Checking File Writability using is_writable() in PHP
DESCRIPTION: This PHP code snippet demonstrates how to check if a file is writable using the `is_writable()` function. The function takes the file path as an argument and returns true if the file is writable, false otherwise. This can be used to determine if the script has the necessary permissions to write to the file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/file-permissions@tgIyG6vHWpe9sz6lHmj5a.md#_snippet_2

LANGUAGE: PHP
CODE:
```
is_writable()
```

----------------------------------------

TITLE: Defining a String or Number Hybrid Type in TypeScript
DESCRIPTION: This code snippet demonstrates how to define a hybrid type called `StringOrNumber` in TypeScript. This type allows a variable to hold either a string or a number value. The `|` operator is used to create a union type, specifying that the type can be either of the listed types.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/hybrid-types@lvtTSHH9yBTCiLng8btnI.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type StringOrNumber = string | number;
```

----------------------------------------

TITLE: Using the Visitor Pattern with Jump Visitor
DESCRIPTION: This demonstrates using the `Jump` visitor.  It creates an instance of the `Jump` visitor and then calls the `accept` method on each animal with both the `Speak` and `Jump` visitors.  This demonstrates how to add behaviors without modifying the animal classes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_70

LANGUAGE: PHP
CODE:
```
$jump = new Jump();

$monkey->accept($speak);   // Ooh oo aa aa!
$monkey->accept($jump);    // Jumped 20 feet high! on to the tree!

$lion->accept($speak);     // Roaaar!
$lion->accept($jump);      // Jumped 7 feet! Back on the ground!

$dolphin->accept($speak);  // Tuut tutt tuutt!
$dolphin->accept($jump);   // Walked on water a little and disappeared
```

----------------------------------------

TITLE: Basic find() method - MongoDB
DESCRIPTION: This snippet demonstrates the basic usage of the `find()` method to retrieve all documents from a specified MongoDB collection. It does not require any specific parameters, and returns all documents present in the collection. The collection name needs to be a valid collection within the MongoDB database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/find-methods.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection_name.find();
```

----------------------------------------

TITLE: Chain of Responsibility Bank Account Class
DESCRIPTION: This PHP code defines a `Bank` class that extends the `Account` class. It represents a bank account with a specific balance. It inherits the `pay` and `canPay` methods from the base class, allowing it to participate in the chain of responsibility for handling payments.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_44

LANGUAGE: php
CODE:
```
class Bank extends Account
{
    protected $balance;

    public function __construct(float $balance)
    {
        $this->balance = $balance;
    }
}

```

----------------------------------------

TITLE: Dual Prompt: Initial SEO topic generation
DESCRIPTION: This snippet shows the first prompt in a dual-prompt approach, requesting key SEO topics. No specific dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/prompting-techniques/dual-prompt.md#_snippet_1

LANGUAGE: text
CODE:
```
I am writing a guide about SEO. Give me 10 key topics that I should cover in this guide.
```

----------------------------------------

TITLE: Setting a Specific Ulimit (Bash)
DESCRIPTION: This snippet demonstrates how to set a specific ulimit, in this case, the soft limit for file handles, using the `ulimit -n` command. The example sets the limit to 1024. This command directly affects the current shell session and its child processes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/containerization/ulimits.md#_snippet_1

LANGUAGE: bash
CODE:
```
ulimit -n 1024
```

----------------------------------------

TITLE: Running Go Tests
DESCRIPTION: This bash command executes the Go tests located in the `tests/main_test.go` file using the `go test` command.  The `GIN_MODE=release` environment variable simulates a production environment for the tests, and the `-v` flag enables verbose output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_24

LANGUAGE: bash
CODE:
```
GIN_MODE=release go test tests/main_test.go -v
```

----------------------------------------

TITLE: Class Forward Declaration in C++
DESCRIPTION: Declares a class without defining its members, allowing the use of pointers or references to the class before the class definition. This helps resolve cyclic dependencies and reduces compilation time. Attempting to instantiate the class or call its member functions before definition results in a compilation error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/forward-declaration@ZHjU60uzJTezADRhDTESG.md#_snippet_0

LANGUAGE: cpp
CODE:
```
class ClassA; // forward declaration
```

----------------------------------------

TITLE: MongoDB Single-Purpose Aggregation (count) (JavaScript)
DESCRIPTION: This code snippet demonstrates the use of `db.collection.count()` for single-purpose aggregation in MongoDB. It counts the number of documents in the collection that have the 'status' field equal to 'A'. Requires MongoDB and a collection with a 'status' field.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/index.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.count({ status: 'A' });
```

----------------------------------------

TITLE: Low-Level and High-Level Programming in C++
DESCRIPTION: This snippet showcases both low-level (pointer manipulation) and high-level (STL vector usage) programming capabilities of C++. It includes the iostream and vector libraries.  It demonstrates how C++ allows working directly with memory and using abstract data structures.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/why-use-c@tl6VCQ5IEGDVyFcgj7jDm.md#_snippet_1

LANGUAGE: C++
CODE:
```
#include <iostream>
#include <vector>

int main() {
    // Low-level programming
    int number = 42;
    int* ptr_number = &number;

    // High-level programming
    std::vector<int> myVector = {1, 2, 3};
    for (const auto &i: myVector) {
        std::cout << i << '\n';
    }
}
```

----------------------------------------

TITLE: Strict Equality Comparison (===) in JavaScript
DESCRIPTION: This snippet showcases the strict equality operator `===` in JavaScript. It compares values and types without any type conversion.  If the types are different, the result is always false. For instance, comparing a string '5' to the number 5 results in false because they have different types.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/js-equality-operators.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
'5' === 5
```

----------------------------------------

TITLE: Type Union in TypeScript
DESCRIPTION: Defines a type `stringOrNumber` as a union of `string` and `number`.  A variable `value` is declared with the `stringOrNumber` type and assigned a string value initially, then reassigned a number. This showcases the flexibility of union types, allowing a variable to hold values of different types defined in the union.  No specific dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/combining-types@qefnsugcveizVq2TORRgn.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type stringOrNumber = string | number;
let value: stringOrNumber = 'hello';

value = 42;
```

----------------------------------------

TITLE: Validate JWT for Authentication (JavaScript)
DESCRIPTION: This code snippet demonstrates how to validate a JWT (JSON Web Token) sent in the authorization header of an HTTP request. It uses the `jwt.verify` method to decode and verify the token using a secret key. If the token is valid, the decoded payload is available; otherwise, an error is returned.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/api-security.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const token = req.headers['authorization'];
jwt.verify(token, secretKey, (err, decoded) => { ... });
```

----------------------------------------

TITLE: Accessing Form Data with $_POST in PHP
DESCRIPTION: This code snippet demonstrates how to access form data submitted via the HTTP POST method using the $_POST superglobal in PHP. It checks if the request method is POST and retrieves the value of the 'name' field from the form. It is crucial to validate and sanitize this data to prevent security vulnerabilities.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/_post@qNG-a4iIO-puZsMwAMzYC.md#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $name = $_POST["name"];
}
?>
```

----------------------------------------

TITLE: Using Function-like Macro in C++
DESCRIPTION: This code snippet demonstrates the usage of the `SQUARE` macro. The macro `SQUARE(5)` is expanded to `((5) * (5))` during preprocessing, and the result is assigned to the integer variable `square_of_five`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/macros@zKdlfZTRHwjtmRUGW9z9-.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int square_of_five = SQUARE(5); // expands to ((5) * (5))
```

----------------------------------------

TITLE: Defining Animal and AnimalOperation interfaces
DESCRIPTION: Defines the `Animal` and `AnimalOperation` interfaces. The `Animal` interface requires an `accept` method, and the `AnimalOperation` interface defines visit methods for different animal types.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_65

LANGUAGE: PHP
CODE:
```
// Visitee
interface Animal
{
    public function accept(AnimalOperation $operation);
}

// Visitor
interface AnimalOperation
{
    public function visitMonkey(Monkey $monkey);
    public function visitLion(Lion $lion);
    public function visitDolphin(Dolphin $dolphin);
}
```

----------------------------------------

TITLE: Cache-Control with s-maxage directive
DESCRIPTION: Shows the usage of `Cache-Control: s-maxage=seconds` to set the maximum age specifically for shared caches (proxies). This overrides `max-age` and `Expires` for shared caches.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_6

LANGUAGE: html
CODE:
```
Cache-Control: s-maxage=3600, public
```

----------------------------------------

TITLE: Using Mediator Pattern in PHP
DESCRIPTION: This code demonstrates how to use the Mediator pattern with a chat room example. It creates a `ChatRoom` mediator and two `User` objects, John and Jane. It then shows how the users can send messages through the mediator.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_57

LANGUAGE: php
CODE:
```
$mediator = new ChatRoom();

$john = new User('John Doe', $mediator);
$jane = new User('Jane Doe', $mediator);

$john->send('Hi there!');
$jane->send('Hey!');

// Output will be
// Feb 14, 10:58 [John]: Hi there!
// Feb 14, 10:58 [Jane]: Hey!
```

----------------------------------------

TITLE: User Story Example
DESCRIPTION: This snippet provides an example of a user story, illustrating how to apply the template to a specific scenario. It demonstrates how to articulate a user's desire in a clear and actionable way, highlighting the value proposition for the user.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/ux-design/content/user-stories@tkbkpvHlWQeOnReanR8J7.md#_snippet_1

LANGUAGE: plaintext
CODE:
```
As a busy parent, I want to be able to quickly find activities for my children in my local area, so that I can keep them entertained without spending hours searching the web.
```

----------------------------------------

TITLE: Creating a Regular Expression in MongoDB (JavaScript)
DESCRIPTION: Demonstrates creating regular expressions in MongoDB using both JavaScript regex syntax and the BSON RegExp type. The 'i' flag is used for case-insensitive matching. These regular expressions can then be used in MongoDB queries.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/regex.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Creating a regex to find documents containing the word 'example'
var regex = /example/i; // Using JavaScript regex syntax with 'i' flag (case-insensitive)
var bsonRegex = new RegExp('example', 'i'); // Using BSON RegExp type
```

----------------------------------------

TITLE: Static Storage Duration Example
DESCRIPTION: Demonstrates the use of static storage duration in C++. Global variables, static data members of a class, and static local variables have static storage duration, meaning they exist for the entire duration of the program. These variables are initialized once and persist until the program terminates.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/lifetime-of-objects@9aA_-IfQ9WmbPgwic0mFN.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int global_var;            // Static storage duration
class MyClass {
  static int static_var;   // Static storage duration
};
void myFunction() {
  static int local_var;    // Static storage duration
}
```

----------------------------------------

TITLE: Transforming Array with map() in JavaScript
DESCRIPTION: This code snippet demonstrates the use of the `map()` method in JavaScript to create a new array by transforming each element of an existing array. The original array remains unchanged. The arrow function within `map()` adds the string " Roadmap" to each roadmap name.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/map-method.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const roadmaps = ['JavaScript', 'React', 'Node.js'];

const renamedRoadmaps = roadmaps.map((roadmap) => {
  return `${roadmap} Roadmap`;
});

console.log(roadmaps); // ['JavaScript', 'React', 'Node.js']
console.log(renamedRoadmaps); // ['JavaScript Roadmap', 'React Roadmap', 'Node.js Roadmap']
```

----------------------------------------

TITLE: Example JSON Output
DESCRIPTION: This JSON object represents the expected output from the prompt that asks to generate a JSON object representing a product review. It includes the product name, a boolean value indicating whether the review is positive, and a brief summary of the review's sentiment and key points.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/good-prompts/structured-data.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "product": "XYZ ProTech 2000",
  "isPositive": false,
  "summary": "Failed to meet expectations due to lackluster build quality, confusing user interface, abysmal performance, and disappointing customer support."
}
```

----------------------------------------

TITLE: GitHub Actions Workflow Deployment
DESCRIPTION: This workflow automates the deployment of the application to the server using GitHub Actions. Two options are provided: running the Ansible playbook directly in the GitHub Actions environment, or using SSH to connect to the server and deploy the application. This involves configuring SSH keys as secrets.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/nodejs-service-deployment.md#_snippet_1

LANGUAGE: yaml
CODE:
```
### Task #2: Automate Deployment using GitHub Actions

Write a GitHub Action workflow that will deploy the application to the server using one of the following methods. You are welcome to try both options, but you are not required to do that. You are also welcome to use any other method to accomplish the same result.
```

----------------------------------------

TITLE: Using setTimeout to Delay Code Execution in JavaScript
DESCRIPTION: This code snippet demonstrates how to use the `setTimeout` function to execute a callback function after a specified delay (in milliseconds). The function returns a timeout ID which can be used to cancel the timeout.  It logs "Hello World" to the console after a delay of 1000 milliseconds (1 second).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/set-timeout.md#_snippet_0

LANGUAGE: js
CODE:
```
const timeoutId = setTimeout(() => {
  console.log('Hello World');
}, 1000);

// Output:
// Hello World
```

----------------------------------------

TITLE: Installing a Package with Spack (Bash)
DESCRIPTION: This command installs a specified package using Spack. Replace `<package-name>` with the actual name of the package you wish to install (e.g., `hdf5`). Spack will automatically resolve and install the package's dependencies. The installed package is not automatically loaded into the environment; a separate command is required for that.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/spack@3ehBc2sKVlPj7dn4RVZCH.md#_snippet_1

LANGUAGE: bash
CODE:
```
spack install <package-name>
```

----------------------------------------

TITLE: Viewing Authentication Logs with tail command - Bash
DESCRIPTION: This snippet demonstrates how to use the `tail` command in Bash to view the last few entries in the authentication log file. This allows for real-time monitoring of authentication events and is crucial for identifying suspicious activity. The location of the auth log file may vary depending on the Linux distribution.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/server-review/auth-logs.md#_snippet_0

LANGUAGE: bash
CODE:
```
tail /var/log/auth.log
```

----------------------------------------

TITLE: Lambda Function with Parameters
DESCRIPTION: This snippet shows a lambda function that accepts two integer parameters and returns their sum. It showcases how to define parameters for a lambda function and use them within its body to perform a calculation and return a result.  The returned value is then assigned to a variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/lambdas@xjiFBVe-VGqCqWfkPVGKf.md#_snippet_2

LANGUAGE: cpp
CODE:
```
auto add = [](int a, int b) {
    return a + b;
};
int result = add(3, 4); // result = 7
```

----------------------------------------

TITLE: Defining Concepts in C++
DESCRIPTION: This C++20 snippet defines a concept named `Addable` that checks whether two objects of type `T` can be added together and if the result is of the same type `T`. The `requires` clause specifies the requirement that `a + b` must be a valid expression that converts to type `T`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standards@vvE1aUsWbF1OFcmMUHbJa.md#_snippet_6

LANGUAGE: cpp
CODE:
```
template<typename T>
concept Addable = requires(T a, T b) {
    { a + b } -> std::same_as<T>;
};
```

----------------------------------------

TITLE: Removing Empty Directory with rmdir in Bash
DESCRIPTION: This snippet demonstrates how to remove an empty directory using the `rmdir` command in Linux. The `rmdir` command removes the specified directory, but only if it is empty. If the directory contains any files or subdirectories, the command will fail. Replace [directory] with the actual directory name.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/creating-files.md#_snippet_4

LANGUAGE: bash
CODE:
```
# Removes an empty directory
rmdir [directory] 
```

----------------------------------------

TITLE: Use Internal Module (Namespace) in TypeScript
DESCRIPTION: This snippet illustrates how to use an internal module (namespace) defined in another file. It uses a triple-slash directive `/// <reference path="myModule.ts" />` to include the `myModule.ts` file.  The `doSomething` function within the `MyModule` namespace is then called. Requires the myModule.ts file to be defined.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/typescript-modules@sE9lqkkqwnsVJxTJv37YZ.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// main.ts
/// <reference path="myModule.ts" />
MyModule.doSomething(); // Output: "Doing something..."
```

----------------------------------------

TITLE: Defining a Structure in C++
DESCRIPTION: This code snippet demonstrates how to define a structure named `Employee` in C++. The structure contains three members: an integer `id`, a string `name`, and a float `salary`.  An object `e1` of the `Employee` structure is also created. No dependencies required other than standard C++ library.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/structures-and-classes@CMlWNQwpywNhO9B6Yj6Me.md#_snippet_0

LANGUAGE: C++
CODE:
```
struct Employee {
    int id;
    std::string name;
    float salary;
};

Employee e1; // create an object of the 'Employee' structure
```

----------------------------------------

TITLE: Dummy Script Creation in Bash
DESCRIPTION: This shell script simulates a long-running background process by continuously writing a message to a log file every 10 seconds.  It uses an infinite loop and the `sleep` command to achieve this.  The script is intended to be managed by a systemd service.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/dummy-systemd-service.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/bin/bash

while true; do
  echo "Dummy service is running..." >> /var/log/dummy-service.log
  sleep 10
done
```

----------------------------------------

TITLE: MongoDB $and Operator Example (JavaScript)
DESCRIPTION: This example demonstrates how to use the `$and` operator to find documents that satisfy multiple conditions. The query finds documents where both `key1` equals `value1` and `key2` equals `value2`. It assumes a MongoDB database connection and a collection named `collection_name`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/index.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection_name.find({ $and: [{ key1: value1 }, { key2: value2 }] });
```

----------------------------------------

TITLE: Prompting User for Input in JavaScript
DESCRIPTION: This snippet shows how to use the `prompt()` function to get input from the user. The `prompt()` function takes a string as an argument, which is the message displayed to the user. It returns the input value as a string if the user clicks OK, or `null` if the user clicks Cancel. The input is then logged to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/alert-prompt-confirm.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const name = prompt('What is your name?');
console.log(name);
```

----------------------------------------

TITLE: Creating a 2d Index in MongoDB
DESCRIPTION: This snippet demonstrates how to create a 2d index in MongoDB using the `createIndex` method.  The 2d index is used for simpler cases when dealing with small scale data on a flat Cartesian plane and stores geospatial data as legacy coordinate pairs.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/geospatial.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.createIndex({ location: '2d' });
```

----------------------------------------

TITLE: Extract Nouns and Translate to French with Steps (Correct Output)
DESCRIPTION: This is the correct output, where the nouns are in French.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/good-prompts/include-steps.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "nouns_count": 10,
  "nouns_french": [
    "village",
    "frères",
    "Jack",
    "Jill",
    "quête",
    "eau",
    "sommet de la colline",
    "bien",
    "pierre",
    "colline"
  ]
}
```

----------------------------------------

TITLE: Storing JavaScript Code in MongoDB
DESCRIPTION: This snippet demonstrates how to store JavaScript code in a MongoDB document using the `Code` BSON data type. It inserts a document into the `scripts` collection with a `name` and a `code` field containing a JavaScript function that returns 'Hello World!'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/javascript.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.scripts.insert({
  name: 'helloWorld',
  code: new Code("function() { return 'Hello World!'; }"),
});
```

----------------------------------------

TITLE: Update To-Do Item Response Example
DESCRIPTION: Displays the JSON response after successfully updating an existing to-do item. The response contains the ID, updated title, and updated description of the item.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_9

LANGUAGE: JSON
CODE:
```
{
  "id": 1,
  "title": "Buy groceries",
  "description": "Buy milk, eggs, bread, and cheese"
}
```

----------------------------------------

TITLE: Assigning Issues with GitHub CLI
DESCRIPTION: This command assigns an issue to a specific user. It requires the issue number and the username of the assignee as arguments. The GitHub CLI must be installed and authenticated.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/issue-management@kGnZifvXbHBf5zXIsfAQw.md#_snippet_2

LANGUAGE: Shell
CODE:
```
gh issue assign <issue-number> <username>
```

----------------------------------------

TITLE: Declaring Global Augmentation in TypeScript
DESCRIPTION: This code snippet shows how to declare global augmentation in TypeScript by adding a function to the NodeJS.Global interface. This allows defining a function that can be called from anywhere in the project without importing.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/global-augmentation@JQwWeB1gkANSYfQmH69Bs.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// myModule.d.ts
declare namespace NodeJS {
  interface Global {
    myGlobalFunction(): void;
  }
}
```

----------------------------------------

TITLE: List Images Endpoint
DESCRIPTION: This endpoint allows a user to retrieve a paginated list of images. It accepts query parameters for pagination (page and limit).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/image-processing-service.md#_snippet_5

LANGUAGE: HTTP
CODE:
```
GET /images?page=1&limit=10
```

----------------------------------------

TITLE: Initializing package.json
DESCRIPTION: Initializes a new Node.js project and generates a default `package.json` file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_1

LANGUAGE: shell
CODE:
```
npm init -y
```

----------------------------------------

TITLE: Basic join Command Syntax in Bash
DESCRIPTION: This snippet shows the basic syntax for using the `join` command to combine two files, `file1.txt` and `file2.txt`. The command assumes the files are sorted based on the join field. The default join field is the first field in each line.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/join.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Syntax
join file1.txt file2.txt
```

----------------------------------------

TITLE: Creating a Single Field Index in MongoDB (JavaScript)
DESCRIPTION: This code snippet demonstrates how to create a single-field index on the 'username' field in the 'users' collection in MongoDB. The `createIndex()` method is used, with `1` indicating ascending order. This index helps optimize queries that filter or sort by the username field.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/indexes.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.users.createIndex({ username: 1 });
```

----------------------------------------

TITLE: Reading Input and Writing Output using iostream
DESCRIPTION: This code snippet demonstrates how to read an integer from standard input using `std::cin` and write it to standard output using `std::cout`. It includes the necessary `iostream` header and uses the `main` function as the entry point.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/iostream@VeVxZ230xkesQsIDig8zQ.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

int main() {
    int a;
    std::cout << "Enter a number: ";
    std::cin >> a;
    std::cout << "You entered: " << a << '\n';
    return 0;
}
```

----------------------------------------

TITLE: Installing dependencies with Conan
DESCRIPTION: Installs the project's dependencies as specified in the `conanfile.txt` file. This involves creating a `build` directory, navigating into it, and then running `conan install ..` to fetch and build the dependencies. The `..` refers to the parent directory, where `conanfile.txt` resides.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/conan@ky_UqizToTZHC_b77qFi2.md#_snippet_2

LANGUAGE: bash
CODE:
```
mkdir build && cd build
conan install ..
```

----------------------------------------

TITLE: Validating a collection with full check
DESCRIPTION: This example validates a MongoDB collection named 'products' using the `db.runCommand` method and performs a full check. The `full: true` option instructs the command to conduct a more thorough inspection of the collection, examining all its extents on disk. This may impact performance.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/validate.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.runCommand({ validate: 'products', full: true });
```

----------------------------------------

TITLE: Attaching Event Handler to Button in React
DESCRIPTION: This JavaScript code snippet demonstrates how to attach an event handler to a button in a React component.  The `activateLasers` function is defined to handle the `onClick` event.  The `e.preventDefault()` call prevents the default browser action, and `console.log` is used to display a message when the button is clicked.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/synthetic-events.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function activateLasers(e) {
    e.preventDefault();
    console.log('The button was clicked.');
}

<button onClick={activateLasers}>Activate Lasers</button>
```

----------------------------------------

TITLE: Create operation in PostgreSQL using pg
DESCRIPTION: This code snippet demonstrates a create operation in PostgreSQL using the pg driver.  It inserts a new record into the 'users' table with the name 'John Doe'.  The 'pool' object must be initialized and connected to the database. Uses parameterized query to prevent SQL injection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/nodejs-database-crud.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
pool.query('INSERT INTO users (name) VALUES ($1)', ['John Doe']);
```

----------------------------------------

TITLE: Including Standard Library Headers in C++
DESCRIPTION: This code snippet demonstrates how to include standard library headers in a C++ program using the `#include` directive with angle brackets `<>`. This method is used to access functionalities like input/output streams and dynamic arrays. Dependencies: Standard C++ Library.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/library-inclusion@5mNqH_AEiLxUmgurNW1Fq.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <vector>
```

----------------------------------------

TITLE: Complex Logical Expression in C++
DESCRIPTION: Illustrates a complex logical expression using AND (&&) and OR (||) operators. The code checks if `a` is greater than 0 AND either `b` or `c` is greater than 0. If the combined condition is true, it prints a message. Requires the iostream library for output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/logical-operators@Y9gq8WkDA_XGe68JkY2UZ.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int a = 5, b = -10, c = 15;

if (a > 0 && (b > 0 || c > 0)) {
    std::cout << "At least two values are positive.\n";
}
```

----------------------------------------

TITLE: Log Archive Filename - Bash
DESCRIPTION: This code snippet shows the expected naming convention for the archived log file.  The filename includes "logs_archive", followed by the date and time of the archive creation in the format YYYYMMDD_HHMMSS, and the ".tar.gz" extension.  This enables easy identification and sorting of archived log files based on their creation time.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/log-archive-tool.md#_snippet_1

LANGUAGE: bash
CODE:
```
logs_archive_20240816_100648.tar.gz
```

----------------------------------------

TITLE: MongoDB $in Operator Example
DESCRIPTION: Illustrates the usage of the $in operator with a sample MongoDB collection named `articles`. The example demonstrates how to find documents where the `tags` field contains either "NoSQL" or "javascript". The query targets the `articles` collection and uses the `find` method with the `$in` operator to filter results.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/in.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.articles.find({ tags: { $in: ['NoSQL', 'javascript'] } });
```

----------------------------------------

TITLE: Updating NuGet Package via Command Line (Bash)
DESCRIPTION: This bash command demonstrates how to update a NuGet package named 'PackageName' using the command-line tool `nuget.exe`.  It assumes that `nuget.exe` is installed and accessible in the system's PATH and that the specified package is already installed. The command will update the package to the latest available version.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/nuget@g0s0F4mLV16eNvMBflN2e.md#_snippet_2

LANGUAGE: Bash
CODE:
```
nuget update PackageName
```

----------------------------------------

TITLE: Emotion Identification Prompt - Extract Emotions from Review
DESCRIPTION: This prompt instructs the LLM to identify a list of emotions expressed in a given review. The response should be limited to a maximum of 5 items, formatted as a comma-separated list of lowercase words.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/inferring.md#_snippet_1

LANGUAGE: text
CODE:
```
Identify a list of emotions that the writer of the following review is expressing. Include no more than 5 items in the list. Format your answers as a list of lower-case words separated by commas.

"""I am so happy with this product. It is the best thing I have ever bought. I will definitely buy from them again."""
```

----------------------------------------

TITLE: Authenticating Client with X.509 Certificate (Bash)
DESCRIPTION: This code snippet shows how to authenticate a client to the MongoDB server using an X.509 certificate.  It requires the paths to the client certificate and CA certificate files, the authentication database (`$external`), and the authentication mechanism (`MONGODB-X509`).  Ensure the hostname and paths to the certificate files are accurate.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-security/x509-certificate-auth.md#_snippet_2

LANGUAGE: bash
CODE:
```
mongo --tls --tlsCertificateKeyFile /path/to/client.pem --tlsCAFile /path/to/ca.pem --authenticationDatabase '$external' --authenticationMechanism 'MONGODB-X509' --host hostname.example.com
```

----------------------------------------

TITLE: Checking Service Status with systemctl
DESCRIPTION: This command checks the status of a specified service (in this case, apache2.service) using the `systemctl` command. The output provides information about whether the service is running, its process ID (PID), memory usage, and recent log messages.  It relies on the `systemd` service manager.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/service-management/service-status.md#_snippet_0

LANGUAGE: bash
CODE:
```
systemctl status apache2.service
```

----------------------------------------

TITLE: AND (&&) in C++
DESCRIPTION: Demonstrates the 'AND' logical operator in C++. This operator combines two boolean values and returns true only if both operands are true, and false otherwise.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_11

LANGUAGE: cpp
CODE:
```
true && true // true
true && false // false
```

----------------------------------------

TITLE: Merging files with `paste` command (Bash)
DESCRIPTION: This command merges the contents of `file1.txt` and `file2.txt` column-wise, with a tab character as the default delimiter, and redirects the output to a new file named `combined.txt`. The files `file1.txt` and `file2.txt` must exist in the current directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/paste.md#_snippet_0

LANGUAGE: bash
CODE:
```
paste file1.txt file2.txt > combined.txt
```

----------------------------------------

TITLE: Declaring Readonly TypeScript Interface
DESCRIPTION: Defines a simple TypeScript interface `Todo` with a `title` property of type string.  Then, it demonstrates the use of `Readonly<Todo>` to create a `todo` object where the `title` property cannot be reassigned. This prevents accidental modification of the object's properties after initialization.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/readonly@IuO9-O_DQdDYuAbdGWdgb.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface Todo {
  title: string;
}

const todo: Readonly<Todo> = {
  title: 'Delete inactive users',
};

// Cannot assign to 'title' because it is a read-only property.
todo.title = 'Hello';
```

----------------------------------------

TITLE: Rejecting a Promise - JavaScript
DESCRIPTION: This snippet demonstrates how to create a Promise that is immediately rejected with an error. The `reject` function is called with a new `Error` object, which will be passed to any error handling methods attached to the promise.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/error-in-promise.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const promise = new Promise((resolve, reject) => {
  reject(new Error('Something went wrong'));
});
```

----------------------------------------

TITLE: Finding documents with embedded fields
DESCRIPTION: This code snippet demonstrates how to use the `$exists` operator to find documents where a field within an embedded document exists. It queries the `users` collection and returns documents where the `address.city` field is present.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/exists.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.users.find({ 'address.city': { $exists: true } });
```

----------------------------------------

TITLE: Adding MongoDB Spark Connector dependency using Maven
DESCRIPTION: This snippet demonstrates how to add the MongoDB Spark Connector dependency to your `pom.xml` file when using Maven as your build tool.  The dependency specifies the groupId, artifactId, and version of the connector. This allows your project to access the MongoDB Spark Connector classes and functions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/mongodb-connectors/spark.md#_snippet_1

LANGUAGE: xml
CODE:
```
<dependency>
  <groupId>org.mongodb.spark</groupId>
  <artifactId>mongo-spark-connector_2.12</artifactId>
  <version>3.0.1</version>
</dependency>
```

----------------------------------------

TITLE: Linking with Static Library
DESCRIPTION: This command compiles the main C++ source file and links it with the static library `libmystaticlibrary.a`. It uses the `-L` flag to specify the directory containing the library and the `-l` flag to specify the library name without the `lib` prefix and `.a` extension. The program is then outputted as `myprogram`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/working-with-libraries@4kkX5g_-plX9zVqr0ZoiR.md#_snippet_1

LANGUAGE: C++
CODE:
```
g++ main.cpp -o myprogram -L/path/to/your/library/ -lmystaticlibrary
```

----------------------------------------

TITLE: Resource Acquisition is Initialization (RAII) - C++
DESCRIPTION: This snippet demonstrates the RAII idiom in C++. It creates a `Resource` class that acquires a resource in its constructor and releases it in its destructor. This ensures that the resource is always properly managed, even in the presence of exceptions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/idioms@fb3bnfKXjSIjPAk4b95lg.md#_snippet_0

LANGUAGE: cpp
CODE:
```
class Resource {
public:
    Resource() { /* Acquire resource */ }
    ~Resource() { /* Release resource */ }
};

void function() {
    Resource r; // Resource is acquired
    // ...
} // Resource is released when r goes out of scope
```

----------------------------------------

TITLE: GRUB Configuration
DESCRIPTION: This bash code snippet shows a typical `/etc/default/grub` file used to configure GRUB bootloader options. It sets the default boot entry, timeout, distributor, and command-line arguments for the Linux kernel. This file is crucial for customizing the boot process.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/booting-linux/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
GRUB_DEFAULT=0
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
GRUB_CMDLINE_LINUX=""
```

----------------------------------------

TITLE: Simple C++ Example
DESCRIPTION: This is a simple C++ program that defines a function `my_function` which prints the value of its integer argument, and a main function that calls `my_function` in a loop. This program is used as an example for demonstrating GDB usage.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/gdb@BmWsoL9c_Aag5nVlMsKm2.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include <iostream>

void my_function(int i) {
  std::cout << "In my_function with i = " << i << '\n';
}

int main() {
  for (int i = 0; i < 5; ++i) {
    my_function(i);
  }
  return 0;
}
```

----------------------------------------

TITLE: Email Prompt Generation
DESCRIPTION: This code snippet represents a prompt that can be used to generate an automated email response using a Language Model (LLM). The prompt instructs the LLM to create an email confirming receipt of a customer inquiry, including order number and customer name.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/writing-emails.md#_snippet_0

LANGUAGE: text
CODE:
```
Write an email informing a customer that their inquiry has been received and will be addressed shortly. Include the order number and the customer's name in the email.
```

----------------------------------------

TITLE: Removing Event Listeners in React with useEffect (JavaScript)
DESCRIPTION: This snippet demonstrates how to properly remove event listeners when a React component unmounts using the `useEffect` hook. The `useEffect` hook's return function ensures that the event listener is removed, preventing memory leaks. It depends on React's `useEffect` hook.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/memory-leaks.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
useEffect(() => {
  window.addEventListener('resize', handler);
  return () => window.removeEventListener('resize', handler);
}, []);
```

----------------------------------------

TITLE: Embedding HTML Template using Raw String Literal in Go
DESCRIPTION: This code snippet demonstrates embedding an HTML template into Go code using a raw string literal. The backticks (`) ensure that the HTML is preserved exactly as written, including newlines and whitespace. This avoids the need for escaping special characters.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/golang/content/string-literals.md#_snippet_0

LANGUAGE: Go
CODE:
```
htmlTemplate := `<!DOCTYPE html>
<html>
    <head>
        <title>Example</title>
    </head>
    <body>
        <h1>Hello, World!</h1>
    </body>
</html>`
```

----------------------------------------

TITLE: Update operation in PostgreSQL using pg
DESCRIPTION: This code snippet demonstrates an update operation in PostgreSQL using the pg driver. It updates the user with the name 'John Doe' to 'Jane Doe'. The 'pool' object must be initialized and connected to the database.  Uses parameterized query to prevent SQL injection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/nodejs-database-crud.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
pool.query('UPDATE users SET name = $1 WHERE name = $2', ['Jane Doe', 'John Doe']);
```

----------------------------------------

TITLE: Loose Equality Comparison (==) in JavaScript
DESCRIPTION: This snippet demonstrates the loose equality operator `==` in JavaScript. It compares values, performing type conversion if necessary before the comparison.  For example, a string '5' is compared to the number 5, and due to type coercion, the string is converted to a number, resulting in true.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/js-equality-operators.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
'5' == 5
```

----------------------------------------

TITLE: Initializing Multi-dimensional Array in PHP
DESCRIPTION: This code snippet initializes a multi-dimensional array named `$users` in PHP. Each element of the `$users` array is itself an array containing user data (name, email, username).  No external dependencies are required. The array is assigned directly with sample data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/multi-dimensional-arrays@uARTOZ-ZwugSmbCJoRS5Y.md#_snippet_0

LANGUAGE: PHP
CODE:
```
$users = array(
       array("John", "john@example.com", "john123"),
       array("Jane", "jane@example.com", "jane123"),
       array("Doe", "doe@example.com", "doe123")
);
```

----------------------------------------

TITLE: Implementing Exception Handling in C++
DESCRIPTION: This code demonstrates basic exception handling in C++ using `try`, `catch`.  It attempts a division operation that may cause an error, and then catches any exceptions that are thrown to prevent crashing. Requires exception and iostream headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/language-concepts@-6fwJQOfsorgHkoQGp4T3.md#_snippet_7

LANGUAGE: cpp
CODE:
```
try {
    // Code that might throw an exception
    int result = a / b;
} catch (const exception &e) {
    std::cout << "Caught an exception: " << e.what();
}
```

----------------------------------------

TITLE: Generating HTML table from structured data
DESCRIPTION: This example represents structured data as an HTML table. It contains columns for Gender, Occasion, and Age in years, demonstrating the conversion of the data into HTML table format for display in web pages.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/structured-data.md#_snippet_2

LANGUAGE: html
CODE:
```
<table>
  <tr>
    <th>Gender</th>
    <th>Occasion</th>
    <th>Age (years)</th>
  </tr>
  <tr>
    <td>Female</td>
    <td>Birthday</td>
    <td>1.5</td>
  </tr>
</table>
```

----------------------------------------

TITLE: Defining Sensitive Output in Terraform
DESCRIPTION: This code snippet demonstrates how to define a sensitive output in Terraform. The `sensitive = true` argument hides the actual value of the output in the console and logs, protecting sensitive data such as passwords. The actual value is still stored in the Terraform state file and can be accessed programmatically.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/terraform/content/sensitive-outputs@8giL6H5944M2L0rwxjPso.md#_snippet_0

LANGUAGE: hcl
CODE:
```
output "database_password" {
  value     = aws_db_instance.example.password
  sensitive = true
}
```

----------------------------------------

TITLE: Infinite For Loop in JavaScript
DESCRIPTION: This code snippet demonstrates how to create an infinite loop using a `for` loop in JavaScript. The loop continues indefinitely because the condition is always `true`.  It initializes a variable `i` but its value does not affect the loop's execution. No dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/infinite-loop.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
for (let i = 0; true; i++) {
  // do something
}
```

----------------------------------------

TITLE: Terminating Processes with kill
DESCRIPTION: The `kill` command sends signals to processes, allowing for graceful or forceful termination. `kill -SIGTERM pid` sends a termination signal, allowing the process to shut down cleanly. `kill -SIGKILL pid` sends a kill signal, immediately terminating the process. Replacing `pid` with the actual process ID is required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/index.md#_snippet_2

LANGUAGE: bash
CODE:
```
kill -SIGTERM pid
```

LANGUAGE: bash
CODE:
```
kill -SIGKILL pid
```

----------------------------------------

TITLE: Defining Class with Property & Method - PHP
DESCRIPTION: This code snippet defines a simple PHP class named `Hello` with a public property `$greeting` and a method `displayGreeting`. The method echoes the value of the `$greeting` property. An object of the class is instantiated, and the method is called, outputting "Hello, world!".
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/oop-fundamentals@yTviiPFR5b_dr3WyxdxxQ.md#_snippet_0

LANGUAGE: php
CODE:
```
class Hello {
    public $greeting = "Hello, world!";

    public function displayGreeting() {
        echo $this->greeting;
    }
}
$hello = new Hello();
$hello->displayGreeting(); // Outputs "Hello, world!"
```

----------------------------------------

TITLE: Defining a TypeScript Interface
DESCRIPTION: This code defines a TypeScript interface named `User` with two properties: `name` (string) and `age` (number). It then creates an object `user` and assigns it the `User` type, ensuring it conforms to the interface's structure. This enforces type safety during compilation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/typescript-interfaces@aH1DxiG5xrdNlKutJ_gTz.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface User {
  name: string;
  age: number;
}

const user: User = {
  name: 'John Doe',
  age: 30,
};
```

----------------------------------------

TITLE: Inserting Document with Null Value - MongoDB JavaScript
DESCRIPTION: This code snippet demonstrates how to insert a document into a MongoDB collection with a field explicitly set to `null`. This indicates that the field's value is unknown or intentionally missing. The `insertOne` method is used to add the document to the `users` collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/null.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.users.insertOne({
  name: 'Alice',
  email: 'alice@example.com',
  phone: null,
});
```

----------------------------------------

TITLE: Defining a Constant in PHP using define()
DESCRIPTION: This code snippet demonstrates how to define a constant in PHP using the `define()` function. The function takes two parameters: the name of the constant (as a string) and the value to be assigned to the constant.  Once defined, the constant's value can be accessed directly by using its name.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/constants@VLRLymQmLfscrBfzXKvHi.md#_snippet_0

LANGUAGE: PHP
CODE:
```
define("PI", 3.14);
echo PI; // Outputs: 3.14
```

----------------------------------------

TITLE: Checking File Readability using is_readable() in PHP
DESCRIPTION: This PHP code snippet demonstrates how to check if a file is readable using the `is_readable()` function. The function takes the file path as an argument and returns true if the file is readable, false otherwise. This can be used to determine if the script has the necessary permissions to read the file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/file-permissions@tgIyG6vHWpe9sz6lHmj5a.md#_snippet_1

LANGUAGE: PHP
CODE:
```
is_readable()
```

----------------------------------------

TITLE: Defining and calling anonymous function PHP
DESCRIPTION: This code snippet demonstrates how to define an anonymous function in PHP and assign it to a variable. The function takes a name as input and prints a greeting message. It then shows how to call the anonymous function using the variable to which it was assigned, passing different arguments.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/anonymous-functions@Nr5m6wQLp7VyG3AucrSc8.md#_snippet_0

LANGUAGE: php
CODE:
```
$greet = function($name)
{
    printf("Hello %s\r\n", $name);
};

$greet('World');
$greet('PHP');
```

----------------------------------------

TITLE: Extending Roadmap Class with JavaScript Class
DESCRIPTION: Defines a JavaScript class that extends the Roadmap class, inheriting its constructor and methods. It also adds a greet method to log the name and description of the JavaScript roadmap.  This demonstrates inheritance and adding new functionality in the child class.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/inheritance.md#_snippet_1

LANGUAGE: javascript
CODE:
```
class JavaScript extends Roadmap {
  constructor(name, description, slug) {
    super(name, description, slug);
  }

  greet() {
    console.log(`${this.name} - ${this.description}`);
  }
}
```

----------------------------------------

TITLE: Defining and Using Structs in Go
DESCRIPTION: This Go code defines a `Person` struct with `Name` (string) and `Age` (integer) fields. It then creates an instance of the `Person` struct, initializes its fields, and prints the `Name` and `Age` values to the console using `fmt.Println`. The `main` function showcases how to create and interact with instances of a defined struct.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/golang/content/composite-data-types.md#_snippet_0

LANGUAGE: Go
CODE:
```
package main

import "fmt"

// Define a composite data type using a struct
type Person struct {
    Name string
    Age  int 
}

func main() {
    // Create a new struct and print key value pairs
    person := Person{Name: "Alice", Age: 30}
    fmt.Println("Name:", person.Name, "Age:", person.Age)
}
```

----------------------------------------

TITLE: Read operation in PostgreSQL using pg
DESCRIPTION: This code snippet demonstrates reading all users from a PostgreSQL database using the pg driver.  It executes a SELECT query on the 'users' table and logs the result rows to the console. The 'pool' object must be initialized and connected to the database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/nodejs-database-crud.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
pool.query('SELECT * FROM users', (err, res) => console.log(res.rows));
```

----------------------------------------

TITLE: SSH into Database Server (Via App Server with Forwarding)
DESCRIPTION: This command uses SSH to connect to the database server from the application server. Because SSH agent forwarding is enabled, the application server can use the private key from the local machine's SSH agent to authenticate with the database server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_8

LANGUAGE: bash
CODE:
```
ssh ec2-user@192.168.1.0
```

----------------------------------------

TITLE: Updating with $push in MongoDB (JavaScript)
DESCRIPTION: This code snippet demonstrates the usage of the `$push` operator in MongoDB to add 'Great article!' to the `comments` array in the document with `_id` equal to 1. The `$push` operator adds the specified value to the array, even if it already exists.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/index.md#_snippet_4

LANGUAGE: javascript
CODE:
```
db.collection.updateOne({ _id: 1 }, { $push: { comments: 'Great article!' } });
```

----------------------------------------

TITLE: Simulating Error in FetchData Component - React
DESCRIPTION: This code simulates an error by throwing an error inside the `FetchData` component. This component is wrapped by the `ErrorBoundary` in the main application. The purpose is to trigger the `ErrorFallback` component defined in the error boundary when `FetchData` is rendered.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/error-boundaries.md#_snippet_1

LANGUAGE: javascript
CODE:
```
export function FetchData() {
  throw new Error('Error fetching data');
  return <p>This will never render</p>;
}
```

----------------------------------------

TITLE: Creating a Git Branch
DESCRIPTION: Creates a new branch in a Git repository.  The `checkout -b` command creates a new branch and switches to it.  This allows for isolated development of new features or bug fixes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/version-control.md#_snippet_1

LANGUAGE: Git
CODE:
```
git checkout -b feature-branch
```

----------------------------------------

TITLE: Class Scope: Static and Non-Static Members in C++
DESCRIPTION: This example demonstrates class scope with static and non-static member variables. The `staticMember` is accessed using the class name (`MyClass::staticMember`), while the `nonStaticMember` is accessed through an object of the class (`obj.nonStaticMember`).  Static members belong to the class itself, while non-static members belong to each object of the class.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/scope@dKCYmxDNZubCVcR5rf8b-.md#_snippet_3

LANGUAGE: cpp
CODE:
```
#include <iostream>

class MyClass {
public:
    static int staticMember;
    int nonStaticMember;

    MyClass(int value) : nonStaticMember(value) {}
};

int MyClass::staticMember = 7;

int main() {
    MyClass obj(10);
    std::cout << "Static member: " << MyClass::staticMember << '\n';
    std::cout << "Non-static member: " << obj.nonStaticMember << '\n';
}
```

----------------------------------------

TITLE: Using keyof Operator in TypeScript
DESCRIPTION: This snippet demonstrates the usage of the `keyof` operator in TypeScript. It defines an interface named `User` with properties `name`, `age`, and `location`. Then, it uses `keyof User` to create a type `UserKeys` that is a union of the keys of the `User` interface. Finally, it declares a constant named `key` of type `UserKeys` and initializes it to the value 'name'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/keyof-operator@t1Tcesfq7bV2TkHcfD6lU.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface User {
  name: string;
  age: number;
  location: string;
}

type UserKeys = keyof User; // "name" | "age" | "location"
const key: UserKeys = 'name';
```

----------------------------------------

TITLE: Retrieve Inode Number using ls -i
DESCRIPTION: This bash command retrieves the inode number of a specified file. The `ls -i` command lists files and directories along with their corresponding inode numbers.  The `filename` parameter should be replaced with the actual name of the file you want to inspect. The command outputs the inode number followed by the filename.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/disks-filesystems/inodes.md#_snippet_0

LANGUAGE: bash
CODE:
```
ls -i filename
```

----------------------------------------

TITLE: Start and Check SSHD Service Status - Bash
DESCRIPTION: This code snippet demonstrates how to start the sshd service and check its status using the `systemctl` command in a Linux environment. It requires sudo privileges. The `systemctl start sshd` command starts the service, while `systemctl status sshd` displays the current status of the service.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/service-management/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Start sshd service
sudo systemctl start sshd

# Check status of sshd service
sudo systemctl status sshd
```

----------------------------------------

TITLE: Initializing Go Module
DESCRIPTION: This bash command initializes a new Go module in the current directory. It creates a `go.mod` file, which is used to manage the project's dependencies.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_1

LANGUAGE: bash
CODE:
```
go mod init go_book_api
```

----------------------------------------

TITLE: Declaring and Initializing a String in TypeScript
DESCRIPTION: This code snippet demonstrates how to declare a variable of type `string` and assign it a string literal value in TypeScript. The `name` variable is explicitly typed as `string` and initialized with the value 'John Doe'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/string@d8iV-IBZ6cSnH8Z5_HRmc.md#_snippet_0

LANGUAGE: typescript
CODE:
```
let name: string = 'John Doe';
```

----------------------------------------

TITLE: MongoDB Object Example
DESCRIPTION: This is an example of an object (embedded document) in MongoDB. It shows the structure of a document including nested fields. It includes the `_id` field with an ObjectId, string and integer fields, and a nested object for the address.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/object.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "_id": ObjectId("507f191e810c19729de860ea"),
  "name": "Alice",
  "age": 28,
  "address": {
    "street": "Main Street",
    "city": "New York",
    "state": "NY"
  }
}
```

----------------------------------------

TITLE: Using include_once in PHP
DESCRIPTION: This snippet demonstrates including the `database.php` file only once using `include_once`.  It then creates an instance of the `Database` class, assuming it is defined in `database.php`. This prevents re-declaration errors if the include statement is encountered multiple times. `database.php` is a dependency for this snippet.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/include_once@SwtLDgyPmDry20qS4FBfH.md#_snippet_0

LANGUAGE: PHP
CODE:
```
include_once 'database.php';

$db = new Database();
```

----------------------------------------

TITLE: Blog Post Data Structure Example
DESCRIPTION: This JSON snippet defines the expected structure of a blog post object. It shows the 'title', 'content', 'category', and 'tags' fields. This format should be used for creating and updating blog posts via the API.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/blogging-platform-api.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "title": "My First Blog Post",
  "content": "This is the content of my first blog post.",
  "category": "Technology",
  "tags": ["Tech", "Programming"]
}
```

----------------------------------------

TITLE: Creating a Table using SQL
DESCRIPTION: The `CREATE TABLE` statement is used to create a new table in a database. It defines the table's schema, including column names, data types, and constraints like primary keys, foreign keys, and default values. This statement is crucial for defining how data will be stored and organized.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/sql/content/create-table@epEpBxRosLhuAuKwp823r.md#_snippet_0

LANGUAGE: SQL
CODE:
```
`CREATE TABLE`
```

----------------------------------------

TITLE: OR Operator Example in C++
DESCRIPTION: Demonstrates the use of the OR operator (||) in C++. The code checks if either variable `a` or `b` is greater than 0. If at least one condition is true, it prints a message to the console. Requires the iostream library for output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/logical-operators@Y9gq8WkDA_XGe68JkY2UZ.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int a = 5, b = -10;
if (a > 0 || b > 0) {
    std::cout << "At least one value is positive.\n";
}
```

----------------------------------------

TITLE: Displaying System Logs with journalctl
DESCRIPTION: This command is used to display the entire system log from boot time to the present moment. It provides a comprehensive view of system events and is a fundamental tool for debugging and monitoring Linux systems. The logs are managed by `systemd`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/service-management/check-logs.md#_snippet_0

LANGUAGE: shell
CODE:
```
journalctl
```

----------------------------------------

TITLE: Read operation in MongoDB using Mongoose
DESCRIPTION: This code snippet shows how to read all users from a MongoDB database using Mongoose.  It uses the `find` method on the User model to retrieve all documents.  The result is logged to the console. Requires Mongoose to be initialized and connected to the database.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/nodejs-database-crud.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
User.find({}, (err, users) => console.log(users));
```

----------------------------------------

TITLE: Freezing an Object with Object.freeze() in JavaScript
DESCRIPTION: This snippet demonstrates how to make an object immutable using `Object.freeze()`.  It prevents modification of existing properties and the addition of new properties. Attempting to modify a frozen object in strict mode will throw an error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/immutable-object.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const roadmap = {
  name: 'JavaScript',
};

Object.freeze(roadmap);

roadmap.name = 'JavaScript Roadmap'; // throws an error in strict mode
console.log(roadmap.name); // JavaScript
```

----------------------------------------

TITLE: Updating Objects in MongoDB
DESCRIPTION: This code snippet demonstrates how to update specific fields within an object in MongoDB using the `$set` operator. It updates the `city` field in the `address` object of the document where the `name` is 'Alice' to 'Los Angeles'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/object.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.collection.updateOne(
  { name: 'Alice' },
  { $set: { 'address.city': 'Los Angeles' } }
);
```

----------------------------------------

TITLE: Defining Theme Interface
DESCRIPTION: This snippet defines the `Theme` interface, which represents an abstraction for different themes. It requires implementing classes to have a `getColor` method.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_25

LANGUAGE: php
CODE:
```
interface Theme
{
    public function getColor();
}
```

----------------------------------------

TITLE: Querying Double Values
DESCRIPTION: This snippet shows how to query for Double values in a MongoDB collection using the $type operator. This allows you to specifically retrieve documents where the 'value' field is of the Double data type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/double.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.my_collection.find({ value: { $type: 'double' } });
```

----------------------------------------

TITLE: Lambda Function with Capture-by-Reference
DESCRIPTION: This snippet illustrates capturing a variable from the surrounding scope by reference. The `expiresInDays` variable is captured by reference, meaning that the lambda function operates directly on the original variable. Changes made to `expiresInDays` inside the lambda function will affect its value in the surrounding scope, demonstrating the key difference between capture-by-value and capture-by-reference.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/lambdas@xjiFBVe-VGqCqWfkPVGKf.md#_snippet_4

LANGUAGE: cpp
CODE:
```
int expiresInDays = 45;
auto updateDays = [&expiresInDays](int newDays) {
    expiresInDays = newDays;
};
updateDays(30); // expiresInDays = 30
```

----------------------------------------

TITLE: Defining JobPost class
DESCRIPTION: This class represents a Job Post with a title. It has a constructor to initialize the title and a getter to retrieve the title.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_61

LANGUAGE: PHP
CODE:
```
class JobPost
{
    protected $title;

    public function __construct(string $title)
    {
        $this->title = $title;
    }

    public function getTitle()
    {
        return $this->title;
    }
}
```

----------------------------------------

TITLE: Validating a collection
DESCRIPTION: This example validates a MongoDB collection named 'products' using the `db.runCommand` method. The command checks the internal structures of the 'products' collection for any errors or inconsistencies.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/validate.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.runCommand({ validate: 'products' });
```

----------------------------------------

TITLE: Including a File in PHP
DESCRIPTION: This code snippet demonstrates how to use the 'include' statement in PHP to insert the contents of 'filename.php' into the current script.  The 'filename.php' file should contain valid PHP code. If the file is not found, a warning will be issued, but the script execution will continue.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/include@hKfv7V6bl2LXssq9Ffi7C.md#_snippet_0

LANGUAGE: php
CODE:
```
<?php
    include 'filename.php';
?>
```

----------------------------------------

TITLE: Defining Associative Array in PHP
DESCRIPTION: This snippet demonstrates how to define an associative array in PHP.  The array `$ages` stores names as keys and their corresponding ages as values.  The `array()` construct is used to create the array, and the `=>` operator is used to assign values to keys.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/associative-arrays@i_NRsOJNNp7AOqMgu5Jg8.md#_snippet_0

LANGUAGE: PHP
CODE:
```
$ages = array(
   "Peter" => 35,
   "John" => 42,
   "Mary" => 27
);
```

----------------------------------------

TITLE: Type Assertion with 'as' Keyword - TypeScript
DESCRIPTION: This code snippet demonstrates how to use the 'as' keyword to perform type assertion in TypeScript. It explicitly tells the compiler that 'someValue' is a string before accessing its 'length' property. The 'someValue' variable is initially of type 'any'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/as-type@Ba0baUbomrW9td_K8U-5L.md#_snippet_0

LANGUAGE: typescript
CODE:
```
let someValue: any = "Hello, TypeScript!";
let strLength: number = (someValue as string).length;

console.log(strLength); // Outputs: 18
```

----------------------------------------

TITLE: Defining Arrow Function in JavaScript
DESCRIPTION: This JavaScript code defines an arrow function named `sayHello` that logs a message to the console. Arrow functions provide a more concise syntax compared to traditional function expressions. The function takes no arguments and simply prints "Hello from Arrow Function !" to the console when called.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/javascript/content/arrow-functions@fr0NChxMXLpJizyMhXcXS.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const sayHello = () => {
    console.log(`Hello from Arrow Function !`);
}
```

----------------------------------------

TITLE: Assigning Data Types to Variables in PHP
DESCRIPTION: This code snippet demonstrates the assignment of different data types to variables in PHP. It shows how to declare string, integer, floating-point, and boolean variables and assign them corresponding values. This is a fundamental aspect of working with data in PHP.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/data-types@srIHPZabaCGdB5VvUXaMa.md#_snippet_0

LANGUAGE: php
CODE:
```
$text = "Hello world!";  // String
$number = 1234;  // Integer
$decimalNumber = 12.34;  // Floating-point number
$boolean = true; // Boolean
```

----------------------------------------

TITLE: Establishing WebSocket Connection (Client)
DESCRIPTION: This JavaScript snippet establishes a WebSocket connection to a specified server and logs any received messages to the console. It requires a WebSocket server to be running at the specified address ('ws://server.com'). The `onmessage` event listener handles incoming messages from the server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/real-time-updates.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const socket = new WebSocket('ws://server.com');
socket.onmessage = (message) => console.log(message.data);
```

----------------------------------------

TITLE: Displaying manual page using `man` command in Bash
DESCRIPTION: The `man` command displays the manual page for a specified command. In this case, it shows the manual for the `ls` command, providing detailed information about its usage and options. This is crucial for understanding a command's functionality.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/basic-commands.md#_snippet_3

LANGUAGE: bash
CODE:
```
# Displays the mannual page for a command
man ls
```

----------------------------------------

TITLE: v-if Conditional Rendering in Vue.js HTML
DESCRIPTION: This code snippet demonstrates the usage of the `v-if` directive in Vue.js. It conditionally renders an `<h1>` element based on the truthiness of the `awesome` variable. If `awesome` is truthy, the text "Vue is awesome!" will be displayed; otherwise, the element will not be rendered.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/vue/content/v-if@xHj3W9Ig3MVuVlGyXchaP.md#_snippet_0

LANGUAGE: html
CODE:
```
<h1 v-if="awesome">Vue is awesome!</h1>
```

----------------------------------------

TITLE: Checking pgBackRest Repository Configuration
DESCRIPTION: This command uses pgBackRest to check the configuration and repository integrity for a specified stanza.  The `<stanza_name>` parameter must be replaced with the actual name of the pgBackRest stanza you wish to verify. This ensures backups are consistent and up-to-date.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/postgresql-dba/content/check_pgbackrest@DDPuDDUFxubWZmWXCmF7L.md#_snippet_0

LANGUAGE: sh
CODE:
```
pgbackrest --stanza=<stanza_name> check
```

----------------------------------------

TITLE: Configuring MongoDB Server for X.509 Authentication (Bash)
DESCRIPTION: This code snippet demonstrates how to start the MongoDB server with the necessary options to enable X.509 authentication.  It requires the paths to the server certificate and CA certificate files and enables authentication for all connections.  Ensure the paths to the certificate files are correct.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-security/x509-certificate-auth.md#_snippet_0

LANGUAGE: bash
CODE:
```
mongod --tlsMode requireTLS --tlsCertificateKeyFile /path/to/server.pem --tlsCAFile /path/to/ca.pem --auth
```

----------------------------------------

TITLE: Exclude 'subjects' field using $project (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to use the `$project` operator to exclude the `subjects` field from the documents. It implicitly includes all other fields except `_id` which is included by default, if not specified explicitly.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/project.md#_snippet_4

LANGUAGE: javascript
CODE:
```
db.students.aggregate([
  {
    $project: {
      subjects: 0,
    },
  },
]);
```

----------------------------------------

TITLE: Fetching from a Remote Repository
DESCRIPTION: The `git fetch` command downloads objects and refs from another repository. It fetches changes from the remote repository without merging them into your local working branch. This allows you to review the changes before integrating them.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/basic-git-usage@PtU5Qwfzn3N1i3oRlCGoR.md#_snippet_5

LANGUAGE: bash
CODE:
```
git fetch
```

----------------------------------------

TITLE: Obtaining SSL Certificate (Apache)
DESCRIPTION: This command obtains an SSL certificate for Apache in non-interactive mode. It automatically agrees to the terms, provides the email, disables EFF emails, redirects HTTP to HTTPS, and specifies the domain.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/setup-and-auto-renew-ssl-certificates.md#_snippet_4

LANGUAGE: shell
CODE:
```
sudo certbot --apache \
  --agree-tos \
  -m you@email.com \
  --no-eff-email \
  --redirect \
  --domains news.roadmap.sh
```

----------------------------------------

TITLE: Creating tar archive
DESCRIPTION: This command creates a tar archive from a directory. The `cvf` options specify create, verbose, and file, respectively.  The first argument is the name of the archive to create, and the second argument is the directory to archive.  It creates a non-compressed archive.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/working-with-files/archiving.md#_snippet_0

LANGUAGE: bash
CODE:
```
tar cvf archive_name.tar directory_to_archive/
```

----------------------------------------

TITLE: Including the iostream Header
DESCRIPTION: This snippet shows the basic inclusion of the `iostream` header file, which is necessary to use the input/output functionalities provided by the C++ standard library. This header provides the stream objects `cin`, `cout`, `cerr`, and `clog`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/iostream@VeVxZ230xkesQsIDig8zQ.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include <iostream>
```

----------------------------------------

TITLE: SSH into Database Server (Direct Attempt - Fails)
DESCRIPTION: This command attempts to SSH directly into the database server using a private key. It assumes the key is located at `~/.ssh/mykey.pem` and connects as the `ec2-user` to the server at the private IP address `192.168.1.0`. This command will fail because the database server does not have a public IP.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_1

LANGUAGE: bash
CODE:
```
# Won't work because the IP address is private
ssh -i ~/.ssh/mykey.pem ec2-user@192.168.1.0
```

----------------------------------------

TITLE: C++ Switch Statement
DESCRIPTION: This code demonstrates a switch statement in C++. The value of 'variable' is compared against different 'case' values. If a match is found, the corresponding code block is executed. The 'break' statement is crucial to prevent fall-through to the next case. The 'default' case is executed if no other cases match. 
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/introduction-to-language@NvODRFR0DLINB0RlPSsvt.md#_snippet_7

LANGUAGE: cpp
CODE:
```
switch (variable) {
    case value1:
        // Code to execute if variable == value1
        break;
    case value2:
        // Code to execute if variable == value2
        break;
    // More cases...
    default:
        // Code to execute if variable does not match any case value
}
```

----------------------------------------

TITLE: Using require_once in PHP
DESCRIPTION: This code snippet demonstrates how to use the 'require_once' statement in PHP to include a file named 'somefile.php'. The 'require_once' statement ensures that the specified file is included only once, preventing potential issues with redundant declarations or reassignments. If 'somefile.php' is not found, the script will halt execution with a fatal error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/require_once@-CyJbsg2ho3RvfzKnJj5C.md#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
require_once('somefile.php');
?>
```

----------------------------------------

TITLE: Declaring MyClass with Pimpl - C++ Header
DESCRIPTION: Declares the `MyClass` class using the Pimpl idiom. It includes a forward declaration of `MyClass_Impl` and a private pointer `pimpl` to the implementation. This header defines the public interface of the class.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/pimpl@MEoWt8NKjPLVTeGgYf3cR.md#_snippet_0

LANGUAGE: C++
CODE:
```
class MyClass_Impl; // forward declaration

class MyClass
{
public:
    MyClass();
    ~MyClass();
    void some_method();

private:
    MyClass_Impl *pimpl; // pointer to the implementation
};
```

----------------------------------------

TITLE: Result of excluding 'subjects' (JSON)
DESCRIPTION: This JSON snippet showcases the result of the previous aggregation pipeline which excludes the `subjects` field. It indicates that the `_id`, `name`, and `age` fields are present in the output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/project.md#_snippet_5

LANGUAGE: json
CODE:
```
[
  { "_id": 1, "name": "John Doe", "age": 20 },
  { "_id": 2, "name": "Jane Smith", "age": 23 }
]
```

----------------------------------------

TITLE: Instruction Tuned LLM Formula
DESCRIPTION: This formula illustrates how Instruction Tuned LLMs are created.  It starts with a Base LLM and further refines it using a dataset of instructions and Reinforcement Learning with Human Feedback (RLHF).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/introduction-to-llms.md#_snippet_0

LANGUAGE: text
CODE:
```
Instruction Tuned LLMs = Base LLMs + Further Tuning + RLHF
```

----------------------------------------

TITLE: Defining and Using Structure (struct) in C++
DESCRIPTION: This code snippet defines a structure named `Person` with member variables `name`, `age`, and `height`. It then creates an instance of the `Person` structure and initializes its member variables. Structure members are public by default.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/data-types@MwznA4qfpNlv6sqSNjPZi.md#_snippet_8

LANGUAGE: cpp
CODE:
```
struct Person {
    std::string name;
    int age;
    float height;
};

Person p1 = {"John Doe", 30, 5.9};
```

----------------------------------------

TITLE: Get To-Do Items Response Example
DESCRIPTION: Demonstrates the JSON response structure for retrieving a paginated list of to-do items. The response includes an array of to-do items, the current page number, the limit of items per page, and the total number of items.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_12

LANGUAGE: JSON
CODE:
```
{
  "data": [
    {
      "id": 1,
      "title": "Buy groceries",
      "description": "Buy milk, eggs, bread"
    },
    {
      "id": 2,
      "title": "Pay bills",
      "description": "Pay electricity and water bills"
    }
  ],
  "page": 1,
  "limit": 10,
  "total": 2
}
```

----------------------------------------

TITLE: Querying with $lte operator in MongoDB
DESCRIPTION: This snippet demonstrates how to use the `$lte` operator in MongoDB to find documents where the value of a specified field is less than or equal to a given value. The example queries a collection to find all documents where the `age` field is less than or equal to 25.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/index.md#_snippet_5

LANGUAGE: javascript
CODE:
```
db.collection.find({ age: { $lte: 25 } });
```

----------------------------------------

TITLE: Declaring Boolean Variables in TypeScript
DESCRIPTION: This code snippet demonstrates how to declare boolean variables in TypeScript. The `boolean` keyword is used to specify the data type, and the variables can be initialized with either `true` or `false`. No dependencies are required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/boolean@hfIHxa5i_5rEpjtzqEsic.md#_snippet_0

LANGUAGE: typescript
CODE:
```
let isTrue: boolean = true;
let isFalse: boolean = false;
```

----------------------------------------

TITLE: Defining String and Numeric Literals in Bash
DESCRIPTION: This script demonstrates how to define and use string and numeric literals in a Bash shell script. The `StringLiteral` variable is assigned a string value enclosed in double quotes, and the `NumericLiteral` variable is assigned a numeric value. The `echo` command is used to print the values of these variables to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-programming/literals.md#_snippet_0

LANGUAGE: bash
CODE:
```
#!/bin/bash
# Example of literals in shell script
 
StringLiteral="This is a string literal"
NumericLiteral=125
echo $StringLiteral
echo $NumericLiteral
```

----------------------------------------

TITLE: NOT (!) in C++
DESCRIPTION: Demonstrates the 'NOT' logical operator in C++. This operator negates a boolean value, returning true if the operand is false and false if the operand is true.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_13

LANGUAGE: cpp
CODE:
```
!true // false
!false // true
```

----------------------------------------

TITLE: Defining a React Component for Lazy Loading (RoadmapRender)
DESCRIPTION: This code snippet defines a simple React component named `RoadmapRender`. The component is exported as a default export, which is necessary for it to be lazily loaded using `lazy()` and dynamic `import()`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/lazy-loading.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// The component has to be exported as a default export
export default function RoadmapRender() {
  return <h1>This is a lazily-loaded component!</h1>;
}
```

----------------------------------------

TITLE: Defining Function-like Macro in C++
DESCRIPTION: This code snippet defines a function-like macro named `SQUARE` that calculates the square of a number. The macro takes one argument, `x`, and expands to `((x) * (x))`. Parentheses are important to ensure correct precedence.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/macros@zKdlfZTRHwjtmRUGW9z9-.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#define SQUARE(x) ((x) * (x))
```

----------------------------------------

TITLE: Accessing Sessions in PHP
DESCRIPTION: This code snippet demonstrates how to store data in a PHP session using the `$_SESSION` superglobal array. In this example, the session variable "favcolor" is set to the value "green". Sessions require session_start() to be called before use.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/state-management@CGehmZjcgTWC7fQAvxmNW.md#_snippet_1

LANGUAGE: PHP
CODE:
```
$_SESSION["favcolor"] = "green";
```

----------------------------------------

TITLE: Defining a Simple Addition Function in Go
DESCRIPTION: This code snippet defines a simple `Add` function that takes two integers as input and returns their sum. It is part of the `math` package and includes a comment describing its purpose.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/golang/content/testing-package.md#_snippet_0

LANGUAGE: go
CODE:
```
package math

// Add returns the sum of a and b.
func Add(a, b int) int {
    return a + b
}
```

----------------------------------------

TITLE: Defining build with SCons
DESCRIPTION: This SConstruct file defines the build process using Python. It creates an environment and specifies the target executable (HelloWorld) and source file (main.cpp). SCons uses Python for its build scripts, offering more flexibility.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/build-systems@jVXFCo6puMxJ_ifn_uwim.md#_snippet_3

LANGUAGE: Python
CODE:
```
# SConstruct
env = Environment()
env.Program(target="HelloWorld", source=["main.cpp"])
```

----------------------------------------

TITLE: Querying the system.profile Collection in MongoDB
DESCRIPTION: This snippet shows how to query the `system.profile` collection in MongoDB to retrieve profiling data. The `find().pretty()` method is used to format the output for better readability.  This allows analyzing slow queries and identifying performance bottlenecks.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/query-optimization.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
db.system.profile.find().pretty();
```

----------------------------------------

TITLE: Sample RPC POST Request
DESCRIPTION: This code snippet demonstrates a sample RPC call using a POST request. It shows how data can be passed in the body of the request as a JSON object.  This allows for more complex data structures to be passed as input to the remote procedure.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/system-design/content/rpc@ixqucoAkgnphWYAFnsMe-.md#_snippet_1

LANGUAGE: JSON
CODE:
```
POST /anotheroperation
{
  "data":"anId";
  "anotherdata": "another value"
}
```

----------------------------------------

TITLE: Querying Strings with $regex in MongoDB
DESCRIPTION: This example shows how to use the `$regex` operator in MongoDB to search for documents where the 'name' field starts with the letter 'J'. This allows for pattern-based searches within string values. Requires a MongoDB collection with a 'name' field.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/string.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.find({ name: { $regex: 'J.*' } });
```

----------------------------------------

TITLE: Dynamic Storage Duration Example
DESCRIPTION: Demonstrates the use of dynamic storage duration in C++. Memory allocated using `new` has dynamic storage duration. It's the programmer's responsibility to deallocate this memory using `delete` to prevent memory leaks. Failure to do so can lead to resource exhaustion.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/lifetime-of-objects@9aA_-IfQ9WmbPgwic0mFN.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int* ptr = new int;        // Dynamic storage duration
delete ptr;
```

----------------------------------------

TITLE: Division by Zero in C++
DESCRIPTION: This code demonstrates undefined behavior due to performing a division operation by zero. The variable `y` is initialized to 0, and then the code attempts to divide `x` by `y`. Division by zero is an illegal operation in C++, resulting in unpredictable program behavior.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/undefined-behavior-ub@IDOlquv6jlfecwQoBwkGZ.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int x = 5;
int y = 0;
int z = x / y; // Undefined behavior since division by zero is not allowed
```

----------------------------------------

TITLE: MongoDB $ne Operator Usage
DESCRIPTION: This snippet shows the basic syntax for using the `$ne` operator within a MongoDB query.  It specifies the field to apply the operator to and the value to exclude from the results.  The code should be used within the `find()` method of a MongoDB collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/ne.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{  field: {    $ne: value;  }}
```

----------------------------------------

TITLE: Running PHPCS with PSR-2 standard (Shell)
DESCRIPTION: This command executes PHPCodeSniffer to check a PHP file against the PSR-2 coding standard. It requires PHPCS to be installed and accessible in the system's PATH. The command analyzes the specified PHP file and reports any violations of the PSR-2 standard.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/phpcodesniffer@fSpvZ_4kGFMbFVCWhA8vn.md#_snippet_0

LANGUAGE: shell
CODE:
```
phpcs --standard=PSR2 /path/to/your/phpfile.php 
```

----------------------------------------

TITLE: Example CLI Output
DESCRIPTION: This is an example of the expected output from the CLI after fetching and processing the GitHub user activity. It contains a list of user events with descriptions. The output demonstrates the expected format of the information displayed in the terminal.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/github-user-activity.md#_snippet_2

LANGUAGE: Text
CODE:
```
Output:
- Pushed 3 commits to kamranahmedse/developer-roadmap
- Opened a new issue in kamranahmedse/developer-roadmap
- Starred kamranahmedse/developer-roadmap
- ...
```

----------------------------------------

TITLE: Logical NOT Operator in C++
DESCRIPTION: Demonstrates the logical NOT operator (!) in C++. This operator reverses the value of its operand. If the operand is true, it returns false, and vice versa. The example shows applying the NOT operator to a boolean literal and assigning the result to a boolean variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_13

LANGUAGE: cpp
CODE:
```
bool result = !false; // result will be true
```

----------------------------------------

TITLE: Cloning and Running Developer Roadmap Project (npm)
DESCRIPTION: These commands clone the developer-roadmap repository, navigate into the project directory, install dependencies using npm, and then start the development server. This sets up the project for local development and contribution.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/readme.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone git@github.com:kamranahmedse/developer-roadmap.git
cd developer-roadmap
npm install
npm run dev
```

----------------------------------------

TITLE: Explicitly Calling a Template Function in C++
DESCRIPTION: This code demonstrates how to explicitly specify the type parameter when calling the template function `max`. The `<int>` after `max` indicates that the function should be used with integers.  The result of the `max` function is stored in the `result` variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/templates@-6AOrbuOE7DJCmxlcgCay.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int result = max<int>(10, 20);
```

----------------------------------------

TITLE: Casting Integer to Boolean in PHP
DESCRIPTION: This code snippet demonstrates how to cast an integer variable to a boolean variable in PHP. The original variable `$foo` remains an integer, while `$bar` becomes a boolean representation of `$foo`. The value `10` (an integer) will be cast to `true` (a boolean).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/casting-data-types@pzReF4C0mcCWAnpfIJbwl.md#_snippet_0

LANGUAGE: php
CODE:
```
<?php
$foo = 10;   // $foo is an integer
$bar = (bool) $foo;   // $bar is a boolean
?>
```

----------------------------------------

TITLE: Cloning Developer Roadmap Project with Reduced Depth (git)
DESCRIPTION: This command clones the developer-roadmap repository with a depth of 1, which reduces the download size and speeds up the cloning process. This is useful for quickly obtaining a working copy of the project without the full history.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/readme.md#_snippet_1

LANGUAGE: sh
CODE:
```
git clone --depth=1 https://github.com/kamranahmedse/developer-roadmap.git
```

----------------------------------------

TITLE: Connecting to Server using SSH Alias
DESCRIPTION: This command connects to a remote server via SSH using an alias defined in the `~/.ssh/config` file. It simplifies the connection process by allowing users to specify a custom alias instead of the full username and server IP. The configuration in `~/.ssh/config` should map the alias to the appropriate user, host, and private key.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/ssh-remote-server-setup.md#_snippet_1

LANGUAGE: bash
CODE:
```
ssh <alias>
```

----------------------------------------

TITLE: Database Backup CLI Utility - SHOW CREATE TABLE SQL Statement
DESCRIPTION: This snippet refers to the SQL `SHOW CREATE TABLE` statement which can be used to retrieve the structure (schema) of a table in a database. This statement is useful for creating a database backup utility, as it allows you to understand the structure of each table so you can recreate it during a restore operation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/backend-project-ideas.md#_snippet_0

LANGUAGE: SQL
CODE:
```
SHOW CREATE TABLE
```

----------------------------------------

TITLE: Cat Class Implementing Animal
DESCRIPTION: Defines the `Cat` class, which extends the `Animal` class and overrides the `makeSound()` method to return "Meow". This represents another concrete animal type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/android/content/factory-pattern@DeOxj6RzQBYfEWV-M1Ybm.md#_snippet_2

LANGUAGE: Java
CODE:
```
public class Cat extends Animal {
    @override
    public String makeSound() {
        return "Meow";
    }
}
```

----------------------------------------

TITLE: Defining Constant Macro in C++
DESCRIPTION: This code snippet defines a constant macro named `PI` with the value 3.14159. This macro can then be used in the code as a symbolic constant. It's replaced by the preprocessor before compilation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/macros@zKdlfZTRHwjtmRUGW9z9-.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#define PI 3.14159
```

----------------------------------------

TITLE: Scrolling to Top using scrollTo Method in JavaScript
DESCRIPTION: This JavaScript code snippet uses the `window.scrollTo()` method to scroll to the top of the page. It takes two arguments: the horizontal (x) coordinate and the vertical (y) coordinate.  Setting both to 0 scrolls to the top-left corner of the document.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/scroll-to-top.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
window.scrollTo(0, 0);
```

----------------------------------------

TITLE: Updating Multiple Documents in MongoDB
DESCRIPTION: This snippet demonstrates how to update multiple documents in a MongoDB collection using the `updateMany()` method. It takes a query object to identify the documents to update and an update object specifying the changes. Requires a connection to a MongoDB database and an existing collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/index.md#_snippet_6

LANGUAGE: javascript
CODE:
```
db.users.updateMany({ age: { $gt: 30 } }, { $inc: { age: 1 } });
```

----------------------------------------

TITLE: Opening file with Nano in Linux
DESCRIPTION: This command opens a file in the nano text editor. Nano is a simple and user-friendly editor suitable for basic text file editing in Linux. The `[filename]` argument should be replaced with the actual name of the file to be edited.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/editing-files/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
nano [filename]
```

----------------------------------------

TITLE: Displaying PHP Version
DESCRIPTION: This code snippet retrieves the currently installed PHP version and displays it.  It utilizes the `phpversion()` function. This function requires no arguments and returns a string representing the PHP version. The output is a simple text string showing the PHP version number.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/php-versions-and-features@6sHRQTcoKL3TlgNJlwyx8.md#_snippet_0

LANGUAGE: PHP
CODE:
```
echo "Current PHP version: " . phpversion();
```

----------------------------------------

TITLE: File Writing using FileWriter in Java
DESCRIPTION: This snippet describes the use of `FileWriter` class in Java. It is used to create a file and write characters into it. No code is directly presented, but the description provides the class and its use.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/java/content/file-operations@NowpzyPVFcX082j5YS5i8.md#_snippet_0

LANGUAGE: Java
CODE:
```
FileWriter // Class used to create a file by writing characters into it.
```

----------------------------------------

TITLE: Creating and Dispatching Custom Event
DESCRIPTION: This snippet demonstrates how to create a custom event named 'roadmap-updated' using the `CustomEvent` constructor. It also shows how to dispatch this event on an element using the `dispatchEvent` method. The event detail includes the name 'JavaScript'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/custom-event.md#_snippet_0

LANGUAGE: js
CODE:
```
const event = new CustomEvent('roadmap-updated', {
  detail: { name: 'JavaScript' },
});
element.dispatchEvent(event);
```

----------------------------------------

TITLE: Generating Calculus Quiz Questions - Prompt
DESCRIPTION: This code snippet demonstrates a simple prompt used to instruct an LLM to generate a set of calculus quiz questions. The prompt specifies the subject area and the desired number of questions. The expected output is a list of relevant quiz questions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/study-buddy.md#_snippet_1

LANGUAGE: text
CODE:
```
Generate 5 calculus I quiz questions for me:
```

----------------------------------------

TITLE: Variable Templates in C++14
DESCRIPTION: Illustrates the use of variable templates, allowing variables to be defined with template parameters. This enables creating multiple instances of a variable with different types. Requires a C++14 compliant compiler.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-11--14@T6rCTv9Dxkm-tEA-l9XEv.md#_snippet_8

LANGUAGE: cpp
CODE:
```
template <typename T>
constexpr T pi = T(3.1415926535897932385);
float r = pi<float>; // Instantiated as a float
double d = pi<double>; // Instantiated as a double
```

----------------------------------------

TITLE: Basic Express Middleware
DESCRIPTION: This code defines a simple Express middleware function. It logs a message to the console when triggered and then calls `next()` to pass control to the next middleware function in the stack. The `app.use()` function registers the middleware with the Express application.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/nodejs-middleware.md#_snippet_0

LANGUAGE: javascript
CODE:
```
app.use((req, res, next) => {
  console.log('Middleware triggered');
  next();
});
```

----------------------------------------

TITLE: Function with Void Return Type - TypeScript
DESCRIPTION: Defines a TypeScript function `noop` that explicitly returns without a value. The inferred return type is `void`, indicating that the function does not return anything meaningful. This demonstrates how TypeScript handles functions that don't have explicit return values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/void@yLlQg7BF--ZwRHbXBWfOi.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// The inferred return type is void
function noop() {
  return;
}
```

----------------------------------------

TITLE: MongoDB $lte Query Results - JSON
DESCRIPTION: The expected results of the `$lte` query example, showing the documents that match the filter criteria.  These documents have a `price` field with a value less than or equal to 15.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/lte.md#_snippet_3

LANGUAGE: json
CODE:
```
[  { "_id": 1, "name": "Product A", "price": 10 },  { "_id": 2, "name": "Product B", "price": 15 }]
```

----------------------------------------

TITLE: NOT Operator Example in C++
DESCRIPTION: Demonstrates the use of the NOT operator (!) in C++. The code checks if the variable `a` is not less than 0. If `a` is not negative, it prints a message to the console. Requires the iostream library for output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/logical-operators@Y9gq8WkDA_XGe68JkY2UZ.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int a = 5;
if (!(a < 0)) {
    std::cout << "The value is not negative.\n";
}
```

----------------------------------------

TITLE: Restore to Remote Instance (Bash)
DESCRIPTION: This command restores a database dump to a MongoDB instance running on a remote host. The `--host` option specifies the hostname or IP address of the remote MongoDB instance, and the `--port` option specifies the port number (default is 27017).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/backup-recovery/mongorestore.md#_snippet_4

LANGUAGE: bash
CODE:
```
mongorestore --host=remoteHost --port=27017 /path/to/your/dump/folder
```

----------------------------------------

TITLE: Compiling with Debugging Symbols (g++)
DESCRIPTION: This command compiles a C++ file with the `-g` flag, which includes debugging information in the executable. This information is necessary for GDB to function effectively. The input is the C++ source file and the output is the executable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/gdb@BmWsoL9c_Aag5nVlMsKm2.md#_snippet_0

LANGUAGE: sh
CODE:
```
g++ -g myfile.cpp -o myfile
```

----------------------------------------

TITLE: Creating Durations with Chrono in C++
DESCRIPTION: This snippet demonstrates how to create duration objects in C++ using the chrono library. It initializes durations representing 5 seconds, 2 minutes, and 1 hour using `std::chrono::seconds`, `std::chrono::minutes`, and `std::chrono::hours` respectively. The program includes the `<iostream>` and `<chrono>` headers.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/date--time@yGvE6eHKlPMBB6rde0llR.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>
#include <chrono>

int main() {
    std::chrono::seconds sec(5);
    std::chrono::minutes min(2);
    std::chrono::hours hr(1);
    return 0;
}
```

----------------------------------------

TITLE: Ternary Operator Usage in JavaScript
DESCRIPTION: This snippet demonstrates the basic usage of the ternary operator in JavaScript. It takes a condition as input and returns either true or false based on the condition's evaluation. It's used as a shorthand for a simple `if` statement.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/ternary-operator.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
console.log(condition ? true : false);
```

----------------------------------------

TITLE: Cache-Control with no-store directive
DESCRIPTION: Shows how to use `Cache-Control: no-store` to prevent caching of the response by any cache (client or proxy). This is typically used for sensitive data that should never be stored.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_3

LANGUAGE: html
CODE:
```
Cache-Control: no-store
```

----------------------------------------

TITLE: Deleting a Single Document in MongoDB
DESCRIPTION: This snippet demonstrates how to delete a single document from a MongoDB collection using the `deleteOne()` method. A query object is passed as an argument to identify the document to delete. Requires a connection to a MongoDB database and an existing collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/index.md#_snippet_7

LANGUAGE: javascript
CODE:
```
db.users.deleteOne({ name: 'John Doe' });
```

----------------------------------------

TITLE: Using Constant Macro in C++
DESCRIPTION: This code snippet shows how to use the previously defined `PI` macro in a calculation. The macro is replaced by its value during preprocessing. It calculates the circumference of a circle given its radius.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/macros@zKdlfZTRHwjtmRUGW9z9-.md#_snippet_1

LANGUAGE: cpp
CODE:
```
double circumference = 2 * PI * radius;
```

----------------------------------------

TITLE: Executing an IIFE in JavaScript
DESCRIPTION: This code snippet demonstrates the basic structure of an Immediately Invoked Function Expression (IIFE) in JavaScript. The function is defined and immediately executed, printing 'Hello Roadmap!' to the console. This pattern is often used to encapsulate code and avoid polluting the global scope.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/iife.md#_snippet_0

LANGUAGE: javascript
CODE:
```
(function () {
  console.log('Hello Roadmap!');
})();
```

----------------------------------------

TITLE: Executing uptime command in bash
DESCRIPTION: This snippet demonstrates how to execute the `uptime` command in a Linux terminal to retrieve system uptime and load average information. The command requires no specific dependencies and is available on most Linux systems.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/server-review/uptime-load.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ uptime
```

----------------------------------------

TITLE: Using $and Operator in MongoDB
DESCRIPTION: This JavaScript code snippet demonstrates how to use the `$and` operator in MongoDB to find documents that satisfy multiple conditions. The snippet assumes a collection named `orders` exists and that MongoDB is accessible. The query searches for orders with a `price` greater than 1 and a `quantity` less than 10. The result is a cursor that can be iterated to retrieve the matching documents.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/and.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.orders.find({ $and: [{ price: { $gt: 1 } }, { quantity: { $lt: 10 } }] });
```

----------------------------------------

TITLE: TypeScript Exclude Type Examples
DESCRIPTION: Examples demonstrating the usage of the TypeScript Exclude utility type. It constructs a new type by excluding members from a union type that are assignable to a specified type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/exclude@0fvOXi9gJbEc7etqTggNE.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type T0 = Exclude<'a' | 'b' | 'c', 'a'>; // "b" | "c"
type T1 = Exclude<'a' | 'b' | 'c', 'a' | 'b'>; // "c"
type T2 = Exclude<string | number | (() => void), Function>; // string | number
```

----------------------------------------

TITLE: MongoDB $gt Operator Syntax
DESCRIPTION: This code snippet demonstrates the general syntax for using the `$gt` operator in a MongoDB query. It shows how to specify the field and the value to compare against.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/gt.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
  field: {
    $gt: value;
  }
}
```

----------------------------------------

TITLE: Iterating with Range-based for Loop in C++
DESCRIPTION: This C++11 snippet demonstrates the use of a range-based for loop to iterate over the elements of a `std::vector<int>`. For each element in the vector named `numbers`, the loop assigns the element's value to the variable `num` and prints it to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standards@vvE1aUsWbF1OFcmMUHbJa.md#_snippet_1

LANGUAGE: cpp
CODE:
```
std::vector<int> numbers = {1, 2, 3, 4};
for (int num : numbers) {
    std::cout << num << '\n';
}
```

----------------------------------------

TITLE: MongoDB $in Operator Syntax
DESCRIPTION: Demonstrates the general syntax for using the $in operator in MongoDB queries. This operator allows you to match documents where the value of a specified field exists within a given array of values. It's important to specify the field and the array of possible values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/in.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{ field: { $in: [<value1>, <value2>, ...] } }
```

----------------------------------------

TITLE: Inserting Date into MongoDB Document
DESCRIPTION: This code demonstrates inserting a Date object into a MongoDB document using the `insertOne` method. The `eventDate` field is set to the current date and time. This approach is commonly used for recording timestamps or scheduling events.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/date.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.events.insertOne({ title: 'Sample Event', eventDate: new Date() });
```

----------------------------------------

TITLE: Querying for Existing Field in MongoDB (JavaScript)
DESCRIPTION: This snippet shows how to use the `$exists` operator in MongoDB to find documents where the `age` field exists. The `db.collection.find()` method is used to query the collection for documents matching the specified criteria.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/index.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.find({ age: { $exists: true } });
```

----------------------------------------

TITLE: Opening a file with Nano
DESCRIPTION: This snippet shows the command to open a file using Nano.  The `nano filename` command opens the specified file in the Nano text editor. If the file does not exist, Nano will create a new file with that name.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/editing-files/nano.md#_snippet_2

LANGUAGE: bash
CODE:
```
nano filename
```

----------------------------------------

TITLE: Simple C++ Program
DESCRIPTION: This is a basic C++ program that prints "Hello, World!" to the console. It includes the iostream library for input and output operations. The main function returns 0 to indicate successful execution.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/compilers@FTMHsUiE8isD_OVZr62Xc.md#_snippet_0

LANGUAGE: C++
CODE:
```
#include <iostream>

int main() {
  std::cout << "Hello, World!\n";
  return 0;
}
```

----------------------------------------

TITLE: Enabling Database Profiler in MongoDB
DESCRIPTION: This snippet demonstrates how to enable the MongoDB database profiler using `db.setProfilingLevel(1)`. Setting the profiling level to 1 enables profiling and logs slow operations to the system log. This allows monitoring and analysis of query performance.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/query-optimization.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
db.setProfilingLevel(1);
```

----------------------------------------

TITLE: Defining Verbalizer for Sentiment Classification
DESCRIPTION: This example demonstrates how a verbalizer maps conceptual labels (positive, negative) to tokens (pos, neg) within a sentiment classification task, using a prompt to guide the language model's response.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/basic-llm/llm-vocabulary.md#_snippet_0

LANGUAGE: text
CODE:
```
Tweet: "I love hotpockets"
What is the sentiment of this tweet? Say 'pos' or 'neg'.
```

----------------------------------------

TITLE: Sending SIGSTOP Signal using kill command - Bash
DESCRIPTION: This bash command sends a SIGSTOP signal to a process, identified by its PID. SIGSTOP suspends the execution of the process until a SIGCONT signal is received. Replace 12345 with the actual process ID.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/proc-signals.md#_snippet_0

LANGUAGE: bash
CODE:
```
kill -SIGSTOP 12345
```

----------------------------------------

TITLE: Accessing Uninitialized Variable in C++
DESCRIPTION: This code demonstrates undefined behavior due to accessing the value of an uninitialized variable. The variable `x` is declared but not initialized before being used in the expression `x + 5`. The value of `x` is arbitrary, leading to unpredictable results.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/undefined-behavior-ub@IDOlquv6jlfecwQoBwkGZ.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int x;
int y = x + 5; // Undefined behavior since x is uninitialized
```

----------------------------------------

TITLE: MongoDB $exists Syntax
DESCRIPTION: Defines the basic syntax for using the `$exists` operator in a MongoDB query.  The `<boolean>` value determines whether to find documents with or without the specified field.  This syntax snippet sets the foundation for all `$exists` queries.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/exists.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{ field: { $exists: <boolean> } }
```

----------------------------------------

TITLE: Logical AND Operator in C++
DESCRIPTION: Demonstrates the logical AND operator (&&) in C++. This operator returns true if both operands are true, and false otherwise. The example shows applying the AND operator to two boolean literals and assigning the result to a boolean variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_11

LANGUAGE: cpp
CODE:
```
bool result = (true && false); // result will be false
```

----------------------------------------

TITLE: Change Element Style - JavaScript
DESCRIPTION: This snippet illustrates how to change the style of an HTML element using `element.style`. By assigning a value to a specific style property like `element.style.color`, the element's appearance is updated. This example changes the element's text color to blue.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/js-dom-manipulation.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
element.style.color = "blue"
```

----------------------------------------

TITLE: Find with Sorting - MongoDB
DESCRIPTION: This snippet demonstrates how to sort the results of the `find()` method using the `sort()` function. It requires a JSON object indicating the order of the fields.  Sorting is performed in ascending order when set to 1.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/find-methods.md#_snippet_5

LANGUAGE: javascript
CODE:
```
db.users.find().sort({ age: 1 });
```

----------------------------------------

TITLE: Displaying Process Information (PID, Priority, User)
DESCRIPTION: This shell command uses `ps` to display process information, specifically the process ID (PID), priority, user, and command name.  The `-eo` option allows specifying custom output formats.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/proc-priorities.md#_snippet_0

LANGUAGE: Shell
CODE:
```
ps -eo pid,pri,user,comm
```

----------------------------------------

TITLE: MongoDB $nin Example - JavaScript
DESCRIPTION: This example shows how to use the `$nin` operator to find books where the genre is not 'Mystery', 'Sci-Fi', or 'Thriller'. The query targets the `books` collection and the `genre` field.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/nin.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
db.books.find({ genre: { $nin: ['Mystery', 'Sci-Fi', 'Thriller'] } });
```

----------------------------------------

TITLE: Using Binary Literals in C++
DESCRIPTION: This C++14 snippet shows how to use binary literals to represent integer values. The prefix `0b` indicates that the subsequent digits represent a binary number, which is then assigned to the integer variable `binary_number`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standards@vvE1aUsWbF1OFcmMUHbJa.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int binary_number = 0b1010;
```

----------------------------------------

TITLE: Boolean Variable Declaration
DESCRIPTION: This snippet demonstrates how to declare a boolean variable in Rust and assign it a value.  The `let` keyword is used to declare the variable, and the `: bool` syntax specifies the data type. The variable `is_raining` is assigned the value `true`. No dependencies are needed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/data-structures/boolean.md#_snippet_0

LANGUAGE: Rust
CODE:
```
let is_raining: bool = true;
```

----------------------------------------

TITLE: Extract Nouns and Translate to French with Steps (Correct)
DESCRIPTION: This snippet demonstrates a step-by-step approach. It instructs the model to first translate the story to French, then list the nouns in the translation, and finally output a JSON object containing the count of nouns and an array of their French translations. This structured approach yields the correct result.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/good-prompts/include-steps.md#_snippet_2

LANGUAGE: Text
CODE:
```
Perform the following steps on the story delimited by """.

Step 1. Translate it to French
Step 2. List each noun in the translation.
Step 3. Output the JSON object with `nouns_count` number of nouns in french story and `nouns_french` i.e. array of nouns appeared in translation.

Output the JSON only, I am not interested in the rest of the steps.

"""In a charming village, siblings Jack and Jill set out on a quest to fetch water from a hilltop well. As they climbed, singing joyfully, misfortune struck—Jack tripped on a stone and tumbled down the hill, with Jill following suit. Though slightly battered, the pair returned home to comforting embraces. Despite the mishap, their adventurous spirits remained undimmed, and they continued exploring with delight."""
```

----------------------------------------

TITLE: Using $function Operator in MongoDB
DESCRIPTION: This snippet uses the `$function` operator in MongoDB aggregation to add a `volume` field to documents in the `collection`. The `$function` operator takes JavaScript code as a string, arguments, and the language (js). It calculates the volume based on the provided length, width, and height fields.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/javascript.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.aggregate([
  {
    $addFields: {
      volume: {
        $function: {
          body: 'function(l, w, h) { return l * w * h; }',
          args: ['$length', '$width', '$height'],
          lang: 'js',
        },
      },
    },
  },
]);
```

----------------------------------------

TITLE: Executing Ninja Build
DESCRIPTION: This bash command demonstrates how to execute the Ninja build system. By running `ninja` in the terminal, it will process the `build.ninja` file and build the project according to the defined rules and statements. It assumes that the `build.ninja` file is in the current directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/ninja@HkUCD5A_M9bJxJRElkK0x.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ ninja
```

----------------------------------------

TITLE: Sentiment Analysis Query Example
DESCRIPTION: This code snippet represents the query that the model will analyze after being provided with the few-shot examples. The goal is for the model to classify the sentiment of the input sentence based on the patterns learned from the provided examples.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/prompting-techniques/few-shot-prompting.md#_snippet_1

LANGUAGE: text
CODE:
```
The book was hard to put down. - {sentiment_label}
```

----------------------------------------

TITLE: Reduce Array Syntax - JavaScript
DESCRIPTION: This code snippet shows the syntax for using the `reduce()` method in JavaScript. It takes a reducer function and an optional initial value as parameters. The reducer function takes an accumulator and the current value as arguments.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/reduce-method.md#_snippet_0

LANGUAGE: javascript
CODE:
```
array.reduce((accumulator, currentValue) => {
  // ...
}, initialValue);
```

----------------------------------------

TITLE: Listing Remote Repositories in Git
DESCRIPTION: This command lists all configured remote repositories, along with their URLs. The `-v` option provides verbose output, showing both the fetch and push URLs for each remote.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/managing-remotes@sBQOInoFBU9XfkPZ-JlyT.md#_snippet_1

LANGUAGE: git
CODE:
```
git remote -v
```

----------------------------------------

TITLE: Defining Door Interface - PHP
DESCRIPTION: Defines a `Door` interface with `getWidth` and `getHeight` methods and a concrete `WoodenDoor` implementation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_0

LANGUAGE: PHP
CODE:
```
interface Door
{
    public function getWidth(): float;
    public function getHeight(): float;
}

class WoodenDoor implements Door
{
    protected $width;
    protected $height;

    public function __construct(float $width, float $height)
    {
        $this->width = $width;
        $this->height = $height;
    }

    public function getWidth(): float
    {
        return $this->width;
    }

    public function getHeight(): float
    {
        return $this->height;
    }
}
```

----------------------------------------

TITLE: Dropping All Indexes in MongoDB
DESCRIPTION: This snippet demonstrates how to remove all indexes from a specified MongoDB collection. Replace COLLECTION_NAME with the appropriate collection name. This action requires caution as it affects query performance. MongoDB connection is required.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/indexes.md#_snippet_5

LANGUAGE: javascript
CODE:
```
db.COLLECTION_NAME.dropIndexes()
```

----------------------------------------

TITLE: Querying MongoDB Array by Size (JavaScript)
DESCRIPTION: This snippet shows how to find documents where the `hobbies` array has a specific size (in this case, 3).  It uses the `$size` operator to filter the documents based on the array's length.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/array.md#_snippet_4

LANGUAGE: javascript
CODE:
```
db.collection.find({ hobbies: { $size: 3 } });
```

----------------------------------------

TITLE: insertOne() Example in MongoDB
DESCRIPTION: This code snippet provides an example of using `insertOne()` to insert a single document into the 'inventory' collection in MongoDB. The document contains fields for 'item' and 'qty'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/insert-methods.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.inventory.insertOne({
  item: 'book',
  qty: 1,
});
```

----------------------------------------

TITLE: Reddit JSON Feed URL
DESCRIPTION: This is the URL format to fetch JSON data from a specific subreddit. Replace `{subreddit}` with the name of the subreddit you want to retrieve data from.  The URL returns a JSON feed of posts from the specified subreddit.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/reddit-client.md#_snippet_0

LANGUAGE: plaintext
CODE:
```
https://www.reddit.com/r/{subreddit}.json
```

----------------------------------------

TITLE: Static Cast Basic Data Types
DESCRIPTION: This example demonstrates how to use `static_cast` to convert an integer to a float in C++. The integer variable `i` is explicitly converted to a float and assigned to the variable `f`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/static_cast@_XB2Imyf23-6AOeoNLhYQ.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int i = 42;
float f = static_cast<float>(i); // Converts integer i to float f
```

----------------------------------------

TITLE: Inserting a Single Document into MongoDB
DESCRIPTION: This snippet demonstrates how to insert a single document into a MongoDB collection using the `insertOne()` method. The document is passed as an argument to the method. Requires a connection to a MongoDB database and an existing collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/index.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.users.insertOne({ name: 'John Doe', age: 30, email: 'john@example.com' });
```

----------------------------------------

TITLE: Delete Short URL - DELETE Request Example
DESCRIPTION: This code snippet shows the DELETE request format for deleting an existing short URL. It includes the endpoint with the short code.  A 204 No Content status code is expected on success.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/url-shortening-service.md#_snippet_6

LANGUAGE: plaintext
CODE:
```
DELETE /shorten/abc123
```

----------------------------------------

TITLE: C++ Source File Example
DESCRIPTION: This is an example of a C++ source file. It contains the implementation of the `MyClass` declared in `MyClass.h`. It includes the header file and provides the definitions for the constructor and the `myMethod` function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/structuring-codebase@Zw2AOTK5uc9BoKEpY7W1C.md#_snippet_3

LANGUAGE: cpp
CODE:
```
#include "MyClass.h"

MyClass::MyClass() {
    // constructor implementation
}

int MyClass::myMethod() {
    // method implementation
}
```

----------------------------------------

TITLE: Asynchronous code execution in JavaScript
DESCRIPTION: This snippet illustrates how JavaScript is single-threaded and cannot run 2 lines of code at the same time, but achieves concurrency using asynchronous code.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/javascript.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
No, it is not possible to run 2 lines of code at the same time in JavaScript. JavaScript is a single-threaded language, which means that it can only execute one line of code at a time. However, it is possible to run 2 lines of code at the same time using asynchronous code.
```

----------------------------------------

TITLE: Defining Atlas Search Index Mappings (JSON)
DESCRIPTION: This JSON snippet defines the mappings for an Atlas Search index. It specifies which fields (title and description) in a MongoDB collection should be indexed and which Lucene analyzer to use for each field. The `dynamic: false` setting disables dynamic field indexing. Analyzers process text for indexing and searching.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/atlas-search-indexes.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mappings": {
    "dynamic": false,
    "fields": {
      "title": {
        "type": "string",
        "analyzer": "lucene.standard"
      },
      "description": {
        "type": "string",
        "analyzer": "lucene.english"
      }
    }
  }
}
```

----------------------------------------

TITLE: Modulus in C++
DESCRIPTION: Demonstrates the modulus operation with two integers in C++. Defines two integer variables 'a' and 'b', and calculates the remainder of the division of 'a' by 'b', storing the result in the 'remainder' variable. The example uses the '%' operator to get the remainder.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_4

LANGUAGE: cpp
CODE:
```
int a = 15;
int b = 4;
int remainder = a % b; // remainder is 3
```

----------------------------------------

TITLE: User Login Request Example
DESCRIPTION: Shows the structure of a POST request to the /login endpoint for authenticating an existing user. The request contains the user's email and password. The server must validate these credentials against the stored data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_2

LANGUAGE: HTTP
CODE:
```
POST /login
{
  "email": "john@doe.com",
  "password": "password"
}
```

----------------------------------------

TITLE: Restore Specific Database (Bash)
DESCRIPTION: This command restores only the `mydatabase` database from the specified dump folder.  It utilizes the `--db` option to filter the restore operation to a specific database within the dump. Other databases in the dump are ignored.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/backup-recovery/mongorestore.md#_snippet_1

LANGUAGE: bash
CODE:
```
mongorestore --db=mydatabase /path/to/your/dump/folder
```

----------------------------------------

TITLE: Rule of Three - C++
DESCRIPTION: This snippet illustrates the Rule of Three in C++. If a class manages resources (e.g., through raw pointers), it should explicitly define a copy constructor, copy assignment operator, and destructor to avoid issues like double freeing or memory leaks.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/idioms@fb3bnfKXjSIjPAk4b95lg.md#_snippet_1

LANGUAGE: cpp
CODE:
```
class MyClass {
public:
    MyClass();
    MyClass(const MyClass& other); // Copy constructor
    MyClass& operator=(const MyClass& other); // Copy assignment operator
    ~MyClass(); // Destructor
};
```

----------------------------------------

TITLE: Partial Template Specialization in C++
DESCRIPTION: This code demonstrates partial and full template specialization in C++. It defines a primary template `MyTemplate`, a partial specialization for pointer types (`T*`), and a full specialization for the `int` type. The `name()` function returns a string indicating which specialization is used.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/partial-template-specialization@1NYJtbdcdOB4-vIrnq4yX.md#_snippet_0

LANGUAGE: cpp
CODE:
```
// Primary template
template <typename T>
struct MyTemplate {
    static const char* name() {
        return "General case";
    }
};

// Partial specialization for pointers
template <typename T>
struct MyTemplate<T*> {
    static const char* name() {
        return "Partial specialization for pointers";
    }
};

// Full specialization for int
template <>
struct MyTemplate<int> {
    static const char* name() {
        return "Full specialization for int";
    }
};

int main() {
    MyTemplate<double> t1; // General case
    MyTemplate<double*> t2; // Partial specialization for pointers
    MyTemplate<int> t3; // Full specialization for int

    std::cout << t1.name() << '\n';
    std::cout << t2.name() << '\n';
    std::cout << t3.name() << '\n';

    return 0;
}
```

----------------------------------------

TITLE: Printing Text with PHP
DESCRIPTION: This PHP code snippet demonstrates how to output a simple string using the `echo` command. The `echo` command is a core feature of PHP, allowing the script to send output to the browser.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/introduction-to-php@_hYN0gEi9BL24nptEtXWU.md#_snippet_0

LANGUAGE: php
CODE:
```
  <?php
   echo "Hello, World!";
  ?>
```

----------------------------------------

TITLE: Finding documents where a field does not exist
DESCRIPTION: This code snippet demonstrates how to use the `$exists` operator with `false` to find all documents in the `books` collection where the `publisher` field does not exist. It queries the `books` collection and returns documents lacking the 'publisher' field.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/exists.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.books.find({ publisher: { $exists: false } });
```

----------------------------------------

TITLE: Wave Generation and Commenting in Python
DESCRIPTION: This snippet generates a simple wave pattern using the sine function from the `math` module. It calculates the y-coordinate for each point and prints an asterisk at the corresponding position. The second snippet demonstrates how to add comments to this code and reformat it for better legibility.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/coding-assistance.md#_snippet_1

LANGUAGE: python
CODE:
```
import math
amplitude = 30
frequency = 2
num_points = 50
for i in range(num_points):
    y = int(round(amplitude * math.sin(2 * math.pi * frequency * i / num_points)))
    print(' ' * (amplitude + y) + '*')
```

LANGUAGE: python
CODE:
```
# Import the math module
import math

# Set the amplitude, frequency, and number of points in the wave
amplitude = 30
frequency = 2
num_points = 50

# Loop over each point in the wave
for i in range(num_points):
    # Calculate the y value of the wave using the sine function from the math module
    y = int(round(amplitude * math.sin(2 * math.pi * frequency * i / num_points)))

    # Print a space for padding, followed by an asterisk at the appropriate position on the wave
    print(" " * (amplitude + y) + "*")
```

----------------------------------------

TITLE: Checking Cronjob for Certbot Renewal
DESCRIPTION: This command lists the cronjobs for the current user to check if Certbot has set up an automatic renewal cronjob. This ensures that the SSL certificate is automatically renewed before it expires.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/setup-and-auto-renew-ssl-certificates.md#_snippet_5

LANGUAGE: shell
CODE:
```
sudo crontab -l
```

----------------------------------------

TITLE: Division Operator (Integer) in C++
DESCRIPTION: Divides one integer by another, performing integer division. The result is truncated to an integer. The variables 'a' and 'b' must be defined as integers before this operation. Ensure 'b' is not zero to avoid division by zero error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/arithmetic-operators@8aOSpZLWwZv_BEYiurhyR.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int quotient = a / b;
```

----------------------------------------

TITLE: Installing Nano on Arch Linux
DESCRIPTION: This snippet shows how to install Nano on Arch Linux using the `pacman` package manager. The command `sudo pacman -S nano` installs Nano and any required dependencies.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/editing-files/nano.md#_snippet_1

LANGUAGE: bash
CODE:
```
# Arch Linux 
sudo pacman -S nano
```

----------------------------------------

TITLE: Kill process with signal in Linux
DESCRIPTION: Shows the basic syntax of the `kill` command to terminate processes in Linux. It takes an optional signal or option and one or more Process IDs (PIDs) as arguments.  The PID identifies the process to be terminated.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/kill-processes.md#_snippet_0

LANGUAGE: bash
CODE:
```
kill [signal or option] PID(s)
```

----------------------------------------

TITLE: Installing Snapd Package Manager
DESCRIPTION: These commands update the package list and install the snapd package manager, which is required to install Certbot. This is a prerequisite for obtaining Let's Encrypt SSL certificates.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/setup-and-auto-renew-ssl-certificates.md#_snippet_0

LANGUAGE: shell
CODE:
```
sudo apt-get update
sudo apt-get install snapd

sudo snap install core; snap refresh core
```

----------------------------------------

TITLE: Install MongoDB Analyzer via NuGet Package Manager
DESCRIPTION: This command installs the MongoDB Analyzer NuGet package within the Visual Studio Package Manager Console. It adds MongoDB support for static analysis and code completion to a .NET project.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/developer-tools/vs-analyzer.md#_snippet_0

LANGUAGE: powershell
CODE:
```
Install-Package MongoDB.Analyzer -Version 1.0.0
```

----------------------------------------

TITLE: Translating Sentence with LLM Prompt
DESCRIPTION: This code snippet illustrates a prompt structure for translating a sentence from English to French using a Large Language Model. It consists of the English sentence followed by a translation request.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompting-introduction/basic-prompting.md#_snippet_1

LANGUAGE: text
CODE:
```
This is a sentence in English.

Translate the above sentence to French.
```

----------------------------------------

TITLE: Declaring variable with Type Inference - TypeScript
DESCRIPTION: This code snippet demonstrates type inference in TypeScript. The type of the variable `name` is automatically inferred to be `string` based on the assigned value 'John Doe'. The TypeScript compiler will enforce type safety based on this inferred type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/type-inference@KUur-gfOBQodTS-irFet7.md#_snippet_0

LANGUAGE: typescript
CODE:
```
let name = 'John Doe';
```

----------------------------------------

TITLE: Summarizing Article with LLM Prompt
DESCRIPTION: This code snippet demonstrates a basic prompt structure for summarizing an article using a Large Language Model. It involves placing the article text followed by a request to summarize it.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompting-introduction/basic-prompting.md#_snippet_0

LANGUAGE: text
CODE:
```
Long article text here .............
....................................

Summarize the above article for me.
```

----------------------------------------

TITLE: Binary Literals in C++14
DESCRIPTION: Demonstrates the use of binary literals (0b...) for representing integers in binary format, improving readability. The example assigns a binary literal to an integer variable. Requires a C++14 compliant compiler.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-11--14@T6rCTv9Dxkm-tEA-l9XEv.md#_snippet_6

LANGUAGE: cpp
CODE:
```
int b = 0b110101; // Decimal value is 53
```

----------------------------------------

TITLE: Extracting tar archive
DESCRIPTION: This command extracts a tar archive. The `xvf` options specify extract, verbose, and file, respectively. The argument is the name of the archive to extract. It extracts all files within the provided archive to the current working directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/working-with-files/archiving.md#_snippet_1

LANGUAGE: bash
CODE:
```
tar xvf archive_name.tar
```

----------------------------------------

TITLE: Registering start Script in package.json
DESCRIPTION: Registers the `start` script in the `package.json` file to run the `index.js` file using Node.js.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_12

LANGUAGE: javascript
CODE:
```
"scripts": {
  "start": "node index.js"
},
```

----------------------------------------

TITLE: Cache-Control with public directive
DESCRIPTION: Illustrates using `Cache-Control: public` to allow caching by both the client and any intermediary proxies. This indicates that the response is safe to be shared with multiple users.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/http-caching.md#_snippet_2

LANGUAGE: html
CODE:
```
Cache-Control: public
```

----------------------------------------

TITLE: Using Adapter to Hunt WildDog
DESCRIPTION: This snippet shows how to use the `WildDogAdapter` to allow the `Hunter` to hunt a `WildDog`. The `WildDog` instance is wrapped in the `WildDogAdapter`, which is then passed to the `hunt` method.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_22

LANGUAGE: php
CODE:
```
$wildDog = new WildDog();
$wildDogAdapter = new WildDogAdapter($wildDog);

$hunter = new Hunter();
$hunter->hunt($wildDogAdapter);
```

----------------------------------------

TITLE: Unwind Array Field in MongoDB
DESCRIPTION: Illustrates how to use the `$unwind` operator to deconstruct the `orders` array field in a `sales` collection. This example shows the basic usage without optional parameters.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/unwind.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.sales.aggregate([{ $unwind: { path: '$orders' } }]);
```

----------------------------------------

TITLE: Using Simple Factory - PHP
DESCRIPTION: Illustrates how to use the `DoorFactory` to create `Door` objects and access their properties.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_2

LANGUAGE: PHP
CODE:
```
// Make me a door of 100x200
$door = DoorFactory::makeDoor(100, 200);

echo 'Width: ' . $door->getWidth();
echo 'Height: ' . $door->getHeight();

// Make me a door of 50x100
$door2 = DoorFactory::makeDoor(50, 100);
```

----------------------------------------

TITLE: Abstract Animal Class Definition
DESCRIPTION: Defines an abstract `Animal` class with an abstract `makeSound()` method.  This serves as the base class for concrete animal types. The `makeSound` method is intended to be overridden by subclasses.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/android/content/factory-pattern@DeOxj6RzQBYfEWV-M1Ybm.md#_snippet_0

LANGUAGE: Java
CODE:
```
public abstract class Animal {
    public abstract String makeSound();
}
```

----------------------------------------

TITLE: Dropping a Specific Index in MongoDB
DESCRIPTION: This code demonstrates how to drop a specific index using its name. Replace COLLECTION_NAME and INDEX_NAME with the actual collection and index names. It assumes a MongoDB connection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/indexes.md#_snippet_4

LANGUAGE: javascript
CODE:
```
db.COLLECTION_NAME.dropIndex(INDEX_NAME)
```

----------------------------------------

TITLE: Running Development Server
DESCRIPTION: This code snippet shows how to run the development server using pnpm after the setup is done. It's a simple command to start the local server for testing.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/contributing.md#_snippet_3

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Dropping a MongoDB Collection
DESCRIPTION: This snippet demonstrates how to delete an entire MongoDB collection using the `drop()` method. This removes the collection and all its data. Requires a connection to a MongoDB database and an existing collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/index.md#_snippet_9

LANGUAGE: javascript
CODE:
```
db.users.drop();
```

----------------------------------------

TITLE: try Block in C++
DESCRIPTION: This code block demonstrates the structure of a `try` block in C++. Code that might throw an exception is placed within this block. If an exception occurs, control is transferred to the appropriate `catch` block.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/exceptions@NJud5SXBAUZ6Sr78kZ7jx.md#_snippet_0

LANGUAGE: cpp
CODE:
```
try {
  // code that might throw an exception
}
```

----------------------------------------

TITLE: Accessing Array Out of Bounds in C++
DESCRIPTION: This code demonstrates an access violation caused by accessing an array out of bounds.  The array `arr` is declared with a size of 5, meaning valid indices are 0-4. Attempting to access `arr[5]` results in an access violation because it is outside the allocated memory for the array.  No dependencies are required beyond basic C++.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/access-violations@y4-P4UNC--rE1vni8HdTn.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int arr[5] = {1, 2, 3, 4, 5};
int y = arr[5];  // Access violation: index out of bounds (valid indices are 0-4)
```

----------------------------------------

TITLE: Addition Assignment Operator in C++
DESCRIPTION: Demonstrates the addition assignment operator (+=) in C++. This operator adds the right-hand operand to the left-hand operand and assigns the result to the left-hand operand. The example adds 3 to x (which is initially 5) and assigns the sum (8) back to x.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_15

LANGUAGE: cpp
CODE:
```
int x = 5;
x += 3; // x gets the value 8 (5 + 3)
```

----------------------------------------

TITLE: Java: Hello World Program
DESCRIPTION: This Java code demonstrates a simple "Hello, World!" program. It defines a class `HelloWorld` with a `main` method that prints the message "Hello, World!" to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/java-vs-python.md#_snippet_2

LANGUAGE: java
CODE:
```
// java code examples
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

----------------------------------------

TITLE: MongoDB $project: Include Fields (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to use the `$project` operator to include specific fields (name and totalPosts) and calculate a new field (totalPosts) using the `$size` operator to count the number of posts. This query retrieves the name and the total number of posts for each user.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/project.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
db.users.aggregate([
  {
    $project: {
      name: 1,
      totalPosts: { $size: '$posts' },
    },
  },
]);
```

----------------------------------------

TITLE: Install MongoDB Analyzer via .NET CLI
DESCRIPTION: This command installs the MongoDB Analyzer package using the .NET CLI. It adds the analyzer to the project, enabling static analysis for MongoDB-related code.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/developer-tools/vs-analyzer.md#_snippet_1

LANGUAGE: csharp
CODE:
```
dotnet add package MongoDB.Analyzer --version 1.0.0
```

----------------------------------------

TITLE: Bash CLI: Integrity Check Tool
DESCRIPTION: This bash snippet demonstrates the command-line interface of the integrity check tool. It shows how to initialize, check, and update the integrity of log files using different commands.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/file-integrity-checker.md#_snippet_0

LANGUAGE: bash
CODE:
```
> ./integrity-check init /var/log  # Initializes and stores hashes of all log files in the directory
> Hashes stored successfully.

> ./integrity-check check /var/log/syslog
> Status: Modified (Hash mismatch)
# Optionally report the files where hashes mismatched

> ./integrity-check -check /var/log/auth.log
> Status: Unmodified

> ./integrity-check update /var/log/syslog
> Hash updated successfully.
```

----------------------------------------

TITLE: Non-Null Assertion Example TypeScript
DESCRIPTION: This code snippet demonstrates how to use the non-null assertion operator (!) in TypeScript.  It asserts that the `name` variable, which is initially `null`, will not be null when accessing its `length` property.  This allows the TypeScript compiler to treat `name` as a non-nullable string.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/non-null-assertion@mjaL5ocLnM8VQlhUxW6KU.md#_snippet_0

LANGUAGE: typescript
CODE:
```
let name: string | null = null;

// we use the non-null assertion operator to tell the compiler that name will never be null
let nameLength = name!.length;
```

----------------------------------------

TITLE: Nullish Coalescing Operator Example in JavaScript
DESCRIPTION: This code snippet demonstrates the use of the nullish coalescing operator (`??`) in JavaScript. It shows how `??` returns the right-hand side operand when the left-hand side operand is `null` or `undefined`. It also illustrates that `??` does not treat falsy values like `0` or `''` as nullish, unlike the `||` operator.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/nullish-coalescing-operator.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
console.log(null ?? 'hello'); // hello
console.log(undefined ?? 'hello'); // hello
console.log('' ?? 'hello'); // ''
console.log(0 ?? 'hello'); // 0
```

----------------------------------------

TITLE: Conditional Logic with Truthiness in TypeScript
DESCRIPTION: This TypeScript function determines a message based on the number of users online. It leverages truthiness by evaluating the `numUsersOnline` parameter directly in the `if` statement's condition.  If `numUsersOnline` is a truthy value (non-zero), a message indicating the number of online users is returned; otherwise, a "Nobody's here" message is returned.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/truthiness@Xonbxc7MvMEonKBvbkCAH.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
function getUsersOnlineMessage(numUsersOnline: number) {
  if (numUsersOnline) {
    return `There are ${numUsersOnline} online now!`;
  }

  return "Nobody's here. :(";
}
```

----------------------------------------

TITLE: Initializing Character (char) in C++
DESCRIPTION: This code snippet shows how to declare and initialize a character variable in C++ using the `char` data type. Characters store single characters, like letters, digits, or symbols, using their ASCII value and occupy 1 byte.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/data-types@MwznA4qfpNlv6sqSNjPZi.md#_snippet_3

LANGUAGE: cpp
CODE:
```
char letter = 'A';
```

----------------------------------------

TITLE: Outputting to Console using std::cout in C++
DESCRIPTION: This code snippet demonstrates how to output text to the console using `std::cout` and the insertion operator `<<` in C++. It includes a newline character `\n` to move the cursor to the next line.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/running-your-first-program@SEq0D2Zg5WTsIDtd1hW9f.md#_snippet_3

LANGUAGE: cpp
CODE:
```
std::cout << "Hello, World!\n";
```

----------------------------------------

TITLE: Using $gte Operator Syntax in MongoDB
DESCRIPTION: This code snippet shows the general syntax for using the `$gte` operator in MongoDB queries. It defines how to specify the field and the value to compare against.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/gte.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{  field: {    $gte: value;  }}
```

----------------------------------------

TITLE: Setting Global Git Configuration
DESCRIPTION: This command sets a global configuration setting that applies to all Git repositories on the system for the current user. The configuration is stored in the user's `.gitconfig` file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/local-vs-global-config@tVvxC5JQgUb_B8kOqYpD8.md#_snippet_1

LANGUAGE: bash
CODE:
```
git config --global [key] [value]
```

----------------------------------------

TITLE: Addition Operator in C++
DESCRIPTION: Adds two numbers together and assigns the result to an integer variable 'sum'. The variables 'a' and 'b' must be defined as integers before this operation. The resulting 'sum' variable will store the sum of 'a' and 'b'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/arithmetic-operators@8aOSpZLWwZv_BEYiurhyR.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int sum = a + b;
```

----------------------------------------

TITLE: MongoDB $limit Example
DESCRIPTION: This example demonstrates using the `$limit` operator to limit the results from the `employees` collection to 5 documents.  It is part of an aggregation pipeline.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/limit.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.employees.aggregate([
  {
    $limit: 5,
  },
]);
```

----------------------------------------

TITLE: Implementing WebPage Classes
DESCRIPTION: These snippets define the `About` and `Careers` classes that implement the `WebPage` interface. They each depend on a `Theme` object, which determines the color of the page content.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_24

LANGUAGE: php
CODE:
```
class About implements WebPage
{
    protected $theme;

    public function __construct(Theme $theme)
    {
        $this->theme = $theme;
    }

    public function getContent()
    {
        return "About page in " . $this->theme->getColor();
    }
}

class Careers implements WebPage
{
    protected $theme;

    public function __construct(Theme $theme)
    {
        $this->theme = $theme;
    }

    public function getContent()
    {
        return "Careers page in " . $this->theme->getColor();
    }
}
```

----------------------------------------

TITLE: Bitwise AND Operation
DESCRIPTION: Performs a bitwise AND operation between two integers. The result is a new integer where each bit is 1 only if both corresponding bits in the input integers are 1. Requires the C++ standard library. Input integers are 5 and 3. Output is 1.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/bitwise-operators@zE4iPSq2KsrDSByQ0sGK_.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int result = 5 & 3; // result will be 1 (0000 0101 & 0000 0011 = 0000 0001)
```

----------------------------------------

TITLE: Listing files in a directory using ls command in Bash
DESCRIPTION: This snippet shows how to list the files and directories in the current working directory using the `ls` command in a Linux environment. The `ls` command displays the names of the files and directories in the current directory.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/working-with-files/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
ls
```

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Installs the `express` and `express-session` packages as project dependencies using npm. `express` is for creating the web application and `express-session` is for managing user sessions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm install express express-session
```

----------------------------------------

TITLE: Getting Viewport Dimensions in JavaScript
DESCRIPTION: This snippet demonstrates how to obtain the viewport dimensions (width and height) in JavaScript.  It uses the `window.innerWidth` and `window.innerHeight` properties for this purpose.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/javascript.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
You can use `window.innerWidth` and `window.innerHeight` to get the viewport dimensions.
```

----------------------------------------

TITLE: Query with Compound Index
DESCRIPTION: Demonstrates how to use a compound index in a MongoDB query to find documents where the `author` is 'John Smith' and the `title` is 'Introduction to MongoDB'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/compound.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.books.find({ author: 'John Smith', title: 'Introduction to MongoDB' });
```

----------------------------------------

TITLE: Return Statement in C++
DESCRIPTION: This code snippet demonstrates the `return 0;` statement, which indicates that the program executed successfully. Returning a non-zero value typically indicates an error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/running-your-first-program@SEq0D2Zg5WTsIDtd1hW9f.md#_snippet_4

LANGUAGE: cpp
CODE:
```
return 0;
```

----------------------------------------

TITLE: Iterating through std::vector in C++
DESCRIPTION: This code snippet demonstrates iterating through a `std::vector` using iterators. It prints each element of the vector to the console. Requires including `<iostream>` and `<vector>`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_11

LANGUAGE: cpp
CODE:
```
std::vector<int> my_vec = {1, 2, 3, 4, 5};
for (auto it = my_vec.begin(); it != my_vec.end(); ++it) {
    std::cout << *it << " ";
}
```

----------------------------------------

TITLE: Subtraction Assignment Operator in C++
DESCRIPTION: Demonstrates the subtraction assignment operator (-=) in C++. This operator subtracts the right-hand operand from the left-hand operand and assigns the result to the left-hand operand. The example subtracts 3 from x (which is initially 5) and assigns the difference (2) back to x.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_16

LANGUAGE: cpp
CODE:
```
int x = 5;
x -= 3; // x gets the value 2 (5 - 3)
```

----------------------------------------

TITLE: Defining build using Ninja
DESCRIPTION: This build.ninja file defines build rules and targets for a C++ project. It defines rules for compiling (cc) and linking (link) and specifies the dependencies between main.cpp, main.o, and HelloWorld. Ninja emphasizes fast build times.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/build-systems@jVXFCo6puMxJ_ifn_uwim.md#_snippet_4

LANGUAGE: Ninja
CODE:
```
# build.ninja
rule cc
  command = g++ -c $in -o $out

rule link
  command = g++ $in -o $out

build main.o: cc main.cpp
build HelloWorld: link main.o
  default HelloWorld
```

----------------------------------------

TITLE: Defining WebPage Interface
DESCRIPTION: This code defines the `WebPage` interface, which represents an abstraction for different web pages. It requires implementing classes to have a constructor accepting a `Theme` and a `getContent` method.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_23

LANGUAGE: php
CODE:
```
interface WebPage
{
    public function __construct(Theme $theme);
    public function getContent();
}
```

----------------------------------------

TITLE: Dereferencing Null Pointer in C++
DESCRIPTION: This code demonstrates an access violation caused by dereferencing a null pointer.  The pointer `p` is initialized to `nullptr`, and then the program attempts to access the memory location it points to, resulting in an access violation.  No dependencies are required beyond basic C++.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/access-violations@y4-P4UNC--rE1vni8HdTn.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int *p = nullptr;
int x = *p;  // Access violation: trying to access null pointer's content
```

----------------------------------------

TITLE: Viewing specifics of a PID from /proc/{PID}/status
DESCRIPTION: This command displays detailed information about a specific process identified by its PID. It reads the `/proc/{PID}/status` file, which contains process metadata, such as its name, state, memory usage, and more.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/listing-finding-proc.md#_snippet_3

LANGUAGE: bash
CODE:
```
cat /proc/{PID}/status
```

----------------------------------------

TITLE: Displaying Current Ulimits (Bash)
DESCRIPTION: This snippet shows how to display the current ulimits settings using the `ulimit -a` command in a bash shell. It provides a comprehensive overview of all resource limits configured for the current user session.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/containerization/ulimits.md#_snippet_0

LANGUAGE: bash
CODE:
```
ulimit -a
```

----------------------------------------

TITLE: MongoDB $all Syntax
DESCRIPTION: This snippet demonstrates the basic syntax for using the `$all` operator in MongoDB. It shows how to specify the field to query and the array of values to match against.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/all.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
  <field>: {
    $all: [<value1>, <value2>, ..., <valueN>]
  }
}
```

----------------------------------------

TITLE: Create Blog Post Response Example
DESCRIPTION: This JSON snippet demonstrates the expected response when a new blog post is successfully created.  It includes the 'id', 'title', 'content', 'category', 'tags', 'createdAt', and 'updatedAt' fields. The server should return this object in the response body with a 201 Created status code.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/blogging-platform-api.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "id": 1,
  "title": "My First Blog Post",
  "content": "This is the content of my first blog post.",
  "category": "Technology",
  "tags": ["Tech", "Programming"],
  "createdAt": "2021-09-01T12:00:00Z",
  "updatedAt": "2021-09-01T12:00:00Z"
}
```

----------------------------------------

TITLE: Comparison Equal To Operator in C++
DESCRIPTION: Demonstrates the equal to operator (==) in C++. This operator checks if two operands are equal. It returns true if they are equal, and false otherwise. The example shows comparing two integer literals and assigning the boolean result to a boolean variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_5

LANGUAGE: cpp
CODE:
```
bool isEqual = (5 == 3); // isEqual will be false
```

----------------------------------------

TITLE: Listing all running processes using ps -ef
DESCRIPTION: This command lists all currently running processes on the Linux system, providing a snapshot of their status, user, and command.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/process-management/listing-finding-proc.md#_snippet_0

LANGUAGE: bash
CODE:
```
ps -ef
```

----------------------------------------

TITLE: Create Compound Index
DESCRIPTION: Shows how to create a compound index on the `author` and `title` fields in the `books` collection in MongoDB using Javascript.  The `createIndex` method is used.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/compound.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.books.createIndex({ author: 1, title: 1 });
```

----------------------------------------

TITLE: Installing a Package using vcpkg
DESCRIPTION: Installs a specific package using vcpkg. Replace <package_name> with the actual name of the package you want to install.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/vcpkg@PKG5pACLfRS2ogfzBX47_.md#_snippet_4

LANGUAGE: Shell
CODE:
```
vcpkg install <package_name>
```

----------------------------------------

TITLE: Arithmetic Division Operator in C++
DESCRIPTION: Demonstrates the division operator (/) in C++. This operator divides the first operand by the second and returns the quotient. The example shows dividing two integer literals and assigning the result to an integer variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int quotient = 15 / 3; // quotient will be 5
```

----------------------------------------

TITLE: Cut Command Example in Bash
DESCRIPTION: This example demonstrates how to use the `cut` command to extract the second field from a comma-separated string. The `-d` option specifies the delimiter as a comma, and the `-f` option specifies the field number to extract.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/cut.md#_snippet_0

LANGUAGE: bash
CODE:
```
echo "one,two,three,four" | cut -d "," -f 2
```

----------------------------------------

TITLE: Registering Login Route
DESCRIPTION: Registers the login route handler with the Express application. Maps the GET request to '/login' to the `LoginHandler` function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/session-based-authentication.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const LoginHandler = require('./handlers/login.js');

app.get('/login', LoginHandler);
```

----------------------------------------

TITLE: SQL INSERT INTO (specific columns)
DESCRIPTION: The `INSERT INTO table_name (column1, column2, ...)` statement adds a new row to a table by only inserting values into the specified columns. Any unlisted columns will be set to their default values or NULL, depending on the table definition. This snippet demonstrates inserting data into specific columns of the table.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/sql/content/insert@-Hew0y53ziZK3epQnGA0O.md#_snippet_1

LANGUAGE: SQL
CODE:
```
INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);
```

----------------------------------------

TITLE: Result MongoDB Document
DESCRIPTION: This JSON snippet represents the expected result document returned from the example MongoDB query using the `$and` operator. It shows a single document with an `_id` of 3, representing an order for an orange with a `price` of 2 and a `quantity` of 5.  This document satisfies both the `price > 1` and `quantity < 10` conditions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/logical-operators/and.md#_snippet_3

LANGUAGE: json
CODE:
```
{ "_id": 3, "item": "orange", "price": 2, "quantity": 5 }
```

----------------------------------------

TITLE: Pushing Git Branch to Remote
DESCRIPTION: Pushes a local Git branch to a remote repository. Requires a remote repository name (origin) and the branch name (feature-branch).  This shares the local changes with the remote repository.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/version-control.md#_snippet_4

LANGUAGE: Git
CODE:
```
git push origin feature-branch
```

----------------------------------------

TITLE: Change Directory in Linux
DESCRIPTION: This command changes the current working directory to the specified path. The path can be absolute or relative. Requires a valid directory path as input.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/navigation-basics/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd /path/to/directory
```

----------------------------------------

TITLE: Compiling Specific TypeScript File
DESCRIPTION: This command compiles a specific TypeScript file, as specified by the file path. It utilizes npx to execute the tsc command.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/installation-and-configuration@dA8CNQOgJRDa0T7rmyS7f.md#_snippet_4

LANGUAGE: bash
CODE:
```
npx tsc ./src/index.ts
```

----------------------------------------

TITLE: Switch to Root User
DESCRIPTION: This code snippet shows how to switch the current user to the root user in a Linux environment.  It prompts for the root password to complete the switch. The dash (-) ensures that the environment is properly initialized for the root user.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-basics/super-user.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ su -
```

----------------------------------------

TITLE: Defining Terraform Output
DESCRIPTION: This code snippet demonstrates the basic syntax for defining a Terraform output value. The `name` is a unique identifier, `value` is the expression to be outputted, `description` provides context, and `sensitive` is a boolean flag for sensitive data.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/terraform/content/output-syntax@31fa8kBzCEn-uCrTSoPM4.md#_snippet_0

LANGUAGE: hcl
CODE:
```
output "name" {
  value = expression
  description = "Optional description"
  sensitive = bool
}
```

----------------------------------------

TITLE: Print Hello World in C
DESCRIPTION: This C code snippet demonstrates a simple "Hello, World!" program using the `stdio.h` library. It defines a `printHello` function that prints the message to the console and calls it from the `main` function. It illustrates procedural programming in C.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/c-vs-c@2Ag0t3LPryTF8khHLRfy-.md#_snippet_0

LANGUAGE: C
CODE:
```
#include <stdio.h>

void printHello() {
    printf("Hello, World!\n");
}

int main() {
    printHello();
    return 0;
}
```

----------------------------------------

TITLE: Case-Insensitive $regex Query in MongoDB
DESCRIPTION: This code snippet demonstrates how to perform a case-insensitive search using the `$regex` operator in MongoDB.  The `$options: 'i'` parameter makes the regex matching case-insensitive. Replace `fieldName` and `your-pattern` with the desired values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/element-operators/regex.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.find({ fieldName: { $regex: 'your-pattern', $options: 'i' } });
```

----------------------------------------

TITLE: Using Single Element from Namespace - C++
DESCRIPTION: This snippet demonstrates how to use the `using` keyword to import a single element from a namespace into the current scope. It imports the `dog` variable from the `animals` namespace, allowing it to be accessed directly without the namespace qualifier. The `main` function then prints the value of `dog` to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/namespaces@iIdC7V8sojwyEqK1xMuHn.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include <iostream>

namespace animals {
    std::string dog = "Bobby";
    std::string cat = "Lilly";
}

int main() {
    using animals::dog;
    
    std::cout << "Dog's name: " << dog << '\n';

    return 0;
}
```

----------------------------------------

TITLE: Unknown Type Usage in TypeScript
DESCRIPTION: This code snippet demonstrates the difference between using `any` and `unknown` types in TypeScript.  `any` allows any operation without type checking, while `unknown` requires a type assertion or narrowing before any operations can be performed. The code shows that you can call methods on `any` typed variables without errors, but attempting the same on `unknown` typed variables results in a compile-time error.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/unknown@O2TYbd9i_OQwQk2dKh-ly.md#_snippet_0

LANGUAGE: typescript
CODE:
```
function f1(a: any) {
  a.b(); // OK
}

function f2(a: unknown) {
  // Error: Property 'b' does not exist on type 'unknown'.
  a.b();
}
```

----------------------------------------

TITLE: Declaring Variables and Data Types in C++
DESCRIPTION: This code snippet demonstrates the declaration and initialization of variables using fundamental data types in C++. It showcases `int`, `float`, `double`, `char`, and `bool` data types.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/language-concepts@-6fwJQOfsorgHkoQGp4T3.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int age = 25;
float height = 1.7f;
double salary = 50000.0;
char grade = 'A';
bool isEmployed = true;
```

----------------------------------------

TITLE: MongoDB $slice: Limit Elements from Specific Position (JavaScript)
DESCRIPTION: Returns 3 elements of the 'tags' array, starting from the 5th element (index 4). The code assumes an existing MongoDB collection and database. It's essential to understand zero-based indexing when specifying the starting position. This is useful to get a subset from an array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/slice.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection.find({}, { tags: { $slice: [4, 3] } });
```

----------------------------------------

TITLE: Defining Memento Object
DESCRIPTION: This code defines the Memento object, `EditorMemento`, which stores the state of the editor's content. The constructor initializes the content, and `getContent()` provides access to it. This is part of the Memento design pattern.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_58

LANGUAGE: PHP
CODE:
```
class EditorMemento
{
    protected $content;

    public function __construct(string $content)
    {
        $this->content = $content;
    }

    public function getContent()
    {
        return $this->content;
    }
}
```

----------------------------------------

TITLE: Estimating Document Count (estimatedDocumentCount)
DESCRIPTION: This JavaScript code snippet demonstrates how to use the `estimatedDocumentCount()` method in MongoDB to get an approximate count of documents in a collection without applying any filters. It uses the collection's metadata for a faster count. It uses the MongoDB driver API and assumes a database connection `db` is already established.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/counting-documents.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.collection('orders').estimatedDocumentCount((err, count) => {
  console.log('Estimated number of orders: ', count);
});
```

----------------------------------------

TITLE: Cloning vcpkg Repository
DESCRIPTION: Clones the vcpkg repository from GitHub. This is the first step in installing vcpkg.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/vcpkg@PKG5pACLfRS2ogfzBX47_.md#_snippet_0

LANGUAGE: Shell
CODE:
```
git clone https://github.com/Microsoft/vcpkg.git
```

----------------------------------------

TITLE: Abstract Factory: Door Interface and Implementations in PHP
DESCRIPTION: Defines the Door interface and its concrete implementations, WoodenDoor and IronDoor, which represent different types of doors. Each door provides a getDescription method to display its type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_7

LANGUAGE: PHP
CODE:
```
interface Door
{
    public function getDescription();
}

class WoodenDoor implements Door
{
    public function getDescription()
    {
        echo 'I am a wooden door';
    }
}

class IronDoor implements Door
{
    public function getDescription()
    {
        echo 'I am an iron door';
    }
}
```

----------------------------------------

TITLE: Control Flow with JavaScript Label Statement
DESCRIPTION: This code snippet demonstrates how to use a label statement (`loop1`) in JavaScript with a `for` loop and the `continue` keyword.  The `continue loop1` statement skips the rest of the code block in the `loop1` for the current iteration when `i` is equal to 1. The output shows the values of `i` where the loop continues normally.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/labelled-statements.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
loop1: for (let i = 0; i < 5; i++) {
  if (i === 1) {
    continue loop1; // skips the rest of the code in the loop1
  }
  console.log(`i: ${i}`);
}
// Output:
// i: 0
// i: 2
// i: 3
// i: 4
```

----------------------------------------

TITLE: Update Blog Post Request Example
DESCRIPTION: This snippet illustrates the request body for updating an existing blog post using the PUT method.  It specifies the structure and data types for updating a blog post identified by its ID. The server should validate the request body.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/blogging-platform-api.md#_snippet_3

LANGUAGE: plaintext
CODE:
```
PUT /posts/1
{
  "title": "My Updated Blog Post",
  "content": "This is the updated content of my first blog post.",
  "category": "Technology",
  "tags": ["Tech", "Programming"]
}
```

----------------------------------------

TITLE: Lambda Function with No Capture, Parameters, or Return Type
DESCRIPTION: This example demonstrates a basic lambda function that takes no arguments, captures no variables from the surrounding scope, and has no explicit return type.  It simply prints "Hello, World!" to the console, showing the simplest form of a lambda function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/lambdas@xjiFBVe-VGqCqWfkPVGKf.md#_snippet_1

LANGUAGE: cpp
CODE:
```
auto printHello = []() {
    std::cout << "Hello, World!\n";
};
printHello(); // Output: Hello, World!
```

----------------------------------------

TITLE: Listing Environment Variables in Bash
DESCRIPTION: This command lists all environment variables currently defined in the shell session. It provides a comprehensive view of the environment configuration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/shell-basics/environment-variables.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ env
```

----------------------------------------

TITLE: Retrieve Image Endpoint
DESCRIPTION: This endpoint allows a user to retrieve an image. It expects the image ID in the URL. The response is expected to be the image detail.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/image-processing-service.md#_snippet_4

LANGUAGE: HTTP
CODE:
```
GET /images/:id
```

----------------------------------------

TITLE: do...while Loop in JavaScript
DESCRIPTION: This code snippet demonstrates a `do...while` loop in JavaScript. It initializes a variable `i` to 0. The loop body logs the value of `i` to the console and increments `i`. The loop continues as long as `i` is less than 3. This ensures the code block inside the loop is executed at least once, regardless of the initial condition.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/do-while-loop.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
let i = 0;

do {
  console.log(i);
  i++;
} while (i < 3);

// 0
// 1
// 2
```

----------------------------------------

TITLE: Storing Double Value
DESCRIPTION: This example demonstrates how to store a Double value in a MongoDB document. The 'value' field is assigned a floating-point number, which MongoDB automatically stores as a Double.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/double.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
    "_id" : ObjectId("5d5c361494341a5f5c529cdc"),
    "name" : "Pi",
    "value" : 3.141592653589793
}
```

----------------------------------------

TITLE: Copying files with cp command in Linux
DESCRIPTION: This command copies a file from a source location to a destination location. The `cp` command requires two arguments: the path to the original file and the path to the copied file. The copied file will be a duplicate of the original file at the specified destination.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/working-with-files/copying-renaming.md#_snippet_0

LANGUAGE: bash
CODE:
```
cp /path/to/original/file /path/to/copied/file
```

----------------------------------------

TITLE: Vulnerable SQL Query Construction (PHP)
DESCRIPTION: This code snippet demonstrates a vulnerable SQL query construction using string concatenation with user-supplied input. It's vulnerable to SQL injection because the `$unsafe_variable` is directly inserted into the query without proper sanitization or escaping. An attacker could inject malicious SQL code through the `$_POST['user_input']` parameter.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/sql-injection@801vB_JMas4ucriUmfrLg.md#_snippet_0

LANGUAGE: PHP
CODE:
```
$unsafe_variable = $_POST['user_input'];
mysqli_query($link, "INSERT INTO `table` (`column`) VALUES ('$unsafe_variable')");
```

----------------------------------------

TITLE: Creating a Sparse Single Field Index in MongoDB
DESCRIPTION: This snippet illustrates how to create a sparse single field index on the 'zipcode' field within the 'address' sub-document of the 'customers' collection in MongoDB.  The `sparse: true` option ensures that only documents containing the indexed field are considered. It uses `db.collection.createIndex()` with the field name and the `sparse` option.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/performance-optimization/index-types/single-field.md#_snippet_2

LANGUAGE: javascript
CODE:
```
db.customers.createIndex({ 'address.zipcode': 1 }, { sparse: true });
```

----------------------------------------

TITLE: Generating JWT Token using cURL
DESCRIPTION: This bash command generates a JWT by sending a POST request to the /token endpoint. The request includes a JSON payload with a predefined username and password ("admin", "password"). The server responds with a JWT that can be used for authenticating subsequent requests.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_31

LANGUAGE: bash
CODE:
```
curl --location 'localhost:8080/token' \
    --header 'Content-Type: application/json' \
    --data '{
      "username": "admin",
      "password": "password"
    }'
```

----------------------------------------

TITLE: Inserting Element Before Another with insertBefore - JavaScript
DESCRIPTION: This code snippet demonstrates how to create a new `div` element, assign an ID, and then insert it before a specific child element within an existing parent element using the `insertBefore` method. The code selects the parent element with class `roadmap-wrapper` and a child element with id `roadmap-title`. It then creates a new `div`, sets its `id`, and inserts the new `div` before the specified child within the parent.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/append-child-vs-insert-before.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const roadmapWrapper = document.querySelector('.roadmap-wrapper');

const roadmap = document.createElement('div');
roadmap.id = 'javascript-roadmap';

const roadmapTitle = document.querySelector('#roadmap-title');
roadmapWrapper.insertBefore(roadmap, roadmapTitle);
```

----------------------------------------

TITLE: C-style Casting in C++
DESCRIPTION: Demonstrates C-style type casting from an integer to a float. This method is inherited from C and involves placing the target data type in parentheses before the value to be cast.  It's generally discouraged in modern C++ due to its lack of type safety checks.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/type-casting@PiMhw1oP9-NZEa6I9u4lX.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int a = 10;
float b = (float)a;  // C-style cast from int to float
```

----------------------------------------

TITLE: Create To-Do Item Response Example
DESCRIPTION: Shows the expected JSON response after successfully creating a new to-do item. The response includes the ID, title, and description of the created item. The server should generate the ID.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "id": 1,
  "title": "Buy groceries",
  "description": "Buy milk, eggs, and bread"
}
```

----------------------------------------

TITLE: Function Forward Declaration in C++
DESCRIPTION: Declares a function before its definition, allowing the function to be called before its implementation is provided. This is necessary to define the function call stack. Function must be defined later in the code file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/forward-declaration@ZHjU60uzJTezADRhDTESG.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int add(int a, int b); // forward declaration

int main() {
    int result = add(2, 3);
    return 0;
}

int add(int a, int b) {
    return a + b;
}
```

----------------------------------------

TITLE: Thread Storage Duration Example
DESCRIPTION: Illustrates the use of thread storage duration in C++. Variables declared with the `thread_local` keyword have thread storage duration, meaning they exist only for the lifetime of the thread in which they are created. Each thread has its own copy of the variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/lifetime-of-objects@9aA_-IfQ9WmbPgwic0mFN.md#_snippet_1

LANGUAGE: cpp
CODE:
```
thread_local int my_var;   // Thread storage duration
```

----------------------------------------

TITLE: Setting User Data in Application
DESCRIPTION: This code demonstrates how the application interacts with the cache to set user data. It calls a `set_user` function, passing the user ID and the data to be stored. The application assumes that the cache handles the write-through logic.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/system-design/content/write-through@RNITLR1FUQWkRbSBXTD_z.md#_snippet_0

LANGUAGE: python
CODE:
```
set_user(12345, {"foo": "bar"})
```

----------------------------------------

TITLE: Building Project with MSBuild
DESCRIPTION: This command builds the project using MSBuild on Windows. 'MyProject.sln' is the solution file generated by CMake for Visual Studio. This command is equivalent to opening the solution in Visual Studio and building it.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/cmake@ysnXvSHGBMMozBJyXpHl5.md#_snippet_4

LANGUAGE: shell
CODE:
```
msbuild MyProject.sln
```

----------------------------------------

TITLE: Listing Installed Packages using vcpkg
DESCRIPTION: Lists all currently installed packages managed by vcpkg.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/vcpkg@PKG5pACLfRS2ogfzBX47_.md#_snippet_6

LANGUAGE: Shell
CODE:
```
vcpkg list
```

----------------------------------------

TITLE: X-Cache Header for Response
DESCRIPTION: These examples show the `X-Cache` header which indicates whether the response came from the cache (HIT) or the origin server (MISS). This header is added to the response by the caching proxy server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/caching-server.md#_snippet_2

LANGUAGE: plaintext
CODE:
```
# If the response is from the cache
X-Cache: HIT

# If the response is from the origin server
X-Cache: MISS
```

----------------------------------------

TITLE: MongoDB Range Query Using Max Key (JavaScript)
DESCRIPTION: This code snippet illustrates how to use Max Key in a MongoDB range query with the $lte operator.  It retrieves all documents from the 'my_collection' where the 'age' field is less than or equal to Max Key. Because Max Key is greater than all other BSON types, this query effectively returns all documents in the collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/max-key.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.my_collection.find({ age: { $lte: MaxKey() } });
```

----------------------------------------

TITLE: Polynomial Algorithm Example in Python
DESCRIPTION: This Python code defines a function `polynomial_algorithm` that takes an integer `n` as input. The function iterates through a nested loop, both ranging from 0 to `n-1`.  Inside the inner loop, it prints the current values of `i` and `j`. The time complexity of this algorithm is O(n^2) because the nested loop executes n * n times.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/computer-science/content/polynomial@sVFvpsAO1_ZH9aliEj9aF.md#_snippet_0

LANGUAGE: Python
CODE:
```
def polynomial_algorithm(n):
    for i in range(n):
        for j in range(n):
            print(i, j)
```

----------------------------------------

TITLE: Switch Statement with Multiple Cases - JavaScript
DESCRIPTION: This JavaScript code demonstrates a `switch` statement. The `switch` statement evaluates the `fruit` variable against multiple `case` clauses. If a match is found, the corresponding code block is executed. The `break` statement prevents fall-through to subsequent cases. Multiple cases can share the same code block. The `default` case handles situations where no other case matches.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/switch-case.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const fruit = 'Papayas';

switch (fruit) {
  case 'Oranges':
    console.log('Oranges are $0.59 a pound.');
    break;
  case 'Mangoes':
  case 'Papayas':
    console.log('Mangoes and papayas are $2.79 a pound.');
    break;
  default:
    console.log(`Sorry, we are out of ${fruit}.`);
}

// Mangoes and papayas are $2.79 a pound.
```

----------------------------------------

TITLE: Using 'break' in a JavaScript 'for' loop
DESCRIPTION: This code snippet demonstrates the usage of the 'break' statement within a 'for' loop in JavaScript. When 'i' equals 1, the 'break' statement immediately terminates the loop execution. The loop starts iterating from 0, prints the value of 'i', and then stops when 'i' is 1.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/break-and-continue.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
for (let i = 0; i < 5; i++) {
  if (i === 1) {
    break; // stops the loop
  }
  console.log(`i: ${i}`);
}

// Output:
// i: 0
```

----------------------------------------

TITLE: MongoDB Example Document
DESCRIPTION: This is an example document from a MongoDB collection called `movies`.  It contains fields such as `_id`, `title`, and `tags`. The `tags` field is an array of string values.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/all.md#_snippet_2

LANGUAGE: javascript
CODE:
```
{
  _id: 1,
  title: "The Matrix",
  tags: ["action", "sci-fi", "cyberpunk"]
}
```

----------------------------------------

TITLE: Bitwise Left Shift Operation
DESCRIPTION: Performs a bitwise left shift operation on an integer by a specified number of positions. The bits of the value are shifted to the left by the shift amount, and vacated bits are filled with zeros. Requires the C++ standard library. Input value is 5 and shift amount is 1. Output is 10.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/bitwise-operators@zE4iPSq2KsrDSByQ0sGK_.md#_snippet_4

LANGUAGE: cpp
CODE:
```
int result = 5 << 1; // result will be 10 (0000 0101 << 1 = 0000 1010)
```

----------------------------------------

TITLE: Addition in C++
DESCRIPTION: Demonstrates addition of two integers in C++. Defines two integer variables 'a' and 'b', and calculates their sum, storing the result in the 'sum' variable. The example uses the '+' operator to add the values of 'a' and 'b'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int a = 5;
int b = 6;
int sum = a + b; // sum is 11
```

----------------------------------------

TITLE: Defining Animal Implementations
DESCRIPTION: These classes implement the Animal interface (`Monkey`, `Lion`, and `Dolphin`).  Each class has a specific sound and an `accept` method that calls the appropriate visit method of the `AnimalOperation`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_66

LANGUAGE: PHP
CODE:
```
class Monkey implements Animal
{
    public function shout()
    {
        echo 'Ooh oo aa aa!';
    }

    public function accept(AnimalOperation $operation)
    {
        $operation->visitMonkey($this);
    }
}

class Lion implements Animal
{
    public function roar()
    {
        echo 'Roaaar!';
    }

    public function accept(AnimalOperation $operation)
    {
        $operation->visitLion($this);
    }
}

class Dolphin implements Animal
{
    public function speak()
    {
        echo 'Tuut tuttu tuutt!';
    }

    public function accept(AnimalOperation $operation)
    {
        $operation->visitDolphin($this);
    }
}
```

----------------------------------------

TITLE: Java for Loop Syntax
DESCRIPTION: This snippet shows the basic syntax of a `for` loop in Java. The loop consists of an initialization statement, a condition that must be true for the loop to continue, and an increment/decrement statement that updates the loop counter. The code inside the curly braces is executed repeatedly as long as the condition is met.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/java/content/loops@JHUhVEjWFXTn6-wKcKevg.md#_snippet_0

LANGUAGE: Java
CODE:
```
for(initialization;condition;increment/decrement){}
```

----------------------------------------

TITLE: Sorting Documents by Age and Name in MongoDB
DESCRIPTION: This code snippet sorts documents in a MongoDB collection named 'students' first by 'age' in descending order and then by 'name' in ascending order using the `$sort` operator within an aggregation pipeline. It uses `db.students.aggregate()` with a `$sort` stage that defines the sorting order for both 'age' (set to -1 for descending) and 'name' (set to 1 for ascending). The result is a set of documents sorted according to the specified criteria.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/sort.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.students.aggregate([{ $sort: { age: -1, name: 1 } }]);
```

----------------------------------------

TITLE: Including Source Files in C++
DESCRIPTION: This code snippet shows how to include a source file directly into another source file in C++ using the `#include` directive with double quotes `""`. While possible, this practice is generally discouraged for large projects due to potential issues with multiple definitions and increased compile times.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/library-inclusion@5mNqH_AEiLxUmgurNW1Fq.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include "mySourceFile.cpp"
```

----------------------------------------

TITLE: Modulus Operator in C++
DESCRIPTION: Calculates the remainder of an integer division. The variables 'a' and 'b' must be defined as integers before this operation. The resulting 'remainder' variable will store the remainder when 'a' is divided by 'b'. Ensure 'b' is not zero to avoid undefined behavior.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/arithmetic-operators@8aOSpZLWwZv_BEYiurhyR.md#_snippet_5

LANGUAGE: cpp
CODE:
```
int remainder = a % b;
```

----------------------------------------

TITLE: Less than (<) in C++
DESCRIPTION: Demonstrates the 'less than' relational operator in C++. This operator compares two values and returns true if the first operand is less than the second, and false otherwise.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_8

LANGUAGE: cpp
CODE:
```
3 < 5 // true
6 < 5 // false
```

----------------------------------------

TITLE: Bitwise NOT Operation
DESCRIPTION: Performs a bitwise NOT operation on a single integer. The result is a new integer where each bit is inverted (1 becomes 0, and 0 becomes 1). Requires the C++ standard library. Input integer is 5. Output is -6.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/bitwise-operators@zE4iPSq2KsrDSByQ0sGK_.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int result = ~5; // result will be -6 (1111 1010)
```

----------------------------------------

TITLE: Using Observer Pattern in PHP
DESCRIPTION: This demonstrates the usage of the Observer pattern. It creates `JobSeeker` objects, an `EmploymentAgency` object, attaches the seekers to the agency, and adds a new job, showing the notification process.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_64

LANGUAGE: PHP
CODE:
```
// Create subscribers
$johnDoe = new JobSeeker('John Doe');
$janeDoe = new JobSeeker('Jane Doe');

// Create publisher and attach subscribers
$jobPostings = new EmploymentAgency();
$jobPostings->attach($johnDoe);
$jobPostings->attach($janeDoe);

// Add a new job and see if subscribers get notified
$jobPostings->addJob(new JobPost('Software Engineer'));

// Output
// Hi John Doe! New job posted: Software Engineer
// Hi Jane Doe! New job posted: Software Engineer
```

----------------------------------------

TITLE: Compiling all TypeScript files with tsc
DESCRIPTION: Compiles all TypeScript files in the project specified in the `tsconfig.json` file. This command must be executed in the project's root directory where the `tsconfig.json` file is located. No specific dependencies are required beyond a correctly configured TypeScript project.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/tsc@Iv_t13PSVzet5VPKFtAp1.md#_snippet_0

LANGUAGE: Bash
CODE:
```
tsc
```

----------------------------------------

TITLE: Using flushSync for Synchronous Updates in React
DESCRIPTION: This code snippet demonstrates how to use the `flushSync` function from `react-dom` to synchronously flush updates in React. The `flushSync` function accepts a callback function as an argument, which contains the updates that need to be performed synchronously. It's important to use this function judiciously as excessive use can lead to performance issues.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/flush-sync.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { flushSync } from 'react-dom';

flushSync(callback);
```

----------------------------------------

TITLE: String to Integer Conversion using strconv in Go
DESCRIPTION: This snippet explains how to convert a string to an integer using the `strconv` package in Go.  The `strconv.Atoi()` function is used to perform the conversion. Error handling is crucial as the string might not be a valid integer representation.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/golang/content/type-conversion.md#_snippet_0

LANGUAGE: Go
CODE:
```
package main

import (
	"fmt"
	"strconv"
)

func main() {
	ageStr := "30"
	ageInt, err := strconv.Atoi(ageStr)

	if err != nil {
		fmt.Println("Error converting string to integer:", err)
		return
	}

	fmt.Println("Age as integer:", ageInt)
}
```

----------------------------------------

TITLE: Handling errors using promises in Node.js
DESCRIPTION: This code snippet demonstrates how to handle errors when reading a file asynchronously using promises in Node.js. The `fs.promises.readFile` method is used to read the file, and the `.then()` and `.catch()` methods are used to handle the result or any errors that occur during the process. The module 'fs' is imported from 'node:fs/promises'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/nodejs/content/error-handling.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import fs from 'node:fs/promises';

fs.readFile('file.md', 'utf-8')
  .then((data) => {
    console.log(data);
  })
  .catch((err) => {
    console.error(err);
  });
```

----------------------------------------

TITLE: Bitwise OR Operation
DESCRIPTION: Performs a bitwise OR operation between two integers. The result is a new integer where each bit is 1 if at least one of the corresponding bits in the input integers is 1. Requires the C++ standard library. Input integers are 5 and 3. Output is 7.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/bitwise-operators@zE4iPSq2KsrDSByQ0sGK_.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int result = 5 | 3; // result will be 7 (0000 0101 | 0000 0011 = 0000 0111)
```

----------------------------------------

TITLE: Subtraction in C++
DESCRIPTION: Demonstrates subtraction of two integers in C++. Defines two integer variables 'a' and 'b', and calculates their difference, storing the result in the 'diff' variable. The example uses the '-' operator to subtract 'b' from 'a'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int a = 10;
int b = 6;
int diff = a - b; // diff is 4
```

----------------------------------------

TITLE: Basic find() on 'users' collection - MongoDB
DESCRIPTION: This snippet demonstrates a basic find operation on the `users` collection. It retrieves all documents from the `users` collection.  No parameters are required, and the expected output is all documents within the specified collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/collections/find-methods.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.users.find();
```

----------------------------------------

TITLE: User Story Template
DESCRIPTION: This snippet provides a template for writing user stories, emphasizing the perspective of the user, the desired action or goal, and the reason or benefit behind it.  It provides a basic structure to capture user requirements in a simple, concise format.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/ux-design/content/user-stories@tkbkpvHlWQeOnReanR8J7.md#_snippet_0

LANGUAGE: plaintext
CODE:
```
As a [type of user], I want to [perform an action or achieve a goal] so that [reason or benefit].
```

----------------------------------------

TITLE: Querying MongoDB Array with $all Operator (JavaScript)
DESCRIPTION: This code snippet demonstrates how to use the `$all` operator to find documents where the `hobbies` array contains all of the specified values ('reading' and 'coding'). The order of items in the array does not matter.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/array.md#_snippet_3

LANGUAGE: javascript
CODE:
```
db.collection.find({ hobbies: { $all: ['reading', 'coding'] } });
```

----------------------------------------

TITLE: Staging Git Changes
DESCRIPTION: Stages all modified and new files in the current directory for commit.  The `git add .` command prepares the changes to be included in the next commit. Requires the user to be inside the Git repository.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/version-control.md#_snippet_2

LANGUAGE: Git
CODE:
```
git add .
```

----------------------------------------

TITLE: Split File by Lines
DESCRIPTION: This command splits the 'bigfile.txt' file into smaller files, each containing 500 lines. The `-l` option specifies the number of lines per output file. This is useful for breaking down large files into more manageable segments.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/split.md#_snippet_1

LANGUAGE: bash
CODE:
```
split -l 500 bigfile.txt
```

----------------------------------------

TITLE: AND Operator Example in C++
DESCRIPTION: Demonstrates the use of the AND operator (&&) in C++. The code checks if both variables `a` and `b` are greater than 0.  If both conditions are true, it prints a message to the console. Requires the iostream library for output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/logical-operators@Y9gq8WkDA_XGe68JkY2UZ.md#_snippet_0

LANGUAGE: cpp
CODE:
```
int a = 5, b = 10;
if (a > 0 && b > 0) {
    std::cout << "Both values are positive.\n";
}
```

----------------------------------------

TITLE: Analyzing Code with PHPStan
DESCRIPTION: This snippet shows how to analyze your PHP source code using PHPStan. It executes the `phpstan analyse` command from the `vendor/bin` directory, specifying the `src` directory as the code to be analyzed. PHPStan will then statically analyze the code in the `src` directory and report any potential errors or issues.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/phpstan@12k71gNfwAcT9K5aLWgbZ.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ vendor/bin/phpstan analyse src
```

----------------------------------------

TITLE: Printing a variable's value with echo in PHP
DESCRIPTION: This snippet shows how to output the value of a variable using the `echo` statement in PHP.  While the document mentions this for variable output, it contrasts it with `print`, showing `echo` is suitable in this case.  It assumes that `$variable` has already been defined.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/print@NQUmO90sqe7fnzod3Ia8H.md#_snippet_1

LANGUAGE: PHP
CODE:
```
echo $variable;
```

----------------------------------------

TITLE: Compiling a specific TypeScript file with tsc
DESCRIPTION: Compiles a single, specific TypeScript file into a JavaScript file.  The `index.ts` file must exist in the current working directory or a relative path must be provided.  Requires the TypeScript compiler to be installed and available in the system's PATH.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/tsc@Iv_t13PSVzet5VPKFtAp1.md#_snippet_1

LANGUAGE: Bash
CODE:
```
tsc index.ts
```

----------------------------------------

TITLE: Declaring variables in JavaScript
DESCRIPTION: This code snippet demonstrates how to declare and reassign variables in JavaScript, highlighting its dynamically typed nature. The 'let' keyword is used to declare a variable, and the type of the variable can change during runtime. This flexibility allows for faster coding but requires careful attention to avoid runtime errors.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/java-vs-javascript.md#_snippet_1

LANGUAGE: javascript
CODE:
```
let number = 5;
number = 'Sign up on roadmap'; // The number variable can be casually reassigned to a string
```

----------------------------------------

TITLE: Comparison Less Than Operator in C++
DESCRIPTION: Demonstrates the less than operator (<) in C++. This operator checks if the first operand is less than the second. It returns true if it is, and false otherwise. The example shows comparing two integer literals and assigning the boolean result to a boolean variable.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_7

LANGUAGE: cpp
CODE:
```
bool isLess = (5 < 3); // isLess will be false
```

----------------------------------------

TITLE: Using If-Else and For Loop in C++
DESCRIPTION: This code snippet illustrates the use of `if-else` conditional statements and `for` loop constructs in C++. The `if-else` statement checks eligibility to vote based on age, while the `for` loop prints "Hello World!" five times. It depends on the iostream library for console output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/language-concepts@-6fwJQOfsorgHkoQGp4T3.md#_snippet_1

LANGUAGE: cpp
CODE:
```
// If-else statement
if (age > 18) {
    std::cout << "You are eligible to vote.";
} else {
    std::cout << "You are not eligible to vote.";
}

// For loop
for (int i = 0; i < 5; i++) {
    std::cout << "Hello World!";
}
```

----------------------------------------

TITLE: Example Usage Success
DESCRIPTION: This example shows a correct usage of the `loggingIdentity` function. Passing an object with a `length` property satisfies the `Lengthwise` constraint, so the function call is valid.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/generic-constraints@0NXHAOUYGIwuPwlN7r_B3.md#_snippet_3

LANGUAGE: typescript
CODE:
```
loggingIdentity({ length: 10, value: 3 }); // OK
```

----------------------------------------

TITLE: Not equal to (!=) in C++
DESCRIPTION: Demonstrates the 'not equal to' relational operator in C++. This operator compares two values and returns true if they are not equal, and false otherwise.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_6

LANGUAGE: cpp
CODE:
```
5 != 2 // true
1 != 1 // false
```

----------------------------------------

TITLE: Declaring and Accessing Indexed Array in PHP
DESCRIPTION: This code snippet demonstrates how to declare an indexed array in PHP using the `array()` function and how to access its elements using their numerical index. The indices start from 0. The example creates an array of book titles and prints the first element (at index 0).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/indexed-arrays@j2S8dP3HlAOOoZdpj-7Dx.md#_snippet_0

LANGUAGE: php
CODE:
```
$books = array("The Great Gatsby", "Moby Dick", "To Kill a Mockingbird");
echo $books[0]; //Outputs "The Great Gatsby"
```

----------------------------------------

TITLE: Implementing React Strict Mode
DESCRIPTION: This snippet demonstrates how to enable React Strict Mode by wrapping the root component with the `<StrictMode>` component. It imports `StrictMode` from 'react' and `createRoot` from 'react-dom/client'. The root component is rendered inside `<StrictMode>` to activate development-only checks and warnings.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/strict-mode.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';

const root = createRoot(document.getElementById('root'));
root.render(
  <StrictMode>
    <App />
  </StrictMode>
);

```

----------------------------------------

TITLE: Iterating MongoDB Cursor
DESCRIPTION: This snippet shows how to iterate over the documents in a MongoDB cursor using the `forEach` method. The `forEach` method executes a provided function once for each document in the result set.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/useful-concepts/cursors.md#_snippet_1

LANGUAGE: javascript
CODE:
```
cursor.forEach((doc) => {
  console.log(doc);
});
```

----------------------------------------

TITLE: Starting and Stopping Xdebug Trace in PHP
DESCRIPTION: This code snippet demonstrates how to initiate and terminate an Xdebug trace within a PHP script. `xdebug_start_trace()` begins the trace, capturing function calls, variable assignments, and other relevant information.  `xdebug_stop_trace()` concludes the tracing process, saving the collected data to a file. This file can then be analyzed to understand the execution flow and identify potential issues or performance bottlenecks. Ensure Xdebug is properly installed and configured in your php.ini file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/xdebug@lFoHoMRywCWa056ii5cKQ.md#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php

xdebug_start_trace();

// Your code here...

xdebug_stop_trace();
?>
```

----------------------------------------

TITLE: MongoDB $project: Exclude Fields (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to use the `$project` operator to exclude a specific field (posts) from the output. The `_id` field is always included unless explicitly excluded with `_id: 0`. The query is executed on the `users` collection.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/project.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
db.users.aggregate([
  {
    $project: {
      posts: 0,
    },
  },
]);
```

----------------------------------------

TITLE: Initializing Float in C++
DESCRIPTION: This code shows how to declare and initialize a floating-point variable using the `float` data type in C++. `float` is used for single-precision floating-point numbers, typically occupying 4 bytes of memory. The `f` suffix is necessary to indicate that the value is a float literal.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/data-types@MwznA4qfpNlv6sqSNjPZi.md#_snippet_1

LANGUAGE: cpp
CODE:
```
float pi = 3.14f;
```

----------------------------------------

TITLE: Printing First Two Fields with Awk
DESCRIPTION: This awk command prints the first and second fields of each line in the specified file. The fields are typically separated by spaces. The command reads the input file line by line and applies the print action to each line. '$1' and '$2' represent the first and second fields, respectively.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/text-processing/awk.md#_snippet_0

LANGUAGE: awk
CODE:
```
awk '{print $1,$2}' filename
```

----------------------------------------

TITLE: Defining Generic Lambda Expression in C++
DESCRIPTION: This C++14 snippet defines a generic lambda expression named `generic_sum` that takes two arguments of any type (`auto a, auto b`) and returns their sum.  The compiler deduces the types of `a` and `b` at compile time.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standards@vvE1aUsWbF1OFcmMUHbJa.md#_snippet_2

LANGUAGE: cpp
CODE:
```
auto generic_sum = [](auto a, auto b) { return a + b; };
```

----------------------------------------

TITLE: Sample Documents in 'students' Collection (JSON)
DESCRIPTION: This JSON snippet shows sample documents present in the `students` collection. These documents contain fields like `_id`, `name`, `age`, and `subjects`. These are used as input data for demonstrating the effect of the `$project` operator.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/mongodb-aggregation/common-operators/project.md#_snippet_1

LANGUAGE: json
CODE:
```
[
  { "_id": 1, "name": "John Doe", "age": 20, "subjects": ["Math", "Physics"] },
  {
    "_id": 2,
    "name": "Jane Smith",
    "age": 23,
    "subjects": ["Chemistry", "Biology"]
  }
]
```

----------------------------------------

TITLE: Unauthorized Response Example
DESCRIPTION: Demonstrates the JSON response when a user is not authorized to access a resource. The server should return a 401 status code along with this message when the token is missing or invalid in the Authorization header.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/todo-list-api.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "message": "Unauthorized"
}
```

----------------------------------------

TITLE: Static Cast Syntax
DESCRIPTION: This shows the general syntax of the C++ `static_cast` operator. It takes the new type to convert to as a template parameter and the expression to convert as an argument.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/static_cast@_XB2Imyf23-6AOeoNLhYQ.md#_snippet_0

LANGUAGE: cpp
CODE:
```
static_cast<new_type>(expression)
```

----------------------------------------

TITLE: Clearing an Interval using clearInterval JavaScript
DESCRIPTION: This snippet shows how to use the `clearInterval` function in JavaScript to stop an interval that was previously set using `setInterval`. The function takes the interval ID returned by `setInterval` as an argument. Calling `clearInterval` with the interval ID stops the execution of the callback function associated with that interval.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/set-interval.md#_snippet_1

LANGUAGE: js
CODE:
```
clearInterval(intervalId);
```

----------------------------------------

TITLE: Connecting to Server via SSH Key
DESCRIPTION: This command is used to connect to a remote server via SSH using a specified private key file. The `-i` option specifies the path to the private key, and `user@server-ip` specifies the username and IP address of the server. It requires that SSH is installed on the local machine and the server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/ssh-remote-server-setup.md#_snippet_0

LANGUAGE: bash
CODE:
```
ssh -i <path-to-private-key> user@server-ip
```

----------------------------------------

TITLE: Null Pointer Dereference in C++
DESCRIPTION: This code demonstrates undefined behavior due to dereferencing a null pointer. The pointer `ptr` is initialized to `nullptr`, and then the code attempts to access the value pointed to by `ptr` using `*ptr`. Dereferencing a null pointer leads to unpredictable results and potential program crashes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/undefined-behavior-ub@IDOlquv6jlfecwQoBwkGZ.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int *ptr = nullptr;
int val = *ptr; // Undefined behavior since ptr is a null pointer
```

----------------------------------------

TITLE: Inserting MinKey Value in MongoDB
DESCRIPTION: This code snippet demonstrates how to insert a document into a MongoDB collection with a field set to the MinKey data type. It utilizes the 'bson' library to create an instance of MinKey and then inserts a document with the specified field set to this minimum value.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/min-key.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Import the MinKey class from the BSON module
const { MinKey } = require('bson');

// Create an instance of the MinKey class
const minValue = new MinKey();

// Insert a document with a field `priority` having the MinKey value
db.myCollection.insertOne({ name: 'example', priority: minValue });
```

----------------------------------------

TITLE: Guaranteed Execution with Do-While Loop in C++
DESCRIPTION: This code demonstrates the use of a `do-while` loop in C++. Unlike a `while` loop, the code block inside a `do-while` loop is executed at least once, regardless of the initial condition. The loop continues as long as the condition `i < 5` is true. The current iteration number is printed, and `i` is incremented in each iteration.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/for--while--do-while-loops@_IP_e1K9LhNHilYTDh7L5.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#include <iostream>

int main() {
    int i = 0;
    do {
        std::cout << "Iteration: " << i << '\n';
        i++;
    } while (i < 5);
    return 0;
}
```

----------------------------------------

TITLE: Multiplication in C++
DESCRIPTION: Demonstrates multiplication of two integers in C++. Defines two integer variables 'a' and 'b', and calculates their product, storing the result in the 'product' variable. The example uses the '*' operator to multiply the values of 'a' and 'b'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/basic-operations@kl2JI_Wl47c5r8SYzxvCq.md#_snippet_2

LANGUAGE: cpp
CODE:
```
int a = 3;
int b = 4;
int product = a * b; // product is 12
```

----------------------------------------

TITLE: Declaring a Rust array
DESCRIPTION: This code snippet demonstrates how to declare an array in Rust, specifying the data type and size at compile time. The array is initialized with a set of elements of the specified type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/data-structures/array.md#_snippet_0

LANGUAGE: Rust
CODE:
```
let array_name: [type; size] = [elements];
```

----------------------------------------

TITLE: Outputting String using echo in PHP
DESCRIPTION: This PHP code snippet demonstrates how to use the 'echo' language construct to output a simple string to the browser. 'echo' does not require parentheses unless needed for clarity. It's a core language construct, so no external libraries are needed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/echo@2ykzBBdYhWuM-neGf0AWP.md#_snippet_0

LANGUAGE: php
CODE:
```
echo "Hello, world!";
```

----------------------------------------

TITLE: Using 'continue' in a JavaScript 'for' loop
DESCRIPTION: This code snippet demonstrates the usage of the 'continue' statement within a 'for' loop in JavaScript. When 'i' equals 1, the 'continue' statement skips the rest of the current iteration, preventing `console.log` from executing, and proceeds to the next iteration. The loop iterates from 0 to 4, printing the value of 'i' except when it's 1.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/break-and-continue.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
for (let i = 0; i < 5; i++) {
  if (i === 1) {
    continue; // skips the rest of the code in the loop
  }
  console.log(`i: ${i}`);
}

// Output:
// i: 0
// i: 2
// i: 3
// i: 4
```

----------------------------------------

TITLE: Restore with Authentication (Bash)
DESCRIPTION: This command restores a database dump to a MongoDB instance that requires authentication. The `--username` and `--password` options provide the necessary credentials for accessing the MongoDB instance. Ensure the user has appropriate privileges.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/backup-recovery/mongorestore.md#_snippet_3

LANGUAGE: bash
CODE:
```
mongorestore --username=myUser --password=myPassword /path/to/your/dump/folder
```

----------------------------------------

TITLE: Demangling C++ Name with c++filt
DESCRIPTION: Uses the `c++filt` utility to demangle a C++ mangled name (`_Z3addii`) back to its original form (`add(int, int)`). This tool is helpful for debugging and understanding symbol tables. It is included in GCC and Clang toolchains.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/name-mangling@Lt7ss59KZw9Jwqj234jm2.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ echo "_Z3addii" | c++filt
add(int, int)
```

----------------------------------------

TITLE: C++ Function Definition
DESCRIPTION: This code demonstrates the basic structure of a C++ function definition. It includes a return type ('ReturnType'), a function name ('functionName'), a parameter list (e.g., 'ParameterType1 parameter1'), and a function body. The function body contains the code to be executed when the function is called, and 'returnValue' is the value returned by the function.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/introduction-to-language@NvODRFR0DLINB0RlPSsvt.md#_snippet_8

LANGUAGE: cpp
CODE:
```
ReturnType functionName(ParameterType1 parameter1, ParameterType2 parameter2) {
    // Function body
    // ...
    return returnValue;
}
```

----------------------------------------

TITLE: Modulo Assignment Operator in C++
DESCRIPTION: Demonstrates the modulo assignment operator (%=) in C++. This operator calculates the remainder of the left-hand operand divided by the right-hand operand and assigns the result to the left-hand operand. The example calculates the remainder when x (which is initially 7) is divided by 3 and assigns the remainder (1) back to x.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_19

LANGUAGE: cpp
CODE:
```
int x = 7;
x %= 3; // x gets the value 1 (7 % 3)
```

----------------------------------------

TITLE: Initializing an array of i32 in Rust
DESCRIPTION: This example shows how to create an array named 'numbers' of type i32 with a size of 5 and initializes it with the values 1, 2, 3, 4, and 5. The size must be known at compile time.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/data-structures/array.md#_snippet_1

LANGUAGE: Rust
CODE:
```
let numbers: [i32; 5] = [1, 2, 3, 4, 5];
```

----------------------------------------

TITLE: Install Git with Homebrew on macOS
DESCRIPTION: This command installs Git on macOS using the Homebrew package manager. Homebrew is a popular package manager for macOS, and this command assumes Homebrew is already installed. The `brew install git` command downloads and installs the latest version of Git.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/git-github/content/installing-git-locally@v7hCNbgPByi3YiLSs46BK.md#_snippet_0

LANGUAGE: bash
CODE:
```
brew install git
```

----------------------------------------

TITLE: Async attribute example
DESCRIPTION: This HTML snippet demonstrates the use of the `async` attribute in `<script>` tags. Scripts with the `async` attribute download in parallel and execute as soon as they are downloaded. Execution order is not guaranteed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/defer-vs-async.md#_snippet_1

LANGUAGE: html
CODE:
```
<script async src="script1.js"></script>
<script async src="script2.js"></script>
```

----------------------------------------

TITLE: MongoDB $project Operator Syntax (JSON)
DESCRIPTION: This JSON snippet demonstrates the general syntax for the `$project` operator in MongoDB.  It shows how to specify field names and corresponding expressions to define the output value. The expressions determine how each field's output is computed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/project.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{ $project: { field1: expression1, field2: expression2, ... } }
```

----------------------------------------

TITLE: C++ Variable Declarations
DESCRIPTION: This snippet demonstrates how to declare variables of different data types in C++. It declares an integer (int), a single-precision floating-point number (float), a double-precision floating-point number (double), a character (char), and a boolean (bool). Variable declaration specifies the type of data a variable can hold.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/introduction-to-language@NvODRFR0DLINB0RlPSsvt.md#_snippet_3

LANGUAGE: cpp
CODE:
```
int x;
float y;
double z;
char c;
bool b;
```

----------------------------------------

TITLE: Creating a MongoDB Timestamp
DESCRIPTION: This snippet demonstrates how to create a MongoDB Timestamp object in JavaScript. It uses the `Timestamp` constructor, taking the seconds since the Unix epoch and an incrementing ordinal as arguments. Requires the MongoDB driver or shell environment.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/timestamp.md#_snippet_0

LANGUAGE: javascript
CODE:
```
new Timestamp(t, i);
```

----------------------------------------

TITLE: Subtraction Operator in C++
DESCRIPTION: Subtracts one number from another and assigns the result to an integer variable 'difference'. The variables 'a' and 'b' must be defined as integers before this operation. The resulting 'difference' variable will store the difference between 'a' and 'b'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/arithmetic-operators@8aOSpZLWwZv_BEYiurhyR.md#_snippet_1

LANGUAGE: cpp
CODE:
```
int difference = a - b;
```

----------------------------------------

TITLE: SSH into Application Server (Using Config)
DESCRIPTION: This command uses the SSH configuration file to connect to the application server using the alias `app`. The configuration file provides the necessary details such as hostname, user, and private key.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/how-to-setup-a-jump-server.md#_snippet_12

LANGUAGE: bash
CODE:
```
# SSH into the application server
ssh app
```

----------------------------------------

TITLE: Adding MongoDB Spark Connector dependency using SBT
DESCRIPTION: This snippet demonstrates how to add the MongoDB Spark Connector dependency to your `build.sbt` file when using SBT as your build tool. The dependency specifies the organization, module name, and version of the connector.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/mongodb-connectors/spark.md#_snippet_0

LANGUAGE: scala
CODE:
```
libraryDependencies += "org.mongodb.spark" %% "mongo-spark-connector" % "3.0.1"
```

----------------------------------------

TITLE: Including Multiple Fields - JavaScript
DESCRIPTION: This snippet shows how to include multiple fields in a MongoDB query using the `$include` projection. Each field to be included is listed with a value of `1`, separated by commas.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/include.md#_snippet_1

LANGUAGE: javascript
CODE:
```
{ field1: 1, field2: 1, field3: 1 }
```

----------------------------------------

TITLE: Example Caching Proxy Server Start Command
DESCRIPTION: This is an example of how to start the caching proxy server, setting the port to 3000 and the origin server to `http://dummyjson.com`. The proxy will listen on port 3000 and forward any requests it receives to the specified origin server.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/caching-server.md#_snippet_1

LANGUAGE: shell
CODE:
```
caching-proxy --port 3000 --origin http://dummyjson.com
```

----------------------------------------

TITLE: Finding Document with Minimum Priority
DESCRIPTION: This code snippet demonstrates how to find a document with the lowest priority value in a MongoDB collection. It uses the sort() method with priority: 1 to sort the documents in ascending order of priority and limit(1) to retrieve only the first document, which will have the minimum priority.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/min-key.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// Find the document with the lowest priority
db.myCollection.find().sort({ priority: 1 }).limit(1);
```

----------------------------------------

TITLE: Defining and Using Literal Type
DESCRIPTION: This code snippet demonstrates how to define a literal type named `Age` with the value `42` and how to use it to enforce that a variable must have that specific value. Assigning a different value will result in a type error. This example shows the fundamental concept of literal types in TypeScript.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/literal-types@CWzGwvl6NwYCaLYSLIjqQ.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type Age = 42;

let age: Age = 42; // ok
let age: Age = 43; // error
```

----------------------------------------

TITLE: PHPUnit Test Case Example in PHP
DESCRIPTION: This PHPUnit test case demonstrates testing the push and pop functionality of a PHP array. It uses assertions to verify the expected behavior. The test extends PHPUnit\Framework\TestCase and defines a test method named testPushAndPop. It verifies the count of the array and the values pushed and popped from the array.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/phpunit@NfBKKwG2GGBPppOjoLLBg.md#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
use PHPUnit\Framework\TestCase;

class StackTest extends TestCase
{
    public function testPushAndPop()
    {
        $stack = [];
        $this->assertEquals(0, count($stack));

        array_push($stack, 'foo');
        $this->assertEquals('foo', $stack[count($stack)-1]);
        $this->assertEquals(1, count($stack));

        $this->assertEquals('foo', array_pop($stack));
        $this->assertEquals(0, count($stack));
    }
}
?>
```

----------------------------------------

TITLE: Defining a `char` variable in Rust
DESCRIPTION: This code snippet demonstrates how to define a character variable in Rust using the `char` type. The character is enclosed in single quotes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/rust/content/language-basics/data-structures/character.md#_snippet_0

LANGUAGE: Rust
CODE:
```
let x: char = 'z';
```

----------------------------------------

TITLE: Example C++ code with division by zero
DESCRIPTION: This C++ code demonstrates a division by zero error, which will be caught by the debugger. The code defines two integers, num1 and num2, and then attempts to divide num1 by num2, where num2 is zero. This will trigger an arithmetic exception during runtime. The code also includes an iostream import and prints the result of the division if no exception occurs, helping to identify the issue during debugging.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/understanding-debugger-messages@VtPb8-AJKzhTB0QbMtoU4.md#_snippet_0

LANGUAGE: cpp
CODE:
```
// test.cpp

#include <iostream>

int main() {
    int num1 = 10;
    int num2 = 0;
    int result = num1 / num2;

    std::cout << "Result: " << result << '\n';

    return 0;
}
```

----------------------------------------

TITLE: Number Declaration and Comparison in JavaScript
DESCRIPTION: This code snippet demonstrates how to declare numbers in JavaScript using different notations (integer, floating-point, hexadecimal, binary, and exponential). It then compares these different representations to show that they can be equivalent to the same numerical value. No external dependencies are needed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/javascript/content/number@GZ_SXsWmP7AsXRTc4WUMw.md#_snippet_0

LANGUAGE: javascript
CODE:
```
let num1 = 255; // integer
let num2 = 255.0; // floating-point number with no fractional part
let num3 = 0xff; // hexadecimal notation
let num4 = 0b11111111; // binary notation
let num5 = 0.255e3; // exponential notation

console.log(num1 === num2); // true
console.log(num1 === num3); // true
console.log(num1 === num4); // true
console.log(num1 === num5); // true
```

----------------------------------------

TITLE: Sample MongoDB Product Documents - JSON
DESCRIPTION: A sample set of product documents stored in a MongoDB collection. Each document contains an `_id`, `name`, and `price` field. These documents are used as the basis for demonstrating the `$lte` operator example.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/lte.md#_snippet_1

LANGUAGE: json
CODE:
```
[  { "_id": 1, "name": "Product A", "price": 10 },  { "_id": 2, "name": "Product B", "price": 15 },  { "_id": 3, "name": "Product C", "price": 20 },  { "_id": 4, "name": "Product D", "price": 25 }]
```

----------------------------------------

TITLE: Get URL Statistics - GET Request Example
DESCRIPTION: This code snippet illustrates the GET request format for retrieving statistics for a short URL.  It includes the endpoint with the short code and '/stats'.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/url-shortening-service.md#_snippet_7

LANGUAGE: plaintext
CODE:
```
GET /shorten/abc123/stats
```

----------------------------------------

TITLE: Exporting a Function in TypeScript Module
DESCRIPTION: This code snippet demonstrates how to export a function from a TypeScript module using the `export` keyword.  The `doSomething` function is exported from `myModule.ts`, making it available for use in other files. No specific dependencies are required beyond the TypeScript compiler.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/external-modules@egQWk1n3p8Pep83yIwCtI.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// myModule.ts
export function doSomething() {
  console.log('Doing something...');
}
```

----------------------------------------

TITLE: Hello, World! Program in C++
DESCRIPTION: This is the classic "Hello, World!" program in C++. It demonstrates how to include necessary headers, define the main function, output text to the console, and return a success code.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/running-your-first-program@SEq0D2Zg5WTsIDtd1hW9f.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

int main() {
  std::cout << "Hello, World!\n";
  return 0;
}
```

----------------------------------------

TITLE: C++ If-Else Statement
DESCRIPTION: This code demonstrates a basic if-else statement in C++.  The code within the 'if' block will execute if the condition evaluates to true. Otherwise, the code within the 'else' block will execute.  'condition' represents any boolean expression.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/introduction-to-language@NvODRFR0DLINB0RlPSsvt.md#_snippet_4

LANGUAGE: cpp
CODE:
```
if (condition) {
    // Code to execute if the condition is true
} else {
    // Code to execute if the condition is false
}
```

----------------------------------------

TITLE: Assignment Operator in C++
DESCRIPTION: Demonstrates the simple assignment operator (=) in C++. This operator assigns the value of the right-hand operand to the left-hand operand (variable). The example assigns the integer literal 5 to the integer variable x.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/operator-overloading@llCBeut_uc9IAe2oi4KZ9.md#_snippet_14

LANGUAGE: cpp
CODE:
```
int x = 5; // x gets the value 5
```

----------------------------------------

TITLE: Testing API Response Status Code with JavaScript
DESCRIPTION: This JavaScript snippet uses the pm.test function to create an assertion that checks if the API response status code is 200. It leverages the pm.response.to.have.status() method to perform the validation.  The code will fail the test if the returned status code is not equal to 200.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/postman-testing.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
pm.test("Status is 200", () => {
  pm.response.to.have.status(200);
});
```

----------------------------------------

TITLE: Defining Generic Template C++
DESCRIPTION: This code snippet defines a generic template class `MyContainer` with a `print` method that outputs "Generic container.". This serves as the base template before specialization.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/full-template-specialization@6hTcmJwNnQstbWWzNCfTe.md#_snippet_0

LANGUAGE: cpp
CODE:
```
// Generic template
template <typename T>
class MyContainer {
public:
    void print() {
        std::cout << "Generic container.\n";
    }
};
```

----------------------------------------

TITLE: Creating a Symfony Project with Composer
DESCRIPTION: This shell command uses Composer to create a new Symfony project. It downloads and installs the Symfony website skeleton into a specified directory. The command requires Composer to be installed and accessible in the system's PATH.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/symfony@57VSMVePOr9qUD5x_LNdf.md#_snippet_0

LANGUAGE: shell
CODE:
```
composer create-project symfony/website-skeleton myproject
```

----------------------------------------

TITLE: Loading a Package with Spack (Bash)
DESCRIPTION: This command loads a specified package into the current environment using Spack. Replace `<package-name>` with the actual name of the package you wish to load (e.g., `hdf5`). Loading a package makes its executables and libraries available for use. The package must be installed before it can be loaded.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/spack@3ehBc2sKVlPj7dn4RVZCH.md#_snippet_3

LANGUAGE: bash
CODE:
```
spack load <package-name>
```

----------------------------------------

TITLE: Analyzing uptime command output
DESCRIPTION: This snippet shows an example output from the `uptime` command and explains how to interpret the different parts of the output, including uptime and load average values. The load average values represent the average system load over the last 1, 5, and 15 minutes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/server-review/uptime-load.md#_snippet_1

LANGUAGE: text
CODE:
```
10:58:35 up 2 days, 20 min,  1 user,  load average: 0.00, 0.01, 0.05
```

----------------------------------------

TITLE: Abstract Factory: Door Fitting Expert Interface and Implementations in PHP
DESCRIPTION: Defines the DoorFittingExpert interface and its concrete implementations, Welder and Carpenter, representing experts for fitting different types of doors. Each expert provides a getDescription method to indicate their expertise.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/design-patterns-for-humans.md#_snippet_8

LANGUAGE: PHP
CODE:
```
interface DoorFittingExpert
{
    public function getDescription();
}

class Welder implements DoorFittingExpert
{
    public function getDescription()
    {
        echo 'I can only fit iron doors';
    }
}

class Carpenter implements DoorFittingExpert
{
    public function getDescription()
    {
        echo 'I can only fit wooden doors';
    }
}
```

----------------------------------------

TITLE: Initializing std::list in C++
DESCRIPTION: This code snippet demonstrates how to initialize a `std::list` in C++. `std::list` is a sequence container that implements a doubly-linked list. It requires including the `<list>` header file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/standard-library--stl@DHdNBP7_ixjr6h-dIQ7g6.md#_snippet_1

LANGUAGE: cpp
CODE:
```
std::list<int> my_list;
```

----------------------------------------

TITLE: Generated Output based on Examples
DESCRIPTION: This snippet shows the expected output generated by a language model after being prompted with a series of examples. The model correctly classifies the new inputs as either "Fruit" or "Vegetable", demonstrating its ability to learn from and apply the provided pattern. This illustrates the effectiveness of example-based prompting in guiding model behavior.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/good-prompts/give-examples.md#_snippet_1

LANGUAGE: None
CODE:
```
- Turnip: Vegetable
- Orange: Fruit
- Pear: Fruit
- Potato: Vegetable
- Cucumber: Vegetable
- Celery: Vegetable
- Broccoli: Vegetable
- Cauliflower: Vegetable
```

----------------------------------------

TITLE: Using const_cast to Modify a Const Variable in C++
DESCRIPTION: This code demonstrates how to use `const_cast` to remove the constness of a variable in C++. It creates a `const int`, uses `const_cast` to get a non-const pointer to it, and then modifies the value through the non-const pointer. The example includes printing the original and modified values and an assertion to verify the pointer's address. Note that this operation might lead to undefined behavior.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/const_cast@5g22glc97siQOcTkHbwan.md#_snippet_0

LANGUAGE: C++
CODE:
```
#include <cassert>
#include <iostream>

void modifyVariable(int* ptr) {
    *ptr = 42;
}

int main() {
    const int original_value = 10;
    int* non_const_value_ptr = const_cast<int*>(&original_value);
    std::cout << "Original value: " << original_value << '\n';

    modifyVariable(non_const_value_ptr);
    std::cout << "Modified value: " << *non_const_value_ptr << ", original_value: " << original_value << '\n';

    assert(non_const_value_ptr == &original_value);

    return 0;
}

```

----------------------------------------

TITLE: Creating Int32 and Int64 Instances in Node.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to create Int32 and Int64 instances using the Node.js MongoDB driver. It imports the `Int32` and `Long` classes from the `mongodb` package and creates instances of each type with example values. This requires the `mongodb` package to be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/int.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { Int32, Long } = require('mongodb');

const myInt32 = new Int32(42); // Creates a 32-bit integer
const myInt64 = new Long(9007199254740991); // Creates a 64-bit integer
```

----------------------------------------

TITLE: Running Psalm for PHP Static Analysis
DESCRIPTION: This command executes Psalm against a specified PHP file. It's assumed that Psalm has been installed via Composer and is located in the `vendor/bin` directory. The command will analyze `example.php` and report any potential issues.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/php/content/psalm@T1XD93j6Lkpl88JSmys9b.md#_snippet_0

LANGUAGE: bash
CODE:
```
vendor/bin/psalm example.php
```

----------------------------------------

TITLE: Callback Hell Example in JavaScript
DESCRIPTION: This code snippet illustrates the "Callback Hell" or "Pyramid of Doom" pattern in JavaScript. Multiple nested asynchronous function calls create a deeply indented and difficult-to-read structure. Each `callAsyncN` function is assumed to perform an asynchronous operation, and subsequent operations depend on the completion of the previous one. This pattern makes error handling and maintenance challenging.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/callback-hell.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
callAsync1(function () {
  callAsync2(function () {
    callAsync3(function () {
      callAsync4(function () {
        callAsync5(function () {
          // ...
        });
      });
    });
  });
});
```

----------------------------------------

TITLE: Resolving Diamond Inheritance with Virtual Inheritance in C++
DESCRIPTION: This C++ code demonstrates how to resolve diamond inheritance using virtual inheritance. `Derived1` and `Derived2` inherit virtually from `Base`, ensuring only one `Base` instance exists in `Derived3`. This eliminates ambiguity when calling `Base` class members from `Derived3`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/diamond-inheritance@ofwdZm05AUqCIWmfgGHk8.md#_snippet_0

LANGUAGE: cpp
CODE:
```
#include <iostream>

class Base {
public:
    void print() {
        std::cout << "Base class\n";
    }
};

class Derived1 : virtual public Base {
public:
    void derived1Print() {
        std::cout << "Derived1 class\n";
    }
};

class Derived2 : virtual public Base {
public:
    void derived2Print() {
        std::cout << "Derived2 class\n";
    }
};

class Derived3 : public Derived1, public Derived2 {
public:
    void derived3Print() {
        std::cout << "Derived3 class\n";
    }
};

int main() {
    Derived3 d3;
    d3.print(); // Now, there is no ambiguity in calling the base class function
    d3.derived1Print();
    d3.derived2Print();
    d3.derived3Print();

    return 0;
}
```

----------------------------------------

TITLE: Inline CSS Styling in HTML
DESCRIPTION: Demonstrates how to apply CSS styles directly to an HTML element using the `style` attribute. This approach is useful for applying unique styles to individual elements. However, it is not recommended for large-scale styling due to maintainability issues.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/include-css.md#_snippet_0

LANGUAGE: html
CODE:
```
<p style="color: red;">Hello</p>
```

----------------------------------------

TITLE: Dog Class Implementing Animal
DESCRIPTION: Defines the `Dog` class, which extends the `Animal` class and overrides the `makeSound()` method to return "Woof". This represents a concrete animal type.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/android/content/factory-pattern@DeOxj6RzQBYfEWV-M1Ybm.md#_snippet_1

LANGUAGE: Java
CODE:
```
public class Dog extends Animal {
    @override
    public String makeSound() {
        return "Woof";
    }
}
```

----------------------------------------

TITLE: Using Forward Iterator in C++
DESCRIPTION: This code demonstrates the use of a forward iterator with a std::forward_list. It iterates through the list and prints each element to the console. The iterator moves only in the forward direction and can make multiple passes over the elements.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/iterators@Ebu8gzbyyXEeJryeE0SpG.md#_snippet_2

LANGUAGE: cpp
CODE:
```
std::forward_list<int> nums = {1, 2, 3, 4};
std::forward_list<int>::iterator itr = nums.begin();
while (itr != nums.end()) {
    std::cout << *itr << " ";
    ++itr;
}
```

----------------------------------------

TITLE: Configuring Symbol Path in WinDbg
DESCRIPTION: These commands configure the symbol path in WinDbg to enable debugging with symbol files. The `.sympath` command sets the path where WinDbg will look for symbol files, including a local cache directory (`C:\symbols`) and the Microsoft symbol server. `!sym noisy` enables verbose output for symbol loading. `.reload /f` forces WinDbg to reload symbols for the current target.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/windbg@y8VCbGDUco9bzGRfIBD8R.md#_snippet_0

LANGUAGE: WinDbg
CODE:
```
!sym noisy
.sympath SRV*C:\symbols*http://msdl.microsoft.com/download/symbols
.reload /f
```

----------------------------------------

TITLE: Understanding references in Javascript
DESCRIPTION: This snippet describes that references are not copied in JavaScript, a variable will contain a reference to the object, and changes will be visible using other variables.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/javascript.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
No, references are not copied in JavaScript. When you assign an object to a variable, the variable will contain a reference to the object. If you assign the variable to another variable, the second variable will also contain a reference to the object. If you change the object using one of the variables, the change will be visible using the other variable.
```

----------------------------------------

TITLE: HTTP/0.9 Response Example
DESCRIPTION: A simple HTTP/0.9 response example. The server responds with the HTML content, and the connection is immediately closed after the response.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/journey-to-http2.md#_snippet_1

LANGUAGE: html
CODE:
```
(response body) (connection closed)
```

----------------------------------------

TITLE: Including iostream Header in C++
DESCRIPTION: This code snippet demonstrates how to include the `iostream` header file in C++. The `iostream` header provides input/output stream objects like `std::cout` for writing to the console.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/running-your-first-program@SEq0D2Zg5WTsIDtd1hW9f.md#_snippet_1

LANGUAGE: cpp
CODE:
```
#include <iostream>
```

----------------------------------------

TITLE: Netdata Cleanup Script (cleanup.sh)
DESCRIPTION: This script removes the Netdata agent from the system, cleaning up any installed components. It ensures a clean uninstall process and can be used to revert the system to its previous state. Make sure to use appropriate commands for uninstalling Netdata based on the installation method used.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/simple-monitoring-dashboard.md#_snippet_2

LANGUAGE: Shell
CODE:
```
#!/bin/bash
# This script cleans up the system and removes the Netdata agent.

# Add commands here to remove Netdata.
# Example:  /opt/netdata/uninstall.sh

echo "Netdata cleanup script placeholder. Add uninstallation commands here."

```

----------------------------------------

TITLE: Code Segment Example in C++
DESCRIPTION: This code snippet illustrates that the machine code for a function is stored in the code segment. The code segment is a read-only area of memory that contains the executable instructions of the program. This section prevents accidental modification of the program's instructions.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/memory-model@mSFwsTYvmg-GwG4_DEIEf.md#_snippet_3

LANGUAGE: cpp
CODE:
```
void functionExample() {
    // The machine code for this function is stored in the code segment.
}
```

----------------------------------------

TITLE: Result of the Query with $include - JavaScript
DESCRIPTION: This snippet represents the expected output from the previous MongoDB query.  It shows an array of documents, each containing only the `title` and `author` fields, as specified in the `$include` projection. The `_id` field is absent due to its explicit exclusion.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/include.md#_snippet_3

LANGUAGE: javascript
CODE:
```
[
  {
    title: 'The Catcher in the Rye',
    author: 'J.D. Salinger',
  },
  {
    title: 'To Kill a Mockingbird',
    author: 'Harper Lee',
  },
  {
    title: 'Of Mice and Men',
    author: 'John Steinbeck',
  },
];
```

----------------------------------------

TITLE: MongoDB $all Example Query
DESCRIPTION: This snippet shows an example of how to use the `$all` operator to find movies with specific tags. It queries the `movies` collection for documents where the `tags` array contains both "action" and "sci-fi".
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/array-operators/all.md#_snippet_1

LANGUAGE: javascript
CODE:
```
db.movies.find({ tags: { $all: ['action', 'sci-fi'] } });
```

----------------------------------------

TITLE: Sentiment Analysis Prompt - Determine Text Sentiment
DESCRIPTION: This prompt asks the LLM to determine the sentiment of the provided text. The text is delimited by triple backticks. The expected output is a single word indicating the sentiment (e.g., positive, negative, neutral).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/real-world/inferring.md#_snippet_0

LANGUAGE: text
CODE:
```
What is the sentiment of this text which is delimited with tripple backticks. Your output must be a single word.

"""Horrible product. They charged me twice the price and it broke after a week. I will never buy from them again."""
```

----------------------------------------

TITLE: Installing Conan using pip
DESCRIPTION: Installs the Conan package manager using pip, the Python package installer. This is the most common method for setting up Conan on a system. It requires Python and pip to be installed.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/conan@ky_UqizToTZHC_b77qFi2.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install conan
```

----------------------------------------

TITLE: Result of $gte Query in MongoDB
DESCRIPTION: This code snippet presents the expected output from the `$gte` query example. It shows the documents where the `price` is greater than or equal to 20.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/comparison-operators/gte.md#_snippet_3

LANGUAGE: javascript
CODE:
```
[  { _id: 2, product: 'B', price: 20 },  { _id: 3, product: 'C', price: 30 },  { _id: 4, product: 'D', price: 40 },  { _id: 5, product: 'E', price: 50 },];
```

----------------------------------------

TITLE: Calculating Parallel Availability
DESCRIPTION: Calculates the total availability when two components (Foo and Bar) are arranged in parallel. The overall availability is calculated as 1 - (1 - Availability (Foo)) * (1 - Availability (Bar)).
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/system-design/content/availability-in-numbers@uHdrZllrZFAnVkwIB3y5-.md#_snippet_1

LANGUAGE: N/A
CODE:
```
Availability (Total) = 1 - (1 - Availability (Foo)) * (1 - Availability (Bar))
```

----------------------------------------

TITLE: Auto Type Deduction Error - C++
DESCRIPTION: This snippet demonstrates the compile-time error that occurs when `auto` is used without an initializer. The compiler cannot deduce the type of the variable if no initial value is provided.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/auto-automatic-type-deduction@CG01PTVgHtjfKvsJkJLGl.md#_snippet_1

LANGUAGE: C++
CODE:
```
auto myVar; // Error: Cannot deduce the type without initializer
```

----------------------------------------

TITLE: Example: Installing hdf5 with Spack (Bash)
DESCRIPTION: This command installs the `hdf5` package using Spack. Spack will automatically resolve and install the package's dependencies.  It is a concrete example of the `spack install` command.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/spack@3ehBc2sKVlPj7dn4RVZCH.md#_snippet_2

LANGUAGE: bash
CODE:
```
spack install hdf5
```

----------------------------------------

TITLE: Clearing the Caching Proxy Server Cache via CLI
DESCRIPTION: This command demonstrates how to clear the cache of the caching proxy server using the command line. It invokes the `caching-proxy` with the `--clear-cache` argument, which triggers the cache clearing functionality.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/projects/caching-server.md#_snippet_3

LANGUAGE: shell
CODE:
```
caching-proxy --clear-cache
```

----------------------------------------

TITLE: GPL License Inclusion in C++
DESCRIPTION: This snippet demonstrates how to include the GPL license in a C++ project. It involves including a `COPYING` file with the full text of the license and placing a notice in the source code files. The notice includes the copyright and SPDX identifier.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/licensing@sLVs95EOeHZldoKY0L_dH.md#_snippet_1

LANGUAGE: C++
CODE:
```
/* Copyright (C) [year] [author]
 * SPDX-License-Identifier:    GPL-3.0-or-later
 */
```

----------------------------------------

TITLE: Using Parentheses with Pipes and Ternary Operator in Angular
DESCRIPTION: This code snippet demonstrates the correct way to use parentheses to ensure the ternary operator is evaluated before the pipe operator in Angular. This prevents unexpected behavior due to operator precedence.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/angular/content/pipes-precedence@nZxZnzbQg9dz-SI65UHq9.md#_snippet_0

LANGUAGE: typescript
CODE:
```
(condition ? a : b) | pipe
```

----------------------------------------

TITLE: Creating a file using touch command in Bash
DESCRIPTION: This snippet demonstrates how to create an empty file named "example.txt" using the `touch` command in a Linux environment. The `touch` command updates the access and modification times of a file. If the file does not exist, it creates an empty file.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/linux/content/working-with-files/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
touch example.txt
```

----------------------------------------

TITLE: Customer Service Inquiry Example - Direct Prompting
DESCRIPTION: This snippet showcases a customer service inquiry and instructions given to a language model for direct prompting. The model is asked to respond to the customer inquiry without any specific breakdown. The initial direct prompt failed to provide the correct answer, highlighting the need for a more structured approach like Least to Most prompting.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/prompting-techniques/least-to-most.md#_snippet_0

LANGUAGE: text
CODE:
```
CUSTOMER INQUIRY:
I just bought a T-shirt from your Arnold collection on March 1st. 
I saw that it was on discount, so bought a shirt that was originall $30, and got 40% off. 
I saw that you have a new discount for shirts at 50%. 
I'm wondering if I can return the shirt and have enough store credit to buy two of your shirts?

INSTRUCTIONS:
You are a customer service agent tasked with kindly responding to customer inquiries. 
Returns are allowed within 30 days. 
Today's date is March 29th. 
There is currently a 50% discount on all shirts. Shirt prices range from $18-$100 at your store. 
Do not make up any information about discount policies.
```

----------------------------------------

TITLE: Installing Xcode Command Line Tools on macOS
DESCRIPTION: This command installs the Xcode Command Line Tools on macOS, which includes the `clang` C++ compiler. It opens a dialog prompt that guides the user through the installation process.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/installing-c@0J_ltQEJh2g28OE2ZEYJj.md#_snippet_0

LANGUAGE: shell
CODE:
```
xcode-select --install
```

----------------------------------------

TITLE: Example: Loading hdf5 with Spack (Bash)
DESCRIPTION: This command loads the `hdf5` package into the current environment using Spack. It makes the `hdf5` executables and libraries available for use in the current shell session.  It is a concrete example of the `spack load` command.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/spack@3ehBc2sKVlPj7dn4RVZCH.md#_snippet_4

LANGUAGE: bash
CODE:
```
spack load hdf5
```

----------------------------------------

TITLE: Committing Git Changes
DESCRIPTION: Commits staged changes to the local Git repository with a descriptive message.  The `git commit -m` command records the changes with a message. The message should be short and describe the changes.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/full-stack/content/version-control.md#_snippet_3

LANGUAGE: Git
CODE:
```
git commit -m "Add feature"
```

----------------------------------------

TITLE: MongoDB $slice: Limit Elements from Beginning (JavaScript)
DESCRIPTION: Limits the number of elements returned from the beginning of the 'tags' array to 3.  This JavaScript code snippet demonstrates how to use the `$slice` operator within a MongoDB `find()` query to project only the first three elements of the `tags` array field. It requires a MongoDB database and collection to be already set up.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/slice.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.find({}, { tags: { $slice: 3 } });
```

----------------------------------------

TITLE: Extracting Union Members with TypeScript Extract Utility
DESCRIPTION: This code snippet demonstrates the use of the `Extract` utility type in TypeScript. It extracts the union members from the first type (`'a' | 'b' | 'c'`) that are assignable to the second type (`'a' | 'f'`). The resulting type `T0` will be `'a'`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/typescript/content/extract@IIAbAzXiVQm1JEi2MTMZN.md#_snippet_0

LANGUAGE: typescript
CODE:
```
type T0 = Extract<'a' | 'b' | 'c', 'a' | 'f'>;
//    ^ = type T0 = "a"
```

----------------------------------------

TITLE: Defining Roadmap Class in JavaScript
DESCRIPTION: Defines a Roadmap class with a constructor to initialize name, description, and slug properties. It also includes a getRoadmapUrl method that logs the roadmap URL to the console. This class serves as the parent class for inheritance.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/content/inheritance.md#_snippet_0

LANGUAGE: javascript
CODE:
```
class Roadmap {
  constructor(name, description, slug) {
    this.name = name;
    this.description = description;
    this.slug = slug;
  }

  getRoadmapUrl() {
    console.log(`https://roadmap.sh/${this.slug}`);
  }
}
```

----------------------------------------

TITLE: Declaring Arrays and Vectors in C++
DESCRIPTION: This code demonstrates how to declare and initialize an array and a vector in C++.  It shows an integer array `marks` initialized with values, and a `std::vector` named `scores` also initialized with integers. Requires the vector library for vectors and iostream for standard output.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/cpp/content/language-concepts@-6fwJQOfsorgHkoQGp4T3.md#_snippet_3

LANGUAGE: cpp
CODE:
```
// Array
int marks[] = {90, 80, 95, 85};

// Vector
std::vector<int> scores = {10, 20, 30, 40};
```

----------------------------------------

TITLE: Running JavaScript Outside the Browser
DESCRIPTION: This snippet describes how to run JavaScript code outside of a web browser. It mentions several JavaScript runtime environments such as Node.js, Deno and Bun.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/javascript/javascript.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
Yes, it is possible to run JavaScript outside the browser. There are several ways to run JavaScript outside the browser. You can use **Node.js**, **Deno**, **Bun**, or any other JavaScript runtime environment.
```

----------------------------------------

TITLE: Basic MongoDB Spark Integration Example in Scala
DESCRIPTION: This code snippet demonstrates a basic integration of MongoDB with Apache Spark using the MongoDB Spark Connector in Scala. It initializes a SparkSession, loads data from MongoDB into a DataFrame, performs placeholder operations, saves the DataFrame back to MongoDB, and stops the Spark session. Replace `mongodb://username:password@host/database.collection` with your actual MongoDB connection URI.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/developer-tools/mongodb-connectors/spark.md#_snippet_2

LANGUAGE: scala
CODE:
```
import org.apache.spark.sql.SparkSession
import com.mongodb.spark.MongoSpark

object MongoDBwithSpark {
  def main(args: Array[String]): Unit = {
    val spark = SparkSession.builder()
      .master("local")
      .appName("MongoDB Integration")
      .config("spark.mongodb.input.uri", "mongodb://username:password@host/database.collection")
      .config("spark.mongodb.output.uri", "mongodb://username:password@host/database.collection")
      .getOrCreate()

    // Load data from MongoDB into a DataFrame
    val df = MongoSpark.load(spark)

    // Perform operations on DataFrame
    // ...

    // Write the DataFrame back to MongoDB
    MongoSpark.save(df.write.mode("overwrite"))

    // Stop the Spark session
    spark.stop()
  }
}
```

----------------------------------------

TITLE: Adding Projects Issue Format
DESCRIPTION: This code block shows the format that should be used when creating an issue to add a project to the roadmap. It details the required sections and the type of information that should be provided in each section.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/contributing.md#_snippet_0

LANGUAGE: markdown
CODE:
```
## What is this project about?

(Add an introduction to the project.)

## Skills this Project Covers

(Comma separated list of skills, e.g. Programming Knowledge, Database, etc.)

## Requirements

( Detailed list of requirements, i.e. input, output, hints to help build this, etc.)
```

----------------------------------------

TITLE: Deleting a Book via Curl
DESCRIPTION: This bash command uses `curl` to send a DELETE request to the `/book/{id}` endpoint to delete a book. It specifies the book ID to be deleted as part of the URL.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/guides/golang-rest-api.md#_snippet_17

LANGUAGE: bash
CODE:
```
curl --location --request DELETE 'localhost:8080/book/3'
```

----------------------------------------

TITLE: Using $elemMatch Projection Operator in MongoDB
DESCRIPTION: This code snippet demonstrates how to use the $elemMatch operator in a MongoDB query. The $elemMatch operator projects the first element in an array that matches the specified condition. It is useful when dealing with large arrays and you need the first element matching a condition. The example retrieves the `name` and the first matching `grades` element greater than or equal to 80.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/query-operators/projection-operators/index.md#_snippet_0

LANGUAGE: javascript
CODE:
```
db.collection.find({ grades: { $gte: 80 } }, { name: 1, 'grades.$': 1 });
```

----------------------------------------

TITLE: Forwarding Ref to DOM Node in React
DESCRIPTION: This snippet demonstrates how to forward the received `ref` to a specific DOM node within the component. The `ref` attribute is added to the `<input>` element, allowing the parent component to access it. The component uses `forwardRef` to receive the `ref`.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/question-groups/react/content/ref-forwarding.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { forwardRef } from 'react';

const MyInput = forwardRef(function MyInput(props, ref) {
  const { label, ...otherProps } = props;
  return (
    <label>
      {label}
      <input {...otherProps} ref={ref} />
    </label>
  );
});
```

----------------------------------------

TITLE: Extract Nouns and Translate Directly to French (Incorrect)
DESCRIPTION: This snippet demonstrates a direct approach to extracting nouns from an English story and translating them to French. It aims to get a JSON object containing the count of nouns and an array of their French translations. However, the output shows that the nouns are not translated.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/good-prompts/include-steps.md#_snippet_0

LANGUAGE: Text
CODE:
```
Give me a JSON object with following keys: `nouns_count` number of nouns appeared in story and `nouns_french` which is an array of nouns in french. The story is delimited by """.

"""In a charming village, siblings Jack and Jill set out on a quest to fetch water from a hilltop well. As they climbed, singing joyfully, misfortune struck—Jack tripped on a stone and tumbled down the hill, with Jill following suit. Though slightly battered, the pair returned home to comforting embraces. Despite the mishap, their adventurous spirits remained undimmed, and they continued exploring with delight."""
```

----------------------------------------

TITLE: Storing a Symbol in MongoDB (Deprecated)
DESCRIPTION: This code snippet demonstrates how a `Symbol` was stored in MongoDB. Note that the `Symbol` datatype is deprecated and not recommended for use in new projects. It's recommended to use the String datatype instead. This example is purely for understanding legacy data structures.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/mongodb/content/datatypes/symbol.md#_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "_id" : ObjectId("6190e2d973f6e571b47537a0"),
  "title" : Symbol("Hello World"),
  "description" : "A simple example of the Symbol datatype"
}
```

----------------------------------------

TITLE: Extract Nouns and Translate Directly to French (Incorrect Output)
DESCRIPTION: This is the output of the direct approach where the nouns are not in French.
SOURCE: https://github.com/kamranahmedse/developer-roadmap/blob/master/src/data/roadmaps/prompt-engineering/content/prompts/good-prompts/include-steps.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "nouns_count": 10,
  "nouns_french": [
    "village",
    "siblings",
    "Jack",
    "Jill",
    "quest",
    "water",
    "hilltop",
    "well",
    "stone",
    "hill"
  ]
}
```