TITLE: Calling a JavaScript Function
DESCRIPTION: This snippet shows how to invoke or call a previously defined JavaScript function named `displayGreeting` by using its name followed by parentheses `()`.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
// calling our function
displayGreeting();
```

----------------------------------------

TITLE: Implementing ARIA Roles and Attributes for Custom Widgets (HTML)
DESCRIPTION: Illustrates the use of ARIA roles and attributes to define the structure and state of non-semantic HTML elements that represent complex widgets, such as a tree view. It shows how to use `role="tree"`, `aria-labelledby`, `role="treeitem"`, `aria-expanded`, and `tabindex` to make the element understandable and navigable for assistive technologies.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/3-accessibility/README.md#_snippet_1

LANGUAGE: html
CODE:
```
<h2 id="tree-label">File Viewer</h2>
<div role="tree" aria-labelledby="tree-label">
  <div role="treeitem" aria-expanded="false" tabindex="0">Uploads</div>
</div>
```

----------------------------------------

TITLE: Push Local Commits to Remote in Git with Bash
DESCRIPTION: Run `git push -u origin main` to send the commits from your local 'main' branch to the 'origin' remote repository. The `-u` flag sets the upstream branch, allowing subsequent pushes/pulls without specifying origin and branch.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_12

LANGUAGE: bash
CODE:
```
git push -u origin main
```

----------------------------------------

TITLE: Cloning a Repository with Git (Shell)
DESCRIPTION: Copies the contents of a remote GitHub repository to your local machine using the git clone command. Replace 'https://github.com/ProjectURL' with the actual repository URL.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_22

LANGUAGE: Shell
CODE:
```
git clone https://github.com/ProjectURL
```

----------------------------------------

TITLE: Installing Project Dependencies with NPM
DESCRIPTION: This command-line snippet uses the Node Package Manager (npm) to install the project's dependencies as listed in the `package.json` file. This is necessary to set up the development environment, including tools like webpack which is used for bundling the extension's code.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/1-about-browsers/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
npm install
```

----------------------------------------

TITLE: Install Dependencies with npm
DESCRIPTION: Installs all required packages listed in the project's package.json file. This command fetches and installs the necessary libraries and tools for the project to run.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/start/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
npm install
```

----------------------------------------

TITLE: Updating Local Branch with Git Pull (Shell)
DESCRIPTION: Updates the current local working branch with all new commits from its corresponding remote branch on GitHub.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_21

LANGUAGE: Shell
CODE:
```
git pull
```

----------------------------------------

TITLE: Creating a Git Branch (Bash)
DESCRIPTION: Creates a new local branch with the specified name. This command only creates the branch; it does not automatically switch the working directory to the new branch.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_14

LANGUAGE: Bash
CODE:
```
git branch [branch-name]
```

----------------------------------------

TITLE: Unstage All Changes in Git with Bash
DESCRIPTION: Run `git reset` to unstage all currently staged changes. This moves the changes back from the staging area to the working directory, effectively undoing the `git add` command.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
git reset
```

----------------------------------------

TITLE: Starting Project - Bash
DESCRIPTION: Navigates into the 'your-work' directory and starts the project using the 'npm start' command, typically launching a local development server.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/5-keeping-score/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd your-work
npm start
```

----------------------------------------

TITLE: Stage Specific Files/Folders in Git with Bash
DESCRIPTION: Use `git add [file or folder name]` to add only a specific file or folder to the staging area. This allows for selective committing of changes, rather than staging everything at once.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
git add [file or folder name]
```

----------------------------------------

TITLE: Assigning a Value to a Variable in JavaScript
DESCRIPTION: Shows how to assign a value to a previously declared variable using the assignment operator (`=`). This sets the variable's initial value.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_1

LANGUAGE: javascript
CODE:
```
myVariable = 123;
```

----------------------------------------

TITLE: Checking Laptop Affordability with OR Operator (JavaScript)
DESCRIPTION: This snippet demonstrates using the logical OR (||) operator within an if...else statement to check if currentMoney is sufficient to buy a laptop at either the full price or a discounted price. It prints a message indicating whether the laptop can be afforded.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
let currentMoney;
let laptopPrice;
let laptopDiscountPrice = laptopPrice - laptopPrice * 0.2; //Laptop price at 20 percent off

if (currentMoney >= laptopPrice || currentMoney >= laptopDiscountPrice) {
  //Condition is true. Code in this block will run.
  console.log("Getting a new laptop!");
} else {
  //Condition is true. Code in this block will run.
  console.log("Can't afford a new laptop, yet!");
}
```

----------------------------------------

TITLE: Demonstrating JavaScript Closure Scope
DESCRIPTION: This snippet illustrates how variables declared within an outer function (like `candy` in `displayCandy`) are not accessible from outside that function's scope, even when an inner function modifies them. It highlights the concept of closure where the inner function `addCandy` can access the outer function's variables, but the variable remains local to the outer function's execution context.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/translations/README.it.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function displayCandy(){
	let candy = ['jellybeans'];
	function addCandy(candyType) {
		candy.push(candyType)
	}
	addCandy('gumdrops');
}
displayCandy();
console.log(candy)
```

----------------------------------------

TITLE: Changing a Variable's Value in JavaScript
DESCRIPTION: Explains how to update the value of an already declared and initialized variable at any point in the code using the assignment operator (`=`) and a new value.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_3

LANGUAGE: javascript
CODE:
```
myVariable = 321;
```

----------------------------------------

TITLE: Declaring Number Variable in JavaScript
DESCRIPTION: Demonstrates how to declare a variable and assign a number value to it using the `let` keyword.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_8

LANGUAGE: javascript
CODE:
```
let myVariable = 123;
```

----------------------------------------

TITLE: Changing a Variable's Value in JavaScript
DESCRIPTION: This snippet illustrates how to change the value of an already declared variable (`myVariable`) to a new value (`321`) using the assignment operator (`=`). Variables declared with `let` can be reassigned throughout the code.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
myVariable = 321;
```

----------------------------------------

TITLE: Fetching Carbon Usage Data with Axios in JavaScript
DESCRIPTION: This asynchronous function retrieves carbon intensity data for a specified region using the CO2Signal API via the `axios` library. It requires an API key for authentication and a region code. The function uses a `try/catch` block to handle potential API errors. Upon successful response, it updates various UI elements with the fetched carbon intensity and fossil fuel percentage; otherwise, it displays an error message. It depends on the `axios` library.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/2-forms-browsers-local-storage/translations/README.fr.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import axios from '../node_modules/axios';

async function displayCarbonUsage(apiKey, region) {
	try {
		await axios
			.get('https://api.co2signal.com/v1/latest', {
				params: {
					countryCode: region,
				},
				headers: {
					'auth-token': apiKey,
				},
			})
			.then((response) => {
				let CO2 = Math.floor(response.data.data.carbonIntensity);

				//calculateColor(CO2);

				loading.style.display = 'none';
				form.style.display = 'none';
				myregion.textContent = region;
				usage.textContent =
					Math.round(response.data.data.carbonIntensity) + ' grams (grams C02 emitted per kilowatt hour)';
				fossilfuel.textContent =
					response.data.data.fossilFuelPercentage.toFixed(2) +
					'% (percentage of fossil fuels used to generate electricity)';
				results.style.display = 'block';
			});
	} catch (error) {
		console.log(error);
		loading.style.display = 'none';
		results.style.display = 'none';
		errors.textContent = 'Sorry, we have no data for the region you have requested.';
	}
}
```

----------------------------------------

TITLE: Defining a Basic Function in JavaScript
DESCRIPTION: Illustrates the fundamental syntax for defining a function in JavaScript, including the `function` keyword, function name, parentheses for parameters, and curly braces for the function body.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_0

LANGUAGE: javascript
CODE:
```
function nameOfFunction() { // 函数定义
 // 函数定义 / 函数体
}
```

----------------------------------------

TITLE: Add, Commit, and Push Changes in Git with Bash
DESCRIPTION: This sequence of commands stages all changes (`git add .`), commits them with a descriptive message (`git commit -m "..."`), and then pushes the new commit(s) to the default remote repository (`git push`). This is a common workflow for updating a remote repository.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_13

LANGUAGE: bash
CODE:
```
git add .
git commit -m "type your commit message here"
git push
```

----------------------------------------

TITLE: Creating Account via Fetch API POST Request (JavaScript)
DESCRIPTION: An asynchronous JavaScript function that sends account data (expected as a JSON string) to a specified server endpoint (`//localhost:5000/api/accounts`) using a POST request with the Fetch API. It sets the `Content-Type` header to `application/json` and parses the JSON response from the server. Includes basic error handling.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/translations/README.fr.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
async function createAccount(account) {
  try {
    const response = await fetch('//localhost:5000/api/accounts', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: account
    });
    return await response.json();
  } catch (error) {
    return { error: error.message || 'Unknown error' };
  }
}
```

----------------------------------------

TITLE: Basic JavaScript Function Syntax
DESCRIPTION: This snippet shows the basic syntax for defining a function in JavaScript, including the `function` keyword, the function name, and parentheses for parameters.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function nameOfFunction() { // function definition
 // function definition/body
}
```

----------------------------------------

TITLE: Defining Username Input Field (HTML)
DESCRIPTION: This HTML snippet demonstrates how to create a text input field for a username within a form. The `id` attribute is used to link the input to a label, and the `name` attribute specifies the key used when the form data is submitted.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/README.md#_snippet_1

LANGUAGE: html
CODE:
```
<input id="username" name="username" type="text">
```

----------------------------------------

TITLE: Selecting DOM Elements for Browser Extension (JavaScript)
DESCRIPTION: Selects various HTML elements from the document using their CSS classes. These elements represent form fields, results display areas, and control buttons, which will be manipulated by the JavaScript code.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/2-forms-browsers-local-storage/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// form fields
const form = document.querySelector('.form-data');
const region = document.querySelector('.region-name');
const apiKey = document.querySelector('.api-key');

// results
const errors = document.querySelector('.errors');
const loading = document.querySelector('.loading');
const results = document.querySelector('.result-container');
const usage = document.querySelector('.carbon-usage');
const fossilfuel = document.querySelector('.fossil-fuel');
const myregion = document.querySelector('.my-region');
const clearBtn = document.querySelector('.clear-btn');
```

----------------------------------------

TITLE: JavaScript Function Syntax with Parameters
DESCRIPTION: This snippet illustrates the syntax for defining a JavaScript function that accepts multiple parameters. Parameters are listed within the parentheses after the function name, separated by commas.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
function name(param, param2, param3) {

}
```

----------------------------------------

TITLE: Defining a Function that Returns a Value in JavaScript
DESCRIPTION: Creates a JavaScript function `createGreetingMessage` that takes a `name` parameter, constructs a greeting string, and uses the `return` keyword to send this string back as the function's output.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_9

LANGUAGE: javascript
CODE:
```
function createGreetingMessage(name) {
  const message = `Hello, ${name}`;
  return message;
}
```

----------------------------------------

TITLE: Adding Basic HTML Document Structure
DESCRIPTION: Adds the required HTML5 doctype declaration and the root `<html>` element to the document, establishing the fundamental structure for the web page.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/1-intro-to-html/README.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<!DOCTYPE html>
<html></html>
```

----------------------------------------

TITLE: Calling JavaScript Function with Argument
DESCRIPTION: This snippet demonstrates how to call the `displayGreeting` function and pass a string value ('Christopher') as an argument for the `name` parameter.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
displayGreeting('Christopher');
// displays "Hello, Christopher!" when run
```

----------------------------------------

TITLE: Creating Basic HTML Document Structure
DESCRIPTION: This snippet provides the initial boilerplate HTML structure for the virtual terrarium page, including the doctype, html, head (with title, charset, compatibility, and viewport meta tags), and an empty body. It sets up the basic framework for the web page.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/1-intro-to-html/README.md#_snippet_2

LANGUAGE: HTML
CODE:
```
<!DOCTYPE html>
<html>
	<head>
		<title>Welcome to my Virtual Terrarium</title>
		<meta charset="utf-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
	</head>
	<body></body>
</html>
```

----------------------------------------

TITLE: Demonstrating JavaScript Closures and Scope
DESCRIPTION: This example illustrates the concept of a JavaScript closure, where an inner function (`addCandy`) can access variables (`candy`) from its outer function's scope (`displayCandy`). It also shows that variables declared inside the closure are not accessible from outside.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function displayCandy(){
	let candy = ['jellybeans'];
	function addCandy(candyType) {
		candy.push(candyType)
	}
	addCandy('gumdrops');
}
displayCandy();
console.log(candy)
```

----------------------------------------

TITLE: Declaring an Empty Array in JavaScript
DESCRIPTION: Demonstrates the basic syntax for creating an empty array in JavaScript using square brackets `[]`. This initializes an array with no elements, ready to be populated later.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/4-arrays-loops/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
let myArray = [];
```

----------------------------------------

TITLE: JavaScript Function with One Parameter
DESCRIPTION: This example updates the `displayGreeting` function to accept a `name` parameter, allowing the greeting message to be customized using a template literal.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
function displayGreeting(name) {
  const message = `Hello, ${name}!`;
  console.log(message);
}
```

----------------------------------------

TITLE: Fetching Account Data - JavaScript
DESCRIPTION: Asynchronously fetches account data for a given user from the server API using the fetch API. It constructs the API URL, encodes the username, and handles potential errors during the request, returning the parsed JSON response or an error object.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
async function getAccount(user) {
  try {
    const response = await fetch('//localhost:5000/api/accounts/' + encodeURIComponent(user));
    return await response.json();
  } catch (error) {
    return { error: error.message || 'Unknown error' };
  }
}
```

----------------------------------------

TITLE: Preventing Default Link Behavior (JavaScript)
DESCRIPTION: This function is an event handler for link clicks. It prevents the browser's default navigation using `event.preventDefault()` and instead calls the custom `navigate` function with the link's `href`, enabling client-side routing for internal links. Requires the `navigate` function.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_11

LANGUAGE: js
CODE:
```
function onLinkClick(event) {
  event.preventDefault();
  navigate(event.target.href);
}
```

----------------------------------------

TITLE: Implementing EventEmitter Class (JavaScript)
DESCRIPTION: Defines a simple `EventEmitter` class to implement the Pub/Sub pattern. It includes methods `on` to subscribe a listener function to a specific message type and `emit` to trigger all listeners subscribed to a given message, optionally passing a payload.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_12

LANGUAGE: javascript
CODE:
```
class EventEmitter {
  constructor() {
    this.listeners = {};
  }

  on(message, listener) {
    if (!this.listeners[message]) {
      this.listeners[message] = [];
    }
    this.listeners[message].push(listener);
  }

  emit(message, payload = null) {
    if (this.listeners[message]) {
      this.listeners[message].forEach((l) => l(message, payload));
    }
  }
}
```

----------------------------------------

TITLE: Initialize Git Repository in Bash
DESCRIPTION: Run `git init` inside your project folder to create a new, empty Git repository or reinitialize an existing one. This command creates the necessary `.git` directory to track changes.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
git init
```

----------------------------------------

TITLE: Creating a JavaScript Function with a Return Value
DESCRIPTION: Defines a JavaScript function `createGreetingMessage` that takes a `name` parameter, constructs a greeting message, and returns the message string.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_10

LANGUAGE: javascript
CODE:
```
function createGreetingMessage(name) {
  const message = `Hello, ${name}`;
  return message;
}
```

----------------------------------------

TITLE: Initialize Application State (JavaScript)
DESCRIPTION: Initializes the central application state object, initially containing an account property set to null. The state is frozen using Object.freeze to make it immutable, promoting controlled updates.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ko.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
let state = Object.freeze({
  account: null
});
```

----------------------------------------

TITLE: Calling a JavaScript Function and Storing its Return Value
DESCRIPTION: Shows how to call the `createGreetingMessage` function with an argument and store the returned value in a variable named `greetingMessage`.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const greetingMessage = createGreetingMessage('Christopher');
```

----------------------------------------

TITLE: Setting Form Action for JavaScript Handling (HTML)
DESCRIPTION: Configures the HTML form element to prevent default submission and instead execute the specified JavaScript function `register()` when submitted.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/README.md#_snippet_5

LANGUAGE: HTML
CODE:
```
<form id="registerForm" action="javascript:register()">
```

----------------------------------------

TITLE: Styling Plant Holder and Plant with CSS Classes
DESCRIPTION: Applies CSS styles to the ".plant-holder" and ".plant" classes. It uses position: relative for the holder and position: absolute for the plant, sets dimensions using percentages, adjusts positioning with left, and controls stacking order with z-index. These styles are used to position and size the plant elements within their containers.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/README.md#_snippet_1

LANGUAGE: CSS
CODE:
```
.plant-holder {
	position: relative;
	height: 13%;
	left: -10px;
}

.plant {
	position: absolute;
	max-width: 150%;
	max-height: 150%;
	z-index: 2;
}
```

----------------------------------------

TITLE: Iterating through an Array using a For Loop in JavaScript
DESCRIPTION: This snippet initializes a JavaScript array named 'iceCreamFlavors' with several string elements. It then uses a standard 'for' loop to iterate through each element of the array, printing each flavor to the console. The loop condition uses the array's 'length' property to determine when to stop.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/4-arrays-loops/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
let iceCreamFlavors = ["Chocolate", "Strawberry", "Vanilla", "Pistachio", "Rocky Road"];

for (let i = 0; i < iceCreamFlavors.length; i++) {
  console.log(iceCreamFlavors[i]);
} //Ends when all flavors are printed
```

----------------------------------------

TITLE: Initializing Student Grade Data and Result Array
DESCRIPTION: This snippet initializes an array `allStudents` containing mixed grade types (numbers and strings) representing two different grading systems. It also initializes an empty array `studentsWhoPass` which is intended to store the grades of students who pass the course according to the task description.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/assignment.md#_snippet_0

LANGUAGE: javascript
CODE:
```
let allStudents = [
  'A',
  'B-',
  1,
  4,
  5,
  2
]

let studentsWhoPass = [];
```

----------------------------------------

TITLE: Saving User Account State to localStorage - JavaScript
DESCRIPTION: Saves the current user account state to localStorage. The state object is first serialized into a JSON string using JSON.stringify() because localStorage only stores strings. The data is stored under the predefined storageKey.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
localStorage.setItem(storageKey, JSON.stringify(state.account));
```

----------------------------------------

TITLE: Modeling Game Objects with Composition (JavaScript)
DESCRIPTION: Defines base object structures (`gameObject`, `movable`) and uses object spread syntax (`...`) within factory functions (`createHero`, `createStatic`) to compose new objects with desired properties and behaviors. Demonstrates an alternative to class inheritance for object modeling.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/1-introduction/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
//create a constant gameObject
const gameObject = {
  x: 0,
  y: 0,
  type: ''
};

//...and a constant movable
const movable = {
  moveTo(x, y) {
    this.x = x;
    this.y = y;
  }
}
//then the constant movableObject is composed of the gameObject and movable constants
const movableObject = {...gameObject, ...movable};

//then create a function to create a new Hero who inherits the movableObject properties
function createHero(x, y) {
  return {
    ...movableObject,
    x,
    y,
    type: 'Hero'
  }
}
//...and a static object that inherits only the gameObject properties
function createStatic(x, y, type) {
  return {
    ...gameObject
    x,
    y,
    type
  }
}
//create the hero and move it
const hero = createHero(10,10);
hero.moveTo(5,5);
//and create a static tree which only stands around
const tree = createStatic(0,0, 'Tree');
```

----------------------------------------

TITLE: Returning a Value from a Function in JavaScript
DESCRIPTION: Shows the basic syntax for using the `return` keyword within a JavaScript function. The `return` keyword is used to specify the value or reference that the function should output back to the caller.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_8

LANGUAGE: javascript
CODE:
```
return myVariable;
```

----------------------------------------

TITLE: Add Remote GitHub Repository in Git with Bash
DESCRIPTION: Use `git remote add origin [URL]` to connect your local Git repository to a remote repository, typically hosted on GitHub. 'origin' is the conventional name for the primary remote, and the URL points to the remote repository.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_11

LANGUAGE: bash
CODE:
```
git remote add origin https://github.com/username/repository_name.git
```

----------------------------------------

TITLE: Loading Image Asset with Promise Pattern (JavaScript)
DESCRIPTION: Provides a recommended pattern for loading image assets using a JavaScript Promise, making asynchronous loading easier to manage, especially when loading multiple assets, and shows an example of how to use the async function with await.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/2-drawing-to-canvas/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
function loadAsset(path) {
  return new Promise((resolve) => {
    const img = new Image();
    img.src = path;
    img.onload = () => {
      // image loaded and ready to be used
      resolve(img);
    }
  })
}

// use like so

async function run() {
  const heroImg = await loadAsset('hero.png')
  const monsterImg = await loadAsset('monster.png')
}
```

----------------------------------------

TITLE: If...Else Statement Example in JavaScript
DESCRIPTION: Illustrates the use of an `if...else` statement in JavaScript. The `if` block runs if the condition is true, and the `else` block runs if the condition is false, providing alternative execution paths.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
let currentMoney;
let laptopPrice;

if (currentMoney >= laptopPrice) {
  //Condition is true. Code in this block will run.
  console.log("Getting a new laptop!");
} else {
  //Condition is false. Code in this block will run.
  console.log("Can't afford a new laptop, yet!");
}
```

----------------------------------------

TITLE: Creating a Simple JavaScript Function
DESCRIPTION: This example demonstrates creating a basic JavaScript function named `displayGreeting` that logs a fixed string 'Hello, world!' to the console when called.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function displayGreeting() {
  console.log('Hello, world!');
}
```

----------------------------------------

TITLE: Getting Array Length in JavaScript
DESCRIPTION: Explains how to determine the number of elements currently stored in an array using the built-in `length` property. This property returns a numerical value representing the array's size.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/4-arrays-loops/README.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
let iceCreamFlavors = ["Chocolate", "Strawberry", "Vanilla", "Pistachio", "Rocky Road"];
iceCreamFlavors.length; //5
```

----------------------------------------

TITLE: Calling a Simple Function in JavaScript
DESCRIPTION: Demonstrates how to invoke or call a previously defined JavaScript function named `displayGreeting` using its name followed by parentheses `()`. Function definition can be before or after the call.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// 调用我们的函数
displayGreeting();
```

----------------------------------------

TITLE: Declaring and Initializing a Variable in JavaScript
DESCRIPTION: Illustrates the common practice of declaring a variable and assigning its initial value in a single statement using the `let` keyword and the assignment operator. This is known as explicit initialization.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_2

LANGUAGE: javascript
CODE:
```
let myVariable = 123;
```

----------------------------------------

TITLE: Declaring Boolean Variables in JavaScript
DESCRIPTION: Demonstrates how to declare and initialize boolean variables with `true` and `false` values in JavaScript.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
let myTrueBool = true
let myFalseBool = false
```

----------------------------------------

TITLE: Updating Account State After Registration in JavaScript
DESCRIPTION: Replaces a direct assignment to the state.account property within the register function with a call to the centralized updateState function. This ensures that account data received after successful registration is updated immutably via the defined state management pattern.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
updateState('account', result);
```

----------------------------------------

TITLE: Arithmetic Operators in JavaScript
DESCRIPTION: Provides examples of basic arithmetic operations in JavaScript using the addition (`+`), subtraction (`-`), multiplication (`*`), division (`/`), and modulo (`%`) operators.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_8

LANGUAGE: javascript
CODE:
```
1 + 2 //期待される答えは 3 です。
```

LANGUAGE: javascript
CODE:
```
1 - 2 //期待される答えは -1 です。
```

LANGUAGE: javascript
CODE:
```
1 * 2 //期待される答えは 2 です。
```

LANGUAGE: javascript
CODE:
```
1 / 2 //期待される答えは 0.5 です。
```

LANGUAGE: javascript
CODE:
```
1 % 2 //期待される答えは 1 です。
```

----------------------------------------

TITLE: Querying CO2Signal API with Axios (JavaScript)
DESCRIPTION: Defines an asynchronous JavaScript function to fetch carbon intensity data from the CO2Signal API using axios. It sends a GET request with region and API key parameters, processes the successful response to update UI elements, and includes a try/catch block to handle potential errors during the API call or data processing.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/2-forms-browsers-local-storage/README.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import axios from '../node_modules/axios';

async function displayCarbonUsage(apiKey, region) {
	try {
		await axios
			.get('https://api.co2signal.com/v1/latest', {
				params: {
					countryCode: region,
				},
				headers: {
					'auth-token': apiKey,
				},
			})
			.then((response) => {
				let CO2 = Math.floor(response.data.data.carbonIntensity);

				//calculateColor(CO2);

				loading.style.display = 'none';
				form.style.display = 'none';
				myregion.textContent = region;
				usage.textContent =
					Math.round(response.data.data.carbonIntensity) + ' grams (grams C02 emitted per kilowatt hour)';
				fossilfuel.textContent =
					response.data.data.fossilFuelPercentage.toFixed(2) +
					'% (percentage of fossil fuels used to generate electricity)';
				results.style.display = 'block';
			});
	} catch (error) {
		console.log(error);
		loading.style.display = 'none';
		results.style.display = 'none';
		errors.textContent = 'Sorry, we have no data for the region you have requested.';
	}
}
```

----------------------------------------

TITLE: Cloning Repository and Navigating to Quiz App Directory (Bash)
DESCRIPTION: Provides the bash commands to clone the repository created from the template and then change the current directory into the `quiz-app` subdirectory where the project is located.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/quiz-app/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
git clone https://github.com/your-github-organization/repo-name
cd repo-name/quiz-app
```

----------------------------------------

TITLE: If Statement Example with Variables in JavaScript
DESCRIPTION: Provides a practical example of an `if` statement using variables `currentMoney` and `laptopPrice` to check if a condition (`currentMoney >= laptopPrice`) is met before executing a code block.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
let currentMoney;
let laptopPrice;

if (currentMoney >= laptopPrice) {
  //Condition is true. Code in this block will run.
  console.log("Getting a new laptop!");
}
```

----------------------------------------

TITLE: Styling Terrarium Jar and Dirt Elements with CSS
DESCRIPTION: Defines CSS styles for the ".jar-walls", ".jar-top", ".jar-bottom", and ".dirt" classes. It uses position: absolute for all elements, sets dimensions with percentages, applies background colors, controls transparency with opacity, uses border-radius for rounded corners, and positions elements using bottom and left. These styles create the visual structure of the terrarium jar and its contents.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/README.md#_snippet_2

LANGUAGE: CSS
CODE:
```
.jar-walls {
	height: 80%;
	width: 60%;
	background: #d1e1df;
	border-radius: 1rem;
	position: absolute;
	bottom: 0.5%;
	left: 20%;
	opacity: 0.5;
	z-index: 1;
}

.jar-top {
	width: 50%;
	height: 5%;
	background: #d1e1df;
	position: absolute;
	bottom: 80.5%;
	left: 25%;
	opacity: 0.7;
	z-index: 1;
}

.jar-bottom {
	width: 50%;
	height: 1%;
	background: #d1e1df;
	position: absolute;
	bottom: 0%;
	left: 25%;
	opacity: 0.7;
}

.dirt {
	width: 60%;
	height: 5%;
	background: #3a241d;
	position: absolute;
	border-radius: 0 0 1rem 1rem;
	bottom: 1%;
	left: 20%;
	opacity: 0.7;
	z-index: -1;
}
```

----------------------------------------

TITLE: Passing an Anonymous Function to setTimeout in JavaScript
DESCRIPTION: Demonstrates using `setTimeout` with an anonymous function. Instead of defining a separate named function, the function definition is provided directly as the first argument to `setTimeout`. This is useful for functions used only once.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_12

LANGUAGE: javascript
CODE:
```
setTimeout(function() {
  console.log('3 秒过去了');
}, 3000);
```

----------------------------------------

TITLE: Unstage Specific File/Folder in Git with Bash
DESCRIPTION: Use `git reset [file or folder name]` to unstage only a particular file or folder. This removes the specified item from the staging area while keeping the changes in the working directory.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
git reset [file or folder name]
```

----------------------------------------

TITLE: Capturing a Function's Return Value in JavaScript
DESCRIPTION: Demonstrates how to call the `createGreetingMessage` function with the argument 'Christopher' and store the returned string value ('Hello, Christopher') in a constant variable named `greetingMessage`.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const greetingMessage = createGreetingMessage('Christopher');
```

----------------------------------------

TITLE: Sending Account Data to API (JavaScript)
DESCRIPTION: Defines an asynchronous JavaScript function `createAccount` that uses the `fetch` API to send the provided account data (as JSON) to a specified server endpoint via a POST request. It handles the server response, parses JSON, and includes basic error handling.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
async function createAccount(account) {
  try {
    const response = await fetch('//localhost:5000/api/accounts', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: account
    });
    return await response.json();
  } catch (error) {
    return { error: error.message || 'Unknown error' };
  }
}
```

----------------------------------------

TITLE: Function to Update Centralized State (JavaScript)
DESCRIPTION: Defines a function `updateState` to handle all state modifications. It creates a new immutable state object using `Object.freeze` and the spread operator to update a specific property.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.zh-tw.md#_snippet_4

LANGUAGE: js
CODE:
```
function updateState(property, newData) {
  state = Object.freeze({
    ...state,
    [property]: newData
  });
}
```

----------------------------------------

TITLE: Importing External CSS File (HTML)
DESCRIPTION: Demonstrates how to link an external CSS file (style.css) to an HTML document using the <link> tag within the <head> section. This is the standard way to apply styles defined in a separate file.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/translations/README.zh-cn.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<link rel="stylesheet" href="./style.css" />
```

----------------------------------------

TITLE: Populating Table Body with Transaction Rows - JavaScript
DESCRIPTION: Demonstrates how to use document.createDocumentFragment() to efficiently build a collection of transaction rows. It iterates through an account.transactions array, calls createTransactionRow for each transaction, and appends the resulting row to the document fragment. Finally, it uses updateElement to add the fragment to the table body with the ID 'transactions'.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_20

LANGUAGE: javascript
CODE:
```
const transactionsRows = document.createDocumentFragment();
for (const transaction of account.transactions) {
  const transactionRow = createTransactionRow(transaction);
  transactionsRows.appendChild(transactionRow);
}
updateElement('transactions', transactionsRows);
```

----------------------------------------

TITLE: Passing a JavaScript Arrow Function to setTimeout
DESCRIPTION: Shows how to use the concise arrow function syntax (`=>`) to define and pass an anonymous function as a callback parameter to `setTimeout`, a common practice in modern JavaScript.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_14

LANGUAGE: javascript
CODE:
```
setTimeout(() => {
  console.log('3 seconds has elapsed');
}, 3000);
```

----------------------------------------

TITLE: Check Git Repository Status in Bash
DESCRIPTION: Execute `git status` to see the current state of the working directory and the staging area. It shows which changes have been staged, which haven't, and which files aren't being tracked by Git.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
git status
```

----------------------------------------

TITLE: Staging and Committing Git Changes (Bash)
DESCRIPTION: Stages all changes in the current directory for the next commit (`git add .`) and then creates a new commit with the staged changes, including a required descriptive message (`git commit -m`).
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_16

LANGUAGE: Bash
CODE:
```
git add .
git commit -m "my changes"
```

----------------------------------------

TITLE: Using the return Keyword in JavaScript
DESCRIPTION: Demonstrates the basic syntax for returning a value from a JavaScript function using the `return` keyword.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
return myVariable;
```

----------------------------------------

TITLE: Updating Local Main Branch (Bash)
DESCRIPTION: Switches the current branch to the local `main` branch and then pulls the latest changes from the remote repository's `main` branch. This ensures the local main is current before merging it into a feature branch.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_17

LANGUAGE: Bash
CODE:
```
git switch main
git pull
```

----------------------------------------

TITLE: Creating HTML Registration Form
DESCRIPTION: Adds a second HTML form for user registration, including fields for username, currency, description, and balance. Demonstrates setting a default value using the value attribute and using the number input type.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/README.md#_snippet_3

LANGUAGE: HTML
CODE:
```
<hr/>
<h2>Register</h2>
<form id="registerForm">
  <label for="user">Username</label>
  <input id="user" name="user" type="text">
  <label for="currency">Currency</label>
  <input id="currency" name="currency" type="text" value="$">
  <label for="description">Description</label>
  <input id="description" name="description" type="text">
  <label for="balance">Current balance</label>
  <input id="balance" name="balance" type="number" value="0">
  <button>Register</button>
</form>
```

----------------------------------------

TITLE: Calling a Function with an Argument in JavaScript
DESCRIPTION: Demonstrates how to call the `displayGreeting` function, passing the string 'Christopher' as an argument for the `name` parameter. The function will then output "Hello, Christopher!" to the console.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_5

LANGUAGE: javascript
CODE:
```
displayGreeting('Christopher');
// 在运行时会显示 “Hello, Christopher！”
```

----------------------------------------

TITLE: Styling Plant Holder and Plant (CSS)
DESCRIPTION: Defines CSS rules for elements with classes plant-holder and plant using the . selector. It uses a combination of relative and absolute positioning, percentage heights/widths, max-width, max-height, and z-index to position and size the plants within their containers and control their stacking order.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/translations/README.zh-cn.md#_snippet_8

LANGUAGE: CSS
CODE:
```
.plant-holder {
	position: relative;
	height: 13%;
	left: -10px;
}

.plant {
	position: absolute;
	max-width: 150%;
	max-height: 150%;
	z-index: 2;
}
```

----------------------------------------

TITLE: Installing Dependencies npm
DESCRIPTION: This command uses npm (Node Package Manager) to install all the project dependencies listed in the package.json file. It is a necessary step after cloning the repository to ensure all required libraries and tools are available for building and running the project.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/solution/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Binding JavaScript Handler to HTML Links (HTML)
DESCRIPTION: Demonstrates how to attach the `onLinkClick` JavaScript function to the `onclick` event of HTML `<a>` tags. This ensures that clicking these links triggers the custom routing logic instead of a full page reload.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_12

LANGUAGE: html
CODE:
```
<a href="/dashboard" onclick="onLinkClick(event)">Login</a>
...
<a href="/login" onclick="onLinkClick(event)">Logout</a>
```

----------------------------------------

TITLE: Merging Main into Working Branch (Bash)
DESCRIPTION: Switches back to the feature or working branch and merges the changes from the `main` branch into it. This step is crucial for integrating recent updates from the main line and resolving any potential merge conflicts locally.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_18

LANGUAGE: Bash
CODE:
```
git switch [branch_name]
git merge main
```

----------------------------------------

TITLE: Defining a Function with Multiple Parameters in JavaScript
DESCRIPTION: Illustrates the syntax for defining a JavaScript function that accepts multiple parameters. Parameters are listed within the parentheses `()` after the function name, separated by commas.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_3

LANGUAGE: javascript
CODE:
```
function name(param, param2, param3) {

}
```

----------------------------------------

TITLE: Initializing Immutable State Object in JavaScript
DESCRIPTION: Initializes the application's state object with an account property set to null. The Object.freeze() method is immediately applied to the initial state object, making it immutable from the start and preventing direct modification.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
let state = Object.freeze({
  account: null
});
```

----------------------------------------

TITLE: Declaring a Variable with let in JavaScript
DESCRIPTION: This snippet demonstrates how to declare a variable named `myVariable` using the `let` keyword in JavaScript. At this point, the variable is declared but does not yet have an assigned value.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
let myVariable;
```

----------------------------------------

TITLE: Setting User Data and Initiating Display in JavaScript
DESCRIPTION: Defines the `setUpUser` function which takes an API key and region name as arguments. It saves these values to the browser's local storage, updates the UI to indicate a loading state and clear any previous errors, shows the clear button, and finally calls the `displayCarbonUsage` function with the provided credentials to fetch and display data.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/2-forms-browsers-local-storage/README.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
function setUpUser(apiKey, regionName) {
	localStorage.setItem('apiKey', apiKey);
	localStorage.setItem('regionName', regionName);
	loading.style.display = 'block';
	errors.textContent = '';
	clearBtn.style.display = 'block';
	//make initial call
	displayCarbonUsage(apiKey, regionName);
}
```

----------------------------------------

TITLE: Extending GameObject for Hero (JavaScript)
DESCRIPTION: Provides a placeholder example showing how to extend the base GameObject class to create a Hero class. The constructor is noted as needing properties for position (x, y), type, and speed, inheriting basic properties from GameObject.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_8

LANGUAGE: javascript
CODE:
```
class Hero extends GameObject {
  constructor(x, y) {
    ...it needs an x, y, type, and speed
  }
}
```

----------------------------------------

TITLE: Passing a Named JavaScript Function to setTimeout
DESCRIPTION: Illustrates how to pass a pre-defined, named JavaScript function (`displayDone`) as a callback parameter to the `setTimeout` function, which executes the callback after a specified delay (3000 milliseconds).
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_12

LANGUAGE: javascript
CODE:
```
function displayDone() {
  console.log('3 seconds has elapsed');
}
// timer value is in milliseconds
setTimeout(displayDone, 3000);
```

----------------------------------------

TITLE: Preventing Default Browser Key Behavior (JavaScript)
DESCRIPTION: Defines a function to handle 'keydown' events and prevent the browser's default actions for specific keys, such as arrow keys and the spacebar. This is useful in games to stop unwanted scrolling or other browser behaviors when these keys are pressed. The `e.preventDefault()` method is called for the targeted keys.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
let onKeyDown = function (e) {
  console.log(e.keyCode);
  switch (e.keyCode) {
    case 37:
    case 39:
    case 38:
    case 40: // Arrow keys
    case 32:
      e.preventDefault();
      break; // Space
    default:
      break; // do not block other keys
  }
};

window.addEventListener('keydown', onKeyDown);
```

----------------------------------------

TITLE: Using Pub/Sub EventEmitter for Game Events in JavaScript
DESCRIPTION: Demonstrates how to utilize the `EventEmitter` class to handle game events. It defines message types, creates an emitter instance, subscribes a hero movement action to a message, and emits the message based on keyboard input.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/1-introduction/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
//set up a message structure
const Messages = {
  HERO_MOVE_LEFT: 'HERO_MOVE_LEFT'
};
//invoke the eventEmitter you set up above
const eventEmitter = new EventEmitter();
//set up a hero
const hero = createHero(0,0);
//let the eventEmitter know to watch for messages pertaining to the hero moving left, and act on it
eventEmitter.on(Messages.HERO_MOVE_LEFT, () => {
  hero.move(5,0);
});

//set up the window to listen for the keyup event, specifically if the left arrow is hit, emit a message to move the hero left
window.addEventListener('keyup', (evt) => {
  if (evt.key === 'ArrowLeft') {
    eventEmitter.emit(Messages.HERO_MOVE_LEFT)
  }
});
```

----------------------------------------

TITLE: Initializing and Freezing State Object (JS)
DESCRIPTION: Initializes the centralized `state` object and immediately freezes it using `Object.freeze()`. This ensures that the initial state is immutable from the start, preventing accidental direct modification.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ja.md#_snippet_5

LANGUAGE: js
CODE:
```
let state = Object.freeze({
  account: null
});
```

----------------------------------------

TITLE: GitHub Actions Workflow for Azure Static Web Apps Deployment
DESCRIPTION: This YAML snippet defines a GitHub Actions workflow that automatically builds and deploys the web application to Azure Static Web Apps whenever changes are pushed to the 'main' branch or a pull request targeting 'main' is opened, synchronized, reopened, or closed.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/quiz-app/README.md#_snippet_7

LANGUAGE: YAML
CODE:
```
name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v2
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "quiz-app" # App source code path
          api_location: ""API source code path optional
          output_location: "dist" #Built app content directory - optional
```

----------------------------------------

TITLE: Basic If Statement Structure in JavaScript
DESCRIPTION: Shows the fundamental syntax for an `if` statement in JavaScript, where the code block executes only if the specified condition evaluates to `true`.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
if (condition) {
  //Condition is true. Code in this block will run.
}
```

----------------------------------------

TITLE: Declaring and Initializing a Constant in JavaScript
DESCRIPTION: Shows how to declare a constant using the `const` keyword. Constants must be initialized with a value at the time of declaration and are typically named using all uppercase letters.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const MY_VARIABLE = 123;
```

----------------------------------------

TITLE: Changing Directory to Project Folder (Shell)
DESCRIPTION: Changes the current working directory in the terminal to the specified project folder after cloning. Replace 'ProjectURL' with the actual folder name.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_23

LANGUAGE: Shell
CODE:
```
cd ProjectURL
```

----------------------------------------

TITLE: Implementing a Basic While Loop in JavaScript
DESCRIPTION: Demonstrates a `while` loop, which continues executing its block of code as long as a specified condition remains true. The counter initialization and update must be managed manually outside and inside the loop body, respectively.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/4-arrays-loops/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
let i = 0;
while (i < 10) {
 console.log(i);
 i++;
}
```

----------------------------------------

TITLE: Using Logical NOT Operator in If Statement (JavaScript)
DESCRIPTION: This snippet shows how to use the logical NOT (!) operator to negate a boolean condition within an if...else statement. The code inside the if block runs if the condition is false, and the code inside the else block runs if the condition is true.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/README.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
if (!condition) {
  // runs if condition is false
} else {
  // runs if condition is true
}
```

----------------------------------------

TITLE: Test Bank API Endpoint (Shell)
DESCRIPTION: Executes a curl command to test if the local bank API server is running and accessible, expecting a version string in response.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ko.md#_snippet_0

LANGUAGE: Shell
CODE:
```
curl http://localhost:5000/api
# -> should return "Bank API v1.0.0" as a result
```

----------------------------------------

TITLE: Capturing, Preparing, and Sending Form Data (JavaScript)
DESCRIPTION: Defines an asynchronous JavaScript function `register` that retrieves form data, converts it to a JSON string, calls the `createAccount` function to send the data to the server, and logs the outcome or any errors. Requires the `createAccount` function.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/README.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
async function register() {
  const registerForm = document.getElementById('registerForm');
  const formData = new FormData(registerForm);
  const jsonData = JSON.stringify(Object.fromEntries(formData));
  const result = await createAccount(jsonData);

  if (result.error) {
    return console.log('An error occurred:', result.error);
  }

  console.log('Account created!', result);
}
```

----------------------------------------

TITLE: Processing Form Data and Calling Account Creation API (JavaScript)
DESCRIPTION: An asynchronous JavaScript function triggered by form submission. It retrieves form data using `FormData`, converts it to a plain object, serializes it to a JSON string, and then calls the `createAccount` function to send the data to the server. It logs the result or any errors to the console.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/translations/README.fr.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
async function register() {
  const registerForm = document.getElementById('registerForm');
  const formData = new FormData(registerForm);
  const jsonData = JSON.stringify(Object.fromEntries(formData));
  const result = await createAccount(jsonData);

  if (result.error) {
    return console.log('An error occurred:', result.error);
  }

  console.log('Account created!', result);
}
```

----------------------------------------

TITLE: Adding Account Description Heading HTML
DESCRIPTION: Adds a new h2 element just below the balance section to display the account description, semantically marked as a heading.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_13

LANGUAGE: HTML
CODE:
```
<h2 id="description"></h2>
```

----------------------------------------

TITLE: Create Project Directory and Navigate
DESCRIPTION: These commands create a new directory named 'typing-game' and then change the current directory to the newly created one. This is the first step in setting up the project structure for the typing game.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/4-typing-game/typing-game/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Linux or macOS
mkdir typing-game && cd typing-game

# Windows
md typing-game && cd typing-game
```

----------------------------------------

TITLE: Adding Semantic H1 Header in HTML
DESCRIPTION: This snippet adds an <h1> tag containing the main title "My Terrarium" to the page. It illustrates the use of semantic markup for headings, which improves accessibility and document structure.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/1-intro-to-html/README.md#_snippet_4

LANGUAGE: HTML
CODE:
```
<h1>My Terrarium</h1>
```

----------------------------------------

TITLE: Stage All Changes in Git with Bash
DESCRIPTION: Use `git add .` to add all changes in the current directory and its subdirectories to the staging area. This prepares all modified and new files for the next commit.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
git add .
```

----------------------------------------

TITLE: Calling JavaScript Function Using Default Parameter
DESCRIPTION: This snippet calls the `displayGreeting` function providing only the `name` argument. Since the `salutation` argument is omitted, the function uses its default value ('Hello').
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
displayGreeting('Christopher');
// displays "Hello, Christopher"
```

----------------------------------------

TITLE: Finding Biggest Number with Ternary Operator (JavaScript)
DESCRIPTION: This snippet demonstrates a practical use of the ternary operator to find the larger of two numbers, firstNumber and secondNumber. The result is assigned to the biggestNumber variable.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/README.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
let firstNumber = 20;
let secondNumber = 10;
let biggestNumber = firstNumber > secondNumber ? firstNumber : secondNumber;
```

----------------------------------------

TITLE: Listening for Key Release Event (JavaScript)
DESCRIPTION: Attaches an event listener to the window object to detect when a keyboard key is released ('keyup'). The provided callback function receives an event object (evt) which contains information about the key pressed, such as its string representation (evt.key).
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
window.addEventListener('keyup', (evt) => {
  // `evt.key` = string representation of the key
  if (evt.key === 'ArrowUp') {
    // do something
  }
})
```

----------------------------------------

TITLE: Assigning Pointer Move and Up Handlers (JS)
DESCRIPTION: These lines, intended to be placed within the `pointerDrag` function, assign event handlers to the entire `document`. `onpointermove` is set to call `elementDrag` as the pointer moves, and `onpointerup` is set to call `stopElementDrag` when the pointer is released, completing the drag gesture.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
document.onpointermove = elementDrag;
document.onpointerup = stopElementDrag;
```

----------------------------------------

TITLE: Initializing Draggable Element with Pointerdown Handler (JavaScript)
DESCRIPTION: This function initializes an element (`terrariumElement`) to be draggable. It declares four local variables (`pos1` through `pos4`) to track positioning during dragging. It then assigns the `pointerDrag` function as the event handler for the `onpointerdown` event on the element, preparing it for the drag operation.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/translations/README.it.md#_snippet_3

LANGUAGE: javascript
CODE:
```
function dragElement(terrariumElement) {
	//imposta 4 posizioni per il posizionamento sullo schermo
	let pos1 = 0,
		pos2 = 0,
		pos3 = 0,
		pos4 = 0;
	terrariumElement.onpointerdown = pointerDrag;
}
```

----------------------------------------

TITLE: Finding Biggest Number with If-Else (JavaScript)
DESCRIPTION: This snippet shows the equivalent if...else structure for the previous ternary operator example. It explicitly checks if firstNumber is greater than secondNumber and assigns the appropriate value to biggestNumber.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/README.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
let biggestNumber;
if (firstNumber > secondNumber) {
  biggestNumber = firstNumber;
} else {
  biggestNumber = secondNumber;
}
```

----------------------------------------

TITLE: Implementing a Basic For Loop in JavaScript
DESCRIPTION: Shows the structure of a standard `for` loop, including the initialization of a counter, a condition for continuation, and an expression to update the counter. This loop is typically used when the number of iterations is known beforehand.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/4-arrays-loops/README.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
for (let i = 0; i < 10; i++) {
  console.log(i);
}
```

----------------------------------------

TITLE: Switching to a Git Branch (Bash)
DESCRIPTION: Switches the current working directory and Git history to the specified branch. This command is the modern way to change branches, replacing the older `git checkout` for this purpose.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_15

LANGUAGE: Bash
CODE:
```
git switch [branch-name]
```

----------------------------------------

TITLE: Declaring and Initializing a Constant in JavaScript
DESCRIPTION: This snippet shows how to declare and initialize a constant named `MY_VARIABLE` using the `const` keyword. Constants must be initialized upon declaration and are typically named using uppercase letters. The reference of a constant cannot be changed after initialization.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const MY_VARIABLE = 123;
```

----------------------------------------

TITLE: Updating Account State After Login in JavaScript
DESCRIPTION: Replaces a direct assignment to the state.account property within the login function with a call to the centralized updateState function. This ensures that account data received after successful login is updated immutably via the defined state management pattern.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
updateState('account', data);
```

----------------------------------------

TITLE: Declaring a Variable in JavaScript
DESCRIPTION: Demonstrates how to declare a variable using the `let` keyword without immediately assigning a value. The variable exists but holds no specific value yet.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_0

LANGUAGE: javascript
CODE:
```
let myVariable;
```

----------------------------------------

TITLE: Styling H1 Element (CSS)
DESCRIPTION: Defines a CSS rule targeting all <h1> elements. It sets the text color to blue. This snippet is used to demonstrate the concept of CSS Cascade and how inline styles can override external styles.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/translations/README.zh-cn.md#_snippet_2

LANGUAGE: CSS
CODE:
```
h1 {
	color: blue;
}
```

----------------------------------------

TITLE: Logging State Changes for Debugging (JS)
DESCRIPTION: Adds a `console.log` statement to the `updateState` function to print the current state object to the browser's developer console every time the state is updated, aiding in debugging and tracking state changes.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ja.md#_snippet_10

LANGUAGE: js
CODE:
```
console.log(state)
```

----------------------------------------

TITLE: Defining a Function with a Default Parameter in JavaScript
DESCRIPTION: Creates a JavaScript function `displayGreeting` that accepts two parameters: `name` and `salutation`. The `salutation` parameter is given a default value of 'Hello', allowing it to be optional when calling the function.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_6

LANGUAGE: javascript
CODE:
```
function displayGreeting(name, salutation='Hello') {
  console.log(`${salutation}, ${name}`);
}
```

----------------------------------------

TITLE: Configure Git User Profile (Shell)
DESCRIPTION: These commands set your global Git username and email address. This information is associated with the commits you make, identifying you as the author. Replace "your-name" and "your-email" with your actual name and email.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
git config --global user.name "your-name"
```

LANGUAGE: Shell
CODE:
```
git config --global user.email "your-email"
```

----------------------------------------

TITLE: JavaScript Function with Default Parameter Value
DESCRIPTION: This example shows how to define a function with a parameter (`salutation`) that has a default value ('Hello'). If no argument is provided for this parameter during the function call, the default value will be used.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
function displayGreeting(name, salutation='Hello') {
  console.log(`${salutation}, ${name}`);
}
```

----------------------------------------

TITLE: Updating Element Content or Appending Nodes - JavaScript
DESCRIPTION: Modifies the updateElement function to accept either text or a DOM Node/Fragment. It first clears the existing content of the target element (identified by 'id') and then uses the append() method to add the new textOrNode. This allows it to handle both simple text updates and appending complex DOM structures like the document fragment containing table rows.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_21

LANGUAGE: javascript
CODE:
```
function updateElement(id, textOrNode) {
  const element = document.getElementById(id);
  element.textContent = ''; // Removes all children
  element.append(textOrNode);
}
```

----------------------------------------

TITLE: Switch Statement Example in JavaScript
DESCRIPTION: Provides a concrete example of a `switch` statement in JavaScript, demonstrating how it evaluates a variable (`a`) and executes the code block corresponding to the matching `case` value. Includes `break` and `default`.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/README.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
// program using switch statement
let a = 2;

switch (a) {
  case 1:
    a = "one";
    break;
  case 2:
    a = "two";
    break;
  default:
    a = "not found";
    break;
}
console.log(`The value is ${a}`);
```

----------------------------------------

TITLE: Modifying a Property of a Constant Object (Allowed) in JavaScript
DESCRIPTION: This snippet demonstrates that while the reference of a constant object (`obj`) cannot be reassigned, the properties *within* the object can be modified. Here, the value of the `a` property is successfully changed from `3` to `5`. This is allowed because the object reference itself remains unchanged.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const obj = { a: 3 };
obj.a = 5;  // allowed
```

----------------------------------------

TITLE: Setting Body Font Family (CSS)
DESCRIPTION: Applies a font family stack (helvetica, arial, sans-serif) to the <body> element. This demonstrates CSS Inheritance, where child elements within the body will inherit this font style unless specifically overridden.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/translations/README.zh-cn.md#_snippet_3

LANGUAGE: CSS
CODE:
```
body {
	font-family: helvetica, arial, sans-serif;
}
```

----------------------------------------

TITLE: Basic Switch Statement Structure in JavaScript
DESCRIPTION: Shows the general syntax for a `switch` statement in JavaScript, used to select one of many code blocks to be executed based on the value of an expression. Includes `case`, `break`, and `default`.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/README.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
switch (expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
  // code block
}
```

----------------------------------------

TITLE: HTML Structure for Plant Element
DESCRIPTION: Provides the HTML structure for a single plant element within the terrarium. It consists of a div with class plant-holder and an img with class plant and a unique id. This structure is designed to allow CSS to style the container and the image separately and for JavaScript to target the image by ID.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/translations/README.zh-cn.md#_snippet_7

LANGUAGE: HTML
CODE:
```
<div class="plant-holder">
	<img class="plant" alt="plant" id="plant1" src="./images/plant1.png" />
</div>
```

----------------------------------------

TITLE: Update Application State (JavaScript)
DESCRIPTION: Defines a function to update a specific property within the central state object. It creates a new state object by spreading the old state and updating the specified property, then freezes the new state to maintain immutability.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ko.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
function updateState(property, newData) {
  state = Object.freeze({
    ...state,
    [property]: newData
  });
}
```

----------------------------------------

TITLE: Updating State Immutably (JS)
DESCRIPTION: Defines a function `updateState` that creates a new, frozen state object by copying the existing state using the spread operator and updating a specific `property` with `newData`. This ensures state immutability and helps track changes.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ja.md#_snippet_4

LANGUAGE: js
CODE:
```
function updateState(property, newData) {
  state = Object.freeze({
    ...state,
    [property]: newData
  });
}
```

----------------------------------------

TITLE: Defining Base GameObject Class - JavaScript
DESCRIPTION: Defines a foundational class for all game entities. It manages position, state, type, dimensions, and provides a method to draw the object onto a 2D canvas context. This class serves as a base for specific game elements like the hero and enemies.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/translations/README.ja.md#_snippet_0

LANGUAGE: javascript
CODE:
```
class GameObject {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.dead = false;
    this.type = "";
    this.width = 0;
    this.height = 0;
    this.img = undefined;
  }

  draw(ctx) {
    ctx.drawImage(this.img, this.x, this.y, this.width, this.height);
  }
}
```

----------------------------------------

TITLE: Referencing and Initializing DOM Elements for Dragging (JavaScript)
DESCRIPTION: Selects specific HTML elements (plants) by their unique IDs using `document.getElementById()`. Each selected element is then passed as an argument to the `dragElement` function, which is intended to make the element draggable. This prepares the elements for user interaction.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
dragElement(document.getElementById('plant1'));
dragElement(document.getElementById('plant2'));
dragElement(document.getElementById('plant3'));
dragElement(document.getElementById('plant4'));
dragElement(document.getElementById('plant5'));
dragElement(document.getElementById('plant6'));
dragElement(document.getElementById('plant7'));
dragElement(document.getElementById('plant8'));
dragElement(document.getElementById('plant9'));
dragElement(document.getElementById('plant10'));
dragElement(document.getElementById('plant11'));
dragElement(document.getElementById('plant12'));
dragElement(document.getElementById('plant13'));
dragElement(document.getElementById('plant14'));
```

----------------------------------------

TITLE: Adding HTML Document Head Section
DESCRIPTION: Includes the `<head>` section within the `<html>` tags, containing essential metadata such as the page title, character set, compatibility settings, and viewport configuration for responsive design.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/1-intro-to-html/README.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<head>
	<title>Welcome to my Virtual Terrarium</title>
	<meta charset="utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
```

----------------------------------------

TITLE: Handle User Logout (JavaScript)
DESCRIPTION: Implements the logout functionality by updating the state to clear the account data and then navigating the user to the login page. It uses the updateState function to ensure the state change is tracked and immutable.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ko.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
function logout() {
  updateState('account', null);
  navigate('/login');
}
```

----------------------------------------

TITLE: String Formatting using Template Literals
DESCRIPTION: Shows how to format strings using template literals, enclosed in backticks (```). Variables and expressions can be embedded directly within the string using `${...}` placeholders, and whitespace/newlines are preserved.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_12

LANGUAGE: javascript
CODE:
```
let myString1 = "Hello";
let myString2 = "World";

`${myString1} ${myString2}!` //Hello World!
`${myString1}, ${myString2}!` //Hello, World!
```

----------------------------------------

TITLE: Updating Immutable State in JavaScript
DESCRIPTION: Defines a function to update a specific property of an immutable state object. It creates a new state object by spreading the existing state, overriding the specified property with new data, and then freezing the new object using Object.freeze(). This ensures the state remains immutable and changes are tracked.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
function updateState(property, newData) {
  state = Object.freeze({
    ...state,
    [property]: newData
  });
}
```

----------------------------------------

TITLE: Passing a Named Function to setTimeout in JavaScript
DESCRIPTION: Illustrates how to use the `setTimeout` function, which executes a provided function after a specified delay. It defines a named function `displayDone` and passes its reference as the first argument to `setTimeout`, along with a 3000ms (3 second) delay.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_11

LANGUAGE: javascript
CODE:
```
function displayDone() {
  console.log('3 秒过去了');
}
// 计时器的时间单位是毫秒
setTimeout(displayDone, 3000);
```

----------------------------------------

TITLE: JavaScript Helper to Update Element Text
DESCRIPTION: Defines a JavaScript function `updateElement` that takes an element ID and a string of text. It retrieves the DOM element by its ID and updates its `textContent` property with the provided text, effectively changing the visible text and removing any child elements.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
function updateElement(id, text) {
  const element = document.getElementById(id);
  element.textContent = text;
}
```

----------------------------------------

TITLE: Commit Staged Changes in Git with Bash
DESCRIPTION: Execute `git commit -m "Your message here"` to save the staged changes to the repository history as a new commit. The `-m` flag allows providing a concise commit message directly on the command line.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_10

LANGUAGE: bash
CODE:
```
git commit -m "first commit"
```

----------------------------------------

TITLE: Initial Body and H1 Styles (CSS)
DESCRIPTION: Provides the starting CSS rules for the body (setting font family) and h1 (setting color and text alignment). This shows basic tag selectors before introducing more specific selectors like IDs and Classes.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/translations/README.zh-cn.md#_snippet_4

LANGUAGE: CSS
CODE:
```
body {
	font-family: helvetica, arial, sans-serif;
}

h1 {
	color: #3a241d;
	text-align: center;
}
```

----------------------------------------

TITLE: Setting Up User Preferences in JavaScript
DESCRIPTION: This function initializes user settings by storing the provided API key and region name in local storage. It then updates the UI to show a loading state, clear previous errors, and display a clear button. Finally, it triggers the `displayCarbonUsage` function to fetch and display carbon data using the stored credentials.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/2-forms-browsers-local-storage/translations/README.fr.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function setUpUser(apiKey, regionName) {
	localStorage.setItem('apiKey', apiKey);
	localStorage.setItem('regionName', regionName);
	loading.style.display = 'block';
	errors.textContent = '';
	clearBtn.style.display = 'block';
	//faire un premier appel
	displayCarbonUsage(apiKey, regionName);
}
```

----------------------------------------

TITLE: Pushing Local Branch to Remote Fork (Bash)
DESCRIPTION: Pushes the specified local branch to the `origin` remote, which typically points to the user's forked repository on GitHub. The `--set-upstream` flag configures the local branch to track the remote branch for easier future pushes and pulls.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_19

LANGUAGE: Bash
CODE:
```
git push --set-upstream origin [branch-name]
```

----------------------------------------

TITLE: Styling Resume Website Layout (CSS)
DESCRIPTION: Provides CSS rules to format the layout and appearance of the resume website, including font styles, spacing, grid layout for main content, and basic element styling.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/8-code-editor/1-using-a-code-editor/assignment.md#_snippet_1

LANGUAGE: css
CODE:
```
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: 16px;
    max-width: 960px;
    margin: auto;
}
h1 {
    font-size: 3em;
    letter-spacing: .6em;
    padding-top: 1em;
    padding-bottom: 1em;
}

h2 {
    font-size: 1.5em;
    padding-bottom: 1em;
}

h3 {
    font-size: 1em;
    padding-bottom: 1em;
}
main { 
    display: grid;
    grid-template-columns: 40% 60%;
    margin-top: 3em;
}
header {
    text-align: center;
    margin: auto 2em;
}

section {
    margin: auto 1em 4em 2em;
}

i {
    margin-right: .5em;
}

p {
    margin: .2em auto
}

hr {
    border: none;
    background-color: lightgray;
    height: 1px;
}

h1, h2, h3 {
    font-weight: 100;
    margin-bottom: 0;
}
#mainLeft {
    border-right: 1px solid lightgray;
}
```

----------------------------------------

TITLE: Adding Required Attribute to HTML Form Inputs
DESCRIPTION: Demonstrates how to use the `required` HTML attribute on input fields (`username` and `currency`) to make them mandatory for form submission. This is a basic client-side validation technique.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/README.md#_snippet_8

LANGUAGE: HTML
CODE:
```
<label for="user">Username (required)</label>
<input id="user" name="user" type="text" required>
...
<label for="currency">Currency (required)</label>
<input id="currency" name="currency" type="text" value="$" required>
```

----------------------------------------

TITLE: Implementing Client-Side Navigation (JavaScript)
DESCRIPTION: Uses `window.history.pushState` to change the URL and add a history entry without a page reload, then calls `updateRoute` to render the corresponding view. Requires `updateRoute` to be defined.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_9

LANGUAGE: js
CODE:
```
function navigate(path) {
  window.history.pushState({}, path, path);
  updateRoute();
}
```

----------------------------------------

TITLE: Accessing Account from State Object (JS)
DESCRIPTION: Retrieves the `account` data from the centralized `state` object. This line is added to functions like `updateDashboard` to adapt to the new state structure.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ja.md#_snippet_3

LANGUAGE: js
CODE:
```
const account = state.account;
```

----------------------------------------

TITLE: Importing JavaScript with defer in HTML
DESCRIPTION: Imports an external JavaScript file ('script.js') into the HTML document's head section. The 'defer' attribute ensures the script executes only after the HTML document is fully parsed, which is crucial for scripts that manipulate the DOM.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/translations/README.it.md#_snippet_0

LANGUAGE: html
CODE:
```
<script src="./script.js" defer></script>
```

----------------------------------------

TITLE: Filtering Dead Game Objects - JavaScript
DESCRIPTION: This code demonstrates how to remove game objects that have been marked as 'dead' from an array of game objects using the `filter` method. This ensures that only active objects remain for processing and rendering in the next game loop iteration.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/translations/README.it.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
gameObjects = gameObject.filter(go => !go.dead);
```

----------------------------------------

TITLE: Creating HTML Login Form
DESCRIPTION: Adds an HTML form with a username input field and a login button within a template. Includes a label for the username field, highlighting its importance for accessibility and usability.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/README.md#_snippet_2

LANGUAGE: HTML
CODE:
```
<template id="login">
  <h1>Bank App</h1>
  <section>
    <h2>Login</h2>
    <form id="loginForm">
      <label for="username">Username</label>
      <input id="username" name="user" type="text">
      <button>Login</button>
    </form>
  </section>
</template>
```

----------------------------------------

TITLE: Accessing Array Elements by Index in JavaScript
DESCRIPTION: Illustrates how to retrieve a specific element from an array using its zero-based index. The index is placed within square brackets after the array variable name to get the value at that position.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/4-arrays-loops/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
let iceCreamFlavors = ["Chocolate", "Strawberry", "Vanilla", "Pistachio", "Rocky Road"];
iceCreamFlavors[2]; //"Vanilla"
```

----------------------------------------

TITLE: Defining a Function with a Parameter in JavaScript
DESCRIPTION: Creates a JavaScript function `displayGreeting` that accepts one parameter, `name`. It constructs a personalized greeting string using a template literal and logs it to the console.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_4

LANGUAGE: javascript
CODE:
```
function displayGreeting(name) {
  const message = `Hello, ${name}!`;
  console.log(message);
}
```

----------------------------------------

TITLE: Cloning the Web-Dev-For-Beginners Repository (Bash)
DESCRIPTION: This command clones the main Microsoft Web-Dev-For-Beginners repository from GitHub to your local machine. It downloads all the files and history into a new directory named "Web-Dev-For-Beginners".
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/microsoft/Web-Dev-For-Beginners.git
```

----------------------------------------

TITLE: Ternary Operator Syntax (JavaScript)
DESCRIPTION: This snippet provides the general syntax for the ternary operator in JavaScript. It's a concise way to write a simple if...else statement, assigning a value to a variable based on whether a condition is true or false.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/3-making-decisions/README.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
let variable = condition ? <return this if true> : <return this if false>
```

----------------------------------------

TITLE: Subscribing to a Pub/Sub Message (Example) in JavaScript
DESCRIPTION: An example snippet showing how to subscribe a specific action (hero movement) to a defined message (`HERO_MOVE_LEFT`) using the `EventEmitter`'s `on` method. This snippet is repeated in the text to illustrate modifying behavior.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/1-introduction/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
eventEmitter.on(Messages.HERO_MOVE_LEFT, () => {
  hero.move(5,0);
});
```

----------------------------------------

TITLE: Using aria-label for Link Description (HTML)
DESCRIPTION: Demonstrates how to use the `aria-label` attribute on an anchor tag (`<a>`) to provide a more descriptive label for screen readers when the visible link text is insufficient or repetitive, as in a table with multiple 'description' links.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/3-accessibility/README.md#_snippet_0

LANGUAGE: html
CODE:
```
<a href="#" aria-label="Widget description">description</a>
```

----------------------------------------

TITLE: Passing an Anonymous JavaScript Function to setTimeout
DESCRIPTION: Demonstrates passing an anonymous function directly as a callback parameter to `setTimeout`. This is useful for functions that are only needed once.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_13

LANGUAGE: javascript
CODE:
```
setTimeout(function() {
  console.log('3 seconds has elapsed');
}, 3000);
```

----------------------------------------

TITLE: Formatting Strings with Template Literals in JavaScript
DESCRIPTION: Illustrates using template literals (backticks ``) for string formatting, allowing variables and expressions inside `${}` placeholders. Notes that template literals preserve spaces and line breaks.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_12

LANGUAGE: javascript
CODE:
```
let myString1 = "Hello";
let myString2 = "World";

`${myString1} ${myString2}!` //Hello World!
`${myString1}, ${myString2}!` //Hello, World!
```

----------------------------------------

TITLE: Responding to Browser History Changes (JavaScript)
DESCRIPTION: Assigns an event listener to the `window.onpopstate` event, which fires when the browser's history state changes (e.g., back/forward button clicks). The listener calls `updateRoute()` to update the displayed content to match the new URL. The subsequent `updateRoute()` call initializes the view on page load. Requires the `updateRoute` function.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_13

LANGUAGE: js
CODE:
```
window.onpopstate = () => updateRoute();
updateRoute();
```

----------------------------------------

TITLE: Displaying Login Error with JavaScript
DESCRIPTION: Demonstrates how to use the `updateElement` helper function within the `login` function. If the `data` object returned from the login attempt contains an `error` property, this code calls `updateElement` to display the error message in the `loginError` div.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
if (data.error) {
  return updateElement('loginError', data.error);
}
```

----------------------------------------

TITLE: Centralized State Object Initialization (JavaScript)
DESCRIPTION: Refactoring the state management by introducing a centralized `state` object to hold application data, starting with the `account` property.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.zh-tw.md#_snippet_2

LANGUAGE: js
CODE:
```
let state = {
  account: null
};
```

----------------------------------------

TITLE: Initializing Login Function - JavaScript
DESCRIPTION: Defines the initial structure of the asynchronous login function. It retrieves the login form element by its ID and extracts the username value from the 'user' input field within the form.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
async function login() {
  const loginForm = document.getElementById('loginForm')
  const user = loginForm.user.value;
}
```

----------------------------------------

TITLE: Passing an Arrow Function to setTimeout in JavaScript
DESCRIPTION: Shows the modern syntax for passing a function to `setTimeout` using an arrow function (`=>`). This is a concise way to define an anonymous function inline, commonly used in modern JavaScript.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_13

LANGUAGE: javascript
CODE:
```
setTimeout(() => {
  console.log('3 秒过去了');
}, 3000);
```

----------------------------------------

TITLE: Setting Max Length for HTML Text Inputs
DESCRIPTION: Illustrates how to apply the `maxlength` HTML attribute to text input fields (`username`, `currency`, `description`) to limit the number of characters a user can enter, improving data quality and preventing excessively long inputs.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/README.md#_snippet_9

LANGUAGE: HTML
CODE:
```
<input id="user" name="user" type="text" maxlength="20" required>
...
<input id="currency" name="currency" type="text" value="$" maxlength="5" required>
...
<input id="description" name="description" type="text" maxlength="100">
```

----------------------------------------

TITLE: Handling Pointerdown Event for Dragging (JavaScript)
DESCRIPTION: This function is triggered when a pointerdown event occurs on a draggable element. It prevents the browser's default handling of the event using `e.preventDefault()`. It logs the event object to the console for inspection and captures the initial client X and Y coordinates of the pointer (`e.clientX`, `e.clientY`), storing them in `pos3` and `pos4` respectively.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/translations/README.it.md#_snippet_4

LANGUAGE: javascript
CODE:
```
function pointerDrag(e) {
	e.preventDefault();
	console.log(e);
	pos3 = e.clientX;
	pos4 = e.clientY;
}
```

----------------------------------------

TITLE: Defining HTML Structure for a Plant Element
DESCRIPTION: Provides the HTML markup for a single plant element. It includes a container div with the class "plant-holder" and an image tag with the class "plant", an ID (for JavaScript interaction), an alt attribute, and a source path. This structure is designed to facilitate both CSS styling and future JavaScript manipulation.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/README.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<div class="plant-holder">
	<img class="plant" alt="plant" id="plant1" src="./images/plant1.png" />
</div>
```

----------------------------------------

TITLE: Cloning Your Forked Repository (Bash)
DESCRIPTION: This command clones your personal copy (fork) of the repository from GitHub to your local machine. Replace <your-repository-url> with the specific URL of your forked repository.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
git clone <your-repository-url>
```

----------------------------------------

TITLE: Adding Plant Images with Div Containers in HTML
DESCRIPTION: This HTML snippet demonstrates how to structure the page body to display plant images in two columns. It uses nested div elements with specific IDs (page, left-container, right-container) and classes (container, plant-holder) to organize img tags, each referencing a local image file and including alt text for accessibility.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/1-intro-to-html/README.md#_snippet_3

LANGUAGE: HTML
CODE:
```
<div id="page">
	<div id="left-container" class="container">
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant1" src="./images/plant1.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant2" src="./images/plant2.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant3" src="./images/plant3.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant4" src="./images/plant4.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant5" src="./images/plant5.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant6" src="./images/plant6.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant7" src="./images/plant7.png" />
		</div>
	</div>
	<div id="right-container" class="container">
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant8" src="./images/plant8.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant9" src="./images/plant9.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant10" src="./images/plant10.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant11" src="./images/plant11.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant12" src="./images/plant12.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant13" src="./images/plant13.png" />
		</div>
		<div class="plant-holder">
			<img class="plant" alt="plant" id="plant14" src="./images/plant14.png" />
		</div>
	</div>
</div>
```

----------------------------------------

TITLE: Building Extension webpack npm
DESCRIPTION: This command executes a script defined in the package.json file, typically configured to run webpack. Webpack bundles the project's source code and assets into a format suitable for a browser extension, usually outputting the result into a 'dist' folder. This step prepares the extension for installation in a browser.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/solution/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Adding Terrarium HTML Structure
DESCRIPTION: Adds a nested set of div elements with the id 'terrarium' and various classes to represent a terrarium structure. This markup is intended to be inserted into an existing HTML document.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/1-intro-to-html/README.md#_snippet_5

LANGUAGE: HTML
CODE:
```
<div id="terrarium">
	<div class="jar-top"></div>
	<div class="jar-walls">
		<div class="jar-glossy-long"></div>
		<div class="jar-glossy-short"></div>
	</div>
	<div class="dirt"></div>
	<div class="jar-bottom"></div>
</div>
```

----------------------------------------

TITLE: Declaring Boolean Variables in JavaScript
DESCRIPTION: Shows how to declare variables and assign boolean values (`true` or `false`) to them using the `let` keyword.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_13

LANGUAGE: javascript
CODE:
```
let myTrueBool = true
```

LANGUAGE: javascript
CODE:
```
let myFalseBool = false
```

----------------------------------------

TITLE: Filter Out Destroyed Game Objects - JavaScript
DESCRIPTION: This code snippet shows how to remove game objects that have been marked for destruction from an array of active game objects. It uses the `filter` array method to create a new array containing only the objects where the `dead` property is false.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
gameObjects = gameObject.filter(go => !go.dead);
```

----------------------------------------

TITLE: Handling Generic Keydown Events (JavaScript)
DESCRIPTION: Defines a function `onKeyDown` to handle keyboard key press events. It logs the key code to the console and includes a placeholder comment indicating where code should be added to prevent the browser's default behavior for the pressed key. The function is then attached as a listener to the window's 'keydown' event.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_10

LANGUAGE: javascript
CODE:
```
let onKeyDown = function (e) {
	      console.log(e.keyCode);
	        ...add the code from the lesson above to stop default behavior
	      }
    };

    window.addEventListener("keydown", onKeyDown);
```

----------------------------------------

TITLE: Creating Typing Game HTML Structure
DESCRIPTION: Defines the basic HTML layout for the typing game. It includes elements for the page title, instructions, displaying the quote and messages, a text input field for typing, and a start button. It also links to external CSS and JavaScript files.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/4-typing-game/typing-game/README.md#_snippet_2

LANGUAGE: html
CODE:
```
<!-- inside index.html -->
<html>
<head>
  <title>Typing game</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <h1>Typing game!</h1>
  <p>Practice your typing skills with a quote from Sherlock Holmes. Click **start** to begin!</p>
  <p id="quote"></p> <!-- This will display our quote -->
  <p id="message"></p> <!-- This will display any status messages -->
  <div>
    <input type="text" aria-label="current word" id="typed-value" /> <!-- The textbox for typing -->
    <button type="button" id="start">Start</button> <!-- To start the game -->
  </div>
  <script src="script.js"></script>
</body>
</html>
```

----------------------------------------

TITLE: Attempting to Reassign a Simple Constant (Invalid)
DESCRIPTION: Demonstrates an invalid operation: attempting to reassign a new simple value to a constant declared with `const`. This will result in a runtime error.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const PI = 3;
PI = 4; // 不許可
```

----------------------------------------

TITLE: Calling a Function with and without Default Parameters in JavaScript
DESCRIPTION: Illustrates calling the `displayGreeting` function. The first call uses the default value for `salutation`, while the second call overrides the default value by providing 'Hi' as the second argument.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_7

LANGUAGE: javascript
CODE:
```
displayGreeting('Christopher');
// 显示 “Hello, Christopher”

displayGreeting('Christopher', 'Hi');
// 显示 “Hi, Christopher”
```

----------------------------------------

TITLE: Setting up Window Load and Game Loop (JavaScript)
DESCRIPTION: Provides the beginning of the `window.onload` function. This function is intended to run once the page has fully loaded. It retrieves the canvas and its 2D context, loads necessary image assets asynchronously, calls `initGame` to set up the initial state, and starts a game loop using `setInterval`.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_15

LANGUAGE: javascript
CODE:
```
window.onload = async () => {
  canvas = document.getElementById("canvas");
  ctx = canvas.getContext("2d");
  heroImg = await loadTexture("assets/player.png");
  enemyImg = await loadTexture("assets/enemyShip.png");
  laserImg = await loadTexture("assets/laserRed.png");

  initGame();
  let gameLoopId = setInterval(() => {
```

----------------------------------------

TITLE: Updating HTML Form Action for JavaScript Handling
DESCRIPTION: Modifies the `action` attribute of an HTML form to call a JavaScript function (`register()`) instead of submitting traditionally. This allows client-side processing of form data.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/translations/README.fr.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<form id="registerForm" action="javascript:register()">
```

----------------------------------------

TITLE: Add Input Event Listener for Typing Game
DESCRIPTION: This JavaScript code adds an event listener to the input element (`typedValueElement`) that triggers on every `input` event. It compares the user's typed value against the current target word (`currentWord`) and the overall sentence (`words`). The logic handles four main states: completing the entire sentence, completing the current word, typing the current word correctly so far, or typing incorrectly (error state). It updates the display (`typedValueElement`, `messageElement`, `quoteElement`) and game state variables (`wordIndex`, `startTime`) accordingly.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/4-typing-game/typing-game/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
// at the end of script.js
typedValueElement.addEventListener('input', () => {
  // Get the current word
  const currentWord = words[wordIndex];
  // get the current value
  const typedValue = typedValueElement.value;

  if (typedValue === currentWord && wordIndex === words.length - 1) {
    // end of sentence
    // Display success
    const elapsedTime = new Date().getTime() - startTime;
    const message = `CONGRATULATIONS! You finished in ${elapsedTime / 1000} seconds.`;
    messageElement.innerText = message;
  } else if (typedValue.endsWith(' ') && typedValue.trim() === currentWord) {
    // end of word
    // clear the typedValueElement for the new word
    typedValueElement.value = '';
    // move to the next word
    wordIndex++;
    // reset the class name for all elements in quote
    for (const wordElement of quoteElement.childNodes) {
      wordElement.className = '';
    }
    // highlight the new word
    quoteElement.childNodes[wordIndex].className = 'highlight';
  } else if (currentWord.startsWith(typedValue)) {
    // currently correct
    // highlight the next word
    typedValueElement.className = '';
  } else {
    // error state
    typedValueElement.className = 'error';
  }
});
```

----------------------------------------

TITLE: Adding ARIA Role for Accessibility
DESCRIPTION: Modifies the `loginError` div in the HTML to include the ARIA attribute `role="alert"`. This designates the element as a live region of type "alert", ensuring that dynamic content changes within it are announced by screen readers, improving accessibility.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_10

LANGUAGE: HTML
CODE:
```
<div id="loginError" role="alert"></div>
```

----------------------------------------

TITLE: Installing Node.js Dependencies (Bash)
DESCRIPTION: Runs the `npm install` command to download and install all required Node.js packages and dependencies listed in the project's `package.json` file.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/quiz-app/README.md#_snippet_3

LANGUAGE: Bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Attempting to Reassign an Object Constant (Invalid)
DESCRIPTION: Shows an invalid operation: attempting to reassign a new object reference to a constant declared with `const`. While object properties can be changed, the reference itself cannot be reassigned.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const obj = { a: 3 };
obj = { b: 5 } // 不許可
```

----------------------------------------

TITLE: Handling Form Submission in JavaScript
DESCRIPTION: Defines the `handleSubmit` function which takes an event object. It prevents the default browser form submission behavior using `e.preventDefault()` and then calls the `setUpUser` function, passing the current values from the `apiKey` and `region` input fields.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/2-forms-browsers-local-storage/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
function handleSubmit(e) {
	e.preventDefault();
	setUpUser(apiKey.value, region.value);
}
```

----------------------------------------

TITLE: Updating Login Function with Account Fetch - JavaScript
DESCRIPTION: Updates the login function to call `getAccount` asynchronously. It checks for errors in the fetched data, stores the successful account data in a global variable, and navigates the user to the dashboard page.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
async function login() {
  const loginForm = document.getElementById('loginForm')
  const user = loginForm.user.value;
  const data = await getAccount(user);

  if (data.error) {
    return console.log('loginError', data.error);
  }

  account = data;
  navigate('/dashboard');
}
```

----------------------------------------

TITLE: Explicitly Declaring and Initializing a Variable in JavaScript
DESCRIPTION: This snippet demonstrates the common practice of explicitly declaring a variable (`myVariable` using `let`) and assigning it an initial value (`123`) in a single statement. This is known as explicit initialization.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
let myVariable = 123;
```

----------------------------------------

TITLE: Defining App Placeholder Div in HTML
DESCRIPTION: Creates a div element with the ID "app" in the HTML body. This element serves as a container where different screen templates will be dynamically inserted and displayed by JavaScript. It initially shows a "Loading..." message.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<div id="app">Loading...</div>
```

----------------------------------------

TITLE: Extending GameObject for Hero - JavaScript
DESCRIPTION: Shows the beginning of the `Hero` class definition, which inherits from `GameObject`. The constructor is outlined, indicating that it will need to handle properties specific to the hero, such as type and speed, in addition to position. The code provided is incomplete.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/translations/README.ja.md#_snippet_1

LANGUAGE: javascript
CODE:
```
class Hero extends GameObject {
  constructor(x, y) {
    ...x, y, type, speedが必要です。
  }
}
```

----------------------------------------

TITLE: Deleting a Local Git Branch (Bash)
DESCRIPTION: Deletes the specified local branch. The `-d` flag is a safe option that prevents deletion if the branch contains unmerged changes. This is typically done after the branch's changes have been successfully merged into another branch.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_20

LANGUAGE: Bash
CODE:
```
git branch -d [branch-name]
```

----------------------------------------

TITLE: Performing Arithmetic Operations in JavaScript
DESCRIPTION: Illustrates basic arithmetic operations in JavaScript using operators like addition (+), subtraction (-), multiplication (*), division (/), and remainder (%).
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
1 + 2 //expected answer is 3
```

LANGUAGE: javascript
CODE:
```
1 - 2 //expected answer is -1
```

LANGUAGE: javascript
CODE:
```
1 * 2 //expected answer is 2
```

LANGUAGE: javascript
CODE:
```
1 / 2 //expected answer is 0.5
```

LANGUAGE: javascript
CODE:
```
1 % 2 //expected answer is 1
```

----------------------------------------

TITLE: Styling Terrarium Jar Elements (CSS)
DESCRIPTION: Provides CSS rules for elements representing parts of the terrarium jar (.jar-walls, .jar-top, .jar-bottom, .dirt). It uses absolute positioning, percentage dimensions, background colors, border-radius, opacity, and z-index to construct the visual appearance and layout of the jar structure.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/translations/README.zh-cn.md#_snippet_9

LANGUAGE: CSS
CODE:
```
.jar-walls {
	height: 80%;
	width: 60%;
	background: #d1e1df;
	border-radius: 1rem;
	position: absolute;
	bottom: 0.5%;
	left: 20%;
	opacity: 0.5;
	z-index: 1;
}

.jar-top {
	width: 50%;
	height: 5%;
	background: #d1e1df;
	position: absolute;
	bottom: 80.5%;
	left: 25%;
	opacity: 0.7;
	z-index: 1;
}

.jar-bottom {
	width: 50%;
	height: 1%;
	background: #d1e1df;
	position: absolute;
	bottom: 0%;
	left: 25%;
	opacity: 0.7;
}

.dirt {
	width: 60%;
	height: 5%;
	background: #3a241d;
	position: absolute;
	border-radius: 0 0 1rem 1rem;
	bottom: 1%;
	left: 20%;
	opacity: 0.7;
	z-index: -1;
}
```

----------------------------------------

TITLE: Centralized State Object Declaration (JavaScript)
DESCRIPTION: The new declaration introducing a `state` object to centralize all application data. This refactoring lays the foundation for improved state management.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_2

LANGUAGE: js
CODE:
```
let state = {
  account: null
};
```

----------------------------------------

TITLE: HTML Element with ID and Class
DESCRIPTION: Shows an example of an HTML div element having both an id (left-container) and a class (container). This is used to illustrate how elements can be targeted by either ID (unique) or Class (reusable) selectors in CSS, and how to potentially refactor repetitive CSS.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/translations/README.zh-cn.md#_snippet_6

LANGUAGE: HTML
CODE:
```
<div id="left-container" class="container"></div>
```

----------------------------------------

TITLE: Generating Fibonacci Sequence in JavaScript
DESCRIPTION: This JavaScript snippet calculates and prints the first 10 numbers of the Fibonacci sequence. It demonstrates the use of variables, loops, and basic arithmetic operations in a high-level language.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/1-intro-to-programming-languages/translations/README.zh-cn.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
let number = 10
let n1 = 0, n2 = 1, nextTerm;

for (let i = 1; i <= number; i++) {
    console.log(n1);
    nextTerm = n1 + n2;
    n1 = n2;
    n2 = nextTerm;
}
```

----------------------------------------

TITLE: Navigate and Start Development Server (NPM)
DESCRIPTION: Provides the bash commands required to change the current directory to the project folder ('your-work') and start the local development server using the 'npm start' command, which typically serves the 'index.html' file.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/2-drawing-to-canvas/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
cd your-work
npm start
```

----------------------------------------

TITLE: Defining a Simple Greeting Function in JavaScript
DESCRIPTION: Creates a JavaScript function named `displayGreeting` that outputs the string 'Hello, world!' to the console when called. It takes no parameters.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/translations/README.zh-cn.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function displayGreeting() {
  console.log('Hello, world!');
}
```

----------------------------------------

TITLE: Structuring Input Form HTML
DESCRIPTION: This HTML snippet defines the structure for the extension's input form within the `index.html` file. It includes fields for entering the region name and API key, along with a submit button. This form is intended to collect user information and potentially save it to local storage.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/1-about-browsers/README.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<form class="form-data" autocomplete="on">
	<div>
		<h2>New? Add your Information</h2>
	</div>
	<div>
		<label for="region">Region Name</label>
		<input type="text" id="region" required class="region-name" />
	</div>
	<div>
		<label for="api">Your API Key from tmrow</label>
		<input type="text" id="api" required class="api-key" />
	</div>
	<button class="search-btn">Submit</button>
</form>
```

----------------------------------------

TITLE: Initializing App State from localStorage - JavaScript
DESCRIPTION: Defines and immediately calls an init function to handle application startup logic. It attempts to retrieve saved account data from localStorage using the storageKey. If data is found, it parses the JSON string back into an object and updates the application state using updateState(). It also includes previous initialization code for handling browser history state changes and initial route processing.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
function init() {
  const savedAccount = localStorage.getItem(storageKey);
  if (savedAccount) {
    updateState('account', JSON.parse(savedAccount));
  }

  // Our previous initialization code
  window.onpopstate = () => updateRoute();
  updateRoute();
}

init();
```

----------------------------------------

TITLE: Handling Keydown Events - JavaScript
DESCRIPTION: Defines a function `onKeyDown` intended to process keyboard key press events. It logs the key code of the pressed key to the console and is attached as the handler for the global `keydown` event on the window object. Additional code is needed to implement specific actions and prevent default browser behavior.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/translations/README.ja.md#_snippet_3

LANGUAGE: javascript
CODE:
```
let onKeyDown = function (e) {
	      console.log(e.keyCode);
	        ...add the code from the lesson above to stop default behavior
	      }
    };

    window.addEventListener("keydown", onKeyDown);
```

----------------------------------------

TITLE: Initializing Centralized Immutable State (JavaScript)
DESCRIPTION: Initializes the centralized `state` object as immutable using `Object.freeze` from the beginning.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.zh-tw.md#_snippet_5

LANGUAGE: js
CODE:
```
let state = Object.freeze({
  account: null
});
```

----------------------------------------

TITLE: Updating Account within Centralized State (JavaScript)
DESCRIPTION: How to update the account data after centralizing the state into a `state` object. This pattern should replace direct updates to the old global `account` variable.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_4

LANGUAGE: js
CODE:
```
state.account = ...
```

----------------------------------------

TITLE: Modeling Game Objects with Inheritance (JavaScript)
DESCRIPTION: Defines a base `GameObject` class and derived classes (`Movable`, `Hero`, `Tree`) using JavaScript's class-based inheritance. Shows how properties and methods are inherited and overridden to represent different types of game objects and their behaviors.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/1-introduction/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
//set up the class GameObject
class GameObject {
  constructor(x, y, type) {
    this.x = x;
    this.y = y;
    this.type = type;
  }
}

//this class will extend the GameObject's inherent class properties
class Movable extends GameObject {
  constructor(x,y, type) {
    super(x,y, type)
  }

//this movable object can be moved on the screen
  moveTo(x, y) {
    this.x = x;
    this.y = y;
  }
}

//this is a specific class that extends the Movable class, so it can take advantage of all the properties that it inherits
class Hero extends Movable {
  constructor(x,y) {
    super(x,y, 'Hero')
  }
}

//this class, on the other hand, only inherits the GameObject properties
class Tree extends GameObject {
  constructor(x,y) {
    super(x,y, 'Tree')
  }
}

//a hero can move...
const hero = new Hero();
hero.moveTo(5,5);

//but a tree cannot
const tree = new Tree();
```

----------------------------------------

TITLE: Attempting to Reassign a Constant Object Reference (Not Allowed) in JavaScript
DESCRIPTION: This snippet shows an attempt to reassign the entire object reference held by a constant (`obj`) to a new object (`{ b: 5 }`). While the object's *contents* can be modified, the *reference* itself cannot be changed when declared with `const`. This will cause an error.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const obj = { a: 3 };
obj = { b: 5 } // not allowed
```

----------------------------------------

TITLE: Implementing Game Loop with setInterval in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates a typical game loop implementation using `setInterval`. The function inside `setInterval` is executed every 200 milliseconds. It clears the canvas, fills the background, and then calls functions to draw the hero, enemies, and static objects.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
let gameLoopId = setInterval(() =>
  function gameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    drawHero();
    drawEnemies();
    drawStaticObjects();
}, 200);
```

----------------------------------------

TITLE: Updating Account Data in JavaScript
DESCRIPTION: Asynchronously fetches the latest account data from the server for the currently logged-in user. If the user is not logged in or fetching fails, it logs the user out. Otherwise, it updates the application state with the new data.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_15

LANGUAGE: js
CODE:
```
async function updateAccountData() {
  const account = state.account;
  if (!account) {
    return logout();
  }

  const data = await getAccount(account.user);
  if (data.error) {
    return logout();
  }

  updateState('account', data);
}
```

----------------------------------------

TITLE: Updating Account State after Login (JS)
DESCRIPTION: Calls the `updateState` function to update the `account` property in the centralized state object with the `data` received after a successful user login. This replaces direct state modification.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ja.md#_snippet_7

LANGUAGE: js
CODE:
```
updateState('account', data);
```

----------------------------------------

TITLE: Concatenating Strings with Plus Operator in JavaScript
DESCRIPTION: Demonstrates how to join two or more strings together using the '+' operator. Shows examples with and without adding spaces or punctuation.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_11

LANGUAGE: javascript
CODE:
```
let myString1 = "Hello";
let myString2 = "World";

myString1 + myString2 + "!"; //HelloWorld!
myString1 + " " + myString2 + "!"; //Hello World!
myString1 + ", " + myString2 + "!"; //Hello, World!
```

----------------------------------------

TITLE: Setting Up Game Initialization and Loop - JavaScript
DESCRIPTION: Configures the `window.onload` event handler to start the game once the page resources are loaded. It retrieves the canvas and context, loads necessary image textures asynchronously, calls `initGame` to set up the initial state, and starts a game loop using `setInterval` to clear the canvas, redraw the background, and draw all game objects periodically.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/translations/README.ja.md#_snippet_8

LANGUAGE: javascript
CODE:
```
window.onload = async () => {
  canvas = document.getElementById("canvas");
  ctx = canvas.getContext("2d");
  heroImg = await loadTexture("assets/player.png");
  enemyImg = await loadTexture("assets/enemyShip.png");
  laserImg = await loadTexture("assets/laserRed.png");

  initGame();
  let gameLoopId = setInterval(() => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    drawGameObjects(ctx);
  }, 100)
  
};
```

----------------------------------------

TITLE: Loading Image Asset (Basic JavaScript)
DESCRIPTION: Shows the basic method to load an image asset in JavaScript by creating an Image object, setting its source, and using the onload event to know when the image file has finished loading and is ready to be used.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/2-drawing-to-canvas/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const img = new Image();
img.src = 'path/to/my/image.png';
img.onload = () => {
  // image loaded and ready to be used
}
```

----------------------------------------

TITLE: Implementing Pub/Sub EventEmitter Class in JavaScript
DESCRIPTION: Defines a JavaScript class `EventEmitter` to manage message listeners and emissions, forming the core of the Pub/Sub pattern. It includes methods to register listeners (`on`) and trigger them (`emit`).
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/1-introduction/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
//set up an EventEmitter class that contains listeners
class EventEmitter {
  constructor() {
    this.listeners = {};
  }
//when a message is received, let the listener to handle its payload
  on(message, listener) {
    if (!this.listeners[message]) {
      this.listeners[message] = [];
    }
    this.listeners[message].push(listener);
  }
//when a message is sent, send it to a listener with some payload
  emit(message, payload = null) {
    if (this.listeners[message]) {
      this.listeners[message].forEach(l => l(message, payload))
    }
  }
}
```

----------------------------------------

TITLE: Replace Navigation with Logout (JavaScript)
DESCRIPTION: Shows how to replace a direct navigation call with a call to the logout function. This ensures that the state is properly cleared before the user is redirected to the login page, typically used in scenarios like session expiration or explicit logout actions.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ko.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
return logout()
```

----------------------------------------

TITLE: Calling JavaScript Function Overriding Default Parameter
DESCRIPTION: This snippet calls the `displayGreeting` function providing arguments for both `name` and `salutation`. The provided value ('Hi') overrides the default value for the `salutation` parameter.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/2-functions-methods/README.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
displayGreeting('Christopher', 'Hi');
// displays "Hi, Christopher"
```

----------------------------------------

TITLE: Implementing Game-Induced Movement with setInterval (JavaScript)
DESCRIPTION: Demonstrates how to use the `setInterval` function to create automatic, time-based movement for a game object. The provided callback function is executed repeatedly at a fixed interval, allowing the object's position (e.g., enemy.y) to be updated incrementally over time.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
let id = setInterval(() => {
  //move the enemy on the y axis
  enemy.y += 10;
})
```

----------------------------------------

TITLE: Modifying an Object Property of a Constant (Valid)
DESCRIPTION: Illustrates a valid operation: changing a property value within an object that was assigned to a constant. The constant's reference to the object remains unchanged, but the object's content is mutable.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const obj = { a: 3 };
obj.a = 5;  // 許可
```

----------------------------------------

TITLE: Implementing Logout Functionality in JavaScript
DESCRIPTION: Defines a logout function that clears the user's account data from the state by calling updateState with null for the account property. After clearing the state, it navigates the user to the login page using a navigate function (assumed to be defined elsewhere).
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
function logout() {
  updateState('account', null);
  navigate('/login');
}
```

----------------------------------------

TITLE: Implement Hero Game Object with Cooldown (JavaScript)
DESCRIPTION: Defines the Hero class, extending GameObject, representing the player's ship. It includes properties for dimensions, type, speed, and a cooldown mechanism for firing lasers. The fire() method creates a new Laser instance and starts a timer to manage the firing cooldown, while canFire() checks if the cooldown has expired.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_14

LANGUAGE: javascript
CODE:
```
class Hero extends GameObject {
  constructor(x, y) {
    super(x, y);
    (this.width = 99), (this.height = 75);
    this.type = "Hero";
    this.speed = { x: 0, y: 0 };
    this.cooldown = 0;
  }
  fire() {
    gameObjects.push(new Laser(this.x + 45, this.y - 10));
    this.cooldown = 500;

    let id = setInterval(() => {
      if (this.cooldown > 0) {
        this.cooldown -= 100;
      } else {
        clearInterval(id);
      }m
    }, 200);
  }
  canFire() {
    return this.cooldown === 0;
  }
}
```

----------------------------------------

TITLE: Importing External JavaScript File (HTML)
DESCRIPTION: Imports the `script.js` file into the HTML document's `<head>`. The `defer` attribute ensures the script executes only after the HTML is fully parsed, which is important for DOM manipulation scripts that rely on elements being present.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/README.md#_snippet_0

LANGUAGE: HTML
CODE:
```
	<script src="./script.js" defer></script>
```

----------------------------------------

TITLE: Importing JavaScript File HTML
DESCRIPTION: This HTML script tag imports the `app.js` file into the document's head. The `defer` attribute ensures the script is executed after the document has been parsed, but before firing `DOMContentLoaded`.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_4

LANGUAGE: HTML
CODE:
```
<script src="app.js" defer></script>
```

----------------------------------------

TITLE: Listening for Enter Key Press in JavaScript
DESCRIPTION: Adds a condition to a window event listener to detect when the 'Enter' key is pressed, emitting a specific message via the event emitter.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
 else if(evt.key === "Enter") {
    eventEmitter.emit(Messages.KEY_EVENT_ENTER);
  }
```

----------------------------------------

TITLE: Accessing Account from Centralized State (JavaScript)
DESCRIPTION: How to access the account data from the centralized `state` object within functions that need to use the account information, such as `updateDashboard()`. This promotes reading from the single state source.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_5

LANGUAGE: js
CODE:
```
const account = state.account;
```

----------------------------------------

TITLE: Adding Error Placeholder HTML
DESCRIPTION: Inserts an empty `div` element with the ID `loginError` just before the login button in the HTML form. This element serves as a placeholder for displaying dynamic error messages using JavaScript.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_7

LANGUAGE: HTML
CODE:
```
<div id="loginError"></div>
<button>Login</button>
```

----------------------------------------

TITLE: Defining Path-Based updateRoute Function JavaScript
DESCRIPTION: This modified JavaScript function updates the displayed content based on the current URL path. It uses the `routes` object to find the template ID corresponding to `window.location.pathname` and then updates the 'app' element.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
function updateRoute() {
  const path = window.location.pathname;
  const route = routes[path];

  const template = document.getElementById(route.templateId);
  const view = template.content.cloneNode(true);
  const app = document.getElementById('app');
  app.innerHTML = '';
  app.appendChild(view);
}
```

----------------------------------------

TITLE: Calling Logout from Dashboard Update (JS)
DESCRIPTION: Replaces the direct navigation call in the `updateDashboard` function with a call to the new `logout` function. This ensures that the account state is cleared when the user is redirected to the login page from the dashboard.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ja.md#_snippet_9

LANGUAGE: js
CODE:
```
return logout()
```

----------------------------------------

TITLE: Handling Element Drag Movement in JavaScript
DESCRIPTION: This function is called during a drag operation (likely on `pointermove`). It calculates the difference between the previous and current pointer positions (`pos1`, `pos2`), updates the previous positions (`pos3`, `pos4`), and then updates the element's `top` and `left` CSS properties based on its current offset and the calculated movement difference. It relies on variables (`pos1` through `pos4`, `terrariumElement`) likely defined in an outer scope.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
function elementDrag(e) {
	pos1 = pos3 - e.clientX;
	pos2 = pos4 - e.clientY;
	pos3 = e.clientX;
	pos4 = e.clientY;
	console.log(pos1, pos2, pos3, pos4);
	terrariumElement.style.top = terrariumElement.offsetTop - pos2 + 'px';
	terrariumElement.style.left = terrariumElement.offsetLeft - pos1 + 'px';
}
```

----------------------------------------

TITLE: Refreshing Dashboard View in JavaScript
DESCRIPTION: An asynchronous function that first calls `updateAccountData` to fetch the latest account information from the server. After the data is updated, it calls `updateDashboard` to refresh the HTML elements displayed on the dashboard page.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_16

LANGUAGE: js
CODE:
```
async function refresh() {
  await updateAccountData();
  updateDashboard();
}
```

----------------------------------------

TITLE: Initializing Extension State and Resetting in JavaScript
DESCRIPTION: Defines the `init` function to check local storage for saved API key and region. It displays the form if keys are missing or calls `displayCarbonUsage` if they are found, adjusting UI visibility. The `reset` function clears the region from local storage and re-runs `init` to reset the application state.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/2-forms-browsers-local-storage/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
function init() {
	//if anything is in localStorage, pick it up
	const storedApiKey = localStorage.getItem('apiKey');
	const storedRegion = localStorage.getItem('regionName');

	//set icon to be generic green
	//todo

	if (storedApiKey === null || storedRegion === null) {
		//if we don't have the keys, show the form
		form.style.display = 'block';
		results.style.display = 'none';
		loading.style.display = 'none';
		clearBtn.style.display = 'none';
		errors.textContent = '';
	} else {
        //if we have saved keys/regions in localStorage, show results when they load
        displayCarbonUsage(storedApiKey, storedRegion);
		results.style.display = 'none';
		form.style.display = 'none';	
		clearBtn.style.display = 'block';
	}
};

function reset(e) {
	e.preventDefault();
	//clear local storage for region only
	localStorage.removeItem('regionName');
	init();
}
```

----------------------------------------

TITLE: Attempting to Reassign a Simple Constant Value (Not Allowed) in JavaScript
DESCRIPTION: This snippet demonstrates an attempt to reassign a new value (`4`) to a constant (`PI`) that holds a simple primitive value (`3`). This operation is not allowed for constants declared with `const` and will result in an error.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const PI = 3;
PI = 4; // not allowed
```

----------------------------------------

TITLE: Handling Pointer Down Event (JS)
DESCRIPTION: This function is triggered by the `onpointerdown` event on a draggable element. It prevents the browser's default drag behavior, logs the event object for inspection, and captures the initial x and y coordinates of the pointer (`e.clientX`, `e.clientY`) into local variables (`pos3`, `pos4`) for later use in calculating movement.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
function pointerDrag(e) {
	e.preventDefault();
	console.log(e);
	pos3 = e.clientX;
	pos4 = e.clientY;
}
```

----------------------------------------

TITLE: Creating HTML Structure for Resume Website (HTML)
DESCRIPTION: Provides the foundational HTML markup for a personal resume website. It includes sections for contact information, skills, education, an 'About' section, and work experience. The code links to an external CSS file (`style.css`) and the Font Awesome library for icons.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/8-code-editor/1-using-a-code-editor/assignment.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<html>

    <head>
        <link href="style.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
        <title>Your Name Goes Here!</title>
    </head>
    <body>
        <header id="header">
            <!-- resume header with your name and title -->
            <h1>Your Name Goes Here!</h1>
            <hr>
            Your Role!
            <hr>
        </header>
        <main>
            <article id="mainLeft">
                <section>
                    <h2>CONTACT</h2>
                    <!-- contact info including social media -->
                    <p>
                        <i class="fa fa-envelope" aria-hidden="true"></i>
                        <a href="mailto:username@domain.top-level domain">Write your email here</a>
                    </p>
                    <p>
                        <i class="fab fa-github" aria-hidden="true"></i>
                        <a href="github.com/yourGitHubUsername">Write your username here!</a>
                    </p>
                    <p>
                        <i class="fab fa-linkedin" aria-hidden="true"></i>
                        <a href="linkedin.com/yourLinkedInUsername">Write your username here!</a>
                    </p>
                </section>
                <section>
                    <h2>SKILLS</h2>
                    <!-- your skills -->
                    <ul>
                        <li>Skill 1!</li>
                        <li>Skill 2!</li>
                        <li>Skill 3!</li>
                        <li>Skill 4!</li>
                    </ul>
                </section>
                <section>
                    <h2>EDUCATION</h2>
                    <!-- your education -->
                    <h3>Write your course here!</h3>
                    <p>
                        Write your institution here!
                    </p>
                    <p>
                        Start - End Date
                    </p>
                </section>            
            </article>
            <article id="mainRight">
                <section>
                    <h2>ABOUT</h2>
                    <!-- about you -->
                    <p>Write a blurb about yourself!</p>
                </section>
                <section>
                    <h2>WORK EXPERIENCE</h2>
                    <!-- your work experience -->
                    <h3>Job Title</h3>
                    <p>
                        Organization Name Goes Here | Start Month – End Month
                    </p>
                    <ul>
                            <li>Task 1 - Write what you did!</li>
                            <li>Task 2 - Write what you did!</li>
                            <li>Write the outcomes/impact of your contribution</li>
                            
                    </ul>
                    <h3>Job Title 2</h3>
                    <p>
                        Organization Name Goes Here | Start Month – End Month
                    </p>
                    <ul>
                            <li>Task 1 - Write what you did!</li>
                            <li>Task 2 - Write what you did!</li>

```

----------------------------------------

TITLE: Initializing Centralized State Object (JS)
DESCRIPTION: Initializes a centralized `state` object to manage application data. Initially, it contains only the `account` property, set to `null`, providing a structure for future state expansion.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ja.md#_snippet_2

LANGUAGE: js
CODE:
```
let state = {
  account: null
};
```

----------------------------------------

TITLE: Demonstrating Case Sensitivity in JavaScript
DESCRIPTION: Provides an example highlighting that JavaScript variable names are case-sensitive, meaning `age` and `Age` are treated as distinct variables.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_14

LANGUAGE: javascript
CODE:
```
let age = 1; let Age = 2; age == Age
```

----------------------------------------

TITLE: List Git Configuration (Shell)
DESCRIPTION: Execute this command in the terminal to display your current Git configuration settings, including the global username and email you previously set.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
git config --list
```

----------------------------------------

TITLE: Getting Rectangle Representation for Collision - JavaScript
DESCRIPTION: This method returns an object representing the bounding rectangle of a game object, useful for collision detection. It calculates the top, left, bottom, and right coordinates based on the object's position (x, y) and dimensions (width, height).
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/translations/README.it.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
rectFromGameObject() {
  return {
    top: this.y,
    left: this.x,
    bottom: this.y + this.height,
    right: this.x + this.width
  }
}
```

----------------------------------------

TITLE: Adding Fallback for Undefined Routes (JavaScript)
DESCRIPTION: Checks if the current `window.location.pathname` matches a defined route. If not, it calls `navigate('/login')` to redirect the user to the login page, preventing errors for unknown paths. Requires `routes` object and `navigate` function.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_10

LANGUAGE: js
CODE:
```
function updateRoute() {
  const path = window.location.pathname;
  const route = routes[path];

  if (!route) {
    return navigate('/login');
  }

  ...
```

----------------------------------------

TITLE: Adding Event Listeners and Initializing App (JavaScript)
DESCRIPTION: Adds event listeners to the form for submission, triggering the `handleSubmit` function, and to the clear button for resetting, triggering the `reset` function. It also calls an `init` function to start the application logic when the script loads.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/2-forms-browsers-local-storage/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
form.addEventListener('submit', (e) => handleSubmit(e));
clearBtn.addEventListener('click', (e) => reset(e));
init();
```

----------------------------------------

TITLE: Declaring String Variables and Literals in JavaScript
DESCRIPTION: Shows examples of string literals using single and double quotes, and how to store a string value in a variable.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_10

LANGUAGE: javascript
CODE:
```
'This is a string'
```

LANGUAGE: javascript
CODE:
```
"This is also a string"
```

LANGUAGE: javascript
CODE:
```
let myString = 'This is a string value stored in a variable';
```

----------------------------------------

TITLE: String Concatenation using the Plus Operator
DESCRIPTION: Illustrates how to combine two or more strings (or string variables) into a single string using the `+` operator. Spaces and punctuation must be explicitly added.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_11

LANGUAGE: javascript
CODE:
```
let myString1 = "Hello";
let myString2 = "World";

myString1 + myString2 + "!"; //HelloWorld!
myString1 + " " + myString2 + "!"; //Hello World!
myString1 + ", " + myString2 + "!"; //Hello, World!
```

----------------------------------------

TITLE: Implementing Logout Function (JS)
DESCRIPTION: Defines a `logout` function that clears the user's account data from the state by setting the `account` property to `null` using `updateState`, and then navigates the user to the login page.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ja.md#_snippet_8

LANGUAGE: js
CODE:
```
function logout() {
  updateState('account', null);
  navigate('/login');
}
```

----------------------------------------

TITLE: Updating Dashboard Elements with Account Data JS
DESCRIPTION: Defines a JavaScript function to update the dashboard's description, balance, and currency elements using account data, navigating to login if account data is missing and formatting the balance.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
function updateDashboard() {
  if (!account) {
    return navigate('/login');
  }

  updateElement('description', account.description);
  updateElement('balance', account.balance.toFixed(2));
  updateElement('currency', account.currency);
}
```

----------------------------------------

TITLE: Assigning Pointer Move and Up Handlers (JavaScript)
DESCRIPTION: This snippet assigns the `elementDrag` function to handle the `onpointermove` event on the entire document, which will track the pointer's movement while dragging. It also assigns the `stopElementDrag` function to handle the `onpointerup` event, which will signify the end of the drag operation when the pointer is released.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/translations/README.it.md#_snippet_5

LANGUAGE: javascript
CODE:
```
document.onpointermove = elementDrag;
document.onpointerup = stopElementDrag;
```

----------------------------------------

TITLE: Styling Containers by ID (CSS)
DESCRIPTION: Defines CSS rules for elements with the IDs left-container and right-container using the # selector. It sets background color, width, position (absolute), height, and padding, demonstrating how to position elements using absolute positioning relative to the viewport or a positioned ancestor.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/translations/README.zh-cn.md#_snippet_5

LANGUAGE: CSS
CODE:
```
#left-container {
	background-color: #eee;
	width: 15%;
	left: 0px;
	top: 0px;
	position: absolute;
	height: 100%;
	padding: 10px;
}

#right-container {
	background-color: #eee;
	width: 15%;
	right: 0px;
	top: 0px;
	position: absolute;
	height: 100%;
	padding: 10px;
}
```

----------------------------------------

TITLE: Referencing and Preparing DOM Elements for Dragging in JavaScript
DESCRIPTION: Selects specific HTML elements (plants 1 through 14) by their unique IDs using `document.getElementById()` and passes each element reference to a `dragElement` function. This prepares these elements for interactive dragging functionality on the web page.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/translations/README.it.md#_snippet_1

LANGUAGE: javascript
CODE:
```
dragElement(document.getElementById('plant1'));
dragElement(document.getElementById('plant2'));
dragElement(document.getElementById('plant3'));
dragElement(document.getElementById('plant4'));
dragElement(document.getElementById('plant5'));
dragElement(document.getElementById('plant6'));
dragElement(document.getElementById('plant7'));
dragElement(document.getElementById('plant8'));
dragElement(document.getElementById('plant9'));
dragElement(document.getElementById('plant10'));
dragElement(document.getElementById('plant11'));
dragElement(document.getElementById('plant12'));
dragElement(document.getElementById('plant13'));
dragElement(document.getElementById('plant14'));
```

----------------------------------------

TITLE: Declaring String Literals in JavaScript
DESCRIPTION: Shows how to define string literals in JavaScript using either single quotes (`'...'`) or double quotes (`"..."`). Both are valid ways to represent text.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_9

LANGUAGE: javascript
CODE:
```
'This is a string'
```

LANGUAGE: javascript
CODE:
```
"This is also a string"
```

----------------------------------------

TITLE: Implement Weapon Cooldown Mechanism - JavaScript
DESCRIPTION: This example demonstrates a cooldown system using a `Cooldown` class and integrating it into a `Weapon` class. The `Cooldown` class uses `setTimeout` to track the cooldown period, while the `Weapon` class checks the cooldown status before allowing a laser to be fired, preventing rapid firing.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
class Cooldown {
  constructor(time) {
    this.cool = false;
    setTimeout(() => {
      this.cool = true;
    }, time)
  }
}

class Weapon {
  constructor {
  }
  fire() {
    if (!this.cooldown || this.cooldown.cool) {
      // produce a laser
      this.cooldown = new Cooldown(500);
    } else {
      // do nothing - it hasn't cooled down yet.
    }
  }
}
```

----------------------------------------

TITLE: Handling Enemy Collisions in JavaScript
DESCRIPTION: Iterates through each enemy, checks for intersection with the hero's rectangle using 'intersectRect', and emits a 'COLLISION_ENEMY_HERO' message via the event emitter if a collision occurs, passing the colliding enemy object.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/5-keeping-score/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
enemies.forEach(enemy => {
    const heroRect = hero.rectFromGameObject();
    if (intersectRect(heroRect, enemy.rectFromGameObject())) {
      eventEmitter.emit(Messages.COLLISION_ENEMY_HERO, { enemy });
    }
  })
```

----------------------------------------

TITLE: Handling Arrow Key Events with EventEmitter (JavaScript)
DESCRIPTION: Adds a 'keyup' event listener to the window. It checks which arrow key was released and emits a corresponding message using an `eventEmitter` instance, facilitating a Pub/Sub pattern for handling player movement input.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_11

LANGUAGE: javascript
CODE:
```
window.addEventListener("keyup", (evt) => {
  if (evt.key === "ArrowUp") {
    eventEmitter.emit(Messages.KEY_EVENT_UP);
  } else if (evt.key === "ArrowDown") {
    eventEmitter.emit(Messages.KEY_EVENT_DOWN);
  } else if (evt.key === "ArrowLeft") {
    eventEmitter.emit(Messages.KEY_EVENT_LEFT);
  } else if (evt.key === "ArrowRight") {
    eventEmitter.emit(Messages.KEY_EVENT_RIGHT);
  }
});
```

----------------------------------------

TITLE: Accessing Account from Centralized State (JavaScript)
DESCRIPTION: Accessing the `account` data from the centralized `state` object within a function (`updateDashboard`) after the state refactoring.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.zh-tw.md#_snippet_3

LANGUAGE: js
CODE:
```
const account = state.account;
```

----------------------------------------

TITLE: Access Account from State (JavaScript)
DESCRIPTION: Demonstrates how to access the account data stored within the central state object. This pattern is used within functions like updateDashboard to retrieve the current account information.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ko.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const account = state.account;
```

----------------------------------------

TITLE: Importing Quiz Translation in index.js (JavaScript)
DESCRIPTION: Demonstrates how to import a new JSON translation file (e.g., `ex.json`) into the `assets/translations/index.js` file. It shows how to import the file and then add it to the `messages` object using its localization key.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/quiz-app/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import ex from "./ex.json";

// if 'ex' is localization key then enter it like so in `messages` to expose it 

const messages = {
  ex: ex[0],
};

export default messages;
```

----------------------------------------

TITLE: Defining Dashboard Page HTML Template
DESCRIPTION: Defines an HTML template for the dashboard screen using the <template> element with the ID "dashboard". It includes a header with navigation links, a section for displaying the balance, and a section with a table structure for listing transactions.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_3

LANGUAGE: HTML
CODE:
```
<template id="dashboard">
  <header>
    <h1>Bank App</h1>
    <a href="/login">Logout</a>
  </header>
  <section>
    Balance: 100$
  </section>
  <section>
    <h2>Transactions</h2>
    <table>
      <thead>
        <tr>
          <th>Date</th>
          <th>Object</th>
          <th>Amount</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </section>
</template>
```

----------------------------------------

TITLE: Implementing Cooldown Timer Class - JavaScript
DESCRIPTION: This JavaScript class implements a simple cooldown mechanism. The constructor sets a timer that, after a specified duration, sets the `cool` property to true, indicating the cooldown period has ended.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/translations/README.it.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
class Cooldown {
  constructor(time) {
    this.cool = false;
    setTimeout(() => {
      this.cool = true;
    }, time)
  }
}
```

----------------------------------------

TITLE: Initializing Draggable Element with Pointer Down (JS)
DESCRIPTION: This function initializes a given DOM element (`terrariumElement`) for dragging. It sets up local variables to track position changes and assigns the `pointerDrag` function as the event handler for the `onpointerdown` event, which triggers when the element is clicked or touched.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
function dragElement(terrariumElement) {
	//set 4 positions for positioning on the screen
	let pos1 = 0,
		pos2 = 0,
		pos3 = 0,
		pos4 = 0;
	terrariumElement.onpointerdown = pointerDrag;
}
```

----------------------------------------

TITLE: Storing a String in a Variable in JavaScript
DESCRIPTION: Demonstrates how to declare a variable using `let` and initialize it with a string value.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/translations/README.ja.md#_snippet_10

LANGUAGE: javascript
CODE:
```
let myString = 'This is a string value stored in a variable';
```

----------------------------------------

TITLE: Updating Account State after Registration (JS)
DESCRIPTION: Calls the `updateState` function to update the `account` property in the centralized state object with the `result` data after a successful user registration. This replaces direct state modification.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ja.md#_snippet_6

LANGUAGE: js
CODE:
```
updateState('account', result);
```

----------------------------------------

TITLE: Emitting Messages on Keyup - JavaScript
DESCRIPTION: Adds an event listener to the window for the `keyup` event. It checks which arrow key was released and uses an `eventEmitter` instance to emit a corresponding predefined message. This decouples input handling from the actions triggered by the input.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/translations/README.ja.md#_snippet_4

LANGUAGE: javascript
CODE:
```
window.addEventListener("keyup", (evt) => {
  if (evt.key === "ArrowUp") {
    eventEmitter.emit(Messages.KEY_EVENT_UP);
  } else if (evt.key === "ArrowDown") {
    eventEmitter.emit(Messages.KEY_EVENT_DOWN);
  } else if (evt.key === "ArrowLeft") {
    eventEmitter.emit(Messages.KEY_EVENT_LEFT);
  } else if (evt.key === "ArrowRight") {
    eventEmitter.emit(Messages.KEY_EVENT_RIGHT);
  }
});
```

----------------------------------------

TITLE: Logout Function (JavaScript)
DESCRIPTION: Defines a `logout` function that clears the account data in the centralized state by setting it to `null` and then navigates the user back to the login page.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.zh-tw.md#_snippet_6

LANGUAGE: js
CODE:
```
function logout() {
  updateState('account', null);
  navigate('/login');
}
```

----------------------------------------

TITLE: Assigning a Value to a Variable in JavaScript
DESCRIPTION: This snippet shows how to assign the numerical value `123` to the previously declared variable `myVariable` using the assignment operator (`=`). This initializes the variable with a value.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/1-data-types/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
myVariable = 123;
```

----------------------------------------

TITLE: Initializing Game State and Event Listeners - JavaScript
DESCRIPTION: Defines the `initGame` function responsible for setting up the initial state of the game. It clears existing game objects, creates new enemies and the hero, and registers listeners with the `eventEmitter` to update the hero's position when directional key events are emitted.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/translations/README.ja.md#_snippet_7

LANGUAGE: javascript
CODE:
```
function initGame() {
  gameObjects = [];
  createEnemies();
  createHero();

  eventEmitter.on(Messages.KEY_EVENT_UP, () => {
    hero.y -=5 ;
  })

  eventEmitter.on(Messages.KEY_EVENT_DOWN, () => {
    hero.y += 5;
  });

  eventEmitter.on(Messages.KEY_EVENT_LEFT, () => {
    hero.x -= 5;
  });

  eventEmitter.on(Messages.KEY_EVENT_RIGHT, () => {
    hero.x += 5;
  });
}
```

----------------------------------------

TITLE: Draw Grid of Monsters on Canvas (JavaScript)
DESCRIPTION: Implements nested loops in JavaScript to iterate through calculated positions and draw multiple instances of the enemy image ('enemyImg') onto the canvas context ('ctx'). This creates a grid layout of monsters on the screen.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/2-drawing-to-canvas/README.md#_snippet_8

LANGUAGE: javascript
CODE:
```
for (let x = START_X; x < STOP_X; x += 98) {
    for (let y = 0; y < 50 * 5; y += 50) {
      ctx.drawImage(enemyImg, x, y);
    }
  }
```

----------------------------------------

TITLE: Adding Balance Placeholder HTML
DESCRIPTION: Replaces the existing 'Balance' section in the HTML with placeholder span elements for displaying balance and currency.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_12

LANGUAGE: HTML
CODE:
```
<section>
  Balance: <span id="balance"></span><span id="currency"></span>
</section>
```

----------------------------------------

TITLE: Weapon Firing with Cooldown Check - JavaScript
DESCRIPTION: This method within a `Weapon` class checks if a cooldown is active or has finished before allowing the weapon to fire. If no cooldown exists or the current one is cool, it creates a new `Cooldown` instance and proceeds with firing (represented by the comment).
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/translations/README.it.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
class Weapon {
  constructor {
  }
  fire() {
    if (!this.cooldown || this.cooldown.cool) {
      // produce un laser
      this.cooldown = new Cooldown(500);
    } else {
      // non fa nulla - non si è ancora raffreddato
    }
  }
}
```

----------------------------------------

TITLE: Stopping Element Drag Behavior in JavaScript
DESCRIPTION: This function is called to terminate the drag operation (likely on `pointerup`). It resets the global `document.onpointerup` and `document.onpointermove` event handlers to `null`. This prevents further calls to the drag handling function (`elementDrag`) and allows the element to be dragged again or a new element to be selected for dragging.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/3-intro-to-DOM-and-closures/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
function stopElementDrag() {
	document.onpointerup = null;
	document.onpointermove = null;
}
```

----------------------------------------

TITLE: Defining Game Constants and Variables - JavaScript
DESCRIPTION: Declares constants for key event messages using an object. It also declares and initializes several variables required for the game state, including image assets, canvas context, an array for game objects, the hero object, and an instance of the `EventEmitter`.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/translations/README.ja.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const Messages = {
  KEY_EVENT_UP: "KEY_EVENT_UP",
  KEY_EVENT_DOWN: "KEY_EVENT_DOWN",
  KEY_EVENT_LEFT: "KEY_EVENT_LEFT",
  KEY_EVENT_RIGHT: "KEY_EVENT_RIGHT",
};

let heroImg, 
    enemyImg, 
    laserImg,
    canvas, ctx, 
    gameObjects = [], 
    hero, 
    eventEmitter = new EventEmitter();
```

----------------------------------------

TITLE: Updating JavaScript Route Definition
DESCRIPTION: Modifies the application's route configuration object. Specifically, it adds an `init` property to the `/dashboard` route, assigning the `refresh` function to be executed whenever the dashboard route is loaded.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_17

LANGUAGE: js
CODE:
```
const routes = {
  '/login': { templateId: 'login' },
  '/dashboard': { templateId: 'dashboard', init: refresh }
};
```

----------------------------------------

TITLE: Creating Transaction via API using cURL
DESCRIPTION: Demonstrates how to create a new transaction for a specific account ('test') by sending a POST request to the local API endpoint. It includes the transaction details (date, object, amount) in the JSON request body.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_14

LANGUAGE: sh
CODE:
```
curl --request POST \
     --header "Content-Type: application/json" \
     --data "{ \"date\": \"2020-07-24\", \"object\": \"Bought book\", \"amount\": -20 }" \
     http://localhost:5000/api/accounts/test/transactions
```

----------------------------------------

TITLE: Add Start Button Event Listener - JavaScript
DESCRIPTION: Adds an event listener to the element with the ID 'start'. When clicked, it selects a random quote, splits it into words, resets the word index, updates the UI to display the quote with the first word highlighted, clears the input box, sets focus to the input box, and starts the game timer.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/4-typing-game/typing-game/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
// at the end of script.js
document.getElementById('start').addEventListener('click', () => {
  // get a quote
  const quoteIndex = Math.floor(Math.random() * quotes.length);
  const quote = quotes[quoteIndex];
  // Put the quote into an array of words
  words = quote.split(' ');
  // reset the word index for tracking
  wordIndex = 0;

  // UI updates
  // Create an array of span elements so we can set a class
  const spanWords = words.map(function(word) { return `<span>${word} </span>`});
  // Convert into string and set as innerHTML on quote display
  quoteElement.innerHTML = spanWords.join('');
  // Highlight the first word
  quoteElement.childNodes[0].className = 'highlight';
  // Clear any prior messages
  messageElement.innerText = '';

  // Setup the textbox
  // Clear the textbox
  typedValueElement.value = '';
  // set focus
  typedValueElement.focus();
  // set the event handler

  // Start the timer
  startTime = new Date().getTime();
});
```

----------------------------------------

TITLE: Implementing EventEmitter Class - JavaScript
DESCRIPTION: Provides a basic implementation of an `EventEmitter` class, enabling a simple publish-subscribe pattern. It includes methods `on` to register listeners for specific messages and `emit` to trigger all listeners associated with a given message, optionally passing a payload.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/translations/README.ja.md#_snippet_5

LANGUAGE: javascript
CODE:
```
class EventEmitter {
  constructor() {
    this.listeners = {};
  }

  on(message, listener) {
    if (!this.listeners[message]) {
      this.listeners[message] = [];
    }
    this.listeners[message].push(listener);
  }

  emit(message, payload = null) {
    if (this.listeners[message]) {
      this.listeners[message].forEach((l) => l(message, payload));
    }
  }
}
```

----------------------------------------

TITLE: Handling Collision Events with Event Emitter (JavaScript)
DESCRIPTION: Sets up event listeners on the 'eventEmitter' for 'COLLISION_ENEMY_LASER' and 'COLLISION_ENEMY_HERO' messages. The laser collision increments points and marks both objects as dead. The hero collision decrements life and marks the enemy as dead.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/5-keeping-score/README.md#_snippet_10

LANGUAGE: javascript
CODE:
```
eventEmitter.on(Messages.COLLISION_ENEMY_LASER, (_, { first, second }) => {
   first.dead = true;
   second.dead = true;
   hero.incrementPoints();
})

eventEmitter.on(Messages.COLLISION_ENEMY_HERO, (_, { enemy }) => {
   enemy.dead = true;
   hero.decrementLife();
});
```

----------------------------------------

TITLE: Navigate to Working Folder in Bash
DESCRIPTION: Use the `cd` command to change the current directory in the terminal to the desired working folder for your project. Replace `[name of your folder]` with the actual path to your directory.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cd [name of your folder]
```

----------------------------------------

TITLE: Updating Routes Definition with Dashboard Init JS
DESCRIPTION: Modifies the `routes` object to include an `init` property for the '/dashboard' route, assigning the `updateDashboard` function to be called when the dashboard is loaded.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
const routes = {
  '/login': { templateId: 'login' },
  '/dashboard': { templateId: 'dashboard', init: updateDashboard }
};
```

----------------------------------------

TITLE: Clearing EventEmitter Listeners in JavaScript
DESCRIPTION: Adds a `clear` method to the event emitter to remove all registered listeners, useful during game reset.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_11

LANGUAGE: javascript
CODE:
```
clear() {
  this.listeners = {};
}
```

----------------------------------------

TITLE: Checking for Rectangle Intersection - JavaScript
DESCRIPTION: This function determines if two given rectangle objects (r1 and r2), each defined by top, left, bottom, and right properties, overlap. It returns true if they intersect and false otherwise, using a common non-intersection check logic.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/translations/README.it.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function intersectRect(r1, r2) {
  return !(r2.left > r1.right ||
    r2.right < r1.left ||
    r2.top > r1.bottom ||
    r2.bottom < r1.top);
}
```

----------------------------------------

TITLE: Check Rectangle Intersection (JavaScript)
DESCRIPTION: Implements a function to determine if two rectangle objects (r1 and r2) overlap. It returns true if the rectangles intersect and false otherwise, using a common algorithm that checks for non-intersection conditions.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
function intersectRect(r1, r2) {
  return !(
    r2.left > r1.right ||
    r2.right < r1.left ||
    r2.top > r1.bottom ||
    r2.bottom < r1.top
  );
}
```

----------------------------------------

TITLE: Initializing Game State (JavaScript)
DESCRIPTION: Defines the `initGame` function responsible for setting up the initial state of the game. It clears the game objects array, creates enemies and the hero, and subscribes hero movement logic to the corresponding key event messages emitted by the EventEmitter.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_14

LANGUAGE: javascript
CODE:
```
function initGame() {
  gameObjects = [];
  createEnemies();
  createHero();

  eventEmitter.on(Messages.KEY_EVENT_UP, () => {
    hero.y -=5 ;
  })

  eventEmitter.on(Messages.KEY_EVENT_DOWN, () => {
    hero.y += 5;
  });

  eventEmitter.on(Messages.KEY_EVENT_LEFT, () => {
    hero.x -= 5;
  });

  eventEmitter.on(Messages.KEY_EVENT_RIGHT, () => {
    hero.x += 5;
  });
}
```

----------------------------------------

TITLE: Drawing Game Objects in JavaScript
DESCRIPTION: This code snippet clears the canvas, fills it with a black background, and then calls `drawGameObjects` to render all game objects. It appears to be part of a timed loop, likely the main game loop responsible for animation. It depends on a `canvas` element, a 2D rendering context `ctx`, and the `drawGameObjects` function.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_16

LANGUAGE: javascript
CODE:
```
ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = "black";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        drawGameObjects(ctx);
      }, 100)
      
    };
```

----------------------------------------

TITLE: Run Development Server with lite-server (Shell)
DESCRIPTION: This command starts a local development web server using npx and the lite-server package. It serves the current directory ('.') and is used to run the bank app locally in a browser. Requires Node.js and the API server to be running.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/solution/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npx lite-server .
```

----------------------------------------

TITLE: Defining Initial updateRoute Function JavaScript
DESCRIPTION: This JavaScript function updates the content displayed in the 'app' element based on a provided template ID. It clones the template's content and replaces the current content of the 'app' element.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
function updateRoute(templateId) {
  const template = document.getElementById(templateId);
  const view = template.content.cloneNode(true);
  const app = document.getElementById('app');
  app.innerHTML = '';
  app.appendChild(view);
}
```

----------------------------------------

TITLE: Creating Table Row from Template - JavaScript
DESCRIPTION: Defines the createTransactionRow function that takes a transaction object as input. It retrieves the 'transaction' template, clones its content, finds the <tr> element, and populates its <td> children with the transaction's date, object, and formatted amount. It returns the populated row fragment.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_19

LANGUAGE: javascript
CODE:
```
function createTransactionRow(transaction) {
  const template = document.getElementById('transaction');
  const transactionRow = template.content.cloneNode(true);
  const tr = transactionRow.querySelector('tr');
  tr.children[0].textContent = transaction.date;
  tr.children[1].textContent = transaction.object;
  tr.children[2].textContent = transaction.amount.toFixed(2);
  return transactionRow;
}
```

----------------------------------------

TITLE: Initializing Game Variables and UI References - JavaScript
DESCRIPTION: Initializes an array `quotes` containing the text for the typing game. Sets up `words` and `wordIndex` to track the current quote's words and the player's progress. Records the `startTime` when the game begins. Defines constants `quoteElement`, `messageElement`, and `typedValueElement` to reference the corresponding HTML elements by their IDs for easy access and manipulation.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/4-typing-game/typing-game/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
// inside script.js
// all of our quotes
const quotes = [
    'When you have eliminated the impossible, whatever remains, however improbable, must be the truth.',
    'There is nothing more deceptive than an obvious fact.',
    'I ought to know by this time that when a fact appears to be opposed to a long train of deductions it invariably proves to be capable of bearing some other interpretation.',
    'I never make exceptions. An exception disproves the rule.',
    'What one man can invent another can discover.',
    'Nothing clears up a case so much as stating it to another person.',
    'Education never ends, Watson. It is a series of lessons, with the greatest for the last.',
];
// store the list of words and the index of the word the player is currently typing
let words = [];
let wordIndex = 0;
// the starting time
let startTime = Date.now();
// page elements
const quoteElement = document.getElementById('quote');
const messageElement = document.getElementById('message');
const typedValueElement = document.getElementById('typed-value');
```

----------------------------------------

TITLE: Update Game Objects and Check Collisions (JavaScript)
DESCRIPTION: Implements a function responsible for updating the state of game objects, primarily focusing on collision detection between lasers and enemies. It iterates through all active lasers and enemies, checks for intersection using intersectRect, emits a COLLISION_ENEMY_LASER event upon collision, and finally filters out any game objects marked as dead.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_13

LANGUAGE: javascript
CODE:
```
function updateGameObjects() {
  const enemies = gameObjects.filter(go => go.type === 'Enemy');
  const lasers = gameObjects.filter((go) => go.type === "Laser");
// laser hit something
  lasers.forEach((l) => {
    enemies.forEach((m) => {
      if (intersectRect(l.rectFromGameObject(), m.rectFromGameObject())) {
      eventEmitter.emit(Messages.COLLISION_ENEMY_LASER, {
        first: l,
        second: m,
      });
    }
   });
});

  gameObjects = gameObjects.filter(go => !go.dead);
}
```

----------------------------------------

TITLE: Defining Login Page HTML Template
DESCRIPTION: Defines an HTML template for the login screen using the <template> element with the ID "login". It contains a main heading and a section with a link intended for navigation to the dashboard.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_2

LANGUAGE: HTML
CODE:
```
<template id="login">
  <h1>Bank App</h1>
  <section>
    <a href="/dashboard">Login</a>
  </section>
</template>
```

----------------------------------------

TITLE: Defining HTML Template for Table Row - HTML
DESCRIPTION: Defines an HTML <template> element with the ID 'transaction'. This template serves as a blueprint for creating new table rows (<tr>) with three empty cells (<td>) dynamically using JavaScript.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_17

LANGUAGE: html
CODE:
```
<template id="transaction">
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
</template>
```

----------------------------------------

TITLE: Adding Basic Typing Game CSS Styles
DESCRIPTION: Provides basic CSS rules for the typing game. It defines `.highlight` and `.error` classes to visually indicate the current word to type and incorrect user input, respectively, using background colors and borders.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/4-typing-game/typing-game/README.md#_snippet_3

LANGUAGE: css
CODE:
```
/* inside style.css */
.highlight {
  background-color: yellow;
}

.error {
  background-color: lightcoral;
  border: red;
}
```

----------------------------------------

TITLE: Redrawing Object for Movement on Canvas (JavaScript)
DESCRIPTION: Shows the core steps for animating an object on an HTML canvas: updating its position, clearing the canvas area, and redrawing the background and the object at the new position. Requires a canvas rendering context (ctx), the object being moved (hero), its image (heroImg), and canvas dimensions.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
//set the hero's location
hero.x += 5;
// clear the rectangle that hosts the hero
ctx.clearRect(0, 0, canvas.width, canvas.height);
// redraw the game background and hero
ctx.fillRect(0, 0, canvas.width, canvas.height)
ctx.fillStyle = "black";
ctx.drawImage(heroImg, hero.x, hero.y);
```

----------------------------------------

TITLE: Get Rectangle Representation of Game Object - JavaScript
DESCRIPTION: This method demonstrates how to derive a rectangle object representing the boundaries of a game object. It calculates the top, left, bottom, and right coordinates based on the object's position (x, y) and dimensions (width, height), which is essential for collision detection.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
rectFromGameObject() {
  return {
    top: this.y,
    left: this.x,
    bottom: this.y + this.height,
    right: this.x + this.width
  }
}
```

----------------------------------------

TITLE: Structuring Results Area HTML
DESCRIPTION: This HTML snippet defines the structure for the area that will display the carbon usage results in the `index.html` file. It includes placeholders for loading messages, errors, and the actual data points: region, carbon usage, and fossil fuel percentage. A button is also included to allow changing the region.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/1-about-browsers/README.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<div class="result">
	<div class="loading">loading...</div>
	<div class="errors"></div>
	<div class="data"></div>
	<div class="result-container">
		<p><strong>Region: </strong><span class="my-region"></span></p>
		<p><strong>Carbon Usage: </strong><span class="carbon-usage"></span></p>
		<p><strong>Fossil Fuel Percentage: </strong><span class="fossil-fuel"></span></p>
	</div>
	<button class="clear-btn">Change region</button>
</div>
```

----------------------------------------

TITLE: Drawing Life and Points on Canvas (JavaScript)
DESCRIPTION: Defines functions to draw the player's remaining lives (using the 'lifeImg' asset) and current points score on the canvas. 'drawLife' draws multiple life images, and 'drawPoints' draws text using canvas context methods.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/5-keeping-score/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
function drawLife() {
  // TODO, 35, 27
  const START_POS = canvas.width - 180;
  for(let i=0; i < hero.life; i++ ) {
    ctx.drawImage(
      lifeImg, 
      START_POS + (45 * (i+1) ), 
      canvas.height - 37);
  }
}

function drawPoints() {
  ctx.font = "30px Arial";
  ctx.fillStyle = "red";
  ctx.textAlign = "left";
  drawText("Points: " + hero.points, 10, canvas.height-20);
}

function drawText(message, x, y) {
  ctx.fillText(message, x, y);
}
```

----------------------------------------

TITLE: Calculate Carbon Intensity Color in JavaScript
DESCRIPTION: This function takes a carbon intensity value, finds the closest value in a predefined scale, determines the corresponding color from a color array, and sends this color to the Chrome runtime to update the extension icon. It uses Math.abs, sort, findIndex, and chrome.runtime.sendMessage.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/3-background-tasks-and-performance/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function calculateColor(value) {
	let co2Scale = [0, 150, 600, 750, 800];
	let colors = ['#2AA364', '#F5EB4D', '#9E4229', '#381D02', '#381D02'];

	let closestNum = co2Scale.sort((a, b) => {
		return Math.abs(a - value) - Math.abs(b - value);
	})[0];
	console.log(value + ' is closest to ' + closestNum);
	let num = (element) => element > closestNum;
	let scaleIndex = co2Scale.findIndex(num);

	let closestColor = colors[scaleIndex];
	console.log(scaleIndex, closestColor);

	chrome.runtime.sendMessage({ action: 'updateIcon', value: { color: closestColor } });
}
```

----------------------------------------

TITLE: Handle Enemy-Laser Collision (JavaScript)
DESCRIPTION: Registers an event listener for the COLLISION_ENEMY_LASER message, which is emitted when a laser collides with an enemy. The listener receives the two colliding objects (first and second) and marks both as dead, indicating they should be removed from the game.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_11

LANGUAGE: javascript
CODE:
```
eventEmitter.on(Messages.COLLISION_ENEMY_LASER, (_, { first, second }) => {
  first.dead = true;
  second.dead = true;
})
```

----------------------------------------

TITLE: Drawing Basic Shape on Canvas (JavaScript)
DESCRIPTION: Demonstrates the steps to draw a red rectangle on an HTML canvas using JavaScript: getting canvas reference, getting 2D context, setting fill style, and drawing the rectangle with specified location and size.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/2-drawing-to-canvas/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// draws a red rectangle
//1. get the canvas reference
canvas = document.getElementById("myCanvas");

//2. set the context to 2D to draw basic shapes
ctx = canvas.getContext("2d");

//3. fill it with the color red
ctx.fillStyle = 'red';

//4. and draw a rectangle with these parameters, setting location and size
ctx.fillRect(0,0, 200, 200) // x,y,width, height
```

----------------------------------------

TITLE: Listen for Space Key Event (JavaScript)
DESCRIPTION: Sets up an event listener that reacts to the KEY_EVENT_SPACE message emitted by the keyup handler. When this event occurs, it checks if the hero object is currently able to fire (e.g., not on cooldown) and, if so, calls the hero's fire() method.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_10

LANGUAGE: javascript
CODE:
```
eventEmitter.on(Messages.KEY_EVENT_SPACE, () => {
 if (hero.canFire()) {
   hero.fire();
 }
```

----------------------------------------

TITLE: Ending the Game and Displaying Result in JavaScript
DESCRIPTION: Implements the game end logic, clearing the game loop, displaying a win or loss message, and preparing the canvas for a potential restart.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_8

LANGUAGE: javascript
CODE:
```
function endGame(win) {
  clearInterval(gameLoopId);

  // set a delay so we are sure any paints have finished
  setTimeout(() => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    if (win) {
      displayMessage(
        "Victory!!! Pew Pew... - Press [Enter] to start a new game Captain Pew Pew",
        "green"
      );
    } else {
      displayMessage(
        "You died !!! Press [Enter] to start a new game Captain Pew Pew"
      );
    }
  }, 200)  
}
```

----------------------------------------

TITLE: Example Account Object Structure (JSON)
DESCRIPTION: Provides a sample JSON object representing an account structure received from the server. It includes fields for user, currency, description, balance, and an array of transaction objects, illustrating the data format to be displayed on the dashboard.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_11

LANGUAGE: JSON
CODE:
```
{
  "user": "test",
  "currency": "$",
  "description": "Test account",
  "balance": 75,
  "transactions": [
    { "id": "1", "date": "2020-10-01", "object": "Pocket money", "amount": 50 },
    { "id": "2", "date": "2020-10-03", "object": "Book", "amount": -10 },
    { "id": "3", "date": "2020-10-04", "object": "Sandwich", "amount": -5 }
  ]
}
```

----------------------------------------

TITLE: Testing Local Bank API Server (Shell)
DESCRIPTION: This snippet uses the `curl` command to test if the local bank API server is running correctly on port 5000. It expects the response 'Bank API v1.0.0'.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ja.md#_snippet_0

LANGUAGE: sh
CODE:
```
curl http://localhost:5000/api
# -> 結果として "Bank API v1.0.0" を返す必要があります。
```

----------------------------------------

TITLE: Extending GameObject for Enemy (JavaScript)
DESCRIPTION: Extends the base GameObject class to create an Enemy class. Initializes properties like position (x, y), dimensions, and type. Sets up an interval timer to automatically move the enemy downwards until it reaches the bottom of the canvas.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
class Enemy extends GameObject {
  constructor(x, y) {
    super(x, y);
    (this.width = 98), (this.height = 50);
    this.type = "Enemy";
    let id = setInterval(() => {
      if (this.y < canvas.height - this.height) {
        this.y += 5;
      } else {
        console.log('Stopped at', this.y)
        clearInterval(id);
      }
    }, 300)
  }
}
```

----------------------------------------

TITLE: Defining Route Map Object JavaScript
DESCRIPTION: This JavaScript object defines a simple map between URL paths and corresponding template IDs. It serves as the basis for client-side routing logic.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
const routes = {
  '/login': { templateId: 'login' },
  '/dashboard': { templateId: 'dashboard' }
};
```

----------------------------------------

TITLE: Drawing Text on Canvas - JavaScript
DESCRIPTION: Demonstrates how to set font, color, alignment, and draw text onto an HTML canvas using the 2D rendering context's fillText method.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/5-keeping-score/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
ctx.font = "30px Arial";
ctx.fillStyle = "red";
ctx.textAlign = "right";
ctx.fillText("show this on the screen", 0, 0);
```

----------------------------------------

TITLE: Calling Drawing Functions in Game Loop (JavaScript)
DESCRIPTION: Adds calls to the 'drawPoints' and 'drawLife' functions within the main game loop (e.g., inside the 'window.onload' function after updating game objects) to render the score and life count each frame.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/5-keeping-score/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
drawPoints();
drawLife();
```

----------------------------------------

TITLE: Handling Collision and Game End Events with EventEmitter in JavaScript
DESCRIPTION: Updates the event emitter to listen for collision events between enemies and lasers or the hero, triggering game end events (win/loss) based on the state of the hero and enemies.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
eventEmitter.on(Messages.COLLISION_ENEMY_LASER, (_, { first, second }) => {
    first.dead = true;
    second.dead = true;
    hero.incrementPoints();

    if (isEnemiesDead()) {
      eventEmitter.emit(Messages.GAME_END_WIN);
    }
});

eventEmitter.on(Messages.COLLISION_ENEMY_HERO, (_, { enemy }) => {
    enemy.dead = true;
    hero.decrementLife();
    if (isHeroDead())  {
      eventEmitter.emit(Messages.GAME_END_LOSS);
      return; // loss before victory
    }
    if (isEnemiesDead()) {
      eventEmitter.emit(Messages.GAME_END_WIN);
    }
});

eventEmitter.on(Messages.GAME_END_WIN, () => {
    endGame(true);
});
  
eventEmitter.on(Messages.GAME_END_LOSS, () => {
  endGame(false);
});
```

----------------------------------------

TITLE: Creating Hero Object in JavaScript
DESCRIPTION: This function creates a single hero object. It calculates the hero's starting position near the bottom center of the canvas, instantiates a `Hero` object, assigns an image (`heroImg`), and adds it to the `gameObjects` array. It depends on `canvas`, `Hero` class, `heroImg`, and `gameObjects` array.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_18

LANGUAGE: javascript
CODE:
```
function createHero() {
      hero = new Hero(
        canvas.width / 2 - 45,
        canvas.height - canvas.height / 4
      );
      hero.img = heroImg;
      gameObjects.push(hero);
    }
```

----------------------------------------

TITLE: Incrementing Points in Hero Class (JavaScript)
DESCRIPTION: Adds an 'incrementPoints' method to the 'Hero' class. This method increases the player's score by 100 points.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/5-keeping-score/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
incrementPoints() {
  this.points += 100;
}
```

----------------------------------------

TITLE: Mark Game Object for Destruction - JavaScript
DESCRIPTION: This simple line of code illustrates how to flag a game object as 'dead' or ready for removal from the game loop. By setting a boolean property like `dead` to true, the object can be identified and filtered out in a subsequent processing step.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// collision happened
enemy.dead = true
```

----------------------------------------

TITLE: Define Game Event Messages (JavaScript)
DESCRIPTION: Defines constant string values within a Messages object to represent different game events. These constants are used with an event emitter system to trigger specific actions based on user input (space key) or collisions between game objects (enemy/laser, enemy/hero).
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_8

LANGUAGE: javascript
CODE:
```
KEY_EVENT_SPACE: "KEY_EVENT_SPACE",
COLLISION_ENEMY_LASER: "COLLISION_ENEMY_LASER",
COLLISION_ENEMY_HERO: "COLLISION_ENEMY_HERO",
```

----------------------------------------

TITLE: Adding Game End Message Types in JavaScript
DESCRIPTION: Defines new constant message types for game win and loss events, used by the event emitter to signal the end of the game.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
GAME_END_LOSS: "GAME_END_LOSS",
GAME_END_WIN: "GAME_END_WIN",
```

----------------------------------------

TITLE: Creating Enemy Objects in JavaScript
DESCRIPTION: This function initializes a grid of enemy objects. It calculates starting and stopping X coordinates based on canvas width and a fixed monster width, then iterates through X and Y positions, creating new `Enemy` instances, assigning an image (`enemyImg`), and adding them to a `gameObjects` array. It depends on `canvas`, `Enemy` class, `enemyImg`, and `gameObjects` array.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_17

LANGUAGE: javascript
CODE:
```
function createEnemies() {
      const MONSTER_TOTAL = 5;
      const MONSTER_WIDTH = MONSTER_TOTAL * 98;
      const START_X = (canvas.width - MONSTER_WIDTH) / 2;
      const STOP_X = START_X + MONSTER_WIDTH;
    
      for (let x = START_X; x < STOP_X; x += 98) {
        for (let y = 0; y < 50 * 5; y += 50) {
          const enemy = new Enemy(x, y);
          enemy.img = enemyImg;
          gameObjects.push(enemy);
        }
      }
    }
```

----------------------------------------

TITLE: Drawing All Game Objects in JavaScript
DESCRIPTION: This function iterates through the `gameObjects` array and calls the `draw` method on each object, passing the 2D rendering context `ctx`. This is used by the main game loop to render all active game entities on the canvas. It depends on the `gameObjects` array and assumes each object within it has a `draw(ctx)` method.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_19

LANGUAGE: javascript
CODE:
```
function drawGameObjects(ctx) {
      gameObjects.forEach(go => go.draw(ctx));
    }
```

----------------------------------------

TITLE: Running Code Linter (Bash)
DESCRIPTION: Executes the `lint` script defined in the project's `package.json` file using npm. This command typically runs a linter tool to analyze the code for potential errors, style violations, and best practice adherence.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/quiz-app/README.md#_snippet_6

LANGUAGE: Bash
CODE:
```
npm run lint
```

----------------------------------------

TITLE: Completing Registration Flow - JavaScript
DESCRIPTION: Adds code to the end of the `register` function. After successful registration (assuming `result` contains the new account data), it stores the data in the global `account` variable and navigates the user to the dashboard page.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
account = result;
navigate('/dashboard');
```

----------------------------------------

TITLE: Get Rectangle Representation (JavaScript)
DESCRIPTION: Adds a method to a GameObject class to return its bounding box as a rectangle object. This representation is crucial for implementing collision detection by providing the top, left, bottom, and right coordinates of the game object.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
rectFromGameObject() {
    return {
      top: this.y,
      left: this.x,
      bottom: this.y + this.height,
      right: this.x + this.width,
    };
  }
```

----------------------------------------

TITLE: Calculate Fibonacci Sequence in JavaScript
DESCRIPTION: This JavaScript snippet calculates and prints the first 10 numbers of the Fibonacci sequence. It demonstrates a high-level language approach to a common algorithm, using variables, loops, and console output.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/1-intro-to-programming-languages/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
let number = 10
let n1 = 0, n2 = 1, nextTerm;

for (let i = 1; i <= number; i++) {
    console.log(n1);
    nextTerm = n1 + n2;
    n1 = n2;
    n2 = nextTerm;
}
```

----------------------------------------

TITLE: Original Global Account State (JavaScript)
DESCRIPTION: The original declaration of the global `account` variable used to store the current user's bank data. This approach is identified as having issues with persistence and multiple modification points.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_1

LANGUAGE: js
CODE:
```
let account = null;
```

----------------------------------------

TITLE: Drawing Loaded Images on Canvas (JavaScript)
DESCRIPTION: Demonstrates how to load image assets using the loadAsset function and then draw them onto the HTML canvas using the 2D rendering context's drawImage method, specifying the image object and its position on the canvas.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/2-drawing-to-canvas/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
async function run() {
  const heroImg = await loadAsset('hero.png')
  const monsterImg = await loadAsset('monster.png')

  canvas = document.getElementById("myCanvas");
  ctx = canvas.getContext("2d");
  ctx.drawImage(heroImg, canvas.width/2,canvas.height/2);
  ctx.drawImage(monsterImg, 0,0);
}
```

----------------------------------------

TITLE: Call calculateColor Function with API Data
DESCRIPTION: This snippet shows how to call the calculateColor function, passing the carbon intensity value (CO2) obtained from the C02Signal API call. This integrates the calculation logic into the API response handling.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/3-background-tasks-and-performance/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
//let CO2...
calculateColor(CO2);
```

----------------------------------------

TITLE: Extending GameObject for Enemy - JavaScript
DESCRIPTION: Defines the `Enemy` class, inheriting from `GameObject`. The constructor sets initial dimensions and type. It also includes logic using `setInterval` to make the enemy move downwards automatically until it reaches the bottom of the canvas, logging its final position.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/translations/README.ja.md#_snippet_2

LANGUAGE: javascript
CODE:
```
class Enemy extends GameObject {
  constructor(x, y) {
    super(x, y);
    (this.width = 98), (this.height = 50);
    this.type = "Enemy";
    let id = setInterval(() => {
      if (this.y < canvas.height - this.height) {
        this.y += 5;
      } else {
        console.log('Stopped at', this.y)
        clearInterval(id);
      }
    }, 300)
  }
}
```

----------------------------------------

TITLE: Quiz Translation File Structure (JSON)
DESCRIPTION: Defines the expected JSON structure for a translated quiz file. It includes properties for the overall title, completion message, error message, and an array of individual quiz objects, each containing questions and answer options.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/quiz-app/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```
[
    {
        "title": "A title",
        "complete": "A complete button title",
        "error": "An error message upon selecting the wrong answer",
        "quizzes": [
            {
                "id": 1,
                "title": "Title",
                "quiz": [
                    {
                        "questionText": "The question asked",
                        "answerOptions": [
                            {
                                "answerText": "Option 1 title",
                                "isCorrect": true
                            },
                            {
                                "answerText": "Option 2 title",
                                "isCorrect": false
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
```

----------------------------------------

TITLE: Initial HTML Structure for Accessibility Challenge
DESCRIPTION: This HTML snippet provides the starting point for an accessibility challenge. It uses non-semantic elements like `div` and `p` for structure and navigation, which should be refactored using more appropriate semantic HTML5 tags to improve accessibility.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/3-accessibility/README.md#_snippet_2

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <title>
      Example
    </title>
    <link href='../assets/style.css' rel='stylesheet' type='text/css'>
  </head>
  <body>
    <div class="site-header">
      <p class="site-title">Turtle Ipsum</p>
      <p class="site-subtitle">The World's Premier Turtle Fan Club</p>
    </div>
    <div class="main-nav">
      <p class="nav-header">Resources</p>
      <div class="nav-list">
        <p class="nav-item nav-item-bull"><a href="https://www.youtube.com/watch?v=CMNry4PE93Y">"I like turtles"</a></p>
        <p class="nav-item nav-item-bull"><a href="https://en.wikipedia.org/wiki/Turtle">Basic Turtle Info</a></p>
        <p class="nav-item nav-item-bull"><a href="https://en.wikipedia.org/wiki/Turtles_(chocolate)">Chocolate Turtles</a></p>
      </div>
    </div>
    <div class="main-content">
      <div>
        <p class="page-title">Welcome to Turtle Ipsum. 
            <a href="">Click here</a> to learn more.
        </p>
        <p class="article-text">
          Turtle ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum
        </p>
      </div>
    </div>
    <div class="footer">
      <div class="footer-section">
        <span class="button">Sign up for turtle news</span>
      </div><div class="footer-section">
        <p class="nav-header footer-title">
          Internal Pages
        </p>
        <div class="nav-list">
          <p class="nav-item nav-item-bull"><a href="../">Index</a></p>
          <p class="nav-item nav-item-bull"><a href="../semantic">Semantic Example</a></p>
        </div>
      </div>
      <p class="footer-copyright">&copy; 2016 Instrument</span>
    </div>
  </body>
</html>
```

----------------------------------------

TITLE: Loading Life Image Asset in JavaScript
DESCRIPTION: Loads the 'life.png' image asset using an asynchronous function 'loadTexture' and assigns it to the 'lifeImg' variable. This asset is used later to visually represent player lives.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/5-keeping-score/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
lifeImg = await loadTexture("assets/life.png");
```

----------------------------------------

TITLE: Calling Route Initialization Function JS
DESCRIPTION: Adds code to the `updateRoute` function to check if the current route object has an `init` function and calls it if it exists.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
if (typeof route.init === 'function') {
  route.init();
}
```

----------------------------------------

TITLE: Creating Base GameObject Class (JavaScript)
DESCRIPTION: Defines a base class for all game objects, providing fundamental properties like position (x, y), state (dead), type, dimensions (width, height), and an image. Includes a method to draw the object onto a 2D canvas context.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
class GameObject {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.dead = false;
    this.type = "";
    this.width = 0;
    this.height = 0;
    this.img = undefined;
  }

  draw(ctx) {
    ctx.drawImage(this.img, this.x, this.y, this.width, this.height);
  }
}
```

----------------------------------------

TITLE: Initializing Account State (Old Method - JS)
DESCRIPTION: Initializes a global variable `account` to `null`. This variable was previously used to store the currently logged-in user's bank data before state management was refactored.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.ja.md#_snippet_1

LANGUAGE: js
CODE:
```
let account = null;
```

----------------------------------------

TITLE: Set Default Extension Icon Color via Chrome Runtime
DESCRIPTION: This snippet demonstrates how to send a message to the Chrome runtime to set the extension's icon color to a default value (green) when the extension initializes. It uses chrome.runtime.sendMessage.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/3-background-tasks-and-performance/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
chrome.runtime.sendMessage({
	action: 'updateIcon',
		value: {
			color: 'green',
		},
});
```

----------------------------------------

TITLE: Changing Array Elements by Index in JavaScript
DESCRIPTION: Shows how to modify the value of an existing element in an array by assigning a new value to a specific index. This replaces the original value at that position with the new one.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/4-arrays-loops/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
iceCreamFlavors[4] = "Butter Pecan"; //Changed "Rocky Road" to "Butter Pecan"
```

----------------------------------------

TITLE: Displaying Messages on Canvas in JavaScript
DESCRIPTION: Creates a utility function to display text messages on the game canvas at the center, with customizable color.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
function displayMessage(message, color = "red") {
  ctx.font = "30px Arial";
  ctx.fillStyle = color;
  ctx.textAlign = "center";
  ctx.fillText(message, canvas.width / 2, canvas.height / 2);
}
```

----------------------------------------

TITLE: Building the Quiz App (Bash)
DESCRIPTION: Executes the `build` script defined in the project's `package.json` file using npm. This typically compiles, bundles, or processes the source code for deployment or distribution.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/quiz-app/README.md#_snippet_4

LANGUAGE: Bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Initializing HTML Structure for Bank App
DESCRIPTION: Sets up the basic HTML5 document structure for the web application, including meta tags, title, and an empty body where content will be dynamically loaded.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bank App</title>
  </head>
  <body>
    <!-- This is where you'll work -->
  </body>
</html>
```

----------------------------------------

TITLE: Marking Game Object for Destruction - JavaScript
DESCRIPTION: This snippet shows how to mark a game object as 'dead' by setting a boolean property. This flag is used later in the game loop to filter out objects that should no longer be rendered or processed.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/translations/README.it.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
// si è verificata una collisione
enemy.dead = true
```

----------------------------------------

TITLE: Inserting Array Elements by Index in JavaScript
DESCRIPTION: Demonstrates how to add a new element to an array at a specific index. If the index is beyond the current length, it can create 'empty slots' or sparse arrays, though `push()` is more common for adding to the end.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/2-js-basics/4-arrays-loops/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
iceCreamFlavors[5] = "Cookie Dough"; //Added "Cookie Dough"
```

----------------------------------------

TITLE: Check for Rectangle Intersection - JavaScript
DESCRIPTION: This function determines if two rectangles, represented by their top, left, bottom, and right coordinates, intersect. It returns true if there is an overlap and false otherwise, using a common algorithm that checks for non-intersection conditions.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function intersectRect(r1, r2) {
  return !(r2.left > r1.right ||
    r2.right < r1.left ||
    r2.top > r1.bottom ||
    r2.bottom < r1.top);
}
```

----------------------------------------

TITLE: Defining Enemy Creation Function - JavaScript
DESCRIPTION: Shows the beginning of the `createEnemies` function, which is intended to generate enemy game objects. It defines constants for the total number of enemies, their combined width, and the calculated starting X position to center them horizontally on the canvas. The function body is incomplete.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/translations/README.ja.md#_snippet_9

LANGUAGE: javascript
CODE:
```
function createEnemies() {
  const MONSTER_TOTAL = 5;
  const MONSTER_WIDTH = MONSTER_TOTAL * 98;
  const START_X = (canvas.width - MONSTER_WIDTH) / 2;
}
```

----------------------------------------

TITLE: Defining Game Constants and Variables (JavaScript)
DESCRIPTION: Declares constants for message types used by the EventEmitter for key events. Also initializes global variables needed for the game state, including image references, canvas context, game objects array, hero instance, and the event emitter instance.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_13

LANGUAGE: javascript
CODE:
```
const Messages = {
  KEY_EVENT_UP: "KEY_EVENT_UP",
  KEY_EVENT_DOWN: "KEY_EVENT_DOWN",
  KEY_EVENT_LEFT: "KEY_EVENT_LEFT",
  KEY_EVENT_RIGHT: "KEY_EVENT_RIGHT",
};

let heroImg, 
    enemyImg, 
    laserImg,
    canvas, ctx, 
    gameObjects = [], 
    hero, 
    eventEmitter = new EventEmitter();
```

----------------------------------------

TITLE: Adding ID to Table Body - HTML
DESCRIPTION: Adds the 'id' attribute 'transactions' to the <tbody> element within the dashboard table. This ID is used by JavaScript to easily reference and append dynamically generated transaction rows to the table body.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_18

LANGUAGE: html
CODE:
```
<tbody id="transactions"></tbody>
```

----------------------------------------

TITLE: Handling Game Restart on Enter Key in JavaScript
DESCRIPTION: Adds an event listener to the event emitter that calls the `resetGame` function when the `KEY_EVENT_ENTER` message is received.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_10

LANGUAGE: javascript
CODE:
```
eventEmitter.on(Messages.KEY_EVENT_ENTER, () => {
  resetGame();
});
```

----------------------------------------

TITLE: Listen for UpdateIcon Messages in Background Script
DESCRIPTION: This code adds a listener in the background script (/dist/background.js) for messages sent via chrome.runtime.sendMessage. If the action is 'updateIcon', it calls chrome.browserAction.setIcon using image data generated by the drawIcon function, which creates a colored circle on a canvas based on the received color value.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/3-background-tasks-and-performance/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
chrome.runtime.onMessage.addListener(function (msg, sender, sendResponse) {
	if (msg.action === 'updateIcon') {
		chrome.browserAction.setIcon({ imageData: drawIcon(msg.value) });
	}
});
//borrowed from energy lollipop extension, nice feature!
function drawIcon(value) {
	let canvas = document.createElement('canvas');
	let context = canvas.getContext('2d');

	context.beginPath();
	context.fillStyle = value.color;
	context.arc(100, 100, 50, 0, 2 * Math.PI);
	context.fill();

	return context.getImageData(50, 50, 100, 100);
}
```

----------------------------------------

TITLE: Calling Initial updateRoute Function JavaScript
DESCRIPTION: This line calls the initial `updateRoute` function, passing 'login' as the template ID. This demonstrates how to manually trigger the display of a specific template.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/1-template-route/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
updateRoute('login');
```

----------------------------------------

TITLE: Resetting Game State in JavaScript
DESCRIPTION: Creates a function to reset the game state, clearing the interval, event listeners, re-initializing the game, and starting a new game loop.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
function resetGame() {
  if (gameLoopId) {
    clearInterval(gameLoopId);
    eventEmitter.clear();
    initGame();
    gameLoopId = setInterval(() => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = "black";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      drawPoints();
      drawLife();
      updateGameObjects();
      drawGameObjects(ctx);
    }, 100);
  }
}
```

----------------------------------------

TITLE: Declaring Global Account Variable - JavaScript
DESCRIPTION: Declares a global variable named `account` and initializes it to `null`. This variable is used to store the logged-in user's account data fetched from the server, making it accessible throughout the application.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
let account = null;
```

----------------------------------------

TITLE: Defining localStorage Key for Account Data - JavaScript
DESCRIPTION: Defines a constant string key used to identify the user account data stored in localStorage. This ensures consistency when accessing the stored data.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
const storageKey = 'savedAccount';
```

----------------------------------------

TITLE: Starting the Quiz App Locally (Bash)
DESCRIPTION: Runs the `dev` script defined in the project's `package.json` file using npm. This command usually starts a local development server with features like hot-reloading for testing the application.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/quiz-app/README.md#_snippet_5

LANGUAGE: Bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Configuring HTML Form Submission (POST)
DESCRIPTION: Modifies the registration form by adding action and method attributes to specify the target URL (//localhost:5000/api/accounts) and the HTTP method (POST) for submitting the form data.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/README.md#_snippet_4

LANGUAGE: HTML
CODE:
```
<form id="registerForm" action="//localhost:5000/api/accounts" method="POST">
```

----------------------------------------

TITLE: Test Local Bank API Server (sh)
DESCRIPTION: This command uses `curl` to send an HTTP GET request to the local bank API server endpoint `/api`. It is used to verify that the server is running correctly and accessible, expecting the response "Bank API v1.0.0".
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
curl http://localhost:5000/api
# -> should return "Bank API v1.0.0" as a result
```

----------------------------------------

TITLE: Testing Bank API Endpoint (Shell)
DESCRIPTION: This shell command uses `curl` to send an HTTP GET request to the local Bank API server running on port 5000. It is used to verify that the API server is running and accessible, expecting the response "Bank API v1.0.0".
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/2-forms/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
curl http://localhost:5000/api
# -> should return "Bank API v1.0.0" as a result
```

----------------------------------------

TITLE: Testing Local API Endpoint (Shell)
DESCRIPTION: Command to test if the local server API is running correctly by making a GET request to the /api endpoint.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.zh-tw.md#_snippet_0

LANGUAGE: sh
CODE:
```
curl http://localhost:5000/api
# -> should return "Bank API v1.0.0" as a result
```

----------------------------------------

TITLE: Start Space Game Project (Bash)
DESCRIPTION: Navigates into the `your-work` directory and starts the local development server for the Space Game project using `npm start`. This typically launches the game on `http://localhost:5000`.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd your-work
npm start
```

----------------------------------------

TITLE: Starting Project Server with npm Bash
DESCRIPTION: These bash commands are used to navigate into the project's working directory and then start a local HTTP server using npm. This server hosts the game files, allowing the user to view the game in a web browser.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
cd your-work
npm start
```

----------------------------------------

TITLE: Build Extension with Webpack
DESCRIPTION: Executes the build script defined in package.json, which typically uses Webpack to compile and bundle the extension's source code into a distribution folder (usually 'dist'). This prepares the code for deployment.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/5-browser-extension/start/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
npm run build
```

----------------------------------------

TITLE: Applying Inline CSS Style (HTML)
DESCRIPTION: Shows how to apply a CSS style directly to an HTML element (<h1>) using the style attribute. Inline styles have high specificity and override styles from external stylesheets or <style> blocks.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/3-terrarium/2-intro-to-css/translations/README.zh-cn.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<h1 style="color: red">My Terrarium</h1>
```

----------------------------------------

TITLE: Starting the Game Server (Bash)
DESCRIPTION: Navigate into the project directory and start the local development server. This command launches the game application, typically making it accessible via a web browser at a specified address like http://localhost:5000.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
cd your-work
npm start
```

----------------------------------------

TITLE: Define Constants for Monster Placement (JavaScript)
DESCRIPTION: Defines several constants in JavaScript used to calculate the layout and positioning for drawing a grid of monsters on the canvas. These constants determine the total number of monsters, their combined width, and the starting and stopping X coordinates for drawing.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/2-drawing-to-canvas/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const MONSTER_TOTAL = 5;
const MONSTER_WIDTH = MONSTER_TOTAL * 98;
const START_X = (canvas.width - MONSTER_WIDTH) / 2;
const STOP_X = START_X + MONSTER_WIDTH;
```

----------------------------------------

TITLE: Initial Account State (JavaScript)
DESCRIPTION: Initial declaration of a global variable `account` to hold the logged-in user's bank data. This is the initial approach before refactoring.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/translations/README.zh-tw.md#_snippet_1

LANGUAGE: js
CODE:
```
let account = null;
```

----------------------------------------

TITLE: Check Git Version (Shell)
DESCRIPTION: Use this command in your terminal to verify if Git is installed on your system and to see the installed version number.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/2-github-basics/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
git --version
```

----------------------------------------

TITLE: Original Account State Update Pattern (JavaScript)
DESCRIPTION: This represents the pattern used to update the global `account` variable directly in functions like `register()` and `login()` before the state was centralized.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_3

LANGUAGE: js
CODE:
```
account = ...
```

----------------------------------------

TITLE: Test Local Bank API (Shell)
DESCRIPTION: Command to verify that the local bank API server is running correctly by making a simple GET request to its root endpoint. It is a prerequisite for the lesson.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/4-state-management/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
curl http://localhost:5000/api
# -> should return "Bank API v1.0.0" as a result
```

----------------------------------------

TITLE: Declaring HTML Canvas Element
DESCRIPTION: Defines a canvas element in HTML with a specific ID, width, and height, used as a drawing surface for graphics manipulated via JavaScript.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/2-drawing-to-canvas/README.md#_snippet_0

LANGUAGE: html
CODE:
```
<canvas id="myCanvas" width="200" height="100"></canvas>
```

----------------------------------------

TITLE: Handle Space Key Event (JavaScript)
DESCRIPTION: Adds a condition within a keyboard event listener (specifically for keyup) to detect when the space bar (keyCode 32) is pressed. Upon detection, it emits a predefined KEY_EVENT_SPACE message using an eventEmitter, signaling that the space action should be processed.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
} else if(evt.keyCode === 32) {
  eventEmitter.emit(Messages.KEY_EVENT_SPACE);
}
```

----------------------------------------

TITLE: Tracking Game End Conditions in JavaScript
DESCRIPTION: Adds two functions to check if the hero ship is destroyed or if all enemy ships have been eliminated, used to determine game-ending conditions.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function isHeroDead() {
  return hero.life <= 0;
}

function isEnemiesDead() {
  const enemies = gameObjects.filter((go) => go.type === "Enemy" && !go.dead);
  return enemies.length === 0;
}
```

----------------------------------------

TITLE: Project Directory Structure (Bash)
DESCRIPTION: Displays the expected file and directory structure for the Space Game project within the `your-work` folder, including asset files, HTML, JavaScript, and package definition.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
-| assets
  -| enemyShip.png
  -| player.png
  -| laserRed.png
  -| life.png
-| index.html
-| app.js
-| package.json
```

----------------------------------------

TITLE: Calculate Fibonacci Sequence in ARM Assembly
DESCRIPTION: This ARM assembly snippet performs the same task as the JavaScript example: calculating and printing the first 10 numbers of the Fibonacci sequence. It illustrates a low-level language implementation, directly manipulating registers and memory addresses.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/1-intro-to-programming-languages/README.md#_snippet_1

LANGUAGE: c
CODE:
```
 area ascen,code,readonly
 entry
 code32
 adr r0,thumb+1
 bx r0
 code16
thumb
 mov r0,#00
 sub r0,r0,#01
 mov r1,#01
 mov r4,#10
 ldr r2,=0x40000000
back add r0,r1
 str r0,[r2]
 add r2,#04
 mov r3,r0
 mov r0,r1
 mov r1,r3
 sub r4,#01
 cmp r4,#00
 bne back
 end
```

----------------------------------------

TITLE: Implement Laser Game Object (JavaScript)
DESCRIPTION: Defines a Laser class that extends GameObject, representing a laser projectile fired by the player. It sets the laser's dimensions, type, and image, and includes logic within its constructor to automatically move the laser upwards (this.y -= 15) using an interval timer until it goes off-screen or collides, at which point it is marked as dead.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/4-collision-detection/README.md#_snippet_12

LANGUAGE: javascript
CODE:
```
class Laser extends GameObject {
  constructor(x, y) {
    super(x,y);
    (this.width = 9), (this.height = 33);
    this.type = 'Laser';
    this.img = laserImg;
    let id = setInterval(() => {
      if (this.y > 0) {
        this.y -= 15;
      } else {
        this.dead = true;
        clearInterval(id);
      }
    }, 100)
  }
}
```

----------------------------------------

TITLE: Adding Enter Key Event Message Type in JavaScript
DESCRIPTION: Defines a new constant message type for the 'Enter' key press event, used to trigger game restart logic.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/6-end-condition/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
KEY_EVENT_ENTER: "KEY_EVENT_ENTER",
```

----------------------------------------

TITLE: Declaring Life Image Variable in JavaScript
DESCRIPTION: Adds the 'lifeImg' variable to the list of asset variables being declared. This makes the loaded texture available for use within the game.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/5-keeping-score/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
let heroImg,
...
lifeImg,
...
eventEmitter = new EventEmitter();
```

----------------------------------------

TITLE: Initializing Life and Points in Hero Class (JavaScript)
DESCRIPTION: Sets the initial values for the player's life count to 3 and points score to 0 within the 'Hero' class constructor or initialization method, typically after cooldown initialization.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/5-keeping-score/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
this.life = 3;
this.points = 0;
```

----------------------------------------

TITLE: Decrementing Life in Hero Class (JavaScript)
DESCRIPTION: Adds a 'decrementLife' method to the 'Hero' class. This method decreases the player's life count by one and sets the 'dead' flag to true if life reaches zero.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/5-keeping-score/README.md#_snippet_8

LANGUAGE: javascript
CODE:
```
decrementLife() {
  this.life--;
  if (this.life === 0) {
    this.dead = true;
  }
}
```

----------------------------------------

TITLE: Generating Fibonacci Sequence in ARM Assembly
DESCRIPTION: This ARM Assembly snippet performs the same task as the JavaScript example: calculating and printing the first 10 Fibonacci numbers. It serves as a comparison to show how the same logic is implemented in a low-level language, requiring more explicit memory and register manipulation.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/1-getting-started-lessons/1-intro-to-programming-languages/translations/README.zh-cn.md#_snippet_1

LANGUAGE: Assembly
CODE:
```
 area ascen,code,readonly
 entry
 code32
 adr r0,thumb+1
 bx r0
 code16
thumb
 mov r0,#00
 sub r0,r0,#01
 mov r1,#01
 mov r4,#10
 ldr r2,=0x40000000
back add r0,r1
 str r0,[r2]
 add r2,#04
 mov r3,r0
 mov r0,r1
 mov r1,r3
 sub r4,#01
 cmp r4,#00
 bne back
 end
```

----------------------------------------

TITLE: Open Project in VS Code
DESCRIPTION: This command opens the current directory (which should be 'typing-game' after the previous step) in Visual Studio Code. This allows the user to easily create and edit the project files (index.html, script.js, style.css).
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/4-typing-game/typing-game/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
code .
```

----------------------------------------

TITLE: Project Directory Structure Bash
DESCRIPTION: This bash snippet shows the expected directory structure for the project, including asset folders, HTML, JavaScript, and package files. This helps users locate the necessary files to begin working on the project.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/3-moving-elements-around/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
-| assets
  -| enemyShip.png
  -| player.png
-| index.html
-| app.js
-| package.json
```

----------------------------------------

TITLE: Project File Structure
DESCRIPTION: Shows the initial file and folder structure provided for the project, including asset files, the main HTML file, the JavaScript application file, and the npm package configuration.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/6-space-game/2-drawing-to-canvas/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
-| assets
  -| enemyShip.png
  -| player.png
-| index.html
-| app.js
-| package.json
```

----------------------------------------

TITLE: Codeswing Configuration (JSON)
DESCRIPTION: Provides a basic configuration file for the Codeswing VS Code extension, typically used to define scripts and styles to be included or processed by the extension.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/8-code-editor/1-using-a-code-editor/assignment.md#_snippet_2

LANGUAGE: json
CODE:
```
{
    "scripts": [],
    "styles": []
}
```

----------------------------------------

TITLE: Progressive Enhancement Task - HTML Placeholder
DESCRIPTION: This code block is a placeholder within a 'Task' section, intended to contain code examples for progressively enhancing a codebase collaboratively. The actual code content is expected to replace the 'code blocks' placeholder.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/lesson-template/README.md#_snippet_0

LANGUAGE: html
CODE:
```
code blocks
```

----------------------------------------

TITLE: Attaching Login Function to Form Submission - HTML
DESCRIPTION: Modifies the HTML form element with the ID 'loginForm'. The `action` attribute is set to `javascript:login()` to execute the JavaScript `login` function when the form is submitted, preventing a standard page reload.
SOURCE: https://github.com/microsoft/web-dev-for-beginners/blob/main/7-bank-project/3-data/README.md#_snippet_5

LANGUAGE: HTML
CODE:
```
<form id="loginForm" action="javascript:login()">
```