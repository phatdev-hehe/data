TITLE: Install FastAPI Standard Dependencies (Shell)
DESCRIPTION: This command installs the FastAPI package along with a set of commonly used optional dependencies specified in the 'standard' extra group. This includes packages necessary for email validation, testing client, template rendering, form data parsing, and the recommended Uvicorn server.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_9

LANGUAGE: shell
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Return Dictionary from PUT Endpoint
DESCRIPTION: This Python snippet shows the return statement for the `update_item` PUT endpoint. Returning a Python dictionary allows FastAPI to automatically serialize it into a JSON response. This example constructs the dictionary using the `name` attribute from the validated `item` Pydantic model received in the request body and the `item_id` path parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Get Current User from JWT Token
DESCRIPTION: This function demonstrates how to retrieve the current authenticated user by decoding and verifying a JWT token provided in the request. It raises an HTTP exception if the token is invalid or expired.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    # In a real app, fetch user from DB using token_data.username
    user = fake_users_db.get(token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Implementing Token Generation Endpoint in FastAPI
DESCRIPTION: This Python code snippet demonstrates how to implement a token generation endpoint in FastAPI. It authenticates the user and returns a JWT token upon successful authentication.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.post("/token", response_model=Token)
async def login_for_access_token(
    form_data: Annotated[OAuth2PasswordRequestForm, Depends()]
):
    user = authenticate_user(fake_users_db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: JWT Token Authentication in FastAPI
DESCRIPTION: This snippet demonstrates how to authenticate users using JWT tokens in a FastAPI application. It includes functions for decoding the token, verifying its validity, and retrieving the current user.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = get_user(username=token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Importing and Raising HTTPException in FastAPI
DESCRIPTION: Shows how to import and raise HTTPException for handling API errors with custom status codes and messages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import HTTPException

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application in Python
DESCRIPTION: This snippet shows how to import FastAPI, create an instance, and define a simple GET endpoint that returns a JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Pydantic Settings class definition (v2)
DESCRIPTION: This code defines a Pydantic `Settings` class to handle configuration values, reading them from environment variables. It demonstrates type annotations, default values, and additional validation using `Field()` from Pydantic v2.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, Field
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    app_name: str = Field("Awesome API", alias="APP_NAME")
    admin_email: str
    items_per_user: int = 50
    model_config = SettingsConfigDict(env_file=".env", env_prefix="MY_PREFIX_")


settings = Settings()
```

----------------------------------------

TITLE: Defining File Parameter with File()
DESCRIPTION: This snippet shows how to define a file parameter in a FastAPI endpoint using the `File()` function. This tells FastAPI that the endpoint expects a file to be uploaded as part of the request. The file will be received as bytes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"from typing import Annotated

from fastapi import Body, FastAPI, File

app = FastAPI()


@app.post("/files/")
async def create_file(
    file: Annotated[bytes, File()], fileb: Annotated[bytes, File()], token: Annotated[str, Body()])
:
    return {"file_size": len(file), "fileb_size": len(fileb), "token": token}"
```

----------------------------------------

TITLE: Defining Hero Create Model in Python
DESCRIPTION: Creates a HeroCreate model that inherits from HeroBase and adds a secret_name field for hero creation. This model validates client data and handles sensitive information like secret names.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
class HeroCreate(HeroBase):
    secret_name: str
```

----------------------------------------

TITLE: Including APIRouters in FastAPI Application
DESCRIPTION: Demonstrates how to include APIRouters from imported modules into the main FastAPI application using the include_router() method.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Secure Username Verification with HTTP Basic Auth
DESCRIPTION: This snippet shows how to securely verify a username and password using Python's secrets module to prevent timing attacks. It converts the username and password to UTF-8 encoded bytes before using secrets.compare_digest() to compare them.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/http-basic-auth.md#_snippet_1

LANGUAGE: Python
CODE:
```
import secrets

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

security = HTTPBasic()


def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):
    correct_username = secrets.compare_digest(credentials.username, "stanleyjobson".encode("utf8"))
    correct_password = secrets.compare_digest(credentials.password, "swordfish".encode("utf8"))
    if not (correct_username and correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials.username


@app.get("/items/")
def read_items(username: str = Depends(get_current_username)):
    return {"username": username}
```

----------------------------------------

TITLE: Adding an output model to FastAPI
DESCRIPTION: This example demonstrates the best practice of creating separate input (`UserIn`) and output (`UserOut`) models.  The input model may contain sensitive data, while the output model exposes only necessary information. The `response_model` parameter is used to specify the `UserOut` model, ensuring the password is not included in the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"class UserIn(BaseModel):
    username: str
    password: str

class UserOut(BaseModel):
    username: str
    full_name: Optional[str] = None"
```

LANGUAGE: python
CODE:
```
"@app.post("/users/", response_model=UserOut)
async def create_user(user: UserIn):
    # The function returns the input user but the password is not included in the response
    return user"
```

LANGUAGE: python
CODE:
```
"# response_model declared as UserOut, which does not contain the password"
```

----------------------------------------

TITLE: JWT Token Generation and Handling
DESCRIPTION: This snippet shows how to generate a random secret key, define the algorithm for signing JWT tokens, and create a utility function for generating a new access token. It also defines a Pydantic model for the token endpoint response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: Python
CODE:
```
SECRET_KEY = "YOUR_SECRET_KEY"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Union[str, None] = None


def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: FastAPI Path Operation with Request Body
DESCRIPTION: Demonstrates declaring a FastAPI endpoint that accepts a request body using the Pydantic model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.post("/items/")
async def create_item(item: Item):
```

----------------------------------------

TITLE: Using openapi_examples Parameter in FastAPI (Python)
DESCRIPTION: This snippet demonstrates the use of the openapi_examples parameter in FastAPI's Body(). It shows how to declare OpenAPI-specific examples with additional metadata that will be displayed in the API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    *,
    item_id: int,
    item: Item = Body(
        openapi_examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                },
            },
            "converted": {
                "summary": "An example with converted data",
                "description": "FastAPI can convert price strings to actual numbers automatically",
                "value": {
                    "name": "Bar",
                    "price": "35.4",
                },
            },
            "invalid": {
                "summary": "Invalid data is rejected with an error",
                "value": {
                    "name": "Baz",
                    "price": "thirty five point four",
                },
            },
        },
    ),
):
```

----------------------------------------

TITLE: JWT Token Generation in FastAPI
DESCRIPTION: This snippet demonstrates how to generate JWT tokens using the `python-jose` library. It includes functions for creating access tokens and defining a Pydantic model for the token response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: Python
CODE:
```
from datetime import datetime, timedelta
from typing import Optional

from jose import JWTError, jwt
from pydantic import BaseModel

SECRET_KEY = "YOUR_SECRET_KEY"
ALGORITHM = "HS256"


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Optional[str] = None


def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Defining a Path Operation Function in FastAPI (Async)
DESCRIPTION: This code snippet demonstrates how to define an asynchronous path operation function in FastAPI. The `@app.get("/")` decorator associates the `root` function with the root path ("/") and the GET HTTP method.  The function returns a dictionary which FastAPI automatically converts to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
"@app.get("/")
async def root():
    return {"message": "Hello World"}"
```

----------------------------------------

TITLE: Using the settings object
DESCRIPTION: This code snippet demonstrates how to access and use the attributes of a `Settings` object in a FastAPI application. The settings have already been populated with values from environment variables and default values, and data validation has been done.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items():
    return {"app_name": settings.app_name, "admin_email": settings.admin_email}
```

----------------------------------------

TITLE: Adding Custom Headers to HTTPException
DESCRIPTION: Demonstrates how to add custom headers when raising an HTTPException for advanced scenarios like security requirements.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.get("/items-header/{item_id}")
async def read_item_header(item_id: str):
    if item_id not in items:
        raise HTTPException(
            status_code=404,
            detail="Item not found",
            headers={"X-Error": "There goes my error"},
        )
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Dictionary with Type Parameters
DESCRIPTION: Shows how to define a dictionary with specific types for keys and values
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
def create_weights(weights: dict[int, float]):
    return weights
```

----------------------------------------

TITLE: Reading a Single Hero API Endpoint with FastAPI and SQLModel in Python
DESCRIPTION: Implements a GET endpoint to read a single Hero from the database by ID using SQLModel and FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
@app.get("/heroes/{hero_id}", response_model=Hero)
def read_hero(hero_id: int, session: SessionDep):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: Implementing JWT and Password Hashing in FastAPI
DESCRIPTION: This Python code snippet demonstrates how to implement JWT token handling and password hashing in a FastAPI application. It includes functions for password hashing, verification, and JWT token generation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from passlib.context import CryptContext
from jose import JWTError, jwt
from datetime import datetime, timedelta
from typing import Annotated

SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def authenticate_user(fake_db, username: str, password: str):
    user = get_user(fake_db, username)
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False
    return user

def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Config file without a default settings instance
DESCRIPTION: This shows the `config.py` without creating a default settings instance. This allows deferring the instantiation of the `Settings` object, which is useful when you want to provide different settings during testing or in different environments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50
```

----------------------------------------

TITLE: Path Parameter with Type Annotation in FastAPI
DESCRIPTION: This snippet shows how to declare the type of a path parameter using Python type annotations. Here, `item_id` is annotated as an `int`, which enables automatic data conversion and validation by FastAPI. If a non-integer value is provided in the path, FastAPI will return an error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"""from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}""
```

----------------------------------------

TITLE: Creating Database Tables on FastAPI Startup in Python
DESCRIPTION: Sets up an event handler to create database tables when the FastAPI application starts.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
app = FastAPI()

@app.on_event("startup")
def on_startup():
    create_db_and_tables()
```

----------------------------------------

TITLE: Database Dependency with Yield in FastAPI
DESCRIPTION: This code defines a dependency that simulates a database connection.  The `yield` keyword separates the setup (creating the database dependency) from the teardown (closing the connection) phases.  The dependency is injected into a path operation function, providing access to the 'database' object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from typing import Generator\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def get_db() -> Generator[dict, None, None]:\n    db = {"name": "foo"}\n    try:\n        yield db\n    finally:\n        db.clear()\n\n\n@app.get("/items/")\nasync def read_items(db: dict = Depends(get_db)):\n    return db"
```

----------------------------------------

TITLE: Adding GZip Compression Middleware in FastAPI - Python
DESCRIPTION: Integrates the `GZipMiddleware` into a FastAPI application to automatically compress responses for clients that support GZip encoding. It can be configured with a `minimum_size` to avoid compressing very small responses where the overhead might outweigh the benefits.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.gzip import GZipMiddleware

app = FastAPI()

app.add_middleware(GZipMiddleware, minimum_size=500)
```

----------------------------------------

TITLE: Create Hero Endpoint
DESCRIPTION: Define a FastAPI POST endpoint `/heroes/` to create a new Hero. It uses the `SessionDep` dependency to get a database session and the `Hero` model to receive data from the request body. The new hero is added to the session, committed to the database, and refreshed before being returned.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends
from sqlmodel import Session

@app.post("/heroes/")
def create_hero(*, session: SessionDep, hero: Hero):
    session.add(hero)
    session.commit()
    session.refresh(hero)
    return hero
```

----------------------------------------

TITLE: Combining Path Parameters and Body in FastAPI (Python)
DESCRIPTION: Shows how to define a path operation that accepts both a path parameter (e.g., `item_id: int`) and a request body parameter (`item: Item`). FastAPI automatically distinguishes between parameters based on their location (path variable name vs. type-hinted Pydantic model for body). Requires a FastAPI app, the `Item` model, and imports.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item):
    return {"item_id": item_id, **item.model_dump()}
```

----------------------------------------

TITLE: Implementing PATCH Operation for Partial Updates in FastAPI
DESCRIPTION: This code demonstrates how to implement a PATCH operation in FastAPI to partially update an existing item. It uses exclude_unset=True to only include fields that were explicitly set in the request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-updates.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.patch("/items/{item_id}", response_model=Item)
def update_item(item_id: str, item: Item):
    stored_item_data = items.get(item_id)
    if stored_item_data is None:
        raise HTTPException(status_code=404, detail="Item not found")
    stored_item_model = Item(**stored_item_data)
    update_data = item.dict(exclude_unset=True)
    updated_item = stored_item_model.copy(update=update_data)
    items[item_id] = jsonable_encoder(updated_item)
    return updated_item
```

----------------------------------------

TITLE: Injecting Current User in Route Operation
DESCRIPTION: Demonstrates how to inject current user dependency into a route operation with type checking
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/users/me")
def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user
```

----------------------------------------

TITLE: Defining a GET path operation in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a GET path operation in FastAPI, which is used to handle requests to a specific URL. It uses a decorator `@app.get()` to associate the function `read_url` with the `/some/url` endpoint. The function returns a dictionary, which FastAPI automatically converts to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/alternatives.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}"
```

----------------------------------------

TITLE: Using Dependencies with WebSocket Endpoints in FastAPI
DESCRIPTION: Shows how to implement dependency injection in WebSocket endpoints using FastAPI's Depends. This example demonstrates parameter validation and authorization through dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.websocket("/items/{item_id}/ws")
async def websocket_endpoint(
    websocket: WebSocket,
    item_id: str,
    q: str = Depends(get_token),
):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(
            f"Session cookie or query token value is: {q}"
        )
```

----------------------------------------

TITLE: Custom Exception Handler Implementation
DESCRIPTION: Shows how to create and register a custom exception handler for handling specific exceptions across the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name

@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."}
    )

@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"unicorn_name": name}
```

----------------------------------------

TITLE: Using a Pydantic Model as Path Operation Input Parameter in FastAPI
DESCRIPTION: A code example showing how to use a Pydantic model as an input parameter in a FastAPI path operation. The model's description field is not required for input because it has a default value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: str | None = None


app = FastAPI()


@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Creating Basic Synchronous FastAPI Application (Python)
DESCRIPTION: This Python code snippet defines a minimal FastAPI application. It imports necessary components, creates an app instance, and defines two synchronous GET endpoints: a root endpoint and an endpoint that accepts a path parameter and an optional query parameter. Type hints are used for automatic data validation and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Complete FastAPI Security Example
DESCRIPTION: This is a complete FastAPI example that sets up the OAuth2PasswordBearer, and uses it as a dependency in a route to enforce security. It defines a `/token` endpoint where users can obtain an access token, and also a `/items/` endpoint which requires a valid access token to be accessed.  `python-multipart` needs to be installed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"from fastapi import Depends, FastAPI, HTTPException\nfrom fastapi.security import OAuth2PasswordBearer\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")\n\n\n@app.get("/items/")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {"token": token}\n"
```

----------------------------------------

TITLE: Reading Heroes List Endpoint in FastAPI
DESCRIPTION: Implements GET endpoint to retrieve list of heroes, using HeroPublic model for response serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
@app.get("/heroes/", response_model=list[HeroPublic])
def read_heroes(
    *,
    session: Session = Depends(get_session),
    offset: int = 0,
    limit: int = Query(default=100, lte=100),
):
    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
    return heroes
```

----------------------------------------

TITLE: Defining Multiple Values Query Parameter in FastAPI (Python 3.10+)
DESCRIPTION: Declares a query parameter 'q' that can accept multiple values by using Query with a list type annotation. When the URL contains multiple instances of the same parameter, they will be collected into a Python list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Annotated[list[str] | None, Query()] = None):
    query_items = {"q": q}
    return query_items
```

----------------------------------------

TITLE: Adding Custom Middleware in FastAPI - Python
DESCRIPTION: This code snippet demonstrates how to add a custom ASGI middleware to a FastAPI application using the `add_middleware` method. The middleware class and any additional configuration can be specified as arguments. This approach ensures that server errors and custom exception handlers function properly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/middleware.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter. It demonstrates the basic structure of a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/he/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Declare Pydantic Model for Request Body
DESCRIPTION: This Python snippet demonstrates declaring a request body parameter in a FastAPI endpoint function using a Pydantic model type hint (`Item`). FastAPI automatically reads the incoming request body as JSON, validates it against the schema defined by the `Item` model, provides the validated data as a Python object, and generates corresponding request body documentation in the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Importing Pydantic BaseModel in FastAPI
DESCRIPTION: Shows how to import the BaseModel class from Pydantic, which is used to define request body schemas.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from pydantic import BaseModel
```

----------------------------------------

TITLE: Declaring Examples in Pydantic Model with JSON Schema (Python)
DESCRIPTION: This snippet demonstrates how to declare examples for a Pydantic model using the model_config attribute with json_schema_extra. The examples will be added to the generated JSON Schema and used in API docs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            ]
        }
    }
```

----------------------------------------

TITLE: Token Path Operation
DESCRIPTION: This snippet defines a FastAPI path operation at `/token` that handles user authentication using OAuth2 password flow. Upon successful authentication, it generates and returns a JWT access token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm

router = APIRouter()

@router.post("/token")
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Declaring JSON Responses with Various Status Codes in FastAPI
DESCRIPTION: This JSON snippet demonstrates how to declare additional API responses in FastAPI with diverse status codes like 404 and 422 using Pydantic models such as Message and HTTPValidationError. The snippet emphasizes the structure of the OpenAPI schema for various HTTP responses. This configuration requires defining components and schemas in OpenAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "responses": {
        "404": {
            "description": "Additional Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Message"
                    }
                }
            }
        },
        "200": {
            "description": "Successful Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Item"
                    }
                }
            }
        },
        "422": {
            "description": "Validation Error",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Defining OAuth2 Scheme in FastAPI (Python)
DESCRIPTION: This snippet shows how to define an OAuth2 scheme in FastAPI, which is used as a dependency for token-based authentication.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Dependency with yield and except
DESCRIPTION: Illustrates the importance of re-raising exceptions caught in the `except` block of a dependency using `yield`. If an exception is caught and not re-raised, FastAPI will not be aware of the error, potentially leading to unexpected behavior.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_4

LANGUAGE: python
CODE:
```
async def dependency_a():
    try:
        yield
    except InternalError:
        # 错误将会被隐藏!
        pass
```

----------------------------------------

TITLE: Implementing User Authentication Dependencies in FastAPI
DESCRIPTION: This snippet showcases the creation of dependencies for user authentication, including checking for user existence, authentication, and active status.  It demonstrates how to use `HTTPException` to return errors if the user is not found, not authenticated, or inactive, and how to return a `User` object after successful authentication and activity verification.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from pydantic import BaseModel


class User(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None
    hashed_password: str


class UserInDB(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None
    hashed_password: str


fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "email": "johndoe@example.com",
        "full_name": "John Doe",
        "disabled": False,
        "hashed_password": "fakehashedsecret",
    },
    "alice": {
        "username": "alice",
        "email": "alice@example.com",
        "full_name": "Alice Alison",
        "disabled": True,
        "hashed_password": "fakehashedsecret",
    },
}


def fake_hash_password(password: str):
    return f"fakehashed{password}"


oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_user(username: str):
    if username in fake_users_db:
        user_dict = fake_users_db[username]
        return User(**user_dict)


async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    user = await get_user(token)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return user


async def get_current_active_user(current_user: Annotated[User, Depends(get_current_user)]):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user


app = FastAPI()


@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user = fake_users_db.get(form_data.username)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    if not fake_hash_password(form_data.password) == user["hashed_password"]:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return {"access_token": user["username"], "token_type": "bearer"}


@app.get("/users/me")
async def read_users_me(current_user: Annotated[User, Depends(get_current_active_user)]):
    return current_user
```

----------------------------------------

TITLE: Implementing get_current_user Dependency in FastAPI (Python)
DESCRIPTION: This snippet demonstrates the implementation of a get_current_user dependency in FastAPI. It uses the OAuth2 scheme to extract the token and a fake_decode_token function to validate and return the user.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    user = fake_decode_token(token)
    return user
```

----------------------------------------

TITLE: Using Current User in FastAPI Path Operation (Python)
DESCRIPTION: This snippet demonstrates how to use the get_current_user dependency in a FastAPI path operation. It injects the current user into the function and returns the user data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/users/me")
async def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):
    return current_user
```

----------------------------------------

TITLE: Using ORJSONResponse in FastAPI
DESCRIPTION: This code snippet demonstrates how to use `ORJSONResponse` in FastAPI to improve performance when returning JSON responses. It imports `ORJSONResponse` and sets it as the `response_class` in the *path operation decorator*.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()


@app.get("/items/{item_id}", response_class=ORJSONResponse)  # HL
async def read_item(item_id: int):
    return {"item_id": item_id}

```

----------------------------------------

TITLE: Declaring Model Attributes with Field Validation
DESCRIPTION: Demonstrates using Pydantic Field to declare model attributes with validation rules and metadata. Shows validation for item name, description, and price fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-fields.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
    name: str = Field(example="Foo")
    description: str | None = Field(default=None, example="A very nice Item")
    price: float = Field(gt=0, description="The price must be greater than zero", example=35.4)
    tax: float | None = Field(default=None, example=3.2)
```

----------------------------------------

TITLE: Using Body() with Multiple Examples in FastAPI (Python)
DESCRIPTION: This code shows how to use Body() with multiple examples in FastAPI. It demonstrates passing multiple examples of the expected data in the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    *,
    item_id: int,
    item: Item = Body(
        examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                },
            },
            "converted": {
                "summary": "An example with converted data",
                "description": "FastAPI can convert price strings to actual numbers automatically",
                "value": {
                    "name": "Bar",
                    "price": "35.4",
                },
            },
            "invalid": {
                "summary": "Invalid data is rejected with an error",
                "value": {
                    "name": "Baz",
                    "price": "thirty five point four",
                },
            },
        },
    ),
):
```

----------------------------------------

TITLE: Using Status Code Convenience Variables in FastAPI
DESCRIPTION: This example demonstrates how to use convenience variables from fastapi.status to set the HTTP status code (201 Created) for a POST request, improving code readability and maintainability.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-status-code.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()

@app.post("/items/", status_code=status.HTTP_201_CREATED)
```

----------------------------------------

TITLE: Implementing CORS Middleware in FastAPI
DESCRIPTION: Example showing how to configure CORS middleware in a FastAPI application with custom origins, methods, and headers. Demonstrates setting up allowed origins, credentials, and HTTP methods for cross-origin requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cors.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

----------------------------------------

TITLE: Form Data Extraction with Pydantic in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a Pydantic model to represent form data and use it as a parameter in a FastAPI endpoint, allowing FastAPI to automatically extract form data into the Pydantic model. It shows the import statements, the Pydantic model definition, and the FastAPI endpoint that utilizes the model with `Form`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-form-models.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Form

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None


app = FastAPI()


@app.post("/items/")
async def create_item(
    item: Annotated[Item, Form(...)],
):
    return item
```

----------------------------------------

TITLE: Creating a Pydantic Settings Object
DESCRIPTION: This code snippet shows how to create a Pydantic `Settings` object by subclassing `BaseSettings`. It defines class attributes with type annotations and default values. Pydantic automatically reads environment variables (case-insensitive) and converts them to the declared types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/settings.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50

    class Config:
        env_file = ".env"
```

----------------------------------------

TITLE: Token Endpoint Implementation in FastAPI
DESCRIPTION: This snippet demonstrates how to implement a token endpoint in FastAPI that generates and returns a JWT token upon successful user authentication.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException
from fastapi.security import OAuth2PasswordRequestForm

app = FastAPI()

@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=15)
    access_token = create_access_token(
        data={"sub": user["username"]},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Setting Response Status Code in FastAPI Path Operation
DESCRIPTION: This snippet shows how to set a custom HTTP status code (201 Created) for a POST request in a FastAPI application using the status_code parameter in the path operation decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-status-code.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@app.post("/items/", status_code=201)
```

----------------------------------------

TITLE: Defining Multiple SQLModel Models for Improved Security in Python
DESCRIPTION: Creates multiple models (HeroBase, Hero, HeroPublic) using SQLModel to enhance security and versatility in the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
class HeroBase(SQLModel):
    name: str
    age: int | None = None

class Hero(HeroBase, table=True):
    id: int | None = Field(default=None, primary_key=True)
    secret_name: str

class HeroPublic(HeroBase):
    id: int
```

----------------------------------------

TITLE: Running a FastAPI Application with WebSockets
DESCRIPTION: Demonstrates how to run a FastAPI application that includes WebSocket endpoints using the FastAPI development server.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Declaring a Request Body Parameter in a Path Operation
DESCRIPTION: Shows how to use a Pydantic model as a parameter in a FastAPI path operation function to receive and validate the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.post("/items/")
async def create_item(item: Item):
```

----------------------------------------

TITLE: Update get_current_user Dependency with JWT
DESCRIPTION: This snippet updates the `get_current_user` dependency to use JWT tokens for authentication. It decodes the received token, verifies it, and returns the current user. If the token is invalid, it returns an HTTP error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = get_user(fake_users_db, username=token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: WebSocket with Dependencies in FastAPI
DESCRIPTION: Shows how to use dependencies like Depends, Security, Cookie, Header, Path, and Query with WebSocket connections in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/websockets.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.websocket("/items/{item_id}/ws")
async def websocket_endpoint(
    websocket: WebSocket,
    item_id: str,
    q: str | None = None,
    cookie_or_token: str = Depends(get_cookie_or_token),
):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(
            f"Session cookie or token value is: {cookie_or_token}"
        )
        if q:
            await websocket.send_text(f"Query parameter q is: {q}")
        await websocket.send_text(f"Message text was: {data}, for item ID: {item_id}")
```

----------------------------------------

TITLE: Complex Nested Model Structure
DESCRIPTION: Demonstrates deeply nested Pydantic models with Offer containing Items and Images
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
class Image(BaseModel):
    url: str
    name: str

class Item(BaseModel):
    name: str
    images: list[Image] | None = None

class Offer(BaseModel):
    name: str
    items: list[Item]
```

----------------------------------------

TITLE: Adding Title Metadata to Query Parameters in FastAPI (Python 3.10+)
DESCRIPTION: Shows how to add a title to a query parameter using the Query class. This title will be included in the OpenAPI documentation to provide more context about the parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Annotated[str | None, Query(title="Query string", min_length=3)] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Token Generation Endpoint
DESCRIPTION: Create a token endpoint that generates access tokens with token type and user-specific access credentials
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
return {"access_token": username, "token_type": "bearer"}
```

----------------------------------------

TITLE: Importing OAuth2PasswordRequestForm and Using it as a Dependency in FastAPI
DESCRIPTION: This snippet shows how to import OAuth2PasswordRequestForm and use it as a dependency in the token endpoint of a FastAPI application. It handles form data for username and password in the OAuth2 password flow.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.security import OAuth2PasswordRequestForm

@app.post("/token")
async def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):
```

----------------------------------------

TITLE: Declaring Header Parameters with Pydantic Model in FastAPI
DESCRIPTION: This snippet shows how to create a Pydantic model for header parameters and use it in a FastAPI route. It demonstrates the declaration of multiple header parameters within a single model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-param-models.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Header
from pydantic import BaseModel

class HeaderModel(BaseModel):
    user_agent: str
    accept_language: str | None = None

app = FastAPI()

@app.get("/headers/")
async def get_headers(headers: HeaderModel = Header()):
    return headers
```

----------------------------------------

TITLE: Updating the /token Path Operation with JWT
DESCRIPTION: This snippet updates the `/token` path operation to generate and return a JWT access token. It creates a `timedelta` with the token's expiration time and generates a real JWT access token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: Python
CODE:
```
from datetime import timedelta, datetime
from typing import Annotated

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


app = FastAPI()


ACCESS_TOKEN_EXPIRE_MINUTES = 30


SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"  # Change this in production!
ALGORITHM = "HS256"


# to get more information go to https://passlib.readthedocs.io/en/stable/context_tutorial.html
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):
    user = await authenticate_user(form_data)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Basic HTTP Basic Auth with FastAPI
DESCRIPTION: This snippet demonstrates the basic implementation of HTTP Basic Authentication in FastAPI. It imports HTTPBasic and HTTPBasicCredentials, creates a security scheme, and uses it as a dependency in a path operation to retrieve the username and password.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/http-basic-auth.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

security = HTTPBasic()


def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):
    return credentials.username


@app.get("/items/")
def read_items(username: str = Depends(get_current_username)):
    return {"username": username}
```

----------------------------------------

TITLE: Declaring Dependencies in FastAPI Path Operations
DESCRIPTION: Demonstrates how to use the Depends function to inject dependencies into path operation functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons

@app.get("/users/")
async def read_users(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Importing APIRouter in FastAPI
DESCRIPTION: This code snippet demonstrates how to import the APIRouter class from FastAPI and create an instance of it. The APIRouter is used to define route operations in a modular way, allowing you to organize your application into multiple files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()
```

----------------------------------------

TITLE: Basic FastAPI Test Setup in Python
DESCRIPTION: Example of setting up a basic test for a FastAPI application using TestClient and pytest.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi.testclient import TestClient

from .main import app

client = TestClient(app)


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: URL Validation with HttpUrl
DESCRIPTION: Uses Pydantic's HttpUrl type for URL validation in Image model
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str
```

----------------------------------------

TITLE: File Parameters with UploadFile in FastAPI
DESCRIPTION: This snippet shows how to define a file parameter using `UploadFile` in FastAPI. `UploadFile` provides advantages over `bytes`, like using a spooled file to handle larger files efficiently. It includes metadata like filename and content_type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"async def upload_file(file: UploadFile):
    return {"filename": file.filename}"
```

----------------------------------------

TITLE: Securing Path Operation with OAuth2
DESCRIPTION: Secures a path operation by adding a dependency on the OAuth2PasswordBearer scheme. This ensures that the endpoint requires a valid token in the Authorization header.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Handling User Authentication and Error in FastAPI
DESCRIPTION: This code snippet demonstrates how to handle user authentication by checking the username from form data against a database. It raises an HTTPException if the user is not found.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException, status

user = fake_users_db.get(form_data.username)
if not user:
    raise HTTPException(
        status_code=status.HTTP_400_BAD_REQUEST,
        detail="Incorrect username or password"
    )
```

----------------------------------------

TITLE: Changing Response Status Code in FastAPI Python
DESCRIPTION: This code snippet demonstrates how to use a Response parameter in a FastAPI path operation function to set a custom status code. It shows creating a new item with a 201 CREATED status while still using response_model for data filtering.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-change-status-code.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response, status

app = FastAPI()

@app.post("/items/", response_model=Item, status_code=200)
def create_item(item: Item, response: Response):
    if item.id in stored_items:
        return stored_items[item.id]
    stored_items[item.id] = item
    response.status_code = status.HTTP_201_CREATED
    return item
```

----------------------------------------

TITLE: Generate a Secret Key
DESCRIPTION: Use the OpenSSL command line tool to generate a secure, random hexadecimal string suitable for use as a secret key for signing JWT tokens.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: bash
CODE:
```
openssl rand -hex 32
```

----------------------------------------

TITLE: Settings as a dependency in main app file
DESCRIPTION: This code demonstrates how to inject a `Settings` object as a dependency into a FastAPI path operation function. It uses `lru_cache` to ensure that the `Settings` object is created only once.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from fastapi import Depends, FastAPI

from .config import Settings

app = FastAPI()


@lru_cache
def get_settings():
    return Settings()


@app.get("/items/")
async def read_items(settings: Settings = Depends(get_settings)):
    return {"app_name": settings.app_name, "admin_email": settings.admin_email}
```

----------------------------------------

TITLE: Defining File Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to define a file parameter in a FastAPI path operation function.  It uses the `File` class to indicate that the parameter should be treated as a file uploaded via form data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"async def upload_file(file: bytes = File()):
    return {"file_size": len(file)}"
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code defines a basic FastAPI application with a single endpoint that returns a JSON response. It uses the FastAPI framework to create an API endpoint at the root path ('/') that returns a JSON object with a 'message' key.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Password Hashing and Verification with PassLib
DESCRIPTION: This snippet demonstrates how to create a PassLib context for hashing and verifying passwords. It includes utility functions for hashing a user-provided password and verifying if a received password matches the stored hash.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: Python
CODE:
```
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password):
    return pwd_context.hash(password)


def verify_password(password, hashed_password):
    return pwd_context.verify(password, hashed_password)
```

----------------------------------------

TITLE: Adding Tags to FastAPI Path Operations
DESCRIPTION: Demonstrates how to add tags to FastAPI path operations using the tags parameter to group related endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.get("/items/", tags=["items"])
async def read_items():
    return ["Portal gun", "Plumbus"]

@app.get("/users/", tags=["users"])
async def read_users():
    return ["Rick", "Morty"]

@app.get("/elements/", tags=["items"], deprecated=True)
async def read_elements():
```

----------------------------------------

TITLE: Declaring Request Body Parameter
DESCRIPTION: This code snippet illustrates how to declare a request body parameter in a FastAPI path operation. By specifying the type of the parameter as the Pydantic model (`Item`), FastAPI automatically handles request parsing, validation, and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def create_item(item: Item): # noqa: ARG001
    return item
```

----------------------------------------

TITLE: Creating SQLModel Database Model
DESCRIPTION: Defines a Hero model using SQLModel, specifying table metadata, primary key, and index. The model includes fields for id, name, secret_name, and age, with appropriate data types and constraints for database storage.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from sqlmodel import Field, SQLModel, create_engine


class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Creating a Session Dependency for FastAPI in Python
DESCRIPTION: Defines a FastAPI dependency that provides a new SQLModel Session for each request, ensuring a single session per request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def get_session():
    with Session(engine) as session:
        yield session

SessionDep = Annotated[Session, Depends(get_session)]
```

----------------------------------------

TITLE: Accessing Request Validation Error Details
DESCRIPTION: Shows how to access and return detailed validation error information including the invalid request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=400,
        content={"detail": exc.errors(), "body": exc.body}
    )
```

----------------------------------------

TITLE: Defining Asynchronous Path Operation Function in FastAPI
DESCRIPTION: This snippet shows how to define an asynchronous path operation function in FastAPI using the 'async def' syntax. It's recommended for functions that may involve I/O operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
async def path_operation_function():
    # Asynchronous code here
    pass
```

----------------------------------------

TITLE: Dockerfile for FastAPI Application
DESCRIPTION: Docker configuration file that sets up a Python environment, installs dependencies, and configures the FastAPI application to run on port 80.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

----------------------------------------

TITLE: Complete Partial Update Workflow
DESCRIPTION: Full example of partial data update process, including model validation, data extraction, and database update using Pydantic and FastAPI
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-updates.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
tutorial002.py (lines 30-37)
```

----------------------------------------

TITLE: Deleting a Hero API Endpoint with FastAPI and SQLModel in Python
DESCRIPTION: Implements a DELETE endpoint to remove a Hero from the database by ID using SQLModel and FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
@app.delete("/heroes/{hero_id}")
def delete_hero(hero_id: int, session: SessionDep):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    session.delete(hero)
    session.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Importing BaseModel from Pydantic
DESCRIPTION: This code snippet demonstrates how to import the `BaseModel` class from the `pydantic` library. `BaseModel` is used as the base class for creating data models that define the structure and validation rules for request bodies in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body.md#_snippet_0

LANGUAGE: python
CODE:
```
from pydantic import BaseModel
```

----------------------------------------

TITLE: Defining Endpoint with Form Parameters
DESCRIPTION: Defines an asynchronous POST endpoint `/login/` that expects `username` and `password` as form data parameters. Using `Form(...)` makes these parameters required form fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-forms.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def login(username: str = Form(...), password: str = Form(...)):
```

----------------------------------------

TITLE: Mixed Required and Optional Query Parameters in FastAPI
DESCRIPTION: This example shows a combination of required, optional, and default-valued query parameters in a FastAPI route. It includes a required string, an integer with a default value, and an optional integer.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
async def read_user_item(item_id: str, needy: str, skip: int = 0, limit: int | None = None):
```

----------------------------------------

TITLE: Defining a Dependency Function in Python
DESCRIPTION: Creates a simple dependency function that handles common query parameters. It demonstrates the basic structure of a FastAPI dependency.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
def common_parameters(q: Union[str, None] = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: StreamingResponse in FastAPI
DESCRIPTION: This snippet demonstrates how to use `StreamingResponse` to stream data from a generator function. This is particularly useful for large datasets or when generating data on the fly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import asyncio

app = FastAPI()


async def fake_video_streamer():
    for i in range(10):
        yield b"some fake video bytes"  # HL
        await asyncio.sleep(0.01)


@app.get("/video")
async def main():
    return StreamingResponse(fake_video_streamer(), media_type="video/mp4")  # HL

```

----------------------------------------

TITLE: Defining HTTP DELETE Route with Custom Status Code in FastAPI
DESCRIPTION: This snippet illustrates how to define a DELETE route using @app.delete() and how to return a specific status code when an item is successfully deleted. The status_code parameter helps in indicating the successful operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-status-code.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.delete("/items/{item_id}", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_item(item_id: int):\n    return {"message": "Item deleted"}
```

----------------------------------------

TITLE: JSON Response for /users/me/ endpoint
DESCRIPTION: This JSON snippet represents the expected response from the `/users/me/` endpoint after successful authentication. It includes user details such as username, email, full name, and disabled status. This endpoint is protected and requires a valid JWT token in the Authorization header.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "username": "johndoe",
  "email": "johndoe@example.com",
  "full_name": "John Doe",
  "disabled": false
}
```

----------------------------------------

TITLE: Define FastAPI Application with GET and PUT Endpoints
DESCRIPTION: This Python code defines a FastAPI application with multiple endpoints. It includes a basic root GET endpoint, a GET endpoint that accepts a path parameter (`item_id`) and an optional query parameter (`q`), and a PUT endpoint that accepts a path parameter and a request body. The request body is defined and validated using the `Item` Pydantic model, demonstrating how FastAPI integrates with Pydantic for data modeling and validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Creating Hero Endpoint in FastAPI
DESCRIPTION: Implements POST endpoint to create a new hero using HeroCreate model for input validation and HeroPublic model for response serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
@app.post("/heroes/", response_model=HeroPublic)
def create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):
    hero_db = Hero.model_validate(hero)
    session.add(hero_db)
    session.commit()
    session.refresh(hero_db)
    return hero_db
```

----------------------------------------

TITLE: FastAPI: Get Current User Dependency
DESCRIPTION: This code defines a dependency function `get_current_user` that retrieves the current user based on the provided token. It uses the same `oauth2_scheme` as before and returns a `User` model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def get_user(token: str):
    user = fake_users_db.get(token)
    if user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    return user


async def get_current_user(token: str = Depends(oauth2_scheme)):
    user = await get_user(token)
    if user is None:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication credentials", headers={"WWW-Authenticate": "Bearer"})
    return user
```

----------------------------------------

TITLE: Defining Input and Output Models for User Data in FastAPI
DESCRIPTION: This snippet defines separate Pydantic models for user input (with password) and output (without password) in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None
```

----------------------------------------

TITLE: Creating a Dependency Function
DESCRIPTION: This code defines a dependency function that takes optional query parameters 'q', 'skip', and 'limit' and returns a dictionary containing these values. This function can be used as a dependency in FastAPI path operation functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from typing_extensions import Annotated

from fastapi import Depends, FastAPI


async def common_parameters(
    q: Optional[str] = None, skip: int = 0, limit: int = 100
):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Optional Query Parameters in FastAPI
DESCRIPTION: This example demonstrates how to declare an optional query parameter 'q' by setting its default value to None. FastAPI automatically recognizes it as a query parameter distinct from the path parameter 'item_id'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def read_item(item_id: str, q: str | None = None):
```

----------------------------------------

TITLE: Deprecating Query Parameters in FastAPI (Python 3.10+)
DESCRIPTION: Demonstrates how to mark a query parameter as deprecated using deprecated=True in the Query class. The parameter will still work but will be visually indicated as deprecated in the API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Annotated[
        str | None,
        Query(
            alias="item-query",
            title="Query string",
            description="Query string for the items to search in the database that have a good match",
            min_length=3,
            max_length=50,
            pattern="^fixedquery$",
            deprecated=True,
        ),
    ] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Number Validation with Greater Than or Equal
DESCRIPTION: Shows how to implement numeric validation ensuring values are greater than or equal to a specified number.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
item_id: Annotated[int, Path(title="The ID of the item to get", ge=1)] = 1
```

----------------------------------------

TITLE: Defining Query Parameters with Pydantic Model in FastAPI
DESCRIPTION: Demonstrates how to create a Pydantic model for query parameters in FastAPI, showing parameter declaration and model usage in an endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
../../docs_src/query_param_models/tutorial001_an_py310.py
```

----------------------------------------

TITLE: Creating User Authentication Dependencies
DESCRIPTION: Implement user authentication and active user verification dependencies in FastAPI
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def get_current_active_user(current_user: User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user
```

----------------------------------------

TITLE: Using settings from config in main module
DESCRIPTION: This snippet demonstrates how to import and use the `Settings` object defined in the `config.py` module within the main application file (`main.py`). It showcases accessing the settings to configure the application's behavior.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

from .config import settings

app = FastAPI()


@app.get("/items/")
async def read_items():
    return {"app_name": settings.app_name, "admin_email": settings.admin_email}
```

----------------------------------------

TITLE: Using Settings from a Dependency
DESCRIPTION: This code snippet demonstrates how to use settings as a dependency in FastAPI. It defines a `get_settings` function that returns a new `Settings` object. This function is then used as a dependency in a path operation function, allowing access to the settings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/settings.md#_snippet_4

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from fastapi import Depends, FastAPI

from .config import Settings

app = FastAPI()


@lru_cache()
def get_settings():
    return Settings()


@app.get("/")
async def read_root(settings: Settings = Depends(get_settings)):
    return {"app_name": settings.app_name, "admin_email": settings.admin_email}
```

----------------------------------------

TITLE: BackgroundTasks with Dependency Injection
DESCRIPTION: This code snippet illustrates how to use BackgroundTasks with FastAPI's dependency injection system.  BackgroundTasks can be declared at different levels (path operation, dependency, sub-dependency), and FastAPI will manage and merge them.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/background-tasks.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import BackgroundTasks, Depends, FastAPI

app = FastAPI()


def write_log(message: str):
    with open("log.txt", mode="a") as f:
        f.write(message)


def get_query(q: Optional[str] = None):
    return q


@app.post("/send-notification/{email}")
async def send_notification(
    email: str,
    background_tasks: BackgroundTasks,
    q: str = Depends(get_query),
):
    background_tasks.add_task(write_log, f"Sent notification to {email}\n")
    if q:
        background_tasks.add_task(write_log, f"Query parameter q is: {q}\n")
    return {"message": "Notification sent in the background"}
```

----------------------------------------

TITLE: Database Dependency with yield
DESCRIPTION: Creates a database session and closes it after the request is completed. The code before `yield` is executed before the response is created, and the code after `yield` is executed after the response is delivered.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
db = SessionLocal()
try:
    yield db
finally:
    db.close()
```

----------------------------------------

TITLE: Basic FastAPI Application Code
DESCRIPTION: Simple FastAPI application with two endpoints - a root endpoint returning Hello World and an items endpoint accepting an ID and optional query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}

@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Reading from .env file - Pydantic v2
DESCRIPTION: This code configures a Pydantic `Settings` class to read environment variables from a `.env` file. It uses the `model_config` attribute with `SettingsConfigDict` to specify the `env_file` to load.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    app_name: str
    admin_email: str

    model_config = SettingsConfigDict(env_file=".env")
```

----------------------------------------

TITLE: Using HTTPS Redirect Middleware - Python
DESCRIPTION: This section refers to the `HTTPSRedirectMiddleware` which enforces that all incoming requests must be secure (`https` or `wss`). Any request made via insecure protocols will be redirected to the secure scheme.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/middleware.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
# Middleware implementation goes here
```

----------------------------------------

TITLE: Criando um Manipulador de Exceção Personalizado
DESCRIPTION: Demonstra como criar um manipulador de exceção personalizado para uma exceção customizada (UnicornException) usando o decorador @app.exception_handler().
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name

app = FastAPI()

@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},
    )

@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"unicorn_name": name}
```

----------------------------------------

TITLE: Python Type Declarations and Pydantic Model Definition
DESCRIPTION: This snippet demonstrates the usage of Python type declarations and Pydantic models for defining data structures and validating input. It shows how to declare parameter types for functions and how to define a Pydantic model with type annotations for fields. This leverages Python's type hinting system and Pydantic's validation capabilities.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/features.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Zadeklaruj parametr jako str
# i uzyskaj wsparcie edytora wewnątrz funkcji
def main(user_id: str):
    return user_id


# Model Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Declaring Request Body Parameter in Path Operation
DESCRIPTION: This code snippet demonstrates how to declare a request body parameter in a FastAPI path operation. By specifying the data model (`Item` in this case) as the type of the parameter, FastAPI automatically handles request parsing, data validation, and documentation generation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body.md#_snippet_2

LANGUAGE: python
CODE:
```
async def update_item(item: Item):
```

----------------------------------------

TITLE: Importing Pydantic BaseModel in Python
DESCRIPTION: Demonstrates the required import statement to use Pydantic's BaseModel for defining data models. This class is the foundation for creating schemas for request bodies in FastAPI. It's the first step before defining a model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel
```

----------------------------------------

TITLE: Password Hashing and User Authentication in FastAPI
DESCRIPTION: This snippet illustrates how to use a (fake) password hashing system to verify a user's password and create a `UserInDB` Pydantic model. If the passwords don't match, it raises an `HTTPException`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
    if not fake_hash_password(form_data.password) == user["hashed_password"]:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
```

----------------------------------------

TITLE: Creating User Model with Pydantic in FastAPI (Python)
DESCRIPTION: This code defines a Pydantic User model for representing user data in FastAPI. It includes fields for username, email, full name, and disabled status.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from pydantic import BaseModel

class User(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None
```

----------------------------------------

TITLE: Numeric Validation: Greater Than and Less Than or Equal
DESCRIPTION: Shows how to apply more complex numeric constraints using gt (greater than) and le (less than or equal)
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
item_id: int = Path(gt=0, le=1000)
```

----------------------------------------

TITLE: Defining Uvicorn Command in Dockerfile
DESCRIPTION: This snippet defines the command to run the Uvicorn server within the Docker container.  It specifies the application module (app.main) and the app object to be served, sets the host to 0.0.0.0, and configures the port to 80.  This command is executed when the container starts, launching the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_0

LANGUAGE: Dockerfile
CODE:
```
"CMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]"
```

----------------------------------------

TITLE: Path Parameters with Enum in FastAPI
DESCRIPTION: This code demonstrates how to use Python's `Enum` to define predefined valid values for a path parameter. The `ModelName` enum specifies the allowed values for the `model_name` parameter. The route then uses this enum to perform comparisons and return values based on the selected model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"""from enum import Enum
from typing import Union

from fastapi import FastAPI

app = FastAPI()


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"


@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}

    return {"model_name": model_name, "message": "Have some residuals"}""
```

----------------------------------------

TITLE: Defining a Class as a Dependency in FastAPI
DESCRIPTION: Creates a CommonQueryParams class to be used as a dependency in FastAPI, replacing the previous dict-based approach. The class initializer defines query parameters with types and default values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Basic Types Example
DESCRIPTION: Shows declaration of basic Python types using type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):
    return item_a, item_b, item_c, item_d, item_e
```

----------------------------------------

TITLE: Updating Hero Endpoint in FastAPI
DESCRIPTION: Implements PATCH endpoint to update hero information using HeroUpdate model, with support for partial updates.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
@app.patch("/heroes/{hero_id}", response_model=HeroPublic)
def update_hero(
    *,
    session: Session = Depends(get_session),
    hero_id: int,
    hero: HeroUpdate,
):
    hero_db = session.get(Hero, hero_id)
    if not hero_db:
        raise HTTPException(status_code=404, detail="Hero not found")
    hero_data = hero.model_dump(exclude_unset=True)
    hero_db.sqlmodel_update(hero_data)
    session.add(hero_db)
    session.commit()
    session.refresh(hero_db)
    return hero_db
```

----------------------------------------

TITLE: Declaring Required Query Parameters in FastAPI
DESCRIPTION: This snippet shows how to declare a required query parameter in FastAPI. By not providing a default value, FastAPI will enforce that the `needy` parameter is included in the request. If it's missing, FastAPI will return an error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, needy: str):
    item = {"item_id": item_id, "needy": needy}
    return item
```

----------------------------------------

TITLE: Defining File and Form Parameters in FastAPI
DESCRIPTION: This snippet shows how to define parameters for file uploads and form data in a FastAPI route. It includes examples of handling both file and text form fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def create_file(file: bytes = File(), fileb: UploadFile = File(), token: str = Form()):
```

----------------------------------------

TITLE: Creating Python Virtual Environment using venv
DESCRIPTION: Command to create a new Python virtual environment named '.venv' using the built-in venv module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ python -m venv .venv
```

----------------------------------------

TITLE: Return HTTP Error with WWW-Authenticate Header
DESCRIPTION: This snippet shows how to return an HTTPException with a status code 401 and the WWW-Authenticate header after detecting incorrect credentials, triggering the browser to display the login prompt again. The WWW-Authenticate header includes the 'Basic' scheme and optionally a realm.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
{* ../../docs_src/security/tutorial007_an_py39.py hl[26:30] *}

```

----------------------------------------

TITLE: Generating Access Token in FastAPI
DESCRIPTION: Generates and returns an access token upon successful authentication, following the OAuth2 specification.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
return {"access_token": user.username, "token_type": "bearer"}
```

----------------------------------------

TITLE: Secure Username/Password Check with FastAPI
DESCRIPTION: This snippet extends the basic example by adding a dependency that checks if the username and password are correct using `secrets.compare_digest()` for timing attack protection. It first converts the username and password to bytes using UTF-8 encoding. If the credentials are incorrect, it raises an `HTTPException`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
{* ../../docs_src/security/tutorial007_an_py39.py hl[1,12:24] *}

```

----------------------------------------

TITLE: Including Singular Values in FastAPI Body with Body()
DESCRIPTION: Explains how to include a single, non-model value directly in the request body alongside Pydantic models using the `Body()` function, preventing it from being interpreted as a query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-multiple-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Body

@app.post("/items/{item_id}")
async def create_item(item_id: int, item: Item, user: User, importance: int = Body()):
    return {"item_id": item_id, "item": item, "user": user, "importance": importance}
```

----------------------------------------

TITLE: Declaring Response Type with Type Annotation in FastAPI
DESCRIPTION: This snippet shows how to declare the response type for a FastAPI route using a type annotation on the function return.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@app.get("/items/")
def read_items() -> List[Item]:
    return [
        Item(name="Portal Gun", price=42.0),
        Item(name="Plumbus", price=32.0)
    ]
```

----------------------------------------

TITLE: Implementing OAuth2 Password Flow in FastAPI
DESCRIPTION: This code snippet demonstrates how to set up OAuth2 password flow authentication in a FastAPI application. It defines a token endpoint and a protected route that requires authentication.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/first-steps.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Shortened Dependency Injection: Python
DESCRIPTION: This snippet shows an alternative way of declaring the dependency. `Depends()` can be called with no parameters if a type annotation is present. The type annotation will be used for dependency injection.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
async def items(commons: CommonQueryParams = Depends()):
```

----------------------------------------

TITLE: Declare Integer Path Parameter with Type Hint
DESCRIPTION: This Python snippet illustrates how to declare a path parameter in a FastAPI endpoint function using a standard Python type hint (`int`). FastAPI uses this type hint to automatically validate the incoming path segment to ensure it is an integer and includes this validation rule in the generated OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Defining a Route with GET Operation
DESCRIPTION: This code defines a route for the root path ('/') using the GET operation. The @app.get('/') decorator tells FastAPI that the function below should handle requests to this route using the GET method.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: python
CODE:
```
@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Basic Path Parameter with Title Metadata
DESCRIPTION: Demonstrates how to declare a path parameter with title metadata using Path and Annotated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
item_id: Annotated[int, Path(title="The ID of the item to get")] = 1
```

----------------------------------------

TITLE: Adding min_length and max_length Validations to a Query Parameter
DESCRIPTION: Shows how to apply both minimum and maximum length constraints to a string query parameter using Query with Annotated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query
from typing import Annotated

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Annotated[str | None, Query(min_length=3, max_length=50)] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Declaring Pydantic Model Body Type in Python
DESCRIPTION: Shows how to declare a request body parameter using a Pydantic model (`Item`) with standard Python type hints. FastAPI uses this declaration for automatic JSON parsing, validation, and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_5

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Extended FastAPI Application Example in Python
DESCRIPTION: An extended FastAPI application with multiple path operations, including GET and POST methods with error handling and header validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import Depends, FastAPI, Header, HTTPException

app = FastAPI()


async def get_token_header(x_token: str = Header(...)) -> None:
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")


@app.get("/users/me")
async def read_users_me(token: str = Depends(get_token_header)):
    return {"username": "fakecurrentuser"}


@app.get("/users")
async def read_users(token: str = Depends(get_token_header)):
    return [{"username": "Rick"}, {"username": "Morty"}]


@app.get("/users/{username}")
async def read_user(username: str, token: str = Depends(get_token_header)):
    if username != "fakecurrentuser":
        raise HTTPException(status_code=400, detail="Wrong username")
    return {"username": username}


@app.post("/users")
async def create_user(username: str, token: str = Depends(get_token_header)):
    if username != "fakecurrentuser":
        raise HTTPException(status_code=400, detail="Wrong username")
    return {"username": username}
```

----------------------------------------

TITLE: FastAPI: Injecting Current User
DESCRIPTION: This shows how to inject the current user into a path operation using the `Depends` function with the `get_current_user` dependency.  The type of `current_user` is declared as the Pydantic model `User`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.get(\"/users/me/\")
async def read_current_user(current_user: User = Depends(get_current_user)):
    return current_user
```

----------------------------------------

TITLE: Query Parameter with Maximum Length Validation
DESCRIPTION: This code shows how to use the `Query` class to set a maximum length for a string query parameter.  The `max_length` parameter of `Query` is used to specify the maximum allowed length. FastAPI will automatically validate the input and return an error if it exceeds the limit.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, max_length=50)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Handling Multiple WebSocket Connections with FastAPI
DESCRIPTION: Demonstrates how to manage multiple WebSocket connections and handle disconnections. This implementation maintains a connection manager that tracks all active connections for broadcasting messages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
try:
    while True:
        data = await websocket.receive_text()
        await manager.send_personal_message(f"You wrote: {data}", websocket)
        await manager.broadcast(f"Client #{client_id} says: {data}")
except WebSocketDisconnect:
    manager.disconnect(websocket)
    await manager.broadcast(f"Client #{client_id} left the chat")
```

----------------------------------------

TITLE: Scope Validation and HTTPException
DESCRIPTION: This snippet shows how to validate scopes and raise an HTTPException if the required scopes are not present. It checks if all required scopes are in the token's scopes and raises an exception with the necessary WWW-Authenticate header if not.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/security/oauth2-scopes.md#_snippet_4

LANGUAGE: Python
CODE:
```
    if security_scopes.scopes:
        authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions",
            headers={"WWW-Authenticate": authenticate_value},
        )
```

----------------------------------------

TITLE: Password Hashing and JWT Token Generation in FastAPI
DESCRIPTION: This snippet shows password hashing using passlib and JWT token generation with PyJWT.  It defines functions for hashing passwords, verifying passwords, and creating access tokens.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from datetime import datetime, timedelta
from typing import Optional

from jose import JWTError, jwt
from passlib.context import CryptContext



pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def get_password_hash(password: str):
    return pwd_context.hash(password)


def verify_password(plain_password: str, hashed_password: str):
    return pwd_context.verify(plain_password, hashed_password)


fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "email": "johndoe@example.com",
        "full_name": "John Doe",
        "hashed_password": get_password_hash("secret"),
        "disabled": False,
    }
}


def get_user(username: str):
    if username in fake_users_db:
        user_dict = fake_users_db[username]
        return user_dict


def authenticate_user(username: str, password: str):
    user = get_user(username)
    if not user:
        return False
    if not verify_password(password, user["hashed_password"]):
        return False
    return user



SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"  # Change this in production
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30


from pydantic import BaseModel


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Optional[str] = None


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Shutdown Event Handler in FastAPI
DESCRIPTION: This snippet shows how to define a shutdown event handler in FastAPI using the `@app.on_event("shutdown")` decorator. The decorated function will be executed once when the application is shutting down. This example writes a line to a log file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"@app.on_event(\"shutdown\")\ndef shutdown_event():\n    with open(\"log.txt\", mode=\"a\") as f:\n        f.write(\"Application shutdown\")"
```

----------------------------------------

TITLE: Multiple File Uploads with Metadata in FastAPI
DESCRIPTION: This snippet expands on multiple file uploads by demonstrating how to include additional metadata for each file using `File()`. It applies to scenarios where you need specific configurations or descriptions for each file being uploaded.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
"from typing import List

from fastapi import FastAPI, File, UploadFile

app = FastAPI()


@app.post("/files/")
async def create_files(
    files: List[bytes] = File(description="Multiple files as bytes"),
):
    return {"file_sizes": [len(file) for file in files]}


@app.post("/uploadfiles/")
async def create_upload_files(
    files: List[UploadFile] = File(description="Multiple files as UploadFile"),
):
    return {"filenames": [file.filename for file in files]}"
```

----------------------------------------

TITLE: Defining Separate Input and Output Models in Python
DESCRIPTION: Introduces the concept of using different Pydantic models for input (`UserIn` with password) and output (`UserOut` without password). This is a common pattern to control which fields are serialized and returned in the API response, ensuring sensitive data is excluded.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_2

LANGUAGE: Python
CODE:
```
class UserIn(BaseModel):
    password: str # This is sensitive!

class UserOut(BaseModel):
    # password is not included here
```

----------------------------------------

TITLE: StreamingResponse with File-like Objects in FastAPI
DESCRIPTION: This example demonstrates using `StreamingResponse` with a file-like object to stream a file without loading it entirely into memory. It opens a file and streams its content using a generator function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import os

app = FastAPI()


async def iterfile():  # HL
    with open("file.txt", mode="rb") as file_like:  # HL
        yield from file_like  # HL


@app.get("/files/{file_path}")
async def get_file(file_path: str):
    return StreamingResponse(iterfile(), media_type="text/plain")  # HL

```

----------------------------------------

TITLE: Declaring Required Query Parameters That Can Be None in FastAPI (Python 3.10+)
DESCRIPTION: This snippet demonstrates how to declare a required query parameter that can accept None as a value, using Annotated and Query in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(min_length=3)]):
    results = {"items": [{ "item_id": "Foo" }, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Required Query Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a required query parameter 'needy' by not providing a default value. It also includes an optional parameter 'skip' with a default value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
async def read_item(item_id: str, needy: str, skip: int = 0, limit: int | None = None):
```

----------------------------------------

TITLE: Reducing Model Code Duplication with Inheritance
DESCRIPTION: This code snippet demonstrates how to reduce code duplication by defining a base model `UserBase` and inheriting from it to create `UserIn`, `UserOut`, and `UserInDB` models. It shows how to define only the differences between the models, such as the presence of the `password` or `hashed_password` fields, in the derived classes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"""\nfrom typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass UserBase(BaseModel):\n    username: str\n    email: str\n    full_name: Optional[str] = None\n\n\nclass UserIn(UserBase):\n    password: str\n\n\nclass UserOut(UserBase):\n    pass\n\n\nclass UserInDB(UserBase):\n    hashed_password: str\n"""
```

----------------------------------------

TITLE: Accepting a List as the Main Request Body
DESCRIPTION: Configuring a FastAPI endpoint to accept a list of Pydantic models as the main request body, rather than a single object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
async def create_multiple_images(images: list[Image]):
```

----------------------------------------

TITLE: FastAPI PUT request with jsonable_encoder
DESCRIPTION: This snippet demonstrates how to use the `jsonable_encoder` function to convert input data into JSON format when performing a full update using the HTTP `PUT` method in FastAPI. It is useful when dealing with simple data types for storage in NoSQL databases. The endpoint expects an item_id and an Item object in the request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-updates.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
    item_json = jsonable_encoder(item)
    stored_items[item_id] = item_json
    return item_json
```

----------------------------------------

TITLE: Reading Single Hero Endpoint in FastAPI
DESCRIPTION: Implements GET endpoint to retrieve a single hero by ID, using HeroPublic model for response serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
@app.get("/heroes/{hero_id}", response_model=HeroPublic)
def read_hero(*, hero_id: int, session: Session = Depends(get_session)):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: Asynchronous Function Definition in Python
DESCRIPTION: This code snippet demonstrates how to define an asynchronous function in Python using the `async def` syntax. The `async` keyword signifies that the function can pause its execution to allow other tasks to run, improving concurrency. This is crucial for handling I/O-bound operations efficiently.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
```Python hl_lines="1"
async def get_burgers(number: int):
    # Fazer alguma coisa assíncrona para criar os hambúrgueres
    return burgers
```
```

----------------------------------------

TITLE: Raising HTTPException in FastAPI
DESCRIPTION: This code demonstrates how to raise an `HTTPException` with a specific status code (404 in this case) and a detail message when an item is not found.  The `HTTPException` is raised when the `item_id` is not "foo", which simulates an item not being found. FastAPI automatically converts this exception into an appropriate HTTP response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, HTTPException\n\napp = FastAPI()\n\nitems = {\n    "foo": {\n        "name": \"The Foo Wrestlers\"\n    }\n}\n\n\n@app.get("/items/{item_id}")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return items[item_id]"
```

----------------------------------------

TITLE: Reading Custom Header Dependency (Python 3.9+)
DESCRIPTION: This code defines a dependency that reads a custom header X-Token from the request. It uses Annotated to specify the dependency and Header to extract the header value. The header value is then returned by the dependency function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def verify_token(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")


async def verify_key(x_key: Annotated[str, Header()]):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key
```

----------------------------------------

TITLE: Declaring Dependencies in Path Operation Functions
DESCRIPTION: Illustrates how to declare dependencies in route handlers using Depends and Annotated, showing how to pass common parameters to multiple endpoints
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons

def read_users(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Implementing Path Operations with Advanced Data Types in Python
DESCRIPTION: Example of a FastAPI path operation that uses advanced data types including UUID, datetime, and datetime.date. Shows how to define endpoints with these parameters and perform date operations within the function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-data-types.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from datetime import datetime, time, timedelta
from uuid import UUID

from fastapi import Body, FastAPI

app = FastAPI()


@app.put("/items/{item_id}")
async def read_items(
    item_id: UUID,
    start_datetime: datetime | None = Body(default=None),
    end_datetime: datetime | None = Body(default=None),
    repeat_at: time | None = Body(default=None),
    process_after: timedelta | None = Body(default=None),
):
    start_process = start_datetime + process_after
    duration = end_datetime - start_process
    return {
        "item_id": item_id,
        "start_datetime": start_datetime,
        "end_datetime": end_datetime,
        "repeat_at": repeat_at,
        "process_after": process_after,
        "start_process": start_process,
        "duration": duration,
    }
```

----------------------------------------

TITLE: Custom Function to Generate Unique ID
DESCRIPTION: This code defines a custom function to generate unique IDs for each path operation in a FastAPI application. It uses the first tag and the name of the path operation (function name) to create a unique identifier. This function is then passed to FastAPI as the `generate_unique_id_function` parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/generate-clients.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import APIRoute, FastAPI
from pydantic import BaseModel


def generate_unique_id(route: APIRoute):
    return f"{route.tags[0]}-{route.name}"


app = FastAPI(generate_unique_id_function=generate_unique_id)


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.post("/items/", tags=["items"])
async def create_item(item: Item):
    return item

```

----------------------------------------

TITLE: Defining a File Parameter with UploadFile Type
DESCRIPTION: Demonstrates how to use the UploadFile type for file uploads, which provides better handling for large files and additional metadata.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def create_upload_file(file: UploadFile):
```

----------------------------------------

TITLE: Basic GraphQL Integration with Strawberry and FastAPI
DESCRIPTION: Demonstrates how to set up a basic GraphQL endpoint using Strawberry with FastAPI. Shows query definition and route mounting with ASGI middleware.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/graphql.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from strawberry.fastapi import GraphQLRouter
import strawberry

@strawberry.type
class Query:
    @strawberry.field
    def hello(self) -> str:
        return "Hello World"

schema = strawberry.Schema(Query)

app = FastAPI()

graphql_app = GraphQLRouter(schema)

app.include_router(graphql_app, prefix="/graphql")
```

----------------------------------------

TITLE: Defining Path Operations with APIRouter in FastAPI (Python)
DESCRIPTION: This code demonstrates how to use APIRouter to define path operations for user-related endpoints in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()

@router.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]

@router.get("/users/me", tags=["users"])
async def read_user_me():
    return {"username": "fakecurrentuser"}

@router.get("/users/{username}", tags=["users"])
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Creating and Rendering a Jinja2 Template in FastAPI
DESCRIPTION: Illustrates how to configure and use Jinja2 templates within a FastAPI application by importing Jinja2Templates, creating a templates object, and rendering a template with TemplateResponse. This example also covers setting context for templates and specifying that the response is HTML.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

app = FastAPI()

templates = Jinja2Templates(directory="templates")

@app.get("/items/{id}", response_class=HTMLResponse)
async def read_item(request: Request, id: str):
    return templates.TemplateResponse("item.html", {"request": request, "id": id})
```

----------------------------------------

TITLE: Returning a Response Object with Cookies in FastAPI
DESCRIPTION: Shows how to create and return a Response object directly with cookies set. This method provides more direct control over the response, including setting cookies before returning.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/response-cookies.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
# Creating and returning a Response with cookies
def create_response_with_cookies():
    response = JSONResponse(content={"message": "Hello World"})
    response.set_cookie(key="session_id", value="123456")
    return response
```

----------------------------------------

TITLE: Defining Basic Path Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare a basic path parameter in a FastAPI application. The `item_id` parameter is extracted from the URL path and passed as an argument to the `read_item` function. The function then returns a dictionary containing the received `item_id`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"""from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    return {"item_id": item_id}""
```

----------------------------------------

TITLE: Single-File FastAPI Dockerfile Configuration
DESCRIPTION: Complete Dockerfile configuration for a single-file FastAPI application, including dependency management and proper file copying.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_6

LANGUAGE: dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./main.py /code/

CMD ["fastapi", "run", "main.py", "--port", "80"]
```

----------------------------------------

TITLE: Using BackgroundTasks with Dependencies - FastAPI Python
DESCRIPTION: Demonstrates how `BackgroundTasks` integrates with FastAPI's dependency injection system. Tasks added within a dependency (`get_query_and_task`) and the path operation function (`send_notification`) are collected and executed collectively after the main response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/background-tasks.md#_snippet_3

LANGUAGE: Python
CODE:
```
def write_log(message: str):
    with open("log.txt", mode="a") as log_file:
        log_file.write(message)


def get_query_and_task(query: str | None = None, background_tasks: BackgroundTasks = None): # line 13
    if query:
        background_tasks.add_task(write_log, f"Query: {query}\n") # line 15
    return query


@app.post("/send-notification/{email}")
async def send_notification(
    email: str,
    background_tasks: BackgroundTasks,
    query: str | None = Depends(get_query_and_task), # line 22
):
    background_tasks.add_task(write_log, f"Email: {email}\n") # line 25
    return {"message": "Notification sent in the background"}
```

----------------------------------------

TITLE: Usando BackgroundTasks no FastAPI
DESCRIPTION: Este snippet demonstra como importar BackgroundTasks e definir um parâmetro em uma função de operação de caminho para executar tarefas em segundo plano. O FastAPI cria o objeto BackgroundTasks e o passa como um parâmetro.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/background-tasks.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import BackgroundTasks, FastAPI

app = FastAPI()


async def write_notification(email: str, message=""):
    with open("log.txt", mode="w") as f:
        f.write(f"notification for {email}: {message}")


@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
    background_tasks.add_task(write_notification, email, message="some notification")
    return {"message": "Notification sent in the background"}
```

----------------------------------------

TITLE: Pydantic Settings class definition (v1)
DESCRIPTION: This code defines a Pydantic `Settings` class for handling configuration values, reading them from environment variables. It demonstrates type annotations, default values, and additional validation using `Field()` from Pydantic v1.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, BaseSettings, Field


class Settings(BaseSettings):
    app_name: str = Field("Awesome API", env="APP_NAME")
    admin_email: str
    items_per_user: int = 50

    class Config:
        env_file = ".env"
        env_prefix = "MY_PREFIX_"


settings = Settings()
```

----------------------------------------

TITLE: Including APIRouter in Another APIRouter - FastAPI - Python
DESCRIPTION: This snippet demonstrates how to include one APIRouter inside another in a FastAPI application using the include_router method. This allows for the organization of routes and modularization of code within the FastAPI app. Ensure that this operation is performed before integrating the main router into the FastAPI app to establish the correct routing hierarchy.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
router.include_router(other_router)
```

----------------------------------------

TITLE: Handling Arbitrary Dict Bodies in FastAPI
DESCRIPTION: This example shows how to define a FastAPI endpoint that accepts a dictionary with arbitrary keys of one type and values of another type, using Pydantic for validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
@app.post("/index-weights/")
async def create_index_weights(weights: Dict[int, float]):
    return weights
```

----------------------------------------

TITLE: Implementing Dependency with Cache Control - Python
DESCRIPTION: Example showing how to implement a dependency with cache control using Python 3.8+ syntax. The code demonstrates setting use_cache=False when needing fresh values for each dependency call.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
async def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):
    return {"fresh_value": fresh_value}
```

----------------------------------------

TITLE: Defining OAuth2 Scopes Dictionary - Python
DESCRIPTION: This snippet defines a dictionary where keys are the scope names (strings) and values are descriptive strings explaining what the scope allows. This dictionary is used when initializing the OAuth2 password flow scheme to list the available scopes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_0

LANGUAGE: Python
CODE:
```
scopes={
    "me": "Read information about the current user.",
    "items": "Read items."
}
```

----------------------------------------

TITLE: Creating a SQLModel Engine for Database Connection in Python
DESCRIPTION: Initializes a SQLModel engine to connect to an SQLite database. It uses check_same_thread=False to allow FastAPI to use the same SQLite database in different threads.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"

engine = create_engine(sqlite_url, echo=True, connect_args={"check_same_thread": False})
```

----------------------------------------

TITLE: Multiple File Upload - Python FastAPI
DESCRIPTION: Implementation of multiple file upload functionality using list of bytes or UploadFile
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@app.post("/files/")
async def create_files(
    files: list[bytes] = File()
):

@app.post("/uploadfiles/")
async def create_upload_files(
    files: list[UploadFile]
):
```

----------------------------------------

TITLE: Reading Heroes API Endpoint with FastAPI and SQLModel in Python
DESCRIPTION: Implements a GET endpoint to read Heroes from the database with pagination using SQLModel and FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
@app.get("/heroes/", response_model=list[Hero])
def read_heroes(offset: int = 0, limit: int = Query(default=100, le=100), session: SessionDep):
    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
    return heroes
```

----------------------------------------

TITLE: Defining Simple FastAPI Application (Python)
DESCRIPTION: Defines a basic FastAPI application instance in a `main.py` file, intended to be part of a larger application structure within a Python package. This minimal app includes one simple GET path operation. This instance is then imported and used by the test files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}
```

----------------------------------------

TITLE: Single-File FastAPI Dockerfile
DESCRIPTION: Complete Dockerfile configuration for a single-file FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_8

LANGUAGE: dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./main.py /code/

CMD ["fastapi", "run", "main.py", "--port", "80"]
```

----------------------------------------

TITLE: Dictionary Type Annotation with String and Float
DESCRIPTION: This snippet demonstrates how to use a Python dictionary with string keys and float values. This allows for dynamic data structures within Pydantic models, with keys that are strings and corresponding values that are floating-point numbers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
"weights: dict[str, float] | None = None"
```

----------------------------------------

TITLE: Forbidding Extra Query Parameters in FastAPI
DESCRIPTION: Shows how to configure a Pydantic model to forbid extra query parameters using model configuration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
../../docs_src/query_param_models/tutorial002_an_py310.py
```

----------------------------------------

TITLE: Defining Hero Update Model in Python
DESCRIPTION: Implements a HeroUpdate model with optional fields for updating hero information. All fields have None as default value to make them optional during updates.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
class HeroUpdate(HeroBase):
    name: str | None = None
    age: int | None = None
    secret_name: str | None = None
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code defines a basic FastAPI application with two routes: a root route ('/') that returns a simple JSON response, and an '/items/{item_id}' route that accepts an integer path parameter 'item_id' and an optional string query parameter 'q'. It uses the FastAPI framework to handle HTTP requests and responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Implementing Token Dependency in FastAPI Endpoint
DESCRIPTION: Use OAuth2PasswordBearer with Depends to add token-based authentication to a specific API endpoint, enabling security verification
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/first-steps.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.get("/users/me")
def read_users_me(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Numeric Validation: Greater Than and Less Than or Equal in FastAPI
DESCRIPTION: This snippet demonstrates how to use `Path` with `Annotated` to enforce multiple numeric constraints on a path parameter `item_id`. Here, `gt=0` ensures the value is greater than 0, and `le=1000` ensures it is less than or equal to 1000.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
"from typing import Annotated

from fastapi import FastAPI, Path

app = FastAPI()


@app.get(\"/items/{item_id}\")
async def read_items(item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)]):
    return {\"item_id\": item_id}"
```

----------------------------------------

TITLE: Implementing FastAPI Webhooks
DESCRIPTION: This code snippet demonstrates how to define webhooks in a FastAPI application. It shows the creation of a webhook named 'new-subscription' that sends a POST request with subscription details when triggered. The webhook is documented in the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/openapi-webhooks.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: str


@app.webhooks.post("new-subscription")
def new_subscription(body: Item):
    """Notify about new subscription.

    Whenever a user creates a new subscription in the system, this webhook
    will be triggered to notify your system about it.

    You will need to register a URL in the dashboard to receive these
    notifications.
    """
    return {"webhook": "new-subscription", "body": body}


@app.get("/items/")
def read_items():
    return [{"name": "Plumbus"}, {"name": "Portal Gun"}]


@app.post("/items/")
def create_item(item: Item):
    return item


@app.webhooks.post("new-item")
def new_item(body: Item):
    """Notify about new item.

    Whenever a user creates a new item in the system, this webhook
    will be triggered to notify your system about it.

    You will need to register a URL in the dashboard to receive these
    notifications.
    """
    return {"webhook": "new-item", "body": body}


@app.webhooks.post("updated-item")
def updated_item(body: Item):
    """Notify about an updated item.

    Whenever a user updates an item in the system, this webhook
    will be triggered to notify your system about it.

    You will need to register a URL in the dashboard to receive these
    notifications.
    """
    return {"webhook": "updated-item", "body": body}
```

----------------------------------------

TITLE: Path Parameter Containing a Path in FastAPI
DESCRIPTION: This snippet illustrates how to declare a path parameter that can contain slashes, effectively capturing a full file path. By adding `:path` to the path parameter declaration, FastAPI knows to capture all characters until the end of the URL as the value for that parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
    return {"file_path": file_path}
```

----------------------------------------

TITLE: Running Python (Windows)
DESCRIPTION: Example of running python after it has been added to the path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/environment-variables.md#_snippet_7

LANGUAGE: console
CODE:
```
$ python
```

----------------------------------------

TITLE: Configuring OpenAPI URL in FastAPI
DESCRIPTION: This snippet shows how to customize the URL where the OpenAPI schema is served. By default, it's available at '/openapi.json', but this can be changed or disabled completely.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/metadata.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI(openapi_url="/api/v1/openapi.json")


@app.get("/items/")
async def read_items():
    return [{"name": "Katana"}]
```

----------------------------------------

TITLE: Defining a Pydantic Model in Python 3.10+
DESCRIPTION: This code snippet defines a Pydantic model using Python 3.10 syntax. Pydantic is used for data validation and serialization.  The `User` model has `id`, `name`, and `signup_ts` fields with specified types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
"from datetime import datetime

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: datetime | None = None
    friends: list[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(user.friends)
"
```

----------------------------------------

TITLE: Protegiendo ruta con autenticación de usuario en FastAPI
DESCRIPTION: Aplica la dependencia de usuario autenticado y activo a una ruta para asegurar que solo usuarios autorizados puedan acceder.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/users/me")
async def read_users_me(current_user: User = Depends(get_current_active_user)):
    return current_user
```

----------------------------------------

TITLE: Defining UploadFile Parameter in FastAPI
DESCRIPTION: Demonstrates defining a parameter with the `UploadFile` type. This uses a spooled temporary file, efficiently handling large files and providing metadata and an async file-like interface. Requires `python-multipart`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/request-files.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, UploadFile

app = FastAPI()

@app.post("/uploadfile/")
async def create_upload_file(file: UploadFile):
    # Process UploadFile object
    contents = await file.read()
    return {"filename": file.filename, "content_type": file.content_type, "file_size": len(contents)}
```

----------------------------------------

TITLE: Pydantic Model Example
DESCRIPTION: This example demonstrates a basic Pydantic model definition. It shows how to define a class with typed attributes, which Pydantic uses for data validation and conversion. This is a fundamental concept in FastAPI for handling request and response data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/python-types.md#_snippet_10

LANGUAGE: python
CODE:
```
from typing import Union

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


# Input data
item_data = {"name": "Foo", "description": "", "price": 50.2, "tax": 3.6}

item = Item(**item_data)

print(item.name)
print(item.price + item.tax)

item_data = {"name": "Foo", "price": 50.2}

item = Item(**item_data)

print(item.description)
```

----------------------------------------

TITLE: Returning StreamingResponse in FastAPI
DESCRIPTION: Shows how to return a StreamingResponse from a FastAPI endpoint. This is useful for streaming large files or data streams to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import AsyncGenerator

from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()


async def fake_video_streamer() -> AsyncGenerator[bytes, None]:
    for i in range(10):
        yield b"some fake video bytes"


@app.get("/video")
async def main():
    return StreamingResponse(fake_video_streamer(), media_type="video/mp4")
```

----------------------------------------

TITLE: Defining Form Parameters in FastAPI Python Application
DESCRIPTION: This snippet shows how to define form parameters using the Form class in a FastAPI application. It creates a username parameter that is required and must be a string.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
username: str = Form(...)
```

----------------------------------------

TITLE: Declare Dependency in Path Operation
DESCRIPTION: To use a dependency in a path operation function, declare a parameter for it and set its default value using `Depends()` with the dependency callable as the argument. FastAPI will call the dependency function and inject its return value into this parameter when the path operation is executed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/items/")
async def read_items(commons: dict = Depends(common_parameters)):
    return commons

# ... other code ...

@app.get("/users/")
async def read_users(commons: dict = Depends(common_parameters)):
    return commons
```

----------------------------------------

TITLE: Send Callback Notification in FastAPI
DESCRIPTION: This snippet demonstrates how to send a callback notification to an external API when an invoice is processed. It utilizes the 'httpx' library to post the notification which includes the invoice status.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
callback_url = "https://example.com/api/v1/invoices/events/"
httpx.post(callback_url, json={"description": "Invoice paid", "paid": True})
```

----------------------------------------

TITLE: Using Different Input and Output Models in FastAPI Route
DESCRIPTION: This example shows how to use different models for input and output in a FastAPI route, filtering out sensitive data like passwords.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.post("/user/", response_model=UserOut)
def create_user(user: UserIn) -> Any:
    return user
```

----------------------------------------

TITLE: Copying Application Code for Docker Cache Optimization
DESCRIPTION: Copies the application code last, as it is the most frequently changing part of the application. This ensures that Docker only invalidates the cache for this step and subsequent steps when the application code changes, maximizing the benefits of Docker's caching mechanism.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_13

LANGUAGE: Dockerfile
CODE:
```
COPY ./app /code/app
```

----------------------------------------

TITLE: Unpacking Dict with **user_in.dict()
DESCRIPTION: Demonstrates how to convert a Pydantic model instance to a dictionary using `.dict()` and then unpack it using `**` to pass the dictionary's key-value pairs as keyword arguments to another Pydantic model constructor. This allows initializing a new model with data from an existing model instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/extra-models.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"user_in = UserIn(username=\"john\", password=\"secret\", email=\"john.doe@example.com\")"
```

LANGUAGE: Python
CODE:
```
"user_dict = user_in.dict()"
```

LANGUAGE: Python
CODE:
```
"print(user_dict)"
```

LANGUAGE: Python
CODE:
```
"{
    'username': 'john',
    'password': 'secret',
    'email': 'john.doe@example.com',
    'full_name': None,
}"
```

LANGUAGE: Python
CODE:
```
"UserInDB(**user_dict)"
```

LANGUAGE: Python
CODE:
```
"UserInDB(
    username=\"john\",
    password=\"secret\",
    email=\"john.doe@example.com\",
    full_name=None,
)"
```

LANGUAGE: Python
CODE:
```
"UserInDB(
    username = user_dict[\"username\"],
    password = user_dict[\"password\"],
    email = user_dict[\"email\"],
    full_name = user_dict[\"full_name\"],
)"
```

LANGUAGE: Python
CODE:
```
"user_dict = user_in.dict()
UserInDB(**user_dict)"
```

LANGUAGE: Python
CODE:
```
"UserInDB(**user_in.dict())"
```

LANGUAGE: Python
CODE:
```
"UserInDB(**user_in.dict(), hashed_password=hashed_password)"
```

LANGUAGE: Python
CODE:
```
"UserInDB(
    username = user_dict[\"username\"],
    password = user_dict[\"password\"],
    email = user_dict[\"email\"],
    full_name = user_dict[\"full_name\"],
    hashed_password = hashed_password,
)"
```

----------------------------------------

TITLE: Using a Class Instance as a Dependency in FastAPI
DESCRIPTION: This final snippet illustrates how to use the instance of a callable class as a dependency in a FastAPI path operation, enabling parameterized access to the instance's functionality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Depends

async def some_path_operation(q: str = Depends(checker)): 
    return {'fixed_content_included': q}
```

----------------------------------------

TITLE: FastAPI Route with Asynchronous Function
DESCRIPTION: This snippet shows a FastAPI route defined with an asynchronous function. The `async def` syntax allows the route to handle requests concurrently without blocking the main thread. The `await` keyword is used to asynchronously call `get_burgers(2)`, ensuring that the application remains responsive while waiting for the burgers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
```Python hl_lines="2 3"
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```
```

----------------------------------------

TITLE: Using Class Dependency with Shortcut Syntax
DESCRIPTION: Example demonstrating FastAPI's shortcut syntax for class dependencies, using empty Depends() with type annotation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[CommonQueryParams, Depends()]):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = fake_items_db[commons.skip : commons.skip + commons.limit]
    response.update({"items": items})
    return response
```

----------------------------------------

TITLE: Creating Database Tables with SQLModel in Python
DESCRIPTION: Defines a function to create database tables for all table models using SQLModel.metadata.create_all(engine).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def create_db_and_tables():
    SQLModel.metadata.create_all(engine)
```

----------------------------------------

TITLE: Pydantic v2 Settings Configuration
DESCRIPTION: This Python code snippet demonstrates how to configure Pydantic v2 settings to read environment variables from a `.env` file.  The `env_file` attribute in `model_config` specifies the path to the `.env` file. Requires `python-dotenv` package.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
"from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    admin_email: str\n    app_name: str = \"Awesome API\"\n\n    model_config = {\n        \"env_file\": \".env\",\n    }\n\n\nsettings = Settings()\n\nprint(\"Admin E-mail:\", settings.admin_email)\nprint(\"App Name:\", settings.app_name)"
```

----------------------------------------

TITLE: Creating Annotated Type Aliases for Dependencies
DESCRIPTION: Shows how to use Python's type alias feature with Annotated to reduce code duplication when using the same dependency in multiple path operations while preserving type information.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
CommonsDep = Annotated[dict, Depends(common_parameters)]

@app.get("/items/")
async def read_items(commons: CommonsDep):
    return commons

@app.get("/users/")
async def read_users(commons: CommonsDep):
    return commons
```

----------------------------------------

TITLE: Specifying Output Model for Response Filtering in FastAPI
DESCRIPTION: Illustrates how to use the `response_model` parameter in a FastAPI path operation decorator to specify the Pydantic model (`UserOut`) that should be used to serialize and filter the response data. This ensures only fields defined in `UserOut` are included in the final HTTP response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.post("/user/", response_model=UserOut)
```

----------------------------------------

TITLE: Generating Dynamic URLs in Jinja2 Templates with url_for
DESCRIPTION: Explains how to use the `url_for()` function within Jinja2 templates to generate dynamic URLs based on path operation arguments. Suitable for creating links that match application routing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_4

LANGUAGE: jinja
CODE:
```
<a href="{{ url_for('read_item', id=id) }}">
```

----------------------------------------

TITLE: Data Models Definition
DESCRIPTION: This code snippet shows the definition of data models `HeroPublic`, `HeroCreate`, and `HeroUpdate` using SQLModel. These models are used for data validation and serialization in the FastAPI application, defining the structure of the data that is received and sent by the API. The snippets are extracted from tutorial002_an_py310.py
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"class HeroPublic(HeroBase):
    id: int


class HeroCreate(HeroBase):
    secret_name: str


class HeroUpdate(HeroBase):
    name: Optional[str] = None
    age: Optional[int] = None
    secret_name: Optional[str] = None"
```

----------------------------------------

TITLE: Dependencies with yield and HTTPException
DESCRIPTION: This code demonstrates how to use `yield` in dependencies to handle exceptions and perform cleanup after the path operation is executed. It shows how to raise an `HTTPException` within the dependency and how to handle it.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Generator

from fastapi import Depends, FastAPI, HTTPException, status


async def dependency_a() -> str:
    yield "dependency_a"


async def dependency_b(dependency_a: str = Depends(dependency_a)) -> str:
    yield "dependency_b"


async def dependency_c(dependency_b: str = Depends(dependency_b)) -> str:
    try:
        yield "dependency_c"
    except Exception:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="From dependency_c")


async def dependency_d(dependency_c: str = Depends(dependency_c)) -> str:
    yield "dependency_d"


app = FastAPI()


@app.get("/items/")
async def read_items(dependency_d: str = Depends(dependency_d)) -> dict[str, str]:
    return {"dependency_d": dependency_d}
```

----------------------------------------

TITLE: Importing BackgroundTasks and Defining Path Operation Function in FastAPI
DESCRIPTION: This snippet shows how to import the BackgroundTasks class and define a path operation function with a BackgroundTasks parameter in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import BackgroundTasks

# ...

@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
```

----------------------------------------

TITLE: Defining a Pydantic Model in Python
DESCRIPTION: This code defines a Pydantic model named `User` with type annotations for its attributes (id, name, joined). Pydantic uses these type hints to perform data validation and serialization. The example demonstrates how to create instances of the `User` model using both direct instantiation and dictionary unpacking.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Updating User Authentication in FastAPI
DESCRIPTION: This Python code snippet shows how to update the user authentication process in FastAPI to use JWT tokens. It includes a function to get the current user from a token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = get_user(fake_users_db, username=token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Using HttpUrl Type for URL Validation
DESCRIPTION: Importing and using Pydantic's HttpUrl type to validate that a string is a proper URL, with automatic documentation in JSON Schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel, HttpUrl
```

----------------------------------------

TITLE: Setting Response Description in FastAPI
DESCRIPTION: Example of setting a specific response description for a FastAPI endpoint using the response_description parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@app.get("/items/", response_description="Successful Response with List of Items")
```

----------------------------------------

TITLE: Using the FastAPI CLI to run applications
DESCRIPTION: Example showing how to use the 'fastapi run' command to start a FastAPI application in production mode. The command automatically locates the app object and serves it on the default host and port.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/manually.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi run main.py
```

----------------------------------------

TITLE: Importing File and UploadFile in FastAPI
DESCRIPTION: This snippet shows how to import `File` and `UploadFile` from the `fastapi` library, which are essential for handling file uploads in FastAPI applications. These classes are used to define file parameters in your API endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, File, UploadFile"
```

----------------------------------------

TITLE: Installing Jinja2 for FastAPI
DESCRIPTION: Command to install the Jinja2 library using pip, which is required for template rendering in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/templates.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install jinja2

---> 100%
```

----------------------------------------

TITLE: Activating a virtual environment (Linux, macOS)
DESCRIPTION: This command activates a virtual environment in Linux and macOS using the 'source' command.  Activating the environment modifies the PATH variable to prioritize the environment's Python interpreter and packages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_20

LANGUAGE: console
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Install FastAPI with standard dependencies
DESCRIPTION: This command installs FastAPI along with its standard dependencies, which include uvicorn for running the server and other common libraries. It is recommended to run this command within an activated virtual environment to manage project dependencies effectively. The quotes around "fastapi[standard]" are important for compatibility across different terminals.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Add Custom Documentation Endpoints in FastAPI
DESCRIPTION: This snippet shows how to add custom documentation endpoints for Swagger UI and ReDoc, specifying custom CDN URLs for JavaScript and CSS files. It reuses FastAPI's internal functions to create the HTML pages for the documentation, passing the necessary arguments such as openapi_url, title, and the custom CDN URLs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-docs-ui-assets.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html
from fastapi.staticfiles import StaticFiles
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI(
    title="Custom Docs UI",
)

app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + " - Swagger UI",
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url="https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js",
        swagger_css_url="https://unpkg.com/swagger-ui-dist@5/swagger-ui.css",
    )


@app.get("/redoc", include_in_schema=False)
async def custom_redoc_html():
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=app.title + " - ReDoc",
        redoc_js_url="https://unpkg.com/redoc@next/bundles/redoc.standalone.js",
    )
```

----------------------------------------

TITLE: Extended FastAPI App (Python 3.9+ Annotated)
DESCRIPTION: This is an extended FastAPI application example with multiple route operations, including GET and POST requests, error handling, and header requirements. It uses Python 3.9+ syntax with Annotated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/testing.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Annotated, Union

from fastapi import Depends, FastAPI, Header, HTTPException
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


async def verify_token(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")


async def verify_key(x_key: Annotated[str, Header()]):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="Invalid X-Key header")
    return x_key


@app.get("/items/")
async def read_items(commons: Annotated[str, Depends(verify_key)]):
    return {"message": "Items"}


@app.post("/items/")
async def create_item(
    item: Item,
    commons: Annotated[str, Depends(verify_key)],
    x_token: Annotated[str, Header()],
):
    return item
```

----------------------------------------

TITLE: FastAPI: Minimal Path Operation
DESCRIPTION: This example demonstrates how concise a path operation can be when leveraging dependency injection for security. It showcases a 3-line endpoint using the security system.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@app.get(\"/users/me/\")
async def read_current_user(current_user: User = Depends(get_current_user)):
    return current_user
```

----------------------------------------

TITLE: Declaring Query Parameters in FastAPI
DESCRIPTION: This snippet shows how to declare query parameters in a FastAPI route function. The 'skip' and 'limit' parameters are automatically interpreted as query parameters with default values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
async def read_item(skip: int = 0, limit: int = 10):
```

----------------------------------------

TITLE: FastAPI Package Requirements
DESCRIPTION: Package requirements file specifying FastAPI and Pydantic version dependencies for the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
fastapi[standard]>=0.113.0,<0.114.0
pydantic>=2.7.0,<3.0.0
```

----------------------------------------

TITLE: Defining a Request Body with Pydantic and Handling PUT Requests
DESCRIPTION: This code extends the FastAPI application to include a Pydantic model (`Item`) for defining a request body. It also defines a PUT route ('/items/{item_id}') that accepts an `item_id` path parameter and an `Item` object in the request body.  The `update_item` function then processes the received data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Numeric Validations (GT, LT) on Float Parameter (Python)
DESCRIPTION: Defines a path operation with a float path parameter `item_id` using `Path`. It applies validations requiring the value to be greater than 0 (`gt=0`) and less than 1 (`lt=1`). These validations work with float types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(item_id: float = Path(gt=0, lt=1)): pass
```

----------------------------------------

TITLE: Error Response for Invalid Query Parameters
DESCRIPTION: JSON error response returned when extra query parameters are provided but forbidden.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "detail": [
        {
            "type": "extra_forbidden",
            "loc": ["query", "tool"],
            "msg": "Extra inputs are not permitted",
            "input": "plumbus"
        }
    ]
}
```

----------------------------------------

TITLE: Using Body() for Singular Values in FastAPI (Python)
DESCRIPTION: Illustrates how to use Body() to treat a singular value 'importance' as a body parameter instead of a query parameter in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(gt=0),
):
```

----------------------------------------

TITLE: Request Body with Price Calculation
DESCRIPTION: Shows a complete FastAPI endpoint that processes request body data and calculates total price with tax.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

app = FastAPI()

@app.post("/items/")
async def create_item(item: Item):
    item_dict = item.model_dump()
    if item.tax:
        price_with_tax = item.price + item.tax
        item_dict.update({"price_with_tax": price_with_tax})
    return item_dict
```

----------------------------------------

TITLE: Using Class-Based Dependency in FastAPI Path Operation
DESCRIPTION: This snippet shows how to use the `CommonQueryParams` class as a dependency in a FastAPI path operation. FastAPI will automatically create an instance of the class and inject it into the path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"""
from typing import Optional

from fastapi import Depends, FastAPI

app = FastAPI()


class CommonQueryParams:
    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit


@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):
    return commons
"""
```

----------------------------------------

TITLE: Partial Update with PATCH and Pydantic exclude_unset
DESCRIPTION: Illustrates how to perform partial updates using PATCH method and Pydantic's exclude_unset parameter to generate dict with only set values
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-updates.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
item.dict(exclude_unset=True)
```

----------------------------------------

TITLE: Declaring Model Attributes with Field
DESCRIPTION: Demonstrates how to use the `Field` class to declare attributes within a Pydantic model. The `Field` function works similarly to `Query`, `Path`, and `Body`, allowing parameters like descriptions and default values to be set for model attributes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-fields.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"class Item(BaseModel):
    name: str
    description: str | None = Field(
        default=None, title=\"Description of the item\", max_length=300
    )
    price: float
    tax: float | None = None"
```

----------------------------------------

TITLE: Installing Packages from requirements.txt with uv
DESCRIPTION: Command to install all packages listed in a requirements.txt file using uv.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_13

LANGUAGE: bash
CODE:
```
$ uv pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: Declaring Simple Type Annotations in FastAPI
DESCRIPTION: Demonstrates basic type annotations for parameters and models using standard Python type hints
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/index.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
item_id: int
```

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Defining an Asynchronous FastAPI Route Handler
DESCRIPTION: Example of defining an asynchronous route handler in FastAPI using the async def syntax. This allows the use of await within the function to call other asynchronous functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Running FastAPI with Uvicorn in Script Python
DESCRIPTION: Defines a basic FastAPI application and includes a conditional block (`if __name__ == "__main__":`) that runs the application using uvicorn.run. This ensures the server only starts when the script is executed directly, making it suitable for development and debugging.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/debugging.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
import uvicorn

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: str | None = None):
    return {"item_id": item_id, "q": q}


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

----------------------------------------

TITLE: Importando e Lançando HTTPException em FastAPI
DESCRIPTION: Demonstra como importar e usar HTTPException para retornar erros HTTP em uma aplicação FastAPI. O exemplo mostra um caso onde um erro 404 é lançado quando um item não é encontrado.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, HTTPException

# ... código omitido ...

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Query Parameter with Min and Max Length Validation
DESCRIPTION: This snippet defines a query parameter `q` with both minimum and maximum length validations using the `Query` class. The `min_length` and `max_length` parameters enforce the length constraints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Optional[str] = Query(None, min_length=3, max_length=50)):
    return {"q": q}
```

----------------------------------------

TITLE: Handling Invalid Credentials with HTTPException
DESCRIPTION: This snippet demonstrates how to raise an HTTPException with a 400 status code when the username or password provided in the OAuth2PasswordRequestForm is incorrect.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/security/simple-oauth2.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm

app = FastAPI()

users = {
    "johndoe": {
        "username": "johndoe",
        "password": "secret",
        "email": "johndoe@example.com",
        "full_name": "John Doe",
        "disabled": False,
        "hashed_password": "fakehashedsecret",
    },
}

@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user_dict = users.get(form_data.username)
    if not user_dict:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Incorrect username or password")
    return {"access_token": form_data.username, "token_type": "bearer"}
```

----------------------------------------

TITLE: Returning a Dictionary from a FastAPI Path Operation
DESCRIPTION: This snippet illustrates returning a dictionary from a FastAPI path operation function. FastAPI automatically converts the returned dictionary into a JSON response. The dictionary can contain any serializable data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
"    return {"message": "Hello World"}"
```

----------------------------------------

TITLE: Importing File and UploadFile in FastAPI
DESCRIPTION: This code snippet demonstrates how to import the File and UploadFile classes from FastAPI, which are essential for handling file uploads.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
{* ../../docs_src/request_files/tutorial001_an_py39.py hl[3] *}
```

----------------------------------------

TITLE: Awaiting an Asynchronous Function in Python
DESCRIPTION: This snippet showcases the use of the `await` keyword when calling an asynchronous function in Python.  The `await` keyword ensures that the program waits for the `get_burgers(2)` function to complete its execution before assigning the result to the `burgers` variable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/async.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
```Python
burgers = await get_burgers(2)
```
```

----------------------------------------

TITLE: Selective Field Inclusion/Exclusion
DESCRIPTION: Shows how to include or exclude specific fields from the response using response_model_include and response_model_exclude
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-model.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.post("/items/", response_model=Item, response_model_include={"name", "description"})
```

----------------------------------------

TITLE: Docker Cache Optimization Snippets
DESCRIPTION: Demonstrates the recommended approach for optimizing Docker cache usage with requirements and app code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_7

LANGUAGE: dockerfile
CODE:
```
COPY ./requirements.txt /code/requirements.txt
```

LANGUAGE: dockerfile
CODE:
```
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

LANGUAGE: dockerfile
CODE:
```
COPY ./app /code/app
```

----------------------------------------

TITLE: Creating a Data Model with Pydantic
DESCRIPTION: This code snippet shows how to define a data model using Pydantic's `BaseModel`. The model defines the structure of the expected JSON request body, including data types and optional fields.  It inherits from `BaseModel` and uses standard Python type annotations for attributes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
```

----------------------------------------

TITLE: Defining Metadata for Documentation Tags
DESCRIPTION: Create a list of dictionaries, where each dictionary defines metadata for a specific tag used in your API. Each entry can include a `name` (required), a detailed `description`, and `externalDocs` providing links to additional documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

tags_metadata = [
    {
        "name": "users",
        "description": "Operations with users. The **login** logic goes here.",
    },
    {
        "name": "items",
        "description": "Manage items. So many good items.",
        "externalDocs": {
            "description": "Items external docs",
            "url": "https://fastapi.tiangolo.com/",
        },
    },
]

app = FastAPI(openapi_tags=tags_metadata)
```

----------------------------------------

TITLE: Basic Database Session Dependency with Yield
DESCRIPTION: Example of creating and closing a database session using a dependency with yield. The code shows the basic structure of yielding a session and closing it after use.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
        db.close()
    finally:
        db.close()
```

----------------------------------------

TITLE: FastAPI PATCH request with Pydantic update
DESCRIPTION: This snippet shows how to handle a partial update request using the HTTP `PATCH` method in FastAPI. It utilizes the `exclude_unset` parameter to extract only the updated fields from the request and then uses the `copy` method with the `update` parameter to update an existing item, ensuring that only the provided fields are modified.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-updates.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
    stored_item_data = stored_items[item_id]
    stored_item_model = Item(**stored_item_data)

    update_data = item.dict(exclude_unset=True)
    updated_item = stored_item_model.copy(update=update_data)

    stored_items[item_id] = jsonable_encoder(updated_item)
    return updated_item
```

----------------------------------------

TITLE: Multiple Body and Query Parameters in FastAPI
DESCRIPTION: This snippet illustrates how to combine multiple body parameters with a query parameter in a FastAPI path operation. It defines a path operation that accepts an `Item`, a `User` in the request body and a query parameter `q`. It shows how FastAPI handles both body and query parameters simultaneously.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"@app.post("/items/")
async def create_item(
    item: Item,
    user: User,
    importance: int = Body(),
    q: Union[str, None] = None,
):
    results = {"item": item, "user": user, "importance": importance}
    if q:
        results.update({"q": q})
    return results
"
```

----------------------------------------

TITLE: Model Creation with Dict Unpacking
DESCRIPTION: Shows how to create a new Pydantic model instance by unpacking a dictionary from another model with additional parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
UserInDB(**user_in.dict(), hashed_password=hashed_password)

UserInDB(
    username = user_dict["username"],
    password = user_dict["password"],
    email = user_dict["email"],
    full_name = user_dict["full_name"],
    hashed_password = hashed_password,
)
```

----------------------------------------

TITLE: Installing PyJWT and PassLib in Python
DESCRIPTION: These console commands show how to install PyJWT for JWT token handling and PassLib with Bcrypt for password hashing in a Python virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
$ pip install pyjwt

---> 100%
```

LANGUAGE: shell
CODE:
```
$ pip install "passlib[bcrypt]"

---> 100%
```

----------------------------------------

TITLE: Declaring Required Query Parameters in FastAPI (Python 3.9+)
DESCRIPTION: This snippet shows how to declare a required query parameter with validations using Annotated and Query in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str, Query(min_length=3)]):
    results = {"items": [{ "item_id": "Foo" }, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Creating HTTP Middleware in FastAPI
DESCRIPTION: Implementation of a FastAPI middleware that measures request processing time and adds a custom X-Process-Time header to the response. Uses time.perf_counter() for precise timing measurement.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/middleware.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import time
from fastapi import FastAPI, Request

app = FastAPI()

@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    start_time = time.perf_counter()
    response = await call_next(request)
    process_time = time.perf_counter() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response
```

----------------------------------------

TITLE: Initializing OAuth2 Password Bearer Authentication in FastAPI
DESCRIPTION: Configure OAuth2 password authentication scheme using OAuth2PasswordBearer, setting up a token URL for authentication and security dependencies
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/first-steps.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/items/")
def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Install pytest (Bash)
DESCRIPTION: Installs the `pytest` framework using pip. `pytest` is the recommended test runner for FastAPI applications and is used to automatically discover and execute test functions (functions/methods starting with `test_`). This is a necessary setup step to run the provided tests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_6

LANGUAGE: bash
CODE:
```
pip install pytest
```

----------------------------------------

TITLE: Basic Response with Content, Status Code, Headers, and Media Type
DESCRIPTION: This example shows how to create a basic `Response` object with custom content, status code, headers, and media type.  It demonstrates the most fundamental way to customize a response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import Response
from starlette.responses import PlainTextResponse

app = FastAPI()

items = {
    "foo": {"name": "Foo"},
    "bar": {"name": "Bar"},
}


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        return Response(content="Item not found", status_code=404)
    return items[item_id]

```

----------------------------------------

TITLE: Run Docker Container Command
DESCRIPTION: This command runs the Docker container from the built image. The `-d` flag runs the container in detached mode, `--name` assigns a name to the container (`mycontainer`), and `-p` maps port 80 on the host to port 80 in the container.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_9

LANGUAGE: bash
CODE:
```
docker run -d --name mycontainer -p 80:80 myimage
```

----------------------------------------

TITLE: Activating a virtual environment (Windows PowerShell)
DESCRIPTION: This command activates a virtual environment in Windows PowerShell by executing the 'Activate.ps1' script located in the environment's Scripts directory. Activating modifies environment variables like PATH.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_21

LANGUAGE: console
CODE:
```
$ .venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Secure Credential Validation with Timing Attack Protection
DESCRIPTION: A more complete example that validates credentials securely using the secrets module to prevent timing attacks, with proper error handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
import secrets

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

security = HTTPBasic()


@app.get("/users/me")
def read_current_user(credentials: HTTPBasicCredentials = Depends(security)):
    current_username_bytes = credentials.username.encode("utf8")
    correct_username_bytes = b"stanleyjobson"
    is_correct_username = secrets.compare_digest(
        current_username_bytes, correct_username_bytes
    )
    current_password_bytes = credentials.password.encode("utf8")
    correct_password_bytes = b"swordfish"
    is_correct_password = secrets.compare_digest(
        current_password_bytes, correct_password_bytes
    )
    if not (is_correct_username and is_correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Basic"},
        )
    return {"username": credentials.username}
```

----------------------------------------

TITLE: Importing Pydantic Field
DESCRIPTION: Shows how to import the Field class from Pydantic library for use with FastAPI models.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-fields.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from pydantic import Field
```

----------------------------------------

TITLE: Declaring Form parameters in FastAPI
DESCRIPTION: Example of declaring form parameters using the Form class in a FastAPI route function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-forms.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def login(username: str = Form(...), password: str = Form(...))
```

----------------------------------------

TITLE: Defining User Input Model with Password in Python
DESCRIPTION: Defines a Pydantic model `UserIn` intended for receiving user input, including sensitive fields like a password. This model is used to validate incoming request data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_0

LANGUAGE: Python
CODE:
```
class UserIn(BaseModel):
    password: str # This is sensitive!
```

----------------------------------------

TITLE: Required Query Parameter with Ellipsis
DESCRIPTION: Making a query parameter required using the Ellipsis (...) syntax in FastAPI
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
q: Union[str, None] = Query(default=..., min_length=3)
```

----------------------------------------

TITLE: Updating Item with PUT in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to update an item using the HTTP PUT method in FastAPI. It uses jsonable_encoder to convert input data to JSON-compatible format.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-updates.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
items[item_id] = jsonable_encoder(item)
return items[item_id]
```

----------------------------------------

TITLE: Dockerfile for Single-File FastAPI Application
DESCRIPTION: This Dockerfile is designed for a FastAPI application contained in a single file. It copies the main.py file and sets the command to run Uvicorn with the appropriate module path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_2

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./main.py /code/

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Creating a Pydantic Settings Class in Python
DESCRIPTION: Defines a Settings class using Pydantic BaseSettings to manage environment variables with type hints and default values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings, Field

class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50

settings = Settings()
```

----------------------------------------

TITLE: Testing Basic FastAPI Endpoint with TestClient (Python)
DESCRIPTION: Demonstrates the basic setup for testing a FastAPI application using `TestClient` and `pytest`. It shows how to create a client instance passing the FastAPI app and use the client to make a `GET` request to a defined endpoint, asserting the response status code and JSON content. Requires `pytest` and `httpx` installed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: User Input and Output Models
DESCRIPTION: Shows creation of separate input and output models with different attributes for secure data handling
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-model.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class UserIn(BaseModel):
    username: str
    password: str
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This snippet demonstrates how to start the FastAPI development server using the 'fastapi dev' command. It shows the server output, including the server address, documentation URL, and logging information.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/index.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

  FastAPI  Starting development server 🚀

             Searching for package file structure from directories
             with __init__.py files
             Importing from /home/user/code/awesomeapp

   module  🐍 main.py

     code  Importing the FastAPI app object from the module with
             the following code:

             from main import app

      app  Using import string: main:app

   server  Server started at http://127.0.0.1:8000
   server  Documentation at http://127.0.0.1:8000/docs

      tip  Running in development mode, for production use:
             fastapi run

             Logs:

     INFO  Will watch for changes in these directories:
             ['/home/user/code/awesomeapp']
     INFO  Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C
             to quit)
     INFO  Started reloader process [383138] using WatchFiles
     INFO  Started server process [383153]
     INFO  Waiting for application startup.
     INFO  Application startup complete.
```

----------------------------------------

TITLE: Multiple File Uploads in FastAPI
DESCRIPTION: This snippet demonstrates how to handle multiple file uploads simultaneously in FastAPI. It shows how to declare a list of `bytes` or `UploadFile` to receive multiple files associated with the same form field.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
"from typing import List

from fastapi import FastAPI, File, UploadFile

app = FastAPI()


@app.post("/files/")
async def create_files(files: List[bytes] = File()):
    return {"file_sizes": [len(file) for file in files]}


@app.post("/uploadfiles/")
async def create_upload_files(files: List[UploadFile] = File()):
    return {"filenames": [file.filename for file in files]}"
```

----------------------------------------

TITLE: Using Context Values in a Jinja2 Template
DESCRIPTION: Demonstrates how to reference context dictionary values within Jinja2 templates, including the usage of context identifiers like 'id' for dynamic content rendering.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_2

LANGUAGE: jinja
CODE:
```
Item ID: {{ id }}
```

----------------------------------------

TITLE: /token 경로 작업 수정 (JWT 토큰 생성)
DESCRIPTION: 토큰의 만료 시각을 설정하기 위해 `timedelta` 를 생성합니다. 실제 JWT 액세스 토큰을 생성하여 반환합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: python
CODE:
```
@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(fake_users_db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Documenting HTMLResponse and overriding Response in FastAPI
DESCRIPTION: This code shows how to use the `response_class` parameter to document the response type in OpenAPI while also returning an `HTMLResponse` object directly. This allows OpenAPI to correctly document the endpoint as returning HTML.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


async def generate_html_response(item_id: str):
    html_content = f"""
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>{item_id}</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)


@app.get("/items/{item_id}", response_class=HTMLResponse)  # HL
async def read_item(item_id: str):
    return await generate_html_response(item_id)

```

----------------------------------------

TITLE: Annotated Dependency Example
DESCRIPTION: Shows how to define a reusable dependency using `Annotated` and `Depends` in FastAPI. The example defines common query parameters and reuses them in multiple path operations, maintaining type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Depends, FastAPI

app = FastAPI()


async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}


CommonsDep = Annotated[dict, Depends(common_parameters)]


@app.get("/items/")
async def read_items(commons: CommonsDep):
    return commons


@app.get("/users/")
async def read_users(commons: CommonsDep):
    return commons
```

----------------------------------------

TITLE: Visualizing lru_cache Behavior with Mermaid Sequence Diagram
DESCRIPTION: This Mermaid sequence diagram illustrates the behavior of a function decorated with @lru_cache. It shows how the function executes for new argument combinations and returns cached results for repeated calls with the same arguments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_16

LANGUAGE: Mermaid
CODE:
```
sequenceDiagram

participant code as Code
participant function as say_hi()
participant execute as Execute function

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Camila")
        function ->> execute: execute function code
        execute ->> code: return the result
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Camila")
        function ->> code: return stored result
    end

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Rick")
        function ->> execute: execute function code
        execute ->> code: return the result
    end

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Rick", salutation="Mr.")
        function ->> execute: execute function code
        execute ->> code: return the result
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Rick")
        function ->> code: return stored result
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Camila")
        function ->> code: return stored result
    end
```

----------------------------------------

TITLE: Implementing Lifespan with Async Context Manager in FastAPI
DESCRIPTION: Demonstrates how to use an async context manager with FastAPI's lifespan parameter to load and unload machine learning models before the application starts and after it stops handling requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/events.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    ml_models = {}
    # Here you would load the model
    ml_models["answer_to_everything"] = 42
    yield {"ml_models": ml_models}
    # Clean up the ML models and release the resources
    ml_models.clear()
```

----------------------------------------

TITLE: Checking Active Python Interpreter on Windows PowerShell
DESCRIPTION: Command to verify the active Python interpreter on Windows using PowerShell, ensuring it's from the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_7

LANGUAGE: powershell
CODE:
```
$ Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```

----------------------------------------

TITLE: Multiple Body Parameters
DESCRIPTION: Shows how to declare multiple body parameters in a FastAPI endpoint. FastAPI automatically infers that parameters are part of the request body based on their type hints (Pydantic models).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-multiple-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.post("/items/")
async def create_item(item: Item, user: User):
    return {"item": item, "user": user}
```

----------------------------------------

TITLE: Defining dependencies with request requirements in FastAPI
DESCRIPTION: Illustrates how path decorator dependencies can declare request requirements (e.g., response headers) or other sub-dependencies. The `get_token_header` and `get_key` functions are defined as dependencies, with the former requiring a specific response header and the latter being called by the path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"async def get_token_header(x_token: str = Header()):\n    if x_token != \"fixed-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n    return x_token\n\nasync def get_key(x_key: str = Header()):\n    if x_key != \"fixed-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key"
```

LANGUAGE: Python
CODE:
```
"@app.get("/items/{item_id}", dependencies=[Depends(get_token_header), Depends(get_key)])\nasync def read_items(item_id: str):\n    return {"item_id": item_id}"
```

----------------------------------------

TITLE: Importing Path from FastAPI (Python)
DESCRIPTION: Imports the `Path` class from the `fastapi` library. This class is used to declare path parameters with additional metadata and validation capabilities.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Path
```

----------------------------------------

TITLE: Importing Cookie from FastAPI in Python
DESCRIPTION: This snippet shows how to import the Cookie class from FastAPI, which is used to define cookie parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cookie-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Cookie
```

----------------------------------------

TITLE: Implementing PUT Operation for Complete Updates in FastAPI
DESCRIPTION: This code demonstrates how to implement a PUT operation in FastAPI to replace an existing item completely. It uses jsonable_encoder to convert the received data to a JSON-compatible format.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-updates.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}", response_model=Item)
def update_item(item_id: str, item: Item):
    stored_item_data = items.get(item_id)
    if stored_item_data is None:
        raise HTTPException(status_code=404, detail="Item not found")
    stored_item_model = Item(**stored_item_data)
    update_data = item.dict()
    updated_item = stored_item_model.copy(update=update_data)
    items[item_id] = jsonable_encoder(updated_item)
    return updated_item
```

----------------------------------------

TITLE: Installing python-multipart dependency for FastAPI
DESCRIPTION: Command to install the python-multipart package, which is required for handling form data in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-forms.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Rendering HTML Output from Jinja2 Template
DESCRIPTION: Example of HTML rendered output from a Jinja2 template using a context dictionary with key-value pairs. Shows how template variables are replaced with actual data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_3

LANGUAGE: html
CODE:
```
Item ID: 42
```

----------------------------------------

TITLE: Implementing Cached Function with lru_cache in Python
DESCRIPTION: This snippet demonstrates the use of @lru_cache decorator to cache function results. The function 'say_hi' takes a name and an optional salutation, returning a greeting string. The cache ensures that repeated calls with the same arguments return the stored result instead of re-executing the function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
@lru_cache
def say_hi(name: str, salutation: str = "Ms."):
    return f"Hello {salutation} {name}"
```

----------------------------------------

TITLE: Using Query as Default Value for Parameter Validation in FastAPI (Python 3.10+)
DESCRIPTION: This snippet shows the older method of using Query as the default value to add a max_length validation to a query parameter in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: str | None = Query(default=None, max_length=50)):
    results = {"items": [{ "item_id": "Foo" }, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Using Union Types for Flexible Responses
DESCRIPTION: This code shows how to use `typing.Union` to define a response that can be one of several types, which translates to `anyOf` in OpenAPI.  The example uses `Union` to define a return that can be either a `PlaneItem` or a `CarItem` allowing the endpoint to return different object types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"""\nfrom typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass PlaneItem(BaseModel):\n    size: int\n    wings: bool\n\n\nclass CarItem(BaseModel):\n    size: int\n    wheels: int\n\n\nItem = Union[PlaneItem, CarItem]\n\n\nasync def read_item(item_id: str) -> Item:\n    if item_id == "plane":\n        return PlaneItem(size=10, wings=True)\n    return CarItem(size=2, wheels=4)\n\n\nasync def main():\n    item = await read_item(item_id="plane")\n    print(item)\n"""
```

----------------------------------------

TITLE: Declaring Basic Path Parameters in FastAPI
DESCRIPTION: Demonstrates how to define and use simple path parameters with Python string formatting syntax in a FastAPI route
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Mounting StaticFiles in FastAPI (Python)
DESCRIPTION: This code snippet demonstrates how to import StaticFiles from fastapi.staticfiles and mount it to serve static files from a directory. The StaticFiles instance is mounted at the '/static' path and serves files from the 'static' directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/static-files.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.staticfiles import StaticFiles

app.mount("/static", StaticFiles(directory="static"), name="static")
```

----------------------------------------

TITLE: Using Field with Model Attributes
DESCRIPTION: Demonstrates how to use Field to declare validations and metadata for model attributes in a Pydantic model
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-fields.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = Field(default=None, title="Description", max_length=300)
    price: float = Field(gt=0, description="The price must be greater than zero")
```

----------------------------------------

TITLE: Import and Use Set for Unique Elements
DESCRIPTION: Imports the `Set` type hint from `typing` and uses it for a model attribute. This ensures that the attribute will contain a collection of unique elements (strings), automatically handling duplicates upon data conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Set

tags: Set[str] = set()
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a more complex `Item` model as a parameter in FastAPI.  This allows FastAPI to handle data validation and conversion for the `Item` object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Adding Global Dependencies to FastAPI Application
DESCRIPTION: Demonstrates how to configure dependencies at the FastAPI application level that will be applied to all path operations. This example shows the app instantiation with dependencies parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/global-dependencies.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI\n\napp = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])
```

----------------------------------------

TITLE: Pinning Exact FastAPI Version in Requirements.txt
DESCRIPTION: Demonstrates how to pin FastAPI to a specific version using requirements.txt file. This ensures exact version matching for consistent deployments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/versions.md#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
fastapi[standard]==0.112.0
```

----------------------------------------

TITLE: Handling Multiple File Uploads in FastAPI
DESCRIPTION: This snippet demonstrates how to handle multiple file uploads in FastAPI using a list of bytes or UploadFile objects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
{* ../../docs_src/request_files/tutorial002_an_py39.py hl[10,15] *}
```

----------------------------------------

TITLE: Sending and Receiving WebSocket Messages
DESCRIPTION: Illustrates how to receive messages from and send messages to a WebSocket client.  It shows the basic structure for handling WebSocket communication, including accepting the connection, receiving data, and sending responses, ensuring a continuous bidirectional channel.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/websockets.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"    try:
        while True:
            data = await websocket.receive_text()
            await websocket.send_text(f"Message text was: {data}")
    except WebSocketDisconnect:
        print("Client disconnected")"
```

----------------------------------------

TITLE: Using Path Operation Function Name as operationId in FastAPI
DESCRIPTION: This snippet shows how to iterate through all routes in a FastAPI application and set the `operationId` of each path operation to the name of its corresponding function. This ensures that each operation has a unique identifier based on its function name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/path-operation-advanced-configuration.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Callable

from fastapi import FastAPI
from fastapi.routing import APIRoute

app = FastAPI()


def custom_generate_unique_id(route: APIRoute) -> str:
    return route.name


app = FastAPI(generate_unique_id_function=custom_generate_unique_id)


@app.get("/items", name="items")
async def read_items():
    return [{"item": "Portal Gun"}, {"item": "Plumbus"}]


@app.get("/items/{item_id}", name="item")
async def read_item(item_id: str):
    return {"item_id": item_id}


@app.post("/items", name="create_item")
async def create_item(name: str):
    return {"name": name}

```

----------------------------------------

TITLE: Configuration as a Dependency (main.py)
DESCRIPTION: This code defines a FastAPI dependency `get_settings` that returns a new `Settings` object, leveraging `lru_cache` for optimization.  The `read_root` route then uses this dependency to access configuration values. This particular snippet is for python version > 3.9.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from fastapi import Depends, FastAPI

from .config import Settings

app = FastAPI()


@lru_cache()
def get_settings():
    return Settings()


@app.get("/")
async def read_root(settings: Settings = Depends(get_settings)):
    return {"app_name": settings.app_name, "admin_email": settings.admin_email}
```

----------------------------------------

TITLE: Version Range Example for Older FastAPI Release
DESCRIPTION: Example of pinning an older FastAPI version range, demonstrating the version constraint pattern for any minor version.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/versions.md#2025-04-21_snippet_2

LANGUAGE: txt
CODE:
```
fastapi>=0.45.0,<0.46.0
```

----------------------------------------

TITLE: Deleting Hero Endpoint in FastAPI
DESCRIPTION: Implements DELETE endpoint to remove a hero from the database by ID.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
@app.delete("/heroes/{hero_id}")
def delete_hero(*, session: Session = Depends(get_session), hero_id: int):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    session.delete(hero)
    session.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Path Operation with Security Scopes
DESCRIPTION: Declare path operations with specific security scope requirements using FastAPI's Security dependency injection
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/users/me/items/", response_model=List[Item])
def read_own_items(
    current_user: User = Security(get_current_active_user, scopes=["items"])
):
```

----------------------------------------

TITLE: Pydantic model instantiering
DESCRIPTION: Demonstreert hoe een Pydantic model `User` wordt geïnstantieerd met data. De eerste instantie gebruikt keyword argumenten, de tweede gebruikt een dictionary die wordt uitgepakt met `**` om de argumenten door te geven.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/features.md#_snippet_2

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Using a List of Nested Models
DESCRIPTION: Declaration of a field that contains a list of Pydantic model instances, allowing for arrays of structured objects in the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
images: list[Image] | None = None
```

----------------------------------------

TITLE: Setting up Basic OAuth2 Security Scheme FastAPI Python
DESCRIPTION: This code snippet demonstrates the initial setup for implementing OAuth2 Password flow security in a FastAPI application. It defines the application instance, creates an `OAuth2PasswordBearer` scheme pointing to the token acquisition URL, and secures a path operation by requiring the scheme as a dependency.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

# Define the OAuth2 Password Bearer scheme
# This tells the client where to send username/password to get a token
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Define a path operation that requires authentication
# The Depends(oauth2_scheme) will automatically extract the token
@app.get("/users/me")
async def read_users_me(token: str = Depends(oauth2_scheme)):
    # In a real application, you would validate the token here
    # and fetch the user associated with it.
    # For this example, we just return the token.
    return {"token": token}

# Note: The actual /token endpoint to issue tokens is not defined in this snippet.
```

----------------------------------------

TITLE: FastAPI Dependency Override Example
DESCRIPTION: This snippet demonstrates how to override a dependency in a FastAPI application using `app.dependency_overrides`. It shows the basic structure of the override using a dictionary.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/testing-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
app.dependency_overrides = {}
```

----------------------------------------

TITLE: Including APIRouters with Custom Configuration
DESCRIPTION: Demonstrates adding APIRouters to the main application with custom prefixes, tags, dependencies, and responses
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
app.include_router(admin.router, 
    prefix="/admin", 
    tags=["admin"], 
    dependencies=[Depends(get_token_header)], 
    responses={418: {"description": "Teapot"}}
```

----------------------------------------

TITLE: Defining a Class and Using it as a Type
DESCRIPTION: Example of defining a Person class and using it as a type annotation for a variable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
class Person:
    def __init__(self, name: str):
        self.name = name

one_person: Person = Person(name="John")
```

----------------------------------------

TITLE: Database Dependency with yield
DESCRIPTION: Creates a database session, yields it for use in the route function, and then closes the session after the response is sent. Demonstrates the basic structure of a dependency using `yield` for cleanup.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: python
CODE:
```
db = DBSession()
try:
    yield db
finally:
    db.close()
```

----------------------------------------

TITLE: Creating Custom TimedRoute Class in Python
DESCRIPTION: Defines a TimedRoute class that extends APIRoute to add timing information. It overrides the handle() method to measure the response time and add it as a header to the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
class TimedRoute(APIRoute):
    def handle(self, call: Callable, request: Request, **kwargs: Any) -> Coroutine[Any, Any, Response]:
        before = time.time()
        response: Response = await super().handle(call, request, **kwargs)
        duration = time.time() - before
        response.headers["X-Response-Time"] = str(duration)
        return response
```

----------------------------------------

TITLE: Handling Shutdown Events in FastAPI (Deprecated)
DESCRIPTION: Shows the deprecated method of handling shutdown events by registering an event handler function that writes to a log file when the application shuts down.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/events.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.on_event("shutdown")
def shutdown_event():
    with open("log.txt", mode="a") as log:
        log.write("Application shutdown")
```

----------------------------------------

TITLE: Adding Body Parameter Examples using examples dict (Python)
DESCRIPTION: This snippet demonstrates how to provide multiple distinct examples for a request body parameter using the `examples` parameter within the `Body()` function. `examples` takes a dictionary where keys are example names and values are dictionaries containing `summary`, `description`, and `value` for each example.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/schema-extra-example.md#_snippet_3

LANGUAGE: python
CODE:
```
item: Item = Body(
    examples={
        "normal": {
            "summary": "A normal example",
            "description": "A **normal** item works correctly.",
            "value": {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2,
            },
        },
        "bad_name": {
            "summary": "A bad name example",
            "description": "Doesn't contain a name",
            "value": {
                "name": None,
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2,
            },
        },
        "long_description": {
            "summary": "A long description example",
            "description": "This item has a really long description that goes on for multiple lines.",
            "value": {
                "name": "Bar",
                "description": "This item has a really long description that goes on for multiple lines.",
                "price": 42.0,
                "tax": 6.0,
            },
        },
    },
)
```

----------------------------------------

TITLE: Install Python Dependencies in Dockerfile
DESCRIPTION: This command installs the Python dependencies specified in the `requirements.txt` file. The `--no-cache-dir` option prevents pip from storing downloaded packages locally, and `--upgrade` ensures that packages are upgraded if already installed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

----------------------------------------

TITLE: Including APIRouter with Custom Settings
DESCRIPTION: Includes the pre-defined APIRouter in the main FastAPI application with a custom prefix, tags, dependencies, and responses. This allows for modifying the router's behavior without altering its original definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.responses import HTMLResponse

from .internal import admin
from .routers import items, users

app = FastAPI()

app.include_router(users.router)
app.include_router(items.router)
app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)


@app.get("/")
async def root():
    return {"message": "Hello Bigger Applications!"}


@app.get("/teapot", response_class=HTMLResponse)
async def teapot():
    return '''
    <h1>I'm a teapot</h1>
    <p>\nThis teapot doesn't actually brew coffee. Instead, it will return HTML content, specifically an image of a teapot.\n</p>
    <img src="https://media.giphy.com/media/t3cLl0hhXUjkFvKj3v/giphy.gif" alt="Teapot">
    '''
```

----------------------------------------

TITLE: Lanzando un HTTPException en una path operation
DESCRIPTION: Ejemplo de cómo lanzar un HTTPException con código de estado 404 cuando un ítem no se encuentra en la base de datos.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
    if item_id not in items:\n        raise HTTPException(status_code=404, detail="Item not found")
```

----------------------------------------

TITLE: Python hl_lines example for FastAPI Response Model
DESCRIPTION: The code snippet provides a sample FastAPI response using Pydantic, illustrating how to include parameters with default values and manage response data display. It highlights the use of response model decorators to exclude unset defaults and adjust the JSON output.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
{"name": "Baz",
"description": None,
"price": 50.2,
"tax": 10.5,
"tags": []}
```

----------------------------------------

TITLE: Adding a Route Operation Directly to FastAPI
DESCRIPTION: Adds a route operation directly to the FastAPI application instance. This demonstrates that route operations can be added directly to the app in addition to using APIRouters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_18

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

from .internal import admin
from .routers import items, users

app = FastAPI()

app.include_router(users.router)
app.include_router(items.router)
app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)


@app.get("/")
async def root():
    return {"message": "Hello Bigger Applications!"}
```

----------------------------------------

TITLE: Example PUT Payload Python
DESCRIPTION: This snippet shows an example of the data payload typically sent in a PUT request to completely replace a resource. It demonstrates setting a field to `None` to explicitly remove its value and how omitting a field (`tax` in this case) means its existing value will be retained unless the backend logic handles it differently.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-updates.md#_snippet_0

LANGUAGE: Python
CODE:
```
{
    "name": "Barz",
    "price": 3,
    "description": None,
}
```

----------------------------------------

TITLE: Upgrading pip in Virtual Environment (Console)
DESCRIPTION: Uses `python -m pip install --upgrade pip` to update `pip` to its latest version within the currently active virtual environment. This is recommended to avoid potential installation issues. The output shows a typical progress indicator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_8

LANGUAGE: console
CODE:
```
python -m pip install --upgrade pip

---> 100%
```

----------------------------------------

TITLE: Path Operation Ordering in FastAPI
DESCRIPTION: This snippet illustrates the importance of path operation order in FastAPI. The `/users/me` path must be defined before `/users/{user_id}` to avoid the latter matching the former and misinterpreting 'me' as a user ID. It also shows that you cannot redefine a path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"""from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}""
```

----------------------------------------

TITLE: Creating a Database Engine with SQLite
DESCRIPTION: Creates a database engine using SQLite for connecting to the database. The engine is configured with `check_same_thread=False` to allow FastAPI to use the same SQLite database in different threads, which is necessary when a single request uses more than one thread.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_1

LANGUAGE: Python
CODE:
```
sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"

engine = create_engine(sqlite_url, echo=True, connect_args={"check_same_thread": False})
```

----------------------------------------

TITLE: Using OpenAPI Extra for Custom Metadata in FastAPI
DESCRIPTION: This snippet demonstrates how to extend the OpenAPI schema by using the `openapi_extra` parameter. This allows adding custom metadata that appears in the OpenAPI documentation for the specific path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
path_operation_function(openapi_extra={"x-aperture-labs-portal": "blue"})
```

----------------------------------------

TITLE: Defining an Asynchronous Function in Python
DESCRIPTION: Shows the syntax for defining an asynchronous function using `async def`. Functions defined this way can use the `await` keyword internally to pause execution for other asynchronous operations and are themselves awaitable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Mach Sie hier etwas Asynchrones, um die Burger zu erstellen
    return burgers
```

----------------------------------------

TITLE: Initializing OAuth2 Password Bearer Authentication in FastAPI
DESCRIPTION: Configure OAuth2 password bearer authentication using FastAPI's OAuth2PasswordBearer class, setting up a token URL and security scheme for API endpoints
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/first-steps.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Depends
from fastapi.security import OAuth2PasswordBearer

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Dependency with HTTPException After Yield
DESCRIPTION: Shows how to raise HTTPException in the cleanup phase after yield. This pattern is useful for handling errors during resource cleanup.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def get_session():
    session = Session()
    try:
        yield session
    except Exception as e:
        logger.error(f"Error: {e}")
        raise HTTPException(status_code=400, detail="Session error")
    finally:
        session.close()
```

----------------------------------------

TITLE: Sample JSON Response for FastAPI Path Operation
DESCRIPTION: This JSON example displays the expected output of a FastAPI path operation. It demonstrates how FastAPI can return response data, excluding defaults when parameters are explicitly set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_8

LANGUAGE: JSON
CODE:
```
{
"name": "Foo",
"price": 50.2
}
```

----------------------------------------

TITLE: Combining Predefined and Custom Responses
DESCRIPTION: This example demonstrates how to combine predefined responses with custom responses using the `**dict_to_unpack` technique. This allows reusing common responses across multiple path operations while adding specific responses as needed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/additional-responses.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


common_responses = {
    404: {"description": "Item not found"},
    302: {"description": "The item was moved"},
}


@app.get("/items/{item_id}", responses={**common_responses, 200: {"description": "Item requested"}})
async def read_item(item_id: int):
    return {"name": "Foo", "price": 50.2}
```

----------------------------------------

TITLE: Setting Default Response Class in FastAPI
DESCRIPTION: Example showing how to configure ORJSONResponse as the default response class for a FastAPI application instance. This affects all path operations unless explicitly overridden.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI(default_response_class=ORJSONResponse)
```

----------------------------------------

TITLE: Query Parameter List with Default Values in FastAPI (Python 3.9+)
DESCRIPTION: Defines a query parameter 'q' that accepts multiple values and provides default values ['foo', 'bar'] when no parameter is provided in the URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Annotated[list[str], Query()] = ["foo", "bar"]):
    query_items = {"q": q}
    return query_items
```

----------------------------------------

TITLE: Copying Requirements File in Dockerfile
DESCRIPTION: Copies the `requirements.txt` file to the `/code` directory in the Docker container. This file contains the Python dependencies required by the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
COPY ./requirements.txt /code/requirements.txt
```

----------------------------------------

TITLE: Using Dependencies in WebSockets
DESCRIPTION: Demonstrates how to use dependencies, including `Depends`, `Security`, `Cookie`, `Header`, `Path`, and `Query`, within WebSocket endpoints. This is achieved by defining dependencies and injecting them into the WebSocket route function, similar to standard FastAPI path operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/websockets.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"from typing import Optional

from fastapi import Cookie, Depends, FastAPI, Header, Path, Query, WebSocket
from fastapi.responses import HTMLResponse

app = FastAPI()

html = \"\"\"
<!DOCTYPE html>
<html>
    <head>
        <title>Chat</title>
    </head>
    <body>
        <h1>WebSocket Chat</h1>
        <h2>Item ID: <span id=\"item-id\"></span></h2>
        <h2>Token: <span id=\"token\"></span></h2>
        <form action=\"\" onsubmit=\"sendMessage(event)\">
            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>
            <button>Send</button>
        </form>
        <ul id='messages'>
        </ul>
        <script>
            var itemId = document.getElementById('item-id')
            itemId.textContent = \"{item_id}\"
            var token = document.getElementById('token')
            token.textContent = \"{token}\"
            var ws = new WebSocket(\"ws://localhost:8000/ws/{item_id}?token={token}\");
            ws.onmessage = function(event) {
                var messages = document.getElementById('messages')
                var message = document.createElement('li')
                var content = document.createTextNode(event.data)
                message.appendChild(content)
                messages.appendChild(message)
            };
            function sendMessage(event) {
                var input = document.getElementById(\"messageText\")
                ws.send(input.value)
                input.value = ''
                event.preventDefault()
            }
        </script>
    </body>
</html>
\"\"\"


@app.get("/")
async def get(
    item_id: int,
    token: str,
    q: Optional[str] = None,
    cookie_id: Optional[str] = Cookie(None),
):
    return HTMLResponse(
        html.format(item_id=item_id, token=token)
    )


async def get_cookie_or_token(
    websocket: WebSocket,
    cookie_id: Optional[str] = Cookie(None),
    token: Optional[str] = Query(None),
):
    if cookie_id:
        return cookie_id
    if token:
        return token
    await websocket.close(code=status.WS_1008_POLICY_VIOLATION)


@app.websocket("/ws/{item_id}")
async def websocket_endpoint(
    websocket: WebSocket,
    item_id: int = Path(title=\"The ID of the item to get\"),
    token: str = Depends(get_cookie_or_token),
    cookie_id: Optional[str] = Cookie(None),
    x_header: Optional[str] = Header(None),
):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(
            f"Session cookie or query token value is: {token}")
"
```

LANGUAGE: python
CODE:
```
"from fastapi import WebSocketException, status"
```

----------------------------------------

TITLE: Disable Dependency Caching
DESCRIPTION: This snippet shows how to disable caching for a dependency using the `use_cache` parameter in `Depends`.  Setting `use_cache` to `False` ensures that the dependency is called every time it is needed within the same request, rather than using a cached value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
async def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):
    return {"fresh_value": fresh_value}
```

----------------------------------------

TITLE: Returning Values from FastAPI Dependency Functions
DESCRIPTION: This code demonstrates how dependency functions in FastAPI can return values, even though these values won't be used when the dependencies are specified in the path operation decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
return x_token

return x_key
```

----------------------------------------

TITLE: Navigating to a New Project Directory in Console
DESCRIPTION: This snippet shows how to change the current directory to a different project folder using the 'cd' command in the console.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_31

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban
```

----------------------------------------

TITLE: Path Parameter with Enum - FastAPI (Python)
DESCRIPTION: This code snippet demonstrates how to declare a path parameter with a type annotation that refers to the previously defined Enum (`ModelName`). This allows FastAPI to validate the path parameter against the Enum values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
from enum import Enum

from fastapi import FastAPI

app = FastAPI()


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"


@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Creating Hero
DESCRIPTION: This snippet showcases how to create a new hero using the `HeroCreate` model for request validation and `HeroPublic` for the response. The FastAPI endpoint receives data according to `HeroCreate`, creates a database entry, and returns a `HeroPublic` model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"@app.post("/heroes/", response_model=HeroPublic)
async def create_hero(hero: HeroCreate, db: Session = Depends(get_db)):
    db_hero = Hero.from_orm(hero)
    db.add(db_hero)
    db.commit()
    db.refresh(db_hero)
    return db_hero"
```

----------------------------------------

TITLE: Defining Pydantic Model (Python 3.10+ using |) - Python
DESCRIPTION: For Python versions 3.10+, this snippet defines the Pydantic model using the modern `|` syntax for union types (`datetime | None`) and built-in type hints (`list[int]`). This offers the most concise and readable way to define typed Pydantic models.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_21

LANGUAGE: Python
CODE:
```
from datetime import datetime
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = "John Doe"
    signup_ts: datetime | None = None
    friends: list[int] = []
```

----------------------------------------

TITLE: Adding Multiple Validations to Query Parameters in FastAPI (Python 3.10+)
DESCRIPTION: This snippet demonstrates how to add multiple validations (min_length and max_length) to a query parameter using Annotated and Query in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(min_length=3, max_length=50)] = None):
    results = {"items": [{ "item_id": "Foo" }, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Adding Individual Path Operation to FastAPI App
DESCRIPTION: Demonstrates how to add a single path operation directly to the main FastAPI application, in addition to included routers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
@app.get("/")
async def root():
    return {"message": "Hello Bigger Applications!"}
```

----------------------------------------

TITLE: Extended FastAPI Test Suite in Python
DESCRIPTION: A comprehensive test suite for the extended FastAPI application, covering various scenarios including error cases and header validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi.testclient import TestClient

from .main import app

client = TestClient(app)


def test_read_users_me():
    response = client.get("/users/me", headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 200
    assert response.json() == {"username": "fakecurrentuser"}


def test_read_users_me_unauth():
    response = client.get("/users/me", headers={"X-Token": "wrong"})
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}


def test_read_users():
    response = client.get("/users", headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 200
    assert response.json() == [{"username": "Rick"}, {"username": "Morty"}]


def test_read_user():
    response = client.get("/users/fakecurrentuser", headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 200
    assert response.json() == {"username": "fakecurrentuser"}


def test_read_user_unauth():
    response = client.get("/users/fakecurrentuser", headers={"X-Token": "wrong"})
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}


def test_read_user_not_found():
    response = client.get("/users/wronguser", headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 400
    assert response.json() == {"detail": "Wrong username"}


def test_create_user():
    response = client.post(
        "/users",
        headers={"X-Token": "fake-super-secret-token"},
        json={"username": "fakecurrentuser"},
    )
    assert response.status_code == 200
    assert response.json() == {"username": "fakecurrentuser"}


def test_create_user_invalid():
    response = client.post(
        "/users",
        headers={"X-Token": "fake-super-secret-token"},
        json={"username": "invaliduser"},
    )
    assert response.status_code == 400
    assert response.json() == {"detail": "Wrong username"}


def test_create_user_invalid_token():
    response = client.post(
        "/users",
        headers={"X-Token": "wrong"},
        json={"username": "fakecurrentuser"},
    )
    assert response.status_code == 400
    assert response.json() == {"detail": "X-Token header invalid"}
```

----------------------------------------

TITLE: Building Docker Image with Uvicorn/Gunicorn Base
DESCRIPTION: This Dockerfile builds an image for a FastAPI application using a pre-built base image `tiangolo/uvicorn-gunicorn-fastapi`. It copies the application's requirements file, installs dependencies using pip, and then copies the application code into the image.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Docker CMD Configuration - Exec Form
DESCRIPTION: Demonstrates the recommended exec form for CMD instruction in Dockerfile to ensure proper FastAPI shutdown and lifespan event handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_3

LANGUAGE: dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

----------------------------------------

TITLE: RedirectResponse in FastAPI
DESCRIPTION: Shows how to use RedirectResponse to return an HTTP redirect. It demonstrates direct return of RedirectResponse from a path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer")
async def redirect_typer():
    return RedirectResponse("https://typer.tiangolo.com")
```

----------------------------------------

TITLE: Nested Dependencies with Yield
DESCRIPTION: Demonstrates how to implement nested dependencies with yield where each dependency depends on others. Shows proper dependency chaining and cleanup order.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def dependency_a():
    dep_a = generate_dep_a()
    try:
        yield dep_a
    finally:
        dep_a.close()

async def dependency_b(dep_a: DepA = Depends(dependency_a)):
    dep_b = generate_dep_b()
    try:
        yield dep_b
    finally:
        dep_b.close(dep_a)

async def dependency_c(dep_b: DepB = Depends(dependency_b)):
    dep_c = generate_dep_c()
    try:
        yield dep_c
    finally:
        dep_c.close(dep_b)
```

----------------------------------------

TITLE: Reading from .env file - Pydantic v1
DESCRIPTION: This code configures a Pydantic `Settings` class to read environment variables from a `.env` file. It uses the `Config` inner class to specify the `env_file` to load.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings


class Settings(BaseSettings):
    app_name: str
    admin_email: str

    class Config:
        env_file = ".env"
```

----------------------------------------

TITLE: Defining Base and Inherited Pydantic Models in FastAPI
DESCRIPTION: This code defines a base Pydantic model `UserBase` and inherits from it to create `UserCreate`, `UserUpdate`, and `User` models. This approach reduces code duplication by sharing common attributes and validations among related models. The `User` model includes an `id` field, while `UserCreate` and `UserUpdate` handle password variations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class UserBase(BaseModel):
    email: str
    first_name: str
    last_name: str
    is_active: bool = True


class UserCreate(UserBase):
    password: str


class UserUpdate(UserBase):
    password: Optional[str] = None


class User(UserBase):
    id: int
```

----------------------------------------

TITLE: Using Trusted Host Middleware - Python
DESCRIPTION: The `TrustedHostMiddleware` enforces validation on incoming requests to ensure they have a correctly set `Host` header. This helps to protect against HTTP Host Header attacks, allowing a list of permitted hostnames as parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/middleware.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
# Middleware implementation goes here
```

----------------------------------------

TITLE: Creating a Basic Dependency Function in FastAPI
DESCRIPTION: Demonstrates a simple dependency function that accepts optional query parameters and returns a dictionary of common parameters. Showcases how dependencies can be used to extract and standardize input parameters across different route handlers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Configuring APIRouter with Prefix, Tags, and Dependencies in FastAPI (Python)
DESCRIPTION: This code shows how to configure an APIRouter with a prefix, tags, extra responses, and dependencies for a group of item-related endpoints in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException

from ..dependencies import get_token_header

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)

fake_items_db = {"plumbus": {"name": "Plumbus"}, "gun": {"name": "Portal Gun"}}

@router.get("/")
async def read_items():
    return fake_items_db

@router.get("/{item_id}")
async def read_item(item_id: str):
    if item_id not in fake_items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"name": fake_items_db[item_id]["name"], "item_id": item_id}
```

----------------------------------------

TITLE: Basic Python Async Function with Await
DESCRIPTION: Demonstrates how to use the await keyword in Python to handle asynchronous operations. The code shows a function that asynchronously retrieves burger data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Testing FastAPI Endpoints with Params/Headers/Body (Python)
DESCRIPTION: Provides `pytest` functions for testing the complex FastAPI application that includes path/query parameters, headers, and request bodies. It demonstrates using `TestClient` to send various types of requests (GET, POST) with appropriate data and headers, and asserts response correctness, including both success and error cases based on header validation. Requires `pytest`, `httpx`, and the application defined in `app_b/main.py`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_4

LANGUAGE: python
CODE:
```
from fastapi.testclient import TestClient
from .main import app

client = TestClient(app)

def test_read_item():
    headers = {"X-Token": "fake-super-secret-token"}
    response = client.get("/items/2?q=testquery", headers=headers)
    assert response.status_code == 200
    assert response.json() == {"item_id": 2, "q": "testquery"}

def test_read_item_bad_token():
    headers = {"X-Token": "bad-token"}
    response = client.get("/items/2?q=testquery", headers=headers)
    assert response.status_code == 400
    assert response.json() == {"detail": "Invalid X-Token header"}

def test_create_item():
    headers = {"X-Token": "fake-super-secret-token"}
    json_data = {"name": "Foo", "price": 10.5}
    response = client.post("/items/", headers=headers, json=json_data)
    assert response.status_code == 200
    assert response.json() == json_data

def test_create_item_bad_token():
    headers = {"X-Token": "bad-token"}
    json_data = {"name": "Foo", "price": 10.5}
    response = client.post("/items/", headers=headers, json=json_data)
    assert response.status_code == 400
    assert response.json() == {"detail": "Invalid X-Token header"}
```

----------------------------------------

TITLE: Implementing User Authentication with Password Verification
DESCRIPTION: Process user login by verifying username, checking password hash, and handling authentication errors
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def fake_hash_password(password: str):
    return "fakehashed" + password
```

----------------------------------------

TITLE: Running FastAPI App with Uvicorn
DESCRIPTION: Executes the FastAPI application using Uvicorn, binding it to all available interfaces (0.0.0.0) on port 80.  The `--reload` option should be removed for production.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/manually.md#_snippet_2

LANGUAGE: console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 80

<span style="color: green;">INFO</span>:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Configuring Conditional OpenAPI in FastAPI with Environment Variables
DESCRIPTION: This snippet demonstrates how to conditionally enable or disable OpenAPI documentation in FastAPI applications using Pydantic settings and environment variables. It declares a Settings class with an openapi_url configuration that can be controlled through the OPENAPI_URL environment variable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/conditional-openapi.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseSettings


class Settings(BaseSettings):
    openapi_url: str = "/openapi.json"


settings = Settings()

app = FastAPI(openapi_url=settings.openapi_url)

```

----------------------------------------

TITLE: Installing packages from requirements.txt using uv pip
DESCRIPTION: This command installs Python packages from a `requirements.txt` file using `uv pip` within the active virtual environment. The `-r` option tells `uv pip` to read the list of packages to install from the specified file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_13

LANGUAGE: Shell
CODE:
```
```console
$ uv pip install -r requirements.txt
---> 100%
```
```

----------------------------------------

TITLE: Relative Imports in FastAPI Routers
DESCRIPTION: This code snippet demonstrates how to use relative imports to import dependencies from other modules within the same package in a FastAPI application. It imports the `get_token_header` dependency from the `app.dependencies` module using `..` to navigate up one level in the package hierarchy.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import APIRouter, Depends, HTTPException

from ..dependencies import get_token_header
from .models import Item, ItemCreate

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)


fake_items_db = {
    "plumbus": {"name": "Plumbus"},
    "gun": {"name": "Portal Gun"},
}


@router.get("/")
async def read_items():
    return fake_items_db


@router.get("/{item_id}", responses={403: {"description": "Operation forbidden"}})
async def read_item(item_id: str):
    if item_id not in fake_items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    if item_id == "gun":
        raise HTTPException(status_code=403, detail="Not allowed")
    return {"name": fake_items_db[item_id]["name"], "item_id": item_id}


@router.post("/")
async def create_item(item: ItemCreate):
    return item


@router.put(
    "/{item_id}",
    tags=["custom"],
    responses={403: {"description": "Operation forbidden"}},
)
async def update_item(item_id: str):
    if item_id != "plumbus":
        raise HTTPException(
            status_code=403, detail="You can only update the plumbus"
        )
    return {"name": "Plumbus"}

```

----------------------------------------

TITLE: Creating a Custom TimedRoute for Response Time Measurement
DESCRIPTION: This snippet implements a TimedRoute class that adds an X-Response-Time header to responses, showing how long it took to generate the response. It demonstrates how to modify response headers in a custom route handler.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
class TimedRoute(APIRoute):
    def get_route_handler(self) -> Callable:
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request) -> Response:
            before = time.time()
            response = await original_route_handler(request)
            duration = time.time() - before
            response.headers["X-Response-Time"] = str(duration)
            return response

        return custom_route_handler
```

----------------------------------------

TITLE: UJSONResponse Example in FastAPI
DESCRIPTION: This example demonstrates the usage of `UJSONResponse` in FastAPI. It imports the `UJSONResponse` class and then uses it as the `response_class` for a *path operation*.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import UJSONResponse

app = FastAPI()


@app.get("/items/{item_id}", response_class=UJSONResponse)  # HL
async def read_item(item_id: int):
    return {"item_id": item_id}

```

----------------------------------------

TITLE: Return HTTP Error on Incorrect Credentials
DESCRIPTION: This snippet shows how to return an `HTTPException` with a 401 status code and the `WWW-Authenticate` header when the provided credentials are incorrect. This prompts the browser to display the login prompt again.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
    if not (correct_username and correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Basic"},
        )
```

----------------------------------------

TITLE: Importing HTTPException in FastAPI
DESCRIPTION: This code snippet demonstrates how to import the HTTPException class from fastapi, which is used to raise HTTP exceptions within your application. This allows you to return specific HTTP status codes and error details to the client when errors occur.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from fastapi import HTTPException"
```

----------------------------------------

TITLE: Importing Path and Annotated in FastAPI
DESCRIPTION: Demonstrates how to import the Path function from fastapi and Annotated from typing for use with path parameter validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path
from typing import Annotated

```

----------------------------------------

TITLE: OpenAPI JSON Schema for FastAPI Application
DESCRIPTION: This JSON snippet represents a portion of the automatically generated OpenAPI schema for the FastAPI application. It includes basic information about the API and its endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "openapi": "3.0.2",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/items/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {



...

```

----------------------------------------

TITLE: RedirectResponse as response_class in FastAPI
DESCRIPTION: This code snippet demonstrates the use of `RedirectResponse` as a `response_class` in FastAPI. This configuration allows you to simply return the URL string, and FastAPI will handle the redirection using the `RedirectResponse` class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/redirect", response_class=RedirectResponse)  # HL
async def redirect():
    return "https://www.example.com"  # HL

```

----------------------------------------

TITLE: Mixing Multiple Body and Query Parameters (Python)
DESCRIPTION: Illustrates defining a path operation that accepts multiple body parameters (Pydantic models `item`, `user`, and single value `importance`) along with a standard query parameter (`q`). Single value parameters without `Body` or `Path` are treated as query parameters by default.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-multiple-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int = Path(..., gt=0),
    q: Union[str, None] = None,
    item: Item = Body(..., embed=True),
    user: User,
    importance: int = Body(...),
):
    results = {"item_id": item_id, "q": q, "item": item, "user": user, "importance": importance}
    return results
```

----------------------------------------

TITLE: Implementing User Dependencies in FastAPI
DESCRIPTION: Creates dependencies to get the current user and check if the user is active, raising appropriate HTTP exceptions for invalid cases.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    user = fake_decode_token(token)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return user

async def get_current_active_user(
    current_user: Annotated[User, Depends(get_current_user)]
):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

@app.get("/users/me")
async def read_users_me(current_user: Annotated[User, Depends(get_current_active_user)]):
    return current_user
```

----------------------------------------

TITLE: Changing Response Status Code with Response Parameter
DESCRIPTION: Shows how to set a custom HTTP status code using the Response parameter in a FastAPI path operation function. Allows dynamically setting status codes while still supporting response model filtering.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/response-change-status-code.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
# Assuming a path operation function that uses Response
# to change the status code dynamically
def create_item(response: Response, item: Item):
    # Logic to potentially create a new item
    if not existing_item:
        response.status_code = status.HTTP_201_CREATED
    return item
```

----------------------------------------

TITLE: Importing List Type from typing Module
DESCRIPTION: Import statement for the List type from Python's typing module, required for type annotations in Python versions before 3.9.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List
```

----------------------------------------

TITLE: Using Raw ASGI Middleware
DESCRIPTION: Demonstrates how to wrap an existing ASGI application directly with an ASGI middleware class. This method is shown for comparison but is not the recommended way in FastAPI/Starlette.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/middleware.md#_snippet_0

LANGUAGE: Python
CODE:
```
from unicorn import UnicornMiddleware

app = SomeASGIApp()

new_app = UnicornMiddleware(app, some_config="rainbow")
```

----------------------------------------

TITLE: Building a Docker Image for FastAPI with Multiple Workers
DESCRIPTION: This Dockerfile demonstrates how to build a container image for a FastAPI application with multiple worker processes. It installs dependencies, copies the application code, and uses the 'fastapi' command to run the app with 4 workers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_9

LANGUAGE: dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["fastapi", "run", "app/main.py", "--port", "80", "--workers", "4"]
```

----------------------------------------

TITLE: Importing Header Parameter in FastAPI
DESCRIPTION: Example showing how to import the Header class from FastAPI to handle header parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/header-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Header
```

----------------------------------------

TITLE: OpenAPI JSON Schemas for FastAPI Responses
DESCRIPTION: This JSON snippet defines schemas used to detail response components in OpenAPI for FastAPI applications. It outlines Pydantic models like Message, Item, ValidationError, and HTTPValidationError. The schemas are integrated into OpenAPI, offering structured data representation for API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "components": {
        "schemas": {
            "Message": {
                "title": "Message",
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "title": "Message",
                        "type": "string"
                    }
                }
            },
            "Item": {
                "title": "Item",
                "required": [
                    "id",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "string"
                    },
                    "value": {
                        "title": "Value",
                        "type": "string"
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Handling Multiple File Uploads
DESCRIPTION: This snippet demonstrates how to handle multiple file uploads in a FastAPI endpoint by declaring the file parameter as a list of `bytes` or `UploadFile`. This allows the endpoint to receive multiple files in a single request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
"from typing import List

from fastapi import FastAPI, File, UploadFile

app = FastAPI()


@app.post("/files/")
async def create_files(files: List[bytes] = File()):
    return {"file_sizes": [len(file) for file in files]}


@app.post("/uploadfiles/")
async def create_upload_files(files: List[UploadFile] = File()):
    return {"filenames": [file.filename for file in files]}"
```

----------------------------------------

TITLE: Mixing Path, Query, and Body Parameters
DESCRIPTION: Demonstrates how to mix Path, Query, and body parameters in a FastAPI route. It also shows how to declare body parameters as optional by setting a default value of None.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-multiple-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Union[Item, None] = None,
    q: Union[str, None] = None
):
    results = {"item_id": item_id}
    if item:
        results.update({"item": item})
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Initializing Startup Event Handler in FastAPI
DESCRIPTION: Defines a function to be executed before the FastAPI application starts. This example initializes items in a 'database' (a dictionary) with some values. The application will not start receiving requests until all startup event handlers have completed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/events.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.on_event("startup")
async def startup_event():
    items = {"foo": "TBD"}
    print("Starting up...")
```

----------------------------------------

TITLE: Defining URL Field with HttpUrl Type
DESCRIPTION: Using Pydantic's HttpUrl type for the url field to ensure it contains a valid URL string with proper validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
url: HttpUrl
```

----------------------------------------

TITLE: Implementing User Dependencies in FastAPI OAuth2 Flow
DESCRIPTION: This snippet shows the implementation of user dependencies in the OAuth2 flow. It includes functions to get the current user and check if the user is active, raising appropriate HTTP exceptions when necessary.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    user = fake_decode_token(token)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return user

async def get_current_active_user(
    current_user: Annotated[User, Depends(get_current_user)]
):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

@app.get("/users/me")
async def read_users_me(current_user: Annotated[User, Depends(get_current_active_user)]):
    return current_user
```

----------------------------------------

TITLE: Importing FastAPI Security Tools
DESCRIPTION: Import statement showing all available security tools in FastAPI that can be used to create dependables for authentication and authorization. These tools integrate with OpenAPI to be shown in the automatic documentation UI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/security/index.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.security import (
    APIKeyCookie,
    APIKeyHeader,
    APIKeyQuery,
    HTTPAuthorizationCredentials,
    HTTPBasic,
    HTTPBasicCredentials,
    HTTPBearer,
    HTTPDigest,
    OAuth2,
    OAuth2AuthorizationCodeBearer,
    OAuth2PasswordBearer,
    OAuth2PasswordRequestForm,
    OAuth2PasswordRequestFormStrict,
    OpenIdConnect,
    SecurityScopes,
)
```

----------------------------------------

TITLE: Install python-multipart dependency
DESCRIPTION: Install the required `python-multipart` library using pip to enable parsing of form data in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-forms.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Dockerfile for Larger FastAPI Applications with File Structure
DESCRIPTION: This Dockerfile is adapted for larger FastAPI applications with a specific file structure. It copies the `requirements.txt` file, installs the dependencies, and then copies the application code from the `./app` directory to the `/app/app` directory inside the container.  The `hl_lines="7"` indicates the line that is specifically highlighted.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app/app
```

----------------------------------------

TITLE: Simple HTTP Basic Auth with FastAPI
DESCRIPTION: This snippet demonstrates the basic implementation of HTTP Basic Authentication using FastAPI. It imports `HTTPBasic` and `HTTPBasicCredentials`, creates a security scheme, and uses it in a path operation dependency. The path operation returns an `HTTPBasicCredentials` object containing the provided username and password.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```

{* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}

```

----------------------------------------

TITLE: Installing Python Dependencies in Dockerfile
DESCRIPTION: Installs the Python dependencies listed in the `requirements.txt` file using `pip`. The `--no-cache-dir` option prevents `pip` from storing downloaded packages locally, and `--upgrade` ensures that the packages are updated to the latest versions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_7

LANGUAGE: Dockerfile
CODE:
```
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

----------------------------------------

TITLE: Defining Asynchronous Routes in FastAPI
DESCRIPTION: This code demonstrates how to define asynchronous routes in FastAPI using `async def`. It's used when your route handlers need to perform asynchronous operations using `async` and `await`.  Using `async def` allows FastAPI to handle concurrent requests more efficiently.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: WebSocket Endpoint with Dependencies
DESCRIPTION: Shows how to use dependencies, security, and other FastAPI features within a WebSocket endpoint. Includes examples of using `Depends` and raising `WebSocketException`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/websockets.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Cookie, Depends, FastAPI, Header, WebSocket, WebSocketException

app = FastAPI()

async def get_cookie_or_token(websocket: WebSocket, cookie: Optional[str] = Cookie(None), token: Optional[str] = None):
    if cookie is None and token is None:
        raise WebSocketException(code=1008, reason="No cookies or token received")
    if cookie:
        return cookie
    return token

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket, q: Optional[str] = None, cookie_or_token: str = Depends(get_cookie_or_token)):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}, query parameter q is: {q}, cookie_or_token is: {cookie_or_token}")
```

----------------------------------------

TITLE: Using ORJSONResponse for Better Performance in FastAPI
DESCRIPTION: Example of using ORJSONResponse as the response_class parameter in a FastAPI route to improve JSON serialization performance with the orjson library.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()


@app.get("/items/", response_class=ORJSONResponse)
async def read_items():
    return {"item_id": "Foo"}
```

----------------------------------------

TITLE: Declaring Metadata for Path Parameter in FastAPI (Python)
DESCRIPTION: Example of declaring metadata (title) for a path parameter 'item_id' using Path in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
item_id: Annotated[int, Path(title="The ID of the item to get")]
```

----------------------------------------

TITLE: Pydantic Model Update with .copy() Method
DESCRIPTION: Demonstrates creating a model copy with updated values using the `update` parameter, enabling partial model updates without modifying the original instance
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-updates.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
tutorial002.py (line 35)
```

----------------------------------------

TITLE: Using ORJSONResponse for Improved Performance in FastAPI
DESCRIPTION: Example showing how to use ORJSONResponse for better performance with large responses. This replaces the default JSONResponse with the faster orjson library implementation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()


@app.get("/items/", response_class=ORJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Setting Cookies Using Response Parameter in FastAPI
DESCRIPTION: This snippet shows how to declare a Response parameter in a FastAPI path operation function and use it to set cookies. The function can then return any data, which will be automatically processed by FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-cookies.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/cookie/")
def create_cookie(response: Response):
    response.set_cookie(key="fakesession", value="fake-cookie-session-value")
    return {"message": "Come to the dark side, we have cookies"}
```

----------------------------------------

TITLE: Importing FastAPI Exceptions
DESCRIPTION: Shows how to import HTTPException and WebSocketException from the FastAPI framework for handling error responses and request termination.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/exceptions.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import HTTPException, WebSocketException
```

----------------------------------------

TITLE: Path Operations with APIRouter in users.py
DESCRIPTION: Defines path operations (GET, POST) for user-related endpoints using the APIRouter instance.  These operations are associated with the router and will be included in the main FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
@router.get("/users/me", tags=["users"])
async def read_user_me():
    return {"username": "Fake current user"}


@router.get("/users/{username}", tags=["users"])
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Dockerfile Creation for FastAPI with tiangolo/uvicorn-gunicorn-fastapi
DESCRIPTION: This Dockerfile utilizes the `tiangolo/uvicorn-gunicorn-fastapi` base image for Python 3.9. It copies the `requirements.txt` file, installs the dependencies, and then copies the application code into the container. This is a basic setup for deploying a FastAPI application with Gunicorn and Uvicorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_3

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Creating a Data Model with Pydantic
DESCRIPTION: This code snippet shows how to define a data model using Pydantic's `BaseModel`. The model defines the structure of the expected JSON request body, including data types and optional fields. Default values can be assigned to make fields optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body.md#_snippet_1

LANGUAGE: python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Using Context Managers to Read Files in Python
DESCRIPTION: This snippet demonstrates how to use a context manager to handle file reading in Python, ensuring the file is closed properly after being used. It showcases the 'with' statement, which simplifies resource management by automatically handling exceptions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
with open("./somefile.txt") as f:
    contents = f.read()
    print(contents)
```

----------------------------------------

TITLE: Using AsyncClient in Asynchronous pytest Tests
DESCRIPTION: Inside an `async def` test function, `httpx.AsyncClient` is used to make requests to the FastAPI application. The `async with` context manager and the `await` keyword are necessary for making asynchronous HTTP calls correctly within the async test context.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_4

LANGUAGE: python
CODE:
```
async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Hello World"}
```

----------------------------------------

TITLE: Settings and Testing
DESCRIPTION: This snippet illustrates how to override the `Settings` dependency during testing in FastAPI. It defines a function to create a test settings object and uses it in a dependency override to modify the application's configuration during testing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from .main import app, get_settings


def get_settings_override():
    return Settings(app_name="Test App Name", admin_email="test@example.com")


app.dependency_overrides[get_settings] = get_settings_override

client = TestClient(app)


def test_read_items():
    response = client.get("/items/")
    assert response.status_code == 200
    assert response.json() == {"app_name": "Test App Name", "admin_email": "test@example.com"}


app.dependency_overrides = {}
```

----------------------------------------

TITLE: Handling Multiple File Uploads
DESCRIPTION: Shows how to accept multiple file uploads simultaneously by defining parameters as lists of bytes or UploadFile objects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
async def create_files(files: list[bytes] = File()):
    return {"file_sizes": [len(file) for file in files]}
```

----------------------------------------

TITLE: Embedding a Single Body Parameter in FastAPI (Python)
DESCRIPTION: Shows how to use Body(embed=True) to embed a single body parameter 'item' in its own JSON object in the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
async def update_item(item: Item = Body(embed=True)):
```

----------------------------------------

TITLE: Using GZip Middleware - Python
DESCRIPTION: The `GZipMiddleware` handles GZip responses for requests with the `Accept-Encoding` header including 'gzip'. It allows for both standard and streaming responses, with parameters for minimum response size and compression level.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/middleware.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
# Middleware implementation goes here
```

----------------------------------------

TITLE: FastAPI: Setting Response Status Code
DESCRIPTION: This code snippet demonstrates how to declare a `Response` parameter in a FastAPI path operation function and use it to dynamically set the HTTP status code. It shows a scenario where a resource is created if it doesn't exist, and a 'CREATED' status code (201) is returned, while still using a response model to filter and convert the data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-change-status-code.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Response

app = FastAPI()


@app.post("/items/{item_id}")
async def create_item(item_id: int, response: Response):
    if item_id == 3:
        response.status_code = 201
        return {"item_id": item_id, "name": "The Foo"}
    else:
        return {"item_id": item_id, "name": "The Bar"}
```

----------------------------------------

TITLE: Disabling Underscore to Hyphen Conversion in FastAPI Header Parameters
DESCRIPTION: This snippet shows how to disable the automatic conversion of underscores to hyphens in header parameter names when using Pydantic models. It's useful when you need to preserve underscores in header names, though it's generally not recommended due to potential issues with some HTTP proxies and servers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-param-models.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/headers/")
async def get_headers(headers: HeaderModel = Header(convert_underscores=False)):
    return headers
```

----------------------------------------

TITLE: Installing File Upload Dependencies - Python Console
DESCRIPTION: Command to install python-multipart package required for handling file uploads in FastAPI
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Define Settings in Separate Config Module
DESCRIPTION: Create a dedicated Python file (e.g., `config.py`) to define the `Settings` model using `BaseSettings`. This promotes better organization in larger applications by separating configuration logic from the main application file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_5

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50
    model_config = SettingsConfigDict(env_file=".env")
```

----------------------------------------

TITLE: Path Parameter Ordering in FastAPI (Python)
DESCRIPTION: This snippet demonstrates the importance of path operation ordering in FastAPI. The `/users/me` path must be defined before `/users/{user_id}` to prevent the latter from incorrectly matching `/users/me`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Optional File Upload in FastAPI
DESCRIPTION: This snippet demonstrates how to make a file upload optional by setting a default value of `None`.  This allows the API endpoint to function correctly even if the client doesn't provide a file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"from typing import Annotated

from fastapi import Depends, FastAPI, File

app = FastAPI()


@app.post("/files/")
async def create_file(file: Annotated[bytes | None, File()] = None):
    if not file:
        return {"message": "No file sent"}
    else:
        return {"file_size": len(file)}


@app.post("/uploadfiles/")
async def create_upload_file(file: Annotated[UploadFile | None, File()] = None):
    if not file:
        return {"message": "No file sent"}
    else:
        return {"filename": file.filename}"
```

----------------------------------------

TITLE: Nested Dataclasses in FastAPI using Pydantic
DESCRIPTION: This code snippet shows how to use nested dataclasses in FastAPI. By using pydantic.dataclasses as a drop-in replacement for standard dataclasses, it becomes possible to create complex nested structures. This approach helps in generating API documentation and ensures that dataclasses are serialized properly in response models.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
{* ../../docs_src/dataclasses/tutorial003.py hl[1,5,8:11,14:17,23:25,28] *}
```

----------------------------------------

TITLE: Adding Tags to Path Operations in FastAPI
DESCRIPTION: This snippet shows how to add tags to FastAPI path operations.  The `tags` parameter is used with a list of strings to categorize the operations.  These tags are then used in the OpenAPI schema and the interactive documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from enum import Enum

from fastapi import FastAPI

app = FastAPI()


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"


@app.get("/models/{model_name}", tags=["models"])
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}

    return {"model_name": model_name, "message": "Have some residuals"}


@app.get("/items/", tags=["items"])
async def read_items():
    return [{"name": "Foo"}, {"name": "Bar"}]
```

LANGUAGE: python
CODE:
```
@app.post("/items/", tags=["items"])
async def create_item(name: str):
    return {"name": name}
```

----------------------------------------

TITLE: Startup Event Handler in FastAPI
DESCRIPTION: This code demonstrates how to define a startup event handler in FastAPI using the `@app.on_event("startup")` decorator. The function decorated will be executed once before the application starts receiving requests. In this case, it initializes a dictionary named `items`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"@app.on_event(\"startup\")\nasync def startup_event():\n    items.clear()\n    items.update({\"foo\": \"Foo\", \"bar\": \"Bar\"})"
```

----------------------------------------

TITLE: Updating Dependencies for JWT Token Authentication
DESCRIPTION: This snippet updates the `get_current_user` dependency to use JWT tokens for authentication. It decodes the received token, validates it, and returns the current user. If the token is invalid, it returns an HTTP error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: Python
CODE:
```
from datetime import timedelta, datetime
from typing import Annotated

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


app = FastAPI()


ACCESS_TOKEN_EXPIRE_MINUTES = 30


SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"  # Change this in production!
ALGORITHM = "HS256"


# to get more information go to https://passlib.readthedocs.io/en/stable/context_tutorial.html
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = fake_users_db.get(token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Defining a Path Operation Function in FastAPI (Sync)
DESCRIPTION: This code snippet shows how to define a synchronous path operation function in FastAPI. Similar to the asynchronous example, the `@app.get("/")` decorator links the `root` function to the root path and the GET method. The key difference is the absence of `async` in the function definition, making it a standard Python function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
"@app.get("/")
def root():
    return {"message": "Hello World"}"
```

----------------------------------------

TITLE: Install SQLModel
DESCRIPTION: Install the `sqlmodel` package using pip. This package provides the necessary tools to interact with SQL databases, combining features from SQLAlchemy and Pydantic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: Console
CODE:
```
$ pip install sqlmodel
```

----------------------------------------

TITLE: Returning a List of Models in FastAPI
DESCRIPTION: This code shows how to define a response that is a list of Pydantic models using `typing.List`. The `response_model` parameter is set to `List[Item]`, indicating that the endpoint will return a list of `Item` objects. This allows FastAPI to automatically serialize the list of items into a JSON array.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None


items = [
    Item(name="Foo", price=50.2),
    Item(name="Bar", description="The bartenders", price=62, tax=2.0),
    Item(name="Baz", description=None, price=50.2, tax=0)
]


@app.get("/items/", response_model=List[Item])
async def read_items():
    return items
```

----------------------------------------

TITLE: OAuth2 Password Request Form Dependency
DESCRIPTION: This snippet imports the OAuth2PasswordRequestForm and uses it as a dependency in the /token path operation to receive username, password, and optional scope and grant_type from a form request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/security/simple-oauth2.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm

app = FastAPI()

@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    return {"access_token": form_data.username, "token_type": "bearer"}
```

----------------------------------------

TITLE: FastAPI Custom Unique ID Function
DESCRIPTION: This snippet shows how to customize the generation of unique IDs for path operations in FastAPI. It defines a function that uses the first tag and the function name to create the ID, ensuring uniqueness while providing cleaner method names in generated clients. This function is then passed to the FastAPI constructor via the `generate_unique_id_function` parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from fastapi.routing import APIRoute
from pydantic import BaseModel


def generate_unique_id(route: APIRoute):
    return f"{route.tags[0]}-{route.name}"


app = FastAPI(generate_unique_id_function=generate_unique_id)


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.post("/items/", tags=["items"])
async def create_item(item: Item):
    return item


@app.get("/items/{item_id}", tags=["items"])
async def read_item(item_id: int):
    return {"name": "Foo", "price": 50.2}

```

----------------------------------------

TITLE: Pydantic URL validation
DESCRIPTION: This snippet defines a field `url` within an `Image` Pydantic model, specifying it should be a `HttpUrl`. Pydantic will then validate the input string to ensure it is a properly formatted HTTP URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
    "url: HttpUrl
    name: str"
```

----------------------------------------

TITLE: JSON Response Format Example
DESCRIPTION: Example of formatted JSON output with indentation, showing the difference in response formatting when using custom ORJSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_14

LANGUAGE: json
CODE:
```
{
  "message": "Hello World"
}
```

----------------------------------------

TITLE: Using Dictionary as Response
DESCRIPTION: This code demonstrates how to declare a response consisting of a dictionary with specific key and value types using `typing.Dict`.  Useful in situations where the keys/attributes are not known in advance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"""\nfrom typing import Dict\n\n\nasync def read_items() -> Dict[str, int]:\n    return {\n        "foo": 1,\n        "bar": 2,\n    }\n"""
```

----------------------------------------

TITLE: Adding Task to BackgroundTasks - FastAPI Python
DESCRIPTION: Adds the `write_notification` function to the `background_tasks` object. The function is passed the `email` parameter and the keyword argument `message` to be executed in the background after the HTTP response is sent.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/background-tasks.md#_snippet_2

LANGUAGE: Python
CODE:
```
background_tasks.add_task(write_notification, email, message="some notification") # Highlighted line
```

----------------------------------------

TITLE: Defining a Background Task Function in FastAPI
DESCRIPTION: This snippet demonstrates how to create a function that will be run as a background task. The function writes to a file, simulating sending an email.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def write_notification(email: str, message=""):
    with open("log.txt", mode="w") as email_file:
        content = f"notification for {email}: {message}"
        email_file.write(content)
```

----------------------------------------

TITLE: Install Python dependencies using pip
DESCRIPTION: This command installs the dependencies listed in the requirements.txt file using pip.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install -r requirements.txt
```

----------------------------------------

TITLE: Embedding Single Body Parameter in FastAPI Request
DESCRIPTION: Illustrates how to force FastAPI to expect a single Pydantic model parameter to be nested within the request body under a key matching the parameter name, similar to how multiple body parameters are handled, using `Body(embed=True)`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-multiple-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import Body

@app.post("/items/{item_id}")
async def create_item(item_id: int, item: Item = Body(embed=True)):
    return {"item_id": item_id, "item": item}
```

----------------------------------------

TITLE: Using async def and await in a FastAPI Path Operation
DESCRIPTION: Demonstrates how to define a FastAPI path operation function using `async def` to handle asynchronous operations. This allows the function to `await` other asynchronous calls (like `get_burgers`) without blocking the entire application, which is crucial for handling multiple concurrent requests in a web server.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Setting Cookies by Returning a Response Directly in FastAPI
DESCRIPTION: This snippet shows how to return a `Response` object directly from a FastAPI path operation function to set cookies.  The example shows how to create the `Response` object and set a cookie named `example-cookie` with a specified value. It highlights the need to handle the response type and potential `response_model` filtering manually.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-cookies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"""\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_items(item_id: str):\n    response = Response("Hello {item_id}")\n    response.set_cookie(key="example-cookie", value="some-cookie-value")\n    return response\n"""
```

----------------------------------------

TITLE: Creating a Hero API Endpoint with FastAPI and SQLModel in Python
DESCRIPTION: Implements a POST endpoint to create a new Hero in the database using SQLModel and FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@app.post("/heroes/", response_model=Hero)
def create_hero(hero: Hero, session: SessionDep):
    session.add(hero)
    session.commit()
    session.refresh(hero)
    return hero
```

----------------------------------------

TITLE: Create Database Tables
DESCRIPTION: Define a function that uses `SQLModel.metadata.create_all(engine)` to create all database tables defined by the SQLModel classes with `table=True`. This function is typically called once during application startup.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: Python
CODE:
```
from sqlmodel import SQLModel

def create_db_and_tables():
    SQLModel.metadata.create_all(engine)
```

----------------------------------------

TITLE: Pydantic schema_extra Example
DESCRIPTION: Demonstrates how to declare an example for a Pydantic model using the Config class and schema_extra. This adds extra information to the JSON Schema and is used in the API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/schema-extra-example.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None

    class Config:
        schema_extra = {
            "example": {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2,
            }
        }


@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Pydantic Model to Dict Conversion
DESCRIPTION: Demonstrates converting a Pydantic model instance to a dictionary using the .dict() method. This allows extracting the data from the model into a standard Python dictionary, which can then be used for further processing or data transfer.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/extra-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
user_in = UserIn(username="john", password="secret", email="john.doe@example.com")
user_dict = user_in.dict()
print(user_dict)
```

LANGUAGE: Python
CODE:
```
{
    'username': 'john',
    'password': 'secret',
    'email': 'john.doe@example.com',
    'full_name': None,
}
```

----------------------------------------

TITLE: Basic Python Type Declarations with Pydantic in FastAPI
DESCRIPTION: Demonstrates how to use Python type hints with Pydantic models in FastAPI. The example shows a simple function with type annotation and a Pydantic model definition for a User entity with typed fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/features.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# 변수를 str로 선언
# 그 후 함수 안에서 편집기 지원을 받으세요
def main(user_id: str):
    return user_id


# Pydantic 모델
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Creating a Dependency for Token Validation in FastAPI (Python 3.9+)
DESCRIPTION: This snippet defines a dependency function to validate a custom X-Token header in a FastAPI application using Python 3.9+ syntax.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException
from typing import Annotated

async def get_token_header(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
```

----------------------------------------

TITLE: Defining HTTP PUT Route with Custom Status Code in FastAPI
DESCRIPTION: This snippet demonstrates how to set up a PUT route using FastAPI's @app.put() decorator, allowing you to specify a successful response status code. This is useful for updating existing items.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-status-code.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.put("/items/{item_id}", status_code=status.HTTP_200_OK)\nasync def update_item(item_id: int, item: Item):\n    return {"item_id": item_id, **item.dict()}
```

----------------------------------------

TITLE: Using FileResponse with response_class parameter in FastAPI
DESCRIPTION: Shows how to use FileResponse as a response_class parameter in a path operation decorator. This allows directly returning the file path from the function instead of creating the FileResponse instance manually.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()


@app.get("/", response_class=FileResponse)
def main():
    return "large-file.txt"

```

----------------------------------------

TITLE: Multiple Query Parameter Values
DESCRIPTION: Configuring a query parameter to accept multiple values as a list
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
q: List[str] = Query(default=["foo", "bar"])
```

----------------------------------------

TITLE: Multi-Stage Docker Build with Poetry for FastAPI
DESCRIPTION: A multi-stage Dockerfile that leverages Poetry for dependency management, generating a requirements.txt file in the first stage and building the final image in the second stage. Includes proper workspace setup and command configuration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_11

LANGUAGE: dockerfile
CODE:
```
FROM python:3.9 as requirements-stage

WORKDIR /tmp

RUN pip install poetry

COPY ./pyproject.toml ./poetry.lock* /tmp/

RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

FROM python:3.9

WORKDIR /code

COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Installing packages from requirements.txt using pip
DESCRIPTION: This command installs Python packages from a `requirements.txt` file using `pip` within the active virtual environment. The `-r` option tells `pip` to read the list of packages to install from the specified file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_12

LANGUAGE: Shell
CODE:
```
```console
$ pip install -r requirements.txt
---> 100%
```
```

----------------------------------------

TITLE: Mounting Sub Application in FastAPI (Python)
DESCRIPTION: Demonstrates how to mount the previously defined `subapi` onto the main `app` instance at the '/subapi' path. This makes all path operations defined in `subapi` available under the '/subapi' prefix.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
app.mount("/subapi", subapi)
```

----------------------------------------

TITLE: Request Body with Multiple Examples
DESCRIPTION: Demonstrates how to pass multiple examples for the expected data in a request body using the `Body()` function. This allows for providing multiple example datasets for the request body, which are then included in the generated JSON Schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/schema-extra-example.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import Body, FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        examples=[
            {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2,
            },
            {
                "name": "Bar",
                "price": 99.99,
                "description": "The best item there is",
            },
        ],
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Using Annotated and Query for Parameter Validation in FastAPI (Python 3.10+)
DESCRIPTION: This snippet demonstrates how to use Annotated and Query to add a max_length validation to a query parameter in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(max_length=50)] = None):
    results = {"items": [{ "item_id": "Foo" }, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Defining HTTP POST Route with Custom Status Code in FastAPI
DESCRIPTION: This code snippet shows how to use FastAPI's @app.post() decorator to create a route that returns a specific HTTP status code upon successful item creation. The status_code parameter allows for customization of the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-status-code.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.post("/items/", status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item
```

----------------------------------------

TITLE: Raising exceptions from dependencies in FastAPI
DESCRIPTION: Shows how path decorator dependencies can raise exceptions like regular dependencies.  The `get_token_header` and `get_key` functions demonstrate raising an `HTTPException` if the header value is invalid, which will be handled by FastAPI's exception handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"async def get_token_header(x_token: str = Header()):\n    if x_token != \"fixed-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n    return x_token\n\nasync def get_key(x_key: str = Header()):\n    if x_key != \"fixed-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key"
```

LANGUAGE: Python
CODE:
```
"@app.get("/items/{item_id}", dependencies=[Depends(get_token_header), Depends(get_key)])\nasync def read_items(item_id: str):\n    return {"item_id": item_id}"
```

----------------------------------------

TITLE: Creating a WebSocket Endpoint in FastAPI
DESCRIPTION: Demonstrates how to create a WebSocket endpoint in FastAPI. This code defines a route that accepts WebSocket connections and implements a simple message echo functionality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, WebSocket

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: FastAPI Multiple Header Values Example
DESCRIPTION: This code snippet demonstrates how to handle headers with multiple values by declaring the header parameter as a `list`.  FastAPI will automatically collect all values for the given header into a Python list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from typing import List, Union

from fastapi import FastAPI, Header

app = FastAPI()


@app.get("/items/")
async def read_items(x_token: Union[List[str], None] = Header(default=None)):
    return {"X-Token values": x_token}
```

----------------------------------------

TITLE: Defining File Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to define file parameters in a FastAPI route using the `File` dependency. It shows how to declare a file parameter similarly to `Body` or `Form` parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def upload_file(file: bytes = File()):
    return {"file_size": len(file)}
```

----------------------------------------

TITLE: Disabling Response Model in FastAPI
DESCRIPTION: This example shows how to disable the response model generation in FastAPI by setting response_model=None. This allows using any return type annotation without affecting the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI
from fastapi.responses import Response

app = FastAPI()

@app.get("/items/{item_id}", response_model=None)
def read_item(item_id: str) -> Union[dict, Response]:
    ...
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in FastAPI using Python type hints. The `item_id: int` syntax tells FastAPI to expect an integer value for the `item_id` parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: JSON Schema Examples in Pydantic Models (v1)
DESCRIPTION: Declares examples for a Pydantic model using the `Config` inner class and `schema_extra` to add to the generated JSON schema. This allows including examples in the API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/schema-extra-example.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None

    class Config:
        schema_extra = {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 50.2,
                    "tax": 3.2,
                }
            ]
        }
```

----------------------------------------

TITLE: Defining Union Response Model in FastAPI
DESCRIPTION: This example demonstrates how to use `typing.Union` to define a response model that can be either a `PlaneItem` or a `CarItem`. The more specific type should be listed first in the Union.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/extra-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


class PlaneItem(Item):
    size: int


class CarItem(Item):
    doors: int


@app.post("/items/", response_model=Union[PlaneItem, CarItem])
async def create_item(item: Union[PlaneItem, CarItem]):
    return item
```

----------------------------------------

TITLE: Setting Status Code in FastAPI Path Operation - Python
DESCRIPTION: This snippet demonstrates how to specify the HTTP status code that a path operation should return upon success. You can use the `status_code` parameter in the path operation decorator, providing an integer code or a symbolic constant from `fastapi.status`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()


@app.post("/items/", status_code=status.HTTP_201_CREATED)
async def create_item(name: str):
    return {"name": name}

```

----------------------------------------

TITLE: Using Union Types in FastAPI Response Models
DESCRIPTION: Demonstrates how to create a response model that can return one of multiple model types using Python's Union type, which is mapped to OpenAPI's anyOf specification.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class BaseItem(BaseModel):
    description: str
    type: str


class CarItem(BaseItem):
    type = "car"


class PlaneItem(BaseItem):
    type = "plane"
    size: int


items = {
    "item1": {"description": "All my friends drive a low rider", "type": "car"},
    "item2": {
        "description": "Music is my aeroplane, it's my aeroplane",
        "type": "plane",
        "size": 5,
    },
}


app = FastAPI()


@app.get("/items/{item_id}", response_model=Union[PlaneItem, CarItem])
async def read_item(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Defining Cookie Parameters with Validation
DESCRIPTION: Configure cookie parameters with default values and optional validation rules similar to Query and Path parameters
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/cookie-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def read_items(cookie_param: str = Cookie(default=None))
```

----------------------------------------

TITLE: Sample OpenAPI JSON Schema
DESCRIPTION: This JSON snippet demonstrates the structure of the OpenAPI schema generated by FastAPI for the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/items/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {



...
```

----------------------------------------

TITLE: Using StreamingResponse with File-like Objects in FastAPI
DESCRIPTION: Demonstrates how to stream file-like objects as HTTP responses in FastAPI, which is useful for serving files from disk or from external services.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import io

app = FastAPI()


@app.get("/")
def main():
    fake_file = io.StringIO("""
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """)
    return StreamingResponse(fake_file, media_type="text/html")
```

----------------------------------------

TITLE: Docker Build Command
DESCRIPTION: Terminal command for building a Docker image for a FastAPI application
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
docker build -t myimage .
```

----------------------------------------

TITLE: Defining a nested model with Pydantic
DESCRIPTION: This snippet shows how to define a Pydantic model named `Image` with `url` and `name` fields of type `str`. This demonstrates how to create a custom data structure that can be validated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
    "url: str
    name: str"
```

----------------------------------------

TITLE: Yielding Database Session
DESCRIPTION: Yields the database session to be used in path operations or other dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Importing APIRouter from FastAPI in Python
DESCRIPTION: Shows how to import the APIRouter class directly from the fastapi package. APIRouter is a core component used to organize routes in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/apirouter.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import APIRouter
```

----------------------------------------

TITLE: Using Response Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare a Response parameter in a FastAPI path operation function to manage headers in a response object. The headers set in the temporal response object will be included in the final response returned by the API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-headers.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int, response: Response):
    response.headers["X-Custom-Header"] = "Value"
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Custom OpenAPI Schema without Pydantic in FastAPI
DESCRIPTION: This snippet illustrates how to define a custom OpenAPI schema for a path operation without relying on Pydantic for request parsing. It reads raw request data as bytes used for a specific schema definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
path_operation_function(openapi_extra={"requestBody": {"content": {"application/x-yaml": {"schema": {"type": "object"}}}}})
```

----------------------------------------

TITLE: Adding Examples to Pydantic Field
DESCRIPTION: Illustrates how to add `examples` directly to individual fields within a Pydantic model using the `Field()` function's additional arguments. These examples are included in the JSON Schema for the specific field.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/schema-extra-example.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: str = Field(examples=["Foo"])
    description: str | None = Field(default=None, examples=["A very nice Item"])
    price: float = Field(examples=[35.4])
    tax: float | None = Field(default=None, examples=[3.2])

app = FastAPI()

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Using Pydantic Model for Data Validation in Python
DESCRIPTION: This code snippet illustrates how to use a Pydantic model to define and validate data structures in Python. It demonstrates creating instances of the User model with both direct keyword arguments and by unpacking a dictionary, showcasing data validation and type conversion capabilities.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Defining Optional Parameters in Python 3.10+
DESCRIPTION: Example of defining a function with an optional parameter in Python 3.10+, using the | syntax for union types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def say_hi(name: str | None):
    print(f"Hey {name}!")
```

----------------------------------------

TITLE: Query Parameter Validation with Regex Pattern
DESCRIPTION: Shows how to validate query parameters using regular expression constraints
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query(regex="^fixedquery$")] = None
```

----------------------------------------

TITLE: Installing python-multipart for Form Handling in Python
DESCRIPTION: This snippet shows how to install the python-multipart package, which is required for handling form data in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Adding Metadata for Tags in FastAPI - Python
DESCRIPTION: Shows how to add metadata for tags used to group path operations in a FastAPI application.  This includes name, description (with Markdown support), and external documentation links.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/metadata.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    openapi_tags=[
        {
            "name": "users",
            "description": "Operations with users. **login** required!",
        },
        {
            "name": "items",
            "description": "Manage items. _fancy_ items.",
            "externalDocs": {
                "description": "Items external docs description",
                "url": "https://example.com/",
            },
        },
    ]
)


@app.get("/users", tags=["users"])
async def read_users():
    return [{"username": "johndoe"}]


@app.get("/items", tags=["items"])
async def read_items():
    return [{"name": "Foo", "price": 50.2}]
```

----------------------------------------

TITLE: Numeric Validation: Greater Than or Equal in FastAPI
DESCRIPTION: This snippet illustrates how to use numeric validation with `Path`. Specifically, it uses `ge=1` to ensure that the `item_id` path parameter is an integer greater than or equal to 1.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_items(\n    item_id: int = Path(title="The ID of the item to get", ge=1), q: str | None = None\n):\n    return {"item_id": item_id, "q": q}"
```

----------------------------------------

TITLE: Declaring Header Parameters in FastAPI
DESCRIPTION: This example demonstrates how to declare a header parameter using the Header class. It includes defining a default value and can include additional validation or annotation parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def read_items(user_agent: Annotated[str | None, Header()] = None):
```

----------------------------------------

TITLE: FastAPI Asynchronous Endpoint Implementation
DESCRIPTION: Demonstrates how to create a FastAPI endpoint that uses async/await to handle asynchronous operations. The function asynchronously retrieves burger data and returns it to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Using SecurityScopes in Dependency Function in Python
DESCRIPTION: This code demonstrates how to use the SecurityScopes class in a dependency function. It shows how to access the required scopes and create a custom HTTPException for scope-related errors.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi.security import SecurityScopes

# ...

async def get_current_user(security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)):
    if security_scopes.scopes:
        authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
    else:
        authenticate_value = "Bearer"
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": authenticate_value},
    )
```

----------------------------------------

TITLE: Generating OpenAPI Schema
DESCRIPTION: This snippet uses the `get_openapi` utility function from FastAPI to generate the OpenAPI schema.  It's called within `custom_openapi` and is used to create the initial OpenAPI schema with the application's routes, title, and version.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/extending-openapi.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"from fastapi.openapi.utils import get_openapi\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=app.title,\n        version=app.version,\n        openapi_version=app.openapi_version,\n        description=app.description,\n        routes=app.routes,\n    )\n    return openapi_schema"
```

----------------------------------------

TITLE: Sobrescribiendo el manejador de excepciones de validación
DESCRIPTION: Implementación de un manejador personalizado para errores de validación de requests, sobrescribiendo el comportamiento predeterminado de FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException, Request\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\n\napp = FastAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)
```

----------------------------------------

TITLE: Customizing OpenAPI URL
DESCRIPTION: Shows how to customize the OpenAPI JSON schema URL endpoint in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
app = FastAPI(openapi_url="/api/v1/openapi.json")
```

----------------------------------------

TITLE: Pydantic Model Definition
DESCRIPTION: This example demonstrates a simple Pydantic model.  Pydantic models are classes that define the structure and types of data. When an instance of the class is created with data, Pydantic validates and converts the data to the declared types, providing data validation and type safety.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
"""from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
""
```

----------------------------------------

TITLE: Returning a List of Models in FastAPI
DESCRIPTION: Shows how to declare a response that contains a list of Pydantic model objects using standard Python typing annotations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: str


items = [
    {"name": "Foo", "description": "There comes my hero"},
    {"name": "Red", "description": "It's my aeroplane"},
]


@app.get("/items/", response_model=list[Item])
async def read_items():
    return items
```

----------------------------------------

TITLE: Async Route with Async Call
DESCRIPTION: Complete example showing an async route handler that makes an async call to get data
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/async.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Awaiting and Sending Messages in WebSocket Route
DESCRIPTION: This snippet shows how to await messages from a WebSocket connection and send messages back to the client. It demonstrates the basic structure for handling WebSocket communication within a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/websockets.md#_snippet_1

LANGUAGE: Python
CODE:
```
await websocket.accept()
while True:
    data = await websocket.receive_text()
    await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: Setting a Default Response Class Globally in FastAPI
DESCRIPTION: Example showing how to set a default response class for the entire FastAPI application by using the default_response_class parameter. This changes the default from JSONResponse to ORJSONResponse.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI(default_response_class=ORJSONResponse)


@app.get("/items/")
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Using Pydantic Model as Response Model (FastAPI, Python)
DESCRIPTION: Shows how to use the `Item` Pydantic model as the response model for a GET endpoint `/items/{item_id}`. When used as output, the `description` field is considered required in the OpenAPI schema because it will always have a value (either provided or the default `None`), even if that value is `None` (or `null` in JSON).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/separate-openapi-schemas.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    return {"id": item_id, "name": "Foo", "price": 50.2}
```

----------------------------------------

TITLE: Testing Configuration Dependency Override
DESCRIPTION: This test code demonstrates how to override the `get_settings` dependency in FastAPI during testing. It defines a new `Settings` object with a modified `admin_email`, overrides the dependency, sends a test request, and asserts that the response contains the overridden value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from .main import app, get_settings


def test_settings_override():
    def override_settings():
        return Settings(admin_email="testing@example.com")

    app.dependency_overrides[get_settings] = override_settings

    client = TestClient(app)
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {
        "app_name": "Awesome API",
        "admin_email": "testing@example.com",
    }

    app.dependency_overrides = {}
```

----------------------------------------

TITLE: Defining a List Field in a Pydantic Model in Python 3.10+
DESCRIPTION: Declaration of a Pydantic model field as a Python list without specifying element types, allowing any type of elements in the list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
tags: list
```

----------------------------------------

TITLE: Configuring an APIRouter with prefix, tags, responses, and dependencies
DESCRIPTION: Demonstrates how to configure an APIRouter with prefix, tags, responses and dependencies to avoid code duplication across path operations within the same module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/bigger-applications.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException

from ..dependencies import get_token_header

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)


fake_items_db = {"plumbus": {"name": "Plumbus"}, "gun": {"name": "Portal Gun"}}


@router.get("/")
async def read_items():
    return fake_items_db


@router.get("/{item_id}")
async def read_item(item_id: str):
    if item_id not in fake_items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"name": fake_items_db[item_id]["name"], "item_id": item_id}


@router.put(
    "/{item_id}",
    tags=["custom"],
    responses={403: {"description": "Operation forbidden"}},
)
async def update_item(item_id: str):
    if item_id != "plumbus":
        raise HTTPException(
            status_code=403, detail="You can only update the item: plumbus"
        )
    return {"item_id": item_id, "name": "The great Plumbus"}
```

----------------------------------------

TITLE: Defining Multiple Body Parameters in FastAPI (Python)
DESCRIPTION: Shows how to define multiple body parameters ('item' and 'user') in a FastAPI route function, along with a query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(gt=0),
):
```

----------------------------------------

TITLE: Demonstrating Python Type Declarations with FastAPI
DESCRIPTION: Example showing how to use Python type hints with FastAPI, including a basic function with type annotation and a Pydantic model definition for data validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/features.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: FastAPI App with Params and Headers (Python)
DESCRIPTION: Defines a more complex FastAPI application with multiple endpoints, including a GET endpoint accepting path/query parameters and a POST endpoint accepting a request body and header validation. This application serves as the target for more comprehensive testing examples, demonstrating common API patterns. Requires `FastAPI` and `HTTPException`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Header, HTTPException

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int, q: str | None = None, x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")
    return {"item_id": item_id, "q": q}

@app.post("/items/")
async def create_item(item: dict, x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")
    return item
```

----------------------------------------

TITLE: Docker CMD with TLS Proxy Headers
DESCRIPTION: Configuration for running FastAPI behind a TLS termination proxy with proper header handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_6

LANGUAGE: dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--proxy-headers", "--port", "80"]
```

----------------------------------------

TITLE: Combining Path, Query, and Request Body Parameters
DESCRIPTION: Shows how to handle path parameters, query parameters, and request body data in a single endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item, q: str | None = None):
```

----------------------------------------

TITLE: Adding a Background Task in FastAPI Path Operation Function
DESCRIPTION: This snippet shows how to add a background task to the BackgroundTasks object within a path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
background_tasks.add_task(write_notification, email, message="some notification")
```

----------------------------------------

TITLE: Returning HTMLResponse directly in FastAPI
DESCRIPTION: This example demonstrates how to return an `HTMLResponse` object directly from a FastAPI endpoint. Instead of relying on the `response_class` parameter, the function creates and returns an `HTMLResponse` instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    html_content = f"""
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>{item_id}</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)  # HL

```

----------------------------------------

TITLE: Initializing a Basic FastAPI Application in Python
DESCRIPTION: This snippet shows how to create a simple FastAPI application with a single GET endpoint that returns a JSON response. It imports FastAPI, creates an app instance, and defines a root path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Using Union for Multiple Response Types in FastAPI
DESCRIPTION: This code demonstrates how to use `typing.Union` to define a response model that can be one of several types. In this example, the response can be either a `PlaneItem` or a `CarItem`. The `Union` type hint indicates that the response can be any of the specified types, which is represented as `anyOf` in OpenAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str


class PlaneItem(Item):
    size: int
    wings: bool


class CarItem(Item):
    doors: int
    wheels: int


@app.post("/items", response_model=Union[PlaneItem, CarItem])
async def create_item(item: Union[PlaneItem, CarItem]):
    return item
```

----------------------------------------

TITLE: Handling Missing Token and Returning Scopes in Header - Python
DESCRIPTION: This snippet from the dependency function shows how to handle a missing authentication token. It raises an `HTTPException` with a 401 status code and includes the required scopes in the `WWW-Authenticate` header as a comma-separated string using `security_scopes.scope_str`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_5

LANGUAGE: Python
CODE:
```
    if token is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Not authenticated",
            headers={
                "WWW-Authenticate": f"Bearer scope=\"{security_scopes.scope_str}\""
            },
        )
```

----------------------------------------

TITLE: Error Response for Forbidden Extra Fields
DESCRIPTION: This JSON response example is returned when a client submits form data with fields not allowed by the Pydantic model configuration. It contains details about the forbidden extra field.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-form-models.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "detail": [
        {
            "type": "extra_forbidden",
            "loc": ["body", "extra"],
            "msg": "Extra inputs are not permitted",
            "input": "Mr. Poopybutthole"
        }
    ]
}
```

----------------------------------------

TITLE: Deeply Nested Complex Model
DESCRIPTION: Shows creating a complex nested model with multiple levels of relationships
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    image: Optional[Image] = None

class Offer(BaseModel):
    name: str
    items: List[Item]
```

----------------------------------------

TITLE: Accessing Dependency Values in Cleanup
DESCRIPTION: Shows how a dependency can access the value yielded by another dependency in its cleanup code, ensuring that necessary data is available for cleanup operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def dependency_b(dep_a=Depends(dependency_a)):
    dep_b = generate_dep_b()
    try:
        yield dep_b
    finally:
        await perform_cleanup_dep_b(dep_b, dep_a)
```

----------------------------------------

TITLE: Pinning FastAPI Minor Version in requirements.txt
DESCRIPTION: Shows how to pin FastAPI to a specific minor version range, allowing patch updates for bug fixes while preventing potentially breaking changes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/versions.md#2025-04-21_snippet_2

LANGUAGE: txt
CODE:
```
fastapi>=0.45.0,<0.46.0
```

----------------------------------------

TITLE: Create SQLModel Session Dependency
DESCRIPTION: Define a FastAPI dependency using `yield` to provide a new database session for each request. This ensures proper session management and isolation. An `Annotated` alias simplifies its usage in route functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Annotated
from fastapi import Depends
from sqlmodel import Session

def get_session():
    with Session(engine) as session:
        yield session

SessionDep = Annotated[Session, Depends(get_session)]
```

----------------------------------------

TITLE: FastAPI App Definition
DESCRIPTION: This snippet demonstrates a basic FastAPI application with path operations that define models for request and response payloads. It uses `Item` and `ResponseMessage` models to structure the data, allowing automatic generation of API documentation and client code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"""\nExternal Data Validation and Management.\n"""

from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


class ResponseMessage(BaseModel):
    message: str


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}", response_model=ResponseMessage)
async def update_item(item_id: int, item: Item):
    return {"message": f"Item {item_id} updated"}

```

----------------------------------------

TITLE: Password Verification in FastAPI OAuth2 Implementation
DESCRIPTION: This snippet shows the password verification process in the OAuth2 implementation. It uses a fake password hashing system and compares the hashed password with the one stored in the database.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
user = UserInDB(**user_dict)
if not fake_verify_password(form_data.password, user.hashed_password):
    raise HTTPException(
        status_code=status.HTTP_400_BAD_REQUEST,
        detail="Incorrect username or password"
    )
```

----------------------------------------

TITLE: Setting Default Values for Query Parameters in FastAPI (Python 3.9+)
DESCRIPTION: This snippet demonstrates how to set a default value for a query parameter while also applying validations using Annotated and Query in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str, Query(min_length=3)] = "fixedquery"):
    results = {"items": [{ "item_id": "Foo" }, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Defining a Callable Class Instance in FastAPI
DESCRIPTION: This snippet demonstrates how to define a class with a __call__ method, which allows an instance of the class to be callable. This is utilized by FastAPI to handle additional parameters for dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
class FixedContentQueryChecker:
    def __init__(self, fixed_content: str):
        self.fixed_content = fixed_content

    def __call__(self, q: str):
        return self.fixed_content in q
```

----------------------------------------

TITLE: Input Model Configuration in FastAPI Endpoint
DESCRIPTION: Demonstrates using the Pydantic model as an input parameter in a FastAPI route, showing how optional fields are handled
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.post("/items/")
def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Embedding Item in Request Body - Python
DESCRIPTION: This example demonstrates how to use the `embed` parameter of the `Body` function to specify that the `Item` model should be embedded within a JSON body with the key 'item'. This is useful when you want FastAPI to expect a JSON structure where the model's data is nested under a specific key.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body-multiple-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
item: Item = Body(embed=True)
```

----------------------------------------

TITLE: Handling Multiple Body Parameters in FastAPI
DESCRIPTION: Demonstrates how FastAPI automatically handles multiple Pydantic model parameters in a path operation by expecting a JSON body where each model is nested under a key corresponding to the parameter name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-multiple-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.post("/items/{item_id}")
async def create_item(item_id: int, item: Item, user: User):
    return {"item_id": item_id, "item": item, "user": user}
```

----------------------------------------

TITLE: Python Dict Type Hints with Typing Module
DESCRIPTION: This example demonstrates how to use the `Dict` type from the `typing` module to declare a dictionary with specific key and value types. The example uses `str` for keys and `float` for values, indicating that the dictionary maps string names to float prices.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
"from typing import Dict

def process_items(prices: Dict[str, float]):
    for item_name, price in prices.items():
        print(item_name, price)"
```

----------------------------------------

TITLE: Example PATH variable after activating (Linux, macOS)
DESCRIPTION: This shows an example of the PATH variable after activating a virtual environment on Linux/macOS. The environment's bin directory is prepended, ensuring its executables are found first.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_25

LANGUAGE: plaintext
CODE:
```
/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin
```

----------------------------------------

TITLE: Disabling Dependency Caching in FastAPI (Python)
DESCRIPTION: This function demonstrates how to explicitly disable caching for a dependency when using `Depends`. By setting `use_cache=False`, the specified dependency (`get_value` in this example) will be called every time the dependent function (`needy_dependency`) is executed, rather than using a cached result.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/sub-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):
    return {"fresh_value": fresh_value}
```

----------------------------------------

TITLE: Reading Environment Variables in Python
DESCRIPTION: This snippet shows how to read environment variables in Python using the `os.getenv()` function. It also demonstrates how to provide a default value if the environment variable is not set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/environment-variables.md#_snippet_2

LANGUAGE: Python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Copy Application Code in Dockerfile
DESCRIPTION: This command copies the application code from the `./app` directory to the `/code/app` directory within the Docker image. This step is placed towards the end of the Dockerfile to leverage Docker's caching mechanism, as application code changes more frequently.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_7

LANGUAGE: Dockerfile
CODE:
```
COPY ./app /code/app
```

----------------------------------------

TITLE: Leyendo un Héroe Específico con FastAPI y SQLModel en Python
DESCRIPTION: Implementa un endpoint GET para leer un héroe específico por su ID, devolviendo un HeroPublic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.get("/heroes/{hero_id}", response_model=HeroPublic)
def read_hero(hero_id: int):
    with Session(engine) as session:
        hero = session.get(Hero, hero_id)
        if not hero:
            raise HTTPException(status_code=404, detail="Hero not found")
        return hero
```

----------------------------------------

TITLE: Adding a Background Task in FastAPI Path Operation Function
DESCRIPTION: This snippet demonstrates how to add a background task within a path operation function using the .add_task() method.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
background_tasks.add_task(write_notification, email, message="some notification")
```

----------------------------------------

TITLE: Creating Pydantic Data Model
DESCRIPTION: Defines a Pydantic model class for validating request body data with optional and required fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Async Context Manager for FastAPI Lifespan
DESCRIPTION: This code snippet demonstrates how to define an async context manager using `@asynccontextmanager` for use with FastAPI's `lifespan` parameter. The code before the `yield` is executed during application startup, and the code after `yield` during shutdown.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Load the ML model\n    models = {}\n    models["model1"] = load_model()\n    yield\n    # Clean up the ML models\n    models.clear()"
```

----------------------------------------

TITLE: Context Manager with Yield Dependencies
DESCRIPTION: Example of using context managers within yield dependencies
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
class MySuperContextManager:
    def __init__(self):
        self.db = DBSession()

    def __enter__(self):
        return self.db

    def __exit__(self, exc_type, exc_value, traceback):
        self.db.close()

async def get_db():
    with MySuperContextManager() as db:
        yield db
```

----------------------------------------

TITLE: Defining File Parameters with UploadFile in FastAPI
DESCRIPTION: This snippet demonstrates how to define a file parameter using the `UploadFile` type in FastAPI. `UploadFile` provides several advantages over using `bytes`, such as buffered file handling and access to file metadata.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-files.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, UploadFile

app = FastAPI()


@app.post("/uploadfiles/")
async def create_upload_file(file: UploadFile):
    return {"filename": file.filename}
```

----------------------------------------

TITLE: Include Custom Documentation for Static Files
DESCRIPTION: Creates route operations for serving custom Swagger UI and ReDoc documentation from static files. It reuses FastAPI's internal functions to generate the HTML pages for the documentation, passing the necessary arguments such as the OpenAPI schema URL, API title, and URLs for the Swagger UI and ReDoc JavaScript and CSS files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-docs-ui-assets.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse

app = FastAPI(title="Custom Docs UI")

app.mount("/static", StaticFiles(directory="./static"), name="static")

@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + " - Swagger UI",
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url="/static/swagger-ui-bundle.js",
        swagger_css_url="/static/swagger-ui.css",
    )


@app.get("/redoc", include_in_schema=False)
async def custom_redoc_html():
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=app.title + " - ReDoc",
        redoc_js_url="/static/redoc.standalone.js",
    )

@app.get("/swagger_ui_redirect", include_in_schema=False)
async def swagger_ui_redirect():
    return HTMLResponse(
        ""\
        <html>\n"\
        <head>\n"\
        <meta http-equiv=\"refresh\" content=\"0; url=/docs\" />\n"\
        </head>\n"\
        </html>\n"""
    )

```

----------------------------------------

TITLE: FileResponse with response_class parameter in FastAPI
DESCRIPTION: Demonstrates how to use the `response_class` parameter with `FileResponse` in FastAPI. This allows returning the file path directly from the route operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_13

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()


@app.get("/files/{path:path}", response_class=FileResponse)
async def read_file(path: str):
    return path
```

----------------------------------------

TITLE: Running Docker Container
DESCRIPTION: This command runs a Docker container based on the image named `myimage`. The `-d` flag runs the container in detached mode (in the background). The `--name mycontêiner` option assigns the name `mycontêiner` to the container.  The `-p 80:80` option maps port 80 on the host to port 80 in the container, allowing access to the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
"docker run -d --name mycontêiner -p 80:80 myimage"
```

----------------------------------------

TITLE: Shortcut for Class Dependencies in FastAPI
DESCRIPTION: Shows a shortcut syntax for declaring class dependencies in FastAPI, reducing code repetition by omitting the class name in the Depends() function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[CommonQueryParams, Depends()]):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = fake_items_db[commons.skip : commons.skip + commons.limit]
    response.update({"items": items})
    return response
```

----------------------------------------

TITLE: Using RedirectResponse in FastAPI
DESCRIPTION: This code snippet demonstrates how to return an HTTP redirect using `RedirectResponse`. It imports the `RedirectResponse` class and uses it to redirect the client to another URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/typer")
async def redirect_to_typer():
    return RedirectResponse("https://typer.tiangolo.com")
```

----------------------------------------

TITLE: Setting Cookies with Response Parameter in FastAPI
DESCRIPTION: Demonstrates how to set cookies by declaring a Response parameter in a path operation function. This allows adding cookies to a temporary response object before returning the main response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/response-cookies.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
# Path operation function with Response parameter
def set_cookie_with_response(response: Response):
    response.set_cookie(key="cookie_name", value="cookie_value")
    return {"message": "Cookie set successfully"}
```

----------------------------------------

TITLE: Verifying Credentials in HTTP Basic Authentication
DESCRIPTION: This snippet demonstrates how to securely verify username and password in HTTP Basic Authentication using the secrets module. It includes protection against timing attacks.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
import secrets
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

security = HTTPBasic()


@app.get("/users/me")
def read_current_user(credentials: HTTPBasicCredentials = Depends(security)):
    current_username_bytes = credentials.username.encode("utf8")
    correct_username_bytes = b"stanleyjobson"
    is_correct_username = secrets.compare_digest(
        current_username_bytes, correct_username_bytes
    )
    current_password_bytes = credentials.password.encode("utf8")
    correct_password_bytes = b"swordfish"
    is_correct_password = secrets.compare_digest(
        current_password_bytes, correct_password_bytes
    )
    if not (is_correct_username and is_correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Basic"},
        )
    return {"username": credentials.username, "password": credentials.password}
```

----------------------------------------

TITLE: Customizing Response Status Code with FastAPI
DESCRIPTION: This code snippet shows how to use the Response parameter in a FastAPI route to customize the status code. It demonstrates returning either a 200 OK or 201 Created status based on whether the item already exists.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-change-status-code.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.post("/items/")
def create_item(item: Item, response: Response):
    if item.id in stored_items:
        response.status_code = 200
        return {"message": "Item already exists"}
    else:
        response.status_code = 201
        return {"message": "Item created successfully"}
```

----------------------------------------

TITLE: Defining a Basic FastAPI App
DESCRIPTION: This code snippet defines a minimal FastAPI application with a single endpoint that returns a JSON response. It imports FastAPI, creates an app instance, and defines a root path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Return HTTP Error on Incorrect Credentials
DESCRIPTION: This snippet shows how to return an HTTPException with a 401 status code and the WWW-Authenticate header when the provided credentials are incorrect. This prompts the browser to display the login prompt again, ensuring that the user is re-authenticated if their initial credentials were invalid.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=\"Incorrect email or password\",
            headers={\"WWW-Authenticate\": \"Basic\"},
        )"
```

----------------------------------------

TITLE: Integrating Strawberry GraphQL with FastAPI
DESCRIPTION: This code example demonstrates how to integrate Strawberry GraphQL with FastAPI by creating a GraphQL schema with a Query type that has a hello resolver, and then mounting the GraphQL ASGI app to the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/graphql.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import strawberry
from fastapi import FastAPI
from strawberry.asgi import GraphQL


@strawberry.type
class Query:
    @strawberry.field
    def hello(self) -> str:
        return "Hello World"


schema = strawberry.Schema(Query)


app = FastAPI()

# Crear una API GraphQL usando Strawberry
graphql_app = GraphQL(schema)

# Agregar la API de GraphQL como una subAPIication
app.add_route("/graphql", graphql_app)
app.add_websocket_route("/graphql", graphql_app)
```

----------------------------------------

TITLE: Using Dependencies in WebSocket Endpoints
DESCRIPTION: This snippet illustrates how to use dependencies, including `Depends`, `Security`, `Cookie`, `Header`, `Path`, and `Query`, within WebSocket endpoints in FastAPI. It shows how to inject dependencies into the WebSocket route to handle authentication, authorization, and data validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/websockets.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.websocket("/items/{item_id}")
async def websocket_endpoint(
    *, websocket: WebSocket, item_id: int, q: str | None = None, cookie: str | None = Cookie(None)
):
    await websocket.accept()
    try:
        while True:
            data = await websocket.receive_text()
            await websocket.send_text(
                f"Session cookie or query value was: {cookie}, {q}, and you said: {data}, item_id: {item_id}"
            )
    except WebSocketDisconnect:
        print("Client disconnected")
```

----------------------------------------

TITLE: Setting Cookies Using Direct Response Object in FastAPI
DESCRIPTION: This example demonstrates how to create a Response object directly, set cookies on it, and return it from a FastAPI path operation function. This method allows more control over the response but requires manual handling of data serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-cookies.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/cookie/")
def create_cookie():
    content = {"message": "Come to the dark side, we have cookies"}
    response = JSONResponse(content=content)
    response.set_cookie(key="fakesession", value="fake-cookie-session-value")
    return response
```

----------------------------------------

TITLE: Using FileResponse in FastAPI
DESCRIPTION: Shows how to use FileResponse to return a file in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()

some_file_path = "large-video-file.mp4"

@app.get("/")
async def main():
    return FileResponse(some_file_path)
```

----------------------------------------

TITLE: Python Context Manager Example
DESCRIPTION: This demonstrates using a Python context manager to handle file operations. The `with` statement ensures that the file is automatically closed, even if exceptions occur. `open('./somefile.txt')` returns an object that implements the context manager protocol (__enter__ and __exit__ methods)
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"with open("./somefile.txt") as f:\n    contents = f.read()\n    print(contents)"
```

----------------------------------------

TITLE: Response Model Include/Exclude Fields
DESCRIPTION: Shows how to include or exclude specific fields from the response using response_model_include and response_model_exclude parameters
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@app.get("/items/{item_id}", response_model=Item, response_model_include={"name", "description"})
def read_item(item_id: str):
    return item_from_database
```

----------------------------------------

TITLE: Using BackgroundTasks with Dependency Injection in FastAPI
DESCRIPTION: This example demonstrates how to use BackgroundTasks with FastAPI's dependency injection system at multiple levels, including path operation functions and dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/background-tasks.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import BackgroundTasks, Depends, FastAPI

app = FastAPI()


def write_log(message: str):
    with open("log.txt", mode="a") as log:
        log.write(message)


def get_query(background_tasks: BackgroundTasks, q: str | None = None):
    if q:
        message = f"found query: {q}\n"
        background_tasks.add_task(write_log, message)
    return q


@app.post("/send-notification/{email}")
def send_notification(
    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)
):
    message = f"message to {email}\n"
    background_tasks.add_task(write_log, message)
    return {"message": "Message sent"}
```

----------------------------------------

TITLE: Criar uma função de tarefa para BackgroundTasks
DESCRIPTION: Este snippet mostra como criar uma função para ser executada como uma tarefa em segundo plano. A função grava em um arquivo, simulando o envio de um e-mail. A função pode ser async def ou def.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/background-tasks.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


def write_notification(email: str, message=""):
    with open("log.txt", mode="w") as f:
        f.write(f"notification for {email}: {message}")
```

----------------------------------------

TITLE: Adding JSON Schema Examples to Pydantic v2 Model
DESCRIPTION: Demonstrates how to add `examples` to the generated JSON schema for a Pydantic v2 model. This is done using the `model_config` attribute with the `json_schema_extra` key, providing a dictionary containing the `examples` list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/schema-extra-example.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel, ConfigDict

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    model_config = ConfigDict(
        json_schema_extra={
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            ]
        }
    )
```

----------------------------------------

TITLE: Setting a default response class in FastAPI
DESCRIPTION: Shows how to specify a default response class for all path operations in a FastAPI application by using the default_response_class parameter when creating the FastAPI instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI(default_response_class=ORJSONResponse)


@app.get("/")
def main():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Output Model Configuration in FastAPI Endpoint
DESCRIPTION: Shows how the same Pydantic model is used as a return type in a FastAPI route, with different schema generation behavior
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.post("/items/", response_model=Item)
def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Importing and Using BackgroundTasks in FastAPI
DESCRIPTION: This code snippet demonstrates how to import BackgroundTasks and define it as a parameter in a path operation function. FastAPI will automatically create and pass the BackgroundTasks object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/background-tasks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import BackgroundTasks, FastAPI

app = FastAPI()


@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
    return {"message": "Notification sent in the background"}
```

----------------------------------------

TITLE: Adding Dependencies to Path Operation Decorator
DESCRIPTION: Example showing how to add dependencies to a FastAPI path operation decorator using the dependencies parameter. Demonstrates dependency validation with custom headers X-Key and X-Token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
async def get_items(
    *,
    dependencies=[
        Depends(verify_token),
        Depends(verify_key)
    ]
):
    return [{"item": "Foo"}, {"item": "Bar"}]
```

----------------------------------------

TITLE: Importing File and Form in FastAPI
DESCRIPTION: This snippet shows how to import the File and Form components from FastAPI, which are necessary for handling file uploads and form data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import File, Form
```

----------------------------------------

TITLE: Importing TrustedHostMiddleware in FastAPI
DESCRIPTION: Shows how to import the trusted host middleware from FastAPI. This middleware ensures requests are only served from trusted hosts defined in your application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi.middleware.trustedhost import TrustedHostMiddleware
```

----------------------------------------

TITLE: Optional Query Parameter in FastAPI
DESCRIPTION: This snippet shows how to define an optional query parameter in FastAPI using `Union[str, None]` with Python 3.10 syntax.  The `q` parameter is optional and defaults to `None` if not provided in the request. FastAPI handles the type hinting and makes the parameter optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"""\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get("/items/")\nasync def read_items(q: Union[str, None] = None):\n    return {"q": q}\n"""
```

----------------------------------------

TITLE: Pydantic Model Example - Python
DESCRIPTION: Provides an example of defining a data model using Pydantic, demonstrating how to declare fields with types and create an instance which performs data validation and conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_9

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name = 'John Doe'
    signup_ts: datetime | None = None
    friends: list[int] = []

external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, 2, '3'],
}

user = User(**external_data)

print(user.id)
print(user.friends)
```

----------------------------------------

TITLE: Using Class Dependency with Any Type and Depends
DESCRIPTION: Example showing how to use a class dependency with Any type annotation, relying on Depends for the actual type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = fake_items_db[commons.skip : commons.skip + commons.limit]
    response.update({"items": items})
    return response
```

----------------------------------------

TITLE: Definiendo un manejador de excepciones personalizado
DESCRIPTION: Implementación de un manejador personalizado para una excepción propia (UnicornException) utilizando el decorador @app.exception_handler().
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
class UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\n@app.exception_handler(UnicornException)\ndef unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},\n    )
```

----------------------------------------

TITLE: Returning Direct HTML Response in FastAPI
DESCRIPTION: Demonstrates how to return an HTML response directly from a FastAPI route function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

def generate_html_response():
    html_content = """
    <html>
        <body>
            <h1>Hello World</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)

@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return generate_html_response()
```

----------------------------------------

TITLE: Extended FastAPI App (Python 3.8+ non-Annotated)
DESCRIPTION: This is an extended FastAPI application example with multiple route operations, including GET and POST requests, error handling, and header requirements. It uses Python 3.8+ syntax without Annotated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/testing.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import Depends, FastAPI, Header, HTTPException
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


async def verify_token(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")


async def verify_key(x_key: str = Header()):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="Invalid X-Key header")
    return x_key


@app.get("/items/")
async def read_items(commons: str = Depends(verify_key)):
    return {"message": "Items"}


@app.post("/items/")
async def create_item(
    item: Item,
    commons: str = Depends(verify_key),
    x_token: str = Header(),
):
    return item
```

----------------------------------------

TITLE: Defining FastAPI Path Operation with Extra Data Types
DESCRIPTION: This snippet demonstrates how to use various data types like UUID, datetime, date, and time in a FastAPI path operation. It also shows how to perform date manipulations within the function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-data-types.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from datetime import datetime, time, timedelta
from uuid import UUID

from fastapi import FastAPI

app = FastAPI()


@app.put("/items/{item_id}")
async def read_items(
    item_id: UUID,
    start_datetime: datetime | None = None,
    end_datetime: datetime | None = None,
    repeat_at: time | None = None,
    process_after: timedelta | None = None,
):
    start_process = start_datetime + process_after
    duration = end_datetime - start_process
    return {
        "item_id": item_id,
        "start_datetime": start_datetime,
        "end_datetime": end_datetime,
        "repeat_at": repeat_at,
        "process_after": process_after,
        "start_process": start_process,
        "duration": duration,
    }
```

----------------------------------------

TITLE: Single Values in the Request Body in FastAPI
DESCRIPTION: This snippet shows how to use the `Body` parameter to explicitly define a single value as part of the request body. It defines a path operation that accepts an `Item`, a `User`, and an `importance` value as part of the request body, using `Body` to specify that `importance` should be treated as a body parameter instead of a query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"@app.post("/items/")
async def create_item(
    item: Item,
    user: User,
    importance: int = Body(),
):
    return {"item": item, "user": user, "importance": importance}"
```

----------------------------------------

TITLE: Configuring Pydantic Settings to Use .env File
DESCRIPTION: Shows how to configure Pydantic Settings to read from a .env file for environment variables.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50

    class Config:
        env_file = ".env"
```

----------------------------------------

TITLE: Using regular def in FastAPI for synchronous operations
DESCRIPTION: This snippet shows how to define a regular (non-async) path operation function in FastAPI when working with libraries that don't support await. This is common with most database libraries that operate synchronously.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Defining Class-based Dependency in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to create a class-based dependency in FastAPI. The CommonQueryParams class defines query parameters with type hints and default values, which FastAPI uses for parameter validation and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Dependencies in requirements.txt
DESCRIPTION: This file specifies the dependencies for the FastAPI application, including FastAPI, Pydantic, and Uvicorn, with version constraints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_2

LANGUAGE: Text
CODE:
```
fastapi>=0.68.0,<0.69.0
pydantic>=1.8.0,<2.0.0
uvicorn>=0.15.0,<0.16.0
```

----------------------------------------

TITLE: Returning HTML Response
DESCRIPTION: Shows how to return an HTML response using HTMLResponse in FastAPI. This demonstrates setting the response content type and returning HTML directly from a path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

@app.get("/", response_class=HTMLResponse)
def read_root():
    return "<html><body><h1>Hello World</h1></body></html>"
```

----------------------------------------

TITLE: Using * for Required Query Parameters (Python)
DESCRIPTION: Defines a path operation using `*` before query parameters like `q`. This forces `q` to be received as a keyword argument (from the query string) and allows it to be explicitly marked as required using `Query(...)` without providing a default value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(item_id: int = Path(...),
    *, q: str = Query(...)): pass
```

----------------------------------------

TITLE: Declaring Required Scopes for Path Operations in Python
DESCRIPTION: This snippet shows how to declare required scopes for path operations using the Security class from FastAPI. It demonstrates setting different scopes for different levels of dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi.security import SecurityScopes

# ...

get_current_active_user = Security(get_current_active_user, scopes=["me"])

# ...

@app.get("/users/me/items/")
async def read_own_items(current_user: User = Security(get_current_active_user, scopes=["items"])):
```

----------------------------------------

TITLE: Customizing Documentation UI URLs
DESCRIPTION: Change the default URLs for the interactive documentation UIs (Swagger UI at `/docs` and ReDoc at `/redoc`) using the `docs_url` and `redoc_url` parameters, respectively, when initializing the FastAPI app. Setting a parameter to `None` disables that specific documentation interface.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(docs_url="/documentation", redoc_url=None)

# Example path operation
@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Including Scopes in JWT Token Response in Python
DESCRIPTION: This code snippet demonstrates how to include the requested scopes in the JWT token response. It uses the scopes property from OAuth2PasswordRequestForm and adds them to the token data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
access_token = create_access_token(data={"sub": user.username, "scopes": form_data.scopes}, expires_delta=access_token_expires)
```

----------------------------------------

TITLE: Installing a specific package version using pip
DESCRIPTION: This command installs version 3 of the 'harry' package using pip. If a different version of 'harry' is already installed, installing this version may automatically uninstall the previous one.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_18

LANGUAGE: console
CODE:
```
$ pip install "harry==3"
```

----------------------------------------

TITLE: Mixing Body Parameters and Query Parameters in FastAPI (Python)
DESCRIPTION: Demonstrates how to mix body parameters with query parameters in a FastAPI route function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(gt=0),
    q: str | None = None,
):
```

----------------------------------------

TITLE: Importing FastAPI Response Class
DESCRIPTION: Shows how to import the Response class from FastAPI. This class can be used to customize HTTP responses with headers, cookies, and other response data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/response.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Response
```

----------------------------------------

TITLE: Accept Pure Dictionary with Typed Keys/Values as Request Body
DESCRIPTION: Shows how to define a FastAPI path operation function that expects the entire request body to be a JSON object (Python dictionary) with specific types for keys (`int`) and values (`float`). Pydantic handles the conversion of JSON string keys to the specified key type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import Dict
from fastapi import FastAPI

app = FastAPI()

@app.post("/weights/")
async def create_weights(weights: Dict[int, float]):
    return weights
```

----------------------------------------

TITLE: Implementing GzipRequest Class for Decompressing Gzip-encoded Bodies in FastAPI
DESCRIPTION: This code snippet creates a custom GzipRequest class that overrides the Request.body() method to decompress the request body if an appropriate gzip header is present. This allows transparent handling of gzip-compressed request bodies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class GzipRequest(Request):
    async def body(self) -> bytes:
        if not hasattr(self, "_body"):
            body = await super().body()
            if "gzip" in self.headers.getlist("Content-Encoding"):
                body = gzip.decompress(body)
            self._body = body
        return self._body
```

----------------------------------------

TITLE: 의존성 (디펜더블) 생성하기 - Python
DESCRIPTION: 경로 작동 함수가 가질 수 있는 모든 매개변수를 갖는 단순한 함수를 의존성으로 정의합니다. 이 함수는 선택적인 쿼리 매개변수 q, skip, limit을 받아들이고, 이들을 포함하는 dict를 반환합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import Depends, FastAPI

app = FastAPI()


def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Using FileResponse with response_class in FastAPI
DESCRIPTION: Demonstrates how to use FileResponse as a response_class parameter in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()

some_file_path = "large-video-file.mp4"

@app.get("/", response_class=FileResponse)
async def main():
    return some_file_path
```

----------------------------------------

TITLE: JWT Token Generation with Scopes
DESCRIPTION: Creates a JWT token that includes the requested scopes as part of the token payload.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
access_token = create_access_token(data={"sub": user.username, "scopes": form_data.scopes})
```

----------------------------------------

TITLE: Parameter Ordering with Non-Annotated Syntax
DESCRIPTION: Shows how to handle parameter ordering when using Path without Annotated, including required query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def read_items(q: str, item_id: int = Path(..., title="The ID of the item to get")):
```

----------------------------------------

TITLE: Awaiting an Asynchronous Function Call in Python
DESCRIPTION: Demonstrates the use of the `await` keyword to pause execution until an asynchronous operation (`get_burgers`) completes and returns its result. This allows the program to perform other tasks while waiting. Requires being inside an `async def` function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Path Parameter Containing Paths in FastAPI
DESCRIPTION: This snippet demonstrates how to define a path parameter that can contain a path itself using Starlette's path convertor. The `:path` suffix in the path definition tells FastAPI to match any path for the `file_path` parameter. This allows capturing entire file paths in the parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
"""from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
    return {"file_path": file_path}""
```

----------------------------------------

TITLE: Dockerfile for FastAPI Application
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the application requirements and source code, installs dependencies, and defines the command to run the FastAPI application using Uvicorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: JSON Response Example
DESCRIPTION: This JSON snippet shows the expected response from the `/users/me/` endpoint after successful authentication. It includes user details such as username, email, full name, and disabled status.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/oauth2-jwt.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "username": "johndoe",
  "email": "johndoe@example.com",
  "full_name": "John Doe",
  "disabled": false
}
```

----------------------------------------

TITLE: Implementing a TimedRoute Class for Response Timing in FastAPI
DESCRIPTION: This code snippet defines a TimedRoute class that extends APIRoute to measure and report the time taken to process a request. It adds an X-Response-Time header to the response with the processing time in seconds.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
class TimedRoute(APIRoute):
    def get_route_handler(self) -> Callable:
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request) -> Response:
            before = time.time()
            response = await original_route_handler(request)
            duration = time.time() - before
            response.headers["X-Response-Time"] = str(duration)
            return response

        return custom_route_handler
```

----------------------------------------

TITLE: Configuring Basic FastAPI Metadata
DESCRIPTION: Example showing how to set basic metadata fields like title, summary, description, version, terms of service, contact info, and license information for a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

description = """
Chimichangas FastAPI helps you do awesome stuff. 🚀

## Items

You can **read items**.

## Users

You will be able to:

* **Create users** (_not implemented_)
* **Read users** (_not implemented_)
"""

tags_metadata = [
    {
        "name": "items",
        "description": "Operations with items. The _cool_ stuff.",
    },
]
```

----------------------------------------

TITLE: Streaming Response
DESCRIPTION: Shows how to create a streaming response using StreamingResponse. This enables sending large or dynamically generated content as a stream, which is memory efficient.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()

@app.get("/stream")
def stream_response():
    async def generate():
        for i in range(10):
            yield f"data: {i}\n\n"
    return StreamingResponse(generate(), media_type="text/event-stream")
```

----------------------------------------

TITLE: Dict with Specific Key and Value Types
DESCRIPTION: This code defines a request body as a dictionary with integer keys and float values. The `weights` parameter is annotated as `dict[int, float]`, indicating that the request body should be a JSON object where the keys are integers and the values are floats. Pydantic automatically converts string keys to integers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-nested-models.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import Dict

from pydantic import BaseModel


async def update_weights(weights: Dict[int, float]):
    return weights
```

----------------------------------------

TITLE: Using Regular Expressions for Query Parameter Validation in FastAPI (Python 3.10+)
DESCRIPTION: This snippet shows how to use a regular expression pattern to validate a query parameter in FastAPI using Annotated and Query.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(min_length=3, max_length=50, pattern="^fixedquery$")] = None):
    results = {"items": [{ "item_id": "Foo" }, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Basic Cookie Model Implementation in FastAPI
DESCRIPTION: Demonstrates using a Pydantic model to declare cookie parameters for a FastAPI endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
    Cookie(
        title="Cookie Session ID",
        description="Required cookie containing session ID",
    )
```

----------------------------------------

TITLE: Combining Path, Query, and Request Body Parameters
DESCRIPTION: Demonstrates how to use path parameters, query parameters, and request body parameters together in a single path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item, q: str | None = None):
    result = {"item_id": item_id, **item.dict()}
    if q:
        result.update({"q": q})
    return result
```

----------------------------------------

TITLE: Implementing Dependency Functions with Requirements in FastAPI
DESCRIPTION: This code snippet shows how to implement dependency functions that declare request requirements, such as headers. It demonstrates the structure of dependency functions used in FastAPI path operation decorators.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
async def verify_token(x_token: str = Header()):
    ...

async def verify_key(x_key: str = Header()):
    ...
```

----------------------------------------

TITLE: Importing File and Form in FastAPI
DESCRIPTION: Code snippet showing how to import the File and Form classes from FastAPI, which are required for handling file uploads and form data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, File, Form
```

----------------------------------------

TITLE: Admin APIRouter Definition
DESCRIPTION: Defines a simple APIRouter for admin operations. This router is intended to be shared across multiple projects, so it should not be modified directly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_16

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()


@router.post("/admin/")
async def update_admin():
    return {"message": "Admin getting schwifty"}
```

----------------------------------------

TITLE: Query Parameter with Alias
DESCRIPTION: This code demonstrates how to use the `alias` parameter in the `Query` function to specify a different name for the query parameter in the URL. This is useful when the desired query parameter name is not a valid Python variable name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(item_query: Union[str, None] = Query(default=None, alias="item-query")):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if item_query:
        results.update({"item_query": item_query})
    return results
```

----------------------------------------

TITLE: Adding Description to Query Parameters in FastAPI (Python 3.10+)
DESCRIPTION: Demonstrates how to add both a title and description to a query parameter, enhancing the API documentation with detailed explanations of the parameter's purpose and requirements.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Annotated[
        str | None,
        Query(
            title="Query string",
            description="Query string for the items to search in the database that have a good match",
            min_length=3,
        ),
    ] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Using Dependencies
DESCRIPTION: This snippet demonstrates how to use a dependency in a path operation function. It declares a single dependency, `query_or_cookie_extractor`. FastAPI automatically handles resolving the sub-dependency `query_extractor` before calling `query_or_cookie_extractor`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"@app.get("/items/")
async def read_items(query_or_cookie: str = Depends(query_or_cookie_extractor)):
    return {"q_or_cookie": query_or_cookie}"
```

----------------------------------------

TITLE: Installing a specific package version using pip
DESCRIPTION: This command installs a specific version of the 'harry' package using pip. It ensures that the project uses the required version, avoiding conflicts with other projects that may need different versions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_17

LANGUAGE: console
CODE:
```
$ pip install "harry==1"
```

----------------------------------------

TITLE: Add Single Example to FastAPI Body Parameter
DESCRIPTION: Include a single example payload for a request body parameter in a FastAPI path operation by passing the `example` argument to the `Body()` function. This example is displayed in the OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/schema-extra-example.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Body
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

app = FastAPI()

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        example={
            "name": "Foo",
            "description": "A very nice Item",
            "price": 35.4,
            "tax": 3.2,
        },
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Running a Python program
DESCRIPTION: This command executes the Python program `main.py` using the Python interpreter within the active virtual environment. It assumes that `main.py` is located in the current working directory and that the virtual environment is activated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_14

LANGUAGE: Shell
CODE:
```
```console
$ python main.py

Hello World
```
```

----------------------------------------

TITLE: Importing File and Form in FastAPI
DESCRIPTION: This code snippet demonstrates how to import the File and Form classes from FastAPI, which are used to handle file uploads and form data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import File, Form
```

----------------------------------------

TITLE: Defining a Simple Dependency in FastAPI
DESCRIPTION: Creates a simple dependency function that extracts an optional query parameter 'q' and returns it. This serves as a basic example of a 'dependable' in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
async def query_extractor(q: str | None = None):
```

----------------------------------------

TITLE: Importing APIRouter Modules in FastAPI
DESCRIPTION: This code snippet demonstrates how to import APIRouter modules using relative imports in a FastAPI application. It imports the `items` and `users` modules from the `app.routers` package, which contain the APIRouter instances.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

from .dependencies import get_query_token
from .routers import items, users

app = FastAPI(dependencies=[Depends(get_query_token)])


app.include_router(users.router)
app.include_router(items.router)

```

----------------------------------------

TITLE: Path, Query, and Request Body Parameters in FastAPI
DESCRIPTION: Illustrates how to declare path, query, and request body parameters simultaneously in a FastAPI endpoint. FastAPI intelligently determines the source of each parameter based on its type annotation and presence in the path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body.md#_snippet_5

LANGUAGE: Python
CODE:
```
{* ../../docs_src/body/tutorial004.py hl[18] *}
```

----------------------------------------

TITLE: Swagger UI JavaScript Presets
DESCRIPTION: This snippet shows the default JavaScript presets used by FastAPI in Swagger UI.  These presets are JavaScript objects and cannot be directly passed from Python code.  They define the Swagger UI bundles and standalone presets.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
presets: [
    SwaggerUIBundle.presets.apis,
    SwaggerUIBundle.SwaggerUIStandalonePreset
]
```

----------------------------------------

TITLE: Including APIRouter with Custom Prefix and Settings
DESCRIPTION: Shows how to include an APIRouter with a custom prefix, tags, responses, and dependencies without modifying the original router, useful for shared routers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)
```

----------------------------------------

TITLE: Mixing Path, Query, and Body Parameters in FastAPI
DESCRIPTION: This example shows how to mix `Path`, `Query`, and request body parameters in a FastAPI path operation function. It also demonstrates how to make a body parameter optional by setting its default value to `None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-multiple-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Union[Item, None] = None,
    q: Union[str, None] = None
):
    results = {"item_id": item_id}
    if item:
        results.update(item.model_dump())
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Basic FastAPI Application in Python
DESCRIPTION: A simple FastAPI application with two routes - a root endpoint and an item endpoint with path and query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value of the `item_id` path parameter is passed to the function as the argument `item_id`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining a Dependency as a Class in FastAPI
DESCRIPTION: This code defines a dependency as a Python class, `CommonQueryParams`. This approach allows for type hints and better code organization compared to using dictionaries. The class's `__init__` method handles the query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"""
from typing import Optional

from fastapi import Depends, FastAPI

app = FastAPI()


class CommonQueryParams:
    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
"""
```

----------------------------------------

TITLE: Defining an Asynchronous Function in Python
DESCRIPTION: Shows how to create an asynchronous function using async def syntax. This function asynchronously creates and returns burgers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Alternative JSON Body without Embedding
DESCRIPTION: This JSON snippet shows the structure of the request body when the `embed` parameter is not used. The `Item` model's data is directly in the body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body-multiple-params.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
    "name": "Foo",
    "description": "The pretender",
    "price": 42.0,
    "tax": 3.2
}
```

----------------------------------------

TITLE: FastAPI App with Root Path Parameter
DESCRIPTION: Creates a FastAPI application and sets the root_path parameter during initialization. This is an alternative to using the command-line option.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(root_path="/api/v1")


@app.get("/app")
async def read_main(request: Request):
    return {"message": "Hello World", "root_path": request.scope.get("root_path")}

```

----------------------------------------

TITLE: Basic FastAPI Application Example for Containerization
DESCRIPTION: A simple FastAPI application with two endpoints - a root endpoint returning a hello world message and an items endpoint that accepts path and query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Correct Usage of Async Function in FastAPI
DESCRIPTION: This example demonstrates the proper way to call an async function using await within an async path operation function. The get_burgers function is correctly awaited inside an async def path function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/async.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Async Test Function with pytest.mark.anyio
DESCRIPTION: Example of an asynchronous test function using pytest and AnyIO marker to test a FastAPI application
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@pytest.mark.anyio
async def test_read_main(test_app):
    async with AsyncClient(app=app, base_url="http://test") as client:
        response = await client.get("/")
        assert response.status_code == 200
        assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Optional File Upload in FastAPI
DESCRIPTION: This snippet demonstrates how to define an optional file upload using standard type annotations and setting the default value to None. It allows the API to handle requests where the file is not provided.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.post("/uploadfiles/")
async def create_upload_files(
    files: list[bytes] | None = None,
):
    if files:
        return {"filenames": [f"{len(file)} bytes" for file in files]}
    else:
        return {"message": "No files received"}


@app.post("/uploadfile/")
async def create_upload_file(
    file: UploadFile | None = None,
):
    if file:
        return {"filename": file.filename}
    else:
        return {"message": "No upload file received"}
```

----------------------------------------

TITLE: Using Depends in WebSocket endpoint
DESCRIPTION: Demonstrates how to use Depends in a WebSocket endpoint. It shows how to inject dependencies into a WebSocket endpoint using FastAPI's dependency injection system.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/advanced/websockets.md#_snippet_4

LANGUAGE: Python
CODE:
```
cookie_or_token: str = Depends(get_cookie_or_token),
```

----------------------------------------

TITLE: Declaring Additional Response with Pydantic Model in FastAPI
DESCRIPTION: Example of declaring an additional response with status code 404 and a Pydantic model 'Message' in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
    responses={404: {"model": Message, "description": "Additional Response"}},
    response_model=Item,
)
```

----------------------------------------

TITLE: Validating YAML Content with Pydantic v1 in FastAPI
DESCRIPTION: Shows how to parse YAML content from a request body and validate it using a Pydantic model in FastAPI (Pydantic v1 version).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/path-operation-advanced-configuration.md#_snippet_9

LANGUAGE: Python
CODE:
```
    content = await request.body()
    data = yaml.safe_load(content)
    item = Item.parse_obj(data)
    return item
```

----------------------------------------

TITLE: Creating a virtual environment with venv
DESCRIPTION: This command creates a virtual environment in a directory named `.venv` within the project directory using the `venv` module that comes with Python. It uses the python interpreter to run the venv module, which creates a new virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
```console
$ python -m venv .venv
```
```

----------------------------------------

TITLE: Accessing Request Object and Path Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to access both the Starlette Request object and a path parameter in a FastAPI route handler. It shows how to retrieve client information while still benefiting from FastAPI's parameter validation for other inputs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/using-request-directly.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request

app = FastAPI()


@app.get("/items/{item_id}")
def read_root(item_id: str, request: Request):
    client_host = request.client.host
    return {"client_host": client_host, "item_id": item_id}
```

----------------------------------------

TITLE: FileResponse example in FastAPI
DESCRIPTION: Shows how to use FileResponse to send a file as a response in FastAPI.  It includes the file path, headers, media type, and filename.  File responses include the file size, last modification date, and ETags in the headers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_12

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()


@app.get("/files/{path:path}")
async def read_file(path: str):
    return FileResponse(path)
```

----------------------------------------

TITLE: Scope Verification Dependency
DESCRIPTION: Implement a dependency function that validates user token scopes against required permissions using SecurityScopes
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def get_current_user(
    security_scopes: SecurityScopes,
    token: str = Depends(oauth2_scheme)
):
    if security_scopes.scopes:
        authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
    else:
        authenticate_value = "Bearer"
    credentials_exception = HTTPException(
        status_code=401,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": authenticate_value}
    )
```

----------------------------------------

TITLE: Combining Response Information with Examples in FastAPI
DESCRIPTION: Example showing how to combine response_model with additional response information like custom descriptions and examples in a FastAPI endpoint. This enhances the OpenAPI documentation with more detailed response specifications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def read_item(item_id: str):
    if item_id == "foo":
        return {"id": "foo", "value": "there goes my hero"}
    return JSONResponse(status_code=404, content={"message": "Item not found"})
```

----------------------------------------

TITLE: Adding GZip Middleware
DESCRIPTION: Adds the GZipMiddleware to automatically compress responses using GZip for clients that support it (indicated by the Accept-Encoding header). This helps reduce bandwidth usage.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/middleware.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.gzip import GZipMiddleware

app = FastAPI()

app.add_middleware(GZipMiddleware)
```

----------------------------------------

TITLE: Importing Query and Annotated for Parameter Validation in FastAPI (Python 3.10+)
DESCRIPTION: Imports the necessary modules 'Query' from FastAPI and 'Annotated' from typing to enable enhanced query parameter validations. 'Annotated' provides metadata support unlike traditional type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Query
from typing import Annotated
```

----------------------------------------

TITLE: Type hinting for Item model in FastAPI
DESCRIPTION: This snippet shows how to use type hints with a custom model `Item` in FastAPI.  This enables data validation, serialization, and automatic API documentation. FastAPI uses this type information to handle data conversion and validation automatically.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/index.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Security Scopes Validation Implementation
DESCRIPTION: Shows the implementation of scope validation logic using SecurityScopes, including error handling and scope checking.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def get_current_user(
    security_scopes: SecurityScopes,
    token: Annotated[str, Depends(oauth2_scheme)]
) -> User:
    if security_scopes.scopes:
        authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
    else:
        authenticate_value = "Bearer"
```

----------------------------------------

TITLE: Pydantic Model with JSON Schema Examples
DESCRIPTION: Declares a Pydantic model with examples that are added to the generated JSON Schema using the `model_config` attribute in Pydantic v2 or the `Config` class and `schema_extra` attribute in Pydantic v1. This allows for providing example data for the model's fields, which can be used in API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/schema-extra-example.md#_snippet_0

LANGUAGE: Python
CODE:
```
model_config = {
    "json_schema_extra": {
        "examples": [
            {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2,
            }
        ]
    }
}
```

----------------------------------------

TITLE: Dockerfile with Poetry for Dependency Management
DESCRIPTION: This Dockerfile uses multi-stage builds to manage dependencies with Poetry. The first stage installs Poetry, copies the `pyproject.toml` and `poetry.lock` files, and exports the dependencies to a `requirements.txt` file.  The second stage copies the `requirements.txt` file, installs the dependencies, and then copies the application code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_5

LANGUAGE: Dockerfile
CODE:
```
# (1)
FROM python:3.9 as requirements-stage

# (2)
WORKDIR /tmp

# (3)
RUN pip install poetry

# (4)
COPY ./pyproject.toml ./poetry.lock* /tmp/

# (5)
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

# (6)
FROM python:3.9

# (7)
WORKDIR /code

# (8)
COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

# (9)
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (10)
COPY ./app /code/app
```

----------------------------------------

TITLE: Reading a file using a context manager in Python
DESCRIPTION: This code snippet demonstrates how to read a file using the `with` statement, which utilizes a context manager to ensure the file is properly closed even if exceptions occur. The `open()` function creates a context manager that automatically closes the file when the `with` block is exited.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_6

LANGUAGE: Python
CODE:
```
with open("./somefile.txt") as f:
    contents = f.read()
    print(contents)
```

----------------------------------------

TITLE: Declaring Scopes in Path Operations with Security
DESCRIPTION: This code demonstrates how to declare scopes for a path operation using the Security dependency in FastAPI. It passes a dependency function (get_current_active_user) and a list of scopes (in this case, 'items') to the Security object, requiring the user to have the specified scope to access the path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/security/oauth2-scopes.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/users/me/items/", dependencies=[Security(get_current_active_user, scopes=["items"])])
async def read_own_items():
    return [{
        "item_id": "Foo",
        "owner": "Current User"
    }]
```

----------------------------------------

TITLE: Upgrading pip in the virtual environment
DESCRIPTION: This command upgrades the `pip` package installer to the latest version within the active virtual environment. It ensures that you are using the most up-to-date version of `pip` when installing Python packages, which can prevent errors during installation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_8

LANGUAGE: Shell
CODE:
```
```console
$ python -m pip install --upgrade pip

---> 100%
```
```

----------------------------------------

TITLE: Building a Docker Image Using Official FastAPI Image
DESCRIPTION: Dockerfile for creating a container based on the tiangolo/uvicorn-gunicorn-fastapi image, installing requirements, and copying application code into the container.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_9

LANGUAGE: dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: List Response with typing.List
DESCRIPTION: Declaring responses that return lists of objects using Python's typing.List
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/extra-models.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from typing import List
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str = None

def get_items() -> List[Item]:
    # Implementation logic
```

----------------------------------------

TITLE: Using lru_cache to create Settings only once
DESCRIPTION: This code snippet demonstrates using `@lru_cache` to ensure that the `Settings` object is created only once. This is important for optimizing performance when reading from a file, such as a `.env` file, as it avoids reading the file multiple times.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from fastapi import Depends, FastAPI

from .config import Settings

app = FastAPI()


@lru_cache
def get_settings():
    return Settings()


@app.get("/items/")
async def read_items(settings: Settings = Depends(get_settings)):
    return {"app_name": settings.app_name, "admin_email": settings.admin_email}
```

----------------------------------------

TITLE: Використання тегів в операціях шляху FastAPI
DESCRIPTION: Приклад використання параметра `tags` з операціями шляху для призначення їх до різних тегів у FastAPI. Це демонструє, як групувати операції шляхів за допомогою тегів, таких як `users` та `items`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/metadata.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    openapi_tags=[
        {
            "name": "users",
            "description": "Operations with users. The **login** logic is also here.",
        },
        {
            "name": "items",
            "description": "Manage items. So _fancy_ they have their own docs.",
            "externalDocs": {
                "description": "Items external docs description",
                "url": "https://example.com/items-docs",
            },
        },
    ]
)


@app.get("/users", tags=["users"])
async def read_users():
    return [{"username": "johndoe"}]


@app.get("/items", tags=["items"])
async def read_items():
    return [{"name": "Foo", "price": 50.2}]
```

----------------------------------------

TITLE: Installing a Custom Exception Handler in FastAPI
DESCRIPTION: This code shows how to install a custom exception handler for a specific exception type (UnicornException).  The `@app.exception_handler()` decorator is used to register a function that will handle exceptions of the specified type. The handler receives the `Request` object and the exception instance as arguments, and it must return a `Response` object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )\n\n\n@app.get("/unicorns/{name}")\nasync def read_unicorn(name: str):\n    if name == \"yolo\":\n        raise UnicornException(name=name)\n    return {\"unicorn_name\": name}"
```

----------------------------------------

TITLE: Defining an Asynchronous Path Operation Function
DESCRIPTION: This code snippet shows an example of an asynchronous path operation function in FastAPI. The `async def` syntax defines an asynchronous function that can be used to handle requests to a specific path. It returns a dictionary that FastAPI automatically converts to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Importing and Creating FastAPI Instance with Global Dependencies
DESCRIPTION: Demonstrates how to import FastAPI, create an instance, and add global dependencies that will be combined with dependencies from each APIRouter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

from .dependencies import get_query_token, get_token_header
from .internal import admin
from .routers import items, users

app = FastAPI(dependencies=[Depends(get_query_token)])
```

----------------------------------------

TITLE: Defining List Response Model in FastAPI
DESCRIPTION: This example shows how to define a response model that returns a list of `Item` objects using `typing.List`. This is useful for returning collections of data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/extra-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None


@app.get("/items/", response_model=List[Item])
async def read_items():
    return [
        {"name": "Foo", "price": 50.2},
        {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2},
    ]
```

----------------------------------------

TITLE: Use Settings Object in FastAPI App
DESCRIPTION: Access the application settings by creating an instance of the `Settings` class. Use the attributes of this instance within your FastAPI path operations to retrieve configuration values. Pydantic handles reading environment variables and validation upon instantiation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/info")
async def info():
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Read Multiple Heroes Endpoint
DESCRIPTION: Define a FastAPI GET endpoint `/heroes/` to retrieve a list of Heroes. It uses the `SessionDep` dependency and `sqlmodel.select` to query the database, supporting pagination via `offset` and `limit` query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import List
from fastapi import FastAPI, Depends
from sqlmodel import Session, select

@app.get("/heroes/", response_model=List[Hero])
def read_heroes(*, session: SessionDep, offset: int = 0, limit: int = 100):
    statement = select(Hero).offset(offset).limit(limit)
    heroes = session.exec(statement).all()
    return heroes
```

----------------------------------------

TITLE: Declaring Additional Responses with Pydantic Models in FastAPI
DESCRIPTION: Example of how to declare an additional 404 response with a Pydantic model in a FastAPI endpoint. This snippet shows how to use the 'responses' parameter in the route decorator to define supplementary response types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
async def read_item(item_id: str):
    if item_id == "foo":
        return {"id": "foo", "value": "there goes my hero"}
    return JSONResponse(status_code=404, content={"message": "Item not found"})
```

----------------------------------------

TITLE: Configuring OpenAPI Servers in FastAPI
DESCRIPTION: Example of configuring additional servers in FastAPI's OpenAPI schema to enable interaction with different environments (staging and production) alongside the proxy path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
openapi_tags = [
    {"name": "items", "description": "Operaciones con items"}
]
servers = [
    {"url": "https://stag.example.com", "description": "Entorno de pruebas"},
    {"url": "https://prod.example.com", "description": "Entorno de producción"},
]
```

----------------------------------------

TITLE: Returning a Response Directly in FastAPI
DESCRIPTION: This snippet demonstrates how to return a Response object directly in a FastAPI route. It uses RedirectResponse as an example, which is a subclass of Response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer")
async def redirect_typer():
    return RedirectResponse("https://typer.tiangolo.com")
```

----------------------------------------

TITLE: Password Hashing and JWT Token Handling
DESCRIPTION: This code snippet demonstrates password hashing and JWT token handling, including password hashing utility functions, JWT token generation, and user authentication.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: python
CODE:
```
from datetime import datetime, timedelta
from typing import Optional

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Optional[str] = None


oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"  # Replace with a secure random key
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30


pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password):
    return pwd_context.hash(password)


async def authenticate_user(username, password):
    user = fake_users_db.get(username)
    if not user:
        return False
    if not verify_password(password, user["hashed_password"]):
        return False
    return user


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Partial Update with PATCH in FastAPI (Python)
DESCRIPTION: This code shows how to perform a partial update using the HTTP PATCH method in FastAPI. It uses Pydantic's exclude_unset and model_copy methods to apply updates only to specified fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-updates.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
stored_item_data = items[item_id]
stored_item_model = Item(**stored_item_data)
update_data = item.dict(exclude_unset=True)
updated_item = stored_item_model.copy(update=update_data)
items[item_id] = jsonable_encoder(updated_item)
return updated_item
```

----------------------------------------

TITLE: Importing Depends
DESCRIPTION: This code imports the `Depends` class from the `fastapi` module. `Depends` is used to declare dependencies in path operation functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from typing_extensions import Annotated

from fastapi import Depends, FastAPI
```

----------------------------------------

TITLE: Setting Custom Status Code with Response Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to use a Response parameter in a FastAPI route to change the HTTP status code dynamically. The example creates a new item and returns a 201 CREATED status instead of the default 200 OK, while still utilizing response_model for data filtering.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/response-change-status-code.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response, status

app = FastAPI()


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    # 这里假设我们将项目保存到数据库中
    # 然后获取新ID
    # 然后返回一个包含ID的新模型
    return {"id": "foo", "name": item.name, "description": item.description}


@app.get("/items/", response_model=Item)
async def read_item(response: Response):
    # 假设我们有这种情况，当项目不存在时，我们将创建它
    # 但我们想用状态码201而不是默认的200来表示项目已创建
    item = {"id": "foo", "name": "Foo", "description": "This item was created"}
    response.status_code = status.HTTP_201_CREATED
    return item
```

----------------------------------------

TITLE: Injeção de dependência com BackgroundTasks
DESCRIPTION: Este snippet demonstra como usar BackgroundTasks com injeção de dependência. Um parâmetro do tipo BackgroundTasks pode ser declarado em vários níveis: em uma função de operação de caminho, em uma dependência, em uma subdependência, etc. O FastAPI reutiliza o mesmo objeto para todas as tarefas em segundo plano.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/background-tasks.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import BackgroundTasks, Depends, FastAPI

app = FastAPI()


def write_log(message: str):
    with open("log.txt", mode="a") as log:
        log.write(message)


def get_query(background_tasks: BackgroundTasks, q: Optional[str] = None):
    if q:
        message = f"found query {q}\n"
        background_tasks.add_task(write_log, message)
    return q


@app.post("/send-notification/{email}")
async def send_notification(
    email: str,
    background_tasks: BackgroundTasks,
    q: str = Depends(get_query),
):
    message = f"message to {email}\n"
    background_tasks.add_task(write_log, message)
    return {"message": "Notification sent in the background"}
```

----------------------------------------

TITLE: Create SQLModel Database Engine
DESCRIPTION: Create the SQLModel engine (which is a SQLAlchemy engine) responsible for managing connections to the database. For SQLite, `check_same_thread=False` is necessary to allow multiple threads (used by FastAPI requests) to access the database.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_2

LANGUAGE: Python
CODE:
```
from sqlmodel import create_engine

sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"

engine = create_engine(sqlite_url, echo=True, connect_args={"check_same_thread": False})
```

----------------------------------------

TITLE: Excluding Query Parameter from OpenAPI Schema in FastAPI (Python 3.10+)
DESCRIPTION: Shows how to exclude a query parameter from the OpenAPI documentation by setting include_in_schema=False. This is useful for parameters that should be hidden from public documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    hidden_query: Annotated[str | None, Query(include_in_schema=False)] = None
):
    if hidden_query:
        return {"hidden_query": hidden_query}
    return {"hidden_query": "Not found"}
```

----------------------------------------

TITLE: Copying Requirements File for Docker Cache Optimization
DESCRIPTION: Copies only the `requirements.txt` file initially to leverage Docker's caching mechanism. Since this file changes less frequently, Docker can cache this step and subsequent dependency installation, speeding up the build process.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_11

LANGUAGE: Dockerfile
CODE:
```
COPY ./requirements.txt /code/requirements.txt
```

----------------------------------------

TITLE: Using Pydantic Model as Request Body (FastAPI, Python)
DESCRIPTION: Demonstrates using the `Item` Pydantic model as the request body for a POST endpoint `/items/`. When used as input, the `description` field is considered optional in the OpenAPI schema due to its default value of `None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/separate-openapi-schemas.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from pydantic import BaseModel

from fastapi import FastAPI

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Importing Depends Function in FastAPI
DESCRIPTION: Shows how to import the Depends function from FastAPI. The Depends() function is the primary way to handle dependencies in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/dependencies.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Reading Heroes
DESCRIPTION: This code demonstrates how to read multiple `Hero` objects and serialize them into a list of `HeroPublic` models for the API response. This ensures that only the public data is returned.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"@app.get("/heroes/", response_model=list[HeroPublic])
async def read_heroes(offset: int = 0, limit: int = Query(default=100, lte=100), db: Session = Depends(get_db)):
    heroes = db.query(Hero).offset(offset).limit(limit).all()
    return heroes"
```

----------------------------------------

TITLE: Automatic Linking to Static Files Using Jinja2 and FastAPI
DESCRIPTION: Exemplifies using the `url_for` function in Jinja2 to generate links to static files in FastAPI applications. Demonstrates serving static assets such as CSS stylesheets via configured routes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_5

LANGUAGE: jinja
CODE:
```
<link href="{{ url_for('static', path='/styles.css') }}" rel="stylesheet">
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This command starts the FastAPI development server with auto-reload enabled. It automatically detects the FastAPI instance in the specified Python file and serves the application using Uvicorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/fastapi-cli.md#_snippet_0

LANGUAGE: bash
CODE:
```
fastapi dev <u style="text-decoration-style:solid">main.py</u>
```

----------------------------------------

TITLE: Initializing OAuth2PasswordBearer FastAPI Python
DESCRIPTION: This line initializes the `OAuth2PasswordBearer` class, which represents an OAuth2 security scheme using the Password flow and Bearer tokens. The `tokenUrl` parameter specifies the relative URL where clients should send username/password to obtain a token, which is crucial for API documentation generation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Async Path Operation with Await
DESCRIPTION: This example demonstrates a FastAPI path operation function defined using `async def`. It uses `await` to call an asynchronous function (`get_burgers`) and returns the result.  This is the correct way to use async functions within FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/async.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Using Dependencies in Path Operation Functions
DESCRIPTION: Demonstrates how to declare a dependency in a path operation function using the Depends function with a parameter. FastAPI will call the dependency and inject its result.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: APIRouter with Shared Properties
DESCRIPTION: This code demonstrates the use of `APIRouter` to group endpoints with common properties such as a path prefix, tags, additional responses, and dependencies. It defines endpoints for handling items.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import APIRouter, Depends, Header, HTTPException

from .dependencies import verify_token, verify_key

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(verify_token), Depends(verify_key)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{
        "name": "Foo", "description": "There goes my hero"
    }, {
        "name": "Bar", "description": "The bartenders are on me"
    }]


@router.get("/{item_id}", responses={403: {"description": "Operation forbidden"}})
async def read_item(item_id: int):
    if item_id == 3:
        raise HTTPException(status_code=403, detail="You don't have enough privileges")
    return {"name": "Baz", "item_id": item_id}
```

----------------------------------------

TITLE: Creating a Custom GzipRoute Class in Python for FastAPI
DESCRIPTION: This code snippet defines a GzipRoute class that extends FastAPI's APIRoute to use the custom GzipRequest class. It overrides the get_route_handler() method to create a GzipRequest from the original request before processing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class GzipRoute(APIRoute):
    def get_route_handler(self) -> Callable:
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request) -> Response:
            request = GzipRequest(request.scope, request.receive)
            return await original_route_handler(request)

        return custom_route_handler
```

----------------------------------------

TITLE: Combining Response Information
DESCRIPTION: This example shows how to combine response information from `response_model`, `status_code`, and `responses`. It declares a `response_model` with the default status code 200 and adds extra information for the same response in `responses`, including a custom example.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/additional-responses.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.post("/items/", response_model=Item, status_code=201, responses={
    200: {
        "content": {
            "application/json": {
                "example": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            }
        }
    },
    404: {
        "description": "Item not found",
        "content": {
            "application/json": {
                "example": {"message": "Item not found"}
            }
        },
    },
})
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Restricting Extra Headers with Pydantic Model Configuration in FastAPI
DESCRIPTION: This example shows how to use Pydantic model configuration to prohibit any extra headers beyond those explicitly defined. If a client sends undefined headers, FastAPI will return an error response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-param-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class HeaderModel(BaseModel):
    model_config = {"extra": "forbid"}
    
    x_token: str
    x_api_version: str | None = None
    user_agent: str | None = None
    content_language: str | None = "en-US"
    content_type: str | None = None
```

----------------------------------------

TITLE: Query Parameter with Optional String Type
DESCRIPTION: This snippet defines an optional query parameter `q` of type string. It uses `Optional[str]` to indicate that the parameter can be a string or None, and the default value is set to None, making the parameter optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(q: Optional[str] = None):
    return {"q": q}
```

----------------------------------------

TITLE: Using FastAPI's lifespan parameter with Context Manager
DESCRIPTION: Shows how to pass an async context manager to the FastAPI app's lifespan parameter to handle startup and shutdown logic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/events.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Importing TestClient for FastAPI Testing
DESCRIPTION: Shows how to import the TestClient class from the fastapi.testclient module. This client allows testing FastAPI applications without creating actual HTTP connections.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/testclient.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.testclient import TestClient
```

----------------------------------------

TITLE: Running FastAPI Application
DESCRIPTION: This command shows how to start a FastAPI application in development mode. It assumes the main application code is in a file named `main.py`. The `fastapi dev` command starts the server and provides useful information about the application's status, including the URL for accessing the documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/index.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
"fastapi dev <u style=\"text-decoration-style:solid\">main.py</u>"
```

----------------------------------------

TITLE: Custom Tags and Responses in APIRouter
DESCRIPTION: This code snippet demonstrates how to add custom tags and responses to a specific route operation within an APIRouter. It shows how to apply additional tags and define specific responses for different HTTP status codes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_10

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/routers/items.py!}
```

----------------------------------------

TITLE: Adding Min Length Validation to Query Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to add both min_length and max_length validations to a query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
q: str = Query(default=None, min_length=3, max_length=50)
```

----------------------------------------

TITLE: FastAPI shortcut with Depends() for classes
DESCRIPTION: This code demonstrates a shortcut in FastAPI for class-based dependencies.  When the dependency is explicitly a class, FastAPI can infer the dependency and create an instance. This means you can just use `Depends()` instead of `Depends(CommonQueryParams)` when a type annotation is present.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends()):
    return commons
```

----------------------------------------

TITLE: Injecting the Current User Dependency into a FastAPI Path Operation
DESCRIPTION: This snippet shows how to inject the `get_current_user` dependency into a path operation using `Depends`.  The `read_current_user` function receives the `current_user` as a `User` object, which is automatically populated by the dependency.  This allows easy access to the current user's information within the path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"@app.get("/users/me/")
async def read_current_user(current_user: User = Depends(get_current_user)):
    return current_user"
```

----------------------------------------

TITLE: Running openapi-ts client generation script
DESCRIPTION: This shell command executes the `generate-client` script previously defined in the `package.json` file using `npm run`. Running this command triggers the `openapi-ts` process, which connects to the specified OpenAPI URL, fetches the schema, and generates the client code based on the configured options.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ npm run generate-client

frontend-app@1.0.0 generate-client /home/user/code/frontend-app
> openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios
```

----------------------------------------

TITLE: Numeric Validation (GE) on Path Parameter (Python)
DESCRIPTION: Defines a path operation with a path parameter `item_id` using `Path`. It applies a validation requiring the parameter value to be greater than or equal to 1 using the `ge=1` argument.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(item_id: int = Path(ge=1)): pass
```

----------------------------------------

TITLE: Installing Python Multipart Dependency Console
DESCRIPTION: This command installs the `python-multipart` library, which is required by FastAPI to parse form data. It is needed specifically for handling the `username` and `password` fields when implementing the token acquisition endpoint for the OAuth2 Password flow.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/security/first-steps.md#_snippet_3

LANGUAGE: Console
CODE:
```
pip install python-multipart
```

----------------------------------------

TITLE: Creating a Dependency for Token Validation in FastAPI (Python 3.8+)
DESCRIPTION: This snippet defines a dependency function to validate a custom X-Token header in a FastAPI application using Python 3.8+ syntax.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException

async def get_token_header(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
```

----------------------------------------

TITLE: Partial Update using Pydantic's exclude_unset Parameter
DESCRIPTION: Shows how to generate a dictionary with only explicitly set values using `exclude_unset=True`, avoiding default value overrides during partial updates
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-updates.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
tutorial002.py (line 34)
```

----------------------------------------

TITLE: Reading a file using a context manager
DESCRIPTION: Demonstrates how to read a file using the `with` statement, which utilizes a context manager to ensure the file is properly closed after use, even if exceptions occur.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_7

LANGUAGE: Python
CODE:
```
with open("./somefile.txt") as f:
    contents = f.read()
    print(contents)
```

----------------------------------------

TITLE: Returning a Custom XML Response in FastAPI
DESCRIPTION: This snippet demonstrates how to return a custom XML response in FastAPI by manually creating a Response object. It showcases the flexibility of FastAPI in returning various content types without enforcing any data validation or conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-directly.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.responses import Response

app = FastAPI()

@app.get("/custom-xml")
async def get_custom_xml():
    xml_content = "<note><body>Hello, XML!</body></note>"
    return Response(content=xml_content, media_type="application/xml")
```

----------------------------------------

TITLE: Declaring Union Types with Pipe | (Python 3.10+)
DESCRIPTION: Demonstrates the Python 3.10+ syntax for declaring a variable that can be one of several types using the pipe (`|`) operator, equivalent to `typing.Union`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial008b_py310.py!}
```

----------------------------------------

TITLE: Response Example with JSON Showing Root Path
DESCRIPTION: A JSON response example illustrating how the root_path is included in responses when a path prefix is used. Useful for checking if the application correctly recognizes the root path configured via command line arguments or code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "message": "Hello World",
    "root_path": "/api/v1"
}
```

----------------------------------------

TITLE: Initializing Multiple User Models with Different Attributes
DESCRIPTION: Demonstrates creating different Pydantic models for user input, output, and database storage with varying password handling
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/extra-models.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
class UserIn(BaseModel):
    username: str
    password: str
    email: str
    full_name: Optional[str] = None
```

----------------------------------------

TITLE: Using Regular Functions for Non-Async Libraries in FastAPI
DESCRIPTION: Shows how to define a regular (non-async) path operation function when working with libraries that don't support async/await. This is common with many database libraries.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Float Validation with Range Constraints
DESCRIPTION: Demonstrates how to validate float values with specific range constraints using gt and lt parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
size: Annotated[float, Query(gt=0, lt=10.5)] = 1
```

----------------------------------------

TITLE: Defining a GET Path Operation with Decorator in FastAPI
DESCRIPTION: This code snippet shows how to define a GET path operation for the root path ('/') using the `@app.get()` decorator in FastAPI. The function decorated with `@app.get("/")` will handle requests to the `/` path using the GET method.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Defining Arbitrary Dict Response Model in FastAPI
DESCRIPTION: This example demonstrates how to define a response model that returns an arbitrary dictionary with string keys and any type of values using `typing.Dict`. This is useful when the structure of the response is not known in advance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/extra-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Dict, Any

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/", response_model=Dict[str, Any])
async def read_items():
    return {"foo": {"name": "Foo", "price": 50.2}, "bar": {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2}}
```

----------------------------------------

TITLE: Running FastAPI Application (Bash)
DESCRIPTION: Provides the command-line instruction to run the main application file ('main.py') using the `fastapi dev` command. This command starts the development server, typically Uvicorn, with auto-reloading enabled.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_3

LANGUAGE: Bash
CODE:
```
fastapi dev main.py
```

----------------------------------------

TITLE: Using UploadFile for File Handling in FastAPI
DESCRIPTION: This code demonstrates how to use the UploadFile class for more advanced file handling in FastAPI, including access to file metadata and asynchronous operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
{* ../../docs_src/request_files/tutorial001_an_py39.py hl[14] *}
```

----------------------------------------

TITLE: Using the Pydantic Model Data in the Path Operation
DESCRIPTION: Demonstrates how to access and use the attributes of the Pydantic model instance within the path operation function, including conditional operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.post("/items/")
async def create_item(item: Item):
    item_dict = item.dict()
    if item.tax:
        price_with_tax = item.price + item.tax
        item_dict.update({"price_with_tax": price_with_tax})
    return item_dict
```

----------------------------------------

TITLE: Setting and Using Environment Variables (Bash)
DESCRIPTION: This snippet demonstrates how to set an environment variable named MY_NAME to "Wade Wilson" and then use it in a subsequent command to print a greeting. It shows the basic syntax for setting and accessing environment variables in a Bash shell.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/environment-variables.md#_snippet_0

LANGUAGE: bash
CODE:
```
// 你可以使用以下指令建立一個名為 MY_NAME 的環境變數
$ export MY_NAME="Wade Wilson"

// 然後，你可以在其他程式中使用它，例如
$ echo "Hello $MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Using a Dependency in a FastAPI Path Operation
DESCRIPTION: Demonstrates how to use a dependency in a FastAPI path operation function. FastAPI automatically resolves the dependency chain, calling sub-dependencies as needed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
async def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):
```

----------------------------------------

TITLE: Token Data Validation with Pydantic
DESCRIPTION: This code demonstrates how to validate token data using Pydantic, ensuring that the data contains a list of scopes and a username string. It updates the TokenData model with a scopes attribute and uses Pydantic to catch ValidationError exceptions, enhancing security.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/security/oauth2-scopes.md#_snippet_5

LANGUAGE: Python
CODE:
```
class TokenData(BaseModel):
    username: str | None = None
    scopes: list[str] = []
```

----------------------------------------

TITLE: Dependency with yield and try/finally
DESCRIPTION: Illustrates how to use `try` and `finally` blocks within a dependency that uses `yield` to handle exceptions and ensure that cleanup code is always executed, regardless of whether an exception occurs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: python
CODE:
```
db = DBSession()
try:
    yield db
except SomeException:
    db.rollback()
finally:
    db.close()
```

----------------------------------------

TITLE: Docker Setup for Larger FastAPI Applications
DESCRIPTION: Dockerfile for multi-file FastAPI applications with special handling of app directory paths to maintain proper application structure.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_10

LANGUAGE: dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app/app
```

----------------------------------------

TITLE: APIRouter with prefix, tags, and dependencies in items.py
DESCRIPTION: Creates an APIRouter instance with a prefix, tags, responses, and dependencies. This simplifies the definition of item-related endpoints by applying common configurations to all path operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter, Depends, HTTPException

from .dependencies import verify_token, verify_key

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(verify_token)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items(commons: dict = Depends(verify_key)):
    return [{
        "name": "Foo",
        "description": "There goes my hero"
    }, {
        "name": "Bar",
        "description": "The bartenders"
    }]


@router.get("/{item_id}")
async def read_item(item_id: str):
    return {"name": f"An item with ID: {item_id}"}
```

----------------------------------------

TITLE: Creating a Custom TimedRoute Class in FastAPI
DESCRIPTION: This code defines a custom `TimedRoute` class which inherits from `fastapi.routing.APIRoute`. The `get_route_handler` method is overridden to add an `X-Response-Time` header to the response, indicating the time it took to process the request.  This demonstrates customizing route behavior in a reusable way.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
import time
from typing import Callable

from fastapi import FastAPI, Request, Response
from fastapi.routing import APIRoute


class TimedRoute(APIRoute):
    def get_route_handler(self) -> Callable:
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request) -> Response:
            before = time.time()
            response: Response = await original_route_handler(request)
            duration = time.time() - before
            response.headers["X-Response-Time"] = str(duration)
            return response

        return custom_route_handler
```

----------------------------------------

TITLE: Using RedirectResponse with Custom Status Code in FastAPI
DESCRIPTION: Example showing how to use RedirectResponse as a response_class with a custom status code instead of the default 307.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/typer", response_class=RedirectResponse, status_code=302)
async def redirect_typer():
    return "https://typer.tiangolo.com"
```

----------------------------------------

TITLE: Registering Callback Routes
DESCRIPTION: This snippet registers the previously defined callback router in the main FastAPI application. It demonstrates the correct usage of callbacks in the path operation decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
@app.post("/invoices/", callbacks=invoice_callback_router.routes)
def create_invoice(invoice: Invoice, callback_url: str):
    # Logic to process the invoice
    pass
```

----------------------------------------

TITLE: Validating User Credentials and Returning Error for Invalid Login
DESCRIPTION: This code snippet demonstrates how to validate user credentials against a database and return an HTTP exception if the username is incorrect.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException, status

user_dict = fake_users_db.get(form_data.username)
if not user_dict:
    raise HTTPException(status_code=400, detail="Incorrect username or password")
```

----------------------------------------

TITLE: Define Additional Response Model in FastAPI
DESCRIPTION: This code snippet demonstrates how to define an additional response with a status code of 404 and a Pydantic model named `Message` using the `responses` parameter in a FastAPI path decorator. It shows how to return a `JSONResponse` directly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/additional-responses.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    id: str
    value: str
    tax: Union[float, None] = None


class Message(BaseModel):
    message: str


@app.post("/items/{item_id}", responses={
    404: {"model": Message},
})
async def create_item(item_id: int, item: Item):
    if item_id == 3:
        return JSONResponse(content={"message": "Item not found"}, status_code=404)
    return item
```

----------------------------------------

TITLE: Pinning Pydantic version in requirements.txt
DESCRIPTION: This snippet shows how to specify a version range for Pydantic in the `requirements.txt` file. It is recommended to use Pydantic versions 1.0.0 and above with FastAPI. This will ensure a stable API for Pydantic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/versions.md#2025-04-21_snippet_2

LANGUAGE: txt
CODE:
```
"pydantic>=1.2.0,<2.0.0"
```

----------------------------------------

TITLE: Installing python-multipart for File and Form Handling in FastAPI
DESCRIPTION: This snippet shows how to install the python-multipart package, which is required for handling file uploads and form data in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Declaring File and Form Parameters in FastAPI Endpoint
DESCRIPTION: Example showing how to declare parameters in a FastAPI endpoint function to receive both file uploads and form fields simultaneously using the File and Form parameter types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def create_file(file: bytes = File(), fileb: UploadFile = File(), token: str = Form())
```

----------------------------------------

TITLE: Custom OpenAPI Schema Generation with Logo
DESCRIPTION: Complete implementation showing how to override FastAPI's default OpenAPI schema generation to include a custom logo using ReDoc extensions. Includes schema caching for performance optimization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/extending-openapi.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.openapi.utils import get_openapi

app = FastAPI()

@app.get("/items/")
async def read_items():
    return [{"name": "Foo"}]

def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="Custom title",
        version="2.5.0",
        summary="This is a very custom OpenAPI schema",
        description="Here's a longer description of the custom **OpenAPI** schema",
        routes=app.routes,
    )
    openapi_schema["info"]["x-logo"] = {
        "url": "https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png"
    }
    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi
```

----------------------------------------

TITLE: Enum Class Creation
DESCRIPTION: This example demonstrates how to create an Enum class in Python to define a set of valid values for a path parameter.  It inherits from both `str` and `Enum` to ensure the API documentation correctly represents the values as strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: python
CODE:
```
from enum import Enum


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Declare Dependency in Path Operation: Python
DESCRIPTION: This code shows how to declare a dependency of type `CommonQueryParams` in a FastAPI path operation function. It uses the `Depends` function to inject an instance of `CommonQueryParams` into the `commons` parameter of the function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
async def items(commons: CommonQueryParams = Depends(CommonQueryParams)):
```

----------------------------------------

TITLE: First-level Dependency
DESCRIPTION: This snippet defines a first-level dependency in FastAPI, which is a function that declares an optional query parameter 'q' of type string and returns its value. This function serves as a basic building block for demonstrating sub-dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"@app.get("/items/")
async def read_items(q: str | None = Query(default=None)):
    return {"q": q}"
```

----------------------------------------

TITLE: JWT 토큰 생성 및 관리 (PyJWT)
DESCRIPTION: PyJWT 모듈을 임포트하고, JWT 토큰 서명에 사용될 임의의 비밀 키를 생성합니다. 토큰 만료 기간을 위한 변수를 생성하고, 응답을 위한 토큰 엔드포인트에 사용될 Pydantic 모델을 정의합니다. 새 액세스 토큰을 생성하기 위한 유틸리티 함수를 생성합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/oauth2-jwt.md#_snippet_1

LANGUAGE: python
CODE:
```
from datetime import datetime, timedelta
from typing import Union

from jose import JWTError, jwt
from pydantic import BaseModel


SECRET_KEY = "YOUR_SECRET_KEY"
ALGORITHM = "HS256"


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Union[str, None] = None


def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: FastAPI App in main.py
DESCRIPTION: This snippet shows the FastAPI application code typically located in `main.py`. It defines a simple route that returns a JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Context Manager Dependency with Yield
DESCRIPTION: Demonstrate using context managers within a FastAPI dependency with yield and error handling
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def get_resource():
    with open_resource() as resource:
        try:
            yield resource
        finally:
            resource.cleanup()
```

----------------------------------------

TITLE: Query Parameter with Description
DESCRIPTION: This snippet shows how to add a description to a query parameter using the `description` argument in the `Query` function. The description is used for API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, title="Query string", description="Query string for the items to search in the database that have a good match")):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Creating Environment Variables in Linux/macOS/Windows Bash
DESCRIPTION: Linux, macOS 또는 Windows Bash 환경에서 환경 변수를 생성하고 사용하는 방법을 보여줍니다. export 명령어를 사용하여 변수를 설정하고 $로 접근합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/environment-variables.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
// You could create an env var MY_NAME with
$ export MY_NAME="Wade Wilson"

// Then you could use it with other programs, like
$ echo "Hello $MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Modifying a Return Statement in FastAPI (Continued)
DESCRIPTION: This code snippet demonstrates how to modify a return statement in a FastAPI application. It shows the original return statement and the modified version, highlighting the change from `item.name` to `item.price`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/index.md#_snippet_9

LANGUAGE: Python
CODE:
```
... "item_price": item.price ...
```

----------------------------------------

TITLE: Implementing User Authentication and Authorization Dependencies
DESCRIPTION: This snippet defines dependencies for getting the current user and verifying if the user is active, which can be used in protected routes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    user = fake_decode_token(token)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return user

async def get_current_active_user(
    current_user: Annotated[User, Depends(get_current_user)]
):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

@app.get("/users/me")
async def read_users_me(current_user: Annotated[User, Depends(get_current_active_user)]):
    return current_user
```

----------------------------------------

TITLE: Define GET Path Operation Decorator in FastAPI
DESCRIPTION: This code snippet shows how to define a path operation decorator using `@app.get("/")` to handle GET requests to the root path `/` in FastAPI. The decorator tells FastAPI that the function below it should handle requests to the specified path and HTTP method.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Running FastAPI in Development Mode
DESCRIPTION: This command starts the FastAPI application in development mode with auto-reload enabled. It takes the path to the main Python file as an argument and automatically finds the FastAPI app object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/fastapi-cli.md#_snippet_0

LANGUAGE: bash
CODE:
```
fastapi dev main.py
```

----------------------------------------

TITLE: Nested Image Model Definition
DESCRIPTION: Defines a Pydantic model for Image with URL and name fields
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class Image:
    url: str
    name: str
```

----------------------------------------

TITLE: HTML Response in FastAPI
DESCRIPTION: This snippet shows how to return an HTML response from a FastAPI endpoint using `HTMLResponse`. It imports `HTMLResponse` and passes it as the `response_class` parameter in the *path operation decorator*.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/{item_id}", response_class=HTMLResponse)  # HL
async def read_item(item_id: str):
    return f"<html><body><h1>Item ID: {item_id}</h1></body></html>"

```

----------------------------------------

TITLE: Annotating a Response Subclass in FastAPI
DESCRIPTION: This example shows how to annotate a route function with a specific Response subclass. It uses RedirectResponse as the return type annotation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer")
async def redirect_typer() -> RedirectResponse:
    return RedirectResponse("https://typer.tiangolo.com")
```

----------------------------------------

TITLE: FastAPI: OAuth2 Scheme
DESCRIPTION: This snippet creates an OAuth2PasswordBearer instance for handling OAuth2 password-based authentication.  This is used as a sub-dependency to obtain the token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Using Dataclasses in FastAPI Request and Response Models
DESCRIPTION: This snippet demonstrates using Python's standard dataclasses within FastAPI to define request and response models. FastAPI, through Pydantic, is capable of converting these dataclasses into Pydantic models to leverage validation and serialization features without explicit dependency on Pydantic models.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
{* ../../docs_src/dataclasses/tutorial001.py hl[1,7:12,19:20] *}
```

----------------------------------------

TITLE: Declaring Cookie Parameters in FastAPI
DESCRIPTION: Demonstrates how to declare a cookie parameter using the Cookie class. Similar to Path and Query parameters, it allows specifying a default value and additional validation parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/cookie-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def read_items(ads_id: str | None = Cookie(default=None)):
```

----------------------------------------

TITLE: Disabling Automatic Documentation in FastAPI
DESCRIPTION: This snippet shows how to disable the default automatic documentation endpoints in FastAPI by setting the `docs_url` and `redoc_url` parameters to `None` when creating the `FastAPI` app instance. This is necessary when serving custom documentation files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-docs-ui-assets.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(docs_url=None, redoc_url=None)
```

----------------------------------------

TITLE: Defining a Path Operation Function (Sync)
DESCRIPTION: This code snippet shows how to define a synchronous path operation function. This function will be called whenever FastAPI receives a GET request to the `/` URL. It returns a dictionary that will be converted to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Running FastAPI Development Server with CLI
DESCRIPTION: This snippet demonstrates how to use the FastAPI CLI to start a development server for a FastAPI application. It shows the output of the command, including server information and logs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-cli.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

  FastAPI  Starting development server 🚀

             Searching for package file structure from directories with
             __init__.py files
             Importing from /home/user/code/awesomeapp

   module  🐍 main.py

     code  Importing the FastAPI app object from the module with the
             following code:

             from main import app

      app  Using import string: main:app

   server  Server started at http://127.0.0.1:8000
   server  Documentation at http://127.0.0.1:8000/docs

      tip  Running in development mode, for production use:
             fastapi run

             Logs:

     INFO  Will watch for changes in these directories:
             ['/home/user/code/awesomeapp']
     INFO  Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to
             quit)
     INFO  Started reloader process [383138] using WatchFiles
     INFO  Started server process [383153]
     INFO  Waiting for application startup.
     INFO  Application startup complete.
```

----------------------------------------

TITLE: Defining CommonQueryParams Class as Dependency in FastAPI
DESCRIPTION: This snippet shows how to create a class 'CommonQueryParams' to be used as a dependency in FastAPI. It defines query parameters with type hints and default values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Combining Path Parameters with Request Body
DESCRIPTION: Demonstrates how to combine path parameters with a request body in a FastAPI endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item):
```

----------------------------------------

TITLE: Creating a Database Session Dependency
DESCRIPTION: This snippet creates a FastAPI dependency that yields a new database session for each request. It uses the session to track changes and communicate with the database via the engine. An annotated dependency SessionDep is created for easier use.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: Python
CODE:
```
def get_session():
    with Session(engine) as session:
        yield session

SessionDep = Annotated[Session, Depends(get_session)]
```

----------------------------------------

TITLE: Read All Heroes Endpoint (GET)
DESCRIPTION: Defines an HTTP GET endpoint `/heroes/` to retrieve a list of all heroes. It queries the database for `Hero` objects and uses `response_model=list[HeroPublic]` to serialize the list, ensuring each hero object in the response conforms to the `HeroPublic` model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_7

LANGUAGE: python
CODE:
```
from typing import List
from fastapi import Depends
from sqlmodel import Session, select

# Assume get_session, Hero, HeroPublic are defined

@app.get("/heroes/", response_model=List[HeroPublic])
def read_heroes(*, session: Session = Depends(get_session)):
    heroes = session.exec(select(Hero)).all()
    return heroes
```

----------------------------------------

TITLE: UJSONResponse in FastAPI
DESCRIPTION: Demonstrates the use of UJSONResponse as an alternative JSON response using ujson. It shows how to import and use UJSONResponse in the path operation decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import UJSONResponse

app = FastAPI()

@app.get("/items/", response_class=UJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Base Model for User Data
DESCRIPTION: Defines a base Pydantic model UserBase with common fields and then creates specialized models UserIn, User, and UserInDB inheriting from it. This reduces code duplication and ensures consistency across different user models.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/extra-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class UserBase(BaseModel):
    username: str
    email: str
    full_name: Optional[str] = None


class UserIn(UserBase):
    password: str


class User(UserBase):
    pass


class UserInDB(UserBase):
    hashed_password: str
```

----------------------------------------

TITLE: Using StreamingResponse with file-like objects in FastAPI
DESCRIPTION: Creates a generator function that yields content from a file-like object to stream it as a response without loading everything into memory first. The with block ensures the file is properly closed after streaming completes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()


@app.get("/")
def main():
    def iterfile():  # (1)
        with open("large-file.txt", mode="rb") as file_like:  # (2)
            yield from file_like  # (3)

    return StreamingResponse(iterfile())

```

----------------------------------------

TITLE: Scalar Values in the Body with FastAPI
DESCRIPTION: Illustrates how to include scalar values in the request body using the Body parameter.  This example demonstrates how to explicitly define a scalar value as part of the request body, ensuring FastAPI treats it as such.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body-multiple-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Body

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


class User(BaseModel):
    username: str
    full_name: Union[str, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(),
    q: Union[str, None] = None,
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    results.update({"item": item, "user": user, "importance": importance})
    return results
```

----------------------------------------

TITLE: Using Pydantic Models in FastAPI Applications
DESCRIPTION: Shows how to instantiate and use Pydantic models in FastAPI. The example demonstrates direct initialization and dictionary unpacking to create model instances with automatic validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/features.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Response Model Basic Configuration
DESCRIPTION: Demonstrates how to define and use response models using Pydantic models in FastAPI endpoints
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-model.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
response_model = UserOut
```

----------------------------------------

TITLE: Generic List Type (Python 3.9+)
DESCRIPTION: Demonstrates type hints for lists using Python 3.9+ syntax.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def process_items(items: list[str]):
    for item in items:
        print(item)
```

----------------------------------------

TITLE: Defining the __call__ Method (Python)
DESCRIPTION: The `__call__` method contains the core dependency logic that FastAPI will execute. It receives parameters like query or path parameters and should return the value that will be injected into the path operation function parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/advanced-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
def __call__(self, q: str):
```

----------------------------------------

TITLE: Accessing Request Object Directly in FastAPI Path Operation Function
DESCRIPTION: This example demonstrates how to inject and use the Request object in a FastAPI path operation function alongside regular path parameters. The code retrieves the client's host information through the Request object while still using normal path parameter validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/using-request-directly.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request

app = FastAPI()


@app.get("/items/{item_id}")
def read_root(item_id: str, request: Request):
    client_host = request.client.host
    return {"client_host": client_host, "item_id": item_id}
```

----------------------------------------

TITLE: Converting Input Data with jsonable_encoder in PUT Request
DESCRIPTION: Code snippet showing how to update an item using HTTP PUT, converting the input data to a JSON-compatible format using jsonable_encoder before storing it.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-updates.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: str, item: Item = Body(embed=True)
):
    update_item_encoded = jsonable_encoder(item)
    items[item_id] = update_item_encoded
    return update_item_encoded
```

----------------------------------------

TITLE: Configuring Pydantic Settings to Read from .env File in Python
DESCRIPTION: This code snippet demonstrates how to configure a Pydantic Settings class to read settings from a .env file. It defines a Config class within the Settings class and sets the env_file attribute to the name of the .env file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/settings.md#_snippet_6

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings


class Settings(BaseSettings):
    admin_email: str = "admin@example.com"
    app_name: str = "Awesome API"

    class Config:
        env_file = ".env"
```

----------------------------------------

TITLE: Deleting a Hero
DESCRIPTION: This snippet demonstrates deleting a hero by ID. The endpoint retrieves a hero, deletes it from the database, and commits the changes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
"@app.delete("/heroes/{hero_id}")
async def delete_hero(hero_id: int, db: Session = Depends(get_db)):
    hero = db.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    db.delete(hero)
    db.commit()
    return {"ok": True}"
```

----------------------------------------

TITLE: Installing HTTPX for TestClient in Python
DESCRIPTION: Command to install HTTPX, which is required for using TestClient in FastAPI testing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install httpx
```

----------------------------------------

TITLE: Setting Cookies with Response Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to use a `Response` parameter in a FastAPI path operation function to set cookies.  A temporary `Response` object is used to set the cookie, and then the function returns the desired data, which is then filtered by the `response_model` if defined. The example showcases the setting of a cookie named "example-cookie".
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-cookies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"""\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_items(item_id: str, response: Response):\n    response.set_cookie(key="example-cookie", value="some-cookie-value")\n    return {"item_id": item_id}\n"""
```

----------------------------------------

TITLE: Combining Multiple Body and Query Parameters in FastAPI
DESCRIPTION: Shows how to define a path operation that accepts multiple Pydantic models in the request body, a singular value in the body using `Body()`, and also includes an optional query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-multiple-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import Body

@app.post("/items/{item_id}")
async def create_item(item_id: int, item: Item, user: User, importance: int = Body(), q: str | None = None):
    results = {"item_id": item_id, "item": item, "user": user, "importance": importance}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Creating a Basic Dockerfile for FastAPI Application Using Official Image
DESCRIPTION: A simple Dockerfile that uses the official tiangolo/uvicorn-gunicorn-fastapi image as a base. It copies the requirements file, installs dependencies, and copies the application code into the container.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Sequence Diagram for lru_cache Behavior
DESCRIPTION: Mermaid sequence diagram showing how a function decorated with @lru_cache behaves with repeated and different calls. The diagram illustrates when the function executes its code versus when it returns stored results.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/settings.md#2025-04-21_snippet_1

LANGUAGE: mermaid
CODE:
```
sequenceDiagram

participant code as Código
participant function as say_hi()
participant execute as Ejecutar función

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Camila")
        function ->> execute: ejecutar código de la función
        execute ->> code: devolver el resultado
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Camila")
        function ->> code: devolver resultado almacenado
    end

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Rick")
        function ->> execute: ejecutar código de la función
        execute ->> code: devolver el resultado
    end

    rect rgba(0, 255, 0, .1)
        code ->> function: say_hi(name="Rick", salutation="Mr.")
        function ->> execute: ejecutar código de la función
        execute ->> code: devolver el resultado
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Rick")
        function ->> code: devolver resultado almacenado
    end

    rect rgba(0, 255, 255, .1)
        code ->> function: say_hi(name="Camila")
        function ->> code: devolver resultado almacenado
    end
```

----------------------------------------

TITLE: Configuring CORSMiddleware in FastAPI
DESCRIPTION: This code snippet demonstrates how to configure CORS (Cross-Origin Resource Sharing) in a FastAPI application using the `CORSMiddleware`. It sets up allowed origins, credentials, methods, and headers to enable cross-origin requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/cors.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

origins = [
    "http://localhost:8080",
    "https://localhost:8080",
    "http://localhost",
    "https://localhost",
    "http://127.0.0.1:8080",
    "https://127.0.0.1:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

----------------------------------------

TITLE: FastAPI Callback Path Operation Definition
DESCRIPTION: This snippet defines a path operation within the callback router, showcasing how to document the expected request body and response model for the callback API. The path uses an OpenAPI expression to dynamically construct the URL based on the original request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"from typing import Optional

from fastapi import APIRouter, FastAPI, Query
from pydantic import BaseModel, Url

app = FastAPI()


invoices_callback_router = APIRouter()


class Invoice(BaseModel):
    id: str
    title: Optional[str] = None
    customer: str
    total: float


class InvoiceEvent(BaseModel):
    description: str
    paid: bool


class InvoiceEventReceived(BaseModel):
    ok: bool


@invoices_callback_router.post("/invoices/{$request.body.id}", response_model=InvoiceEventReceived)
async def invoice_callback(body: InvoiceEvent):
    pass


@app.post("/invoices", callbacks=invoices_callback_router.routes)
async def create_invoice(
    invoice: Invoice,
    callback_url: Url = Query(
        ...,
        description="URL to send notifications when the invoice is processed.",
    ),
):
    return {"id": invoice.id}"
```

----------------------------------------

TITLE: Defining File and Form Parameters in FastAPI
DESCRIPTION: This code demonstrates how to define parameters for file uploads and form data in a FastAPI route. It shows the use of File and Form decorators to specify the expected input types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def create_file(file: bytes = File(), fileb: UploadFile = File(), token: str = Form()):
```

----------------------------------------

TITLE: Configuring Swagger UI - Override Default Parameter - Python
DESCRIPTION: Illustrates how to override one of FastAPI's default Swagger UI parameters, such as `deepLinking`. This is achieved by passing the desired parameter key and its new value (e.g., `False`) in the `swagger_ui_parameters` dictionary when creating the FastAPI application, effectively changing the default behavior.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/how-to/configure-swagger-ui.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(swagger_ui_parameters={"deepLinking": False})
```

----------------------------------------

TITLE: Using Child Model as a Type
DESCRIPTION: Shows how to use a previously defined Pydantic model (`Image`) as the type of an attribute in another Pydantic model (`Item`). This creates a nested model structure.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-nested-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list[str] = []
    image: Optional[Image] = None
```

----------------------------------------

TITLE: Defining Form Parameters in Python
DESCRIPTION: This snippet demonstrates how to define form parameters within a FastAPI endpoint using the `Form` class.  It shows how to specify default values and metadata for the form fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/request-forms.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"@app.post("/login/")
async def login(username: str = Form(...), password: str = Form(...)):
    return {"username": username, "password": password}"
```

----------------------------------------

TITLE: Defining a Path Parameter Containing a Path in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a path parameter that can contain a path itself, using Starlette's path converter. The `:path` suffix in the path parameter declaration indicates that the parameter should match any path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_9

LANGUAGE: python
CODE:
```
@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
```

----------------------------------------

TITLE: Dependency Raising HTTPException FastAPI Python
DESCRIPTION: Illustrates that dependency functions used in the `dependencies` list can raise `HTTPException` or other exceptions, just like regular dependencies or path operations, halting execution if the condition is not met (e.g., invalid key/token).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import Depends, HTTPException, status

# Assume common_parameters is defined elsewhere
# async def common_parameters(...): ...

async def verify_key(x_key: str = Depends(common_parameters)):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="X-Key header invalid")
    pass # Simplified

async def verify_token(x_token: str = Depends(common_parameters)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="X-Token header invalid")
    pass # Simplified
```

----------------------------------------

TITLE: Using UJSONResponse in FastAPI
DESCRIPTION: This code snippet shows how to use `UJSONResponse` as a faster alternative to the default `JSONResponse`. It imports the `UJSONResponse` class and declares it in the *path operation decorator*.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import UJSONResponse

app = FastAPI()


@app.get("/items/", response_class=UJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Including APIRouters for Users and Items in FastAPI
DESCRIPTION: Includes the `users` and `items` routers in the main FastAPI application. `app.include_router()` adds all routes from each router to the main application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_15

LANGUAGE: Python
CODE:
```
from .routers import items
from .routers import users

from fastapi import FastAPI

app = FastAPI()


app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Copying Requirements File in Dockerfile
DESCRIPTION: This command copies the `requirements.txt` file from the host machine to the `/code` directory within the Docker image.  Copying the requirements file separately from the rest of the application code leverages Docker's caching mechanism to optimize image build times. Since the requirements file changes less frequently, Docker can cache this step and the subsequent dependency installation step.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_2

LANGUAGE: Dockerfile
CODE:
```
"COPY ./requirements.txt /code/requirements.txt"
```

----------------------------------------

TITLE: Preprocess OpenAPI Specification
DESCRIPTION: This Python script preprocesses the OpenAPI specification to remove the tag prefix from operation IDs. It loads the OpenAPI JSON from a file, iterates through the paths, and modifies the operation IDs to remove the tag. This results in cleaner method names when generating client code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/generate-clients.md#_snippet_6

LANGUAGE: Python
CODE:
```
import json

openapi_json_file = 'openapi.json'

with open(openapi_json_file) as f:
    data = json.load(f)

for path, path_item in data['paths'].items():
    for operation, operation_item in path_item.items():
        operation_id = operation_item.get('operationId')
        if operation_id:
            new_operation_id = operation_id.split('-')[-1]
            operation_item['operationId'] = new_operation_id

with open('openapi_updated.json', 'w') as f:
    json.dump(data, f, indent=2)

```

----------------------------------------

TITLE: Creating a Dependent Injectable in FastAPI
DESCRIPTION: This code defines a dependency that both injects and depends on another dependency. It uses the query_extractor and also checks for a cookie, demonstrating nested dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
async def query_or_cookie_extractor(q: Annotated[str, Depends(query_extractor)], last_query: str | None = Cookie(default=None)):
```

----------------------------------------

TITLE: Serving Static Files in FastAPI (Python)
DESCRIPTION: This code demonstrates how to serve static files, such as JavaScript and CSS assets, directly from a local directory (`./static`) using FastAPI's `StaticFiles`. The `app.mount` method makes the contents of the specified directory available under the `/static` URL path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.staticfiles import StaticFiles

# ... other app setup ...

app.mount("/static", StaticFiles(directory="static"), name="static")
```

----------------------------------------

TITLE: User Authentication and Error Handling
DESCRIPTION: Validate user credentials and handle authentication failures using HTTPException for unauthorized access attempts
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
raise HTTPException(status_code=400, detail="Incorrect username or password")
```

----------------------------------------

TITLE: Adding Custom Tags and Responses to FastAPI Router
DESCRIPTION: Shows how to add custom tags and responses to a specific path operation in a FastAPI router, in addition to the tags and responses applied to the entire router.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
@router.get("/users/{user_id}/items/{item_id}", tags=["custom"], responses={403: {"description": "Operation forbidden"}})
```

----------------------------------------

TITLE: Displaying FastAPI Creator Information with Jinja2 Template
DESCRIPTION: This code snippet uses Jinja2 templating to display information about the creator of FastAPI, including their GitHub profile, avatar, and contribution statistics.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_0

LANGUAGE: jinja2
CODE:
```
<div class="user-list user-list-center">
{% for user in people.maintainers %}

<div class="user"><a href="{{ contributors.tiangolo.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ contributors.tiangolo.avatarUrl }}"/></div><div class="title">@{{ contributors.tiangolo.login }}</div></a> <div class="count">Answers: {{ user.answers }}</div><div class="count">Pull Requests: {{ contributors.tiangolo.count }}</div></div>
{% endfor %}

</div>
```

----------------------------------------

TITLE: Defining File Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to define a file parameter in a FastAPI path operation function using the `File` dependency. It shows how to receive a file as bytes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/request-files.md#_snippet_1

LANGUAGE: python
CODE:
```
async def create_file(file: bytes = File()):
    return {"file_size": len(file)}
```

----------------------------------------

TITLE: Starting FastAPI Application with Uvicorn
DESCRIPTION: This snippet describes how to run a FastAPI application using Uvicorn. It initializes the main application and allows for live reloading during development. The command uses 'main.py' as the entry point.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/sub-applications.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: FastAPI Test File
DESCRIPTION: This example shows how to create a test file (test_main.py) to test the FastAPI application defined in main.py. It imports the app object from main.py using relative imports.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/testing.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from .main import app


client = TestClient(app)


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Reading Environment Variables with Python
DESCRIPTION: This code snippet demonstrates how to read environment variables using Python's `os.getenv()` function.  It imports the `os` module and uses `os.getenv()` to retrieve the value of the environment variable "MY_NAME", providing a default value of "World" if the variable is not set. The value is then used in a print statement.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Defining Cookie Parameters with Pydantic in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare multiple cookie parameters using a Pydantic model in a FastAPI application. It defines a Pydantic model with fields representing cookie parameters and then uses this model as a dependency in a FastAPI route to extract and validate the cookies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"""python
from typing import Union

from fastapi import Cookie, Depends, FastAPI
from pydantic import BaseModel

app = FastAPI()


class Ads(BaseModel):
    dark_mode: Union[bool, None] = None
    items_per_page: int


@app.get("/")
async def read_ads(ads: Ads = Depends()):
    return ads
"""
```

----------------------------------------

TITLE: Initializing class instance
DESCRIPTION: This is an example of creating class instance using `__init__`
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Installing Hypercorn with Trio Support
DESCRIPTION: This command installs Hypercorn with Trio support, allowing the use of Trio as a backend for the ASGI server.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/manually.md#_snippet_4

LANGUAGE: console
CODE:
```
$ pip install "hypercorn[trio]"
---> 100%
```

----------------------------------------

TITLE: Using HttpUrl for URL Validation
DESCRIPTION: Demonstrates how to use Pydantic's `HttpUrl` type for validating that a string is a valid URL.  This ensures that the `url` field in the `Image` model contains a valid HTTP URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, HttpUrl


class Image(BaseModel):
    url: HttpUrl
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list[str] = []
    image: Optional[Image] = None
```

----------------------------------------

TITLE: Adding Body Parameter Example using example (Python)
DESCRIPTION: This snippet illustrates how to provide a single example for a request body parameter using the `example` parameter within the `Body()` function. This adds a single example payload directly to the documentation for this specific operation parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/schema-extra-example.md#_snippet_2

LANGUAGE: python
CODE:
```
item: Item = Body(
    example={
        "name": "Foo",
        "description": "A very nice Item",
        "price": 35.4,
        "tax": 3.2,
    },
)
```

----------------------------------------

TITLE: Handling Body, Route, and Query Parameters in FastAPI
DESCRIPTION: This code demonstrates FastAPI's ability to manage request body, route parameters, and query parameters concurrently. It showcases how FastAPI automatically infers the source of each parameter based on its type and declaration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body.md#_snippet_5

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item, q: Union[str, None] = None):
    results = {"item_id": item_id, **item.dict()}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Defining a Nested Pydantic Model
DESCRIPTION: Creation of a Pydantic model called Image with url and name fields that can be used as a nested model within other models.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
class Image:
    url: str
    name: str
```

----------------------------------------

TITLE: Installing Development Requirements with pip
DESCRIPTION: Command to install all development dependencies for FastAPI using pip within a virtual environment. This installs packages listed in requirements.txt, including a local editable version of FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install -r requirements.txt

---> 100%
```

----------------------------------------

TITLE: Overriding Request Validation Exception Handler in FastAPI
DESCRIPTION: This code snippet shows how to override the default exception handler for `RequestValidationError` in FastAPI. It imports `RequestValidationError` and uses it with `@app.exception_handler()` to define a custom handler that returns a plain text response instead of the default JSON error when request validation fails.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse

app = FastAPI()


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=400,
        content={"detail": exc.errors()},
    )


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}

```

----------------------------------------

TITLE: Configuring Additional Servers with FastAPI
DESCRIPTION: This code snippet demonstrates how to configure additional servers in FastAPI using the 'servers' parameter. It shows how FastAPI automatically includes the 'root_path' server at the beginning of the list when a 'root_path' is defined.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    servers=[
        {"url": "https://stag.example.com", "description": "Staging environment"},
        {"url": "https://prod.example.com", "description": "Production environment"},
    ]
)
```

----------------------------------------

TITLE: Expected JSON Body with Embedded Item
DESCRIPTION: This JSON snippet shows the expected structure of the request body when the `embed` parameter is set to `True`. The `Item` model's data is nested under the 'item' key.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body-multiple-params.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "item": {
        "name": "Foo",
        "description": "The pretender",
        "price": 42.0,
        "tax": 3.2
    }
}
```

----------------------------------------

TITLE: Building a Basic Docker Image for FastAPI Applications
DESCRIPTION: A Dockerfile template for containerizing FastAPI applications. It starts from a Python 3.9 base image, sets up the working directory, copies requirements, installs dependencies, and adds the application code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["fastapi", "run", "app/main.py", "--port", "80"]

# Si estás detrás de un proxy como Nginx o Traefik añade --proxy-headers
# CMD ["fastapi", "run", "app/main.py", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Reading Environment Variables in Python
DESCRIPTION: Demonstrates how to read environment variables in Python using os.getenv() with a default fallback value. The code shows reading a MY_NAME variable and printing it with string formatting.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/environment-variables.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Deeply Nested Pydantic Models
DESCRIPTION: This code demonstrates deeply nested Pydantic models. The `Image` model is nested within the `Item` model, and the `Item` model is nested within the `Offer` model. This allows for complex data structures to be validated and serialized.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-nested-models.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import List, Optional

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: Optional[str] = None


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: List[str] = []
    images: Optional[List[Image]] = None


class Offer(BaseModel):
    name: str
    items: List[Item]
```

----------------------------------------

TITLE: Function With Type Hints and Type Conversion - Python
DESCRIPTION: Shows the corrected version of a Python function with type hints, demonstrating how to resolve a type error by explicitly converting an integer to a string before concatenation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_6

LANGUAGE: Python
CODE:
```
def get_name_and_age(name: str, age: int):
    return name + " is " + str(age)
```

----------------------------------------

TITLE: Importing APIRouter in users.py
DESCRIPTION: Imports the APIRouter class from FastAPI to create a router instance for user-related endpoints. This allows defining path operations in a modular way.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()
```

----------------------------------------

TITLE: UploadFile with Additional Metadata in FastAPI
DESCRIPTION: This snippet shows how to use `File()` with `UploadFile` to set additional metadata for the uploaded file. The `File()` function allows adding constraints or configurations for the file upload.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-files.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, File, UploadFile

app = FastAPI()


@app.post("/files/")
async def create_file(file: bytes = File(description="A file to upload")):
    return {"file_size": len(file)}


@app.post("/uploadfiles/")
async def create_upload_file(file: UploadFile = File(description="A file to upload")):
    return {"filename": file.filename}"
```

----------------------------------------

TITLE: Declaring Variable with Custom Class Type Hint (Python)
DESCRIPTION: Demonstrates how to declare a variable and provide a type hint using a custom Python class (e.g., `Person`). This indicates that the variable is expected to hold an instance of that class, enabling editor support for attribute access.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_17

LANGUAGE: Python
CODE:
```
one_person: Person = Person(name="John Doe")
```

----------------------------------------

TITLE: Initializing APIRouter with Custom Route Class in FastAPI
DESCRIPTION: This code snippet demonstrates how to initialize an APIRouter with a custom route class, TimedRoute, which will be used for all routes defined within that router. The route_class parameter is set to TimedRoute during the APIRouter initialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-request-and-route.md#_snippet_4

LANGUAGE: Python
CODE:
```
router = APIRouter(route_class=TimedRoute)
```

----------------------------------------

TITLE: Path Parameter Declaration with Enum
DESCRIPTION: This example shows how to declare a path parameter using the Enum class created earlier. The type annotation `ModelName` ensures that the path parameter can only accept the values defined in the Enum.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    return {"model_name": model_name, "message": "Have some residuals?"}
```

----------------------------------------

TITLE: Adding .gitignore entry for the virtual environment
DESCRIPTION: This command adds an entry to the `.gitignore` file to exclude the `.venv` directory from Git version control. It uses `echo` to write the wildcard `*` (representing all files) into the `.venv/.gitignore` file, preventing the virtual environment's contents from being tracked by Git.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_9

LANGUAGE: Shell
CODE:
```
```console
$ echo "*" > .venv/.gitignore
```
```

----------------------------------------

TITLE: Overriding HTTPException Handler in FastAPI
DESCRIPTION: This code snippet shows how to override the default HTTPException handler in FastAPI. It imports HTTPException from Starlette and defines a custom exception handler that returns a plain text response instead of JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/handling-errors.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException
from fastapi.responses import PlainTextResponse
from starlette.exceptions import HTTPException as StarletteHTTPException
from starlette.requests import Request

app = FastAPI()


@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(
    request: Request, exc: StarletteHTTPException
):
    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    if item_id == 3:
        raise HTTPException(status_code=418, detail="Nope! I don't like 3.")
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Installing Dependencies in Dockerfile
DESCRIPTION: This command uses `pip` to install the Python package dependencies listed in the `/code/requirements.txt` file within the Docker image. The `--no-cache-dir` option prevents `pip` from storing downloaded packages locally, saving space in the image.  The `--upgrade` flag ensures that packages are updated if they are already installed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_3

LANGUAGE: Dockerfile
CODE:
```
"RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt"
```

----------------------------------------

TITLE: PlainTextResponse in FastAPI
DESCRIPTION: Shows how to use PlainTextResponse to return a plain text response. It demonstrates the import and usage in the path operation decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()

@app.get("/", response_class=PlainTextResponse)
async def main():
    return "Hello World"
```

----------------------------------------

TITLE: Creating a project directory
DESCRIPTION: These commands create a directory for the new Python project inside the user's code directory. It navigates to the home directory, creates 'code', then 'awesome-project', and enters the project directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
```console
// Vá para o diretório inicial
$ cd
// Crie um diretório para todos os seus projetos de código
$ mkdir code
// Entre nesse diretório de código
$ cd code
// Crie um diretório para este projeto
$ mkdir awesome-project
// Entre no diretório do projeto
$ cd awesome-project
```
```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: This command installs Uvicorn, an ASGI server, using pip.  Uvicorn is required to run FastAPI applications in a production environment. The "[standard]" extra installs recommended dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Reading Custom Header Dependency (Python 3.8+ non-Annotated)
DESCRIPTION: This code defines a dependency to read a custom `X-Token` header from the request. It raises an HTTP exception if the token is invalid.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException


async def verify_token(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")
```

----------------------------------------

TITLE: Adding Summary and Description to FastAPI Endpoints
DESCRIPTION: Example of adding summary and description metadata to FastAPI path operations using decorator parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.get(
    "/items/",
    summary="Create an item",
    description="Create an item with all the information")
```

----------------------------------------

TITLE: Setting Cookies by Returning a Response Directly in FastAPI
DESCRIPTION: This code snippet demonstrates how to set a cookie in a FastAPI route by returning a `Response` object directly. It creates a `Response` object with content and sets a cookie named "some_cookie" with a value of "some_value".
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/response-cookies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.get("/")\nasync def read_root():\n    content = "<html><body><h1>Hello, world!</h1></body></html>"\n    response = Response(content=content, media_type="text/html")\n    response.set_cookie(key="some_cookie", value="some_value")\n    return response"
```

----------------------------------------

TITLE: Deactivating and Activating Virtual Environments in Console
DESCRIPTION: This snippet shows the process of deactivating the current virtual environment, navigating to a new project directory, and activating the correct virtual environment for that project.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_33

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban

// You don't need to be in the old directory to deactivate, you can do it wherever you are, even after going to the other project 😎
$ deactivate

// Activate the virtual environment in prisoner-of-azkaban/.venv 🚀
$ source .venv/bin/activate

// Now when you run python, it will find the package sirius installed in this virtual environment ✨
$ python main.py

I solemnly swear 🐺
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies (Console)
DESCRIPTION: This console command installs the FastAPI library along with the standard extras package. The standard extras include dependencies like Uvicorn, which is needed to run the FastAPI application server, and other common libraries. Ensure you have a virtual environment activated before running this command.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Using OAuth2PasswordBearer as a Dependency
DESCRIPTION: This snippet demonstrates how to use the OAuth2PasswordBearer instance as a dependency in a path operation function. FastAPI will use this dependency to define a security scheme in the OpenAPI schema and automatic API documentation. The dependency provides a string representing the token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Running FastAPI App in Development
DESCRIPTION: This command starts the FastAPI application in development mode, automatically reloading on code changes. It infers the app instance from the specified Python file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/fastapi-cli.md#_snippet_0

LANGUAGE: bash
CODE:
```
fastapi dev <u style="text-decoration-style:single">main.py</u>
```

----------------------------------------

TITLE: RedirectResponse with status_code in FastAPI
DESCRIPTION: This example shows how to combine the `response_class` parameter with the `status_code` parameter when using `RedirectResponse`. It allows setting a specific status code for the redirect.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/redirect", response_class=RedirectResponse, status_code=302)  # HL
async def redirect():
    return "https://www.example.com"  # HL

```

----------------------------------------

TITLE: Define HeroPublic Data Model
DESCRIPTION: Defines the `HeroPublic` data model used for returning hero data to API clients. It inherits from `HeroBase` and explicitly declares `id: int` to ensure the ID is always present and an integer in the API response, excluding the `secret_name`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Optional
from sqlmodel import SQLModel

class HeroBase(SQLModel):
    name: str
    age: Optional[int] = None

class HeroPublic(HeroBase):
    id: int
```

----------------------------------------

TITLE: SecurityScopes Usage in Dependency
DESCRIPTION: This code snippet illustrates how to use SecurityScopes in a dependency to manage and validate required scopes. It declares a SecurityScopes object and uses its scopes attribute to check if the user has the necessary permissions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/security/oauth2-scopes.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.security import SecurityScopes


async def get_current_user(
    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)
):
```

----------------------------------------

TITLE: Numeric Validation: Greater Than or Equal in FastAPI (Python)
DESCRIPTION: Example of using 'ge' (greater than or equal) numeric validation with Path in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
item_id: Annotated[int, Path(title="The ID of the item to get", ge=1)]
```

----------------------------------------

TITLE: Multiple File Uploads with Metadata in FastAPI
DESCRIPTION: This code shows how to handle multiple file uploads with additional metadata in FastAPI using the File class and UploadFile.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
{* ../../docs_src/request_files/tutorial003_an_py39.py hl[11,18:20] *}
```

----------------------------------------

TITLE: Importing FastAPI app for testing
DESCRIPTION: This snippet shows how to import a FastAPI application instance from a main module into a test module using relative imports. This is useful for testing applications that are structured across multiple files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Python
CODE:
```
from ..main import app
```

----------------------------------------

TITLE: Lanzando HTTPException en path operation para validación
DESCRIPTION: Ejemplo de cómo lanzar un HTTPException cuando se valida un ítem en una ruta específica.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail="Nope! I don't like 3.")\n    return {"item_id": item_id}
```

----------------------------------------

TITLE: Installing Jinja2 via pip
DESCRIPTION: Command to install the Jinja2 template engine using pip in the command line. Ensure that a virtual environment is activated before running this command.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/templates.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install jinja2
```

----------------------------------------

TITLE: Adding Regex Pattern Validation to a Query Parameter
DESCRIPTION: Demonstrates using a regular expression pattern to validate a query parameter, ensuring it exactly matches 'fixedquery'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query
from typing import Annotated

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Annotated[
        str | None, Query(min_length=3, max_length=50, pattern="^fixedquery$")
    ] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Creating a Dockerfile for a Single-File FastAPI App
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the requirements file and main.py, installs dependencies, and runs the FastAPI application using Uvicorn. It assumes the FastAPI application consists of a single main.py file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_17

LANGUAGE: dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)
COPY ./main.py /code/

# (2)
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Declaring Examples with Field() in Pydantic Model (Python)
DESCRIPTION: This code shows how to use Field() with Pydantic models to declare additional examples. The examples are specified directly in the field definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: str = Field(examples=["Foo"])
    description: str | None = Field(default=None, examples=["A very nice Item"])
    price: float = Field(examples=[35.4])
    tax: float | None = Field(default=None, examples=[3.2])
```

----------------------------------------

TITLE: Creating a Virtual Environment with uv
DESCRIPTION: This command uses the uv tool to create a virtual environment. By default, it creates the environment in a directory named .venv.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ uv venv
```

----------------------------------------

TITLE: Using Regular Expressions for Query Parameter Validation in FastAPI
DESCRIPTION: This code shows how to use a regular expression to validate the format of a query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
q: str = Query(default=None, min_length=3, max_length=50, regex="^fixedquery$")
```

----------------------------------------

TITLE: Importing and Creating APIRouter in FastAPI (Python)
DESCRIPTION: This snippet shows how to import APIRouter from FastAPI and create an instance of it in a users module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()
```

----------------------------------------

TITLE: Defining Servers in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a list of servers for a FastAPI application, including URLs for staging and production environments. FastAPI automatically inserts a server with the root_path at the beginning of the list if a root_path is configured.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_11

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    servers=[
        {"url": "https://stag.example.com", "description": "Staging environment"},
        {"url": "https://prod.example.com", "description": "Production environment"},
    ]
)
```

----------------------------------------

TITLE: Importing and Creating FastAPI Instance
DESCRIPTION: This code snippet demonstrates how to import and create a FastAPI instance, as well as how to declare global dependencies that will be combined with the dependencies of each APIRouter. It imports the FastAPI class and the `get_query_token` dependency.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

from .dependencies import get_query_token
from .routers import items, users

app = FastAPI(dependencies=[Depends(get_query_token)])


app.include_router(users.router)
app.include_router(items.router)

```

----------------------------------------

TITLE: Using Depends in WebSocket Endpoints
DESCRIPTION: Demonstrates how to use the `Depends` function to inject dependencies into a WebSocket endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/websockets.md#_snippet_6

LANGUAGE: Python
CODE:
```
async def get_cookie_or_token(websocket: WebSocket, cookie: Optional[str] = Cookie(None), token: Optional[str] = None):
    if cookie is None and token is None:
        raise WebSocketException(code=1008, reason="No cookies or token received")
    if cookie:
        return cookie
    return token

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket, q: Optional[str] = None, cookie_or_token: str = Depends(get_cookie_or_token)):
    ...
```

----------------------------------------

TITLE: Single File Upload with UploadFile - Python FastAPI
DESCRIPTION: Example demonstrating file upload handling using UploadFile class in FastAPI
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.post("/uploadfile/")
async def create_upload_file(
    file: UploadFile
):
```

----------------------------------------

TITLE: Using BackgroundTasks with Dependency Injection in FastAPI
DESCRIPTION: This code shows how to use BackgroundTasks with dependency injection in FastAPI, allowing background tasks to be used in multiple functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import BackgroundTasks, Depends, FastAPI

app = FastAPI()


def write_log(message: str):
    with open("log.txt", mode="a") as log:
        log.write(message)


def get_query(background_tasks: BackgroundTasks, q: str | None = None):
    if q:
        message = f"found query: {q}\n"
        background_tasks.add_task(write_log, message)
    return q


@app.post("/send-notification/{email}")
def send_notification(
    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)
):
    message = f"message to {email}\n"
    background_tasks.add_task(write_log, message)
    return {"message": "Message sent"}
```

----------------------------------------

TITLE: RedirectResponse with response_class in FastAPI
DESCRIPTION: Demonstrates using RedirectResponse with the response_class parameter, allowing direct return of the URL from the path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer", response_class=RedirectResponse)
async def redirect_typer():
    return "https://typer.tiangolo.com"
```

----------------------------------------

TITLE: Settings in a separate config module
DESCRIPTION: This shows how to define a Pydantic `Settings` class within a dedicated `config.py` module. This allows for better organization and separation of configuration from the main application logic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Creating main.py with security features
DESCRIPTION: This code snippet demonstrates how to create a FastAPI application with OAuth2 password flow for user authentication. It includes defining an endpoint to receive username and password, and generating a token upon successful authentication.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Pydantic Model Usage
DESCRIPTION: Shows how to create instances of the 'User' Pydantic model, both by directly passing arguments and by unpacking a dictionary. Demonstrates the flexibility of Pydantic for data input.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/features.md#_snippet_2

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Running Uvicorn Server in Python
DESCRIPTION: Code to directly run a Uvicorn server within a FastAPI application, using the __name__ == "__main__" pattern to ensure the server only runs when the file is executed directly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from myapp import app
```

----------------------------------------

TITLE: Configuration as a Dependency (config.py)
DESCRIPTION: This code defines a `Settings` class in `config.py` without creating a default instance, preparing it to be used as a dependency.  The `Settings` class utilizes Pydantic's `BaseSettings` and `EmailStr` for type validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings, EmailStr


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: EmailStr
    items_per_user: int = 50
```

----------------------------------------

TITLE: Resetting Dependency Overrides in FastAPI - Python
DESCRIPTION: This snippet demonstrates how to reset all dependency overrides by setting `app.dependency_overrides` to an empty dictionary. This is useful for ensuring that overrides used in one test do not affect other tests. There are no special dependencies or parameters needed; it simply requires access to the FastAPI application object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/testing-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
app.dependency_overrides = {}
```

----------------------------------------

TITLE: Boolean Query Parameter Conversion in FastAPI
DESCRIPTION: This snippet shows how to declare a boolean query parameter 'short' in FastAPI. The framework will automatically convert various string inputs to boolean values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def read_item(item_id: str, short: bool = False):
```

----------------------------------------

TITLE: Multiple Path and Query Parameters in FastAPI
DESCRIPTION: This example illustrates how to use multiple path and query parameters in a single FastAPI route. The framework correctly identifies each parameter type based on its declaration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def read_user_item(user_id: int, item_id: str, q: str | None = None, short: bool = False):
```

----------------------------------------

TITLE: Basic Async Function Call Example in Python
DESCRIPTION: Example showing how to call an async third-party library function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
results = await some_library()
```

----------------------------------------

TITLE: Defining an API endpoint in FastAPI
DESCRIPTION: This snippet shows how to define a simple API endpoint in FastAPI using the `@app.get` decorator.  This endpoint returns a JSON response with a "message" key.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/alternatives.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"@app.get(\"/some/url\")
def read_url():
    return {\"message\": \"Hello World\"}"
```

----------------------------------------

TITLE: Function with Type Hints
DESCRIPTION: This example shows how to add type hints to function parameters.  It demonstrates how type hints enable autocompletion in code editors.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: Creating and using AsyncClient for asynchronous requests
DESCRIPTION: This snippet demonstrates how to create an `AsyncClient` instance and use it to send asynchronous requests to a FastAPI application. The `await` keyword is used to ensure the requests are executed asynchronously.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/async-tests.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"{* ../../docs_src/async_tests/test_main.py hl[9:12] *}"
```

----------------------------------------

TITLE: Typed Path Parameter
DESCRIPTION: Declares the type of the path parameter `item_id` as an integer using Python type annotations. This enables editor support for error checking and autocompletion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Importing Header in FastAPI
DESCRIPTION: Import the Header class from FastAPI, which is required to define header parameters in route functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Header
```

----------------------------------------

TITLE: Removing Prefixed Tag from OpenAPI Operation IDs - Node.js
DESCRIPTION: This Node.js script modifies the OpenAPI JSON file to remove the prefixed tag from operation IDs, resulting in cleaner method names in the generated client. It reads the OpenAPI JSON, iterates through the paths and operations, modifies the operation IDs, and writes the modified JSON back to the file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/generate-clients.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const fs = require('fs');

fs.readFile('openapi.json', 'utf8', (err, data) => {
  if (err) {
    console.error(err);
    return;
  }

  const openapi = JSON.parse(data);

  for (const path in openapi.paths) {
    for (const operation in openapi.paths[path]) {
      const operationItem = openapi.paths[path][operation];
      const operationId = operationItem.operationId;

      if (!operationId) {
        continue;
      }

      const [tag, name] = operationId.split('-', 1);
      operationItem.operationId = name;
    }
  }

  fs.writeFile('openapi.json', JSON.stringify(openapi, null, 2), (err) => {
    if (err) {
      console.error(err);
    }
  });
});
```

----------------------------------------

TITLE: Defining a Pydantic Model in Python 3.8+
DESCRIPTION: This code snippet defines a Pydantic model with various fields and their corresponding type hints. Pydantic validates and converts data when an instance of the model is created. The `User` model is defined using `BaseModel` and includes fields like `id`, `name`, `signup_ts`, and `friends`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_21

LANGUAGE: python
CODE:
```
"from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(user.friends)
"
```

----------------------------------------

TITLE: FastAPI App with Tags
DESCRIPTION: This FastAPI snippet demonstrates using tags to separate path operations. The `items` and `users` path operations are grouped using the `tags` parameter, allowing for better organization and separation in the generated client code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


class User(BaseModel):
    username: str
    full_name: Union[str, None] = None


@app.post("/items/", tags=["items"])
async def create_item(item: Item):
    return item


@app.get("/items/{item_id}", tags=["items"])
async def read_item(item_id: int):
    return {"name": "Foo", "price": 50.2}


@app.post("/users/", tags=["users"])
async def create_user(user: User):
    return user

```

----------------------------------------

TITLE: Declaring an Item Model
DESCRIPTION: This code snippet shows how to declare a more complex `Item` model in Python. This is used within FastAPI to define the structure and types of data expected in a request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Using Pydantic models for form validation in FastAPI
DESCRIPTION: Example showing how to define a Pydantic model with form fields and use it as a Form parameter in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-form-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
hl[9:11,15]
```

----------------------------------------

TITLE: Creating a Custom GzipRequest Class in Python for FastAPI
DESCRIPTION: This code snippet defines a GzipRequest class that extends FastAPI's Request to handle gzip-compressed request bodies. It overrides the body() method to check for gzip Content-Encoding and decompress the body accordingly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class GzipRequest(Request):
    async def body(self) -> bytes:
        if not hasattr(self, "_body"):
            body = await super().body()
            if "gzip" in self.headers.getlist("Content-Encoding"):
                body = gzip.decompress(body)
            self._body = body
        return self._body
```

----------------------------------------

TITLE: Overriding Default Validation Error Handlers
DESCRIPTION: Examples of overriding FastAPI's default validation error handlers for custom error responses and formats.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/handling-errors.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi.exceptions import RequestValidationError
from fastapi.responses import PlainTextResponse
from starlette.exceptions import HTTPException as StarletteHTTPException

@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request, exc):
    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc):
    return PlainTextResponse(str(exc), status_code=400)
```

----------------------------------------

TITLE: Query Parameter with Default Value and Length Constraint
DESCRIPTION: Demonstrates setting a default value and minimum length for a query parameter
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query(min_length=3)] = "fixedquery"
```

----------------------------------------

TITLE: Dependency for Active User
DESCRIPTION: This snippet creates a dependency to check if the current user is active. It builds upon the get_current_user dependency and raises an HTTPException if the user is inactive.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/security/simple-oauth2.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from pydantic import BaseModel

app = FastAPI()

class User(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None

class UserInDB(User):
    hashed_password: str

users = {
    "johndoe": {
        "username": "johndoe",
        "password": "secret",
        "email": "johndoe@example.com",
        "full_name": "John Doe",
        "disabled": False,
        "hashed_password": "fakehashedsecret",
    },
    "alice": {
        "username": "alice",
        "password": "secret2",
        "email": "alice@example.com",
        "full_name": "Alice Alison",
        "disabled": True,
        "hashed_password": "fakehashedsecret",
    },
}


oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


def get_user(username: str) -> UserInDB | None:
    if username in users:
        user_dict = users[username]
        return UserInDB(**user_dict)
    return None


async def get_current_user(token: str = Depends(oauth2_scheme)) -> User:
    user = get_user(token)
    if not user:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Incorrect username or password", headers={"WWW-Authenticate": "Bearer"})
    return user


async def get_current_active_user(current_user: User = Depends(get_current_user)) -> User:
    if current_user.disabled:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Inactive user")
    return current_user


@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user_dict = users.get(form_data.username)
    if not user_dict:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Incorrect username or password")
    user = UserInDB(**user_dict)
    hashed_password = user.hashed_password
    if hashed_password != form_data.password:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Incorrect username or password")
    return {"access_token": user.username, "token_type": "bearer"}


@app.get("/users/me")
async def read_users_me(current_user: User = Depends(get_current_active_user)):
    return current_user
```

----------------------------------------

TITLE: Disable Automatic Root Path Server
DESCRIPTION: This code snippet shows how to disable the automatic inclusion of a server based on the root_path in the OpenAPI schema. This is achieved by setting the root_path_in_servers parameter to False when initializing the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_13

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(root_path_in_servers=False)
```

----------------------------------------

TITLE: Pydantic Model Definition
DESCRIPTION: Defines a Pydantic model with type annotations for data validation and conversion.  This example shows a basic Pydantic model with string and integer fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_18

LANGUAGE: Python
CODE:
```
from typing import List

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tags: List[str] = []


class Image(BaseModel):
    url: str
    name: str | None = None


class Offer(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: List[Item]

```

----------------------------------------

TITLE: Return Statement Type Example
DESCRIPTION: Shows a simple return statement with dictionary containing item details
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/index.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

LANGUAGE: Python
CODE:
```
return {"item_price": item.price}
```

----------------------------------------

TITLE: Install Uvicorn
DESCRIPTION: Install Uvicorn, an ASGI server, for running FastAPI applications in a production environment. The `[standard]` extra installs commonly used dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Creating a basic FastAPI application with async
DESCRIPTION: This Python code snippet demonstrates an asynchronous FastAPI application with two endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter. The `async def` syntax allows the routes to handle asynchronous operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/index.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get("/")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get("/items/{item_id}")\nasync def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}"
```

----------------------------------------

TITLE: Install HTTPX Dependency
DESCRIPTION: This command installs the httpx library, which is required for using the TestClient. Httpx is a fully featured HTTP client for Python 3.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/testing.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ pip install httpx
```

----------------------------------------

TITLE: Sample Python requirements.txt for FastAPI Project
DESCRIPTION: A basic requirements.txt file specifying FastAPI with standard extensions and Pydantic with appropriate version ranges to ensure compatibility.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
fastapi[standard]>=0.113.0,<0.114.0
pydantic>=2.7.0,<3.0.0
```

----------------------------------------

TITLE: Importing APIRouter and creating an instance in a users module
DESCRIPTION: Shows how to import the APIRouter class from FastAPI and instantiate it in a users module to organize path operations related to user management.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/bigger-applications.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()
```

----------------------------------------

TITLE: Path Parameter with Type
DESCRIPTION: Declares the type of the path parameter `item_id` as an integer using Python type annotations. This enables editor support, error checking, and autocompletion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Numeric Validation: Floating Point, Greater Than, Less Than in FastAPI
DESCRIPTION: This snippet extends numeric validation to floating-point numbers. It uses `gt` and `lt` to ensure a `price` parameter is greater than 0 and less than 1, making 0.5 a valid value but 0.0 and 0 invalid.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_items(\n    item_id: int,\n    q: str | None = None,\n    price: float = Query(gt=0, lt=1),\n):\n    results = {"item_id": item_id, "price": price}\n    if q:\n        results.update({"q": q})\n    return results"
```

----------------------------------------

TITLE: Running FastAPI with Multiple Workers using Uvicorn directly
DESCRIPTION: Example command for running a FastAPI application with 4 worker processes using the Uvicorn CLI directly. This specifies the host, port, and the number of worker processes to utilize multiple CPU cores.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/server-workers.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
```

----------------------------------------

TITLE: Numeric Validation: Greater Than or Equal
DESCRIPTION: Demonstrates how to validate path parameters with numeric constraints using ge (greater than or equal)
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
item_id: int = Path(ge=1)
```

----------------------------------------

TITLE: 挂载FastAPI子应用到顶层应用
DESCRIPTION: 将子应用挂载到顶层应用的指定路径(/subapi)下，使子应用成为顶层应用的一部分，但保持独立的文档和路径。
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/sub-applications.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
subapi = FastAPI()

app.mount("/subapi", subapi)
```

----------------------------------------

TITLE: Define HeroCreate Data Model
DESCRIPTION: Defines the `HeroCreate` data model used for validating data received from clients when creating a new hero. It inherits from `HeroBase` and includes the `secret_name` field, which is needed for creation but not returned in public responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_4

LANGUAGE: python
CODE:
```
from typing import Optional
from sqlmodel import SQLModel

class HeroBase(SQLModel):
    name: str
    age: Optional[int] = None

class HeroCreate(HeroBase):
    secret_name: str
```

----------------------------------------

TITLE: Changing OpenAPI Schema URL
DESCRIPTION: Modify the default URL endpoint for the OpenAPI schema (which is `/openapi.json` by default) by passing the desired path to the `openapi_url` parameter when creating the FastAPI application instance. Setting `openapi_url=None` disables the endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(openapi_url="/api/v1/openapi.json")

# Example path operation
@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Importing Form from FastAPI in Python
DESCRIPTION: This code snippet shows how to import the `Form` class from the `fastapi` library in Python. This allows you to define form parameters in your API endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/request-forms.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"from fastapi import FastAPI, Form"
```

----------------------------------------

TITLE: Creating a Basic Dependency Function in FastAPI
DESCRIPTION: A simple function that serves as a dependency for path operations. It takes query parameters and returns them in a dictionary, demonstrating the basic structure of a FastAPI dependency.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Using Docstrings for FastAPI Endpoint Description
DESCRIPTION: Shows how to use function docstrings to provide detailed descriptions for FastAPI path operations with Markdown support.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/items/")
async def read_items():
    """    
    Create an item with all the information:
    
    - **name**: each item must have a name
    - **description**: a long description
    - **price**: required
    - **tax**: if the item doesn't have tax, you can omit this
    - **tags**: a set of unique tag strings for this item
    """
```

----------------------------------------

TITLE: Generating JWT Token Example
DESCRIPTION: This code snippet shows an example of a JWT token. It's not executable code, but rather an illustration of what a JWT token looks like.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
```

----------------------------------------

TITLE: Building Docker Image
DESCRIPTION: This command builds a Docker image from the Dockerfile in the current directory.  The `-t myimage` option tags the image with the name `myimage`, making it easier to reference later. The `.` specifies the build context, which is the directory containing the Dockerfile and any files it references.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
"docker build -t myimage ."
```

----------------------------------------

TITLE: Hinting Optional Type (Python 3.10+ using |) - Python
DESCRIPTION: For Python versions 3.10+, this snippet uses the pipe operator (`|`) with `None` to indicate that a parameter can be a specific type (`str`) or `None`. This is the modern, concise way to express optional types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_15

LANGUAGE: Python
CODE:
```
def process_item(item: str | None):
    print(item)
```

----------------------------------------

TITLE: Passing Callback Routes to FastAPI Route
DESCRIPTION: This snippet showcases how to pass the routes from a callback router to a FastAPI route. The routes are passed to the `callbacks` argument of the route decorator. This includes the use of the `.routes` attribute of the callback router.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"@app.post("/invoices/", callbacks=invoices_callback_router.routes)
async def create_invoice(
    invoice: Invoice,
    callback_url: Url,
):
    return {"id": invoice.id}"
```

----------------------------------------

TITLE: Query Parameter Validation with Annotated in Python 3.10+
DESCRIPTION: Shows how to add max_length validation for query parameters using Annotated and Query
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
q: Annotated[str | None, Query(max_length=50)] = None
```

----------------------------------------

TITLE: Creating an Enum Class for Path Parameters in Python
DESCRIPTION: This code snippet demonstrates how to create an Enum class in Python for defining predefined values for path parameters. It imports the Enum class, creates a subclass that inherits from str and Enum, and defines class attributes with fixed, allowed values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: python
CODE:
```
from enum import Enum


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Overriding Default Swagger UI Parameters in FastAPI
DESCRIPTION: Example of how to override FastAPI's default Swagger UI parameters by passing custom values in the swagger_ui_parameters dictionary, in this case disabling deepLinking.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
app = FastAPI(
    swagger_ui_parameters={"deepLinking": False}
)
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value of the `item_id` path parameter is passed to the function's `item_id` argument.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare a complex data model (Item) as a parameter in FastAPI. FastAPI uses this declaration for data validation, serialization, and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Running FastAPI App in Production
DESCRIPTION: This command starts the FastAPI application in production mode. It is recommended for deploying the application to a production environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/fastapi-cli.md#_snippet_1

LANGUAGE: bash
CODE:
```
fastapi run
```

----------------------------------------

TITLE: Using Same Model for Request Body and Response in FastAPI
DESCRIPTION: Demonstrates a FastAPI path operation decorator where the same Pydantic model (`UserIn`) is used for both the request body (implicitly via the function parameter type hint) and explicitly as the `response_model`. This shows how sensitive data included in the input model can be returned in the response if not filtered.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.post("/user/", response_model=UserIn)
```

----------------------------------------

TITLE: Excluding Path from OpenAPI Schema in FastAPI
DESCRIPTION: Demonstrates how to exclude a specific path from the OpenAPI schema (and thus from automatic documentation) using the include_in_schema parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/items/", include_in_schema=False)
```

----------------------------------------

TITLE: Declaring a Complex Object Type
DESCRIPTION: This snippet shows how to declare a more complex object type, such as an `Item`, in FastAPI. This allows FastAPI to validate and convert data for complex JSON structures.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Running FastAPI with Uvicorn
DESCRIPTION: This command runs a FastAPI application using Uvicorn, binding it to host 0.0.0.0 and port 80. The --reload option should not be used in production.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/deployment/manually.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 80

<span style="color: green;">INFO</span>:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: package.json using local OpenAPI file
DESCRIPTION: This `package.json` snippet configures a frontend application with a script to generate client code using `openapi-ts`. The `generate-client` script uses a local OpenAPI specification file (`./openapi.json`) and outputs the generated client code to the `./src/client` directory, utilizing the `axios` library for HTTP requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input ./openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Importing FastAPI app from main.py
DESCRIPTION: Illustrates how Uvicorn imports the FastAPI application instance from a Python module.  This is equivalent to running uvicorn main:app.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/manually.md#_snippet_3

LANGUAGE: Python
CODE:
```
from main import app
```

----------------------------------------

TITLE: Multi-stage Dockerfile for FastAPI with Poetry Dependency Management
DESCRIPTION: A multi-stage Dockerfile that uses Poetry for dependency management. The first stage generates a requirements.txt file from Poetry configuration, while the second stage builds the final image with only the necessary dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_6

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9 as requirements-stage

WORKDIR /tmp

RUN pip install poetry

COPY ./pyproject.toml ./poetry.lock* /tmp/

RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

FROM python:3.9

WORKDIR /code

COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: UploadFile with Additional Metadata - Python FastAPI
DESCRIPTION: Example showing how to add metadata to file uploads using File() with UploadFile
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.post("/files/")
async def create_file(
    file: bytes = File(description="A file read as bytes")
):

@app.post("/uploadfile/")
async def create_upload_file(
    file: UploadFile = File(description="A file read as UploadFile")
):
```

----------------------------------------

TITLE: Creating an Async FastAPI Application (Python)
DESCRIPTION: This snippet presents an alternative implementation of the basic FastAPI application using asynchronous function definitions (`async def`). This is suitable if your application code involves asynchronous operations like waiting for database queries or external API calls.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Returning Response Directly in FastAPI
DESCRIPTION: This snippet shows how to create and return a Response directly in FastAPI, including setting custom headers as parameters. This allows for full control over the response, including headers and status code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-headers.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return Response(content="{\"item_id\": \"{}\"}".format(item_id), headers={"X-Custom-Header": "Value"})
```

----------------------------------------

TITLE: Using Function Names as OpenAPI operationId in FastAPI
DESCRIPTION: Shows how to automatically use function names as OpenAPI operationIds by iterating through all routes and updating their operation_id.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.routing import APIRoute

app = FastAPI()

@app.get("/items/")
def read_items():
    return [{"item_id": "Foo"}]

@app.post("/items/")
def create_item(item: Item):
    return item

def use_route_names_as_operation_ids(app: FastAPI) -> None:
    for route in app.routes:
        if isinstance(route, APIRoute):
            route.operation_id = route.name  # in this case, 'read_items' for the first route

use_route_names_as_operation_ids(app)
```

----------------------------------------

TITLE: Defining Optional Query Parameter in FastAPI (Python 3.10+)
DESCRIPTION: This snippet shows how to define an optional query parameter 'q' of type str or None in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/")
async def read_items(q: str | None = None):
    results = {"items": [{ "item_id": "Foo" }, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet demonstrates how to import the FastAPI class, which provides all the functionality needed for creating an API. FastAPI is a class inherited directly from Starlette.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Installing Uvicorn with standard dependencies
DESCRIPTION: Command to install Uvicorn with its recommended standard dependencies including uvloop, which provides performance improvements for asyncio-based applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/manually.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Configuring Tag Metadata and Routes
DESCRIPTION: Demonstrates how to set up tag metadata for API documentation and apply tags to path operations in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

tags_metadata = [
    {
        "name": "users",
        "description": "Operations with users. The **login** logic is also here.",
    },
    {
        "name": "items",
        "description": "Manage items. So _fancy_ they have their own docs.",
        "externalDocs": {
            "description": "Items external docs",
            "url": "https://fastapi.tiangolo.com/",
        },
    },
]

app = FastAPI(openapi_tags=tags_metadata)

@app.get("/users/", tags=["users"])
async def get_users():
    return ["Rick", "Morty"]

@app.get("/items/", tags=["items"])
async def get_items():
    return ["Portal Gun", "Plumbus"]
```

----------------------------------------

TITLE: Define Settings Model (Pydantic v1)
DESCRIPTION: Create a settings model by subclassing `BaseSettings` directly from `pydantic`. Declare settings fields as class attributes with type annotations and optional default values. Use an inner `Config` class for configuration like specifying an environment file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_2

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings

class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50

    class Config:
        env_file = ".env"

settings = Settings()

from fastapi import FastAPI

app = FastAPI()

@app.get("/info")
async def info():
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: package.json with openapi-ts script
DESCRIPTION: This `package.json` snippet configures a frontend application with a script to generate client code using `openapi-ts`. The `generate-client` script uses the OpenAPI specification from a running FastAPI application (at http://localhost:8000/openapi.json) and outputs the generated client code to the `./src/client` directory, utilizing the `axios` library for HTTP requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Activating a virtual environment (Windows Bash)
DESCRIPTION: This command activates a virtual environment in Windows Bash (e.g., Git Bash) using the 'source' command. It executes the 'activate' script within the virtual environment's Scripts directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_22

LANGUAGE: console
CODE:
```
$ source .venv/Scripts/activate
```

----------------------------------------

TITLE: Declaring a Variable with a Class Type in Python
DESCRIPTION: This code demonstrates how to declare a variable with the type of a user-defined class (`Person`). This allows for editor support and type checking when working with instances of that class.  `one_person` is an instance of the `Person` class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
"one_person: Person = Person(name='John')"
```

----------------------------------------

TITLE: Main FastAPI application example
DESCRIPTION: This is a simple FastAPI application example.  It likely defines routes and handlers that can be tested using asynchronous testing techniques.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/async-tests.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"{* ../../docs_src/async_tests/main.py *}"
```

----------------------------------------

TITLE: Running FastAPI in Development with CLI
DESCRIPTION: This command starts the FastAPI application in development mode using the `fastapi dev` command. It enables automatic reloading of the server on code changes. The command expects the path to the main Python file containing the FastAPI app instance as an argument.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/fastapi-cli.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
$ <font color="#4E9A06">fastapi</font> dev <u style="text-decoration-style:solid">main.py</u>
```

----------------------------------------

TITLE: Disabling Automatic Underscore to Hyphen Conversion in FastAPI Headers
DESCRIPTION: This snippet shows how to disable the automatic conversion of underscores to hyphens in header names by setting the convert_underscores parameter to False.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def read_items(strange_header: Annotated[str | None, Header(convert_underscores=False)] = None):
```

----------------------------------------

TITLE: Using jsonable_encoder with JSONResponse in FastAPI
DESCRIPTION: Demonstrates how to manually encode data using `jsonable_encoder` before returning it within a `JSONResponse` object in a FastAPI path operation. This is useful when you need to explicitly control the response object while still ensuring the content is JSON-compatible.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/response-directly.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items():
    data = {"foo": "bar"}
    json_compatible_data = jsonable_encoder(data)
    return JSONResponse(content=json_compatible_data)
```

----------------------------------------

TITLE: Adding Multiple Media Types to FastAPI Response
DESCRIPTION: Demonstrates how to add multiple media types (JSON and PNG image) to a FastAPI response using the 'responses' parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
    responses={
        200: {
            "content": {"image/png": {}},
            "description": "Return the JSON item or an image.",
        }
    },
    response_model=Item,
```

----------------------------------------

TITLE: Verifying Password and Creating UserInDB Instance
DESCRIPTION: This snippet shows the process of verifying the user's password using a hashing function and creating a UserInDB instance with the user data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
user = UserInDB(**user_dict)
if not verify_password(form_data.password, user.hashed_password):
    raise HTTPException(status_code=400, detail="Incorrect username or password")
```

----------------------------------------

TITLE: Configuring OpenAPI and Documentation URLs
DESCRIPTION: Customize OpenAPI schema and documentation UI URLs, including paths for Swagger and ReDoc
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/metadata.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
app = FastAPI(
    openapi_url="/api/v1/openapi.json",
    docs_url="/documentation",
    redoc_url=None
)
```

----------------------------------------

TITLE: Request Body and Path Parameters in FastAPI
DESCRIPTION: Shows how to declare both path parameters and a request body in a FastAPI endpoint. FastAPI automatically recognizes that function parameters matching path parameters should be taken from the path, while Pydantic models are taken from the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item):
    return {"item_id": item_id, **item.dict()}
```

----------------------------------------

TITLE: Nested Pydantic Model with Image Submodel
DESCRIPTION: Shows creating a nested model with an Image submodel as an attribute
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    image: Image
```

----------------------------------------

TITLE: Adding Dependencies to Path Operation Decorator in FastAPI
DESCRIPTION: This snippet demonstrates how to add dependencies to a FastAPI path operation decorator using the 'dependencies' parameter. It shows the structure of adding multiple Depends() calls to the decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
@app.get("/users/", dependencies=[Depends(verify_token), Depends(verify_key)])
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]
```

----------------------------------------

TITLE: Pydantic model definitie
DESCRIPTION: Definieert een Pydantic model `User` met type hints voor de attributen `id` (int), `name` (str) en `joined` (date). Pydantic gebruikt deze type declaraties voor data validatie en serialisatie.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
# Een Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Using Complex Dependencies in FastAPI Route
DESCRIPTION: This snippet shows how to use a complex dependency in a FastAPI route operation. The route depends on query_or_cookie_extractor, which in turn depends on query_extractor.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_query(query_or_default: Annotated[str, Depends(query_or_cookie_extractor)]):
```

----------------------------------------

TITLE: Running FastAPI with Multiple Workers using the fastapi CLI
DESCRIPTION: Example command for running a FastAPI application with 4 worker processes using the fastapi CLI. This allows the application to utilize multiple CPU cores and handle more concurrent requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/server-workers.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi run --workers 4 main.py
```

----------------------------------------

TITLE: Installing pydantic-settings
DESCRIPTION: This command shows how to install the `pydantic-settings` package using pip. This package is required to use Pydantic's Settings management features in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_0

LANGUAGE: Bash
CODE:
```
$ pip install pydantic-settings
---> 100%
```

----------------------------------------

TITLE: Returning HTML Responses in FastAPI
DESCRIPTION: Shows how to return HTML responses directly from FastAPI using the HTMLResponse class. It imports HTMLResponse and sets it as the response_class in the route decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
```

----------------------------------------

TITLE: Docker Command for FastAPI Behind TLS Termination Proxy
DESCRIPTION: Modified uvicorn command for running FastAPI applications behind a TLS termination proxy like Nginx or Traefik, enabling proper handling of forwarded headers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_12

LANGUAGE: dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Hinting List Type (Python 3.9+) - Python
DESCRIPTION: For Python versions 3.9 and later, this snippet shows a simpler syntax for hinting a list containing elements of a specific type (`str`) using the built-in `list` type. This achieves the same result as `typing.List[str]` but is more concise.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_6

LANGUAGE: Python
CODE:
```
def process_items(items: list[str]):
    for item in items:
        print(item.upper())
```

----------------------------------------

TITLE: Numeric Validation: Greater Than and Less Than or Equal
DESCRIPTION: Shows how to use gt (greater than) and le (less than or equal) constraints with Path for path parameter validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path
from typing import Annotated

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(
    q: str,
    item_id: Annotated[int, Path(title="The ID of the item to get", gt=0, le=1000)],
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results

```

----------------------------------------

TITLE: Optional Query Parameters with Default None
DESCRIPTION: Shows how to create optional query parameters by setting default value to None
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def read_item(item_id: str, q: str | None = None):
    if q:
        return {"item_id": item_id, "q": q}
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Implementing Basic Cookie Parameters with Pydantic Model in FastAPI
DESCRIPTION: Demonstrates how to create a Pydantic model to define cookie parameters in FastAPI. The example shows a model with two cookie parameters: ads_id and session_token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class CookieModel(BaseModel):
    ads_id: str
    session_token: str


@app.get("/items/")
async def read_items(cookies: Annotated[CookieModel, Cookie()]):
    return cookies
```

----------------------------------------

TITLE: Importing Pydantic Field
DESCRIPTION: Shows how to import Field from Pydantic library for use with FastAPI models
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-fields.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from pydantic import Field
```

----------------------------------------

TITLE: Updating API with PUT Request and Pydantic Model
DESCRIPTION: This code updates the FastAPI application to handle PUT requests to the '/items/{item_id}' endpoint. It defines a Pydantic model 'Item' to represent the request body, including name, price, and an optional offer flag. The 'update_item' function receives the item ID as a path parameter and the item data as a Pydantic model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application with Routes
DESCRIPTION: Demonstrates creating a basic FastAPI application with two routes: a root endpoint and an item retrieval endpoint. Includes support for type hints and optional query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/index.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: OpenAPI Server Configuration with Path Prefix
DESCRIPTION: JSON configuration showing how to declare server URL with a path prefix for OpenAPI schema
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "openapi": "3.1.0",
    "servers": [
        {
            "url": "/api/v1"
        }
    ],
    "paths": {}
}
```

----------------------------------------

TITLE: Query Parameter with Max Length Validation
DESCRIPTION: Declares an optional query parameter `q` with a maximum length of 50 characters using the `Query` class.  The default value is set to `None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Optional[str] = Query(default=None, max_length=50)):
    return {"q": q}
```

----------------------------------------

TITLE: FastAPI app with Lifespan
DESCRIPTION: This snippet shows how to use the `lifespan` function with the `FastAPI` app. This allows you to perform startup and shutdown tasks. It creates a FastAPI instance and passes the `lifespan` async context manager to it.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/events.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"app = FastAPI(lifespan=lifespan)"
```

----------------------------------------

TITLE: Installing a package with extras using pip
DESCRIPTION: This example shows how to install a package (FastAPI) with extras (standard) using pip.  Extras allow installing optional dependencies along with the core package.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_19

LANGUAGE: console
CODE:
```
// Don't run this now, it's just an example 🤓
$ pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Raising Exceptions in FastAPI Dependency Functions
DESCRIPTION: This snippet illustrates how to raise exceptions within dependency functions used in FastAPI. It shows the pattern for raising HTTPException with a specific status code and detail message.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
if x_token != "fake-super-secret-token":
    raise HTTPException(status_code=400, detail="X-Token header invalid")

if x_key != "fake-super-secret-key":
    raise HTTPException(status_code=400, detail="X-Key header invalid")
```

----------------------------------------

TITLE: Initializing Resources on FastAPI Startup (Python)
DESCRIPTION: Demonstrates how to use the `on_startup` parameter of the `FastAPI` class to register a function that initializes resources, such as a database connection or global state, before the application begins processing requests. The function can be synchronous (`def`) or asynchronous (`async def`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

# Simulate a database/state
fake_db = {}

# Define a startup event handler
def startup_event():
    print("Application starting up...")
    # Initialize the 'database' with some data
    fake_db["foo"] = "bar"
    fake_db["baz"] = "qux"

# Create a FastAPI app, registering the startup handler
app = FastAPI(on_startup=[startup_event])

# Example endpoint to show initialized data
@app.get("/")
def read_root():
    return fake_db
```

----------------------------------------

TITLE: Using Pydantic Models in FastAPI
DESCRIPTION: Demonstration of how to instantiate and use Pydantic models in FastAPI, including direct instantiation and dictionary unpacking.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/features.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Excluding Path Operations from OpenAPI in FastAPI
DESCRIPTION: This snippet shows how to exclude a specific path operation from the OpenAPI schema using the `include_in_schema` parameter. Setting it to `False` effectively removes the operation from generated API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/items/', include_in_schema=False)
async def read_items():
    return ['item1', 'item2']
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI endpoint using Python type hints. The `item_id: int` declaration tells FastAPI to expect an integer value for the `item_id` parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Installing Uvicorn with Standard Dependencies
DESCRIPTION: This command installs Uvicorn, a high-performance ASGI server, along with recommended dependencies like uvloop for improved concurrency.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/deployment/manually.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Converting Pydantic Model to JSON-Compatible Dictionary
DESCRIPTION: Demonstrates how to use `jsonable_encoder()` to transform a Pydantic model with datetime attributes into a JSON-compatible dictionary for database storage or JSON serialization
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/encoder.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from datetime import datetime
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel

class Item(BaseModel):
    title: str
    timestamp: datetime

item = Item(title="Foo", timestamp=datetime.now())
print(jsonable_encoder(item))
```

----------------------------------------

TITLE: Query Parameter with Regular Expression Validation
DESCRIPTION: Declares a query parameter `q` with regular expression validation using the `Query` class. The regular expression ensures that the value must be exactly `fixedquery`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Optional[str] = Query(default=None, min_length=3, max_length=50, regex="^fixedquery$")):
    return {"q": q}
```

----------------------------------------

TITLE: Async Function Definition
DESCRIPTION: Example showing how to define an async function that performs asynchronous operations
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/async.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Assigning Tags to Path Operations
DESCRIPTION: Apply the defined tags to individual path operations or groups of operations (e.g., using `APIRouter`) by including the `tags` parameter in the path operation decorator (like `@app.get()`). The value is a list of strings corresponding to the tag names.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

# Assume app is created, potentially with openapi_tags defined earlier
app = FastAPI() # ... or FastAPI(openapi_tags=tags_metadata)

@app.get("/items/", tags=["items"])
async def read_items():
    return [{
        "name": "Foo"
    }]

@app.get("/users/", tags=["users"])
async def read_users():
    return [{
        "name": "Bar"
    }]
```

----------------------------------------

TITLE: Combining Response Information in FastAPI
DESCRIPTION: This code snippet shows how to combine response information from response_model, status_code, and responses in FastAPI. It declares a response model, uses the default HTTP code 200, and adds extra information for the same response in responses, directly in the OpenAPI schema, including a custom description for a 404 error and a custom example for a 200 response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/additional-responses.md#_snippet_4

LANGUAGE: Python
CODE:
```
class Message(BaseModel):
    message: str


@app.post(
    "/items/",
    response_model=Item,
    status_code=201,
    responses={
        404: {
            "model": Message,
            "description": "The item was not found"
        },
        200: {
            "content": {
                "application/json": {
                    "example": {
                        "name": "Foo",
                        "description": "A very nice Item",
                        "price": 35.4,
                        "tax": 3.2,
                    }
                }
            }
        },
    },
)
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Adding OpenAPI Extension
DESCRIPTION: Demonstrates how to add a custom OpenAPI extension to a specific route operation using the `openapi_extra` parameter. This allows you to include additional metadata in the OpenAPI schema for that route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/path-operation-advanced-configuration.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items():
    return [{
        "name": "Foo",
        "price": 50.2
    }, {
        "name": "Bar",
        "price": 20.3
    }]


app = FastAPI(
    openapi_extra={
        "x-logo": {
            "url": "https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png",
            "altText": "FastAPI Logo"
        }
    }
)
```

----------------------------------------

TITLE: Declare Single Body Parameter with Key
DESCRIPTION: Illustrates how to use the `embed` parameter of `Body` to specify that a single body parameter should be expected within a JSON with a specific key. This is similar to how multiple body parameters are handled.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-multiple-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(embed=True),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Response Model with Default Values
DESCRIPTION: Shows a Pydantic model with default values for optional fields, demonstrating how to handle default and unset values in responses
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: float = 10.5
    tags: List[str] = []
```

----------------------------------------

TITLE: RedirectResponse Example in FastAPI
DESCRIPTION: This code snippet shows how to return a redirect response using `RedirectResponse`. The example creates an endpoint that returns a `RedirectResponse` to a specified URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/typer")
async def redirect_to_typer():
    return RedirectResponse("https://typer.tiangolo.com")  # HL

```

----------------------------------------

TITLE: Using Alias for Query Parameter in FastAPI
DESCRIPTION: This snippet shows how to use an alias for a query parameter when the desired parameter name is not a valid Python variable name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
q: Annotated[str | None, Query(alias="item-query")] = None
```

----------------------------------------

TITLE: Using Typed Lists in Pydantic Models for FastAPI
DESCRIPTION: This example demonstrates how to import and use a typed List from the typing module to specify the type of elements in a list field of a Pydantic model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List

tags: List[str]
```

----------------------------------------

TITLE: Scope Verification in Dependency
DESCRIPTION: This snippet shows how to verify that all required scopes for dependencies and path operations are present in the token's scopes. It uses security_scopes.scopes to check if the token contains all necessary scopes and raises an HTTPException if any are missing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/security/oauth2-scopes.md#_snippet_6

LANGUAGE: Python
CODE:
```
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Not enough permissions",
                headers={"WWW-Authenticate": authenticate_value},
            )
```

----------------------------------------

TITLE: Python Optional Type Hint with Typing Module
DESCRIPTION: This code snippet demonstrates the use of `Optional` from the `typing` module.  `Optional[str]` indicates that the `name` parameter can either be a string or `None`. Using `Optional` improves code clarity and allows for more robust error handling when a value might be absent.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
"from typing import Optional

def say_hi(name: Optional[str] = None):
    if name is not None:
        print(f\"Hi {name}\")
    else:
        print(\"Hello World\")"
```

----------------------------------------

TITLE: Custom Operation ID Generation
DESCRIPTION: This example shows how to customize the generation of unique IDs for path operations in FastAPI. It defines a function that generates an ID based on the tag and function name, and then passes this function to the FastAPI constructor.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/generate-clients.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, APIRoute


def generate_unique_id(route: APIRoute):
    return f"{route.tags[0]}-{route.name}"


app = FastAPI(generate_unique_id_function=generate_unique_id)


@app.get("/items/{item_id}", tags=["items"])
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.post("/items/", tags=["items"])
async def create_item(name: str, price: float):
    return {"name": name, "price": price}
```

----------------------------------------

TITLE: Implementing a Cached Function with lru_cache in Python
DESCRIPTION: Example of a simple Python function decorated with @lru_cache that stores return values based on input parameters. When called with the same parameters, the function returns the cached result instead of executing the function body again.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/settings.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
@lru_cache
def say_hi(name: str, salutation: str = "Ms."):
    return f"Hello {salutation} {name}"
```

----------------------------------------

TITLE: SwaggerUI HTML Generation Function in FastAPI
DESCRIPTION: Function to generate custom Swagger UI HTML documentation page with OpenAPI specifications. Allows configuring Swagger UI with custom parameters and OAuth2 settings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/openapi/docs.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
get_swagger_ui_html
```

----------------------------------------

TITLE: Returning a Response Directly in FastAPI
DESCRIPTION: This example shows how to return a Response object directly in a FastAPI route, which is automatically handled by FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@app.get("/portal")
def get_portal(teleport: bool = False) -> Response:
    if teleport:
        return RedirectResponse(url="https://www.youtube.com/watch?v=dQw4w9WgXcQ")
    return JSONResponse(content={"message": "Here's your interdimensional portal."})
```

----------------------------------------

TITLE: Creating a Custom Response Class in FastAPI
DESCRIPTION: Shows how to create a custom response class using orjson with custom options in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse
import orjson

app = FastAPI()

class CustomORJSONResponse(JSONResponse):
    media_type = "application/json"

    def render(self, content: Any) -> bytes:
        return orjson.dumps(content, option=orjson.OPT_INDENT_2)

@app.get("/", response_class=CustomORJSONResponse)
async def main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: FastAPI: Token Dependency
DESCRIPTION: This code snippet shows how a path operation function receives a token as a string using the dependency injection system in FastAPI. The security system provides a token to the function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"@app.get(\"/items/\")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}"
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function
DESCRIPTION: Defines a synchronous path operation function that handles requests to a specific endpoint. This function is a standard Python function that FastAPI will call when a request is made to the associated path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a complex item model as a parameter in a FastAPI endpoint. FastAPI uses this type information for validation and serialization/deserialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Excluding Path Operation from OpenAPI in FastAPI
DESCRIPTION: This snippet demonstrates how to exclude a specific path operation from the generated OpenAPI schema using the `include_in_schema` parameter. Setting it to `False` prevents the operation from appearing in the documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/path-operation-advanced-configuration.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/hidden-item", include_in_schema=False)
async def hidden_item():
    return {"item": "hidden"}
```

----------------------------------------

TITLE: Defining Required Query Parameter in FastAPI
DESCRIPTION: This code shows how to make a query parameter required by using '...' as the default value in Query.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
q: str = Query(..., min_length=3)
```

----------------------------------------

TITLE: Managing Startup and Shutdown Events with TestClient in Python
DESCRIPTION: This snippet utilizes FastAPI's TestClient within a `with` statement to ensure that application event handlers such as `startup` and `shutdown` are executed when running tests. It requires FastAPI and its TestClient module as dependencies. The context manager pattern is used to manage application lifecycle events during tests to guarantee resource initialization and cleanup. Expected input is the FastAPI application and tests involving resource-intensive operations. Outputs include proper execution of resource lifecycle hooks.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/testing-events.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
with TestClient(app) as client:
    response = client.get('/')
    assert response.status_code == 200
```

----------------------------------------

TITLE: JavaScript Script to Preprocess OpenAPI JSON
DESCRIPTION: This JavaScript script preprocesses an OpenAPI JSON file to remove the prefixed tag from operation IDs. It reads the OpenAPI specification from `openapi.json`, iterates through the paths, and modifies the operation IDs by removing the tag prefix, resulting in cleaner method names for generated clients. The modified OpenAPI spec is then written back to `openapi.json`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
const fs = require('fs');

fs.readFile('openapi.json', 'utf8', (err, data) => {
  if (err) {
    console.error(err);
    return;
  }

  const jsonData = JSON.parse(data);

  for (const path in jsonData.paths) {
    for (const operation in jsonData.paths[path]) {
      const operationId = jsonData.paths[path][operation]?.operationId;
      if (operationId) {
        const parts = operationId.split('-', 1);
        if (parts.length > 1) {
          jsonData.paths[path][operation].operationId = parts[1];
        }
      }
    }
  }

  fs.writeFile('openapi.json', JSON.stringify(jsonData, null, 2), err => {
    if (err) {
      console.error(err);
    }
  });
});
```

----------------------------------------

TITLE: OpenAPI Configuration with Server URL
DESCRIPTION: Example of an OpenAPI configuration that specifies the server URL, which is necessary when the application is behind a proxy. The `servers` array indicates the base URL for the API, ensuring that the frontend knows where to fetch the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "openapi": "3.1.0",
    // Hier mehr Einstellungen
    "servers": [
        {
            "url": "/api/v1"
        }
    ],
    "paths": {
            // Hier mehr Einstellungen
    }
}
```

----------------------------------------

TITLE: Basic Function with Name Formatting
DESCRIPTION: A simple function that takes first and last names, capitalizes them, and concatenates them with a space
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
def get_full_name(first_name, last_name):
    return f"{first_name.title()} {last_name.title()}"
```

----------------------------------------

TITLE: Ausführen von Gunicorn mit Uvicorn-Workern für FastAPI
DESCRIPTION: Startet Gunicorn als Prozessmanager mit 4 Uvicorn-Workern, die eine FastAPI-Anwendung aus der Datei 'main.py' ausführen und auf Port 80 lauschen.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/server-workers.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80
```

----------------------------------------

TITLE: Running the FastAPI Development Server (Console)
DESCRIPTION: This command shows how to run the FastAPI application using the `fastapi dev` command-line interface. This command starts a Uvicorn server with auto-reload enabled, which is ideal for local development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_3

LANGUAGE: Console
CODE:
```
$ fastapi dev main.py

 ┌───────── FastAPI CLI - Development mode ──────────┐
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
```

----------------------------------------

TITLE: Path and Request Body Parameters in FastAPI
DESCRIPTION: Shows how to declare both path parameters and a request body using a Pydantic model in a FastAPI endpoint. FastAPI automatically distinguishes between path parameters (extracted from the URL) and request body parameters (parsed from the request body).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body.md#_snippet_4

LANGUAGE: Python
CODE:
```
{* ../../docs_src/body/tutorial003.py hl[17:18] *}
```

----------------------------------------

TITLE: Running Uvicorn with Multiple Workers
DESCRIPTION: This command starts a Uvicorn server directly, specifying the host, port, and number of worker processes.  The `main:app` argument specifies the module and application instance to run. The `--workers` option sets the number of worker processes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: Shell
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
```

----------------------------------------

TITLE: Declaring Path Parameter Metadata with Title
DESCRIPTION: Shows how to add metadata like title to a path parameter using Path from FastAPI
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
item_id: int = Path(title="The ID of the item to get")
```

----------------------------------------

TITLE: Asynchronous Function Definition with Await
DESCRIPTION: Demonstrates how to define an asynchronous function using async def and await keywords in Python for handling operations that require waiting
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/async.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Opérations asynchrones pour créer les burgers
    return burgers
```

----------------------------------------

TITLE: Accessing the Request Body in an Exception Handler
DESCRIPTION: Demonstrates how to access the request body within an exception handler using a `try`/`except` block. If an exception occurs, the `Request` instance is still in scope, allowing the request body to be read and used for error handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-request-and-route.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse

app = FastAPI()


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    body = None
    try
        body = await request.body()
    except Exception:
        pass
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code creates an instance of the FastAPI class, which serves as the main point of interaction for defining the API. The instance is typically named 'app'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Creating an Async Function with Await
DESCRIPTION: Demonstrates how to create an asynchronous function that returns burgers. This example shows the basic pattern for defining functions that can be awaited by other async functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Returning Custom Headers with JSONResponse in FastAPI
DESCRIPTION: This snippet shows how to return a JSON response directly using FastAPI, allowing for custom headers or cookies to be included. It utilizes JSONResponse as a class for creating the response object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/response-directly.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.responses import JSONResponse

async def custom_response():
    return JSONResponse(content={"message": "Hello World"}, headers={"X-Custom-Header": "Value"})
```

----------------------------------------

TITLE: Creating reusable dependencies in a separate module
DESCRIPTION: Shows how to define dependencies in a separate module that can be reused across the application. This example creates a dependency for validating an X-Token header.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/bigger-applications.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Header, HTTPException


async def get_token_header(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")

```

----------------------------------------

TITLE: Importing HTTPSRedirectMiddleware in FastAPI
DESCRIPTION: Shows how to import the HTTPS redirect middleware from FastAPI. This middleware automatically redirects HTTP requests to HTTPS.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware
```

----------------------------------------

TITLE: Configuring Additional OpenAPI Servers in FastAPI
DESCRIPTION: This snippet shows how to define additional servers in the OpenAPI schema alongside the automatic server from root_path. This allows the docs UI to interact with multiple environments like staging and production.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
app = FastAPI(
    servers=[
        {"url": "https://stag.example.com", "description": "Staging environment"},
        {"url": "https://prod.example.com", "description": "Production environment"},
    ]
)
```

----------------------------------------

TITLE: Complete Async Path Operation Function Example
DESCRIPTION: A complete example of an async path operation function that awaits an async function and returns the results. This shows the proper pattern for handling async operations in FastAPI endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Reading a Single Hero's Data
DESCRIPTION: This snippet shows how to read the data for a single hero from the database, querying by the hero's ID.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_7

LANGUAGE: Python
CODE:
```
hero = session.get(Hero, hero_id)
```

----------------------------------------

TITLE: Reading a Hero
DESCRIPTION: This code snippet showcases reading a single hero by ID, returning a `HeroPublic` model as the API response. It includes error handling for when the hero is not found.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"@app.get("/heroes/{hero_id}", response_model=HeroPublic)
async def read_hero(hero_id: int, db: Session = Depends(get_db)):
    hero = db.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero"
```

----------------------------------------

TITLE: Using Context Managers in FastAPI Dependencies with yield
DESCRIPTION: Illustrates how to use context managers within FastAPI dependencies that use yield. This example shows a custom context manager class being used in a dependency function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
class MySuperContextManager:
    def __init__(self):
        self.db = DBSession()

    def __enter__(self):
        return self.db

    def __exit__(self, exc_type, exc_value, traceback):
        self.db.close()

async def get_db():
    with MySuperContextManager() as db:
        yield db
```

----------------------------------------

TITLE: Defining Webhook with Payload Model in FastAPI
DESCRIPTION: This Python snippet demonstrates how to define a webhook in FastAPI and document the structure of the request body it would send. It uses a Pydantic `BaseModel` to define the payload schema and the `@app.webhooks.post()` decorator to associate the model with a named webhook identifier, which is then included in the OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/openapi-webhooks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

# Define the data model for the webhook request body
class NewSubscriptionPayload(BaseModel):
    user_id: int
    plan: str
    amount_paid: float

app = FastAPI()

# Define a webhook named "new-subscription"
# This documents that the app *could* send a POST request
# to a user-defined URL with a body conforming to NewSubscriptionPayload
@app.webhooks.post("new-subscription")
def webhook_new_subscription(subscription: NewSubscriptionPayload):
    # This function is not executed to handle incoming requests
    # It's only here to provide the OpenAPI documentation for the webhook
    pass
```

----------------------------------------

TITLE: Importing App for Testing (Python)
DESCRIPTION: Imports the FastAPI application instance from the `main` module within the same Python package structure for testing purposes. It also demonstrates creating a `TestClient` instance using the imported application. This allows the test file to access and test the application defined in `main.py`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi.testclient import TestClient
from .main import app

client = TestClient(app)

# Test functions follow
```

----------------------------------------

TITLE: Install Pydantic Settings Package
DESCRIPTION: Install the `pydantic-settings` package using pip. This package is required for managing settings with Pydantic v2 and later. Alternatively, install FastAPI with the `all` extras which includes `pydantic-settings`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_0

LANGUAGE: Console
CODE:
```
$ pip install pydantic-settings
```

LANGUAGE: Console
CODE:
```
$ pip install "fastapi[all]"
```

----------------------------------------

TITLE: Embedding a Single Body Parameter in FastAPI
DESCRIPTION: This example demonstrates how to embed a single body parameter within a JSON structure using the `embed` parameter of the `Body` function. FastAPI will expect a JSON body with a key named 'item' containing the Item model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-multiple-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.post("/items/")
async def create_item(item: Item = Body(embed=True)):
    return {"item": item}
```

----------------------------------------

TITLE: Using a Sub-Model as a Type
DESCRIPTION: This code snippet demonstrates how to use the `Image` sub-model as a type for an attribute in another Pydantic model (`Item`). This allows for nested JSON objects with specific attribute names, types, and validations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-nested-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list[str] = []
    image: Optional[Image] = None
```

----------------------------------------

TITLE: Creando un Héroe con FastAPI y SQLModel en Python
DESCRIPTION: Implementa un endpoint POST para crear un nuevo héroe. Recibe un HeroCreate, crea un Hero en la base de datos, y devuelve un HeroPublic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.post("/heroes/", response_model=HeroPublic)
def create_hero(hero: HeroCreate):
    with Session(engine) as session:
        hero_db = Hero.model_validate(hero)
        session.add(hero_db)
        session.commit()
        session.refresh(hero_db)
        return hero_db
```

----------------------------------------

TITLE: Adding a Background Task to BackgroundTasks
DESCRIPTION: This code snippet demonstrates how to add a background task function to the BackgroundTasks object using the .add_task() method, including passing positional and keyword arguments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/background-tasks.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import BackgroundTasks, FastAPI

app = FastAPI()


def write_notification(email: str, message=""):
    with open("log.txt", mode="w") as f:
        f.write(f"notification for {email}: {message}")


@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
    background_tasks.add_task(write_notification, email, message="some notification")
    return {"message": "Notification sent in the background"}
```

----------------------------------------

TITLE: Singular Values in Body using Body()
DESCRIPTION: Shows how to instruct FastAPI to treat a singular value as part of the request body using the Body parameter. This is useful when you want to include a simple value alongside other body parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-multiple-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(default=None),
    q: Union[str, None] = None
):
    results = {"item_id": item_id, "item": item, "user": user, "importance": importance}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Adding Additional Media Types to Responses in FastAPI
DESCRIPTION: This code snippet demonstrates how to add an additional media type (image/png) to a FastAPI path operation that can return either a JSON object or a PNG image. It uses FileResponse to return the image directly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/additional-responses.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, q: Union[str, None] = None):
    if item_id == "jedi":
        return {"item_id": item_id, "q": q}
    return FileResponse("image.png", media_type="image/png")
```

----------------------------------------

TITLE: Accessing Request Body in Exception Handler - Usage in FastAPI
DESCRIPTION: This code snippet demonstrates how to use the exception handler defined in the previous step. It defines a route that intentionally raises an exception. The exception handler then catches this exception, accesses the request body, and returns a JSON response with an error message and the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
@app.post("/items/")
async def create_item(request: Request):
    raise ValueError("Something went wrong")
```

----------------------------------------

TITLE: Disabling Separate Input/Output Schemas (FastAPI, Python)
DESCRIPTION: Initializes a FastAPI application instance with the `separate_input_output_schemas` parameter set to `False`. This disables the default Pydantic v2 behavior of generating distinct OpenAPI schemas for input and output models based on default values, resulting in a single schema for the model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/separate-openapi-schemas.md#_snippet_3

LANGUAGE: Python
CODE:
```
app = FastAPI(separate_input_output_schemas=False)
```

----------------------------------------

TITLE: Defining Invoice Model and Callback URL - FastAPI
DESCRIPTION: Defines the Invoice Pydantic model with fields like id, title, customer, and total. It also includes a path operation that accepts an Invoice and a callback_url as a query parameter. The callback_url is a Pydantic Url type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/openapi-callbacks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import APIRouter, FastAPI, Query
from pydantic import BaseModel, Url


class Invoice(BaseModel):
    id: int
    title: Optional[str] = None
    customer: str
    total: float


invoices_router = APIRouter()


@invoices_router.post("/invoices/")
async def create_invoice(
    invoice: Invoice,
    callback_url: Url = Query(None),
):
    return {"invoice": invoice, "callback_url": callback_url}


invoices_callback_router = APIRouter()


@invoices_callback_router.post("/events", tags=["callback"])
async def invoice_callback(description: str, paid: bool):
    return {"description": description, "paid": paid}


app = FastAPI(callbacks=invoices_callback_router.routes)


app.include_router(invoices_router)
```

----------------------------------------

TITLE: Using StreamingResponse in FastAPI
DESCRIPTION: This code snippet demonstrates how to use `StreamingResponse` to stream data from an endpoint. It imports the `StreamingResponse` class and uses a generator function to stream data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import asyncio

app = FastAPI()


async def fake_video_streamer():
    for i in range(10):
        yield b"some fake video bytes"
        await asyncio.sleep(0.05)


@app.get("/video")
async def main():
    return StreamingResponse(fake_video_streamer(), media_type="video/mp4")
```

----------------------------------------

TITLE: Combining Path Parameters with Request Body
DESCRIPTION: Shows how to use both path parameters and request body parameters in the same path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item):
    return {"item_id": item_id, **item.dict()}
```

----------------------------------------

TITLE: Accessing Dependency Values in Exit Code
DESCRIPTION: Shows how to access the values of dependencies in the exit code of other dependencies when using `yield`. `dependency_b` needs the value of `dependency_a` and `dependency_c` needs the value of `dependency_b` to execute their exit code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def dependency_a() -> str:
    yield "A"


async def dependency_b(dep_a: str = Depends(dependency_a)) -> str:
    try:
        yield f"B {dep_a}"
    finally:
        print(f"dependency_b got {dep_a=}")


async def dependency_c(dep_b: str = Depends(dependency_b)) -> str:
    try:
        yield f"C {dep_b}"
    finally:
        print(f"dependency_c got {dep_b=}")
```

----------------------------------------

TITLE: Query Parameter with Required Value
DESCRIPTION: This snippet demonstrates how to make a query parameter required by not providing a default value to the `Query` function. If the client does not provide a value for this parameter, FastAPI will return an error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: str = Query(min_length=3)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Setting Response Description in FastAPI
DESCRIPTION: This snippet demonstrates how to set the description for the response of a FastAPI path operation using the `response_description` parameter.  This specifically describes the response, as opposed to the general `description` which describes the entire operation. FastAPI automatically generates a default response description if one is not provided.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}", response_description="The item")
async def read_item(item_id: str):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Handling Duplicate Headers in FastAPI
DESCRIPTION: This snippet demonstrates how to handle duplicate header values in FastAPI by using a list type declaration. When a header appears multiple times, FastAPI will collect all the values into a Python list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/header-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"from typing import List, Union

from fastapi import FastAPI, Header

app = FastAPI()


@app.get("/items/")
async def read_items(x_token: Union[List[str], None] = Header(default=None)):
    return {"X-Token values": x_token}"
```

----------------------------------------

TITLE: Using Lists of Submodels in Pydantic for FastAPI
DESCRIPTION: This snippet demonstrates how to use Pydantic models as subtypes of list fields, allowing for complex nested structures in FastAPI request bodies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
images: List[Image]
```

----------------------------------------

TITLE: Defining a Basic FastAPI App
DESCRIPTION: This code defines a simple FastAPI application with a single endpoint that returns a JSON response. It imports FastAPI, creates an app instance, and defines a GET route at the root path ('/').
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Raising HTTPException with Custom Headers
DESCRIPTION: You can include custom headers in the HTTP error response by passing a `headers` dictionary to the `HTTPException` constructor. This is useful for specific security or client-side handling scenarios.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": "The Foo Wrestlers"}

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id != "foo":
        raise HTTPException(
            status_code=400,
            detail="Item ID must be 'foo'",
            headers={"X-Error": "There goes my error"},
        )
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Declaring Cookie Parameters in FastAPI (Python)
DESCRIPTION: This example demonstrates how to declare a cookie parameter named 'ads_id' using the Cookie class. It shows that you can set default values and apply validations similar to Query and Path parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/cookie-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def read_items(ads_id: Annotated[str | None, Cookie()] = None):
```

----------------------------------------

TITLE: Declaring Required Query Parameter That Can Be None in FastAPI
DESCRIPTION: This snippet shows how to declare a query parameter that is required but can accept None as a value, using ellipsis (...) as the default value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
q: Annotated[str | None, Query(min_length=3)] = ...
```

----------------------------------------

TITLE: Numeric Validation: Greater Than and Less Than or Equal in FastAPI
DESCRIPTION: This snippet showcases the use of `gt` (greater than) and `le` (less than or equal) for numeric validation of path parameters.  It builds upon the previous example, implying the same FastAPI setup.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_items(\n    item_id: int = Path(title="The ID of the item to get", gt=0, le=1000),\n    q: str | None = None,\n):\n    return {"item_id": item_id, "q": q}"
```

----------------------------------------

TITLE: Setting up Conditional OpenAPI with Environment Variables in FastAPI
DESCRIPTION: Code example showing how to configure OpenAPI documentation using Pydantic settings and environment variables. The openapi_url setting controls whether the API documentation is accessible.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/conditional-openapi.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    openapi_url: str = "/openapi.json"  # default value


settings = Settings()

app = FastAPI(
    openapi_url=settings.openapi_url  # None or the default "/openapi.json"
)
```

----------------------------------------

TITLE: Combining Predefined and Custom Responses in FastAPI
DESCRIPTION: This code snippet demonstrates how to combine predefined responses with custom responses in FastAPI using Python's dictionary unpacking. It reuses some predefined responses in path operations and combines them with additional custom responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/additional-responses.md#_snippet_5

LANGUAGE: Python
CODE:
```
responses = {
    404: {"description": "Not found"},
    403: {"description": "Insufficient privileges"},
}


@app.get(
    "/items/{item_id}", responses={**responses, 200: {"model": Item}}
)
async def read_item(item_id: int):
    return Item(name="Foo", description="", price=1.2, tax=1.0)
```

----------------------------------------

TITLE: Defining Shutdown Event Handler in FastAPI
DESCRIPTION: Defines a function to be executed when the FastAPI application is shutting down. This example writes a line of text to a log file. The handler is defined using a standard `def` because it uses the standard `open()` function, which involves I/O but does not use `async` and `await`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/events.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.on_event("shutdown")
def shutdown_event():
    with open("log.txt", mode="a") as log:  # Changed 'file' to 'log'
        log.write("Application shutdown")
```

----------------------------------------

TITLE: Implementing Multiple Related User Models in FastAPI
DESCRIPTION: Demonstrates creating different Pydantic models for user data: input model with password, output model without password, and database model with hashed password.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class UserBase(BaseModel):
    username: str
    email: str
    full_name: str | None = None


class UserIn(UserBase):
    password: str


class UserOut(UserBase):
    pass


class UserInDB(UserBase):
    hashed_password: str


def fake_password_hasher(raw_password: str):
    return f"supersecret{raw_password}"


def fake_save_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)
    print("User saved! ..not really")
    return user_in_db


app = FastAPI()


@app.post("/user/", response_model=UserOut)
async def create_user(user_in: UserIn):
    user_saved = fake_save_user(user_in)
    return user_saved
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code defines a basic FastAPI application with a single endpoint that returns a JSON response. It imports the FastAPI class, creates an instance of it, and defines a path operation decorator to handle requests to the root path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Define a Pydantic Submodel
DESCRIPTION: Defines a simple Pydantic model (`Image`) that can be used as the type for an attribute in another model. This allows structuring complex data into smaller, reusable components.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Image(BaseModel):
    url: str
    name: str
```

----------------------------------------

TITLE: Relative Import Example in Python
DESCRIPTION: This code snippet demonstrates a relative import in Python, importing sub-modules `items` and `users` from the `routers` sub-package within the current package. It is used to import routers defined in separate files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_14

LANGUAGE: Python
CODE:
```
from .routers import items, users
```

----------------------------------------

TITLE: Creating a Basic FastAPI App with Async
DESCRIPTION: This code snippet demonstrates how to create a basic FastAPI application with asynchronous route handlers using `async def`. It includes two GET routes: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' route accepts an integer item_id and an optional string query parameter q.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code snippet shows how to create an instance of the FastAPI class. This instance is used to define the API endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Dockerfile Command with Proxy Headers
DESCRIPTION: This command extends the basic Uvicorn command to include the `--proxy-headers` option. This is useful when running the container behind a TLS termination proxy (like Nginx or Traefik). It ensures Uvicorn trusts the headers sent by the proxy, correctly identifying that the app is running behind HTTPS.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_1

LANGUAGE: Dockerfile
CODE:
```
"CMD [\"uvicorn\", \"app.main:app\", \"--proxy-headers\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]"
```

----------------------------------------

TITLE: Pydantic Model Instantiation with Type Conversion
DESCRIPTION: This code shows how to instantiate Pydantic models using both keyword arguments and dictionary unpacking. It demonstrates that Pydantic automatically converts strings to dates based on the model's type annotations. This highlights Pydantic's ability to perform type validation and conversion during object creation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/features.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Using a Nested Model as a Type
DESCRIPTION: Shows how to use the `Image` model as a type for the `image` attribute in the `Item` model. This allows for nested JSON objects with specific attribute names, types, and validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-nested-models.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: set[str] = set()
    image: Optional[Image] = None
```

----------------------------------------

TITLE: Checking Active Python Virtual Environment (Linux, macOS)
DESCRIPTION: This command checks which Python interpreter is currently being used, indicating whether a virtual environment is active. It relies on the PATH variable to locate the python executable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_27

LANGUAGE: bash
CODE:
```
which python
```

----------------------------------------

TITLE: Combining response_class with Direct Response Return in FastAPI
DESCRIPTION: Shows how to document the response type in OpenAPI using response_class while still directly returning a custom Response object for more flexibility.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return generate_html_response()


def generate_html_response():
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)
```

----------------------------------------

TITLE: Initializing WebSocket endpoint
DESCRIPTION: Creates a WebSocket endpoint in a FastAPI application to handle incoming and outgoing messages. It defines the basic structure for handling WebSocket connections, receiving messages, and sending responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/advanced/websockets.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, WebSocket

app = FastAPI()


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: Installing packages using uv pip
DESCRIPTION: This command installs a specified Python package (in this case, `fastapi[standard]`) using `uv pip` within the active virtual environment. The `fastapi[standard]` syntax indicates that the `fastapi` package should be installed along with the `standard` extras.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_11

LANGUAGE: Shell
CODE:
```
```console
$ uv pip install "fastapi[standard]"
---> 100%
```
```

----------------------------------------

TITLE: Defining Deeply Nested Pydantic Models for FastAPI
DESCRIPTION: This example shows how to create deeply nested Pydantic models with multiple levels of nesting, including optional fields and lists of submodels.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()
    images: List[Image] | None = None

class Offer(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: List[Item]
```

----------------------------------------

TITLE: Returning values from dependencies in FastAPI
DESCRIPTION: Illustrates that path operation functions do not use the return values of path decorator dependencies, regardless of whether they return values or not. The example reuses the `get_token_header` and `get_key` dependencies, which return values, but these values are ignored by the `read_items` function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"async def get_token_header(x_token: str = Header()):\n    if x_token != \"fixed-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n    return x_token\n\nasync def get_key(x_key: str = Header()):\n    if x_key != \"fixed-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key"
```

LANGUAGE: Python
CODE:
```
"@app.get("/items/{item_id}", dependencies=[Depends(get_token_header), Depends(get_key)])\nasync def read_items(item_id: str):\n    return {"item_id": item_id}"
```

----------------------------------------

TITLE: Using Deprecated regex Parameter Instead of pattern (Pydantic v1)
DESCRIPTION: Shows the deprecated approach using the regex parameter instead of pattern for regular expression validation with Pydantic v1.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query
from typing import Annotated

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Annotated[
        str | None, Query(min_length=3, max_length=50, regex="^fixedquery$")
    ] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Path Parameter with Type Declaration
DESCRIPTION: Declares the type of the path parameter `item_id` as an integer using Python type annotations. FastAPI automatically parses the request and converts the string from the HTTP request into a Python integer.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Setting Response Headers using Response Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to set custom headers by declaring a `Response` parameter in a path operation function. You can modify the `headers` attribute of this temporary response object before returning your main response body (e.g., a dict or Pydantic model). FastAPI will then incorporate these headers into the final response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/response-headers.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/items/")
def read_items(response: Response):
    response.headers["X-My-Custom-Header"] = "Foobar"
    return {"item_id": "Foo"}
```

----------------------------------------

TITLE: Returning Arbitrary Dictionary Response
DESCRIPTION: Demonstrates returning a flexible dictionary response with type-hinted keys and values
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/extra-models.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/keyword-weights/", response_model=Dict[str, float])
def read_keyword_weights():
    return {"python": 10.0, "fastapi": 9.5}
```

----------------------------------------

TITLE: Excluding Path Operation from OpenAPI Schema in FastAPI
DESCRIPTION: Demonstrates how to exclude a path operation from the OpenAPI schema generation using the include_in_schema parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/items/", include_in_schema=False)
```

----------------------------------------

TITLE: Deactivating the virtual environment
DESCRIPTION: This command deactivates the currently active virtual environment. It reverts the shell environment to its original state, so that subsequent `python` commands will use the system-wide Python interpreter and packages instead of the virtual environment's.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_15

LANGUAGE: Shell
CODE:
```
```console
$ deactivate
```
```

----------------------------------------

TITLE: Combinando Información de Response en FastAPI
DESCRIPTION: Este snippet ilustra cómo combinar información de response de múltiples fuentes, incluyendo response_model, status_code y responses en FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/additional-responses.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={
        404: {"model": Message, "description": "The item was not found"},
        200: {
            "description": "Item requested by ID",
            "content": {
                "application/json": {
                    "example": {"id": "bar", "value": "The bar tenders"}
                }
            },
        },
    },
)
```

----------------------------------------

TITLE: Disable Automatic Documentation in FastAPI
DESCRIPTION: Disables the default Swagger UI and ReDoc documentation by setting their respective URLs to None when creating the FastAPI app instance. This is a prerequisite for serving custom documentation files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-docs-ui-assets.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    openapi_url=None,
    docs_url=None,
    redoc_url=None,
)
```

----------------------------------------

TITLE: Declaring Optional Type with typing.Optional (Python)
DESCRIPTION: Demonstrates how to declare a variable or parameter that can be either a specific type (e.g., `str`) or `None` using `typing.Optional`. This requires importing `Optional` from the `typing` module and is applicable in Python 3.6+.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import Optional

def say_hi(name: Optional[str]):
    if name:
        print(f"Hello {name}")
    else:
        print("Hello World")
```

----------------------------------------

TITLE: Defining Optional Query Parameter with Maximum Length Validation (Python <3.9)
DESCRIPTION: Defines the same optional query parameter 'q' but uses 'Union[str, None]' as the type hint in versions of Python below 3.9 while also incorporating the maximum length validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
q: Annotated[Union[str, None]] = Query(default=None, max_length=50)
```

----------------------------------------

TITLE: Annotated Type Hint Example (Python 3.9+)
DESCRIPTION: This example shows how to use `Annotated` to add metadata to type hints in Python 3.9 and later. The first type parameter passed to `Annotated` is the actual type, while the rest is metadata.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_22

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial013_py39.py!}
```

----------------------------------------

TITLE: Basic FastAPI Application Setup
DESCRIPTION: Initial setup of a FastAPI application with a basic route handler.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/extending-openapi.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/")
async def read_items():
    return [{"name": "Foo"}]
```

----------------------------------------

TITLE: Using Annotated for Type Hints with Metadata (Python 3.8+)
DESCRIPTION: Example of using Annotated to add metadata to type hints in Python 3.8+, importing from typing_extensions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
from typing_extensions import Annotated

def say_hello(name: Annotated[str, "This is just metadata"]):
    print(f"Hello {name}")
```

----------------------------------------

TITLE: Create a Path Operation for Testing
DESCRIPTION: This snippet creates a simple path operation to test if the custom documentation setup is working correctly. It defines a GET endpoint at the root path that returns a dictionary with a message.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-docs-ui-assets.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/")
async def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Declaring Query Parameter with Default Value in FastAPI
DESCRIPTION: This snippet shows how to declare a query parameter 'q' with a minimum length of 3 and a default value of 'fixedquery'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query(min_length=3)] = "fixedquery"
```

----------------------------------------

TITLE: Error response for forbidden extra form fields
DESCRIPTION: JSON error response returned when a client tries to submit form fields not defined in the Pydantic model when extra fields are forbidden.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-form-models.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "detail": [
        {
            "type": "extra_forbidden",
            "loc": ["body", "extra"],
            "msg": "Extra inputs are not permitted",
            "input": "Mr. Poopybutthole"
        }
    ]
}
```

----------------------------------------

TITLE: Install packages from requirements.txt using pip
DESCRIPTION: This command installs all packages listed in the requirements.txt file using pip. The -r flag specifies that pip should read the list of packages from the specified file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_12

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Forbidding Extra Headers in FastAPI with Pydantic Model
DESCRIPTION: This example demonstrates how to restrict the headers that can be received by using Pydantic's model configuration to forbid extra fields. This can be useful in special use cases where you want to strictly control the accepted headers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-param-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from pydantic import BaseModel

class HeaderModel(BaseModel):
    user_agent: str
    accept_language: str | None = None

    model_config = {
        "extra": "forbid"
    }
```

----------------------------------------

TITLE: Mixing Path, Query, and Body Parameters in FastAPI
DESCRIPTION: Demonstrates how to declare optional body parameters by assigning a default value of None. This example shows how to define an endpoint that accepts an optional Item model in the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body-multiple-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Body

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Union[Item, None] = Body(default=None),
    q: Union[str, None] = None,
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    if item:
        results.update({"item": item})
    return results
```

----------------------------------------

TITLE: Install FastAPI with Standard Dependencies
DESCRIPTION: This command installs FastAPI along with a set of standard optional dependencies. These dependencies provide additional features and integrations for FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/index.md#_snippet_1

LANGUAGE: Shell
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Define Attribute as List of Submodels
DESCRIPTION: Defines an attribute (`images`) in a Pydantic model (`Item`) as a list containing instances of another Pydantic model (`Image`). This allows the attribute to accept a JSON array where each element is an object matching the `Image` model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_8

LANGUAGE: Python
CODE:
```
images: List[Image] | None = None
```

----------------------------------------

TITLE: WebSocket Client HTML/JavaScript
DESCRIPTION: Defines a simple HTML page with JavaScript to interact with a WebSocket endpoint. It includes functions for opening a connection, sending messages, and displaying received messages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/websockets.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<!DOCTYPE html>
<html>
<head>
    <title>WebSocket Example</title>
</head>
<body>
    <h1>WebSocket Example</h1>
    <input type="text" id="messageInput" placeholder="Type your message here">
    <button onclick="sendMessage()">Send</button>
    <div id="messages"></div>

    <script>
        var websocket = new WebSocket("ws://localhost:8000/ws");

        websocket.onopen = function(event) {
            console.log("Connected to WebSocket server");
        };

        websocket.onmessage = function(event) {
            var messages = document.getElementById("messages")
            var message = document.createElement("p")
            var content = document.createTextNode(event.data)
            message.appendChild(content)
            messages.appendChild(message)
        };

        function sendMessage() {
            var messageInput = document.getElementById("messageInput")
            websocket.send(messageInput.value)
            messageInput.value = ""
        }
    </script>
</body>
</html>
```

----------------------------------------

TITLE: Marking FastAPI Path Operation as Deprecated - Python
DESCRIPTION: This snippet demonstrates how to mark a path operation as deprecated using the `deprecated=True` parameter in the decorator. This signals to users via the documentation that the endpoint is obsolete and should ideally not be used in new implementations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/", deprecated=True)
async def read_items():
    return [{"item": "Foo"}]


@app.get("/users/")
async def read_users():
    return [{"user": "Foo"}]

```

----------------------------------------

TITLE: Run FastAPI Development Server with CLI
DESCRIPTION: This command starts the FastAPI application in development mode using the `fastapi dev` command-line interface. It automatically detects the FastAPI application instance within the specified Python file (`main.py`), serves it using Uvicorn, and enables features like auto-reloading on code changes, which is highly beneficial for local development. The output includes the local server address and the URLs for the interactive API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_3

LANGUAGE: console
CODE:
```
fastapi dev main.py
```

----------------------------------------

TITLE: Creating RedirectResponse in FastAPI
DESCRIPTION: Demonstrates how to perform HTTP redirects in FastAPI by returning a RedirectResponse object that will automatically redirect the client to a specified URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/typer")
async def redirect_typer():
    return RedirectResponse("https://typer.tiangolo.com")
```

----------------------------------------

TITLE: Returning OAuth2 Token in FastAPI
DESCRIPTION: This code snippet demonstrates how to return an OAuth2 token in the response. It includes the access token and token type as required by the OAuth2 specification.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
return {"access_token": user.username, "token_type": "bearer"}
```

----------------------------------------

TITLE: Returning Custom XML Response in FastAPI
DESCRIPTION: This example shows how to return a custom XML response in a FastAPI route by creating a Response object with XML content and specifying the media type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-directly.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import Response

app = FastAPI()

@app.get("/legacy/")
def get_legacy_data():
    data = """
    <?xml version="1.0"?>
    <shampoo>
    <Header>
        <Company>ACME Shampoo Company</Company>
    </Header>
    <Calculations>
        <Calculation>
            <Value1>37</Value1>
            <Value2>2</Value2>
            <Answer>39</Answer>
        </Calculation>
    </Calculations>
    </shampoo>
    """
    return Response(content=data, media_type="application/xml")
```

----------------------------------------

TITLE: Initializing FastAPI with API Metadata - Python
DESCRIPTION: Initializes a FastAPI application with metadata such as title, summary, description, version, terms of service, contact information, and license information. The description field supports Markdown formatting.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/metadata.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="My Super Project",
    summary="Very nice project with very nice code.",
    description="Very nice project with very nice code.",
    version="0.1.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://example.com/contact/",
        "email": "dp@example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)


@app.get("/items/{item_id}")
async def read_items(item_id: str):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining path operations with APIRouter in a users module
DESCRIPTION: Demonstrates how to define path operations using an APIRouter instance in a users module, following the same pattern as with the FastAPI class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/bigger-applications.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()


@router.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]


@router.get("/users/me", tags=["users"])
async def read_user_me():
    return {"username": "fakecurrentuser"}


@router.get("/users/{username}", tags=["users"])
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Pydantic v1 Settings Configuration
DESCRIPTION: This Python code snippet demonstrates how to configure Pydantic v1 settings to read environment variables from a `.env` file. The `Config` inner class with `env_file` attribute specifies the path to the `.env` file. Requires `python-dotenv` package.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
"from pydantic import BaseSettings\n\n\nclass Settings(BaseSettings):\n    admin_email: str\n    app_name: str = \"Awesome API\"\n\n    class Config:\n        env_file = \".env\"\n\n\nsettings = Settings()\n\nprint(\"Admin E-mail:\", settings.admin_email)\nprint(\"App Name:\", settings.app_name)"
```

----------------------------------------

TITLE: Running Python Script with Incorrect Virtual Environment in Console
DESCRIPTION: This example demonstrates the error that occurs when trying to run a Python script with dependencies not installed in the active virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_32

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban

$ python main.py

// Error importing sirius, it's not installed 😱
Traceback (most recent call last):
    File "main.py", line 1, in <module>
        import sirius
```

----------------------------------------

TITLE: Using a Dictionary as a Dependency in FastAPI
DESCRIPTION: Example showing a function-based dependency that returns a dictionary with query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Combining Required, Default, and Optional Query Parameters
DESCRIPTION: This code snippet demonstrates how to define a combination of required, default, and optional query parameters in a FastAPI endpoint. 'needy' is required, 'skip' has a default value of 0, and 'limit' is optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(
    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None
):
    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}
    return item
```

----------------------------------------

TITLE: Using Await with Third-Party Libraries in FastAPI
DESCRIPTION: Shows how to properly use await with third-party libraries in an async path operation function. This pattern should be used when libraries support async/await operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
results = await some_library()
```

----------------------------------------

TITLE: Python Dictionary Unpacking Example
DESCRIPTION: Simple example showing how to use Python's dictionary unpacking technique to merge dictionaries. This is useful for combining predefined responses with custom ones in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
old_dict = {
    "old key": "old value",
    "second old key": "second old value",
}
new_dict = {**old_dict, "new key": "new value"}
```

----------------------------------------

TITLE: Password Validation and User Authentication
DESCRIPTION: This snippet shows how to validate a user's password against a stored hash and return an error if the password does not match. It uses a Pydantic model to represent the user data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/security/simple-oauth2.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from pydantic import BaseModel

app = FastAPI()

class User(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None

class UserInDB(User):
    hashed_password: str

users = {
    "johndoe": {
        "username": "johndoe",
        "password": "secret",
        "email": "johndoe@example.com",
        "full_name": "John Doe",
        "disabled": False,
        "hashed_password": "fakehashedsecret",
    },
}

@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user_dict = users.get(form_data.username)
    if not user_dict:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Incorrect username or password")
    user = UserInDB(**user_dict)
    hashed_password = user.hashed_password
    if hashed_password != form_data.password:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Incorrect username or password")
    return {"access_token": user.username, "token_type": "bearer"}
```

----------------------------------------

TITLE: Running FastAPI Application Console
DESCRIPTION: This command-line snippet shows how to run the FastAPI application defined in `main.py` using the Uvicorn server. The `--reload` flag enables auto-reloading of the application when code changes are detected.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/security/first-steps.md#_snippet_4

LANGUAGE: Console
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Initializing FastAPI App with Async Endpoints
DESCRIPTION: Creates a FastAPI application instance and defines two asynchronous GET endpoints: one for the root path ('/') and another for '/items/{item_id}' with a path parameter and an optional query parameter. It uses the FastAPI library and returns JSON responses using async def.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Pydantic Model Usage Example
DESCRIPTION: Shows how to instantiate and use Pydantic models with direct initialization and dictionary unpacking for data validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/features.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Pure List Body in FastAPI
DESCRIPTION: This example demonstrates how to accept a JSON list (array) directly as the request body in FastAPI.  It defines a function that takes a `List[Image]` as a parameter, where `Image` is a Pydantic model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
"from typing import List

from fastapi import FastAPI
from pydantic import BaseModel, HttpUrl

app = FastAPI()


class Image(BaseModel):
    url: HttpUrl
    name: str


@app.post("/images/")
async def create_images(images: List[Image]):
    return images"
```

----------------------------------------

TITLE: Sending Multiple Files in FastAPI
DESCRIPTION: This snippet demonstrates how to send multiple files by declaring a list of bytes or UploadFile. It allows handling multiple files associated with the same form field.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.post("/files/")
async def create_files(
    files: list[bytes] = File(),
):
    return {"file_sizes": [len(file) for file in files]}


@app.post("/uploadfiles/")
async def create_upload_files(
    files: list[UploadFile] = File(),
):
    return {"filenames": [file.filename for file in files]}
```

----------------------------------------

TITLE: Importing CORSMiddleware in FastAPI
DESCRIPTION: Shows how to import the Cross-Origin Resource Sharing (CORS) middleware from FastAPI. This middleware handles CORS headers for cross-domain requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.middleware.cors import CORSMiddleware
```

----------------------------------------

TITLE: Return Custom XML Response in FastAPI (Python)
DESCRIPTION: Shows how to return a response with a custom content type, such as XML, in FastAPI. It involves creating a `Response` object, providing the content as a string, and setting the `media_type` parameter to the appropriate MIME type (e.g., 'application/xml'). This bypasses FastAPI's automatic serialization and documentation features for this specific response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/response-directly.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import Response

app = FastAPI()

@app.get("/legacy/")
async def get_legacy_data():
    data = """<?xml version=\"1.0\"?>
    <shampoo>
      <Header>
        <data>Some data</data>
      </Header>
      <Body>
        <data>Some other data</data>
      </Body>
    </shampoo>
    """
    # Return a custom Response with XML content and media type
    return Response(content=data, media_type="application/xml")
```

----------------------------------------

TITLE: Creating Reusable Annotated Dependencies in FastAPI
DESCRIPTION: Shows how to create a reusable Annotated dependency to reduce code duplication when using the same dependency in multiple path operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
CommonsDep = Annotated[dict, Depends(common_parameters)]

@app.get("/items/")
async def read_items(commons: CommonsDep):
    return commons

@app.get("/users/")
async def read_users(commons: CommonsDep):
    return commons
```

----------------------------------------

TITLE: Truncating Docstring for OpenAPI in FastAPI
DESCRIPTION: Shows how to limit the docstring text used in OpenAPI by using a form feed character (\f) to truncate the output.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.get("/items/")
async def read_items():
    """Read items.

    This is a long description that will be truncated.
    \f
    :param foo: An extra parameter that won't be visible in OpenAPI.
    """
    return ["Foo", "Bar", "Baz"]
```

----------------------------------------

TITLE: Declaring Request Body Parameter
DESCRIPTION: This code snippet demonstrates how to declare a request body parameter in a FastAPI route. The type annotation `Item` specifies that the request body should conform to the `Item` model defined earlier.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def create_item(item: Item): # noqa: ARG001
    return item
```

----------------------------------------

TITLE: Receiving and Sending WebSocket Messages
DESCRIPTION: Demonstrates how to receive text messages from a WebSocket connection and send a response back to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/websockets.md#_snippet_4

LANGUAGE: Python
CODE:
```
await websocket.accept()
while True:
    data = await websocket.receive_text()
    await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: Use Pydantic's HttpUrl Type for Validation
DESCRIPTION: Imports and uses Pydantic's `HttpUrl` type for the `url` attribute in the `Image` model. This provides automatic validation to ensure the string is a valid URL and documents it accordingly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str
```

----------------------------------------

TITLE: Setting Default Response Class in FastAPI
DESCRIPTION: Shows how to set a default response class for all path operations in a FastAPI application using the `default_response_class` parameter when creating a FastAPI instance.  In this example, ORJSONResponse is used as the default instead of JSONResponse.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_11

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI(default_response_class=ORJSONResponse)


@app.get("/items/{item_id}")
async def read_main(item_id: str):
    return {"item_id": item_id}

```

----------------------------------------

TITLE: FastAPI Integrating Callback Router into Main Path Operation
DESCRIPTION: This snippet shows how to integrate the callback router's routes into the main API's path operation. By passing the `.routes` attribute of the callback router to the `callbacks` argument in the `@app.post` decorator, the callback API documentation is included in the main API's documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"from typing import Optional

from fastapi import APIRouter, FastAPI, Query
from pydantic import BaseModel, Url

app = FastAPI()


invoices_callback_router = APIRouter()


class Invoice(BaseModel):
    id: str
    title: Optional[str] = None
    customer: str
    total: float


class InvoiceEvent(BaseModel):
    description: str
    paid: bool


class InvoiceEventReceived(BaseModel):
    ok: bool


@invoices_callback_router.post("/invoices/{$request.body.id}", response_model=InvoiceEventReceived)
async def invoice_callback(body: InvoiceEvent):
    pass


@app.post("/invoices", callbacks=invoices_callback_router.routes)
async def create_invoice(
    invoice: Invoice,
    callback_url: Url = Query(
        ...,
        description="URL to send notifications when the invoice is processed.",
    ),
):
    return {"id": invoice.id}"
```

----------------------------------------

TITLE: FastAPI Application with Tag Organization
DESCRIPTION: A FastAPI application with routes organized using tags for 'items' and 'users', which helps generate more structured client code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    price: float


class ResponseMessage(BaseModel):
    message: str


class User(BaseModel):
    username: str
    email: str


app = FastAPI(
    title="FastAPI Client Example"
)


@app.post("/items/", response_model=ResponseMessage, tags=["items"])
async def create_item(item: Item):
    return {"message": f"Item {item.name} created"}


@app.get("/items/", tags=["items"])
async def get_items():
    return [
        {"name": "Plumbus", "price": 3},
        {"name": "Portal Gun", "price": 9001},
    ]


@app.get("/users/", tags=["users"])
async def get_users():
    return [{"username": "Rick"}, {"username": "Morty"}]
```

----------------------------------------

TITLE: Creating Asynchronous FastAPI Application in Python
DESCRIPTION: This code snippet shows the asynchronous version of the basic FastAPI application, using async/await syntax for both the root endpoint and the items endpoint, enabling non-blocking operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Path Order Matters
DESCRIPTION: Demonstrates the importance of the order of path operations. The `/users/me` path must be declared before `/users/{user_id}` to prevent FastAPI from interpreting `/users/me` as a request for user ID 'me'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Importing FastAPI App
DESCRIPTION: This code snippet shows how the FastAPI CLI imports the FastAPI app instance from a Python module. It automatically detects the app variable and imports it.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/fastapi-cli.md#_snippet_2

LANGUAGE: python
CODE:
```
from main import app
```

----------------------------------------

TITLE: Dependencies Request Requirements
DESCRIPTION: This code snippet showcases dependency functions that declare request requirements, such as headers, and also have sub-dependencies. These dependencies can enforce request validation or authentication before the main path operation is executed. The values returned by these dependencies (if any) are not utilized when they are declared within `dependencies` in the path operation decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def verify_token(x_token: str = Header(...)):
    if x_token != \"fake-super-secret-token\":
        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")


async def verify_key(x_key: str = Header(...)):
    if x_key != \"fake-super-secret-key\":
        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")
```

----------------------------------------

TITLE: Query Parameter with Minimum Length Validation
DESCRIPTION: This snippet demonstrates how to use the `min_length` parameter of the `Query` class to enforce a minimum length constraint on a string query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, min_length=3, max_length=50)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Defining a Token Dependency in FastAPI
DESCRIPTION: This code snippet defines a dependency that retrieves a token as a string.  It's used as part of a security system, allowing the path operation function to receive the token for authentication and authorization. This token is expected to be provided by the client in the authorization header.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}"
```

----------------------------------------

TITLE: Adding ASGI Middleware with FastAPI
DESCRIPTION: Shows the recommended way to add an ASGI middleware to a FastAPI application using app.add_middleware(). This method ensures proper integration with FastAPI's internal error handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

----------------------------------------

TITLE: Adding Custom Headers to HTTP Exceptions in FastAPI
DESCRIPTION: This snippet demonstrates how to add custom headers to an `HTTPException` when raising it.  This allows you to include additional information in the HTTP response headers. The `headers` parameter in the `HTTPException` constructor accepts a dictionary of header key-value pairs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, HTTPException\n\napp = FastAPI()\n\n@app.get("/items/{item_id}")\nasync def read_item(item_id: str):\n    if item_id != \"foo\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found\", headers={\"X-Error\": \"There goes my error\"}\n        )\n    return {\"item\": \"The Foo Wrestlers\"}"
```

----------------------------------------

TITLE: Setting Response Status Code in FastAPI
DESCRIPTION: Example of setting HTTP status code for a FastAPI path operation using status code constants from fastapi.status.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()

@app.post("/items/", status_code=status.HTTP_201_CREATED)
```

----------------------------------------

TITLE: Path Order Matters in FastAPI
DESCRIPTION: This example illustrates the importance of path order when defining routes in FastAPI. The more specific route `/users/me` should be defined before the route with a path parameter `/users/{user_id}`. Otherwise, FastAPI will interpret 'me' as the `user_id`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Installing packages using pip
DESCRIPTION: This command installs a specified Python package (in this case, `fastapi[standard]`) using `pip` within the active virtual environment. The `fastapi[standard]` syntax indicates that the `fastapi` package should be installed along with the `standard` extras.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_10

LANGUAGE: Shell
CODE:
```
```console
$ pip install "fastapi[standard]"

---> 100%
```
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a more complex data model using Pydantic's `Item` model. FastAPI uses this declaration for editor support, data validation, and data conversion for the `Item` object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Reading Environment Variables in Python
DESCRIPTION: This Python script reads the environment variable `MY_NAME` using `os.getenv()`. If the variable is not set, it defaults to "World". It then prints a greeting using the retrieved name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/environment-variables.md#_snippet_2

LANGUAGE: Python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Navigating to a Project Directory
DESCRIPTION: This command navigates the terminal to a specific project directory. It's used to switch between different projects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_29

LANGUAGE: bash
CODE:
```
cd ~/code/prisoner-of-azkaban
```

----------------------------------------

TITLE: Importing HTTPException in FastAPI
DESCRIPTION: To use `HTTPException` for raising standard HTTP errors, you need to import it from the `fastapi` package.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException
```

----------------------------------------

TITLE: Using Pydantic Model Attributes in FastAPI
DESCRIPTION: Demonstrates how to access attributes of a Pydantic model directly within a FastAPI function. This allows for easy access to the data validated and parsed by the model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body.md#_snippet_3

LANGUAGE: Python
CODE:
```
{* ../../docs_src/body/tutorial002.py hl[21] *}
```

----------------------------------------

TITLE: Reading Environment Variables in Python
DESCRIPTION: This Python code snippet shows how to read an environment variable named `MY_NAME` using `os.getenv()`. If the environment variable is not set, it defaults to "World". The code then prints a greeting using the value of the environment variable or the default value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/environment-variables.md#_snippet_2

LANGUAGE: Python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Installing python-multipart for File Uploads in FastAPI
DESCRIPTION: This snippet shows how to install the python-multipart package, which is required for handling file uploads in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.10+)
DESCRIPTION: Example of defining and using a Pydantic model in Python 3.10+, demonstrating data validation and type hinting.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
from datetime import datetime
from typing import List
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: datetime | None = None
    friends: List[int] = []

external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, 2, '3'],
}
user = User(**external_data)
print(user.id)
print(repr(user.signup_ts))
print(user.friends)
```

----------------------------------------

TITLE: Using Annotated for Parameter Ordering Without Asterisk
DESCRIPTION: Shows how Annotated simplifies parameter ordering by removing the need for default values in function parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path
from typing import Annotated

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(
    q: str,
    item_id: Annotated[int, Path()],
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results

```

----------------------------------------

TITLE: Setting and Using Environment Variables (Bash)
DESCRIPTION: Demonstrates how to set an environment variable named `MY_NAME` with the value "Wade Wilson" using the `export` command in a Bash shell. It then shows how to access this variable using the `echo` command to print a greeting.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/environment-variables.md#_snippet_0

LANGUAGE: Shell
CODE:
```
// Je zou een omgevingsvariabele MY_NAME kunnen maken met
$ export MY_NAME="Wade Wilson"

// Dan zou je deze met andere programma's kunnen gebruiken, zoals
$ echo "Hello $MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Using Body() with Examples in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to use Body() with examples in FastAPI. It shows how to pass a single example of the expected data in the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                },
            },
        },
    ),
):
```

----------------------------------------

TITLE: Initializing FastAPI Web Application
DESCRIPTION: Basic FastAPI application setup with root endpoint and type-annotated items route
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/it/docs/index.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float
    is_offer: bool = Optional[None]

@app.get("/")
def read_root():
    return {"Hello": "World"}

@app.get("/items/{item_id}")
def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}

@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Path Parameter Definition with Annotated (Python 3.9+)
DESCRIPTION: This snippet showcases defining a path parameter `item_id` with metadata using `Path` and `Annotated`, along with an optional query parameter `q`.  The use of `Annotated` avoids issues with parameter order, as it doesn't rely on default values for parameter declaration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"from typing import Annotated, Optional

from fastapi import FastAPI, Path

app = FastAPI()


@app.get(\"/items/{item_id}\")
async def read_items(item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: Optional[str] = None):
    return {\"item_id\": item_id, \"q\": q}"
```

----------------------------------------

TITLE: Nested Dependencies with yield
DESCRIPTION: Demonstrates nested dependencies where each dependency uses `yield`. FastAPI ensures that the exit code in each dependency is executed in the correct order, even when dependencies rely on values from other dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def dependency_a():
    dep_a = generate_dep_a()
    try:
        yield dep_a
    finally:
        await perform_cleanup_dep_a(dep_a)


async def dependency_b(dep_a=Depends(dependency_a)):
    dep_b = generate_dep_b()
    try:
        yield dep_b
    finally:
        await perform_cleanup_dep_b(dep_b, dep_a)


async def dependency_c(dep_b=Depends(dependency_b)):
    dep_c = generate_dep_c()
    try:
        yield dep_c
    finally:
        await perform_cleanup_dep_c(dep_c, dep_b)
```

----------------------------------------

TITLE: Defining a Background Task Function in FastAPI
DESCRIPTION: This code defines a function to be run as a background task. It writes a notification to a file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def write_notification(email: str, message=""):
    with open("log.txt", mode="w") as email_file:
        content = f"notification for {email}: {message}"
        email_file.write(content)
```

----------------------------------------

TITLE: Running FastAPI app with Uvicorn
DESCRIPTION: Executes a FastAPI application using Uvicorn, specifying the module and application object.  The host and port are configured for access.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/manually.md#_snippet_2

LANGUAGE: Shell
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 80
```

----------------------------------------

TITLE: Incorrect Usage of Async Function Without Await
DESCRIPTION: Demonstrates the incorrect way to call an async function without await, which will not work as expected. Instead of returning the results, this will return a coroutine object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
# This won't work, because get_burgers was defined with: async def
burgers = get_burgers(2)
```

----------------------------------------

TITLE: Adding Dependencies to Path Operation Decorator
DESCRIPTION: This code snippet demonstrates how to add a list of dependencies to the path operation decorator using the `dependencies` argument. The dependencies are executed but their return values are not passed to the path operation function. This approach is useful when the dependencies perform actions without needing to provide data to the function itself, and to avoid warnings from code editors about unused function parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async def read_items():
    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]"
```

----------------------------------------

TITLE: Defining File Parameters in FastAPI
DESCRIPTION: This snippet shows how to define file parameters in a FastAPI route using the `File` dependency. It demonstrates how to receive a file as bytes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-files.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, File

app = FastAPI()


@app.post("/files/")
async def create_file(file: Annotated[bytes, File()]):
    return {"file_size": len(file)}
```

----------------------------------------

TITLE: Query Parameter with Regular Expression Validation
DESCRIPTION: This snippet defines a query parameter `q` with regular expression validation using the `Query` class. The `regex` parameter enforces that the parameter value must match the provided regular expression.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Optional[str] = Query(None, min_length=3, max_length=50, regex="^fixedquery$")
):
    return {"q": q}
```

----------------------------------------

TITLE: Fixing Type Mismatch With Casting - Python
DESCRIPTION: Building on the previous example, this snippet demonstrates how to fix the type error by explicitly casting the integer `age` to a string using `str(age)` before concatenation. Type checkers will now see valid string operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_3

LANGUAGE: Python
CODE:
```
def get_name_and_age(name: str, age: int):
    return name + " is " + str(age)
```

----------------------------------------

TITLE: Using list of Pydantic Models
DESCRIPTION: This snippet demonstrates how to use a list of a Pydantic model (Image) as a type annotation for a variable, enforcing that the list contains only objects of that model type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
"images: list[Image]"
```

----------------------------------------

TITLE: Mounting Static Files with FastAPI
DESCRIPTION: This code snippet demonstrates how to include and mount a `StaticFiles` instance in a FastAPI application to serve static files from a specified directory. It imports necessary modules and defines the application and mounting point for the static files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/static-files.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"""\
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

app = FastAPI()

app.mount("/static", StaticFiles(directory="static"), name="static")
"""
```

----------------------------------------

TITLE: Defining Optional Query Parameter in FastAPI
DESCRIPTION: This snippet shows how to define an optional query parameter 'q' with a default value of None.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
q: Union[str, None] = None
```

----------------------------------------

TITLE: Importing Form from FastAPI in Python
DESCRIPTION: This code snippet demonstrates how to import the Form class from the FastAPI module, which is essential for handling form data in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-forms.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import Form
```

----------------------------------------

TITLE: Adicionar tarefa em segundo plano com BackgroundTasks
DESCRIPTION: Este snippet demonstra como adicionar uma tarefa em segundo plano usando o método .add_task() do objeto BackgroundTasks. Ele recebe a função de tarefa e seus argumentos como parâmetros.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/background-tasks.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import BackgroundTasks, FastAPI

app = FastAPI()


async def write_notification(email: str, message=""):
    with open("log.txt", mode="w") as f:
        f.write(f"notification for {email}: {message}")


@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
    background_tasks.add_task(write_notification, email, message="some notification")
    return {"message": "Notification sent in the background"}
```

----------------------------------------

TITLE: Importing Router Variables (Avoid Conflict)
DESCRIPTION: This code snippet demonstrates how to import router variables from different sub-modules while avoiding naming conflicts. Instead of directly importing the `router` variable, it imports the entire sub-module to access the router as `items.router` and `users.router`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_16

LANGUAGE: Python
CODE:
```
from .routers.items import router
from .routers.users import router
```

----------------------------------------

TITLE: Using Deprecated Regex Parameter in Pydantic v1 for Query Validation
DESCRIPTION: Illustrates the use of the 'regex' parameter in older versions of Pydantic as a means of validating string patterns in query parameters. This approach is now deprecated, shifting to 'pattern' in newer versions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query(regex='^fixedquery$')] = None
```

----------------------------------------

TITLE: Testing WebSocket Connections with TestClient
DESCRIPTION: Demonstrates how to establish and test a WebSocket connection using FastAPI's TestClient in a with statement. Provides a method to programmatically connect to and interact with WebSocket endpoints during testing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/testing-websockets.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
with test_client.websocket_connect("/ws") as websocket:
    data = websocket.receive_json()
    websocket.send_json({"message": "Hello"})
```

----------------------------------------

TITLE: Defining User Models with Pydantic
DESCRIPTION: This snippet defines three Pydantic models for handling user data: `UserIn` for input (including a password), `UserOut` for output (excluding the password), and `UserInDB` for database storage. It illustrates how to structure models to manage sensitive data appropriately in different contexts.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"""\nfrom typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: str\n    full_name: Optional[str] = None\n\n\nclass UserOut(BaseModel):\n    username: str\n    email: str\n    full_name: Optional[str] = None\n\n\nclass UserInDB(BaseModel):\n    username: str\n    password: str\n    email: str\n    full_name: Optional[str] = None\n"""
```

----------------------------------------

TITLE: Defining UploadFile Parameter in FastAPI
DESCRIPTION: This snippet shows how to define a file parameter as `UploadFile` in a FastAPI path operation function. `UploadFile` provides more functionalities such as streaming and metadata access.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/request-files.md#_snippet_2

LANGUAGE: python
CODE:
```
async def create_upload_file(file: UploadFile):
    return {"filename": file.filename}
```

----------------------------------------

TITLE: Example PATH variable (Windows)
DESCRIPTION: This is an example of how the PATH environment variable might look before activating a virtual environment on Windows.  It specifies directories where the operating system searches for executable programs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_24

LANGUAGE: plaintext
CODE:
```
C:\Windows\System32
```

----------------------------------------

TITLE: Example JSON Response from GET Endpoint
DESCRIPTION: This snippet shows the typical JSON output received from a FastAPI GET endpoint that returns a Python dictionary. When a request is made to the `/items/{item_id}` path with `item_id=5` and query parameter `q=somequery`, FastAPI automatically serializes the dictionary `{"item_id": 5, "q": "somequery"}` into this JSON format before sending it as the HTTP response body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_4

LANGUAGE: json
CODE:
```
{
  "item_id": 5,
  "q": "somequery"
}
```

----------------------------------------

TITLE: Defining a Startup Event Handler in FastAPI (Python)
DESCRIPTION: This example demonstrates how to create a startup event handler function in FastAPI. The function is decorated with @app.on_event("startup") and will be executed when the application starts.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.on_event("startup")
def startup_event():
    items["foo"] = {"name": "Fighters"}
    items["bar"] = {"name": "Tenders"}
```

----------------------------------------

TITLE: Importing BackgroundTasks and Defining Path Operation Function in FastAPI
DESCRIPTION: This snippet shows how to import BackgroundTasks from fastapi and define a path operation function with a BackgroundTasks parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/background-tasks.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import BackgroundTasks, FastAPI

# ...

@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
```

----------------------------------------

TITLE: Install pytest Testing Framework
DESCRIPTION: This command installs the 'pytest' framework, which is used to discover and run tests for your Python applications, including FastAPI. It's the standard tool recommended for executing the tests described in the document.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/testing.md#_snippet_1

LANGUAGE: console
CODE:
```
pip install pytest
```

----------------------------------------

TITLE: Creating a Regular Synchronous Function
DESCRIPTION: Shows a regular (non-async) function for contrast with the async version. This function cannot be awaited and will block execution when called.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
# This is not asynchronous
def get_sequential_burgers(number: int):
    # Do some sequential stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Creating a basic FastAPI application
DESCRIPTION: This Python code creates a basic FastAPI application with two endpoints: a root endpoint ("/") that returns a greeting and an endpoint for retrieving items by ID ("/items/{item_id}"). It uses type hints and Pydantic for data validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining a Root GET Endpoint with FastAPI
DESCRIPTION: Creating a simple root endpoint that returns a JSON response. The function is decorated with @app.get() to specify the HTTP method and route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Reading Environment Variable in Python
DESCRIPTION: A simple Python script that demonstrates reading an environment variable named `MY_NAME` using `os.getenv()`. It includes a default value ('World') which is used if the environment variable is not set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/environment-variables.md#_snippet_2

LANGUAGE: python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Importing UploadFile Class in FastAPI
DESCRIPTION: Shows how to import the UploadFile class from FastAPI. This class is used to handle file uploads in path operation functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/uploadfile.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import UploadFile
```

----------------------------------------

TITLE: Body Request Example Configuration
DESCRIPTION: Demonstrates adding an example to a Body parameter in a FastAPI endpoint, which will be displayed in the documentation UI
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.post("/items/")
def create_item(
    item: Item = Body(
        example={
            "name": "Foo",
            "description": "A very nice Item",
            "price": 35.4,
            "tax": 3.2
        }
    )
):
```

----------------------------------------

TITLE: Function with Type Annotations
DESCRIPTION: This snippet shows the addition of type annotations to the function parameters.  This enables editors to provide better auto-completion and type checking, improving the developer experience.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name"
```

----------------------------------------

TITLE: Setting Response Headers with Response Parameter in FastAPI (Python)
DESCRIPTION: Shows how to declare a Response parameter in a path operation function and set headers on it while still returning any object type. FastAPI extracts the headers from this temporary response and includes them in the final response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-headers.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()


@app.get("/headers-and-object/")
def get_headers(response: Response):
    response.headers["X-Cat-Dog"] = "alone in the world"
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: This command installs Uvicorn, an ASGI server, using pip. Uvicorn is required for running FastAPI applications in a production environment. The `[standard]` extra installs additional dependencies for Uvicorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Creating a Parameterized Dependency Instance in FastAPI
DESCRIPTION: This code shows how to create an instance of the callable class to be used as a parameterized dependency, with a fixed content value of "bar".
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
checker = FixedContentQueryChecker(fixed_content="bar")
```

----------------------------------------

TITLE: Basic FastAPI Process Management
DESCRIPTION: Example showing how to run a FastAPI application with Uvicorn in development mode. This is the simplest deployment method but not recommended for production use as it lacks automatic restarts and process management.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/concepts.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
fastapi run
```

----------------------------------------

TITLE: Preprocess OpenAPI Specification
DESCRIPTION: This JavaScript script preprocesses the OpenAPI specification to remove the tag prefix from operation IDs. It loads the OpenAPI JSON from a file, iterates through the paths, and modifies the operation IDs to remove the tag. This results in cleaner method names when generating client code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/generate-clients.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
const fs = require('fs');

const openapiFile = 'openapi.json';
const updatedOpenapiFile = 'openapi_updated.json';

fs.readFile(openapiFile, 'utf8', (err, data) => {
  if (err) {
    console.error('Error reading the file:', err);
    return;
  }

  try {
    const openapiData = JSON.parse(data);

    for (const path in openapiData.paths) {
      for (const operation in openapiData.paths[path]) {
        if (openapiData.paths[path][operation].operationId) {
          const operationId = openapiData.paths[path][operation].operationId;
          const newOperationId = operationId.split('-').pop();
          openapiData.paths[path][operation].operationId = newOperationId;
        }
      }
    }

    fs.writeFile(updatedOpenapiFile, JSON.stringify(openapiData, null, 2), 'utf8', (err) => {
      if (err) {
        console.error('Error writing the updated file:', err);
        return;
      }
      console.log('OpenAPI specification updated successfully.');
    });
  } catch (parseError) {
    console.error('Error parsing JSON:', parseError);
  }
});
```

----------------------------------------

TITLE: Password Hashing and Verification with PassLib
DESCRIPTION: This snippet demonstrates how to hash passwords using PassLib and verify them against stored hashes. It includes functions for hashing a password, verifying a password against a hash, and authenticating a user.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: Python
CODE:
```
from datetime import timedelta
from typing import Annotated

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


app = FastAPI()


ACCESS_TOKEN_EXPIRE_MINUTES = 30


# to get more information go to https://passlib.readthedocs.io/en/stable/context_tutorial.html
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def get_password_hash(password):
    return pwd_context.hash(password)


def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: str | None = None


async def authenticate_user(form_data: OAuth2PasswordRequestForm = Depends()):
    user = fake_users_db.get(form_data.username)
    if not user:
        raise HTTPException(status_code=400, detail="Incorrect username or password")
    hashed_pass = user["hashed_password"]
    if not verify_password(form_data.password, hashed_pass):
        raise HTTPException(status_code=400, detail="Incorrect username or password")

    return user
```

----------------------------------------

TITLE: Disabling Separate Input/Output Schemas in FastAPI Application
DESCRIPTION: Code showing how to disable the separation of input and output schemas in FastAPI by setting separate_input_output_schemas=False when creating the FastAPI application instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: str | None = None


app = FastAPI(separate_input_output_schemas=False)
```

----------------------------------------

TITLE: Reordering Parameters Trick with * in FastAPI
DESCRIPTION: This snippet demonstrates using the `*` argument in a function signature to force all subsequent arguments to be keyword arguments.  This allows you to reorder parameters such that a query parameter without a default can come before a path parameter defined with `Path`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_items(*, item_id: int = Path(title="The ID of the item to get"), q: str):\n    return {"item_id": item_id, "q": q}"
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function
DESCRIPTION: Defines a synchronous path operation function named `root` that returns a dictionary containing a message. This function serves the same purpose as the asynchronous example but is defined without the `async` keyword.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating Pydantic Model from Dict
DESCRIPTION: Shows how to create a Pydantic model instance from a dictionary using the ** unpacking operator. This allows initializing a model with data from a dictionary, which is useful for data transformation and database operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/extra-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
UserInDB(**user_dict)
```

LANGUAGE: Python
CODE:
```
UserInDB(
    username="john",
    password="secret",
    email="john.doe@example.com",
    full_name=None,
)
```

LANGUAGE: Python
CODE:
```
UserInDB(
    username = user_dict["username"],
    password = user_dict["password"],
    email = user_dict["email"],
    full_name = user_dict["full_name"],
)
```

LANGUAGE: Python
CODE:
```
UserInDB(**user_in.dict())
```

LANGUAGE: Python
CODE:
```
UserInDB(**user_in.dict(), hashed_password=hashed_password)
```

LANGUAGE: Python
CODE:
```
UserInDB(
    username = user_dict["username"],
    password = user_dict["password"],
    email = user_dict["email"],
    full_name = user_dict["full_name"],
    hashed_password = hashed_password,
)
```

----------------------------------------

TITLE: Using a Pydantic Model as Path Operation Output in FastAPI
DESCRIPTION: A code example highlighting how a Pydantic model is used as a return type/output in a FastAPI path operation. For output, all fields including those with default values are marked as required in the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Optional File Upload - Python FastAPI
DESCRIPTION: Implementation of optional file upload functionality using None as default value
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.post("/files/")
async def create_file(
    file: bytes | None = File(default=None)
):

@app.post("/uploadfile/")
async def create_upload_file(
    file: UploadFile | None = None
):
```

----------------------------------------

TITLE: Running FastAPI with multiple workers using the `uvicorn` command
DESCRIPTION: This command starts a FastAPI application with a specified number of worker processes using the `uvicorn` command directly. It uses the `--workers` option to define the number of worker processes, along with specifying the host and port.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: Shell
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
```

----------------------------------------

TITLE: Use a Submodel as an Attribute Type
DESCRIPTION: Defines an attribute in a Pydantic model (`Item`) whose type is another Pydantic model (`Image`). This creates a nested structure where the `image` attribute is expected to be a JSON object matching the `Image` model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
image: Image | None = None
```

----------------------------------------

TITLE: Initializing FastAPI Application
DESCRIPTION: This code snippet demonstrates how to import the FastAPI class and create an instance of it. The FastAPI class provides all the functionality for defining an API. The 'app' variable will be the main interaction point for creating APIs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()
```

----------------------------------------

TITLE: Creating a FastAPI Application Instance
DESCRIPTION: Instantiating the FastAPI class to create the main application object. This object serves as the primary interaction point for defining routes and API endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Using Alias for Query Parameters in FastAPI (Python 3.10+)
DESCRIPTION: Shows how to use an alias for a query parameter when the desired parameter name is not a valid Python variable name. The alias 'item-query' is used in the URL while the function uses 'q' internally.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(alias="item-query")] = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Boolean Query Parameter Conversion in FastAPI
DESCRIPTION: This code snippet demonstrates how FastAPI automatically converts query parameters to boolean values. The short parameter is defined as a boolean, and FastAPI will convert various string values (e.g., "1", "True", "true", "on", "yes") to True, and any other value to False.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, q: Optional[str] = None, short: bool = False):
    item = {"item_id": item_id}
    if q:
        item.update({"q": q})
    if not short:
        item.update(
            {"description": "This is an amazing item that has a long description"}
        )
    return item
```

----------------------------------------

TITLE: Using async def with await in FastAPI
DESCRIPTION: This snippet demonstrates how to define a path operation function using `async def` when interacting with a third-party library that requires the `await` keyword. The `await` keyword is used to wait for the result of the asynchronous operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Importing FastAPI App in Another Script Python
DESCRIPTION: Shows how another Python file would import the FastAPI application instance. When a file is imported, its `__name__` is set to the module's name, not `"__main__"`. This prevents the uvicorn server from starting automatically upon import.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/debugging.md#_snippet_2

LANGUAGE: Python
CODE:
```
from myapp import app

# Some more code
```

----------------------------------------

TITLE: Customizing OpenAPI URL in FastAPI with Python
DESCRIPTION: This code shows how to customize the OpenAPI URL in a FastAPI application. It initializes the FastAPI app with the `openapi_url` parameter set to '/api/v1/openapi.json', which changes the default URL where the OpenAPI schema is served.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/metadata.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(openapi_url="/api/v1/openapi.json")


@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Defining Optional File Parameters
DESCRIPTION: Shows how to make file uploads optional by setting default values to None and using standard type annotations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def create_file(file: bytes | None = File(default=None)):
```

----------------------------------------

TITLE: Overriding FastAPI's Exception Handlers
DESCRIPTION: This snippet demonstrates how to override FastAPI's default exception handlers. It shows how to import the built-in exception handlers from fastapi.exception_handlers, and then set them. This allows you to customize the behavior of the default exception handlers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.exceptions import RequestValidationError
from fastapi.exception_handlers import (  # Import the exception handlers
    request_validation_exception_handler,
    http_exception_handler,
)

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return await request_validation_exception_handler(request, exc)


@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return await http_exception_handler(request, exc)
```

----------------------------------------

TITLE: Importando HTTPException en FastAPI
DESCRIPTION: Muestra cómo importar la clase HTTPException desde el módulo fastapi para manejar errores HTTP en una API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException
```

----------------------------------------

TITLE: Creating Union Type Responses in FastAPI
DESCRIPTION: Demonstrates defining API responses that can return multiple model types using typing.Union
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/extra-models.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
def get_item(item_id: int) -> Union[PlaneItem, CarItem]:
    if item_id == 1:
        return PlaneItem(name="Boeing")
    return CarItem(name="Tesla")
```

----------------------------------------

TITLE: Initializing Admin APIRouter with Prefix and Dependencies
DESCRIPTION: Creates an APIRouter for admin routes with a specific prefix, dependencies, and configuration settings for handling administrative endpoints
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/internal/admin.py!}
```

----------------------------------------

TITLE: Example JSON Request Body
DESCRIPTION: Shows sample JSON request body formats that match the Pydantic model structure.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "Foo",
    "description": "An optional description",
    "price": 45.2,
    "tax": 3.5
}
```

LANGUAGE: json
CODE:
```
{
    "name": "Foo",
    "price": 45.2
}
```

----------------------------------------

TITLE: Basic WebSocket Endpoint in FastAPI
DESCRIPTION: Demonstrates how to create a simple WebSocket endpoint in a FastAPI application. It includes importing necessary modules and defining a WebSocket route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/websockets.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, WebSocket

app = FastAPI()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: Path Parameter Type Declaration in FastAPI
DESCRIPTION: This code snippet shows how to declare the type of a path parameter using Python type annotations. FastAPI uses this type information for data validation and conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Context Manager as Dependency with Yield in FastAPI
DESCRIPTION: This code shows how to use a context manager class as a dependency with `yield` in FastAPI.  The `__enter__` method is executed before the request, and the `__exit__` method is executed afterward for cleanup.  This is similar to using `@contextlib.contextmanager` or `@contextlib.asynccontextmanager`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"from typing import Generator\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nclass MyContextManager:\n    def __init__(self, name: str):\n        self.name = name\n\n    def __enter__(self):\n        print("Entering the context")\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print("Exiting the context")\n\n\nasync def get_context_manager() -> Generator[MyContextManager, None, None]:\n    context_manager = MyContextManager(name="example")\n    yield context_manager\n\n\n@app.get("/items/")\nasync def read_items(context_manager: MyContextManager = Depends(get_context_manager)):\n    return {"message": f"Hello {context_manager.name}"}"
```

----------------------------------------

TITLE: Returning Enum Members - FastAPI (Python)
DESCRIPTION: This code snippet shows how to return Enum members in your path operations, even when nested within a JSON response (e.g., a dictionary). FastAPI automatically converts the Enum members to their corresponding values (strings in this case) before sending them to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_7

LANGUAGE: Python
CODE:
```
from enum import Enum

from fastapi import FastAPI

app = FastAPI()


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"


@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}
    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Using a Pydantic Model in Python
DESCRIPTION: This code snippet demonstrates how to use a Pydantic model in Python. It shows how to create instances of the `User` model using both direct initialization and by passing a dictionary of data. The `User` model automatically validates the input data based on the defined types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/features.md#_snippet_2

LANGUAGE: python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Checking active Python (Windows PowerShell)
DESCRIPTION: This command, used in Windows PowerShell, retrieves information about the Python interpreter being used, including its path. It confirms the active Python environment after activation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_30

LANGUAGE: console
CODE:
```
$ Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```

----------------------------------------

TITLE: Install packages from requirements.txt with pip
DESCRIPTION: Installs packages listed in a requirements.txt file using pip. This is useful for managing project dependencies in a structured way.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_12

LANGUAGE: console
CODE:
```
$ pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: Accessing item name from a FastAPI response
DESCRIPTION: Accesses the 'item_name' attribute from the 'item' object to prepare responses for API clients, ensuring that clients receive relevant item details correctly formatted.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
... "item_name": item.name ...
```

----------------------------------------

TITLE: Python Function with Type Hints
DESCRIPTION: This Python function `get_full_name` demonstrates the use of type hints by specifying that `first_name` and `last_name` are strings (`str`). Type hints improve code readability, enable editor support for autocompletion and error checking, and allow tools like FastAPI to automatically perform data validation and conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"def get_full_name(first_name: str, last_name: str):
    return first_name.title() + " " + last_name.title()"
```

----------------------------------------

TITLE: Request Body and Path Parameters
DESCRIPTION: This code snippet shows how to combine request body parameters (using a Pydantic model) with path parameters in a FastAPI endpoint. FastAPI automatically distinguishes between them based on the function parameter type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body.md#_snippet_4

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item):
    return {"item_id": item_id, **item.dict()}
```

----------------------------------------

TITLE: Synchronous Function Definition in Python
DESCRIPTION: This code snippet shows a synchronous function definition in Python using the `def` keyword.  It represents a sequential (non-asynchronous) operation for creating burgers, contrasting with the asynchronous example. It takes an integer as input and returns burgers synchronously.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/async.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
```Python hl_lines="2"
# bu kod asenkron değil
def get_sequential_burgers(number: int):
    # burgerleri oluşturmak için senkron bırkaç iş
    return burgers
```
```

----------------------------------------

TITLE: Handling Request Bodies with Lists in FastAPI
DESCRIPTION: This code snippet illustrates how to handle request bodies that consist of lists of Pydantic models in FastAPI. It demonstrates how to declare the type of the function parameter as a list of a specific model, enabling automatic data validation and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-nested-models.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import FastAPI
from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str


app = FastAPI()


@app.post("/images/multiple/")
async def create_multiple_images(images: List[Image]):
    return images
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a more complex data model (Item) as a parameter in FastAPI. FastAPI uses this model for request body validation and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Using response_model Parameter in FastAPI Route Decorator
DESCRIPTION: This example demonstrates how to use the response_model parameter in a FastAPI route decorator to specify the response model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.get("/items/", response_model=List[Item])
def read_items():
    return [
        {"name": "Portal Gun", "price": 42.0},
        {"name": "Plumbus", "price": 32.0}
    ]
```

----------------------------------------

TITLE: Including an APIRouter in another APIRouter in FastAPI
DESCRIPTION: Demonstrates how to include one APIRouter within another APIRouter using the `include_router` method. This ensures that the route operations from the included router are also included in the main router before it is added to the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_19

LANGUAGE: Python
CODE:
```
router.include_router(other_router)
```

----------------------------------------

TITLE: Enum for Path Parameter Values
DESCRIPTION: Shows how to use Python's `Enum` to define a set of allowed values for a path parameter. This allows for validation and clearer documentation of the API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: python
CODE:
```
from enum import Enum


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Extending OpenAPI with Custom Schema in FastAPI
DESCRIPTION: This snippet demonstrates how to extend the OpenAPI schema with additional metadata using the `openapi_extra` parameter. It allows the inclusion of non-standard fields that can be helpful for the API consumers while maintaining the standard OpenAPI structure.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
@app.get('/items/', openapi_extra={"x-custom-field": "value"})
async def read_items():
    return ['item1', 'item2']
```

----------------------------------------

TITLE: Multiple Path and Query Parameters
DESCRIPTION: Example of defining multiple path and query parameters with flexible order
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def read_items(skip: int = 0, limit: int | None = None):
    return {"skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Writing a Jinja Template (item.html) - Jinja
DESCRIPTION: Example of an HTML template using Jinja syntax. It demonstrates interpolating variables passed from the backend (`{{ id }}`) and generating URLs for other path operations or static files using `{{ url_for(...) }}`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/templates.md#_snippet_2

LANGUAGE: Jinja
CODE:
```
<!DOCTYPE html>
<html>
<head>
    <title>Item</title>
    {# Link to a static CSS file using url_for #}
    <link rel="stylesheet" href="{{ url_for('static', path='/styles.css') }}">
</head>
<body>
    {# Interpolate the 'id' variable #}
    <h1>Item ID: {{ id }}</h1>
    {# Generate a link to another item using url_for #}
    <p>Link back: <a href="{{ url_for('read_item', id=id) }}">Link to this item</a></p>
</body>
</html>
```

----------------------------------------

TITLE: Installing Hypercorn ASGI Server
DESCRIPTION: Installs Hypercorn, an ASGI server that supports HTTP/2, using pip. This command sets up Hypercorn as the server to run the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/manually.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install hypercorn

---> 100%
```

----------------------------------------

TITLE: Importing File and UploadFile in FastAPI
DESCRIPTION: This snippet shows how to import `File` and `UploadFile` from `fastapi`. These are essential for handling file uploads in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/request-files.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, File, UploadFile
```

----------------------------------------

TITLE: Database Session Dependency with Yield
DESCRIPTION: Example showing how to create a database session dependency that handles cleanup after the response
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Extended FastAPI App (Python 3.10+ non-Annotated)
DESCRIPTION: This is an extended FastAPI application example with multiple route operations, including GET and POST requests, error handling, and header requirements. It uses Python 3.10+ syntax without Annotated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/testing.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import Depends, FastAPI, Header, HTTPException
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


async def verify_token(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")


async def verify_key(x_key: str = Header()):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="Invalid X-Key header")
    return x_key


@app.get("/items/")
async def read_items(commons: str = Depends(verify_key)):
    return {"message": "Items"}


@app.post("/items/")
async def create_item(
    item: Item,
    commons: str = Depends(verify_key),
    x_token: str = Header(),
):
    return item
```

----------------------------------------

TITLE: Setting Custom APIRoute Class in FastAPI Router
DESCRIPTION: This code snippet demonstrates how to configure an APIRouter to use a custom route class (TimedRoute) for all routes declared under that router. The route_class parameter is used to specify the custom class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
router = APIRouter(route_class=TimedRoute)
```

----------------------------------------

TITLE: Performing Cleanup on FastAPI Shutdown (Python)
DESCRIPTION: Illustrates how to use the `on_shutdown` parameter of the `FastAPI` class to register a function that executes when the application is shutting down. This is useful for cleanup tasks like closing file handles, database connections, or writing final log entries. The function can be synchronous (`def`) or asynchronous (`async def`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

# Define a shutdown event handler
def shutdown_event():
    print("Application shutting down...")
    # Perform cleanup, e.g., write to a log file
    # Use mode="a" to append to the file without overwriting
    with open("log.txt", mode="a") as log_file:
        log_file.write("Application shutdown\n")

# Create a FastAPI app, registering the shutdown handler
app = FastAPI(on_shutdown=[shutdown_event])

# Example endpoint (the shutdown logic is separate)
@app.get("/")
def read_root():
    return {"message": "Application is running. Check log.txt after shutdown."}
```

----------------------------------------

TITLE: Using Pydantic Models in FastAPI in Spanish
DESCRIPTION: Example demonstrating how to instantiate and use Pydantic models in FastAPI, including direct instantiation and dictionary unpacking for model creation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/features.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Exception Handling in Dependencies
DESCRIPTION: This code snippet demonstrates how dependencies can raise exceptions using `raise`. Similar to standard dependencies, dependencies defined within the path operation decorator's `dependencies` parameter can halt execution and return an error response. This mechanism is useful for implementing authentication or authorization checks before proceeding with the main path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def verify_token(x_token: str = Header(...)):
    if x_token != \"fake-super-secret-token\":
        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")


async def verify_key(x_key: str = Header(...)):
    if x_key != \"fake-super-secret-key\":
        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")
```

----------------------------------------

TITLE: Running Documentation Server with Live Reloading
DESCRIPTION: Command to serve documentation locally with live reloading for development purposes. This enables instant preview of documentation changes at http://127.0.0.1:8008.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
$ python ./scripts/docs.py live

<span style="color: green;">[INFO]</span> Serving on http://127.0.0.1:8008
<span style="color: green;">[INFO]</span> Start watching changes
<span style="color: green;">[INFO]</span> Start detecting changes
```

----------------------------------------

TITLE: Custom OpenAPI Content Type with Pydantic v1
DESCRIPTION: Demonstrates how to use a Pydantic model to define a custom content type (YAML) in the OpenAPI schema, even when the request body is not parsed as JSON. It shows how to manually generate the JSON schema from the Pydantic model and use it in the OpenAPI definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/path-operation-advanced-configuration.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Header
from pydantic import BaseModel
import yaml

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None

    class Config:
        schema_extra = {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            ]
        }


@app.post("/items/")
async def create_item(
    data: bytes,
    content_type: str = Header(None),
):
    if content_type == "application/yaml":
        body = yaml.safe_load(data)
    else:
        body = data
    item = Item.parse_obj(body)
    return item
```

----------------------------------------

TITLE: OpenAPI Response Schema Example for FastAPI
DESCRIPTION: JSON representation of an OpenAPI response schema generated by FastAPI. This shows how different response types are structured in the OpenAPI documentation, including references to component schemas.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
    "responses": {
        "404": {
            "description": "Additional Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Message"
                    }
                }
            }
        },
        "200": {
            "description": "Successful Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Item"
                    }
                }
            }
        },
        "422": {
            "description": "Validation Error",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Custom TimedRoute Class in FastAPI
DESCRIPTION: This code defines a custom APIRoute class called TimedRoute that overrides the get_route_handler method to add a custom header (X-Response-Time) to the response. It calculates the time taken to process the request and includes it in the header.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-request-and-route.md#_snippet_5

LANGUAGE: Python
CODE:
```
from time import time

from fastapi import APIRouter, FastAPI
from fastapi.routing import APIRoute


class TimedRoute(APIRoute):
    def get_route_handler(self):
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request):
            before = time()
            response = await original_route_handler(request)
            duration = time() - before
            response.headers["X-Response-Time"] = str(duration)
            return response

        return custom_route_handler
```

----------------------------------------

TITLE: Running FastAPI with Hypercorn
DESCRIPTION: This command runs a FastAPI application using Hypercorn, binding it to host 0.0.0.0 and port 80. The --reload option should not be used in production.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/deployment/manually.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ hypercorn main:app --bind 0.0.0.0:80

Running on 0.0.0.0:8080 over http (CTRL + C to quit)
```

----------------------------------------

TITLE: Combining Default Responses with Custom Ones in FastAPI
DESCRIPTION: Demonstrates how to combine default responses with custom ones using Python dictionary unpacking in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
responses = {
    400: {"description": "Bad request"},
    401: {"description": "Unauthorized"},
}

@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={**responses, 404: {"description": "Not found"}},
)
```

----------------------------------------

TITLE: Declaring Query Parameter with Default List Values in FastAPI
DESCRIPTION: This snippet shows how to declare a query parameter that accepts multiple values and has a default list of values if none are provided.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
q: Annotated[list[str], Query()] = ["foo", "bar"]
```

----------------------------------------

TITLE: Numeric Validation: Greater Than or Equal in FastAPI
DESCRIPTION: This snippet demonstrates how to use `Path` with `Annotated` to enforce that a path parameter `item_id` is greater than or equal to 1 using the `ge` parameter. The parameter `item_id` will be validated to ensure its value meets the given criteria.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
"from typing import Annotated

from fastapi import FastAPI, Path

app = FastAPI()


@app.get(\"/items/{item_id}\")
async def read_items(item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)]):
    return {\"item_id\": item_id}"
```

----------------------------------------

TITLE: Disabling Dependency Caching in FastAPI
DESCRIPTION: This code demonstrates how to disable caching for a dependency in FastAPI. By setting use_cache=False, the dependency will be re-evaluated on each call, even within the same request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
async def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):
    return {"fresh_value": fresh_value}
```

----------------------------------------

TITLE: Install Python Dependencies with pip
DESCRIPTION: Command to install Python packages listed in a 'requirements.txt' file using pip. This is a common step in preparing the environment for a Python application, often executed as a layer during the Docker build process to manage dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_2

LANGUAGE: Console
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Implementing WebSocket Client in HTML/JavaScript with FastAPI
DESCRIPTION: A simple HTML/JavaScript implementation to serve as a WebSocket client. This code creates a basic UI with a message input and display area to communicate with a FastAPI WebSocket endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, WebSocket
from fastapi.responses import HTMLResponse

app = FastAPI()

html = """
<!DOCTYPE html>
<html>
    <head>
        <title>Chat</title>
    </head>
    <body>
        <h1>WebSocket Chat</h1>
        <form action="" onsubmit="sendMessage(event)">
            <input type="text" id="messageText" autocomplete="off"/>
            <button>Send</button>
        </form>
        <ul id='messages'>
        </ul>
        <script>
            var ws = new WebSocket("ws://localhost:8000/ws");
            ws.onmessage = function(event) {
                var messages = document.getElementById('messages')
                var message = document.createElement('li')
                var content = document.createTextNode(event.data)
                message.appendChild(content)
                messages.appendChild(message)
            };
            function sendMessage(event) {
                var input = document.getElementById("messageText")
                ws.send(input.value)
                input.value = ''
                event.preventDefault()
            }
        </script>
    </body>
</html>
"""


@app.get("/")
async def get():
    return HTMLResponse(html)


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")

```

----------------------------------------

TITLE: Installing Uvicorn
DESCRIPTION: This command installs Uvicorn, an ASGI server, which is required to run FastAPI applications. The `[standard]` extra installs commonly used Uvicorn dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/he/docs/index.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Setting environment variables and running FastAPI
DESCRIPTION: This command demonstrates setting environment variables `ADMIN_EMAIL` and `APP_NAME` directly in the terminal when running the FastAPI application. This allows configuring the application without modifying the code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_5

LANGUAGE: Bash
CODE:
```
$ ADMIN_EMAIL="deadpool@example.com" APP_NAME="ChimichangApp" fastapi run main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Using ORJSONResponse in FastAPI
DESCRIPTION: Demonstrates how to use ORJSONResponse for improved performance when returning JSON responses in FastAPI. It imports the ORJSONResponse class and sets it as the response_class in the route decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()


@app.get("/items/", response_class=ORJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]
```

----------------------------------------

TITLE: Required Parameters with Annotated Syntax
DESCRIPTION: Demonstrates using Annotated for declaring required parameters in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from typing import Annotated\nfrom fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str, Query()]\n):\n    return {\"item_id\": item_id, \"q\": q}
```

----------------------------------------

TITLE: Defining a Path Operation Function (Sync)
DESCRIPTION: This code snippet shows how to define a synchronous path operation function that handles requests to a specific path. It uses `def` to define a standard Python function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Creating Simple FastAPI Application in Python
DESCRIPTION: This code snippet demonstrates how to create a basic FastAPI application with two endpoints: a root endpoint that returns a greeting and an items endpoint that accepts an ID parameter and an optional query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Importing Required Libraries for File Uploading in FastAPI
DESCRIPTION: This snippet demonstrates how to import the necessary libraries for managing file uploads in FastAPI. It requires the 'python-multipart' library to handle multipart form data submissions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import UploadFile, File
```

----------------------------------------

TITLE: Numeric Validation: Greater Than and Less Than or Equal
DESCRIPTION: This code snippet demonstrates how to use `gt` (greater than) and `le` (less than or equal) for numeric validations with `Path`. The `item_id` must be greater than 0 and less than or equal to 1000.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params-numeric-validations.md#_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Path

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(item_id: int = Path(gt=0, le=1000)):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Activating the virtual environment (Linux, macOS)
DESCRIPTION: This command activates the virtual environment on Linux and macOS systems. It sources the `activate` script located in the `.venv/bin` directory, modifying the shell environment to use the virtual environment's Python interpreter and installed packages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_3

LANGUAGE: Shell
CODE:
```
```console
$ source .venv/bin/activate
```
```

----------------------------------------

TITLE: Multiple User Models with Password Variations
DESCRIPTION: Demonstrates creating different Pydantic models for user input, output, and database storage with varying password handling
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/extra-models.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from pydantic import BaseModel

class UserIn(BaseModel):
    username: str
    password: str
    email: str
    full_name: str = None

class UserOut(BaseModel):
    username: str
    email: str
    full_name: str = None

class UserInDB(BaseModel):
    username: str
    hashed_password: str
    email: str
    full_name: str = None
```

----------------------------------------

TITLE: Installing FastAPI with uv
DESCRIPTION: Command to install FastAPI with all optional dependencies using uv in the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
$ uv pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Raising HTTPException in FastAPI
DESCRIPTION: This code snippet showcases how to raise an HTTPException in a FastAPI endpoint. When the item_id is not "foo", an HTTPException with a status code of 404 and a detail message "Item not found" is raised. This results in a HTTP 404 response being returned to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
        from fastapi import HTTPException

        @app.get("/items/{item_id}")
        def read_item(item_id: str):
            if item_id != "foo":
                raise HTTPException(status_code=404, detail="Item not found")
            return {"item": "The Foo Wrestlers"}
```

----------------------------------------

TITLE: Converting Pydantic Model to Dictionary
DESCRIPTION: Demonstrates how to convert a Pydantic model to a Python dictionary using the dict() method.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
user_dict = user_in.dict()
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value of the `item_id` parameter will be passed to the function as an argument.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Returning HTML Content with HTMLResponse in FastAPI
DESCRIPTION: Example demonstrating how to return HTML content by setting HTMLResponse as the response_class parameter. This sets the Content-Type header to text/html.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return """<html><head><title>Some HTML in here</title></head><body><h1>Look ma! HTML!</h1></body></html>"""
```

----------------------------------------

TITLE: Initializing FastAPI with openapi_tags - Python
DESCRIPTION: This code snippet demonstrates how to add metadata for tags in FastAPI using the `openapi_tags` parameter. It shows how to include descriptions and external documentation links for each tag.  Markdown can be used in descriptions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"""Metadata for tags.
"""

from fastapi import FastAPI

tags_metadata = [
    {
        "name": "users",
        "description": "Operations with users. The **login** logic is also here.",
    },
    {
        "name": "items",
        "description": "Manage items. So _fancy_ they have their own docs.",
        "externalDocs": {
            "description": "Items external docs description",
            "url": "https://example.com/",
        },
    },
]

app = FastAPI(openapi_tags=tags_metadata)


@app.get("/users", tags=["users"])
async def get_users():
    return [{"name": "Harry"}, {"name": "Potter"}]


@app.get("/items", tags=["items"])
async def get_items():
    return [{"name": "wand"}, {"name": "flying broom"}]

```

LANGUAGE: Python
CODE:
```
@app.get("/users", tags=["users"])
async def get_users():
    return [{"name": "Harry"}, {"name": "Potter"}]


@app.get("/items", tags=["items"])
async def get_items():
    return [{"name": "wand"}, {"name": "flying broom"}]

```

----------------------------------------

TITLE: Using Class Dependency with Explicit Type and Depends
DESCRIPTION: Example of declaring a dependency using a class with both type annotation and Depends.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = fake_items_db[commons.skip : commons.skip + commons.limit]
    response.update({"items": items})
    return response
```

----------------------------------------

TITLE: Docker Multi-Stage Build with Poetry
DESCRIPTION: This Dockerfile uses a multi-stage build to manage dependencies with Poetry. It installs Poetry in the first stage, generates a requirements.txt file, and then installs the dependencies in the final image using pip.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_13

LANGUAGE: Dockerfile
CODE:
```
# (1)
FROM python:3.9 as requirements-stage

# (2)
WORKDIR /tmp

# (3)
RUN pip install poetry

# (4)
COPY ./pyproject.toml ./poetry.lock* /tmp/

# (5)
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

# (6)
FROM python:3.9

# (7)
WORKDIR /code

# (8)
COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

# (9)
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (10)
COPY ./app /code/app

# (11)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Query Parameter List / Multiple Values
DESCRIPTION: This snippet demonstrates how to declare a query parameter that can accept a list of values. By using `List[str]` and `Query`, FastAPI will accept multiple values for the same query parameter name in the URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import List, Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Optional[List[str]] = Query(None)):
    return {"q": q}
```

----------------------------------------

TITLE: Define PUT Request with Pydantic Model in FastAPI
DESCRIPTION: This code defines a PUT endpoint `/items/{item_id}` in a FastAPI application that accepts a request body of type `Item`, which is a Pydantic model. The `Item` model defines the expected structure of the request body, including fields like `name`, `price`, and `is_offer`. The function `update_item` handles the PUT request and returns a dictionary containing the item's name and ID.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Define Settings Model (Pydantic v2)
DESCRIPTION: Create a settings model by subclassing `BaseSettings` from `pydantic_settings`. Declare settings fields as class attributes with type annotations and optional default values. Use `SettingsConfigDict` for configuration like specifying an environment file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_1

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field

class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50
    model_config = SettingsConfigDict(env_file=".env")

settings = Settings()

from fastapi import FastAPI

app = FastAPI()

@app.get("/info")
async def info():
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Basic FastAPI Application with Models for Client Generation
DESCRIPTION: A simple FastAPI application with Item and ResponseMessage models that demonstrates how to structure an API for client generation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    price: float


class ResponseMessage(BaseModel):
    message: str


app = FastAPI(
    title="FastAPI Client Example"
)


@app.post("/items/", response_model=ResponseMessage)
async def create_item(item: Item):
    return {"message": f"Item {item.name} created"}
```

----------------------------------------

TITLE: Request Body and Route Parameters in FastAPI
DESCRIPTION: This example illustrates how FastAPI can simultaneously handle request body data (using Pydantic models) and route parameters. FastAPI intelligently distinguishes between them based on the function parameter types and route declarations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body.md#_snippet_4

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item):
    return {"item_id": item_id, **item.dict()}
```

----------------------------------------

TITLE: Path Parameter Ordering
DESCRIPTION: This example demonstrates the importance of path ordering in FastAPI. The `/users/me` path must be defined before `/users/{user_id}` to prevent the latter from incorrectly matching `/users/me`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Install FastAPI with uv
DESCRIPTION: Installs FastAPI and its standard dependencies using uv, a faster alternative to pip. This command directly installs the packages without using a requirements file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_11

LANGUAGE: console
CODE:
```
$ uv pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Setting API Metadata in FastAPI
DESCRIPTION: This code snippet demonstrates how to set the title and description metadata for a FastAPI application. The `title` parameter sets the API's title, and the `description` parameter sets a brief description. Markdown can be used in the description.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/metadata.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"""
from fastapi import FastAPI

app = FastAPI(
    title="My Super Project",
    description="This is a very fancy project, with auto docs for the API and everything",
)


@app.get("/")
async def read_root():
    return {"Hello": "World"}
"""
```

----------------------------------------

TITLE: Using a Nested Model as a Field Type
DESCRIPTION: Including a nested Pydantic model as a field in another model, allowing for hierarchical data structures in request bodies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
image: Image | None = None
```

----------------------------------------

TITLE: Reducing Duplication with Pydantic Model Inheritance
DESCRIPTION: Shows how to use model inheritance to avoid code duplication when working with multiple related models. A base model defines common attributes while subclasses add specific fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class UserBase(BaseModel):
    username: str
    email: str
    full_name: str | None = None


class UserIn(UserBase):
    password: str


class UserOut(UserBase):
    pass


class UserInDB(UserBase):
    hashed_password: str


def fake_password_hasher(raw_password: str):
    return f"supersecret{raw_password}"


def fake_save_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)
    print("User saved! ..not really")
    return user_in_db


app = FastAPI()


@app.post("/user/", response_model=UserOut)
async def create_user(user_in: UserIn):
    user_saved = fake_save_user(user_in)
    return user_saved
```

----------------------------------------

TITLE: Initializing Main FastAPI Application (Python)
DESCRIPTION: This snippet shows the initialization of the main, top-level FastAPI application instance and defines a simple path operation for the root route ('/'). This is the base application where other sub-applications will be mounted.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining Uvicorn Command for Single File App
DESCRIPTION: This command configures the execution of the Uvicorn server when the FastAPI application is in a single file (`main.py`).  It instructs Uvicorn to import the `app` object from the `main` module, serving the application.  The `--host` and `--port` flags set the listening address and port for the server.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_8

LANGUAGE: Dockerfile
CODE:
```
"CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]"
```

----------------------------------------

TITLE: Declaring Model Attributes with Pydantic Field in Python
DESCRIPTION: This snippet shows how to define model attributes within a Pydantic model using the `Field` class. It demonstrates assigning default values and using `Field` to add metadata and validations to the attributes. This is used to define the structure and constraints of request body data in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-fields.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
        description: str = Field(
            default="A very nice Item", title="Item Description"
        )

```

----------------------------------------

TITLE: Numeric Validation: Greater Than or Equal
DESCRIPTION: This code snippet shows how to use numeric validations with `Path` to ensure that a path parameter meets certain criteria. In this case, `item_id` must be an integer greater than or equal to 1.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params-numeric-validations.md#_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Path

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(item_id: int = Path(ge=1)):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Activating Virtual Environment on Windows PowerShell
DESCRIPTION: This command activates a virtual environment in Windows PowerShell by executing the Activate.ps1 script. It modifies the PATH environment variable to prioritize the virtual environment's binaries.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_21

LANGUAGE: powershell
CODE:
```
.venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Declaring OpenAPI Examples with openapi_examples in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare OpenAPI examples using the `openapi_examples` parameter within FastAPI. It showcases the structure of the example dictionary, including keys like `summary`, `description`, and `value`, to provide comprehensive examples for API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/schema-extra-example.md#_snippet_4

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import Body, FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None


@app.post("/items/")
async def create_item(
    item: Item = Body(
        openapi_examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                },
            },
            "invalid": {
                "summary": "Invalid example",
                "description": "An item that doesn't pass validation.",
                "value": {
                    "name": "Bar",
                    "price": "thirty five point four",
                },
            },
        },
    ),
):
    return item
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code defines a basic FastAPI application with a single endpoint that returns a JSON response. It imports FastAPI, creates an app instance, and defines a path operation decorator for the root path ('/').
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Defining GET Route in FastAPI
DESCRIPTION: Shows how to define a GET route in FastAPI. This snippet is used to compare the API design of FastAPI with that of the Requests library, highlighting the similarities in simplicity and intuitiveness.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/alternatives.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Using Annotated with Query and Path in FastAPI (Python)
DESCRIPTION: Shows how to use Annotated with Query and Path for parameter ordering in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def read_items(q: Annotated[str, Query()], item_id: Annotated[int, Path()]):
```

----------------------------------------

TITLE: Initializing FastAPI App
DESCRIPTION: Create a basic FastAPI application with two endpoints: `/` which returns a simple greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Hinting Common Basic Types - Python
DESCRIPTION: This snippet illustrates type hinting with other common basic Python types: `int`, `float`, and `bool`. This allows editors and tools to understand the expected type of each parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
def get_items(item1: int, item2: float, item3: bool):
    return item1, item2, item3
```

----------------------------------------

TITLE: OpenAPI Schema Example
DESCRIPTION: Example of an OpenAPI schema configuration with a servers array that specifies the URL for the API, including the path prefix.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "openapi": "3.1.0",
    "servers": [
        {
            "url": "/api/v1"
        }
    ],
    "paths": {}
}
```

----------------------------------------

TITLE: Copying Application Code in Dockerfile
DESCRIPTION: This command copies the application code (located in the `./app` directory on the host) to the `/code/app` directory within the Docker image. This step is placed towards the end of the Dockerfile because application code changes more frequently.  This approach minimizes the amount of the Dockerfile that needs to be re-executed during development, improving build times.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_4

LANGUAGE: Dockerfile
CODE:
```
"COPY ./app /code/app"
```

----------------------------------------

TITLE: Declaring a Variable with Type Hints in Python
DESCRIPTION: This code snippet demonstrates how to declare a variable with a type hint in Python using modern Python syntax. It shows how to define a function that accepts a string as input and returns a string, leveraging editor support for type checking and autocompletion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import List, Dict
from datetime import date

from pydantic import BaseModel

# Deklarieren Sie eine Variable als ein `str`
# und bekommen Sie Editor-Unterstützung innerhalb der Funktion
def main(user_id: str):
    return user_id


# Ein Pydantic-Modell
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Handling Multiple WebSocket Clients in FastAPI
DESCRIPTION: Demonstrates how to handle multiple WebSocket connections and broadcast messages to all connected clients. It also shows how to handle disconnections.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/websockets.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
except WebSocketDisconnect:
    manager.disconnect(websocket)
    await manager.broadcast(f"Client #{client_id} left the chat")
```

----------------------------------------

TITLE: Pinning FastAPI Version Range in Requirements.txt
DESCRIPTION: Shows how to specify an acceptable range of FastAPI versions, allowing patch updates while preventing minor version changes that might include breaking changes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/versions.md#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
fastapi[standard]>=0.112.0,<0.113.0
```

----------------------------------------

TITLE: Importing Depends in FastAPI
DESCRIPTION: Shows how to import the Depends function from FastAPI, which is used to declare dependencies in path operation functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/index.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Running Uvicorn with Multiple Workers
DESCRIPTION: Command to run Uvicorn directly with multiple worker processes. It specifies 4 workers, binds to all interfaces on port 8080, and runs the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
<font color="#A6E22E">INFO</font>:     Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit)
<font color="#A6E22E">INFO</font>:     Started parent process [<font color="#A1EFE4"><b>27365</b></font>]
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27368</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27369</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27370</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
<font color="#A6E22E">INFO</font>:     Started server process [<font color="#A1EFE4">27367</font>]
<font color="#A6E22E">INFO</font>:     Waiting for application startup.
<font color="#A6E22E">INFO</font>:     Application startup complete.
```

----------------------------------------

TITLE: Installing a specific package version using pip
DESCRIPTION: This command demonstrates how to install a specific version of a Python package using pip. It ensures that the project uses the required version of the dependency.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_17

LANGUAGE: console
CODE:
```
$ pip install "harry==1"
```

----------------------------------------

TITLE: Defining Synchronous Path Operation Function in FastAPI
DESCRIPTION: This snippet demonstrates how to define a synchronous path operation function in FastAPI using the regular 'def' syntax. FastAPI runs these functions in an external threadpool.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
def path_operation_function():
    # Synchronous code here
    pass
```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: Installs the Uvicorn ASGI server using pip, including the 'standard' extras for recommended dependencies like uvloop for improved performance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/manually.md#_snippet_1

LANGUAGE: Shell
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.9+)
DESCRIPTION: This example demonstrates a Pydantic model definition with type annotations. It shows how to define a class with attributes and their corresponding types, enabling data validation and conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_20

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial011_py39.py!}
```

----------------------------------------

TITLE: Adding Description Metadata to Query Parameter in FastAPI
DESCRIPTION: This example demonstrates how to add both a title and a description to a query parameter for more detailed OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
q: Annotated[str | None, Query(title="Query string", description="Query string for the items to search in the database that have a good match")] = None
```

----------------------------------------

TITLE: JSON Response Example
DESCRIPTION: Example JSON response from the /items/{item_id} endpoint with a query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/deployment/docker.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{"item_id": 5, "q": "somequery"}
```

----------------------------------------

TITLE: Returning a Dictionary with Item Price
DESCRIPTION: This code snippet returns a dictionary containing the item price. This demonstrates how FastAPI automatically converts Python data types to JSON for API responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/index.md#_snippet_9

LANGUAGE: Python
CODE:
```
        ... "item_price": item.price ...
```

----------------------------------------

TITLE: Returning Dictionary Response in Python
DESCRIPTION: Example of returning a Python dictionary from a FastAPI endpoint. FastAPI automatically converts this dictionary to JSON for the response. The text notes how editor support helps with accessing attributes like `item.name` or `item.price` based on the declared types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_6

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Importing APIRouter in FastAPI
DESCRIPTION: Imports the APIRouter class from FastAPI to create modular endpoints. This allows for better organization of the application by separating route definitions into different files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter
```

----------------------------------------

TITLE: Pydantic Dict Method Usage in Python
DESCRIPTION: Examples of using Pydantic's .dict() method to create and manipulate model data, showing how to create objects and convert them to dictionaries.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
user_in = UserIn(username="john", password="secret", email="john.doe@example.com")

user_dict = user_in.dict()

print(user_dict)
```

----------------------------------------

TITLE: Creating Project Directory Structure (Console)
DESCRIPTION: Commands to navigate to the home directory, create a `code` directory, enter it, create a project-specific directory (`awesome-project`), and enter that directory. This sets up the location for the virtual environment and project files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_0

LANGUAGE: console
CODE:
```
cd
mkdir code
cd code
mkdir awesome-project
cd awesome-project
```

----------------------------------------

TITLE: Setting Base Image in Dockerfile
DESCRIPTION: Specifies the base Python image to use for the Docker container. This ensures a consistent environment for building and running the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9
```

----------------------------------------

TITLE: Query Parameter with Title and Description
DESCRIPTION: Declares a query parameter `q` with a title and description using the `Query` class. The title and description are used in the generated OpenAPI documentation to provide more information about the parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Optional[str] = Query(
        default=None, title="Query string", description="Query description"
    )
):
    return {"q": q}
```

----------------------------------------

TITLE: Importing Depends from FastAPI
DESCRIPTION: Shows how to import the Depends function from FastAPI, which is used to declare dependencies in path operation functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/index.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Run pytest
DESCRIPTION: This command executes the pytest testing framework. Pytest automatically discovers and runs tests in the current directory and its subdirectories, and then reports the results.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/testing.md#_snippet_3

LANGUAGE: bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Pydantic Model with List Attribute
DESCRIPTION: This code defines a Pydantic model `Image` with `url` and `name` attributes, and another model `Item` that includes a list of `Image` models as its `images` attribute. This allows for validating and structuring JSON bodies with nested lists of objects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-nested-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import List, Optional

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: Optional[str] = None


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: List[str] = []
    images: Optional[List[Image]] = None
```

----------------------------------------

TITLE: Query Parameter with Alias
DESCRIPTION: Creating a query parameter with a custom URL alias different from the Python variable name
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
q: Union[str, None] = Query(default=None, alias="item-query")
```

----------------------------------------

TITLE: Deactivating and Activating Virtual Environments
DESCRIPTION: This example shows how to deactivate the current virtual environment and activate a new one for the 'prisoner-of-azkaban' project. This ensures that the correct Python interpreter and packages are used for the project.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_31

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban

// You don't need to be in the old directory to deactivate, you can do it wherever you are, even after going to the other project 😎
$ deactivate

// Activate the virtual environment in prisoner-of-azkaban/.venv 🚀
$ source .venv/bin/activate

// Now when you run python, it will find the package sirius installed in this virtual environment ✨
$ python main.py

I solemnly swear 🐺
```

----------------------------------------

TITLE: Reordering Parameters in FastAPI
DESCRIPTION: This snippet shows how FastAPI allows reordering of parameters, even when some parameters have default values and others don't.  FastAPI detects parameters by name, type annotations, and default declarations (like `Query`, `Path`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"from fastapi import FastAPI, Path, Query\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_items(\n    item_id: int = Path(title="The ID of the item to get"), q: str\n):\n    return {"item_id": item_id, "q": q}"
```

----------------------------------------

TITLE: Raising WebSocket Exceptions
DESCRIPTION: Shows how to raise a `WebSocketException` to close the WebSocket connection with a specific code and reason.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/websockets.md#_snippet_7

LANGUAGE: Python
CODE:
```
raise WebSocketException(code=1008, reason="No cookies or token received")
```

----------------------------------------

TITLE: Running Python Script with Environment Variable (Windows PowerShell)
DESCRIPTION: This snippet demonstrates how to run the Python script main.py with and without the MY_NAME environment variable set in PowerShell. It shows how the script uses the default value when the environment variable is not set and reads the environment variable when it is set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/environment-variables.md#_snippet_4

LANGUAGE: PowerShell
CODE:
```
// Здесь мы еще не устанавливаем переменную окружения
$ python main.py

// Поскольку мы не задали переменную окружения, мы получим значение по умолчанию

Hello World from Python

// Но если мы сначала создадим переменную окружения
$ $Env:MY_NAME = "Wade Wilson"

// А затем снова запустим программу
$ python main.py

// Теперь она может прочитать переменную окружения

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Generating and Returning Access Token
DESCRIPTION: This code generates a simple access token (using the username in this example) and returns it along with the token type as specified by the OAuth2 standard.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
return {"access_token": user.username, "token_type": "bearer"}
```

----------------------------------------

TITLE: Numeric Validation: Greater Than or Equal
DESCRIPTION: Demonstrates how to use the ge parameter with Path to validate that a path parameter is greater than or equal to a specific value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path
from typing import Annotated

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(
    q: str,
    item_id: Annotated[int, Path(title="The ID of the item to get", ge=1)],
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results

```

----------------------------------------

TITLE: Run FastAPI Server with Environment Variables
DESCRIPTION: Execute the FastAPI application using Uvicorn, passing environment variables directly before the command. This demonstrates how to override default settings or provide required values via the environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_4

LANGUAGE: Console
CODE:
```
$ ADMIN_EMAIL="deadpool@example.com" APP_NAME="ChimichangApp" uvicorn main:app
```

----------------------------------------

TITLE: Declaring a Union Type (Python 3.8+)
DESCRIPTION: This snippet demonstrates how to declare a variable that can be either an integer or a string using the `Union` type from the `typing` module in Python 3.8+. The type hint `Union[int, str]` specifies that the variable `item` can hold either an integer or a string value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Union

item: Union[int, str] = 123
```

----------------------------------------

TITLE: Numeric Validation for Float Parameters
DESCRIPTION: Demonstrates numeric validation for floating-point numbers, showing how to use gt and lt constraints
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
size: float = Path(gt=0, lt=10.5)
```

----------------------------------------

TITLE: Restricting Extra Cookies in FastAPI Model
DESCRIPTION: Shows how to configure a Pydantic model to reject any additional cookies not specified in the model using extra='forbid'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
    extra = "forbid"
```

----------------------------------------

TITLE: User Authentication and Authorization Flow
DESCRIPTION: Implement functions to retrieve current user, validate active status, and manage authentication states
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def get_current_active_user(current_user: User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user
```

----------------------------------------

TITLE: Importing List from typing
DESCRIPTION: This code snippet shows how to import the `List` type from the `typing` module in Python versions prior to 3.9. This is necessary for declaring lists with specific element types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-nested-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List
```

----------------------------------------

TITLE: Handling WebSocket Disconnections
DESCRIPTION: Demonstrates how to handle WebSocket disconnections using a try-except block. It captures the `WebSocketDisconnect` exception and handles it gracefully, which is useful for cleaning up resources or notifying other clients in a chat application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/websockets.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
"from typing import List

from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse

app = FastAPI()

html = \"\"\"
<!DOCTYPE html>
<html>
    <head>
        <title>Chat</title>
    </head>
    <body>
        <h1>WebSocket Chat</h1>
        <form action=\"\" onsubmit=\"sendMessage(event)\">
            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>
            <button>Send</button>
        </form>
        <ul id='messages'>
        </ul>
        <script>
            var ws = new WebSocket(\"ws://localhost:8000/ws\");
            ws.onmessage = function(event) {
                var messages = document.getElementById('messages')
                var message = document.createElement('li')
                var content = document.createTextNode(event.data)
                message.appendChild(content)
                messages.appendChild(message)
            };
            function sendMessage(event) {
                var input = document.getElementById(\"messageText\")
                ws.send(input.value)
                input.value = ''
                event.preventDefault()
            }
        </script>
    </body>
</html>
\"\"\"


@app.get("/")
async def get():
    return HTMLResponse(html)


manager = ConnectionManager()


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            await manager.send_personal_message(f"You wrote: {data}", websocket)
            await manager.broadcast(f"Client #{websocket.client_id} says: {data}")
    except WebSocketDisconnect:
        manager.disconnect(websocket)
        await manager.broadcast(f"Client #{websocket.client_id} left the chat")


class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        websocket.client_id = id(websocket)

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            await connection.send_text(message)
"
```

LANGUAGE: python
CODE:
```
"    except WebSocketDisconnect:
        manager.disconnect(websocket)"
```

----------------------------------------

TITLE: Setting Routes with Traefik in routes.toml
DESCRIPTION: This TOML file sets up the routing for the Traefik reverse proxy, configuring path prefixes and defining service URLs. It's instrumental for ensuring requests are properly forwarded from Traefik to the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_5

LANGUAGE: TOML
CODE:
```
[http]
  [http.middlewares]

    [http.middlewares.api-stripprefix.stripPrefix]
      prefixes = ["/api/v1"]

  [http.routers]

    [http.routers.app-http]
      entryPoints = ["http"]
      service = "app"
      rule = "PathPrefix(`/api/v1`)
      middlewares = ["api-stripprefix"]

  [http.services]

    [http.services.app]
      [http.services.app.loadBalancer]
        [[http.services.app.loadBalancer.servers]]
          url = "http://127.0.0.1:8000"
```

----------------------------------------

TITLE: Simple Type Declarations
DESCRIPTION: This example demonstrates how to declare simple types such as int, float, bool, and bytes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
age: int
price: float
awake: bool
binary: bytes
```

----------------------------------------

TITLE: Implementando una Dependencia Parametrizable en Python con FastAPI
DESCRIPTION: Define una clase FixedContentQueryChecker con métodos __init__ y __call__. El método __init__ permite parametrizar la dependencia, mientras que __call__ es utilizado por FastAPI para resolver la dependencia.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class FixedContentQueryChecker:
    def __init__(self, fixed_content: str):
        self.fixed_content = fixed_content

    def __call__(self, q: str | None = None):
        if q:
            return self.fixed_content in q
        return False
```

----------------------------------------

TITLE: Overriding Settings in Tests
DESCRIPTION: This code snippet shows how to override settings in tests by using dependency overrides. It defines a test case that overrides the `get_settings` dependency to return a custom `Settings` object with modified values. This allows for testing the application with different configurations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/settings.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from .main import app, get_settings


def test_settings_override():
    def override_settings():
        return Settings(admin_email="testing@example.com")

    app.dependency_overrides[get_settings] = override_settings

    client = TestClient(app)
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"app_name": "Awesome API", "admin_email": "testing@example.com"}

    app.dependency_overrides = {}
```

----------------------------------------

TITLE: Defining Required Query Parameter in FastAPI
DESCRIPTION: This snippet shows how to define a required query parameter in a FastAPI endpoint by not providing a default value. The `needy` parameter is required, and the client must include it in the request; otherwise, FastAPI will return an error. The function returns a dictionary containing the `item_id` and the required query parameter `needy`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
"@app.get("/items/{item_id}")
async def read_item(item_id: str, needy: str):
    item = {"item_id": item_id, "needy": needy}
    return item"
```

----------------------------------------

TITLE: Importing APIRouters in FastAPI Main File
DESCRIPTION: Shows how to import APIRouters from submodules using relative imports in the main FastAPI application file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
from .routers import items, users
```

----------------------------------------

TITLE: Returning a Dictionary with Item Name and ID
DESCRIPTION: This code snippet returns a dictionary containing the item name and ID. This demonstrates how FastAPI automatically converts Python data types to JSON for API responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Define Path Operations with Specific Order (FastAPI, Python)
DESCRIPTION: This snippet demonstrates the importance of defining path operations in a specific order in FastAPI. More specific paths, such as "/users/me", must be defined before more general paths with path parameters, like "/users/{user_id}", to ensure the correct handler is matched.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}

@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: package.json with generate-client script
DESCRIPTION: This JSON snippet shows a package.json file with a script to generate a TypeScript client using openapi-ts. The script takes an OpenAPI JSON file as input and outputs the generated client code to a specified directory, using axios as the HTTP client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/generate-clients.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Checking active Python (Linux, macOS, Windows Bash)
DESCRIPTION: This command, used in Linux, macOS, and Windows Bash, displays the full path to the Python interpreter currently being used. It verifies which Python is active after environment activation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_29

LANGUAGE: console
CODE:
```
$ which python

/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Documenting HTMLResponse in OpenAPI
DESCRIPTION: Demonstrates how to document the response in OpenAPI while still overriding the response within the function. It uses the response_class parameter for documentation and returns a Response object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

def generate_html_response():
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)

@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return generate_html_response()
```

----------------------------------------

TITLE: Adding Multiple JSON Schema Examples to FastAPI Body Parameter
DESCRIPTION: Illustrates how to provide multiple examples for a request body parameter in a FastAPI path operation using the `Body()` function's `examples` argument, which accepts a list of examples. These examples are included in the JSON Schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/schema-extra-example.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Body
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

app = FastAPI()

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        examples=[
            {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2,
            },
            {
                "name": "Bar",
                "price": 42,
            },
            {
                "name": "Baz",
                "description": "A very good Item",
                "price": 30,
                "tax": 10.7,
            },
        ]
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Creating an Instance of a Callable Class in FastAPI
DESCRIPTION: This snippet shows the instantiation of a callable class, allowing the encapsulated parameters to be used as dependencies in FastAPI path operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
checker = FixedContentQueryChecker(fixed_content="bar")
```

----------------------------------------

TITLE: Update get_current_user Dependency
DESCRIPTION: This code snippet updates the `get_current_user` dependency to receive a JWT token, decode and verify it, and return the current user. It raises an HTTP exception if the token is invalid.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: python
CODE:
```
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = fake_users_db.get(token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: FastAPI application file
DESCRIPTION: Defines a simple FastAPI application in main.py.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Defining Types and Pydantic Models in FastAPI with Python
DESCRIPTION: This snippet demonstrates how to define variable types using Python type hints and create Pydantic models with type annotations. It showcases the use of `typing` for specifying list and dictionary types, `datetime` for handling dates, and `pydantic.BaseModel` for defining data models with type validations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/features.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from typing import List, Dict
from datetime import date

from pydantic import BaseModel

# Değişkeni str olarak belirt
# ve o fonksiyon için harika bir editör desteği al
def main(user_id: str):
    return user_id


# Pydantic modeli
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Importing StaticFiles from FastAPI
DESCRIPTION: Code snippet showing how to import the StaticFiles class from the fastapi.staticfiles module. This class is used to serve static files such as JavaScript, CSS, and images in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/staticfiles.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.staticfiles import StaticFiles
```

----------------------------------------

TITLE: Closing Database Session after Response
DESCRIPTION: Closes the database session after the response has been sent, ensuring resources are released.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_2

LANGUAGE: Python
CODE:
```
db = SessionLocal()
try:
    yield db
finally:
    db.close()
```

----------------------------------------

TITLE: Setting License Identifier in FastAPI - Python
DESCRIPTION: Demonstrates setting the license information for a FastAPI application using an SPDX license identifier instead of a URL. This is supported from OpenAPI 3.1.0 and FastAPI 0.99.0.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/metadata.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="My Super Project",
    summary="Very nice project with very nice code.",
    description="Very nice project with very nice code.",
    version="0.1.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://example.com/contact/",
        "email": "dp@example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "identifier": "MIT",
    },
)


@app.get("/items/{item_id}")
async def read_items(item_id: str):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Build Docker Image Command
DESCRIPTION: This command builds the Docker image using the Dockerfile in the current directory. The `-t` flag tags the image with a name (`myimage`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_8

LANGUAGE: bash
CODE:
```
docker build -t myimage .
```

----------------------------------------

TITLE: PUT Update with JSON Encoder in FastAPI
DESCRIPTION: Demonstrates how to use `jsonable_encoder` to convert data for storage, particularly useful for converting complex types like datetime to JSON-compatible formats
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-updates.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
tutorial001.py
```

----------------------------------------

TITLE: Defining a FastAPI GET Endpoint
DESCRIPTION: Shows how to create a GET endpoint in FastAPI that returns a JSON response, highlighting the similarities with the Requests library syntax.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/alternatives.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Relative Import with Double Dots
DESCRIPTION: This code snippet demonstrates a relative import using double dots, which signifies importing from the parent package of the current module. It imports the `get_token_header` function from the `dependencies` module located in the parent directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_8

LANGUAGE: Python
CODE:
```
from ..dependencies import get_token_header
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code snippet shows how to create an instance of the FastAPI class. This instance, assigned to the variable app, will be the main interaction point for creating all APIs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Path and Request Body Parameters in FastAPI
DESCRIPTION: This code snippet illustrates how to declare both path parameters and a request body within the same path operation in FastAPI. FastAPI automatically recognizes that function parameters corresponding to path parameters should be retrieved from the path, while parameters declared as Pydantic models should be retrieved from the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item):
    return {"item_id": item_id, **item.dict()}
```

----------------------------------------

TITLE: Compare Enum Members
DESCRIPTION: This example shows how to compare the path parameter (which is an Enum member) with the Enum members defined in the `ModelName` Enum.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: python
CODE:
```
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}
```

----------------------------------------

TITLE: Importing BaseModel from Pydantic
DESCRIPTION: This code snippet demonstrates how to import the `BaseModel` class from the `pydantic` library, which is essential for defining data models for request bodies in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel
```

----------------------------------------

TITLE: Reading Custom Header Dependency (Python 3.8+ non-Annotated)
DESCRIPTION: This code defines a dependency that reads a custom header X-Token from the request. It uses Header to extract the header value. The header value is then returned by the dependency function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Depends, HTTPException, Header


async def verify_token(x_token: Optional[str] = Header(None)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")


async def verify_key(x_key: str = Header(...)):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key
```

----------------------------------------

TITLE: FastAPI Default Swagger UI Configuration Parameters
DESCRIPTION: Default Swagger UI configuration parameters set by FastAPI. These are appropriate for most use cases and include settings for DOM ID, layout, deepLinking, presets, and other UI behaviors.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
swagger_ui_default_parameters = {
    "dom_id": "#swagger-ui",
    "layout": "BaseLayout",
    "deepLinking": True,
    "showExtensions": True,
    "showCommonExtensions": True,
    "oauth2RedirectUrl": swagger_ui_oauth2_redirect_url,
    "presets": [
        "SwaggerUIBundle.presets.apis",
        "SwaggerUIBundle.SwaggerUIStandalonePreset",
    ],
    "syntaxHighlight": {
        "activated": True,
        "theme": "agate",
    },
}
```

----------------------------------------

TITLE: Using await with async def in FastAPI path operations
DESCRIPTION: This snippet demonstrates how to properly define an asynchronous path operation function in FastAPI when using a library that requires await calls. The function is declared with async def and uses await to call an asynchronous library function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
results = await some_library()
```

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Parameter Ordering with Annotated Syntax
DESCRIPTION: Demonstrates the preferred way to handle parameter ordering using Annotated syntax.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from typing import Annotated
from fastapi import FastAPI, Path, Query

app = FastAPI()

@app.get("/items/{item_id}")
async def read_items(
    item_id: Annotated[int, Path(title="The ID of the item to get")],
    q: Annotated[str | None, Query] = None,
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Serve Static Files in FastAPI
DESCRIPTION: This snippet demonstrates how to serve static files (JavaScript and CSS) directly from a FastAPI application. It imports the StaticFiles class and mounts it at a specific path, allowing the documentation UI to access the locally hosted files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-docs-ui-assets.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.staticfiles import StaticFiles

app.mount("/static", StaticFiles(directory="static"), name="static")
```

----------------------------------------

TITLE: Performing Date Manipulations
DESCRIPTION: This snippet shows how to perform standard date manipulations using the datetime object within a FastAPI application.  It allows you to interact with dates as you normally would in Python after they have been received and validated by FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/extra-data-types.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"    if start_datetime:
        results.update({"start_datetime": start_datetime})
"
```

----------------------------------------

TITLE: Path Parameter Containing Paths - FastAPI (Python)
DESCRIPTION: This code snippet demonstrates how to declare a path parameter that can contain a path using the `:path` converter in the path definition. This allows you to capture entire file paths within a single path parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
    return {"file_path": file_path}
```

----------------------------------------

TITLE: Defining a Pydantic Model in Python 3.9+
DESCRIPTION: This code snippet defines a Pydantic model using Python 3.9 syntax. The `User` model includes fields with type hints and default values.  Pydantic automatically validates and converts data to the specified types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
"from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name: str = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)
print(user.friends)
"
```

----------------------------------------

TITLE: Defining a Simple Injectable Dependency in FastAPI
DESCRIPTION: This snippet shows how to create a basic injectable dependency that extracts an optional query parameter 'q' and returns it.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
async def query_extractor(q: str | None = None):
    return q
```

----------------------------------------

TITLE: Type Conversion for Query Parameters in FastAPI
DESCRIPTION: This snippet shows how FastAPI automatically converts query parameter values to the declared type, in this case, `bool`. It handles various truthy and falsy strings like "1", "True", "true", "on", "yes" for `True` and their opposites for `False`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, short: bool = False):
    item = {"item_id": item_id, "name": "Awesome Item"}
    if short:
        item.update({"description": "This is a great item that has a lot of features"})
    return item
```

----------------------------------------

TITLE: Ordering Parameters with Query and Path in FastAPI (Python)
DESCRIPTION: Demonstrates how to order parameters when using Query and Path in FastAPI without Annotated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def read_items(q: str, item_id: int = Path(title="The ID of the item to get")):
```

----------------------------------------

TITLE: Python List Type Hint with Typing Module
DESCRIPTION: This code snippet demonstrates how to use the `List` type from the `typing` module to specify that a variable is a list of strings.  The `typing` module provides support for more complex type hints beyond the basic Python types, enabling more precise type annotations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
"from typing import List

def process_items(items: List[str]):
    for item in items:
        print(item)"
```

----------------------------------------

TITLE: Working with Pydantic Model Dictionary Conversion
DESCRIPTION: Explains how to convert between Pydantic models using the dict() method and Python's dictionary unpacking with ** operator to create new model instances from existing ones.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
user_in = UserIn(username="john", password="secret", email="john.doe@example.com")
```

----------------------------------------

TITLE: Using StreamingResponse with File-Like Objects in FastAPI
DESCRIPTION: Example showing how to stream a file-like object using StreamingResponse. This creates a generator function that yields from the file-like object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()


@app.get("/")
def main():
    def iterfile():  # (1)
        with open("some-file.txt", mode="rb") as file_like:  # (2)
            yield from file_like  # (3)

    return StreamingResponse(iterfile())
```

----------------------------------------

TITLE: Creating .gitignore for Virtual Environment
DESCRIPTION: Command to create a .gitignore file that excludes all contents of the .venv directory from version control.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
$ echo "*" > .venv/.gitignore
```

----------------------------------------

TITLE: Python Script to Preprocess OpenAPI JSON
DESCRIPTION: This Python script preprocesses an OpenAPI JSON file to remove the prefixed tag from operation IDs. It loads the OpenAPI specification from `openapi.json`, iterates through the paths, and modifies the operation IDs by removing the tag prefix, resulting in cleaner method names for generated clients.  The modified OpenAPI spec is then written back to `openapi.json`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/generate-clients.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
import json

with open("openapi.json") as f:
    data = json.load(f)

for path, path_item in data["paths"].items():
    for operation, operation_item in path_item.items():
        operation_id = operation_item.get("operationId")
        if operation_id:
            parts = operation_id.split("-", 1)
            if len(parts) > 1:
                new_operation_id = parts[1]
                operation_item["operationId"] = new_operation_id

with open("openapi.json", "w") as f:
    json.dump(data, f, indent=2)

```

----------------------------------------

TITLE: Parameter Ordering with Path and Query Parameters
DESCRIPTION: Demonstrates how to order parameters with and without default values using Path and optional query parameters
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def read_items(q: str, item_id: int = Path(gt=0))
```

----------------------------------------

TITLE: Required, Default, and Optional Query Parameters in FastAPI
DESCRIPTION: Shows a combination of different parameter types: required query parameters ('needy'), parameters with default values ('skip'), and fully optional parameters ('limit').
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
async def read_user_item(item_id: str, needy: str, skip: int = 0, limit: int | None = None):
```

----------------------------------------

TITLE: Defining an Asynchronous Path Operation Function
DESCRIPTION: Defines an asynchronous path operation function that will be called when a GET request is made to the root path ('/'). It returns a dictionary that will be automatically converted to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function in FastAPI
DESCRIPTION: This code snippet shows how to define a synchronous path operation function in FastAPI.  This function will be called when a GET request is made to the `/` path. It returns a dictionary, which FastAPI automatically converts to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Customizing Documentation UI URLs
DESCRIPTION: Example of customizing the URLs for Swagger UI documentation and disabling ReDoc in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
app = FastAPI(docs_url="/documentation", redoc_url=None)
```

----------------------------------------

TITLE: Returning a Dictionary with Item Price and ID
DESCRIPTION: This snippet shows the modified version of the return statement, where the item's price is returned instead of the item's name. This change demonstrates IDE auto-completion capabilities.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
        ... "item_price": item.price ...
```

----------------------------------------

TITLE: Importing FastAPI and Declaring Dependencies
DESCRIPTION: Illustrates how to import the FastAPI class and declare global dependencies. It shows the basic setup for a FastAPI application, including the creation of a FastAPI instance and the declaration of dependencies that apply to all routes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_12

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/main.py!}
```

----------------------------------------

TITLE: Basic Python Function
DESCRIPTION: This is a basic Python function that concatenates two strings (first_name and last_name), capitalizes the first letter of each, and returns the full name. It demonstrates a simple operation without type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"""def get_full_name(first_name, last_name):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))""
```

----------------------------------------

TITLE: Defining a Path Operation Decorator
DESCRIPTION: This code snippet demonstrates how to define a path operation decorator using `@app.get("/")`, which associates a function with a specific path and HTTP method (GET in this case).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Hinting Optional Parameter with Default None (Python 3.6+ via typing) - Python
DESCRIPTION: For Python versions 3.6+ (up to 3.9), this snippet combines an `Optional[str]` type hint with a default value of `None`. This signifies that the `name` parameter is optional and, if not provided, will default to `None`, and its type can be `str` or `None` when provided.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_16

LANGUAGE: Python
CODE:
```
from typing import Optional

def say_hi(name: Optional[str] = None):
    if name is not None:
        print(f"Hey {name}!")
    else:
        print("Hello World!")
```

----------------------------------------

TITLE: List Field Definition in FastAPI
DESCRIPTION: This snippet demonstrates how to define a list field in a Pydantic model using FastAPI. It shows a basic example where the type of elements within the list is not explicitly specified, but `tags` is defined as a list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from typing import Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list = []"
```

----------------------------------------

TITLE: Relative Import Example (Double Dot)
DESCRIPTION: Demonstrates a relative import using double dots, indicating a module in the parent package. It imports 'get_token_header' from the 'dependencies' module in the parent directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_9

LANGUAGE: Python
CODE:
```
from ..dependencies import get_token_header
```

----------------------------------------

TITLE: Basic Async Route Handler
DESCRIPTION: Example showing basic async/await usage in a FastAPI route handler function that calls an async library
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/async.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Forbidding Extra Cookies with Pydantic Configuration in FastAPI
DESCRIPTION: This code snippet demonstrates how to forbid extra cookies using Pydantic's configuration in a FastAPI application. It defines a Pydantic model with `extra = 'forbid'` in the `Config` class, which causes Pydantic to raise an error if any extra cookies are sent in the request that are not defined in the model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"""python
from typing import Union

from fastapi import Cookie, Depends, FastAPI
from pydantic import BaseModel

app = FastAPI()


class Ads(BaseModel):
    dark_mode: Union[bool, None] = None
    items_per_page: int

    class Config:
        extra = "forbid"


@app.get("/")
async def read_ads(ads: Ads = Depends()):
    return ads
"""
```

----------------------------------------

TITLE: Pydantic Version Constraint in Requirements.txt
DESCRIPTION: Shows how to specify compatible Pydantic versions, ensuring compatibility with FastAPI while allowing updates within major version 2.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/versions.md#2025-04-21_snippet_3

LANGUAGE: txt
CODE:
```
pydantic>=2.7.0,<3.0.0
```

----------------------------------------

TITLE: Defining Required Query Parameter in FastAPI
DESCRIPTION: This code snippet shows how to define a required query parameter named 'needy' of type string in a FastAPI endpoint. If the 'needy' parameter is not provided in the request, FastAPI will return an error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, needy: str):
    return {"item_id": item_id, "needy": needy}
```

----------------------------------------

TITLE: Using a Parameterized Instance as a Dependency in FastAPI
DESCRIPTION: This code demonstrates how to use the parameterized instance as a dependency in a FastAPI route. The dependency returns a boolean indicating whether the fixed content is included in the query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/query-checker/")
async def read_query_check(fixed_content_included: bool = Depends(checker)):
    return {"fixed_content_in_query": fixed_content_included}
```

----------------------------------------

TITLE: Dockerfile for Larger FastAPI Applications
DESCRIPTION: This Dockerfile is tailored for FastAPI applications with multiple files. It copies the application code into the /app/app directory within the container, assuming the main application files are located in a subdirectory named 'app'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/deployment/docker.md#_snippet_1

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7

COPY ./app /app/app
```

----------------------------------------

TITLE: Activating a Virtual Environment on Windows Bash
DESCRIPTION: This command activates a Python virtual environment when using Bash on Windows (e.g., Git Bash). It ensures that the project uses the Python interpreter and packages within the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_22

LANGUAGE: bash
CODE:
```
source .venv/Scripts/activate
```

----------------------------------------

TITLE: Creating a WebSocket endpoint
DESCRIPTION: Defines a WebSocket endpoint within a FastAPI application. This snippet illustrates the creation of a WebSocket route using the `@app.websocket_route` decorator. It shows basic setup for handling WebSocket connections.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/websockets.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"from typing import List

from fastapi import FastAPI, WebSocket

app = FastAPI()

html = \"\"\"
<!DOCTYPE html>
<html>
    <head>
        <title>Chat</title>
    </head>
    <body>
        <h1>WebSocket Chat</h1>
        <form action=\"\" onsubmit=\"sendMessage(event)\">
            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>
            <button>Send</button>
        </form>
        <ul id='messages'>
        </ul>
        <script>
            var ws = new WebSocket(\"ws://localhost:8000/ws\");
            ws.onmessage = function(event) {
                var messages = document.getElementById('messages')
                var message = document.createElement('li')
                var content = document.createTextNode(event.data)
                message.appendChild(content)
                messages.appendChild(message)
            };
            function sendMessage(event) {
                var input = document.getElementById(\"messageText\")
                ws.send(input.value)
                input.value = ''
                event.preventDefault()
            }
        </script>
    </body>
</html>
\"\"\"


@app.get("/")
async def get():
    return HTMLResponse(html)
"
```

LANGUAGE: python
CODE:
```
"@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()"
```

----------------------------------------

TITLE: Defining a Required Query Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a required query parameter named 'needy' of type string in a FastAPI endpoint. If the 'needy' parameter is not provided in the request, FastAPI will return an error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/query-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(item_id: str, needy: str):
    return {"item_id": item_id, "needy": needy}
```

----------------------------------------

TITLE: Using the Lifespan Context Manager in FastAPI (Python)
DESCRIPTION: This code shows how to apply the lifespan context manager to a FastAPI application instance. The lifespan function is passed as an argument to the FastAPI constructor.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Query Parameter with Required Value and None
DESCRIPTION: This code demonstrates using `None` as default value, while declaring that the field cannot accept a `None` value. FastAPI will raise an error if `None` is passed to the parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: str = Query(default="fixedquery", min_length=3)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Reading Environment Variables in Python
DESCRIPTION: This code snippet demonstrates how to read environment variables in Python using the `os.getenv()` function. It retrieves the value of the `MY_NAME` environment variable, defaulting to "World" if the variable is not set. The retrieved value is then used in a greeting message.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/settings.md#_snippet_0

LANGUAGE: Python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Path Order Matters
DESCRIPTION: Demonstrates the importance of path order in FastAPI. The `/users/me` path must be defined before `/users/{user_id}` to avoid the latter from matching `/users/me`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Pydantic Model Usage Example
DESCRIPTION: This code shows how to create and use a Pydantic model in Python. It demonstrates initializing a model with keyword arguments and from a dictionary using the ** operator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Adding OpenAPI Extensions in FastAPI Path Operation
DESCRIPTION: Demonstrates how to add custom OpenAPI extensions to a path operation using the openapi_extra parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/items/", openapi_extra={"x-aperture-labs-portal": "blue"})
```

----------------------------------------

TITLE: Declaring Optional String with typing.Union (Python 3.8+)
DESCRIPTION: Demonstrates how to declare a variable that can be a string or `None` explicitly using `Union[str, None]` from the `typing` module, applicable for Python 3.8 and later. This is equivalent to `Optional[str]`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial009b.py!}
```

----------------------------------------

TITLE: Returning Access Token
DESCRIPTION: This snippet demonstrates how to return a JSON response containing the access_token and token_type after successful authentication. The token_type is set to bearer.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/security/simple-oauth2.md#_snippet_3

LANGUAGE: Python
CODE:
```
return {"access_token": user.username, "token_type": "bearer"}
```

----------------------------------------

TITLE: Include Custom Documentation with CDN URLs in FastAPI
DESCRIPTION: This snippet demonstrates how to create custom route operations for Swagger UI and ReDoc documentation, specifying custom CDN URLs for the JavaScript and CSS files. It reuses FastAPI's internal functions to generate the HTML pages for the documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-docs-ui-assets.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + " - Swagger UI",
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url="https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js",
        swagger_css_url="https://unpkg.com/swagger-ui-dist@5/swagger-ui.css",
    )


@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)
async def swagger_ui_redirect():
    return get_swagger_ui_oauth2_redirect_html()


@app.get("/redoc", include_in_schema=False)
async def custom_redoc_html():
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=app.title + " - ReDoc",
        redoc_js_url="https://unpkg.com/redoc@2/bundles/redoc.standalone.js",
    )
```

----------------------------------------

TITLE: Configuring Traefik with Traefik.toml
DESCRIPTION: A TOML configuration example for Traefik, setting up to listen on a specific port and using an external routing file. Traefik acts as a reverse proxy managing path prefixes for inbound requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_4

LANGUAGE: TOML
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Using Depends without Type Annotation in FastAPI
DESCRIPTION: This code shows using Depends without explicit type annotation. The type annotation is useful for editor assistance, but the actual dependency resolution is handled by Depends.  This code is functionally equivalent to the previous example but lacks the type hint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons=Depends(CommonQueryParams)):
    return commons
```

----------------------------------------

TITLE: Custom OpenAPI Content Type with Pydantic v2 in FastAPI
DESCRIPTION: Demonstrates how to use a Pydantic model to define the JSON schema for data received in a custom content type (YAML) and validate the data against the schema, bypassing FastAPI's built-in JSON parsing and validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/path-operation-advanced-configuration.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Optional

import yaml
from fastapi import FastAPI, Header, Request
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None


app = FastAPI()


@app.post("/items/", openapi_extra={
    "requestBody": {
        "content": {
            "application/yaml": {
                "schema": Item.model_json_schema()
            }
        }
    }
})
async def create_item(request: Request, x_custom_header: Optional[str] = Header(None)):
    content = await request.body()
    data = yaml.safe_load(content)
    item = Item.model_validate(data)
    return item
```

----------------------------------------

TITLE: Extended FastAPI Tests with Pytest
DESCRIPTION: This code snippet demonstrates how to write extended tests for a FastAPI application using pytest. It shows how to send different types of data in requests, such as JSON, form data, headers, and cookies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/testing.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient
from fastapi import FastAPI

app = FastAPI()

@app.post("/items/")
async def create_item(item: dict):
    return item


client = TestClient(app)


def test_create_item():
    item_data = {"name": "Foo", "description": "", "price": 50.2,
                 "tax": 2.2}
    response = client.post("/items/", json=item_data)
    assert response.status_code == 200
    assert response.json() == item_data


def test_create_item_form():
    item_data = {"name": "Bar", "description": "Great", "price": 150.2,
                 "tax": 12.2}
    response = client.post("/items/", data=item_data)
    assert response.status_code == 200
    assert response.json() == item_data


def test_create_item_headers():
    item_data = {"name": "Baz", "description": "", "price": 50.2,
                 "tax": 2.2}
    headers = {"X-Custom-Header": "value"}
    response = client.post("/items/", json=item_data, headers=headers)
    assert response.status_code == 200
    assert response.json() == item_data


def test_create_item_cookies():
    item_data = {"name": "Qux", "description": "", "price": 50.2,
                 "tax": 2.2}
    cookies = {"cookie-name": "cookie-value"}
    response = client.post("/items/", json=item_data, cookies=cookies)
    assert response.status_code == 200
    assert response.json() == item_data
```

----------------------------------------

TITLE: 의존자(Dependency)에 의존성 명시하기 - Python
DESCRIPTION: 경로 작동 함수의 매개변수로 Depends를 사용하여 의존성을 선언합니다. FastAPI는 의존성 함수를 호출하고, 그 결과를 경로 작동 함수에 주입합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import Depends, FastAPI

app = FastAPI()


def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}


@app.get("/items/")
async def read_items(commons: dict = Depends(common_parameters)):
    return commons


@app.get("/users/")
async def read_users(commons: dict = Depends(common_parameters)):
    return commons
```

----------------------------------------

TITLE: Initializing Optional Query Parameter with Type Hints
DESCRIPTION: Demonstrates defining an optional query parameter with type hints and default value of None
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
q: Union[str, None] = None
```

LANGUAGE: Python
CODE:
```
q: str | None = None
```

----------------------------------------

TITLE: Declaring Item Model Type in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare a more complex model `Item` as a parameter type in FastAPI using standard Python type hints. The `item` parameter is annotated with `Item`, enabling editor support and data validation for the model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Implementing Dependency Requirements
DESCRIPTION: Shows how to implement dependency requirements using request headers in FastAPI. The code checks for specific headers and raises HTTP exceptions if requirements aren't met.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def verify_token(x_token: str = Header()) -> str:
    if not x_token:
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token

async def verify_key(x_key: str = Header()) -> str:
    if not x_key:
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key
```

----------------------------------------

TITLE: Hero Table Model Definition
DESCRIPTION: Defines the `Hero` table model with fields like `id` and `secret_name`, inheriting from `HeroBase`. This model represents the complete structure of the Hero table in the database.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_10

LANGUAGE: Python
CODE:
```
class Hero(HeroBase, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    secret_name: str
```

----------------------------------------

TITLE: Declaring Basic Header Parameter in FastAPI
DESCRIPTION: Demonstrates how to declare a basic header parameter with type annotation and optional validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/header-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def read_items(user_agent: str | None = Header(default=None)):
```

----------------------------------------

TITLE: Running FastAPI App with Uvicorn
DESCRIPTION: This command runs the FastAPI application using Uvicorn, binding it to host 0.0.0.0 and port 80.  The --reload option should not be used in production.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/manually.md#_snippet_2

LANGUAGE: console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 80

<span style="color: green;">INFO</span>:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Upgrading pip in Virtual Environment
DESCRIPTION: Command to upgrade pip to the latest version within the activated virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
$ python -m pip install --upgrade pip

---> 100%
```

----------------------------------------

TITLE: Customizing Documentation UI URLs in FastAPI
DESCRIPTION: This snippet demonstrates how to customize the URLs for Swagger UI and ReDoc documentation interfaces. In this example, Swagger UI is moved to '/documentation' and ReDoc is disabled.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/metadata.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI(docs_url="/documentation", redoc_url=None)


@app.get("/items/")
async def read_items():
    return [{"name": "Katana"}]
```

----------------------------------------

TITLE: Path Parameter with Path Conversion in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a path parameter that can contain a path itself using the `:path` converter in FastAPI. The `file_path:path` syntax in the path definition tells FastAPI to capture the entire path segment into the `file_path` parameter. The function then simply returns the received file path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
    return {"file_path": file_path}
```

----------------------------------------

TITLE: Defining Header Parameters with Pydantic Models in FastAPI
DESCRIPTION: This example demonstrates how to create a Pydantic model for related header parameters and use it in a FastAPI route. FastAPI will extract each field from the request headers and provide the defined Pydantic model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-param-models.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class HeaderModel(BaseModel):
    x_token: str
    x_api_version: str | None = None
    user_agent: str | None = None
    content_language: str | None = "en-US"
    content_type: str | None = None


@app.get("/items/")
async def read_items(headers: Annotated[HeaderModel, Header()]):
    return {"headers": headers}
```

----------------------------------------

TITLE: File Reading with Context Manager
DESCRIPTION: Basic example of using a context manager to safely read and close a file
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
with open("./somefile.txt") as f:
    contents = f.read()
    print(contents)
```

----------------------------------------

TITLE: Importing Cookie Class in FastAPI
DESCRIPTION: Shows how to import the Cookie class from FastAPI framework for cookie parameter handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/cookie-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Cookie
```

----------------------------------------

TITLE: 단순 타입 힌트 예제
DESCRIPTION: 이 예제는 `str`, `int`, `float`, `bool`, `bytes`와 같은 파이썬 표준 타입을 변수에 적용하는 방법을 보여줍니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/python-types.md#_snippet_4

LANGUAGE: python
CODE:
```
name: str
age: int
price: float
is_adult: bool
data: bytes
```

----------------------------------------

TITLE: Running Docker Container
DESCRIPTION: Command to run a Docker container based on the built image. The `-d` flag runs the container in detached mode (in the background), `--name` assigns a name to the container (`mycontainer`), and `-p` maps port 80 on the host to port 80 on the container.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_15

LANGUAGE: bash
CODE:
```
docker run -d --name mycontainer -p 80:80 myimage
```

----------------------------------------

TITLE: Installing Uvicorn with Standard Dependencies
DESCRIPTION: This command installs Uvicorn, a high-performance ASGI server, along with recommended additional dependencies, including uvloop for improved concurrency performance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/manually.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Overriding Dependencies in FastAPI Python
DESCRIPTION: This code snippet shows how to override dependencies in a FastAPI application using the app.dependency_overrides dictionary. It demonstrates setting and clearing dependency overrides for testing purposes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/testing-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
app.dependency_overrides[get_current_username] = get_current_username_mock

# Run your tests here

app.dependency_overrides = {}
```

----------------------------------------

TITLE: Required Query and Path Parameters without Annotated
DESCRIPTION: Shows parameter ordering with required query and path parameters without using Annotated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get(\"/items/{item_id}\")\ndef read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    return {\"item_id\": item_id, \"q\": q}
```

----------------------------------------

TITLE: Disabling Underscore Conversion in Header Parameters
DESCRIPTION: Shows how to disable automatic underscore to hyphen conversion in header parameter names using convert_underscores=False.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/header-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def read_items(strange_header: str | None = Header(default=None, convert_underscores=False)):
```

----------------------------------------

TITLE: Importing Submodules to Avoid Name Collisions in FastAPI
DESCRIPTION: Imports the `items` submodule directly to avoid naming conflicts with other routers, such as the `users` router. This allows both routers to be used in the same file without one overwriting the other.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_14

LANGUAGE: Python
CODE:
```
from .routers import items
from .routers import users

from fastapi import FastAPI

app = FastAPI()


app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Creating Basic Asynchronous FastAPI Application (Python)
DESCRIPTION: This Python code snippet shows an alternative implementation of the basic FastAPI application using asynchronous functions (`async def`) for the route handlers. This is useful when your route logic involves awaiting other asynchronous operations like database calls or API requests. The functionality is otherwise identical to the synchronous example.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running pytest for FastAPI Tests
DESCRIPTION: Command to run pytest for executing the FastAPI test suite.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/testing.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
$ pytest
```

----------------------------------------

TITLE: Using UJSONResponse for JSON Serialization in FastAPI
DESCRIPTION: Example showing how to use UJSONResponse as an alternative JSON serializer. This replaces the default JSONResponse with ujson library implementation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import UJSONResponse

app = FastAPI()


@app.get("/items/", response_class=UJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Second-level Dependency
DESCRIPTION: This snippet defines a second-level dependency in FastAPI. It declares a dependency on another function `query_extractor` and assigns its return value to the parameter `q`. It also defines an optional cookie named `last_query`, which is used if the query parameter `q` is not provided.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
async def query_or_cookie_extractor(
    q: str | None = Depends(query_extractor),
    last_query: str | None = Cookie(default=None),
):
    if not q:
        return last_query
    return q
```

----------------------------------------

TITLE: Setting License Identifier in FastAPI
DESCRIPTION: Shows how to configure license information using SPDX identifier instead of URL in FastAPI application metadata.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/metadata.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
license_info={
    "name": "Apache 2.0",
    "identifier": "Apache-2.0",
}
```

----------------------------------------

TITLE: Handling WebSocket Disconnects in FastAPI
DESCRIPTION: This code snippet demonstrates how to handle WebSocket disconnections in a FastAPI application. It catches the WebSocketDisconnect exception that is raised when a client closes the connection and then notifies other connected clients about the disconnection.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/websockets.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from typing import List

app = FastAPI()

connected_clients: List[WebSocket] = []


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    client_id = id(websocket)
    connected_clients.append(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            for client in connected_clients:
                await client.send_text(f"Client #{client_id}: {data}")
    except WebSocketDisconnect:
        connected_clients.remove(websocket)
        for client in connected_clients:
            await client.send_text(f"Client #{client_id} left the chat")
```

----------------------------------------

TITLE: Using UploadFile with Default Values
DESCRIPTION: This snippet showcases how to utilize `UploadFile` while providing a default value using `File()`.  This is useful when the file upload is optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"from typing import Annotated, Optional

from fastapi import FastAPI, UploadFile

app = FastAPI()


@app.post("/files/")
async def create_file(
    file: Annotated[Optional[UploadFile], File()] = None
):
    if not file:
        return {"message": "No upload file sent"}
    else:
        return {"filename": file.filename}"
```

----------------------------------------

TITLE: Declaring Cookie Parameters in FastAPI Python
DESCRIPTION: This code demonstrates how to declare a cookie parameter in a FastAPI route function. It uses the Cookie class to define an optional string parameter named 'ads_id'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cookie-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def read_items(ads_id: Annotated[str | None, Cookie()] = None):
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation
DESCRIPTION: This code snippet demonstrates defining a synchronous path operation function. Instead of using 'async def', a regular 'def' is used. This is suitable for operations that don't involve asynchronous tasks.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: python
CODE:
```
@app.get("/")
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Activating a Virtual Environment on Windows PowerShell
DESCRIPTION: This command activates a Python virtual environment in Windows PowerShell. It configures the shell to use the Python interpreter and packages within the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_21

LANGUAGE: powershell
CODE:
```
.venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Defining a FastAPI Application with Custom Name in Python
DESCRIPTION: This snippet demonstrates how to create a FastAPI application instance with a custom name. This affects how you would reference the app when running it with Uvicorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
my_awesome_api = FastAPI()
```

----------------------------------------

TITLE: Reutilizando manejadores de excepciones predeterminados
DESCRIPTION: Ejemplo de cómo importar y reutilizar los manejadores de excepciones predeterminados de FastAPI mientras se agrega funcionalidad personalizada.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException\nfrom fastapi.exception_handlers import (\n    http_exception_handler,\n    request_validation_exception_handler,\n)\nfrom fastapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\n\napp = FastAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def custom_http_exception_handler(request, exc):\n    print(f"OMG! An HTTP error!: {repr(exc)}")\n    return await http_exception_handler(request, exc)\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    print(f"OMG! The client sent invalid data!: {exc}")\n    return await request_validation_exception_handler(request, exc)
```

----------------------------------------

TITLE: Illustrating Browser-Proxy-Server Routing
DESCRIPTION: This Mermaid diagram demonstrates the flow of HTTP requests from a browser through a proxy to a FastAPI server. The proxy modifies the path to ensure the server receives requests correctly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_0

LANGUAGE: mermaid
CODE:
```
graph LR

browser("Browser")
proxy["Proxy on http://0.0.0.0:9999/api/v1/app"]
server["Server on http://127.0.0.1:8000/app"]

browser --> proxy
proxy --> server
```

----------------------------------------

TITLE: Disabling Separate Input/Output Schemas
DESCRIPTION: Demonstrates how to disable separate input and output schemas in FastAPI using the separate_input_output_schemas parameter
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
app = FastAPI(separate_input_output_schemas=False)
```

----------------------------------------

TITLE: Body with Examples
DESCRIPTION: Demonstrates how to pass a single example for the expected data in `Body()`.  This example shows how to define a request body with an example for the API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/schema-extra-example.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Body, FastAPI

app = FastAPI()


@app.post("/items/")
async def create_item(
    item: str = Body(
        examples=[
            {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 50.2,
                "tax": 3.2,
            }
        ]
    ),
):
    return item
```

----------------------------------------

TITLE: Mounting WSGI Flask Application in FastAPI using WSGIMiddleware
DESCRIPTION: Demonstrates how to wrap a Flask application using WSGIMiddleware and mount it under a specific path in a FastAPI application
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/wsgi.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.wsgi import WSGIMiddleware
from flask import Flask

flask_app = Flask(__name__)
@flask_app.route("/")
def flask_route():
    return "Hello, World from Flask!"

app = FastAPI()
app.mount("/v1", WSGIMiddleware(flask_app))
```

----------------------------------------

TITLE: Using response_model_exclude_unset
DESCRIPTION: Demonstrates how to exclude default values from the response by setting response_model_exclude_unset=True
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/items/{item_id}", response_model=Item, response_model_exclude_unset=True)
def read_item(item_id: str):
    return item_from_database
```

----------------------------------------

TITLE: Annotated를 사용하여 의존성 공유하기 - Python
DESCRIPTION: Annotated를 사용하여 의존성을 변수에 저장하고 여러 곳에서 재사용할 수 있습니다. 타입 정보가 보존되어 자동 완성 및 타입 검사 기능을 활용할 수 있습니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Annotated, Optional

from fastapi import Depends, FastAPI

app = FastAPI()


def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}


CommonQueryParams = Annotated[dict, Depends(common_parameters)]


@app.get("/items/")
async def read_items(commons: CommonQueryParams):
    return commons


@app.get("/users/")
async def read_users(commons: CommonQueryParams):
    return commons
```

----------------------------------------

TITLE: Annotated Dockerfile for FastAPI Applications
DESCRIPTION: A commented version of the Dockerfile that details each step in the container build process, showing the base image selection, working directory setup, requirements installation, and code copying.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_3

LANGUAGE: Dockerfile
CODE:
```
# (1)!
FROM python:3.9

# (2)!
WORKDIR /code

# (3)!
COPY ./requirements.txt /code/requirements.txt

# (4)!
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (5)!
COPY ./app /code/app
```

----------------------------------------

TITLE: 创建FastAPI子应用
DESCRIPTION: 创建将被挂载的子应用，这是一个独立的FastAPI应用，拥有自己的路径操作。
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/sub-applications.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
subapi = FastAPI()


@subapi.get("/sub")
def read_sub():
    return {"message": "Hello World from sub API"}
```

----------------------------------------

TITLE: Return Content from Path Operation Function
DESCRIPTION: This code snippet demonstrates how to return a dictionary from a path operation function in FastAPI. The returned dictionary will be automatically converted to JSON and sent as the response to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Install python-jose with cryptography
DESCRIPTION: Installs the python-jose library with the cryptography backend, which is required for generating and verifying JWT tokens in Python.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "python-jose[cryptography]"

---> 100%
```

----------------------------------------

TITLE: Including Router with Custom Settings
DESCRIPTION: This code snippet demonstrates how to include a router with custom prefix, tags, dependencies, and responses using `app.include_router()`. It allows applying custom settings without modifying the original router definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_18

LANGUAGE: Python
CODE:
```
app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)
```

----------------------------------------

TITLE: PATH variable after virtual environment activation (Linux/macOS)
DESCRIPTION: This shows the PATH variable content after activating a virtual environment on Linux or macOS systems. The virtual environment's bin directory is prepended to the PATH.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_25

LANGUAGE: text
CODE:
```
/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin
```

----------------------------------------

TITLE: Using HttpUrl in FastAPI
DESCRIPTION: This code snippet demonstrates the use of Pydantic's `HttpUrl` type for the `url` field in the `Image` model. This ensures that the string value is a valid URL and will be validated as such.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"from typing import Optional

from pydantic import BaseModel, HttpUrl


class Image(BaseModel):
    url: HttpUrl
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list = []
    image: Optional[Image] = None"
```

----------------------------------------

TITLE: Depends 불러오기 - Python
DESCRIPTION: FastAPI에서 Depends를 임포트하여 의존성을 명시적으로 선언할 수 있습니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import Depends, FastAPI
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: Creates a basic FastAPI application with a single endpoint that returns a JSON response.  It requires the fastapi library to be installed. The endpoint is accessed at the root path ('/') and returns a JSON object with a 'message' key.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Function Parameter with Optional Type (Python 3.10+)
DESCRIPTION: Illustrates a function parameter defined using the `|` operator in Python 3.10+, indicating it can accept either a string or `None`. The parameter is still required if no default value is provided.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_16

LANGUAGE: Python
CODE:
```
def say_hi(name: str | None):
    if name:
        print(f"Hi {name}")
    else:
        print("Hello World")
```

----------------------------------------

TITLE: Defining a Webhook in FastAPI
DESCRIPTION: This snippet demonstrates how to define a webhook in a FastAPI application using the `@app.webhooks.post()` decorator. Webhooks are defined on the `app.webhooks` attribute, similar to path operations, but use an identifier string instead of a path. This definition will be included in the OpenAPI schema for documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/openapi-webhooks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.webhooks.post("new-subscription")
async def new_subscription_webhook():
    """
    Webhook triggered when a new subscription is created.
    """
    # Process webhook data here
    pass
```

----------------------------------------

TITLE: Importing Header Class in FastAPI
DESCRIPTION: This snippet shows how to import the Header class from FastAPI, which is necessary for declaring header parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Header
```

----------------------------------------

TITLE: Running Python Script with and without Environment Variable (Bash)
DESCRIPTION: This example demonstrates running a Python script both without and with the `MY_NAME` environment variable set using the `export` command in a Bash shell. It shows how the script uses the default value when the variable is not set and the provided value when it is.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/environment-variables.md#_snippet_3

LANGUAGE: Shell
CODE:
```
// Hier stellen we de omgevingsvariabelen nog niet in
$ python main.py

// Omdat we de omgevingsvariabelen niet hebben ingesteld, krijgen we de standaardwaarde

Hello World from Python

// Maar als we eerst een omgevingsvariabele aanmaken
$ export MY_NAME="Wade Wilson"

// en het programma dan opnieuw aanroepen
$ python main.py

// kan het de omgevingsvariabele nu wel uitlezen

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function in FastAPI
DESCRIPTION: This code snippet shows how to define a synchronous path operation function in FastAPI.  This function is called by FastAPI whenever it receives a GET request to the `/` URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Installing Packages with uv
DESCRIPTION: This command installs the specified Python packages (fastapi with the standard extras) using uv.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_11

LANGUAGE: Shell
CODE:
```
$ uv pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Importing the FastAPI Class in Python
DESCRIPTION: Shows how to import the FastAPI class directly from the fastapi module. This is the fundamental import needed to create a FastAPI application instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/fastapi.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Parameter Ordering with Keyword Arguments
DESCRIPTION: Shows a technique to declare parameters as keyword arguments by using * as the first parameter
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def read_items(*, q: str, item_id: int = Path(gt=0))
```

----------------------------------------

TITLE: 클래스 타입 힌트 예제
DESCRIPTION: 변수의 타입으로 클래스를 선언하는 방법을 보여줍니다. `Person` 클래스를 정의하고 변수를 `Person` 타입으로 선언하여 에디터의 도움을 받을 수 있습니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/python-types.md#_snippet_9

LANGUAGE: python
CODE:
```
class Person:
    def __init__(self, name: str):
        self.name = name
```

LANGUAGE: python
CODE:
```
first_person: Person
```

----------------------------------------

TITLE: Route Ordering in FastAPI
DESCRIPTION: This example demonstrates the importance of route ordering in FastAPI. The `/users/me` route must be declared before the `/users/{user_id}` route to prevent the latter from incorrectly matching `/users/me`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Handling Duplicate Headers in FastAPI
DESCRIPTION: Example demonstrating how to handle multiple values for the same header using a list type annotation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/header-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def read_items(x_token: list[str] | None = Header(default=None)):
```

----------------------------------------

TITLE: Adding OpenAPI-Specific Examples using openapi_examples
DESCRIPTION: Demonstrates how to add OpenAPI-specific examples to a parameter (like `Body()`) using the `openapi_examples` parameter. This allows providing multiple named examples with summaries, descriptions, and values, which are typically used by documentation UIs like Swagger UI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/schema-extra-example.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Body
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

app = FastAPI()

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        openapi_examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            },
            "bad_name": {
                "summary": "A bad name example",
                "description": "Does not have a name.",
                "value": {
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            },
            "long_description": {
                "summary": "A long description example",
                "description": "This item has a really long description that goes on for multiple lines.\nAnd other lines.",
                "value": {
                    "name": "Baz",
                    "description": "A very good Item with a long description",
                    "price": 30.0,
                    "tax": 10.7,
                }
            }
        }
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Python Main Check Pattern
DESCRIPTION: Example of the __name__ == "__main__" conditional check pattern used to control code execution based on how the file is run.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
uvicorn.run(app, host="0.0.0.0", port=8000)
```

----------------------------------------

TITLE: Installing Specific Package Version with Pip
DESCRIPTION: Example of installing a specific version of a package using pip, which helps manage package dependencies
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_18

LANGUAGE: bash
CODE:
```
$ pip install "harry==1"
```

LANGUAGE: bash
CODE:
```
$ pip install "harry==3"
```

----------------------------------------

TITLE: Running Hypercorn with Trio
DESCRIPTION: This command runs Hypercorn with Trio as the backend, allowing the application to use Trio internally.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/deployment/manually.md#_snippet_5

LANGUAGE: bash
CODE:
```
$ hypercorn main:app --worker-class trio
```

----------------------------------------

TITLE: Python Class Type Hint
DESCRIPTION: This code shows how to use a class (`Person`) as a type hint.  By annotating the `person` variable with the `Person` class, the editor can provide autocompletion and type checking for the `person` object's attributes and methods.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
"""class Person:
    def __init__(self, name: str):
        self.name = name

def get_person_name(person: Person):
    return person.name
""
```

----------------------------------------

TITLE: Installing Uvicorn
DESCRIPTION: This command installs Uvicorn, an ASGI server, along with the 'standard' extras. Uvicorn is used to run FastAPI applications in a production environment. The 'standard' extras provide additional features and optimizations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/index.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Returning List of Models as API Response
DESCRIPTION: Shows how to define API endpoints that return lists of model objects using typing.List
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/extra-models.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/items/", response_model=List[Item])
def read_items():
    return [
        Item(name="Portal Gun"),
        Item(name="Plumbus")
    ]
```

----------------------------------------

TITLE: Import Depends
DESCRIPTION: The `Depends` utility is imported from the `fastapi` module. It is used to declare that a parameter in a path operation function or another dependency function relies on a dependency.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Disabling Response Model Generation
DESCRIPTION: Demonstrates how to disable response model generation by setting response_model=None while maintaining type hints for tooling support
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/items/{item_id}", response_model=None)
def read_item(item_id: str):
    return some_arbitrary_object
```

----------------------------------------

TITLE: Sample JSON Response from FastAPI Endpoint
DESCRIPTION: This JSON snippet shows the expected response from the root endpoint of the FastAPI application. It returns a simple message in JSON format.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{"message": "Hello World"}
```

----------------------------------------

TITLE: UploadFile з Додатковими Мета Даними у FastAPI
DESCRIPTION: Показує, як використовувати File() разом з UploadFile для встановлення додаткових метаданих при завантаженні файлів у FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-files.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.post("/uploadfile/")
async def create_upload_file(
    file: UploadFile = File(description="A file to upload"),
):
    return {"filename": file.filename}
```

----------------------------------------

TITLE: Formatting FastAPI Code
DESCRIPTION: Command to run the formatting script that cleans and formats all code, including auto-sorting imports. This ensures code consistency throughout the project.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ bash scripts/format.sh
```

----------------------------------------

TITLE: Managing Environment Variables in PowerShell
DESCRIPTION: These console commands show how to create and use environment variables in a Windows PowerShell using the `$Env:` prefix and `echo`. It also demonstrates running a Python script that reads an environment variable, showing the difference when the variable is set before execution.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/environment-variables.md#_snippet_2

LANGUAGE: console
CODE:
```
$Env:MY_NAME = "Wade Wilson"

echo "Hello $Env:MY_NAME"

Hello Wade Wilson
```

LANGUAGE: console
CODE:
```
python main.py

Hello World from Python

$Env:MY_NAME = "Wade Wilson"

python main.py

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Initializing FastAPI App with Metadata
DESCRIPTION: Create a FastAPI application instance and configure its global metadata using parameters like `title`, `description`, `version`, `terms_of_service`, `contact`, and `license_info`. This information is used to populate the main section of the OpenAPI schema and the generated documentation UIs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/metadata.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="My Super Cool API",
    description="This is a very fancy API with lots of features",
    version="2.5.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpond",
        "url": "http://x.com/deadpond/",
        "email": "deadpond@example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)
```

----------------------------------------

TITLE: Checking Active Python Virtual Environment (Windows PowerShell)
DESCRIPTION: This command checks which Python interpreter is currently being used, indicating whether a virtual environment is active. It uses Get-Command to find the python executable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_28

LANGUAGE: powershell
CODE:
```
Get-Command python
```

----------------------------------------

TITLE: Checking the active Python interpreter (Linux, macOS, Windows Bash)
DESCRIPTION: This command verifies that the virtual environment is activated by displaying the path to the `python` executable. When the environment is active, it should point to the Python interpreter within the `.venv/bin` directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_6

LANGUAGE: Shell
CODE:
```
```console
$ which python

/home/user/code/awesome-project/.venv/bin/python
```
```

----------------------------------------

TITLE: Accessing Request Body in Exception Handlers with Custom Routes
DESCRIPTION: This example shows how to access the request body in an exception handler using a custom APIRoute. The route handler tries to process the request and if an exception occurs, it can access the request body for error handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def custom_route_handler(request: Request) -> Response:
    request = RequestWithBody(request.scope, request.receive)
    try:
        return await original_route_handler(request)
    except Exception as exc:
        body = await request.body()
        print(f"Error: {exc}\nRequest body: {body}")
        raise
```

----------------------------------------

TITLE: Specifying Pydantic version range in requirements.txt
DESCRIPTION: This snippet illustrates how to specify a version range for Pydantic in a requirements.txt file.  This allows the usage of any Pydantic version above 1.2.0 and below 2.0.0. Pydantic is used for data validation and settings management.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/versions.md#2025-04-21_snippet_2

LANGUAGE: txt
CODE:
```
"pydantic>=1.2.0,<2.0.0"
```

----------------------------------------

TITLE: Accediendo al body en errores de validación
DESCRIPTION: Muestra cómo acceder y retornar el cuerpo de la solicitud que causó un error de validación para facilitar la depuración.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content=jsonable_encoder({"detail": exc.errors(), "body": exc.body}),\n    )
```

----------------------------------------

TITLE: HTTP Redirect Response
DESCRIPTION: Demonstrates how to create a redirect response using RedirectResponse. This shows both direct response creation and using response_class for URL redirection.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/redirect")
def redirect_example():
    return RedirectResponse(url="https://example.com")
```

----------------------------------------

TITLE: Starting Traefik with Configuration File
DESCRIPTION: Starts the Traefik proxy server using the specified configuration file (traefik.toml). This command loads the routing rules and settings defined in the TOML file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_7

LANGUAGE: console
CODE:
```
$ ./traefik --configFile=traefik.toml
```

----------------------------------------

TITLE: Pinning FastAPI to Version Range in requirements.txt
DESCRIPTION: Demonstrates how to specify a version range for FastAPI in requirements.txt, allowing patch updates but preventing minor version changes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/versions.md#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
fastapi[standard]>=0.112.0,<0.113.0
```

----------------------------------------

TITLE: Declaring an Optional Type - Python 3.8+
DESCRIPTION: This snippet declares a variable `name` that can be either a string or None using the `Optional` type from the `typing` module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Optional

name: Optional[str] = "Guido"
```

----------------------------------------

TITLE: Query Parameter with Title
DESCRIPTION: Declares a query parameter `q` with a title using the `Query` class. The title is used in the generated OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Optional[str] = Query(default=None, title="Query string")):
    return {"q": q}
```

----------------------------------------

TITLE: Declaring Header Parameters in FastAPI
DESCRIPTION: Example of declaring a header parameter in a route function using the Header class. This shows how to make a user-agent header parameter with type annotation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def read_items(user_agent: str | None = Header(default=None)):
```

----------------------------------------

TITLE: Adding Regular Expression Validation to Query Parameter (Python 3.10+)
DESCRIPTION: Shows how to define a query parameter with a regular expression pattern, enforcing strict matching criteria. This supports advanced validation scenarios in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query(regex='^fixedquery$')] = None
```

----------------------------------------

TITLE: Deprecating a Query Parameter with FastAPI
DESCRIPTION: This code snippet demonstrates how to deprecate a query parameter named `old_password` in a FastAPI application. The `deprecated=True` argument is passed to the `Query` function, which marks the parameter as deprecated in the API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_13

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Optional[str] = Query(None, deprecated=True)
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Correcting Type Mismatch in Python Function
DESCRIPTION: This function corrects the type mismatch by converting the integer age to a string before concatenation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
def get_name_with_age(name: str, age: int):
    name_with_age = name + " is this old: " + str(age)
    return name_with_age
```

----------------------------------------

TITLE: Overriding Request Validation Exception Handler in FastAPI
DESCRIPTION: This code snippet demonstrates how to override the default RequestValidationError exception handler in FastAPI. It imports RequestValidationError and uses it with @app.exception_handler to create a custom exception handler that returns a plain text response instead of JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/handling-errors.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.exceptions import RequestValidationError
from fastapi.responses import PlainTextResponse
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    item_id: int


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(
    request: Request, exc: RequestValidationError
):
    return PlainTextResponse(str(exc), status_code=400)


@app.post("/items/{item_id}")
async def read_item(item: Item):
    return item
```

----------------------------------------

TITLE: Install PyJWT using pip
DESCRIPTION: This command installs the PyJWT library, which is used for generating and verifying JSON Web Tokens (JWTs) in Python. It's a prerequisite for creating secure authentication tokens.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install pyjwt

---> 100%
```

----------------------------------------

TITLE: Setting Cookies using Response parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to set a cookie in a FastAPI route using the `Response` parameter. It sets a cookie named "some_cookie" with a value of "some_value" on the response object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/response-cookies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.get("/items/")\nasync def read_items(response: Response):\n    response.set_cookie(key="some_cookie", value="some_value")\n    return {"message": "Come to the dark side, we have cookies"}"
```

----------------------------------------

TITLE: Traefik Routes Configuration for API Proxy
DESCRIPTION: A Traefik routes configuration that sets up stripping the /api/v1 prefix from incoming requests and forwards them to a service running on localhost port 8000. It defines middleware, router rules, and service endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_6

LANGUAGE: toml
CODE:
```
[http]
  [http.middlewares]

    [http.middlewares.api-stripprefix.stripPrefix]
      prefixes = ["/api/v1"]

  [http.routers]

    [http.routers.app-http]
      entryPoints = ["http"]
      service = "app"
      rule = "PathPrefix(`/api/v1`)"
      middlewares = ["api-stripprefix"]

  [http.services]

    [http.services.app]
      [http.services.app.loadBalancer]
        [[http.services.app.loadBalancer.servers]]
          url = "http://127.0.0.1:8000"
```

----------------------------------------

TITLE: Adding Custom Tags, Responses, and Dependencies to FastAPI Router
DESCRIPTION: This code snippet demonstrates how to add custom tags, responses, and dependencies to a specific path operation within a FastAPI router. It shows how to combine tags defined at the router level with additional tags for a specific endpoint, and how to define custom responses for different HTTP status codes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import APIRouter, Depends, HTTPException

from ..dependencies import get_token_header
from .models import Item, ItemCreate

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)


fake_items_db = {
    "plumbus": {"name": "Plumbus"},
    "gun": {"name": "Portal Gun"},
}


@router.get("/")
async def read_items():
    return fake_items_db


@router.get("/{item_id}", responses={403: {"description": "Operation forbidden"}})
async def read_item(item_id: str):
    if item_id not in fake_items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    if item_id == "gun":
        raise HTTPException(status_code=403, detail="Not allowed")
    return {"name": fake_items_db[item_id]["name"], "item_id": item_id}


@router.post("/")
async def create_item(item: ItemCreate):
    return item


@router.put(
    "/{item_id}",
    tags=["custom"],
    responses={403: {"description": "Operation forbidden"}},
)
async def update_item(item_id: str):
    if item_id != "plumbus":
        raise HTTPException(
            status_code=403, detail="You can only update the plumbus"
        )
    return {"name": "Plumbus"}

```

----------------------------------------

TITLE: Activating Virtual Environment on Linux/macOS
DESCRIPTION: Activates the virtual environment on Linux or macOS using the source command. This sets up the environment for the current terminal session.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_3

LANGUAGE: console
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Implementing Request Body Error Handling in Python
DESCRIPTION: Shows how to wrap the request body access in a try/except block to handle potential errors. If an error occurs, it creates a new Request object with the error information.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def custom_route_handler(request: Request) -> Response:
    try:
        body = await request.body()
    except Exception as e:
        body = bytes(str(e), encoding="utf-8")
        request = Request(request.scope, receive=lambda: body)
    return await original_route_handler(request)
```

----------------------------------------

TITLE: Определение параметров формы в операции пути (Python)
DESCRIPTION: Этот фрагмент кода показывает, как определить параметры для операции пути, используя `Form`. Это позволяет FastAPI считывать данные, отправленные как поля формы (например, `application/x-www-form-urlencoded`), а не как JSON. Показано определение параметров `username` и `password` как параметров формы.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/request-forms.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Form

app = FastAPI()

@app.post("/login/")
async def login(username: str = Form(...), password: str = Form(...)):
    return {"username": username}
```

----------------------------------------

TITLE: Parameter Ordering with Non-Annotated Path Parameters
DESCRIPTION: Shows how to handle parameter ordering when using Path without Annotated, placing the required query parameter before the path parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Path

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(
    q: Annotated[str, Path()],
    item_id: int,
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results

```

----------------------------------------

TITLE: Створення метаданих для тегів у FastAPI
DESCRIPTION: Приклад створення метаданих для тегів `users` та `items` і передачі їх у параметр `openapi_tags` у FastAPI. Він показує, як додати описи, включаючи Markdown, для тегів, які використовуються для групування операцій шляхів.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/metadata.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    openapi_tags=[
        {
            "name": "users",
            "description": "Operations with users. The **login** logic is also here.",
        },
        {
            "name": "items",
            "description": "Manage items. So _fancy_ they have their own docs.",
            "externalDocs": {
                "description": "Items external docs description",
                "url": "https://example.com/items-docs",
            },
        },
    ]
)


@app.get("/users", tags=["users"])
async def read_users():
    return [{"username": "johndoe"}]


@app.get("/items", tags=["items"])
async def read_items():
    return [{"name": "Foo", "price": 50.2}]
```

----------------------------------------

TITLE: Updating Items with PUT Request and Pydantic Model
DESCRIPTION: This code snippet demonstrates how to handle a PUT request to update an item using a Pydantic model to define the request body. It defines an Item model with name, price, and is_offer fields, and uses it in the update_item function to receive and process the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Multiple Body and Query Parameters in FastAPI
DESCRIPTION: Demonstrates how to declare multiple body parameters along with query parameters in a FastAPI endpoint.  Scalar values are interpreted as query parameters by default.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body-multiple-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Body

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


class User(BaseModel):
    username: str
    full_name: Union[str, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(),
    q: Union[str, None] = None,
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    results.update({"item": item, "user": user, "importance": importance})
    return results
```

----------------------------------------

TITLE: Basic FastAPI Docker Command Configuration
DESCRIPTION: Docker CMD configuration for running a FastAPI application using the exec form, which ensures proper application shutdown and lifespan event handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_4

LANGUAGE: dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--port", "80"]
```

----------------------------------------

TITLE: Returning a Dictionary from Path Operation
DESCRIPTION: Demonstrates returning a dictionary from a path operation function. FastAPI automatically converts the dictionary to a JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Include Custom Documentation for Static Files in FastAPI
DESCRIPTION: Creates path operations to serve custom HTML pages for Swagger UI and ReDoc, utilizing FastAPI's internal functions and passing necessary arguments like openapi_url, title, and the URLs for Swagger UI's JavaScript and CSS files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-docs-ui-assets.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get('/docs', include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + ' - Swagger UI',
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url='/static/swagger-ui-bundle.js',
        swagger_css_url='/static/swagger-ui.css',
    )


@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)
async def swagger_ui_redirect():
    return get_swagger_ui_oauth2_redirect_html()


@app.get('/redoc', include_in_schema=False)
async def redoc_html():
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=app.title + ' - ReDoc',
        redoc_js_url='/static/redoc.standalone.js',
    )
```

----------------------------------------

TITLE: Update FastAPI App with PUT Request Body
DESCRIPTION: Extends the FastAPI application to handle PUT requests to '/items/{item_id}'. It defines a Pydantic model 'Item' to represent the request body, including name, price, and an optional offer flag. The update_item function receives the item_id and the Item model as input, returning a JSON response with the item name and ID.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Installing Custom Exception Handler
DESCRIPTION: You can register custom exception handlers using the `@app.exception_handler()` decorator. The handler function receives the `Request` and the exception instance. This allows you to define custom responses for specific exceptions raised in your application, like a custom `UnicornException`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name

app = FastAPI()

@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},
    )

@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"unicorn_name": name}
```

----------------------------------------

TITLE: Linux/macOS PATH Environment Example
DESCRIPTION: Shows the structure of PATH environment variable on Linux and macOS systems, displaying system directories where executables are searched.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/environment-variables.md#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
```

----------------------------------------

TITLE: Returning JSONResponse with Cookies in FastAPI (Python)
DESCRIPTION: Shows how to create a `JSONResponse` object directly within a FastAPI path operation. It demonstrates setting a cookie on this response object using `set_cookie` before returning the response itself. This method requires manually handling the response content and type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-cookies.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi.responses import JSONResponse

@app.get("/cookie-and-object/")
async def create_cookie():
    content = {"message": "Come to the dark side, we have cookies"}
    response = JSONResponse(content=content)
    response.set_cookie(key="fakesession", value="fake-cookie-value")
    return response
```

----------------------------------------

TITLE: Install Jinja2 Dependency - Console
DESCRIPTION: Install the Jinja2 library using pip, which is required to use Jinja2 templates with FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/templates.md#_snippet_0

LANGUAGE: Console
CODE:
```
pip install jinja2
```

----------------------------------------

TITLE: FastAPI Main App File
DESCRIPTION: This is an example of a FastAPI application defined in main.py. It defines a simple GET endpoint that returns a JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_main():
    return {"msg": "Hello World"}
```

----------------------------------------

TITLE: Explicitly running Python (Linux, macOS)
DESCRIPTION: Example of explicitly running python by specifying the full path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/environment-variables.md#_snippet_6

LANGUAGE: console
CODE:
```
$ /opt/custompython/bin/python
```

----------------------------------------

TITLE: Starting FastAPI Application with Uvicorn - Python
DESCRIPTION: This snippet demonstrates how to start a FastAPI application using the Uvicorn ASGI server, enabling live reloading during development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
<span style="color: green;">INFO</span>:     Started reloader process [28720]
<span style="color: green;">INFO</span>:     Started server process [28722]
<span style="color: green;">INFO</span>:     Waiting for application startup.
<span style="color: green;">INFO</span>:     Application startup complete.
```

----------------------------------------

TITLE: Making a GET request with Requests
DESCRIPTION: This snippet demonstrates how to make a simple GET request to a URL using the Requests library. Requests is a Python library for interacting with APIs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/alternatives.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"response = requests.get("http://example.com/some/url")"
```

----------------------------------------

TITLE: Using FileResponse with response_class in FastAPI
DESCRIPTION: Example showing how to use FileResponse as a response_class parameter, which allows returning just the file path string from the route function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()


@app.get("/", response_class=FileResponse)
async def main():
    some_file_path = "large-video-file.mp4"
    return some_file_path
```

----------------------------------------

TITLE: Creating a Custom GzipRoute Class in FastAPI
DESCRIPTION: This code defines a custom `GzipRoute` class that inherits from `fastapi.routing.APIRoute`. It overrides the `get_route_handler()` method to create a `GzipRequest` instance from the original request. This allows the application to automatically handle Gzip-compressed requests by using the custom `GzipRequest` class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Callable, Type

from fastapi import Depends, FastAPI, Header, Request, Response
from fastapi.routing import APIRoute


class GzipRoute(APIRoute):
    def get_route_handler(self) -> Callable:
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request) -> Response:
            request = GzipRequest(request.scope, request.receive)
            return await original_route_handler(request)

        return custom_route_handler
```

----------------------------------------

TITLE: Creating Model with Dictionary Unpacking and Additional Arguments
DESCRIPTION: Demonstrates how to create a new Pydantic model by unpacking a dictionary and adding additional keyword arguments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
UserInDB(**user_in.dict(), hashed_password=hashed_password)
```

----------------------------------------

TITLE: Deprecated Query Parameter
DESCRIPTION: This example demonstrates how to mark a query parameter as deprecated using the `deprecated=True` argument in the `Query` function. This indicates that the parameter should no longer be used.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, deprecated=True)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Adding Endpoint to FastAPI App
DESCRIPTION: This code demonstrates how to add an endpoint directly to the main FastAPI application instance. It defines a simple path operation function and associates it with the root path ('/') using the @app.get decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_19

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Depends, FastAPI

app = FastAPI()


async def common_parameters(
    q: Optional[str] = None, skip: int = 0, limit: int = 100
):
    return {"q": q, "skip": skip, "limit": limit}


@app.get("/")
async def read_root():
    return {"message": "Hello World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, commons: dict = Depends(common_parameters)):
    return {"item_id": item_id, **commons}


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str, commons: dict = Depends(common_parameters)):
    return {"user_id": user_id, **commons}

```

----------------------------------------

TITLE: Read Single Hero Endpoint
DESCRIPTION: Define a FastAPI GET endpoint `/heroes/{hero_id}` to retrieve a single Hero by their ID. It uses the `SessionDep` dependency and `session.get` to fetch the hero, returning a 404 error if not found.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends, HTTPException
from sqlmodel import Session

@app.get("/heroes/{hero_id}", response_model=Hero)
def read_hero(*, session: SessionDep, hero_id: int):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: Function with Type Hints and Type Conversion
DESCRIPTION: This example shows how to fix a type error by converting the integer age to a string using str(age).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_3

LANGUAGE: Python
CODE:
```
def get_name_with_age(name: str, age: int):
    name_with_age = name + " is this old: " + str(age)
    return name_with_age
```

----------------------------------------

TITLE: Налаштування метаданих API у FastAPI
DESCRIPTION: Приклад налаштування метаданих API, таких як title, summary, description, version, terms_of_service, contact, та license_info у додатку FastAPI.  Він показує, як використовувати ці параметри для налаштування специфікації OpenAPI та автоматично згенерованих інтерфейсів документації API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/metadata.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="Fancy API",
    summary="This is a fancy API for managing users and items.",
    description="""
This API is a **very fancy** one.

It does _everything_.

Trust me.
""",
    version="0.1.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://example.com/contact/",
        "email": "dp@example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Setting and Using Environment Variables (PowerShell)
DESCRIPTION: Demonstrates how to set an environment variable named `MY_NAME` with the value "Wade Wilson" using the `$Env:` syntax in PowerShell. It then shows how to access this variable using the `echo` command to print a greeting.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/environment-variables.md#_snippet_1

LANGUAGE: Shell
CODE:
```
// Maak een omgevingsvariabel MY_NAME
$ $Env:MY_NAME = "Wade Wilson"

// Gebruik het met andere programma's, zoals
$ echo "Hello $Env:MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Creating a custom response class in FastAPI with orjson
DESCRIPTION: Demonstrates how to create a custom response class by inheriting from Response. This example creates a CustomORJSONResponse that formats JSON with indentation using orjson.OPT_INDENT_2 option.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import Response
import orjson

app = FastAPI()


class CustomORJSONResponse(Response):
    media_type = "application/json"

    def render(self, content) -> bytes:
        assert orjson is not None, "orjson must be installed"
        return orjson.dumps(content, option=orjson.OPT_INDENT_2)


@app.get("/", response_class=CustomORJSONResponse)
def main():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Defining Custom Docs UI Path Operations with CDN (Python)
DESCRIPTION: This code defines path operations for `/docs`, `/redoc`, and the OAuth2 redirect using FastAPI's built-in HTML generation functions (`get_swagger_ui_html`, `get_redoc_html`). It configures these pages to load JavaScript and CSS assets from specified custom CDN URLs instead of the default ones.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, APIRouter
from fastapi.openapi.docs import (
    get_redoc_html,
    get_swagger_ui_html,
    get_swagger_ui_oauth2_redirect_html,
)

router = APIRouter()

@router.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + " - Swagger UI",
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url="https://unpkg.com/swagger-ui-bundle@5/dist/swagger-ui-bundle.js",
        swagger_css_url="https://unpkg.com/swagger-ui-dist@5/swagger-ui.css",
    )

@router.get("/redoc", include_in_schema=False)
async def custom_redoc_html():
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=app.title + " - ReDoc",
        redoc_js_url="https://unpkg.com/redoc@2/bundles/redoc.standalone.js",
    )

@router.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)
async def swagger_ui_redirect():
    return get_swagger_ui_oauth2_redirect_html()

app.include_router(router)
```

----------------------------------------

TITLE: Translating Info Blocks
DESCRIPTION: This snippet shows the translation of an 'info' block. The English term 'info' is translated to 'Información' in Spanish, separated by a vertical bar.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/llm-prompt.md#_snippet_4

LANGUAGE: Text
CODE:
```
/// info | Información
```

----------------------------------------

TITLE: Adding Additional Media Type to Response in FastAPI
DESCRIPTION: This code snippet demonstrates how to add an additional media type (image/png) to a FastAPI path operation, allowing it to return either a JSON object or a PNG image. It uses FileResponse to return the image directly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/additional-responses.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get(
    "/items/{item_id}/image",
    responses={
        200: {
            "content": {"image/png": {}}
        }
    },
)
async def get_image(item_id: int):
    # This wouldn't be very useful if you just read the image from a file like this.
    # It would be more useful if you processed that image in memory first.

    # But let's keep it simple for now.
    return FileResponse("image.png", media_type="image/png")
```

----------------------------------------

TITLE: Simple Python Function
DESCRIPTION: This simple Python function `get_full_name` takes two string arguments, `first_name` and `last_name`, converts the first letter of each name to uppercase using the `title()` method, and returns the full name by concatenating them with a space in between. It showcases a basic string manipulation task in Python without type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"def get_full_name(first_name, last_name):
    return first_name.title() + " " + last_name.title()

print(get_full_name("john", "doe"))"
```

----------------------------------------

TITLE: Arbitrary Dict Response with typing.Dict
DESCRIPTION: Creating flexible responses with arbitrary dictionaries when field names are not known in advance
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/extra-models.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from typing import Dict

def get_arbitrary_data() -> Dict[str, str]:
    # Implementation logic
```

----------------------------------------

TITLE: Declaring a Tuple and Set (Python 3.8+)
DESCRIPTION: This snippet demonstrates how to declare a tuple with specific types for each element and a set with a specific type for all elements using the `typing` module in Python 3.8+. `Tuple[int, int, str]` defines a tuple with two integers and a string, while `Set[bytes]` defines a set containing bytes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import Tuple, Set

items_t: Tuple[int, int, str] = (1, 2, "foo")
items_s: Set[bytes] = {b"hallo", b"welt"}
```

----------------------------------------

TITLE: Windows PATH Environment Example
DESCRIPTION: Demonstrates the structure of PATH environment variable on Windows systems, showing directory paths where executables are searched.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/environment-variables.md#2025-04-21_snippet_2

LANGUAGE: plaintext
CODE:
```
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32
```

----------------------------------------

TITLE: OpenAPI Components Schema Example for FastAPI
DESCRIPTION: JSON representation of the components schemas section in an OpenAPI document. This shows how Pydantic models are converted to JSON Schema definitions that can be referenced in response objects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
{
    "components": {
        "schemas": {
            "Message": {
                "title": "Message",
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "title": "Message",
                        "type": "string"
                    }
                }
            },
            "Item": {
                "title": "Item",
                "required": [
                    "id",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "string"
                    },
                    "value": {
                        "title": "Value",
                        "type": "string"
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Ordering Path and Query Parameters
DESCRIPTION: This code snippet shows how to order path and query parameters in a FastAPI function. It demonstrates that FastAPI can detect parameters by their names, types, and default definitions, regardless of their order.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params-numeric-validations.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(item_id: int, q: str):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Boolean Query Parameter Conversion in FastAPI (Python)
DESCRIPTION: This code snippet demonstrates how FastAPI automatically converts query parameters to boolean values.  The `short` parameter is defined as a `bool`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/query-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):
    item = {"item_id": item_id}
    if q:
        item.update({"q": q})
    if not short:
        item.update(
            {"description": "This is an amazing item that has a long description"}
        )
    return item
```

----------------------------------------

TITLE: Returning Enum Members
DESCRIPTION: This example demonstrates how to return Enum members from a path operation. FastAPI automatically converts the Enum members to their corresponding values (strings in this case) in the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_8

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name == ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    return {"model_name": model_name, "message": f"Have some residuals? {model_name.value}"}


@app.get("/models/{model_name}/data")
async def get_model_data(model_name: ModelName):
    if model_name.value == "lenet":
        return {"model_name": model_name, "data": 42}
    return {"model_name": model_name, "data": 19}
```

----------------------------------------

TITLE: Define Function Without Type Hints - Python
DESCRIPTION: Defines a simple Python function `get_full_name` that takes two string arguments and returns a combined string without using type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_full_name(first_name, last_name):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: Defining Asynchronous Routes in FastAPI
DESCRIPTION: This code demonstrates how to define asynchronous routes in FastAPI using `async def`. It includes two GET routes, one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' route accepts an integer item_id and an optional string query parameter q.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/az/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Combining Predefined and Custom Responses in FastAPI
DESCRIPTION: This code demonstrates how to combine predefined responses with custom responses in FastAPI using Python's dict unpacking feature. It reuses some predefined responses in path operations and combines them with additional customizations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/additional-responses.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: float


items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {"name": "Bar", "price": 27.5},
}


@app.get("/items/{item_id}", responses={
    404: {"description": "Item not found"},
})
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return items[item_id]
```

----------------------------------------

TITLE: Creating a Basic FastAPI App
DESCRIPTION: This code snippet demonstrates how to create a basic FastAPI application with two GET routes: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' route accepts an integer item_id and an optional string query parameter q.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Accept Pure List as Request Body
DESCRIPTION: Shows how to define a FastAPI path operation function that expects the entire request body to be a JSON array (Python list) containing elements of a specific Pydantic model type (`Image`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import List
from fastapi import FastAPI
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str

app = FastAPI()

@app.post("/images/")
async def create_images(images: List[Image]):
    return images
```

----------------------------------------

TITLE: Disabling Automatic Root Path Server in FastAPI OpenAPI Schema
DESCRIPTION: This snippet demonstrates how to disable the automatic inclusion of a server with the root_path in the OpenAPI schema by setting root_path_in_servers=False in the FastAPI initialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
app = FastAPI(root_path_in_servers=False)
```

----------------------------------------

TITLE: List Type Annotation
DESCRIPTION: This snippet demonstrates how to define a variable as a list of strings using the `List` type from the `typing` module. It shows how to specify the type of elements within a list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
"from typing import List

items: List[str]"
```

----------------------------------------

TITLE: Importing BaseModel from Pydantic
DESCRIPTION: This code snippet demonstrates how to import the `BaseModel` class from the `pydantic` module. This is the base class for creating data models that define the structure and validation rules for request bodies in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel
```

----------------------------------------

TITLE: Modified Uvicorn Launch Command for TLS Proxy Configuration
DESCRIPTION: A modified Docker CMD instruction that includes the --proxy-headers flag for proper handling of HTTPS requests when using a TLS termination proxy like Nginx or Traefik.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_7

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Create a Route Operation for Testing in FastAPI
DESCRIPTION: This snippet creates a simple route operation to test if the custom documentation setup is working correctly. It defines a GET endpoint at the root path that returns a JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-docs-ui-assets.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Adding OpenAPI Extensions to FastAPI Path Operation
DESCRIPTION: Demonstrates how to add custom OpenAPI extensions to a path operation using the openapi_extra parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/items/", openapi_extra={"x-aperture-labs-portal": "blue"})
```

----------------------------------------

TITLE: Password Verification in FastAPI
DESCRIPTION: Verifies the submitted password against the hashed password stored in the database using a fake hashing system.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
user = UserInDB(**user_dict)
if not fake_hash_password(form_data.password, user.hashed_password):
    raise HTTPException(status_code=400, detail="Incorrect username or password")
```

----------------------------------------

TITLE: Creating Sub-Application
DESCRIPTION: Creates a separate FastAPI application, defining its own path operations. This sub-application will be mounted within the main application at a specified path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/sub-applications.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"""\nThen, create your sub-application and its *path operations*.\n\nThis sub-application is just another standard FastAPI application, but this is the one that will be "mounted":\n"""
subapi = FastAPI()


@subapi.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}

```

----------------------------------------

TITLE: Defining a GET request in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a GET request operation in FastAPI using the `@app.get()` decorator. It defines a function `read_url` that returns a JSON object with a message.  This example is contrasted with the Requests library's syntax.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/alternatives.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Example of Served ReDoc JavaScript File
DESCRIPTION: This code snippet shows the beginning of the `redoc.standalone.js` file. Seeing this content when accessing the `/static/redoc.standalone.js` URL confirms that the FastAPI application is successfully serving static files from the configured directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
/*! For license information please see redoc.standalone.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("null")):
...
```

----------------------------------------

TITLE: Testing FastAPI App in test_main.py
DESCRIPTION: This snippet demonstrates how to test a FastAPI application when the app is defined in a separate `main.py` file. It imports the `app` instance using relative imports and then uses TestClient to send a request and assert the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/testing.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from .main import app


client = TestClient(app)


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Returning a Dictionary
DESCRIPTION: This snippet demonstrates how to return a dictionary containing item information in FastAPI. It shows how to access item attributes and include them in the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_9

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Combining Path, Query, and Body Parameters in FastAPI (Python)
DESCRIPTION: Demonstrates how to define a single path operation that accepts parameters from the path (`item_id`), query string (`q: str | None = None`), and request body (`item: Item`). FastAPI correctly identifies the source of each parameter based on its type hint and location (path variable name, simple type hint for query, Pydantic model for body). Requires FastAPI app, `Item` model, and potentially `Query` for query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.put("/items/{item_id}")
async def update_item(item_id: int, q: str | None = None, item: Item):
    results = {"item_id": item_id, **item.model_dump()}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Defining Invoice Models and API Path Operation with Callback in FastAPI
DESCRIPTION: This code snippet demonstrates how to define Pydantic models for invoices and events, and implement a FastAPI path operation with callback functionality. It includes the model definitions and the main endpoint that receives invoice creation requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from enum import Enum
from typing import Dict, Optional

from fastapi import APIRouter, FastAPI
from pydantic import BaseModel, HttpUrl

app = FastAPI()


class Invoice(BaseModel):
    id: str
    title: Optional[str] = None
    customer: str
    total: float


class InvoiceEvent(BaseModel):
    description: str
    paid: bool


class InvoiceEventReceived(BaseModel):
    ok: bool


invoices_callback_router = APIRouter()


@invoices_callback_router.post(
    "{$callback_url}/invoices/{$request.body.id}",
    response_model=InvoiceEventReceived,
)
async def invoice_notification(
    body: InvoiceEvent,
):
    pass


@app.post(
    "/invoices/",
    callbacks=invoices_callback_router.routes,
)
async def create_invoice(
    invoice: Invoice,
    callback_url: Optional[HttpUrl] = None,
):
    """Create an invoice.

    This will (let's imagine) let the API user (some external developer) create an
    invoice.

    And this path operation will:

    * Send the invoice to the client.
    * Collect the cash from the client.
    * Send a notification back to the API user (the external developer), as a callback.
        * At this point is that the API will somehow send a POST request to the
            external API with the notification of the invoice event
            (e.g. "payment successful").
    """
    # Send the invoice, collect the cash, send the notification (the callback)
    return {"msg": "Invoice received"}
```

----------------------------------------

TITLE: Async Context Manager for Lifespan Events
DESCRIPTION: Demonstrates the use of `@asynccontextmanager` decorator to convert an asynchronous function into an async context manager. This allows the function to be used with FastAPI's `lifespan` parameter to execute code before and after the application's main functionality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager

from fastapi import FastAPI

ml_models = {}

async def fake_model_load():
    await asyncio.sleep(0.01)
    return {"model_name": "SampleModel"}

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    ml_models["model_a"] = await fake_model_load()
    yield
    # Clean up the ML models and release the resources
    ml_models.clear()
```

----------------------------------------

TITLE: Building Multi-language Documentation - Console
DESCRIPTION: Command to build documentation for all available languages, combining them into a single site directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_11

LANGUAGE: console
CODE:
```
$ python ./scripts/docs.py build-all

Building docs for: en
Building docs for: es
Successfully built docs for: es
```

----------------------------------------

TITLE: Reutilizando Manipuladores de Exceção do FastAPI
DESCRIPTION: Demonstra como reutilizar os manipuladores de exceção padrão do FastAPI ao personalizar o tratamento de exceções.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, HTTPException
from fastapi.exceptions import RequestValidationError
from fastapi.responses import PlainTextResponse
from fastapi.exception_handlers import (
    http_exception_handler,
    request_validation_exception_handler,
)

app = FastAPI()

@app.exception_handler(HTTPException)
async def custom_http_exception_handler(request, exc):
    print(f"OMG! An HTTP error!: {repr(exc)}")
    return await http_exception_handler(request, exc)

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc):
    print(f"OMG! The client sent invalid data!: {exc}")
    return await request_validation_exception_handler(request, exc)

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    if item_id == 3:
        raise HTTPException(status_code=418, detail="Nope! I don't like 3.")
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Import Error Due to Wrong Virtual Environment
DESCRIPTION: Demonstrates the error that occurs when trying to run a Python script with a virtual environment from a different project. The import fails because the required package isn't installed in the active environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_23

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban

$ python main.py

// Erro ao importar o Sirius, ele não está instalado 😱
Traceback (most recent call last):
    File "main.py", line 1, in <module>
        import sirius
```

----------------------------------------

TITLE: Running FastAPI in Production Mode with CLI
DESCRIPTION: Command to start a FastAPI application in production mode, with automatic reloading disabled and listening on all network interfaces
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/fastapi-cli.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
fastapi run main.py
```

----------------------------------------

TITLE: Importing Path and Annotated in FastAPI
DESCRIPTION: Shows how to import the necessary Path component from FastAPI and Annotated from typing for path parameter validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Path
from typing import Annotated
```

----------------------------------------

TITLE: Mounting Sub-Application
DESCRIPTION: Mounts the FastAPI sub-application to the main application at a specified path.  This allows the sub-application to handle all requests under that path, including its own OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/sub-applications.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"""\nIn your top-level application, `app`, mount the sub-application, `subapi`.\n\nIn this case, it will be mounted at the path `/subapi`:\n"""
app.mount("/subapi", subapi)

```

----------------------------------------

TITLE: Installing Dependencies for Docker Cache Optimization
DESCRIPTION: Installs the Python dependencies from `requirements.txt`. Because the `requirements.txt` file is copied in a separate, earlier step, Docker can cache this dependency installation if the file hasn't changed, significantly reducing build times.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_12

LANGUAGE: Dockerfile
CODE:
```
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
```

----------------------------------------

TITLE: Demonstrating Requests HTTP GET Method Syntax in Python
DESCRIPTION: Shows the simple API design of the Requests library for making GET requests, which inspired FastAPI's intuitive API design and HTTP method usage.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/alternatives.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
response = requests.get("http://example.com/some/url")
```

----------------------------------------

TITLE: Running FastAPI App with Hypercorn
DESCRIPTION: Runs the FastAPI application using Hypercorn, binding it to all available interfaces (0.0.0.0) on port 80. The output indicates that the server is running and provides instructions to quit.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/manually.md#_snippet_3

LANGUAGE: console
CODE:
```
$ hypercorn main:app --bind 0.0.0.0:80

Running on 0.0.0.0:8080 over http (CTRL + C to quit)
```

----------------------------------------

TITLE: 타입 힌트를 이용한 오류 수정 예제
DESCRIPTION: 이 함수는 `name`과 `age`를 입력받아 문자열을 반환합니다. `age`를 문자열로 변환하여 타입 오류를 수정합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/python-types.md#_snippet_3

LANGUAGE: python
CODE:
```
def create_item(name: str, age: int):
    return {"name": name, "age": str(age)}
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This command starts the FastAPI development server using the specified Python file. It watches for file changes and automatically reloads the server.  It requires the `fastapi` package to be installed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ <font color="#4E9A06">fastapi</font> dev <u style="text-decoration-style:single">main.py</u>
```

----------------------------------------

TITLE: Union Type Hints (Python 3.10+)
DESCRIPTION: Demonstrates declaring a variable that can be of multiple types using the new union syntax
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
item: int | str = 42
```

----------------------------------------

TITLE: Modifying Item Name to Item Price in FastAPI Response
DESCRIPTION: This code snippet shows the modified version of the previous example, where `item_name` is replaced with `item_price` in the returned dictionary. This change allows the API to return the item's price instead of its name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/index.md#_snippet_10

LANGUAGE: Python
CODE:
```
        ... "item_price": item.price ...
```

----------------------------------------

TITLE: Custom OpenAPI Content Type with Pydantic v1
DESCRIPTION: Demonstrates how to use a Pydantic model to define a custom content type (YAML) in the OpenAPI schema, even when the request body is not parsed as JSON. It shows how to manually generate the JSON schema from the Pydantic model and use it in the OpenAPI definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/path-operation-advanced-configuration.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Header
from pydantic import BaseModel
import yaml

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None

    class Config:
        schema_extra = {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            ]
        }


@app.post("/items/")
async def create_item(
    data: bytes,
    content_type: str = Header(None),
):
    if content_type == "application/yaml":
        body = yaml.safe_load(data)
    else:
        body = data
    item = Item.parse_obj(body)
    return item
```

----------------------------------------

TITLE: Copying Single File in Dockerfile
DESCRIPTION: This command copies the `main.py` file from the current directory to the `/code` directory inside the Docker image. This is used when the FastAPI application consists of a single file instead of a directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/docker.md#2025-04-21_snippet_7

LANGUAGE: Dockerfile
CODE:
```
"COPY ./main.py /code/"
```

----------------------------------------

TITLE: Variable of Type Class
DESCRIPTION: Shows how to declare a variable with the type of a previously defined class. This enables type hinting and editor support for the variable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_17

LANGUAGE: Python
CODE:
```
some_person: Person = Person(name="John")
```

----------------------------------------

TITLE: Adding Tags to FastAPI Path Operations - Python
DESCRIPTION: This code shows how to assign tags to path operations using the `tags` parameter, which accepts a list of strings. These tags are used to group related endpoints in the generated OpenAPI documentation (like Swagger UI).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post("/items/", tags=["items"])
async def create_item():
    return {"item": "Foo"}


@app.get("/users/", tags=["users"])
async def read_users():
    return [{"user": "Foo"}]

```

----------------------------------------

TITLE: Using List for type annotation
DESCRIPTION: This code snippet demonstrates how to use the `List` type from the `typing` module to define a list with string types. This approach is required for Python versions prior to 3.9.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"tags: List[str] = []"
```

----------------------------------------

TITLE: Defining a Standard Synchronous Function in Python
DESCRIPTION: Demonstrates a non-asynchronous function definition using regular def syntax for comparison with async functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
# This is not asynchronous
def get_sequential_burgers(number: int):
    # Do some sequential stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Using List Type for Query Parameter in FastAPI
DESCRIPTION: This snippet shows how to use the list type directly instead of List[str] for a query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
q: list = Query(default=[])
```

----------------------------------------

TITLE: Function Parameters With Type Hints - Python
DESCRIPTION: Shows the syntax for adding type annotations (`: type`) to function parameters in Python, which allows static analysis tools and editors to provide better support.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
first_name: str, last_name: str
```

----------------------------------------

TITLE: Using Await in an Asynchronous Function
DESCRIPTION: Demonstration of using the await keyword to call an asynchronous function and wait for its result.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Path Parameter Declaration and Usage in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare and use a path parameter in FastAPI. The `file_path:path` syntax within the route definition indicates that the `file_path` parameter should be treated as a path. The function then receives the file path as a string argument.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
    return {"file_path": file_path}
```

----------------------------------------

TITLE: Defining a Request Body with Pydantic and Adding a PUT Route
DESCRIPTION: This code defines a Pydantic model `Item` to represent the request body for a PUT request. It then adds a PUT route '/items/{item_id}' that accepts an item_id and an Item object in the request body. The function returns the item name and item ID.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/az/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Converting Query Parameter to Boolean in FastAPI
DESCRIPTION: This snippet illustrates how FastAPI automatically converts query parameters to boolean types. The `short` parameter will be interpreted as `True` if the query includes `short=1`, `short=True`, `short=true`, `short=on`, or `short=yes` (case-insensitive); otherwise, it will be `False`. The function returns a dictionary containing the `item_id` and the boolean value of `short`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"@app.get("/items/{item_id}")
async def read_item(item_id: str, short: bool | None = None):
    return {"item_id": item_id, "short": short}"
```

----------------------------------------

TITLE: Installing Packages from requirements.txt with pip
DESCRIPTION: Command to install all packages listed in a requirements.txt file using pip.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_12

LANGUAGE: bash
CODE:
```
$ pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: Enum Member Comparison
DESCRIPTION: Shows how to compare the path parameter with enum members and return enum members in the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name == ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}

    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Using RedirectResponse with status_code
DESCRIPTION: Demonstrates how to use RedirectResponse with both the response_class and status_code parameters in a FastAPI endpoint. This allows you to customize the HTTP status code of the redirect.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/typer", response_class=RedirectResponse, status_code=302)
async def redirect_typer():
    return "https://typer.tiangolo.com"

```

----------------------------------------

TITLE: Using StreamingResponse with Generators in FastAPI
DESCRIPTION: Shows how to create a streaming HTTP response in FastAPI using a generator function that yields content, allowing for efficient handling of large responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()


async def fake_video_streamer():
    for i in range(10):
        yield b"some fake video bytes"


@app.get("/")
async def main():
    return StreamingResponse(fake_video_streamer())
```

----------------------------------------

TITLE: Calling Function with Required Optional Parameter (Valid None)
DESCRIPTION: An example showing that `None` is a valid value to pass to a function parameter that has an `Optional` type hint (or `Union[..., None]`), even if the parameter itself is required.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_6

LANGUAGE: Python
CODE:
```
say_hi(name=None) # Das funktioniert, None is gültig 🎉
```

----------------------------------------

TITLE: Simple HTTP Basic Auth with FastAPI
DESCRIPTION: This snippet demonstrates the basic implementation of HTTP Basic Authentication in FastAPI. It imports HTTPBasic and HTTPBasicCredentials, creates a security scheme using HTTPBasic, and uses the security scheme as a dependency in a route operation. The operation returns an HTTPBasicCredentials object containing the username and password sent by the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

security = HTTPBasic()


@app.get("/items/")
def read_items(credentials: HTTPBasicCredentials = Depends(security)):
    return {"username": credentials.username, "password": credentials.password}"
```

----------------------------------------

TITLE: Dockerfile for Raspberry Pi and ARM architectures
DESCRIPTION: This Dockerfile is designed for use on Raspberry Pi or other ARM-based architectures. It uses a base Python image, installs FastAPI and Uvicorn, exposes port 80, copies the application code, and starts the Uvicorn server.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/deployment/docker.md#_snippet_2

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.7

RUN pip install fastapi uvicorn

EXPOSE 80

COPY ./app /app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Upgrade pip in virtual environment
DESCRIPTION: This command upgrades the pip package manager to the latest version within the activated virtual environment. It ensures that you have the most up-to-date version of pip for installing and managing Python packages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_8

LANGUAGE: bash
CODE:
```
python -m pip install --upgrade pip
```

----------------------------------------

TITLE: Install FastAPI with standard extras using uv
DESCRIPTION: This command installs the FastAPI framework with the 'standard' extras using uv.  The 'standard' extras include commonly used dependencies that enhance FastAPI's functionality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_11

LANGUAGE: bash
CODE:
```
uv pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Dockerfile for Single-File FastAPI App
DESCRIPTION: Defines a Docker image for a FastAPI application where the main application file ('main.py') resides in the root directory. It adjusts the COPY instruction to copy the single file and modifies the CMD instruction to reference the app object directly from the main module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_3

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)
COPY ./main.py /code/

# (2)
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Checking Active Python Interpreter on Linux/macOS
DESCRIPTION: Command to verify the active Python interpreter on Linux or macOS, ensuring it's from the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
$ which python

/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Creating Endpoints with APIRouter in FastAPI
DESCRIPTION: Demonstrates how to create endpoints using APIRouter, similar to how endpoints are created with the FastAPI class.  It shows how to define routes and associate them with specific handler functions within a modular router.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
router = APIRouter()

@router.get("/users/me")
async def read_user_me():
    return {"username": "Fake current user"}


@router.get("/users/{username}")
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Using Docstrings for Description in FastAPI
DESCRIPTION: This snippet shows how to use a docstring to provide a description for a FastAPI path operation. FastAPI automatically reads the docstring of the path operation function and uses it as the description. Markdown within the docstring is correctly interpreted and displayed in the documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post("/items/")
async def create_item(name: str):
    """
    Create an item with all the information:

    - **name**: Each item must have a name
    - description: A long description
    - price: Must be non-negative
    - tax: If the item is taxable
    """
    return {"name": name}
```

----------------------------------------

TITLE: Multiple Body and Query Parameters
DESCRIPTION: Illustrates how to combine body parameters with query parameters in a FastAPI endpoint. Query parameters are automatically inferred if they are simple types and not explicitly defined as Body parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-multiple-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(..., gt=0),
    q: Union[str, None] = None
):
    results = {"item_id": item_id, "item": item, "user": user, "importance": importance}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Creating a Background Task Function
DESCRIPTION: This code snippet shows how to define a standard function to be executed as a background task. The function can receive parameters and perform operations such as writing to a file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/background-tasks.md#_snippet_1

LANGUAGE: Python
CODE:
```
def write_notification(email: str, message=""):
    with open("log.txt", mode="w") as f:
        f.write(f"notification for {email}: {message}")
```

----------------------------------------

TITLE: Using Depends in WebSocket endpoint
DESCRIPTION: Demonstrates how to use Depends, Security, Cookie, Header, Path and Query in a WebSocket endpoint. It shows how to inject dependencies into a WebSocket endpoint using FastAPI's dependency injection system.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/advanced/websockets.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Cookie, Depends, FastAPI, Header, WebSocket, WebSocketException

app = FastAPI()


async def get_cookie_or_token(
    websocket: WebSocket, cookie: Optional[str] = Cookie(None), token: Optional[str] = None
):
    if cookie is None and token is None:
        raise WebSocketException(code=1008, reason="No cookies or token received")
    if cookie:
        return cookie
    return token


@app.websocket("/ws/{client_id}")
async def websocket_endpoint(
    websocket: WebSocket,
    client_id: int,
    q: Optional[str] = None,
    cookie_or_token: str = Depends(get_cookie_or_token),
    last_connection: Optional[str] = Header(None),
):
    await websocket.accept()
    while True:
        try:
            data = await websocket.receive_text()
            await websocket.send_text(
                f"Session cookie or query token value is: {cookie_or_token}"
            )
            await websocket.send_text(
                f"Message text was: {data}, client_id={client_id}, q={q}"
            )
        except WebSocketException:
            break
```

----------------------------------------

TITLE: Adding Custom Headers to HTTPException in FastAPI
DESCRIPTION: This example shows how to add custom headers to an HTTPException. It raises an HTTPException with a 404 status code, a detail message, and a dictionary of custom headers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id != "foo":
        raise HTTPException(
            status_code=404,
            detail="Item not found",
            headers={"X-Error": "There goes my error"},
        )
    return {"item": item_id}
```

----------------------------------------

TITLE: Securing Path Operation with Scopes ('me') - Python
DESCRIPTION: This snippet demonstrates how to secure a specific path operation (`/users/me/`) using the `Security` dependency and require the "me" scope. FastAPI automatically checks if the authenticated user's token includes the specified scope(s) for this endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_2

LANGUAGE: Python
CODE:
```
@router.get("/users/me/", response_model=User)
def read_users_me(current_user: Annotated[User, Security(get_current_active_user, scopes=["me"])]):
```

----------------------------------------

TITLE: Declaring a Dictionary (Python 3.8+)
DESCRIPTION: This snippet demonstrates how to declare a dictionary with string keys and float values using the `typing` module in Python 3.8+. The type hint `Dict[str, float]` specifies that the keys are strings and the values are floats.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import Dict

prices: Dict[str, float] = {"apple": 1.5, "banana": 0.75}
```

----------------------------------------

TITLE: Modifying Return Data
DESCRIPTION: This code snippet demonstrates how to modify the returned data in a FastAPI application. It shows changing the `item_name` to `item_price` in the returned JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Add Example Data using Pydantic schema_extra
DESCRIPTION: Declare an example payload for a Pydantic model by adding a `schema_extra` dictionary with an `example` key within the model's `Config` class. This example will appear in the generated JSON Schema and API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/schema-extra-example.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    class Config:
        schema_extra = {
            "example": {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2,
            }
        }
```

----------------------------------------

TITLE: Returning HTML Response in FastAPI
DESCRIPTION: Shows how to return an HTML response using HTMLResponse in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return """<html><body><h1>Hello World</h1></body></html>"""
```

----------------------------------------

TITLE: Sample JSON Response from FastAPI Endpoint
DESCRIPTION: This JSON snippet shows the expected response from the root endpoint of the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{"message": "Hello World"}
```

----------------------------------------

TITLE: Python Tuple and Set Type Hints with typing
DESCRIPTION: This snippet demonstrates the usage of `Tuple` and `Set` from the `typing` module. It defines a tuple `items_t` containing an integer, another integer and a string, and a set `items_s` which contains bytes. Type hints for tuples need to define the type of each element.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
"""from typing import Tuple, Set

def process_data(items_t: Tuple[int, int, str], items_s: Set[bytes]):
    print(items_t, items_s)
""
```

----------------------------------------

TITLE: Installing Uvicorn ASGI Server
DESCRIPTION: Command line instructions for installing Uvicorn with standard extras, which serves as the ASGI server required to run FastAPI applications in production.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_3

LANGUAGE: Shell
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Upgrading pip
DESCRIPTION: This snippet shows how to upgrade `pip` to the latest version within the activated virtual environment. This helps prevent unexpected errors during package installation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_8

LANGUAGE: console
CODE:
```
$ python -m pip install --upgrade pip

---> 100%
```

----------------------------------------

TITLE: Importing Field from Pydantic
DESCRIPTION: Demonstrates how to import the Field class from Pydantic for adding validations and metadata to model attributes
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-fields.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from pydantic import Field
```

----------------------------------------

TITLE: Query Parameter List using list Type
DESCRIPTION: This snippet demonstrates using the `list` type directly for a query parameter. Note that FastAPI will not inspect the contents of the list in this case.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import List, Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: list = Query(["foo", "bar"])):
    return {"q": q}
```

----------------------------------------

TITLE: Function Parameters With Default Values - Python
DESCRIPTION: Shows how to define default values for function parameters using the assignment operator (`=`), contrasting it with type hint syntax.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
first_name="john", last_name="doe"
```

----------------------------------------

TITLE: Initializing a List with String Type - Python 3.8+
DESCRIPTION: This snippet initializes a list named `items` where each element is a string. It uses the `List` type from the `typing` module to specify the type of elements within the list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import List

items: List[str] = ["foo", "bar"]
```

----------------------------------------

TITLE: Running FastAPI app with Uvicorn in production
DESCRIPTION: Command to run a FastAPI application using Uvicorn in production mode, without the reload option.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 80

<span style="color: green;">INFO</span>:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Modifying Item Name to Item Price in FastAPI
DESCRIPTION: This snippet shows how to change the returned value from item name to item price. It demonstrates how easily the data returned by a FastAPI endpoint can be modified.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/index.md#_snippet_10

LANGUAGE: Python
CODE:
```
        ... "item_price": item.price ...
```

----------------------------------------

TITLE: Modifying Item Name in FastAPI Response
DESCRIPTION: This code snippet demonstrates how to modify the item name in a FastAPI response. It replaces the original item name with the item price in the returned JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Initializing FastAPI Instance
DESCRIPTION: Creates an instance of the FastAPI class, which serves as the core of the API application. This instance is used to define API endpoints and handle requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()
```

----------------------------------------

TITLE: Activating a Virtual Environment (Windows Bash)
DESCRIPTION: This command activates the virtual environment when using Bash on Windows (e.g., Git Bash) by sourcing the activate script.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_5

LANGUAGE: Shell
CODE:
```
$ source .venv/Scripts/activate
```

----------------------------------------

TITLE: Returning Custom XML Response in FastAPI
DESCRIPTION: Shows how to return non-JSON content, specifically XML, by creating a `Response` object. The XML content is provided as a string, and the `media_type` is set to "application/xml" to inform the client about the content type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/response-directly.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi.responses import Response

# ... app = FastAPI() ...

@app.get("/legacy/")
def get_legacy_data():
    data = """<?xml version=\"1.0\"?>
    <shampoo>
    <Header>
        <fizz>buzz</fizz>
        <foo>bar</foo>
    </Header>
    <Body>
        <shampoo>
            <description>
                <text>some text</text>
            </description>
        </shampoo>
    </Body>
    </shampoo>
    """
    return Response(content=data, media_type="application/xml")
```

----------------------------------------

TITLE: PATH variable example (Linux, macOS)
DESCRIPTION: Example of a PATH environment variable in Linux and macOS, showing a list of directories separated by colons.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/environment-variables.md#_snippet_1

LANGUAGE: plaintext
CODE:
```
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
```

----------------------------------------

TITLE: Query Parameters with Defaults in FastAPI (Python)
DESCRIPTION: This code snippet demonstrates how to define query parameters with default values in a FastAPI endpoint. The `skip` parameter defaults to 0 and the `limit` parameter defaults to 10.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/query-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Initializing OAuth2 Password Request Form
DESCRIPTION: Set up OAuth2PasswordRequestForm to handle username, password, and optional scope authentication parameters using FastAPI's Depends
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
OAuth2PasswordRequestForm
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value of the path parameter is passed to the function as an argument.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining Pydantic Model with Default Value (Python)
DESCRIPTION: Defines a Pydantic model `Item` with fields `name`, `description`, `price`, and `tax`. The `description` field has a default value of `None`, which influences its required status in OpenAPI schemas depending on whether the model is used for input or output.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/separate-openapi-schemas.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None
```

----------------------------------------

TITLE: Successful Response with Required Query Parameter
DESCRIPTION: This JSON snippet shows a successful response from the FastAPI endpoint when the required query parameter 'needy' is provided in the request. The response includes the item_id and the value of the 'needy' parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
    "item_id": "foo-item",
    "needy": "sooooneedy"
}
```

----------------------------------------

TITLE: Install another specific version of a package with pip
DESCRIPTION: Installs a different specific version of a Python package using pip. This demonstrates the problem of global package installation, where installing a new version can break existing projects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_18

LANGUAGE: console
CODE:
```
$ pip install "harry==3"
```

----------------------------------------

TITLE: Running Python Script (Incorrect Environment)
DESCRIPTION: This command attempts to run a Python script (main.py) without activating the correct virtual environment, leading to an import error due to missing dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_23

LANGUAGE: python
CODE:
```
python main.py
```

----------------------------------------

TITLE: Example PATH variable on Windows
DESCRIPTION: Shows an example of the PATH environment variable on Windows systems. It is a semicolon-separated list of directories.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/environment-variables.md#_snippet_5

LANGUAGE: plaintext
CODE:
```
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32
```

----------------------------------------

TITLE: Hinting Dictionary Type (Python 3.6+ via typing) - Python
DESCRIPTION: For Python versions 3.6+, this snippet demonstrates hinting a dictionary using `Dict` from the `typing` module. It specifies the expected type for both the keys (`str`) and the values (`float`) of the dictionary.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import Dict

def process_prices(prices: Dict[str, float]):
    for key, value in prices.items():
        print(f"{key}: ${value}")
```

----------------------------------------

TITLE: Optional Type Hinting
DESCRIPTION: Demonstrates how to use `Optional` from the `typing` module to indicate that a variable can be either a string or `None`. This helps editors detect potential errors where a value might be assumed to always be a string.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Optional

name: Optional[str] = 'Foo'
```

----------------------------------------

TITLE: Creating a Custom GzipRequest Class in FastAPI
DESCRIPTION: This code snippet demonstrates how to create a custom `GzipRequest` class that inherits from FastAPI's `Request` class. It overrides the `body()` method to decompress the request body if the `gzip` encoding is present in the headers. This allows handling Gzip-compressed requests seamlessly within a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Header, Request
from fastapi.responses import JSONResponse
import gzip


class GzipRequest(Request):
    async def body(self) -> bytes:
        if "gzip" in self.headers.getlist("Accept-Encoding", []):
            body = await super().body()
            return gzip.decompress(body)
        return await super().body()
```

----------------------------------------

TITLE: Installing Specific Package Version with pip
DESCRIPTION: This snippet shows how to install a specific version of a Python package using pip. This is used to ensure that a project uses the correct version of its dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_16

LANGUAGE: console
CODE:
```
$ pip install "harry==1"
```

----------------------------------------

TITLE: Create Asynchronous API with FastAPI
DESCRIPTION: Create an asynchronous FastAPI application using `async def` for the route functions. This is suitable for applications that use `async` / `await` for concurrent operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Query Parameter List with Default Values
DESCRIPTION: Declares a query parameter `q` that accepts a list of values, with a default list provided. If no `q` parameters are provided in the URL, the default list will be used.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import List, Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: List[str] = Query(default=["foo", "bar"])):
    return {"q": q}
```

----------------------------------------

TITLE: Running Example FastAPI Applications from Documentation
DESCRIPTION: Command to run FastAPI example applications from the documentation using the CLI development mode. This allows testing documentation examples while simultaneously viewing the documentation on a different port.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
$ fastapi dev tutorial001.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: APIRouter with Shared Dependencies, Tags, and Prefix (Python)
DESCRIPTION: This code demonstrates how to use APIRouter to group route operations with shared configurations. It sets a common prefix, tags, extra responses, and dependencies for all routes defined within the router. This reduces code duplication and ensures consistency across related endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Annotated, List, Optional

from fastapi import APIRouter, Depends, Header, HTTPException

from .dependencies import verify_token, verify_key

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(verify_token), Depends(verify_key)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{
        "name": "Foo",
        "description": "There goes my hero"
    }, {
        "name": "Bar",
        "description": "The bartenders"
    }]


@router.get("/{item_id}", responses={403: {"description": "Operation forbidden"}})
async def read_item(item_id: str):
    if item_id == "plumbus":
        return {"item_id": item_id, "name": "Plumbus"}
    else:
        raise HTTPException(status_code=403, detail="Item not available")
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This snippet illustrates how to install FastAPI with extra dependencies using pip. It shows the process of downloading and extracting package files into the global environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_18

LANGUAGE: console
CODE:
```
// 先別去運行這個指令，這只是個示例 🤓
$ pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Actualizando un Héroe con FastAPI y SQLModel en Python
DESCRIPTION: Implementa un endpoint PATCH para actualizar un héroe existente. Recibe un HeroUpdate, actualiza el Hero en la base de datos, y devuelve un HeroPublic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.patch("/heroes/{hero_id}", response_model=HeroPublic)
def update_hero(hero_id: int, hero: HeroUpdate):
    with Session(engine) as session:
        hero_db = session.get(Hero, hero_id)
        if not hero_db:
            raise HTTPException(status_code=404, detail="Hero not found")
        hero_data = hero.model_dump(exclude_unset=True)
        hero_db.sqlmodel_update(hero_data)
        session.add(hero_db)
        session.commit()
        session.refresh(hero_db)
        return hero_db
```

----------------------------------------

TITLE: Importing Query from FastAPI
DESCRIPTION: This snippet demonstrates how to import the Query class from FastAPI, which is used for additional parameter validations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query
```

----------------------------------------

TITLE: Running Hypercorn with Trio Worker Class
DESCRIPTION: Executes Hypercorn with the `--worker-class trio` option, which configures Hypercorn to use Trio for handling concurrency. This allows the FastAPI application to leverage Trio's features.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/manually.md#_snippet_5

LANGUAGE: console
CODE:
```
$ hypercorn main:app --worker-class trio
```

----------------------------------------

TITLE: Using Set Types in Pydantic Models for FastAPI
DESCRIPTION: This snippet shows how to use a Set type for fields that should contain unique items, such as tags in a Pydantic model used with FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Set

tags: Set[str]
```

----------------------------------------

TITLE: Declaring Simple Types in Python Function Parameters
DESCRIPTION: This function demonstrates the use of various simple type hints for function parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):
    return item_a, item_b, item_c, item_d, item_e
```

----------------------------------------

TITLE: Server Information Output
DESCRIPTION: This snippet shows the server information output when running the FastAPI development server.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_3

LANGUAGE: plaintext
CODE:
```
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Creating a Custom Response Class in FastAPI
DESCRIPTION: Example showing how to create a custom response class by extending Response and implementing the render method. This example creates a custom ORJSON response with indentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import Response
import orjson

app = FastAPI()


class CustomORJSONResponse(Response):
    media_type = "application/json"

    def render(self, content):
        assert orjson is not None, "orjson must be installed"
        return orjson.dumps(content, option=orjson.OPT_INDENT_2)


@app.get("/", response_class=CustomORJSONResponse)
async def main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Generic Type Hints for Lists (Python 3.9+)
DESCRIPTION: Demonstrates declaring a list of strings using modern Python type hint syntax
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
items: list[str] = ["apple", "banana", "cherry"]
```

----------------------------------------

TITLE: Example directory to python after activating (Linux, macOS)
DESCRIPTION: This specifies the exact directory to the python executable in virtual environment on Linux or macOS.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_26

LANGUAGE: plaintext
CODE:
```
/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Importing FastAPI and Declaring Global Dependencies
DESCRIPTION: This code snippet demonstrates how to import the FastAPI class and declare global dependencies that will be combined with the dependencies for each APIRouter. It showcases the basic setup for a main application file in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_11

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/main.py!}
```

----------------------------------------

TITLE: Shortcut for Class Dependencies in FastAPI
DESCRIPTION: This snippet illustrates the shortcut syntax for using class dependencies in FastAPI, which reduces code duplication by omitting the class name in the Depends() call.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
async def read_items(commons: Annotated[CommonQueryParams, Depends()]):
    return {"message": "Hello World", "params": commons}
```

----------------------------------------

TITLE: Importing BackgroundTasks in FastAPI
DESCRIPTION: Shows how to import the BackgroundTasks class from FastAPI framework to enable background task functionality in path operation functions or dependency functions
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/background.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import BackgroundTasks
```

----------------------------------------

TITLE: Defining OpenAPI Webhooks in FastAPI Application
DESCRIPTION: This snippet demonstrates how to define webhooks in a FastAPI application using the webhooks property. It shows creating a POST webhook for 'new-subscription' events, complete with request body model definition using Pydantic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/openapi-webhooks.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None


app = FastAPI()


@app.get("/items/")
def read_items():
    return [{"name": "Plumbus"}, {"name": "Portal Gun"}]


@app.post("/items/")
def create_item(item: Item):
    return item


class WebhookEvent(BaseModel):
    event_type: str
    item_id: int
    webhook_url: str


# Define a webhook that your app will call to notify external systems
# The name "new-subscription" is just an identifier for the webhook
@app.webhooks.post("new-subscription")
def subscription_webhook(body: WebhookEvent):
    """
    Example of a webhook that would be called by this app when there's a new subscription.
    
    The external URL would be defined by users of your API, not here in your code.
    
    This function isn't meant to be called by your API users directly,
    it's meant to document the shape of the webhook request that your system would make.
    """
    # This is just for documentation, it won't be called in normal operation
    # Your actual webhook sending code would be elsewhere in your application
    return JSONResponse(content={"message": "Webhook received"})
```

----------------------------------------

TITLE: Synchronous HTTP Request Equivalent
DESCRIPTION: Shows the equivalent synchronous HTTP request method compared to the async version
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
response = client.get('/')
```

----------------------------------------

TITLE: Python Dict Unpacking Example
DESCRIPTION: Illustrates how to unpack dictionaries in Python to merge them.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/additional-responses.md#_snippet_6

LANGUAGE: Python
CODE:
```
old_dict = {
    "old key": "old value",
    "second old key": "second old value",
}
new_dict = {**old_dict, "new key": "new value"}
```

LANGUAGE: Python
CODE:
```
{
    "old key": "old value",
    "second old key": "second old value",
    "new key": "new value",
}
```

----------------------------------------

TITLE: Declarando Tipo de Retorno em Função de Rota FastAPI
DESCRIPTION: Exemplo de como declarar o tipo de retorno em uma função de rota FastAPI usando anotações de tipo Python.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@app.get("/items/{item_id}", response_model=Item)
def read_item(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code demonstrates how to create an asynchronous FastAPI application using `async def` for the endpoint functions. This is useful when your code involves asynchronous operations using `async` and `await`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Running FastAPI with Multiple Workers
DESCRIPTION: This command starts a FastAPI application with a specified number of worker processes using the `fastapi` command-line tool. The `--workers` option determines the number of worker processes to spawn.  It assumes a main.py file exists with a FastAPI app instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/server-workers.md#_snippet_0

LANGUAGE: Shell
CODE:
```
fastapi run --workers 4 main.py
```

----------------------------------------

TITLE: Defining Sub FastAPI Application (Python)
DESCRIPTION: This snippet creates a separate, independent FastAPI application instance (`subapi`) that is intended to be mounted. It defines its own root path operation ('/') which will be relative to the path where it is mounted.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/sub-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

subapi = FastAPI()

@subapi.get("/")
def read_sub():
    return {"message": "Hello from sub API"}
```

----------------------------------------

TITLE: Original Item Name in FastAPI Response
DESCRIPTION: This code snippet shows the original item name in a FastAPI response. It is part of a larger code block that is being modified.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
        ... "item_name": item.name ...
```

----------------------------------------

TITLE: Combining response_class with Direct Response Return in FastAPI
DESCRIPTION: This example shows how to both document the response type in OpenAPI using response_class while still returning a direct Response object for more control.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=content)
    
    # Could also do:
    # return content
```

----------------------------------------

TITLE: Modifying a return statement in FastAPI
DESCRIPTION: This snippet shows the suggested modification to the return statement, replacing the name with the price.  This change highlights the integration with editor support and type awareness within FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/index.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
        ... "item_price": item.price ...
```

----------------------------------------

TITLE: Python Dict Type Hint with typing
DESCRIPTION: This code shows how to use the `Dict` type from the `typing` module to specify the types of both keys and values in a dictionary. In this case, the dictionary `prices` has string keys (`str`) and float values (`float`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
"""from typing import Dict

def process_prices(prices: Dict[str, float]):
    for item_name, price in prices.items():
        print(f"{item_name}: {price}")
""
```

----------------------------------------

TITLE: Simple HTTP Basic Authentication in FastAPI
DESCRIPTION: Basic implementation of HTTP Basic Auth in FastAPI, using HTTPBasic and HTTPBasicCredentials to secure a path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

security = HTTPBasic()


@app.get("/users/me")
def read_current_user(credentials: HTTPBasicCredentials = Depends(security)):
    return {"username": credentials.username, "password": credentials.password}
```

----------------------------------------

TITLE: OpenAPI Specification Example from FastAPI - JSON
DESCRIPTION: This code snippet provides an example of the OpenAPI specification generated by FastAPI, which describes API endpoints and configurations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "openapi": "3.0.2",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/items/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {


...

```

----------------------------------------

TITLE: Importing File and UploadFile in FastAPI
DESCRIPTION: This snippet demonstrates how to import the `File` and `UploadFile` classes from the `fastapi` module. These classes are essential for handling file uploads in FastAPI applications. `File` is typically used for smaller files handled in memory, while `UploadFile` is suitable for larger files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, File, UploadFile"
```

----------------------------------------

TITLE: Installing Packages with pip (Console)
DESCRIPTION: Runs the `pip install` command to download and install the specified package (`fastapi[standard]`) and its dependencies into the currently active virtual environment. The output shows a typical progress indicator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_10

LANGUAGE: console
CODE:
```
pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Verifying Active Python Virtual Environment in Windows PowerShell
DESCRIPTION: Demonstrates how to use the 'Get-Command python' cmdlet in Windows PowerShell to verify the active Python interpreter. The output should show the path to the Python executable inside your project's virtual environment directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_21

LANGUAGE: console
CODE:
```
$ Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```

----------------------------------------

TITLE: Invalid Return Type Annotation in FastAPI
DESCRIPTION: This snippet illustrates an invalid return type annotation in FastAPI. It uses a Union of Response and dict, which is not a valid Pydantic type or a single Response class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI
from fastapi.responses import Response

app = FastAPI()

@app.get("/items/{item_id}")
def read_item(item_id: str) -> Union[dict, Response]:
    ...
```

----------------------------------------

TITLE: Accessing Request Body in RequestValidationError Handler
DESCRIPTION: This code snippet demonstrates how to access the request body within a RequestValidationError exception handler in FastAPI. It retrieves the body from the exception and includes it in the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/handling-errors.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    title: str
    size: int


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(
    request: Request, exc: RequestValidationError
):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content=jsonable_encoder({"detail": exc.errors(), "body": exc.body}),
    )


@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Returning a Dictionary with Item Name and ID
DESCRIPTION: This snippet shows how to return a dictionary containing the item name and ID. The example is intended to be modified to return the item price instead of the item name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Agregando Media Type Adicional para Response Principal en FastAPI
DESCRIPTION: Este ejemplo demuestra cómo agregar un media type adicional (image/png) para el response principal de una operación de path en FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/additional-responses.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={
        200: {
            "content": {"image/png": {}},
            "description": "Return the JSON item or an image.",
        }
    },
)
```

----------------------------------------

TITLE: Defining OAuth2 Scheme and User Model in Python
DESCRIPTION: This snippet shows how to define an OAuth2 scheme and create a Pydantic model for representing users in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer
from pydantic import BaseModel

class User(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Running Uvicorn with Multiple Workers
DESCRIPTION: This command shows how to start a Uvicorn server with multiple worker processes. The `--workers` option specifies the number of worker processes to launch, allowing the application to handle more requests concurrently and utilize multi-core CPUs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/deployment/server-workers.md#_snippet_4

LANGUAGE: console
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
```

----------------------------------------

TITLE: Function with Type Hints
DESCRIPTION: This Python function uses type hints to specify that the `first_name` and `last_name` parameters should be strings. This enables better code completion and error checking in editors.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    return first_name.title() + " " + last_name.title()
```

----------------------------------------

TITLE: Using List Type Hint - Python
DESCRIPTION: Shows how to use `typing.List` to declare a variable as a list containing elements of a specific type, such as a list of strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import List
```

LANGUAGE: Python
CODE:
```
def process_items(items: List[str]):
    for item in items:
        print(item.title())
```

----------------------------------------

TITLE: Running Documentation Server for Translations
DESCRIPTION: Command to run the documentation server for a specific language translation. This example shows how to serve Spanish documentation with live reloading for translation work.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_7

LANGUAGE: console
CODE:
```
$ python ./scripts/docs.py live es

<span style="color: green;">[INFO]</span> Serving on http://127.0.0.1:8008
<span style="color: green;">[INFO]</span> Start watching changes
<span style="color: green;">[INFO]</span> Start detecting changes
```

----------------------------------------

TITLE: Initializing FastAPI with License Identifier - Python
DESCRIPTION: This code snippet shows how to set the license information using the identifier field instead of the url in the FastAPI application metadata. This is available since OpenAPI 3.1.0 and FastAPI 0.99.0.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
license_info={
        "name": "Apache 2.0",
        "identifier": "MIT",
    },

```

----------------------------------------

TITLE: Python Type Hints Example with Pydantic Model
DESCRIPTION: Demonstrates basic Python type hints usage and Pydantic model definition with typed fields including date, string and integer types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/features.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare uma variável como str
# e obtenha suporte do editor dentro da função
def main(user_id: str):
    return user_id


# Um modelo do Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Numeric Validation with Greater Than or Equal
DESCRIPTION: Example of using ge (greater than or equal) validation with path parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)]\n):\n    return {\"item_id\": item_id}
```

----------------------------------------

TITLE: Redefining Path Operations
DESCRIPTION: This example shows that you cannot redefine a path operation in FastAPI. The first path operation defined will always be used, as it matches the path first.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}


@app.get("/items/{item_id}")
async def read_user(item_id: str):
    return {"item_id": f"Second endpoint: {item_id}"}
```

----------------------------------------

TITLE: Main FastAPI Application Initialization
DESCRIPTION: Initializes the main FastAPI application with global dependencies and imports submodule routers
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends

app = FastAPI()

from .routers import items, users
```

----------------------------------------

TITLE: Initializing OAuth2 Password Request Form in FastAPI
DESCRIPTION: Configure OAuth2 password request form to handle username, password, and optional scope during authentication process
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
OAuth2PasswordRequestForm
```

----------------------------------------

TITLE: Defining Function With String Type Hints - Python
DESCRIPTION: Demonstrates a Python function definition using string type annotations for parameters, illustrating how adding type hints improves editor autocompletion and code understanding.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_3

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    return first_name.title() + " " + last_name.title()
```

----------------------------------------

TITLE: Returning Custom Status Codes with JSONResponse in FastAPI (Python)
DESCRIPTION: This code snippet demonstrates how to use JSONResponse to return custom status codes in a FastAPI application. It shows an example of returning 200 for updates and 201 for new item creation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/additional-status-codes.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.put("/items/{item_id}")
def update_item(item_id: str, name: str, model: str):
    if item_id in items:
        return {"id": item_id, "name": name, "model": model}
    else:
        return JSONResponse(status_code=201, content={"id": item_id, "name": name, "model": model})
```

----------------------------------------

TITLE: OpenAPI Components Schema
DESCRIPTION: This JSON snippet shows the components schema section of the OpenAPI specification, defining the schemas for `Message`, `Item`, `ValidationError`, and `HTTPValidationError`. These schemas are referenced in the responses section of the OpenAPI specification.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/additional-responses.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "components": {
        "schemas": {
            "Message": {
                "title": "Message",
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "title": "Message",
                        "type": "string"
                    }
                }
            },
            "Item": {
                "title": "Item",
                "required": [
                    "id",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "string"
                    },
                    "value": {
                        "title": "Value",
                        "type": "string"
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Password Hashing and Verification with Passlib in FastAPI
DESCRIPTION: This snippet demonstrates how to hash a password using Passlib and verify it against a stored hash. It includes functions for hashing passwords, verifying passwords, and authenticating users.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: Python
CODE:
```
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    return pwd_context.hash(password)


def verify_password(password: str, hashed_password: str) -> bool:
    return pwd_context.verify(password, hashed_password)


fake_users_db = {
    "johndoe": {
        "username": "johndoe",
        "full_name": "John Doe",
        "email": "johndoe@example.com",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
        "disabled": False,
    },
    "bob": {
        "username": "bob",
        "full_name": "Bob Smith",
        "email": "bob@example.com",
        "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
        "disabled": False,
    },
}


def get_user(username: str):
    if username in fake_users_db:
        return fake_users_db[username]


def authenticate_user(username: str, password: str):
    user = get_user(username)
    if not user:
        return False
    if not verify_password(password, user["hashed_password"]):
        return False
    return user
```

----------------------------------------

TITLE: Defining a Path Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a path parameter in a FastAPI application. The `item_id` parameter is extracted from the URL and passed to the function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Modified PATH variable after activating virtual environment (Windows)
DESCRIPTION: This shows how the PATH variable is modified after activating a virtual environment on Windows. The virtual environment's Scripts directory is prepended to the PATH.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_26

LANGUAGE: plaintext
CODE:
```
C:\Users\user\code\awesome-project\.venv\Scripts;C:\Windows\System32
```

----------------------------------------

TITLE: Activating a Virtual Environment (Windows PowerShell)
DESCRIPTION: This snippet shows how to activate a virtual environment in Windows PowerShell. It executes the `Activate.ps1` script located in the `.venv\Scripts` directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_4

LANGUAGE: console
CODE:
```
$ .venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Pydantic Model Definition
DESCRIPTION: Defines a Pydantic model named 'User' with type annotations for its attributes (id, name, joined). Pydantic uses these annotations for data validation and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
# Un modèle Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Multiple Path and Query Parameters in FastAPI
DESCRIPTION: Shows how to define a function with both path and query parameters. FastAPI automatically distinguishes between them based on their declaration in the function parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def read_user_item(item_id: str, needy: str, skip: int = 0, limit: int | None = None):
```

----------------------------------------

TITLE: Modifying a return statement in FastAPI
DESCRIPTION: This snippet is part of the return statement modification example, showing how to change the return value.  This demonstrates how simple changes can affect the API's response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/index.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
        ... "item_name": item.name ...
```

----------------------------------------

TITLE: Activating Virtual Environment on Linux/macOS
DESCRIPTION: Command to activate the Python virtual environment on Linux or macOS systems.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Query Parameter with Metadata
DESCRIPTION: Adding title and description metadata to a query parameter for OpenAPI documentation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
q: Union[str, None] = Query(
    default=None, 
    title="Query Parameter", 
    description="A sample query parameter with metadata"
)
```

----------------------------------------

TITLE: FastAPI App with Tags
DESCRIPTION: This FastAPI application demonstrates the use of tags to separate different groups of path operations, such as items and users. It defines two endpoints, one for creating items and another for creating users, each associated with a specific tag.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/generate-clients.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.post("/items/", tags=["items"])
async def create_item(item: Item):
    return item


@app.post("/users/", tags=["users"])
async def create_user(name: str):
    return {"name": name}

```

----------------------------------------

TITLE: Generic Types Example (Python 3.8+)
DESCRIPTION: Shows type hints for list using typing.List in Python 3.8+.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from typing import List

def process_items(items: List[str]):
    for item in items:
        print(item)
```

----------------------------------------

TITLE: Path Parameter Ordering with Star Argument and Annotated (Python 3.9+)
DESCRIPTION: This snippet shows how to use `Annotated` with `Path` and the star argument to define path and query parameters.  Since `Annotated` avoids relying on default values for function parameters, there is no need to use `*` to force keyword arguments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
"from typing import Annotated

from fastapi import FastAPI, Path

app = FastAPI()


@app.get(\"/items/{item_id}\")
async def read_items(*, item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str):
    return {\"item_id\": item_id, \"q\": q}"
```

----------------------------------------

TITLE: Executing Python Script and Reading Env Var in Bash
DESCRIPTION: Illustrates how the Python script reads the `MY_NAME` environment variable when executed from Bash. It shows the output when the variable is not set (using the default) and when it is set using `export`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/environment-variables.md#_snippet_3

LANGUAGE: bash
CODE:
```
// 这里我们还没有设置环境变量
$ python main.py

// 因为我们没有设置环境变量，所以我们得到的是默认值

Hello World from Python

// 但是如果我们事先创建过一个环境变量
$ export MY_NAME="Wade Wilson"

// 然后再次调用程序
$ python main.py

// 现在就可以读取到环境变量了

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Reading Environment Variable in Python
DESCRIPTION: This Python script reads the environment variable MY_NAME using os.getenv(). If the variable is not set, it defaults to "World". The script then prints a greeting using the retrieved name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/environment-variables.md#_snippet_2

LANGUAGE: Python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Create Tables on FastAPI Startup
DESCRIPTION: Register the `create_db_and_tables` function with FastAPI's `startup` event. This ensures that the database tables are created automatically when the FastAPI application starts.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.on_event("startup")
def on_startup():
    create_db_and_tables()
```

----------------------------------------

TITLE: Enum Path Parameter Definition
DESCRIPTION: Uses Python Enum to define pre-defined values for path parameters with automatic documentation and validation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from enum import Enum

class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"

@app.get("/models/{model_name}")
def get_model(model_name: ModelName):
    return {"model_name": model_name}
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet shows how to import the FastAPI class from the fastapi package. The FastAPI class provides all the functionality needed to create an API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
FastAPI
```

----------------------------------------

TITLE: Handling Startup Event with FastAPI (Deprecated)
DESCRIPTION: Defines a function that runs when the FastAPI application starts up using the deprecated `@app.on_event("startup")` decorator. This function can be used to perform initialization tasks, such as populating a database or setting up resources. The application will not start receiving requests until all startup event handlers complete.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

fake_db = {}

@app.on_event("startup")
def startup_event():
    fake_db["foo"] = "bar"
```

----------------------------------------

TITLE: Modifying a Return Statement in FastAPI (Continued)
DESCRIPTION: This code snippet demonstrates how to modify a return statement in a FastAPI application. It shows the original return statement and the modified version, highlighting the change from `item.name` to `item.price`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
... "item_name": item.name ...
```

----------------------------------------

TITLE: Verifying Python Path in Virtual Environment (Windows PowerShell)
DESCRIPTION: This command uses `Get-Command python` to verify that the Python interpreter being used is the one from the activated virtual environment in Windows PowerShell.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_28

LANGUAGE: powershell
CODE:
```
Get-Command python
```

LANGUAGE: powershell
CODE:
```
C:\Users\user\code\awesome-project\.venv\Scripts\python
```

----------------------------------------

TITLE: Defining a list with type annotation
DESCRIPTION: This snippet demonstrates how to define a list with a specific type using standard Python list. It specifies that the 'tags' field should contain a list of strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"tags: list[str] = []"
```

----------------------------------------

TITLE: Making a GET request using Requests library in Python
DESCRIPTION: This snippet demonstrates how to make a simple GET request to a URL using the Python Requests library. It shows the basic syntax for fetching data from an API endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/alternatives.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"response = requests.get("http://example.com/some/url")"
```

----------------------------------------

TITLE: Synchronous Function Definition in Python
DESCRIPTION: This code snippet illustrates a standard, synchronous function definition in Python using `def`.  Unlike asynchronous functions, synchronous functions execute sequentially and block the execution of other tasks until they complete. This is suitable for CPU-bound tasks that do not involve waiting for external resources.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
```Python hl_lines="2"
# Isso não é assíncrono
def get_sequential_burgers(number: int):
    # Faz alguma coisa sequencial para criar os hambúrgueres
    return burgers
```
```

----------------------------------------

TITLE: Defining a Function with String Parameters in Python
DESCRIPTION: This function takes two string parameters and returns a concatenated full name with capitalized first letters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
def get_full_name(first_name, last_name):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Setting Documentation URLs - Python
DESCRIPTION: This code snippet demonstrates how to configure the URLs for the Swagger UI and ReDoc documentation interfaces in FastAPI. It shows how to set the `docs_url` and `redoc_url` parameters to customize where these interfaces are served or to disable them completely by setting them to `None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
app = FastAPI(docs_url="/documentation", redoc_url=None)

```

----------------------------------------

TITLE: Accessing Request Object in FastAPI Path Operation Function
DESCRIPTION: This snippet demonstrates how to declare a path operation function that directly accesses the Request object. It allows retrieving the client's host IP address from the request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/using-request-directly.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request

app = FastAPI()

@app.get("/items/{item_id}")
def read_root(item_id: str, request: Request):
    client_host = request.client.host
    return {"client_host": client_host, "item_id": item_id}
```

----------------------------------------

TITLE: Example JSON response from FastAPI
DESCRIPTION: This JSON snippet represents a typical API response from a FastAPI endpoint.  It includes the `item_id` and the query parameter `q` as keys.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_5

LANGUAGE: JSON
CODE:
```
{"item_id": 5, "q": "somequery"}
```

----------------------------------------

TITLE: Returning Custom Status Codes with JSONResponse Python
DESCRIPTION: This snippet demonstrates how to return a custom HTTP status code using `fastapi.responses.JSONResponse`. It defines a POST endpoint that checks if an item exists in a simulated database. If the item exists, it returns a 200 OK status; otherwise, it creates the item and returns a 201 Created status. This method requires returning the `JSONResponse` object directly from the path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/additional-status-codes.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None

app = FastAPI()

# Simulate a database
fake_items_db = {}

@app.post("/items/")
async def create_item(item: Item):
    if item.name in fake_items_db:
        # Item already exists, return 200
        return JSONResponse(
            content={"message": "Item already exists", "item": item.model_dump()},
            status_code=200
        )
    else:
        # Item does not exist, create it and return 201
        fake_items_db[item.name] = item
        return JSONResponse(
            content={"message": "Item created", "item": item.model_dump()},
            status_code=201
        )
```

----------------------------------------

TITLE: Setting Response Headers by Returning JSONResponse Directly in FastAPI
DESCRIPTION: This example shows how to add headers when returning a `Response` object directly, such as `JSONResponse`. You create the response object with the desired content and pass a dictionary of headers using the `headers` parameter during initialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/response-headers.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/items/")
def read_items():
    content = {"message": "Hello World"}
    headers = {"X-Another-Custom-Header": "Baz"}
    return JSONResponse(content=content, headers=headers)
```

----------------------------------------

TITLE: Dockerfile for Single-File FastAPI App
DESCRIPTION: This Dockerfile configuration is tailored for FastAPI applications contained within a single file (e.g., `main.py`). It copies the main application file directly into the `/code` directory and adjusts the Uvicorn command accordingly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_10

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (1)
COPY ./main.py /code/

# (2)
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Getting Enum Value in FastAPI
DESCRIPTION: This code snippet shows how to get the string value of an Enum member using `.value`. This allows you to access the actual string value associated with the Enum member.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_7

LANGUAGE: python
CODE:
```
    return {"model_name": model_name, "message": "Have some residuals", "model_value": model_name.value}
```

----------------------------------------

TITLE: Returning Custom XML Response in FastAPI
DESCRIPTION: Shows how to return a custom response with a specific media type, such as XML. By returning a `Response` object directly, you can provide raw content (like an XML string) and set the `media_type` header, bypassing FastAPI's automatic data conversion and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/response-directly.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/legacy/")
async def get_legacy_data():
    data = """<?xml version=\"1.0\"?>
<shampoo>
<Header>
    Aplicacao</Header>
<Body>
    <cola>Cola Cola</cola>
    <fanta>Fanta Fanta</fanta>
    <sprite>Sprite Sprite</sprite>
</Body>
</shampoo>
"""
    return Response(content=data, media_type="application/xml")
```

----------------------------------------

TITLE: Advanced Docstring Description for Path Operations in FastAPI
DESCRIPTION: This code snippet illustrates how to limit the output lines of a docstring in a path operation for OpenAPI. By adding a page break character, signal FastAPI to truncate the OpenAPI documentation at that point while allowing other documentation tools to use the rest of the docstring.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
async def read_items():
    """
    This is the docstring for the path operation.
    It will be truncated here.
    More details follow.
    """
    return ['item1', 'item2']
```

----------------------------------------

TITLE: Modified PATH variable after activating virtual environment (Linux/macOS)
DESCRIPTION: This shows how the PATH variable is modified after activating a virtual environment on Linux/macOS. The virtual environment's bin directory is prepended to the PATH.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_25

LANGUAGE: plaintext
CODE:
```
/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin
```

----------------------------------------

TITLE: Instantiating Pydantic Model with Data
DESCRIPTION: This code demonstrates how to instantiate a Pydantic model, `User`, with data. It shows two methods: direct instantiation with keyword arguments and instantiation using dictionary unpacking (`**second_user_data`). The latter is useful when data is already in a dictionary format.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/features.md#_snippet_2

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Declaring Metadata for Path Parameters with Annotated
DESCRIPTION: Shows how to declare title metadata for a path parameter using Path with Annotated in a FastAPI endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path
from typing import Annotated


app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(
    item_id: Annotated[int, Path(title="The ID of the item to get")]
):
    return {"item_id": item_id}

```

----------------------------------------

TITLE: Defining a List Field
DESCRIPTION: Demonstrates defining a list field in a Pydantic model without specifying the type of elements within the list. The `tags` attribute will be converted to a list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-nested-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list = []
```

----------------------------------------

TITLE: Setting Cookies with Response Parameter in Path Function
DESCRIPTION: Demonstrates how to set cookies by defining a Response parameter in a path function, allowing temporary cookie configuration before final response generation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/response-cookies.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
# Snippet referencing Response parameter for cookie management
```

----------------------------------------

TITLE: Disabling Automatic Server from root_path in OpenAPI
DESCRIPTION: A FastAPI application that disables the automatic inclusion of the root_path as a server in the OpenAPI schema by setting root_path_in_servers to False, while still defining custom servers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request

app = FastAPI(
    servers=[
        {"url": "https://stag.example.com", "description": "Staging environment"},
        {"url": "https://prod.example.com", "description": "Production environment"},
    ],
    root_path_in_servers=False,
)


@app.get("/app")
async def read_main(request: Request):
    return {"message": "Hello World", "root_path": request.scope.get("root_path")}

```

----------------------------------------

TITLE: Running FastAPI with `fastapi run`
DESCRIPTION: This command is used to start a FastAPI application. It automatically detects the application and starts a Uvicorn server to serve it. The command assumes the main application file is named `main.py`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/manually.md#_snippet_0

LANGUAGE: console
CODE:
```
$ <font color="#4E9A06">fastapi</font> run <u style="text-decoration-style:single">main.py</u>
<font color="#3465A4">INFO    </font> Usando path <font color="#3465A4">main.py</font>
<font color="#3465A4">INFO    </font> Path absoluto resuelto <font color="#75507B">/home/user/code/awesomeapp/</font><font color="#AD7FA8">main.py</font>
<font color="#3465A4">INFO    </font> Buscando una estructura de archivos de paquete desde directorios con archivos <font color="#3465A4">__init__.py</font>
<font color="#3465A4">INFO    </font> Importando desde <font color="#75507B">/home/user/code/</font><font color="#AD7FA8">awesomeapp</font>

 ╭─ <font color="#8AE234"><b>Archivo de módulo de Python</b></font> ─╮
 │                      │
 │  🐍 main.py          │
 │                      │
 ╰──────────────────────╯

<font color="#3465A4">INFO    </font> Importando módulo <font color="#4E9A06">main</font>
<font color="#3465A4">INFO    </font> Encontrada aplicación FastAPI importable

 ╭─ <font color="#8AE234"><b>Aplicación FastAPI importable</b></font> ─╮
 │                          │
 │  <span style="background-color:#272822"><font color="#FF4689">from</font></span><span style="background-color:#272822"><font color="#F8F8F2"> main </font></span><span style="background-color:#272822"><font color="#FF4689">import</font></span><span style="background-color:#272822"><font color="#F8F8F2"> app</font></span><span style="background-color:#272822">  </span>  │
 │                          │
 ╰──────────────────────────╯

<font color="#3465A4">INFO    </font> Usando la cadena de import <font color="#8AE234"><b>main:app</b></font>

 <font color="#4E9A06">╭─────────── CLI de FastAPI - Modo Producción ───────────╮</font>
 <font color="#4E9A06">│                                                     │</font>
 <font color="#4E9A06">│  Sirviendo en: http://0.0.0.0:8000                    │</font>
 <font color="#4E9A06">│                                                     │</font>
 <font color="#4E9A06">│  Docs de API: http://0.0.0.0:8000/docs               │</font>
 <font color="#4E9A06">│                                                     │</font>
 <font color="#4E9A06">│  Corriendo en modo producción, para desarrollo usa:  │</font>
 <font color="#4E9A06">│                                                     │</font>
 <font color="#4E9A06">│  </font><font color="#8AE234"><b>fastapi dev</b></font><font color="#4E9A06">                                        │</font>
 <font color="#4E9A06">│                                                     │</font>
 <font color="#4E9A06">╰─────────────────────────────────────────────────────╯</font>

<font color="#4E9A06">INFO</font>:     Iniciado el proceso del servidor [<font color="#06989A">2306215</font>]
<font color="#4E9A06">INFO</font>:     Esperando el inicio de la aplicación.
<font color="#4E9A06">INFO</font>:     Inicio de la aplicación completado.
<font color="#4E9A06">INFO</font>:     Uvicorn corriendo en <b>http://0.0.0.0:8000</b> (Presiona CTRL+C para salir)
```

----------------------------------------

TITLE: Defining Dataclass for FastAPI Response Model
DESCRIPTION: Example of using a Python dataclass to define a response model in FastAPI. The dataclass is used as the response_model parameter in the route decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/dataclasses.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from dataclasses import dataclass
from fastapi import FastAPI

app = FastAPI()

@dataclass
class Item:
    name: str
    price: float
    description: str | None = None
    tax: float | None = None

@app.get("/items/next", response_model=Item)
def read_next_item():
    return {
        "name": "Island In The Moon",
        "price": 12.99,
        "description": "A place to be be playin' and havin' fun",
    }
```

----------------------------------------

TITLE: Using jsonable_encoder with JSONResponse in FastAPI
DESCRIPTION: Demonstrates how to use `jsonable_encoder` to convert data, such as a dictionary or Pydantic model, into a JSON-compatible format before returning it within a `JSONResponse` object. This is necessary when manually creating a `JSONResponse` with complex data types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/response-directly.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float
    tags: list[str] = []

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    item = {"item_id": item_id, "name": "Foo", "price": 50.2}
    # Use jsonable_encoder to convert the dict (or Pydantic model)
    # before putting it into the JSONResponse
    json_compatible_item_data = jsonable_encoder(item)
    return JSONResponse(content=json_compatible_item_data)

# This is the default behavior, equivalent to the above
@app.get("/items-default/{item_id}")
async def read_item_default(item_id: str):
    item = {"item_id": item_id, "name": "Foo", "price": 50.2}
    return item # FastAPI handles the conversion and JSONResponse
```

----------------------------------------

TITLE: Running FastAPI in Development Mode with CLI
DESCRIPTION: This command starts a FastAPI application in development mode using the `fastapi dev` command. It automatically detects the application instance and runs it with auto-reload enabled, typically on `http://127.0.0.1:8000`. This mode is suitable for development due to features like automatic server restarts on code changes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/fastapi-cli.md#_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi dev main.py
INFO     Using path main.py
INFO     Resolved absolute path /home/user/code/awesomeapp/main.py
INFO     Searching for package file structure from directories with __init__.py files
INFO     Importing from /home/user/code/awesomeapp

 ╭─ Python module file ─╮
 │                      │
 │  🐍 main.py          │
 │                      │
 ╰──────────────────────╯

INFO     Importing module main
INFO     Found importable FastAPI app

 ╭─ Importable FastAPI app ─╮
 │                          │
 │  from main import app    │
 │                          │
 ╰──────────────────────────╯

INFO     Using import string main:app

 ╭────────── FastAPI CLI - Development mode ───────────╮
 │                                                     │
 │  Serving at: http://127.0.0.1:8000                  │
 │                                                     │
 │  API docs: http://127.0.0.1:8000/docs               │
 │                                                     │
 │  Running in development mode, for production use:   │
 │                                                     │
 │  fastapi run                                        │
 │                                                     │
 ╰─────────────────────────────────────────────────────╯

INFO:     Will watch for changes in these directories: ['/home/user/code/awesomeapp']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2265862] using WatchFiles
INFO:     Started server process [2265873]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Example JavaScript Code from ReDoc
DESCRIPTION: This is an example of the JavaScript code that might be served by ReDoc. It shows the beginning of the bundled JavaScript file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-docs-ui-assets.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
/*! For license information please see redoc.standalone.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("null")):... 
```

----------------------------------------

TITLE: Declaring Metadata for Path Parameters in FastAPI
DESCRIPTION: This snippet showcases how to declare metadata, specifically the `title`, for a path parameter named `item_id` using `Path`.  The `...` indicates that the path parameter is required.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"from fastapi import FastAPI, Path\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_items(\n    item_id: int = Path(title="The ID of the item to get"),\n):\n    return {"item_id": item_id}"
```

----------------------------------------

TITLE: Cookie Parameter Model with FastAPI
DESCRIPTION: This code snippet shows how to define a Pydantic model for cookie parameters and use it in a FastAPI path operation. The FastAPI framework automatically extracts the cookie values based on the field names in the Pydantic model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"from typing import Union

from fastapi import Cookie, FastAPI
from pydantic import BaseModel


class Ads(BaseModel):
    dark_mode: Union[bool, None] = None
    items_per_page: int = 50


app = FastAPI()


@app.get("/")
async def read_ads(ads: Ads = Cookie()):
    return ads"
```

----------------------------------------

TITLE: Installing Packages from requirements.txt with uv
DESCRIPTION: This command installs Python packages from a requirements.txt file using uv.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_13

LANGUAGE: Shell
CODE:
```
$ uv pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: FastAPI App with Root Path
DESCRIPTION: Creates a FastAPI application instance and defines a simple endpoint that returns a greeting message and the current `root_path`. The `root_path` is retrieved from the request's scope and included in the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/app")
async def read_main(request: Request):
    return {"message": "Hello World", "root_path": request.scope.get("root_path")}

```

----------------------------------------

TITLE: Path Parameter in Endpoint
DESCRIPTION: This code shows how to define a path parameter in an endpoint using FastAPI's `APIRouter`. The endpoint retrieves an item by its ID.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_6

LANGUAGE: Python
CODE:
```
@router.get("/{item_id}")
async def read_item(item_id: str):
    ...
```

----------------------------------------

TITLE: Disabling Syntax Highlighting in Swagger UI with FastAPI
DESCRIPTION: Code snippet showing how to disable syntax highlighting in Swagger UI by setting syntaxHighlight to False in the swagger_ui_parameters dictionary when creating a FastAPI app instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
app = FastAPI(
    swagger_ui_parameters={"syntaxHighlight": False}
)
```

----------------------------------------

TITLE: Usando response_model em Decorador de Rota FastAPI
DESCRIPTION: Demonstração do uso do parâmetro response_model no decorador de rota FastAPI para especificar o modelo de resposta.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.post("/users/", response_model=UserOut)
def create_user(user: UserIn) -> Any:
    return user

@app.get("/items/", response_model=List[Item])
def read_items():
    return [
        {"name": "Portal Gun", "price": 42.0},
        {"name": "Plumbus", "price": 32.0}
    ]
```

----------------------------------------

TITLE: Hinting Dictionary Type (Python 3.9+) - Python
DESCRIPTION: For Python versions 3.9+, this snippet shows the more concise syntax for hinting a dictionary using the built-in `dict` type, specifying the key and value types directly in square brackets.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
def process_prices(prices: dict[str, float]):
    for key, value in prices.items():
        print(f"{key}: ${value}")
```

----------------------------------------

TITLE: Handling Multiple Values for Query Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to handle multiple values for a single query parameter using List[str].
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
q: List[str] = Query(default=None)
```

----------------------------------------

TITLE: Using Query for Parameter Validation in FastAPI
DESCRIPTION: This code shows how to use the Query class to add a max_length validation to the 'q' parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
q: Union[str, None] = Query(default=None, max_length=50)
```

----------------------------------------

TITLE: Importing Security Function in FastAPI
DESCRIPTION: Shows how to import the Security function from FastAPI. The Security() function is used similarly to Depends() but with the additional capability of declaring OAuth2 scopes for authorization purposes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/dependencies.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import Security
```

----------------------------------------

TITLE: Adding .gitignore Entry for Virtual Environment
DESCRIPTION: This snippet demonstrates how to add an entry to the `.gitignore` file to exclude the virtual environment directory (`.venv`) from Git's tracking. This prevents virtual environment files from being committed to the repository.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_9

LANGUAGE: console
CODE:
```
$ echo "*" > .venv/.gitignore
```

----------------------------------------

TITLE: Declaring a Path Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a path parameter named `item_id` in a FastAPI route.  The path parameter is defined within the route's decorator, and its value is passed as an argument to the function. The function then returns a JSON response containing the value of the `item_id`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Adding Type Hints to Function Parameters in Python
DESCRIPTION: This example shows how to add type hints to function parameters, specifying that both parameters are strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Defining the __init__ Method (Python)
DESCRIPTION: The `__init__` method is used to initialize the callable object, allowing you to pass configuration or parameters when creating the instance. FastAPI does not automatically call `__init__` as a dependency itself; you must call it explicitly when instantiating the object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/advanced-dependencies.md#_snippet_1

LANGUAGE: Python
CODE:
```
def __init__(self, fixed_content: str):
```

----------------------------------------

TITLE: Running Python Script (Error)
DESCRIPTION: This example shows an error that occurs when running a Python script without activating the correct virtual environment. The script attempts to import a module ('sirius') that is not installed in the currently active environment, resulting in an `ImportError`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
"$ cd ~/code/prisoner-of-azkaban

$ python main.py

// Error importing sirius, it's not installed 😱
Traceback (most recent call last):
    File \"main.py\", line 1, in <module>
        import sirius"
```

----------------------------------------

TITLE: Activating Virtual Environment on Windows PowerShell
DESCRIPTION: Activates the virtual environment on Windows PowerShell by running the Activate.ps1 script.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_4

LANGUAGE: powershell
CODE:
```
$ .venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Synchronous Function Definition (Non-Async)
DESCRIPTION: Shows a standard synchronous function definition that does not support asynchronous operations
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/async.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
# Ceci n'est pas asynchrone
def get_sequential_burgers(number: int):
    # Opérations asynchrones pour créer les burgers
    return burgers
```

----------------------------------------

TITLE: Installing FastAPI
DESCRIPTION: Install FastAPI using pip. This command installs the core FastAPI library.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install fastapi

---> 100%
```

----------------------------------------

TITLE: Accessing Model Attributes in FastAPI
DESCRIPTION: This code snippet demonstrates how to access attributes of a Pydantic model directly within a FastAPI function. It showcases the ease of use and integration between FastAPI and Pydantic for handling request bodies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.post("/items/")
async def create_item(item: Item):
    return item.name
```

----------------------------------------

TITLE: Installing Uvicorn
DESCRIPTION: Install Uvicorn, an ASGI server, for production use. The `[standard]` extra installs commonly used dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Using Arbitrary Dict Responses in FastAPI
DESCRIPTION: Demonstrates how to declare a response using an arbitrary dictionary with defined key and value types, useful when field names are not known in advance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/keyword-weights/", response_model=dict[str, float])
async def read_keyword_weights():
    return {"foo": 2.3, "bar": 3.4}
```

----------------------------------------

TITLE: Returning a dictionary from a dependency in FastAPI
DESCRIPTION: This code snippet demonstrates how to return a dictionary from a dependency function in FastAPI. The dictionary contains common query parameters that can be used in multiple path operations. However, it lacks type support compared to using classes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
        return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Example Client Call to Callback Endpoint (Python)
DESCRIPTION: This Python snippet illustrates how an external service (the "callback client") would make a POST request to a callback URL provided by the main FastAPI application. It shows using the `httpx` library to send a JSON payload to the specified URL, simulating the action the external service performs when the callback is triggered. This is an example of the *client's* implementation, not the FastAPI app's.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/openapi-callbacks.md#_snippet_1

LANGUAGE: Python
CODE:
```
callback_url = "https://example.com/api/v1/invoices/events/"
httpx.post(callback_url, json={"description": "Invoice paid", "paid": True})
```

----------------------------------------

TITLE: Running Uvicorn with Multiple Workers
DESCRIPTION: This command starts a FastAPI application with 4 worker processes using the `uvicorn` server directly. It specifies the application module (`main:app`), host (`0.0.0.0`), port (`8080`), and the number of worker processes (`--workers 4`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: bash
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
```

----------------------------------------

TITLE: Simple Type Declarations
DESCRIPTION: This snippet presents examples of basic type declarations in Python using common types like `int`, `float`, `bool`, and `bytes`. This is a foundational example showcasing how to specify variable types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"age: int
price: float
active: bool
binary: bytes"
```

----------------------------------------

TITLE: Example JSON Response
DESCRIPTION: This JSON response is returned when accessing the /items/{item_id} endpoint with a query parameter. It demonstrates how FastAPI automatically serializes data into JSON format.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{"item_id": 5, "q": "somequery"}
```

----------------------------------------

TITLE: Modifying Item Name to Item Price in FastAPI
DESCRIPTION: This code snippet shows how to change the return value of an item from item.name to item.price. This change will be reflected in the editor's auto-completion and type checking features.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/index.md#_snippet_10

LANGUAGE: Python
CODE:
```
... "item_price": item.price ...
```

----------------------------------------

TITLE: Using Status Codes in FastAPI Route (Python)
DESCRIPTION: This example demonstrates how to use a status code in a FastAPI route decorator. It sets the response status code to 418 (I'm a teapot) using the status module's named constant.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/status.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, status

app = FastAPI()


@app.get("/items/", status_code=status.HTTP_418_IM_A_TEAPOT)
def read_items():
    return [{"name": "Plumbus"}, {"name": "Portal Gun"}]
```

----------------------------------------

TITLE: Starting Traefik with Configuration | Shell
DESCRIPTION: This command executes the Traefik binary from the current directory. It uses the `--configFile` argument to specify the path to the main configuration file (`traefik.toml`), which in turn points to other configuration files like `routes.toml`. This initiates the Traefik proxy with the defined entry points, rules, and services.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_3

LANGUAGE: Shell
CODE:
```
./traefik --configFile=traefik.toml
```

----------------------------------------

TITLE: Importing HTTPException in FastAPI
DESCRIPTION: Import the HTTPException class from fastapi to handle HTTP exceptions and return error responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException
```

----------------------------------------

TITLE: Deactivating a Python Virtual Environment
DESCRIPTION: This command deactivates the currently active Python virtual environment.  This ensures that subsequent Python commands will use the system-wide Python installation or another explicitly activated environment.  There are no specific inputs or outputs, but it changes the shell's environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
"$ deactivate"
```

----------------------------------------

TITLE: Project Dependency List
DESCRIPTION: Specifies the required Python packages and their versions for documentation generation (mkdocs, mkdocstrings), testing, code formatting (black), and image processing (pillow, cairosvg) used in the FastAPI project's development workflow.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-docs.txt#_snippet_0

LANGUAGE: Python Requirements
CODE:
```
-e .
-r requirements-docs-tests.txt
mkdocs-material==9.6.1
mdx-include >=1.4.1,<2.0.0
mkdocs-redirects>=1.2.1,<1.3.0
typer == 0.15.3
pyyaml >=5.3.1,<7.0.0
# For Material for MkDocs, Chinese search
jieba==0.42.1
# For image processing by Material for MkDocs
pillow==11.1.0
# For image processing by Material for MkDocs
cairosvg==2.7.1
mkdocstrings[python]==0.26.1
griffe-typingdoc==0.2.7
# For griffe, it formats with black
black==25.1.0
mkdocs-macros-plugin==1.3.7
markdown-include-variants==0.0.4
```

----------------------------------------

TITLE: Successful JSON Response Example
DESCRIPTION: This is an example of the JSON response a client receives when a request to `/items/{item_id}` is successful (e.g., for `item_id` "foo"), along with a 200 HTTP status code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "item": "The Foo Wrestlers"
}
```

----------------------------------------

TITLE: Initializing FastAPI with API Metadata in Python
DESCRIPTION: This code initializes a FastAPI application with metadata such as title, description, version, terms of service, contact information, and license information. It demonstrates how to configure these parameters to customize the OpenAPI specification and automatic API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/metadata.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="My Super Project",
    description="This is a very fancy project, with auto docs for the API and everything",
    version="0.1.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://example.com/contact/",
        "email": "deadpoolio@example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)


@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Install FastAPI
DESCRIPTION: Install FastAPI using pip. This command installs the core FastAPI library.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install fastapi
```

----------------------------------------

TITLE: Defining a File Parameter with bytes Type
DESCRIPTION: Shows how to define a file parameter using the File class with bytes type, which loads the entire file content into memory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def create_file(file: bytes = File()):
```

----------------------------------------

TITLE: Comparing Path Parameter with Enum Members in FastAPI
DESCRIPTION: This code snippet demonstrates how to compare the path parameter with the Enum members inside a FastAPI function. It checks if the `model_name` is equal to `ModelName.alexnet`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: python
CODE:
```
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}
```

----------------------------------------

TITLE: Defining Callback Path Operation
DESCRIPTION: This snippet illustrates how to define a path operation for handling incoming callback requests. The path operation includes the body and response model declarations required for the external API specifications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
@invoice_callback_router.post("/invoices/{invoice_id}")
async def receive_invoice(invoice_id: str, body: InvoiceEvent):
    pass
```

----------------------------------------

TITLE: Activating Virtual Environment on Windows Bash
DESCRIPTION: This command activates a virtual environment in Windows Bash (e.g., Git Bash) by sourcing the activate script. It modifies the PATH environment variable to prioritize the virtual environment's binaries.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_22

LANGUAGE: shell
CODE:
```
source .venv/Scripts/activate
```

----------------------------------------

TITLE: Running the FastAPI Application
DESCRIPTION: Run the FastAPI application using Uvicorn. The `--reload` flag enables automatic reloading upon code changes, useful for development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/index.md#_snippet_4

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Example PATH variable (Linux, macOS)
DESCRIPTION: This is an example of how the PATH environment variable might look before activating a virtual environment on Linux or macOS. It lists directories where the operating system searches for executable programs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_23

LANGUAGE: plaintext
CODE:
```
/usr/bin:/bin:/usr/sbin:/sbin
```

----------------------------------------

TITLE: Declaring Union Types with Type Hints in Python 3.10+
DESCRIPTION: This example demonstrates how to declare a variable that can be of multiple types using the new union syntax in Python 3.10 and above.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
item: int | str = 1
```

----------------------------------------

TITLE: Function with Various Basic Type Hints and Defaults - Python
DESCRIPTION: This function demonstrates the use of type hints for common basic Python types including `int`, `float`, and `bool`. It also shows how to combine type hints with default parameter values. The highlighted line shows the function definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
def get_items(item_id: int, quantity: int = 1, price: float = 10.9, is_offer: bool = False):
    return {"item_id": item_id, "quantity": quantity, "price": price, "is_offer": is_offer}
```

----------------------------------------

TITLE: Returning a Response Directly in FastAPI
DESCRIPTION: Illustrates how to override the response directly in a route by returning a Response object. It creates an HTMLResponse object and returns it from the route function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/")
async def read_items():
    return HTMLResponse("""
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
```

----------------------------------------

TITLE: Installing Another Specific Package Version with pip
DESCRIPTION: This snippet shows how to install a different specific version of a Python package using pip. This demonstrates the conflict that can occur when different projects require different versions of the same package in a global environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_17

LANGUAGE: console
CODE:
```
$ pip install "harry==3"
```

----------------------------------------

TITLE: Pydantic Model Example
DESCRIPTION: This example from Pydantic documentation showcases the creation of a Pydantic model for data validation.  It defines a `User` class with type-annotated attributes and demonstrates its instantiation, showing the library's data validation capabilities.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
"from datetime import datetime
from typing import Optional

from pydantic import BaseModel


class User(BaseModel):
    id: int
    name = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: list[int] = []


external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, '2', b'3'],
}

user = User(**external_data)
print(user.id)" 
```

----------------------------------------

TITLE: Translating Details Blocks
DESCRIPTION: This snippet illustrates the translation of a 'details' block. The English term 'details' is translated to 'Vista previa' in Spanish, separated by a vertical bar.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/llm-prompt.md#_snippet_2

LANGUAGE: Text
CODE:
```
/// details | Vista previa
```

----------------------------------------

TITLE: Creating and Using Environment Variables in Bash
DESCRIPTION: This snippet demonstrates how to create and use environment variables in a Bash shell. It shows how to set an environment variable and then access it using the `echo` command.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/environment-variables.md#_snippet_0

LANGUAGE: Bash
CODE:
```
// Bạn có thể tạo một biến môi trường MY_NAME với
$ export MY_NAME="Wade Wilson"

// Sau đó bạn có thể sử dụng nó với các chương trình khác, như
$ echo "Hello $MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Path Parameter Order - FastAPI (Python)
DESCRIPTION: This code snippet demonstrates how the order of path operations matters in FastAPI. The `/users/me` path must be defined before `/users/{user_id}` to avoid the latter matching `/users/me` and misinterpreting 'me' as the user ID.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Using SPDX License Identifier in FastAPI Metadata
DESCRIPTION: This snippet shows how to use SPDX license identifiers instead of URLs for license information in FastAPI applications. This feature is available since OpenAPI 3.1.0 and FastAPI 0.99.0.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/metadata.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
license_info={
    "name": "Apache 2.0",
    "identifier": "Apache-2.0",
}
```

----------------------------------------

TITLE: Verify User Credentials with FastAPI
DESCRIPTION: This code snippet demonstrates how to verify user credentials in FastAPI using the secrets.compare_digest() function to prevent timing attacks. The username and password are first encoded to bytes using UTF-8, and then compared using secrets.compare_digest() to ensure they match the expected values. If the credentials are invalid, an HTTPException is raised with a 401 status code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"import secrets

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from fastapi.responses import HTMLResponse

app = FastAPI()

security = HTTPBasic()


def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):
    correct_username = secrets.compare_digest(credentials.username, \"stanleyjobson\")
    correct_password = secrets.compare_digest(credentials.password, \"swordfish\")
    if not (correct_username and correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=\"Incorrect email or password\",
            headers={\"WWW-Authenticate\": \"Basic\"},
        )
    return credentials.username


@app.get("/users/me")
def read_current_user(username: str = Depends(get_current_username)):
    return HTMLResponse(f\"Hello <b>{username}</b>\")"
```

----------------------------------------

TITLE: Configuring Documentation URLs in FastAPI
DESCRIPTION: This code snippet illustrates how to configure the documentation URLs for Swagger UI and ReDoc in a FastAPI application. The `docs_url` and `redoc_url` parameters control the URLs where these documentation interfaces are served. Setting a URL to `None` disables the corresponding interface.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/metadata.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"""
from fastapi import FastAPI

app = FastAPI(docs_url="/documentation", redoc_url=None)


@app.get("/")
async def read_root():
    return {"Hello": "World"}
"""
```

----------------------------------------

TITLE: Defining Multiple User Models with Pydantic
DESCRIPTION: Defines three Pydantic models: UserIn (for incoming data with a password), User (for outgoing data without a password), and UserInDB (for database storage with a hashed password). It also includes a function to simulate password hashing and saving a user to a database.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class UserIn(BaseModel):
    username: str
    password: str
    email: str
    full_name: Optional[str] = None


class User(BaseModel):
    username: str
    email: str
    full_name: Optional[str] = None
    disabled: Optional[bool] = None


class UserInDB(BaseModel):
    username: str
    email: str
    full_name: Optional[str] = None
    hashed_password: str
    disabled: Optional[bool] = None


def fake_hash_password(password: str):  # pragma: no cover
    return password + "not really hashed"


def fake_save_user(user: UserIn):
    hashed_password = fake_hash_password(user.password)
    user_dict = user.dict()
    db_user = UserInDB(**user_dict, hashed_password=hashed_password)
    return db_user
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: Imports the FastAPI class from the fastapi library. This class is used to create the API application instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Multiple Path and Query Parameters in FastAPI
DESCRIPTION: This code snippet demonstrates how to define multiple path and query parameters in a FastAPI endpoint. FastAPI automatically detects which parameters are path parameters and which are query parameters based on their presence in the path. The needy parameter is required, while the option parameter is optional with a default value of None.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_user_item(
    item_id: str, needy: str, skip: int = 0, limit: Optional[int] = None
):
    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}
    return item
```

----------------------------------------

TITLE: Traefik Routes Configuration (routes.toml)
DESCRIPTION: This TOML configuration file defines the routes for Traefik, including a middleware to strip the `/api/v1` prefix and a router to forward requests with the `/api/v1` prefix to the Uvicorn server. It also defines the service and load balancer configuration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_7

LANGUAGE: TOML
CODE:
```
[http]
  [http.middlewares]

    [http.middlewares.api-stripprefix.stripPrefix]
      prefixes = ["/api/v1"]

  [http.routers]

    [http.routers.app-http]
      entryPoints = ["http"]
      service = "app"
      rule = "PathPrefix(`/api/v1`)"
      middlewares = ["api-stripprefix"]

  [http.services]

    [http.services.app]
      [http.services.app.loadBalancer]
        [[http.services.app.loadBalancer.servers]]
          url = "http://127.0.0.1:8000"
```

----------------------------------------

TITLE: Adding Custom Documentation with Static Files in FastAPI
DESCRIPTION: This snippet demonstrates how to add custom documentation endpoints using FastAPI, serving static files for Swagger UI and ReDoc. It reuses FastAPI's internal functions to create the HTML pages for the documentation, passing the necessary arguments such as the OpenAPI schema URL and the URLs for the Swagger UI JavaScript and CSS files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-docs-ui-assets.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse

app = FastAPI(docs_url=None, redoc_url=None)

app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + " - Swagger UI",
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url="/static/swagger-ui-bundle.js",
        swagger_css_url="/static/swagger-ui.css",
    )


@app.get("/redoc", include_in_schema=False)
async def custom_redoc_html():
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=app.title + " - ReDoc",
        redoc_js_url="/static/redoc.standalone.js"
    )
```

----------------------------------------

TITLE: Defining Background Task Function - Python
DESCRIPTION: Defines a standard Python function `write_notification` that takes an email and an optional message. This function simulates sending a notification by appending a log entry to a file named `log.txt`. It is designed to be executed as a background task.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/background-tasks.md#_snippet_1

LANGUAGE: Python
CODE:
```
def write_notification(email: str, message=""):
    with open("log.txt", mode="a") as email_file:
        content = f"notification for {email}: {message}\n"
        email_file.write(content)
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet shows how to import the FastAPI class from the fastapi package. This is the first step in creating a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Checking the active Python interpreter (Windows PowerShell)
DESCRIPTION: This PowerShell command checks if the virtual environment is correctly activated. It retrieves the command information for `python`, which should point to the Python executable within the `.venv\Scripts` directory of the project.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_7

LANGUAGE: Shell
CODE:
```
```console
$ Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```
```

----------------------------------------

TITLE: Checking Python Path (Linux, macOS, Windows Bash)
DESCRIPTION: This command verifies that the virtual environment is active by checking if the python executable path points to the .venv directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_6

LANGUAGE: Shell
CODE:
```
$ which python

/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Combining Dataclasses with Pydantic for Complex Models
DESCRIPTION: Demonstrates how to use dataclasses with Pydantic for more complex data structures. This example shows nested dataclasses and lists of dataclasses in API responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/dataclasses.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from dataclasses import field
from typing import List

from fastapi import FastAPI
from pydantic.dataclasses import dataclass

app = FastAPI()

@dataclass
class Item:
    name: str
    price: float

@dataclass
class Author:
    name: str
    items: List[Item]

@app.get("/authors/{author_id}/items", response_model=List[Item])
def read_author_items(author_id: str):
    return [
        {"name": "Foo", "price": 50.2},
        {"name": "Bar", "price": 62},
        {"name": "Baz", "price": 10.2},
    ]

@app.get("/authors", response_model=List[Author])
def read_authors():
    return [
        {
            "name": "Foo",
            "items": [
                {"name": "Bar", "price": 62},
                {"name": "Baz", "price": 10.2},
            ],
        },
        {
            "name": "Bin",
            "items": [
                {"name": "Foo", "price": 50.2},
            ],
        },
    ]
```

----------------------------------------

TITLE: Importing HTTPConnection from FastAPI
DESCRIPTION: Shows how to import the HTTPConnection class from fastapi.requests module. This class is used when defining dependencies that need to be compatible with both HTTP and WebSocket connections.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/httpconnection.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.requests import HTTPConnection
```

----------------------------------------

TITLE: Importing Path in FastAPI
DESCRIPTION: This code snippet demonstrates how to import the `Path` class from the `fastapi` library.  `Path` is used to declare validations and metadata for path parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"from fastapi import FastAPI, Path\n\napp = FastAPI()"
```

----------------------------------------

TITLE: Function Parameters With String Type Hints - Python
DESCRIPTION: Shows how to add string type hints (`: str`) to function parameters in Python, enabling better editor support and type checking.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
first_name: str, last_name: str
```

----------------------------------------

TITLE: Creating Custom GzipRoute Class in Python
DESCRIPTION: Defines a custom GzipRoute class that extends APIRoute to use the GzipRequest. It overrides the get_route_handler() method to create a new handler that uses GzipRequest instead of the default Request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class GzipRoute(APIRoute):
    def get_route_handler(self) -> Callable:
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request) -> Response:
            request = GzipRequest(request.scope, request.receive)
            return await original_route_handler(request)

        return custom_route_handler
```

----------------------------------------

TITLE: Returning Content from a Path Operation in FastAPI
DESCRIPTION: This code snippet demonstrates how to return a dictionary from a path operation function in FastAPI. FastAPI automatically converts the returned dictionary into a JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Parameter Ordering with the Asterisk Trick
DESCRIPTION: Demonstrates using the asterisk (*) to force FastAPI to treat all following parameters as keyword arguments, allowing flexible parameter ordering.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(*, item_id: int = Path(), q: str):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results

```

----------------------------------------

TITLE: Defining a Function with an Optional Parameter in Python
DESCRIPTION: This code defines a function `say_hi` with a `name` parameter annotated as `Optional[str]`. While the parameter is technically not optional in the sense that it must be provided during the function call, its value can be `None`. The code also highlights the use of `Union[str, None]` as an alternative.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
"from typing import Optional

def say_hi(name: Optional[str]):
    print(f'Hi {name}')
"
```

----------------------------------------

TITLE: Install openapi-ts using npm
DESCRIPTION: This command installs the `openapi-ts` package as a development dependency in a frontend project. `openapi-ts` is used to generate TypeScript client code from an OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/generate-clients.md#_snippet_1

LANGUAGE: Shell
CODE:
```
npm install @hey-api/openapi-ts --save-dev
```

----------------------------------------

TITLE: Setting OpenAPI URL - Python
DESCRIPTION: This code snippet shows how to configure the URL where the OpenAPI schema is served in a FastAPI application. By default, it is served at `/openapi.json`, but this can be changed using the `openapi_url` parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
app = FastAPI(openapi_url="/api/v1/openapi.json")

```

----------------------------------------

TITLE: Using Multiple Path and Query Parameters in FastAPI
DESCRIPTION: This code snippet demonstrates how to use multiple path and query parameters in a FastAPI endpoint, showcasing that the order of declaration does not matter. FastAPI can distinguish between the path parameter `item_id` and the query parameters `q` and `short` based on their names and the route definition. The function returns a dictionary containing the `item_id`, query parameter `q`, and boolean parameter `short`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"@app.get("/items/{item_id}")
async def read_user_item(
    item_id: str,
    q: str | None = None,
    short: bool = False,
):
    item = {"item_id": item_id}
    if q:
        item.update({"q": q})
    if not short:
        item.update(
            {"description": "This is an amazing item that has a long description"}
        )
    return item"
```

----------------------------------------

TITLE: Activating Virtual Environment on Windows Bash
DESCRIPTION: Command to activate the Python virtual environment on Windows using Bash (e.g., Git Bash).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
$ source .venv/Scripts/activate
```

----------------------------------------

TITLE: Updating PATH during Python Installation (Windows)
DESCRIPTION: This snippet illustrates how the PATH environment variable is updated during Python installation on Windows. It shows the addition of the Python installation directory to the PATH, allowing the system to find the Python executable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/environment-variables.md#_snippet_9

LANGUAGE: plaintext
CODE:
```
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32;C:\opt\custompython\bin
```

----------------------------------------

TITLE: Swagger UI OAuth2 Redirect Handler in FastAPI
DESCRIPTION: Function to generate HTML for handling OAuth2 redirect flows in Swagger UI. Essential for OAuth2 authentication documentation and testing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/openapi/docs.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
get_swagger_ui_oauth2_redirect_html
```

----------------------------------------

TITLE: Python Function with Type Hints and String Conversion
DESCRIPTION: This Python function `process_age` includes type hints and converts the `age` integer to a string using `str(age)` before concatenating it with the name. This demonstrates how to handle type mismatches and ensure that the function returns the expected output without type-related errors.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"def process_age(name: str, age: int):
    return name + " is " + str(age)"
```

----------------------------------------

TITLE: Using StreamingResponse for Async Streaming in FastAPI
DESCRIPTION: Example showing how to use StreamingResponse to stream data from an async generator function. This is useful for large responses that should be streamed in chunks.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()


async def fake_video_streamer():
    for i in range(10):
        yield b"some fake video bytes"


@app.get("/", response_class=StreamingResponse)
async def main():
    return StreamingResponse(fake_video_streamer())
```

----------------------------------------

TITLE: Running FastAPI with Disabled OpenAPI Documentation
DESCRIPTION: Console command example showing how to run a FastAPI application with OpenAPI documentation disabled by setting the OPENAPI_URL environment variable to empty.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/conditional-openapi.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ OPENAPI_URL= uvicorn main:app

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Return JSONResponse with jsonable_encoder in FastAPI (Python)
DESCRIPTION: Demonstrates how to manually create and return a `JSONResponse` object in a FastAPI path operation. It uses `jsonable_encoder` to convert a Python dictionary (or Pydantic model) into a JSON-compatible format before placing it in the response content. This approach is useful for adding custom headers or cookies while sending JSON data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/response-directly.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float
    is_offered: bool = None

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    item = {"id": "foo", "name": "Foo", "price": 50.2}
    # Use jsonable_encoder to convert the dict to a JSON-compatible format
    encoded_item = jsonable_encoder(item)
    # Return a JSONResponse directly
    return JSONResponse(content=encoded_item)
```

----------------------------------------

TITLE: Basic Path Parameter Definition in FastAPI
DESCRIPTION: Defines a simple path parameter using Python string formatting syntax, demonstrating how FastAPI handles path parameters
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@app.get("/items/{item_id}")
def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Language Inheritance Configuration - YAML
DESCRIPTION: YAML configuration file that inherits documentation structure from the English version. Created in the new language directory to maintain consistency with the main docs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_10

LANGUAGE: yaml
CODE:
```
INHERIT: ../en/mkdocs.yml
```

----------------------------------------

TITLE: Importing Header in FastAPI
DESCRIPTION: This code snippet imports the `Header` class from the `fastapi` module. This is a necessary step to declare header parameters in your FastAPI path operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/header-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"from fastapi import FastAPI, Header"
```

----------------------------------------

TITLE: Installing Packages with uv (Console)
DESCRIPTION: Runs the `uv pip install` command to download and install the specified package (`fastapi[standard]`) and its dependencies into the currently active virtual environment. This is an alternative to using `pip`. The output shows a typical progress indicator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_11

LANGUAGE: console
CODE:
```
uv pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Declaring Path Parameter with Metadata in FastAPI
DESCRIPTION: Example of declaring a path parameter with title metadata using Annotated and Path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
app = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    return {\"item_id\": item_id}
```

----------------------------------------

TITLE: Traefik Configuration with Path Prefix Stripping
DESCRIPTION: A Traefik TOML configuration file that sets up a proxy on port 9999 and configures path prefix stripping for an API path. This allows the proxy to remove the /api/v1 prefix before forwarding requests to the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_5

LANGUAGE: toml
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Path Parameter Ordering with Star Argument (Python 3.8)
DESCRIPTION: This snippet demonstrates using the `*` argument in a function signature to force subsequent parameters to be keyword arguments. This allows defining a query parameter `q` without `Query` before a path parameter `item_id` defined with `Path`, even if `q` lacks a default value.  Using `Annotated` resolves this issue more cleanly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"from typing import Optional

from fastapi import FastAPI, Path

app = FastAPI()


@app.get(\"/items/{item_id}\")
async def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):
    return {\"item_id\": item_id, \"q\": q}"
```

----------------------------------------

TITLE: Overridden Request Validation Text Response Example
DESCRIPTION: This is an example of a plain text representation of the validation error details, which might be returned by a different custom handler or logged.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_9

LANGUAGE: text
CODE:
```
1 validation error
path -> item_id
  value is not a valid integer (type=type_error.integer)
```

----------------------------------------

TITLE: Python Function with Simple Type Hints
DESCRIPTION: This Python function `process_items` demonstrates the use of simple type hints for standard Python types like `int`, `float`, `bool`, and `bytes`. It receives parameters with specified types and returns a string that includes these values. It helps ensure type consistency and improves code clarity.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"def process_items(amount: int, price: float, is_offer: bool, encoded: bytes):
    return f\"{amount} {price} {is_offer} {encoded}\""
```

----------------------------------------

TITLE: Manual Documentation Server Setup Alternative
DESCRIPTION: Alternative approach to serve documentation by navigating to the documentation directory and running MkDocs directly. This achieves the same result as the docs.py script.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
$ cd docs/en/
$ mkdocs serve --dev-addr 127.0.0.1:8008
```

----------------------------------------

TITLE: Overridden Request Validation JSON Response Example
DESCRIPTION: This is an example of the JSON response returned by the custom `validation_exception_handler` when a `RequestValidationError` occurs, such as providing a non-integer `item_id` to the `/items/{item_id}` endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_8

LANGUAGE: JSON
CODE:
```
{
    "detail": [
        {
            "loc": [
                "path",
                "item_id"
            ],
            "msg": "value is not a valid integer",
            "type": "type_error.integer"
        }
    ],
    "body": null
}
```

----------------------------------------

TITLE: Disabling Dependency Caching in FastAPI
DESCRIPTION: Shows how to disable caching for a specific dependency using the use_cache parameter. This is useful in scenarios where fresh values are needed for each dependency call.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
async def needy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):
    return {"fresh_value": fresh_value}
```

LANGUAGE: Python
CODE:
```
async def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):
    return {"fresh_value": fresh_value}
```

----------------------------------------

TITLE: Annotating Response Subclass
DESCRIPTION: Shows how to annotate a function with a Response subclass like RedirectResponse, which FastAPI handles automatically
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def read_item(item_id: str) -> RedirectResponse:
    return RedirectResponse("/docs")
```

----------------------------------------

TITLE: Managing Environment Variables in Bash
DESCRIPTION: These console commands show how to create and use environment variables in a Bash shell using `export` and `echo`. It also demonstrates running a Python script that reads an environment variable, showing the difference when the variable is set before execution or inline for a single command.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/environment-variables.md#_snippet_1

LANGUAGE: console
CODE:
```
export MY_NAME="Wade Wilson"

echo "Hello $MY_NAME"

Hello Wade Wilson
```

LANGUAGE: console
CODE:
```
python main.py

Hello World from Python

export MY_NAME="Wade Wilson"

python main.py

Hello Wade Wilson from Python
```

LANGUAGE: console
CODE:
```
MY_NAME="Wade Wilson" python main.py

Hello Wade Wilson from Python

python main.py

Hello World from Python
```

----------------------------------------

TITLE: Single Values in Request Body
DESCRIPTION: Demonstrates how to use `Body` to explicitly define a single value as part of the request body. This is useful when you need to include simple data types in the request body alongside Pydantic models.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-multiple-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.post("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(..., gt=0),
    q: Union[str, None] = None
):
    results = {"item_id": item_id, "item": item, "user": user, "importance": importance}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Declaring Optional Type with typing.Union (Python 3.8+)
DESCRIPTION: Illustrates declaring a type that can be a specific type (e.g., `str`) or `None` using `typing.Union`. This requires importing `Union` from the `typing` module and is an alternative to `Optional[str]`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import Union

def say_hi(name: Union[str, None]):
    if name:
        print(f"Hello {name}")
    else:
        print("Hello World")
```

----------------------------------------

TITLE: Checking Python Path (Windows PowerShell)
DESCRIPTION: This command verifies that the virtual environment is active by checking if the python executable path points to the .venv directory using Get-Command.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_7

LANGUAGE: PowerShell
CODE:
```
$ Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```

----------------------------------------

TITLE: Returning Custom Status Codes with JSONResponse in FastAPI
DESCRIPTION: This code demonstrates how to return different HTTP status codes based on application logic in FastAPI. It creates a path operation that returns status code 200 for updating existing items and 201 for creating new items by directly returning a JSONResponse with the appropriate status code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/additional-status-codes.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, status
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Annotated, Any

app = FastAPI()

items = {"foo": {"name": "Fighters", "size": 6}, "bar": {"name": "Tenders", "size": 3}}


class Item(BaseModel):
    name: str
    size: int


@app.put("/items/{item_id}")
async def upsert_item(
    item_id: str, item: Item, response_model_exclude_unset: bool = False
) -> Annotated[Any, JSONResponse]:
    if item_id in items:
        # Item exists, return 200 status code
        items[item_id] = item
        return JSONResponse(status_code=status.HTTP_200_OK, content=item.model_dump())
    else:
        # Item doesn't exist yet, create it and return 201 status code
        items[item_id] = item
        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item.model_dump())
```

----------------------------------------

TITLE: Declaring Optional String with typing.Optional (Python 3.8+)
DESCRIPTION: Shows how to declare a variable that can be a string or `None` using the `Optional` type from the `typing` module, applicable for Python 3.8 and later. This is equivalent to `Union[str, None]`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_3

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial009.py!}
```

----------------------------------------

TITLE: Making GET Request with Python Requests Library
DESCRIPTION: Demonstrates how to make a simple GET request using the Requests library in Python. This snippet is used to illustrate the simplicity of the Requests API, which inspired FastAPI's design.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/alternatives.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
response = requests.get("http://example.com/some/url")
```

----------------------------------------

TITLE: Example PATH variable on Windows
DESCRIPTION: This shows an example of the PATH environment variable on Windows before activating a virtual environment. It indicates the directories the OS searches for executable programs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_24

LANGUAGE: plaintext
CODE:
```
C:\Windows\System32
```

----------------------------------------

TITLE: Traefik Routes Configuration - middleware, routers, services
DESCRIPTION: Configures Traefik to strip the /api/v1 path prefix and redirect requests to a Uvicorn server running at http://127.0.0.1:8000. It defines middleware for prefix stripping, a router to match the path, and a service to handle load balancing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_6

LANGUAGE: TOML
CODE:
```
[http]
  [http.middlewares]

    [http.middlewares.api-stripprefix.stripPrefix]
      prefixes = ["/api/v1"]

  [http.routers]

    [http.routers.app-http]
      entryPoints = ["http"]
      service = "app"
      rule = "PathPrefix(`/api/v1`)"
      middlewares = ["api-stripprefix"]

  [http.services]

    [http.services.app]
      [http.services.app.loadBalancer]
        [[http.services.app.loadBalancer.servers]]
          url = "http://127.0.0.1:8000"
```

----------------------------------------

TITLE: Importing Pydantic's BaseModel in FastAPI
DESCRIPTION: Shows how to import the BaseModel class from Pydantic, which is required for creating data models that will be used to validate request bodies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel
```

----------------------------------------

TITLE: JavaScript Presets Configuration for Swagger UI
DESCRIPTION: Example of JavaScript-only configuration for Swagger UI presets that cannot be set directly through Python.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
presets: [
    SwaggerUIBundle.presets.apis,
    SwaggerUIBundle.SwaggerUIStandalonePreset
]
```

----------------------------------------

TITLE: Declaring Tuple and Set Types with Type Hints in Python 3.9+
DESCRIPTION: This example demonstrates how to declare tuple and set variables with type hints in Python 3.9 and above.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
items_t: tuple[int, int, str] = (1, 2, "foo")
items_s: set[bytes] = {b"foo", b"bar", b"baz"}
```

----------------------------------------

TITLE: Specifying Pydantic AI Package Version
DESCRIPTION: Defines the required version of pydantic-ai package as 0.0.30. This is used to ensure compatibility and consistent behavior across installations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-translations.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
pydantic-ai==0.0.30
```

----------------------------------------

TITLE: Installing a Python Package using pip
DESCRIPTION: This command demonstrates how to install a Python package (fastapi with standard extras) using pip, the Python package installer. It shows the typical output of the installation process.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_19

LANGUAGE: bash
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: FastAPI App with Root Path
DESCRIPTION: Creates a FastAPI application and defines a route that returns a JSON response including the root_path from the request scope. This demonstrates how to access the root_path within a request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/app")
async def read_main(request: Request):
    return {"message": "Hello World", "root_path": request.scope.get("root_path")}

```

----------------------------------------

TITLE: Define List Field in Pydantic Model
DESCRIPTION: Defines a model attribute as a standard Python list. This allows the attribute to accept a list of items, without specifying the type of items within the list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
tags: list = []
```

----------------------------------------

TITLE: Python type hint for Item model
DESCRIPTION: Example of a type hint for an Item model
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Setting OpenAPI operationId for a Route
DESCRIPTION: This snippet demonstrates how to set the `operationId` for an OpenAPI operation using the `operation_id` parameter in a FastAPI route. It ensures uniqueness across all operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/path-operation-advanced-configuration.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}", operation_id="read_item")
async def read_item(item_id: str):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Setting Custom Route Class in FastAPI Router
DESCRIPTION: This code shows how to set a custom route class for all routes in a specific router by using the route_class parameter. In this example, the router uses the TimedRoute class for all its endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
router = APIRouter(route_class=TimedRoute)
```

----------------------------------------

TITLE: Displaying HTTPS Diagram in Markdown
DESCRIPTION: This snippet embeds an SVG image illustrating the HTTPS process in a Markdown document. The image is located at '/img/deployment/https/https.svg' and is used to visually represent the HTTPS concept.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/https.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
<img src="/img/deployment/https/https.svg">
```

----------------------------------------

TITLE: Running a FastAPI Application with Uvicorn
DESCRIPTION: Command to run a FastAPI application using the Uvicorn ASGI server with auto-reload enabled for development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_2

LANGUAGE: Shell
CODE:
```
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: Setting Default List for Multiple Value Query Parameter in FastAPI
DESCRIPTION: This code shows how to set a default list of values for a query parameter that can accept multiple values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
q: List[str] = Query(default=["foo", "bar"])
```

----------------------------------------

TITLE: Configuring Swagger UI Syntax Highlighting Theme
DESCRIPTION: Shows how to change the syntax highlighting theme in Swagger UI using the syntaxHighlight.theme parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
app = FastAPI(
    swagger_ui_parameters={"syntaxHighlight.theme": "monokai"}
)
```

----------------------------------------

TITLE: Importing BackgroundTasks and Declaring Parameter - FastAPI
DESCRIPTION: Imports the necessary `BackgroundTasks` class from FastAPI. Declares a path operation function `send_notification` that accepts an email string and a `BackgroundTasks` object as a parameter, which FastAPI will automatically provide.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/background-tasks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import BackgroundTasks, FastAPI

app = FastAPI()

# Code for write_notification is here, but not highlighted in this snippet

@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):
    # add_task call will be here
    pass # Placeholder
```

----------------------------------------

TITLE: Function With Simple Type Hints - Python
DESCRIPTION: Illustrates a Python function definition using basic type hints for common built-in types like integer (`int`), string (`str`), float (`float`), boolean (`bool`), and bytes (`bytes`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_7

LANGUAGE: Python
CODE:
```
def get_items(item_id: int, item_name: str, item_price: float, is_available: bool, data: bytes):
    return {
        "item_id": item_id,
        "item_name": item_name,
        "item_price": item_price,
        "is_available": is_available,
        "data": data.decode()
    }
```

----------------------------------------

TITLE: Activating Virtual Environment on Different Platforms
DESCRIPTION: Commands for activating a virtual environment across Linux, macOS, and Windows operating systems using different shell interfaces
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_19

LANGUAGE: bash
CODE:
```
$ source .venv/bin/activate
```

LANGUAGE: powershell
CODE:
```
$ .venv\Scripts\Activate.ps1
```

LANGUAGE: bash
CODE:
```
$ source .venv/Scripts/activate
```

----------------------------------------

TITLE: Run Gunicorn with Uvicorn Workers
DESCRIPTION: Starts Gunicorn with Uvicorn workers to serve a FastAPI application. This command specifies the module and application name, the number of worker processes, the worker class, and the binding address.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: console
CODE:
```
$ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80

[19499] [INFO] Starting gunicorn 20.1.0
[19499] [INFO] Listening at: http://0.0.0.0:80 (19499)
[19499] [INFO] Using worker: uvicorn.workers.UvicornWorker
[19511] [INFO] Booting worker with pid: 19511
[19513] [INFO] Booting worker with pid: 19513
[19514] [INFO] Booting worker with pid: 19514
[19515] [INFO] Booting worker with pid: 19515
[19511] [INFO] Started server process [19511]
[19511] [INFO] Waiting for application startup.
[19511] [INFO] Application startup complete.
[19513] [INFO] Started server process [19513]
[19513] [INFO] Waiting for application startup.
[19513] [INFO] Application startup complete.
[19514] [INFO] Started server process [19514]
[19514] [INFO] Waiting for application startup.
[19514] [INFO] Application startup complete.
[19515] [INFO] Started server process [19515]
[19515] [INFO] Waiting for application startup.
[19515] [INFO] Application startup complete.
```

----------------------------------------

TITLE: Creating and Using a FastAPI Dependency to Retrieve the Current User
DESCRIPTION: This code snippet demonstrates how to create a dependency, `get_current_user`, to retrieve the current user based on a token.  It utilizes a fake utility function, `fake_decode_token`, to simulate token decoding and user retrieval. This dependency is then used in a path operation to access the current user.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"from typing import Optional

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from pydantic import BaseModel


class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None


def fake_decode_token(token):
    # This doesn't do any actual validation
    user = User(username=token + "_user")
    return user


async def get_current_user(token: str = Depends(oauth2_scheme)):
    user = fake_decode_token(token)
    if not user:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication credentials", headers={"WWW-Authenticate": "Bearer"})
    return user


@app.get("/users/me/")
async def read_current_user(current_user: User = Depends(get_current_user)):
    return current_user"
```

----------------------------------------

TITLE: Running Gunicorn with Uvicorn Workers
DESCRIPTION: Command to run Gunicorn with Uvicorn workers for a FastAPI application. It specifies 4 worker processes, binds to all interfaces on port 80, and uses the UvicornWorker class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80

[19499] [INFO] Starting gunicorn 20.1.0
[19499] [INFO] Listening at: http://0.0.0.0:80 (19499)
[19499] [INFO] Using worker: uvicorn.workers.UvicornWorker
[19511] [INFO] Booting worker with pid: 19511
[19513] [INFO] Booting worker with pid: 19513
[19514] [INFO] Booting worker with pid: 19514
[19515] [INFO] Booting worker with pid: 19515
[19511] [INFO] Started server process [19511]
[19511] [INFO] Waiting for application startup.
[19511] [INFO] Application startup complete.
[19513] [INFO] Started server process [19513]
[19513] [INFO] Waiting for application startup.
[19513] [INFO] Application startup complete.
[19514] [INFO] Started server process [19514]
[19514] [INFO] Waiting for application startup.
[19514] [INFO] Application startup complete.
[19515] [INFO] Started server process [19515]
[19515] [INFO] Waiting for application startup.
[19515] [INFO] Application startup complete.
```

----------------------------------------

TITLE: Declaring OpenAPI Examples with openapi_examples in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare OpenAPI-specific examples using the `openapi_examples` parameter in FastAPI for the `Item` model's `Body()`. It includes examples with summaries, descriptions, and values to be displayed in the documentation UI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/schema-extra-example.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import Body, FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        openapi_examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                },
            },
            "invalid": {
                "summary": "Invalid data",
                "description": "Data that doesn't pass validation.",
                "value": {
                    "name": "Bar",
                    "price": "Twenty",
                    "tax": None,
                },
            },
        },
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Creating a basic FastAPI application with async def
DESCRIPTION: This Python code defines a simple FastAPI application with two asynchronous endpoints: `/` and `/items/{item_id}`.  The `/` endpoint returns a JSON response with a "Hello": "World" message. The `/items/{item_id}` endpoint takes an item ID (integer) and an optional query parameter `q` (string or None), and returns a JSON response containing the item ID and the value of `q`.  The use of `async def` allows the endpoints to handle requests concurrently.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/index.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Generating, Modifying, and Caching OpenAPI Schema - Python
DESCRIPTION: Defines a function `custom_openapi` that checks for a cached schema on `app.openapi_schema`. If not found, it generates the default schema using `fastapi.openapi.utils.get_openapi`, adds a custom `x-logo` extension to the `info` object, caches the result on the app instance, and then returns the schema dictionary. Requires `fastapi.openapi.utils.get_openapi`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/extending-openapi.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi.openapi.utils import get_openapi

def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema

    openapi_schema = get_openapi(
        title="Custom OpenAPI",
        version="2.5.0",
        routes=app.routes,
    )
    openapi_schema["info"]["x-logo"] = {
        "url": "https://fastapi.tiangolo.com/img/logo-mask.png"
    }
    app.openapi_schema = openapi_schema
    return openapi_schema
```

----------------------------------------

TITLE: OpenAPI JSON Schema with Proxy Path
DESCRIPTION: This JSON snippet is an example of an OpenAPI schema with the server URL set for proxy path prefix use. It's crucial for documentation UI to correctly reflect the proxy path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "openapi": "3.1.0",
    // More stuff here
    "servers": [
        {
            "url": "/api/v1"
        }
    ],
    "paths": {
            // More stuff here
    }
}
```

----------------------------------------

TITLE: Creating HTML Responses in FastAPI Using HTMLResponse
DESCRIPTION: Shows how to return HTML content from a FastAPI endpoint by setting HTMLResponse as the response_class parameter in the route decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return """<html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
```

----------------------------------------

TITLE: Query Parameter with Max Length Validation
DESCRIPTION: This snippet defines a query parameter `q` with a maximum length of 50 characters using the `Query` class. The default value is set to None, making the parameter optional. The `max_length` parameter of `Query` enforces the length constraint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Optional[str] = Query(None, max_length=50)):
    return {"q": q}
```

----------------------------------------

TITLE: Adding Title Metadata to Query Parameter in FastAPI
DESCRIPTION: This snippet shows how to add a title to a query parameter for additional metadata in the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
q: Annotated[str | None, Query(title="Query string")] = None
```

----------------------------------------

TITLE: Creating a Virtual Environment with uv
DESCRIPTION: This snippet demonstrates how to create a virtual environment using `uv`. It assumes that `uv` is already installed and creates a virtual environment in the `.venv` directory by default.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_2

LANGUAGE: console
CODE:
```
$ uv venv
```

----------------------------------------

TITLE: Install Uvicorn and Gunicorn
DESCRIPTION: Installs Uvicorn with standard dependencies and Gunicorn using pip. This command prepares the environment for running FastAPI applications with Gunicorn as the process manager and Uvicorn as the worker.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/deployment/server-workers.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]" gunicorn

---> 100%
```

----------------------------------------

TITLE: Optional Query Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to define an optional query parameter in a FastAPI endpoint. The q parameter is defined as an optional string with a default value of None. This allows the endpoint to be called with or without the q parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, q: Optional[str] = None):
    if q:
        return {"item_id": item_id, "q": q}
    return {"item_id": item_id}
```

----------------------------------------

TITLE: OpenAPI JSON Schema Example
DESCRIPTION: This JSON schema represents a basic OpenAPI definition generated by FastAPI, including the OpenAPI version, API title, version, and a simple path definition for '/items/'. It demonstrates the structure of the automatically generated API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/items/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {



... 
```

----------------------------------------

TITLE: Importing Form in FastAPI
DESCRIPTION: Imports the `Form` class from the `fastapi` module. This is necessary to define form parameters in your API endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/request-forms.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, Form"
```

----------------------------------------

TITLE: Enum Class Creation for Path Parameters in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to create an Enum class in Python for use as a path parameter in FastAPI. Inheriting from both `str` and `Enum` ensures the API documentation knows the enum values are strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
from enum import Enum


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Importing WebSocket Exception Handler - Python FastAPI
DESCRIPTION: Shows how to import the WebSocketDisconnect exception class from FastAPI for handling client disconnection events.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/websockets.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import WebSocketDisconnect
```

----------------------------------------

TITLE: Declaring Optional Type with Union Operator (Python 3.10+)
DESCRIPTION: Shows the modern Python 3.10+ syntax using the pipe operator (`|`) to declare a type that can be a specific type (e.g., `str`) or `None`. This is equivalent to `Union[str, None]` or `Optional[str]` in older versions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_9

LANGUAGE: Python
CODE:
```
def say_hi(name: str | None):
    if name:
        print(f"Hello {name}")
    else:
        print("Hello World")
```

----------------------------------------

TITLE: Installing Backports for Python 3.6
DESCRIPTION: Install async-exit-stack and async-generator for Python 3.6 compatibility with yield dependencies
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
pip install async-exit-stack async-generator
```

----------------------------------------

TITLE: 구니콘과 유비콘 설치
DESCRIPTION: pip를 사용하여 uvicorn과 gunicorn을 설치합니다. uvicorn[standard]는 좋은 성능을 위한 추가 패키지입니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/server-workers.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install "uvicorn[standard]" gunicorn
```

----------------------------------------

TITLE: FastAPI Callback Router Creation
DESCRIPTION: This snippet demonstrates how to create an APIRouter instance specifically for defining callback routes. This router will then be used to document the structure of the external API that the main API will be calling back to.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"from typing import Optional

from fastapi import APIRouter, FastAPI, Query
from pydantic import BaseModel, Url

app = FastAPI()


invoices_callback_router = APIRouter()


class Invoice(BaseModel):
    id: str
    title: Optional[str] = None
    customer: str
    total: float


class InvoiceEvent(BaseModel):
    description: str
    paid: bool


class InvoiceEventReceived(BaseModel):
    ok: bool


@invoices_callback_router.post("/invoices/{$request.body.id}", response_model=InvoiceEventReceived)
async def invoice_callback(body: InvoiceEvent):
    pass


@app.post("/invoices", callbacks=invoices_callback_router.routes)
async def create_invoice(
    invoice: Invoice,
    callback_url: Url = Query(
        ...,
        description="URL to send notifications when the invoice is processed.",
    ),
):
    return {"id": invoice.id}"
```

----------------------------------------

TITLE: Function with Type Hints and Error
DESCRIPTION: This function demonstrates how type hints can help catch errors. The `age` parameter is incorrectly used as a string, leading to a type error that an editor can detect.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
def get_name_with_age(name: str, age: int):
    return name + " is " + age
```

----------------------------------------

TITLE: Query Parameter with Min and Max Length Validation
DESCRIPTION: Declares an optional query parameter `q` with both minimum and maximum length validations using the `Query` class. The `min_length` is set to 3 and `max_length` is set to 50.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Optional[str] = Query(default=None, min_length=3, max_length=50)):
    return {"q": q}
```

----------------------------------------

TITLE: Declaring Optional Body Parameters in FastAPI
DESCRIPTION: Shows how to make a Pydantic model parameter in a FastAPI path operation optional by setting its default value to `None`. This allows the request body to optionally include this object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-multiple-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.post("/items/{item_id}")
async def create_item(item_id: int, item: Item | None = None):
    return {"item_id": item_id, "item": item}
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This command shows how to install FastAPI using pip.  The `fastapi[standard]` option includes common, optional dependencies that provide additional functionality. Alternatively, `pip install fastapi` can be used for a minimal installation without these dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/index.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
"pip install \"fastapi[standard]\""
```

----------------------------------------

TITLE: Console Commands for Running Python App
DESCRIPTION: Terminal commands demonstrating how to run a Python FastAPI application directly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
$ python myapp.py
```

----------------------------------------

TITLE: Annotating with a Response Subclass in FastAPI
DESCRIPTION: This snippet demonstrates how to use a subclass of Response in the type annotation, which is also automatically handled by FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
@app.get("/teleport")
def get_teleport() -> RedirectResponse:
    return RedirectResponse(url="https://www.youtube.com/watch?v=dQw4w9WgXcQ")
```

----------------------------------------

TITLE: Importing GZipMiddleware in FastAPI
DESCRIPTION: Shows how to import the GZip compression middleware from FastAPI. This middleware enables automatic compression of responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi.middleware.gzip import GZipMiddleware
```

----------------------------------------

TITLE: Password Verification Function
DESCRIPTION: Implement secure password verification without directly storing passwords, using a hashing mechanism to compare credentials
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def fake_hash_password(password: str):
    return "fakehashed" + password
```

----------------------------------------

TITLE: Defining a List Field with Type Hints
DESCRIPTION: Demonstrates how to define a list field with type hints for the elements within the list. The `tags` attribute is explicitly defined as a list of strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-nested-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list[str] = []
```

----------------------------------------

TITLE: Sample .env file
DESCRIPTION: This is an example of a `.env` file containing environment variables used to configure the application.  Each line defines a variable assignment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_11

LANGUAGE: Bash
CODE:
```
ADMIN_EMAIL="deadpool@example.com"
APP_NAME="ChimichangApp"
```

----------------------------------------

TITLE: Python type hint for int
DESCRIPTION: Example of a type hint for an integer
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Updating Items with PUT Request and Pydantic Model
DESCRIPTION: This code extends the FastAPI application to handle a PUT request to update an item. It defines a Pydantic model `Item` to represent the structure of the item data in the request body. The `update_item` function receives the `item_id` as a path parameter and the `item` as a request body, returning a JSON response with the item's name and ID.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Path Parameter with Type Annotation
DESCRIPTION: Declares the type of the path parameter `item_id` as an integer using Python's type annotations. FastAPI uses this type information for data validation and automatic conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: PATH variable before virtual environment activation (Linux/macOS)
DESCRIPTION: This shows the typical PATH variable content before activating a virtual environment on Linux or macOS systems. It lists the directories where the system searches for executable programs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_23

LANGUAGE: text
CODE:
```
/usr/bin:/bin:/usr/sbin:/sbin
```

----------------------------------------

TITLE: Path Parameter Containing a Path
DESCRIPTION: This example shows how to define a path parameter that can contain a file path using Starlette's path converter. The `:path` suffix in the path definition indicates that the parameter should match any path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
    return {"file_path": file_path}
```

----------------------------------------

TITLE: Installing the required dependency for form handling in FastAPI
DESCRIPTION: Command to install the python-multipart library which is required for handling form data in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-form-models.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Creating a custom GzipRequest class
DESCRIPTION: Creates a custom `GzipRequest` class that overrides the `Request.body()` method to decompress the body if a gzip header is present. If the header does not contain `gzip`, it does not attempt to decompress the body, allowing the same route to handle both compressed and uncompressed requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-request-and-route.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Callable

from fastapi import FastAPI
from fastapi.routing import APIRoute
from starlette.requests import Request
from starlette.responses import JSONResponse


class GzipRequest(Request):
    async def body(self) -> bytes:
        if not hasattr(self, "_body"):
            body = await super().body()
            if "gzip" in self.headers.get("Content-Encoding", ""):
                import gzip

                body = gzip.decompress(body)
            self._body = body
        return self._body
```

----------------------------------------

TITLE: Modifying Return Data in FastAPI
DESCRIPTION: This code snippet illustrates how to modify the returned data in a FastAPI application. It changes the 'item_name' field to 'item_price'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

LANGUAGE: Python
CODE:
```
... "item_name": item.name ...
```

LANGUAGE: Python
CODE:
```
... "item_price": item.price ...
```

----------------------------------------

TITLE: Declaring Optional Type with typing.Optional (Python 3.8+)
DESCRIPTION: Demonstrates declaring a type that can be `None` using `typing.Optional`, specifically highlighting its use in Python 3.8+. This requires importing `Optional` from the `typing` module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import Optional

def say_hi(name: Optional[str]):
    if name:
        print(f"Hello {name}")
    else:
        print("Hello World")
```

----------------------------------------

TITLE: Returning a Dictionary with Item Price
DESCRIPTION: This code snippet demonstrates how to return a dictionary containing the item price. It shows how to access the `price` attribute of an `item` object and include it in the returned dictionary.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/he/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
... "item_name": item.name ...
```

LANGUAGE: Python
CODE:
```
... "item_price": item.price ...
```

----------------------------------------

TITLE: JWT Token Scopes Handling
DESCRIPTION: This snippet shows how to modify the token path operation to return the requested scopes in the JWT token. It uses OAuth2PasswordRequestForm, which includes a scopes attribute (a list of strings) containing each scope to be received in the request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/security/oauth2-scopes.md#_snippet_1

LANGUAGE: Python
CODE:
```
access_token = create_access_token(
    data={"sub": user.username, "scopes": form_data.scopes},
    expires_delta=access_token_expires,
)
```

----------------------------------------

TITLE: Declaring a Tuple and Set (Python 3.9+)
DESCRIPTION: This snippet demonstrates how to declare a tuple with specific types for each element and a set with a specific type for all elements using Python 3.9+ syntax. `tuple[int, int, str]` defines a tuple with two integers and a string, while `set[bytes]` defines a set containing bytes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_7

LANGUAGE: Python
CODE:
```
items_t: tuple[int, int, str] = (1, 2, "foo")
items_s: set[bytes] = {b"hallo", b"welt"}
```

----------------------------------------

TITLE: Explicitly running Python (Windows)
DESCRIPTION: Example of explicitly running python by specifying the full path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/environment-variables.md#_snippet_8

LANGUAGE: console
CODE:
```
$ C:\opt\custompython\bin\python
```

----------------------------------------

TITLE: Example User Response JSON
DESCRIPTION: This JSON object represents the typical response body returned by a secured endpoint, such as `/users/me/`, after a user has successfully authenticated using OAuth2. It contains basic profile information for the authenticated user.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_7

LANGUAGE: JSON
CODE:
```
{
  "username": "johndoe",
  "email": "johndoe@example.com",
  "full_name": "John Doe",
  "disabled": false
}
```

----------------------------------------

TITLE: Implementing Async Tests with pytest.mark.anyio and HTTPX
DESCRIPTION: This code snippet demonstrates how to write async tests for a FastAPI application using pytest.mark.anyio decorator and HTTPX's AsyncClient. The test makes an async request to the application's endpoint and verifies the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/async-tests.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import pytest
from httpx import AsyncClient

from .main import app


@pytest.mark.anyio
async def test_root():
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.get("/")
    
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Creating Project Directory Structure in Bash
DESCRIPTION: Commands to create a directory structure for a new Python project, including a 'code' directory in the home folder and a project-specific directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ cd
$ mkdir code
$ cd code
$ mkdir awesome-project
$ cd awesome-project
```

----------------------------------------

TITLE: Dockerfile for Standard FastAPI App Structure
DESCRIPTION: Defines a Docker image for a FastAPI application using a standard './app' directory structure. It sets the working directory, copies dependencies first to leverage build cache, installs them, copies the application code, and specifies the default command to run the application using uvicorn. An alternative CMD for running behind a proxy is commented out but included.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

----------------------------------------

TITLE: Initializing FastAPI with API Metadata - Python
DESCRIPTION: This code snippet demonstrates how to initialize a FastAPI application and set API metadata such as title, summary, description, version, terms_of_service, contact, and license_info. These metadata fields are used in the OpenAPI specification and automatic API documentation interfaces. The description field supports Markdown.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/metadata.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"""Metadata.
"""

from fastapi import FastAPI

app = FastAPI(
    title="My Super Project",
    summary="Very nice project with automatic docs, using Pydantic and FastAPI.",
    description="""
        ## My Super Project

        Very nice project with automatic docs, using **Pydantic** and _FastAPI_.
        """,
    version="0.1.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://example.com/contact/",
        "email": "dp@example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)


@app.get("/")
async def read_root():
    return {"Hello": "World"}

```

----------------------------------------

TITLE: Restricting Extra Form Fields in FastAPI with Pydantic
DESCRIPTION: This code snippet showcases how to use Pydantic's model configuration to prohibit extra fields in form data. By setting `extra = "forbid"` in the `Config` class within the Pydantic model, FastAPI will raise an error if the client sends any form fields that are not defined in the model.  It illustrates how to prevent unexpected data from being processed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-form-models.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Form

from pydantic import BaseModel, ConfigDict


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    model_config = ConfigDict(extra='forbid')


app = FastAPI()


@app.post("/items/")
async def create_item(
    item: Annotated[Item, Form(...)],
):
    return item
```

----------------------------------------

TITLE: Obtaining Enum Value
DESCRIPTION: This example shows how to obtain the actual string value of an Enum member using `.value`. This is useful when you need to work with the string representation of the Enum.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_7

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name == ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    return {"model_name": model_name, "message": f"Have some residuals? {model_name.value}"}
```

----------------------------------------

TITLE: Initializing New Language Translation Directory - Console
DESCRIPTION: Command to generate a new translation directory for a new language using the docs.py script. Shows the process of creating initial translation files for Creole (ht).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_9

LANGUAGE: console
CODE:
```
$ python ./scripts/docs.py new-lang ht

Successfully initialized: docs/ht
```

----------------------------------------

TITLE: Multiple Files with Metadata - Python FastAPI
DESCRIPTION: Example of handling multiple file uploads with additional metadata parameters
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
@app.post("/files/")
async def create_files(
    files: list[bytes] = File(description="Multiple files as bytes")
):

@app.post("/uploadfiles/")
async def create_upload_files(
    files: list[UploadFile] = File(description="Multiple files as UploadFile"),
    token: str = Form()
):
```

----------------------------------------

TITLE: Custom OpenAPI Content Type with Pydantic v2
DESCRIPTION: Demonstrates how to use a Pydantic model to define a custom content type (YAML) in the OpenAPI schema, even when the request body is not parsed as JSON. It shows how to manually generate the JSON schema from the Pydantic model and use it in the OpenAPI definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/path-operation-advanced-configuration.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import ClassVar

from fastapi import FastAPI, Header
from pydantic import BaseModel
import yaml

app = FastAPI()


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    model_config: ClassVar[dict[str, object]] = {
        "json_schema_extra": {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            ]
        }
    }


@app.post("/items/")
async def create_item(
    data: bytes,
    content_type: str = Header(None),
):
    if content_type == "application/yaml":
        body = yaml.safe_load(data)
    else:
        body = data
    item = Item.model_validate(body)
    return item
```

----------------------------------------

TITLE: Type-Annotated Path Parameter with Integer Validation
DESCRIPTION: Demonstrates type annotation for path parameters, enabling automatic type conversion and validation in FastAPI
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.get("/items/{item_id}")
def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining a Function Without Type Hints - Python
DESCRIPTION: A basic Python function that takes first and last names, capitalizes them, and concatenates them. This example is used to demonstrate the lack of editor support (like autocompletion) when type hints are absent. The highlighted line shows the string manipulation logic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_full_name(first_name, last_name):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Install FastAPI with standard extras using pip
DESCRIPTION: This command installs the FastAPI framework with the 'standard' extras using pip.  The 'standard' extras include commonly used dependencies that enhance FastAPI's functionality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_10

LANGUAGE: bash
CODE:
```
pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Initializing Translation Configuration in YAML
DESCRIPTION: This YAML snippet defines the inheritance structure for a new language translation in the FastAPI documentation. It inherits from the English version of mkdocs.yml.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/management-tasks.md#2025-04-21_snippet_2

LANGUAGE: YAML
CODE:
```
INHERIT: ../en/mkdocs.yml
```

----------------------------------------

TITLE: Declaring Enum Path Parameter in FastAPI (Python)
DESCRIPTION: This snippet shows how to declare a path parameter using the Enum class created earlier. The `model_name` parameter is typed as `ModelName`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    return {"model_name": model_name, "model_name_value": model_name.value}
```

----------------------------------------

TITLE: Cleanup After Response Delivery
DESCRIPTION: Shows the code that is executed after the response has been delivered, typically used for cleanup operations like closing database connections.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_2

LANGUAGE: Python
CODE:
```
db = SessionLocal()
try:
    yield db
finally:
    db.close()
```

----------------------------------------

TITLE: Multiple Path and Query Parameters in FastAPI (Python)
DESCRIPTION: This code snippet illustrates how to use multiple path and query parameters in a FastAPI endpoint. It shows that FastAPI can differentiate between path and query parameters based on their declaration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/query-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_user_item(
    item_id: int, needy: str, q: Union[str, None] = None, short: bool = False
):
    item = {"item_id": item_id, "needy": needy}
    if q:
        item.update({"q": q})
    if not short:
        item.update(
            {"description": "This is an amazing item that has a long description"}
        )
    return item
```

----------------------------------------

TITLE: Custom OpenAPI Content Type with Pydantic v2
DESCRIPTION: Demonstrates how to use a Pydantic model to define a custom content type (YAML) in the OpenAPI schema, even when the request body is not parsed as JSON. It shows how to manually generate the JSON schema from the Pydantic model and use it in the OpenAPI definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/path-operation-advanced-configuration.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import ClassVar

from fastapi import FastAPI, Header
from pydantic import BaseModel
import yaml

app = FastAPI()


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    model_config: ClassVar[dict[str, object]] = {
        "json_schema_extra": {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            ]
        }
    }


@app.post("/items/")
async def create_item(
    data: bytes,
    content_type: str = Header(None),
):
    if content_type == "application/yaml":
        body = yaml.safe_load(data)
    else:
        body = data
    item = Item.model_validate(body)
    return item
```

----------------------------------------

TITLE: Returning Direct Response Objects in FastAPI
DESCRIPTION: Example showing how to directly return a Response object with custom content, status code, and headers. This bypasses model validation but gives complete control over the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()


@app.get("/legacy/")
def get_legacy_data():
    data = """
    <?xml version="1.0"?>
    <shampoo>
    <Header>
        Apply shampoo here.
    </Header>
    <Body>
        You'll have to use soap here.
    </Body>
    </shampoo>
    """
    return Response(content=data, media_type="application/xml")
```

----------------------------------------

TITLE: Mounting Flask App with WSGIMiddleware in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to use `WSGIMiddleware` to mount a Flask application at a specific path (`/v1`) within a FastAPI application. It shows the necessary imports, the creation of both Flask and FastAPI apps, and the mounting step. A separate FastAPI route is also included to show how both frameworks can coexist.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/wsgi.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.wsgi import WSGIMiddleware
from flask import Flask

# Create Flask app
flask_app = Flask(__name__)

@flask_app.route("/")
def flask_main():
    return "Hello, World from Flask!"

# Create FastAPI app
app = FastAPI()

# Mount Flask app at /v1
app.mount("/v1", WSGIMiddleware(flask_app))

# Add a route to FastAPI app at /v2
@app.get("/v2")
def read_main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Delete Single Hero Endpoint
DESCRIPTION: Define a FastAPI DELETE endpoint `/heroes/{hero_id}` to delete a single Hero by their ID. It uses the `SessionDep` dependency, fetches the hero with `session.get`, deletes it using `session.delete`, and commits the transaction, returning a 404 error if the hero is not found.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends, HTTPException
from sqlmodel import Session

@app.delete("/heroes/{hero_id}")
def delete_hero(*, session: SessionDep, hero_id: int):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    session.delete(hero)
    session.commit()
    return {"ok": True}
```

----------------------------------------

TITLE: Running FastAPI application with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, a production-ready ASGI server. The `--reload` flag enables automatic server restarts upon code changes, which is useful for development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_4

LANGUAGE: console
CODE:
```
uvicorn main:app --reload
```

----------------------------------------

TITLE: Type Hints with String Concatenation
DESCRIPTION: Shows type hints usage with string operations and age conversion to string.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def get_name_with_age(name: str, age: int):
    name_with_age = name + " is this old: " + str(age)
    return name_with_age
```

----------------------------------------

TITLE: Declaring Dict Type with Type Hints in Python 3.9+
DESCRIPTION: This example demonstrates how to declare a dictionary variable with type hints for both keys and values in Python 3.9 and above.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
prices: dict[str, float] = {"apple": 0.4, "banana": 0.5}
```

----------------------------------------

TITLE: Optional Query Parameter in FastAPI (Python)
DESCRIPTION: This code snippet shows how to define an optional query parameter in FastAPI using `Union[str, None]`. The `q` parameter is optional and defaults to `None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/query-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, q: Union[str, None] = None):
    if q:
        return {"item_id": item_id, "q": q}
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Leyendo Héroes con FastAPI y SQLModel en Python
DESCRIPTION: Implementa un endpoint GET para leer todos los héroes de la base de datos, devolviendo una lista de HeroPublic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/heroes/", response_model=list[HeroPublic])
def read_heroes():
    with Session(engine) as session:
        heroes = session.exec(select(Hero)).all()
        return heroes
```

----------------------------------------

TITLE: Custom Validation for Query Parameters using Pydantic AfterValidator in FastAPI (Python 3.10+)
DESCRIPTION: Implements custom validation for an item ID parameter using Pydantic's AfterValidator. The validator checks if the item ID starts with either 'isbn-' or 'imdb-', enforcing a specific format pattern.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
import random
from typing import Annotated

from fastapi import FastAPI, Query
from pydantic import AfterValidator

app = FastAPI()

data = {
    "imdb-tt0371724": "The Hitchhiker's Guide to the Galaxy",
    "isbn-9780575079212": "The Restaurant at the End of the Universe",
    "imdb-tt0297969": "A Hitchhiker's Guide to the Galaxy (original TV series)",
}


def validate_item_id(value: str) -> str:
    if not value.startswith(("isbn-", "imdb-")):
        raise ValueError("Not a valid ISBN or IMDB ID")
    return value


@app.get("/items/{item_id}")
async def get_item_info(
    item_id: Annotated[str | None, AfterValidator(validate_item_id)] = None,
):
    if item_id is None:
        # Provide a random item
        id, name = random.choice(list(data.items()))
        return {"id": id, "name": name, "description": "Random Item"}
    name = data.get(item_id)
    return {"id": item_id, "name": name, "description": "Specific Item"}
```

----------------------------------------

TITLE: APIRouter Definition
DESCRIPTION: Defines an APIRouter instance with a single path operation. This router is intended to be shared across multiple projects without modification.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter()


@router.get("/users", tags=["users"])
async def list_users():
    return [{"username": "Foo"}, {"username": "Bar"}]
```

----------------------------------------

TITLE: Python Function with Type Conversion
DESCRIPTION: This code corrects the error from the previous snippet by explicitly converting the integer `age` to a string using `str(age)` before concatenating it with the other strings. This resolves the potential TypeError.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"""def get_name_with_age(name: str, age: int):
    return name + " is " + str(age)
""
```

----------------------------------------

TITLE: Dependency with yield and HTTPException
DESCRIPTION: Shows how to raise an `HTTPException` within the exit code of a dependency that uses `yield`.  This allows dependencies to handle errors and return appropriate HTTP error responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_3

LANGUAGE: python
CODE:
```
async def dependency_a():
    try:
        yield
    except Exception:
        raise HTTPException(status_code=400, detail="From dependency_a")


async def dependency_b(background_tasks: BackgroundTasks, dep_a=Depends(dependency_a)):
    try:
        yield
    finally:
        background_tasks.add_task(after_response)


async def after_response():
    raise HTTPException(status_code=500, detail="From after_response")
```

LANGUAGE: python
CODE:
```
async def dependency_a():
    yield
    raise HTTPException(status_code=400, detail="From dependency_a")
```

----------------------------------------

TITLE: Setting Environment Variable Inline for Python Execution
DESCRIPTION: This snippet demonstrates how to set an environment variable directly in the command line when executing a Python script. The environment variable is only available for that specific execution of the script.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/environment-variables.md#_snippet_5

LANGUAGE: Shell
CODE:
```
// Создайте переменную окружения MY_NAME в строке для этого вызова программы
$ MY_NAME="Wade Wilson" python main.py

// Теперь она может прочитать переменную окружения

Hello Wade Wilson from Python

// После этого переменная окружения больше не существует
$ python main.py

Hello World from Python
```

----------------------------------------

TITLE: Dict Unpacking with Pydantic Models
DESCRIPTION: Demonstrates Python dict unpacking with Pydantic models, showing how to create new model instances from existing ones.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/extra-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
UserInDB(**user_dict)

UserInDB(
    username="john",
    password="secret",
    email="john.doe@example.com",
    full_name=None,
)
```

----------------------------------------

TITLE: Dict to Dependency: Python
DESCRIPTION: This code demonstrates how to pass a `dict` as a dependency using FastAPI. The `commons` dictionary is passed to the endpoint function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"q: str | None = None"
```

----------------------------------------

TITLE: Overriding Default OpenAPI Method - Python
DESCRIPTION: Assigns the previously defined `custom_openapi` function to the `app.openapi` attribute. This replaces the default method FastAPI uses internally to generate the schema, ensuring the custom logic is executed when the `/openapi.json` or documentation endpoints (like `/docs` or `/redoc`) are accessed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/extending-openapi.md#_snippet_2

LANGUAGE: python
CODE:
```
app.openapi = custom_openapi
```

----------------------------------------

TITLE: Building Docker Image with Poetry (Multi-Stage)
DESCRIPTION: This Dockerfile demonstrates a multi-stage build process for a FastAPI application managed by Poetry. The first stage installs Poetry and exports the dependencies to a `requirements.txt` file. The second, final stage, copies the generated requirements, installs them using pip, copies the application code, and sets the command to run Uvicorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_7

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9 as requirements-stage

WORKDIR /tmp

RUN pip install poetry

COPY ./pyproject.toml ./poetry.lock* /tmp/

RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

FROM python:3.9

WORKDIR /code

COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Running a Python Script
DESCRIPTION: This command executes a Python script named main.py. It's used to run the application within the current environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_30

LANGUAGE: python
CODE:
```
python main.py
```

----------------------------------------

TITLE: Installing Gunicorn and Uvicorn
DESCRIPTION: Install Gunicorn and Uvicorn with the standard extras using pip.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/server-workers.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]" gunicorn

---> 100%
```

----------------------------------------

TITLE: Importing Pydantic Field in Python
DESCRIPTION: This snippet demonstrates how to import the `Field` class from the `pydantic` library. This import is necessary to use `Field` for defining validations and metadata within Pydantic models in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-fields.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"from pydantic import Field"
```

----------------------------------------

TITLE: Reading a File Using Context Manager in Python
DESCRIPTION: Demonstrates how to use a context manager with the 'with' statement to read a file in Python. This ensures the file is properly closed after reading, even if exceptions occur.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
with open("./somefile.txt") as f:
    contents = f.read()
    print(contents)
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This snippet shows how to declare an integer parameter in a FastAPI function using type hints. FastAPI uses this declaration for editor support, data validation, and data conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Handling Duplicate Headers in FastAPI
DESCRIPTION: This example demonstrates how to declare a header that can appear multiple times. The values are received as a Python list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/header-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def read_items(x_token: Annotated[list[str] | None, Header()] = None):
```

----------------------------------------

TITLE: Using Enums for Path Parameters in FastAPI
DESCRIPTION: This code demonstrates how to use Python's `Enum` to define a set of allowed values for a path parameter in FastAPI.  The `Enum` class is used to create a custom type, and the route handler utilizes this type to enforce validation on the path parameter, restricting it to one of the defined enum values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from enum import Enum

from fastapi import FastAPI


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"


app = FastAPI()


@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}

    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Define Synchronous Route Function in FastAPI
DESCRIPTION: Defines a synchronous route function in FastAPI that handles GET requests to the root URL ('/'). It returns a dictionary which FastAPI automatically converts to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Setting Root Path via CLI
DESCRIPTION: Shows how to start the FastAPI application using the `fastapi run` command with the `--root-path` option to specify the path prefix.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_2

LANGUAGE: Console
CODE:
```
$ fastapi run main.py --root-path /api/v1
```

----------------------------------------

TITLE: FastAPI: User Model Definition
DESCRIPTION: This snippet defines a User model using Pydantic. It illustrates how Pydantic can be used to declare data models for request bodies and other parts of the application, ensuring type safety and data validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from typing import Optional

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from pydantic import BaseModel

app = FastAPI()


class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None
```

----------------------------------------

TITLE: Translating Note with Technical Details Blocks
DESCRIPTION: This snippet illustrates the translation of a 'note' block with specific content ('Technical Details'). The English term 'Technical Details' is translated to 'Detalles Técnicos' in Spanish, separated by a vertical bar.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/llm-prompt.md#_snippet_5

LANGUAGE: Text
CODE:
```
/// note | Detalles Técnicos
```

----------------------------------------

TITLE: Dependency Injection with yield
DESCRIPTION: Demonstrates how the value yielded from a dependency is injected into the path operation function or other dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Installing FastAPI Optional Dependencies
DESCRIPTION: Command to install all optional dependencies for FastAPI using pip. This includes extensions for email validation, settings management, additional types, HTTP client, templating, multipart parsing, and server support.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/hu/docs/index.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
pip install "fastapi[all]"
```

----------------------------------------

TITLE: Including APIRouter with Custom Prefix, Tags, Dependencies, and Responses
DESCRIPTION: Includes an APIRouter with a custom prefix, tags, dependencies, and responses. This allows customization of the router's behavior without modifying the original router definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_17

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

from .internal import admin
from .routers import items, users

app = FastAPI()

app.include_router(users.router)
app.include_router(items.router)
app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)
```

----------------------------------------

TITLE: Import Query from FastAPI
DESCRIPTION: This snippet imports the `Query` class from the `fastapi` module.  `Query` is used to define additional validations and metadata for query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()
```

----------------------------------------

TITLE: Defining an Async Path Operation Function in FastAPI
DESCRIPTION: This code snippet demonstrates how to define an asynchronous path operation function in FastAPI. This function is called by FastAPI whenever it receives a GET request to the `/` URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Using ORJSONResponse in FastAPI
DESCRIPTION: This code snippet demonstrates how to use `ORJSONResponse` for improved performance by specifying it in the *path operation decorator*. It imports the `ORJSONResponse` class and declares it in the decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()


@app.get("/items/", response_class=ORJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Dependency Flow Diagram
DESCRIPTION: Mermaid sequence diagram showing the execution flow of dependencies with yield, including exception handling and background tasks.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_3

LANGUAGE: mermaid
CODE:
```
sequenceDiagram

participant client as Client
participant handler as Exception handler
participant dep as Dep with yield
participant operation as Path Operation
participant tasks as Background tasks

    Note over client,operation: Can raise exceptions, including HTTPException
    client ->> dep: Start request
    Note over dep: Run code up to yield
    opt raise Exception
        dep -->> handler: Raise Exception
        handler -->> client: HTTP error response
    end
    dep ->> operation: Run dependency, e.g. DB session
    opt raise
        operation -->> dep: Raise Exception (e.g. HTTPException)
        opt handle
            dep -->> dep: Can catch exception, raise a new HTTPException, raise other exception
        end
        handler -->> client: HTTP error response
    end

    operation ->> client: Return response to client
    Note over client,operation: Response is already sent, can't change it anymore
    opt Tasks
        operation -->> tasks: Send background tasks
    end
    opt Raise other exception
        tasks -->> tasks: Handle exceptions in the background task code
    end
```

----------------------------------------

TITLE: Using Advanced Data Types in FastAPI Path Operations
DESCRIPTION: This example demonstrates how to use complex data types like UUID, datetime, and others in a FastAPI path operation. The function parameters automatically receive the correct data types after conversion from request data, allowing for natural operations like date arithmetic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/extra-data-types.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from datetime import datetime, time, timedelta
from uuid import UUID

from fastapi import Body, FastAPI

app = FastAPI()


@app.put("/items/{item_id}")
async def read_items(
    item_id: UUID,
    start_datetime: datetime | None = Body(default=None),
    end_datetime: datetime | None = Body(default=None),
    repeat_at: time | None = Body(default=None),
    process_after: timedelta | None = Body(default=None),
):
    start_process = start_datetime + process_after
    duration = end_datetime - start_process
    return {
        "item_id": item_id,
        "start_datetime": start_datetime,
        "end_datetime": end_datetime,
        "repeat_at": repeat_at,
        "process_after": process_after,
        "start_process": start_process,
        "duration": duration,
    }
```

----------------------------------------

TITLE: Update Hero Endpoint (PATCH)
DESCRIPTION: Defines an HTTP PATCH endpoint `/heroes/{hero_id}` to update an existing hero by ID. It accepts a `HeroUpdate` model, retrieves the existing hero, updates its attributes using `sqlmodel_update` with `exclude_unset=True` to apply only provided fields, and returns the updated hero using `response_model=HeroPublic`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_9

LANGUAGE: python
CODE:
```
from fastapi import Depends, HTTPException
from sqlmodel import Session

# Assume get_session, Hero, HeroUpdate, HeroPublic are defined

@app.patch("/heroes/{hero_id}", response_model=HeroPublic)
def update_hero(*, session: Session = Depends(get_session), hero_id: int, hero: HeroUpdate):
    db_hero = session.get(Hero, hero_id)
    if not db_hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    hero_data = hero.dict(exclude_unset=True)
    db_hero.sqlmodel_update(hero_data)
    session.add(db_hero)
    session.commit()
    session.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Class Definition
DESCRIPTION: Defines a simple `Person` class with a `name` attribute. This class is later used as a type hint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_17

LANGUAGE: Python
CODE:
```
class Person:
    name: str
```

----------------------------------------

TITLE: FastAPI OpenAPI Schema with Multiple Servers
DESCRIPTION: This JSON snippet shows the resulting OpenAPI schema when additional servers are configured. It includes the auto-generated server from root_path at the beginning, followed by custom servers for staging and production environments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
{
    "openapi": "3.1.0",
    // More stuff here
    "servers": [
        {
            "url": "/api/v1"
        },
        {
            "url": "https://stag.example.com",
            "description": "Staging environment"
        },
        {
            "url": "https://prod.example.com",
            "description": "Production environment"
        }
    ],
    "paths": {
            // More stuff here
    }
}
```

----------------------------------------

TITLE: Optional Query Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to declare optional query parameters in FastAPI using the `Optional` type hint or setting a default value of `None`. The `q` parameter is optional, and if not provided in the query, it will be `None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10, q: Union[str, None] = None):
    if q:
        return {"items": [{"name": "Foo"}, {"name": "Bar"}], "q": q}
    return {"items": [{"name": "Foo"}, {"name": "Bar"}]}
```

----------------------------------------

TITLE: Field Additional Arguments in Schema
DESCRIPTION: Shows how to add extra information to individual model fields using Field with additional arguments, which are added as annotations without validation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class Item(BaseModel):
    name: str = Field(example="Foo")
    description: Optional[str] = Field(
        default=None,
        example="A very nice Item"
    )
```

----------------------------------------

TITLE: Secure Username and Password Validation with FastAPI
DESCRIPTION: This snippet demonstrates how to securely validate a username and password in FastAPI using Python's `secrets` module to prevent timing attacks.  It converts the username and password to bytes using UTF-8 encoding and compares them using `secrets.compare_digest()` to ensure the credentials match predefined values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
import secrets

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

security = HTTPBasic()


def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):
    correct_username = secrets.compare_digest(credentials.username, "stanleyjobson")
    correct_password = secrets.compare_digest(credentials.password, "swordfish")
    if not (correct_username and correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials.username


@app.get("/users/me")
def read_current_user(username: str = Depends(get_current_username)):
    return {"username": username}
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.10+)
DESCRIPTION: This example demonstrates a Pydantic model definition with type annotations. It shows how to define a class with attributes and their corresponding types, enabling data validation and conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_19

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial011_py310.py!}
```

----------------------------------------

TITLE: Translation Admonition Section Examples in Markdown
DESCRIPTION: Examples demonstrating correct and incorrect ways to format translation admonitions, including proper keyword preservation and optional localized labels
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/management-tasks.md#2025-04-21_snippet_1

LANGUAGE: Markdown
CODE:
```
/// tip

This is a tip.

///

/// tip

Esto es un consejo.

///

/// consejo

Esto es un consejo.

///

/// tip | consejo

Esto es un consejo.

///
```

----------------------------------------

TITLE: Updated PATH Variable after Python Installation (Windows)
DESCRIPTION: This example shows how the PATH variable might be updated after installing Python in a custom directory on Windows. The Python installation directory is appended to the existing PATH.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/environment-variables.md#_snippet_9

LANGUAGE: plaintext
CODE:
```
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32;C:\opt\custompython\bin
```

----------------------------------------

TITLE: Upgrading pip
DESCRIPTION: This command upgrades the pip package installer to the latest version within the active virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_8

LANGUAGE: Shell
CODE:
```
$ python -m pip install --upgrade pip

---> 100%
```

----------------------------------------

TITLE: Installing httpx for testing
DESCRIPTION: Shows how to install the httpx library, which is required for using TestClient.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/testing.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install httpx
```

----------------------------------------

TITLE: Convert Pydantic Model with Datetime using jsonable_encoder (Python)
DESCRIPTION: This snippet demonstrates a FastAPI path operation that receives a Pydantic model containing a `datetime` field. It uses `jsonable_encoder` to convert the model instance into a dictionary, automatically serializing the `datetime` object into an ISO 8601 string, making it suitable for storage in a simple dictionary like `fake_db`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/encoder.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import datetime
from typing import Optional
from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel

app = FastAPI()

fake_db = {}

class Item(BaseModel):
    title: str
    timestamp: datetime
    description: Optional[str] = None

@app.put("/items/{item_id}")
def update_item(item_id: str, item: Item):
    update_item_encoded = jsonable_encoder(item)
    fake_db[item_id] = update_item_encoded
    return {"updated_item": update_item_encoded}
```

----------------------------------------

TITLE: Declaring Union Types with typing.Union (Python 3.8+)
DESCRIPTION: Shows how to declare a variable that can be one of several types using the `Union` type from the `typing` module, applicable for Python 3.8 and later (including 3.10, though `|` is preferred there).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial008b.py!}
```

----------------------------------------

TITLE: List with Type Parameters as Field
DESCRIPTION: Demonstrates how to declare a list with a specific type parameter (e.g., a list of strings) in a Pydantic model.  This allows for more specific type validation of the list elements.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-nested-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import List, Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: List[str] = []
```

----------------------------------------

TITLE: Marking test function as asynchronous with pytest
DESCRIPTION: The `@pytest.mark.anyio` decorator marks a test function as asynchronous, allowing it to use `await` and other asynchronous operations. This informs pytest that the function should be invoked in an asynchronous context.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/async-tests.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"{* ../../docs_src/async_tests/test_main.py hl[7] *}"
```

----------------------------------------

TITLE: Defining a GET Path Operation Decorator
DESCRIPTION: Defines a path operation using the `@app.get()` decorator, which tells FastAPI that the function below it is responsible for handling requests to the specified path using the GET method.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Python List Type Hint with typing
DESCRIPTION: This example demonstrates how to use the `List` type from the `typing` module to specify that a variable is a list of strings (`List[str]`). This allows editors to provide specific support for string operations when working with the list elements.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
"""from typing import List

def process_items(items: List[str]):
    for item in items:
        print(item)
""
```

----------------------------------------

TITLE: Custom OpenAPI Content Type with Pydantic v1 in FastAPI
DESCRIPTION: Demonstrates how to use a Pydantic model to define the JSON schema for data received in a custom content type (YAML) and validate the data against the schema, bypassing FastAPI's built-in JSON parsing and validation (Pydantic v1 version).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/path-operation-advanced-configuration.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Optional

import yaml
from fastapi import FastAPI, Header, Request
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None


app = FastAPI()


@app.post("/items/", openapi_extra={
    "requestBody": {
        "content": {
            "application/yaml": {
                "schema": Item.schema()
            }
        }
    }
})
async def create_item(request: Request, x_custom_header: Optional[str] = Header(None)):
    content = await request.body()
    data = yaml.safe_load(content)
    item = Item.parse_obj(data)
    return item
```

----------------------------------------

TITLE: Additional Media Types for Main Response
DESCRIPTION: This example demonstrates how to add an additional media type (`image/png`) to a path operation, allowing it to return either a JSON object or a PNG image. It uses `FileResponse` to return the image directly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/additional-responses.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from fastapi.responses import FileResponse
from pydantic import BaseModel

app = FastAPI()


class Image(BaseModel):
    url: str
    name: str


@app.get(
    "/items/{item_id}/image",
    responses={
        200: {
            "content": {"image/png": {}}
        }
    },
    response_model=Union[Image, None],
)
async def get_image(item_id: str):
    if item_id == "foo":
        return {"url": "http://example.com/foo.png", "name": "Foo"}
    else:
        return FileResponse("image.png", media_type="image/png")
```

----------------------------------------

TITLE: Calling Settings function
DESCRIPTION: The following python function exemplifies retrieving settings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
"Settings()"
```

----------------------------------------

TITLE: Using RequestValidationError body in FastAPI
DESCRIPTION: This snippet demonstrates how to access the received body with invalid data from a RequestValidationError in FastAPI. This can be useful for logging, debugging, or returning the body to the user.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field

app = FastAPI()


class Item(BaseModel):
    title: str
    size: int = Field(..., gt=0, lt=10)


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content=jsonable_encoder({"detail": exc.errors(), "body": exc.body}),
    )
```

----------------------------------------

TITLE: Query Parameter with Default Value and Minimum Length
DESCRIPTION: This snippet defines a query parameter `q` with a default value and a minimum length validation. The `Query` class is used to specify both the default value and the `min_length` constraint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: str = Query("fixedquery", min_length=3)):
    return {"q": q}
```

----------------------------------------

TITLE: Using Enums for Tags in FastAPI
DESCRIPTION: Shows how to use Python Enums to define consistent tags for FastAPI path operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from enum import Enum

class Tags(Enum):
    items = "items"
    users = "users"

@app.get("/items/", tags=[Tags.items])
```

----------------------------------------

TITLE: Using RedirectResponse Directly in FastAPI
DESCRIPTION: Example showing how to directly return a RedirectResponse to redirect users to another URL. By default, this uses a 307 status code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/typer")
async def redirect_typer():
    return RedirectResponse("https://typer.tiangolo.com")
```

----------------------------------------

TITLE: Making a GET request with Requests library in Python
DESCRIPTION: This code snippet demonstrates how to make a simple GET request to a URL using the Requests library in Python. The Requests library simplifies making HTTP requests and handling responses. It is essential for interacting with APIs as a client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/alternatives.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"response = requests.get("http://example.com/some/url")"
```

----------------------------------------

TITLE: Configuring Custom Servers in OpenAPI with root_path
DESCRIPTION: A FastAPI application that defines custom OpenAPI servers for staging and production environments, which FastAPI will combine with an automatically generated server from the root_path value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request

app = FastAPI(
    servers=[
        {"url": "https://stag.example.com", "description": "Staging environment"},
        {"url": "https://prod.example.com", "description": "Production environment"},
    ]
)


@app.get("/app")
async def read_main(request: Request):
    return {"message": "Hello World", "root_path": request.scope.get("root_path")}

```

----------------------------------------

TITLE: Project Directory Structure
DESCRIPTION: Shows the recommended directory structure for a FastAPI Docker project.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_5

LANGUAGE: plaintext
CODE:
```
.
├── app
│   ├── __init__.py
│   └── main.py
├── Dockerfile
└── requirements.txt
```

----------------------------------------

TITLE: Defining Types and Pydantic Models in Python
DESCRIPTION: This snippet illustrates the use of standard Python type hints for function parameters and the definition of a Pydantic `BaseModel` class. FastAPI leverages these features for data validation, serialization, and automatic documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Running FastAPI with Root Path Option in Console
DESCRIPTION: Demonstrates starting a FastAPI application using the `--root-path` command line argument to account for reverse proxy modifications. It sets up the server to expect the path prefix modified by the proxy, necessary for correct routing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ fastapi run main.py --root-path /api/v1

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Defining Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value of the `item_id` path parameter will be passed to the function as the argument `item_id`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Running Python Script in Virtual Environment
DESCRIPTION: Command to run a Python script (main.py) within the activated virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_14

LANGUAGE: bash
CODE:
```
$ python main.py

Hello World
```

----------------------------------------

TITLE: Returning HTMLResponse Directly in FastAPI
DESCRIPTION: Demonstrates how to return an HTMLResponse directly from a FastAPI endpoint. This allows you to create and return a Response object instead of returning the HTML as a string.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


async def generate_html_response():
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)


@app.get("/", response_class=HTMLResponse)
async def read_items():
    return await generate_html_response()


@app.get("/alt", response_class=HTMLResponse)
async def read_items_alt():
    return generate_html_response()

```

----------------------------------------

TITLE: Initializing a Tuple and Set - Python 3.9+
DESCRIPTION: This snippet initializes a tuple `items_t` with specific types for each element (int, int, str) and a set `items_s` where each element is of type bytes. It uses the built-in `tuple` and `set` types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_8

LANGUAGE: Python
CODE:
```
items_t: tuple[int, int, str] = (1, 2, "foo")
```

----------------------------------------

TITLE: Single File FastAPI Docker Image Configuration
DESCRIPTION: Dockerfile configuration for deploying a single-file FastAPI application with minimal container setup
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/deployment/docker.md#2025-04-21_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./main.py /code/

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Fake Token Decoding Function in FastAPI (Python)
DESCRIPTION: This code shows a fake implementation of a token decoding function. In a real application, this would validate the token and return the corresponding user data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def fake_decode_token(token):
    return User(
        username=token + "fakedecoded", email="john@example.com", full_name="John Doe"
    )
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This code defines an asynchronous FastAPI application using `async def` for the route functions. It includes a root route ('/') and an '/items/{item_id}' route, similar to the previous example, but leverages asynchronous operations.  This is useful for I/O-bound operations to prevent blocking the event loop.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Marking Query Parameter as Deprecated in FastAPI
DESCRIPTION: This example demonstrates how to mark a query parameter as deprecated in the OpenAPI schema and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_16

LANGUAGE: Python
CODE:
```
q: Annotated[str | None, Query(deprecated=True)] = None
```

----------------------------------------

TITLE: Running Python Script with Environment Variable (PowerShell)
DESCRIPTION: This snippet shows how to run a Python script after setting an environment variable MY_NAME. The first execution uses the default value because the environment variable is not set. The second execution sets MY_NAME before running the script, demonstrating how the script reads the environment variable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/environment-variables.md#_snippet_4

LANGUAGE: powershell
CODE:
```
// 這裡我們還沒有設定環境變數
$ python main.py

// 因為我們沒有設定環境變數，所以我們得到的是預設值

Hello World from Python

// 但是如果我們事先建立過一個環境變數
$ $Env:MY_NAME = "Wade Wilson"

// 然後再次呼叫程式
$ python main.py

// 現在就可以讀取到環境變數了

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Installing httpx for testing
DESCRIPTION: This command installs the httpx library, which is required for using the TestClient. It should be executed within a virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/testing.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install httpx
```

----------------------------------------

TITLE: Serving Files with FileResponse in FastAPI
DESCRIPTION: Shows how to serve static files from the filesystem using FastAPI's FileResponse, which handles content type detection and proper HTTP headers automatically.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()


@app.get("/")
async def main():
    some_file_path = "large-video-file.mp4"
    return FileResponse(some_file_path)
```

----------------------------------------

TITLE: Awaiting an Asynchronous Function Call in Python
DESCRIPTION: Demonstrates how to call an asynchronous function (`get_burgers`) using the `await` keyword. This pauses the current execution until the asynchronous operation completes, allowing the program to switch to other tasks in the meantime. Requires being inside an `async def` function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/async.md#_snippet_0

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Calling Function Without Required Optional Parameter (Python)
DESCRIPTION: An example call to a function where a parameter is type-hinted as `Optional` but is still required because it lacks a default value. This call will result in a `TypeError` if executed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_13

LANGUAGE: Python
CODE:
```
say_hi()
```

----------------------------------------

TITLE: Declaring Integer Parameter Type in Python
DESCRIPTION: Demonstrates how to declare a path or query parameter as an integer using standard Python type hints in FastAPI. This simple declaration enables automatic validation and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_4

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Making a GET request with Requests
DESCRIPTION: This code snippet shows how to make a GET request to a URL using the Requests library.  It demonstrates the simple and intuitive API of Requests, which inspired FastAPI's design.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/alternatives.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
response = requests.get("http://example.com/some/url")
```

----------------------------------------

TITLE: Body with multiple examples
DESCRIPTION: Shows how to pass multiple examples using a dict with examples, each with extra information that will be added to the OpenAPI documentation. Each example can have a summary, description, value, and externalValue.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/schema-extra-example.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Body, FastAPI

app = FastAPI()


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: str = Body(
        ...,
        examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                },
            },
            "invalid": {
                "summary": "Invalid data",
                "description": "Even invalid data is still conformant to the data model",
                "value": {
                    "name": "",
                    "price": "string",
                    "description": None,
                },
            },
        },
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: JWT Token Setup and Creation
DESCRIPTION: This snippet defines constants for JWT handling, including the secret key, algorithm, and token expiry time. It also defines a Pydantic model for the token payload and a helper function to create new JWT access tokens.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: python
CODE:
```
from datetime import datetime, timedelta
from typing import Optional

from jose import JWTError, jwt
from pydantic import BaseModel

# Replace with your actual secret key generated using openssl rand -hex 32
SECRET_KEY = "your-secret-key-here"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

class TokenData(BaseModel):
    username: Optional[str] = None

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Extended FastAPI App File
DESCRIPTION: This is an extended FastAPI application with multiple endpoints and header requirements. It includes GET and POST operations that may return different errors and require an X-Token header.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/testing.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Depends, FastAPI, Header, HTTPException

app = FastAPI()


async def verify_token(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")
    return x_token


async def verify_key(x_key: str = Header(...)):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="Invalid X-Key header")
    return x_key


@app.get("/items/")
async def read_items(x_token: str = Depends(verify_token)):
    return [{"item": "Portal Gun"}, {"item": "Plumbus"}]


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Optional[str] = None, x_token: str = Depends(verify_token)):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results


@app.post("/items/")
async def create_item(x_token: str = Depends(verify_key)):
    return {"msg": "Items created"}
```

----------------------------------------

TITLE: Extended FastAPI App (Python 3.8+ Annotated)
DESCRIPTION: This is an extended FastAPI application example with multiple route operations, including GET and POST requests, error handling, and header requirements. It uses Python 3.8+ syntax with Annotated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/testing.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Annotated, Union

from fastapi import Depends, FastAPI, Header, HTTPException
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


async def verify_token(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")


async def verify_key(x_key: Annotated[str, Header()]):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="Invalid X-Key header")
    return x_key


@app.get("/items/")
async def read_items(commons: Annotated[str, Depends(verify_key)]):
    return {"message": "Items"}


@app.post("/items/")
async def create_item(
    item: Item,
    commons: Annotated[str, Depends(verify_key)],
    x_token: Annotated[str, Header()],
):
    return item
```

----------------------------------------

TITLE: Update get_current_user with JWT token verification
DESCRIPTION: This code snippet shows how to update the `get_current_user` function to retrieve and verify JWT tokens from the Authorization header. It decodes the token, checks its validity, and returns the current user.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer



oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = get_user(username=token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: JSON 응답 예시
DESCRIPTION: API 엔드포인트 `/items/{item_id}`에 대한 요청에 대한 JSON 응답의 예시입니다. `item_id`와 `q` 매개변수를 포함합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/index.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{"item_id": 5, "q": "somequery"}
```

----------------------------------------

TITLE: Disabling Automatic root_path Server in OpenAPI Schema
DESCRIPTION: Example showing how to disable the automatic inclusion of a server using the root_path in the OpenAPI schema by setting root_path_in_servers parameter to False.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
openapi_tags = [
    {"name": "items", "description": "Operaciones con items"}
]
servers = [
    {"url": "https://stag.example.com", "description": "Entorno de pruebas"},
    {"url": "https://prod.example.com", "description": "Entorno de producción"},
]
app = FastAPI(openapi_tags=openapi_tags, servers=servers, root_path_in_servers=False)
```

----------------------------------------

TITLE: Update FastAPI app with PUT request body
DESCRIPTION: This code defines a Pydantic model `Item` to represent the request body for a PUT request. It also defines a `PUT` endpoint `/items/{item_id}` that receives an `item_id` and an `Item` object, returning a JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Overriding Default HTTPException Handler
DESCRIPTION: You can also override the default handler for `HTTPException` using `@app.exception_handler(HTTPException)`. This allows you to customize the response for all `HTTPException` instances raised in your application, for example, returning plain text instead of JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_10

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status, HTTPException
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse, PlainTextResponse
from pydantic import BaseModel

app = FastAPI()

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)

class Item(BaseModel):
    title: str
    size: int

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content=jsonable_encoder({"detail": exc.errors(), "body": exc.body}),
    )

@app.post("/items/")
async def create_item(item: Item):
    return item

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    if item_id == 3:
        raise HTTPException(status_code=418, detail="Nope! I'm a teapot!")
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining a set with type annotation
DESCRIPTION: This snippet shows how to define a set with a specific type, such as a set of strings, which ensures that the elements are unique.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"tags: set[str] = set()"
```

----------------------------------------

TITLE: Updated PATH variable after Python install (Windows)
DESCRIPTION: Illustrates how the PATH variable might be updated after installing Python on Windows, adding the Python installation directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/environment-variables.md#_snippet_7

LANGUAGE: plaintext
CODE:
```
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32;C:\opt\custompython\bin
```

----------------------------------------

TITLE: Example requirements.txt
DESCRIPTION: Shows the format of a requirements.txt file, which lists the packages and their versions required for a project.  This file is used with pip install -r requirements.txt.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_14

LANGUAGE: requirements.txt
CODE:
```
fastapi[standard]==0.113.0
pydantic==2.8.0
```

----------------------------------------

TITLE: Example PATH variable on Linux/macOS
DESCRIPTION: Shows an example of the PATH environment variable on Linux and macOS systems. It is a colon-separated list of directories.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/environment-variables.md#_snippet_4

LANGUAGE: plaintext
CODE:
```
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
```

----------------------------------------

TITLE: Importing Annotated from typing_extensions for Parameter Validation in FastAPI (Python <3.9)
DESCRIPTION: Import 'Annotated' from typing_extensions for versions of Python below 3.9 to ensure compatibility with FastAPI. This allows for the addition of metadata to function parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Query
from typing_extensions import Annotated
```

----------------------------------------

TITLE: Using await with Asynchronous Functions in FastAPI
DESCRIPTION: This code demonstrates how to use the `await` keyword within an asynchronous path operation in FastAPI. The `read_burgers` function, decorated with `@app.get('/burgers')`, is defined as `async def` and uses `await` to call the `get_burgers` function, ensuring that the burger results are awaited before being returned. The `@app.get('/burgers')` is assumed to be previously defined.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/async.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
```Python hl_lines="2-3"
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```
```

----------------------------------------

TITLE: Caching Settings with lru_cache
DESCRIPTION: This Python code snippet shows how to use `lru_cache` from `functools` to cache the `Settings` object. This ensures that the `.env` file is only read once during the application's lifetime, improving performance. Requires the `python-dotenv` package to load environment variables.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
"from functools import lru_cache\n\nfrom pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    admin_email: str\n    app_name: str = \"Awesome API\"\n\n    model_config = {\n        \"env_file\": \".env\",\n    }\n\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\n\nsettings = get_settings()\n\nprint(\"Admin E-mail:\", settings.admin_email)\nprint(\"App Name:\", settings.app_name)"
```

----------------------------------------

TITLE: FastAPI Main Application and Callback Router
DESCRIPTION: This snippet shows the main FastAPI application setup, including importing necessary modules, defining data models for the request body, setting up a callback router, and defining the main path operation with a callback URL query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from typing import Optional

from fastapi import APIRouter, FastAPI, Query
from pydantic import BaseModel, Url

app = FastAPI()


invoices_callback_router = APIRouter()


class Invoice(BaseModel):
    id: str
    title: Optional[str] = None
    customer: str
    total: float


class InvoiceEvent(BaseModel):
    description: str
    paid: bool


class InvoiceEventReceived(BaseModel):
    ok: bool


@invoices_callback_router.post("/invoices/{$request.body.id}", response_model=InvoiceEventReceived)
async def invoice_callback(body: InvoiceEvent):
    pass


@app.post("/invoices", callbacks=invoices_callback_router.routes)
async def create_invoice(
    invoice: Invoice,
    callback_url: Url = Query(
        ...,
        description="URL to send notifications when the invoice is processed.",
    ),
):
    return {"id": invoice.id}"
```

----------------------------------------

TITLE: Creating Tag Metadata in FastAPI
DESCRIPTION: This snippet shows how to create metadata for tags in FastAPI.  The `openapi_tags` parameter accepts a list of dictionaries, where each dictionary defines metadata for a specific tag, including its name and description. Markdown formatting is supported in the description.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/metadata.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"""
from fastapi import FastAPI

tags_metadata = [
    {
        "name": "users",
        "description": "Operations with users. The **login** logic is also here.",
    },
    {
        "name": "items",
        "description": "Manage items. So _fancy_ they have docs for each one.",
    },
]

app = FastAPI(openapi_tags=tags_metadata)


@app.get("/users", tags=["users"])
async def get_users():
    return [{"name": "John"}, {"name": "Jane"}]


@app.get("/items", tags=["items"])
async def get_items():
    return [{"name": "Portal Gun"}, {"name": "Plumbus"}]
"""
```

----------------------------------------

TITLE: Importing Dependencies with Relative Path (Python)
DESCRIPTION: This code shows how to import dependencies from another module using a relative import. The .. indicates that the module is located one level up in the directory structure.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Annotated, List, Optional

from fastapi import APIRouter, Depends, Header, HTTPException

from .dependencies import verify_token, verify_key

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(verify_token), Depends(verify_key)],
    responses={404: {"description": "Not found"}},
)


@router.get("/")
async def read_items():
    return [{
        "name": "Foo",
        "description": "There goes my hero"
    }, {
        "name": "Bar",
        "description": "The bartenders"
    }]


@router.get("/{item_id}", responses={403: {"description": "Operation forbidden"}})
async def read_item(item_id: str):
    if item_id == "plumbus":
        return {"item_id": item_id, "name": "Plumbus"}
    else:
        raise HTTPException(status_code=403, detail="Item not available")
```

----------------------------------------

TITLE: Hierarchical Dependencies with Yield in FastAPI
DESCRIPTION: This code demonstrates how to define hierarchical dependencies using `yield`.  Each dependency can depend on another, creating a nested structure. FastAPI handles the execution order, ensuring that teardown phases are executed in the reverse order of the setup phases.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"from typing import Annotated, Generator\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()\n\n\nasync def dependency_a() -> str:\n    yield "dependency_a"\n\n\nasync def dependency_b(dep_a: Annotated[str, Depends(dependency_a)]) -> Generator[str, None, None]:\n    yield f"dependency_b({dep_a})"\n\n\nasync def dependency_c(dep_b: Annotated[str, Depends(dependency_b)]) -> Generator[str, None, None]:\n    yield f"dependency_c({dep_b})"\n\n\n@app.get("/items/")\nasync def read_items(dep_c: Annotated[str, Depends(dependency_c)]):\n    return dep_c"
```

----------------------------------------

TITLE: Accessing Request Body in Exception Handler in FastAPI
DESCRIPTION: This snippet shows how to access the request body within an exception handler in FastAPI. By wrapping the request processing in a `try`/`except` block, you can still access the `Request` instance and its body even if an exception occurs during the request handling. This is useful for logging or further processing of the request body when errors arise.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

app = FastAPI()


@app.exception_handler(500)
async def internal_exception_handler(request: Request, exc: Exception):
    body = await request.body()
    return JSONResponse(
        status_code=500,
        content={"message": f"Oops! Internal Server Error! {exc} {body=}"},
    )
```

----------------------------------------

TITLE: Returning an Arbitrary Dictionary in FastAPI
DESCRIPTION: This code demonstrates how to return an arbitrary dictionary as a response, where the types of the keys and values are known, but the specific field names are not. `typing.Dict` is used to specify the response model, indicating that the endpoint will return a dictionary with string keys and integer values. This is useful when the valid field names are not known in advance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/extra-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Dict

from fastapi import FastAPI

app = FastAPI()


@app.get("/index/", response_model=Dict[str, int])
async def index():
    return {
        "foo": 3,
        "bar": 5
    }
```

----------------------------------------

TITLE: Return Values in Dependencies
DESCRIPTION: This code demonstrates that dependencies can return values, but those values are not used when the dependencies are passed via `dependencies` to the path operation decorator.  This allows re-use of existing dependencies (that might return a value) without needing to modify them, even if the returned value is not used in a specific path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def verify_token(x_token: str = Header(...)):
    if x_token != \"fake-super-secret-token\":
        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")
    return  \"OK\" 

async def verify_key(x_key: str = Header(...)):
    if x_key != \"fake-super-secret-key\":
        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")
    return \"OK\"
```

----------------------------------------

TITLE: Overriding HTTPException Handler in FastAPI
DESCRIPTION: This example shows how to override the default handler for `HTTPException`. The custom handler will return a plain text response instead of the default JSON response. The handler receives the `Request` object and the `HTTPException` instance as arguments and it returns a `PlainTextResponse` object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, HTTPException\nfrom fastapi.requests import Request\nfrom fastapi.responses import PlainTextResponse\n\napp = FastAPI()\n\n\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n\n\n@app.get("/items/{item_id}")\nasync def read_item(item_id: str):\n    if item_id != \"foo\":\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": \"The Foo Wrestlers\"}"
```

----------------------------------------

TITLE: Extended Test File
DESCRIPTION: This is an extended test file for the FastAPI application. It includes tests for different endpoints, header validation, and error handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/testing.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from .main import app

client = TestClient(app)


def test_read_items():
    response = client.get("/items/", headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 200
    assert response.json() == [{"item": "Portal Gun"}, {"item": "Plumbus"}]


def test_read_item():
    response = client.get("/items/42", params={"q": "test"}, headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 200
    assert response.json() == {"item_id": 42, "q": "test"}


def test_read_item_bad_token():
    response = client.get("/items/42", headers={"X-Token": "bad"})
    assert response.status_code == 400
    assert response.json() == {"detail": "Invalid X-Token header"}


def test_create_item():
    response = client.post("/items/", headers={"X-Key": "fake-super-secret-key"})
    assert response.status_code == 200
    assert response.json() == {"msg": "Items created"}


def test_create_item_bad_key():
    response = client.post("/items/", headers={"X-Key": "bad"})
    assert response.status_code == 400
    assert response.json() == {"detail": "Invalid X-Key header"}
```

----------------------------------------

TITLE: Overriding Responses Directly in FastAPI
DESCRIPTION: This code snippet demonstrates how to override the response directly within a *path operation* by returning an `HTMLResponse` instance. This allows for full control over the response, but requires manual configuration of headers and status codes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/")
async def read_items():
    return HTMLResponse("""
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """")


@app.get("/items2/", response_class=HTMLResponse)
async def read_items2():
    return HTMLResponse("""
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """")
```

----------------------------------------

TITLE: Using Extra Data Types in FastAPI Path Operation
DESCRIPTION: This code snippet demonstrates how to use extra data types such as UUID, datetime, date, time, and timedelta as parameters in a FastAPI path operation. It illustrates how FastAPI handles these types for input validation and output serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/extra-data-types.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from datetime import date, datetime, time, timedelta
from typing import Optional
from uuid import UUID

from fastapi import Body, FastAPI

app = FastAPI()


@app.put("/items/{item_id}")
async def update_item(
    item_id: UUID,
    start_datetime: Optional[datetime] = Body(default=None),
    end_date: Optional[date] = Body(default=None),
    repeat_at: Optional[time] = Body(default=None),
    process_after: Optional[timedelta] = Body(default=None),
):
    results = {"item_id": item_id}
    if start_datetime:
        results.update({"start_datetime": start_datetime})
    if end_date:
        results.update({"end_date": end_date})
    if repeat_at:
        results.update({"repeat_at": repeat_at})
    if process_after:
        results.update({"process_after": process_after})
    return results
"
```

----------------------------------------

TITLE: Using lru_cache to Create Settings Once in Python
DESCRIPTION: This code snippet shows how to use the @lru_cache decorator from functools to ensure that the Settings object is only created once, preventing repeated reading of the .env file for each request. This optimizes performance by caching the settings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/settings.md#_snippet_7

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from fastapi import Depends, FastAPI
from pydantic import BaseSettings

app = FastAPI()


class Settings(BaseSettings):
    admin_email: str = "admin@example.com"
    app_name: str = "Awesome API"

    class Config:
        env_file = ".env"


@lru_cache
def get_settings():
    return Settings()


@app.get("/info")
async def info(settings: Settings = Depends(get_settings)):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
    }
```

----------------------------------------

TITLE: package.json script for generating TypeScript client
DESCRIPTION: This `package.json` snippet defines an npm script called `generate-client` that uses `openapi-ts` to generate TypeScript client code from an OpenAPI schema. It specifies the input OpenAPI JSON file, the output directory for the generated code, and the HTTP client library to use (axios).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/generate-clients.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Using Pydantic Model in Python
DESCRIPTION: This code shows how to use a Pydantic model to create and initialize objects. It demonstrates creating an instance directly and from a dictionary.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Creating a custom GzipRoute class
DESCRIPTION: Creates a custom `GzipRoute` class that subclasses `fastapi.routing.APIRoute` and utilizes the `GzipRequest` class. It overrides the `APIRoute.get_route_handler()` method to create a `GzipRequest` from the original request. The returned function converts the `Request` into a `GzipRequest`, handling the decompression of data if necessary before passing it to the path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-request-and-route.md#_snippet_1

LANGUAGE: Python
CODE:
```
class GzipRoute(APIRoute):
    def get_route_handler(self) -> Callable:
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request) -> JSONResponse:
            gzip_request = GzipRequest(request.scope, request.receive)
            return await original_route_handler(gzip_request)

        return custom_route_handler
```

----------------------------------------

TITLE: Python Module Import Example
DESCRIPTION: Example showing how to import a FastAPI app from another module, demonstrating when the Uvicorn server won't automatically start.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/debugging.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from myapp import app

# Some more code
```

----------------------------------------

TITLE: Creating Python Virtual Environment using uv
DESCRIPTION: Command to create a new Python virtual environment using the uv tool, which automatically creates it in a '.venv' directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ uv venv
```

----------------------------------------

TITLE: Importing Path from FastAPI
DESCRIPTION: This code snippet shows how to import the `Path` class from the `fastapi` library. This is necessary to declare path parameters with validations and metadata.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params-numeric-validations.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Path
```

----------------------------------------

TITLE: Including Single Values in Multiple Body Parameters (Python)
DESCRIPTION: Demonstrates how to include a single value parameter (`importance`) in the request body alongside multiple Pydantic models (`item`, `user`) by using the `Body` function. This tells FastAPI to read the value from the JSON body under the key matching the parameter name, expecting a structure like `{"item": {...}, "user": {...}, "importance": 5}`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-multiple-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int = Path(..., gt=0),
    item: Item = Body(..., embed=True),
    user: User,
    importance: int = Body(...),
):
    results = {"item_id": item_id, "item": item, "user": user, "importance": importance}
    return results
```

----------------------------------------

TITLE: Manual Setup for Translated Documentation
DESCRIPTION: Alternative approach to serve translated documentation by navigating to the language-specific directory and running MkDocs directly. This example is for Spanish documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_8

LANGUAGE: console
CODE:
```
$ cd docs/es/
$ mkdocs serve --dev-addr 127.0.0.1:8008
```

----------------------------------------

TITLE: Declaring Body Parameter in FastAPI Path Operation (Python)
DESCRIPTION: Shows how to declare a request body parameter in a FastAPI path operation function. By type-hinting the parameter with the Pydantic `Item` model, FastAPI knows to expect a request body matching this structure, validate it, and provide the validated data as the `item` object. Requires a FastAPI app instance and the `Item` model definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Installing Packages with pip
DESCRIPTION: This command installs the specified Python packages (fastapi with the standard extras) using pip.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_10

LANGUAGE: Shell
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Returning JSONResponse with Encoded Data in FastAPI
DESCRIPTION: This snippet demonstrates how to use jsonable_encoder to convert data to a JSON-compatible format and return it as a JSONResponse in a FastAPI route handler.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-directly.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/items/{id}")
def read_item(id: str):
    item = {"id": id, "value": "Foo"}
    json_compatible_item_data = jsonable_encoder(item)
    return JSONResponse(content=json_compatible_item_data)
```

----------------------------------------

TITLE: Testing FastAPI with relative imports
DESCRIPTION: Shows how to import the FastAPI app from main.py using relative imports in test_main.py.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/testing.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from .main import app


client = TestClient(app)


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Getting Enum Value in FastAPI (Python)
DESCRIPTION: This snippet shows how to retrieve the actual value (a string in this case) from an Enum member using `.value`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"model_name": model_name, "message": "Have some residuals", "value": model_name.value}
```

----------------------------------------

TITLE: Running Python Script (Success)
DESCRIPTION: This snippet shows a successful execution of a Python script after activating the correct virtual environment. The script imports and uses the 'sirius' module because it is installed in the now-active virtual environment. The output indicates the successful execution of the script.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
"$ python main.py

Я торжественно клянусь в этом! 🐺"
```

----------------------------------------

TITLE: Declarando Response Adicional con Modelo en FastAPI
DESCRIPTION: Este snippet muestra cómo declarar un response adicional con un código de estado 404 y un modelo Pydantic personalizado en FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/additional-responses.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={
        404: {"model": Message, "description": "The item was not found"}
    },
)
```

----------------------------------------

TITLE: Package.json with Local OpenAPI File for Client Generation
DESCRIPTION: An updated package.json configuration that uses a local preprocessed OpenAPI schema file instead of fetching it from the server.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input ./openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Simple Async FastAPI Application
DESCRIPTION: Defines a basic FastAPI application with an asynchronous root endpoint that returns a JSON message. This application serves as the target for the asynchronous tests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_root():
    return {"message": "Hello World"}

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    # Simulate some async work
    import asyncio
    await asyncio.sleep(0.1)
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Version range example in requirements.txt
DESCRIPTION: An example version range to follow for fastapi in the requirements.txt
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/versions.md#2025-04-21_snippet_3

LANGUAGE: txt
CODE:
```
"fastapi>=0.45.0,<0.46.0"
```

----------------------------------------

TITLE: Creating a Pydantic Model with Default Values in Python
DESCRIPTION: A Python code snippet showing a Pydantic model definition with a default value. The Item class has two fields: name (required) and description (with default value None).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: str | None = None
```

----------------------------------------

TITLE: Ausführen von Uvicorn mit mehreren Workern für FastAPI
DESCRIPTION: Startet Uvicorn direkt mit 4 Workerprozessen, die eine FastAPI-Anwendung aus der Datei 'main.py' ausführen und auf Port 8080 lauschen.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/server-workers.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
```

----------------------------------------

TITLE: Creating a FastAPI Instance with a different name
DESCRIPTION: Creates an instance of the FastAPI class, assigning it to the variable my_awesome_api. This instance is the main entry point for defining API endpoints and handling requests. This shows how to change the default app name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

my_awesome_api = FastAPI()


@my_awesome_api.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: JWT 토큰을 사용하도록 `get_current_user` 함수 수정
DESCRIPTION: `get_current_user` 함수를 이전과 동일한 토큰을 받도록 수정하되, 이번에는 JWT 토큰을 사용하도록 합니다. 받은 토큰을 디코딩하여 검증한 후 현재 사용자를 반환합니다. 토큰이 유효하지 않다면 HTTP 오류를 반환합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/oauth2-jwt.md#_snippet_2

LANGUAGE: python
CODE:
```
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = get_user(fake_users_db, username=token_data.username)
    if user is None:
        raise credentials_exception
    return user
```

----------------------------------------

TITLE: Install Passlib with Bcrypt
DESCRIPTION: Installs the Passlib library with Bcrypt support for handling password hashing. Passlib provides a secure way to store and verify user passwords, protecting them from unauthorized access.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install "passlib[bcrypt]"
```

----------------------------------------

TITLE: Deeply Nested Models in FastAPI
DESCRIPTION: This snippet showcases the definition of deeply nested Pydantic models in FastAPI, creating a complex data structure. It involves `Image`, `Item`, and `Offer` models, where `Offer` contains a list of `Item` models, and each `Item` can have a list of optional `Image` models. Demonstrates complex data structures with nested lists and optional fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
"from typing import List, Optional

from pydantic import BaseModel, HttpUrl


class Image(BaseModel):
    url: HttpUrl
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list = []
    images: Optional[List[Image]] = None


class Offer(BaseModel):
    items: List[Item]"
```

----------------------------------------

TITLE: Declaring String Variable with Editor Support in Python
DESCRIPTION: This code snippet demonstrates how to declare a string variable with type hints in Python, enabling editor support for autocompletion and type checking. It defines a simple function `main` that takes a string `user_id` as input and returns it.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/features.md#_snippet_0

LANGUAGE: python
CODE:
```
from datetime import date

from pydantic import BaseModel

# 宣告一個變數為 string
# 並在函式中獲得 editor support
def main(user_id: str):
    return user_id
```

----------------------------------------

TITLE: Disabling OpenAPI Documentation Output
DESCRIPTION: Example of the JSON response received when OpenAPI documentation is disabled and a user attempts to access the documentation endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/conditional-openapi.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "detail": "Not Found"
}
```

----------------------------------------

TITLE: Implementing a GET Endpoint in FastAPI with Path Operation Decorator
DESCRIPTION: Demonstrates FastAPI's path operation decorator syntax which was inspired by the Requests library's intuitive method naming. Shows how routes are defined using decorators with HTTP verbs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/alternatives.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: FastAPI Example Application
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: one for the root path ('/') that returns a greeting, and another for '/items/{item_id}' that returns the item ID and an optional query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Reading Environment Variables in Python (Bash)
DESCRIPTION: This snippet demonstrates how to run a Python script that reads an environment variable. It first runs the script without setting the environment variable, showing the default value being used. Then, it sets the environment variable and runs the script again, showing the environment variable's value being used.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/environment-variables.md#_snippet_3

LANGUAGE: Shell
CODE:
```
$ python main.py

Hello World from Python
$ export MY_NAME="Wade Wilson"
$ python main.py

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Налаштування ідентифікатора ліцензії у FastAPI
DESCRIPTION: Приклад налаштування `license_info` за допомогою `identifier` замість `url` у FastAPI. Це демонструє використання ліцензійного виразу SPDX для API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/metadata.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="Fancy API",
    summary="This is a fancy API for managing users and items.",
    description="""
This API is a **very fancy** one.

It does _everything_.

Trust me.
""",
    version="0.1.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://example.com/contact/",
        "email": "dp@example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "identifier": "Apache-2.0",
    },
)


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Dockerfile with Poetry for Dependency Management
DESCRIPTION: This Dockerfile uses a multi-stage build to manage dependencies with Poetry. It installs Poetry in a temporary stage, exports the dependencies to a requirements.txt file, and then installs the dependencies in the final image. This reduces the final image size by excluding Poetry and its dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_20

LANGUAGE: Dockerfile
CODE:
```
# (1)
FROM python:3.9 as requirements-stage

# (2)
WORKDIR /tmp

# (3)
RUN pip install poetry

# (4)
COPY ./pyproject.toml ./poetry.lock* /tmp/

# (5)
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

# (6)
FROM python:3.9

# (7)
WORKDIR /code

# (8)
COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

# (9)
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

# (10)
COPY ./app /code/app

# (11)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Request Body with Examples
DESCRIPTION: Shows how to pass examples for the expected data in a request body using the `Body()` function. This allows for providing example data for the request body, which is then included in the generated JSON Schema and used in API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/schema-extra-example.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import Body, FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        examples=[
            {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2,
            }
        ],
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Importing File and Form in FastAPI (Python)
DESCRIPTION: Import statement for FastAPI's File and Form components needed to handle multipart/form-data requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, File, Form
```

----------------------------------------

TITLE: Overriding Default Swagger UI Parameters
DESCRIPTION: Example of how to override default Swagger UI parameters, specifically disabling deepLinking.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
app = FastAPI(
    swagger_ui_parameters={"deepLinking": False}
)
```

----------------------------------------

TITLE: Accessing Request Body in RequestValidationError Handler in FastAPI
DESCRIPTION: This snippet shows how to access the invalid request body within a `RequestValidationError` handler. This is useful for logging or debugging purposes. `exc.body` provides access to the body of the request that caused the validation error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
"from typing import Union\n\nfrom fastapi import FastAPI, HTTPException, Request\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    title: str\n    size: int\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    print(f\"OMG! The client sent invalid data!: {exc.body}\")\n    return JSONResponse(\n        status_code=422,\n        content=jsonable_encoder({\"detail\": exc.errors(), \"body\": exc.body}),\n    )\n\n\n@app.post("/items/")\nasync def create_item(item: Item):\n    return item"
```

----------------------------------------

TITLE: Raising HTTPException in FastAPI Path Operation
DESCRIPTION: `HTTPException` is a standard Python exception with added data relevant to APIs. You `raise` it instead of `return`ing it. Raising it inside a path operation or a function called by it will immediately stop the request processing and send the HTTP error to the client. This example shows raising a 404 error if an item ID is not found.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": "The Foo Wrestlers"}

@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Accessing Pydantic Model Attributes in FastAPI (Python)
DESCRIPTION: Demonstrates how to access the data sent in the request body by directly accessing the attributes of the Pydantic model instance passed as a parameter to the path operation function. The `item` object behaves like a standard Python object with attributes corresponding to the model fields, allowing direct access like `item.name` or `item.price`. Requires a path operation with a Pydantic body parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.post("/items/")
async def create_item(item: Item):
    # Access model attributes directly
    print(item.name)
    print(item.price)
    return item
```

----------------------------------------

TITLE: FastAPI Example with Pydantic Models
DESCRIPTION: This FastAPI application defines two path operations that use Pydantic models (`Item` and `ResponseMessage`) for request and response payloads. These models are automatically included in the OpenAPI schema, enabling client generation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


class ResponseMessage(BaseModel):
    message: str


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.post("/items", response_model=ResponseMessage)
async def create_item(item: Item):
    return {"message": f"Item received with name {item.name}"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Arbitrary Dict Body in FastAPI
DESCRIPTION: This snippet illustrates how to accept an arbitrary dictionary as the request body in FastAPI.  It defines a function that takes a `dict[int, float]` as a parameter, allowing the API to receive a dictionary with integer keys and float values. Note that JSON only supports string keys, but Pydantic will automatically convert numeric strings to integers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
"from typing import Dict

from fastapi import FastAPI

app = FastAPI()


@app.post("/weights/")
async def create_weights(weights: Dict[int, float]):
    return weights"
```

----------------------------------------

TITLE: Update /token path operation to return JWT
DESCRIPTION: This code snippet updates the `/token` path operation to create and return a JWT access token upon successful authentication. It sets the expiration time for the token and returns it in the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
from datetime import timedelta



app = FastAPI()


@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=401,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: FastAPI 엔드포인트 정의 및 Pydantic 모델 사용
DESCRIPTION: FastAPI를 사용하여 API 엔드포인트를 정의하고 Pydantic을 사용하여 요청 본문을 정의하는 방법을 보여줍니다. `Item` 모델은 `name`, `price`, `is_offer` 속성을 포함합니다. 엔드포인트는 `/`, `/items/{item_id}` (GET), `/items/{item_id}` (PUT) 입니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Define Additional Responses with Pydantic Model in FastAPI
DESCRIPTION: This code snippet demonstrates how to define an additional response with an HTTP status code of 404 and a Pydantic model named `Message`. It shows how FastAPI uses the model to generate the JSON schema and include it in the OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/additional-responses.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from fastapi.responses import JSONResponse
from pydantic import BaseModel


class Item(BaseModel):
    id: str
    value: str
    tax: float = 0.0


class Message(BaseModel):
    message: str


app = FastAPI()


@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={
        404: {
            "model": Message,
            "description": "The item was not found",
        }
    },
)
async def read_item(item_id: str):
    if item_id == "foo":
        return {"id": "foo", "value": "there goes my hero", "tax": 1.23}
    else:
        return JSONResponse(status_code=404, content={"message": "Item not found"})
```

----------------------------------------

TITLE: Using OAuth2PasswordBearer as Dependency FastAPI Python
DESCRIPTION: This snippet shows how to apply the defined `oauth2_scheme` as a dependency to a path operation function using `FastAPI.Depends`. When this path is accessed, FastAPI automatically looks for an `Authorization: Bearer <token>` header, validates its format, and passes the extracted token string to the `token` parameter, returning a 401 error if the header is missing or invalid.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def read_users_me(token: str = Depends(oauth2_scheme)):
```

----------------------------------------

TITLE: Password Hashing and Verification Helpers
DESCRIPTION: This snippet shows how to use `passlib` to create a password context, hash a plain password, and verify a plain password against a stored hash. It also includes a basic function to authenticate a user against a fake database.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: python
CODE:
```
from passlib.context import CryptContext

# Define the password hashing context
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

# Example fake user database (replace with your actual database)
fake_users_db = {
    "testuser": {"username": "testuser", "hashed_password": get_password_hash("testpassword")}
}

def authenticate_user(username, password):
    user = fake_users_db.get(username)
    if not user:
        return False
    if not verify_password(password, user["hashed_password"]):
        return False
    return user
```

----------------------------------------

TITLE: Serve Static Files in FastAPI
DESCRIPTION: This snippet demonstrates how to serve static files (like JavaScript and CSS for the documentation) from a directory using FastAPI's `StaticFiles` class. It mounts the `static` directory at the `/static` path, making the files accessible through the API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-docs-ui-assets.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi.staticfiles import StaticFiles

app.mount("/static", StaticFiles(directory="static"), name="static")
```

----------------------------------------

TITLE: Supporting Multiple Media Types in FastAPI Responses
DESCRIPTION: Implementation of a FastAPI endpoint that can return different media types - both JSON and PNG image formats. The snippet shows how to define multiple response content types in the OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def get_item(item_id: str, img: bool = False):
    if img:
        return FileResponse("image.png", media_type="image/png")
    else:
        return {"id": "foo", "value": "there goes my hero"}
```

----------------------------------------

TITLE: Activating a Virtual Environment (Linux, macOS)
DESCRIPTION: This command activates the virtual environment using the source command, making the environment's Python interpreter and installed packages available in the current shell session.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_3

LANGUAGE: Shell
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: OAuth2PasswordBearer Initialization
DESCRIPTION: Initializes OAuth2PasswordBearer to define the token URL for obtaining access tokens. The tokenUrl parameter specifies the endpoint where clients send username and password for authentication.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Creating OAuth2 Password Request Form in FastAPI
DESCRIPTION: This code snippet demonstrates how to create a FastAPI application with an endpoint that handles OAuth2 password requests. It uses `OAuth2PasswordRequestForm` to receive the username and password, which are then printed to the console. This is a basic setup and does not include actual authentication logic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordRequestForm

app = FastAPI()


@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    return {"username": form_data.username, "password": form_data.password}
```

----------------------------------------

TITLE: Overriding Request Validation Exception Handler in FastAPI
DESCRIPTION: This snippet demonstrates how to override the default exception handler for `RequestValidationError`.  This allows you to customize the error response returned to the client when request data is invalid. The handler receives the `Request` object and the `RequestValidationError` instance as arguments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, Request\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=422,\n        content={\"detail\": exc.errors(), \"body\": exc.body}\n    )\n\n@app.get("/items/{item_id}")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}"
```

----------------------------------------

TITLE: Overriding Default Request Validation Error Handler
DESCRIPTION: FastAPI raises `RequestValidationError` when incoming request data is invalid. You can override the default handler using `@app.exception_handler(RequestValidationError)` to customize the response, for example, to return a different JSON structure or status code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    title: str
    size: int

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content=jsonable_encoder({"detail": exc.errors(), "body": exc.body}),
    )

@app.post("/items/")
async def create_item(item: Item):
    return item

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: FastAPI Application with Tags
DESCRIPTION: This example demonstrates a FastAPI application that uses tags to separate different groups of path operations, specifically for 'items' and 'users'. It shows how to define tags in the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/generate-clients.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}", tags=["items"])
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.post("/items/", tags=["items"])
async def create_item(name: str, price: float):
    return {"name": name, "price": price}


@app.get("/users/{user_id}", tags=["users"])
async def read_user(user_id: int, q: Union[str, None] = None):
    return {"user_id": user_id, "q": q}


@app.post("/users/", tags=["users"])
async def create_user(name: str, age: int):
    return {"name": name, "age": age}
```

----------------------------------------

TITLE: Asynchronous Tests for FastAPI with pytest and AsyncClient
DESCRIPTION: Provides the complete structure of a test file using pytest and httpx.AsyncClient for testing an asynchronous FastAPI application. It includes the necessary imports, the `pytest.mark.anyio` marker, and an `async def` test function that uses `AsyncClient` to make awaited requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_1

LANGUAGE: python
CODE:
```
import pytest
from httpx import AsyncClient
from fastapi import FastAPI

# Assuming 'app' is imported from your main FastAPI file
# from .main import app

# For demonstration, using a simple async app here if not imported
app = FastAPI()

@app.get("/")
async def read_root():
    return {"message": "Hello World"}


@pytest.mark.anyio
async def test_read_root():
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Hello World"}
```

----------------------------------------

TITLE: Adding Metadata for Tags in FastAPI with Python
DESCRIPTION: This code demonstrates how to add metadata for tags in a FastAPI application. It defines metadata for 'users' and 'items' tags, including descriptions and external documentation links, and then passes this metadata to the FastAPI constructor using the `openapi_tags` parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/metadata.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

tags_metadata = [
    {
        "name": "users",
        "description": "Operations with users. Login, register.",
    },
    {
        "name": "items",
        "description": "Manage items. So _fancy_.",
        "externalDocs": {
            "description": "Items external docs description",
            "url": "https://example.com/",
        },
    },
]

app = FastAPI(openapi_tags=tags_metadata)


@app.get("/items/", tags=["items"])
async def read_items():
    return [{"name": "Foo"}, {"name": "Bar"}]


@app.post("/users/", tags=["users"])
async def create_user():
    return {"message": "User created"}
```

----------------------------------------

TITLE: Updating a Hero
DESCRIPTION: This snippet updates an existing hero using a `PATCH` request and the `HeroUpdate` model. `exclude_unset=True` ensures only provided data from the client is updated. It fetches the existing hero, updates fields using `hero_db.sqlmodel_update(hero_data)`, commits changes, and refreshes the object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/sql-databases.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"@app.patch("/heroes/{hero_id}", response_model=HeroPublic)
async def update_hero(hero_id: int, hero: HeroUpdate, db: Session = Depends(get_db)):
    hero_db = db.get(Hero, hero_id)
    if not hero_db:
        raise HTTPException(status_code=404, detail="Hero not found")
    hero_data = hero.dict(exclude_unset=True)
    hero_db.sqlmodel_update(hero_data)
    db.add(hero_db)
    db.commit()
    db.refresh(hero_db)
    return hero_db"
```

----------------------------------------

TITLE: Pydantic v1: Defining Settings with BaseSettings
DESCRIPTION: This code snippet defines a `Settings` class using Pydantic's `BaseSettings` to automatically load configuration from environment variables, compatible with Pydantic v1. It defines attributes `app_name`, `admin_email`, and `items_per_user` with type annotations and default values. Pydantic automatically maps environment variables (e.g., `APP_NAME`) to corresponding attributes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseSettings, EmailStr


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: EmailStr
    items_per_user: int = 50


    class Config:
        env_file = ".env"
```

----------------------------------------

TITLE: Updating FastAPI example with Pydantic
DESCRIPTION: This Python code defines a FastAPI application with a data model (Item) using Pydantic. It includes route definitions for GET and PUT requests, automatically converting data to and from JSON while providing validation and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: FastAPI application with models
DESCRIPTION: This FastAPI application defines data models (Item and ResponseMessage) for request and response payloads in path operations. These models are used to generate the OpenAPI schema, which can then be used to generate client code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None


class ResponseMessage(BaseModel):
    message: str


@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    return item


@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int, q: Optional[str] = None):
    return Item(name="Foo", description="", price=10.5, tax=0.5)
```

----------------------------------------

TITLE: Customizing OpenAPI Schema for Path in FastAPI
DESCRIPTION: Shows how to customize the OpenAPI schema for a path operation, including defining a custom request body schema without using automatic Pydantic validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request

app = FastAPI()

@app.post(
    "/items/",
    openapi_extra={
        "requestBody": {
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {"type": "string"},
                            "price": {"type": "number"},
                        },
                    }
                }
            }
        }
    },
)
async def create_item(request: Request):
    raw_body = await request.body()
    data = magic_data_reader(raw_body)
    return data
```

----------------------------------------

TITLE: Deactivating and Activating Virtual Environments When Switching Projects
DESCRIPTION: Shows the correct process of deactivating the current virtual environment, changing to a new project directory, and activating the new project's virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/virtual-environments.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban

// No necesitas estar en el directorio antiguo para desactivar, puedes hacerlo donde sea que estés, incluso después de ir al otro proyecto 😎
$ deactivate

// Activa el entorno virtual en prisoner-of-azkaban/.venv 🚀
$ source .venv/bin/activate

// Ahora cuando ejecutes python, encontrará el paquete sirius instalado en este entorno virtual ✨
$ python main.py

I solemnly swear 🐺
```

----------------------------------------

TITLE: Query Parameter Validation with Minimum and Maximum Length
DESCRIPTION: Demonstrates adding both minimum and maximum length constraints to a query parameter
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
q: Annotated[str | None, Query(min_length=3, max_length=50)] = None
```

----------------------------------------

TITLE: Annotated Type Hint Example (Python 3.8+)
DESCRIPTION: This example shows how to use `Annotated` to add metadata to type hints in Python versions lower than 3.9.  `Annotated` is imported from `typing_extensions`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_23

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial013.py!}
```

----------------------------------------

TITLE: Fixing Type Error with str()
DESCRIPTION: This code fixes the type error by converting the integer `age` to a string using `str(age)`. This ensures that the function concatenates strings correctly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_3

LANGUAGE: Python
CODE:
```
def get_name_with_age(name: str, age: int):
    return name + " is " + str(age)
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function
DESCRIPTION: This code snippet demonstrates how to define a synchronous path operation function in FastAPI. Instead of using `async def`, a regular `def` is used. This function will still be called by FastAPI when a request is made to the associated path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Define HeroBase SQLModel
DESCRIPTION: Defines a base SQLModel class `HeroBase` containing common fields (`name`, `age`) shared by other hero models. This model is not a database table itself but serves as a base for inheritance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Optional
from sqlmodel import SQLModel

class HeroBase(SQLModel):
    name: str
    age: Optional[int] = None
```

----------------------------------------

TITLE: Declaring Path Parameter Metadata
DESCRIPTION: This code snippet demonstrates how to declare metadata for a path parameter using the `Path` class. It shows how to specify a title for the `item_id` path parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params-numeric-validations.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Path

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(
    item_id: int = Path(title="The ID of the item to get"),
):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Restricting Extra Cookies with Pydantic Model Configuration
DESCRIPTION: Shows how to configure a Pydantic model to forbid extra cookies in requests using model_config. This creates strict validation that rejects any cookies not defined in the model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
model_config = ConfigDict(extra='forbid')
```

----------------------------------------

TITLE: Pydantic Model Example (Python 3.8+)
DESCRIPTION: This example demonstrates a Pydantic model definition with type annotations. It shows how to define a class with attributes and their corresponding types, enabling data validation and conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_21

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial011.py!}
```

----------------------------------------

TITLE: Handling File Upload with UploadFile
DESCRIPTION: This snippet demonstrates how to handle file uploads using the `UploadFile` type hint in a FastAPI endpoint. `UploadFile` provides a more sophisticated way to handle file uploads, especially for larger files. It allows you to access the filename, content type, and file contents, and supports asynchronous operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"from typing import Annotated

from fastapi import Body, FastAPI, UploadFile

app = FastAPI()


@app.post("/uploadfiles/")
async def create_upload_file(
    file: Annotated[UploadFile, File()], token: Annotated[str, Body()]
):
    return {"filename": file.filename, "content_type": file.content_type, "token": token}"
```

----------------------------------------

TITLE: Returning HTML Responses in FastAPI
DESCRIPTION: This code snippet shows how to return HTML directly from a FastAPI endpoint using `HTMLResponse`. It imports `HTMLResponse` and passes it to the `response_class` parameter in the *path operation*.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
```

----------------------------------------

TITLE: Path Parameter Containing a Path
DESCRIPTION: This example demonstrates how to declare a path parameter that can contain a path itself using the `:path` converter in the route definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_8

LANGUAGE: python
CODE:
```
@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
    return {"file_path": file_path}
```

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: This command navigates the terminal to a specific project directory. This is a common initial step when working on a project to ensure commands are executed in the correct context.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
"$ cd ~/code/prisoner-of-azkaban"
```

----------------------------------------

TITLE: Hinting Custom Class Type - Python
DESCRIPTION: This snippet shows how to define a simple custom class `Person` and then use it as a type hint for a function parameter. This allows type checkers and editors to understand that the `person` argument must be an instance of the `Person` class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_18

LANGUAGE: Python
CODE:
```
class Person:
    def __init__(self, name: str):
        self.name = name

def get_person_name(person: Person):
    return person.name
```

----------------------------------------

TITLE: Dockerfile Command for TLS Proxy Headers
DESCRIPTION: This Dockerfile command includes the `--proxy-headers` option when running the Uvicorn server. This is necessary when the application is running behind a TLS termination proxy like Nginx or Traefik, allowing Uvicorn to correctly handle forwarded headers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_21

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Customizing OpenAPI Schema for Binary Responses in FastAPI
DESCRIPTION: Demonstrates how to customize the OpenAPI schema for a path operation that returns binary data, using a Pydantic model to define the schema and openapi_extra to specify the response format.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response
from pydantic import BaseModel

class Item(BaseModel):
    data: str

app = FastAPI()

@app.get(
    "/items/{item_id}",
    response_class=Response,
    responses={
        200: {
            "content": {"application/octet-stream": {}},
            "description": "Return an image.",
        }
    },
    openapi_extra={
        "responses": {
            "200": {
                "content": {
                    "application/octet-stream": {
                        "schema": {
                            "type": "string",
                            "format": "binary"
                        }
                    }
                }
            }
        }
    },
)
def read_item(item_id: str):
    file_data = get_file(item_id)
    return Response(content=file_data, media_type="application/octet-stream")
```

----------------------------------------

TITLE: Declaring Query Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to declare query parameters in a FastAPI endpoint. It shows how to define parameters like `skip` and `limit` as function arguments. FastAPI automatically recognizes them as query parameters and converts the data types based on the type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Returning Content from Path Operation
DESCRIPTION: This code snippet demonstrates how to return content from a path operation function. You can return a dict, list, or single values like str or int. FastAPI automatically converts these to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: OpenAPI Schema with Additional Servers
DESCRIPTION: This JSON snippet shows the OpenAPI schema generated by FastAPI when additional servers are configured. It highlights the automatically generated server with the URL derived from the 'root_path'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_12

LANGUAGE: JSON
CODE:
```
{
    "openapi": "3.1.0",
    "servers": [
        {
            "url": "/api/v1"
        },
        {
            "url": "https://stag.example.com",
            "description": "Staging environment"
        },
        {
            "url": "https://prod.example.com",
            "description": "Production environment"
        }
    ],
    "paths": {}
}
```

----------------------------------------

TITLE: Activating the virtual environment (Windows Bash)
DESCRIPTION: This command activates the virtual environment using Bash on Windows (e.g., Git Bash). It sources the `activate` script located in the `.venv/Scripts` directory to configure the Bash session to use the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_5

LANGUAGE: Shell
CODE:
```
```console
$ source .venv/Scripts/activate
```
```

----------------------------------------

TITLE: Deprecating Path Operations in FastAPI
DESCRIPTION: This snippet shows how to mark a FastAPI path operation as deprecated using the `deprecated` parameter.  Deprecated operations are marked as such in the interactive documentation, indicating that they should no longer be used.  This allows for a smoother transition when phasing out older functionality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}", deprecated=True)
async def read_item(item_id: str):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Defining Webhooks in FastAPI Application
DESCRIPTION: This code snippet demonstrates how to create a FastAPI application with webhooks. It shows the setup of a FastAPI app with a regular endpoint and a webhook definition that uses Pydantic models for request validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/openapi-webhooks.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
app = FastAPI(
    title="My app with webhooks",
    description="An application with FastAPI webhooks",
)


# Define the webhook with the "new-subscription" identifier
@app.webhooks.post("new-subscription")
def new_subscription(body: Item):
    """Webhook for new subscription.

    This webhook is triggered when a new subscription is created.
    """
    return {"msg": "Notification received"}

```

----------------------------------------

TITLE: Importing Cookie class in FastAPI (Python)
DESCRIPTION: This snippet shows how to import the Cookie class from FastAPI, which is used to declare cookie parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/cookie-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Cookie
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application (Python)
DESCRIPTION: This snippet shows the initial code for a simple FastAPI application. It defines two GET endpoints: one at the root path '/' and another at '/items/{item_id}' which accepts a path parameter and an optional query parameter. It uses standard Python function definitions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/README.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Custom HTTP Error Handling
DESCRIPTION: This snippet demonstrates how to define a custom HTTP error with custom headers in FastAPI. This can be useful for adding additional metadata to error responses. It showcases how to return a custom status code and headers when handling an exception.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi.responses import JSONResponse


async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},
    )
```

LANGUAGE: Python
CODE:
```
@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},
    )


@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"name": name}
```

----------------------------------------

TITLE: Reusing FastAPI's Default Exception Handlers
DESCRIPTION: This code snippet illustrates how to reuse FastAPI's default exception handlers after performing custom actions on the exception. It imports default exception handlers from `fastapi.exception_handlers` and calls them within a custom exception handler, allowing you to extend the default behavior.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, Request, status\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.exception_handlers import (\n    request_validation_exception_handler,\n    http_exception_handler,\n)\nfrom fastapi.responses import JSONResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\n\napp = FastAPI()\n\n\n@app.exception_handler(StarletteHTTPException)\nasync def custom_http_exception_handler(\n    request: Request, exc: StarletteHTTPException\n) -> JSONResponse:\n    print(f\"Ooooops! HTTPException!: {exc.detail}\")\n    return await http_exception_handler(request, exc)\n\n\n@app.exception_handler(RequestValidationError)\nasync def custom_validation_exception_handler(\n    request: Request, exc: RequestValidationError\n) -> JSONResponse:\n    print(f\"Ooooops! RequestValidationError!: {exc.errors()}\")\n    return await request_validation_exception_handler(request, exc)\n\n\n@app.get("/items/{item_id}")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise StarletteHTTPException(status_code=status.HTTP_418_IM_A_TEAPOT, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}"
```

----------------------------------------

TITLE: Declaring List of Models as Response
DESCRIPTION: This snippet demonstrates how to declare a response that consists of a list of Pydantic models using `typing.List`. It showcases how to return a list of `Item` objects as a response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/extra-models.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"""\nfrom typing import List\n\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n\nasync def read_items() -> List[Item]:\n    return [\n        Item(name="Portal Gun", price=42.0),\n        Item(name="Plumbus", description="A plumbus", price=3.5),\n        Item(name="Plasma Sword", price=42.0),\n    ]\n"""
```

----------------------------------------

TITLE: Custom OpenAPI Route Operation Schema
DESCRIPTION: Shows how to define a custom OpenAPI schema for a route operation using `openapi_extra`, even when not using Pydantic models for request body parsing. This is useful when handling raw data or using custom data readers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/path-operation-advanced-configuration.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Any, Dict, Optional

from fastapi import FastAPI, Header

app = FastAPI()


async def magic_data_reader(data: bytes) -> Dict[str, Any]:
    return {"message": f"Hello {data.decode()}"}


@app.post("/items/")
async def create_item(
    data: bytes,
    content_type: Optional[str] = Header(None),
):
    return await magic_data_reader(data)


app = FastAPI(
    openapi_extra={
        "paths": {
            "/items/": {
                "post": {
                    "requestBody": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "example": "Bill Gates"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
)
```

----------------------------------------

TITLE: Defining a Custom Exception Handler in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a custom exception handler for a specific exception (`UnicornException`) in FastAPI. It uses the `@app.exception_handler()` decorator to register the handler, which returns a custom JSON response with a specific status code when the exception is raised.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()


class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name


@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request, exc):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},
    )


@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"name": name}

```

----------------------------------------

TITLE: StreamingResponse with File-Like Object in FastAPI
DESCRIPTION: Demonstrates how to use StreamingResponse to return a file-like object (e.g., from `open()`). This is useful for interacting with cloud storage or image processing libraries. Note that the example uses the standard `open()` which is not async, so a regular `def` is used for the path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_9

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, StreamingResponse
import io

app = FastAPI()


@app.get("/stream-file-like")
def stream_file_like():
    def fake_file_process():
        yield b"some initial bytes"
        yield b"\n"
        yield b"some more bytes"

    return StreamingResponse(fake_file_process(), media_type="text/plain")

```

----------------------------------------

TITLE: Initializing FastAPI Application with Async
DESCRIPTION: This code initializes a FastAPI application with asynchronous route handlers using `async def`. It includes two GET endpoints: one for the root path ('/') and another for retrieving items by ID ('/items/{item_id}'). It demonstrates how to define path parameters and optional query parameters in an asynchronous context.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Returning a Response Directly
DESCRIPTION: Shows how to return a Response object directly from a FastAPI endpoint. This gives you full control over the response, including the content, status code, headers, and media type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from fastapi.responses import Response

app = FastAPI()


@app.get("/")
async def read_main():
    return {"message": "Hello World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}


@app.get("/response")
async def read_response():
    content = """
    <html>
        <body>
            <h1>Hello World</h1>
        </body>
    </html>
    """
    return Response(content=content, media_type="text/html")
```

----------------------------------------

TITLE: Using Pydantic Models in FastAPI with Python
DESCRIPTION: This snippet shows how to instantiate Pydantic models with direct value assignment and dictionary unpacking. It demonstrates creating instances of the `User` model with both explicitly defined values and data from a dictionary, leveraging the `**` operator for dictionary unpacking to match model field names.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/features.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Overriding HTTPException Handler in FastAPI
DESCRIPTION: This code snippet demonstrates how to override the default exception handler for `HTTPException` in FastAPI. It defines a custom handler that returns a plain text response instead of the default JSON error when an `HTTPException` is raised.  It imports `HTTPException` from `fastapi`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException
from fastapi.responses import PlainTextResponse

app = FastAPI()


@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    if item_id == 3:
        raise HTTPException(status_code=418, detail="Nope! I don't like 3")
    return {"item_id": item_id}

```

----------------------------------------

TITLE: Displaying FastAPI Experts with Contribution Count using Jinja2
DESCRIPTION: This code snippet creates a display of FastAPI experts who have helped with questions on GitHub. It shows each user's avatar, username, and the count of questions they've replied to, while filtering out certain users.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_2

LANGUAGE: jinja2
CODE:
```
<div class="user-list user-list-center">

{% for user in people.last_month_experts[:10] %}

{% if user.login not in skip_users %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a> <div class="count">Questions replied: {{ user.count }}</div></div>

{% endif %}

{% endfor %}

</div>
```

----------------------------------------

TITLE: Numeric Validation: Float with Greater Than and Less Than in FastAPI
DESCRIPTION: This snippet demonstrates how to use `Path` with `Annotated` to validate float values. It enforces that the `item_id` must be greater than 0 and less than 1 using `gt` and `lt`, which is useful for values that must be strictly within a certain range.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
"from typing import Annotated

from fastapi import FastAPI, Path

app = FastAPI()


@app.get(\"/items/{item_id}\")
async def read_items(item_id: Annotated[float, Path(title=\"The ID of the item to get\", gt=0, lt=1)]):
    return {\"item_id\": item_id}"
```

----------------------------------------

TITLE: Function With Simple Type Hints - Python
DESCRIPTION: Illustrates how to use simple, built-in Python types like `int`, `float`, `bool`, and `bytes` as type hints for function parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
def get_items(item_id: int, item_name: str, item_price: float, is_available: bool, item_content: bytes = None):
```

----------------------------------------

TITLE: Embedding a Single Request Body in FastAPI
DESCRIPTION: This snippet demonstrates how to use the `embed` parameter of the `Body` object to wrap a single request body parameter in a JSON object with a specific key.  It defines a path operation that accepts an `Item` as the request body, but specifies `embed=True` in the `Body` object, causing FastAPI to expect the `Item` data to be nested under the `item` key in the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
"@app.post("/items/")
async def create_item(item: Item = Body(embed=True)):
    return {"item": item}"
```

----------------------------------------

TITLE: Hero Creation Model Definition
DESCRIPTION: Defines the `HeroCreate` model, used for validating data received from clients when creating a new Hero. It includes fields for `name`, `age`, and `secret_name`, allowing clients to provide the secret name during creation, which is then stored in the database but not returned in API responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_12

LANGUAGE: Python
CODE:
```
class HeroCreate(HeroBase):
    secret_name: str
```

----------------------------------------

TITLE: Dependency with yield and try/finally
DESCRIPTION: Illustrates how to use a `try` block in a dependency with `yield` to catch exceptions that occur during the request processing and ensure that cleanup steps are executed using `finally`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_3

LANGUAGE: Python
CODE:
```
db = SessionLocal()
try:
    yield db
finally:
    db.close()
```

----------------------------------------

TITLE: Adding JSON Schema Examples to FastAPI Body Parameter
DESCRIPTION: Shows how to include a single example for a request body parameter in a FastAPI path operation using the `Body()` function and its `examples` argument. These examples are added to the JSON Schema for the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/schema-extra-example.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Body
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

app = FastAPI()

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        examples=[
            {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2,
            }
        ]
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Include Custom Documentation with CDN URLs in FastAPI
DESCRIPTION: This snippet creates custom path operations for serving the Swagger UI and ReDoc documentation with custom CDN URLs. It reuses FastAPI's internal functions to generate the HTML pages for the documentation, passing the necessary arguments such as `openapi_url`, `title`, `swagger_js_url`, and `swagger_css_url`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-docs-ui-assets.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi.openapi.docs import (
    get_redoc_html,
    get_swagger_ui_html,
)
from fastapi.staticfiles import StaticFiles


@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + " - Swagger UI",
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url="https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js",
        swagger_css_url="https://unpkg.com/swagger-ui-dist@5/swagger-ui.css",
    )


@app.get("/redoc", include_in_schema=False)
async def custom_redoc_html():
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=app.title + " - ReDoc",
        redoc_js_url="https://unpkg.com/redoc@next/bundles/redoc.standalone.js",
    )
```

----------------------------------------

TITLE: Rendering GitHub Sponsors List Template
DESCRIPTION: Template code that iterates through GitHub sponsors and displays them in a grid with avatars and usernames. It excludes sponsors that already have badges and uses Liquid templating syntax combined with HTML.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_5

LANGUAGE: html
CODE:
```
{% if github_sponsors %}
{% for group in github_sponsors.sponsors %}

<div class="user-list user-list-center">

{% for user in group %}
{% if user.login not in sponsors_badge.logins %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a></div>

{% endif %}
{% endfor %}

</div>

{% endfor %}
{% endif %}
```

----------------------------------------

TITLE: Using list instead of set for include/exclude in FastAPI
DESCRIPTION: This snippet demonstrates that FastAPI automatically converts `list` or `tuple` to a `set` when used with `response_model_include` or `response_model_exclude`. It ensures the code still works as expected even if a `list` or `tuple` is mistakenly provided instead of a `set`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
"@app.get("/items/{item_id}", response_model=Item, response_model_include=["name", "description"])
async def read_item(item_id: str):
    item = items[item_id]
    return item"
```

LANGUAGE: python
CODE:
```
"@app.get("/items/{item_id}", response_model=Item, response_model_exclude=["tax", "description"])
async def read_item(item_id: str):
    item = items[item_id]
    return item"
```

----------------------------------------

TITLE: Adding a Path Operation Directly to FastAPI
DESCRIPTION: Demonstrates adding a path operation directly to the FastAPI application instance. This path operation will function alongside those included via APIRouter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_12

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.responses import HTMLResponse

from .internal import admin
from .routers import items, users

app = FastAPI()

app.include_router(users.router)
app.include_router(items.router)
app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)


@app.get("/")
async def root():
    return {"message": "Hello Bigger Applications!"}


@app.get("/teapot", response_class=HTMLResponse)
async def teapot():
    return '''
    <h1>I'm a teapot</h1>
    <p>\nThis teapot doesn't actually brew coffee. Instead, it will return HTML content, specifically an image of a teapot.\n</p>
    <img src="https://media.giphy.com/media/t3cLl0hhXUjkFvKj3v/giphy.gif" alt="Teapot">
    '''
```

----------------------------------------

TITLE: Defining Callback Route Operation with APIRouter
DESCRIPTION: This snippet showcases how to define a callback route operation using an APIRouter. It exemplifies how to specify the expected request body and response model for an external API that will receive a callback. The route itself can include an OpenAPI 3 expression, using variables with parameters and parts of the original request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"@invoices_callback_router.post(
    "{$callback_url}/invoices/{$request.body.id}",
    response_model=InvoiceEventReceived,
)
async def invoice_paid_callback(body: InvoiceEvent):
    pass"
```

----------------------------------------

TITLE: Adding Summary and Description to Path Operations in FastAPI
DESCRIPTION: This snippet demonstrates how to add a summary and description to a FastAPI path operation.  The `summary` parameter provides a short summary of the operation, while the `description` parameter allows for a more detailed explanation.  Both are used in the OpenAPI schema and the interactive documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post("/items/", summary="Create an item")
async def create_item(name: str):
    """
    Create an item with all the information:

    - name: Each item must have a name
    - description: A long description
    - price: Must be non-negative
    - tax: If the item is taxable
    """
    return {"name": name}
```

----------------------------------------

TITLE: Pydantic v2: Defining Settings with BaseSettings
DESCRIPTION: This code snippet defines a `Settings` class using Pydantic's `BaseSettings` to automatically load configuration from environment variables. It defines attributes `app_name`, `admin_email`, and `items_per_user` with type annotations and default values. Pydantic automatically maps environment variables (e.g., `APP_NAME`) to corresponding attributes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseSettings, EmailStr


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: EmailStr
    items_per_user: int = 50


    class Config:
        env_file = ".env"


settings = Settings()
```

----------------------------------------

TITLE: Adding Metadata for Tags in FastAPI
DESCRIPTION: This snippet demonstrates how to add metadata for tags used to group path operations in FastAPI. It includes descriptions with Markdown formatting and links to external documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/metadata.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

tags_metadata = [
    {
        "name": "users",
        "description": "Operations with users. The **login** logic is also here.",
    },
    {
        "name": "items",
        "description": "Manage items. So _fancy_ they have their own docs.",
        "externalDocs": {
            "description": "Items external docs",
            "url": "https://fastapi.tiangolo.com/",
        },
    },
]

app = FastAPI(openapi_tags=tags_metadata)


@app.get("/users/", tags=["users"])
async def get_users():
    return [{"name": "Harry"}, {"name": "Ron"}]


@app.get("/items/", tags=["items"])
async def get_items():
    return [{"name": "wand"}, {"name": "flying broom"}]
```

----------------------------------------

TITLE: Mixing Path, Query, and Body Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to combine `Path`, `Query`, and request body parameters in a FastAPI path operation. It defines a path operation that accepts a path parameter (`item_id`), a query parameter (`q`), and an optional request body parameter (`item`). The `Item` model defines the structure of the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    q: Union[str, None] = None,
    item: Union[Item, None] = None,
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    if item:
        results.update({"item": item})
    return results
"
```

----------------------------------------

TITLE: StreamingResponse with file-like objects in FastAPI
DESCRIPTION: Demonstrates how to use StreamingResponse with a generator function to iterate over a file-like object, avoiding loading the entire file into memory. The generator function uses `yield from` to delegate iteration and ensures the file is closed using a `with` block.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_11

LANGUAGE: python
CODE:
```
from typing import Generator

from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()


def iterfile() -> Generator[bytes, None, None]:
    with open("file.txt", mode="rb") as file_like:
        yield from file_like


@app.get("/files")
async def main():
    return StreamingResponse(iterfile(), media_type="text/plain")
```

----------------------------------------

TITLE: Update /token Route Operation
DESCRIPTION: This snippet updates the `/token` route operation to create and return a real JWT access token. It creates a `timedelta` with the token's expiration time and generates the JWT token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(fake_users_db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Configuring Traefik Entry Point | TOML
DESCRIPTION: This configuration file for Traefik defines an entry point named `http` listening on port `9999`. It also specifies that Traefik should load additional configuration, particularly file-based providers, from the `routes.toml` file. This sets up the initial listener and points to further routing rules.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_1

LANGUAGE: TOML
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Using Jinja2Templates in FastAPI - Python
DESCRIPTION: Demonstrates how to import and initialize Jinja2Templates, define a path operation that accepts a Request object, and return a TemplateResponse rendering an HTML template with context data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/templates.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles

app = FastAPI()

# Mount static files directory
app.mount("/static", StaticFiles(directory="static"), name="static")

# Initialize Jinja2Templates, specifying the directory where templates are located
templates = Jinja2Templates(directory="templates")

# Define a path operation that renders a template
@app.get("/items/{id}", response_class=HTMLResponse)
async def read_item(request: Request, id: str):
    # Render and return the template response
    return templates.TemplateResponse(
        name="item.html", # The name of the template file
        request=request, # The request object is required by Jinja2Templates
        context={
            "id": id # Data to be passed to the template
        }
    )
```

----------------------------------------

TITLE: Request Body, Path, and Query Parameters
DESCRIPTION: This code snippet demonstrates how to use request body parameters (Pydantic model), path parameters, and query parameters all in the same FastAPI endpoint. FastAPI automatically infers the source of each parameter based on its type and declaration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body.md#_snippet_5

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item, q: Union[str, None] = None):
    results = {"item_id": item_id, **item.dict()}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: OpenAPI Responses JSON Schema
DESCRIPTION: This JSON schema represents the OpenAPI responses for a path operation, including a 404 response with a reference to the `Message` schema, a 200 response with a reference to the `Item` schema, and a 422 response with a reference to the `HTTPValidationError` schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/additional-responses.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "responses": {
        "404": {
            "description": "Additional Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Message"
                    }
                }
            }
        },
        "200": {
            "description": "Successful Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Item"
                    }
                }
            }
        },
        "422": {
            "description": "Validation Error",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Returning Custom Status Codes with JSONResponse in FastAPI Python
DESCRIPTION: This code snippet demonstrates how to return different HTTP status codes based on conditions by directly returning a JSONResponse object. It handles updating an item with status code 200 or creating a new item with status code 201 if it doesn't exist.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-status-codes.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()


@app.put("/items/{item_id}")
def upsert_item(item_id: str, name: str, description: str | None = None):
    if item_id in items:
        item = {"item_id": item_id, "name": name, "description": description}
        items[item_id] = item
        return item
    else:
        item = {"item_id": item_id, "name": name, "description": description}
        items[item_id] = item
        return JSONResponse(status_code=201, content=item)
```

----------------------------------------

TITLE: Create Hero Endpoint (POST)
DESCRIPTION: Defines an HTTP POST endpoint `/heroes/` to create a new hero. It accepts a `HeroCreate` model for input validation and uses `response_model=HeroPublic` to serialize and validate the response data, ensuring the `secret_name` is not returned.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import Depends
from sqlmodel import Session

# Assume get_session, Hero, HeroCreate, HeroPublic are defined

@app.post("/heroes/", response_model=HeroPublic)
def create_hero(*, session: Session = Depends(get_session), hero: HeroCreate):
    db_hero = Hero.from_orm(hero)
    session.add(db_hero)
    session.commit()
    session.refresh(db_hero)
    return db_hero
```

----------------------------------------

TITLE: Embedding a Single Body Parameter (Python)
DESCRIPTION: Shows how to use `Body(..., embed=True)` to make FastAPI expect a single Pydantic model body parameter (`item`) to be nested within the request body JSON under a key matching the parameter name, instead of being the root of the body. This results in an expected body structure like `{"item": {...}}`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-multiple-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item = Body(..., embed=True)):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Using Function Name as operationId
DESCRIPTION: This snippet shows how to iterate through route functions and overwrite the `operationId` in each route operation using `APIRoute.name`. This is done after adding all route operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/path-operation-advanced-configuration.md#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Callable

from fastapi import FastAPI
from fastapi.routing import APIRoute


def custom_generate_unique_id(route: APIRoute) -> str:
    return route.name


app = FastAPI(generate_unique_id_function=custom_generate_unique_id)


@app.get("/items", operation_id="get_items")
async def read_items():
    return [{"name": "Foo"}, {"name": "Bar"}]


@app.get("/items/{item_id}", operation_id="get_item")
async def read_item(item_id: str):
    return {"name": "Baz"}


@app.post("/items", operation_id="create_item")
async def create_item():
    return {"name": "Bazz"}


for route in app.routes:
    if isinstance(route, APIRoute):
        route.operation_id = route.name
```

----------------------------------------

TITLE: Updating FastAPI App with Request Body
DESCRIPTION: This code updates the FastAPI application to handle PUT requests with a request body. It defines a Pydantic model `Item` to represent the structure of the request body and uses it as a parameter in the `update_item` endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Setting Environment Variable Inline (Bash)
DESCRIPTION: This snippet demonstrates how to set an environment variable MY_NAME directly within the command line when executing a Python script. The variable is only available for that specific execution of the script. Subsequent executions will not have the variable set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/environment-variables.md#_snippet_5

LANGUAGE: bash
CODE:
```
// 在這個程式呼叫的同一行中建立一個名為 MY_NAME 的環境變數
$ MY_NAME="Wade Wilson" python main.py

// 現在就可以讀取到環境變數了

Hello Wade Wilson from Python

// 在此之後這個環境變數將不再存在
$ python main.py

Hello World from Python
```

----------------------------------------

TITLE: Path, Query, and Request Body Parameters in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare a request body, path parameters, and query parameters within the same path operation in FastAPI. FastAPI automatically recognizes each of them and retrieves the correct data from the appropriate location.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional, Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item, q: Optional[str] = None):
    results = {"item_id": item_id, **item.dict()}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Mixing Path, Query, and Optional Body Parameters (Python)
DESCRIPTION: Defines a path operation that accepts a path parameter (`item_id`), an optional query parameter (`q`), and an optional request body parameter (`item`) which is a Pydantic model. Setting the body parameter's default value to `None` makes it optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-multiple-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int = Path(..., gt=0),
    q: Union[str, None] = Query(default=None, alias="item-query"),
    item: Union[Item, None] = None,
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    if item:
        results.update({"item": item})
    return results
```

----------------------------------------

TITLE: Path Operation with APIRouter in items.py
DESCRIPTION: Defines a GET path operation for retrieving an item by its ID. The path is relative to the router's prefix, and the router's dependencies are automatically applied.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_4

LANGUAGE: Python
CODE:
```
@router.get("/{item_id}")
async def read_item(item_id: str):
    return {"name": f"An item with ID: {item_id}"}
```

----------------------------------------

TITLE: Creating a basic FastAPI application
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter. It imports FastAPI, creates an app instance, and defines the endpoints using decorators.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Processing OpenAPI Schema for Better Client Generation
DESCRIPTION: A Python script that modifies OpenAPI JSON to remove tag prefixes from operation IDs, resulting in cleaner generated client methods.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import json
import re

# Read the OpenAPI schema from the file
with open("openapi.json", "r") as file:
    openapi_schema = json.load(file)

# Process the operation IDs to remove the tag prefix
for path in openapi_schema["paths"]:
    for method in openapi_schema["paths"][path]:
        operation = openapi_schema["paths"][path][method]
        if "operationId" in operation:
            # Replace something like "items-get_items" with "get_items"
            operation["operationId"] = re.sub(
                r"^[a-zA-Z0-9_-]+-", "", operation["operationId"]
            )

# Save the modified schema back to the file
with open("openapi.json", "w") as file:
    json.dump(openapi_schema, file)
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code snippet shows how to create an instance of the FastAPI class. The app variable will be the main entry point for creating and interacting with the API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Running Uvicorn behind a TLS Termination Proxy
DESCRIPTION: This Dockerfile command configures Uvicorn to run behind a TLS termination proxy (like Nginx or Traefik) by adding the `--proxy-headers` option. This ensures that Uvicorn correctly handles forwarded headers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_14

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Initializing FastAPI Application
DESCRIPTION: Creates an instance of the FastAPI class, which serves as the main entry point for building the API. This instance is then used to define the API's endpoints and handle incoming requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()
```

----------------------------------------

TITLE: Install PyJWT
DESCRIPTION: Installs the PyJWT library using pip. PyJWT is used for creating and verifying JWT tokens in Python applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/oauth2-jwt.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install pyjwt
```

----------------------------------------

TITLE: Importing FastAPI Request Parameter Functions
DESCRIPTION: Shows how to import all the special parameter functions from the FastAPI framework. These functions enable extraction of data from different parts of the request in path operation functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/parameters.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Body, Cookie, File, Form, Header, Path, Query
```

----------------------------------------

TITLE: Directly Returning an HTMLResponse in FastAPI
DESCRIPTION: Demonstrates how to bypass the response_class parameter and directly return an HTMLResponse object from a FastAPI route handler.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/")
async def read_items():
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)
```

----------------------------------------

TITLE: Single File Upload with Bytes - Python FastAPI
DESCRIPTION: Example showing how to handle single file upload using File and bytes type in FastAPI
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-files.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, File

@app.post("/uploadfile/")
async def create_upload_file(
    file: bytes = File()
):
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet shows how to declare an integer parameter in a FastAPI application using Python type hints. FastAPI uses this declaration for validation, documentation, and input conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Installing WebSockets package in Python
DESCRIPTION: This snippet shows how to install the WebSockets package using pip, which is required for WebSocket functionality in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/websockets.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install websockets

---> 100%
```

----------------------------------------

TITLE: Required Query Parameters in FastAPI
DESCRIPTION: Demonstrates how to make query parameters required by not providing a default value. The 'needy' parameter is a required string query parameter while 'skip' has a default value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
async def read_user_item(item_id: str, needy: str, skip: int = 0, limit: int | None = None):
```

----------------------------------------

TITLE: Accessing Request Body in Exception Handler with Custom Route Class in FastAPI
DESCRIPTION: This code snippet shows how to implement a custom route handler that wraps the request processing in a try/except block to access the request body when handling exceptions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def custom_route_handler(request: Request) -> Response:
    try:
        return await original_route_handler(request)
    except Exception as exc:
        body = await request.body()
        print(f"Error: {exc}\nRequest body: {body}")
        raise
```

----------------------------------------

TITLE: Multiple Body and Query Parameters in FastAPI
DESCRIPTION: This example demonstrates how to combine multiple body parameters with query parameters in a FastAPI path operation. It shows how to define a query parameter without explicitly using `Query`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-multiple-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.post("/items/")
async def create_item(
    item: Item,
    user: User,
    importance: int = Body(gt=0),
    q: str | None = None
):
    results = {"item": item, "user": user, "importance": importance}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Importing WebSocket Class - Python FastAPI
DESCRIPTION: Demonstrates how to import the WebSocket class from FastAPI, which is originally provided by Starlette and used for handling WebSocket connections.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/websockets.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import WebSocket
```

----------------------------------------

TITLE: Relative Import Example (Single Dot)
DESCRIPTION: Illustrates a relative import using a single dot, indicating a module within the same package. It attempts to import 'get_token_header' from the 'dependencies' module in the same directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_8

LANGUAGE: Python
CODE:
```
from .dependencies import get_token_header
```

----------------------------------------

TITLE: Handling Multiple File Uploads in FastAPI
DESCRIPTION: This code snippet demonstrates how to handle multiple file uploads in FastAPI. It defines an endpoint that accepts a list of bytes or UploadFile objects, allowing users to upload multiple files simultaneously using form data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/request-files.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import List

from fastapi import FastAPI, File, UploadFile

app = FastAPI()


@app.post("/files/")
async def create_files(files: List[bytes] = File(...)):
    return {"file_sizes": [len(file) for file in files]}


@app.post("/uploadfiles/")
async def create_upload_files(files: List[UploadFile] = File(...)):
    return {"filenames": [file.filename for file in files]}
```

----------------------------------------

TITLE: Pydantic Field with Examples
DESCRIPTION: Demonstrates how to declare examples for a Pydantic field using the `Field` function. This allows for providing example data directly within the field definition, which is then included in the generated JSON Schema and used in API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/schema-extra-example.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel, Field

app = FastAPI()


class Item(BaseModel):
    name: str = Field(examples=["Foo", "Bar"])
    description: Union[str, None] = Field(default=None, examples=["A very good item", "A great item"])
    price: float = Field(examples=[35.4, 99.99])
    tax: Union[float, None] = Field(default=None, examples=[3.2, 4.2])


@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Union Response Types with typing.Union
DESCRIPTION: Declaring response types that can be one of multiple models using Python's typing.Union
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/extra-models.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from typing import Union
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str = None

class User(BaseModel):
    name: str

def get_item_or_user(item_id: str) -> Union[Item, User]:
    # Implementation logic
```

----------------------------------------

TITLE: Type hinting in functieparameters
DESCRIPTION: Demonstreert het gebruik van type hints in functieparameters in Python. De functie `main` accepteert een string parameter `user_id` en retourneert deze. Type hints zorgen voor editorondersteuning en typecontrole.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declareer een variabele als een str
# en krijg editorondersteuning in de functie
def main(user_id: str):
    return user_id
```

----------------------------------------

TITLE: OpenAPI Response Schema
DESCRIPTION: This JSON snippet shows the OpenAPI schema generated for the additional response defined in the FastAPI application. It includes the 404 response with a reference to the `Message` schema, as well as the 200 and 422 responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/additional-responses.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "responses": {
        "404": {
            "description": "Additional Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Message"
                    }
                }
            }
        },
        "200": {
            "description": "Successful Response",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/Item"
                    }
                }
            }
        },
        "422": {
            "description": "Validation Error",
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Pydantic update example
DESCRIPTION: This snippet demonstrates how to create a copy of an existing Pydantic model using `.copy()` and update it with a dictionary of new values using the `update` parameter. This allows for efficient merging of existing data with new data for partial updates.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-updates.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
    updated_item = stored_item_model.copy(update=update_data)
```

----------------------------------------

TITLE: Add Multiple Examples to FastAPI Body Parameter
DESCRIPTION: Provide multiple example payloads for a request body parameter by passing the `examples` argument to the `Body()` function. The `examples` argument should be a dictionary where keys are example names and values are dictionaries containing `summary`, `description`, and `value` (the example payload).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/schema-extra-example.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Body
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

app = FastAPI()

@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(
        examples={
            "normal": {
                "summary": "A normal example",
                "description": "A **normal** item works correctly.",
                "value": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                },
            },
            "converted": {
                "summary": "An example with converted data",
                "description": "FastAPI can convert incompatible data types",
                "value": {
                    "name": "Bar",
                    "price": "35.4",
                },
            },
            "invalid": {
                "summary": "Invalid data is rejected",
                "value": {
                    "name": "Baz",
                    "price": "thirty five point four",
                },
            },
        },
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Embedding Mailjet Newsletter Form in HTML
DESCRIPTION: HTML iframe element that embeds a Mailjet subscription form with specific styling and attributes. The form is set to full width with a fixed height of 800px.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/newsletter.md#2025-04-21_snippet_0

LANGUAGE: html
CODE:
```
<iframe data-w-type="embedded" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://xr4n4.mjt.lu/wgt/xr4n4/hj5/form?c=40a44fa4" width="100%" style="height: 800px;"></iframe>
```

----------------------------------------

TITLE: OAuth2 Security Scheme Declaration with Scopes
DESCRIPTION: This code snippet demonstrates how to declare an OAuth2 security scheme with scopes in FastAPI. It defines the scopes 'me' and 'items' with descriptions, which will be displayed in the API documentation for login and authorization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/security/oauth2-scopes.md#_snippet_0

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token", scopes=scopes)
```

----------------------------------------

TITLE: Constructing Callback Path Expression
DESCRIPTION: This snippet shows how to construct a callback path expression using OpenAPI 3 syntax, allowing dynamic URL building based on the original request data received by your API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"{$callback_url}/invoices/{$request.body.id}"
```

----------------------------------------

TITLE: Using Context Managers in FastAPI yield Dependencies
DESCRIPTION: This code demonstrates how to use context managers within FastAPI dependencies that use `yield`. It shows how to define a dependency that creates a resource, yields it for use in the route, and then cleans up the resource when the route is finished, even if exceptions occur.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_7

LANGUAGE: Python
CODE:
```
import contextlib
from typing import Generator

from fastapi import Depends, FastAPI

app = FastAPI()


@contextlib.contextmanager
def get_db() -> Generator[None, None, None]:
    db = {"name": "test"}
    try:
        yield db
    finally:
        db.clear()


async def dependency_a(db: dict = Depends(get_db)) -> None:
    assert db == {"name": "test"}
```

----------------------------------------

TITLE: Custom APIRoute Class in a Router in FastAPI
DESCRIPTION: This code snippet shows how to use a custom `APIRoute` class with an `APIRouter` in FastAPI. The `route_class` parameter of `APIRouter` is set to the custom `TimedRoute` class. This ensures that all routes defined within the router will use the custom route class, enabling consistent behavior and modifications across multiple endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

router = APIRouter(prefix="/items", route_class=TimedRoute)
```

----------------------------------------

TITLE: Configuration in a Separate Module (config.py)
DESCRIPTION: This code defines a `Settings` class in a separate module (`config.py`) using Pydantic's `BaseSettings` for configuration management. It includes default values for `app_name`, requires an `admin_email` environment variable, and sets a default `items_per_user` value. An instance of the `Settings` class is created as `settings` to be used elsewhere in the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
from pydantic import BaseSettings, EmailStr


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: EmailStr
    items_per_user: int = 50


settings = Settings()
```

----------------------------------------

TITLE: Adding Global Dependencies to FastAPI App (Python)
DESCRIPTION: This snippet demonstrates how to apply a dependency (common_parameters) to all path operations in a FastAPI application by passing a list of Depends objects to the 'dependencies' parameter when creating the FastAPI instance. This is an alternative to adding dependencies individually to each path operation decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/global-dependencies.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Depends

async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}

app = FastAPI(dependencies=[Depends(common_parameters)])

@app.get("/items/")
async def read_items():
    return [{"item": "Foo"}]

@app.get("/users/")
async def read_users():
    return [{"user": "Bar"}]
```

----------------------------------------

TITLE: Running Python Script with and without Environment Variable (PowerShell)
DESCRIPTION: This example demonstrates running a Python script both without and with the `MY_NAME` environment variable set using the `$Env:` syntax in PowerShell. It shows how the script uses the default value when the variable is not set and the provided value when it is.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/environment-variables.md#_snippet_4

LANGUAGE: Shell
CODE:
```
// Hier stellen we de omgevingsvariabelen nog niet in
$ python main.py

// Omdat we de omgevingsvariabelen niet hebben ingesteld, krijgen we de standaardwaarde

Hello World from Python

// Maar als we eerst een omgevingsvariabele aanmaken
$ $Env:MY_NAME = "Wade Wilson"

// en het programma dan opnieuw aanroepen
$ python main.py

// kan het de omgevingsvariabele nu wel uitlezen

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Adding Dependencies to FastAPI Router Python
DESCRIPTION: Demonstrates how to apply a list of dependencies to an `APIRouter`. These dependencies will be executed before any path operation registered on this router. They are typically used for side effects like security, and their return values are *not* automatically passed to the path operation functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import APIRouter, Depends

# Assume verify_key and verify_token are defined elsewhere
# async def verify_key(...): ...
# async def verify_token(...): ...

router = APIRouter(dependencies=[Depends(verify_key), Depends(verify_token)])
```

----------------------------------------

TITLE: Defining Pydantic Model (Python 3.6+ via typing) - Python
DESCRIPTION: For Python versions 3.6+ (up to 3.8), this snippet shows how to define a data model using Pydantic by inheriting from `BaseModel`. Type hints like `str`, `Optional[datetime]`, and `List[int]` define the expected types for the model's fields, enabling data validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_19

LANGUAGE: Python
CODE:
```
from typing import List, Optional
from datetime import datetime
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = "John Doe"
    signup_ts: Optional[datetime] = None
    friends: List[int] = []
```

----------------------------------------

TITLE: Creating HTTP Middleware in FastAPI
DESCRIPTION: This code snippet shows how to create a simple HTTP middleware in FastAPI using the `@app.middleware("http")` decorator. The middleware receives the request and a `call_next` function, which it can call to process the request further down the chain. It also shows how to access and modify the response before it is sent back.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/middleware.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers[\"X-Process-Time\"] = str(process_time)
    return response"
```

----------------------------------------

TITLE: Adding Tags using Enum in FastAPI Path Operations - Python
DESCRIPTION: This snippet illustrates using a Python `Enum` to define and manage tags. Using an Enum for tags helps avoid typos and provides better code organization, particularly for applications with many tags. The `tags` parameter accepts a list of these Enum members.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from enum import Enum


class Tags(str, Enum):
    items = "items"
    users = "users"


app = FastAPI()


@app.post("/items/", tags=[Tags.items])
async def create_item():
    return {"item": "Foo"}


@app.get("/users/", tags=[Tags.users])
async def read_users():
    return [{"user": "Foo"}]

```

----------------------------------------

TITLE: Enum Value Retrieval - FastAPI (Python)
DESCRIPTION: This code snippet demonstrates how to retrieve the actual value of an Enum member (a string in this case) using the `.value` attribute. This is useful when you need to use the string representation of the Enum member.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: Python
CODE:
```
from enum import Enum

from fastapi import FastAPI

app = FastAPI()


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"


@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}
    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Defining Python Package Dependencies with Version Constraints
DESCRIPTION: Specifies required Python packages and their version constraints for the FastAPI project. Includes core dependencies like PyGithub for GitHub integration, pydantic for data validation, httpx for HTTP requests, pyyaml for YAML processing, and smokeshow for testing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-github-actions.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
PyGithub>=2.3.0,<3.0.0
pydantic>=2.5.3,<3.0.0
pydantic-settings>=2.1.0,<3.0.0
httpx>=0.27.0,<0.28.0
pyyaml >=5.3.1,<7.0.0
smokeshow
```

----------------------------------------

TITLE: Configuring package.json for OpenAPI TypeScript Generation
DESCRIPTION: This snippet configures the `package.json` file to use `openapi-ts` for generating a TypeScript client from a local `openapi.json` file. It specifies the input and output paths, as well as the client library to use (axios).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/generate-clients.md#_snippet_8

LANGUAGE: JSON
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input ./openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Using Context Managers in FastAPI Dependencies with yield
DESCRIPTION: This code demonstrates how to use context managers within FastAPI dependencies using `yield`. It defines a dependency function that uses `with` to manage a resource (in this case, a database session). The `yield` statement allows the dependency to provide a value to the route function while ensuring that the resource is properly cleaned up after the route function completes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_7

LANGUAGE: Python
CODE:
```
async def dependency_a():
    resource = get_resource_that_needs_cleanup()
    try:
        yield resource
    finally:
        await resource.close()
```

----------------------------------------

TITLE: Handling Optional File Uploads
DESCRIPTION: This code snippet demonstrates how to handle optional file uploads by providing a default value of `None` to the `File` parameter.  This allows the endpoint to function correctly even if a file is not provided in the request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"from typing import Annotated, Optional

from fastapi import FastAPI, File, Form

app = FastAPI()


@app.post("/files/")
async def create_file(
    file: Annotated[Optional[bytes], File()] = None,
    fileb: Annotated[Optional[bytes], File()] = None,
    token: Annotated[str, Form()] = None,
):
    return {"file_size": file, "token": token}


@app.post("/uploadfiles/")
async def create_upload_file(
    file: Annotated[Optional[bytes], File()] = None,
    token: Annotated[str, Form()] = None,
):
    return {"filename": file, "token": token}"
```

----------------------------------------

TITLE: Update /token Path Operation
DESCRIPTION: This code snippet updates the `/token` path operation to create a JWT access token and return it. It defines the token expiration time using `timedelta`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/oauth2-jwt.md#_snippet_5

LANGUAGE: python
CODE:
```
@app.post("/token", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = await authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]},
        expires_delta=access_token_expires,
    )
    return {"access_token": access_token, "token_type": "bearer"}
```

----------------------------------------

TITLE: Declaring a Pydantic Model in Python
DESCRIPTION: This code snippet shows how to declare a Pydantic model in Python. Pydantic models are used for data validation and serialization. The `User` model is defined with fields for `id` (integer), `name` (string), and `joined` (date).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/features.md#_snippet_1

LANGUAGE: python
CODE:
```
from datetime import date

from pydantic import BaseModel

# 宣告一個變數為 string
# 並在函式中獲得 editor support
def main(user_id: str):
    return user_id


# 宣告一個 Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: FastAPI Invoice Creation with Callback URL
DESCRIPTION: This snippet shows a FastAPI route operation that receives an Invoice object and a callback URL. It includes the use of a Pydantic Url type for the callback URL and passes the routes of the callback router to the callbacks argument of the route decorator. This allows documenting the expected structure of the external API that will receive the callback.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"@app.post("/invoices/", callbacks=invoices_callback_router.routes)
async def create_invoice(
    invoice: Invoice,
    callback_url: Url,
):
    return {"id": invoice.id}"
```

----------------------------------------

TITLE: Read Single Hero Endpoint (GET)
DESCRIPTION: Defines an HTTP GET endpoint `/heroes/{hero_id}` to retrieve a single hero by ID. It fetches the hero from the database and uses `response_model=HeroPublic` to serialize the response, returning a 404 error if the hero is not found.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_8

LANGUAGE: python
CODE:
```
from fastapi import Depends, HTTPException
from sqlmodel import Session

# Assume get_session, Hero, HeroPublic are defined

@app.get("/heroes/{hero_id}", response_model=HeroPublic)
def read_hero(*, session: Session = Depends(get_session), hero_id: int):
    hero = session.get(Hero, hero_id)
    if not hero:
        raise HTTPException(status_code=404, detail="Hero not found")
    return hero
```

----------------------------------------

TITLE: Python Tuple and Set Type Hints with Typing Module
DESCRIPTION: This code snippet shows how to use `Tuple` and `Set` types from the `typing` module to define variables that are tuples and sets with specific element types. `Tuple` specifies a tuple with elements of defined types, while `Set` indicates a set containing elements of a particular type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
"from typing import Tuple, Set

def process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):
    return items_t, items_s"
```

----------------------------------------

TITLE: Mounting Static Files with FastAPI - Python
DESCRIPTION: This snippet demonstrates how to integrate static file serving into a FastAPI application. It imports the necessary classes, creates a FastAPI app instance, and then mounts a directory named 'static' to be served under the URL path '/static'. The 'name' parameter provides an internal reference for this mounted application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/static-files.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

app = FastAPI()

app.mount("/static", StaticFiles(directory="static"), name="static")
```

----------------------------------------

TITLE: Definindo Rota com Tipos de Dados Adicionais em FastAPI
DESCRIPTION: Este snippet demonstra como definir uma rota FastAPI usando tipos de dados adicionais como UUID, datetime, e frozenset. A função também realiza uma operação de data simples.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/extra-data-types.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from datetime import datetime, time, timedelta
from uuid import UUID

from fastapi import FastAPI

app = FastAPI()


@app.put("/items/{item_id}")
async def read_items(
    item_id: UUID,
    start_datetime: datetime | None = None,
    end_datetime: datetime | None = None,
    repeat_at: time | None = None,
    process_after: timedelta | None = None,
):
    start_process = start_datetime + process_after
    duration = end_datetime - start_process
    return {
        "item_id": item_id,
        "start_datetime": start_datetime,
        "end_datetime": end_datetime,
        "repeat_at": repeat_at,
        "process_after": process_after,
        "start_process": start_process,
        "duration": duration,
    }
```

----------------------------------------

TITLE: Running Uvicorn with Proxy Headers in Dockerfile
DESCRIPTION: Sets the command to run the Uvicorn server, including the `--proxy-headers` option. This option is useful when running the container behind a TLS termination proxy (load balancer) like Nginx or Traefik, as it informs Uvicorn that the application is running behind HTTPS and can trust headers sent by the proxy.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_10

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Updating Hero Data with HeroUpdate
DESCRIPTION: This snippet demonstrates how to update hero data using the PATCH method and the HeroUpdate model. It retrieves only the data passed by the client, excluding default values, and updates the hero's information in the database.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_17

LANGUAGE: Python
CODE:
```
@app.patch("/heroes/{hero_id}", response_model=HeroPublic)
async def update_hero(
    hero_id: int, hero: HeroUpdate
):
    with Session(engine) as session:
        hero_db = session.get(Hero, hero_id)
        if not hero_db:
            raise HTTPException(status_code=404, detail="Hero not found")
        hero_data = hero.dict(exclude_unset=True)
        hero_db.sqlmodel_update(hero_data)
        session.add(hero_db)
        session.commit()
        session.refresh(hero_db)
        return hero_db
```

----------------------------------------

TITLE: Enum Member Comparison - FastAPI (Python)
DESCRIPTION: This code snippet shows how to compare a path parameter (which is an Enum member) with the members of the Enum. This allows you to perform conditional logic based on the value of the path parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
from enum import Enum

from fastapi import FastAPI

app = FastAPI()


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"


@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}
    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Defining Route Operations with APIRouter in FastAPI
DESCRIPTION: This code snippet shows how to define route operations using the APIRouter instance. It demonstrates defining GET routes with path parameters and query parameters, similar to how you would with a FastAPI instance. The APIRouter allows you to group related routes into a single module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_1

LANGUAGE: Python
CODE:
```
@router.get("/users/me", tags=["users"])
async def read_user_me():
    return {"username": "fakecurrentuser"}


@router.get("/users/{username}", tags=["users"])
async def read_user(username: str):
    return {"username": username}
```

----------------------------------------

TITLE: Awaiting Asynchronous Operation in Python
DESCRIPTION: This code snippet shows how to use the `await` keyword to wait for an asynchronous operation to complete. The `await` keyword can only be used inside an `async` function. It pauses the execution of the function until the awaited operation returns a result.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/async.md#_snippet_3

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Defining a Pydantic Body Model in Python
DESCRIPTION: Shows how to define a simple Pydantic BaseModel class (`Item`) by inheriting from `BaseModel`. It declares fields with standard Python type hints. Fields with default values (`None`) are considered optional. This model defines the expected structure and data types for the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Error Response for Missing Required Query Parameter
DESCRIPTION: This JSON snippet shows the error response returned by FastAPI when a required query parameter (in this case, 'needy') is missing from the request. The response indicates that the 'needy' field is required.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "detail": [
        {
            "loc": [
                "query",
                "needy"
            ],
            "msg": "field required",
            "type": "value_error.missing"
        }
    ]
}
```

----------------------------------------

TITLE: Using OAuth2PasswordBearer Dependency in FastAPI
DESCRIPTION: This snippet demonstrates how to use the OAuth2PasswordBearer as a dependency in a FastAPI route. The dependency injects the `token` (access token) that's passed by the user, which can then be used for authorization purposes. FastAPI automatically handles the validation and authentication processes when the dependency is declared.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"async def read_items(token: str = Depends(oauth2_scheme)):\n    return {"token": token}"
```

----------------------------------------

TITLE: Example JSON Request Body (Partial)
DESCRIPTION: A JSON object representing a valid request body that conforms to the defined `Item` Pydantic model, but omits the optional fields (`description` and `tax`). This demonstrates that optional fields do not need to be included in the request body if they have a default value like `None`. This is another example of a valid input format.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "Foo",
    "price": 45.2
}
```

----------------------------------------

TITLE: Pydantic Field with example
DESCRIPTION: Shows how to declare extra information for the JSON Schema by passing arbitrary arguments to the Field() function. This is used to add an example for each field for documentation purposes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/schema-extra-example.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel, Field

app = FastAPI()


class Item(BaseModel):
    name: str = Field(example="Foo")
    description: Optional[str] = Field(
        default=None, example="A very nice Item"
    )
    price: float = Field(example=35.4)
    tax: Optional[float] = Field(default=None, example=3.2)


@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Defining a Dependency Function in FastAPI (Python)
DESCRIPTION: This Python function serves as a dependency (or "injectable") in FastAPI. It accepts optional query parameters 'q', 'skip', and 'limit' with default values and returns them as a dictionary. It demonstrates the basic structure of a dependency function, similar to a route operation function but without the route decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Preventing Extra Cookies with Pydantic Config
DESCRIPTION: This snippet demonstrates how to prevent additional (unexpected) cookies from being accepted by a FastAPI endpoint. It uses the `extra = "forbid"` configuration in the Pydantic model to raise a validation error if extra cookies are sent in the request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"from typing import Union

from fastapi import Cookie, FastAPI
from pydantic import BaseModel, ConfigDict


class Ads(BaseModel):
    model_config = ConfigDict(extra='forbid')
    dark_mode: Union[bool, None] = None
    items_per_page: int = 50


app = FastAPI()


@app.get("/")
async def read_ads(ads: Ads = Cookie()):
    return ads"
```

----------------------------------------

TITLE: Custom Content-Type Handling in FastAPI Using Pydantic
DESCRIPTION: This snippet demonstrates how to manually define a content-type for a path operation's request body in FastAPI using a Pydantic model, even when the type is not JSON, such as YAML. It shows the flexibility in specifying and validating different content types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Body
from pydantic import BaseModel

class Item(BaseModel):
    name: str

@app.post("/items/")
async def create_item(item: Item = Body(..., media_type="application/x-yaml")):
    return item
```

----------------------------------------

TITLE: Custom OpenAPI Path Operation Schema in FastAPI
DESCRIPTION: Shows how to define a custom OpenAPI schema for a path operation using openapi_extra, allowing manual specification of request body schema even when not using Pydantic models for request parsing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/path-operation-advanced-configuration.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Any, Dict, Optional

from fastapi import FastAPI, Header

app = FastAPI()


async def magic_data_reader(data: bytes) -> Dict[str, Any]:
    return {"message": f"Hello Data: {data.decode()}"}


@app.post("/items/", openapi_extra={
    "requestBody": {
        "content": {
            "application/x-magic": {
                "schema": {
                    "type": "string",
                    "example": "Some magic data"
                }
            }
        }
    }
})
async def create_item(
    data: bytes,
    magic_header: Optional[str] = Header(None),
):
    data = await magic_data_reader(data)
    return {"data": data, "magic_header": magic_header}
```

----------------------------------------

TITLE: Executing Python Script with Inline Env Var in Bash
DESCRIPTION: Shows how to set an environment variable specifically for a single command execution by placing the variable assignment before the command on the same line in Bash. It also demonstrates that the variable is not persistent afterwards.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/environment-variables.md#_snippet_5

LANGUAGE: bash
CODE:
```
// 在这个程序调用的同一行中创建一个名为 MY_NAME 的环境变量
$ MY_NAME="Wade Wilson" python main.py

// 现在就可以读取到环境变量了

Hello Wade Wilson from Python

// 在此之后这个环境变量将不会依然存在
$ python main.py

Hello World from Python
```

----------------------------------------

TITLE: Define SQLModel Hero Table Model
DESCRIPTION: Define a `Hero` class that inherits from `SQLModel` and sets `table=True` to indicate it represents a database table. Fields are defined with type hints and `Field` for database-specific configurations like primary key and index.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional
from sqlmodel import Field, SQLModel

class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Adding Custom Headers in FastAPI Middleware
DESCRIPTION: This code snippet demonstrates how to add a custom header (X-Process-Time) to the response within a FastAPI middleware.  It measures the time taken to process the request by recording the start and end times using `time.time()`.  The measured processing time is then added as a string to the response headers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/middleware.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)"
```

----------------------------------------

TITLE: Mixing Required and Optional Query Parameters in FastAPI
DESCRIPTION: This example shows how to mix required, optional, and query parameters with default values in a FastAPI endpoint. The `needy` parameter is required, `skip` has a default value of 0, and `limit` is optional with a default value of `None`.  The function returns a dictionary containing these parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
"@app.get("/items/{item_id}")
async def read_user_item(
    item_id: str,
    needy: str,
    skip: int = 0,
    limit: int | None = None,
):
    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}
    return item"
```

----------------------------------------

TITLE: Handling Multiple Body Parameters (Python)
DESCRIPTION: Shows how to declare multiple Pydantic models (`item`, `user`) as parameters in a path operation function. FastAPI automatically expects a JSON request body where each parameter name is a key containing the corresponding model's data, like `{"item": {...}, "user": {...}}`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-multiple-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item, user: User):
    results = {"item_id": item_id, "item": item, "user": user}
    return results
```

----------------------------------------

TITLE: Pydantic exclude_unset example
DESCRIPTION: This snippet shows how to use the `exclude_unset` parameter in the `.dict()` method of a Pydantic model to generate a dictionary containing only the data that was explicitly set during model creation, excluding default values. This is particularly useful for partial updates where you only want to update specific fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-updates.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
    update_data = item.dict(exclude_unset=True)
```

----------------------------------------

TITLE: Rendering Top Contributors with Jinja2 Templates
DESCRIPTION: This code displays the top contributors to FastAPI, showing their avatars, usernames, and the number of pull requests they've made. It limits the display to the top 50 contributors while filtering out specified users.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_3

LANGUAGE: jinja2
CODE:
```
<div class="user-list user-list-center">

{% for user in (contributors.values() | list)[:50] %}

{% if user.login not in skip_users %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatarUrl }}"/></div><div class="title">@{{ user.login }}</div></a> <div class="count">Pull Requests: {{ user.count }}</div></div>

{% endif %}

{% endfor %}

</div>
```

----------------------------------------

TITLE: Lifespan Event Definition with Startup and Shutdown Logic
DESCRIPTION: Defines an asynchronous lifespan function that simulates loading a machine learning model during startup (before handling requests) and removing it from memory during shutdown (after handling requests). This function uses `yield` to separate the startup and shutdown logic.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/events.md#_snippet_0

LANGUAGE: Python
CODE:
```
ml_models = {}

async def fake_model_load():
    await asyncio.sleep(0.01)
    return {"model_name": "SampleModel"}

async def lifespan(app: FastAPI):
    # Load the ML model
    ml_models["model_a"] = await fake_model_load()
    yield
    # Clean up the ML models and release the resources
    ml_models.clear()
```

----------------------------------------

TITLE: Adding JSON Schema Examples to Pydantic v1 Model
DESCRIPTION: Shows how to add `examples` to the generated JSON schema for a Pydantic v1 model. This is achieved using the inner `Config` class and the `schema_extra` attribute, providing a dictionary with the `examples` list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/schema-extra-example.md#_snippet_1

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    class Config:
        schema_extra = {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            ]
        }
```

----------------------------------------

TITLE: Reading Hero Data with HeroPublic
DESCRIPTION: This snippet demonstrates how to read hero data using the HeroPublic response model. It ensures proper data validation and serialization when retrieving a list of heroes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_15

LANGUAGE: Python
CODE:
```
@app.get("/heroes/", response_model=list[HeroPublic])
async def read_heroes():
    with Session(engine) as session:
        heroes = session.exec(select(Hero)).all()
        return heroes
```

----------------------------------------

TITLE: Comparing Enum Members in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to compare the path parameter (which is an Enum member) with a member of the Enum class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: Python
CODE:
```
if model_name == ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}
```

----------------------------------------

TITLE: Optional Query Parameters in FastAPI
DESCRIPTION: Shows how to define an optional query parameter by setting its default value to None. The parameter 'q' is declared as an optional string that will be None if not provided in the request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def read_items(item_id: str, q: str | None = None):
```

----------------------------------------

TITLE: Synchronous Route Handler
DESCRIPTION: Example of a synchronous route handler for libraries that don't support async/await
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/async.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Python Function with Type Hints for Error Checking
DESCRIPTION: This example shows a Python function `process_age` that uses type hints to specify that `name` is a string and `age` is an integer. When an incorrect type (e.g., a string for `age`) is passed, the editor can detect a potential error, helping to prevent bugs and improve code reliability.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"def process_age(name: str, age: int):
    return name + " is " + age"
```

----------------------------------------

TITLE: Custom Path Operation with Tags and Responses
DESCRIPTION: Defines a path operation with multiple tags and custom responses using FastAPI's advanced configuration options
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
def read_item(item_id: int):
    tags=["items", "custom"],
    responses={404: {"description": "Item not found"},
               403: {"description": "Operation forbidden"}}
```

----------------------------------------

TITLE: Pinning Pydantic Version in requirements.txt
DESCRIPTION: Demonstrates how to pin Pydantic to a compatible version range that works with FastAPI, allowing updates within major version 2.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/versions.md#2025-04-21_snippet_3

LANGUAGE: txt
CODE:
```
pydantic>=2.7.0,<3.0.0
```

----------------------------------------

TITLE: Creating Project Directory
DESCRIPTION: Creates a directory structure for a new Python project, including creating a 'code' directory in the home directory and a project-specific directory within it.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_0

LANGUAGE: console
CODE:
```
// Đi đến thư mục home
$ cd
// Tạo một thư mục cho tất cả các dự án của bạn
$ mkdir code
// Vào thư mục code
$ cd code
// Tạo một thư mục cho dự án này
$ mkdir awesome-project
// Vào thư mục dự án
$ cd awesome-project
```

----------------------------------------

TITLE: Dependency Function Signature with SecurityScopes - Python
DESCRIPTION: This snippet shows the signature of a dependency function (`get_current_user`) that needs access to the scopes requested by the client and/or required by the path operation. It uses `Annotated` and `SecurityScopes` to receive the collected scopes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def get_current_user(security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]):
```

----------------------------------------

TITLE: Adding Pydantic Field Example using Field (Python)
DESCRIPTION: This snippet shows how to add examples for individual fields within a Pydantic model using `Field(example=...)`. The `example` parameter is passed directly to the `Field` function for each field, providing a specific example value for that attribute in the generated schema documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/schema-extra-example.md#_snippet_1

LANGUAGE: python
CODE:
```
name: str = Field(example="Foo")
# ... other fields ...
price: float = Field(example=35.4)
tax: float | None = Field(default=None, example=3.2)
```

----------------------------------------

TITLE: Declaring an Optional Type (Alternative) - Python 3.8+
DESCRIPTION: This snippet declares a variable `name` that can be either a string or None using the `Union` type from the `typing` module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_14

LANGUAGE: Python
CODE:
```
from typing import Union

name: Union[str, None] = "Guido"
```

----------------------------------------

TITLE: Adicionando Cabeçalhos Personalizados ao HTTPException
DESCRIPTION: Mostra como adicionar cabeçalhos personalizados ao lançar uma HTTPException, útil para cenários de segurança ou outras necessidades específicas.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.get("/items-header/{item_id}")
async def read_item_header(item_id: str):
    if item_id not in items:
        raise HTTPException(
            status_code=404,
            detail="Item not found",
            headers={"X-Error": "There goes my error"},
        )
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Float Numeric Validation in FastAPI (Python)
DESCRIPTION: Shows how to use numeric validations with float values in FastAPI, using 'gt' and 'lt'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
size: Annotated[float, Query(gt=0, lt=10.5)]
```

----------------------------------------

TITLE: Adding Extra Body Parameter
DESCRIPTION: Introducing an additional body parameter using Body parameter
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def create_item(item: Item, user: User, importance: int = Body(...))
```

----------------------------------------

TITLE: Creating an Enum Class for Path Parameters in FastAPI
DESCRIPTION: This code snippet demonstrates how to create an Enum class in Python to define a set of valid string values for a path parameter in a FastAPI application.  It inherits from both `str` and `Enum` to ensure the values are strings and part of the enumeration. The `Enum` is used to restrict the possible values of a path parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: python
CODE:
```
from enum import Enum


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Run the generate-client npm script
DESCRIPTION: This command executes the `generate-client` npm script defined in the `package.json` file. This script uses `openapi-ts` to generate TypeScript client code based on the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/generate-clients.md#_snippet_3

LANGUAGE: Shell
CODE:
```
npm run generate-client
```

----------------------------------------

TITLE: Union Operator Type Hint on Required Parameter (Python 3.10+)
DESCRIPTION: Shows a function parameter type-hinted as `str | None` using the Python 3.10+ syntax, but without a default value. This confirms that the `|` operator, like `Optional`, allows `None` but doesn't make the parameter itself optional in the function call signature.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_15

LANGUAGE: Python
CODE:
```
def say_hi(name: str | None):
    if name:
        print(f"Hello {name}")
    else:
        print("Hello World")
```

----------------------------------------

TITLE: Mixing Path and Query Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to mix path and query parameters within a single FastAPI route. FastAPI automatically determines which parameters are part of the path and which are query parameters based on their declaration within the function signature, without needing a specific order.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"""\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_user_item(\n    item_id: str, needy: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {"item_id": item_id, "needy": needy, "short": short}\n    if q:\n        item.update({"q": q})\n    return item\n"""
```

----------------------------------------

TITLE: Update main.py to accept PUT request body - Python
DESCRIPTION: This code snippet updates the `main.py` file to handle a PUT request to the `/items/{item_id}` endpoint. It defines a request body using a Pydantic model `Item` and updates the `update_item` function to accept an `item` of type `Item`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/he/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Importing APIRouter Sub-modules
DESCRIPTION: Demonstrates how to import sub-modules containing APIRouter instances using relative imports. It shows how to import the user and item routers from their respective modules within the same Python package.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_13

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/main.py!}
```

----------------------------------------

TITLE: Importing File and UploadFile in FastAPI
DESCRIPTION: Demonstrates how to import the File and UploadFile classes from the FastAPI framework, which are necessary for handling file uploads.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, File, UploadFile
```

----------------------------------------

TITLE: Reading Custom Header Dependency
DESCRIPTION: This code defines a dependency to read a custom `X-Token` header from the request. It uses `Annotated` for type hints and raises an HTTP exception if the token is invalid.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import Header, HTTPException


async def verify_token(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")


async def verify_key(x_key: Annotated[str, Header()]):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="Invalid X-Key header")
    return x_key
```

----------------------------------------

TITLE: Disabling Underscore Conversion in FastAPI Header
DESCRIPTION: This snippet shows how to disable the automatic conversion of underscores to hyphens in FastAPI header parameters by setting `convert_underscores` to `False`.  This is useful when you need to preserve the original header name with underscores.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/header-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"from typing import Union

from fastapi import FastAPI, Header

app = FastAPI()


@app.get("/items/")
async def read_items(
    strange_user_agent: Union[str, None] = Header(default=None, convert_underscores=False),
):
    return {"Strange-User-Agent": strange_user_agent}"
```

----------------------------------------

TITLE: Defining a Path Operation Function (Async)
DESCRIPTION: This code snippet shows how to define an asynchronous path operation function that handles requests to a specific path. It uses `async def` to define an asynchronous function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Exception Handling in Yield Dependencies
DESCRIPTION: Example showing proper exception handling in yield dependencies
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
async def get_db():
    db = DBSession()
    try:
        yield db
    except InternalError as e:
        print("Error occurred")
        raise
```

----------------------------------------

TITLE: Checking Virtual Environment Activation (Linux/macOS/Bash Console)
DESCRIPTION: Runs the `which python` command to show the path of the `python` executable that the shell will use. If the virtual environment is active, the path should point inside the `.venv` directory. The output shows an example of a successful check.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_6

LANGUAGE: console
CODE:
```
which python

/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Disable Automatic Documentation URLs in FastAPI
DESCRIPTION: This snippet demonstrates how to disable the default Swagger UI and ReDoc documentation endpoints by setting their URLs to None when creating a FastAPI app instance. This is a prerequisite for using custom CDNs or self-hosting the documentation assets.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-docs-ui-assets.md#_snippet_0

LANGUAGE: Python
CODE:
```
app = FastAPI(
    openapi_url=None,
    docs_url=None,
    redoc_url=None,
)
```

----------------------------------------

TITLE: OAuth2 Schema Declaration with Scopes
DESCRIPTION: Defines an OAuth2 security scheme with available scopes 'me' and 'items'. The scopes are defined as a dictionary with scope names as keys and descriptions as values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl="token",
    scopes={"me": "Read information about the current user.", "items": "Read items."}
)
```

----------------------------------------

TITLE: Relative Import from Current Package
DESCRIPTION: Demonstrates importing a module using a single dot (.) from the current package, searching in the same directory
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from .dependencies import get_token_header
```

----------------------------------------

TITLE: Custom Validation Error Handling
DESCRIPTION: This snippet shows how to implement custom validation error handling using RequestValidationError in FastAPI. It overrides the default validation error handler to return a plain text response with the error details instead of the default JSON response. This example provides a customized way to present validation errors to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import Request, FastAPI
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=422,
        content={"detail": exc.errors(), "body": exc.body},
    )
```

LANGUAGE: Python
CODE:
```
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    print(exc.errors())
    return PlainTextResponse(str(exc), status_code=422)

```

----------------------------------------

TITLE: Handling WebSocket disconnections and multiple clients in FastAPI
DESCRIPTION: This code demonstrates how to handle WebSocket disconnections and manage multiple client connections in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/websockets.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, WebSocket, WebSocketDisconnect

app = FastAPI()

class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            await connection.send_text(message)

manager = ConnectionManager()

@app.websocket("/ws/{client_id}")
async def websocket_endpoint(websocket: WebSocket, client_id: int):
    await manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            await manager.send_personal_message(f"You wrote: {data}", websocket)
            await manager.broadcast(f"Client #{client_id} says: {data}")
    except WebSocketDisconnect:
        manager.disconnect(websocket)
        await manager.broadcast(f"Client #{client_id} left the chat")
```

----------------------------------------

TITLE: Adding Pydantic Schema Example using schema_extra (Python)
DESCRIPTION: This snippet demonstrates how to add a single example for a Pydantic model using the `schema_extra` attribute within the model's `Config` class. This example will be included in the JSON Schema generated for the model, which is then used by OpenAPI/Swagger UI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/schema-extra-example.md#_snippet_0

LANGUAGE: python
CODE:
```
class Config:
    schema_extra = {
        "example": {
            "name": "Foo",
            "description": "A very nice Item",
            "price": 35.4,
            "tax": 3.2,
        }
    }
```

----------------------------------------

TITLE: Handling Shutdown Event with FastAPI (Deprecated)
DESCRIPTION: Defines a function that runs when the FastAPI application is shutting down using the deprecated `@app.on_event("shutdown")` decorator. This function can be used to perform cleanup tasks, such as closing connections or writing logs. The function can be `async def` or `def`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/events.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.on_event("shutdown")
def shutdown_event():
    with open("log.txt", mode="a") as log:
        log.write("Application shutdown\n")
```

----------------------------------------

TITLE: Initializing FastAPI App with Basic Endpoints
DESCRIPTION: Creates a FastAPI application instance and defines two GET endpoints: one for the root path ('/') and another for '/items/{item_id}' with a path parameter and an optional query parameter. It uses the FastAPI library and returns JSON responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Handling Request Bodies with Dictionaries in FastAPI
DESCRIPTION: This code snippet demonstrates how to handle request bodies that consist of dictionaries with specific key and value types in FastAPI. It shows how to declare the type of the function parameter as a dictionary with integer keys and float values, enabling automatic data validation and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-nested-models.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import Dict

from fastapi import FastAPI

app = FastAPI()


@app.post("/weights/")
async def create_weights(weights: Dict[int, float]):
    return weights
```

----------------------------------------

TITLE: Handling WebSocket Disconnect Exception in FastAPI
DESCRIPTION: This code snippet demonstrates how to catch the WebSocketDisconnect exception when a WebSocket connection is closed. It then broadcasts a message to all other connected clients informing them that a client has left the chat. This example uses a simple in-memory list to manage connected clients.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/websockets.md#_snippet_8

LANGUAGE: Python
CODE:
```
try:
    await websocket.receive_text()
except WebSocketDisconnect:
    await manager.broadcast(f"Client #{client_id} left the chat")
```

----------------------------------------

TITLE: Pydantic Models for User Data
DESCRIPTION: Defines Pydantic models for user input, database representation, and output, including handling password hashing. The UserIn model takes username, password, and email. The UserInDB model includes a hashed_password field. The User model excludes the password field.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/extra-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class UserIn(BaseModel):
    username: str
    password: str
    email: str
    full_name: Optional[str] = None


class User(BaseModel):
    username: str
    email: str
    full_name: Optional[str] = None


class UserInDB(BaseModel):
    username: str
    email: str
    full_name: Optional[str] = None
    hashed_password: str
```

----------------------------------------

TITLE: Combining Dictionaries in Python
DESCRIPTION: This Python snippet demonstrates how to use dictionary unpacking to combine existing predefined responses with new custom responses. This technique aids in reusing existing API response structures while introducing new elements where needed. This approach requires understanding Python dict operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/additional-responses.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
old_dict = {
    "old key": "old value",
    "second old key": "second old value",
}
new_dict = {**old_dict, "new key": "new value"}

```

LANGUAGE: Python
CODE:
```
{
    "old key": "old value",
    "second old key": "second old value",
    "new key": "new value",
}
```

----------------------------------------

TITLE: Define a Dependency Function
DESCRIPTION: Dependencies in FastAPI are typically defined as callable functions. These functions can take parameters, just like path operation functions, allowing them to receive query parameters, path parameters, request bodies, or other dependencies. The return value of the dependency function is what gets injected into the path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/index.md#_snippet_0

LANGUAGE: python
CODE:
```
async def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Setting Custom Exception Handlers in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a custom exception handler for a specific exception type (UnicornException). It shows how to handle exceptions globally and return custom error responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/handling-errors.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

app = FastAPI()


class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name


@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},
    )


@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"unicorn_name": name}
```

----------------------------------------

TITLE: Hinting Union Type (Python 3.6+ via typing) - Python
DESCRIPTION: For Python versions 3.6+ (up to 3.9), this snippet uses `Union` from the `typing` module to indicate that a parameter can be one of several specified types (`int` or `str`). This is useful when a function can accept different data types for an argument.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import Union

def process_item(item: Union[int, str]):
    print(item)
```

----------------------------------------

TITLE: Setting Response Status Code in FastAPI
DESCRIPTION: This snippet demonstrates how to set the HTTP status code for a FastAPI path operation.  It shows setting the status code directly with an integer and also using the `status` constants for better readability.  The status code is included in the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from enum import Enum

from fastapi import FastAPI
from fastapi import status

app = FastAPI()


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"


@app.post("/items/", status_code=status.HTTP_201_CREATED)
async def create_item(name: str):
    return {"name": name}
```

LANGUAGE: python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Specifying FastAPI version range in requirements.txt
DESCRIPTION: This snippet shows how to specify a version range for FastAPI in a requirements.txt file. This allows for using versions greater than or equal to 0.45.0 but less than 0.46.0, enabling bug fixes while avoiding potentially breaking changes. The requirements.txt file is commonly used to specify project dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/versions.md#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
"fastapi>=0.45.0,<0.46.0"
```

----------------------------------------

TITLE: Specifying Git Dependencies for FastAPI Documentation Tools
DESCRIPTION: This snippet defines three Git dependencies using HTTPS URLs with authentication tokens. It includes MkDocs Material Insiders for documentation styling, a custom Griffe plugin for handling deprecated typing, and MkDocstrings for Python documentation generation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-docs-insiders.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
git+https://${TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git@9.5.30-insiders-4.53.11
git+https://${TOKEN}@github.com/pawamoy-insiders/griffe-typing-deprecated.git
git+https://${TOKEN}@github.com/pawamoy-insiders/mkdocstrings-python.git
```

----------------------------------------

TITLE: Incorrect Path Ordering in FastAPI
DESCRIPTION: This snippet demonstrates an incorrect order for defining routes in FastAPI. Since `/users/{user_id}` is defined before `/users/me`, any request to `/users/me` will be incorrectly routed to `/users/{user_id}`, with `user_id` being assigned the value 'me'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}
```

----------------------------------------

TITLE: Define and Provide Settings via Dependency Injection
DESCRIPTION: Define the `Settings` model in a configuration file (e.g., `config.py`) without creating a default instance. Create a dependency function (e.g., `get_settings`) that returns an instance of `Settings` and inject it into FastAPI path operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_7

LANGUAGE: Python
CODE:
```
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50
    model_config = SettingsConfigDict(env_file=".env")

# No default instance created here
# settings = Settings()
```

LANGUAGE: Python
CODE:
```
from functools import lru_cache

from fastapi import Depends, FastAPI

from .config import Settings

@lru_cache()
def get_settings():
    return Settings()

app = FastAPI()

@app.get("/info")
async def info(settings: Settings = Depends(get_settings)):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Merging Predefined and Custom Responses in FastAPI
DESCRIPTION: Demonstrates how to combine predefined response dictionaries with custom responses using Python dictionary unpacking. This allows reusing common response definitions across multiple endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/additional-responses.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
responses = {
    404: {"description": "Item not found"},
    302: {"description": "The item was moved"},
    403: {"description": "Not enough privileges"},
}


@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={**responses, 200: {"content": {"image/png": {}}}})
async def read_item(item_id: str, img: bool = False):
    if img:
        return FileResponse("image.png", media_type="image/png")
    else:
        return {"id": "foo", "value": "there goes my hero"}
```

----------------------------------------

TITLE: Setting Cookies with Response Parameter in FastAPI (Python)
DESCRIPTION: Demonstrates how to declare a `Response` parameter in a FastAPI path operation function and use its `set_cookie` method to add a cookie to the response before returning the main data. This allows setting cookies while still returning a standard Python object or Pydantic model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-cookies.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Response

@app.get("/items/")
async def read_items(response: Response):
    response.set_cookie(key="fakesession", value="fake-cookie-value")
    return {"message": "Come to the dark side, we have cookies"}
```

----------------------------------------

TITLE: Importing Dependencies with Relative Import
DESCRIPTION: This code demonstrates how to import a dependency function from another module using a relative import. It imports the `verify_token` dependency from the `app.dependencies` module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Annotated

from fastapi import APIRouter, Depends, Header, HTTPException

from .dependencies import verify_token, verify_key
```

----------------------------------------

TITLE: Combining Required, Optional and Default Query Parameters in FastAPI
DESCRIPTION: This snippet combines required, optional, and default query parameters in a FastAPI route. The `needy` parameter is required, `skip` has a default value of 0, and `limit` is optional. This demonstrates the flexibility of FastAPI in handling different types of query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
"""\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}\n    return item\n"""
```

----------------------------------------

TITLE: Nested Dependencies with yield
DESCRIPTION: Demonstrates how to use nested dependencies with `yield` in FastAPI, ensuring that exit code in each dependency is executed in the correct order. `dependency_c` depends on `dependency_b`, and `dependency_b` depends on `dependency_a`, and all of them use `yield`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def dependency_a() -> str:
    yield "A"


async def dependency_b(dep_a: str = Depends(dependency_a)) -> str:
    yield f"B {dep_a}"


async def dependency_c(dep_b: str = Depends(dependency_b)) -> str:
    yield f"C {dep_b}"
```

----------------------------------------

TITLE: Using Class-Based Dependency with Type Hinting
DESCRIPTION: This example demonstrates using a class-based dependency and omitting the explicit class name in `Depends`. It illustrates a cleaner syntax where the type hint on the parameter informs FastAPI of the dependency to inject.  This reduces redundancy.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"""
from typing import Optional

from fastapi import Depends, FastAPI

app = FastAPI()


class CommonQueryParams:
    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit


@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends()):
    return commons
"""
```

----------------------------------------

TITLE: Validating Required Scopes in Dependency - Python
DESCRIPTION: This snippet from the dependency function demonstrates how to check if the scopes granted to the token (`token_data.scopes`) contain all the scopes required by the current operation (available in `security_scopes.scopes`). If not, it raises an `HTTPException` indicating insufficient permissions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_6

LANGUAGE: Python
CODE:
```
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Not enough permissions",
                headers={
                    "WWW-Authenticate": f"Bearer scope=\"{security_scopes.scope_str}\""
                },
            )
```

----------------------------------------

TITLE: Define Hero Table Model
DESCRIPTION: Defines the `Hero` model, which is a SQLModel table (`table=True`). It inherits from `HeroBase` and adds fields specific to the database table (`id`, `secret_name`). The `id` is set as the primary key and auto-generated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_2

LANGUAGE: python
CODE:
```
from typing import Optional
from sqlmodel import Field, SQLModel

class HeroBase(SQLModel):
    name: str
    age: Optional[int] = None

class Hero(HeroBase, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    secret_name: str
```

----------------------------------------

TITLE: Declaring Optional Types with Typing.Optional in Python
DESCRIPTION: This code snippet demonstrates how to declare a variable that can be either a string or None using `typing.Optional`. This helps the editor identify potential errors where a value is assumed to always be a string but could be None.  `Optional[str]` is a shorthand for `Union[str, None]`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_13

LANGUAGE: python
CODE:
```
"from typing import Optional

name: Optional[str] = None
"
```

----------------------------------------

TITLE: Using Annotated for Metadata in Python 3.9+
DESCRIPTION: This code snippet demonstrates using `Annotated` from the `typing` module to add metadata to type hints in Python 3.9 and later. `Annotated` allows you to provide extra information about a type without changing its underlying type. In this example, it is used to add metadata to a string type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
"from typing import Annotated

from typing import Union

name: Annotated[str, 'some metadata'] = 'John Doe'"
```

----------------------------------------

TITLE: Defining a FastAPI Endpoint for File Uploading
DESCRIPTION: This snippet defines a FastAPI route that handles file uploads through the multipart/form-data content type. It utilizes the UploadFile and File classes to receive the uploaded files. The expected input is a file from a form, with the output being a response indicating success or failure.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.post("/uploadfile/")
async def create_upload_file(file: UploadFile = File(...)):
    return {"filename": file.filename}
```

----------------------------------------

TITLE: Query Parameter with Optional String Type
DESCRIPTION: This code snippet shows how to define a query parameter `q` with an optional string type using `Union[str, None]` (or `str | None` in Python 3.10+). FastAPI will automatically recognize that if the parameter is not provided, its value will be `None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"@app.get("/items/")
async def read_items(q: Union[str, None] = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
"
```

----------------------------------------

TITLE: Defining Response Model in FastAPI
DESCRIPTION: This code snippet demonstrates how to define a response model for a FastAPI endpoint using the `response_model` parameter. This ensures the output data is converted to the specified type, validated, and included in the OpenAPI schema. This example does not include the actual code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
""" This example does not include the actual code, but demonstrates where the response_model parameter is used.
@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: int):
    ...
"""
```

----------------------------------------

TITLE: Implementing Partial Updates with PATCH and Pydantic Models
DESCRIPTION: Code snippet demonstrating how to implement partial updates using HTTP PATCH by extracting only the set fields from the input model and applying them to the stored item.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-updates.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.patch("/items/{item_id}", response_model=Item)
async def update_item(
    item_id: str, item: Annotated[Item, Body(embed=True)]
):
    stored_item_data = items[item_id]
    stored_item_model = Item(**stored_item_data)
    update_data = item.dict(exclude_unset=True)
    updated_item = stored_item_model.copy(update=update_data)
    items[item_id] = jsonable_encoder(updated_item)
    return updated_item
```

----------------------------------------

TITLE: Creating a Basic FastAPI App
DESCRIPTION: This Python code defines a simple FastAPI application with two routes: a root route ('/') that returns a greeting and an '/items/{item_id}' route that returns an item ID and an optional query parameter. It imports FastAPI and uses decorators to define the routes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Using Configuration from a Separate Module (main.py)
DESCRIPTION: This code demonstrates how to import and use the `Settings` object defined in a separate `config.py` module within a FastAPI application. It imports the `settings` object from the `config` module and accesses its attributes in the `read_root` route to return configuration data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

from .config import settings

app = FastAPI()


@app.get("/")
async def read_root():
    return {"app_name": settings.app_name, "admin_email": settings.admin_email}
```

----------------------------------------

TITLE: OAuth2 Password Request Form Handling in FastAPI
DESCRIPTION: This snippet demonstrates how to use `OAuth2PasswordRequestForm` to handle username and password submission from a form in a FastAPI endpoint. It imports the necessary class and uses it as a dependency with `Depends` in the `/token` endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm

app = FastAPI()


@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    return {"access_token": form_data.username, "token_type": "bearer"}"
```

----------------------------------------

TITLE: Set Type in FastAPI
DESCRIPTION: This code demonstrates the usage of Python's `set` data type within a Pydantic model in FastAPI, enforcing unique items. It utilizes `typing.Set` to declare a set of strings for the `tags` field, ensuring no duplicate entries are allowed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"from typing import Optional, Set

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: Set[str] = set()"
```

----------------------------------------

TITLE: Ordering Parameters with Syntax Trick
DESCRIPTION: This code snippet demonstrates a Python syntax trick to order parameters when a query parameter doesn't have a default value or `Query` annotation, while a path parameter uses `Path`. The `*` argument forces subsequent parameters to be keyword arguments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params-numeric-validations.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Path

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(*, item_id: int = Path(), q: str):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Using a class dependency in a FastAPI path operation
DESCRIPTION: This code shows how to use a class-based dependency in a FastAPI path operation.  `Depends(CommonQueryParams)` tells FastAPI to resolve the `CommonQueryParams` dependency and inject it as the `commons` argument.  The type hint `CommonQueryParams` is useful for editor support but not strictly required by FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):
    return commons
```

----------------------------------------

TITLE: Declaring Dependency in Path Operation
DESCRIPTION: This code demonstrates how to declare a dependency in a FastAPI path operation function using `Depends`. The `common_parameters` function is passed to `Depends`, and FastAPI will automatically call this function and inject its return value into the path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

from typing_extensions import Annotated

from fastapi import Depends, FastAPI


async def common_parameters(
    q: Optional[str] = None, skip: int = 0, limit: int = 100
):
    return {"q": q, "skip": skip, "limit": limit}


app = FastAPI()


@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons
```

----------------------------------------

TITLE: Using Annotated for Metadata in Python 3.8+
DESCRIPTION: This code demonstrates how to use `Annotated` from `typing_extensions` to add metadata to type hints in Python versions before 3.9. `Annotated` allows adding metadata to types without affecting the actual type. This metadata can be used by tools or libraries to provide additional information or validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_23

LANGUAGE: python
CODE:
```
"from typing_extensions import Annotated

from typing import Union

name: Annotated[str, 'some metadata'] = 'John Doe'"
```

----------------------------------------

TITLE: Python Class Type Hint
DESCRIPTION: This code snippet demonstrates how to use a custom class as a type hint. The `Person` class is defined, and then a variable is annotated with this class, indicating that the variable should be an instance of the `Person` class. This allows for better code organization and editor support.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
"class Person:
    def __init__(self, name: str, age: int):
        self.name = name
        self.age = age

def get_person(person: Person):
    return person.name"
```

----------------------------------------

TITLE: Configuring CORS with CORSMiddleware in FastAPI
DESCRIPTION: This code snippet demonstrates how to configure CORS (Cross-Origin Resource Sharing) in a FastAPI application using the `CORSMiddleware`. It sets up allowed origins, credentials, methods, and headers to enable cross-origin requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/cors.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

origins = [
    "http://localhost:8080",
    "https://localhost:8080",
    "http://localhost",
    "https://localhost",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

----------------------------------------

TITLE: Declaring Optional Types with Union in Python 3.10+
DESCRIPTION: This code snippet demonstrates how to declare a variable that can be either a string or None using the `|` operator in Python 3.10 and later. This is a cleaner way to express the same concept as `Union[str, None]`.  Using `str | None` declares a variable that can be either a string or None.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
"name: str | None = None"
```

----------------------------------------

TITLE: Defining Query Parameters with Defaults in FastAPI
DESCRIPTION: This code snippet demonstrates how to define query parameters with default values in a FastAPI endpoint. The `skip` parameter defaults to 0 and the `limit` parameter defaults to 10, allowing clients to omit these parameters in their requests. The function then returns a JSON response containing the values of `skip` and `limit`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}"
```

----------------------------------------

TITLE: Multiple Body Parameters in FastAPI
DESCRIPTION: Shows how to declare multiple body parameters in a FastAPI endpoint.  FastAPI will detect multiple body parameters and expect a JSON body with keys corresponding to the parameter names.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body-multiple-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Body

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


class User(BaseModel):
    username: str
    full_name: Union[str, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(),
    q: Union[str, None] = None,
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    results.update({"item": item, "user": user, "importance": importance})
    return results
```

----------------------------------------

TITLE: Deactivating and Activating Correct Virtual Environment
DESCRIPTION: Shows how to properly switch between project environments by deactivating the current one and activating the correct environment for the new project. The example demonstrates successful execution after switching environments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_24

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban

// Você não precisa estar no diretório antigo para desativar, você pode fazer isso de onde estiver, mesmo depois de ir para o outro projeto 😎
$ deactivate

// Ative o ambiente virtual em prisoner-of-azkaban/.venv 🚀
$ source .venv/bin/activate

// Agora, quando você executar o python, ele encontrará o pacote sirius instalado neste ambiente virtual ✨
$ python main.py

Eu juro solenemente 🐺
```

----------------------------------------

TITLE: Creating a Hero (Data Model)
DESCRIPTION: This snippet shows how to define a data model using SQLModel, which is also a Pydantic model. This model can be used for type declarations, request body parsing, and response serialization in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: Python
CODE:
```
class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Initializing OAuth2PasswordBearer in FastAPI
DESCRIPTION: This snippet initializes the OAuth2PasswordBearer scheme, specifying the token URL where clients can send usernames and passwords to obtain a token. The tokenUrl parameter does not create an endpoint but declares the URL the client should use to obtain the token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Defining Sub-Model in FastAPI
DESCRIPTION: This example defines a sub-model `Image` using Pydantic's `BaseModel`, which includes URL and name fields. This sub-model can then be used as a type for an attribute in another Pydantic model, creating a nested structure.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"from typing import Optional

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list = []
    image: Optional[Image] = None"
```

----------------------------------------

TITLE: Initializing FastAPI Application
DESCRIPTION: This code initializes a basic FastAPI application with two GET endpoints: one for the root path ('/') and another for retrieving items by ID ('/items/{item_id}'). It demonstrates how to define path parameters and optional query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Combining Required, Optional, and Default Query Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to combine required query parameters (`needy`), optional query parameters (`limit`), and query parameters with default values (`skip`). FastAPI handles all of these cases seamlessly based on the function signature.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None):
    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}
    return item
```

----------------------------------------

TITLE: Example TypeScript client call
DESCRIPTION: This TypeScript snippet illustrates how to interact with the generated client code. It shows calling a method (`createItemItemsPost`) on a generated service object (`ItemsService`), passing required parameters for creating an item. This demonstrates the type safety provided by the generated client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
ItemsService.createItemItemsPost({name: "Plumbus", price: 5})
```

----------------------------------------

TITLE: Custom Types and Validation
DESCRIPTION: This code snippet demonstrates how to use a custom type (`HttpUrl`) from Pydantic for validation. The `url` attribute in the `Image` model is declared as `HttpUrl`, ensuring that it is a valid URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, HttpUrl


class Image(BaseModel):
    url: HttpUrl
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list[str] = []
    image: Optional[Image] = None
```

----------------------------------------

TITLE: Creating an async FastAPI application
DESCRIPTION: This Python code demonstrates how to create a basic FastAPI application using `async def` for asynchronous request handling. It includes two endpoints: a root endpoint and an endpoint for retrieving items by ID, both defined as asynchronous functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Generate a secure random secret key using openssl
DESCRIPTION: This command generates a cryptographically secure random key that can be used as a secret for signing JWT tokens. It is essential for the security of the JWT implementation to use a strong, randomly generated secret.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ openssl rand -hex 32

09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
```

----------------------------------------

TITLE: Pinning FastAPI version with a range in requirements.txt
DESCRIPTION: This snippet shows how to specify a version range for FastAPI in the `requirements.txt` file. This allows for automatic upgrades to bug fixes while preventing potentially breaking changes from minor version upgrades.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/versions.md#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
"fastapi>=0.45.0,<0.46.0"
```

----------------------------------------

TITLE: Defining Optional Query Parameter in FastAPI
DESCRIPTION: This code snippet shows how to define an optional query parameter in a FastAPI endpoint by setting its default value to `None`. The `q` parameter is optional and will be `None` if not provided in the request. The function then returns a dictionary containing the `item_id` and the optional query `q`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"@app.get("/items/{item_id}")
async def read_item(item_id: str, q: str | None = None):
    return {"item_id": item_id, "q": q}"
```

----------------------------------------

TITLE: Function with Type Annotations and Corrected Error
DESCRIPTION: This code fixes the error in the previous example by converting the integer `age` to a string using `str(age)`.  This demonstrates how type annotations can help identify and correct type-related errors early in the development process.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"def get_name_with_age(name: str, age: int):
    name_with_age = name + " is this old: " + str(age)
    return name_with_age"
```

----------------------------------------

TITLE: Custom Response Class in FastAPI
DESCRIPTION: Illustrates how to create a custom response class in FastAPI by inheriting from `Response` and overriding the `render` method. This example uses `orjson` to return indented JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_14

LANGUAGE: python
CODE:
```
import orjson
from fastapi import FastAPI
from fastapi.responses import JSONResponse


class CustomORJSONResponse(JSONResponse):
    media_type = "application/json"

    def render(self, content) -> bytes:
        return orjson.dumps(
            content,
            default=str,
            option=orjson.OPT_INDENT_2
        )


app = FastAPI()


@app.get("/", response_class=CustomORJSONResponse)
async def read_main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Definiendo Modelos de Datos para Héroes en Python
DESCRIPTION: Define los modelos de datos HeroPublic, HeroCreate y HeroUpdate heredando de HeroBase. HeroPublic excluye secret_name, HeroCreate incluye todos los campos, y HeroUpdate hace todos los campos opcionales.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class HeroPublic(HeroBase):
    id: int


class HeroCreate(HeroBase):
    secret_name: str


class HeroUpdate(HeroBase):
    name: str | None = None
    secret_name: str | None = None
    age: int | None = None
```

----------------------------------------

TITLE: Handling Duplicate Headers in FastAPI
DESCRIPTION: Example showing how to receive duplicate headers by using a list type annotation. This allows the route function to receive multiple values for the same header.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
async def read_items(x_token: list[str] | None = Header(default=None)):
```

----------------------------------------

TITLE: Comparing Enum Members in FastAPI
DESCRIPTION: This code snippet demonstrates how to compare the value of a path parameter with an Enum member of the ModelName class. This allows you to perform different actions based on the specific Enum value received.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: python
CODE:
```
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}
```

----------------------------------------

TITLE: List of Sub-Models in FastAPI
DESCRIPTION: This example shows how to define a list of Pydantic models as a field in another Pydantic model. It defines the `images` field in the `Item` model as a `List[Image]`, allowing multiple image objects to be associated with an item.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
"from typing import List, Optional

from pydantic import BaseModel, HttpUrl


class Image(BaseModel):
    url: HttpUrl
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list = []
    images: Optional[List[Image]] = None"
```

----------------------------------------

TITLE: Adding .venv to .gitignore
DESCRIPTION: This command adds an entry to the .gitignore file to exclude the .venv directory from being tracked by Git.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_9

LANGUAGE: Shell
CODE:
```
$ echo "*" > .venv/.gitignore
```

----------------------------------------

TITLE: Installing python-multipart for Form and File Handling in FastAPI
DESCRIPTION: Command to install the required python-multipart library which enables handling form data and file uploads in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Directly Returning an HTMLResponse in FastAPI
DESCRIPTION: Example showing how to directly return an HTMLResponse object instead of setting it as the response_class. Note that this approach doesn't get documented in OpenAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


@app.get("/items/")
async def read_items():
    content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=content)
```

----------------------------------------

TITLE: Validating Token Data and Scopes in Python
DESCRIPTION: This snippet shows how to validate the token data using a Pydantic model and check if the token contains all required scopes. It demonstrates error handling for invalid tokens or missing scopes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
class TokenData(BaseModel):
    username: Union[str, None] = None
    scopes: List[str] = []

# ...

try:
    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    username: str = payload.get("sub")
    if username is None:
        raise credentials_exception
    token_scopes = payload.get("scopes", [])
    token_data = TokenData(scopes=token_scopes, username=username)
except (JWTError, ValidationError):
    raise credentials_exception
user = get_user(fake_users_db, username=token_data.username)
if user is None:
    raise credentials_exception
for scope in security_scopes.scopes:
    if scope not in token_data.scopes:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Not enough permissions",
            headers={"WWW-Authenticate": authenticate_value},
        )
```

----------------------------------------

TITLE: Defining Optional Body Parameters in FastAPI (Python)
DESCRIPTION: Demonstrates how to define an optional body parameter 'item' in a FastAPI route function, along with path and query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
async def update_item(
    item_id: int = Path(title="The ID of the item to get", ge=0, le=1000),
    q: str | None = None,
    item: Item | None = None,
):
```

----------------------------------------

TITLE: Run FastAPI Development Server
DESCRIPTION: Use this console command to start the FastAPI application in development mode. The server will listen on http://127.0.0.1:8000 and automatically reload on code changes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi dev main.py

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Reading Single Hero Data with HeroPublic
DESCRIPTION: This snippet shows how to read data for a single hero using the HeroPublic response model. It retrieves a specific hero based on its ID and returns the data, ensuring proper validation and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_16

LANGUAGE: Python
CODE:
```
@app.get("/heroes/{hero_id}", response_model=HeroPublic)
async def read_hero(hero_id: int):
    with Session(engine) as session:
        hero = session.get(Hero, hero_id)
        if not hero:
            raise HTTPException(status_code=404, detail="Hero not found")
        return hero
```

----------------------------------------

TITLE: Disabling Swagger UI Syntax Highlighting
DESCRIPTION: Example of how to disable syntax highlighting in Swagger UI by setting syntaxHighlight to False in the FastAPI app configuration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
app = FastAPI(
    swagger_ui_parameters={"syntaxHighlight": False}
)
```

----------------------------------------

TITLE: Hinting Tuple and Set Types (Python 3.9+) - Python
DESCRIPTION: For Python versions 3.9+, this snippet uses the built-in `tuple` and `set` types for hinting, similar to lists. This is a more concise way to specify the types of elements within tuples and sets compared to using the `typing` module equivalents.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_8

LANGUAGE: Python
CODE:
```
def process_items_t(items_t: tuple[int, int, str]):
    print(items_t)

def process_items_s(items_s: set[bytes]):
    print(items_s)
```

----------------------------------------

TITLE: Numeric Validation: Float Values, Greater Than and Less Than
DESCRIPTION: This code snippet shows how numeric validations work with float values. It uses `gt` (greater than) and `lt` (less than) to specify that `item_id` must be greater than 0 and less than 1.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params-numeric-validations.md#_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Path

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(item_id: float = Path(gt=0, lt=1)):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Basic FastAPI Application
DESCRIPTION: This is a basic FastAPI application with two endpoints: a root endpoint that returns a greeting and an items endpoint that returns an item ID and an optional query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Updating package.json script for local OpenAPI file
DESCRIPTION: This modified `package.json` snippet updates the `generate-client` script to source the OpenAPI schema from a local file (`./openapi.json`) instead of a live URL. This is useful if the schema is downloaded, modified, or generated as a file before client generation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input ./openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Creating a Jinja2 HTML Template
DESCRIPTION: Example of a Jinja2 HTML template file (item.html) that demonstrates basic template syntax and use of variables passed from the FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/templates.md#2025-04-21_snippet_2

LANGUAGE: jinja
CODE:
```
{!../../docs_src/templates/templates/item.html!}
```

----------------------------------------

TITLE: Importing Path and Annotated in FastAPI
DESCRIPTION: Shows how to import Path from fastapi and Annotated from typing to handle path parameter validations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Path\nfrom typing import Annotated
```

----------------------------------------

TITLE: Install httpx for TestClient
DESCRIPTION: This command installs the 'httpx' library, which is a required dependency for using Starlette's TestClient with FastAPI. Ensure you have a virtual environment activated before running.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/testing.md#_snippet_0

LANGUAGE: console
CODE:
```
pip install httpx
```

----------------------------------------

TITLE: Updated PATH variable after Python install (Linux/macOS)
DESCRIPTION: Illustrates how the PATH variable might be updated after installing Python on Linux or macOS, adding the Python installation directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/environment-variables.md#_snippet_6

LANGUAGE: plaintext
CODE:
```
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin
```

----------------------------------------

TITLE: Importing Query and Annotated in Python 3.8+
DESCRIPTION: Shows how to import the Query class from fastapi and Annotated from typing_extensions for Python versions below 3.9.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query
from typing import Union
from typing_extensions import Annotated
```

----------------------------------------

TITLE: Setting Working Directory in Dockerfile
DESCRIPTION: Sets the working directory inside the Docker container to `/code`. This is where the application code and requirements will be copied.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
WORKDIR /code
```

----------------------------------------

TITLE: Optional Body Parameter with None Type
DESCRIPTION: Defining a body parameter that can be optional with a None default value
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
item: Item = None
```

----------------------------------------

TITLE: Configuring FastAPI App for OpenAPI Callbacks
DESCRIPTION: This code demonstrates how to set up a FastAPI application and define a path operation that includes an OpenAPI callback specification. It involves creating a main application, a separate APIRouter for callback endpoints, defining the expected callback path operation within that router, and linking the callback router's routes to the main path operation using the `callbacks` parameter. This setup documents to clients what endpoint your service expects them to call.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/openapi-callbacks.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, APIRouter
from pydantic import BaseModel, HttpUrl

# Assume Invoice, InvoiceEvent, InvoiceEventReceived are defined BaseModel classes

app = FastAPI()

invoices_callback_router = APIRouter()

# Callback path operation definition
# It's documented for the client, not implemented by this app
@invoices_callback_router.post("/invoices/{invoice_id}")
def invoice_callback(invoice_id: str, body: InvoiceEvent):
    # This endpoint is defined purely for documentation purposes
    # The actual implementation lives in the client's service
    pass

# Main path operation definition
@app.post(
    "/invoices/",
    response_model=InvoiceEventReceived, # Example response model
    summary="Create an invoice and specify a callback URL",
    callbacks={
        "onPaymentReceived": invoices_callback_router.routes
    },
)
def create_invoice(invoice: Invoice, callback_url: HttpUrl | None = None):
    # This function processes the request in the FastAPI app
    # It doesn't call the callback itself, but defines it in the docs
    pass # Placeholder for actual invoice creation logic
```

----------------------------------------

TITLE: Multiple Body Parameters
DESCRIPTION: Illustrates how to declare multiple body parameters in a FastAPI route. FastAPI will infer that there are multiple body parameters and expect a JSON body with keys corresponding to the parameter names.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-multiple-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.post("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(default=None),
    q: Union[str, None] = None
):
    results = {"item_id": item_id, "item": item, "user": user, "importance": importance}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Checking Active Python Environment (Linux/macOS)
DESCRIPTION: This code snippet demonstrates how to check the active Python environment using the `which python` command in Linux or macOS. It displays the path to the Python executable being used, confirming whether it's from the virtual environment or the system-wide installation. The expected output is the path to the Python executable within the active virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
"$ which python

/home/user/code/awesome-project/.venv/bin/python"
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It is a prerequisite for using FastAPI in a Python project.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install fastapi

---> 100%
```

----------------------------------------

TITLE: Adding Description Metadata to Query Parameter in FastAPI
DESCRIPTION: This snippet shows how to add a description to a query parameter for more detailed documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
q: Union[str, None] = Query(
    default=None,
    title="Query string",
    description="Query string for the items to search in the database that have a good match"
)
```

----------------------------------------

TITLE: OpenAPI Schema with Servers
DESCRIPTION: This JSON snippet shows the OpenAPI schema generated by FastAPI when custom servers are defined. It includes the automatically generated server based on the root_path (if present) and the user-defined servers for staging and production environments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_12

LANGUAGE: JSON
CODE:
```
{
    "openapi": "3.1.0",
    "servers": [
        {
            "url": "/api/v1"
        },
        {
            "url": "https://stag.example.com",
            "description": "Staging environment"
        },
        {
            "url": "https://prod.example.com",
            "description": "Production environment"
        }
    ],
    "paths": {}
}
```

----------------------------------------

TITLE: Embedding a Single Body Parameter
DESCRIPTION: Shows how to use the `embed` parameter of the `Body` type to force FastAPI to expect a JSON body with a key that contains the model data. This is useful for consistency when you always want the request body to be a JSON object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-multiple-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Item = Body(embed=True),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Add Example Data using Pydantic Field Arguments
DESCRIPTION: Provide example values for individual fields within a Pydantic model by passing an `example` argument directly to the `Field()` function. These examples are included in the JSON Schema for each field.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/schema-extra-example.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Body
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: str = Field(example="Foo")
    description: str | None = Field(default=None, example="A very nice Item")
    price: float = Field(example=35.4)
    tax: float | None = Field(default=None, example=3.2)
```

----------------------------------------

TITLE: Instantiating Pydantic Models in Python
DESCRIPTION: This code demonstrates two ways to create instances of a Pydantic model (`User`): direct instantiation with keyword arguments and instantiation using dictionary unpacking (`**`). The latter is useful for passing data from a dictionary.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/features.md#_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: FastAPI Internal - Default Swagger UI Parameters - Python
DESCRIPTION: Displays a representative portion of the default dictionary of parameters that FastAPI uses internally when generating the Swagger UI documentation. These defaults can be overridden by providing conflicting values for the same keys in the `swagger_ui_parameters` dictionary provided by the user.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/how-to/configure-swagger-ui.md#_snippet_2

LANGUAGE: Python
CODE:
```
SWAGGER_UI_PARAMETERS = {
    "dom_id": "#swagger-ui",
    "layout": "StandaloneLayout",
    "deepLinking": True,
    "showExtensions": True,
    "showCommonExtensions": True,
    "syntaxHighlight": {
        "activate": True,
        "theme": "agate"
    }
}
```

----------------------------------------

TITLE: Direct Response Usage in FastAPI
DESCRIPTION: Shows how to directly return a Response object in FastAPI, allowing for complete control over the response properties like headers, status code, and content.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()


@app.get("/legacy/")
def get_legacy_data():
    data = """
    <?xml version="1.0"?>
    <shampoo>
    <Header>
        Apply shampoo here.
    </Header>
    <Body>
        You'll have to use soap here.
    </Body>
    </shampoo>
    """
    return Response(content=data, media_type="application/xml")
```

----------------------------------------

TITLE: Request Body, Path, and Query Parameters in FastAPI
DESCRIPTION: Illustrates how to declare request body, path parameters, and query parameters simultaneously in a FastAPI endpoint. FastAPI automatically infers the source of each parameter based on its type and declaration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item, q: Union[str, None] = None):
    results = {"item_id": item_id, **item.dict()}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Serving Static Files with FastAPI
DESCRIPTION: This snippet demonstrates how to serve static files (like JavaScript and CSS for Swagger UI and ReDoc) using FastAPI's `StaticFiles` class. It mounts a `StaticFiles` instance at a specific path, making the files accessible via HTTP.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-docs-ui-assets.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles

app = FastAPI()

app.mount("/static", StaticFiles(directory="static"), name="static")
```

----------------------------------------

TITLE: Using RedirectResponse with response_class
DESCRIPTION: Shows how to use RedirectResponse with the response_class parameter in a FastAPI endpoint. This allows you to return a URL directly from the route function, and FastAPI will automatically redirect the user to that URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/typer", response_class=RedirectResponse)
async def redirect_typer():
    return "https://typer.tiangolo.com"

```

----------------------------------------

TITLE: Hero Update Model Definition
DESCRIPTION: Defines the `HeroUpdate` model, used for updating existing Hero data. All fields in this model are optional, allowing clients to update only the fields that need to be changed. It includes fields for `name`, `age`, and `secret_name`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_13

LANGUAGE: Python
CODE:
```
class HeroUpdate(HeroBase):
    name: Optional[str] = None
    age: Optional[int] = None
    secret_name: Optional[str] = None
```

----------------------------------------

TITLE: Pinning FastAPI version in requirements.txt
DESCRIPTION: This snippet demonstrates how to pin a specific FastAPI version (e.g., 0.45.0) in a requirements.txt file. This ensures that the application always uses the exact version it was tested with, preventing unexpected issues from updates.  The requirements.txt file is commonly used to specify project dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/versions.md#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
"fastapi==0.45.0"
```

----------------------------------------

TITLE: Defining a dependency using a class in FastAPI
DESCRIPTION: This code demonstrates how to define a dependency using a Python class in FastAPI.  The `CommonQueryParams` class encapsulates the common query parameters and FastAPI will instantiate and inject this class. The `__init__` method defines the parameters that FastAPI will use for dependency injection.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Function with String and Integer Type Hints - Python
DESCRIPTION: A function demonstrating type hints for different basic types: `str` for the name and `int` for the age. This example is used to show how type hints allow editors to detect potential type errors when calling the function. The highlighted line shows the function definition.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
def get_name_and_age(name: str, age: int):
    return f"Hello {name}, you are {age}"
```

----------------------------------------

TITLE: Settings Configuration in Separate Module
DESCRIPTION: This code snippet shows how to define the `Settings` class in a separate `config.py` file. This promotes modularity and separation of concerns in larger applications. The `Settings` class inherits from `BaseSettings` and defines application settings as class attributes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/settings.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseSettings


class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50

    class Config:
        env_file = ".env"
```

----------------------------------------

TITLE: JSON Schema Examples in Pydantic Models (v2)
DESCRIPTION: Declares examples for a Pydantic model using the `model_config` attribute and `json_schema_extra` to add to the generated JSON schema. This allows including examples in the API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/schema-extra-example.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, ConfigDict


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    model_config = ConfigDict(
        json_schema_extra={
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 50.2,
                    "tax": 3.2,
                }
            ]
        }
    )
```

----------------------------------------

TITLE: Creating Custom GzipRoute Class in FastAPI
DESCRIPTION: This snippet implements a custom APIRoute subclass that uses the GzipRequest class. It overrides the get_route_handler() method to replace the standard Request with the custom GzipRequest, enabling automatic decompression of gzip-encoded request bodies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class GzipRoute(APIRoute):
    def get_route_handler(self) -> Callable:
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request) -> Response:
            request = GzipRequest(request.scope, request.receive)
            return await original_route_handler(request)

        return custom_route_handler
```

----------------------------------------

TITLE: Declaring Optional Cookie Parameter in FastAPI Python
DESCRIPTION: This snippet demonstrates how to declare a function parameter (`ads_id`) that reads its value from a request cookie named `ads_id`. Using `Optional[str]` and `= Cookie(None)` makes the cookie parameter optional, meaning the function will be called even if the cookie is not present in the request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/cookie-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
ads_id: Optional[str] = Cookie(None)
```

----------------------------------------

TITLE: Integrating Lifespan Events into FastAPI Application
DESCRIPTION: Shows how to integrate the defined lifespan function into a FastAPI application using the `lifespan` parameter. This ensures that the startup and shutdown logic defined in the lifespan function is executed at the appropriate times.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/events.md#_snippet_2

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager

from fastapi import FastAPI

ml_models = {}

async def fake_model_load():
    await asyncio.sleep(0.01)
    return {"model_name": "SampleModel"}

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    ml_models["model_a"] = await fake_model_load()
    yield
    # Clean up the ML models and release the resources
    ml_models.clear()

app = FastAPI(lifespan=lifespan)
```

----------------------------------------

TITLE: Float Parameter Validation in FastAPI
DESCRIPTION: Shows how to validate float parameters with greater than and less than constraints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    size: Annotated[float, Query(gt=0, lt=10.5)]\n):\n    return {\"item_id\": item_id, \"size\": size}
```

----------------------------------------

TITLE: Handling Invalid Credentials in FastAPI
DESCRIPTION: This snippet shows how to check for invalid username or password and return an `HTTPException` with a 401 status code. It checks if a user exists in the database and raises an exception if not.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
    user = fake_users_db.get(form_data.username)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
```

----------------------------------------

TITLE: Implementing WebSocket with dependencies in FastAPI
DESCRIPTION: This snippet shows how to use dependencies like Query parameters and Path parameters with WebSocket endpoints in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/websockets.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, WebSocket, Depends, Query

app = FastAPI()

async def get_cookie_or_token(websocket: WebSocket, session: str | None = Cookie(None), token: str | None = Query(None)):
    if session is None and token is None:
        await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
    return session or token

@app.websocket("/items/{item_id}/ws")
async def websocket_endpoint(
    websocket: WebSocket,
    item_id: str,
    q: str | None = None,
    cookie_or_token: str = Depends(get_cookie_or_token),
):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(
            f"Session cookie or query token value is: {cookie_or_token}"
        )
        if q is not None:
            await websocket.send_text(f"Query parameter q is: {q}")
        await websocket.send_text(f"Message text was: {data}, for item ID: {item_id}")
```

----------------------------------------

TITLE: Importing Path and Annotated in FastAPI
DESCRIPTION: This snippet demonstrates how to import the `Path` class from `fastapi` and `Annotated` from `typing` which is required for defining path parameters with validations and metadata in FastAPI. `Annotated` support was added in FastAPI version 0.95.0 and is the recommended approach.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from typing import Annotated

from fastapi import FastAPI, Path"
```

----------------------------------------

TITLE: FastAPI Header Declaration Example 1
DESCRIPTION: This code snippet demonstrates how to declare a header parameter named `user_agent` using FastAPI's `Header` class. The `user_agent` parameter is of type `str` and is automatically converted from the HTTP header `user-agent` due to the automatic underscore conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
"from typing import Union

from fastapi import FastAPI, Header

app = FastAPI()


@app.get("/items/")
async def read_items(user_agent: Union[str, None] = Header(default=None)):
    return {"User-Agent": user_agent}"
```

----------------------------------------

TITLE: Accessing Model Attributes in FastAPI
DESCRIPTION: Demonstrates how to access attributes of a Pydantic model within a FastAPI function. The item object, an instance of the Item model, is passed as a parameter, and its attributes (name, description, price, tax) are accessed directly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Declaring Header Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a header parameter named `User-Agent` with a default value and how to access it within a FastAPI path operation. The `Header` class is used to define the header parameter, and the value is automatically converted from underscores to hyphens.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/header-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"from typing import Union

from fastapi import FastAPI, Header

app = FastAPI()


@app.get("/items/")
async def read_items(user_agent: Union[str, None] = Header(default=None)):
    return {"User-Agent": user_agent}"
```

----------------------------------------

TITLE: Using the Settings Object in FastAPI
DESCRIPTION: This code snippet shows how to use the `Settings` object defined earlier within a FastAPI route. It imports the `Settings` object and accesses its attributes (e.g., `settings.app_name`) within the route's function to return configuration data in the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

from .config import settings

app = FastAPI()


@app.get("/")
async def read_root():
    return {"app_name": settings.app_name, "admin_email": settings.admin_email}
```

----------------------------------------

TITLE: Multiple Body Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to declare multiple request body parameters in a FastAPI path operation. It defines a path operation that accepts two request body parameters: `item` of type `Item` and `user` of type `User`. FastAPI automatically handles combining these into a single expected JSON body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"@app.post("/items/")
async def create_item(item: Item, user: User):
    return {"item": item, "user": user}"
```

----------------------------------------

TITLE: Including APIRouter in FastAPI Application
DESCRIPTION: This code snippet demonstrates how to include APIRouter instances from different modules into the main FastAPI application. It uses the `app.include_router()` method to add the routers from the `users` and `items` modules to the main application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_9

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI

from .dependencies import get_query_token
from .routers import items, users

app = FastAPI(dependencies=[Depends(get_query_token)])


app.include_router(users.router)
app.include_router(items.router)

```

----------------------------------------

TITLE: Importing FastAPI Response Classes
DESCRIPTION: Shows how to import all available response classes from fastapi.responses module. These classes include support for file serving, HTML rendering, JSON responses (with different implementations), plain text, redirects, and streaming responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/responses.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.responses import (
    FileResponse,
    HTMLResponse,
    JSONResponse,
    ORJSONResponse,
    PlainTextResponse,
    RedirectResponse,
    Response,
    StreamingResponse,
    UJSONResponse,
)
```

----------------------------------------

TITLE: Defining a GET Path Operation
DESCRIPTION: This code snippet shows how to define a path operation using the @app.get() decorator. The decorator tells FastAPI that the function below it is responsible for handling requests to the specified path ('/') using the GET method. The function returns a dictionary, which FastAPI automatically converts to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Setting Environment Variable (Linux, macOS, Windows Bash)
DESCRIPTION: This snippet demonstrates how to set an environment variable named MY_NAME to "Wade Wilson" and then use it in an echo command to print a greeting. It shows how to create and access environment variables directly in the shell.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/environment-variables.md#_snippet_0

LANGUAGE: Shell
CODE:
```
// Вы можете создать переменную окружения MY_NAME с помощью
$ export MY_NAME="Wade Wilson"

// Затем её можно использовать в других программах, например
$ echo "Hello $MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Error Response for Extra Cookies
DESCRIPTION: This JSON snippet shows the error response that FastAPI returns when a client sends additional (forbidden) cookies. The response includes details such as the type of error, location, message, and input value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
"{
    \"detail\": [
        {
            \"type\": \"extra_forbidden\",
            \"loc\": [\"cookie\", \"santa_tracker\"],
            \"msg\": \"Extra inputs are not permitted\",
            \"input\": \"good-list-please\",
        }
    ]
}"
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs FastAPI along with its standard dependencies using pip.  The `fastapi[standard]` option ensures that necessary components are included for typical web application development. Using quotes around the package name ensures compatibility across different terminals.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/index.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
"$ pip install \"fastapi[standard]\"\n\n---> 100%\n"
```

----------------------------------------

TITLE: Simple Function Example
DESCRIPTION: This snippet demonstrates a simple Python function that concatenates a first name and last name, capitalizing the first letter of each. It highlights a use case where type hints can enhance editor auto-completion and code assistance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"def get_full_name(first_name, last_name):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))"
```

----------------------------------------

TITLE: Sobrescrevendo o Manipulador de Exceção de Validação
DESCRIPTION: Mostra como sobrescrever o manipulador padrão de exceções de validação de requisição (RequestValidationError) para personalizar a resposta de erro.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/handling-errors.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request
from fastapi.exceptions import RequestValidationError
from fastapi.responses import PlainTextResponse
from starlette.exceptions import HTTPException as StarletteHTTPException

app = FastAPI()

@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request, exc):
    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc):
    return PlainTextResponse(str(exc), status_code=400)

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    if item_id == 3:
        raise HTTPException(status_code=418, detail="Nope! I don't like 3.")
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Pinning Pydantic Version Range (requirements.txt)
DESCRIPTION: Specifies a version range for the Pydantic dependency, allowing updates within the 1.x series but preventing the 2.x series, which could potentially introduce breaking changes. This ensures compatibility with the FastAPI version being used.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/versions.md#_snippet_2

LANGUAGE: Requirements File Format
CODE:
```
pydantic>=1.2.0,<2.0.0
```

----------------------------------------

TITLE: Implementando dependencias de usuario autenticado en FastAPI
DESCRIPTION: Define funciones de dependencia para obtener el usuario actual y verificar si está activo, utilizadas para proteger rutas que requieren autenticación.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
async def get_current_user(token: str = Depends(oauth2_scheme)):
    user_dict = fake_users_db.get(token)
    if not user_dict:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return UserInDB(**user_dict)

async def get_current_active_user(current_user: User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user
```

----------------------------------------

TITLE: Setting and Using Environment Variables (PowerShell)
DESCRIPTION: This snippet demonstrates how to set an environment variable named MY_NAME to "Wade Wilson" and then use it in a subsequent command to print a greeting. It shows the basic syntax for setting and accessing environment variables in PowerShell.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/environment-variables.md#_snippet_1

LANGUAGE: powershell
CODE:
```
// 建立一個名為 MY_NAME 的環境變數
$ $Env:MY_NAME = "Wade Wilson"

// 在其他程式中使用它，例如
$ echo "Hello $Env:MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Type Hinting Example in Python
DESCRIPTION: This code demonstrates the use of type hints in Python for function parameters and return values. It shows how to declare a variable as a string with editor autocompletion support.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date
from pydantic import BaseModel

# Оголошення змінної як str
# з підтримкою автодоповнення у редакторі
def main(user_id: str):
    return user_id

# Модель Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Creating GitHub Discussion Template for Translations in Markdown
DESCRIPTION: This Markdown snippet provides a template for creating a new GitHub Discussion for a language translation. It includes a title, description, and a link to review PRs with specific labels.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/management-tasks.md#2025-04-21_snippet_3

LANGUAGE: Markdown
CODE:
```
## Bosnian translations

This is the issue to track translations of the docs to Bosnian. 🚀

Here are the [PRs to review with the label `lang-bs`](https://github.com/fastapi/fastapi/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3Alang-bs+label%3A%22awaiting-review%22). 🤓
```

----------------------------------------

TITLE: 구니콘을 유비콘 워커와 함께 실행
DESCRIPTION: gunicorn 명령어를 사용하여 FastAPI 애플리케이션을 실행합니다. --workers 옵션은 워커 프로세스의 개수를 지정하고, --worker-class 옵션은 사용할 워커 클래스를 지정하며, --bind 옵션은 구니콘이 관찰할 IP와 포트를 지정합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/server-workers.md#_snippet_1

LANGUAGE: bash
CODE:
```
gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80
```

----------------------------------------

TITLE: Hero Public Data Model Definition
DESCRIPTION: Defines the `HeroPublic` model, which is used for returning Hero data to API clients. It includes the same fields as `HeroBase` (name, age) and an `id` field, but excludes the `secret_name` to protect sensitive information.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_11

LANGUAGE: Python
CODE:
```
class HeroPublic(HeroBase):
    id: int
```

----------------------------------------

TITLE: Python Union Type Declaration
DESCRIPTION: This code snippet illustrates how to declare a variable that can accept values of different types using the `Union` type hint from the `typing` module in Python. It shows how to specify that a variable can be either of type `PlaneItem` or `CarItem`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/extra-models.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"some_variable: PlaneItem | CarItem"
```

----------------------------------------

TITLE: Defining a Function with a Union Type Parameter in Python 3.10+
DESCRIPTION: This code defines a function `say_hi` with a `name` parameter using the `|` operator to indicate it can be either a string or None. This is a concise and readable way to define union types in modern Python.  The function prints a greeting using the provided name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_16

LANGUAGE: python
CODE:
```
"def say_hi(name: str | None):
    print(f'Hi {name}')
"
```

----------------------------------------

TITLE: Hinting Union Type (Python 3.10+ using |) - Python
DESCRIPTION: For Python versions 3.10+, this snippet shows the new, more readable syntax using the pipe operator (`|`) to indicate that a parameter can be one of several specified types (`int` or `str`). This is equivalent to `typing.Union[int, str]`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_12

LANGUAGE: Python
CODE:
```
def process_item(item: int | str):
    print(item)
```

----------------------------------------

TITLE: Creating a Data Model with Pydantic
DESCRIPTION: This code snippet shows how to define a data model using Pydantic's `BaseModel`. It includes type annotations for each attribute, making use of Python's standard types. Attributes with default values are considered optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Using response model encoding parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to define default values in a Pydantic model and how `response_model_exclude_unset` parameter can be used to exclude fields with default values from the response if they haven't been explicitly set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
"class Item(BaseModel):
    name: str
    price: float
    description: str = None  # Default value
    tax: float = 10.5  # Default value
    tags: List[str] = []  # Default value"
```

LANGUAGE: python
CODE:
```
"@app.get("/items/{item_id}", response_model=Item)
async def read_item(item_id: str, response_model_exclude_unset=True):
    item = items[item_id]
    return item"
```

----------------------------------------

TITLE: Python Function with Type Hints
DESCRIPTION: This code snippet shows a Python function with type hints for the parameters `first_name` and `last_name`, specifying that they are strings (`str`). This allows editors and other tools to provide better support, such as autocompletion and type checking.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"""def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))""
```

----------------------------------------

TITLE: PlainTextResponse Example in FastAPI
DESCRIPTION: This code snippet demonstrates how to return a plain text response from a FastAPI endpoint using `PlainTextResponse`.  It sets the `response_class` to `PlainTextResponse` and returns the plain text content.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()


@app.get("/items/{item_id}", response_class=PlainTextResponse)  # HL
async def read_item(item_id: str):
    return f"Item ID: {item_id}"  # HL

```

----------------------------------------

TITLE: Declaring Dependencies with Parameters FastAPI Python
DESCRIPTION: Shows dependency functions (`verify_key`, `verify_token`) that themselves depend on other dependency functions (`common_parameters`) to get their input parameters (like headers or query parameters).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import Depends, HTTPException, status

async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}

async def verify_key(x_key: str = Depends(common_parameters)):
     # ... security logic ...
    pass # Simplified for example

async def verify_token(x_token: str = Depends(common_parameters)):
     # ... security logic ...
    pass # Simplified for example
```

----------------------------------------

TITLE: Enum Definition - FastAPI (Python)
DESCRIPTION: This code snippet shows how to define an Enum in Python using the `Enum` class from the `enum` module. The Enum inherits from both `str` and `Enum` to ensure that the values are strings and that the documentation can correctly display the Enum.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from enum import Enum


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Setting Environment Variable for a Single Program Call (Bash)
DESCRIPTION: Demonstrates how to set an environment variable `MY_NAME` directly in the command line when calling the Python script. This makes the variable available only for that specific execution of the script.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/environment-variables.md#_snippet_5

LANGUAGE: Shell
CODE:
```
// Maak een omgevingsvariabele MY_NAME in de regel voor deze programma-aanroep
$ MY_NAME="Wade Wilson" python main.py

// Nu kan het de omgevingsvariabele lezen

Hello Wade Wilson from Python

// De omgevingsvariabelen bestaan daarna niet meer
$ python main.py

Hello World from Python
```

----------------------------------------

TITLE: Customizing OpenAPI Schema for Non-JSON Responses in FastAPI
DESCRIPTION: Shows how to customize the OpenAPI schema for a path operation that returns non-JSON data, using openapi_extra to define the response schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get(
    "/items/",
    openapi_extra={
        "responses": {
            "200": {
                "content": {
                    "application/vnd.apache.avro+json": {
                        "schema": {
                            "$ref": "#/components/schemas/AvroUsersSchema"
                        }
                    }
                },
                "description": "Return an Avro schema",
            }
        }
    },
)
def read_items():
    data = magic_data_reader()
    return Response(content=data, media_type="application/vnd.apache.avro+json")
```

----------------------------------------

TITLE: Using Function Names as Operation IDs in FastAPI
DESCRIPTION: This snippet demonstrates how to use the names of path operation functions as operation IDs in OpenAPI. It involves iterating through the API's path operations and setting their `operation_id` based on the function's name, ensuring uniqueness across all operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
for route in app.routes:
    if hasattr(route, 'name'):
        route.operation_id = route.name
```

----------------------------------------

TITLE: Defining a path operation with FastAPI
DESCRIPTION: This snippet shows how to define a simple API endpoint using FastAPI. It illustrates the use of the `@app.get` decorator to handle GET requests to a specific URL path, returning a simple JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/alternatives.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"@app.get("/some/url")
def read_url():
    return {"message": "Hello World!"}"
```

----------------------------------------

TITLE: Basic FastAPI Application Code (main.py)
DESCRIPTION: A simple Python script implementing a basic FastAPI application. It includes a root endpoint ('/') and an item endpoint ('/items/{item_id}') demonstrating the use of path parameters and optional query parameters with type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

```

----------------------------------------

TITLE: Use Settings from Separate Config Module
DESCRIPTION: Import the `Settings` class from the separate configuration module (e.g., `config.py`) into the main application file (e.g., `main.py`). Create an instance of the imported `Settings` class and use it within the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/settings.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

from .config import Settings

settings = Settings()

app = FastAPI()

@app.get("/info")
async def info():
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user,
    }
```

----------------------------------------

TITLE: Enabling CORS with CORSMiddleware in FastAPI
DESCRIPTION: This code snippet demonstrates how to enable CORS in a FastAPI application using the `CORSMiddleware`. It configures allowed origins, credentials, methods, and headers to handle cross-origin requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/cors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

origins = [
    "http://localhost",
    "http://localhost:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Accessing Model Attributes in FastAPI
DESCRIPTION: This code snippet demonstrates how to access attributes of a Pydantic model directly within a FastAPI function. It showcases the ease of use and type safety provided by Pydantic models when handling request bodies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.post("/items/")
async def create_item(item: Item):
    return item.name
```

----------------------------------------

TITLE: Initializing Query Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to define query parameters in a FastAPI path operation function. The `skip` and `limit` parameters are defined as integers with default values. FastAPI automatically handles parsing and validation based on the type annotations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"""\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get("/items/")\nasync def read_items(skip: int = 0, limit: int = 10):\n    return {"skip": skip, "limit": limit}\n"""
```

----------------------------------------

TITLE: Sub-dependencies with yield
DESCRIPTION: Demonstrates how to create a chain of dependencies where each dependency uses `yield`. FastAPI ensures that the exit code in each dependency runs in the correct order, even when dependencies rely on values from other dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_2

LANGUAGE: python
CODE:
```
async def dependency_a() -> str:
    yield "A"


async def dependency_b(dep_a: str = Depends(dependency_a)) -> str:
    yield f"B depends on {dep_a}"


async def dependency_c(dep_b: str = Depends(dependency_b)) -> str:
    yield f"C depends on {dep_b}"
```

LANGUAGE: python
CODE:
```
async def dependency_b(dep_a: str = Depends(dependency_a)) -> str:
    try:
        yield f"B depends on {dep_a}"
    finally:
        print('after dep_b yield')
```

LANGUAGE: python
CODE:
```
async def dependency_c(dep_b: str = Depends(dependency_b)) -> str:
    try:
        yield f"C depends on {dep_b}"
    finally:
        print('after dep_c yield')
```

----------------------------------------

TITLE: Adding a Test Endpoint to FastAPI App (Python)
DESCRIPTION: This snippet adds a basic GET endpoint to the FastAPI application. This endpoint serves as a simple test case to verify that the custom documentation UI is correctly configured and can interact with the API by making requests to its defined paths.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items():
    return [{"name": "Foo"}]
```

----------------------------------------

TITLE: Creating a Data Model with Pydantic
DESCRIPTION: This code snippet shows how to define a data model using Pydantic's `BaseModel`. The model defines the structure and types of the expected data, including optional fields with default values. This enables automatic data validation and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Boolean Query Parameter Conversion in FastAPI
DESCRIPTION: This snippet illustrates how FastAPI automatically converts query parameters of type `bool`. It demonstrates that various string representations (e.g., "1", "True", "true", "on", "yes") will be interpreted as `True`, while others will be `False`. This happens automatically without requiring explicit parsing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"""\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_item(item_id: str, short: bool = False):\n    return {"item_id": item_id, "short": short}\n"""
```

----------------------------------------

TITLE: Return Content from FastAPI Route
DESCRIPTION: Demonstrates returning a dictionary from a FastAPI route function. FastAPI automatically converts dictionaries, lists, and singular values to JSON responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Reading Environment Variables in Python
DESCRIPTION: This Python script reads the environment variable MY_NAME using os.getenv(). If the variable is not set, it defaults to "World". It then prints a greeting using the retrieved name. This demonstrates how to access environment variables from within a Python program.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/environment-variables.md#_snippet_2

LANGUAGE: python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Import Query from FastAPI
DESCRIPTION: Imports the `Query` class from the `fastapi` module, which is used for declaring query parameters with additional validation and metadata.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()
```

----------------------------------------

TITLE: Disable Automatic Documentation in FastAPI
DESCRIPTION: This snippet disables the automatic documentation provided by FastAPI by setting the `docs_url` and `redoc_url` to `None`. This is a prerequisite for using a custom CDN or self-hosting the documentation files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-docs-ui-assets.md#_snippet_0

LANGUAGE: Python
CODE:
```
app = FastAPI(
    docs_url=None,
    redoc_url=None,
)
```

----------------------------------------

TITLE: FastAPI App with Root Path
DESCRIPTION: Creates a FastAPI application instance and defines a simple endpoint that returns a greeting message and the current `root_path`. The `root_path` is retrieved from the request's scope and included in the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request

app = FastAPI()


@app.get("/app")
async def read_main(request: Request):
    return {"message": "Hello World", "root_path": request.scope.get("root_path")}

```

----------------------------------------

TITLE: Optional Query Parameter
DESCRIPTION: Defining an optional query parameter with Union or inline type hint
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
q: Union[str, None] = None
# Or in Python 3.10+
q: str | None = None
```

----------------------------------------

TITLE: Creating a Path Operation to Test Static Files in FastAPI
DESCRIPTION: This snippet creates a simple path operation in FastAPI to test if the static files are being served correctly. It returns a simple HTML response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-docs-ui-assets.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Pinning FastAPI version in requirements.txt
DESCRIPTION: This snippet shows how to specify an exact FastAPI version in the `requirements.txt` file. This ensures that your application always uses the tested and compatible version of FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/versions.md#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
"fastapi==0.45.0"
```

----------------------------------------

TITLE: Defining Optional File Upload in FastAPI
DESCRIPTION: This snippet illustrates how to make file uploads optional in FastAPI by using type annotations and setting a default value of None.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
{* ../../docs_src/request_files/tutorial001_02_an_py310.py hl[9,17] *}
```

----------------------------------------

TITLE: Accessing Requested Scopes from Login Form - Python
DESCRIPTION: This snippet shows how to access the list of requested scopes sent by the client in the OAuth2 password form data. The `OAuth2PasswordRequestForm` includes a `scopes` attribute which is a list of strings requested by the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_1

LANGUAGE: Python
CODE:
```
form_data.scopes
```

----------------------------------------

TITLE: HTTPException with Yield Dependencies
DESCRIPTION: Example of raising HTTPException in yield dependencies with cleanup code
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
async def get_session():
    session = SessionLocal()
    try:
        yield session
    finally:
        if some_condition:
            raise HTTPException(status_code=400, detail="Session error")
        session.close()
```

----------------------------------------

TITLE: Configuring Jinja2Templates in FastAPI
DESCRIPTION: Python code snippet showing how to set up Jinja2Templates in a FastAPI application, including importing necessary modules, creating a templates object, and defining a route that uses template rendering.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/templates.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
{* ../../docs_src/templates/tutorial001.py hl[4,11,15:18] *}
```

----------------------------------------

TITLE: OAuth2PasswordBearer Initialization in FastAPI
DESCRIPTION: This code snippet initializes the OAuth2PasswordBearer for handling password-based OAuth2 flows in a FastAPI application. It defines the `/token` endpoint where users can exchange their username and password for an access token. The token URL specifies the endpoint for obtaining the token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/first-steps.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")"
```

----------------------------------------

TITLE: Python import syntax for FastAPI applications
DESCRIPTION: Example showing the Python import syntax that ASGI servers use to load FastAPI applications. The import statement references the app object from the main module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/manually.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from main import app
```

----------------------------------------

TITLE: Checking Active Python Environment in Linux/macOS
DESCRIPTION: Uses the 'which' command to determine the path of the active Python interpreter, indicating if a virtual environment is in use.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/virtual-environments.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ which python

/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Relative Import from Parent Package
DESCRIPTION: Shows importing a module using two dots (..) to navigate to the parent package and locate a module
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/bigger-applications.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from ..dependencies import get_token_header
```

----------------------------------------

TITLE: FastAPI Docker Command with TLS Proxy Support
DESCRIPTION: Docker CMD configuration that includes proxy headers support for running behind TLS termination proxies like Nginx or Traefik.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/docker.md#2025-04-21_snippet_5

LANGUAGE: dockerfile
CODE:
```
CMD ["fastapi", "run", "app/main.py", "--proxy-headers", "--port", "80"]
```

----------------------------------------

TITLE: Run pytest Tests (Bash)
DESCRIPTION: Executes the tests discovered by the `pytest` framework in the current directory or specified test paths. `pytest` finds files starting with `test_` or ending with `_test.py` and functions/methods starting with `test_`. This command runs all identified tests and reports the results.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_7

LANGUAGE: bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Creating an async FastAPI application
DESCRIPTION: This Python code defines a simple FastAPI application with two asynchronous endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter. It imports FastAPI, creates an app instance, and defines the endpoints using `async def`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Installation von Gunicorn und Uvicorn für FastAPI
DESCRIPTION: Installiert Uvicorn mit zusätzlichen 'standard'-Paketen für hohe Leistung sowie Gunicorn für die Verwendung als Prozessmanager.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/server-workers.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
pip install "uvicorn[standard]" gunicorn
```

----------------------------------------

TITLE: Testing FastAPI Event Handlers with TestClient
DESCRIPTION: Demonstrates how to test FastAPI application startup and shutdown event handlers using the TestClient within a with statement context manager.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/testing-events.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@app.on_event("startup")
async def startup_event():
    items["foo"] = {"name": "Fighters"}

@app.on_event("shutdown")
def shutdown_event():
    items.clear()

with TestClient(app) as client:
    response = client.get("/items/foo")
    assert response.status_code == 200
    assert response.json() == {"name": "Fighters"}
```

----------------------------------------

TITLE: Setting Default Value for Query Parameter in FastAPI
DESCRIPTION: This snippet demonstrates how to set a default value for a query parameter along with other validations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
q: str = Query(default="fixedquery", min_length=3)
```

----------------------------------------

TITLE: Hinting Optional Type (Python 3.6+ via typing) - Python
DESCRIPTION: For Python versions 3.6+ (up to 3.9), this snippet uses `Optional` from the `typing` module to indicate that a parameter can be either a specific type (`str`) or `None`. `Optional[str]` is a shorthand for `Union[str, None]`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Optional

def process_item(item: Optional[str]):
    print(item)
```

----------------------------------------

TITLE: Query Parameter with List Type
DESCRIPTION: This code shows how to define a query parameter that accepts a list of values. By declaring the parameter as a `list` and using `Query`, FastAPI automatically handles multiple values for the same parameter name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: List[str] = Query()):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Configuring NPM Package.json for Client Generation
DESCRIPTION: A package.json configuration that defines a script to generate TypeScript client code using openapi-ts with the FastAPI OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Defining HTTP GET Route with Custom Status Code in FastAPI
DESCRIPTION: This code snippet demonstrates how to use FastAPI's @app.get() decorator to define a route that responds with a specific HTTP status code. It leverages the status_code parameter to customize the response when the endpoint is accessed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-status-code.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@app.get("/items/{item_id}", status_code=status.HTTP_200_OK)\nasync def read_item(item_id: int):\n    return {"item_id": item_id}
```

----------------------------------------

TITLE: FileResponse for Asynchronous File Streaming in FastAPI
DESCRIPTION: Illustrates how to use FileResponse to asynchronously stream a file as a response. It accepts the file path, headers, media type, and filename as arguments. The response includes appropriate Content-Length, Last-Modified, and ETag headers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_10

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, FileResponse

app = FastAPI()


@app.get("/file")
async def get_file():
    path = "./some-file.txt"
    return FileResponse(path, filename="report.txt", media_type="text/plain")

```

----------------------------------------

TITLE: Definindo Modelos de Entrada e Saída em FastAPI
DESCRIPTION: Exemplo de definição de modelos Pydantic separados para entrada e saída de dados em uma API FastAPI, incluindo um campo sensível (senha) apenas no modelo de entrada.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from pydantic import BaseModel, EmailStr

class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

@app.post("/user/", response_model=UserOut)
def create_user(user: UserIn) -> Any:
    return user
```

----------------------------------------

TITLE: Defining nested Pydantic Models
DESCRIPTION: This snippet shows the definitions of nested Pydantic models: `Image`, `Item`, and `Offer`. The `Offer` model includes a list of `Item` and each `Item` contains a list of `Image` models, demonstrating complex data structures.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
    "url: str
    name: str"
      }, {
        "code": "tags: list[str] = []
    items: list[Item] | None = None"
      }, {
        "code": "items: list[Item]"
```

----------------------------------------

TITLE: JSON Response Example
DESCRIPTION: This JSON snippet shows the expected response from the /users/me/ endpoint after successful authentication. It includes user details such as username, email, full name, and disabled status.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  "username": "johndoe",
  "email": "johndoe@example.com",
  "full_name": "John Doe",
  "disabled": false
}
```

----------------------------------------

TITLE: Raising HTTPException in FastAPI
DESCRIPTION: This example demonstrates how to raise an HTTPException with a 404 status code when an item is not found. It defines a path operation that returns an item or raises an exception if the item ID is 'bar'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": "The Foo Wrestlers"}


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": items[item_id]}
```

----------------------------------------

TITLE: Basic FastAPI Test with TestClient
DESCRIPTION: This snippet demonstrates how to use TestClient to test a FastAPI application. It imports TestClient, creates an instance with the FastAPI app, and then makes requests to the application, asserting the expected responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/testing.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}


client = TestClient(app)


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Using Generic List Type for Query Parameters in FastAPI (Python 3.9+)
DESCRIPTION: Demonstrates using a generic list type instead of list[str] for a query parameter. This approach won't check the content types within the list but still accepts multiple values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
from typing import Annotated

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Annotated[list, Query()] = ["foo", "bar"]):
    query_items = {"q": q}
    return query_items
```

----------------------------------------

TITLE: FastAPI Header Conversion Example
DESCRIPTION: This code snippet demonstrates how to disable the automatic conversion of underscores to hyphens in header names by setting `convert_underscores` to `False`.  This allows you to define the header name exactly as it should appear in the HTTP request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/header-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI, Header

app = FastAPI()


@app.get("/items/")
async def read_items(
    strange_user_agent: Union[str, None] = Header(default=None, convert_underscores=False),
):
    return {"User-Agent": strange_user_agent}
```

----------------------------------------

TITLE: Raising HTTPException in FastAPI
DESCRIPTION: This code snippet shows how to raise an HTTPException with a 404 status code when an item is not found. It demonstrates how to return a specific HTTP error to the client when a resource is not available.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/handling-errors.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": {"name": "The Foo Wrestlers"}}


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return items[item_id]
```

----------------------------------------

TITLE: Define Deeply Nested Models
DESCRIPTION: Illustrates how to create complex, deeply nested data structures by defining multiple Pydantic models where attributes are lists or instances of other defined models.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import List, Union, Set
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None
    tags: Set[str] = set()
    images: Union[List[Image], None] = None

class Offer(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    items: List[Item]
```

----------------------------------------

TITLE: List with Type Parameters in FastAPI
DESCRIPTION: This snippet illustrates how to declare a list with type parameters using `typing.List` in a Pydantic model within FastAPI. It demonstrates specifying the type of elements contained within the list, providing more explicit type information.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"from typing import List, Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: List[str] = []"
```

----------------------------------------

TITLE: Defining a Lifespan Context Manager in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to create a lifespan context manager for a FastAPI application. It uses the @asynccontextmanager decorator and defines actions to be performed before and after the yield statement.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    model = load_model()
    # Yield control back to FastAPI
    yield
    # Clean up the ML models and release the resources
    model.unload()
```

----------------------------------------

TITLE: Basic FastAPI Test with TestClient
DESCRIPTION: This snippet demonstrates a basic test case for a FastAPI application using TestClient. It imports TestClient, creates an instance with the FastAPI app, sends a request, and asserts the response status code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}


client = TestClient(app)


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Using Pydantic Models in FastAPI
DESCRIPTION: This code shows how to instantiate and use Pydantic models in FastAPI. It demonstrates creating a model instance directly with parameters and also using dictionary unpacking to populate a model from a data dictionary.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/features.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Setting Environment Variable (Windows PowerShell)
DESCRIPTION: This snippet demonstrates how to set an environment variable named MY_NAME to "Wade Wilson" in PowerShell and then use it in an echo command to print a greeting. It illustrates the PowerShell-specific syntax for environment variable manipulation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/environment-variables.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
// Создайте переменную окружения MY_NAME
$ $Env:MY_NAME = "Wade Wilson"

// Используйте её с другими программами, например
$ echo "Hello $Env:MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Context Manager Usage in FastAPI Dependency
DESCRIPTION: Demonstrates how to use context managers within FastAPI dependencies using `yield` and `with` statements. This ensures resources are properly managed, even when exceptions occur.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_6

LANGUAGE: Python
CODE:
```
from contextlib import asynccontextmanager

from fastapi import Depends, FastAPI


@asynccontextmanager
async def get_db():
    db = FakeDatabase()
    try:
        yield db
    finally:
        await db.close()


async def get_dependency(db: FakeDatabase = Depends(get_db)):
    yield
```

----------------------------------------

TITLE: Attributes with Lists of Sub-Models
DESCRIPTION: This code snippet demonstrates how to use a list of sub-models as an attribute in a Pydantic model. The `images` attribute in the `Item` model is declared as a `list` of `Image` models.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-nested-models.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Optional, List

from pydantic import BaseModel, HttpUrl


class Image(BaseModel):
    url: HttpUrl
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list[str] = []
    images: Optional[List[Image]] = None
```

----------------------------------------

TITLE: Query Parameter with Title and Description
DESCRIPTION: This snippet adds both a title and a description to the query parameter using the `title` and `description` parameters of the `Query` class. These metadata elements are included in the generated OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Optional[str] = Query(
        None, title="Query string", description="Query description"
    )
):
    return {"q": q}
```

----------------------------------------

TITLE: Installing Uvicorn with Standard Dependencies
DESCRIPTION: Installs Uvicorn, a high-performance ASGI server, along with recommended dependencies like uvloop for improved asynchronous performance. The `standard` option ensures that uvloop, a faster alternative to asyncio, is included.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/manually.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Using response_model_include and response_model_exclude in FastAPI
DESCRIPTION: This example shows how to use `response_model_include` and `response_model_exclude` to selectively include or exclude fields from the response. These are quick shortcuts for filtering data from a Pydantic model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
"@app.get("/items/{item_id}", response_model=Item, response_model_include={"name", "description"})
async def read_item(item_id: str):
    item = items[item_id]
    return item"
```

LANGUAGE: python
CODE:
```
"@app.get("/items/{item_id}", response_model=Item, response_model_exclude={"tax", "description"})
async def read_item(item_id: str):
    item = items[item_id]
    return item"
```

----------------------------------------

TITLE: Query Parameter with Alias
DESCRIPTION: This snippet demonstrates how to use an alias for a query parameter. The `alias` parameter of the `Query` class allows you to specify a different name for the parameter in the URL than the name used in the function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Optional[str] = Query(None, alias="item-query")):
    return {"q": q}
```

----------------------------------------

TITLE: Creating Hero with HeroCreate and Returning HeroPublic
DESCRIPTION: Demonstrates how to create a Hero using the `HeroCreate` model and return the results using the `HeroPublic` model. The `response_model` parameter in the FastAPI route is used to specify the model for validating and serializing the response data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_14

LANGUAGE: Python
CODE:
```
@router.post("/", response_model=HeroPublic)
async def create_hero(hero: HeroCreate):
```

----------------------------------------

TITLE: Class as Dependency: Python
DESCRIPTION: This code demonstrates how to define a class `CommonQueryParams` with parameters `q`, `skip`, and `limit`, and inject it as a dependency using FastAPI. It showcases how FastAPI automatically handles the instantiation and dependency injection of the class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
    class CommonQueryParams:
        def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
            self.q = q
            self.skip = skip
            self.limit = limit
```

----------------------------------------

TITLE: Query Parameter with List and List[str] Type
DESCRIPTION: This snippet shows the usage of `List[str]` type annotation instead of `list` for the query parameter. When using `List[str]`, FastAPI can perform type checking on the list elements.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: List[str] = Query()):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Shorthand Dependency Injection in FastAPI (Python)
DESCRIPTION: This snippet demonstrates a shorthand syntax for class-based dependency injection in FastAPI. By using Annotated with Depends(), you can avoid repeating the class name, making the code more concise.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[CommonQueryParams, Depends()]):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = fake_items_db[commons.skip : commons.skip + commons.limit]
    response.update({"items": items})
    return response
```

----------------------------------------

TITLE: FastAPI App Testing Example
DESCRIPTION: This example demonstrates how to test a FastAPI application using TestClient. It imports the TestClient, creates an instance with the FastAPI app, and then uses it to send a request and assert the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}


client = TestClient(app)


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Using the Request Body for Error Handling
DESCRIPTION: Shows how to use the request body when handling exceptions. The request body is read within a `try` block, and if an exception occurs during the process, the body is set to `None`. The body content can then be used to provide more informative error messages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/how-to/custom-request-and-route.md#_snippet_3

LANGUAGE: Python
CODE:
```
    return JSONResponse(
        status_code=422,
        content={
            "detail": exc.errors(),
            "body": body.decode() if body else None,
        },
    )
```

----------------------------------------

TITLE: Modifying Item Name to Item Price in FastAPI
DESCRIPTION: This snippet shows how to change the return value from item name to item price in a FastAPI application. It demonstrates how the editor can provide autocompletion based on the data types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/az/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

LANGUAGE: Python
CODE:
```
... "item_name": item.name ...
```

LANGUAGE: Python
CODE:
```
... "item_price": item.price ...
```

----------------------------------------

TITLE: Pinning FastAPI Version Range (requirements.txt)
DESCRIPTION: Specifies a version range for FastAPI, allowing patch updates (e.g., 0.45.x) but preventing minor or major version changes (e.g., 0.46.0 or 1.0.0) that might introduce breaking changes according to Semantic Versioning.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/versions.md#_snippet_1

LANGUAGE: Requirements File Format
CODE:
```
fastapi>=0.45.0,<0.46.0
```

----------------------------------------

TITLE: Using HttpUrl for Validation
DESCRIPTION: Demonstrates using the `HttpUrl` type from Pydantic for validating that a string is a valid URL. The `url` attribute in the `Image` model is defined as an `HttpUrl`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-nested-models.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, HttpUrl


class Image(BaseModel):
    url: HttpUrl
    name: str


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: set[str] = set()
    image: Optional[Image] = None
```

----------------------------------------

TITLE: Creating a WebSocket endpoint in FastAPI
DESCRIPTION: This snippet demonstrates how to create a WebSocket endpoint in a FastAPI application using the WebSocket class. It defines a route that handles WebSocket connections, receives messages from the client, and sends back a response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/websockets.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, WebSocket

app = FastAPI()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: Incorrectly Calling an Asynchronous Function in Python
DESCRIPTION: Illustrates that an asynchronous function defined with `async def` cannot be called directly like a regular synchronous function. It must be called using the `await` keyword from within another `async def` function or an appropriate async context.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/async.md#_snippet_3

LANGUAGE: Python
CODE:
```
# This won't work, because get_burgers was defined with: async def
burgers = get_burgers(2)
```

----------------------------------------

TITLE: Python Function with Type Hints and Error
DESCRIPTION: This function demonstrates how type hints can help catch errors. The `age` parameter is annotated as an integer (`int`), but the code attempts to concatenate it with a string, which would raise a TypeError without proper conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"""def get_name_with_age(name: str, age: int):
    return name + " is " + age
""
```

----------------------------------------

TITLE: Single Values in Body with FastAPI
DESCRIPTION: This example shows how to include a single value in the request body alongside Pydantic models using the `Body` parameter. FastAPI will expect a JSON body containing the item, user, and importance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-multiple-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.post("/items/")
async def create_item(
    item: Item,
    user: User,
    importance: int = Body(gt=0),
):
    return {"item": item, "user": user, "importance": importance}
```

----------------------------------------

TITLE: Extended FastAPI Application with PUT Request in Python
DESCRIPTION: An extended FastAPI application that includes a PUT endpoint for updating items, using Pydantic for request body validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Using Pydantic Model in Request Body
DESCRIPTION: This code snippet demonstrates how to use a Pydantic model to define the structure of the request body. FastAPI automatically validates the incoming data against the model and provides type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body.md#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


app = FastAPI()


@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Declaring Request Body Parameter
DESCRIPTION: This code snippet demonstrates how to declare a request body parameter in a FastAPI path operation. The `item: Item` declaration tells FastAPI to expect a JSON request body that conforms to the `Item` model. FastAPI automatically handles parsing, validation, and type conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/body.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()


@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Accessing Request Body in Validation Exception Handler
DESCRIPTION: This snippet illustrates how to access the request body within a RequestValidationError exception handler in FastAPI. By accessing the exc.body attribute, the handler can retrieve the original request body that caused the validation error. This is useful for including the invalid data in the error response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/handling-errors.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
@app.post("/items/")
async def create_item(item: Item):
    return item
```

LANGUAGE: Python
CODE:
```
from fastapi import Request


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=422,
        content={"detail": exc.errors(), "body": exc.body},
    )
```

----------------------------------------

TITLE: Defining a GET Path Operation Decorator
DESCRIPTION: Defines a path operation using the `@app.get("/")` decorator, which tells FastAPI that the function below is responsible for handling requests to the root path `/` using the GET method. This decorator links the function to a specific URL endpoint and HTTP method.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application
DESCRIPTION: This code creates a basic FastAPI application with two endpoints: a root endpoint that returns a simple JSON response and an items endpoint that accepts an item ID and an optional query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Declaring a Dependency in a FastAPI Route (Python)
DESCRIPTION: This FastAPI route operation function `read_items` demonstrates how to declare a dependency using `Depends`. It takes a parameter `commons` whose value is provided by calling the `common_parameters` function via `Depends`. The result of the dependency function is then returned by the route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: dict = Depends(common_parameters)):
    return commons
```

----------------------------------------

TITLE: Relative Import with Single Dot
DESCRIPTION: This code snippet demonstrates a relative import using a single dot, which signifies importing from the same package as the current module. It attempts to import the `get_token_header` function from a `dependencies` module within the same directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_7

LANGUAGE: Python
CODE:
```
from .dependencies import get_token_header
```

----------------------------------------

TITLE: Optional Type Hint on Required Parameter (Python)
DESCRIPTION: Shows a function parameter type-hinted as `Optional[str]` but without a default value. This demonstrates that `Optional` indicates the value *can* be `None`, but the parameter itself is still required when calling the function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Optional

def say_hi(name: Optional[str]):
    if name:
        print(f"Hello {name}")
    else:
        print("Hello World")
```

----------------------------------------

TITLE: Declaring a Union Type (Python 3.10+)
DESCRIPTION: This snippet demonstrates how to declare a variable that can be either an integer or a string using the union operator `|` in Python 3.10 and later. The type hint `int | str` specifies that the variable `item` can hold either an integer or a string value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_11

LANGUAGE: Python
CODE:
```
item: int | str = 123
```

----------------------------------------

TITLE: Hinting Optional Parameter with Default None (Python 3.10+ using |) - Python
DESCRIPTION: For Python versions 3.10+, this snippet combines the `str | None` union type hint with a default value of `None`. This is the modern syntax for expressing an optional parameter that defaults to `None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_17

LANGUAGE: Python
CODE:
```
def say_hi(name: str | None = None):
    if name is not None:
        print(f"Hey {name}!")
    else:
        print("Hello World!")
```

----------------------------------------

TITLE: Testing FastAPI application with TestClient
DESCRIPTION: This snippet demonstrates how to use TestClient to test a FastAPI application. It imports TestClient, creates an instance with the FastAPI app, and then uses it to make requests and assert the responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/testing.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()


@app.get("/")
async def read_main():
    return {"msg": "Hello World"}


client = TestClient(app)


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Creating a Data Model with Pydantic
DESCRIPTION: Defines a data model named `Item` by inheriting from `BaseModel`. It includes fields like `name`, `description`, `price`, and `tax`, with type annotations and default values to specify data types and optional fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Importing HTTPException in FastAPI
DESCRIPTION: This snippet shows how to import the `HTTPException` class from the `fastapi` module. The `HTTPException` class is used to raise HTTP exceptions in FastAPI applications, allowing you to return specific HTTP status codes and error messages to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/handling-errors.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI, HTTPException"
```

----------------------------------------

TITLE: Defining Optional Query Parameter with Maximum Length Validation (Python 3.10+)
DESCRIPTION: Defines an optional query parameter 'q' with a type hint of 'str | None' and sets the default value as 'None'. The parameter is validated to ensure its length does not exceed 50 characters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
q: Annotated[str | None] = Query(default=None, max_length=50)
```

----------------------------------------

TITLE: Define Async Path Operation Function in FastAPI
DESCRIPTION: This code snippet demonstrates how to define an asynchronous path operation function in FastAPI using `async def`. This function will be called by FastAPI when it receives a GET request to the `/` URL. It returns a dictionary that will be automatically converted to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating Custom ORJSON Response Class in Python
DESCRIPTION: Implementation of a custom response class using orjson with indent formatting option. The class inherits from Response and overrides the render method to return bytes with custom JSON formatting.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/custom-response.md#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
from fastapi.responses import Response
import orjson

class CustomORJSONResponse(Response):
    media_type = "application/json"

    def render(self, content) -> bytes:
        return orjson.dumps(content, option=orjson.OPT_INDENT_2)
```

----------------------------------------

TITLE: Configuring Package JSON for OpenAPI Client Generation
DESCRIPTION: Configures package.json script to generate a TypeScript client using openapi-ts with Axios, reading from a local openapi.json file
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/generate-clients.md#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input ./openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Instantiating the Callable Dependency (Python)
DESCRIPTION: Before using a callable object as a dependency via `Depends()`, you must create an instance of the class. This allows you to pass specific configuration or state to the object via its `__init__` method, as FastAPI will use this pre-configured instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/advanced-dependencies.md#_snippet_2

LANGUAGE: Python
CODE:
```
checker = FixedContentQueryChecker(fixed_content="bar")
```

----------------------------------------

TITLE: Creating a basic FastAPI application
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: a root endpoint that returns a greeting and an /items/{item_id} endpoint that returns the item ID and an optional query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/deployment/docker.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Optional[str] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Asynchronous Function Definition in Python
DESCRIPTION: This code snippet demonstrates how to define an asynchronous function in Python using the `async def` syntax. The `async` keyword enables the use of `await` within the function, allowing it to pause execution while waiting for an asynchronous operation to complete.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Готовим бургеры по специальному асинхронному рецепту
    return burgers
```

----------------------------------------

TITLE: Optional 타입 힌트 예제
DESCRIPTION: `Optional`을 사용하여 변수가 특정 타입이거나 `None`일 수 있음을 나타내는 방법을 보여줍니다. 이를 통해 에디터는 값이 `None`일 수 있는 경우에 대한 오류를 찾을 수 있습니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/python-types.md#_snippet_8

LANGUAGE: python
CODE:
```
from typing import Optional

name: Optional[str] = None
```

----------------------------------------

TITLE: Modifying OpenAPI Schema with ReDoc Extension
DESCRIPTION: This snippet demonstrates how to modify the generated OpenAPI schema to include a custom extension, specifically the ReDoc x-logo extension. It accesses the `info` object within the schema and adds the custom logo information.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/extending-openapi.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"    openapi_schema["info"]["x-logo"] = {\n        "url": "https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png"\n    }"
```

----------------------------------------

TITLE: Defining a GET route in FastAPI
DESCRIPTION: This snippet shows how to define a GET route in FastAPI using the @app.get decorator. It demonstrates the similarity in syntax to the Requests library and highlights FastAPI's simple and intuitive API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/alternatives.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/some/url")
def read_url():
     return {"message": "Hello World"}
```

----------------------------------------

TITLE: FastAPI Default Swagger UI Settings
DESCRIPTION: This snippet displays the default configurations for Swagger UI that FastAPI utilizes. It includes settings like `filter`, `showExtensions`, `showCommonExtensions`, `displayOperationId`, `defaultModelsExpandDepth`, `defaultModelExpandDepth`, `defaultModelRendering`, `displayRequestDuration`, `docExpansion`, `showRequestPerEndpoint`, `deepLinking`, and `persistAuthorization`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
settings = {
    "filter": "",
    "showExtensions": True,
    "showCommonExtensions": True,
    "displayOperationId": False,
    "defaultModelsExpandDepth": 1,
    "defaultModelExpandDepth": 1,
    "defaultModelRendering": "example",
    "displayRequestDuration": False,
    "docExpansion": "none",
    "showRequestPerEndpoint": False,
    "deepLinking": True,
    "persistAuthorization": False,
}
```

----------------------------------------

TITLE: Function Parameter with Optional Type
DESCRIPTION: Illustrates a function parameter defined as `Optional[str]`, which means it can accept either a string or `None` as a value.  The parameter is still required if no default value is provided.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_15

LANGUAGE: Python
CODE:
```
from typing import Optional

def say_hi(name: Optional[str]):
    if name:
        print(f"Hi {name}")
    else:
        print("Hello World")
```

----------------------------------------

TITLE: Executing FastAPI with `fastapi run`
DESCRIPTION: This command initializes a FastAPI application. It searches for the package file structure, imports the app object, and starts the server, providing documentation access and logging information.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/deployment/manually.md#_snippet_0

LANGUAGE: console
CODE:
```
$ <font color="#4E9A06">fastapi</font> run <u style="text-decoration-style:solid">main.py</u>

  <span style="background-color:#009485"><font color="#D3D7CF"> FastAPI </font></span>  Starting production server 🚀

             Searching for package file structure from directories
             with <font color="#3465A4">__init__.py</font> files
             Importing from <font color="#75507B">/home/user/code/</font><font color="#AD7FA8">awesomeapp</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> module </font></span>  🐍 main.py

     <span style="background-color:#007166"><font color="#D3D7CF"> code </font></span>  Importing the FastAPI app object from the module with
             the following code:

             <u style="text-decoration-style:solid">from </u><u style="text-decoration-style:solid"><b>main</b></u><u style="text-decoration-style:solid"> import </u><u style="text-decoration-style:solid"><b>app</b></u>

      <span style="background-color:#007166"><font color="#D3D7CF"> app </font></span>  Using import string: <font color="#3465A4">main:app</font>

   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Server started at <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000</u></font>
   <span style="background-color:#007166"><font color="#D3D7CF"> server </font></span>  Documentation at <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000/docs</u></font>

             Logs:

     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Started server process <b>[</b><font color="#34E2E2"><b>2306215</b></font><b>]</b>
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Waiting for application startup.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Application startup complete.
     <span style="background-color:#007166"><font color="#D3D7CF"> INFO </font></span>  Uvicorn running on <font color="#729FCF"><u style="text-decoration-style:solid">http://0.0.0.0:8000</u></font> <b>(</b>Press CTRL+C
             to quit<b>)</b>
```

----------------------------------------

TITLE: Uvicorn Server Command with Proxy Headers in Dockerfile
DESCRIPTION: This command configures the Uvicorn server to run behind a TLS termination proxy like Nginx or Traefik. The `--proxy-headers` option ensures Uvicorn trusts headers sent by the proxy, correctly identifying HTTPS connections.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Restricting form fields to only those defined in Pydantic model
DESCRIPTION: Example showing how to configure a Pydantic model to forbid extra fields in form data submissions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-form-models.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
hl[12]
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs FastAPI and its standard dependencies using pip. The `[standard]` extra includes commonly used packages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/index.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Creating a Callable Instance with __call__ Method in Python for FastAPI Dependencies
DESCRIPTION: This code snippet shows how to make a class instance callable by implementing the `__call__` method, which FastAPI will use to check parameters and subdependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
class FixedContentQueryChecker:
    def __init__(self, fixed_content: str):
        self.fixed_content = fixed_content

    def __call__(self, q: Union[str, None] = None):
        if q:
            return self.fixed_content in q
        return False
```

----------------------------------------

TITLE: Using UploadFile with Additional Metadata
DESCRIPTION: Demonstrates how to combine UploadFile with the File() function to provide additional metadata for the file parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
async def create_upload_file(file: UploadFile = File(description="A file read as UploadFile")):
```

----------------------------------------

TITLE: Correcting Type Error by Casting - Python
DESCRIPTION: An example call to the `get_name_and_age` function. It demonstrates how to fix a type error (passing an integer where a string is expected, as shown in the text's images) by explicitly casting the integer `35` to a string using `str()`. The highlighted line shows the corrected function call.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_3

LANGUAGE: Python
CODE:
```
get_name_and_age("John", str(35))
```

----------------------------------------

TITLE: Query Parameter with Title
DESCRIPTION: This example demonstrates how to add a title to a query parameter using the `title` argument in the `Query` function.  The title is used for documentation purposes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, title="Query string")):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Define Enum for Predefined Path Parameter Values (Python)
DESCRIPTION: This snippet defines a Python `Enum` class, `ModelName`, inheriting from `str` and `Enum`. This structure allows the enum members to be used as predefined string values for path parameters in FastAPI, enabling automatic validation and improved documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from enum import Enum

class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Definiendo endpoint de token OAuth2 en FastAPI
DESCRIPTION: Crea un endpoint /token que acepta credenciales de usuario y devuelve un token de acceso si la autenticación es exitosa.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.post("/token")
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user_dict = fake_users_db.get(form_data.username)
    if not user_dict:
        raise HTTPException(status_code=400, detail="Incorrect username or password")
    user = UserInDB(**user_dict)
    hashed_password = fake_hash_password(form_data.password)
    if not hashed_password == user.hashed_password:
        raise HTTPException(status_code=400, detail="Incorrect username or password")
    return {"access_token": user.username, "token_type": "bearer"}
```

----------------------------------------

TITLE: Set Type as Field in Pydantic Model
DESCRIPTION: Defines a Pydantic model with a set as a field, ensuring that the elements are unique. The `tags` attribute is declared as a set of strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-nested-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional, Set

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: Set[str] = set()
```

----------------------------------------

TITLE: Running Uvicorn with Root Path | Shell
DESCRIPTION: This command starts the Uvicorn server hosting a FastAPI application (`main:app`). The `--root-path` argument is used to inform the application that it is being served under a specific URL prefix (e.g., `/api/v1`) by a proxy. This is crucial for correct URL generation within the app, especially for OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_0

LANGUAGE: Shell
CODE:
```
uvicorn main:app --root-path /api/v1
```

----------------------------------------

TITLE: Copy Requirements File in Dockerfile
DESCRIPTION: This command copies the `requirements.txt` file into the `/code` directory within the Docker image. Copying the requirements file separately allows Docker to cache the dependency installation step if the requirements file hasn't changed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
COPY ./requirements.txt /code/requirements.txt
```

----------------------------------------

TITLE: Modified Return Statement with Item Price
DESCRIPTION: This code snippet shows the modified return statement in a FastAPI application, where the `item_name` key has been changed to `item_price`. This change demonstrates how the editor automatically fills in attributes and knows their types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/index.md#_snippet_9

LANGUAGE: Python
CODE:
```
        ... "item_price": item.price ...
```

----------------------------------------

TITLE: List as a Field in Pydantic Model
DESCRIPTION: Defines a Pydantic model with a list as a field, demonstrating how to specify a list attribute in a model. The `tags` attribute is defined as a list without specifying the type of elements in the list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-nested-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list = []
```

----------------------------------------

TITLE: Using jsonable_encoder in FastAPI with Python 3.10
DESCRIPTION: This example demonstrates how to use FastAPI's jsonable_encoder to convert a Pydantic model to a JSON-compatible dictionary, including handling datetime objects by converting them to ISO-formatted strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/encoder.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from datetime import datetime
from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel

class Item(BaseModel):
    title: str
    timestamp: datetime
    description: str | None = None

app = FastAPI()

@app.put("/items/{id}")
def update_item(id: str, item: Item):
    json_compatible_item_data = jsonable_encoder(item)
    fake_db[id] = json_compatible_item_data
```

----------------------------------------

TITLE: Installing Hypercorn in Python
DESCRIPTION: Command to install Hypercorn, an ASGI server compatible with HTTP/2 and WebSockets, using pip.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ pip install hypercorn

---> 100%
```

----------------------------------------

TITLE: Assigning Path Operation Tags
DESCRIPTION: Assign custom tags to specific path operations for organization and documentation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/metadata.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.post("/users/", tags=["users"])
@app.get("/items/", tags=["items"])
```

----------------------------------------

TITLE: Returning a basic Response object
DESCRIPTION: This code snippet demonstrates how to return a basic Response object directly. It imports the Response class and returns an instance of it with custom content and media type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import Response

app = FastAPI()


@app.get("/")
async def main():
    content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Hello World!</h1>
        </body>
    </html>
    """
    return Response(content=content, media_type="text/html")
```

----------------------------------------

TITLE: Setting and Using Environment Variables (Bash)
DESCRIPTION: This snippet demonstrates how to set an environment variable named `MY_NAME` to the value "Wade Wilson" using the `export` command in a Bash shell. It then shows how to access this variable using `echo` to print a greeting.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/environment-variables.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ export MY_NAME="Wade Wilson"
$ echo "Hello $MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Query Parameter with Default Value and Min Length
DESCRIPTION: Declares a query parameter `q` with a default value of `fixedquery` and a minimum length of 3 using the `Query` class.  Since a default value is provided, the parameter is optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: str = Query(default="fixedquery", min_length=3)):
    return {"q": q}
```

----------------------------------------

TITLE: Initializing FastAPI and Defining Basic Routes
DESCRIPTION: This code initializes a FastAPI application and defines two GET routes: one for the root path ('/') and another for '/items/{item_id}'. The '/items/{item_id}' route accepts an integer item_id and an optional string query parameter q.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/az/docs/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Reusing FastAPI's Exception Handlers
DESCRIPTION: This snippet demonstrates how to import and reuse FastAPI's default exception handlers when defining custom exception handling logic. This allows you to extend the default behavior without completely replacing it.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_8

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from starlette.exceptions import HTTPException as StarletteHTTPException

app = FastAPI()


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    print(f"OMG! The client sent invalid data!: {exc.body}")
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content=jsonable_encoder({"detail": exc.errors(), "body": exc.body}),
    )


from fastapi.exception_handlers import (  # noqa: F401
    http_exception_handler,
    request_validation_exception_handler,
)


@app.exception_handler(StarletteHTTPException)
async def custom_http_exception_handler(request: Request, exc: StarletteHTTPException):
    print(f"Ouch! An HTTP error!: {exc.detail}")
    return await http_exception_handler(request, exc)
```

----------------------------------------

TITLE: Creating a Hero Model with SQLModel in Python
DESCRIPTION: Defines a Hero class using SQLModel to represent a table in the SQL database. It includes fields for id, name, age, and secret name, with annotations for primary key and index.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/sql-databases.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class Hero(SQLModel, table=True):
    id: int | None = Field(default=None, primary_key=True)
    name: str
    secret_name: str
    age: int | None = Field(default=None, index=True)
```

----------------------------------------

TITLE: Securing Path Operation with Scopes ('items') - Python
DESCRIPTION: This snippet demonstrates how to secure another path operation (`/users/me/items/`) using the `Security` dependency and require the "items" scope. This shows how different endpoints can require different sets of scopes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/oauth2-scopes.md#_snippet_3

LANGUAGE: Python
CODE:
```
@router.get("/users/me/items/", response_model=list[Item])
def read_own_items(current_user: Annotated[User, Security(get_current_active_user, scopes=["items"])]):
```

----------------------------------------

TITLE: Class Initialization: Python
DESCRIPTION: This code snippet shows the initialization method (`__init__`) for the `CommonQueryParams` class. It defines the constructor and its parameters: `q` (string or None), `skip` (integer), and `limit` (integer).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
        def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
```

----------------------------------------

TITLE: Using Class-based Dependency in FastAPI Route (Python)
DESCRIPTION: This code snippet shows how to use a class-based dependency in a FastAPI route. The CommonQueryParams class is used with the Depends function to inject the dependency into the route function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = fake_items_db[commons.skip : commons.skip + commons.limit]
    response.update({"items": items})
    return response
```

----------------------------------------

TITLE: Body with example
DESCRIPTION: Demonstrates how to pass an example of the expected data using Body(). This example shows how to define a single example for the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/schema-extra-example.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Body, FastAPI

app = FastAPI()


@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: str = Body(
        ...,
        example={
            "name": "Foo",
            "description": "A very nice Item",
            "price": 35.4,
            "tax": 3.2,
        },
    ),
):
    results = {"item_id": item_id, "item": item}
    return results
```

----------------------------------------

TITLE: Setting Response Headers with Response Parameter in FastAPI
DESCRIPTION: This snippet shows how to declare a Response parameter in a FastAPI path operation function and set custom headers. The function returns normal content, while FastAPI handles adding the custom headers to the final response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-headers.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/items/")
async def read_items(response: Response):
    response.headers["X-Cat-Dog"] = "alone in the world"
    return {"item": "Plumbus"}
```

----------------------------------------

TITLE: Enum Class Creation for Path Parameters
DESCRIPTION: This example shows how to create an Enum class in Python for defining predefined values for path parameters in FastAPI.  It inherits from both `str` and `Enum` to ensure the API documentation correctly identifies the values as strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: python
CODE:
```
from enum import Enum


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"
```

----------------------------------------

TITLE: Dependency Injection in dependencies.py
DESCRIPTION: Defines a dependency function to read a custom X-Token header from the request. This dependency can be used in path operations to validate the token.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/bigger-applications.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def verify_token(x_token: str):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")


async def verify_key(x_key: str):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="Invalid X-Key header")
    return x_key
```

----------------------------------------

TITLE: Mixing Path and Query Parameters in FastAPI
DESCRIPTION: This snippet demonstrates how to use both path parameters (`item_id`) and query parameters (`q`) in the same FastAPI endpoint.  FastAPI automatically distinguishes between them based on the function signature.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str, q: Union[str, None] = None):
    if q:
        return {"item_id": item_id, "q": q}
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Optional Type Annotation
DESCRIPTION: This example shows how to use `Optional` to indicate that a variable can be either a specific type or `None`.  This allows for representing optional values, which is important for handling cases where a value might be missing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
"from typing import Optional

name: Optional[str] = None"
```

----------------------------------------

TITLE: Declaring Optional String with Pipe | (Python 3.10+)
DESCRIPTION: Illustrates the Python 3.10+ syntax for declaring a variable that can be a string or `None` using the pipe (`|`) operator, which is equivalent to `typing.Optional[str]` or `typing.Union[str, None]`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
{!> ../../docs_src/python_types/tutorial009_py310.py!}
```

----------------------------------------

TITLE: Generate Random Secret Key
DESCRIPTION: This command generates a random hexadecimal string of 32 bytes (256 bits) using OpenSSL, which can be used as a secret key for JWT token signing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: console
CODE:
```
$ openssl rand -hex 32

09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
```

----------------------------------------

TITLE: Adding Summary and Description to FastAPI Path Operation - Python
DESCRIPTION: This example demonstrates how to add a short summary and a detailed description to a path operation using the `summary` and `description` parameters in the decorator. This information is displayed in the OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post("/items/", summary="Create an item", description="Create an item with all the information, name, description, price, tax and so on.")
async def create_item(name: str):
    return {"name": name}

```

----------------------------------------

TITLE: Return Data from Path Operation
DESCRIPTION: You can return a dict, list, singular values like str, int, etc. You can also return Pydantic models. There are many other objects and models that will be automatically converted to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Run Docker Container from Image
DESCRIPTION: Command to create and start a Docker container from the 'myimage'. It runs in detached mode ('-d'), assigns the name 'mycontainer', and maps port 80 on the host machine to port 80 inside the container, making the application accessible.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_5

LANGUAGE: Console
CODE:
```
docker run -d --name mycontainer -p 80:80 myimage
```

----------------------------------------

TITLE: Running FastAPI App with Hypercorn
DESCRIPTION: This command runs the FastAPI application using Hypercorn, binding it to host 0.0.0.0 and port 80.  The --reload option should not be used in production.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/manually.md#_snippet_3

LANGUAGE: console
CODE:
```
$ hypercorn main:app --bind 0.0.0.0:80

Running on 0.0.0.0:8080 over http (CTRL + C to quit)
```

----------------------------------------

TITLE: Defining Path Parameter Metadata in FastAPI
DESCRIPTION: This snippet shows how to define metadata, such as `title`, for a path parameter using `Path` in FastAPI. The path parameter is always required and should be declared with `...` to indicate this.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"item_id: Annotated[int, Path(title=\"The ID of the item to get\")]"
```

----------------------------------------

TITLE: Declaring a Dictionary (Python 3.9+)
DESCRIPTION: This snippet demonstrates how to declare a dictionary with string keys and float values using Python 3.9+ syntax. The type hint `dict[str, float]` specifies that the keys are strings and the values are floats.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_9

LANGUAGE: Python
CODE:
```
prices: dict[str, float] = {"apple": 1.5, "banana": 0.75}
```

----------------------------------------

TITLE: Adding Custom Headers to HTTPException
DESCRIPTION: This code snippet demonstrates how to add custom headers to an HTTPException. It shows how to include additional information in the error response, such as security-related headers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/handling-errors.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, HTTPException

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id == "foo":
        raise HTTPException(status_code=418, detail="Nope! I don't like foo's", headers={"X-Error": "There goes my error"})
    return {"item": item_id}
```

----------------------------------------

TITLE: Relative Import of Routers
DESCRIPTION: This code snippet demonstrates how to import APIRouter instances from other submodules within the same package using relative imports. It imports the `items` and `users` routers from the `app.routers` package.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_12

LANGUAGE: Python
CODE:
```
from .routers import items, users
```

----------------------------------------

TITLE: Absolute Import of Routers
DESCRIPTION: This code snippet demonstrates how to import APIRouter instances from other submodules within the same package using absolute imports. It imports the `items` and `users` routers from the `app.routers` package.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_13

LANGUAGE: Python
CODE:
```
from app.routers import items, users
```

----------------------------------------

TITLE: Reading Custom Header Dependency (Python 3.8+)
DESCRIPTION: This code defines a dependency to read a custom `X-Token` header from the request. It raises an HTTP exception if the token is invalid.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import Header, HTTPException


async def verify_token(x_token: str = Header()):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")


async def verify_key(x_key: str = Header()):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="Invalid X-Key header")
    return x_key
```

----------------------------------------

TITLE: Adding dependencies to path operation decorator in FastAPI
DESCRIPTION: Demonstrates how to add a `dependencies` list to the path operation decorator using the `dependencies` parameter. The dependencies are executed or resolved the same way as regular dependencies but their return values are not passed to the path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"@app.get("/items/{item_id}", dependencies=[Depends(verify_token), Depends(verify_key)])
async def read_items(item_id: str):\n    return {"item_id": item_id}"
```

----------------------------------------

TITLE: Creating a Project Directory
DESCRIPTION: This snippet demonstrates how to create a project directory using command-line instructions. It involves navigating to the home directory, creating a 'code' directory, creating a project-specific directory, and entering that directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_0

LANGUAGE: console
CODE:
```
// Go to the home directory
$ cd
// Create a directory for all your code projects
$ mkdir code
// Enter into that code directory
$ cd code
// Create a directory for this project
$ mkdir awesome-project
// Enter into that project directory
$ cd awesome-project
```

----------------------------------------

TITLE: Including Router in Another Router
DESCRIPTION: This code snippet illustrates how to include one APIRouter within another. The other_router is included in the router, which ensures that endpoints defined in other_router are also accessible when the router is included in the main FastAPI app.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_20

LANGUAGE: Python
CODE:
```
router.include_router(other_router)
```

----------------------------------------

TITLE: Defining Python Types with Pydantic in FastAPI
DESCRIPTION: This code snippet demonstrates how to define standard Python types and Pydantic models in FastAPI. It shows a function with type hints and a Pydantic model definition with typed fields.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/features.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Configuring Swagger UI - Change Syntax Theme - Python
DESCRIPTION: Shows how to specify a different syntax highlighting theme for Swagger UI code examples. The `syntaxHighlight.theme` key is used within the `swagger_ui_parameters` dictionary passed during FastAPI application initialization, allowing customization of the code block appearance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/how-to/configure-swagger-ui.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(swagger_ui_parameters={"syntaxHighlight.theme": "obsidian"})
```

----------------------------------------

TITLE: Dockerfile for FastAPI Application
DESCRIPTION: This Dockerfile sets up a Python 3.9 environment, copies the application code and dependencies, installs the dependencies using pip, and defines the command to run the FastAPI application using Uvicorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Installing websockets package
DESCRIPTION: Install the `websockets` package using pip. This package is required to use WebSockets with FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/websockets.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install websockets
```

----------------------------------------

TITLE: Define Synchronous Path Operation Function in FastAPI
DESCRIPTION: This code snippet shows how to define a synchronous path operation function in FastAPI using `def`. This function will be called by FastAPI when it receives a GET request to the `/` URL. It returns a dictionary that will be automatically converted to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Using jsonable_encoder with JSONResponse in FastAPI
DESCRIPTION: This snippet demonstrates how to use the jsonable_encoder to convert a Pydantic model to a JSON-compatible dict before passing it to a JSONResponse in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-directly.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float

@app.post("/items")
def create_item(item: Item):
    json_compatible_item_data = jsonable_encoder(item)
    return JSONResponse(content=json_compatible_item_data)
```

----------------------------------------

TITLE: Asynchronous Function Definition in Python
DESCRIPTION: This code snippet demonstrates how to define an asynchronous function in Python using the `async def` syntax. The function `get_burgers` is marked as asynchronous, allowing it to use the `await` keyword inside. It takes an integer as input and returns burgers asynchronously.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/async.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
```Python hl_lines="1"
async def get_burgers(number: int):
    # burgerleri oluşturmak için asenkron birkaç iş
    return burgers
```
```

----------------------------------------

TITLE: Returning Custom XML Response in FastAPI
DESCRIPTION: This example shows how to return a custom XML response by creating the content as a string and wrapping it in a Response object with the appropriate media type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-directly.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import Response

app = FastAPI()

@app.get("/items/{item_id}")
def read_item(item_id: str):
    content = f"""<?xml version="1.0" encoding="UTF-8"?>
<item>
    <id>{item_id}</id>
    <value>Foo</value>
</item>
    """
    return Response(content=content, media_type="application/xml")
```

----------------------------------------

TITLE: Modifying Item Name to Item Price in FastAPI
DESCRIPTION: This code snippet shows how to change the return value of an item from item.name to item.price. This change will be reflected in the editor's auto-completion and type checking features.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/index.md#_snippet_9

LANGUAGE: Python
CODE:
```
... "item_name": item.name ...
```

----------------------------------------

TITLE: UploadFile with Additional Metadata in FastAPI
DESCRIPTION: This snippet shows how to use File() with UploadFile to define additional metadata for file uploads. It allows specifying extra parameters for the uploaded file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.post("/files/")
async def create_files(
    files: list[bytes] = File(),
):
    return {"file_sizes": [len(file) for file in files]}


@app.post("/uploadfiles/")
async def create_upload_files(
    files: list[UploadFile] = File(),
):
    return {"filenames": [file.filename for file in files]}
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code defines a basic FastAPI application with a single endpoint that returns a JSON response. It imports the FastAPI class, creates an instance of it, and defines a path operation for the root path ('/').
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Configuring OpenAPI URL in FastAPI
DESCRIPTION: This example demonstrates how to configure the OpenAPI URL in a FastAPI application using the `openapi_url` parameter.  By default, the OpenAPI schema is served at `/openapi.json`.  This example shows how to change it to `/api/v1/openapi.json`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/metadata.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
"""
from fastapi import FastAPI

app = FastAPI(openapi_url="/api/v1/openapi.json")


@app.get("/")
async def read_root():
    return {"Hello": "World"}
"""
```

----------------------------------------

TITLE: Adding Trusted Host Middleware in FastAPI - Python
DESCRIPTION: Configures the `TrustedHostMiddleware` in a FastAPI application. This middleware prevents HTTP Host header attacks by restricting incoming requests to a predefined list of allowed hostnames, specified in the `allowed_hosts` parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.trustedhost import TrustedHostMiddleware

app = FastAPI()

app.add_middleware(
    TrustedHostMiddleware, allowed_hosts=["example.com", "*.example.com"]
)
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code defines a basic FastAPI application with a single endpoint that returns a JSON response. It imports the FastAPI class, creates an instance of it, and defines a path operation decorator for the root endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Marking pytest Function for Asynchronous Execution
DESCRIPTION: The `@pytest.mark.anyio` decorator is applied to an `async def` test function to instruct pytest to run it asynchronously using the configured AnyIO backend. This is essential for writing tests that can use `await`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_3

LANGUAGE: python
CODE:
```
@pytest.mark.anyio
```

----------------------------------------

TITLE: Dataclasses in FastAPI response_model Parameter
DESCRIPTION: This snippet illustrates the use of dataclasses as response models in FastAPI. By passing a dataclass to the 'response_model' parameter, it is automatically converted to a Pydantic dataclass, enabling it to appear in the API documentation interface.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/dataclasses.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
{* ../../docs_src/dataclasses/tutorial002.py hl[1,7:13,19] *}
```

----------------------------------------

TITLE: Field Examples in Pydantic Models
DESCRIPTION: Declares examples for fields within a Pydantic model using the `Field` function. This allows providing example values for each field in the API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/schema-extra-example.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel, Field


class Item(BaseModel):
    name: str = Field(examples=["Foo"])
    description: Optional[str] = Field(default=None, examples=["A very nice Item"])
    price: float = Field(examples=[50.2])
    tax: Optional[float] = Field(default=None, examples=[3.2])
```

----------------------------------------

TITLE: List of Models as Request Body
DESCRIPTION: This code snippet shows how to define a request body as a list of Pydantic models. The `images` parameter is annotated as `List[Image]`, indicating that the request body should be a JSON array of `Image` objects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-nested-models.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import List

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str


async def create_images(images: List[Image]):
    return images
```

----------------------------------------

TITLE: Defining FastAPI App
DESCRIPTION: This snippet showcases the standard way to define a FastAPI application with a simple endpoint. It's the foundation for customizing the OpenAPI schema later on. The code defines a FastAPI app and a root endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/extending-openapi.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get("/")\nasync def read_root():\n    return {"Hello": "World"}"
```

----------------------------------------

TITLE: Change Syntax Highlighting Theme in Swagger UI with FastAPI
DESCRIPTION: This snippet shows how to change the syntax highlighting theme in Swagger UI by setting the `syntaxHighlight.theme` parameter in the `swagger_ui_parameters` dictionary. This allows customizing the color scheme used for displaying code examples in the Swagger UI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(swagger_ui_parameters={"syntaxHighlight.theme": "monokai"})
```

----------------------------------------

TITLE: Convertendo Modelo Pydantic para JSON Compatível em Python
DESCRIPTION: Este snippet demonstra como usar a função jsonable_encoder do FastAPI para converter um modelo Pydantic em um dicionário compatível com JSON. Ele também mostra como a função lida com a conversão de tipos complexos como datetime.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/encoder.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.encoders import jsonable_encoder

# Código omitido

fake_db[id] = jsonable_encoder(item)
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code defines a basic FastAPI application with a single endpoint that returns a JSON response. It imports FastAPI, creates an app instance, and defines a path operation decorator for the root endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: This command installs Uvicorn, an ASGI (Asynchronous Server Gateway Interface) server, using pip. Uvicorn is required to run FastAPI applications in production. The `[standard]` extra installs recommended dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/index.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Numeric Validation for Float Values
DESCRIPTION: Demonstrates numeric validation for float values, using gt and lt constraints to specify an acceptable range with decimal precision.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Path, Query
from typing import Annotated

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(
    *,
    item_id: Annotated[int, Path(title="The ID of the item to get", ge=0, le=1000)],
    q: str,
    size: Annotated[float, Query(gt=0, lt=10.5)],
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results

```

----------------------------------------

TITLE: Install Passlib with Bcrypt support using pip
DESCRIPTION: This command installs the Passlib library along with the Bcrypt hashing algorithm. Passlib is used for securely hashing and verifying passwords, and Bcrypt is a recommended algorithm for password security.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/oauth2-jwt.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "passlib[bcrypt]"

---> 100%
```

----------------------------------------

TITLE: Declaring OAuth2 Security Scheme with Scopes in Python
DESCRIPTION: This snippet shows how to declare an OAuth2 security scheme with two scopes: 'me' and 'items'. The scopes are defined as a dictionary with scope names as keys and descriptions as values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl="token",
    scopes={"me": "Read information about the current user.", "items": "Read items."}
)
```

----------------------------------------

TITLE: Mounting WSGI Application with WSGIMiddleware in FastAPI
DESCRIPTION: Demonstrates how to wrap a WSGI application (Flask) and mount it under a specific path in a FastAPI application using WSGIMiddleware
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/wsgi.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.wsgi import WSGIMiddleware
from flask import Flask

flask_app = Flask(__name__)
@flask_app.route("/")
def hello_flask():
    return "Hello, World from Flask!"

app = FastAPI()
app.mount("/v1", WSGIMiddleware(flask_app))

@app.get("/v2")
def hello_fastapi():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Required Query Parameter using Ellipsis
DESCRIPTION: This snippet defines a required query parameter `q` using the `Query` class and the ellipsis (`...`) as the default value. This indicates that the parameter is mandatory and must be provided in the request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: str = Query(..., min_length=3)):
    return {"q": q}
```

----------------------------------------

TITLE: Verifying Active Python Virtual Environment in Linux/macOS/Windows Bash
DESCRIPTION: Shows how to use the 'which python' command to verify that the active Python interpreter is from the desired virtual environment. The output path should point to the Python executable within your project's virtual environment directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_20

LANGUAGE: console
CODE:
```
$ which python

/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Basic FastAPI Application
DESCRIPTION: This code snippet defines a simple FastAPI application with a single endpoint that returns a JSON response. It imports the FastAPI class, creates an instance of it, and defines a path operation function that returns a dictionary.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: Creating Database Tables on Application Startup
DESCRIPTION: This snippet demonstrates how to create database tables when the FastAPI application starts up, utilizing an event handler. It's an alternative to using database migration scripts in a production environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.on_event("startup")
def on_startup():
    create_db_and_tables()
```

----------------------------------------

TITLE: Using ORJSONResponse for Performance
DESCRIPTION: Demonstrates how to use ORJSONResponse for faster JSON serialization with FastAPI. This approach bypasses default JSON encoding overhead and provides improved performance for large responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()

@app.get("/items/", response_class=ORJSONResponse)
def read_items():
    return {"item_id": "foo"}
```

----------------------------------------

TITLE: Set Field Declaration
DESCRIPTION: This code snippet demonstrates how to declare a set field in a Pydantic model. The `tags` attribute is defined as a `set` of strings, ensuring that the elements are unique.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-nested-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: set[str] = set()
```

----------------------------------------

TITLE: Defining Nested Pydantic Models for FastAPI
DESCRIPTION: This example illustrates how to create nested Pydantic models to represent complex JSON objects in FastAPI, including the use of the HttpUrl type for URL validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()
    image: Image | None = None
```

----------------------------------------

TITLE: Defining a GET Path Operation with FastAPI
DESCRIPTION: This code snippet demonstrates how to define a GET path operation in FastAPI using the `@app.get()` decorator. It associates the function `root` with the `/` path and the GET HTTP method, allowing FastAPI to handle requests to that endpoint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Returning Response Objects with Headers Directly in FastAPI (Python)
DESCRIPTION: Demonstrates how to add headers when returning a Response object directly in FastAPI. This approach allows setting headers as an additional parameter when creating the response object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/response-headers.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()


@app.get("/headers/")
def get_headers():
    content = {"message": "Hello World"}
    headers = {"X-Cat-Dog": "alone in the world", "Content-Language": "en-US"}
    return JSONResponse(content=content, headers=headers)
```

----------------------------------------

TITLE: Pydantic Schema Extra Configuration with Config
DESCRIPTION: Demonstrates how to add extra schema information using Pydantic's Config and schema_extra, allowing additional metadata to be directly output in JSON Schema
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/schema-extra-example.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None

    class Config:
        schema_extra = {
            "example": {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2
            }
        }
```

----------------------------------------

TITLE: Installing FastAPI with standard extras using pip
DESCRIPTION: This command demonstrates how to install FastAPI with the 'standard' extras using pip.  It downloads and installs FastAPI and its dependencies into the current environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_19

LANGUAGE: console
CODE:
```
// Đừng chạy lệnh này ngay, đây chỉ là một ví dụ 🤓
$ pip install "fastapi[standard]"
---> 100%
```

----------------------------------------

TITLE: Default Response Class in FastAPI
DESCRIPTION: Shows how to set a default response class for all route operations in a FastAPI application using the `default_response_class` parameter when creating a FastAPI instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_15

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI(default_response_class=ORJSONResponse)


@app.get("/")
async def read_main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Add .gitignore file to exclude .venv directory
DESCRIPTION: This command creates a .gitignore file within the .venv directory, instructing Git to ignore all files and directories within the virtual environment. This prevents virtual environment files from being tracked in the Git repository.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_9

LANGUAGE: bash
CODE:
```
echo "*" > .venv/.gitignore
```

----------------------------------------

TITLE: JSON Response with root_path (Revisited)
DESCRIPTION: This JSON response is the same as the first one, showing the structure of the response when accessing the application. The `message` field contains a greeting, and the `root_path` field indicates the path prefix configured for the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_10

LANGUAGE: JSON
CODE:
```
{
    "message": "Hello World",
    "root_path": "/api/v1"
}
```

----------------------------------------

TITLE: Defining Python Types and Pydantic Models in FastAPI
DESCRIPTION: Demonstrates how to use Python type hints and Pydantic models in FastAPI applications. It shows type hinting for function parameters and defining a Pydantic model for user data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/features.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Using UJSONResponse for JSON Serialization in FastAPI
DESCRIPTION: Shows how to use UJSONResponse as an alternative JSON serializer in FastAPI that leverages the ujson library for potentially faster processing.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import UJSONResponse

app = FastAPI()


@app.get("/items/", response_class=UJSONResponse)
async def read_items():
    return {"item_id": "Foo"}
```

----------------------------------------

TITLE: Implementing Custom GzipRequest Class in Python
DESCRIPTION: Creates a custom GzipRequest class that extends the base Request class to handle gzipped request bodies. It overrides the body() method to decompress gzipped content if present.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class GzipRequest(Request):
    async def body(self) -> bytes:
        if not hasattr(self, "_body"):
            body = await super().body()
            if "gzip" in self.headers.getlist("Content-Encoding"):
                body = gzip.decompress(body)
            self._body = body
        return self._body
```

----------------------------------------

TITLE: Function with Type Annotations and Error
DESCRIPTION: This code shows an example function with type annotations and an error. The editor can detect the type mismatch, providing assistance to the developer. This code highlights the benefits of type annotations for error detection.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"def get_name_with_age(name: str, age: int):
    name_with_age = name + " is this old: " + age
    return name_with_age"
```

----------------------------------------

TITLE: 타입 힌트를 이용한 오류 검출 예제
DESCRIPTION: 이 함수는 `name`과 `age`를 입력받아 문자열을 반환합니다. `age`에 타입 힌트가 적용되어 있어 편집기에서 오류를 확인할 수 있습니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/python-types.md#_snippet_2

LANGUAGE: python
CODE:
```
def create_item(name: str, age: int):
    return {"name": name, "age": age}
```

----------------------------------------

TITLE: Run pytest Tests
DESCRIPTION: This command executes pytest, which automatically discovers and runs tests (functions starting with 'test_') in your project files. The output shows the test collection process and the results of running the tests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/testing.md#_snippet_2

LANGUAGE: console
CODE:
```
pytest
```

----------------------------------------

TITLE: Defining a Synchronous Function with def in Python
DESCRIPTION: Shows how to declare a standard synchronous function using `def`. This function will block execution until it completes and cannot use the `await` keyword internally.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/async.md#_snippet_2

LANGUAGE: Python
CODE:
```
# This is not asynchronous
def get_sequential_burgers(number: int):
    # Do some sequential stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Basic Dockerfile for FastAPI
DESCRIPTION: This Dockerfile sets up a basic environment for running a FastAPI application using the tiangolo/uvicorn-gunicorn-fastapi base image. It copies the requirements file, installs dependencies, and then copies the application code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_18

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Docker Run Command
DESCRIPTION: Terminal command for running a Docker container with port mapping
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
docker run -d --name mycontainer -p 80:80 myimage
```

----------------------------------------

TITLE: Returning a Dictionary as a Dependency in FastAPI
DESCRIPTION: This snippet showcases a simple dependency that returns a dictionary.  It demonstrates a basic example where a function serves as a dependency, providing a dictionary with predefined values. The problem is that editors are not able to provide much support for dict key and value types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"""
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


async def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
"""
```

----------------------------------------

TITLE: Defining a Shutdown Event Handler in FastAPI (Python)
DESCRIPTION: This snippet shows how to create a shutdown event handler function in FastAPI. The function is decorated with @app.on_event("shutdown") and will be executed when the application is shutting down.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/events.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.on_event("shutdown")
def shutdown_event():
    with open("log.txt", mode="a") as log:
        log.write("Application shutdown")
```

----------------------------------------

TITLE: Multiple File Uploads with Additional Metadata
DESCRIPTION: Shows how to handle multiple file uploads while specifying additional metadata parameters for each file in the list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
async def create_upload_files(
    files: list[UploadFile] = File(
        description="Multiple files as UploadFile",
    ),
):
```

----------------------------------------

TITLE: Declaring User Model with Pydantic and Type Annotations
DESCRIPTION: Demonstrates how to create a Pydantic model with type-annotated fields using standard Python types and date handling
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/features.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Объявляем параметр user_id с типом `str`
# и получаем поддержку редактора внутри функции
def main(user_id: str):
    return user_id


# Модель Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: 구니콘 워커 클래스 import
DESCRIPTION: 구니콘에서 사용할 수 있는 유비콘 워커 클래스를 import하는 방법을 보여줍니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/server-workers.md#_snippet_3

LANGUAGE: python
CODE:
```
import uvicorn.workers.UvicornWorker
```

----------------------------------------

TITLE: Running Uvicorn Behind TLS Termination Proxy in Dockerfile
DESCRIPTION: This command configures Uvicorn to run behind a TLS termination proxy, trusting the headers sent by the proxy and assuming the application is running under HTTPS.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_1

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--proxy-headers", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Incorrect Usage of Async Function
DESCRIPTION: This code snippet shows an example of how not to call an async function.  Calling an async function without 'await' will not work as expected.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/async.md#_snippet_5

LANGUAGE: Python
CODE:
```
# Это не заработает, поскольку get_burgers объявлена с использованием async def
burgers = get_burgers(2)
```

----------------------------------------

TITLE: Creating a virtual environment with uv
DESCRIPTION: This command creates a virtual environment using the `uv` tool. By default, `uv` creates the environment in a directory called `.venv`. Alternatively a directory name can be specified.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_2

LANGUAGE: Shell
CODE:
```
```console
$ uv venv
```
```

----------------------------------------

TITLE: Adding Trusted Host Middleware
DESCRIPTION: Implements the TrustedHostMiddleware to protect against HTTP Host Header attacks by validating the Host header against a list of allowed domain names. Requests with invalid hosts receive a 400 response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/middleware.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.trustedhost import TrustedHostMiddleware

app = FastAPI()

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["example.com", "*.example.com"]
)
```

----------------------------------------

TITLE: ReDoc HTML Generation Function in FastAPI
DESCRIPTION: Function to generate ReDoc HTML documentation page from OpenAPI specifications. Provides alternative documentation interface to Swagger UI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/openapi/docs.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
get_redoc_html
```

----------------------------------------

TITLE: Deactivating Virtual Environment
DESCRIPTION: Command to deactivate the current virtual environment and return to the global Python installation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_15

LANGUAGE: bash
CODE:
```
$ deactivate
```

----------------------------------------

TITLE: Updating FastAPI App with PUT Request
DESCRIPTION: Update the FastAPI application to handle a PUT request with a request body. Defines an `Item` model using Pydantic to specify the structure of the request body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Activating a Python Virtual Environment
DESCRIPTION: This command activates a Python virtual environment. It modifies the shell's environment variables to ensure that the Python executable and packages within the virtual environment are used. The input is the path to the `activate` script within the virtual environment directory. The output is the modified shell environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
"$ source .venv/bin/activate"
```

----------------------------------------

TITLE: Including Routers in FastAPI App
DESCRIPTION: This code snippet shows how to include routers from the `users` and `items` sub-modules into the main FastAPI application using `app.include_router()`. It connects all routes defined in the routers to the main application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_17

LANGUAGE: Python
CODE:
```
app.include_router(users.router)
app.include_router(items.router)
```

----------------------------------------

TITLE: Creating a Pydantic User Model and OAuth2 Dependency in FastAPI
DESCRIPTION: This snippet showcases the creation of a Pydantic user model with `username`, `email`, and `full_name` fields.  It also initializes the `OAuth2PasswordBearer` scheme to handle token-based authentication. The user model is a standard way to represent user data in the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"from typing import Optional

from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer
from pydantic import BaseModel


class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None


app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


"
```

----------------------------------------

TITLE: Running Python Script with Environment Variable (Linux, macOS, Windows Bash)
DESCRIPTION: This snippet demonstrates how to run the Python script main.py with and without the MY_NAME environment variable set. It shows how the script uses the default value when the environment variable is not set and how it reads the environment variable when it is set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/environment-variables.md#_snippet_3

LANGUAGE: Shell
CODE:
```
// Здесь мы еще не устанавливаем переменную окружения
$ python main.py

// Поскольку мы не задали переменную окружения, мы получим значение по умолчанию

Hello World from Python

// Но если мы сначала создадим переменную окружения
$ export MY_NAME="Wade Wilson"

// А затем снова запустим программу
$ python main.py

// Теперь она прочитает переменную окружения

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Requirements file example
DESCRIPTION: Example of a requirements.txt file specifying the versions of FastAPI, Pydantic, and Uvicorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_3

LANGUAGE: Text
CODE:
```
fastapi>=0.68.0,<0.69.0
pydantic>=1.8.0,<2.0.0
uvicorn>=0.15.0,<0.16.0
```

----------------------------------------

TITLE: HTTPException 404 JSON Response Example
DESCRIPTION: This is an example of the JSON response a client receives when a request to `/items/{item_id}` fails because the item is not found (e.g., for `item_id` "bar"), along with a 404 HTTP status code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "detail": "Item not found"
}
```

----------------------------------------

TITLE: Returning Data from Path Operation
DESCRIPTION: Demonstrates how to return a dictionary from a path operation function. FastAPI automatically converts this dictionary into a JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Uvicorn Command with Root Path
DESCRIPTION: Shows how to start the Uvicorn server with the `--root-path` option. This option sets the root path for the application, which is used when the application is behind a proxy.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_2

LANGUAGE: Console
CODE:
```
$ uvicorn main:app --root-path /api/v1

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)

```

----------------------------------------

TITLE: Adding Custom Tags and Responses
DESCRIPTION: Demonstrates how to add custom tags and responses to specific endpoints using APIRouter in FastAPI. It shows how to define additional tags and responses for an endpoint, which are merged with the router-level configurations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_11

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/routers/items.py!}
```

----------------------------------------

TITLE: Union Type Hinting (Python 3.10+)
DESCRIPTION: Shows how to use the union operator `|` in Python 3.10+ as a shorthand for `Union[Type, None]`, indicating that a variable can be of a specific type or `None`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_14

LANGUAGE: Python
CODE:
```
name: str | None = 'Foo'
```

----------------------------------------

TITLE: Changing Syntax Highlighting Theme in Swagger UI with FastAPI
DESCRIPTION: Code snippet demonstrating how to change the syntax highlighting theme in Swagger UI by configuring the syntaxHighlight.theme parameter when initializing a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
app = FastAPI(
    swagger_ui_parameters={"syntaxHighlight.theme": "agate"}
)
```

----------------------------------------

TITLE: Combining Required, Default, and Optional Query Parameters in FastAPI
DESCRIPTION: This code snippet shows how to define a combination of required, default, and optional query parameters in a FastAPI endpoint. 'needy' is a required string, 'skip' is an integer with a default value of 0, and 'limit' is an optional integer.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/query-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(
    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None
):
    item = {"item_id": item_id, "needy": needy, "skip": skip, "limit": limit}
    return item
```

----------------------------------------

TITLE: Опціональне Завантаження Файлів у FastAPI
DESCRIPTION: Демонструє, як зробити завантаження файлу необов'язковим у FastAPI, використовуючи анотації типів та значення за замовчуванням None.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-files.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.post("/uploadfiles/")
async def create_upload_files(
    files: list[bytes] = File(default=None),
):
    if files:
        return {"filenames": [file.filename for file in files]}
    else:
        return {"message": "No files uploaded"}


@app.post("/uploadfile/")
async def create_upload_file(
    file: UploadFile | None = None,
):
    if not file:
        return {"message": "No upload file sent"}
    else:
        return {"filename": file.filename}
```

----------------------------------------

TITLE: Declare List with Type Parameter
DESCRIPTION: Shows the standard Python syntax for declaring a variable as a list containing elements of a specific type using `typing.List` and square brackets.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import List

my_list: List[str]
```

----------------------------------------

TITLE: Dict 타입 힌트 예제
DESCRIPTION: 이 예제는 `dict`에 대한 타입 힌트를 선언하는 방법을 보여줍니다. `typing` 모듈을 사용하여 키와 값의 타입을 지정할 수 있습니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/python-types.md#_snippet_7

LANGUAGE: python
CODE:
```
from typing import Dict
```

LANGUAGE: python
CODE:
```
prices: Dict[str, float]
```

----------------------------------------

TITLE: Numeric Validations (GT, LE) on Path Parameter (Python)
DESCRIPTION: Defines a path operation with a path parameter `item_id` using `Path`. It applies validations requiring the value to be greater than 0 (`gt=0`) and less than or equal to 5 (`le=5`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_5

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(item_id: int = Path(gt=0, le=5)): pass
```

----------------------------------------

TITLE: Activating a Virtual Environment (Windows Bash)
DESCRIPTION: This snippet shows how to activate a virtual environment when using Bash on Windows (e.g., Git Bash). It uses the `source` command to execute the `activate` script located in the `.venv/Scripts` directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_5

LANGUAGE: console
CODE:
```
$ source .venv/Scripts/activate
```

----------------------------------------

TITLE: Defining a GET Path Operation Decorator
DESCRIPTION: Defines a path operation using the `@app.get()` decorator, associating a function with the `/` path and the HTTP GET method. This tells FastAPI that the function below should handle requests to the specified path using the GET method.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Defining a Sub-Model
DESCRIPTION: This code snippet defines a Pydantic sub-model named `Image` with `url` and `name` attributes. This model can be used as a type for other model attributes, enabling nested data structures.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-nested-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str
```

----------------------------------------

TITLE: Setting root_path Parameter in FastAPI Application
DESCRIPTION: A FastAPI application that directly sets the root_path parameter during initialization, which serves the same purpose as using the --root-path command line option with Uvicorn or Hypercorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request

app = FastAPI(root_path="/api/v1")


@app.get("/app")
async def read_main(request: Request):
    return {"message": "Hello World", "root_path": request.scope.get("root_path")}

```

----------------------------------------

TITLE: Configuring Swagger UI and Disabling ReDoc in FastAPI
DESCRIPTION: This code snippet shows how to configure the Swagger UI URL using the `docs_url` parameter and disable ReDoc by setting `redoc_url` to `None` in a FastAPI application. Swagger UI is served at `/documentation`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/metadata.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(docs_url="/documentation", redoc_url=None)
```

----------------------------------------

TITLE: Creando y Utilizando una Instancia de Dependencia Parametrizable en FastAPI
DESCRIPTION: Crea una instancia de FixedContentQueryChecker y la utiliza como dependencia en una ruta de FastAPI. La dependencia verifica si el parámetro de consulta 'q' contiene el contenido fijo especificado.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/advanced-dependencies.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
checker = FixedContentQueryChecker("bar")

@app.get("/query-checker/")
async def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
    return {"fixed_content_in_query": fixed_content_included}
```

----------------------------------------

TITLE: Adding Response Description in FastAPI Path Operation - Python
DESCRIPTION: This example shows how to add a specific description for the expected response of a path operation using the `response_description` parameter. This clarifies what the client should expect to receive.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post("/items/", response_description="The created item")
async def create_item(name: str):
    return {"name": name}

```

----------------------------------------

TITLE: Query Parameter with List Default Value
DESCRIPTION: This snippet shows how to define a query parameter that accepts a list of strings with a default value. If no parameter is provided, the default list will be used.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
from typing import List

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: List[str] = Query(default=["foo", "bar"])):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Configuring Conditional OpenAPI URL in FastAPI (Python)
DESCRIPTION: This snippet shows how to use Pydantic BaseSettings to define a configurable OpenAPI URL. It allows disabling the OpenAPI documentation by setting an environment variable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/conditional-openapi.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from pydantic import BaseSettings


class Settings(BaseSettings):
    openapi_url: str = "/openapi.json"


settings = Settings()

app = FastAPI(openapi_url=settings.openapi_url)

```

----------------------------------------

TITLE: Adding HTTPS Redirect Middleware in FastAPI - Python
DESCRIPTION: Adds the built-in `HTTPSRedirectMiddleware` to a FastAPI application. This middleware forces all incoming HTTP or WS requests to redirect to their HTTPS or WSS equivalents, enhancing security by ensuring encrypted connections.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)
```

----------------------------------------

TITLE: Defining Function With Basic Type Hints - Python
DESCRIPTION: This snippet demonstrates adding basic type hints to function parameters. By specifying `: str` for `first_name` and `last_name`, editors and tools can offer better autocompletion and type checking support.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Using jsonable_encoder in FastAPI (Python)
DESCRIPTION: This code snippet demonstrates how to use the jsonable_encoder function to convert a Pydantic model to a JSON-compatible format. It includes the import statement and an example of encoding a fake_db_item.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/encoder.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.encoders import jsonable_encoder

# ... (other code)

fake_db_item = jsonable_encoder(item)
```

----------------------------------------

TITLE: Asynchronous test example with pytest and HTTPX
DESCRIPTION: This code snippet represents an asynchronous test example for a FastAPI application. It likely uses pytest with AnyIO and HTTPX to perform asynchronous requests and assertions.  The tests likely interact with the application defined in `main.py`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/async-tests.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"{* ../../docs_src/async_tests/test_main.py *}"
```

----------------------------------------

TITLE: Reading File with Context Manager in Python
DESCRIPTION: This code snippet demonstrates how to read a file using a context manager in Python. The `with` statement ensures that the file is properly closed after it is used, even if exceptions occur.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_6

LANGUAGE: Python
CODE:
```
with open("./somefile.txt") as f:
    contents = f.read()
    print(contents)
```

----------------------------------------

TITLE: Implementing User Authentication Function in Python
DESCRIPTION: This code defines a fake_decode_token function to simulate token decoding and user retrieval, and a get_current_user dependency that uses the OAuth2 scheme to authenticate users.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def fake_decode_token(token):
    return User(
        username=token + "fakedecoded", email="john@example.com", full_name="John Doe"
    )

async def get_current_user(token: str = Depends(oauth2_scheme)):
    user = fake_decode_token(token)
    return user
```

----------------------------------------

TITLE: Initializing a Dictionary - Python 3.8+
DESCRIPTION: This snippet initializes a dictionary `prices` where keys are strings and values are floats. It uses the `Dict` type from the `typing` module to specify the key and value types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import Dict

prices: Dict[str, float] = {"apple": 1.5, "banana": 0.7}
```

----------------------------------------

TITLE: Creating a FastAPI Instance with a Custom Name
DESCRIPTION: This code snippet shows how to create an instance of the FastAPI class and assign it to a variable named `my_awesome_api`. This instance is used to define the API endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

my_awesome_api = FastAPI()

@my_awesome_api.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Importing Query from FastAPI
DESCRIPTION: This snippet demonstrates how to import the `Query` class from the `fastapi` module.  The `Query` class is used to add validations and metadata to query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Pinning Specific FastAPI Version (requirements.txt)
DESCRIPTION: Specifies an exact version of the FastAPI library to be installed. This ensures that your application always uses the tested version, preventing unexpected changes from newer releases.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/versions.md#_snippet_0

LANGUAGE: Requirements File Format
CODE:
```
fastapi==0.45.0
```

----------------------------------------

TITLE: Declaring Required Path and Query Parameters (Python)
DESCRIPTION: Defines a path operation (`read_items`) with a required path parameter `item_id` using `Path(...)` and a required query parameter `q` using `Query(...)`. Using `...` explicitly marks the parameter as required.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(item_id: int = Path(...),
    q: str = Query(...)): pass
```

----------------------------------------

TITLE: Override Deep Linking in Swagger UI with FastAPI
DESCRIPTION: This snippet demonstrates how to override the default `deepLinking` setting in Swagger UI by setting it to `False` in the `swagger_ui_parameters` dictionary when creating a FastAPI app. This allows disabling deep linking functionality within the Swagger UI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(swagger_ui_parameters={"deepLinking": False})
```

----------------------------------------

TITLE: Импорт Form из FastAPI (Python)
DESCRIPTION: Этот фрагмент кода демонстрирует, как импортировать класс `Form` из библиотеки `fastapi`, который используется для обработки данных, отправленных в виде полей формы в операциях пути.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/request-forms.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Form
```

----------------------------------------

TITLE: Dockerfile for Larger FastAPI Application
DESCRIPTION: This Dockerfile is tailored for larger FastAPI applications with a specific directory structure. It copies the requirements file, installs dependencies, and then copies the application code from a subdirectory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_19

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app/app
```

----------------------------------------

TITLE: Defining an Async Path Operation Function in FastAPI
DESCRIPTION: Demonstrates how to create an asynchronous path operation function in FastAPI that awaits a third-party library response. This allows FastAPI to handle other requests while waiting for the library to respond.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/async.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Disable Automatic Documentation in FastAPI
DESCRIPTION: This snippet disables the automatic Swagger UI and ReDoc documentation by setting their respective URLs to None when creating the FastAPI application. This is a prerequisite for using custom CDNs or self-hosting static files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-docs-ui-assets.md#_snippet_0

LANGUAGE: Python
CODE:
```
app = FastAPI(
    openapi_url=None,
)
```

----------------------------------------

TITLE: Query Parameter List with Default Values
DESCRIPTION: This snippet shows how to define a query parameter that accepts a list of values and also provides a default list if no values are provided in the request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import List, Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: List[str] = Query(["foo", "bar"])):
    return {"q": q}
```

----------------------------------------

TITLE: Path Parameter Redefinition Prevention in FastAPI (Python)
DESCRIPTION: This snippet shows that path operations cannot be redefined in FastAPI. The first definition will always be used because its path matches first.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Implementing Dependency without Annotations - Python
DESCRIPTION: Alternative implementation of dependency with cache control using Python 3.8+ syntax without Annotated type hints. Shows how to directly use Depends in the parameter default value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
async def needy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):
    return {"fresh_value": fresh_value}
```

----------------------------------------

TITLE: OpenAPI Schema with root_path Server Configuration
DESCRIPTION: An example of OpenAPI JSON schema showing how FastAPI adds a server using the root_path value at the beginning of the servers list. This is the structure generated for the OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
    "openapi": "3.0.2",
    // More stuff here
    "servers": [
        {
            "url": "/api/v1"
        }
    ],
    "paths": {
            // More stuff here
    }
}
```

----------------------------------------

TITLE: Завантаження Кількох Файлів у FastAPI
DESCRIPTION: Демонструє, як завантажувати кілька файлів одночасно у FastAPI, оголошуючи список bytes або UploadFile.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-files.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.post("/uploadfiles/")
async def create_upload_files(
    files: list[bytes] = File(),
):
    return {"file_sizes": [len(file) for file in files]}


@app.post("/uploadfiles/")
async def create_upload_files(
    files: list[UploadFile],
):
    return {"filenames": [file.filename for file in files]}
```

----------------------------------------

TITLE: Defining an Asynchronous Path Operation Function
DESCRIPTION: Defines an asynchronous path operation function named `root` that returns a dictionary containing a message. This function is decorated with `@app.get("/")`, making it the handler for GET requests to the root path `/`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Required Query Parameter Using Ellipsis
DESCRIPTION: Declares a required query parameter `q` using `Query` and the ellipsis (`...`) as the default value. This forces the client to provide a value for the parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: str = Query(default=..., min_length=3)):
    return {"q": q}
```

----------------------------------------

TITLE: Creating a Basic FastAPI Application for Testing
DESCRIPTION: This code snippet shows a simple FastAPI application with a root endpoint that returns JSON data. This serves as the application to be tested with async tests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/async-tests.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_main():
    return {"msg": "Hello World"}
```

----------------------------------------

TITLE: Complex Path Parameter with Enum Type
DESCRIPTION: Demonstrates creating predefined path parameters using Python's Enum class with advanced type checking and value management
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from enum import Enum
from fastapi import FastAPI

class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"

app = FastAPI()

@app.get("/models/{model_name}")
def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}
```

----------------------------------------

TITLE: Excluding Path Operations from OpenAPI Schema in FastAPI
DESCRIPTION: This snippet shows how to exclude a path operation from the OpenAPI schema by using the `include_in_schema` parameter set to False. This is useful when you want to hide specific operations from automatic documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
path_operation_function(include_in_schema=False)
```

----------------------------------------

TITLE: Defining a Child Model in Pydantic
DESCRIPTION: Defines a Pydantic model named `Image` with `url` and `name` attributes. This model can be used as a type for other Pydantic models, enabling nested data structures.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-nested-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str
```

----------------------------------------

TITLE: Creating a Pydantic Model for Request Body Validation
DESCRIPTION: Demonstrates how to create a Pydantic model by inheriting from BaseModel and defining class attributes with standard Python types to validate incoming JSON data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
```

----------------------------------------

TITLE: Function With Type Hints and Type Checking - Python
DESCRIPTION: Demonstrates a function with type hints (`: int`, `: str`) and shows how editors can use these hints to identify potential type errors, like trying to concatenate an integer directly with a string.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_3

LANGUAGE: Python
CODE:
```
def get_name_and_age(name: str, age: int):
    name_and_age = name + " is " + age
    return name_and_age
```

LANGUAGE: Python
CODE:
```
def get_name_and_age(name: str, age: int):
    name_and_age = name + " is " + str(age)
    return name_and_age
```

----------------------------------------

TITLE: Adding Third-Party Middleware to FastAPI App - Python
DESCRIPTION: Shows the recommended method for adding middleware to a FastAPI (or Starlette) application using the `app.add_middleware()` helper. This method ensures the middleware is integrated correctly within the framework's lifecycle.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from unicorn import UnicornMiddleware

app = FastAPI()

app.add_middleware(UnicornMiddleware, some_config="rainbow")
```

----------------------------------------

TITLE: Defining a Set Field
DESCRIPTION: Demonstrates how to define a set field in a Pydantic model. Sets are used to store unique elements. The `tags` attribute is defined as a set of strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-nested-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: set[str] = set()
```

----------------------------------------

TITLE: Creating Deeply Nested Model Structures
DESCRIPTION: Definition of complex nested model relationships with multiple levels of hierarchy for representing complex JSON structures.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
class Image:
    url: str
    name: str


class Item:
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: set[str] = set()
    images: list[Image] | None = None


class Offer:
    name: str
    description: str | None = None
    price: float
    items: list[Item]
```

----------------------------------------

TITLE: Creating a FastAPI Application with Async Routes
DESCRIPTION: Shows how to create a FastAPI application using async/await syntax for asynchronous route handlers, demonstrating modern Python concurrency patterns.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/index.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Using Class Dependency in FastAPI Path Operation Function
DESCRIPTION: This code demonstrates how to use the 'CommonQueryParams' class as a dependency in a FastAPI path operation function. It shows both the full syntax and a shortcut provided by FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
async def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):
    return {"message": "Hello World", "params": commons}
```

----------------------------------------

TITLE: Importing Depends for Dependency Injection in FastAPI (Python)
DESCRIPTION: This line imports the `Depends` class from the `fastapi` library. `Depends` is used within route operation function parameters to declare that the function depends on the result of another function or "injectable".
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends
```

----------------------------------------

TITLE: Starting Uvicorn with root-path
DESCRIPTION: This console command starts the Uvicorn server with the `--root-path` option set to `/api/v1`. This tells Uvicorn to serve the application under the specified path prefix.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_9

LANGUAGE: Console
CODE:
```
$ uvicorn main:app --root-path /api/v1

<span style="color: green;">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Using OAuth2 Scheme as Dependency
DESCRIPTION: This code snippet shows how to use the oauth2_scheme as a dependency in a FastAPI endpoint. The token is automatically extracted from the Authorization header and passed to the endpoint function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}
```

----------------------------------------

TITLE: Adding Dependencies to FastAPI Route Decorator in Python
DESCRIPTION: This snippet demonstrates how to add dependencies to a FastAPI route decorator using the 'dependencies' argument. It includes examples of dependencies that check headers and raise exceptions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async def read_items():
    return [{"item": "Foo"}, {"item": "Bar"}]
```

LANGUAGE: python
CODE:
```
async def verify_token(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")


async def verify_key(x_key: str = Header(...)):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key
```

----------------------------------------

TITLE: Absolute Import Example in Python
DESCRIPTION: This code snippet demonstrates an absolute import in Python, importing sub-modules `items` and `users` from the `app.routers` package. It provides an alternative way to import routers defined in separate files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_15

LANGUAGE: Python
CODE:
```
from app.routers import items, users
```

----------------------------------------

TITLE: Using Pydantic Models in FastAPI
DESCRIPTION: Shows how to create and use Pydantic model instances in FastAPI. It demonstrates direct instantiation and creation from a dictionary of data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/features.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Setting and Using Environment Variables (PowerShell)
DESCRIPTION: This snippet demonstrates how to set an environment variable named `MY_NAME` to the value "Wade Wilson" using PowerShell. It then shows how to access this variable using `echo` to print a greeting.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/environment-variables.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ $Env:MY_NAME = "Wade Wilson"
$ echo "Hello $Env:MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Returning PlainTextResponse in FastAPI
DESCRIPTION: Demonstrates how to return a PlainTextResponse from a FastAPI endpoint. This is useful for returning plain text data without any HTML formatting.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_5

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()


@app.get("/", response_class=PlainTextResponse)
async def read_items():
    return "Hello World"

```

----------------------------------------

TITLE: Basic FastAPI test with TestClient
DESCRIPTION: Demonstrates how to import TestClient, create an instance with your FastAPI app, and write a simple test function using pytest.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}


client = TestClient(app)


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}
```

----------------------------------------

TITLE: Defining a Sub-Model
DESCRIPTION: Defines a Pydantic sub-model named `Image` with `url` and `name` attributes. This model can be used as a type for other model attributes, enabling nested data structures.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-nested-models.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str
```

----------------------------------------

TITLE: Path Parameter Containing Paths
DESCRIPTION: This example demonstrates how to declare a path parameter that can contain a path itself, using the `:path` converter. This allows you to capture a full file path in a single parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_9

LANGUAGE: python
CODE:
```
@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
    return {"file_path": file_path}
```

----------------------------------------

TITLE: Defining File Parameter (Bytes) in FastAPI
DESCRIPTION: Shows how to define a path operation parameter using `File` to receive the file content directly as bytes. Suitable for small files. Requires `python-multipart`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/request-files.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, File

app = FastAPI()

@app.post("/uploadfile/")
async def create_upload_file(file: bytes = File()):
    # Process file content as bytes
    return {"file_size": len(file)}
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It fetches the latest version of FastAPI and its dependencies from the Python Package Index (PyPI).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install fastapi
```

----------------------------------------

TITLE: Adding Third-Party Middleware to Generic ASGI App - Python
DESCRIPTION: Demonstrates the standard ASGI pattern for adding middleware, where the middleware class wraps the application instance. This is how third-party middleware is typically used with any ASGI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/middleware.md#_snippet_0

LANGUAGE: Python
CODE:
```
from unicorn import UnicornMiddleware

app = SomeASGIApp()

new_app = UnicornMiddleware(app, some_config="rainbow")
```

----------------------------------------

TITLE: Combining Response Information in FastAPI
DESCRIPTION: Shows how to combine response information from multiple sources, including response_model, status_code, and the responses parameter in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/additional-responses.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
    response_model=Item,
    status_code=status.HTTP_200_OK,
    responses={
        404: {"model": Message, "description": "The item was not found"},
        200: {
            "description": "Item requested by ID",
            "content": {
                "application/json": {
                    "example": {"id": "bar", "value": "The bar tenders"}
                }
            },
        },
    },
```

----------------------------------------

TITLE: Combining Path, Query, and Body Parameters
DESCRIPTION: Demonstrates how to combine Path, Query, and request body parameters in a FastAPI endpoint. The `item` parameter is taken from the request body and is optional.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-multiple-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: int,
    item: Union[Item, None] = None,
    q: Union[str, None] = None
):
    results = {"item_id": item_id}
    if item:
        results.update({"item": item})
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Declaring a Complex Model Parameter in FastAPI
DESCRIPTION: This code snippet shows how to declare a parameter that is a complex data model in a FastAPI endpoint. The `item: Item` declaration indicates that FastAPI should expect an object of type `Item` as the parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Usando Herança de Classe para Tipo de Retorno e Filtragem de Dados
DESCRIPTION: Demonstração de como usar herança de classe para obter suporte de ferramentas com anotações de tipo e filtragem de dados do FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/response-model.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from pydantic import BaseModel, EmailStr

class BaseUser(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

class UserIn(BaseUser):
    password: str

@app.post("/user/")
def create_user(user: UserIn) -> BaseUser:
    return user
```

----------------------------------------

TITLE: Create a Route Operation for Testing Static Files
DESCRIPTION: Creates a simple route operation to test if the static files are being served correctly. This route returns a simple message to confirm that the static files setup is working as expected.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-docs-ui-assets.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.get("/")
async def read_main():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Run FastAPI App with Uvicorn
DESCRIPTION: Runs a FastAPI application using Uvicorn, specifying the host and port.  The `main:app` argument tells Uvicorn to import the `app` object from the `main.py` file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/manually.md#_snippet_2

LANGUAGE: bash
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 80
```

----------------------------------------

TITLE: Importing Cookie Class for FastAPI
DESCRIPTION: This snippet shows the necessary import statement to use the `Cookie` class provided by the `fastapi` library. Importing `Cookie` is the first step to defining parameters that receive values from request cookies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/cookie-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Cookie
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This code defines a basic FastAPI application with a single endpoint that returns a JSON response. It uses the FastAPI framework to create the API and the uvicorn server to run it.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: FastAPI App with Root Path Parameter
DESCRIPTION: Demonstrates how to set the `root_path` directly when creating a FastAPI application instance. This is an alternative to using the `--root-path` command-line option with Uvicorn or Hypercorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(root_path="/api/v1")
```

----------------------------------------

TITLE: Modifying Item Name to Item Price in FastAPI
DESCRIPTION: This code snippet shows how to change the return value of an item from item.name to item.price. This change will be reflected in the editor's auto-completion and type checking features.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining Path Operation Decorator with FastAPI
DESCRIPTION: This code snippet shows how to define a path operation decorator using `@app.get("/")` in FastAPI. It tells FastAPI that the function below handles requests to the `/` path using the HTTP GET method.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Returning Item Details in FastAPI
DESCRIPTION: This snippet shows how to return a dictionary containing item details, including the item name and ID. This is part of a FastAPI endpoint that processes data and returns a JSON response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining a Synchronous FastAPI Route Handler
DESCRIPTION: Example of defining a synchronous route handler in FastAPI using the regular def syntax. This is used when the function does not need to use await or perform asynchronous operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Reading Hero Data from the Database
DESCRIPTION: This snippet demonstrates how to read hero data from the database using the select() function. It includes the use of limit and offset for pagination of results.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_6

LANGUAGE: Python
CODE:
```
statement = select(Hero).offset(offset).limit(limit)
results = session.exec(statement)
```

----------------------------------------

TITLE: Defining CMD for Running Uvicorn Server in Dockerfile
DESCRIPTION: This snippet sets the command to start the Uvicorn server for a FastAPI application within a Docker container. It specifies the host, port, and application module to run.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/docker.md#2025-04-21_snippet_0

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Declaring Dict Type with Type Hints in Python 3.8+
DESCRIPTION: This example shows how to declare a dictionary variable with type hints for both keys and values in Python 3.8 and above, using the typing module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
from typing import Dict

prices: Dict[str, float] = {"apple": 0.4, "banana": 0.5}
```

----------------------------------------

TITLE: OAuth2PasswordBearer Usage in FastAPI
DESCRIPTION: This code snippet demonstrates how to use OAuth2PasswordBearer to secure an endpoint in FastAPI. It creates an instance of OAuth2PasswordBearer and uses it as a dependency to retrieve the token from the Authorization header.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Query Parameter List / Multiple Values
DESCRIPTION: Declares a query parameter `q` that can accept a list of values.  The `q` parameter is defined as a `list[str]` using the `Query` dependency.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import List, Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Optional[List[str]] = Query(default=None)):
    return {"q": q}
```

----------------------------------------

TITLE: Simple Function Example
DESCRIPTION: A basic Python function that takes a first name and last name, capitalizes them, and returns the full name. It demonstrates a simple string manipulation task.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_full_name(first_name, last_name):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: Using Inheritance for Type Annotations and Data Filtering in FastAPI
DESCRIPTION: This snippet demonstrates using class inheritance to get better type support while maintaining FastAPI's data filtering capabilities.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/response-model.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
class BaseUser(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

class UserIn(BaseUser):
    password: str

@app.post("/user/")
def create_user(user: UserIn) -> BaseUser:
    return user
```

----------------------------------------

TITLE: Basic String Type Hints in Python Function
DESCRIPTION: Demonstrates basic type hints for string parameters in a function that concatenates first and last names.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Implementing Current User Dependency in FastAPI
DESCRIPTION: Creates a dependency function to retrieve current user using OAuth2 token and user utility function
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def get_current_user(token: str = Depends(oauth2_scheme)):
    user = fake_decode_token(token)
    return user
```

----------------------------------------

TITLE: Defining Item with type int in FastAPI
DESCRIPTION: Defines 'item_id' as an integer type parameter for FastAPI routes, ensuring that only valid integers can be processed. This parameter is crucial for identifying specific items in API requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Importing Status Module in FastAPI (Python)
DESCRIPTION: This snippet shows how to import the status module from FastAPI. The status module provides named constants for HTTP status codes, making it easier to use them in your application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/status.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import status
```

----------------------------------------

TITLE: Modified Return Data
DESCRIPTION: This code snippet shows the modified version of the return data, where `item.name` is replaced with `item.price`. This change reflects a modification in the data being returned by the API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
        ... "item_name": item.name ...
```

----------------------------------------

TITLE: Multiple Body Parameters in FastAPI
DESCRIPTION: This example demonstrates how to declare multiple body parameters in a FastAPI path operation. FastAPI will expect a JSON body with the parameter names as keys and the corresponding Pydantic models as values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-multiple-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.post("/items/")
async def create_item(item: Item, user: User):
    return {"item": item, "user": user}
```

----------------------------------------

TITLE: Compare Path Parameter Enum Member (Python)
DESCRIPTION: This snippet demonstrates how to compare the path parameter value, which is an instance of the `ModelName` enum, directly with one of the enum's members (e.g., `ModelName.alexnet`) using the `is` operator. This allows for conditional logic based on the specific enum value received.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: Python
CODE:
```
if model_name is ModelName.alexnet:
    # ... handle alexnet case
    pass
```

----------------------------------------

TITLE: Running FastAPI with Multiple Workers
DESCRIPTION: This command starts a FastAPI application with 4 worker processes using the `fastapi` CLI. It specifies the main application file (`main.py`) and utilizes the `--workers` flag to define the number of worker processes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/server-workers.md#_snippet_0

LANGUAGE: bash
CODE:
```
fastapi run --workers 4 main.py
```

----------------------------------------

TITLE: Returning Full Input Object from Path Operation in FastAPI
DESCRIPTION: Shows the return statement within a FastAPI path operation function. Even though the function receives and returns the full `UserIn` object (which includes the password), FastAPI will filter the output based on the `response_model` specified in the decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_3

LANGUAGE: Python
CODE:
```
return user
```

----------------------------------------

TITLE: Dockerfile for Larger FastAPI Applications
DESCRIPTION: This Dockerfile is tailored for larger FastAPI applications with multiple files. It copies the requirements.txt, installs dependencies, and copies the application code into the /app/app directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_12

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app/app
```

----------------------------------------

TITLE: Initializing FastAPI Application with Custom Name
DESCRIPTION: Creates an instance of the FastAPI class and assigns it to a custom variable name. This allows you to have multiple FastAPI applications within the same project.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
my_awesome_api = FastAPI()
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Returning RedirectResponse Directly
DESCRIPTION: Demonstrates how to return a RedirectResponse directly from a FastAPI endpoint. This is useful for redirecting users to a different URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/typer")
async def redirect_typer():
    return RedirectResponse("https://typer.tiangolo.com")

```

----------------------------------------

TITLE: Creating a Virtual Environment with venv
DESCRIPTION: This snippet shows how to create a virtual environment using the `venv` module in Python. It creates a new directory named `.venv` within the project directory to house the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_1

LANGUAGE: console
CODE:
```
$ python -m venv .venv
```

----------------------------------------

TITLE: Embedding Single Body Parameter
DESCRIPTION: Forcing a single body parameter to be embedded in a nested JSON structure
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
item: Item = Body(embed=True)
```

----------------------------------------

TITLE: Incorrect Usage of Async Function in FastAPI
DESCRIPTION: This example shows an incorrect way of calling an async function without using await. The function get_burgers is defined with async def but is being called directly without await, which will not work properly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/async.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
# Ceci ne fonctionne pas, car get_burgers a été défini avec async def
burgers = get_burgers(2)
```

----------------------------------------

TITLE: Importing List from typing module
DESCRIPTION: This snippet shows how to import the `List` type from the `typing` module, used in Python versions before 3.9 for type hinting with generic types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"from typing import List"
```

----------------------------------------

TITLE: Synchronous TestClient Call Syntax (Comparison)
DESCRIPTION: This snippet shows the syntax for making a request using the synchronous `TestClient`. It is presented to highlight the difference from the `await` call required when using `httpx.AsyncClient` in an `async def` test function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_5

LANGUAGE: python
CODE:
```
response = client.get('/')
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI endpoint using Python type hints. FastAPI automatically validates and converts the input to an integer.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Using FileResponse for File Downloads in FastAPI
DESCRIPTION: Example showing how to use FileResponse to serve a file for download. This handles Content-Length, Last-Modified, and ETag headers automatically.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_11

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()


@app.get("/")
async def main():
    some_file_path = "large-video-file.mp4"
    return FileResponse(some_file_path)
```

----------------------------------------

TITLE: Reading Uploaded File Content Asynchronously
DESCRIPTION: This snippet shows how to read the contents of an uploaded file asynchronously using the `read()` method of the `UploadFile` object. This is suitable for use inside an `async` function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-files.md#_snippet_3

LANGUAGE: Python
CODE:
```
contents = await myfile.read()
```

----------------------------------------

TITLE: Returning Enum Members in FastAPI
DESCRIPTION: This code snippet demonstrates how to return Enum members from a FastAPI path operation, even when nested within a JSON body (e.g., a dict). FastAPI automatically converts the Enum members to their corresponding values (strings in this case) before returning them to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_8

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the way"}

    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Configuring Swagger UI - Disable Syntax Highlighting - Python
DESCRIPTION: Demonstrates how to disable syntax highlighting in Swagger UI by passing a dictionary with the `syntaxHighlight` key set to `False` to the `swagger_ui_parameters` argument when creating the FastAPI application instance. This affects the appearance of code examples in the API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/how-to/configure-swagger-ui.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(swagger_ui_parameters={"syntaxHighlight": False})
```

----------------------------------------

TITLE: Initializing a Tuple and Set - Python 3.8+
DESCRIPTION: This snippet initializes a tuple `items_t` with specific types for each element (int, int, str) and a set `items_s` where each element is of type bytes. It uses the `Tuple` and `Set` types from the `typing` module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Tuple, Set

items_t: Tuple[int, int, str] = (1, 2, "foo")
items_s: Set[bytes] = {b"hallo", b"welt"}
```

----------------------------------------

TITLE: Install FastAPI Core Only (Shell)
DESCRIPTION: This command installs only the core FastAPI package without any of the standard optional dependencies. This is useful if you want to manually manage and install only the specific dependencies required for your project, reducing the total number of installed packages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/index.md#_snippet_10

LANGUAGE: shell
CODE:
```
pip install fastapi
```

----------------------------------------

TITLE: FastAPI application initialization in main.py
DESCRIPTION: This snippet shows the typical structure of a FastAPI application's main entry point. It imports FastAPI, creates an instance of the app, and defines a simple path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/testing.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}
```

----------------------------------------

TITLE: Returning the same input data as response model in FastAPI
DESCRIPTION: This example showcases a scenario where the input model (`UserIn`) includes a plain text password, and the same model is used as the response model. This can lead to security vulnerabilities if the API returns the password in the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/response-model.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
"class UserIn(BaseModel):
    username: str
    password: str  # Plain text password

# Using UserIn model as response model is potentially unsafe"
```

LANGUAGE: python
CODE:
```
"# Using the UserIn model to declare the output is unsafe because password will be exposed
@app.post("/users/", response_model=UserIn)
async def create_user(user: UserIn):
    return user"
```

----------------------------------------

TITLE: Activating Virtual Environment on Windows PowerShell
DESCRIPTION: Command to activate the Python virtual environment on Windows using PowerShell.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_4

LANGUAGE: powershell
CODE:
```
$ .venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This snippet demonstrates how to declare a more complex data model (Item) as a parameter in FastAPI. FastAPI uses this type declaration for validation, serialization, and automatic API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/az/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Query Parameter with Alias
DESCRIPTION: Declares a query parameter `item_query` with an alias of `item-query`. The alias is used to map the query parameter name in the URL to the function parameter name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(item_query: Optional[str] = Query(default=None, alias="item-query")):
    return {"item_query": item_query}
```

----------------------------------------

TITLE: Example requirements.txt file
DESCRIPTION: This is an example of a requirements.txt file. It lists the packages and their versions that are required for the project.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_16

LANGUAGE: txt
CODE:
```
fastapi[standard]==0.113.0
pydantic==2.8.0
```

----------------------------------------

TITLE: Using ORJSONResponse in FastAPI
DESCRIPTION: Example of using ORJSONResponse for improved performance with large responses. It demonstrates how to import and declare the response class in the path operation decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()

@app.get("/items/", response_class=ORJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code snippet shows how to create an instance of the FastAPI class. This instance, typically named 'app', serves as the main entry point for defining all API endpoints and functionality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
app
```

----------------------------------------

TITLE: Reading Environment Variables in Python
DESCRIPTION: Python에서 os.getenv() 함수를 사용하여 환경 변수를 읽는 방법을 보여줍니다. 환경 변수가 설정되지 않은 경우 기본값을 지정할 수 있습니다. 이 예제는 MY_NAME 환경 변수를 읽고 인사말을 출력합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/environment-variables.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Defining a Path Operation Decorator
DESCRIPTION: This code snippet demonstrates how to define a path operation decorator using `@app.get("/")`. This tells FastAPI that the function below it is responsible for handling requests to the `/` path using the GET method.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Boolean Query Parameters in FastAPI
DESCRIPTION: Demonstrates how to use boolean query parameters. The 'short' parameter will be converted to a boolean value based on the string provided in the URL (1, True, true, on, yes are all converted to True).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def read_items(item_id: str, short: bool = False):
```

----------------------------------------

TITLE: Simulated Invocation of Callable (Python)
DESCRIPTION: This snippet illustrates how FastAPI internally invokes the `__call__` method of the dependency instance, passing in relevant parameters from the request, such as query parameters from the URL.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/advanced-dependencies.md#_snippet_3

LANGUAGE: Python
CODE:
```
checker(q="somequery")
```

----------------------------------------

TITLE: Using a Class Dependency in a FastAPI Route
DESCRIPTION: Demonstrates how to use the CommonQueryParams class as a dependency in a FastAPI route function. The dependency is declared using the Depends() function and type annotation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/items/")
async def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = fake_items_db[commons.skip : commons.skip + commons.limit]
    response.update({"items": items})
    return response
```

----------------------------------------

TITLE: Importing and Using Depends in FastAPI
DESCRIPTION: Demonstrates how to import the Depends class and use it to inject dependencies into route handlers. Shows the basic syntax for declaring dependencies using Annotated type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/index.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import Depends
from typing import Annotated
```

----------------------------------------

TITLE: Declaring Integer Parameter Type in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter type in FastAPI using standard Python type hints. The `item_id` parameter is annotated with `int`, enabling editor support and data validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Creating a Dockerfile for FastAPI
DESCRIPTION: This Dockerfile uses the official tiangolo/uvicorn-gunicorn-fastapi image as a base, copies the requirements.txt file, installs the dependencies, and then copies the application code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_11

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app
```

----------------------------------------

TITLE: Reducing Model Duplication with Base Model Inheritance
DESCRIPTION: Shows how to create a base user model and derive specific models with minimal code repetition using inheritance
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/extra-models.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
class UserBase(BaseModel):
    username: str
    email: str
    full_name: Optional[str] = None

class UserIn(UserBase):
    password: str

class UserOut(UserBase):
    pass

class UserInDB(UserBase):
    hashed_password: str
```

----------------------------------------

TITLE: Importing Request Class from FastAPI
DESCRIPTION: This snippet demonstrates how to import the Request class directly from the FastAPI module. This class allows direct access to the raw HTTP request object without any validation in path operation functions or dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/request.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Request
```

----------------------------------------

TITLE: Multiple Body and Query Parameters
DESCRIPTION: Demonstrates how to declare both body and query parameters in a FastAPI route. By default, singular values are interpreted as query parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-multiple-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.put("/items/{item_id}")
async def update_item(
    item_id: str,
    item: Item,
    user: User,
    importance: int = Body(default=None),
    q: str | None = None
):
    results = {"item_id": item_id, "item": item, "user": user, "importance": importance}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Traefik Configuration - entryPoints and providers
DESCRIPTION: Configures Traefik to listen on port 9999 and use a routes.toml file for routing configurations. This setup avoids requiring administrator privileges.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_5

LANGUAGE: TOML
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Creating an APIRouter for OpenAPI Callbacks
DESCRIPTION: This snippet demonstrates how to create an APIRouter instance specifically for defining OpenAPI callbacks.  It allows to document the expected structure of an external API by creating a router and defining routes for the callback.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
invoices_callback_router = APIRouter()
```

----------------------------------------

TITLE: Adding Callback Router to Path Operation in FastAPI
DESCRIPTION: This code snippet demonstrates how to integrate a callback router's routes into a path operation using the callbacks parameter. It passes the .routes attribute of the callback router to the callbacks parameter of the path operation decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/openapi-callbacks.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.post("/invoices", callbacks=invoices_callback_router.routes)
```

----------------------------------------

TITLE: Using PlainTextResponse in FastAPI
DESCRIPTION: This code snippet demonstrates how to return plain text responses using `PlainTextResponse`. It imports the `PlainTextResponse` class and uses it to return a simple text string.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_4

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()


@app.get("/items/", response_class=PlainTextResponse)
async def read_items():
    return "Hello, world!"
```

----------------------------------------

TITLE: Defining File and Form Parameters in FastAPI (Python)
DESCRIPTION: Example of defining path operation parameters using File and Form to receive file uploads and form data simultaneously. Parameters can be defined to receive file content as bytes or as UploadFile objects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-forms-and-files.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
@app.post("/files/")
async def create_file(
    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()
):
```

----------------------------------------

TITLE: Creating a Protected Route with User Authentication in FastAPI
DESCRIPTION: This snippet demonstrates how to create a protected route in FastAPI that requires user authentication. It uses the get_current_user dependency to inject the authenticated user into the route function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/users/me")
async def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user
```

----------------------------------------

TITLE: Handling List Bodies in FastAPI Endpoints
DESCRIPTION: This snippet illustrates how to define a FastAPI endpoint that expects a list of items as the request body, using Pydantic models for validation and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
@app.post("/images/multiple/")
async def create_multiple_images(images: List[Image]):
    return images
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI application using Python type hints. The `item_id: int` syntax specifies that the `item_id` parameter should be an integer.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/he/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Handling File Uploads with UploadFile in FastAPI
DESCRIPTION: This snippet illustrates how to handle file uploads using the `UploadFile` type in FastAPI. It demonstrates how to receive an uploaded file and access its filename and content type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def upload_file(file: UploadFile):
    return {"filename": file.filename}
```

----------------------------------------

TITLE: Defining Pydantic Model with Default Values
DESCRIPTION: Creates a Pydantic model for an item with optional description and name fields, demonstrating how default values affect schema generation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/separate-openapi-schemas.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
```

----------------------------------------

TITLE: Run FastAPI Application
DESCRIPTION: Run the FastAPI application using the `fastapi dev` command. This command starts a development server (Uvicorn) that watches for code changes and reloads automatically.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/sql-databases.md#_snippet_10

LANGUAGE: Console
CODE:
```
$ fastapi dev main.py
```

----------------------------------------

TITLE: Importing OAuth2PasswordRequestForm and Using it as a Dependency
DESCRIPTION: This snippet shows how to import OAuth2PasswordRequestForm and use it as a dependency in the token endpoint to handle username and password form data.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.security import OAuth2PasswordRequestForm

@app.post("/token")
async def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):
```

----------------------------------------

TITLE: Declaring Request Body Parameter
DESCRIPTION: Declares a request body parameter `item` in a path operation function. The type annotation `Item` specifies that FastAPI should parse the request body into an `Item` object, automatically handling validation and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body.md#_snippet_2

LANGUAGE: Python
CODE:
```
async def create_item(item: Item): #-> Item:
    return item
```

----------------------------------------

TITLE: List of nested models in Pydantic
DESCRIPTION: This snippet shows how to define a list of `Image` models as a type annotation for the `images` field in another Pydantic model, enabling validation of lists containing nested objects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
"images: list[Image] | None = None"
```

----------------------------------------

TITLE: Simple HTTP Basic Auth with FastAPI
DESCRIPTION: This snippet shows how to implement simple HTTP Basic Authentication in FastAPI using `HTTPBasic` and `HTTPBasicCredentials`. It creates a security scheme using `HTTPBasic` and uses it with a dependency in the path operation, returning an `HTTPBasicCredentials` object containing the username and password sent by the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

security = HTTPBasic()


@app.get("/items/")
def read_items(credentials: HTTPBasicCredentials = Depends(security)):
    return {"username": credentials.username, "password": credentials.password}
```

----------------------------------------

TITLE: 패스워드 해싱 및 검증 유틸리티 함수 생성 (passlib)
DESCRIPTION: passlib에서 필요한 도구를 가져오고, 패스워드를 해싱하고 검증하는 데 사용되는 PassLib "컨텍스트"를 생성합니다. 사용자로부터 받은 패스워드를 해싱하는 유틸리티 함수와 저장된 해시와 일치하는지 검증하는 함수를 생성합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/oauth2-jwt.md#_snippet_0

LANGUAGE: python
CODE:
```
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password):
    return pwd_context.hash(password)

def verify_password(password, hashed_password):
    return pwd_context.verify(password, hashed_password)
```

----------------------------------------

TITLE: JSON Response with root_path
DESCRIPTION: This JSON response shows the structure of the response when accessing the application. The `message` field contains a greeting, and the `root_path` field indicates the path prefix configured for the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "message": "Hello World",
    "root_path": "/api/v1"
}
```

----------------------------------------

TITLE: Overriding FastAPI OpenAPI Method
DESCRIPTION: This snippet overrides the default `.openapi()` method of the FastAPI application with the custom function `custom_openapi`. This ensures that the customized OpenAPI schema is used when the documentation endpoint is accessed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/extending-openapi.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"app.openapi = custom_openapi"
```

----------------------------------------

TITLE: Installing python-multipart
DESCRIPTION: This command installs the 'python-multipart' package, which is necessary to handle form data in FastAPI applications. Ensure a virtual environment is activated before installation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/request-form-models.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install python-multipart
```

----------------------------------------

TITLE: Importing File and UploadFile from FastAPI
DESCRIPTION: This snippet demonstrates how to import the `File` and `UploadFile` classes from the `fastapi` module, which are essential for handling file uploads in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-files.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, File, UploadFile
```

----------------------------------------

TITLE: Using Query as Default Value for Optional Parameter (Python <3.10)
DESCRIPTION: Demonstrates the older approach of using 'Query' directly as the default value for the optional query parameter 'q' to achieve the same effect as using 'Annotated'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
q: Union[str, None] = Query(default=None, max_length=50)
```

----------------------------------------

TITLE: Handling WebSocket messages
DESCRIPTION: Demonstrates how to receive and send messages through a WebSocket connection in FastAPI. It shows the basic structure for handling WebSocket connections, receiving messages, and sending responses.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/advanced/websockets.md#_snippet_2

LANGUAGE: Python
CODE:
```
await websocket.accept()
while True:
    data = await websocket.receive_text()
    await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: Define Path Operation Function (Sync)
DESCRIPTION: This is a path operation function defined as a regular Python function instead of an async function. FastAPI will call it every time it receives a request to the URL / using a GET operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Running FastAPI with Uvicorn and root-path
DESCRIPTION: Starts the FastAPI application using Uvicorn, specifying the root path as /api/v1. This configuration ensures that the application is served under the given root path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_8

LANGUAGE: console
CODE:
```
$ fastapi run main.py --root-path /api/v1
```

----------------------------------------

TITLE: Importing List from Typing
DESCRIPTION: Shows how to import the `List` type from the `typing` module in Python versions before 3.9.  This is necessary for declaring lists with type parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/body-nested-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List
```

----------------------------------------

TITLE: Using FileResponse to stream files in FastAPI
DESCRIPTION: Demonstrates how to use FileResponse to asynchronously stream a file as a response. FileResponse automatically includes appropriate Content-Length, Last-Modified, and ETag headers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()


@app.get("/")
def main():
    return FileResponse("large-file.txt")

```

----------------------------------------

TITLE: JavaScript Static File Example
DESCRIPTION: Example of a JavaScript static file served by FastAPI, confirming that static files are correctly placed and served from the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-docs-ui-assets.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
/*! For license information please see redoc.standalone.js.LICENSE.txt */
!function(e,t){'object'==typeof exports&&'object'==typeof module?module.exports=t(require('null')):
```

----------------------------------------

TITLE: Plain Text Response
DESCRIPTION: Demonstrates returning a plain text response using PlainTextResponse. This allows setting the content type to plain text and returning simple string content.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/custom-response.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()

@app.get("/message", response_class=PlainTextResponse)
def read_message():
    return "Hello, this is a plain text message!"
```

----------------------------------------

TITLE: Using a nested model in another Pydantic model
DESCRIPTION: This snippet shows how to use the `Image` model as a type annotation for the `image` field in another Pydantic model.  It uses the custom `Image` model as an attribute type.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-nested-models.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
"image: Image | None = None"
```

----------------------------------------

TITLE: Updated PATH Variable after Python Installation (Linux, macOS)
DESCRIPTION: This example shows how the PATH variable might be updated after installing Python in a custom directory on Linux or macOS. The Python installation directory is appended to the existing PATH.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/environment-variables.md#_snippet_8

LANGUAGE: plaintext
CODE:
```
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin
```

----------------------------------------

TITLE: Basic Query Parameter Declaration
DESCRIPTION: Declares an optional query parameter `q` of type string with a default value of `None`. This makes the parameter optional in the API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(q: Optional[str] = None):
    return {"q": q}
```

----------------------------------------

TITLE: Running a FastAPI Application with Uvicorn
DESCRIPTION: This command demonstrates how to start the FastAPI application using Uvicorn. It specifies the main module, the app instance, and enables auto-reloading for development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload
```

----------------------------------------

TITLE: Defining a Path Parameter with an Enum Type in FastAPI
DESCRIPTION: This code snippet shows how to define a path parameter in a FastAPI path operation using the Enum class created earlier. The type annotation of the path parameter is set to the Enum class (ModelName).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: This command installs Uvicorn, an ASGI server, using pip. Uvicorn is recommended for production environments. The `[standard]` extra installs additional features.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Import Uvicorn Worker
DESCRIPTION: Shows how Gunicorn imports the Uvicorn worker class. This is equivalent to the `--worker-class uvicorn.workers.UvicornWorker` argument passed to Gunicorn, specifying the worker class to use.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/deployment/server-workers.md#_snippet_3

LANGUAGE: Python
CODE:
```
import uvicorn.workers.UvicornWorker
```

----------------------------------------

TITLE: Type Hinting Example
DESCRIPTION: Demonstrates the use of Python type hints for function parameters. This allows IDEs to provide better autocompletion and error checking.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Déclare une variable comme étant une str
# et profitez de l'aide de votre IDE dans cette fonction
def main(user_id: str):
    return user_id
```

----------------------------------------

TITLE: HTTPS API Example
DESCRIPTION: This section outlines how an HTTPS API might look, focusing on the key concepts relevant to developers. No actual code is provided, but it sets the stage for understanding HTTPS implementation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/https.md#_snippet_0



----------------------------------------

TITLE: Database Dependency with yield in FastAPI
DESCRIPTION: Creates a database session as a dependency and closes it after the request is processed. The code before `yield` is executed before the response, and the code after `yield` is executed after the response is sent.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
db = SessionLocal()
try:
    yield db
finally:
    db.close()
```

----------------------------------------

TITLE: Adding HTTPS Redirect Middleware
DESCRIPTION: Configures the HTTPSRedirectMiddleware to automatically redirect incoming HTTP or WS requests to their secure HTTPS or WSS equivalents. This enforces secure connections for the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/middleware.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)
```

----------------------------------------

TITLE: Install passlib with bcrypt
DESCRIPTION: Installs the passlib library with the bcrypt extra, which is used for handling password hashing securely in Python. Bcrypt is the recommended algorithm.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/oauth2-jwt.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install passlib[bcrypt]

---> 100%
```

----------------------------------------

TITLE: Install packages from requirements.txt using uv
DESCRIPTION: This command installs all packages listed in the requirements.txt file using uv. The -r flag specifies that uv should read the list of packages from the specified file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_13

LANGUAGE: bash
CODE:
```
uv pip install -r requirements.txt
```

----------------------------------------

TITLE: Creating Basic Dependency Function in FastAPI
DESCRIPTION: Demonstrates how to create a simple dependency function with optional query parameters that can be reused across different route operations
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/index.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Creating Database Tables with SQLModel
DESCRIPTION: This snippet demonstrates how to create database tables for each of the defined table models using SQLModel's metadata.create_all() function and the database engine.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_2

LANGUAGE: Python
CODE:
```
SQLModel.metadata.create_all(engine)
```

----------------------------------------

TITLE: Verifying Python Path in Virtual Environment (Linux/macOS/Bash)
DESCRIPTION: This command uses `which python` to verify that the Python interpreter being used is the one from the activated virtual environment on Linux, macOS, or Windows Bash.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_27

LANGUAGE: bash
CODE:
```
which python
```

LANGUAGE: bash
CODE:
```
/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Modifying Item Name in FastAPI Response
DESCRIPTION: This code snippet illustrates changing the `item_name` key in the response to `item_price`. It demonstrates how easily the output data can be modified within a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Excluding a Route from OpenAPI
DESCRIPTION: This snippet demonstrates how to exclude a route operation from the generated OpenAPI schema using the `include_in_schema` parameter set to `False`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/path-operation-advanced-configuration.md#_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/hidden", include_in_schema=False)
async def hidden_api():
    return {"message": "Not shown in docs"}
```

----------------------------------------

TITLE: Using PlainTextResponse in FastAPI
DESCRIPTION: Example of returning plain text content from a FastAPI endpoint by setting PlainTextResponse as the response_class parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/custom-response.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()


@app.get("/", response_class=PlainTextResponse)
async def main():
    return "Hello World"
```

----------------------------------------

TITLE: Deactivating and Activating Virtual Environments
DESCRIPTION: This example demonstrates deactivating the current virtual environment and then activating a new one for a different project. This ensures that the correct Python interpreter and dependencies are used.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_24

LANGUAGE: bash
CODE:
```
deactivate
```

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

LANGUAGE: python
CODE:
```
python main.py
```

----------------------------------------

TITLE: Creating a Dockerfile for FastAPI
DESCRIPTION: This Dockerfile uses the tiangolo/uvicorn-gunicorn-fastapi base image to run a FastAPI application. It copies the application code into the /app directory within the container.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/deployment/docker.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7

COPY ./app /app
```

----------------------------------------

TITLE: HTML Response in FastAPI
DESCRIPTION: Demonstrates how to return an HTML response using HTMLResponse. It shows the import and usage of HTMLResponse in the path operation decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return """<html><body><h1>Hello World</h1></body></html>"""
```

----------------------------------------

TITLE: Official FastAPI Docker Image with Gunicorn and Uvicorn
DESCRIPTION: Dockerfile configuration using the official tiangolo/uvicorn-gunicorn-fastapi base image for more complex deployment scenarios
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/deployment/docker.md#2025-04-21_snippet_1

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app/app
```

----------------------------------------

TITLE: Custom Operation ID Generation in FastAPI
DESCRIPTION: A FastAPI application with custom operation ID generation using tags and function names, resulting in cleaner client method names.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/generate-clients.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.routing import APIRoute


def custom_generate_unique_id(route: APIRoute):
    return f"{route.tags[0]}-{route.name}"


app = FastAPI(
    title="FastAPI Client Example",
    generate_unique_id_function=custom_generate_unique_id,
)
```

----------------------------------------

TITLE: Reading Environment Variables in Python (PowerShell)
DESCRIPTION: This snippet demonstrates how to run a Python script that reads an environment variable using PowerShell. It first runs the script without setting the environment variable, showing the default value being used. Then, it sets the environment variable and runs the script again, showing the environment variable's value being used.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/environment-variables.md#_snippet_4

LANGUAGE: Shell
CODE:
```
$ python main.py

Hello World from Python
$ $Env:MY_NAME = "Wade Wilson"
$ python main.py

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Modifying a return statement in FastAPI
DESCRIPTION: This snippet shows a return statement in a FastAPI function that returns a dictionary. This is an example of data conversion; FastAPI converts the Python dictionary to JSON in the API response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/index.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
    return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining Form Parameters in FastAPI
DESCRIPTION: Shows how to define form parameters using the `Form` class within a FastAPI endpoint function.  It demonstrates how to declare a form parameter with type annotations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/request-forms.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"async def read_items(username: str = Form(), password: str = Form()):
    return {"username": username, "password": password}"
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function
DESCRIPTION: Defines a synchronous path operation function that will be called when a GET request is made to the root path ('/'). It returns a dictionary that will be automatically converted to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_6

LANGUAGE: Python
CODE:
```
def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating an Async FastAPI App
DESCRIPTION: This Python code defines a simple FastAPI application with two asynchronous routes: a root route ('/') that returns a greeting and an '/items/{item_id}' route that returns an item ID and an optional query parameter. It uses async def to define the routes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Returning item details in FastAPI endpoint
DESCRIPTION: Returns a dictionary containing the 'item_name' and 'item_id' for a specified item upon GET request, utilizing FastAPI's automatic response generation features.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Configuring CORS Middleware in FastAPI
DESCRIPTION: Demonstrates how to add CORS middleware to a FastAPI application with configurable settings for handling cross-origin requests
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/cors.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

----------------------------------------

TITLE: Use Enum as Path Parameter Type Hint (FastAPI, Python)
DESCRIPTION: This snippet shows how to use the `ModelName` enum as a type hint for a path parameter (`model_name`) in a FastAPI path operation. This restricts the acceptable values for the parameter to the predefined members of the enum, providing validation and enabling interactive documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    # ... rest of the function
    pass
```

----------------------------------------

TITLE: Installing Typer CLI Completion for Documentation Management
DESCRIPTION: Command to install shell completion for Typer CLI, which provides autocompletion for documentation management commands. This improves the developer experience when working with the docs.py script.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
$ typer --install-completion

zsh completion installed in /home/user/.bashrc.
Completion will take effect once you restart the terminal.
```

----------------------------------------

TITLE: Import List from Typing
DESCRIPTION: Imports the `List` type hint from Python's standard `typing` module. This is necessary to declare a list with a specific type parameter for its elements.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List
```

----------------------------------------

TITLE: Using Callable Instance with Depends (Python)
DESCRIPTION: To use the instantiated callable object as a dependency in a path operation, pass the instance itself (the variable `checker` in this case), not the class, to `Depends()`. The return value of the instance's `__call__` method will be injected into the path operation function's parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/advanced-dependencies.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def read_items(fixed_content_included: str = Depends(checker)):
```

----------------------------------------

TITLE: Reducing Model Duplication with Base Model
DESCRIPTION: Creating a base model to reduce code duplication and simplify model inheritance in Pydantic
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/extra-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from pydantic import BaseModel

class UserBase(BaseModel):
    username: str
    email: str
    full_name: str = None

class UserIn(UserBase):
    password: str

class UserOut(UserBase):
    pass

class UserInDB(UserBase):
    hashed_password: str
```

----------------------------------------

TITLE: Activating the virtual environment (Windows PowerShell)
DESCRIPTION: This command activates the virtual environment using PowerShell on Windows. It executes the `Activate.ps1` script located in the `.venv\Scripts` directory to configure the PowerShell session to use the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_4

LANGUAGE: Shell
CODE:
```
```console
$ .venv\Scripts\Activate.ps1
```
```

----------------------------------------

TITLE: Excluding Query Parameter from Schema
DESCRIPTION: This code shows how to exclude a query parameter from the generated API schema using `include_in_schema=False` within the `Query` function. This makes the parameter invisible in the documentation and OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(hidden_query: Union[str, None] = Query(default=None, include_in_schema=False)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if hidden_query:
        results.update({"hidden_query": hidden_query})
    return results
```

----------------------------------------

TITLE: Returning a Dictionary with Item Name and ID
DESCRIPTION: This code snippet demonstrates how to return a dictionary containing the item name and ID in a FastAPI application. It shows how to access the `name` attribute of an `item` object and include it in the returned dictionary.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/he/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Defining a Base Hero Model
DESCRIPTION: This snippet defines a base model for Hero data, containing common fields like name and age. This base model can be inherited by other models to avoid duplication.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_9

LANGUAGE: Python
CODE:
```
class HeroBase(SQLModel):
    name: str = Field(index=True)
    age: Optional[int] = Field(default=None, index=True)
```

----------------------------------------

TITLE: Creating Main FastAPI App
DESCRIPTION: Creates the main FastAPI application instance and defines a root path operation. This is the top-level app where the sub-application will be mounted.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/sub-applications.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"""\nFirst, create the main, top-level **FastAPI** application and its *path operations*:\n"""
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"message": "Hello from the root app"}

```

----------------------------------------

TITLE: Lanzando una excepción personalizada
DESCRIPTION: Ejemplo de cómo lanzar una excepción personalizada (UnicornException) desde una path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/unicorns/{name}")\nasync def read_unicorn(name: str):\n    if name == "yolo":\n        raise UnicornException(name=name)\n    return {"unicorn_name": name}
```

----------------------------------------

TITLE: Importing BaseModel from Pydantic
DESCRIPTION: This code snippet demonstrates how to import the `BaseModel` class from the `pydantic` library. `BaseModel` is used as the base class for defining data models in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel
```

----------------------------------------

TITLE: Modifying a Return Statement in FastAPI
DESCRIPTION: This code snippet demonstrates how to modify a return statement in a FastAPI application. It shows the original return statement and the modified version, highlighting the change from `item.name` to `item.price`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Using RedirectResponse with response_class in FastAPI
DESCRIPTION: Example showing how to use RedirectResponse as a response_class parameter, which allows returning just the URL string from the route function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()


@app.get("/typer", response_class=RedirectResponse)
async def redirect_typer():
    return "https://typer.tiangolo.com"
```

----------------------------------------

TITLE: Caching OpenAPI Schema in FastAPI
DESCRIPTION: This snippet demonstrates how to cache the generated OpenAPI schema within the FastAPI application instance. This prevents the application from re-generating the schema on every request, improving performance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/extending-openapi.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
"    app.openapi_schema = openapi_schema\n    return app.openapi_schema"
```

----------------------------------------

TITLE: Example directory to python after activating (Windows)
DESCRIPTION: This specifies the exact directory to the python executable in virtual environment on Windows.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_28

LANGUAGE: plaintext
CODE:
```
C:\Users\user\code\awesome-project\.venv\Scripts\python
```

----------------------------------------

TITLE: Creating a Settings Dependency in FastAPI
DESCRIPTION: Implements a dependency function to provide Settings object, using lru_cache for performance optimization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from functools import lru_cache

@lru_cache()
def get_settings():
    return Settings()

@app.get("/info")
async def info(settings: Settings = Depends(get_settings)):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user
    }
```

----------------------------------------

TITLE: Setting OpenAPI operationId in FastAPI
DESCRIPTION: This snippet demonstrates how to set a specific `operationId` for a path operation in FastAPI. The `operation_id` parameter allows you to define a unique identifier for the operation in the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/path-operation-advanced-configuration.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}", operation_id="read_item")
async def read_item(item_id: str):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Install passlib with bcrypt
DESCRIPTION: Installs the passlib library with the bcrypt hashing algorithm, which is used for securely hashing passwords in Python.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "passlib[bcrypt]"

---> 100%
```

----------------------------------------

TITLE: Class as Type
DESCRIPTION: This snippet demonstrates how to use a class as a type annotation for a variable. This allows developers to define custom types and use them for type checking and editor support.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
"class Person:
    name: str


first_person: Person"
```

----------------------------------------

TITLE: Example JSON Request Body (Complete)
DESCRIPTION: A JSON object representing a valid request body that conforms to the defined `Item` Pydantic model, including both required and optional fields with values. This is an example of the expected input format when sending data to an endpoint expecting the `Item` model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "Foo",
    "description": "An optional description",
    "price": 45.2,
    "tax": 3.5
}
```

----------------------------------------

TITLE: Modifying Return Statement in FastAPI
DESCRIPTION: This code snippet shows how to modify the return statement in a FastAPI application. It demonstrates changing the `item_name` key to `item_price` in the returned JSON, showcasing editor support for attribute completion and type awareness.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"item_name": item.name, "item_id": item_id}
```

----------------------------------------

TITLE: Declare List Field with Type Parameter
DESCRIPTION: Defines a model attribute as a list containing elements of a specific type (strings in this case) using `typing.List`. This enables validation and documentation for the list's contents.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/body-nested-models.md#_snippet_3

LANGUAGE: Python
CODE:
```
tags: List[str] = []
```

----------------------------------------

TITLE: Creating a Class Dependency in FastAPI
DESCRIPTION: Demonstrates how to create a class-based dependency with query parameters and initialize it for use in a FastAPI route
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Reading Custom Header Dependency (Python 3.8+)
DESCRIPTION: This code defines a dependency that reads a custom header X-Token from the request. It uses Header to extract the header value. The header value is then returned by the dependency function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Depends, HTTPException, Header


async def verify_token(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")


async def verify_key(x_key: str = Header(...)):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key
```

----------------------------------------

TITLE: Initializing a Dictionary - Python 3.9+
DESCRIPTION: This snippet initializes a dictionary `prices` where keys are strings and values are floats. It uses the built-in `dict` type with type parameters to specify the key and value types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_10

LANGUAGE: Python
CODE:
```
prices: dict[str, float] = {"apple": 1.5, "banana": 0.7}
```

----------------------------------------

TITLE: Disabling Automatic Server from Root Path
DESCRIPTION: This code snippet demonstrates how to disable the automatic inclusion of the 'root_path' server in the OpenAPI schema by setting 'root_path_in_servers' to False.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_13

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(root_path_in_servers=False)
```

----------------------------------------

TITLE: Numeric Validation: Greater Than and Less Than or Equal in FastAPI (Python)
DESCRIPTION: Demonstrates using 'gt' (greater than) and 'le' (less than or equal) numeric validations with Path in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
item_id: Annotated[int, Path(title="The ID of the item to get", gt=0, le=1000)]
```

----------------------------------------

TITLE: Validating YAML Content with Pydantic v2 in FastAPI
DESCRIPTION: Shows how to parse YAML content from a request body and validate it using a Pydantic model in FastAPI (Pydantic v2 version).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/path-operation-advanced-configuration.md#_snippet_8

LANGUAGE: Python
CODE:
```
    content = await request.body()
    data = yaml.safe_load(content)
    item = Item.model_validate(data)
    return item
```

----------------------------------------

TITLE: Renaming Starlette HTTPException in FastAPI
DESCRIPTION: This snippet shows how to rename Starlette's HTTPException to avoid conflicts with FastAPI's HTTPException, allowing you to use both in the same code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/handling-errors.md#_snippet_7

LANGUAGE: Python
CODE:
```
from starlette.exceptions import HTTPException as StarletteHTTPException
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: This snippet shows how to install FastAPI with its standard optional dependencies using pip. It's recommended to use a virtual environment for installation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/index.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Running FastAPI Application with Custom Name Using Uvicorn
DESCRIPTION: This command shows how to start a FastAPI application with a custom name using Uvicorn. It references the main module and the custom app instance name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
$ uvicorn main:my_awesome_api --reload
```

----------------------------------------

TITLE: Install packages from requirements.txt with uv
DESCRIPTION: Installs packages listed in a requirements.txt file using uv, a faster alternative to pip. This is useful for managing project dependencies in a structured way.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_13

LANGUAGE: console
CODE:
```
$ uv pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: Creating a Class-Based Dependency in FastAPI
DESCRIPTION: Implementation of a class that serves as a dependency for handling common query parameters with proper type annotations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit
```

----------------------------------------

TITLE: Full Update with PUT Method
DESCRIPTION: Demonstrates how to use HTTP PUT to replace entire item data, converting input data to JSON-compatible format using jsonable_encoder
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-updates.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
# Tutorial snippet for full update with PUT
```

----------------------------------------

TITLE: List 타입 힌트 예제
DESCRIPTION: `typing` 모듈에서 `List`를 임포트하여 문자열 리스트에 대한 타입 힌트를 선언하는 방법을 보여줍니다. 이를 통해 에디터는 리스트의 아이템을 처리할 때 도움을 줄 수 있습니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/python-types.md#_snippet_5

LANGUAGE: python
CODE:
```
from typing import List
```

LANGUAGE: python
CODE:
```
items: List[str]
```

----------------------------------------

TITLE: Declaring List Type with Type Hint in Python 3.8+
DESCRIPTION: This example shows how to declare a variable as a list of strings using type hints in Python 3.8 and above, using the typing module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
from typing import List

items: List[str] = ["Foo", "Bar", "Baz"]
```

----------------------------------------

TITLE: Defining Basic Query Parameters in FastAPI
DESCRIPTION: Demonstrates how to define query parameters in a FastAPI route function with default values. The parameters 'skip' and 'limit' are defined as integers with default values of 0 and 10 respectively.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
async def read_items(skip: int = 0, limit: int = 10):
```

----------------------------------------

TITLE: Nested Dependencies with Yield
DESCRIPTION: Demonstration of multiple nested dependencies using yield with proper cleanup order
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
async def dependency_a():
    dep_a = generate_dep_a()
    try:
        yield dep_a
    finally:
        dep_a.close()

async def dependency_b(dep_a: Annotated[DependencyA, Depends(dependency_a)]):
    dep_b = generate_dep_b()
    try:
        yield dep_b
    finally:
        dep_b.clean(dep_a)

async def dependency_c(dep_b: Annotated[DependencyB, Depends(dependency_b)]):
    dep_c = generate_dep_c()
    try:
        yield dep_c
    finally:
        dep_c.close(dep_b)
```

----------------------------------------

TITLE: Adding max_length Validation to a Query Parameter Using Annotated
DESCRIPTION: Demonstrates using Query with Annotated to add max_length validation to an optional string query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query
from typing import Annotated

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Annotated[str | None, Query(max_length=50)] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Creating a Dependency with Sub-dependency in FastAPI
DESCRIPTION: Defines a dependency function that itself depends on another dependency (query_extractor). It also extracts a cookie, demonstrating how dependencies can be chained in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/dependencies/sub-dependencies.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
async def query_or_cookie_extractor(q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)):
```

----------------------------------------

TITLE: Agregando headers personalizados a HTTPException
DESCRIPTION: Muestra cómo agregar encabezados personalizados al lanzar un HTTPException, útil para escenarios de seguridad avanzados.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/handling-errors.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
    if item_id not in items:\n        raise HTTPException(\n            status_code=404,\n            detail="Item not found",\n            headers={"X-Error": "There goes my error"},\n        )
```

----------------------------------------

TITLE: Sequential Burger Preparation
DESCRIPTION: This function demonstrates a synchronous (non-asynchronous) function for preparing burgers. It prepares burgers sequentially, step by step.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/async.md#_snippet_4

LANGUAGE: Python
CODE:
```
def get_sequential_burgers(number: int):
    # Готовим бургеры последовательно по шагам
    return burgers
```

----------------------------------------

TITLE: Creating OpenAPI Tags Metadata
DESCRIPTION: Configure custom metadata for API tags, including names, descriptions, and external documentation links
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/metadata.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
app = FastAPI(
    openapi_tags=[
        {
            "name": "users",
            "description": "Operations with **login** and _fancy_ users"
        },
        {
            "name": "items",
            "description": "Manage items"
        }
    ]
)
```

----------------------------------------

TITLE: Creating Callback APIRouter in FastAPI
DESCRIPTION: This code snippet demonstrates how to create an APIRouter instance for defining callback routes in FastAPI. It imports the FastAPI library and initializes an APIRouter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/openapi-callbacks.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import APIRouter

invoices_callback_router = APIRouter()
```

----------------------------------------

TITLE: Removing Default OpenAPI Schema Tags in FastAPI
DESCRIPTION: Shows how to remove default tags from the OpenAPI schema for a path operation by using a form feed character.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.get(
    "/items/",
    tags=["items"],
    summary="Read Items",
    response_description="Successful Response",
    description="\f"
)
def read_items():
    return ["Portal gun", "Plumbus"]
```

----------------------------------------

TITLE: Configuring OpenAPI URL in FastAPI
DESCRIPTION: This code snippet demonstrates how to configure the OpenAPI URL in a FastAPI application using the `openapi_url` parameter. It sets the URL to `/api/v1/openapi.json`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/metadata.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(openapi_url="/api/v1/openapi.json")
```

----------------------------------------

TITLE: Installing FastAPI with all extras
DESCRIPTION: This command installs FastAPI along with all optional dependencies specified in the `all` extras. This includes `pydantic-settings` along with other utilities.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/settings.md#2025-04-21_snippet_1

LANGUAGE: Bash
CODE:
```
$ pip install "fastapi[all]"
---> 100%
```

----------------------------------------

TITLE: Declaring Model Attributes with Field
DESCRIPTION: Shows how to use Field to add validations, constraints, and metadata to Pydantic model attributes with similar functionality to Query, Path, and Body
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-fields.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class ModelName:
    attribute: str = Field(..., description="Attribute description")
```

----------------------------------------

TITLE: Importing and Using Depends in FastAPI Route
DESCRIPTION: Shows how to import the Depends class and use it to inject dependencies into route functions with automatic parameter resolution
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/index.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import Depends

@app.get("/items/")
def read_items(commons: dict = Depends(common_parameters)):
    return commons
```

----------------------------------------

TITLE: Using Alias for Query Parameter in FastAPI
DESCRIPTION: This code demonstrates how to use an alias for a query parameter when the desired parameter name is not a valid Python variable name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
q: Union[str, None] = Query(default=None, alias="item-query")
```

----------------------------------------

TITLE: Function Parameters With Default Values - Python
DESCRIPTION: Shows the syntax for defining function parameters with default values (`= value`) in Python, contrasting it with the syntax for type annotations (`: type`) which uses a colon.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
first_name="john", last_name="doe"
```

----------------------------------------

TITLE: Declaring Required Query Parameter in FastAPI
DESCRIPTION: This example demonstrates how to make a query parameter 'q' required by not specifying a default value, while still using Query for validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
q: Annotated[str, Query(min_length=3)]
```

----------------------------------------

TITLE: Simple FastAPI Application
DESCRIPTION: This is a minimal FastAPI application that defines a single route ('/') which returns a JSON response. It demonstrates the basic structure of a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}

```

----------------------------------------

TITLE: PATH variable after virtual environment activation (Windows)
DESCRIPTION: This shows the PATH variable content after activating a virtual environment on Windows systems. The virtual environment's Scripts directory is prepended to the PATH.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_26

LANGUAGE: text
CODE:
```
C:\Users\user\code\awesome-project\.venv\Scripts;C:\Windows\System32
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI package using pip, the Python package installer. It retrieves the package from the Python Package Index (PyPI) and installs it along with any dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Implementing WebSocket server in FastAPI
DESCRIPTION: This code snippet demonstrates how to create a WebSocket endpoint in a FastAPI application, including handling connections and message exchange.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/websockets.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, WebSocket

app = FastAPI()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: Activating a Virtual Environment on Linux/macOS
DESCRIPTION: This command activates a Python virtual environment in a Unix-like operating system (Linux, macOS). It sets up the environment so that the project uses the packages installed in the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_20

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Path Order with User Routes
DESCRIPTION: Shows the importance of route order when defining paths with fixed and dynamic segments
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/users/me")
def read_user_me():
    return {"user_id": "the current user"}

@app.get("/users/{user_id}")
def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: List Field Declaration
DESCRIPTION: This code snippet demonstrates how to declare a list field in a Pydantic model. The `tags` attribute is defined as a `list`, but the type of elements within the list is not specified.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-nested-models.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list = []
```

----------------------------------------

TITLE: Reusing Annotated Dependency
DESCRIPTION: Demonstrates how to define and reuse an Annotated dependency in FastAPI. This avoids code duplication and preserves type information for editor support and static analysis.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/dependencies/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
commons: Annotated[dict, Depends(common_parameters)]
```

----------------------------------------

TITLE: Defining Function Without Type Hints - Python
DESCRIPTION: Demonstrates a simple Python function definition without using type annotations for parameters, illustrating the standard syntax before the widespread adoption of type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_full_name(first_name, last_name):
    return first_name.title() + " " + last_name.title()
```

----------------------------------------

TITLE: Using Custom Class as Type Hint - Python
DESCRIPTION: Shows how to define a custom class and then use that class name as a type hint for a variable, allowing editors to provide support for the class's attributes and methods.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_8

LANGUAGE: Python
CODE:
```
class Person:
    def __init__(self, name: str):
        self.name = name
```

LANGUAGE: Python
CODE:
```
def greet(person: Person):
    print(f"Hello, {person.name}")
```

----------------------------------------

TITLE: Declaring a List with Type Parameter in Python 3.10+
DESCRIPTION: Definition of a list field with a type parameter to specify that it should contain strings, providing type checking and validation for list elements.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
tags: list[str]
```

----------------------------------------

TITLE: Deactivate the virtual environment
DESCRIPTION: This command deactivates the currently active virtual environment. After running this command, the Python interpreter will revert to using the system-wide Python installation and packages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_15

LANGUAGE: bash
CODE:
```
deactivate
```

----------------------------------------

TITLE: Implementing Current User Retrieval Function
DESCRIPTION: Creating a function to decode and validate OAuth2 tokens, retrieving the current authenticated user's information
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=401,
        detail="Could not validate credentials"
    )
    return user
```

----------------------------------------

TITLE: Defining Optional Parameters in Python (Pre-3.10)
DESCRIPTION: Example of defining a function with an Optional parameter in Python versions before 3.10. The parameter is required but can accept None as a value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from typing import Optional

def say_hi(name: Optional[str]):
    print(f"Hey {name}!")
```

----------------------------------------

TITLE: Importing Pydantic Field
DESCRIPTION: Imports the `Field` class from the `pydantic` library. This allows the user to define data validation and metadata for Pydantic model attributes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-fields.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
"from pydantic import Field"
```

----------------------------------------

TITLE: Path Parameter with Type
DESCRIPTION: Declares the type of a path parameter in a FastAPI route using Python type annotations. This enables editor support, error checking, and autocompletion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Run generate-client script
DESCRIPTION: This command executes the generate-client script defined in the package.json file. It uses openapi-ts to generate TypeScript client code from the OpenAPI specification.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/generate-clients.md#_snippet_3

LANGUAGE: Shell
CODE:
```
npm run generate-client
```

----------------------------------------

TITLE: Accepting Arbitrary Dict with Typed Keys and Values
DESCRIPTION: Using a dict with typed keys and values to accept arbitrary key-value pairs in the request body, with automatic conversion and validation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_11

LANGUAGE: Python
CODE:
```
async def create_index_weights(weights: dict[int, float]):
```

----------------------------------------

TITLE: Initializing FastAPI Application
DESCRIPTION: Creates an instance of the FastAPI class, which serves as the entry point for building the API. The `app` variable is used to define and interact with the API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: PATH Variable Example (Linux, macOS)
DESCRIPTION: This is an example of how the PATH environment variable might look on Linux and macOS systems. It consists of a series of directories separated by colons.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/environment-variables.md#_snippet_6

LANGUAGE: plaintext
CODE:
```
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
```

----------------------------------------

TITLE: Working with Multiple UploadFile Objects
DESCRIPTION: Demonstrates how to handle multiple file uploads using a list of UploadFile objects, which provides more flexibility and metadata.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/request-files.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
async def create_upload_files(files: list[UploadFile]):
    return {"filenames": [file.filename for file in files]}
```

----------------------------------------

TITLE: Eliminando un Héroe con FastAPI y SQLModel en Python
DESCRIPTION: Implementa un endpoint DELETE para eliminar un héroe específico por su ID.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/sql-databases.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
@app.delete("/heroes/{hero_id}")
def delete_hero(hero_id: int):
    with Session(engine) as session:
        hero = session.get(Hero, hero_id)
        if not hero:
            raise HTTPException(status_code=404, detail="Hero not found")
        session.delete(hero)
        session.commit()
        return {"ok": True}
```

----------------------------------------

TITLE: Define Asynchronous Route Function in FastAPI
DESCRIPTION: Defines an asynchronous route function in FastAPI that handles GET requests to the root URL ('/'). It returns a dictionary which FastAPI automatically converts to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Directly Creating Response with Cookies
DESCRIPTION: Shows how to create a Response object directly and set cookies when returning a response, providing more explicit control over cookie configuration
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/response-cookies.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
# Snippet demonstrating direct Response creation with cookie setting
```

----------------------------------------

TITLE: Handling Startup Events in FastAPI (Deprecated)
DESCRIPTION: Demonstrates the deprecated method of handling startup events by registering an event handler function that initializes a database with some values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/events.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.on_event("startup")
def startup_event():
    items_db.append({"name": "Foo"})
    items_db.append({"name": "Bar"})
```

----------------------------------------

TITLE: Declaring Query Parameter for Multiple Values in FastAPI
DESCRIPTION: This example demonstrates how to declare a query parameter that can accept multiple values, resulting in a list of strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
q: Annotated[list[str] | None, Query()] = None
```

----------------------------------------

TITLE: Importing Jinja2Templates in FastAPI
DESCRIPTION: Shows how to import the Jinja2Templates class from FastAPI's templating module. This class is used to render Jinja2 templates in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/templating.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi.templating import Jinja2Templates
```

----------------------------------------

TITLE: Importing OAuth2PasswordRequestForm in FastAPI
DESCRIPTION: Imports the OAuth2PasswordRequestForm class from FastAPI security utilities and uses it as a dependency in the token route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi.security import OAuth2PasswordRequestForm

@app.post("/token")
async def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):
```

----------------------------------------

TITLE: Defining List Fields in Pydantic Models for FastAPI
DESCRIPTION: This snippet shows how to define a field as a Python list in a Pydantic model, which FastAPI will use for request body validation and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
tags: list
```

----------------------------------------

TITLE: Configuring CORS Middleware in FastAPI
DESCRIPTION: Demonstrates how to set up CORS middleware in a FastAPI application with custom origin, method, and header configurations
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/cors.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:8080"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

----------------------------------------

TITLE: Deleting Hero Data
DESCRIPTION: This snippet demonstrates how to delete a Hero from the database using the session.delete() method after retrieving the Hero object.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_8

LANGUAGE: Python
CODE:
```
session.delete(hero)
session.commit()
```

----------------------------------------

TITLE: Checking Active Python Environment in Windows PowerShell
DESCRIPTION: Uses the 'Get-Command' cmdlet to find the path of the active Python interpreter in Windows, showing if a virtual environment is active.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/virtual-environments.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```

----------------------------------------

TITLE: Declare Path Parameter with Enum Type
DESCRIPTION: This example demonstrates how to declare a path parameter using the Enum class created previously. The type annotation uses the `ModelName` enum.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
```

----------------------------------------

TITLE: Creating Pydantic User Model for Authentication
DESCRIPTION: Defining a Pydantic model to represent user data with strongly typed attributes for secure user representation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
```

----------------------------------------

TITLE: Uvicorn Server Command in Dockerfile
DESCRIPTION: This command sets up the execution of the Uvicorn server within the Docker container. It specifies the host and port, ensuring the server is accessible externally.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/docker.md#_snippet_3

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Executing Python Program
DESCRIPTION: This snippet shows how to execute a Python program after activating a virtual environment. The program will use the Python interpreter and packages installed within the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_14

LANGUAGE: console
CODE:
```
$ python main.py

Hello World
```

----------------------------------------

TITLE: Python Optional Type Hint with typing
DESCRIPTION: This example uses `Optional` from the `typing` module to indicate that a variable can be either a string (`str`) or `None`.  `Optional[str]` is equivalent to `Union[str, None]`, which signals to the editor that the variable might not always have a string value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
"""from typing import Optional

def get_name(name: Optional[str] = None):
    if name:
        return f"Name is {name}"
    return "No name provided"
""
```

----------------------------------------

TITLE: Hinting Tuple and Set Types (Python 3.6+ via typing) - Python
DESCRIPTION: For Python versions 3.6+, this snippet shows how to hint `tuple` and `set` types using `Tuple` and `Set` from the `typing` module. `Tuple` can specify fixed element types and order, while `Set` indicates the type of elements within the set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Tuple, Set

def process_items_t(items_t: Tuple[int, int, str]):
    print(items_t)

def process_items_s(items_s: Set[bytes]):
    print(items_s)
```

----------------------------------------

TITLE: Deleting a Hero
DESCRIPTION: This snippet illustrates how to delete a hero from the database. It retrieves a hero by ID, and if found, deletes it from the database.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/sql-databases.md#_snippet_18

LANGUAGE: Python
CODE:
```
@app.delete("/heroes/{hero_id}")
async def delete_hero(hero_id: int):
    with Session(engine) as session:
        hero = session.get(Hero, hero_id)
        if not hero:
            raise HTTPException(status_code=404, detail="Hero not found")
        session.delete(hero)
        session.commit()
        return {"ok": True}
```

----------------------------------------

TITLE: Installing Hypercorn with Trio Support
DESCRIPTION: Installs Hypercorn with support for Trio, an alternative asynchronous concurrency library. This allows Hypercorn to run applications using Trio instead of asyncio.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/manually.md#_snippet_4

LANGUAGE: console
CODE:
```
$ pip install "hypercorn[trio]"
---> 100%
```

----------------------------------------

TITLE: Updated PATH after Python install (Linux, macOS)
DESCRIPTION: Example of how the PATH variable might be updated after installing Python in a custom directory on Linux/macOS.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/environment-variables.md#_snippet_3

LANGUAGE: plaintext
CODE:
```
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin
```

----------------------------------------

TITLE: Including Mailjet JavaScript Integration
DESCRIPTION: Script tag to include Mailjet's non-captcha embedded form functionality JavaScript file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/newsletter.md#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<script type="text/javascript" src="https://app.mailjet.com/pas-nc-embedded-v1.js"></script>
```

----------------------------------------

TITLE: Defining Nested Models with Pydantic in FastAPI
DESCRIPTION: This code snippet demonstrates how to define nested Pydantic models in FastAPI to represent complex data structures. It shows how to create models with nested lists and optional fields, enabling robust data validation and serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-nested-models.md#_snippet_8

LANGUAGE: Python
CODE:
```
from typing import List, Optional

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: Optional[str] = None


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: List[str] = []
    image: Optional[Image] = None
    images: Optional[List[Image]] = None


class Offer(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    items: List[Item]
```

----------------------------------------

TITLE: Run a Python program
DESCRIPTION: Executes a Python program (main.py) from the command line. This assumes that the virtual environment is activated and the necessary packages are installed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_15

LANGUAGE: console
CODE:
```
$ python main.py

Hello World
```

----------------------------------------

TITLE: Declaring List Type with Type Hint in Python 3.9+
DESCRIPTION: This example shows how to declare a variable as a list of strings using type hints in Python 3.9 and above.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
items: list[str] = ["Foo", "Bar", "Baz"]
```

----------------------------------------

TITLE: Enum for Predefined Path Parameter Values
DESCRIPTION: This example demonstrates how to use Python's `Enum` to define a set of valid values for a path parameter.  It imports `Enum` and creates a subclass that inherits from `str` and `Enum`. This allows the API documentation to recognize the values as strings and display them correctly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: python
CODE:
```
from enum import Enum

from fastapi import FastAPI


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"


app = FastAPI()


@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}

    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Handling Multiple Optional File Uploads
DESCRIPTION: This example displays how to handle optional lists of uploaded files, utilizing `File()` alongside optional types to allow the endpoint to process requests with or without files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-files.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
"from typing import List, Optional

from fastapi import FastAPI, File, UploadFile

app = FastAPI()


@app.post("/files/")
async def create_files(files: Optional[List[UploadFile]] = File(None)):
    if not files:
        return {"message": "No upload file sent"}
    else:
        return {"filenames": [file.filename for file in files]}"
```

----------------------------------------

TITLE: Accessing item price from a FastAPI response
DESCRIPTION: Accesses the 'item_price' attribute from the 'item' object to include pricing information in responses sent to clients using the FastAPI framework.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
... "item_price": item.price ...
```

----------------------------------------

TITLE: Disable Syntax Highlighting in Swagger UI with FastAPI
DESCRIPTION: This snippet demonstrates how to disable syntax highlighting in Swagger UI by setting `syntaxHighlight` to `False` in the `swagger_ui_parameters` dictionary when creating a FastAPI app. This configuration is passed directly to the Swagger UI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI(swagger_ui_parameters={"syntaxHighlight": False})
```

----------------------------------------

TITLE: Returning Response Directly in FastAPI
DESCRIPTION: Demonstrates how to return a Response object directly in a FastAPI endpoint, utilizing type annotations for Response or its subclasses
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/response-model.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def read_item(item_id: str):
    return RedirectResponse("/docs")
```

----------------------------------------

TITLE: Function Parameter with Common Parameters
DESCRIPTION: Original function parameter definition from the dictionary-based dependency example.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
```

----------------------------------------

TITLE: Creating a basic FastAPI application
DESCRIPTION: This Python code defines a simple FastAPI application with two endpoints: `/` and `/items/{item_id}`.  The `/` endpoint returns a JSON response with a "Hello": "World" message. The `/items/{item_id}` endpoint takes an item ID (integer) and an optional query parameter `q` (string or None), and returns a JSON response containing the item ID and the value of `q`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/index.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Using response_model_exclude_unset in FastAPI
DESCRIPTION: This snippet demonstrates the use of response_model_exclude_unset parameter to exclude default values from the response. It defines an Item model with default values and uses the parameter in the route decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union, List
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: float = 10.5
    tags: List[str] = []

app = FastAPI()

items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2},
    "baz": {"name": "Baz", "description": None, "price": 50.2, "tax": 10.5, "tags": []},
}

@app.get("/items/{item_id}", response_model=Item, response_model_exclude_unset=True)
async def read_item(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Running Uvicorn Server in Dockerfile
DESCRIPTION: Sets the command to run the Uvicorn server, which serves the FastAPI application. The command specifies the host and port on which the server will listen.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_9

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Running FastAPI with multiple workers using the `fastapi` command
DESCRIPTION: This command starts a FastAPI application with a specified number of worker processes using the `fastapi` CLI. It uses the `--workers` option to define the number of worker processes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/deployment/server-workers.md#_snippet_0

LANGUAGE: Shell
CODE:
```
fastapi run --workers 4 main.py
```

----------------------------------------

TITLE: Import FastAPI Class
DESCRIPTION: This code snippet shows how to import the FastAPI class from the fastapi package. This class is essential for creating and configuring your API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: Command to install FastAPI with all optional dependencies using pip in the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_10

LANGUAGE: bash
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Return Enum Members in Response
DESCRIPTION: This example shows how to return Enum members in a JSON response. FastAPI automatically converts the Enum member to its corresponding value (string in this case).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_7

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}

    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: Creates an instance of the FastAPI class, assigning it to the variable app. This instance is the main entry point for defining API endpoints and handling requests.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Install Passlib with Bcrypt
DESCRIPTION: Installs the Passlib library with Bcrypt support using pip. Passlib is used for handling password hashes, and Bcrypt is the recommended algorithm.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/oauth2-jwt.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install "passlib[bcrypt]"
```

----------------------------------------

TITLE: JSON Response Example
DESCRIPTION: Sample JSON response demonstrating query parameter and path parameter handling
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/it/docs/index.md#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{"item_id": 5, "q": "somequery"}
```

----------------------------------------

TITLE: Activating Virtual Environment (Windows PowerShell)
DESCRIPTION: Executes the `Activate.ps1` script located in the `.venv\Scripts` directory. This modifies the PowerShell session to use the virtual environment's Python and packages.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_4

LANGUAGE: console
CODE:
```
.venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Declaring OAuth2 Security Scheme with Scopes
DESCRIPTION: Configure OAuth2 security scheme with predefined scopes like 'me' and 'items' to enable fine-grained access control in FastAPI
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl="token",
    scopes={
        "me": "Read your own user information",
        "items": "Read and modify items"
    }
)
```

----------------------------------------

TITLE: FastAPI WebSocket Endpoint
DESCRIPTION: Creates a WebSocket endpoint in a FastAPI application. It accepts a WebSocket connection, receives messages, and sends back a response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/websockets.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, WebSocket

app = FastAPI()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")
```

----------------------------------------

TITLE: Reading Environment Variables in Python
DESCRIPTION: This snippet demonstrates how to read an environment variable in Python using `os.getenv()`. The second argument provides a default value if the environment variable is not set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/environment-variables.md#_snippet_0

LANGUAGE: Python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Install python-jose
DESCRIPTION: Install the `python-jose` library with cryptography support, which is used for creating and verifying JWT tokens in Python.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install "python-jose[cryptography]"
```

----------------------------------------

TITLE: Activating a Virtual Environment on Linux/macOS
DESCRIPTION: This command activates a Python virtual environment by sourcing the activate script. It modifies environment variables, including PATH, to prioritize the virtual environment's Python interpreter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_19

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Importing Query and Annotated in Python 3.10+
DESCRIPTION: Shows how to import the Query class from fastapi and Annotated from typing to use them for query parameter validation in Python 3.10+.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query
from typing import Annotated
```

----------------------------------------

TITLE: Using Generic List for Query Parameter in FastAPI
DESCRIPTION: This example demonstrates using a generic list type for a query parameter, which doesn't check the content type of the list items.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
q: Annotated[list, Query()] = []
```

----------------------------------------

TITLE: Defining CSS Styles for FastAPI Templates
DESCRIPTION: CSS code snippet for styling the HTML template, which is served as a static file in the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/templates.md#2025-04-21_snippet_3

LANGUAGE: css
CODE:
```
{!../../docs_src/templates/static/styles.css!}
```

----------------------------------------

TITLE: Route Operation with Security Scopes
DESCRIPTION: Demonstrates how to declare required scopes for a route operation using the Security class from FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/users/me/items/")
async def read_own_items(
    current_user: Annotated[User, Security(get_current_active_user, scopes=["items"])]
):
```

----------------------------------------

TITLE: Defining an Asynchronous Function
DESCRIPTION: Example of defining an asynchronous function using the async def syntax. This allows the use of await within the function body.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Importing FastAPI Class in Python
DESCRIPTION: This code snippet demonstrates how to import the FastAPI class from the fastapi library. The FastAPI class provides all the necessary functionality for building an API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Installing FastAPI and Uvicorn in Python
DESCRIPTION: Commands to install FastAPI with all optional dependencies and the Uvicorn ASGI server using pip.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/index.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install "fastapi[standard]"

---> 100%

$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Excluding Query Parameter from OpenAPI Schema in FastAPI
DESCRIPTION: This snippet shows how to exclude a query parameter from the OpenAPI schema and automatic documentation systems.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_17

LANGUAGE: Python
CODE:
```
hidden_query: Annotated[str | None, Query(include_in_schema=False)] = None
```

----------------------------------------

TITLE: Define Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI route. The value passed in the URL for `item_id` will be passed as an argument to the function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Declaring an Integer Type
DESCRIPTION: This code snippet demonstrates how to declare an integer type for a variable in Python. It is used within FastAPI to define the expected type of a request parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_4

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This snippet shows how to declare an integer parameter in a FastAPI application using Python type hints. FastAPI uses this declaration for validation, serialization, and documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Declaring an Optional Type - Python 3.10+
DESCRIPTION: This snippet declares a variable `name` that can be either a string or None using the union operator `|`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_15

LANGUAGE: Python
CODE:
```
name: str | None = "Guido"
```

----------------------------------------

TITLE: Disabling Underscore to Dash Conversion in FastAPI Headers
DESCRIPTION: Example showing how to disable the automatic conversion of underscores to dashes in header parameters by setting convert_underscores=False in the Header class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/header-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
async def read_items(strange_header: str | None = Header(default=None, convert_underscores=False)):
```

----------------------------------------

TITLE: Including Admin Router in Main FastAPI Application
DESCRIPTION: Demonstrates how to include a specific router with custom configuration into the main FastAPI application using app.include_router() method
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/bigger-applications.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
{!../../docs_src/bigger_applications/app/main.py!}
```

----------------------------------------

TITLE: Path Parameter with Full File Path
DESCRIPTION: Demonstrates handling path parameters that include entire file paths using Starlette's path conversion
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/path-params.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/files/{file_path:path}")
def read_file(file_path: str):
    return {"file_path": file_path}
```

----------------------------------------

TITLE: Activating Virtual Environment (Linux/macOS Console)
DESCRIPTION: Executes the `activate` script located in the `.venv/bin` directory using the `source` command. This modifies the current shell session to use the Python interpreter and installed packages from the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_3

LANGUAGE: console
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Defining Callback Path Operation in FastAPI
DESCRIPTION: This code snippet defines a callback path operation within a FastAPI APIRouter. It includes a body declaration (InvoiceEvent), a response model (InvoiceEventReceived), and a path expression. The function itself contains only a pass statement, as it's used for documentation purposes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/openapi-callbacks.md#_snippet_2

LANGUAGE: Python
CODE:
```
@invoices_callback_router.post(
    "/invoices/{$request.body.id}",
    response_model=InvoiceEventReceived,
)
async def invoices_callback(body: InvoiceEvent):
    pass
```

----------------------------------------

TITLE: Configuring FastAPI Application Metadata
DESCRIPTION: Set custom metadata for an API, including title, description, and version for OpenAPI documentation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/metadata.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
app = FastAPI(
    title="My Super Project",
    description="This is a very fancy project, with auto docs for the API and everything",
    version="2.5.0"
)
```

----------------------------------------

TITLE: Importando dependencias OAuth2 en FastAPI
DESCRIPTION: Importa OAuth2PasswordRequestForm para manejar el formulario de inicio de sesión y HTTPException para manejar errores de autenticación.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
```

----------------------------------------

TITLE: Dependency Injection with Current User
DESCRIPTION: Using FastAPI's dependency injection to automatically authenticate and inject user information into route handlers
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user
```

----------------------------------------

TITLE: 이름 결합 함수 예제
DESCRIPTION: 이 함수는 `first_name`과 `last_name`을 입력받아 각 단어의 첫 글자를 대문자로 변환한 후 공백으로 연결하여 반환합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/python-types.md#_snippet_0

LANGUAGE: python
CODE:
```
def get_full_name(first_name, last_name):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: FastAPI App with Root Path Configuration
DESCRIPTION: Demonstrates configuring a FastAPI application to work with a proxy path prefix by setting the root_path parameter during app initialization
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI(root_path="/api/v1")
```

----------------------------------------

TITLE: Async Function Await Usage
DESCRIPTION: Demonstrates how to use await with an asynchronous function to retrieve results, allowing Python to perform other operations during wait times
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/async.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
burgers = await get_burgers(2)
```

----------------------------------------

TITLE: Complete Partial Update Workflow
DESCRIPTION: Full workflow for applying partial updates, including model retrieval, update generation, and database storage
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-updates.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
# Complete partial update workflow demonstration
```

----------------------------------------

TITLE: Variable Type Hinting with Class
DESCRIPTION: Demonstrates how to use a class (`Person`) as a type hint for a variable, indicating that the variable should be an instance of that class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_18

LANGUAGE: Python
CODE:
```
one_person: Person
```

----------------------------------------

TITLE: Model Update with Pydantic copy and update
DESCRIPTION: Shows how to create a copy of an existing model and update it with new data using the update parameter
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/body-updates.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
stored_item_model.copy(update=update_data)
```

----------------------------------------

TITLE: JWT Token Generation with Scopes
DESCRIPTION: Create a JWT access token that includes requested OAuth2 scopes, enabling scope-based access control during token generation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/security/oauth2-scopes.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
access_token = create_access_token(
    data={"sub": user.username, "scopes": form_data.scopes},
    expires_delta=access_token_expires
)
```

----------------------------------------

TITLE: Type-Annotated Path Parameters with Integer Validation
DESCRIPTION: Shows how to declare path parameters with type hints for automatic type conversion and validation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Single-File FastAPI Dockerfile
DESCRIPTION: Dockerfile configuration for a single-file FastAPI application with simplified file structure
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_3

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./main.py /code/

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Installing Hypercorn with Trio Support
DESCRIPTION: This command installs Hypercorn with support for Trio, an alternative asynchronous framework to asyncio.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/deployment/manually.md#_snippet_4

LANGUAGE: bash
CODE:
```
$ pip install "hypercorn[trio]"
---> 100%
```

----------------------------------------

TITLE: Activating a Python Virtual Environment
DESCRIPTION: This command activates a Python virtual environment located in the .venv directory. It modifies the PATH variable to prioritize the environment's Python interpreter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_32

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Running Asynchronous pytest Tests
DESCRIPTION: Command line instruction to execute the asynchronous tests using the pytest test runner. Requires pytest and the pytest-anyio plugin installed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/async-tests.md#_snippet_2

LANGUAGE: console
CODE:
```
$ pytest

---> 100%
```

----------------------------------------

TITLE: Adding Metadata to UploadFile in FastAPI
DESCRIPTION: This code shows how to add additional metadata to an UploadFile parameter using the File class in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
{* ../../docs_src/request_files/tutorial001_03_an_py39.py hl[9,15] *}
```

----------------------------------------

TITLE: Updated PATH after Python install (Windows)
DESCRIPTION: Example of how the PATH variable might be updated after installing Python in a custom directory on Windows.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/environment-variables.md#_snippet_4

LANGUAGE: plaintext
CODE:
```
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32;C:\opt\custompython\bin
```

----------------------------------------

TITLE: Database Session Dependency with Yield in Python
DESCRIPTION: Create a database session dependency that opens a session before path operation and closes it after response is sent
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/dependencies/dependencies-with-yield.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

----------------------------------------

TITLE: Example requirements.txt file
DESCRIPTION: This shows an example of `requirements.txt` file containing a list of Python packages with specific versions. These packages will be installed with `pip install -r requirements.txt` or `uv pip install -r requirements.txt`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_16

LANGUAGE: Text
CODE:
```
```requirements.txt
fastapi[standard]==0.113.0
pydantic==2.8.0
```
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code imports the FastAPI class, which provides the core functionality for building APIs. It is the first step in creating a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Hinting List Type (Python 3.6+ via typing) - Python
DESCRIPTION: For Python versions 3.6 and later, this snippet shows how to hint a list containing elements of a specific type (`str`) using `List` imported from the `typing` module. This indicates the parameter `items` is a list where each item is expected to be a string.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
from typing import List

def process_items(items: List[str]):
    for item in items:
        print(item.upper())
```

----------------------------------------

TITLE: Unpacking Dictionary to Create New Pydantic Model
DESCRIPTION: Shows how to use the ** operator to unpack a dictionary when creating a new Pydantic model instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/extra-models.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
UserInDB(**user_dict)
```

----------------------------------------

TITLE: Creating and Using Pydantic User Model
DESCRIPTION: Shows how to instantiate a Pydantic model using direct initialization and dictionary unpacking
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/features.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: Command line instructions for installing FastAPI package using pip, which is necessary to create FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_2

LANGUAGE: Shell
CODE:
```
$ pip install fastapi

---> 100%
```

----------------------------------------

TITLE: Running FastAPI with Uvicorn server manually
DESCRIPTION: Example showing how to manually run a FastAPI application using the Uvicorn ASGI server. The command specifies the import path to the app object and sets the host and port for the server.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/manually.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ uvicorn main:app --host 0.0.0.0 --port 80
```

----------------------------------------

TITLE: Default Swagger UI Configuration in FastAPI
DESCRIPTION: The default Swagger UI configuration parameters used by FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/configure-swagger-ui.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
swagger_ui_default_parameters = {
    "dom_id": "#swagger-ui",
    "layout": "BaseLayout",
    "deepLinking": True,
    "showExtensions": True,
    "showCommonExtensions": True,
}
```

----------------------------------------

TITLE: Creating a Virtual Environment with venv
DESCRIPTION: This command uses the Python venv module to create a virtual environment in a directory named .venv within the project.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ python -m venv .venv
```

----------------------------------------

TITLE: Access Enum Member String Value (Python)
DESCRIPTION: This snippet shows how to access the underlying string value of an enum member received as a path parameter using the `.value` attribute (e.g., `model_name.value`). This retrieves the actual string ('alexnet', 'resnet', or 'lenet') that was passed in the URL path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: Python
CODE:
```
return {"model_name": model_name, "message": f"Have some residuals {model_name.value}"}
```

----------------------------------------

TITLE: Declaring Union Types with Type Hints in Python 3.8+
DESCRIPTION: This example shows how to declare a variable that can be of multiple types using the Union type from the typing module in Python 3.8 and above.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_12

LANGUAGE: Python
CODE:
```
from typing import Union

item: Union[int, str] = 1
```

----------------------------------------

TITLE: Importing BaseModel from Pydantic
DESCRIPTION: Imports the `BaseModel` class from the `pydantic` library. This is the base class for creating data models that define the structure and validation rules for request bodies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body.md#_snippet_0

LANGUAGE: Python
CODE:
```
from pydantic import BaseModel
```

----------------------------------------

TITLE: Query Parameter with Title
DESCRIPTION: This snippet adds a title to the query parameter using the `title` parameter of the `Query` class. This title will be included in the generated OpenAPI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/query-params-str-validations.md#_snippet_10

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Optional[str] = Query(None, title="Query string")
):
    return {"q": q}
```

----------------------------------------

TITLE: Asynchronous FastAPI Route Using Await
DESCRIPTION: Complete example of an asynchronous FastAPI route handler that uses await to call another asynchronous function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers
```

----------------------------------------

TITLE: Building Docker Image
DESCRIPTION: Command to build the Docker image using the Dockerfile in the current directory. The `-t` flag is used to tag the image with a name (`myimage`).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_14

LANGUAGE: bash
CODE:
```
docker build -t myimage .
```

----------------------------------------

TITLE: Creating WebSocket endpoint
DESCRIPTION: Creates a WebSocket endpoint in a FastAPI application. It shows how to define a WebSocket route using the @app.websocket decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/advanced/websockets.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    ...
```

----------------------------------------

TITLE: Installing Uvicorn ASGI server
DESCRIPTION: This command installs Uvicorn, an ASGI server, which is required for running FastAPI applications in production. The [standard] option installs recommended dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/index.md#_snippet_1

LANGUAGE: Shell
CODE:
```
pip install uvicorn[standard]
```

----------------------------------------

TITLE: Initializing a List with String Type - Python 3.9+
DESCRIPTION: This snippet initializes a list named `items` where each element is a string. It uses the built-in `list` type with type parameters to specify the type of elements within the list.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_6

LANGUAGE: Python
CODE:
```
items: list[str] = ["foo", "bar"]
```

----------------------------------------

TITLE: StreamingResponse in FastAPI
DESCRIPTION: Shows how to use StreamingResponse to stream the response body using an asynchronous generator or a normal generator/iterator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()

async def fake_video_streamer():
    for i in range(10):
        yield b"some fake video bytes"

@app.get("/")
async def main():
    return StreamingResponse(fake_video_streamer())
```

----------------------------------------

TITLE: Install Uvicorn ASGI Server
DESCRIPTION: Installs the Uvicorn ASGI server with standard dependencies using pip. This includes uvloop for improved performance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/manually.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Extended FastAPI App (Python 3.10+ Annotated)
DESCRIPTION: This is an extended FastAPI application example with multiple route operations, including GET and POST requests, error handling, and header requirements. It uses Python 3.10+ syntax with Annotated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/testing.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Annotated, Union

from fastapi import Depends, FastAPI, Header, HTTPException
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None


async def verify_token(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")


async def verify_key(x_key: Annotated[str, Header()]):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="Invalid X-Key header")
    return x_key


@app.get("/items/")
async def read_items(commons: Annotated[str, Depends(verify_key)]):
    return {"message": "Items"}


@app.post("/items/")
async def create_item(
    item: Item,
    commons: Annotated[str, Depends(verify_key)],
    x_token: Annotated[str, Header()],
):
    return item
```

----------------------------------------

TITLE: Running Tests with Coverage Reports
DESCRIPTION: Command to execute tests and generate HTML coverage reports for the FastAPI codebase. This creates a directory of reports that can be viewed in a browser to assess test coverage.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ bash scripts/test-cov-html.sh
```

----------------------------------------

TITLE: Create a Path Operation for Testing in FastAPI
DESCRIPTION: This snippet creates a simple path operation to test if the documentation is working correctly. It defines a GET endpoint `/test` that returns a dictionary with a message.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-docs-ui-assets.md#_snippet_2

LANGUAGE: Python
CODE:
```
@app.get("/test")
async def test():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Installing Pytest
DESCRIPTION: This command shows how to install pytest using pip. It is necessary to create and activate a virtual environment before installing pytest.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/testing.md#_snippet_9

LANGUAGE: bash
CODE:
```
pip install pytest
```

----------------------------------------

TITLE: Creating a FastAPI Instance
DESCRIPTION: This code snippet shows how to create an instance of the FastAPI class, which serves as the main entry point for defining API endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_2

LANGUAGE: Python
CODE:
```
app = FastAPI()
```

----------------------------------------

TITLE: Relative Import with Triple Dots
DESCRIPTION: This code snippet demonstrates a relative import using triple dots, which signifies importing from the grandparent package of the current module. It attempts to import the `get_token_header` function from the `dependencies` module located two levels up in the directory structure.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/bigger-applications.md#_snippet_9

LANGUAGE: Python
CODE:
```
from ...dependencies import get_token_header
```

----------------------------------------

TITLE: Query Parameter List Using List Type
DESCRIPTION: Declares a query parameter `q` that accepts a list of values, using the `list` type directly instead of `List[str]`. Note that FastAPI will not check the contents of the list in this case.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_9

LANGUAGE: Python
CODE:
```
from typing import List, Optional

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: list = Query(default=["foo", "bar"])):
    return {"q": q}
```

----------------------------------------

TITLE: Importing FastAPI Web Framework in Python
DESCRIPTION: Initial step of importing the FastAPI class to create a web application. This is the foundation for building a web API with FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/first-steps.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Reading Environment Variables in Python
DESCRIPTION: This Python snippet demonstrates how to read the value of an environment variable named `MY_NAME` using `os.getenv()`. It provides a default value of "World" if the environment variable is not set, preventing a `None` value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/environment-variables.md#_snippet_0

LANGUAGE: python
CODE:
```
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")
```

----------------------------------------

TITLE: Importing File and UploadFile in FastAPI
DESCRIPTION: This snippet shows how to import the `File` and `UploadFile` classes from the `fastapi` module. These classes are essential for handling file uploads in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import File, UploadFile
```

----------------------------------------

TITLE: Installing WebSockets
DESCRIPTION: Installs the `websockets` library using pip. This is a necessary dependency for using WebSockets in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/websockets.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
"$ pip install websockets

---> 100%"
```

----------------------------------------

TITLE: Return Enum Member in JSON Response (FastAPI, Python)
DESCRIPTION: This snippet shows that you can include an enum member (like `model_name`) directly in a dictionary returned by a FastAPI path operation. FastAPI automatically serializes the enum member to its corresponding string value in the final JSON response sent to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: Python
CODE:
```
if model_name is ModelName.alexnet:
    return {"model_name": model_name, "message": "Deep Learning FTW!"}
elif model_name.value == "lenet":
    return {"model_name": model_name, "message": "LeNet-5 works great"}
else:
    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Define Form parameters in FastAPI path operation
DESCRIPTION: Define function parameters using `Form()` to receive data sent as form fields (e.g., `application/x-www-form-urlencoded`) in a FastAPI path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-forms.md#_snippet_2

LANGUAGE: python
CODE:
```
async def login(username: str = Form(), password: str = Form()):
    return {"username": username}
```

----------------------------------------

TITLE: Docker Container Startup Command
DESCRIPTION: Launches FastAPI application using Uvicorn with specific host and port configurations
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_0

LANGUAGE: Dockerfile
CODE:
```
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]
```

----------------------------------------

TITLE: Adding Title Metadata to Query Parameter in FastAPI
DESCRIPTION: This code demonstrates how to add a title to a query parameter for better documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
q: Union[str, None] = Query(default=None, title="Query string")
```

----------------------------------------

TITLE: Setting OpenAPI operationId in FastAPI Path Operation
DESCRIPTION: Demonstrates how to set a custom OpenAPI operationId for a path operation using the operation_id parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@app.get("/items/", operation_id="some_specific_id_you_define")
```

----------------------------------------

TITLE: Installing Uvicorn with standard extras in Python
DESCRIPTION: Command to install Uvicorn with standard extras using pip. This includes uvloop for improved performance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Using ORJSONResponse in FastAPI
DESCRIPTION: Demonstrates how to use ORJSONResponse for faster JSON serialization in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()

@app.get("/items/", response_class=ORJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Declaring Class Dependency with Annotated Type
DESCRIPTION: Shows how to declare a class dependency using Annotated type hint and Depends() in Python 3.6+
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet shows how to import the FastAPI class from the fastapi package. This is the first step in creating a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Importing File and UploadFile in FastAPI
DESCRIPTION: Imports the necessary `File` and `UploadFile` classes from the `fastapi` module to handle file uploads in path operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/request-files.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import File, UploadFile
```

----------------------------------------

TITLE: JSON Response Example
DESCRIPTION: This JSON snippet shows an example response from the /items/{item_id} endpoint, including the item_id and the query parameter q.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/index.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{"item_id": 5, "q": "somequery"}
```

----------------------------------------

TITLE: Running FastAPI app with Hypercorn using Trio
DESCRIPTION: Command to run a FastAPI application using Hypercorn with Trio as the worker class, enabling Trio-based asynchronous execution.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
$ hypercorn main:app --worker-class trio
```

----------------------------------------

TITLE: Using StreamingResponse in FastAPI
DESCRIPTION: Shows how to use StreamingResponse to return a streaming response in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()

async def fake_video_streamer():
    for i in range(10):
        yield b"some fake video bytes"

@app.get("/")
async def main():
    return StreamingResponse(fake_video_streamer())
```

----------------------------------------

TITLE: Returning a Dictionary from a FastAPI Path Operation
DESCRIPTION: This code snippet shows how to return a dictionary from a FastAPI path operation function. FastAPI automatically converts this dictionary to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_7

LANGUAGE: Python
CODE:
```
return {"message": "Hello World"}
```

----------------------------------------

TITLE: Importing FastAPI
DESCRIPTION: This code snippet demonstrates how to import the FastAPI class, which provides the core functionality for building APIs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Basic Optional Query Parameter with Type Hint
DESCRIPTION: Demonstrates declaring an optional query parameter with type hint and None default value in a FastAPI application
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
q: Union[str, None] = None
```

----------------------------------------

TITLE: Async Path Operation Function with Await
DESCRIPTION: Demonstrates declaring a path operation function with async def and using await for asynchronous library calls
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/async.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Shorthand Dependency Declaration
DESCRIPTION: Demonstrates a concise way of declaring class dependencies using Depends() without repeating the class name
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/dependencies/classes-as-dependencies.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
commons: Annotated[CommonQueryParams, Depends()]
```

----------------------------------------

TITLE: Using RedirectResponse with response_class in FastAPI
DESCRIPTION: Demonstrates how to use RedirectResponse as a response_class parameter in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer", response_class=RedirectResponse)
async def redirect_typer():
    return "https://typer.tiangolo.com"
```

----------------------------------------

TITLE: Creating Pydantic User Model in FastAPI
DESCRIPTION: Defines a Pydantic User model with username and email for authentication and user representation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class User(BaseModel):
    username: str
    email: str | None = None
```

----------------------------------------

TITLE: Returning HTMLResponse Directly in FastAPI
DESCRIPTION: Shows how to return an HTMLResponse directly from a path operation function, overriding the default behavior.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/custom-response.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

@app.get("/items/")
async def read_items():
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)
```

----------------------------------------

TITLE: Modified Dictionary Key
DESCRIPTION: This snippet shows the modified key in the dictionary from 'item_name' to 'item_price'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_11

LANGUAGE: Python
CODE:
```
... "item_price": item.price ...
```

----------------------------------------

TITLE: Example PATH variable after activating (Windows)
DESCRIPTION: This demonstrates how the PATH variable looks after activating a virtual environment in Windows. The environment's Scripts directory is prepended, prioritizing its executables.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_27

LANGUAGE: plaintext
CODE:
```
C:\Users\user\code\awesome-project\.venv\Scripts;C:\Windows\System32
```

----------------------------------------

TITLE: Running Python Script with Environment Variable (Bash)
DESCRIPTION: This snippet shows how to run a Python script after setting an environment variable MY_NAME. The first execution uses the default value because the environment variable is not set. The second execution sets MY_NAME before running the script, demonstrating how the script reads the environment variable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/environment-variables.md#_snippet_3

LANGUAGE: bash
CODE:
```
// 這裡我們還沒有設定環境變數
$ python main.py

// 因為我們沒有設定環境變數，所以我們得到的是預設值

Hello World from Python

// 但是如果我們事先建立過一個環境變數
$ export MY_NAME="Wade Wilson"

// 然後再次呼叫程式
$ python main.py

// 現在就可以讀取到環境變數了

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Docker CMD Configuration - Shell Form (Not Recommended)
DESCRIPTION: Shows the shell form of CMD instruction which should be avoided for FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/deployment/docker.md#2025-04-21_snippet_4

LANGUAGE: dockerfile
CODE:
```
CMD fastapi run app/main.py --port 80
```

----------------------------------------

TITLE: Installing Hypercorn with Trio support in Python
DESCRIPTION: Command to install Hypercorn with Trio support using pip, enabling asynchronous programming with Trio.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
$ pip install "hypercorn[trio]"
---> 100%
```

----------------------------------------

TITLE: Setting Custom Operation ID in FastAPI Path Operation
DESCRIPTION: Demonstrates how to set a custom operationId for a FastAPI path operation using the operation_id parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@app.get("/items/", operation_id="some_specific_id_you_define")
```

----------------------------------------

TITLE: Installing Hypercorn
DESCRIPTION: This command installs Hypercorn, an ASGI server that is compatible with HTTP/2.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/manually.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install hypercorn

---> 100%
```

----------------------------------------

TITLE: Using Set for Unique Tags
DESCRIPTION: Demonstrates declaring a set of unique string tags using Set from typing module
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from typing import Set

class Item(BaseModel):
    name: str
    tags: Set[str]
```

----------------------------------------

TITLE: Path Parameters with File Paths
DESCRIPTION: Handles path parameters that include full file paths using Starlette's path converter
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/files/{file_path:path}")
def read_file(file_path: str):
    return {"file_path": file_path}
```

----------------------------------------

TITLE: Pinning FastAPI to Exact Version in requirements.txt
DESCRIPTION: Shows how to pin FastAPI to an exact version (0.112.0) in a requirements.txt file, ensuring consistent dependency management.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/versions.md#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
fastapi[standard]==0.112.0
```

----------------------------------------

TITLE: Importing Path and Annotated in FastAPI (Python)
DESCRIPTION: Import Path from fastapi and Annotated from typing for use with path parameters in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Path
from typing import Annotated
```

----------------------------------------

TITLE: Mixed Query Parameter Types and Requirements
DESCRIPTION: Example of combining required, optional, and default-valued query parameters
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
def read_items(needy: str, skip: int = 0, limit: int | None = None):
    return {"needy": needy, "skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Import FastAPI Class
DESCRIPTION: This code imports the FastAPI class from the fastapi module. This class is essential for creating and configuring the API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
```

----------------------------------------

TITLE: Arbitrary Dict with Type Constraints
DESCRIPTION: Demonstrates declaring a dictionary with specific key and value type constraints
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
class Item(BaseModel):
    weights: Dict[int, float]
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: This command demonstrates how to run the FastAPI development server using the 'fastapi' CLI tool.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/first-steps.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
$ fastapi dev main.py
```

----------------------------------------

TITLE: Example HTTP Query Parameter Request
DESCRIPTION: Example of an HTTP request URL with query parameters that would trigger an error due to extra parameters.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/query-param-models.md#2025-04-21_snippet_2

LANGUAGE: http
CODE:
```
https://example.com/items/?limit=10&tool=plumbus
```

----------------------------------------

TITLE: Multiple String Validation Techniques
DESCRIPTION: Applying multiple string validations like min_length and regex pattern matching
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
q: Union[str, None] = Query(default=None, min_length=3, max_length=50, regex="^fixedquery$")
```

----------------------------------------

TITLE: FastAPI Test File Structure Example
DESCRIPTION: Demonstrates the recommended file structure for testing a FastAPI application with async capabilities
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/async-tests.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
.
├── app
│   ├── __init__.py
│   ├── main.py
│   └── test_main.py
```

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: Command to start FastAPI development server with a main.py file using uvicorn for local development
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/index.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ fastapi dev main.py
```

----------------------------------------

TITLE: Initializing OAuth2 Token Authentication in FastAPI
DESCRIPTION: Setting up a basic OAuth2 token authentication scheme with token handling and dependency injection
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/get-current-user.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
```

----------------------------------------

TITLE: Using RedirectResponse in FastAPI
DESCRIPTION: Shows how to use RedirectResponse to perform a redirect in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer")
async def redirect_typer():
    return RedirectResponse("https://typer.tiangolo.com")
```

----------------------------------------

TITLE: Synchronous Path Operation Function
DESCRIPTION: Shows how to declare a standard synchronous path operation function for libraries without await support
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/async.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Setting Default Response Class in FastAPI
DESCRIPTION: Demonstrates how to set a default response class for all routes in a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_12

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI(default_response_class=ORJSONResponse)
```

----------------------------------------

TITLE: Simple Type Hints for Primitive Types
DESCRIPTION: Shows type hints for basic Python types like int, float, bool, and bytes
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
def process_data(value: int, flag: bool, size: float, data: bytes):
    pass
```

----------------------------------------

TITLE: Using Tuple and Set Type Hints - Python
DESCRIPTION: Demonstrates how to use `typing.Tuple` and `typing.Set` to declare variables as tuples or sets with specified element types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Tuple, Set
```

LANGUAGE: Python
CODE:
```
def process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):
    pass
```

----------------------------------------

TITLE: Hinting Multiple Basic Types - Python
DESCRIPTION: This snippet shows a function accepting parameters with different basic type hints: `str` and `int`. Attempting to concatenate an integer directly with a string would be flagged as a potential error by type checkers.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
def get_name_and_age(name: str, age: int):
    return name + " is " + age
```

----------------------------------------

TITLE: Using Query with Length Validation
DESCRIPTION: Importing Query from FastAPI and applying max_length validation to a query parameter
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import Query

q: Union[str, None] = Query(default=None, max_length=50)
```

----------------------------------------

TITLE: Завантаження декількох файлів із додатковими метаданими у FastAPI
DESCRIPTION: Показує, як використовувати File() для встановлення додаткових параметрів при завантаженні декількох файлів з UploadFile у FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-files.md#_snippet_8

LANGUAGE: Python
CODE:
```
@app.post("/uploadfiles/")
async def create_upload_files(
    files: list[UploadFile] = File(description="Multiple files to upload"),
):
    return {"filenames": [file.filename for file in files]}
```

----------------------------------------

TITLE: Initializing FastAPI App and Route - Python
DESCRIPTION: Sets up a basic FastAPI application instance and defines a simple GET endpoint. This is the starting point before customizing the OpenAPI schema. Requires the `fastapi` library.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/extending-openapi.md#_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/some-path")
def some_endpoint():
    return {"message": "Hello"}
```

----------------------------------------

TITLE: Defining a Synchronous Path Operation Function in FastAPI
DESCRIPTION: This snippet demonstrates how to define a synchronous path operation function in FastAPI, as an alternative to the asynchronous version. It uses a regular def instead of async def.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/first-steps.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def read_root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Configuring Basic API Metadata in FastAPI
DESCRIPTION: This snippet demonstrates how to set basic metadata for a FastAPI application including title, description, version, terms of service, contact information, and license details.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/metadata.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI(
    title="My Super Project",
    summary="FastAPI example with metadata and docs URLs",
    description="This is a very fancy project, with auto docs for the API and everything",
    version="2.5.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpond",
        "url": "http://x-force.example.com/contact/",
        "email": "dp@x-force.example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)


@app.get("/items/")
async def read_items():
    return [{"name": "Katana"}]


@app.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "johndoe"}]


@app.get("/elements/", tags=["items"], deprecated=True)
async def read_elements():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Query Parameters with Defaults in FastAPI
DESCRIPTION: This code snippet demonstrates how to define query parameters with default values in a FastAPI endpoint. The skip and limit parameters are defined as integers with default values of 0 and 10 respectively. These parameters are automatically converted to integers and can be accessed within the function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Retrieving Current root_path in FastAPI Application
DESCRIPTION: A FastAPI application that returns the current root_path from the request scope along with a hello world message, demonstrating how to access the root_path value that was set via command line or configuration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request

app = FastAPI()


@app.get("/app")
async def read_main(request: Request):
    return {"message": "Hello World", "root_path": request.scope.get("root_path")}

```

----------------------------------------

TITLE: Using PlainTextResponse in FastAPI
DESCRIPTION: Example showing how to return plain text content by setting PlainTextResponse as the response_class. This sets the Content-Type header to text/plain.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/advanced/custom-response.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()


@app.get("/items/", response_class=PlainTextResponse)
async def read_items():
    return "Hello World"
```

----------------------------------------

TITLE: Importing WSGIMiddleware in FastAPI
DESCRIPTION: Shows how to import the WSGI middleware from FastAPI. This middleware allows mounting WSGI applications (like Flask or Django) within a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/middleware.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi.middleware.wsgi import WSGIMiddleware
```

----------------------------------------

TITLE: Copying Application Code in Dockerfile
DESCRIPTION: Copies the application code from the `./app` directory to the `/code/app` directory in the Docker container. This includes all the Python files that make up the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
COPY ./app /code/app
```

----------------------------------------

TITLE: Marking a Query Parameter as Deprecated - FastAPI
DESCRIPTION: This code snippet shows how to use the `deprecated=True` parameter in `Query` to mark a query parameter as deprecated.  The `q` parameter is still available for clients that use it, but it is marked as deprecated in the documentation. This allows the API to evolve while maintaining backward compatibility.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/query-params-str-validations.md#_snippet_13

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(
    q: Union[str, None] = Query(
        default=None,
        alias="item-query",
        title="Item query",
        description="Query to search for items",
        min_length=3,
        max_length=50,
        regex="^fixedquery",
        deprecated=True,
    )
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Defining File Parameters in FastAPI
DESCRIPTION: This snippet shows how to define file parameters in a FastAPI route using the File class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-files.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
{* ../../docs_src/request_files/tutorial001_an_py39.py hl[9] *}
```

----------------------------------------

TITLE: Initializing List Field in Pydantic Model
DESCRIPTION: Demonstrates declaring a list attribute in a Pydantic model without specifying element type
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
class Item(BaseModel):
    name: str
    tags: list
```

----------------------------------------

TITLE: Setting Custom Route Class on APIRouter in Python
DESCRIPTION: Demonstrates how to set a custom route class (TimedRoute) on an APIRouter instance. This applies the custom route handling to all routes defined on this router.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/how-to/custom-request-and-route.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
router = APIRouter(route_class=TimedRoute)
```

----------------------------------------

TITLE: Marking Query Parameter as Deprecated in FastAPI
DESCRIPTION: This snippet shows how to mark a query parameter as deprecated in the API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
q: Union[str, None] = Query(
    default=None,
    alias="item-query",
    title="Query string",
    description="Query string for the items to search in the database that have a good match",
    min_length=3,
    max_length=50,
    regex="^fixedquery$",
    deprecated=True
)
```

----------------------------------------

TITLE: Run a Python program
DESCRIPTION: This command executes the Python script named main.py. It assumes that the script is located in the current working directory and that the Python interpreter is configured to use the active virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_14

LANGUAGE: bash
CODE:
```
python main.py
```

----------------------------------------

TITLE: Comparing Enum Members
DESCRIPTION: This example demonstrates how to compare the path parameter value with the Enum members within the path operation function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    return {"model_name": model_name, "message": "Have some residuals?"}
```

----------------------------------------

TITLE: Creating Environment Variables in Windows PowerShell
DESCRIPTION: Windows PowerShell에서 환경 변수를 생성하고 사용하는 방법을 보여줍니다. $Env: 구문을 사용하여 환경 변수를 설정하고 접근합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/environment-variables.md#2025-04-21_snippet_2

LANGUAGE: powershell
CODE:
```
// Create an env var MY_NAME
$ $Env:MY_NAME = "Wade Wilson"

// Use it with other programs, like
$ echo "Hello $Env:MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Creating Virtual Environment with venv (Console)
DESCRIPTION: Uses the `python -m venv` command to create a new virtual environment in a directory named `.venv` within the current project directory. This isolates project dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_1

LANGUAGE: console
CODE:
```
python -m venv .venv
```

----------------------------------------

TITLE: Declaring an Integer Type
DESCRIPTION: This snippet demonstrates how to declare an integer type for a parameter in FastAPI. It shows the basic syntax for type hinting in Python, which FastAPI uses for data validation and conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_7

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Importing Path from FastAPI
DESCRIPTION: Demonstrates how to import the Path class from FastAPI for declaring path parameter validations and metadata
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Path
```

----------------------------------------

TITLE: Python Function with Basic Type Hints
DESCRIPTION: This function shows how to use basic Python types as type hints, including `int`, `float`, `bool`, and `bytes`. These type hints specify the expected data type for each parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/python-types.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
"""def process_data(number: int, price: float, is_active: bool, data: bytes):
    print(number, price, is_active, data)
""
```

----------------------------------------

TITLE: Modifying Dictionary Key
DESCRIPTION: This snippet shows how to modify the key in the dictionary from 'item_name' to 'item_price'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_10

LANGUAGE: Python
CODE:
```
... "item_name": item.name ...
```

----------------------------------------

TITLE: Sample requirements.txt File
DESCRIPTION: Example content of a requirements.txt file specifying package dependencies and versions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/virtual-environments.md#2025-04-21_snippet_16

LANGUAGE: text
CODE:
```
fastapi[standard]==0.113.0
pydantic==2.8.0
```

----------------------------------------

TITLE: Using PlainTextResponse in FastAPI
DESCRIPTION: Shows how to return a plain text response using PlainTextResponse in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()

@app.get("/", response_class=PlainTextResponse)
async def main():
    return "Hello World"
```

----------------------------------------

TITLE: Using Annotated for Type Hints with Metadata (Python 3.9+)
DESCRIPTION: Example of using Annotated to add metadata to type hints in Python 3.9+.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/python-types.md#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
from typing import Annotated

def say_hello(name: Annotated[str, "This is just metadata"]):
    print(f"Hello {name}")
```

----------------------------------------

TITLE: Default Swagger UI Parameters in FastAPI
DESCRIPTION: Default configuration parameters for Swagger UI interface. Defines standard settings used when generating Swagger UI documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/openapi/docs.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
swagger_ui_default_parameters
```

----------------------------------------

TITLE: Defining a Synchronous Function
DESCRIPTION: Example of defining a regular synchronous function using the def keyword.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/async.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
def get_sequential_burgers(number: int):
    # Do some sequential stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Generating Bearer Token for Authentication
DESCRIPTION: Create access token with bearer token type following OAuth2 specification
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
{
    "access_token": username,
    "token_type": "bearer"
}
```

----------------------------------------

TITLE: Deactivate a virtual environment
DESCRIPTION: Deactivates the currently active virtual environment. This returns the shell to the system's default Python environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_16

LANGUAGE: console
CODE:
```
$ deactivate
```

----------------------------------------

TITLE: Example JSON Response
DESCRIPTION: Example JSON response from the FastAPI application, showing the structure of the data returned by the API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/docker.md#_snippet_16

LANGUAGE: JSON
CODE:
```
{"item_id": 5, "q": "somequery"}
```

----------------------------------------

TITLE: Verifying Virtual Environment Activation (Linux, macOS, Windows Bash)
DESCRIPTION: This snippet demonstrates how to verify that a virtual environment has been successfully activated on Linux, macOS, or Windows Bash. It uses the `which python` command to check if the `python` executable points to the virtual environment's directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_6

LANGUAGE: console
CODE:
```
$ which python

/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Declaring a List of Strings (Python 3.8+)
DESCRIPTION: This snippet demonstrates how to declare a variable as a list of strings using the `List` type hint from the `typing` module in Python 3.8. It imports `List` from `typing` and uses `List[str]` to specify that the variable `items` is a list where each element is a string.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_6

LANGUAGE: Python
CODE:
```
from typing import List

items: List[str] = ["foo", "bar"]
```

----------------------------------------

TITLE: Response Model Exclusion Configuration
DESCRIPTION: Demonstrates excluding unset values from the response using response_model_exclude_unset parameter
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/response-model.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
@app.post("/items/", response_model_exclude_unset=True)
```

----------------------------------------

TITLE: Checking Virtual Environment Activation on Linux/macOS/Bash
DESCRIPTION: Verifies that the virtual environment is activated by checking the path of the python executable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_6

LANGUAGE: console
CODE:
```
$ which python

/home/user/code/awesome-project/.venv/bin/python
```

----------------------------------------

TITLE: Creating a WebSocket route
DESCRIPTION: Creates a WebSocket endpoint in a FastAPI application using the `@app.websocket()` decorator.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/websockets.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    ...
```

----------------------------------------

TITLE: Adding Type Hints to Function Parameters
DESCRIPTION: Demonstrates adding type hints to function parameters to improve editor autocomplete and type checking
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    return f"{first_name.title()} {last_name.title()}"
```

----------------------------------------

TITLE: Import Form from FastAPI
DESCRIPTION: Import the `Form` class from the `fastapi` library to declare form data parameters in path operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/request-forms.md#_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Form
```

----------------------------------------

TITLE: Example JSON Response
DESCRIPTION: Example JSON response from the /items/{item_id} endpoint with a query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/index.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{"item_id": 5, "q": "somequery"}
```

----------------------------------------

TITLE: Importing Form class in FastAPI
DESCRIPTION: Code snippet showing how to import the Form class from FastAPI module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request-forms.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Form
```

----------------------------------------

TITLE: Required Query Parameters
DESCRIPTION: Shows how to create mandatory query parameters by removing default values
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
def read_item(item_id: str, needy: str):
    return {"item_id": item_id, "needy": needy}
```

----------------------------------------

TITLE: Calling Function with None for Optional Parameter (Python)
DESCRIPTION: Demonstrates calling a function where a parameter is type-hinted as `Optional` and passing `None` as the argument. This call is valid because `None` is allowed by the type hint.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_14

LANGUAGE: Python
CODE:
```
say_hi(name=None)
```

----------------------------------------

TITLE: Adding String Type Hints to Function Parameters - Python
DESCRIPTION: The same function as before, but with `str` type hints added to the parameters using the `:` syntax. This addition enables better editor features like autocompletion and type checking, without changing the runtime behavior of the function. The highlighted line shows the function definition with type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Custom OpenAPI Content Type with Pydantic Model in FastAPI
DESCRIPTION: Demonstrates how to use a Pydantic model to define a JSON schema for a custom content type (YAML in this case) in the OpenAPI schema, while handling the request manually.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
from fastapi import FastAPI, Request
from pydantic import BaseModel
import yaml

class Item(BaseModel):
    name: str
    tags: list[str]

app = FastAPI()

@app.post(
    "/items/",
    openapi_extra={
        "requestBody": {
            "content": {
                "application/x-yaml": {
                    "schema": Item.model_json_schema()
                }
            }
        }
    },
)
async def create_item(request: Request):
    raw_body = await request.body()
    data = yaml.safe_load(raw_body)
    item = Item(**data)
    return item
```

----------------------------------------

TITLE: Creating and Echoing Environment Variable in Bash
DESCRIPTION: Demonstrates how to create a temporary environment variable using the `export` command and then access its value using the `echo` command in a Bash shell (common on Linux, macOS, and Windows Bash).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/environment-variables.md#_snippet_0

LANGUAGE: bash
CODE:
```
// 你可以使用以下命令创建一个名为 MY_NAME 的环境变量
$ export MY_NAME="Wade Wilson"

// 然后，你可以在其他程序中使用它，例如
$ echo "Hello $MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Sync Function Definition
DESCRIPTION: Example showing a regular synchronous function definition for comparison
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/async.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
def get_sequential_burgers(number: int):
    # Do some sequential stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Generating TypeScript Client with Modified OpenAPI - package.json
DESCRIPTION: This package.json configuration demonstrates how to generate a TypeScript client from a local, modified OpenAPI file using the openapi-ts tool. The generate-client script specifies the input OpenAPI file and the output directory for the generated client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/generate-clients.md#_snippet_8

LANGUAGE: json
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input ./openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Installing FastAPI
DESCRIPTION: This command installs the FastAPI package using pip, the Python package installer. It fetches the latest version of FastAPI and its dependencies from the Python Package Index (PyPI).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Function with Type Hints and Type Mismatch in Python
DESCRIPTION: This function demonstrates a type mismatch where an integer is concatenated with strings, which would raise an error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
def get_name_with_age(name: str, age: int):
    name_with_age = name + " is this old: " + age
    return name_with_age
```

----------------------------------------

TITLE: Using Python Context Manager with open
DESCRIPTION: Demonstrates a standard Python context manager using the `with open(...)` statement. This pattern ensures that the file is automatically closed upon exiting the `with` block, even if errors occur. This example is used to illustrate the concept of context managers, which FastAPI utilizes internally for dependencies defined with `yield`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_0

LANGUAGE: Python
CODE:
```
with open("./somefile.txt") as f:
    contents = f.read()
    print(contents)
```

----------------------------------------

TITLE: Reading Uploaded File Content Synchronously
DESCRIPTION: This snippet shows how to read the contents of an uploaded file synchronously by accessing the `file` attribute of the `UploadFile` object and calling its `read()` method. This is suitable for use inside a regular `def` function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/request-files.md#_snippet_4

LANGUAGE: Python
CODE:
```
contents = myfile.file.read()
```

----------------------------------------

TITLE: Executing Python Script and Reading Env Var in PowerShell
DESCRIPTION: Demonstrates how the Python script reads the `MY_NAME` environment variable when executed from Windows PowerShell. It shows the output when the variable is not set (using the default) and when it is set using `$Env: name = value`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/environment-variables.md#_snippet_4

LANGUAGE: powershell
CODE:
```
// 这里我们还没有设置环境变量
$ python main.py

// 因为我们没有设置环境变量，所以我们得到的是默认值

Hello World from Python

// 但是如果我们事先创建过一个环境变量
$ $Env:MY_NAME = "Wade Wilson"

// 然后再次调用程序
$ python main.py

// 现在就可以读取到环境变量了

Hello Wade Wilson from Python
```

----------------------------------------

TITLE: Using StreamingResponse with File-like Objects in FastAPI
DESCRIPTION: Demonstrates how to use StreamingResponse with file-like objects in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import csv
import io

app = FastAPI()

def iter_csv(data):
    with io.StringIO() as buffer:
        writer = csv.writer(buffer)
        writer.writerows(data)
        yield from buffer.getvalue()

@app.get("/")
def get_csv():
    data = [["A", "B"], [1, 2]]
    return StreamingResponse(
        iter_csv(data),
        media_type="text/csv",
        headers={"Content-Disposition": "attachment; filename=some_file.csv"}
    )
```

----------------------------------------

TITLE: Returning Access Token in FastAPI
DESCRIPTION: This snippet demonstrates how to return a JSON response containing the `access_token` and `token_type`. In this example, the username is used as the access token for simplicity.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
    return {"access_token": user["username"], "token_type": "bearer"}
```

----------------------------------------

TITLE: Import FastAPI App
DESCRIPTION: Shows how the uvicorn command `uvicorn main:app` imports the FastAPI app.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/deployment/manually.md#_snippet_3

LANGUAGE: Python
CODE:
```
from main import app
```

----------------------------------------

TITLE: Required Query Parameter in FastAPI
DESCRIPTION: This snippet shows how to define a required query parameter in FastAPI. By not providing a default value for the `needy` parameter, FastAPI will require it to be present in the query string.  If it's missing, FastAPI will automatically return an error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/query-params.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
"""\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get("/items/{item_id}")\nasync def read_item(item_id: str, needy: str):\n    return {"item_id": item_id, "needy": needy}\n"""
```

----------------------------------------

TITLE: Async Route Handler Definition in FastAPI
DESCRIPTION: Implementation of an async route handler that uses await to call async functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
async def read_results():
    results = await some_library()
    return results
```

----------------------------------------

TITLE: Import FastAPI app
DESCRIPTION: Illustrates how Gunicorn imports the FastAPI application. This is equivalent to the `main:app` argument passed to Gunicorn, where `main` is the Python module and `app` is the FastAPI application instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/deployment/server-workers.md#_snippet_2

LANGUAGE: Python
CODE:
```
from main import app
```

----------------------------------------

TITLE: Setting Response Headers with Direct Response Object in FastAPI
DESCRIPTION: This example demonstrates how to set custom headers by creating and returning a Response object directly in a FastAPI path operation function. This method allows for more control over the response, including status code and content.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/response-headers.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/items/")
async def read_items():
    content = {"message": "Hello World"}
    headers = {"X-Cat-Dog": "alone in the world", "Content-Language": "en-US"}
    return JSONResponse(content=content, headers=headers)
```

----------------------------------------

TITLE: Handling User Authentication in FastAPI
DESCRIPTION: Retrieves user data from the database using the submitted username and checks for user existence. Raises an HTTPException if the user is not found.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException, status

user_dict = fake_users_db.get(form_data.username)
if not user_dict:
    raise HTTPException(status_code=400, detail="Incorrect username or password")
```

----------------------------------------

TITLE: Using Requests Library for HTTP GET Request
DESCRIPTION: Demonstrates how to make a GET request using the Requests library, which inspired FastAPI's intuitive API design.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/alternatives.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
response = requests.get("http://example.com/some/url")
```

----------------------------------------

TITLE: Adding .gitignore for .venv (Console)
DESCRIPTION: Uses the `echo` command to output the character `*` and redirects (`>`) this output into a new file named `.gitignore` inside the `.venv` directory. The `*` tells Git to ignore all files and directories within `.venv`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_9

LANGUAGE: console
CODE:
```
echo "*" > .venv/.gitignore
```

----------------------------------------

TITLE: Running FastAPI app with Hypercorn in production
DESCRIPTION: Command to run a FastAPI application using Hypercorn in production mode, binding to all interfaces on port 80.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/manually.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
$ hypercorn main:app --bind 0.0.0.0:80

Running on 0.0.0.0:8080 over http (CTRL + C to quit)
```

----------------------------------------

TITLE: Boolean Query Parameter Type Conversion
DESCRIPTION: Demonstrates automatic boolean type conversion for query parameters with multiple truthy input formats
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
def read_item(item_id: str, short: bool = False):
    return {"item_id": item_id, "short": short}
```

----------------------------------------

TITLE: Using def for synchronous operations in FastAPI
DESCRIPTION: This snippet shows how to define a path operation function using `def` when interacting with a third-party library that does not support `await`. This is typically used for libraries that perform synchronous operations such as database interactions or file system access.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Deactivating the Current Virtual Environment
DESCRIPTION: This command deactivates the currently active Python virtual environment, reverting to the system's default Python interpreter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_31

LANGUAGE: bash
CODE:
```
deactivate
```

----------------------------------------

TITLE: List of Nested Models
DESCRIPTION: Demonstrates declaring a list of nested model objects
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    images: List[Image]
```

----------------------------------------

TITLE: Declaring a List of Strings (Python 3.9+)
DESCRIPTION: This snippet demonstrates how to declare a variable as a list of strings using the built-in `list` type hint in Python 3.9 and later. It utilizes the `list[str]` syntax to specify that the variable `items` is a list where each element is a string.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
items: list[str] = ["foo", "bar"]
```

----------------------------------------

TITLE: Running Python (Linux, macOS)
DESCRIPTION: Example of running python after it has been added to the path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/environment-variables.md#_snippet_5

LANGUAGE: console
CODE:
```
$ python
```

----------------------------------------

TITLE: Getting Settings function
DESCRIPTION: The following python function exemplifies getting settings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_15

LANGUAGE: Python
CODE:
```
"def get_settings():\n    return Settings()"
```

----------------------------------------

TITLE: Multiple Request Body Parameters
DESCRIPTION: Defining multiple request body parameters with different Pydantic models
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/body-multiple-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
def create_item(item: Item, user: User)
```

----------------------------------------

TITLE: Configuring Traefik Routes and Middleware | TOML
DESCRIPTION: This Traefik configuration defines an HTTP router and a middleware. The router `app-http` matches requests starting with `/api/v1`, directs them to the `app` service, and applies the `api-stripprefix` middleware to remove `/api/v1` before forwarding to the backend service. The `app` service is configured to load balance requests to a single server running the application on `http://127.0.0.1:8000`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/behind-a-proxy.md#_snippet_2

LANGUAGE: TOML
CODE:
```
[http]
  [http.middlewares]

    [http.middlewares.api-stripprefix.stripPrefix]
      prefixes = ["/api/v1"]

  [http.routers]

    [http.routers.app-http]
      entryPoints = ["http"]
      service = "app"
      rule = "PathPrefix(`/api/v1`)"
      middlewares = ["api-stripprefix"]

  [http.services]

    [http.services.app]
      [http.services.app.loadBalancer]
        [[http.services.app.loadBalancer.servers]]
          url = "http://127.0.0.1:8000"
```

----------------------------------------

TITLE: Function With Type Hints and Type Error - Python
DESCRIPTION: Demonstrates a Python function using type hints where a potential type error occurs during concatenation (string + integer), highlighting how editors can flag such issues based on type information.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
def get_name_and_age(name: str, age: int):
    return name + " is " + age
```

----------------------------------------

TITLE: Running Python Script with Incorrect Environment
DESCRIPTION: This example demonstrates running a Python script (main.py) within the wrong virtual environment, leading to an import error because the required 'sirius' package is not installed in that environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_30

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban

$ python main.py

// Error importing sirius, it's not installed 😱
Traceback (most recent call last):
    File "main.py", line 1, in <module>
        import sirius
```

----------------------------------------

TITLE: Advanced Description with Docstring in FastAPI
DESCRIPTION: This snippet shows how to use a docstring with a form feed character (`\f`) to truncate the description of a path operation in the OpenAPI documentation. This allows you to provide a detailed description for other tools while keeping the OpenAPI description concise.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/path-operation-advanced-configuration.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items():
    """
    Read items.

    This is a very important function.

    Args:
        None

    Returns:
        A list of items.
    \f
    This text will not be shown in the docs.
    """
    return [{"item": "Foo"}, {"item": "Bar"}]
```

----------------------------------------

TITLE: Tuple 및 Set 타입 힌트 예제
DESCRIPTION: 이 예제는 `tuple`과 `set`에 대한 타입 힌트를 선언하는 방법을 보여줍니다. `typing` 모듈을 사용하여 각 요소의 타입을 지정할 수 있습니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/python-types.md#_snippet_6

LANGUAGE: python
CODE:
```
from typing import Tuple, Set
```

LANGUAGE: python
CODE:
```
items_t: Tuple[int, int, str]
items_s: Set[bytes]
```

----------------------------------------

TITLE: Install PyJWT
DESCRIPTION: Installs the PyJWT library for generating and verifying JWT tokens in Python. This library is essential for implementing JWT-based authentication in the FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/security/oauth2-jwt.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install pyjwt
```

----------------------------------------

TITLE: Install FastAPI with pip
DESCRIPTION: Installs FastAPI and its standard dependencies using pip. This command directly installs the packages without using a requirements file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_10

LANGUAGE: console
CODE:
```
$ pip install "fastapi[standard]"

---> 100%
```

----------------------------------------

TITLE: Tuple and Set Type Annotations
DESCRIPTION: This example illustrates how to annotate variables as tuples and sets with specific types using the `typing` module. This snippet clarifies how to specify element types for tuples and sets.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
"from typing import Tuple, Set

items_t: Tuple[int, int, str]
items_s: Set[bytes]"
```

----------------------------------------

TITLE: Adding OpenAPI Extension to Path Operation in FastAPI
DESCRIPTION: Demonstrates how to add a custom OpenAPI extension to a specific path operation using the openapi_extra parameter in FastAPI. This allows adding metadata to the OpenAPI schema for specific endpoints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/path-operation-advanced-configuration.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI

app = FastAPI()


@app.get("/items/", openapi_extra={"x-aperture-labs-portal": "blue"})
async def read_items():
    return [{"name": "Foo"}, {"name": "Bar"}]
```

----------------------------------------

TITLE: Declaring Tuple and Set Types with Type Hints in Python 3.8+
DESCRIPTION: This example shows how to declare tuple and set variables with type hints in Python 3.8 and above, using the typing module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_8

LANGUAGE: Python
CODE:
```
from typing import Tuple, Set

items_t: Tuple[int, int, str] = (1, 2, "foo")
items_s: Set[bytes] = {b"foo", b"bar", b"baz"}
```

----------------------------------------

TITLE: Installing Hypercorn
DESCRIPTION: This command installs Hypercorn, an ASGI server that supports HTTP/2 and Trio.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/deployment/manually.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ pip install hypercorn

---> 100%
```

----------------------------------------

TITLE: Checking Python Interpreter Path (Windows PowerShell)
DESCRIPTION: This command uses `Get-Command` to determine the path of the Python interpreter being used in Windows PowerShell. It helps verify that the correct virtual environment is active.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_26

LANGUAGE: powershell
CODE:
```
Get-Command python
```

----------------------------------------

TITLE: Importing Additional WebSocket Classes - Python FastAPI
DESCRIPTION: Demonstrates importing additional WebSocket-related classes including WebSocketDisconnect and WebSocketState from the fastapi.websockets module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/websockets.md#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
from fastapi.websockets import WebSocketDisconnect, WebSocketState
```

----------------------------------------

TITLE: Path Parameter with Type Annotation
DESCRIPTION: Defines a path parameter `item_id` with a type annotation of `int`. FastAPI will automatically parse and validate the input as an integer.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Sending Multiple Files with Metadata in FastAPI
DESCRIPTION: This snippet shows how to use File() to define additional parameters for multiple UploadFile instances. It allows specifying extra metadata for each of the uploaded files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/request_files.md#_snippet_6

LANGUAGE: Python
CODE:
```
@app.post("/files/")
async def create_files(
    files: list[bytes] = File(description="Multiple files as bytes"),
):
    return {"file_sizes": [len(file) for file in files]}


@app.post("/uploadfiles/")
async def create_upload_files(
    files: list[UploadFile] = File(description="Multiple upload files"),
):
    return {"filenames": [file.filename for file in files]}
```

----------------------------------------

TITLE: Dockerfile for Larger FastAPI Applications with Multiple Files
DESCRIPTION: A Dockerfile variation for larger FastAPI applications that contain multiple files. It adjusts the destination path for app files to maintain proper directory structure for larger applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/deployment/docker.md#2025-04-21_snippet_5

LANGUAGE: Dockerfile
CODE:
```
FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9

COPY ./requirements.txt /app/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

COPY ./app /app/app
```

----------------------------------------

TITLE: Dependency Returning Value (Not Passed to Path Op) FastAPI Python
DESCRIPTION: Shows dependency functions that return values (`x_key`, `x_token`). When these dependencies are used in the `dependencies` parameter of a path operation or router, their return values are *not* passed as arguments to the final path operation function. They are primarily for side effects or verification.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import Depends

# Assume common_parameters is defined elsewhere
# async def common_parameters(...): ...

async def verify_key(x_key: str = Depends(common_parameters)):
    # ... security logic ...
    return x_key

async def verify_token(x_token: str = Depends(common_parameters)):
    # ... security logic ...
    return x_token
```

----------------------------------------

TITLE: Creating a Project Directory
DESCRIPTION: These commands create a directory structure for a new project, including creating a code directory, a project directory, and navigating into the project directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ cd
$ mkdir code
$ cd code
$ mkdir awesome-project
$ cd awesome-project
```

----------------------------------------

TITLE: Example lru_cache function
DESCRIPTION: This Python code snippet provides an example of how `lru_cache` works by caching the results of a function based on its input arguments.  Subsequent calls with the same arguments will return the cached result, avoiding re-execution of the function's code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_13

LANGUAGE: Python
CODE:
```
"from functools import lru_cache\n\n\n@lru_cache\ndef say_hi(name: str, salutation: str = \"Ms.\"):\n    return f\"Hello {salutation} {name}\""
```

----------------------------------------

TITLE: Disable Default Documentation URLs in FastAPI
DESCRIPTION: Disables the default Swagger UI and ReDoc documentation URLs by setting their respective URLs to None when creating the FastAPI application instance.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-docs-ui-assets.md#_snippet_5

LANGUAGE: Python
CODE:
```
app = FastAPI(
    title='Custom Static Files',
    openapi_url=None,
    docs_url=None,
    redoc_url=None,
)
```

----------------------------------------

TITLE: Synchronous Route Handler Definition in FastAPI
DESCRIPTION: Implementation of a synchronous route handler for non-async libraries.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/async.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
@app.get('/')
def results():
    results = some_library()
    return results
```

----------------------------------------

TITLE: Defining a Complex Data Model in FastAPI
DESCRIPTION: This code snippet shows how to define a complex data model (e.g., an Item) as a parameter in a FastAPI application. FastAPI uses this definition for data validation and conversion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Example PATH variable (Windows)
DESCRIPTION: This is an example of a PATH environment variable on Windows systems. It shows a semicolon-separated list of directories where the operating system searches for executable programs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/environment-variables.md#_snippet_7

LANGUAGE: plaintext
CODE:
```
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32
```

----------------------------------------

TITLE: Creating User Database Model
DESCRIPTION: Generate a Pydantic model representing user database entry with hashed password and user details
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/simple-oauth2.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
UserInDB(**user_dict)
```

----------------------------------------

TITLE: Returning Enum Member in FastAPI Response
DESCRIPTION: This code snippet demonstrates how to return an Enum member in a FastAPI response. FastAPI automatically converts the Enum member to its corresponding value (string in this case) before sending the response to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_8

LANGUAGE: python
CODE:
```
    return {"model_name": model_name, "message": "Have some residuals"}


@app.get("/models/{model_name}/details")
async def get_model_details(model_name: ModelName):
```

----------------------------------------

TITLE: Creating FastAPI Callback Router
DESCRIPTION: This snippet outlines the creation of an APIRouter specifically for handling callback operations. It contains structure for the paths that the external API should implement without executing any operational code, as it is purely for documentation purposes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/openapi-callbacks.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
# Create a new APIRouter
invoice_callback_router = APIRouter()
```

----------------------------------------

TITLE: Running FastAPI application with Uvicorn
DESCRIPTION: This command starts the FastAPI application using Uvicorn, an ASGI server.  The `--reload` flag enables automatic reloading of the server upon code changes, which is useful for development.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

----------------------------------------

TITLE: 타입 힌트 추가 예제
DESCRIPTION: 이 함수는 `first_name`과 `last_name` 매개변수에 타입 힌트를 추가하여 문자열임을 명시합니다. 이를 통해 에디터에서 자동 완성 및 오류 검사를 지원받을 수 있습니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/python-types.md#_snippet_1

LANGUAGE: python
CODE:
```
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Modified Return Statement with Item Price
DESCRIPTION: This code snippet shows the modified return statement in a FastAPI application, where the `item_name` key has been changed to `item_price`. This change demonstrates how the editor automatically fills in attributes and knows their types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
        ... "item_name": item.name ...
```

----------------------------------------

TITLE: Returning UJSONResponse in FastAPI
DESCRIPTION: Shows how to return a UJSONResponse from a FastAPI endpoint. UJSONResponse is an alternative JSON response that uses the ujson library for faster serialization.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/custom-response.md#_snippet_6

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import UJSONResponse

app = FastAPI()


@app.get("/items/", response_class=UJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}, {"item_id": "Bar"}]

```

----------------------------------------

TITLE: Executing FastAPI Script from Terminal Console
DESCRIPTION: Demonstrates the command-line execution of the Python script containing the FastAPI application and the `if __name__ == "__main__":` block. Running the script this way sets the `__name__` variable to `"__main__"`, triggering the uvicorn server start.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/debugging.md#_snippet_1

LANGUAGE: console
CODE:
```
$ python myapp.py
```

----------------------------------------

TITLE: Combining Response Information in FastAPI
DESCRIPTION: This code snippet shows how to combine information from response_model, status_code, and responses in FastAPI. It declares a response_model, uses the default status code 200, and adds additional information for the same response in responses, directly in the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/additional-responses.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: float


@app.post("/items/", response_model=Item, responses={
    200: {
        "content": {
            "application/json": {
                "example": {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2,
                }
            }
        },
    },
})
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Returning Enum Members in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to return Enum members in a path operation. They are automatically converted to their corresponding values (strings) before being sent to the client.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/path-params.md#_snippet_8

LANGUAGE: Python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name == ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the way"}

    return {"model_name": model_name, "message": "Have some residuals"}
```

----------------------------------------

TITLE: Creating Virtual Environment with uv (Console)
DESCRIPTION: Uses the `uv venv` command to create a new virtual environment. By default, `uv` creates the environment in a `.venv` directory. This provides an alternative to `venv`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_2

LANGUAGE: console
CODE:
```
uv venv
```

----------------------------------------

TITLE: Using response_class with Direct Response
DESCRIPTION: This code snippet shows how to use the `response_class` parameter to document the media type in OpenAPI while still returning a `Response` object directly. This allows OpenAPI to correctly document the response type, even when the response is manually constructed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/advanced/custom-response.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()


def generate_html_response() -> HTMLResponse:
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content)


@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return generate_html_response()


@app.get("/items2/")
async def read_items2():
    return generate_html_response()
```

----------------------------------------

TITLE: Checking Active Python Environment (Windows PowerShell)
DESCRIPTION: This snippet illustrates how to check the active Python environment in Windows PowerShell using the `Get-Command python` command. It displays the path to the Python executable, indicating if it's from the virtual environment or the global installation. The expected output is the path to the Python executable within the active virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/virtual-environments.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
"$ Get-Command python

C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python"
```

----------------------------------------

TITLE: Creating an Asynchronous FastAPI Application
DESCRIPTION: This Python code defines a simple FastAPI application with two asynchronous endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter. It demonstrates the basic structure of a FastAPI application using async def.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/he/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Modifying Item Name to Item Price in FastAPI
DESCRIPTION: This snippet shows how to change the returned value from item name to item price. It demonstrates how easily the data returned by a FastAPI endpoint can be modified.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/index.md#_snippet_9

LANGUAGE: Python
CODE:
```
        ... "item_name": item.name ...
```

----------------------------------------

TITLE: Using UJSONResponse in FastAPI
DESCRIPTION: Demonstrates how to use UJSONResponse for JSON serialization in a FastAPI route.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/custom-response.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI
from fastapi.responses import UJSONResponse

app = FastAPI()

@app.get("/items/", response_class=UJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]
```

----------------------------------------

TITLE: Accessing Enum Values in FastAPI
DESCRIPTION: This code snippet shows how to access the actual string value of an Enum member using the .value attribute. This is useful when you need to work with the string representation of the Enum value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_7

LANGUAGE: python
CODE:
```
    return {"model_name": model_name, "message": "Have some residuals", "model_value": model_name.value}
```

----------------------------------------

TITLE: Creating a Virtual Environment with uv
DESCRIPTION: Creates a virtual environment using the uv tool. By default, it creates the environment in a directory named '.venv'.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_2

LANGUAGE: console
CODE:
```
$ uv venv
```

----------------------------------------

TITLE: Defining Pydantic Model (Python 3.9+) - Python
DESCRIPTION: For Python versions 3.9+, this snippet shows the same Pydantic model definition but uses the newer built-in type hints like `list[int]` instead of `typing.List[int]`. This provides a more concise syntax while retaining Pydantic's validation features.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_20

LANGUAGE: Python
CODE:
```
from typing import Optional
from datetime import datetime
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str = "John Doe"
    signup_ts: Optional[datetime] = None
    friends: list[int] = []
```

----------------------------------------

TITLE: Adding max_length Validation to a Query Parameter Using Default Value
DESCRIPTION: Shows the legacy approach of using Query as a default value to add max_length validation to an optional string query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Query
from typing import Union

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, max_length=50)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Activating a Virtual Environment on Windows PowerShell
DESCRIPTION: This command activates a Python virtual environment in Windows PowerShell by executing the Activate.ps1 script. It configures the environment variables to use the virtual environment's Python interpreter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_20

LANGUAGE: powershell
CODE:
```
.venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Query Parameter with None Default and Required
DESCRIPTION: This snippet shows how to declare that the query parameter might be `None` while using the `Query` parameter. If the client sends `None` then `None` is accepted.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, min_length=3)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Installing WebSocket Dependencies in Python
DESCRIPTION: Shows how to install the necessary WebSocket library using pip.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/websockets.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ pip install websockets

---> 100%
```

----------------------------------------

TITLE: Define .env file
DESCRIPTION: This bash code snippet shows an example `.env` file containing environment variables for configuration settings like admin email and application name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/settings.md#2025-04-21_snippet_9

LANGUAGE: Bash
CODE:
```
"ADMIN_EMAIL=\"deadpool@example.com\"\nAPP_NAME=\"ChimichangApp\""
```

----------------------------------------

TITLE: Activating Virtual Environment (Windows Bash Console)
DESCRIPTION: Executes the `activate` script located in the `.venv\Scripts` directory using the `source` command, similar to Linux/macOS. This modifies the Bash session to use the virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_5

LANGUAGE: console
CODE:
```
source .venv/Scripts/activate
```

----------------------------------------

TITLE: FastAPI 어플리케이션 import
DESCRIPTION: 파이썬에서 FastAPI 어플리케이션을 import하는 방법을 보여줍니다. main.py 파일에서 app 변수를 import합니다.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/server-workers.md#_snippet_2

LANGUAGE: python
CODE:
```
from main import app
```

----------------------------------------

TITLE: Using Enum in Path Parameter
DESCRIPTION: Demonstrates how to use the defined `Enum` class as a type annotation for a path parameter. This restricts the possible values for the parameter and improves documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/path-params.md#_snippet_4

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    return {"model_name": model_name, "model_name.value": model_name.value}
```

----------------------------------------

TITLE: Importing FastAPI app for testing in test_main.py
DESCRIPTION: This snippet demonstrates how to import the FastAPI application instance from the main.py file into a test file using relative imports. This allows you to test the application's endpoints and functionality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/testing.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi.testclient import TestClient

from ..app.main import app


client = TestClient(app)


def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"Hello": "World"}
```

----------------------------------------

TITLE: Python Type Annotation Examples
DESCRIPTION: Simple type annotation examples for integer and complex model types
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/it/docs/index.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
item_id: int

item: Item
```

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: Pip command to install FastAPI with optional standard dependencies for full feature support
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/index.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "fastapi[standard]"
```

----------------------------------------

TITLE: Create Basic API with FastAPI
DESCRIPTION: Create a simple FastAPI application with two endpoints: a root endpoint that returns a greeting and an `/items/{item_id}` endpoint that returns the item ID and an optional query parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_2

LANGUAGE: python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining a Class for Type Hinting (Python)
DESCRIPTION: Defines a simple Python class `Person` with an `__init__` method. This class can then be used as a type hint for variables or parameters that are expected to be instances of this class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_16

LANGUAGE: Python
CODE:
```
class Person:
    def __init__(self, name: str):
        self.name = name
```

----------------------------------------

TITLE: Path Parameter Definition (Python 3.8)
DESCRIPTION: This snippet defines a path parameter `item_id` using `Path` and a query parameter `q` without `Query`. It demonstrates how to handle parameter order when a parameter with a default value appears before one without a default value, which requires reordering the parameters. Using `Annotated` resolves this issue.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_2

LANGUAGE: Python
CODE:
```
"from typing import Optional

from fastapi import FastAPI, Path

app = FastAPI()


@app.get(\"/items/{item_id}\")
async def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: Optional[str] = None):
    return {\"item_id\": item_id, \"q\": q}"
```

----------------------------------------

TITLE: Simple Function Example
DESCRIPTION: This example demonstrates a simple function that concatenates a first name and last name, converting each to title case. It highlights the lack of autocompletion without type hints.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_full_name(first_name, last_name):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

print(get_full_name("john", "doe"))
```

----------------------------------------

TITLE: Removing Prefixed Tag from OpenAPI Operation IDs - Python
DESCRIPTION: This Python script modifies the OpenAPI JSON file to remove the prefixed tag from operation IDs, resulting in cleaner method names in the generated client. It reads the OpenAPI JSON, iterates through the paths and operations, modifies the operation IDs, and writes the modified JSON back to the file.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/generate-clients.md#_snippet_6

LANGUAGE: python
CODE:
```
from pathlib import Path
import json

openapi_path = Path("openapi.json")

openapi = json.loads(openapi_path.read_text())

for path, path_item in openapi["paths"].items():
    for operation, operation_item in path_item.items():
        operation_id = operation_item.get("operationId")
        if not operation_id:
            continue
        tag, name = operation_id.split("-", 1)
        operation_item["operationId"] = name

openapi_path.write_text(json.dumps(openapi, indent=2))

```

----------------------------------------

TITLE: Invalid Asynchronous Function Call Without Await
DESCRIPTION: Illustrates an incorrect way to call an async function without using the await keyword, which would result in an error.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/async.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
# This won't work, because get_burgers was defined with: async def
burgers = get_burgers(2)
```

----------------------------------------

TITLE: Using Environment Variables in Bash for a Single Python Call
DESCRIPTION: This snippet demonstrates how to set an environment variable for a single call to a Python program in Bash. The environment variable is only available during the execution of the Python script.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/environment-variables.md#_snippet_3

LANGUAGE: Bash
CODE:
```
// Tạo một biến môi trường MY_NAME cho lần gọi chương trình này
$ MY_NAME="Wade Wilson" python main.py

// Bây giờ nó có thể đọc biến môi trường

Hello Wade Wilson from Python

// Biến môi trường không còn tồn tại sau đó
$ python main.py

Hello World from Python
```

----------------------------------------

TITLE: Type hinting for int in FastAPI
DESCRIPTION: This snippet demonstrates how to use type hints in FastAPI to define the type of a parameter. Here, `item_id` is declared as an integer. This type hint is used for data validation, editor support, and automatic API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/index.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Adding Description via Docstring in FastAPI Path Operation - Python
DESCRIPTION: This snippet shows how FastAPI automatically extracts the function's docstring (PEP 257) and uses it as the description for the path operation in the documentation. Docstrings can include Markdown formatting which will be rendered.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-operation-configuration.md#_snippet_4

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.post("/items/")
async def create_item(name: str):
    """
    Create an item with all the information:

    - **name**: each item must have a name
    - **description**: a long description
    - **price**: required
    - **tax**: if the item has tax, you can add it
    """
    return {"name": name}

```

----------------------------------------

TITLE: Traefik Proxy Configuration with Path Stripping
DESCRIPTION: Traefik configuration file demonstrating how to set up path prefix stripping and routing for a FastAPI application
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[http.middlewares.api-stripprefix.stripPrefix]
    prefixes = ["/api/v1"]

[http.routers.app-http]
    entryPoints = ["http"]
    service = "app"
    rule = "PathPrefix(`/api/v1`)"
    middlewares = ["api-stripprefix"]
```

----------------------------------------

TITLE: Install openapi-ts
DESCRIPTION: This command installs the openapi-ts package as a development dependency in a frontend project. openapi-ts is used to generate TypeScript client code from an OpenAPI specification.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/generate-clients.md#_snippet_1

LANGUAGE: Shell
CODE:
```
npm install @hey-api/openapi-ts --save-dev
```

----------------------------------------

TITLE: Using Python Types with FastAPI in Spanish
DESCRIPTION: Example showing how to use Python type annotations with FastAPI, demonstrating basic type declarations and Pydantic model definition for a User class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/features.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declara una variable como un str
# y obtiene soporte del editor dentro de la función
def main(user_id: str):
    return user_id


# Un modelo de Pydantic
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Reusing FastAPI's Default Exception Handlers
DESCRIPTION: This code snippet shows how to reuse FastAPI's default exception handlers. It imports the exception handlers from fastapi.exception_handlers and uses them within a custom exception handler.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/handling-errors.md#_snippet_7

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Request, status
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.exception_handlers import (
    request_validation_exception_handler
)
from fastapi.responses import JSONResponse
from pydantic import BaseModel, ValidationError

app = FastAPI()


class Item(BaseModel):
    title: str
    size: int


@app.exception_handler(ValidationError)
async def validation_exception_handler(
    request: Request, exc: ValidationError
):
    print(f"OMG! The client sent invalid data!: {exc}")
    return await request_validation_exception_handler(request, exc)


@app.post("/items/")
async def create_item(item: Item):
    return item
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare an integer parameter in a FastAPI application using Python type hints. The `item_id: int` declaration tells FastAPI to expect an integer value for the `item_id` parameter and automatically validates the input.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Dependency with yield and raise
DESCRIPTION: Demonstrates how to properly re-raise an exception caught in the `except` block of a dependency using `yield`. This ensures that FastAPI is aware of the error and can handle it appropriately.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/dependencies/dependencies-with-yield.md#_snippet_5

LANGUAGE: python
CODE:
```
async def dependency_a():
    try:
        yield
    except InternalError:
        raise
```

----------------------------------------

TITLE: Activating Virtual Environment on Linux/macOS
DESCRIPTION: This command activates a virtual environment in Linux or macOS by sourcing the activate script. It modifies the PATH environment variable to prioritize the virtual environment's binaries.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_20

LANGUAGE: shell
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Installing FastAPI Development Dependencies
DESCRIPTION: Requirements file listing development dependencies for FastAPI project. Includes all optional dependencies, test requirements, documentation requirements, pre-commit hooks configuration and playwright for screenshots.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
-e .[all]
-r requirements-tests.txt
-r requirements-docs.txt
pre-commit >=2.17.0,<5.0.0
# For generating screenshots
playwright
```

----------------------------------------

TITLE: Create Path Operation for Testing Static Files in FastAPI
DESCRIPTION: Creates a simple path operation to verify that the static files are being served correctly. This allows for testing the static file configuration.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/how-to/custom-docs-ui-assets.md#_snippet_7

LANGUAGE: Python
CODE:
```
@app.get('/test-static')
async def test_static():
    return HTML(content='<h1>Static files are working</h1>')
```

----------------------------------------

TITLE: Declaring a Union Type - Python 3.10+
DESCRIPTION: This snippet declares a variable `item` that can be either an integer or a string using the union operator `|`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_12

LANGUAGE: Python
CODE:
```
item: int | str = 123
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI package using pip, the Python package installer. It fetches the latest version of FastAPI from the Python Package Index (PyPI) and installs it along with its dependencies.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Running Hypercorn with Trio
DESCRIPTION: This command runs Hypercorn with the Trio worker class, enabling the use of Trio as the backend for the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/deployment/manually.md#_snippet_5

LANGUAGE: console
CODE:
```
$ hypercorn main:app --worker-class trio
```

----------------------------------------

TITLE: Path Parameter Containing a Path in FastAPI
DESCRIPTION: This code snippet demonstrates how to declare a path parameter that contains a file path using Starlette's path converter. The `:path` suffix in the path parameter declaration indicates that the parameter should match any path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_9

LANGUAGE: python
CODE:
```
@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
```

----------------------------------------

TITLE: Defining an Integer Parameter in FastAPI
DESCRIPTION: This code snippet demonstrates how to define an integer parameter in a FastAPI application using Python type hints. FastAPI automatically validates and converts the input to an integer.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/index.md#_snippet_5

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Modifying item name in FastAPI endpoint
DESCRIPTION: This Python code snippet shows a modification to the update_item function in FastAPI.  The original code is replaced with an alternative implementation using the item price.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/yo/docs/index.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
        ... "item_name": item.name ...

```

LANGUAGE: Python
CODE:
```
        ... "item_price": item.price ...
```

----------------------------------------

TITLE: Modified Item Price in FastAPI Response
DESCRIPTION: This code snippet demonstrates how to modify the item price in a FastAPI response. It replaces the item name with the item price.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/index.md#_snippet_9

LANGUAGE: Python
CODE:
```
        ... "item_price": item.price ...
```

----------------------------------------

TITLE: Importing Cookie from FastAPI
DESCRIPTION: Import the Cookie parameter class from FastAPI to enable cookie parameter handling in route definitions
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/cookie-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import Cookie
```

----------------------------------------

TITLE: Install httpx (Bash)
DESCRIPTION: Installs the `httpx` library using pip, which is required by FastAPI's `TestClient` internally for making simulated requests. This command is a necessary setup step before running tests with `TestClient`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/testing.md#_snippet_5

LANGUAGE: bash
CODE:
```
pip install httpx
```

----------------------------------------

TITLE: Defining an Asynchronous Function with async def in Python
DESCRIPTION: Shows how to declare a function as asynchronous using `async def`. Functions defined this way can use the `await` keyword internally and must be awaited when called from another `async def` function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/async.md#_snippet_1

LANGUAGE: Python
CODE:
```
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers
```

----------------------------------------

TITLE: Installing Uvicorn ASGI server
DESCRIPTION: This command installs Uvicorn, an ASGI server, using pip. Uvicorn is required for running FastAPI applications in a production environment. The `[standard]` extra installs commonly used dependencies for Uvicorn.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/index.md#_snippet_1

LANGUAGE: Shell
CODE:
```
pip install "uvicorn[standard]"
```

----------------------------------------

TITLE: Declaring Variables with Type Hints in Python
DESCRIPTION: This code demonstrates how to declare a variable with a type hint in Python using standard Python syntax. It shows how to define a function that accepts a string as input and returns a string, leveraging editor support for type checking and autocompletion.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id
```

----------------------------------------

TITLE: Defining an Asynchronous Path Operation Function in FastAPI
DESCRIPTION: This code snippet shows how to define an asynchronous path operation function in FastAPI. This function will be called when a GET request is made to the `/` path. It returns a dictionary, which FastAPI automatically converts to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Creating a Virtual Environment with venv
DESCRIPTION: Creates a virtual environment using Python's built-in venv module. The environment is created in a directory named '.venv' within the project directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_1

LANGUAGE: console
CODE:
```
$ python -m venv .venv
```

----------------------------------------

TITLE: Modifying Item Name to Item Price in FastAPI Response
DESCRIPTION: This code snippet shows the modified version of the previous example, where `item_name` is replaced with `item_price` in the returned dictionary. This change allows the API to return the item's price instead of its name.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/index.md#_snippet_9

LANGUAGE: Python
CODE:
```
        ... "item_name": item.name ...
```

----------------------------------------

TITLE: Initializing FastAPI and Defining Basic Routes
DESCRIPTION: This code initializes a FastAPI application and defines two GET routes: one for the root path ('/') and another for '/items/{item_id}' with a path parameter 'item_id' and an optional query parameter 'q'. It demonstrates basic route definition and parameter handling in FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/index.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Adding openapi-ts generate script to package.json
DESCRIPTION: This JSON snippet shows the `scripts` section of a `package.json` file. It defines a custom script named `generate-client` that executes the `openapi-ts` command. The command is configured to fetch the OpenAPI schema from a local FastAPI server URL, output the generated client code to `./src/client`, and use `axios` as the underlying HTTP client library.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "name": "frontend-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "generate-client": "openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios"
  },
  "author": "",
  "license": "",
  "devDependencies": {
    "@hey-api/openapi-ts": "^0.27.38",
    "typescript": "^4.6.2"
  }
}
```

----------------------------------------

TITLE: Deprecating FastAPI Endpoints
DESCRIPTION: Shows how to mark a FastAPI path operation as deprecated using the deprecated parameter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/path-operation-configuration.md#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
@app.get("/items/", deprecated=True)
```

----------------------------------------

TITLE: Define Path Operation Function (Async)
DESCRIPTION: This is a path operation function. FastAPI will call it every time it receives a request to the URL / using a GET operation. This example uses an async function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_5

LANGUAGE: Python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Initializing FastAPI Application with Custom Name
DESCRIPTION: Creates an instance of the FastAPI class and assigns it to a variable named `my_awesome_api`. This demonstrates how to customize the application instance name, which is referenced by Uvicorn when running the application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pl/docs/tutorial/first-steps.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

my_awesome_api = FastAPI()
```

----------------------------------------

TITLE: Hinting Optional Type (Python 3.6+ Explicit Union) - Python
DESCRIPTION: For Python versions 3.6+ (up to 3.9), this snippet explicitly uses `Union[str, None]` from the `typing` module to indicate that a parameter can be a `str` or `None`. This is functionally identical to `Optional[str]` but considered by some to be more explicit.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_14

LANGUAGE: Python
CODE:
```
from typing import Union

def process_item(item: Union[str, None]):
    print(item)
```

----------------------------------------

TITLE: Simple Types Declaration
DESCRIPTION: Demonstrates declaring variables with simple types such as int, float, bool and bytes.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/python-types.md#_snippet_4

LANGUAGE: Python
CODE:
```
age: int
price: float
awake: bool
file: bytes
```

----------------------------------------

TITLE: Using Settings in FastAPI Application
DESCRIPTION: Demonstrates how to use the Settings object in a FastAPI application to access configuration values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/settings.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/info")
async def info():
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email,
        "items_per_user": settings.items_per_user
    }
```

----------------------------------------

TITLE: Configuring Swagger UI - JavaScript Presets Example - JavaScript
DESCRIPTION: Provides an example of Swagger UI configuration parameters that are JavaScript objects or functions (like `presets`) rather than simple JSON-compatible values. These specific types of configurations cannot be passed directly from Python's `swagger_ui_parameters` and typically require manual modification of the generated HTML or JavaScript.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/how-to/configure-swagger-ui.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
presets: [
    SwaggerUIBundle.presets.apis,
    SwaggerUIBundle.SwaggerUIStandalonePreset
]
```

----------------------------------------

TITLE: Running FastAPI in Development Mode with CLI
DESCRIPTION: Command to start a FastAPI application in development mode, which automatically detects the FastAPI app and enables hot-reloading
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/fastapi-cli.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
fastapi dev main.py
```

----------------------------------------

TITLE: Build Docker Image from Dockerfile
DESCRIPTION: Command to build a Docker image based on the Dockerfile located in the current directory ('.'). The resulting image is tagged with the name 'myimage' for easy reference in subsequent Docker commands.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/deployment/docker.md#_snippet_4

LANGUAGE: Console
CODE:
```
docker build -t myimage .
```

----------------------------------------

TITLE: Declaring a Path Parameter with an Enum Type in FastAPI
DESCRIPTION: This code snippet shows how to declare a path parameter in a FastAPI route using the Enum class defined earlier.  The type annotation `ModelName` ensures that the path parameter `model_name` can only accept values defined in the `ModelName` Enum.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_5

LANGUAGE: python
CODE:
```
@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
```

----------------------------------------

TITLE: Relative Import Example (Triple Dot)
DESCRIPTION: Shows a relative import using triple dots, indicating a module two levels up in the package hierarchy. It attempts to import 'get_token_header' from the 'dependencies' module two directories above.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/bigger-applications.md#_snippet_10

LANGUAGE: Python
CODE:
```
from ...dependencies import get_token_header
```

----------------------------------------

TITLE: Activating Virtual Environment on Windows Bash
DESCRIPTION: Activates the virtual environment on Windows Bash (e.g., Git Bash) using the source command.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_5

LANGUAGE: bash
CODE:
```
$ source .venv/Scripts/activate
```

----------------------------------------

TITLE: Installing FastAPI
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It is a prerequisite for using FastAPI in your Python projects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/he/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ pip install fastapi

---> 100%
```

----------------------------------------

TITLE: Install python-jose with cryptography
DESCRIPTION: Installs the python-jose library with the cryptography extra, which is required for generating and verifying JWT tokens in Python.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/security/oauth2-jwt.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install python-jose[cryptography]

---> 100%
```

----------------------------------------

TITLE: Attempt to Redefine Path Operation (FastAPI, Python)
DESCRIPTION: This snippet illustrates that attempting to define the same path operation multiple times in FastAPI is not possible. The framework matches paths sequentially, and only the first defined operation for a given path will be used, subsequent definitions for the exact same path are ignored.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id, "message": "first definition"}

# This definition will be ignored
@app.get("/items/{item_id}")
async def read_item_again(item_id: str):
    return {"item_id": item_id, "message": "second definition"}
```

----------------------------------------

TITLE: Importing List from typing
DESCRIPTION: Shows how to import the `List` type from the `typing` module in Python versions prior to 3.9. This is necessary for declaring lists with specific element types.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/body-nested-models.md#_snippet_1

LANGUAGE: Python
CODE:
```
from typing import List
```

----------------------------------------

TITLE: JWT Token Generation and Handling
DESCRIPTION: This snippet shows how to generate JWT tokens for user authentication. It includes functions for creating a new access token, defining a Pydantic model for the token response, and setting up the necessary variables for JWT token creation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/security/oauth2-jwt.md#_snippet_3

LANGUAGE: Python
CODE:
```
from datetime import timedelta
from typing import Annotated

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel


app = FastAPI()


ACCESS_TOKEN_EXPIRE_MINUTES = 30


SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"  # Change this in production!
ALGORITHM = "HS256"


# to get more information go to https://passlib.readthedocs.io/en/stable/context_tutorial.html
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def get_password_hash(password):
    return pwd_context.hash(password)


def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: str | None = None


def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

----------------------------------------

TITLE: Path Order Matters in FastAPI
DESCRIPTION: This code snippet demonstrates the importance of path order in FastAPI. The `/users/me` path must be defined before `/users/{user_id}` to avoid conflicts.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Installing WebSockets Package
DESCRIPTION: Shows the command to install the required WebSockets package for implementing WebSocket functionality in FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/advanced/websockets.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
$ pip install websockets

---> 100%
```

----------------------------------------

TITLE: Path Operation Ordering
DESCRIPTION: This example demonstrates the importance of path operation order in FastAPI. The `/users/me` path must be declared before `/users/{user_id}` to avoid the latter incorrectly matching `/users/me`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/path-params.md#_snippet_2

LANGUAGE: python
CODE:
```
@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI library using pip, the Python package installer. It's a prerequisite for using FastAPI in your Python projects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/index.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pip install fastapi
```

----------------------------------------

TITLE: Defining Function Without Type Hints - Python
DESCRIPTION: This snippet shows a basic Python function definition without any type hints. It takes two arguments, processes them using string methods like `.title()`, and concatenates them. Editors and tools cannot provide specific type support for the parameters or return value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/python-types.md#_snippet_0

LANGUAGE: Python
CODE:
```
def get_full_name(first_name, last_name):
    full_name = first_name.title() + " " + last_name.title()
    return full_name
```

----------------------------------------

TITLE: Setting Environment Variable for a Single Program Invocation
DESCRIPTION: This snippet shows how to set an environment variable for a single invocation of a program. The environment variable `MY_NAME` is set to "Wade Wilson" only for the duration of the `python main.py` command. After the command completes, the environment variable is no longer set.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/environment-variables.md#_snippet_5

LANGUAGE: Shell
CODE:
```
$ MY_NAME="Wade Wilson" python main.py

Hello Wade Wilson from Python
$ python main.py

Hello World from Python
```

----------------------------------------

TITLE: List Field with Type Parameter
DESCRIPTION: This code snippet demonstrates how to declare a list field with a specific type parameter (string) in a Pydantic model. The `tags` attribute is defined as a `list` of strings.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/body-nested-models.md#_snippet_2

LANGUAGE: Python
CODE:
```
from typing import Optional

from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None
    tags: list[str] = []
```

----------------------------------------

TITLE: Define HeroUpdate Data Model
DESCRIPTION: Defines the `HeroUpdate` data model used for validating data received from clients when updating an existing hero. All fields are optional (`Optional[type] = None`) allowing clients to send only the fields they wish to update.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/sql-databases.md#_snippet_5

LANGUAGE: python
CODE:
```
from typing import Optional
from sqlmodel import SQLModel

class HeroUpdate(SQLModel):
    name: Optional[str] = None
    age: Optional[int] = None
    secret_name: Optional[str] = None
```

----------------------------------------

TITLE: OpenAPI Schema Example
DESCRIPTION: This is an example of the OpenAPI schema generated by FastAPI. It includes the OpenAPI version, API information (title and version), and paths with their corresponding operations and responses. This schema can be accessed at /openapi.json.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/first-steps.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/items/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {



...

```

----------------------------------------

TITLE: Combinando Responses Predefinidos y Personalizados en FastAPI
DESCRIPTION: Este ejemplo muestra cómo combinar responses predefinidos con responses personalizados en FastAPI utilizando la técnica de desempaquetado de diccionarios de Python.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/additional-responses.md#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
responses = {
    302: {"description": "The item was moved"},
    404: {"description": "The item was not found"},
    403: {"description": "Not enough privileges"},
}

@app.get(
    "/items/{item_id}",
    response_model=Item,
    responses={**responses, 200: {"content": {"image/png": {}}}},
)
```

----------------------------------------

TITLE: Declaring Variables with Type Hints in Python
DESCRIPTION: This code demonstrates how to declare a variable with a type hint in Python using standard Python type declarations. It allows for editor support inside the function.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/features.md#_snippet_0

LANGUAGE: Python
CODE:
```
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date
```

----------------------------------------

TITLE: Using Settings in FastAPI Application
DESCRIPTION: This code snippet demonstrates how to use the `Settings` object in a FastAPI application. It imports the `Settings` class and creates an instance of it. The settings are then accessed within a path operation function to customize the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/settings.md#_snippet_2

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

from .config import Settings

app = FastAPI()


@app.get("/")
async def read_root():
    return {"app_name": settings.app_name, "admin_email": settings.admin_email}
```

----------------------------------------

TITLE: Running Uvicorn with Workers
DESCRIPTION: This command shows how to start a Uvicorn server with multiple worker processes. The `--workers` option specifies the number of worker processes to use, allowing the application to handle more requests concurrently and utilize multi-core CPUs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/deployment/server-workers.md#_snippet_4

LANGUAGE: Console
CODE:
```
uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4
```

----------------------------------------

TITLE: Path Parameter with Data Type
DESCRIPTION: Defines a path parameter `item_id` with the data type `int`. FastAPI will automatically convert the path parameter to an integer and validate the input.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Declaring a Union Type - Python 3.8+
DESCRIPTION: This snippet declares a variable `item` that can be either an integer or a string using the `Union` type from the `typing` module.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_11

LANGUAGE: Python
CODE:
```
from typing import Union

item: Union[int, str] = 123
```

----------------------------------------

TITLE: Importing with Relative Imports in Python
DESCRIPTION: Demonstrates how to use relative imports in Python to import modules from parent directories. Shows examples with single and double dots.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/bigger-applications.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from .dependencies import get_token_header
```

LANGUAGE: Python
CODE:
```
from ..dependencies import get_token_header
```

LANGUAGE: Python
CODE:
```
from ...dependencies import get_token_header
```

----------------------------------------

TITLE: Importing Form from FastAPI
DESCRIPTION: Imports the necessary `FastAPI` class and the `Form` function/class from the `fastapi` library. `Form` is used to declare form data parameters in endpoint functions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/request-forms.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI, Form
```

----------------------------------------

TITLE: Verifying Virtual Environment Activation (Windows PowerShell)
DESCRIPTION: This snippet demonstrates how to verify that a virtual environment has been successfully activated in Windows PowerShell. It uses the `Get-Command python` command to check if the `python` executable points to the virtual environment's directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_7

LANGUAGE: console
CODE:
```
$ Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```

----------------------------------------

TITLE: Installing FastAPI with pip
DESCRIPTION: This command installs the FastAPI package using pip, the Python package installer. It downloads and installs the latest version of FastAPI from the Python Package Index (PyPI).
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ pip install fastapi
```

----------------------------------------

TITLE: Using response_model_include and response_model_exclude in FastAPI
DESCRIPTION: This example shows how to use response_model_include and response_model_exclude parameters to include or exclude specific attributes from the response model. It uses sets of attribute names to specify which fields to include or exclude.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: float = 10.5

app = FastAPI()

items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {"name": "Bar", "description": "The Bar fighters", "price": 62, "tax": 20.2},
    "baz": {
        "name": "Baz",
        "description": "There goes my baz",
        "price": 50.2,
        "tax": 10.5,
    },
}

@app.get(
    "/items/{item_id}/name",
    response_model=Item,
    response_model_include={"name", "description"},
)
async def read_item_name(item_id: str):
    return items[item_id]

@app.get("/items/{item_id}/public", response_model=Item, response_model_exclude={"tax"})
async def read_item_public_data(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Using Dict Type Hint - Python
DESCRIPTION: Explains how to use `typing.Dict` to declare a variable as a dictionary with specified types for both keys and values, such as a dictionary with string keys and float values.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/python-types.md#_snippet_7

LANGUAGE: Python
CODE:
```
from typing import Dict
```

LANGUAGE: Python
CODE:
```
def process_prices(prices: Dict[str, float]):
    for item_name, item_price in prices.items():
        print(f"{item_name}: {item_price}")
```

----------------------------------------

TITLE: Deprecated Query Parameter
DESCRIPTION: Marking a query parameter as deprecated in FastAPI documentation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
q: Union[str, None] = Query(default=None, deprecated=True)
```

----------------------------------------

TITLE: Example JavaScript Code Snippet
DESCRIPTION: Example JavaScript code snippet showing the beginning of a ReDoc standalone JavaScript file. This is used to verify that static files are being served correctly.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/how-to/custom-docs-ui-assets.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
/*! For license information please see redoc.standalone.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("null")):
```

----------------------------------------

TITLE: Body with Multiple Examples
DESCRIPTION: Demonstrates how to pass multiple examples for the expected data in `Body()`. This example shows how to define a request body with multiple examples for the API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/schema-extra-example.md#_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Optional

from fastapi import Body, FastAPI

app = FastAPI()


@app.post("/items/")
async def create_item(
    item: str = Body(
        examples=[
            {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 50.2,
                "tax": 3.2,
            },
            {
                "name": "Bar",
                "price": 62,
                "description": "The Bar fighters",
                "tax": 2.2,
            },
        ]
    ),
):
    return item
```

----------------------------------------

TITLE: Get Enum Value
DESCRIPTION: This example demonstrates how to get the string value of an Enum member using `.value`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/path-params.md#_snippet_6

LANGUAGE: python
CODE:
```
    return {"model_name": model_name, "message": "Have some residuals": model_name.value}
```

----------------------------------------

TITLE: Setting up HTTP Basic Authentication in FastAPI
DESCRIPTION: This snippet shows how to import and set up HTTP Basic Authentication in a FastAPI application. It creates a security scheme and uses it with a path operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/security/http-basic-auth.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import Depends, FastAPI
from fastapi.security import HTTPBasic, HTTPBasicCredentials

app = FastAPI()

security = HTTPBasic()


@app.get("/users/me")
def read_current_user(credentials: HTTPBasicCredentials = Depends(security)):
    return {"username": credentials.username, "password": credentials.password}
```

----------------------------------------

TITLE: Using a Set for Unique Items in Python 3.10+
DESCRIPTION: Declaration of a field as a set of strings, which ensures all elements are unique even if duplicates are provided in the request.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/tutorial/body-nested-models.md#2025-04-21_snippet_3

LANGUAGE: Python
CODE:
```
tags: set[str]
```

----------------------------------------

TITLE: Declaring a Complex Item Model in FastAPI
DESCRIPTION: This code snippet shows how to declare a more complex item model in FastAPI using Python type hints. The `item: Item` syntax indicates that the `item` parameter should be an instance of the `Item` class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/he/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: Updating PATH during Python Installation (Linux, macOS)
DESCRIPTION: This snippet illustrates how the PATH environment variable is updated during Python installation on Linux and macOS. It shows the addition of the Python installation directory to the PATH, allowing the system to find the Python executable.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/environment-variables.md#_snippet_8

LANGUAGE: plaintext
CODE:
```
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin
```

----------------------------------------

TITLE: Example JSON Response from FastAPI - JSON
DESCRIPTION: This snippet shows the expected JSON response structure when accessing the root endpoint of a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/first-steps.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{"message": "Hello World"}
```

----------------------------------------

TITLE: Checking Virtual Environment Activation on PowerShell
DESCRIPTION: Verifies that the virtual environment is activated by checking the path of the python executable using Get-Command.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_7

LANGUAGE: powershell
CODE:
```
$ Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```

----------------------------------------

TITLE: Declaring Path Parameter with Query Parameter (Python)
DESCRIPTION: Defines a path operation function (`read_items`) with a path parameter `item_id` and a query parameter `title`. It demonstrates how to declare parameters within the function signature.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params-numeric-validations.md#_snippet_1

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_items(item_id: int,
    title: str | None = None):
```

----------------------------------------

TITLE: Checking Python Interpreter Path (Linux/macOS/Bash)
DESCRIPTION: This command uses `which` to determine the path of the Python interpreter being used. It helps verify that the correct virtual environment is active.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_25

LANGUAGE: bash
CODE:
```
which python
```

----------------------------------------

TITLE: OpenAPI Schema with Automatically Added root_path Server
DESCRIPTION: JSON example showing how FastAPI automatically inserts a server with the root_path value at the beginning of the servers list in the OpenAPI schema.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/advanced/behind-a-proxy.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
    "openapi": "3.1.0",
    // Más cosas aquí
    "servers": [
        {
            "url": "/api/v1"
        },
        {
            "url": "https://stag.example.com",
            "description": "Entorno de pruebas"
        },
        {
            "url": "https://prod.example.com",
            "description": "Entorno de producción"
        }
    ],
    "paths": {
            // Más cosas aquí
    }
}
```

----------------------------------------

TITLE: Installing another specific package version using pip
DESCRIPTION: This command shows how to install a different specific version of the same Python package using pip. This can lead to conflicts if not managed with virtual environments.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_18

LANGUAGE: console
CODE:
```
$ pip install "harry==3"
```

----------------------------------------

TITLE: Deactivating Virtual Environment
DESCRIPTION: This snippet demonstrates how to deactivate a virtual environment, which returns the system to using the global Python environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_15

LANGUAGE: console
CODE:
```
$ deactivate
```

----------------------------------------

TITLE: Editing external links in FastAPI documentation
DESCRIPTION: Instructions on how to edit the external_links.yml file to share articles, videos, or podcasts about FastAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/help-fastapi.md#_snippet_0

LANGUAGE: YAML
CODE:
```
https://github.com/fastapi/fastapi/edit/master/docs/en/data/external_links.yml
```

----------------------------------------

TITLE: Query Parameter with Regular Expression Validation
DESCRIPTION: This code shows how to use the `regex` parameter of the `Query` class to validate a string query parameter against a regular expression.  The regular expression is used to ensure that the input conforms to a specific pattern.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/query-params-str-validations.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI, Query

app = FastAPI()


@app.get("/items/")
async def read_items(q: Union[str, None] = Query(default=None, regex="^fixedquery$")):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results
```

----------------------------------------

TITLE: Advanced Description from Docstring
DESCRIPTION: This snippet shows how to limit the lines used from a docstring for the OpenAPI description of a route operation.  It uses the form feed character (`\f`) to restrict the output used by OpenAPI.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/path-operation-advanced-configuration.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/")
async def read_items():
    """
    Read items.

    This is a long description for read_items.
    It can have multiple lines.
    You can use markdown here.

    \f

    This part will be hidden from OpenAPI.
    It can be used by other documentation generators like Sphinx.
    """
    return [{"name": "Foo"}, {"name": "Bar"}]
```

----------------------------------------

TITLE: PATH variable example (Windows)
DESCRIPTION: Example of a PATH environment variable in Windows, showing a list of directories separated by semicolons.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/environment-variables.md#_snippet_2

LANGUAGE: plaintext
CODE:
```
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32
```

----------------------------------------

TITLE: Pydantic Model Example
DESCRIPTION: This code snippet demonstrates the use of Pydantic for data validation and parsing. A `User` model is defined with type-annotated attributes, and Pydantic automatically validates and converts the input data to the correct types. This ensures data integrity and simplifies data handling in Python applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/python-types.md#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
"from typing import List

from pydantic import BaseModel


class Image(BaseModel):
    url: str
    name: str


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: List[str] = []
    image: Image | None = None


class User(BaseModel):
    username: str
    full_name: str | None = None
    email: str | None = None
    items: List[Item]"
```

----------------------------------------

TITLE: Defining a Path Operation Function (Async)
DESCRIPTION: This code snippet shows how to define an asynchronous path operation function. This function will be called whenever FastAPI receives a GET request to the `/` URL. It returns a dictionary that will be converted to JSON.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: python
CODE:
```
async def root():
    return {"message": "Hello World"}
```

----------------------------------------

TITLE: Declaring Path Parameter with Type Hinting in FastAPI
DESCRIPTION: This snippet showcases how to declare a path parameter with a type hint, specifying that the `item_id` should be an integer.  FastAPI uses this type hint for data validation and conversion. If the provided value is not an integer, FastAPI will automatically return an error response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/path-params.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Rendering FastAPI Team Members with Jinja2 Loop
DESCRIPTION: This code renders a list of FastAPI team members using Jinja2 templating. It iterates through team members and displays their GitHub profile information including avatar and username.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_1

LANGUAGE: jinja2
CODE:
```
<div class="user-list user-list-center">

{% for user in members["members"] %}

<div class="user"><a href="{{ user.url }}" target="_blank"><div class="avatar-wrapper"><img src="{{ user.avatar_url }}"/></div><div class="title">@{{ user.login }}</div></a></div>

{% endfor %}

</div>
```

----------------------------------------

TITLE: Installing Packages from requirements.txt with pip
DESCRIPTION: This command installs Python packages from a requirements.txt file using pip.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_12

LANGUAGE: Shell
CODE:
```
$ pip install -r requirements.txt
---> 100%
```

----------------------------------------

TITLE: Navigating to a Project Directory
DESCRIPTION: This command changes the current directory to the 'prisoner-of-azkaban' project directory. It's a standard way to navigate the file system using the command line.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_29

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban
```

----------------------------------------

TITLE: Checking Virtual Environment Activation (Windows PowerShell)
DESCRIPTION: Runs the `Get-Command python` command to show information about the `python` executable that PowerShell will use. If the virtual environment is active, the path should point inside the `.venv\Scripts` directory. The output shows an example of a successful check.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/virtual-environments.md#_snippet_7

LANGUAGE: console
CODE:
```
Get-Command python

C:\Users\user\code\awesome-project\.venv\Scripts\python
```

----------------------------------------

TITLE: Translating Note Blocks
DESCRIPTION: This snippet demonstrates how to translate special blocks of notes, tips, and others by keeping the same line and adding the translation after a vertical bar. This ensures the original formatting is preserved while providing the translated text.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/llm-prompt.md#_snippet_0

LANGUAGE: Text
CODE:
```
/// note | Nota
```

----------------------------------------

TITLE: Modified Return Data
DESCRIPTION: This code snippet shows the modified version of the return data, where `item.name` is replaced with `item.price`. This change reflects a modification in the data being returned by the API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/index.md#_snippet_8

LANGUAGE: Python
CODE:
```
        ... "item_price": item.price ...
```

----------------------------------------

TITLE: Function with Type Hints and Error
DESCRIPTION: This example demonstrates how type hints can help identify errors in your code. The editor can detect that an integer is being used where a string is expected.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_2

LANGUAGE: Python
CODE:
```
def get_name_with_age(name: str, age: int):
    name_with_age = name + " is this old: " + age
    return name_with_age
```

----------------------------------------

TITLE: Subclassing Starlette in FastAPI
DESCRIPTION: FastAPI is a subclass of Starlette, meaning any additional Starlette code will also work in FastAPI. This allows for seamless integration and utilization of Starlette's features within a FastAPI application.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fa/docs/features.md#_snippet_3

LANGUAGE: Python
CODE:
```
‍‍`FastAPI` در واقع یک زیرکلاس از `Starlette` است.
```

----------------------------------------

TITLE: JSON Response with Root Path
DESCRIPTION: Example JSON response from the FastAPI application, showing the message and the root_path.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "message": "Hello World",
    "root_path": "/api/v1"
}
```

----------------------------------------

TITLE: PATH variable before virtual environment activation (Windows)
DESCRIPTION: This shows the typical PATH variable content before activating a virtual environment on Windows systems. It lists the directories where the system searches for executable programs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/virtual-environments.md#_snippet_24

LANGUAGE: text
CODE:
```
C:\Windows\System32
```

----------------------------------------

TITLE: Function Parameters Without Type Hints - Python
DESCRIPTION: Shows the syntax for defining function parameters in Python without explicit type annotations, representing the traditional way parameters were declared.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/python-types.md#_snippet_1

LANGUAGE: Python
CODE:
```
first_name, last_name
```

----------------------------------------

TITLE: Translating Tip Blocks
DESCRIPTION: This snippet shows the translation of a 'tip' block. The original English text is followed by a vertical bar and then the Spanish translation. This pattern is used consistently for all similar blocks.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/llm-prompt.md#_snippet_1

LANGUAGE: Text
CODE:
```
/// tip | Consejo
```

----------------------------------------

TITLE: Path Overriding Prevention in FastAPI
DESCRIPTION: This code snippet shows that you cannot override a path operation in FastAPI. The first defined path will always be executed.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    return {"item_id": "First"}


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    return {"item_id": "Second"}
```

----------------------------------------

TITLE: Making a GET request with Requests
DESCRIPTION: This snippet demonstrates how to make a GET request to a URL using the Requests library in Python. It shows the simplicity and intuitiveness of the library's API.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/alternatives.md#_snippet_0

LANGUAGE: Python
CODE:
```
response = requests.get("http://example.com/some/url")
```

----------------------------------------

TITLE: Activating a Virtual Environment (Windows PowerShell)
DESCRIPTION: This command activates the virtual environment in Windows PowerShell by running the Activate.ps1 script.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_4

LANGUAGE: PowerShell
CODE:
```
$ .venv\Scripts\Activate.ps1
```

----------------------------------------

TITLE: Calling Function with Required Optional Parameter (Error)
DESCRIPTION: An example demonstrating that a function parameter with an `Optional` type hint is still required if it doesn't have a default value, resulting in a `TypeError` if not provided.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/python-types.md#_snippet_5

LANGUAGE: Python
CODE:
```
say_hi() # Oh, nein, das löst einen Fehler aus! 😱
```

----------------------------------------

TITLE: Declaring a Pydantic Model Parameter in FastAPI
DESCRIPTION: This code snippet shows how to declare a parameter that is a Pydantic model in a FastAPI application. The `item: Item` declaration indicates that FastAPI should expect an `Item` object as input and automatically handle the validation and serialization of the model.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/index.md#_snippet_6

LANGUAGE: Python
CODE:
```
item: Item
```

----------------------------------------

TITLE: List Type Parameters in Python
DESCRIPTION: Demonstrates how to import and use List type from typing module for type annotations in Python versions before 3.9.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/tutorial/body-nested-models.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from typing import List
```

----------------------------------------

TITLE: Install passlib with bcrypt
DESCRIPTION: Install the `passlib` library with bcrypt support. Passlib is a comprehensive library for handling password hashing and verification, supporting various algorithms including bcrypt.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/tutorial/security/oauth2-jwt.md#_snippet_1

LANGUAGE: bash
CODE:
```
pip install "passlib[bcrypt]"
```

----------------------------------------

TITLE: Conflicting Path Definitions
DESCRIPTION: Illustrates a conflicting path definition where the first path will always be used because it matches first. The second path will never be reached.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: Python
CODE:
```
@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}
```

----------------------------------------

TITLE: Example PATH variable (Linux, macOS)
DESCRIPTION: This is an example of a PATH environment variable on Linux and macOS systems. It shows a colon-separated list of directories where the operating system searches for executable programs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/environment-variables.md#_snippet_6

LANGUAGE: plaintext
CODE:
```
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
```

----------------------------------------

TITLE: Creating and Using Environment Variables in PowerShell
DESCRIPTION: This snippet demonstrates how to create and use environment variables in PowerShell. It shows how to set an environment variable using `$Env:` and then access it using the `echo` command.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/environment-variables.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
// Tạo một biến môi trường MY_NAME
$ $Env:MY_NAME = "Wade Wilson"

// Sử dụng nó với các chương trình khác, như là
$ echo "Hello $Env:MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Markdown link to FastAPI Tutorial
DESCRIPTION: A simple markdown link directing users to the FastAPI tutorial, which is recommended for those looking to learn FastAPI rather than browsing the reference documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/reference/index.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[FastAPI Tutorial](https://fastapi.tiangolo.com/tutorial/)
```

----------------------------------------

TITLE: Specifying Python Package Dependencies for FastAPI
DESCRIPTION: This code snippet defines the required Python packages and their version constraints for the FastAPI project. It includes httpx for HTTP client functionality and tests, as well as ruff for linting and generating documentation versions.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/requirements-docs-tests.txt#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
# For mkdocstrings and tests
httpx >=0.23.0,<0.28.0
# For linting and generating docs versions
ruff ==0.11.2
```

----------------------------------------

TITLE: Declaring a Class as a Type
DESCRIPTION: Demonstrates how to declare a class as a type for a variable in Python. This allows for editor support and type checking when working with instances of the class.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/python-types.md#_snippet_16

LANGUAGE: Python
CODE:
```
class Person:
    def __init__(self, name: str):
        self.name = name
```

----------------------------------------

TITLE: Serving Multi-language Documentation - Console
DESCRIPTION: Command to serve the built documentation locally for preview, specifically for viewing translated content.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/contributing.md#2025-04-21_snippet_12

LANGUAGE: console
CODE:
```
$ python ./scripts/docs.py serve

Warning: this is a very simple server. For development, use mkdocs serve instead.
This is here only to preview a site with translations already built.
Make sure you run the build-all command first.
Serving at: http://127.0.0.1:8008
```

----------------------------------------

TITLE: Example PATH variable on Linux/macOS
DESCRIPTION: This shows an example of the PATH environment variable on Linux/macOS before activating a virtual environment. It lists the directories where the operating system searches for executable programs.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_23

LANGUAGE: plaintext
CODE:
```
/usr/bin:/bin:/usr/sbin:/sbin
```

----------------------------------------

TITLE: Custom Exception Handler JSON Response Example
DESCRIPTION: This is an example of the JSON response returned by the custom `unicorn_exception_handler` when a `UnicornException` is raised, along with a 418 HTTP status code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/handling-errors.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{"message": "Oops! yolo did something. There goes a rainbow..."}
```

----------------------------------------

TITLE: Running Pytest
DESCRIPTION: This command shows how to run pytest. Pytest will automatically detect and execute tests in the current directory and its subdirectories, and report the results.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/tutorial/testing.md#_snippet_10

LANGUAGE: bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Parameter Ordering with Asterisk in FastAPI (Python)
DESCRIPTION: Demonstrates a special syntax using asterisk for parameter ordering in FastAPI without Annotated.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/tutorial/path-params-numeric-validations.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
async def read_items(*, item_id: int = Path(title="The ID of the item to get"), q: str):
```

----------------------------------------

TITLE: Example JSON Response via Traefik Proxy
DESCRIPTION: Example JSON response when accessing the application through the Traefik proxy with the /api/v1 prefix. The response is the same as accessing Uvicorn directly, demonstrating the proxy's path handling.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_10

LANGUAGE: JSON
CODE:
```
{
    "message": "Hello World",
    "root_path": "/api/v1"
}
```

----------------------------------------

TITLE: Creating a basic FastAPI application
DESCRIPTION: This Python code snippet defines a simple FastAPI application with two endpoints: `/` which returns a greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter.  It utilizes FastAPI's decorator-based routing and type hinting for request parameter validation and automatic documentation generation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/nl/docs/index.md#2025-04-21_snippet_1

LANGUAGE: Python
CODE:
```
"from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get("/")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get("/items/{item_id}")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}"
```

----------------------------------------

TITLE: Activating a Virtual Environment (Linux, macOS)
DESCRIPTION: This snippet shows how to activate a virtual environment on Linux or macOS systems. It uses the `source` command to execute the `activate` script located in the `.venv/bin` directory.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_3

LANGUAGE: console
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Navigating to a Different Project Directory
DESCRIPTION: Shows the command to change directory to a different project. This illustrates the scenario where you might move to a new project while still having the previous project's virtual environment active.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_22

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban
```

----------------------------------------

TITLE: JSON Response Example
DESCRIPTION: This JSON snippet shows the expected response from the `/users/me/` endpoint after successful authentication. It includes user details such as username, email, full name, and disabled status.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ko/docs/tutorial/security/oauth2-jwt.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "username": "johndoe",
  "email": "johndoe@example.com",
  "full_name": "John Doe",
  "disabled": false
}
```

----------------------------------------

TITLE: Error Response for Extra Cookies in FastAPI (JSON)
DESCRIPTION: This JSON snippet shows the error response returned by the FastAPI application when a client sends extra cookies that are not defined in the Pydantic model with `extra = 'forbid'`. The `detail` array contains information about the extra input, including its type, location, message, and input value.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/tutorial/cookie-param-models.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
"""json
{
    "detail": [
        {
            "type": "extra_forbidden",
            "loc": ["cookie", "santa_tracker"],
            "msg": "Extra inputs are not permitted",
            "input": "good-list-please",
        }
    ]
}
"""
```

----------------------------------------

TITLE: Disabling Default FastAPI Docs URLs (Python)
DESCRIPTION: This snippet shows how to disable the default Swagger UI and ReDoc documentation endpoints by setting their URLs to `None` during the `FastAPI` application initialization. This is the first step when providing custom documentation UIs or serving static assets yourself.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/how-to/custom-docs-ui-assets.md#_snippet_0

LANGUAGE: Python
CODE:
```
app = FastAPI(docs_url=None, redoc_url=None)
```

----------------------------------------

TITLE: Example JSON Response from Uvicorn
DESCRIPTION: Example JSON response from the Uvicorn server, showing the 'message' and 'root_path' when accessed directly. The root_path reflects the --root-path setting.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/behind-a-proxy.md#_snippet_9

LANGUAGE: JSON
CODE:
```
{
    "message": "Hello World",
    "root_path": "/api/v1"
}
```

----------------------------------------

TITLE: Define Path Operation Decorator
DESCRIPTION: The @app.get("/") decorator tells FastAPI that the function below is in charge of handling requests that go to: the path / using a get operation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/first-steps.md#_snippet_4

LANGUAGE: Python
CODE:
```
@app.get("/")
```

----------------------------------------

TITLE: Installing openapi-ts npm package
DESCRIPTION: This command demonstrates how to install the `openapi-ts` package using npm. It is installed as a development dependency (`--save-dev`) within a web frontend project directory, making the `openapi-ts` command-line tool available for generating client code.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/generate-clients.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ npm install @hey-api/openapi-ts --save-dev

---> 100%
```

----------------------------------------

TITLE: Declaring an Integer Parameter in FastAPI
DESCRIPTION: This snippet shows how to declare an integer parameter in a FastAPI application using Python type hints. FastAPI uses this type declaration for validation and automatic API documentation.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/az/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
item_id: int
```

----------------------------------------

TITLE: Navigating to a Project Directory
DESCRIPTION: This command changes the current directory to the specified project directory. It's used to switch between different projects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_22

LANGUAGE: bash
CODE:
```
cd ~/code/prisoner-of-azkaban
```

----------------------------------------

TITLE: 创建顶层FastAPI应用
DESCRIPTION: 创建主(顶层)FastAPI应用及其路径操作，这是整个应用的基础部分。
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/advanced/sub-applications.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/app")
def read_main():
    return {"message": "Hello World from main app"}
```

----------------------------------------

TITLE: OpenAPI Components Schemas JSON
DESCRIPTION: This JSON schema defines the components schemas used in the OpenAPI specification, including schemas for `Message`, `Item`, `ValidationError`, and `HTTPValidationError`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/fr/docs/advanced/additional-responses.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "components": {
        "schemas": {
            "Message": {
                "title": "Message",
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "title": "Message",
                        "type": "string"
                    }
                }
            },
            "Item": {
                "title": "Item",
                "required": [
                    "id",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "string"
                    },
                    "value": {
                        "title": "Value",
                        "type": "string"
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Switching Projects Without Deactivating Virtual Environment
DESCRIPTION: Demonstrates an error that occurs when trying to run a Python script in a new project without deactivating the previous virtual environment.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/docs/virtual-environments.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ cd ~/code/prisoner-of-azkaban

$ python main.py

// Error importando sirius, no está instalado 😱
Traceback (most recent call last):
    File "main.py", line 1, in <module>
        import sirius
```

----------------------------------------

TITLE: Install pytest
DESCRIPTION: This command installs the pytest testing framework using pip. Pytest is used to discover, run, and report on tests in Python projects.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/testing.md#_snippet_2

LANGUAGE: bash
CODE:
```
pip install pytest
```

----------------------------------------

TITLE: Declaring Typed List with Typing Module
DESCRIPTION: Shows how to import and use List from typing module to specify list element type
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/body-nested-models.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from typing import List

class Item(BaseModel):
    name: str
    tags: List[str]
```

----------------------------------------

TITLE: Declaring Basic Query Parameters in FastAPI
DESCRIPTION: Demonstrates how to declare query parameters with default values and automatic type conversion
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/tutorial/query-params.md#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
def read_items(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
```

----------------------------------------

TITLE: Using Lists Instead of Sets in FastAPI Response Model Parameters
DESCRIPTION: This snippet demonstrates that FastAPI can handle lists or tuples instead of sets for response_model_include and response_model_exclude parameters. It automatically converts them to sets for proper functionality.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/tutorial/response-model.md#2025-04-21_snippet_6

LANGUAGE: Python
CODE:
```
from typing import Union
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: float = 10.5

app = FastAPI()

items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {"name": "Bar", "description": "The Bar fighters", "price": 62, "tax": 20.2},
    "baz": {
        "name": "Baz",
        "description": "There goes my baz",
        "price": 50.2,
        "tax": 10.5,
    },
}

@app.get(
    "/items/{item_id}/name",
    response_model=Item,
    response_model_include=["name", "description"],
)
async def read_item_name(item_id: str):
    return items[item_id]

@app.get("/items/{item_id}/public", response_model=Item, response_model_exclude=["tax"])
async def read_item_public_data(item_id: str):
    return items[item_id]
```

----------------------------------------

TITLE: Incorrect Path Parameter Ordering
DESCRIPTION: This example shows an incorrect path definition where the dynamic path `/items/{item_id}` is defined before the fixed path `/items/me`. This will cause `/items/me` to be interpreted as `/items/{item_id}` with `item_id` set to `"me"`.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/uk/docs/tutorial/path-params.md#_snippet_3

LANGUAGE: python
CODE:
```
from fastapi import FastAPI

app = FastAPI()


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}


@app.get("/items/me")
async def read_item_me():
    return {"item_id": "This is the current item"}
```

----------------------------------------

TITLE: Traefik Configuration (traefik.toml)
DESCRIPTION: This TOML configuration file sets up Traefik to listen on port 9999 and use `routes.toml` for routing configurations. It defines the entry point for HTTP traffic and specifies the file provider for routing rules.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_6

LANGUAGE: TOML
CODE:
```
[entryPoints]
  [entryPoints.http]
    address = ":9999"

[providers]
  [providers.file]
    filename = "routes.toml"
```

----------------------------------------

TITLE: Formatting Translation PR Title in Markdown
DESCRIPTION: Example showing the correct format for translation PR titles using the globe emoji and proper file path notation
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/management-tasks.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
🌐 Add Spanish translation for `docs/es/docs/teleporting.md`
```

----------------------------------------

TITLE: Install a specific version of a package with pip
DESCRIPTION: Installs a specific version of a Python package using pip. This is used to ensure compatibility between projects that depend on different versions of the same package.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ja/docs/virtual-environments.md#_snippet_17

LANGUAGE: console
CODE:
```
$ pip install "harry==1"
```

----------------------------------------

TITLE: Generic Type Hints for Dictionaries (Python 3.9+)
DESCRIPTION: Shows how to declare a dictionary with string keys and float values
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/python-types.md#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
prices: dict[str, float] = {"apple": 0.5, "banana": 0.75}
```

----------------------------------------

TITLE: Displaying Sponsors with Conditional Rendering in Jinja2
DESCRIPTION: This code section renders the sponsors of FastAPI in different tiers (Gold, Silver, Bronze). It conditionally displays each tier only if sponsors exist for that tier, with each sponsor shown with their logo and link.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/en/docs/fastapi-people.md#2025-04-21_snippet_4

LANGUAGE: jinja2
CODE:
```
{% if sponsors %}

{% if sponsors.gold %}

### Gold Sponsors

{% for sponsor in sponsors.gold -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor %}
{% endif %}

{% if sponsors.silver %}

### Silver Sponsors

{% for sponsor in sponsors.silver -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor %}
{% endif %}

{% if sponsors.bronze %}

### Bronze Sponsors

{% for sponsor in sponsors.bronze -%}
<a href="{{ sponsor.url }}" target="_blank" title="{{ sponsor.title }}"><img src="{{ sponsor.img }}" style="border-radius:15px"></a>
{% endfor %}
{% endif %}

{% endif %}
```

----------------------------------------

TITLE: Example .gitignore file
DESCRIPTION: This shows an example of `.gitignore` file, which tells Git to ignore everything (`*`) in this directory (the .venv folder). This prevent committing virtual environment files.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/virtual-environments.md#2025-04-21_snippet_17

LANGUAGE: Text
CODE:
```
```gitignore
*
```
```

----------------------------------------

TITLE: Importing HTTPException in FastAPI
DESCRIPTION: This code snippet demonstrates how to import the HTTPException class from the fastapi module. HTTPException is used to raise HTTP exceptions within FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/handling-errors.md#_snippet_0

LANGUAGE: Python
CODE:
```
from fastapi import HTTPException
```

----------------------------------------

TITLE: Activating a Virtual Environment on Windows Bash
DESCRIPTION: This command activates a Python virtual environment in Windows Bash (e.g., Git Bash) by sourcing the activate script. It modifies the PATH environment variable to prioritize the virtual environment's Python interpreter.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh-hant/docs/virtual-environments.md#_snippet_21

LANGUAGE: bash
CODE:
```
source .venv/Scripts/activate
```

----------------------------------------

TITLE: Translating Warning Blocks
DESCRIPTION: This snippet demonstrates the translation of a 'warning' block. The English term 'warning' is translated to 'Advertencia' in Spanish, separated by a vertical bar.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/es/llm-prompt.md#_snippet_3

LANGUAGE: Text
CODE:
```
/// warning | Advertencia
```

----------------------------------------

TITLE: PATH Variable Example (Windows)
DESCRIPTION: This is an example of how the PATH environment variable might look on Windows systems. It consists of a series of directories separated by semicolons.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/environment-variables.md#_snippet_7

LANGUAGE: plaintext
CODE:
```
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32
```

----------------------------------------

TITLE: Using Model Inheritance for Type Hinting and Response Filtering in FastAPI
DESCRIPTION: Demonstrates using Pydantic model inheritance (`UserIn` inherits from `BaseUser`) to define input and output structures. The path operation uses `UserIn` for the request body, `BaseUser` as the return type hint for static analysis, and `response_model=BaseUser` to filter the output, allowing the function to return a `UserIn` object while only exposing `BaseUser` fields in the response.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/tutorial/response-model.md#_snippet_5

LANGUAGE: Python
CODE:
```
class BaseUser(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

class UserIn(BaseUser):
    password: str

@app.post("/user/", response_model=BaseUser)
async def create_user(user: UserIn) -> BaseUser:
```

----------------------------------------

TITLE: Example Static CSS File (styles.css) - CSS
DESCRIPTION: A simple CSS file located in the 'static' directory, which is mounted by the FastAPI application. This file is linked from the Jinja template.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/pt/docs/advanced/templates.md#_snippet_3

LANGUAGE: CSS
CODE:
```
body {
    font-family: sans-serif;
    line-height: 1.6;
    margin: 20px;
}
h1 {
    color: #333;
}
```

----------------------------------------

TITLE: Defining a Class with a Name Attribute in Python
DESCRIPTION: This code defines a simple `Person` class with a `name` attribute. This class can then be used as a type hint for variables.  The `name` attribute is initialized in the constructor.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/bn/docs/python-types.md#2025-04-21_snippet_17

LANGUAGE: python
CODE:
```
"class Person:
    def __init__(self, name: str):
        self.name = name
"
```

----------------------------------------

TITLE: Dict Type Annotation
DESCRIPTION: This snippet demonstrates how to annotate a variable as a dictionary with specific key and value types using the `typing` module.  It shows how to specify the types of keys and values within a dictionary.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/ru/docs/python-types.md#2025-04-21_snippet_7

LANGUAGE: Python
CODE:
```
"from typing import Dict

prices: Dict[str, float]"
```

----------------------------------------

TITLE: Initializing FastAPI App with async
DESCRIPTION: Create a basic FastAPI application with two endpoints: `/` which returns a simple greeting, and `/items/{item_id}` which returns the item ID and an optional query parameter. This example uses `async def` for asynchronous execution.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/vi/docs/index.md#_snippet_3

LANGUAGE: Python
CODE:
```
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
async def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}
```

----------------------------------------

TITLE: Defining a Path Parameter
DESCRIPTION: Defines a path parameter `item_id` in a FastAPI application. The value of the `item_id` path parameter will be passed to the function as an argument.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/id/docs/tutorial/path-params.md#_snippet_0

LANGUAGE: Python
CODE:
```
@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}
```

----------------------------------------

TITLE: Using Function Names as Operation IDs in FastAPI
DESCRIPTION: Shows how to use function names as operationIds by overriding the default behavior for all path operations.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/em/docs/advanced/path-operation-advanced-configuration.md#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from fastapi.routing import APIRoute

def use_route_names_as_operation_ids(app: FastAPI) -> None:
    for route in app.routes:
        if isinstance(route, APIRoute):
            route.operation_id = route.name  # in this case, 'read_items'

app = FastAPI()

@app.get("/items/")
def read_items():
    return [{"item_id": "Foo"}]

use_route_names_as_operation_ids(app)
```

----------------------------------------

TITLE: Creating and Echoing Environment Variable in PowerShell
DESCRIPTION: Shows how to set a temporary environment variable using the `$Env:` syntax and retrieve its value using the `echo` command (which is an alias for `Write-Output`) in Windows PowerShell.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/zh/docs/environment-variables.md#_snippet_1

LANGUAGE: powershell
CODE:
```
// 创建一个名为 MY_NAME 的环境变量
$ $Env:MY_NAME = "Wade Wilson"

// 在其他程序中使用它，例如
$ echo "Hello $Env:MY_NAME"

Hello Wade Wilson
```

----------------------------------------

TITLE: Installing Uvicorn with pip
DESCRIPTION: This command installs Uvicorn, an ASGI server, using pip. Uvicorn is required to run and serve FastAPI applications.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/tr/docs/index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ pip install "uvicorn[standard]"

---> 100%
```

----------------------------------------

TITLE: Starting Traefik
DESCRIPTION: This console command starts the Traefik proxy server using the specified configuration file (`traefik.toml`). The output shows that the configuration has been loaded successfully.
SOURCE: https://github.com/tiangolo/fastapi/blob/master/docs/de/docs/advanced/behind-a-proxy.md#_snippet_8

LANGUAGE: Console
CODE:
```
$ ./traefik --configFile=traefik.toml

INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml
```