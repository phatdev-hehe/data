TITLE: Configure Global Types in Storybook Preview
DESCRIPTION: This code snippet demonstrates how to configure global types in Storybook's `preview.js|ts` file. It defines a `theme` global with `light` and `dark` options, which can be toggled via a toolbar dropdown. This allows you to control the theme of your stories globally.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
export const globalTypes = {
  theme: {
    name: 'Theme',
    description: 'Global theme for components',
    defaultValue: 'light',
    toolbar: {
      icon: 'paintbrush',
      // Array of plain string values or MenuItem shape (see below)
      items: ['light', 'dark'],
      // Property that specifies if the name of the item will be displayed
      showName: true,
      // Change title based on selected value
      dynamicTitle: true,
    },
  },
};
```

----------------------------------------

TITLE: Configuring Backgrounds Addon (Old)
DESCRIPTION: This code shows the old way of configuring the `@storybook/addon-backgrounds` using `addDecorator`. The `withBackgrounds` function was used to apply background options to all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_263

LANGUAGE: javascript
CODE:
```
import { withBackgrounds } from `@storybook/addon-backgrounds`;

storiesOf('Stories', module)
  .addDecorator(withBackgrounds(options));
```

----------------------------------------

TITLE: Migrating Storybook Scripts in package.json
DESCRIPTION: This snippet demonstrates how to update the Storybook scripts in your project's package.json file to use the new `storybook dev` and `storybook build` commands in Storybook 7. It replaces the old `start-storybook` and `build-storybook` commands.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_96

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "storybook": "storybook dev <some flags>",
    "build-storybook": "storybook build <some flags>"
  },
  "devDependencies": {
    "storybook": "next"
  }
}
```

----------------------------------------

TITLE: Defining Global Args in preview.js
DESCRIPTION: Defines args at the global level, which apply to all stories in the Storybook unless overwritten. Useful for setting global settings.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
const preview = {
  parameters: {
    actions: {
      argTypesRegex: '^on[A-Z].*',
    },
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
  },
  args: {
    label: 'Hello',
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: A TypeScript configuration file for Storybook that imports the StorybookConfig type, sets up the React-Vite framework with legacyRootApi enabled, and specifies story file paths. This typed configuration provides better IDE support and type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-framework.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace react-vite with the framework you are using (e.g., react-webpack5)
import type { StorybookConfig } from '@storybook/react-vite';

const config: StorybookConfig = {
  framework: {
    name: '@storybook/react-vite',
    options: {
      legacyRootApi: true,
    },
  },
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
};

export default config;
```

----------------------------------------

TITLE: Migrate from renderer-based to framework-based imports (Diff)
DESCRIPTION: This code snippet demonstrates the change from renderer-based imports to framework-based imports when using @storybook/react with @storybook/react-vite. It shows how to update import statements to use @storybook/react-vite instead of @storybook/react.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_5

LANGUAGE: Diff
CODE:
```
- import { Meta, StoryObj } from '@storybook/react';
+ import { Meta, StoryObj } from '@storybook/react-vite';
```

----------------------------------------

TITLE: Retrieving and Updating Args with useArgs
DESCRIPTION: The `useArgs` hook enables addons to retrieve and update a story's arguments (args). This allows addons to dynamically modify the properties of a story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_18

LANGUAGE: javascript
CODE:
```
import { useArgs } from '@storybook/api';

export const MyAddon = () => {
  const [{ myArg }, updateArgs] = useArgs();

  return (
    <div>
      <p>My Arg: {myArg}</p>
      <button onClick={() => updateArgs({ myArg: 'new value' })}>Update Arg</button>
    </div>
  );
};

```

----------------------------------------

TITLE: Interacting with Canvas from Component Root
DESCRIPTION: This code snippet demonstrates how to adjust interactions within a Storybook play function to start execution from the component's root. This is beneficial for complex components (e.g., forms, pages) or multiple stories, as it can improve performance and error handling. By default, interactions start from the top-level element of the Canvas, which can be inefficient for larger components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import { userEvent, within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

export const PlayFunctionWithCanvas = async ({ canvasElement, args }) => {
  const canvas = within(canvasElement);

  await userEvent.click(canvas.getByRole('button'));
  await expect(args.onClick).toHaveBeenCalled();
};

```

----------------------------------------

TITLE: Configuring Accessibility in Storybook Story for React (TypeScript 4.9 with Satisfies Operator)
DESCRIPTION: This code defines a Storybook story for a React component using TypeScript 4.9+'s 'satisfies' operator to ensure type safety of the meta object. The configuration includes advanced a11y rules, disabling specific validations, and allows for running accessibility checks manually. This approach requires '@storybook/react', and demonstrates using modern TypeScript for Storybook type-checking and meta validation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_2

LANGUAGE: ts-4-9
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ExampleStory: Story = {
  parameters: {
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Migrating MDX Stories to CSF
DESCRIPTION: This codemod converts .stories.mdx files to the MDX+CSF format required by Storybook 8. It automates the process of updating story files to the new format, ensuring compatibility with the latest Storybook version. Note that manual cleanup of the original .stories.mdx files is required after running the codemod.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/migration-guide/from-older-version.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
npx storybook migrate mdx-to-csf --glob "**/*.stories.mdx"
```

----------------------------------------

TITLE: Conditional Controls - Mutual Exclusion Example
DESCRIPTION: This example demonstrates a constraint where setting one control value makes it illogical to set another. The visibility of the second control is dependent on the value of the first, preventing conflicting configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_35

LANGUAGE: markdown
CODE:
```
<CodeSnippets path="component-story-conditional-controls-mutual-exclusion.md" />
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript for Svelte
DESCRIPTION: This TypeScript configuration file sets up Storybook for a Svelte project. It imports the StorybookConfig type and defines the story locations using a glob pattern. It also includes the '@storybook/addon-svelte-csf' addon for Component Story Format (CSF) support in Svelte.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-svelte-csf-register.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  stories: ['../src/**/*.stories.@(js|jsx|ts|tsx|svelte)'],
  addons: [
    // Other Storybook addons
    '@storybook/addon-svelte-csf',
  ],
};

export default config;
```

----------------------------------------

TITLE: Defining Story Position with Title Parameter
DESCRIPTION: This code snippet demonstrates how to use the `title` parameter to explicitly define a story's position in the Storybook sidebar. It allows for grouping related components together in an expandable interface, improving Storybook organization and user experience.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/naming-components-and-hierarchy.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Button',
  component: Button,
};

const Template = (args) => <Button {...args} />;

export const Primary = Template.bind({});
Primary.args = {
  primary: true,
  children: 'Primary',
};

```

----------------------------------------

TITLE: Defining Storybook Meta for Component (Common) - TS
DESCRIPTION: This code defines the metadata for a Storybook story using TypeScript. It imports the Meta type from '@storybook/your-framework' (to be replaced with the appropriate framework) and the component. It configures the component and uses 'args' to set the default value for the 'value' property, instead of the deprecated 'defaultValue'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Example } from './Example';

const meta = {
  component: Example,
  argTypes: {
    value: {
      // ❌ Deprecated
      defaultValue: 0,
    },
  },
  // ✅ Do this instead
  args: {
    value: 0,
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Registering Addons in Storybook Configuration (JavaScript/TypeScript)
DESCRIPTION: Demonstrates how to register addons in Storybook's main.js or main.ts configuration file. It shows examples of adding addons with and without options, including the '@storybook/addon-essentials' and a custom addon with specific options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-addons.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  addons: [
    '@storybook/addon-essentials',
    {
      name: '@storybook/addon-coverage',
      options: {
        istanbul: {
          exclude: ['**/components/Header.js'],
        },
      },
    },
  ],
};
```

----------------------------------------

TITLE: Configuring Storybook Preview with Control Matchers and Custom Docs Page (TS)
DESCRIPTION: This TypeScript snippet configures Storybook's preview settings. It defines control matchers for color and date properties, enabling customized control UIs for these property types. It also sets up a custom documentation page layout using components from `@storybook/addon-docs/blocks`. It imports the Preview type from the framework you are using.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-custom-template-function.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

import {
  Title,
  Subtitle,
  Description,
  Primary,
  Controls,
  Stories,
} from '@storybook/addon-docs/blocks';

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
    docs: {
      page: () => (
        <>
          <Title />
          <Subtitle />
          <Description />
          <Primary />
          <Controls />
          <Stories />
        </>
      ),
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Testing Storybook Components with Jest in TypeScript
DESCRIPTION: A complete TypeScript implementation for automated testing of Storybook components using Jest. It includes type definitions, story file discovery, composition, filtering, and snapshot testing. The TypeScript version adds strong type checking while maintaining the same functionality as the JavaScript implementation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-snapshot-test.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import path from 'path';
import * as glob from 'glob';

// Replace your-framework with one of the supported Storybook frameworks (react, vue3)
import type { Meta, StoryFn } from '@storybook/your-framework';

import { describe, test, expect } from '@jest/globals';

// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)
import { composeStories } from '@storybook/your-renderer';

type StoryFile = {
  default: Meta;
  [name: string]: StoryFn | Meta;
};

const compose = (entry: StoryFile): ReturnType<typeof composeStories<StoryFile>> => {
  try {
    return composeStories(entry);
  } catch (e) {
    throw new Error(
      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,
    );
  }
};

function getAllStoryFiles() {
  // Place the glob you want to match your stories files
  const storyFiles = glob.sync(
    path.join(__dirname, 'stories/**/*.{stories,story}.{js,jsx,mjs,ts,tsx}'),
  );

  return storyFiles.map((filePath) => {
    const storyFile = require(filePath);
    return { filePath, storyFile };
  });
}

// Recreate similar options to Storyshots. Place your configuration below
const options = {
  suite: 'Storybook Tests',
  storyKindRegex: /^.*?DontTest$/,
  storyNameRegex: /UNSET/,
  snapshotsDirName: '__snapshots__',
  snapshotExtension: '.storyshot',
};

describe(options.suite, () => {
  getAllStoryFiles().forEach(({ storyFile, componentName }) => {
    const meta = storyFile.default;
    const title = meta.title || componentName;

    if (options.storyKindRegex.test(title) || meta.parameters?.storyshots?.disable) {
      // Skip component tests if they are disabled
      return;
    }

    describe(title, () => {
      const stories = Object.entries(compose(storyFile))
        .map(([name, story]) => ({ name, story }))
        .filter(({ name, story }) => {
          // Implements a filtering mechanism to avoid running stories that are disabled via parameters or that match a specific regex mirroring the default behavior of Storyshots.
          return !options.storyNameRegex.test(name) && !story.parameters.storyshots?.disable;
        });

      if (stories.length <= 0) {
        throw new Error(
          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module, without a disable parameter, or add parameters.storyshots.disable in the default export of this file.`,
        );
      }

      stories.forEach(({ name, story }) => {
        // Instead of not running the test, you can create logic to skip it, flagging it accordingly in the test results.
        const testFn = story.parameters.storyshots?.skip ? test.skip : test;

        testFn(name, async () => {
          await story.run();
          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.
          await new Promise((resolve) => setTimeout(resolve, 1));
          expect(document.body.firstChild).toMatchSnapshot();
        });
      });
    });
  });
});
```

----------------------------------------

TITLE: Implementing Button Component in Angular
DESCRIPTION: An Angular implementation of a Button component with inputs for primary state, background color, size, and label, and an output for click events. The component uses decorators to define inputs and outputs with JSDoc comments describing each property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-implementation.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'button',
  template: `the component implementation markup`,
})
export class ButtonComponent {
  /**
   * Is this the principal call to action on the page?
   */
  @Input()
  primary = false;

  /**
   * What background color to use
   */
  @Input()
  backgroundColor?: string;

  /**
   * How large should the button be?
   */
  @Input()
  size: 'small' | 'medium' | 'large' = 'medium';

  /**
   * Button contents
   *
   * @required
   */
  @Input()
  label = 'Button';

  /**
   * Optional click handler
   */
  @Output()
  onClick = new EventEmitter<Event>();
}
```

----------------------------------------

TITLE: Defining Mocked Error Story with MSW - Svelte
DESCRIPTION: This code defines a Storybook story named 'MockedError' that uses MSW to mock an error response from an API within a Svelte component. It intercepts GET requests to 'https://your-restful-endpoint', introduces a delay of 800ms, and then returns an HTTP response with a 403 status code. This allows testing of how the component handles error scenarios.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_9

LANGUAGE: svelte
CODE:
```
<Story
  name="MockedError"
  parameters={{
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint', async () => {
          await delay(800);
          return new HttpResponse(null, {
            status: 403,
          });
        }),
      ],
    },
  }}
/>
```

----------------------------------------

TITLE: Creating Page Story with Args Composition
DESCRIPTION: Demonstrates how to compose stories using args from subcomponents to build screen-level stories
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/build-pages-with-storybook.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export const LoggedIn = {
  args: {
    ...PageLayout.Authenticated.args,
    ...Document.Simple.args,
    ...SubDocumentList.Simple.args,
  },
};
```

----------------------------------------

TITLE: Replacing Story Type with StoryFn and StoryObj in Storybook
DESCRIPTION: This code snippet illustrates the recommended way to define stories in Storybook using `StoryFn` for CSF2 and `StoryObj` for CSF3. It replaces the deprecated `Story` type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_139

LANGUAGE: typescript
CODE:
```
import type { StoryFn, StoryObj } from "@storybook/react";

export const MyCsf2Story: StoryFn = () => <div />;
export const MyCsf3Story: StoryObj = {
  render: () => <div />,
};
```

----------------------------------------

TITLE: Initializing Storybook Main Configuration in TypeScript
DESCRIPTION: Defines the core Storybook configuration including framework selection, story file patterns, and TypeScript settings. Sets up react-docgen for TypeScript documentation generation and specifies file patterns for MDX and stories files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typescript-react-docgen.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, react-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  typescript: {
    reactDocgen: 'react-docgen',
  },
};

export default config;
```

----------------------------------------

TITLE: Querying Elements with findBy in Play Function
DESCRIPTION: This code snippet shows how to adjust a Storybook story and wait for a change to the DOM tree before querying an element. It uses `findBy` to wait for the element to be available, which is useful when the component is not immediately available due to asynchronous behavior or previous steps in the play function. This ensures that the element is present before attempting to interact with it.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import { within, userEvent } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

export const PlayFunctionQueryFindBy = async ({ canvasElement }) => {
  const canvas = within(canvasElement);

  await userEvent.click(await canvas.findByRole('button'));
  await expect(canvas.getByText('Button Clicked')).toBeInTheDocument();
};

```

----------------------------------------

TITLE: Configure accessibility tests with the Vitest addon
DESCRIPTION: Configure accessibility tests with the `parameters.a11y.test` parameter, which determines the behavior of accessibility tests for a story and accepts the values 'off', 'todo', or 'error'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
export const MyStory = {
  parameters: {
    a11y: {
      test: 'off', // or 'todo' or 'error'
    },
  },
};
```

LANGUAGE: typescript
CODE:
```
export const MyStory: Story = {
  parameters: {
    a11y: {
      test: 'off', // or 'todo' or 'error'
    },
  },
};
```

----------------------------------------

TITLE: Defining custom argTypes for Storybook Controls
DESCRIPTION: This snippet demonstrates how to define custom argTypes for a Storybook story to customize the controls used for specific arguments. In this case, it shows how to replace a free text input for a `variant` arg with a radio group.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
import type { Meta } from '@storybook/web-components';
import { Button } from './Button';

const meta: Meta<typeof Button> = {
  component: Button,
  title: 'Example/Button',
  argTypes: {
    variant: {
      control: {
        type: 'radio',
      },
      options: ['primary', 'secondary'],
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Retrieving Story Parameters with useParameter
DESCRIPTION: The `useParameter` hook retrieves the current story's parameters. If a parameter's value is not defined, it defaults to the second value provided to the hook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_16

LANGUAGE: javascript
CODE:
```
import { useParameter } from '@storybook/api';

export const MyAddon = () => {
  const myParameter = useParameter('myParameter', 'default value');

  return <div>My Parameter: {myParameter}</div>;
};

```

----------------------------------------

TITLE: Implementing Button Component in React with JavaScript
DESCRIPTION: A React Button component implementation using JavaScript with PropTypes for type checking. The component accepts props for primary state, background color, size, label, and click handler, with JSDoc comments describing each property's purpose.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-implementation.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import React from 'react';

import PropTypes from 'prop-types';

/**
 * Primary UI component for user interaction
 */
export const Button = ({ primary, backgroundColor, size, label, ...props }) => {
  // the component implementation
};

Button.propTypes = {
  /**
   * Is this the principal call to action on the page?
   */
  primary: PropTypes.bool,
  /**
   * What background color to use
   */
  backgroundColor: PropTypes.string,
  /**
   * How large should the button be?
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  /**
   * Button contents
   */
  label: PropTypes.string.isRequired,
  /**
   * Optional click handler
   */
  onClick: PropTypes.func,
};
```

----------------------------------------

TITLE: Implementing Storybook Play Function for Angular in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Storybook play function for an Angular component using TypeScript. It simulates user input and form submission.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted: Story = {
  play: async ({ args, canvasElement, step }) => {
    const canvas = within(canvasElement);

    await step('Enter email and password', async () => {
      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
      await userEvent.type(canvas.getByTestId('password'), 'supersecret');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button'));
    });
  },
};
```

----------------------------------------

TITLE: Stories for Multiple Components
DESCRIPTION: Demonstrates how to create stories for two or more components that work together, such as a parent `List` component and child `ListItem` components. It shows how to render a different function for each story and reuse story data from the child component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
No code provided in the original text.
```

----------------------------------------

TITLE: Write Component Test with Play Function
DESCRIPTION: This example demonstrates how to write a component test using the `play` function in Storybook. It uses Testing Library to interact with the DOM and Vitest for assertions. The `canvasElement` is used to scope element queries to the current story, and the `step` function creates labeled groups of interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/interactions.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from '@storybook/testing-library';
import { expect } from '@storybook/test';

export const Play = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await step('Click the increment button', async () => {
      await userEvent.click(canvas.getByRole('button', { name: 'increment' }));
    });

    await step('Assert the counter value', async () => {
      await expect(canvas.getByText('1')).toBeVisible();
    });
  },
};
```

----------------------------------------

TITLE: Simulating Filled Form Interaction and Assertion in React (TS)
DESCRIPTION: This code defines a Storybook story for the LoginForm component in React (TypeScript), simulating user interaction with a filled form and asserting the expected DOM structure. It uses userEvent to type into email and password fields, clicks the submit button, and asserts that a success message is displayed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_5

LANGUAGE: ts
CODE:
```
/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));

    // 👇 Assert DOM structure
    await expect(
      canvas.getByText(
        'Everything is perfect. Your account is ready and we should probably get you started!'
      )
    ).toBeInTheDocument();
  },
};
```

----------------------------------------

TITLE: Setting up Vue3 with Pinia in Storybook (TypeScript)
DESCRIPTION: This snippet sets up a Vue 3 application within Storybook using Pinia for state management. It registers a global Pinia instance to be consumed by stories and adds a decorator for consistent styling. This is the TypeScript version.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-library-decorator.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { setup, Preview } from '@storybook/vue3-vite';

import { createPinia } from 'pinia';

setup((app) => {
  //👇 Registers a global Pinia instance inside Storybook to be consumed by existing stories
  app.use(createPinia());
});

const preview: Preview = {
  decorators: [
    (story) => ({
      components: { story },
      template: '<div style="margin: 3em;"><story /></div>',
    }),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Customizing Vite in Storybook
DESCRIPTION: This snippet shows how to customize the Vite setup in Storybook when using the Vite builder. It provides an asynchronous function that receives the Vite configuration and options, and returns the modified configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
viteFinal: async (config: Vite.InlineConfig, options: Options) => { return config; }
```

----------------------------------------

TITLE: Configuring ESLint Ignore for Storybook (Plain Text)
DESCRIPTION: Adds an exception to the ESLint ignore file to ensure that the .storybook directory is linted. This is crucial for catching configuration errors in Storybook setup files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
!.storybook
```

----------------------------------------

TITLE: Configuring file control for object ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'file' control, providing a file input that returns an array of URLs. It can be further customized to accept specific file types within Storybook's controls panel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
{ control: { type: 'file', accept: '.png' } }
```

----------------------------------------

TITLE: Enable Expanded Controls in Storybook Preview
DESCRIPTION: This snippet shows how to enable expanded controls globally in Storybook by modifying the `.storybook/preview.js|ts` file. This displays property documentation alongside the controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_28

LANGUAGE: javascript
CODE:
```
parameters: {
  controls: {
    expanded: true
  }
}
```

----------------------------------------

TITLE: Configuring Test Runner Script in Package.json
DESCRIPTION: Adds the test-storybook script to package.json to enable the test runner functionality.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test-storybook": "test-storybook"
  }
}
```

----------------------------------------

TITLE: Testing Vue Button Component with Storybook
DESCRIPTION: This snippet demonstrates how to test a Vue Button component using Storybook's composeStories and testing-library. It imports stories, composes them, and then tests the rendering of the primary button with default arguments and overridden props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-compose-stories.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { test, expect } from 'vitest';
import { screen } from '@testing-library/vue';
import { composeStories } from '@storybook/vue3-vite';

// Import all stories and the component annotations from the stories file
import * as stories from './Button.stories';

// Every component that is returned maps 1:1 with the stories,
// but they already contain all annotations from story, meta, and project levels
const { Primary, Secondary } = composeStories(stories);

test('renders primary button with default args', async () => {
  await Primary.run();
  const buttonElement = screen.getByText('Text coming from args in stories file!');
  expect(buttonElement).not.toBeNull();
});

test('renders primary button with overridden props', async () => {
  // You can override props by passing them in the context argument of the run function
  await Primary.run({ args: { ...Primary.args, children: 'Hello world' } });
  const buttonElement = screen.getByText(/Hello world/i);
  expect(buttonElement).not.toBeNull();
});
```

----------------------------------------

TITLE: Configuring Storybook Preview (TypeScript)
DESCRIPTION: This TypeScript snippet configures the Storybook preview by importing global styles, defining a Preview type, and setting default parameters. It imports a global CSS file for consistent styling and sets an empty parameters object within a Preview configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-import-global-styles.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/your-framework';

import '../src/styles/global.css';

const preview: Preview = {
  parameters: {},
};

export default preview;
```

----------------------------------------

TITLE: Providing SSL Certificate Authority for Angular Storybook
DESCRIPTION: Provides an SSL certificate authority for secure connections when HTTPS is enabled.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_20

LANGUAGE: JSON
CODE:
```
{"sslCa": "your-custom-certificate-authority"}
```

----------------------------------------

TITLE: Configuring Storybook Main in JavaScript
DESCRIPTION: JavaScript implementation of Storybook's main configuration file that includes custom webpack configuration merging. Specifies framework, story patterns, and webpack configuration customization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-using-existing-config.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import custom from '../webpack.config.js'; // 👈 Custom Webpack configuration being imported.

export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  webpackFinal: async (config) => {
    return {
      ...config,
      module: { ...config.module, rules: [...config.module.rules, ...custom.module.rules] },
    };
  },
};
```

----------------------------------------

TITLE: Implementing Button Component in Angular with TypeScript
DESCRIPTION: Angular button component implementation with input properties for disabled state and content. Uses TypeScript decorators and Angular's component architecture with an inline template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Component, Input } from '@angular/core';

@Component({
  selector: 'my-button',
  template: ` <button type="button" [disabled]="isDisabled">
    {{ content }}
  </button>`,
  styleUrls: ['./button.css'],
})
export class ButtonComponent {
  /**
   * Checks if the button should be disabled
   */
  @Input()
  isDisabled: boolean;

  /**
  The display content of the button
  */
  @Input()
  content: string;
}
```

----------------------------------------

TITLE: Filling Registration Form Story - Svelte
DESCRIPTION: This story simulates filling out the registration form with an email and password, then submitting the form. It uses Storybook's `userEvent` to type into the input fields and click the submit button. The `within` function is used to query elements within the canvas.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#_snippet_2

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

import RegistrationForm from './RegistrationForm.svelte';

export default {
  component: RegistrationForm,
};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const emailInput = canvas.getByLabelText('email', {
      selector: 'input',
    });

    await userEvent.type(emailInput, 'example-email@email.com', {
      delay: 100,
    });

    const passwordInput = canvas.getByLabelText('password', {
      selector: 'input',
    });

    await userEvent.type(passwordInput, 'ExamplePassword', {
      delay: 100,
    });
    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const submitButton = canvas.getByRole('button');

    await userEvent.click(submitButton);
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Main Settings in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates configuring Storybook's core settings in `.storybook/main.ts` using type safety. It imports `StorybookConfig` for type checking, sets the framework (placeholder `'@storybook/your-framework'`), specifies story file locations (`stories`), and conditionally adds an analytics script to the preview's HTML `<head>` via the `previewHead` function, depending on the `ANALYTICS_ID` environment variable. The configuration object `config` is explicitly typed before being exported.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview-head.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
```ts filename=".storybook/main.ts" renderer="common" language="ts"
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  previewHead: (head) => `
    ${head}
    ${
      process.env.ANALYTICS_ID ? '<script src="https://cdn.example.com/analytics.js"></script>' : ''
    }
  `,
};

export default config;
```
```

----------------------------------------

TITLE: Configuring Webpack5 Builder with Lazy Compilation in Storybook (JavaScript)
DESCRIPTION: This snippet exports the default configuration for Storybook. It specifies the use of webpack5 as the builder and enables lazy compilation. This setup can improve build performance by only compiling the necessary components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack5-lazyCompilation.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  core: {
    builder: {
      name: 'webpack5',
      options: {
        lazyCompilation: true,
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Component (CSF)
DESCRIPTION: This code configures the Storybook metadata for a Svelte component using the Component Story Format (CSF). It imports the component and defines the meta object with component details and argTypes, specifically hiding the 'foo' property from the UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import YourComponent from './YourComponent.svelte';

  const { Story } = defineMeta({
    component: YourComponent,
    argTypes: {
      // foo is the property we want to remove from the UI
      foo: {
        control: false,
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Customize Docs Container in Storybook
DESCRIPTION: This example shows how to customize the Docs Container in Storybook by creating a custom component and referencing it in the Storybook UI configuration file (`.storybook/preview.js|ts`). This allows you to control the rendering of the documentation page in Storybook's UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
This is a placeholder for the 'storybook-preview-auto-docs-custom-docs-container.md' code snippet.
```

----------------------------------------

TITLE: Migrate Storybook main.js to ESM format
DESCRIPTION: This code snippet demonstrates how to migrate a Storybook main.js configuration from CommonJS or named exports to a default ESM export. This is the recommended way to configure Storybook going forward.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_91

LANGUAGE: javascript
CODE:
```
const config = {
  stories: [
    "../stories/**/*.stories.mdx",
    "../stories/**/*.stories.@(js|jsx|ts|tsx)",
  ],
  framework: { name: "@storybook/react-vite" },
};
export default config;
```

----------------------------------------

TITLE: Simulating user interactions in Storybook
DESCRIPTION: This snippet demonstrates how to simulate user interactions within a Storybook story using the `userEvent` API from the `@storybook/test` package. It showcases the usage of `userEvent.click` to interact with a button and trigger an action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
import { fireEvent, within } from '@storybook/testing-library';
import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
};

export default meta;

export const Primary = {
  render: () => <MyComponent primary label="Click me" />,
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    await fireEvent.click(canvas.getByRole('button'));
  },
};

```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet exports the default Storybook configuration in JavaScript. It specifies the framework, story file patterns, and includes a Babel configuration function for development and production environments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-babel.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  async babel(config, { configType }) {
    if (configType === 'DEVELOPMENT') {
      // Your development configuration goes here
    }
    if (configType === 'PRODUCTION') {
      // Your production configuration goes here.
    }
    return config;
  },
};
```

----------------------------------------

TITLE: Configuring Coverage Watermarks in Vitest
DESCRIPTION: This code snippet demonstrates how to configure watermarks for code coverage in your Vitest configuration file. Watermarks define the low and high thresholds for acceptable and good coverage, respectively. The `watermarks` option within the `coverage` settings allows you to customize these thresholds for statements, branches, functions, and lines.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'vitest/config';

export default defineConfig({
  // ...
  test: {
    // ...
    coverage: {
      // ...
      watermarks: {
        // These are the default values
        statements: [50, 80],
      },
    },
  },
});
```

----------------------------------------

TITLE: Configuring Storybook Component Metadata
DESCRIPTION: This code configures the metadata for a Storybook component. It defines the component name, sets up specific `argTypes` for the `backgroundColor` property, and provides default `args` to set the `primary` property to `true` for all Button stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const meta = {
  component: 'demo-button',
  // 👇 Creates specific argTypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    // 👇 Now all Button stories will be primary.
    primary: true,
  },
};

export default meta;
```

----------------------------------------

TITLE: Renaming globals to initialGlobals in preview.js
DESCRIPTION: This snippet shows how to rename `globals` to `initialGlobals` in `preview.js`. This change is required starting in Storybook 8.2 and `globals` will be removed in 9.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_40

LANGUAGE: diff
CODE:
```
// .storybook/preview.js
export default {
-  globals: [ a: 1, b: 2 ],
+  initialGlobals: [ a: 1, b: 2 ],
}
```

----------------------------------------

TITLE: Creating Component Stories in Storybook
DESCRIPTION: Example showing how to write stories to document and test UI component variations using Component Story Format (CSF). The story demonstrates capturing different states of a component for testing and documentation purposes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/why-storybook.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
```js
import { Histogram } from './Histogram';

export default {
  component: Histogram,
  title: 'Histogram',
};

// Story that shows the default state
export const Default = {
  args: {
    dataPoints: [100, 800, 400],
  },
};

// Story that shows a loading state
export const Loading = {
  args: {
    dataPoints: [],
    loading: true,
  },
};
```
```

----------------------------------------

TITLE: Testing Svelte Button Component with Vitest and Storybook
DESCRIPTION: A Vitest test for a Svelte Button component using Storybook's composeStories utility. It sets up the jsdom environment, imports svelte-specific Storybook utilities, extracts the Primary story variant, and performs snapshot testing of the rendered component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-snapshot-test-portable-stories.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
// @vitest-environment jsdom

import { expect, test } from 'vitest';

import { composeStories } from '@storybook/svelte';

import * as stories from '../stories/Button.stories';

const { Primary } = composeStories(stories);
test('Button snapshot', async () => {
  await Primary.run();
  expect(document.body.firstChild).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Opting out of Story Store V7 in Storybook
DESCRIPTION: This code snippet shows how to opt-out of Story Store V7 in Storybook 7.0 by setting the `storyStoreV7` feature flag to `false` in your `.storybook/main.js` file. This is useful if you need to continue using the legacy `storiesOf` API or dynamic titles in CSF.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_137

LANGUAGE: javascript
CODE:
```
module.exports = {
  features: {
    storyStoreV7: false,
  },
};
```

----------------------------------------

TITLE: Writing Stories with Args in Storybook
DESCRIPTION: This snippet demonstrates how to write stories using args in Storybook. It shows how to define a template that accepts args and passes them to the component. This allows for easy modification of the component's properties through the Storybook UI, making it easier to test different scenarios.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { Button } from './Button';

export default {
  title: 'Example/Button',
  component: Button,
  argTypes: {
    backgroundColor: {
      control: 'color',
    },
  },
};

const Template = (args) => <Button {...args} />;

export const Primary = Template.bind({});
Primary.args = {
  primary: true,
  label: 'Primary',
};

export const Secondary = Template.bind({});
Secondary.args = {
  label: 'Secondary',
};

export const Large = Template.bind({});
Large.args = {
  size: 'large',
  label: 'Large Button',
};

export const Small = Template.bind({});
Small.args = {
  size: 'small',
  label: 'Small Button',
};

```

----------------------------------------

TITLE: Configuring Typescript baseUrl and paths in tsconfig.json
DESCRIPTION: This configuration in `tsconfig.json` enables absolute imports and module path aliases in Next.js projects. It defines the base URL and specifies how module paths should be resolved, allowing for cleaner and more maintainable import statements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_24

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/components/*": ["components/*"]
    }
  }
}
```

----------------------------------------

TITLE: Simulating Form Interaction with userEvent in Storybook
DESCRIPTION: This snippet demonstrates how to simulate user interaction with a form in Storybook using userEvent. It types text into email and password fields and clicks the submit button. It requires the @storybook/testing-library and @testing-library/user-event dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-play-function.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
const canvas = within(canvasElement);

await step('Enter credentials', async () => {
  await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
  await userEvent.type(canvas.getByTestId('password'), 'supersecret');
});

await step('Submit form', async () => {
  await userEvent.click(canvas.getByRole('button'));
});

// 👇 Now we can assert that the onSubmit arg was called
await waitFor(() => expect(args.onSubmit).toHaveBeenCalled());
```

----------------------------------------

TITLE: Running automigrate script
DESCRIPTION: This command runs a set of standard configuration checks, explains what is potentially out-of-date, and offers to fix it for you automatically. It also points to the relevant documentation so you can learn more.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/upgrading.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
npx storybook automigrate
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: This TypeScript configuration file sets up Storybook by specifying the framework, story locations, and addons. It also customizes the documentation tab's default name and exports the configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-full-config.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: ['@storybook/addon-docs'],
  docs: {
    //👇 See the table below for the list of supported options
    defaultName: 'Documentation',
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Storybook Deployment to GitHub Pages
DESCRIPTION: This GitHub Actions workflow configuration automates the process of building and publishing a Storybook instance to GitHub Pages. The workflow runs when code is pushed to a specified branch, sets up the necessary permissions, prepares a Node.js environment, and uses a specialized action to handle the build and deployment of Storybook. It can be customized with different installation and build commands.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/ghp-github-action.md#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
# Workflow name
name: Build and Publish Storybook to GitHub Pages

on:
  # Event for the workflow to run on
  push:
    branches:
      - 'your-branch-name' # Replace with the branch you want to deploy from

permissions:
  contents: read
  pages: write
  id-token: write

# List of jobs
jobs:
  deploy:
    runs-on: ubuntu-latest
    # Job steps
    steps:
      # Manual Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Set up Node
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      #👇 Add Storybook build and deploy to GitHub Pages as a step in the workflow
      - uses: bitovi/github-actions-storybook-to-github-pages@v1.0.3
        with:
          install_command: yarn install # default: npm ci
          build_command: yarn build-storybook # default: npm run build-storybook
          path: storybook-static # default: dist/storybook
          checkout: false # default: true
```

----------------------------------------

TITLE: Upgrade Storybook to a specific version
DESCRIPTION: This command upgrades Storybook to a specific version. It is particularly useful for Vue 2 users who need to upgrade to the latest 7.x version due to Vue 2's end-of-life status.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/upgrading.mdx#_snippet_3

LANGUAGE: Shell
CODE:
```
npx storybook@7 upgrade
```

----------------------------------------

TITLE: Enabling developmentModeForBuild in Storybook main config
DESCRIPTION: This code snippet demonstrates how to enable the `developmentModeForBuild` feature flag in your Storybook configuration file (`.storybook/main.js` or `.storybook/main.ts`). This flag sets `process.env.NODE_ENV` to `'development'` in built Storybooks, enabling React's `act` utility to ensure all updates are processed before a11y checks, preventing false negatives with asynchronous components. This configuration is crucial for accurately testing accessibility in React components that use asynchronous techniques like Suspense or React Server Components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_16

LANGUAGE: javascript
CODE:
```
features: {
  developmentModeForBuild: true,
}
```

----------------------------------------

TITLE: Configuring Storybook Main File in JavaScript
DESCRIPTION: This snippet shows how to configure the main Storybook file in JavaScript. It specifies the framework and defines which story files to include, with MDX files displayed first in the sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories-ordered.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: [
    '../src/**/*.mdx', // 👈 These will display first in the sidebar
    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)', // 👈 Followed by these
  ],
};
```

----------------------------------------

TITLE: Using useArgs API within a React Story
DESCRIPTION: Demonstrates how to use the `useArgs` API exported by `storybook/preview-api` to control interactive components within a story. This allows the component to respond to events, modify its state, and reflect those changes in the Storybook UI. It requires the React renderer.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
import { useArgs } from '@storybook/preview-api';

export const MyStory = () => {
  const [{ value }, updateArgs] = useArgs();

  const setValue = (newValue: string) => {
    updateArgs({ value: newValue });
  };

  return (
    <input
      type="text"
      value={value}
      onChange={(e) => setValue(e.target.value)}
    />
  );
};
```

----------------------------------------

TITLE: Creating a ButtonGroup Story in Storybook
DESCRIPTION: This snippet demonstrates how to create a ButtonGroup story in Storybook by remixing stories from its child component, Button. It imports the Primary and Secondary stories from the Button component and uses them to create a ButtonGroup story. This allows for reusing data definitions across the component hierarchy, making stories more maintainable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { Button } from './Button';
import * as ButtonStories from './Button.stories';

export default {
  title: 'Example/ButtonGroup',
};

const Template = (args) => (
  <div>
    <Button {...ButtonStories.Primary.args} />
    <Button {...ButtonStories.Secondary.args} />
  </div>
);

export const Basic = Template.bind({});

```

----------------------------------------

TITLE: Complex Custom Theme Implementation
DESCRIPTION: Advanced theme configuration with custom color palettes, typography, and comprehensive branding settings.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/theming.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { create } from '@storybook/theming';

export default create({
  base: 'light',

  colorPrimary: '#FF4785',
  colorSecondary: '#1EA7FD',

  // UI
  appBg: '#F6F9FC',
  appContentBg: '#FFFFFF',
  appBorderColor: 'rgba(0,0,0,.1)',
  appBorderRadius: 4,

  // Typography
  fontBase: '"Nunito Sans", -apple-system, ".SFNSText-Regular", "San Francisco", BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", Helvetica, Arial, sans-serif',
  fontCode: 'monospace',

  // Text colors
  textColor: '#333333',
  textInverseColor: '#FFFFFF',
  textMutedColor: '#666666',

  // Toolbar default and active colors
  barTextColor: '#999999',
  barSelectedColor: '#1EA7FD',
  barBg: '#FFFFFF',

  // Form colors
  inputBg: '#FFFFFF',
  inputBorder: 'rgba(0,0,0,.1)',
  inputTextColor: '#333333',
  inputBorderRadius: 4,

  brandTitle: 'My custom storybook',
  brandUrl: 'https://example.com',
  brandImage: './logo.png',
  brandTarget: '_self',
});
```

----------------------------------------

TITLE: Configuring Button stories for Svelte CSF (TS)
DESCRIPTION: This snippet configures Storybook stories for a Svelte Button component using TypeScript and the Component Story Format (CSF). It imports the defineMeta function from '@storybook/addon-svelte-csf' and defines the component and metadata for the story. The tags array specifies that the stories should be included in the documentation page but not appear in Storybook's sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    /*
     * All stories in this file will:
     * - Be included in the docs page
     * - Not appear in Storybook's sidebar
     */
    tags: ['autodocs', '!dev'],
  });
</script>
```

----------------------------------------

TITLE: Args Modifying Component Appearance
DESCRIPTION: Shows how args can be used to configure the component's appearance, similar to what you would do in an application.  Example uses a `footer` arg to populate a child component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
import { Header } from './Header';
import { Main } from './Main';
import { Footer } from './Footer';

const createFooter = (text) => {
  const footer = document.createElement('footer');
  footer.innerText = text;
  return footer;
};

export const LoggedIn = Template.bind({});
LoggedIn.args = {
  ...HeaderStories.LoggedIn.args,
  ...MainStories.LoggedIn.args,
  footer: createFooter('Footer'),
};

```

----------------------------------------

TITLE: Simulating Form Submission with Play Function in Web Components (TS)
DESCRIPTION: This story simulates a user submitting a form by entering credentials and clicking the submit button. It uses the `play` function to interact with the component and `userEvent` to simulate user input. It then asserts that the `onSubmit` argument was called using `waitFor` and `expect`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-play-function.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { userEvent, waitFor, within, expect, fn } from 'storybook/test';

const meta: Meta = {
  component: 'my-form-element',
  args: {
    // 👇 Use `fn` to spy on the onSubmit arg
    onSubmit: fn(),
  },
};

export default meta;
type Story = StoryObj;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted: Story = {
  play: async ({ args, canvasElement, step }) => {
```

----------------------------------------

TITLE: Configuring webpackFinal in Storybook
DESCRIPTION: Demonstrates how to customize Storybook's Webpack configuration using the webpackFinal async function. It accepts a Webpack config object and options, and must return the modified config.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-webpack-final.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
async (config: Config, options: WebpackOptions) => Config
```

----------------------------------------

TITLE: Removing Implicit Actions in Storybook 8
DESCRIPTION: This code demonstrates how to explicitly define actions in Storybook 8, as implicit actions based on prop names starting with 'onX' have been removed. The example shows how to use @storybook/test's fn to create a jest spy for the onClick action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_55

LANGUAGE: typescript
CODE:
```
import { fn } from "@storybook/test";

export default {
  component: Button,
  args: {
    onClick: fn(),
  },
};

export const ButtonClick = {
  play: async ({ args, canvasElement }) => {
    await userEvent.click(within(canvasElement).getByRole("button"));
    await expect(args.onClick).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Registering an addon with addons.register()
DESCRIPTION: Registers an addon and provides access to the Storybook API. This is the entry point for all addons, allowing interaction with Storybook's functionalities. It allows you to register an addon and access the Storybook API.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
addons.register('my/addon', (api) => {
  // addon code goes here
});
```

----------------------------------------

TITLE: Update Icon Imports in Storybook Components
DESCRIPTION: This code snippet demonstrates how to update icon imports in Storybook components to use `@storybook/icons` instead of `@storybook/components`. It shows the removal of `Icons` and `IconButtonSkeleton` and the addition of `ZoomIcon`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-migration-guide.mdx#_snippet_3

LANGUAGE: diff
CODE:
```
- import { Icons, IconButtonSkeleton } from '@storybook/components';
+ import { ZoomIcon } from '@storybook/icons';
```

----------------------------------------

TITLE: Component Story with Accessibility Issues
DESCRIPTION: This code defines a Storybook story for a button component, including both an accessible and an inaccessible version. It demonstrates how the a11y addon can identify accessibility issues within a component's stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Button',
};

const Template = (args) => `<button ...${args}>${args.label}</button>`;

export const Accessible = Template.bind({});
Accessible.args = {
  label: 'Click me',
};

export const Inaccessible = Template.bind({});
Inaccessible.args = {
  label: 'Click me',
  style: 'color: white; background-color: white;'
};

```

----------------------------------------

TITLE: Accessing Story Function (Recommended)
DESCRIPTION: This code snippet demonstrates the recommended way of accessing the story function (`unboundStoryFn`) and applying loaders to get the story context. This approach is necessary when using loaders to ensure the story is properly rendered.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_205

LANGUAGE: javascript
CODE:
```
const { unboundStoryFn, applyLoaders } = store.fromId("some--id");
const context = await applyLoaders();
console.log(unboundStoryFn(context));
```

----------------------------------------

TITLE: Configuring object control for object ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'object' control for an object, providing a JSON-based editor for manipulating the object's values within Storybook's controls panel. It allows editing in raw mode.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_13

LANGUAGE: JavaScript
CODE:
```
{ control: 'object' }
```

----------------------------------------

TITLE: Reusing Story Args with Object Spread
DESCRIPTION: Demonstrates reusing args from another story using the object spread syntax. This allows for creating variations of a story with minimal code duplication.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
const LongName = Primary.bind({});
LongName.args = {
  ...Primary.args,
  label: 'Really Long Name',
};
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: A JavaScript configuration file for Storybook that exports default settings including the framework, story file patterns, and log level. The framework needs to be replaced with the actual framework being used (like react-webpack5 or vue3-vite).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-log-level.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  logLevel: 'debug',
};
```

----------------------------------------

TITLE: Adding a Panel to Storybook UI
DESCRIPTION: This code snippet demonstrates how to add a new Panel to Storybook's UI. Panel addons allow you to add your own UI in Storybook's addon panel. This is the most common type of addon in the ecosystem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-types.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
<CodeSnippets path="storybook-addon-panel-example.md" />
```

----------------------------------------

TITLE: Upgrading Storybook Automatically
DESCRIPTION: This command automates the upgrade process for Storybook, updating dependencies and running automigrations to address common upgrade tasks. It checks for breaking changes and provides instructions for resolution before proceeding with the upgrade.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/migration-guide/from-older-version.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx storybook upgrade
```

----------------------------------------

TITLE: Using Helper Functions in Storybook Test Runner
DESCRIPTION: JavaScript example of using helper functions provided by the Storybook test runner to access story internals during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import { within, userEvent } from '@storybook/testing-library';
import { expect } from '@storybook/jest';
import { getStoryContext } from '@storybook/test-runner';

export default {
  async test({ page, id }) {
    const canvas = within(page.locator('#storybook-root').first());
    const context = await getStoryContext(page, id);

    // Example: Check if a specific arg is passed to the story
    if (context.args.someArgument) {
      // Perform test based on the arg
    }

    // Your test logic here
  },
};
```

----------------------------------------

TITLE: Manually Setting Storybook Story ID
DESCRIPTION: Demonstrates how to manually set a story's ID to maintain permalinks when renaming stories or changing their hierarchy.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  id: 'foo-bar--baz',
  title: 'OtherFoo/Bar',
  component: Button,
};

export const Moo = {
  args: {
    label: 'Moo',
  },
};
```

----------------------------------------

TITLE: Migrate Storybook main.js to ESM format
DESCRIPTION: This code snippet demonstrates how to migrate a Storybook main.js configuration from CommonJS or named exports to a default ESM export. This is the recommended way to configure Storybook going forward.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_90

LANGUAGE: javascript
CODE:
```
export const stories = [
  "../stories/**/*.stories.mdx",
  "../stories/**/*.stories.@(js|jsx|ts|tsx)",
];
export const framework = { name: "@storybook/react-vite" };
```

----------------------------------------

TITLE: Enabling Autodocs via Tags in Meta
DESCRIPTION: To enable automatic documentation for a specific component, add the `autodocs` tag to the `tags` array in the component's meta definition. This will generate a documentation page for that component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { Button } from './Button';

//👇 This default export determines where your story goes in the story list
const meta: Meta<typeof Button> = {
  title: 'Example/Button',
  component: Button,
  tags: ['autodocs'],
};

export default meta;
```

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from "@storybook/react";

import { Button } from "./Button";

//👇 This default export determines where your story goes in the story list
const meta: Meta<typeof Button> = {
  title: "Example/Button",
  component: Button,
  tags: ['autodocs'],
};

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Test Runner with Accessibility Testing in JavaScript
DESCRIPTION: This snippet configures the Storybook test runner to perform accessibility testing using axe-playwright. It injects axe before each story visit and runs accessibility checks after each visit, generating a detailed HTML report.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-config.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { injectAxe, checkA11y } = require('axe-playwright');

/*
 * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api
 * to learn more about the test-runner hooks API.
 */
module.exports = {
  async preVisit(page) {
    await injectAxe(page);
  },
  async postVisit(page) {
    await checkA11y(page, 'body', {
      detailedReport: true,
      detailedReportOptions: {
        html: true,
      },
    });
  },
};
```

----------------------------------------

TITLE: Configure a11y to fail on violations
DESCRIPTION: This snippet configures the a11y addon to fail tests when accessibility violations are detected. It sets the `parameters.a11y.test` property to `'error'` in the Storybook preview configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
parameters: {
  a11y: {
    config: {},
    options: {},
    test: 'error',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with Vite and TypeScript
DESCRIPTION: This configuration file defines the stories' location, includes the documentation addon, specifies Vite as the builder, and configures TypeScript support using `react-docgen-typescript`. It exports a configuration object that Storybook uses to set up the environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-react-docgen.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: ['@storybook/addon-docs'],
  core: {
    builder: '@storybook/builder-vite',
  },
  typescript: {
    // Enables the `react-docgen-typescript` parser.
    // See https://storybook.js.org/docs/api/main-config/main-config-typescript for more information about this option.
    reactDocgen: 'react-docgen-typescript',
  },
};
```

----------------------------------------

TITLE: Register Component with Play Function
DESCRIPTION: This snippet demonstrates how to use the `play` function to interact with a registration form component, filling in information and validating it without user intervention. It uses the `userEvent` API to simulate user interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

export const RegistrationForm = () => /* component implementation */; 

RegistrationForm.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);

  // Simulate user input
  await userEvent.type(canvas.getByLabelText('First Name'), 'John');
  await userEvent.type(canvas.getByLabelText('Last Name'), 'Doe');
  await userEvent.type(canvas.getByLabelText('Email'), 'john.doe@example.com');
  await userEvent.type(canvas.getByLabelText('Password'), 'P@$$wOrd');

  // Submit the form
  await userEvent.click(canvas.getByRole('button', { name: 'Register' }));

  // Assert successful registration (example)
  await expect(canvas.getByText('Registration successful!')).toBeInTheDocument();
};
```

----------------------------------------

TITLE: Configuring Storybook's main.ts file in TypeScript
DESCRIPTION: This snippet shows the TypeScript version of the Storybook main configuration file. It uses the StorybookConfig type for type-checking and includes similar settings as the JavaScript version.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/index.mdx#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// .storybook/main.ts

import type { StorybookConfig } from '@storybook/react-webpack5';

const config: StorybookConfig = {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: ['@storybook/addon-links', '@storybook/addon-essentials'],
  framework: {
    name: '@storybook/react-webpack5',
    options: {},
  },
  docs: {
    autodocs: 'tag',
  },
};

export default config;
```

----------------------------------------

TITLE: Adding SWC Compiler to Webpack5 in Storybook
DESCRIPTION: This code shows how to add the SWC compiler to a Webpack5-based Storybook project.  The `@storybook/builder-webpack5` package is now compiler-agnostic, so you need to add the `@storybook/addon-webpack5-compiler-swc` addon to use SWC.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_57

LANGUAGE: shell
CODE:
```
npx storybook@latest add @storybook/addon-webpack5-compiler-swc
```

----------------------------------------

TITLE: Click Example Storybook Play Function (JavaScript)
DESCRIPTION: This play function simulates a user clicking a button within a Storybook story using the userEvent.click method. It queries the canvas for a button with a specific role and then triggers a click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#_snippet_4

LANGUAGE: js
CODE:
```
export const ClickExample = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));
  },
};
```

----------------------------------------

TITLE: Configuring Button Component Story in CSF 3
DESCRIPTION: Exports default component metadata for the Button component using Component Story Format 3. This is the basic required configuration to create stories for a component in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-auto-title.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default { component: Button };
```

----------------------------------------

TITLE: Vue 3 SFC with TypeScript
DESCRIPTION: This Vue 3 single file component (SFC) demonstrates strong typing for props and emits using TypeScript. It defines props for 'count' (number) and 'disabled' (boolean), and emits for 'increaseBy' and 'decreaseBy' events, both with a number parameter.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/typescript.mdx#_snippet_1

LANGUAGE: html
CODE:
```
<script setup lang="ts">
    defineProps<{ count: number; disabled: boolean }>();

    const emit = defineEmits<{ 
      (e: 'increaseBy', amount: number): void; 
      (e: 'decreaseBy', amount: number): void; 
    }>();
  </script>

  <template>
    <div class="card">
      {{ count }}
      <button @click="emit('increaseBy', 1)" :disabled="disabled">Increase by 1</button>
      <button @click="$emit('decreaseBy', 1)" :disabled="disabled">Decrease by 1</button>
    </div>
  </template>
```

----------------------------------------

TITLE: Storybook configuration directory
DESCRIPTION: Specifies the Storybook configuration directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_79

LANGUAGE: Shell
CODE:
```
storybook upgrade --config-dir .storybook
```

----------------------------------------

TITLE: Initializing Button Storybook Story (Common) - TS
DESCRIPTION: This code initializes a Storybook story for a Button component using TypeScript. It defines metadata for the component and exports primary and secondary stories with different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the name of your framework
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    ...Primary.args,
    primary: false,
  },
};
```

----------------------------------------

TITLE: Setting component annotation in Story Default Export
DESCRIPTION: This snippet shows how to set the `component` annotation in the default export of a story file. This allows Storybook to infer controls and auto-generate argTypes for the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
import type { Meta } from '@storybook/web-components';
import { Button } from './Button';

const meta: Meta<typeof Button> = {
  component: Button,
  title: 'Example/Button',
};

export default meta;
```

----------------------------------------

TITLE: Using Template.bind() for Story Creation with Args in Storybook
DESCRIPTION: Creates a Button story using the Template.bind() approach with custom args, enabling the Storybook controls addon to work with the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_6

LANGUAGE: JavaScript
CODE:
```
export const WithTemplate = Template.bind({});
WithTemplate.args = { foo: 'bar' }
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: This JavaScript configuration file sets up Storybook by specifying the framework, story locations, and addons. It also customizes the documentation tab's default name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-full-config.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: ['@storybook/addon-docs'],
  docs: {
    //👇 See the table below for the list of supported options
    defaultName: 'Documentation',
  },
};
```

----------------------------------------

TITLE: Simulating Form Submission with Play Function in Svelte
DESCRIPTION: This story simulates a user submitting a form by entering credentials and clicking the submit button. It uses the `play` function to interact with the component and `userEvent` to simulate user input. It then asserts that the `onSubmit` argument was called using `waitFor` and `expect`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-play-function.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, waitFor, within, expect, fn } from 'storybook/test';

import Form from './Form.svelte';

const meta = {
  component: Form,
  args: {
    // 👇 Use `fn` to spy on the onSubmit arg
    onSubmit: fn(),
  },
} satisfies Meta<typeof Form>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted: Story = {
  play: async ({ args, canvasElement, step }) => {
    const canvas = within(canvasElement);

    await step('Enter credentials', async () => {
      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
      await userEvent.type(canvas.getByTestId('password'), 'supersecret');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button'));
    });

    // 👇 Now we can assert that the onSubmit arg was called
    await waitFor(() => expect(args.onSubmit).toHaveBeenCalled());
  },
};
```

----------------------------------------

TITLE: Running Tests Against Deployed Storybook via GitHub Actions
DESCRIPTION: YAML configuration for running Storybook tests against a deployed instance using GitHub Actions deployment events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_2

LANGUAGE: yaml
CODE:
```
name: 'Test-runner: Deployment'
on:
  deployment_status:
jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install dependencies
        run: yarn
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Run tests
        run: yarn test-storybook
        env:
          TARGET_URL: ${{ github.event.deployment_status.target_url }}
```

----------------------------------------

TITLE: Configuring Storybook Manager - TypeScript
DESCRIPTION: This code snippet configures the Storybook manager using the `addons.setConfig` method in TypeScript. It customizes various aspects of the UI, such as the navigation size, panel heights/widths, toolbar visibility, and sidebar settings. It also includes custom layout functions with type definitions to control the visibility of the sidebar and toolbar based on the current story or view mode.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-config-layout.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { addons, type State } from 'storybook/manager-api';

addons.setConfig({
  navSize: 300,
  bottomPanelHeight: 300,
  rightPanelWidth: 300,
  panelPosition: 'bottom',
  enableShortcuts: true,
  showToolbar: true,
  theme: undefined,
  selectedPanel: undefined,
  initialActive: 'sidebar',
  layoutCustomisations: {
    showSidebar(state: State, defaultValue: boolean) {
      return state.storyId === 'landing' ? false : defaultValue;
    },
    showToolbar(state: State, defaultValue: boolean) {
      return state.viewMode === 'docs' ? false : defaultValue;
    },
  },
  sidebar: {
    showRoots: false,
    collapsedRoots: ['other'],
  },
  toolbar: {
    title: { hidden: false },
    zoom: { hidden: false },
    eject: { hidden: false },
    copy: { hidden: false },
    fullscreen: { hidden: false },
  },
});
```

----------------------------------------

TITLE: Configuring Storybook Main Configuration in TypeScript
DESCRIPTION: TypeScript configuration for Storybook's main.ts file, including type definitions. This example demonstrates how to properly type the configuration object using StorybookConfig from the framework package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-storyloading-with-directory.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  // 👇 Storybook will load all existing stories within the MyStories folder
  stories: ['../packages/MyStories'],
};

export default config;
```

----------------------------------------

TITLE: Defining Button Stories for Web Components (JS)
DESCRIPTION: This code defines Storybook stories for a web component named 'demo-button'. It exports a default object containing the component definition and defines primary, secondary, and tertiary stories with different labels and background colors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_13

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
};

export const Primary = {
  args: {
    backgroundColor: '#ff0',
    label: 'Button',
  },
};

export const Secondary = {
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
};

export const Tertiary = {
  args: {
    ...Primary.args,
    label: '📚📕📈🤓',
  },
};

```

----------------------------------------

TITLE: Using useArgs Hook in Storybook Manager API
DESCRIPTION: Demonstrates how to import and use the useArgs hook from Storybook's manager API to access, update, and reset story arguments. The snippet shows three main operations: retrieving args with destructuring, updating specific args with new values, and resetting either specific args or all args.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/args-usage-with-addons.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { useArgs } from 'storybook/manager-api';

const [args, updateArgs, resetArgs] = useArgs();

// To update one or more args:
updateArgs({ key: 'value' });

// To reset one (or more) args:
resetArgs((argNames: ['key']));

// To reset all args
resetArgs();
```

----------------------------------------

TITLE: Testing Svelte Story with Vitest
DESCRIPTION: This test uses Vitest and Storybook's composeStories to test a Svelte story. It imports the stories, composes the Primary story, and then runs the story's play function to verify interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-with-play-function.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { test } from 'vitest';
import { composeStories } from '@storybook/svelte-vite';

import * as stories from './Button.stories';

const { Primary } = composeStories(stories);

test('renders and executes the play function', async () => {
  // Mount story and run interactions
  await Primary.run();
});
```

----------------------------------------

TITLE: Writing Stats JSON to Disk with Webpack
DESCRIPTION: This command writes the stats JSON to disk, requiring Webpack. It's useful for analyzing the build process and optimizing performance. The output is saved to the specified directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_18

LANGUAGE: CLI
CODE:
```
storybook dev --stats-json /tmp/stats
```

----------------------------------------

TITLE: Configuring Preset Colors in Storybook Controls (JS)
DESCRIPTION: This JavaScript snippet configures the Storybook preview to customize the preset colors available in the controls addon. It defines an array of color objects and color strings that will be displayed as options for color selection in the Storybook UI. This allows users to easily select from a predefined set of colors when adjusting component properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-parameters-color-swatches.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    controls: {
      presetColors: [{ color: '#ff4785', title: 'Coral' }, 'rgba(0, 159, 183, 1)', '#fe4a49'],
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Main Entry Point in TypeScript
DESCRIPTION: This TypeScript snippet provides a type-safe approach to Storybook's main configuration by importing the StorybookConfig type. It mirrors the JavaScript configuration but benefits from IDE type checking, improved maintainability, and autocompletion. The dependencies include Storybook for the specified framework and its type definitions. As with the JavaScript version, the framework and story patterns should be updated for the project's needs, and this file is intended for projects using TypeScript in their build setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-project-json.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    disableProjectJson: true,
  },
};

export default config;
```

----------------------------------------

TITLE: Initializing Storybook Preview with ThemeProvider (TS)
DESCRIPTION: This TypeScript snippet configures the Storybook preview using styled-components ThemeProvider for theming. It imports necessary modules, defines global styles, and utilizes withThemeFromJSXProvider to manage theme switching between light and dark themes. It also defines the Preview and Renderer types from @storybook/your-framework.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-jsx-provider-decorator.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import { Preview, Renderer } from '@storybook/your-framework';

import { withThemeFromJSXProvider } from '@storybook/addon-themes';

import { createGlobalStyle, ThemeProvider } from 'styled-components';
import { lightTheme, darkTheme } from '../src/themes';

const GlobalStyles = createGlobalStyle`
  body {
    font-family: "Nunito Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
  }
`;

const preview: Preview = {
  decorators: [
    withThemeFromJSXProvider<Renderer>({
      themes: {
        light: lightTheme,
        dark: darkTheme,
      },
      defaultTheme: 'light',
      Provider: ThemeProvider,
      GlobalStyles,
    }),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Use Global Type in Vue Decorator
DESCRIPTION: This code snippet demonstrates how to consume a global type (e.g., `theme`) within a decorator in a Vue Storybook. It uses the `context.globals.theme` value to apply a theme provider (e.g., `Vuetify`) to all stories. This allows you to dynamically change the theme of your components based on the selected global value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import { createVuetify, ThemeDefinition } from 'vuetify';
import * as components from 'vuetify/components'
import * as directives from 'vuetify/directives'

const lightTheme: ThemeDefinition = {
  dark: false,
  colors: {
    background: '#FFFFFF',
    surface: '#FFFFFF',
    primary: '#6200EE',
    'primary-darken-1': '#3700B3',
    secondary: '#03DAC6',
    'secondary-darken-1': '#018786',
    error: '#B00020',
    info: '#2196F3',
    success: '#4CAF50',
    warning: '#FB8C00',
  }
}

const darkTheme: ThemeDefinition = {
  dark: true,
  colors: {
    background: '#121212',
    surface: '#121212',
    primary: '#BB86FC',
    'primary-darken-1': '#3700B3',
    secondary: '#03DAC6',
    'secondary-darken-1': '#03DAC6',
    error: '#CF6679',
    info: '#2196F3',
    success: '#4CAF50',
    warning: '#FB8C00',
  }
}

export const decorators = [(story, context) => {
  const vuetify = createVuetify({
    components,
    directives,
    theme: {
      defaultTheme: context.globals.theme,
      themes: {
        lightTheme,
        darkTheme,
      }
    }
  })
  return ({
    components: { story },
    template: '<v-app><story /></v-app>',
    vuetify,
  })
}];
```

----------------------------------------

TITLE: Defining Svelte Button Story with CSF (TS)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using Component Story Format (CSF) with TypeScript. It imports the defineMeta function from '@storybook/addon-svelte-csf' and the Button component. It then defines metadata for the component and creates a primary story with a 'primary' variant.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story name="Primary" args={{ variant: 'primary' }} />

```

----------------------------------------

TITLE: Extending TypeScript Configuration in Storybook
DESCRIPTION: Example showing how to extend the default TypeScript configuration in Storybook's main.ts file to enable type checking and customize other TypeScript-related options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/typescript.mdx#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
<CodeSnippets path="storybook-main-extend-ts-config.md" />
```

----------------------------------------

TITLE: Consuming Args in DocsPage Story - JavaScript
DESCRIPTION: This code snippet demonstrates how to write a story in DocsPage that consumes args. The story function takes an args object as input and spreads it as props to the component, enabling controls in the auto-generated props table.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  title: 'MyComponent',
  component: MyComponent,
};

export const WithControls = (args) => <MyComponent {...args} />;
```

----------------------------------------

TITLE: Enabling Documentation Mode in Angular Storybook
DESCRIPTION: Starts Storybook in documentation mode, which focuses on displaying and navigating documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_28

LANGUAGE: JSON
CODE:
```
{"docs": true}
```

----------------------------------------

TITLE: Storybook Configuration (TypeScript)
DESCRIPTION: Configures Storybook using TypeScript, defining the framework, stories, addons, and build settings. It imports the StorybookConfig type and exports the configuration object. The build configuration disables the accessibility addon during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-disableaddons.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: ['@storybook/addon-a11y', '@storybook/addon-vitest'],
  build: {
    test: {
      disabledAddons: ['@storybook/addon-a11y'],
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook Stories for an Angular Icon Component (TypeScript)
DESCRIPTION: This TypeScript code defines Storybook stories for an Angular `Icon` component using the Component Story Format (CSF). It imports the `Icon` component, several icon definitions (`IconA` to `IconE`), and necessary types from `@storybook/angular` (`Meta`, `StoryObj`). An `iconMap` object is created to map icon names (strings) to their actual component definitions, allowing them to be used safely with Storybook's `argTypes`. The `meta` object configures the overall story, specifying the title, the component being documented (`Icon`), and defining controls for the `icon` prop using `argTypes` based on the keys of `iconMap`. A default export makes this configuration available to Storybook. A `Template` story of type `StoryObj<Icon>` is defined, which takes arguments (`args`), retrieves the selected icon component from `iconMap` based on the `icon` argument, and returns the configuration needed to render the `Icon` component with the selected icon and other passed arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-icons.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
```ts filename="Icon.stories.ts" renderer="angular" language="ts"
import type { Meta, StoryObj } from '@storybook/angular';

import Icon from './icon.component';

import { IconA, IconB, IconC, IconD, IconE } from './icons';

// Maps the icons to a JSON serializable object to be safely used with the argTypes
const iconMap = { IconA, IconB, IconC, IconD, IconE };

const meta: Meta<Icon> = {
  title: 'My Story with Icons',
  component: Icon,
  argTypes: {
    icon: {
      options: Object.keys(iconMap),
    },
  },
};

export default meta;
type Story = StoryObj<Icon>;

const Template: Story = (args) => {
  // retrieves the appropriate icon passes it as a component prop
  const { icon } = args;
  const selectedIcon = iconMap[icon];
  return {
    component: Icon,
    props: {
      ...args,
      icon: selectedIcon,
    },
  };
};
```
```

----------------------------------------

TITLE: Run Storybook Automigrate
DESCRIPTION: This command runs the Storybook automigrate tool, which analyzes your project and suggests upgrades to dependencies, configurations, and story files. It provides zero-config upgrades and helps keep your Storybook project up-to-date.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_155

LANGUAGE: Shell
CODE:
```
npx sb@latest automigrate
```

----------------------------------------

TITLE: Setting up the a11y addon
DESCRIPTION: This code snippet shows how to add the a11y addon to your Storybook project using the command line interface. This addon helps to check accessibility for your stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx storybook add @storybook/addon-a11y
```

----------------------------------------

TITLE: Setting global autodocs tag in preview.js
DESCRIPTION: This code snippet demonstrates how to set the 'autodocs' tag globally in `.storybook/preview.js` to generate autodocs for every component. This replaces the `docs.autodocs = true` setting in `main.js`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_42

LANGUAGE: javascript
CODE:
```
// .storybook/preview.js
export default {
  tags: ["autodocs"],
};
```

----------------------------------------

TITLE: Testing Multiple Stories Together
DESCRIPTION: Shows how to test multiple stories in a single test using the composeStories function with args and decorators.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { render, screen } from '@testing-library/react';
import { composeStories } from '@storybook/react';
import * as stories from './Button.stories';

const { Primary, Secondary } = composeStories(stories);

test('renders primary and secondary buttons', () => {
  render(
    <>
      <Primary />
      <Secondary />
    </>
  );
  expect(screen.getAllByRole('button')).toHaveLength(2);
});
```

----------------------------------------

TITLE: Use Global Type in Angular Decorator
DESCRIPTION: This code snippet demonstrates how to consume a global type (e.g., `theme`) within a decorator in an Angular Storybook. It uses the `context.globals.theme` value to apply a theme provider (e.g., `Angular Material`) to all stories. This allows you to dynamically change the theme of your components based on the selected global value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { applicationConfig, Meta, StoryFn } from '@storybook/angular';
import { importProvidersFrom } from '@angular/core';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

export const decorators = [
  applicationConfig({
    providers: [
      importProvidersFrom(
        BrowserModule,
        BrowserAnimationsModule,
        MatToolbarModule,
        MatIconModule,
        MatButtonModule
      ),
    ],
  }),
];
```

----------------------------------------

TITLE: Correct Way to Register Addons
DESCRIPTION: This code snippet shows the correct way to register Storybook addons by adding the addon name to the `addons` array in `.storybook/main.js`. This is the recommended method for Storybook 7.0 and later.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_154

LANGUAGE: JavaScript
CODE:
```
module.exports = { addons: ["my-addon"] };
```

----------------------------------------

TITLE: Testing Login Form with Cypress in JavaScript
DESCRIPTION: This code snippet defines a Cypress test suite for a login form. It visits a specific Storybook iframe URL, locates the login form, and verifies that the email and password fields contain expected values. The test uses Cypress commands to interact with and assert on DOM elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-cypress-test.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
/// <reference types="cypress" />

describe('Login Form', () => {
  it('Should contain valid login information', () => {
    cy.visit('/iframe.html?id=components-login-form--example');
    cy.get('#login-form').within(() => {
      cy.log('**enter the email**');
      cy.get('#email').should('have.value', 'email@provider.com');
      cy.log('**enter password**');
      cy.get('#password').should('have.value', 'a-random-password');
    });
  });
});
```

----------------------------------------

TITLE: Simulating Filled Form Interaction and Assertion in React (JS)
DESCRIPTION: This code defines a Storybook story for the LoginForm component in React (JavaScript), simulating user interaction with a filled form and asserting the expected DOM structure. It uses userEvent to type into email and password fields, clicks the submit button, and asserts that a success message is displayed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_3

LANGUAGE: js
CODE:
```
/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));

    // 👇 Assert DOM structure
    await expect(
      canvas.getByText(
        'Everything is perfect. Your account is ready and we should probably get you started!'
      )
    ).toBeInTheDocument();
  },
};
```

----------------------------------------

TITLE: Enabling Autodocs via Tags in Preview
DESCRIPTION: To enable automatic documentation for all stories in a project, add the `autodocs` tag to the `tags` array in your `.storybook/preview.js|ts` file. This will generate a documentation page for each component with at least one story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
/** @type { import('@storybook/react').Preview } */
const preview = {
  parameters: {
    tags: ['autodocs'],
  },
};

export default preview;
```

LANGUAGE: typescript
CODE:
```
import type { Preview } from "@storybook/react";

const preview: Preview = {
  parameters: {
    tags: ['autodocs'],
  },
};

export default preview;
```

----------------------------------------

TITLE: Using TypeScript 4.9 'satisfies' Operator in Storybook Stories
DESCRIPTION: Example of using TypeScript 4.9's 'satisfies' operator in component stories to ensure stricter type checking while preserving type inference for component props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/typescript.mdx#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
<CodeSnippets path="button-story-baseline-with-satisfies.md" />
```

----------------------------------------

TITLE: Configure Storybook Framework with React Vite in TypeScript
DESCRIPTION: This snippet configures Storybook to use React Vite as the framework in a TypeScript file. It imports the StorybookConfig type and sets the framework property to '@storybook/react-vite', removing the previous webpack configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-add-framework.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/react-vite';

const config: StorybookConfig = {
  // ...
  // framework: '@storybook/react-webpack5', 👈 Remove this
  framework: '@storybook/react-vite', // 👈 Add this
};

export default config;
```

----------------------------------------

TITLE: Configuring Angular Builder in angular.json
DESCRIPTION: This JSON configuration shows how to configure the Storybook builder within the `angular.json` file. It defines the `storybook` and `build-storybook` targets, specifying the builder, configuration directory, build target, and output directory.  It's essential for integrating Storybook into the Angular CLI workflow.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "projects": {
    "your-project": {
      "architect": {
        "storybook": {
          "builder": "@storybook/angular:start-storybook",
          "options": {
            // The path to the storybook config directory
            "configDir": ".storybook",
            // The build target of your project
            "browserTarget": "your-project:build",
            // The port you want to start Storybook on
            "port": 6006
            // More options available, documented here:
            // https://github.com/storybookjs/storybook/tree/next/code/frameworks/angular/src/builders/start-storybook/schema.json
          }
        },
        "build-storybook": {
          "builder": "@storybook/angular:build-storybook",
          "options": {
            "configDir": ".storybook",
            "browserTarget": "your-project:build",
            "outputDir": "dist/storybook/your-project"
            // More options available, documented here:
            // https://github.com/storybookjs/storybook/tree/next/code/frameworks/angular/src/builders/build-storybook/schema.json
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Storybook Test Runner in JavaScript
DESCRIPTION: This snippet configures the Storybook test runner in JavaScript. It sets up image snapshot testing, defines a custom snapshots directory, and implements a post-visit hook for capturing screenshots after ensuring the page is ready.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-image-snapshot-testing.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { waitForPageReady } = require('@storybook/test-runner');

const { toMatchImageSnapshot } = require('jest-image-snapshot');

const customSnapshotsDir = `${process.cwd()}/__snapshots__`;

/** @type { import('@storybook/test-runner').TestRunnerConfig } */
module.exports = {
  setup() {
    expect.extend({ toMatchImageSnapshot });
  },
  async postVisit(page, context) {
    // Waits for the page to be ready before taking a screenshot to ensure consistent results
    await waitForPageReady(page);

    // To capture a screenshot for different browsers, add page.context().browser().browserType().name() to get the browser name to prefix the file name
    const image = await page.screenshot();
    expect(image).toMatchImageSnapshot({
      customSnapshotsDir,
      customSnapshotIdentifier: context.id,
    });
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with Variants in React (TSX)
DESCRIPTION: This code defines Storybook stories for a React Button component using TypeScript, including variants and a combo example. It uses the Meta and StoryObj types from '@storybook/react-vite' to configure the component and its stories, setting tags to control their visibility and testing behavior.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;
export default meta;

type Story = StoryObj<typeof meta>;

export const Variant1: Story = {
  // 👇 This story will not appear in Storybook's sidebar or docs page
  tags: ['!dev', '!autodocs'],
  args: { variant: 1 },
};

export const Variant2: Story = {
  // 👇 This story will not appear in Storybook's sidebar or docs page
  tags: ['!dev', '!autodocs'],
  args: { variant: 2 },
};

export const Combo: Story = {
  // 👇 This story should not be tested, but will appear in the sidebar and docs page
  tags: ['!test'],
  render: () => (
    <>
      <Button variant={1} />
      <Button variant={2} />
    </>
  ),
};
```

----------------------------------------

TITLE: Configuring Multi-Select Control in ArgTypes
DESCRIPTION: This snippet shows how to configure a multi-select control using the 'control' annotation in the argTypes field. It provides a drop-down list that allows multiple selected values for the 'countries' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_24

LANGUAGE: javascript
CODE:
```
argTypes: { countries: { control: 'multi-select', options: ['USA', 'Canada', 'Mexico'] } }
```

----------------------------------------

TITLE: Configuring Accessibility in Storybook Story for Svelte (TypeScript 4.9 with Satisfies Operator)
DESCRIPTION: This code sets up a Storybook story for a Svelte component using TypeScript 4.9's satisfies operator for precise type checking with '@storybook/svelte'. It demonstrates advanced configuration of the a11y addon, including disabling accessibility checks and restricting validation by CSS selector, as well as enabling manual accessibility test execution via the 'manual' global flag. Useful for Svelte teams seeking strict typing and contemporary Storybook integration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_7

LANGUAGE: ts-4-9
CODE:
```
import type { Meta, StoryObj } from '@storybook/svelte';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ExampleStory: Story = {
  parameters: {
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Update Storybook Dependency in package.json (Diff)
DESCRIPTION: This diff shows how to update the Storybook dependency in your addon's package.json file to be compatible with Storybook 9.0. It ensures your addon uses the latest version of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-migration-guide.mdx#_snippet_0

LANGUAGE: Diff
CODE:
```
{
  "devDependencies": {
    "storybook": "next" // or "latest", or "^9.0.0"
  }
}
```

----------------------------------------

TITLE: Configuring Storybook Preview with Theme Decorator (TypeScript)
DESCRIPTION: This TypeScript snippet configures the Storybook preview to include a theme decorator. It imports the `withThemeByClassName` function from `@storybook/addon-themes` and applies it as a decorator to switch between light and dark themes by toggling CSS classes. It also imports the application's global CSS file.  It also imports `Preview` and `Renderer` from the framework you are using.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-classname-decorator.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import { Preview, Renderer } from '@storybook/your-framework';

import { withThemeByClassName } from '@storybook/addon-themes';

import '../src/index.css'; // Your application's global CSS file

const preview: Preview = {
  decorators: [
    withThemeByClassName<Renderer>({
      themes: {
        light: '',
        dark: 'dark',
      },
      defaultTheme: 'light',
    }),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Enable Next.js appDirectory in Storybook (TS)
DESCRIPTION: This TypeScript snippet configures Storybook to work with the Next.js app directory by setting the `appDirectory` parameter to `true` within the `nextjs` configuration. It imports the `Preview` type from `@storybook/your-framework` and exports a `preview` object with the configured parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-app-directory-in-preview.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  // ...
  parameters: {
    // ...
    nextjs: {
      appDirectory: true,
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It exports an object that specifies the framework and the location of story files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-js-md-files.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../my-project/src/components/*.@(js|md)'],
};
```

----------------------------------------

TITLE: Configuring Button Story for Framework
DESCRIPTION: This snippet configures a Storybook story for a Button component using a generic framework. It imports the necessary modules from '@storybook/your-framework' and defines the component and a primary story with the 'primary' argument set to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-baseline.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

//👇 Throws a type error if the args don't match the component props
export const Primary: Story = {
  args: {
    primary: true,
  },
};
```

----------------------------------------

TITLE: Define Svelte Story with Play Function
DESCRIPTION: This code defines a Storybook story for a Svelte component named RegistrationForm. It uses the `play` function to simulate user interaction with the form, filling in the email and password fields and then submitting the form. The `within` function is used to query the component's canvas for specific elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import RegistrationForm from './RegistrationForm.svelte';

const meta = {
  component: RegistrationForm,
} satisfies Meta<typeof RegistrationForm>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const emailInput = canvas.getByLabelText('email', {
      selector: 'input',
    });

    await userEvent.type(emailInput, 'example-email@email.com', {
      delay: 100,
    });

    const passwordInput = canvas.getByLabelText('password', {
      selector: 'input',
    });

    await userEvent.type(passwordInput, 'ExamplePassword', {
      delay: 100,
    });
    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const submitButton = canvas.getByRole('button');

    await userEvent.click(submitButton);
  },
};
```

----------------------------------------

TITLE: Defining Button Stories for React in Storybook
DESCRIPTION: This snippet defines a Storybook story for a Button component in React. It imports the Button component, sets up the default export for Storybook, and defines a 'Sample' story that renders the Button with a 'hello button' label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-sample.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Sample = {
  render: () => <Button label="hello button" />,
};
```

----------------------------------------

TITLE: Async Story with Play Function in Svelte (TS)
DESCRIPTION: This TypeScript snippet defines a Storybook story with a play function that interacts with a Svelte component on the canvas. It uses `within` to scope the query to the canvas element and `findByRole` to wait for a button to be rendered before interacting with it, demonstrating asynchronous testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-query-findby.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const AsyncExample: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // Other steps

    // Waits for the component to be rendered before querying the element
    await canvas.findByRole('button', { name: / button label/i });
  },
};
```

----------------------------------------

TITLE: Running Storybook Doctor
DESCRIPTION: Executes a health check on the Storybook project, identifying common issues and suggesting fixes. Useful when upgrading Storybook versions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_101

LANGUAGE: shell
CODE:
```
storybook doctor [options]
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet shows how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines the configuration object with proper typing, and exports it as the default. The configuration includes framework specification, story locations, and build options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-autodocs.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  build: {
    test: {
      disableAutoDocs: false,
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Mocking Args with storybook/test fn
DESCRIPTION: Demonstrates how to use the `fn` utility from `storybook/test` to mock and spy on args. This is useful for writing component tests and capturing events in the action panel when the component calls the spied-on arg.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/actions.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import { fn } from '@storybook/test';

export default {
  title: 'Button',
};

const Template = ({ onClick, ...args }) => {
  const btn = document.createElement('button');
  btn.innerText = 'Click me';
  btn.addEventListener('click', onClick);
  return btn;
};

export const WithAction = Template.bind({});
WithAction.args = {
  onClick: fn(),
};

```

----------------------------------------

TITLE: Configuring Storybook Backgrounds in TypeScript
DESCRIPTION: This TypeScript snippet configures the background options for Storybook stories. It imports the `Preview` type from the Storybook framework and defines a set of background values (red and green) that can be selected in the Storybook UI to change the background of the rendered components. This allows developers to preview components against different backgrounds.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-params.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    backgrounds: {
      values: [
        { name: 'red', value: '#f00' },
        { name: 'green', value: '#0f0' },
      ],
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Handling Complex Values with Custom Render Function
DESCRIPTION: Shows how to handle complex values in Storybook args by using primitive values (e.g., strings) and a custom `render` function to convert them to their complex counterparts before rendering. This approach allows for flexibility in representing values that cannot be directly serialized in the URL.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
export const MyComponent = (args) => {
  const complexValue = args.complex ? <div>Complex Content</div> : null;
  return <div>{complexValue}</div>;
};

MyComponent.argTypes = {
  complex: {
    control: {
      type: 'boolean',
    },
  },
};

```

----------------------------------------

TITLE: Configure Addon Options in Storybook
DESCRIPTION: This example demonstrates how to configure addon options for the Storybook documentation page by adding them to the Storybook UI configuration file (`.storybook/main.js|ts`). The options include `csfPluginOptions` and `mdxPluginOptions` for customizing the CSF and MDX plugins.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_14

LANGUAGE: javascript
CODE:
```
This is a placeholder for the 'addon-docs-options.md' code snippet.
```

----------------------------------------

TITLE: Customizing Babel Configuration in Storybook (JavaScript/TypeScript)
DESCRIPTION: This code snippet demonstrates how to customize Storybook's Babel configuration by modifying the 'babel' function in the main.js or main.ts file. It shows examples of adding plugins, presets, and overriding the entire configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-babel.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  babel: async (config) => {
    return {
      ...config,
      plugins: [...config.plugins, 'plugin-name'],
    };
  },
};

// Or

export default {
  babel: (config) => {
    config.plugins.push('plugin-name');
    return config;
  },
};

// Or

export default {
  babel: () => {
    return {
      presets: ['@babel/preset-env'],
      plugins: ['plugin-name'],
    };
  },
};
```

----------------------------------------

TITLE: Setting Global Layout Parameter in Storybook Preview
DESCRIPTION: Configures the global layout parameter in Storybook's preview.js file to center all stories in the Canvas tab.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/story-layout.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  parameters: {
    layout: 'centered',
  },
};
```

----------------------------------------

TITLE: Importing JSON Data in Storybook Stories
DESCRIPTION: Shows how to import JSON data from an external file into a Storybook story. The JSON file will be automatically parsed and its contents will be available in the 'data' variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-import-json.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// This will automatically be parsed to the contents of `data.json`
import data from './data.json';
```

----------------------------------------

TITLE: Configuring Button Component Meta for Web Components in Storybook (TS)
DESCRIPTION: This code configures the metadata for a Button component in Storybook using TypeScript for web components. It defines the component and sets up argument types (argTypes) to control the component's properties, specifically allowing either a label or an image to be passed, but not both. The 'if' property within 'argTypes' is used to conditionally display the 'label' or 'image' control based on the presence of the other.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  argTypes: {
    // Button can be passed a label or an image, not both
    label: {
      control: 'text',
      if: { arg: 'image', truthy: false },
    },
    image: {
      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },
      if: { arg: 'label', truthy: false },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Button Component Story - Angular
DESCRIPTION: This code configures the story for a Button component in Storybook using Angular. It defines the component and its argTypes, which control the properties that can be customized in the Storybook UI, such as backgroundColor, primary, label, onClick, and size. The argTypes are organized into categories like Colors, Text, Events, and Sizes for better organization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-categories.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  argTypes: {
    // Assigns the argTypes to the Colors category
    backgroundColor: {
      control: 'color',
      table: {
        category: 'Colors',
      },
    },
    primary: {
      table: {
        category: 'Colors',
      },
    },
    // Assigns the argType to the Text category
    label: {
      table: {
        category: 'Text',
      },
    },
    // Assigns the argType to the Events category
    onClick: {
      table: {
        category: 'Events',
      },
    },
    // Assigns the argType to the Sizes category
    size: {
      table: {
        category: 'Sizes',
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Documenting Button Component with Direct Title in Storybook MDX
DESCRIPTION: This MDX snippet creates documentation for a Button component using a direct title reference. It imports the Meta and Controls components from Storybook, defines a component Meta with a title, and provides documentation sections including definition, usage, and component inputs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-baseline-example.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Meta, Controls } from '@storybook/addon-docs/blocks';

<Meta title="Button" />

# Definition

Button is a clickable interactive element that triggers a response.

You can place text and icons inside of a button.

Buttons are often used for form submissions and to toggle elements into view.

## Usage

The component comes in different variants such as `primary`, `secondary`, `large` and `small` which you can use to alter the look and feel of the button.

## Inputs

Button has the following properties:

<Controls />
```

----------------------------------------

TITLE: Fire Event Example Storybook Play Function (Angular)
DESCRIPTION: This play function simulates firing a click event on an element with a specific test ID within a Storybook story using the fireEvent.click method. It queries the canvas for an element with the 'data-testid' attribute and then triggers a click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#_snippet_1

LANGUAGE: ts
CODE:
```
export const FireEventExample: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await fireEvent.click(canvas.getByTestId('data-testid'));
  },
};
```

----------------------------------------

TITLE: Dynamically Loading Stories in Storybook with TypeScript
DESCRIPTION: A TypeScript configuration for Storybook that uses strongly-typed interfaces and an async function to dynamically find and load story files. This version imports types from Storybook packages and defines a properly typed async function that returns StoriesEntry objects.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories-with-logic.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';
import type { StoriesEntry } from 'storybook/internal/types';

async function findStories(): Promise<StoriesEntry[]> {
  // your custom logic returns a list of files
}

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: async (list: StoriesEntry[]) => [
    ...list,
    // 👇 Add your found stories to the existing list of story files
    ...(await findStories()),
  ],
};

export default config;
```

----------------------------------------

TITLE: Generate Static Build
DESCRIPTION: Illustrates the builder's responsibility to generate a static build of the Storybook that can be published to a web hosting service. The builder must provide a mechanism to generate this static build.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
// .storybook/main.js

module.exports = {
  // ... other configurations
  staticDirs: ['../public'], // Optional: to serve static assets
  outputDir: '../storybook-static', // Optional: customize the output directory
};

```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: This TypeScript configuration file sets up Storybook, specifying the framework, defining where to find story files, and configuring addons for documentation and styling with Webpack. It imports the StorybookConfig type and exports the configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-addons.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    '@storybook/addon-docs',
    {
      name: '@storybook/addon-styling-webpack',
      options: {
        rules: [
          {
            test: /\.css$/,
            use: [
              'style-loader',
              'css-loader',
              {
                loader: 'postcss-loader',
                options: {
                  implementation: require.resolve('postcss'),
                },
              },
            ],
          },
        ],
      },
    },
  ],
};

export default config;
```

----------------------------------------

TITLE: Configuring Story Sorting in Storybook Preview (JavaScript)
DESCRIPTION: This JavaScript snippet configures the Storybook preview to sort stories based on their ID. It uses the localeCompare function with the numeric option to ensure proper sorting of IDs that contain numbers.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-sort-function.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    options: {
      storySort: (a, b) =>
        a.id === b.id ? 0 : a.id.localeCompare(b.id, undefined, { numeric: true }),
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Preview with SCSS Syntax Highlighting (JS)
DESCRIPTION: This JavaScript snippet configures the Storybook preview. It imports and registers SCSS language support for syntax highlighting using `react-syntax-highlighter`. It also defines parameters for control matchers, specifically for color and date properties, to customize the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-register-language-globally.md#_snippet_0

LANGUAGE: js
CODE:
```
import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';
import scss from 'react-syntax-highlighter/dist/esm/languages/prism/scss';

// Registers and enables scss language support
SyntaxHighlighter.registerLanguage('scss', scss);

export default {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story - Solid (TS)
DESCRIPTION: This code initializes a Storybook story for a Solid Button component using TypeScript. It imports the Meta type from Storybook and the Button component, then defines the component in the meta object for Storybook to use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Submitting Form with Play Function in JavaScript
DESCRIPTION: This story simulates a user submitting a form in JavaScript. It uses the `play` function to enter credentials into email and password fields, clicks the submit button, and then asserts that the `onSubmit` argument was called.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-play-function.md#_snippet_3

LANGUAGE: js
CODE:
```
import { userEvent, waitFor, within, expect, fn } from 'storybook/test';

import { Form } from './Form';

export default {
  component: Form,
  args: {
    // 👇 Use `fn` to spy on the onSubmit arg
    onSubmit: fn(),
  },
};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted = {
  play: async ({ args, canvasElement, step }) => {
    // Starts querying the component from its root element
    const canvas = within(canvasElement);

    await step('Enter credentials', async () => {
      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
      await userEvent.type(canvas.getByTestId('password'), 'supersecret');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button'));
    });

    // 👇 Now we can assert that the onSubmit arg was called
    await waitFor(() => expect(args.onSubmit).toHaveBeenCalled());
  },
};
```

----------------------------------------

TITLE: Removing Autodocs Tag from Story
DESCRIPTION: To exclude a specific story from the auto-generated documentation page, remove the `autodocs` tag from the `tags` array in the story definition. This will prevent the story from appearing in the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { Button } from './Button';

//👇 This default export determines where your story goes in the story list
const meta: Meta<typeof Button> = {
  title: 'Example/Button',
  component: Button,
};

export default meta;

type Story = StoryObj<typeof Button>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
  parameters: {
    tags: [],
  },
};

```

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from "@storybook/react";

import { Button } from "./Button";

//👇 This default export determines where your story goes in the story list
const meta: Meta<typeof Button> = {
  title: "Example/Button",
  component: Button,
};

export default meta;

type Story = StoryObj<typeof Button>;

export const Primary: Story = {
  args: {
    primary: true,
    label: "Button",
  },
  parameters: {
    tags: [],
  },
};

```

----------------------------------------

TITLE: Integrating @storybook/preset-create-react-app with Storybook Docs
DESCRIPTION: Configures Storybook to use both the Create React App preset and the `@storybook/addon-docs` addon within the `./.storybook/main.js` file. The `configureJSX: true` option is enabled for the docs addon, which is often needed for correct JSX rendering in automatically generated documentation from React components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
module.exports = {
  addons: [
    '@storybook/preset-create-react-app',
    {
      name: '@storybook/addon-docs',
      options: {
        configureJSX: true,
      },
    },
  ],
};
```

----------------------------------------

TITLE: Configure Next.js App Directory in Storybook (JavaScript)
DESCRIPTION: This JavaScript snippet configures a Storybook story for a `NavigationBasedComponent` to enable support for Next.js's app directory. It imports the component and sets the `appDirectory` parameter to `true` within the `nextjs` configuration in the story's parameters. This tells Storybook to treat the component as part of a Next.js app directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-app-directory-in-meta.md#_snippet_0

LANGUAGE: js
CODE:
```
import NavigationBasedComponent from './NavigationBasedComponent';

export default {
  component: NavigationBasedComponent,
  parameters: {
    nextjs: {
      appDirectory: true, // 👈 Set this
    },
  },
};
```

----------------------------------------

TITLE: Registering Storybook Addon and Selecting Story
DESCRIPTION: Shows how to register a custom Storybook addon using addons.register() and use the API to programmatically select a specific story. The code selects the 'Default' story of the 'Button' component using the provided API.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-selectstory.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
addons.register('my-organisation/my-addon', (api) => {
  api.selectStory('Button', 'Default');
});
```

----------------------------------------

TITLE: Async Story with Play Function in Angular
DESCRIPTION: This TypeScript snippet defines a Storybook story with a play function that interacts with the component on the canvas. It uses `within` to scope the query to the canvas element and `findByRole` to wait for a button to be rendered before interacting with it, demonstrating asynchronous testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-query-findby.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const AsyncExample: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // Other steps

    // Waits for the component to be rendered before querying the element
    await canvas.findByRole('button', { name: / button label/i });
  },
};
```

----------------------------------------

TITLE: Configuring Vite Aliasing in Storybook
DESCRIPTION: Example of using viteFinal to configure path aliasing in Vite for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { mergeConfig } from 'vite';
import path from 'path';

export default {
  async viteFinal(config) {
    return mergeConfig(config, {
      resolve: {
        alias: [{ find: '@', replacement: path.resolve(__dirname, '../src') }],
      },
    });
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Refs in main.js (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to configure the `.storybook/main.js` file. It sets the framework (requiring replacement with the actual framework used), defines the paths to story files using glob patterns, and utilizes the `refs` property to link to an external Storybook instance (the Storybook Design System in this example), enabling Storybook Composition. The `expanded` and `sourceUrl` options within the ref are optional.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-refs.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  refs: {
    'design-system': {
      title: 'Storybook Design System',
      url: 'https://master--5ccbc373887ca40020446347.chromatic.com/',
      expanded: false, // Optional, true by default
      sourceUrl: 'https://github.com/storybookjs/storybook', // Optional
    },
  },
};
```

----------------------------------------

TITLE: Story Configuration with Play Function (JS)
DESCRIPTION: Configures a Storybook story for a web component, including a play function that interacts with the component using 'userEvent' and 'within'. It waits for a button to be rendered before interacting with it.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-query-findby.md#_snippet_8

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

export default {
  component: 'demo-my-component',
};

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const AsyncExample = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // Other steps

    // Waits for the component to be rendered before querying the element
    await canvas.findByRole('button', { name: / button label/i });
  },
};
```

----------------------------------------

TITLE: Configuring Svelte Story for Example Component (JavaScript)
DESCRIPTION: This snippet configures a Storybook story for a Svelte component named 'Example' using JavaScript. It defines the component and its argument types, specifically a 'number' type for the 'value' argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#_snippet_2

LANGUAGE: js
CODE:
```
import Example from './Example.svelte';

export default {
  component: Example,
  argTypes: {
    value: { type: 'number' },
  },
};
```

----------------------------------------

TITLE: Storybook Init Force Install
DESCRIPTION: This example shows how to forcefully install Storybook into your project, prompting you to overwrite existing files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_46

LANGUAGE: shell
CODE:
```
storybook init --force
```

----------------------------------------

TITLE: Creating Button Documentation with MDX in Storybook (Common Renderer)
DESCRIPTION: This MDX file creates documentation for a Button component using Storybook's common renderer. It imports story examples from a Button.stories file, defines component metadata, provides a description of the button's purpose, and renders a basic usage example.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-starter-example.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Meta, Story } from '@storybook/addon-docs/blocks';

import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

# Button

Button is a clickable interactive element that triggers a response.

You can place text and icons inside of a button.

Buttons are often used for form submissions and to toggle elements into view.

## Usage

<Story of={ButtonStories.Basic} />
```

----------------------------------------

TITLE: Running Storybook Snapshot Tests Using Vitest (JavaScript)
DESCRIPTION: This snippet initializes and runs snapshot tests for Storybook stories using Vitest in JavaScript. It dynamically imports all matching story files, composes their exported stories with the composeStories utility from @storybook/your-renderer, and executes a test suite that filters out stories or components based on provided regular expressions or Storyshots parameters. For each valid story, it runs the story, ensures rendering completion with a brief delay, and then performs a snapshot assertion on the DOM. Requires '@storybook/your-renderer', 'vitest', and compatible test environment. The main parameters are filtering options for suites, story names, and snapshot output directories. Inputs are discovered story files; outputs are test results with snapshot validation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-snapshot-test.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
// @vitest-environment jsdom

import { describe, expect, test } from 'vitest';

// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)
import { composeStories } from '@storybook/your-renderer';

const compose = (entry) => {
  try {
    return composeStories(entry);
  } catch (e) {
    throw new Error(
      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,
    );
  }
};

function getAllStoryFiles() {
  // Place the glob you want to match your story files
  const storyFiles = Object.entries(
    import.meta.glob('./stories/**/*.(stories|story).@(js|jsx|mjs|ts|tsx)', {
      eager: true,
    }),
  );

  return storyFiles.map(([filePath, storyFile]) => {
    const storyDir = path.dirname(filePath);
    const componentName = path.basename(filePath).replace(/\.(stories|story)\.[^/.]+$/, '');
    return { filePath, storyFile, componentName, storyDir };
  });
}

// Recreate similar options to Storyshots. Place your configuration below
const options = {
  suite: 'Storybook Tests',
  storyKindRegex: /^.*?DontTest$/,
  storyNameRegex: /UNSET/,
  snapshotsDirName: '__snapshots__',
  snapshotExtension: '.storyshot',
};

describe(options.suite, () => {
  getAllStoryFiles().forEach(({ storyFile, componentName, storyDir }) => {
    const meta = storyFile.default;
    const title = meta.title || componentName;

    if (options.storyKindRegex.test(title) || meta.parameters?.storyshots?.disable) {
      // Skip component tests if they are disabled
      return;
    }

    describe(title, () => {
      const stories = Object.entries(compose(storyFile))
        .map(([name, story]) => ({ name, story }))
        .filter(({ name, story }) => {
          // Implements a filtering mechanism to avoid running stories that are disabled via parameters or that match a specific regex mirroring the default behavior of Storyshots.
          return !options.storyNameRegex?.test(name) && !story.parameters.storyshots?.disable;
        });

      if (stories.length <= 0) {
        throw new Error(
          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module, without a disable parameter, or add parameters.storyshots.disable in the default export of this file.`,
        );
      }

      stories.forEach(({ name, story }) => {
        // Instead of not running the test, you can create logic to skip it, flagging it accordingly in the test results.
        const testFn = story.parameters.storyshots?.skip ? test.skip : test;

        testFn(name, async () => {
          await story.run();
          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.
          await new Promise((resolve) => setTimeout(resolve, 1));

          expect(document.body.firstChild).toMatchSnapshot();
        });
      });
    });
  });
});
```

----------------------------------------

TITLE: Configuring Story Sorting in Storybook Preview (TS)
DESCRIPTION: This TypeScript snippet configures the Storybook preview to define a custom order for stories. It imports the Preview type from '@storybook/your-framework' and sets the 'storySort' parameter within the 'options' parameter to specify the desired order, grouping stories into categories such as 'Intro', 'Pages', and 'Components'. This configuration affects how stories are displayed in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-ordered-pages.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    options: {
      storySort: {
        order: ['Intro', 'Pages', ['Home', 'Login', 'Admin'], 'Components'],
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Args for Composite Components
DESCRIPTION: Demonstrates using args for composite components that are assembled from other components. Args can be passed down to child components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
import { Header } from './Header';
import { Main } from './Main';
import { Footer } from './Footer';

export const LoggedIn = Template.bind({});
LoggedIn.args = {
  ...HeaderStories.LoggedIn.args,
  ...MainStories.LoggedIn.args,
  footer: 'Footer',
};

```

----------------------------------------

TITLE: Defining Button Stories with Args in Angular
DESCRIPTION: This code defines Storybook stories for an Angular Button component, including Primary, Secondary, and Tertiary variants. It imports the necessary modules from '@storybook/angular' and the Button component itself. The stories configure the button's appearance through the 'args' property, setting properties like 'backgroundColor' and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Primary: Story = {
  args: {
    backgroundColor: '#ff0',
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
};

export const Tertiary: Story = {
  args: {
    ...Primary.args,
    label: '📚📕📈🤓',
  },
};
```

----------------------------------------

TITLE: React Document Screen Component with TypeScript
DESCRIPTION: TypeScript version of the React Document Screen component with type annotations for state management. Uses a custom hook for data fetching and handles loading/error states.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import React, { useState, useEffect } from 'react';

import { PageLayout } from './PageLayout';
import { DocumentHeader } from './DocumentHeader';
import { DocumentList } from './DocumentList';

function useFetchData() {
  const [status, setStatus] = useState<string>('idle');
  const [data, setData] = useState<any[]>([]);
  useEffect(() => {
    setStatus('loading');
    fetch('https://your-restful-endpoint')
      .then((res) => {
        if (!res.ok) {
          throw new Error(res.statusText);
        }
        return res;
      })
      .then((res) => res.json())
      .then((data) => {
        setStatus('success');
        setData(data);
      })
      .catch(() => {
        setStatus('error');
      });
  }, []);

  return {
    status,
    data,
  };
}

export function DocumentScreen() {
  const { status, data } = useFetchData();

  const { user, document, subdocuments } = data;

  if (status === 'loading') {
    return <p>Loading...</p>;
  }
  if (status === 'error') {
    return <p>There was an error fetching the data!</p>;
  }
  return (
    <PageLayout user={user}>
      <DocumentHeader document={document} />
      <DocumentList documents={subdocuments} />
    </PageLayout>
  );
}
```

----------------------------------------

TITLE: Testing onclick handler with Vue and Storybook
DESCRIPTION: This test verifies that the onclick handler of a Vue Button component is called when the button is clicked. It uses composeStory from @storybook/vue3-vite to integrate the story with the test, and @testing-library/vue to render and interact with the component. The test defines a mock onClick function using jest.fn(), passes it to the component, simulates a click, and asserts that the mock function was called.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-compose-story.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { jest, test, expect } from '@jest/globals';
import { render, screen } from '@testing-library/vue';
import { composeStory } from '@storybook/vue3-vite';

import meta, { Primary as PrimaryStory } from './Button.stories';

test('onclick handler is called', () => {
  // Returns a story which already contains all annotations from story, meta and global levels
  const Primary = composeStory(PrimaryStory, meta);

  const onClickSpy = jest.fn();
  await Primary.run({ args: { ...Primary.args, onClick: onClickSpy } });

  const buttonElement = screen.getByRole('button');
  buttonElement.click();
  expect(onClickSpy).toHaveBeenCalled();
});
```

----------------------------------------

TITLE: Mocking a Successful API Response with MSW in Svelte CSF
DESCRIPTION: This story mocks a successful API response using MSW in a Svelte CSF Storybook story. It defines a handler that intercepts GET requests to 'https://your-restful-endpoint' and returns a predefined JSON object (TestData). This allows testing the component's behavior when receiving valid data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_2

LANGUAGE: js
CODE:
```
<Story
  name="MockedSuccess"
  parameters={{
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint', () => {
          return HttpResponse.json(TestData);
        }),
      ],
    },
  }}
/>
```

----------------------------------------

TITLE: Play Function with Click Event
DESCRIPTION: This snippet demonstrates how to reproduce a button click event in a Storybook story using the `play` function. It simulates a user clicking a button and then asserts that the expected action occurs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

export const ButtonComponent = () => /* component implementation */;

ButtonComponent.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  await userEvent.click(canvas.getByRole('button', { name: 'Click me' }));
  await expect(canvas.getByText('Button clicked!')).toBeInTheDocument();
};
```

----------------------------------------

TITLE: Overriding Default Webpack Configuration in Storybook
DESCRIPTION: Shows how to use the webpackFinal configuration element to extend or override Storybook's default Webpack configuration. This allows adding custom loaders or plugins.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// .storybook/main.js
export default {
  framework: {
    name: '@storybook/react-webpack5',
    options: {},
  },
  webpackFinal: async (config, { configType }) => {
    // Make whatever fine-grained changes you need
    config.module.rules.push({
      test: /\.scss$/,
      use: ['style-loader', 'css-loader', 'sass-loader'],
      include: path.resolve(__dirname, '../'),
    });

    // Return the altered config
    return config;
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with Typescript
DESCRIPTION: This TypeScript configuration file sets up Storybook, defining the framework, story locations, and addons. It imports the StorybookConfig type and exports a configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-docs-options.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    {
      name: '@storybook/addon-docs',
      options: {
        csfPluginOptions: null,
        mdxPluginOptions: {
          mdxCompileOptions: {
            remarkPlugins: [],
          },
        },
      },
    },
  ],
};

export default config;
```

----------------------------------------

TITLE: Configuring argTypes with Conditional Display in Storybook
DESCRIPTION: This code snippet demonstrates how to configure `argTypes` in Storybook to conditionally display arguments based on the existence, truthiness, or specific values of other arguments or global types. It imports the `Meta` type from `@storybook/web-components-vite` and defines a metadata object that configures the component and its arguments. The `if` property within each `argType` determines when the argument is displayed based on conditions related to other arguments or global types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-example',
  argTypes: {
    parent: { control: 'select', options: ['one', 'two', 'three'] },

    // 👇 Only shown when `parent` arg exists
    parentExists: { if: { arg: 'parent', exists: true } },

    // 👇 Only shown when `parent` arg does not exist
    parentDoesNotExist: { if: { arg: 'parent', exists: false } },

    // 👇 Only shown when `parent` arg value is truthy
    parentIsTruthy: { if: { arg: 'parent' } },
    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },

    // 👇 Only shown when `parent` arg value is not truthy
    parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },

    // 👇 Only shown when `parent` arg value is 'three'
    parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },

    // 👇 Only shown when `parent` arg value is not 'three'
    parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },

    // Each of the above can also be conditional on the value of a globalType, e.g.:

    // 👇 Only shown when `theme` global exists
    parentExists: { if: { global: 'theme', exists: true } },
  },
};

export default meta;
```

----------------------------------------

TITLE: Initializing Storybook Story for Solid Component (TS)
DESCRIPTION: Defines a Storybook story for a Solid component using TypeScript, including metadata and a story with a Figma design parameter. It imports the necessary modules from 'storybook-solidjs' and the component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Example: Story = {
  parameters: {
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/Sample-File',
    },
  },
};
```

----------------------------------------

TITLE: Enabling Filesystem Caching in Webpack 5 for Storybook
DESCRIPTION: Configuration to enable Webpack 5's filesystem caching feature in Storybook, which caches build output between runs to speed up subsequent startups.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  core: {
    builder: {
      name: 'webpack5',
      options: {
        fsCache: true,
      },
    },
  },
};
```

----------------------------------------

TITLE: Installing SWC Compiler Support for Storybook
DESCRIPTION: Command to install and set up the SWC compiler addon for Storybook. This provides high-performance compilation while maintaining ecosystem compatibility.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
npx storybook add @storybook/addon-webpack5-compiler-swc
```

----------------------------------------

TITLE: Querying Elements in Play Function
DESCRIPTION: This code snippet demonstrates how to adjust a Storybook play function to find elements based on queries (e.g., role, text content). It uses the Testing Library to query the DOM tree and expects the element to be available when the story renders. This approach allows for quick verification of the root cause of test failures.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { within, userEvent } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

export const PlayFunctionAltQueries = async ({ canvasElement }) => {
  const canvas = within(canvasElement);

  await userEvent.click(canvas.getByRole('button'));
  await expect(canvas.getByText('Button Clicked')).toBeInTheDocument();
};

```

----------------------------------------

TITLE: Defining Storybook Meta for Svelte Component (JavaScript)
DESCRIPTION: This code defines the Storybook metadata for a Svelte component named 'Example'. It uses 'defineMeta' from '@storybook/addon-svelte-csf' to configure the component and its arguments. The 'label' argument is set up with a select control, options (Normal, Bold, Italic), and mappings to Svelte snippets for each option.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      label: {
        control: { type: 'select' },
        options: ['Normal', 'Bold', 'Italic'],
        mapping: {
          Normal: normal,
          Bold: bold,
          Italic: italic,
        },
      },
    },
  });
</script>

{#snippet normal()}
  <span>Normal</span>
{/snippet}

{#snippet bold()}
  <b>Bold</b>
{/snippet}
{#snippet italic()}
  <i>Italic</i>
{/snippet}
```

----------------------------------------

TITLE: Configuring Storybook Preview (JavaScript)
DESCRIPTION: This JavaScript snippet configures the Storybook preview to exclude the 'style' control from the Docs tab. This is achieved by setting the `docs.controls.exclude` property within the `parameters` object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-doc-blocks-controls-exclude-prop.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
};
```

----------------------------------------

TITLE: Configuring select control for enum ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'select' control for an enum, providing a dropdown select to choose a single value from the options within Storybook's controls panel. The `options` array specifies the available choices.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_8

LANGUAGE: JavaScript
CODE:
```
{ control: 'select', options: [20, 30, 40, 50] }
```

----------------------------------------

TITLE: Running Storybook Tests with PNPM
DESCRIPTION: Executes Storybook test suite using PNPM as the package manager. The command runs the test-storybook script defined in package.json.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-run-tests.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm run test-storybook
```

----------------------------------------

TITLE: Play Function with WaitFor
DESCRIPTION: This snippet shows how to use the `play` function to verify the existence of an element based on a specific interaction. It checks what happens if a user introduces the wrong information and waits for a specific element to appear.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
import { userEvent, within, waitFor } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

export const InputComponent = () => /* component implementation */;

InputComponent.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  await userEvent.type(canvas.getByLabelText('Input'), 'wrong information');
  // Wait for the error message to appear
  await waitFor(() => expect(canvas.getByText('Error message')).toBeInTheDocument());
};
```

----------------------------------------

TITLE: Implementing Button Component in Svelte
DESCRIPTION: Svelte button component with exported properties for disabled state and content. Uses Svelte's component structure with script section for property definitions and markup for the button implementation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
<script>
  /**
   * A Button Component
   * @component
   */

  /**
   * Disable the button
   * @required
   */
  export let disabled = false;

  /**
   * Button content
   * @required
   */
  export let content = '';
<script/>

<button type="button" {disabled}>{content}</button>
```

----------------------------------------

TITLE: Migrate Storybook main.js to ESM format
DESCRIPTION: This code snippet demonstrates how to migrate a Storybook main.js configuration from CommonJS or named exports to a default ESM export. This is the recommended way to configure Storybook going forward.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_89

LANGUAGE: javascript
CODE:
```
module.exports = {
  stories: [
    "../stories/**/*.stories.mdx",
    "../stories/**/*.stories.@(js|jsx|ts|tsx)",
  ],
  framework: { name: "@storybook/react-vite" },
};
```

----------------------------------------

TITLE: Registering Storybook Addon Panel in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to register a custom panel in the Storybook manager UI using the Storybook addons API. It defines a new addon by calling addons.register with a unique ADDON_ID, and adds a panel to the UI with a given PANEL_ID, type, title, a render function that displays static content using JSX, and an optional paramKey for configuration. This code assumes that Storybook and its addons API are installed and set up in the environment, as well as the presence of valid ADDON_ID, PANEL_ID, and types constants. The panel will appear in the Storybook UI under the provided title, and expects to execute in the context of Storybook's manager UI; it does not handle dynamic content or complex rendering.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-disable-addon.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
addons.register(ADDON_ID, () => {
  addons.add(PANEL_ID, {
    type: types.PANEL,
    title: 'My Addon',
    render: () => <div>Addon tab content</div>,
    paramKey: 'myAddon', // this element
  });
});
```

----------------------------------------

TITLE: Initializing Button Story with Backgrounds in Web Components (JS)
DESCRIPTION: This code initializes a Storybook story for a web component button, setting a global background color and overriding it for a specific story. It defines the default export with component metadata and a story with overridden background.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  globals: {
    // 👇 Set background value for all component stories
    backgrounds: { value: 'gray', grid: false },
  },
};

export const OnDark = {
  globals: {
    // 👇 Override background value for this story
    backgrounds: { value: 'dark' },
  },
};

```

----------------------------------------

TITLE: Configuring Storybook Framework for Vue 3 with Vite in JavaScript
DESCRIPTION: This snippet exports a default configuration object for Storybook, specifying the framework as '@storybook/vue3-vite' and setting the docgen option to 'vue-component-meta'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue-vite-framework-options.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  framework: {
    name: '@storybook/vue3-vite',
    options: {
      docgen: 'vue-component-meta',
    },
  },
};
```

----------------------------------------

TITLE: Registering a UI component with addons.add()
DESCRIPTION: Registers a UI component (e.g., panel) with the addon system. Requires specifying the component type, a title for the addon panel, and a render function to generate the UI. The render function receives an `active` prop indicating panel focus.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
addons.add('my-addon/my-panel', {
  type: types.PANEL,
  title: 'My Panel',
  render: ({ active }) => (
    <div style={{ margin: '1rem' }}>
      Hello My Panel {active ? 'active' : 'not active'}
    </div>
  ),
});
```

----------------------------------------

TITLE: Configuring Button Story with Framework Metadata in TS
DESCRIPTION: This code configures a Storybook story for a Button component using framework-specific metadata in TypeScript. It imports the Button component and defines metadata, including the component itself and its associated argument types. It specifically focuses on the 'label' argument, allowing control over the button's text within Storybook. It uses satisfies Meta<typeof Button> to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  argTypes: {
    // 👇 All Button stories expect a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Adding a Button to Storybook Toolbar
DESCRIPTION: This code snippet demonstrates how to add a new button to Storybook's Toolbar. Toolbar addons allow you to add your own custom tools in Storybook's Toolbar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-types.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
<CodeSnippets path="storybook-addon-toolbar-example.md" />
```

----------------------------------------

TITLE: Building Storybook for Production
DESCRIPTION: Command to build Storybook as a static web application for production deployment
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/publish-storybook.mdx#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx chromatic --project-token=<your-project-token>
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines a configuration object with type annotation, and exports it as the default. The framework should be replaced with the specific framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-static-dirs.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  staticDirs: ['../public', '../static'],
};

export default config;
```

----------------------------------------

TITLE: Override MDX Container in Storybook
DESCRIPTION: This example shows how to override the `MDXProvider` component in Storybook to use custom components in your documentation pages. This allows you to integrate your design system or component library components into the documentation. Note that this only affects Markdown syntax (e.g., `#` for headings) and not native HTML elements (e.g., `<h1>`).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_13

LANGUAGE: javascript
CODE:
```
This is a placeholder for the 'storybook-preview-auto-docs-override-mdx-container.md' code snippet.
```

----------------------------------------

TITLE: Implementing Storybook Play Function in JavaScript
DESCRIPTION: This snippet shows how to create a Storybook play function using JavaScript. It demonstrates user interaction with a form, including typing and button clicking.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted = {
  play: async ({ args, canvasElement, step }) => {
    const canvas = within(canvasElement);

    await step('Enter email and password', async () => {
      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
      await userEvent.type(canvas.getByTestId('password'), 'supersecret');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button'));
    });
  },
};
```

----------------------------------------

TITLE: Importing Component for Storybook (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to import a component directly from its source file for use in a Storybook story. It avoids using the package's index file to ensure proper component loading and behavior within Storybook. The snippet also configures the story's title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-fix-imports-autodocs-monorepo.md#_snippet_0

LANGUAGE: js
CODE:
```
// ❌ Don't use the package's index file to import the component.
// import { MyComponent } from '@component-package';

// ✅ Use the component's export to import it directly.
import { MyComponent } from '@component-package/src/MyComponent';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'MyComponent',
  component: MyComponent,
};
```

----------------------------------------

TITLE: Configuring radio control for enum ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'radio' control for an enum, providing a set of stacked radio buttons based on the available options within Storybook's controls panel. The `options` array specifies the available choices.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
{ control: 'radio', options: ['email', 'phone', 'mail'] }
```

----------------------------------------

TITLE: Configuring managerHead in Storybook's main.js
DESCRIPTION: This snippet demonstrates how to use the managerHead function to conditionally add scripts or styles to the Storybook manager's <head> element based on the environment. It checks if the process is running in production and adds a Google Analytics script if true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-manager-head.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // ...
  managerHead: (head) => {
    if (process.env.NODE_ENV === 'production') {
      return `
        ${head}
        <script async src="https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX"></script>
        <script>
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', 'G-XXXXXXXXXX');
        </script>
      `;
    }
    return head;
  },
};
```

----------------------------------------

TITLE: Configuring Subpath Imports in package.json
DESCRIPTION: This example shows how to configure subpath imports in the `package.json` file. Subpath imports provide an alternative to module aliases and can be useful for mocking modules.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_20

LANGUAGE: json
CODE:
```
{
  "imports": {
    "#*": ["./*", "./*.ts", "./*.tsx"]
  }
}
```

----------------------------------------

TITLE: Configuring A11y Addon (New)
DESCRIPTION: This code shows the new way of configuring the `@storybook/addon-a11y` using parameters. The `a11y` parameter is passed to the `addParameters` function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_270

LANGUAGE: javascript
CODE:
```
import { addParameters } from "@storybook/react"; // or others

addParameters({ a11y: options });
```

----------------------------------------

TITLE: Storybook Configuration (JavaScript)
DESCRIPTION: Configures Storybook, defining the framework, stories, and Vite configuration. It exports a default object containing the configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-vite-final.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  async viteFinal(config, { configType }) {
    const { mergeConfig } = await import('vite');

    if (configType === 'DEVELOPMENT') {
      // Your development configuration goes here
    }
    if (configType === 'PRODUCTION') {
      // Your production configuration goes here.
    }
    return mergeConfig(config, {
      // Your environment configuration here
    });
  },
};
```

----------------------------------------

TITLE: Creating a Storybook Addon Decorator
DESCRIPTION: This code snippet demonstrates how to create a Storybook addon decorator using the `makeDecorator` function from the `storybook/preview-api`. The decorator wraps stories and allows custom logic to be applied based on parameters defined in the stories. It takes `getStory`, `context`, and `parameters` as arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-makedecorator.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { makeDecorator } from 'storybook/preview-api';

export const withAddonDecorator = makeDecorator({
  name: 'withSomething',
  parameterName: 'CustomParameter',
  skipIfNoParametersOrOptions: true,
  wrapper: (getStory, context, { parameters }) => {
    /*
    * Write your custom logic here based on the parameters passed in Storybook's stories.
    * Although not advised, you can also alter the story output based on the parameters.
    */
    return getStory(context);
  },
});
```

----------------------------------------

TITLE: Configuring Storybook Test Runner in JavaScript
DESCRIPTION: JavaScript configuration for Storybook test runner that excludes stories tagged with 'no-tests' from being tested.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-exclude.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  tags: {
    exclude: ['no-tests'],
  },
};
```

----------------------------------------

TITLE: Rendering Button with Text Label in Vue (TypeScript)
DESCRIPTION: This code defines a Storybook story for the Button component in Vue using TypeScript. It imports the Button component and the action function from Storybook. The story renders the button with a 'Hello' label and an onClick handler that triggers the 'clicked' action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import { action } from 'storybook/actions';

import Button from './Button.vue';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Text: Story = {
  render: () => ({
    components: { Button },
    setup() {
      return {
        onClick: action('clicked'),
      };
    },
    template: '<Button label="Hello" @click="onClick" />',
  }),
};
```

----------------------------------------

TITLE: Initializing Button Story for Svelte
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component. It imports the Button component and defines a 'Primary' story with specific arguments for the button's primary state and label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_9

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

export const Primary = {
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Importing Markdown File in Storybook MDX
DESCRIPTION: Demonstrates how to correctly import a markdown file in a Storybook MDX file using the ?raw suffix to ensure the content is imported as-is.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-markdown.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
// DON'T do this, will error
import ReadMe from './README.md';
// DO this, will work
import ReadMe from './README.md?raw';

import { Markdown } from '@storybook/addon-docs/blocks';

# A header 

<Markdown>{ReadMe}</Markdown>
```

----------------------------------------

TITLE: Sort Controls with Required Args First
DESCRIPTION: This snippet demonstrates how to sort controls in Storybook to display required arguments first. It uses the `sort` configuration field in the `controls` parameter.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_31

LANGUAGE: javascript
CODE:
```
export const Basic = {
  parameters: {
    controls: {
      sort: 'requiredFirst',
    },
  },
};

```

----------------------------------------

TITLE: Creating Basic MDX Documentation with Stories
DESCRIPTION: Example of an MDX file that documents a component with a mix of Markdown and an embedded Story component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_4

LANGUAGE: md
CODE:
```
import { Meta, Story, ArgsTable } from '@storybook/addon-docs';

<Meta title='App Component' />

# App Component

Some **markdown** description, or whatever you want.

<Story name='basic' height='400px'>{() => {
return { ... }; // should match the typical story format for your framework
}}</Story>
```

----------------------------------------

TITLE: Configuring Boolean Control in ArgTypes
DESCRIPTION: This snippet demonstrates how to configure a boolean control using the 'control' annotation in the argTypes field. It provides a toggle for switching between possible states for the 'active' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_13

LANGUAGE: javascript
CODE:
```
argTypes: { active: { control: 'boolean' } }
```

----------------------------------------

TITLE: Defining Regex Exclude Controls - TypeScript
DESCRIPTION: This TypeScript snippet defines a story named 'RegexExclude' that configures the Storybook controls to exclude properties that match the regular expression /^hello*/.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_14

LANGUAGE: ts
CODE:
```
export const RegexExclude: Story = {
  parameters: {
    controls: { exclude: /^hello*/ },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Preview with React Theme Provider
DESCRIPTION: This snippet configures the Storybook preview for a React project, using a decorator to wrap stories with a `ThemeProvider` component from `styled-components`. It demonstrates how to apply a default theme to all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-styled-components-decorator.md#_snippet_1

LANGUAGE: js
CODE:
```
import React from 'react';

import { ThemeProvider } from 'styled-components';

export default {
  decorators: [
    (Story) => (
      <ThemeProvider theme="default">
        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </ThemeProvider>
    ),
  ],
};
```

----------------------------------------

TITLE: Login Form Story with Play Function
DESCRIPTION: Demonstrates how to use play functions to automate form interactions in stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
export const LoginForm = {
  render: () => LoginForm,
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    await userEvent.type(canvas.getByTestId('email'), 'example@email.com');
    await userEvent.type(canvas.getByTestId('password'), 'password');
    await userEvent.click(canvas.getByRole('button'));
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Main Entry Point in JavaScript
DESCRIPTION: This JavaScript snippet exports the main configuration object required by Storybook to initialize the environment. It allows for selecting the framework (such as react-webpack5 or vue3-vite), specifies glob patterns to locate Markdown and story files, and disables project-level JSON settings. No explicit dependencies are required beyond having Storybook and a suitable framework installed. Users should update '@storybook/your-framework' to match their project framework, while the configuration expects story files in src/ subfolders.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-project-json.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    disableProjectJson: true,
  },
};
```

----------------------------------------

TITLE: Setting Viewports in Storybook (TypeScript)
DESCRIPTION: This snippet demonstrates how to set available viewports for every story in a file using TypeScript. It imports `Meta` and `StoryObj` from '@storybook/web-components-vite' and `INITIAL_VIEWPORTS` from 'storybook/viewport'. It then defines a `meta` object with the component and viewport parameters configured.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { INITIAL_VIEWPORTS } from 'storybook/viewport';

const meta: Meta = {
  component: 'my-component',
  parameters: {
    viewport: {
      //👇 Set available viewports for every story in the file
      options: INITIAL_VIEWPORTS,
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Initializing Storybook Preview with Svelte Decorator (TS)
DESCRIPTION: This snippet configures a Storybook preview for Svelte using TypeScript, adding a decorator that uses a Svelte component named MarginDecorator. It imports the MarginDecorator from a local file and the Preview type from '@storybook/svelte-vite'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/svelte-vite';

import MarginDecorator from './MarginDecorator.svelte';

const preview: Preview = {
  decorators: [() => MarginDecorator],
};

export default preview;
```

----------------------------------------

TITLE: Configuring Button Story with argTypes in Svelte
DESCRIPTION: This code configures a Storybook story for a Svelte Button component. It defines the component and its argTypes, which allow users to control the component's properties like label, advanced settings, margin, padding, and cornerRadius through the Storybook UI. The margin, padding, and cornerRadius are conditionally enabled based on the 'advanced' boolean.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  argTypes: {
    label: { control: 'text' }, // Always shows the control
    advanced: { control: 'boolean' },
    // Only enabled if advanced is true
    margin: { control: 'number', if: { arg: 'advanced' } },
    padding: { control: 'number', if: { arg: 'advanced' } },
    cornerRadius: { control: 'number', if: { arg: 'advanced' } },
  },
};
```

----------------------------------------

TITLE: Overriding Default Navigation in Storybook
DESCRIPTION: This code demonstrates how to override the default navigation properties and mock navigation methods in Storybook using parameters and the `beforeEach` hook. It shows how to manipulate the `pathname` and mock the `push` method of the router.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_11

LANGUAGE: typescript
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Preview } from '@storybook/your-framework';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { getRouter } from '@storybook/your-framework/navigation.mock';

const preview: Preview = {
  parameters: {
    nextjs: {
      // 👇 Override the default navigation properties
      navigation: {
        pathname: '/app/',
      },
    },
  },
  async beforeEach() {
    // 👇 Manipulate the default navigation method mocks
    getRouter().push.mockImplementation(() => {
      /* ... */
    });
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Addons in TypeScript
DESCRIPTION: This TypeScript snippet configures Storybook addons using the StorybookConfig type. It shows how to specify addons within the `.storybook/main.ts` file. The `addons` array lists the addons to be used by Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-remove-addons.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/nextjs';

const config: StorybookConfig = {
  // ...
  addons: [
    // ...
    // 👇 These can both be removed
    // 'storybook-addon-next',
    // 'storybook-addon-next-router',
  ],
};

export default config;
```

----------------------------------------

TITLE: Initializing Button Story - Svelte CSF (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF) and Typescript. It imports defineMeta from Storybook, imports the Button component, and defines the component in the Story object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_9

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>
```

----------------------------------------

TITLE: Configure Storybook Framework with React Vite in JavaScript
DESCRIPTION: This snippet configures Storybook to use React Vite as the framework in a JavaScript file. It sets the framework property to '@storybook/react-vite' and removes the previous webpack configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-add-framework.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  // framework: '@storybook/react-webpack5', 👈 Remove this
  framework: '@storybook/react-vite', // 👈 Add this
};
```

----------------------------------------

TITLE: Testing Form Submission with Mocked Revalidation in TypeScript
DESCRIPTION: This Storybook story (written in TypeScript) tests the submission of a form and verifies that the revalidatePath function (mocked from a framework-specific module) is called with the expected path. It uses userEvent to simulate a click on the submit button and expect to assert that revalidatePath is called with '/'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-cache-mock.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Meta, StoryObj } from '@storybook/your-framework';

import { expect, userEvent, within } from 'storybook/test';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { revalidatePath } from '@storybook/your-framework/cache.mock';

import MyForm from './my-form';

const meta = {
  component: MyForm,
} satisfies Meta<typeof MyForm>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Submitted: Story = {
  async play({ canvasElement }) {
    const canvas = within(canvasElement);

    const submitButton = canvas.getByRole('button', { name: /submit/i });
    await userEvent.click(saveButton);
    // 👇 Use any mock assertions on the function
    await expect(revalidatePath).toHaveBeenCalledWith('/');
  },
};
```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet exports a default configuration object for Storybook in JavaScript. It specifies the framework, story file locations, and TypeScript settings to allow multi-package component documentation via Autodocs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-fix-imports-autodocs-monorepo.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  typescript: {
    // Overrides the default Typescript configuration to allow multi-package components to be documented via Autodocs.
    reactDocgen: 'react-docgen',
    check: false,
  },
};
```

----------------------------------------

TITLE: Configuring Accessibility Testing in Storybook Preview (JavaScript)
DESCRIPTION: This JavaScript code configures the Storybook preview to fail all accessibility tests when violations are found. It sets the a11y parameter in the default export object of the preview file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-error-in-preview.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  // ...
  parameters: {
    // 👇 Fail all accessibility tests when violations are found
    a11y: { test: 'error' },
  },
};
```

----------------------------------------

TITLE: Configuring multi-select control for enum ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'multi-select' control for an enum, providing a dropdown select to choose multiple values from the options within Storybook's controls panel. The `options` array specifies the available choices.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_9

LANGUAGE: JavaScript
CODE:
```
{ control: 'multi-select', options: ['USA', 'Canada', 'Mexico'] }
```

----------------------------------------

TITLE: Configuring Preview Head with Environment Detection
DESCRIPTION: Demonstrates how to conditionally add scripts and styles to Storybook's preview head based on the environment. The function takes the existing head content and returns modified content with additional elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-preview-head.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  previewHead: (head) => (`
    ${head}
    ${process.env.NODE_ENV === 'development' ?
      '<script src="dev-only.js"></script>'
      : ''}
  `)
}
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: A TypeScript configuration file for Storybook that defines the framework, story file patterns, and documentation settings. It imports the StorybookConfig type for type safety and exports a properly typed configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-docs-docs-mode.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  docs: {
    docsMode: true,
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Multiple Static Directories
DESCRIPTION: Shows how to configure multiple static directories in Storybook's main configuration using a comma-separated list.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/images-and-assets.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  staticDirs: ['../public','../common-assets'],
};
```

----------------------------------------

TITLE: Defining Story Metadata with Conditional Arguments in Svelte
DESCRIPTION: This code defines the metadata for a Storybook story in Svelte, configuring conditional arguments for the 'Example' component. It uses the 'if' property within 'argTypes' to show or hide arguments based on the 'parent' argument's existence, truthiness, or specific value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#_snippet_2

LANGUAGE: js
CODE:
```
import Example from './Example.svelte';

export default {
  component: Example,
  argTypes: {
    parent: { control: 'select', options: ['one', 'two', 'three'] },

    // 👇 Only shown when `parent` arg exists
    parentExists: { if: { arg: 'parent', exists: true } },

    // 👇 Only shown when `parent` arg does not exist
    parentDoesNotExist: { if: { arg: 'parent', exists: false } },

    // 👇 Only shown when `parent` arg value is truthy
    parentIsTruthy: { if: { arg: 'parent' } },
    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },

    // 👇 Only shown when `parent` arg value is not truthy
    parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },

    // 👇 Only shown when `parent` arg value is 'three'
    parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },

    // 👇 Only shown when `parent` arg value is not 'three'
    parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },

    // Each of the above can also be conditional on the value of a globalType, e.g.:

    // 👇 Only shown when `theme` global exists
    parentExists: { if: { global: 'theme', exists: true } },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Preview with Global Types and Initial Globals in TypeScript
DESCRIPTION: This TypeScript snippet configures the Storybook preview by defining global types and initial globals. It sets up a theme global type with a toolbar that allows users to switch between 'light' and 'dark' themes. The initial theme is set to 'light'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-configure-globaltypes.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  globalTypes: {
    theme: {
      description: 'Global theme for components',
      toolbar: {
        // The label to show for this toolbar item
        title: 'Theme',
        icon: 'circlehollow',
        // Array of plain string values or MenuItem shape (see below)
        items: ['light', 'dark'],
        // Change title based on selected value
        dynamicTitle: true,
      },
    },
  },
  initialGlobals: {
    theme: 'light',
  },
};

export default preview;
```

----------------------------------------

TITLE: Initializing Button Story - Common (JS)
DESCRIPTION: This code defines a basic Storybook story for a Button component using JavaScript. It imports the Button component and exports a default object with the component and a 'Basic' story that configures documentation parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Basic = {
  parameters: {
    docs: {
      canvas: { sourceState: 'shown' },
    },
  },
};
```

----------------------------------------

TITLE: ArgTypes Configuration Object
DESCRIPTION: Defines the structure for configuring argTypes, allowing specification of control type, description, conditional display, mapping, name, options, table configuration, and data type for each argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
{
  [key: string]: {
    control?: ControlType | { type: ControlType; /* See below for more */ } | false;
    description?: string;
    if?: Conditional;
    mapping?: { [key: string]: { [option: string]: any } };
    name?: string;
    options?: string[];
    table?: {
      category?: string;
      defaultValue?: { summary: string; detail?: string };
      disable?: boolean;
      subcategory?: string;
      type?: { summary?: string; detail?: string };
    },
    type?: SBType | SBScalarType['name'];
  }
}
```

----------------------------------------

TITLE: Configuring Framework Options in Storybook Configuration File
DESCRIPTION: Example of how to configure the framework-specific options in Storybook's main configuration file. This snippet shows how to specify the framework name and provide additional configuration options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/frameworks.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
<CodeSnippets path="main-config-framework.md" />
```

----------------------------------------

TITLE: Exporting Storybook Configuration in TypeScript
DESCRIPTION: This TypeScript snippet defines and exports a configuration object for Storybook, specifying its framework and story locations. It uses TypeScript types for increased safety and provides a method to merge existing environment variables into Storybook's configuration. Dependencies include the Storybook package relevant to the chosen framework.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-env.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  /*
   * 👇 The `config` argument contains all the other existing environment variables.
   * Either configured in an `.env` file or configured on the command line.
   */
  env: (config) => ({
    ...config,
    EXAMPLE_VAR: 'An environment variable configured in Storybook',
  }),
};

export default config;
```

----------------------------------------

TITLE: Initializing Page stories for React (TS)
DESCRIPTION: This code initializes Storybook stories for the Page component in a React application using TypeScript. It imports the Page component and Header stories, and exports a default object configuring the component for Storybook. It also defines a 'LoggedIn' story, importing related Header stories to populate arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Page } from './Page';

//👇 Imports all Header stories
import * as HeaderStories from './Header.stories';

const meta = {
  component: Page,
} satisfies Meta<typeof Page>;

export default meta;
type Story = StoryObj<typeof meta>;

export const LoggedIn: Story = {
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with React and Webpack in TypeScript
DESCRIPTION: This snippet demonstrates configuring Storybook for a React project using Webpack, written in TypeScript. It imports a type definition for StorybookConfig and defines a configuration object adhering to this type. Exporting this configuration ensures that TypeScript developers can leverage type safety while setting up integration between Storybook, React, and Webpack.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-framework-options.md#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
import type { StorybookConfig } from '@storybook/react-webpack5';

const config: StorybookConfig = {
  framework: {
    name: '@storybook/react-webpack5',
    options: {
      // ...
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook Test Runner in JavaScript
DESCRIPTION: This snippet exports a configuration object for the Storybook Test Runner using CommonJS module syntax. It specifies tag inclusion for 'test-only' stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-include.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  tags: {
    include: ['test-only'],
  },
};
```

----------------------------------------

TITLE: Configuring File Control in ArgTypes
DESCRIPTION: This snippet shows how to configure a file control using the 'control' annotation in the argTypes field. It provides a file input component that returns an array of URLs, customized to accept specific file types for the 'avatar' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_18

LANGUAGE: javascript
CODE:
```
argTypes: { avatar: { control: { type: 'file', accept: '.png' } } }
```

----------------------------------------

TITLE: Creating Actions with the action Function
DESCRIPTION: Shows how to create an action that appears in the actions panel of the Storybook UI when clicked, using the `action` function. The action function takes an optional name parameter, which is used to identify the action in the UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/actions.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
import { action } from 'storybook/actions';

export default {
  title: 'Button',
};

export const WithAction = () => {
  const btn = document.createElement('button');
  btn.innerText = 'Click me';
  btn.onclick = action('clicked');
  return btn;
};

```

----------------------------------------

TITLE: Creating Storybook Addon Tool Component in TypeScript/React
DESCRIPTION: A memoized React component that implements a Storybook addon tool. It uses the Storybook API to manage global state, handle toggle functionality, and register keyboard shortcuts. The component renders as an icon button with a lightning icon that can be toggled on/off, with the state persisted in Storybook's globals.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-tool-initial-setup.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
import React, { memo, useCallback, useEffect } from 'react';

import { useGlobals, useStorybookApi } from 'storybook/manager-api';
import { IconButton } from 'storybook/internal/components';
import { LightningIcon } from '@storybook/icons';

import { ADDON_ID, PARAM_KEY, TOOL_ID } from './constants';

export const Tool = memo(function MyAddonSelector() {
  const [globals, updateGlobals] = useGlobals();
  const api = useStorybookApi();

  const isActive = [true, 'true'].includes(globals[PARAM_KEY]);

  const toggleMyTool = useCallback(() => {
    updateGlobals({
      [PARAM_KEY]: !isActive,
    });
  }, [isActive]);

  useEffect(() => {
    api.setAddonShortcut(ADDON_ID, {
      label: 'Toggle Addon [8]',
      defaultShortcut: ['8'],
      actionName: 'myaddon',
      showInMenu: false,
      action: toggleMyTool,
    });
  }, [toggleMyTool, api]);

  return (
    <IconButton key={TOOL_ID} active={isActive} title="Enable my addon" onClick={toggleMyTool}>
      <LightningIcon />
    </IconButton>
  );
});
```

----------------------------------------

TITLE: Running Storybook Automigration with NPM
DESCRIPTION: Executes Storybook's automigration utility using NPX (NPM package runner). Uses the latest version of Storybook to run the automigrate command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-automigrate.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@latest automigrate
```

----------------------------------------

TITLE: Configuring custom-elements.json in Storybook Preview
DESCRIPTION: This snippet demonstrates how to configure Storybook to use a `custom-elements.json` file, generated by `@custom-elements-manifest/analyzer`, to infer argTypes and controls for stories. This configuration is typically done in `.storybook/preview.js` or `.storybook/preview.ts`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
import customElements from '../custom-elements.json';

/** @type { import('@storybook/web-components').Preview } */
const preview = {
  customElements,
};

export default preview;
```

----------------------------------------

TITLE: Modern Svelte Storybook Story Implementation
DESCRIPTION: Demonstrates the updated approach using defineMeta from @storybook/addon-svelte-csf to create Storybook stories for Svelte components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-story-migration.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    title: 'MyComponent',
    component: MyComponent,
  });
</script>

<Story name="Default" />
```

----------------------------------------

TITLE: Configuring Custom Documentation Template in Storybook Preview
DESCRIPTION: This code sets up a global configuration for Storybook that applies a custom MDX documentation template to all stories. It imports the DocumentationTemplate.mdx file and assigns it to the docs.page parameter, making it the default documentation layout for all components in the Storybook instance.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-custom-mdx-template.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import DocumentationTemplate from './DocumentationTemplate.mdx';

export default {
  parameters: {
    docs: {
      page: DocumentationTemplate,
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: Basic Storybook configuration file in JavaScript format. It specifies the framework to use, defines patterns for story files, and manages component references.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-refs-disable.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  refs: {
    'package-name': { disable: true },
  },
};
```

----------------------------------------

TITLE: Mocked Google Fonts JavaScript Module
DESCRIPTION: This JavaScript module provides mocked responses for Google Fonts, allowing you to avoid fetching fonts from Google during testing or development. The module exports an object where the keys are the font URLs and the values are the corresponding CSS content. This example mocks the 'Inter' font.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_5

LANGUAGE: js
CODE:
```
//👇 Mocked responses of google fonts with the URL as the key
module.exports = {
  'https://fonts.googleapis.com/css?family=Inter:wght@400;500;600;800&display=block': `
    /* cyrillic-ext */
    @font-face {
      font-family: 'Inter';
      font-style: normal;
      font-weight: 400;
      font-display: block;
      src: url(https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZJhiJ-Ek-_EeAmM.woff2) format('woff2');
      unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
    }
    /* more font declarations go here */
    /* latin */
    @font-face {
      font-family: 'Inter';
      font-style: normal;
      font-weight: 400;
      font-display: block;
      src: url(https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiJ-Ek-_EeA.woff2) format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }`,
};
```

----------------------------------------

TITLE: Defining Storybook Stories with Include/Exclude - Common JavaScript
DESCRIPTION: This code defines Storybook stories for a component using JavaScript, demonstrating how to include and exclude controls using array and regular expression patterns. It exports the component and defines stories with parameters to control the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_3

LANGUAGE: js
CODE:
```
import { YourComponent } from './YourComponent';

export default {
  component: YourComponent,
};

export const ArrayInclude = {
  parameters: {
    controls: { include: ['foo', 'bar'] },
  },
};

export const RegexInclude = {
  parameters: {
    controls: { include: /^hello*/ },
  },
};

export const ArrayExclude = {
  parameters: {
    controls: { exclude: ['foo', 'bar'] },
  },
};

export const RegexExclude = {
  parameters: {
    controls: { exclude: /^hello*/ },
  },
};
```

----------------------------------------

TITLE: Configuring number control for number ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'number' control, providing a numeric input with specified minimum, maximum, and step values within Storybook's controls panel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_10

LANGUAGE: JavaScript
CODE:
```
{ control: { type: 'number', min:1, max:30, step: 2 } }
```

----------------------------------------

TITLE: Testing Storybook Components with Jest in JavaScript
DESCRIPTION: A complete JavaScript implementation for automated testing of Storybook components using Jest. It discovers story files, composes them for testing, filters stories based on configuration, and creates snapshot tests for each story. The implementation includes error handling, filtering logic, and consistent snapshot generation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-snapshot-test.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import path from 'path';
import * as glob from 'glob';

import { describe, test, expect } from '@jest/globals';

// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)
import { composeStories } from '@storybook/your-renderer';

const compose = (entry) => {
  try {
    return composeStories(entry);
  } catch (e) {
    throw new Error(
      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,
    );
  }
};

function getAllStoryFiles() {
  // Place the glob you want to match your stories files
  const storyFiles = glob.sync(
    path.join(__dirname, 'stories/**/*.{stories,story}.{js,jsx,mjs,ts,tsx}'),
  );

  return storyFiles.map((filePath) => {
    const storyFile = require(filePath);
    return { filePath, storyFile };
  });
}

// Recreate similar options to Storyshots. Place your configuration below
const options = {
  suite: 'Storybook Tests',
  storyKindRegex: /^.*?DontTest$/,
  storyNameRegex: /UNSET/,
  snapshotsDirName: '__snapshots__',
  snapshotExtension: '.storyshot',
};

describe(options.suite, () => {
  getAllStoryFiles().forEach(({ storyFile, componentName }) => {
    const meta = storyFile.default;
    const title = meta.title || componentName;

    if (options.storyKindRegex.test(title) || meta.parameters?.storyshots?.disable) {
      // Skip component tests if they are disabled
      return;
    }

    describe(title, () => {
      const stories = Object.entries(compose(storyFile))
        .map(([name, story]) => ({ name, story }))
        .filter(({ name, story }) => {
          // Implements a filtering mechanism to avoid running stories that are disabled via parameters or that match a specific regex mirroring the default behavior of Storyshots.
          return !options.storyNameRegex.test(name) && !story.parameters.storyshots?.disable;
        });

      if (stories.length <= 0) {
        throw new Error(
          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module, without a disable parameter, or add parameters.storyshots.disable in the default export of this file.`,
        );
      }

      stories.forEach(({ name, story }) => {
        // Instead of not running the test, you can create logic to skip it, flagging it accordingly in the test results.
        const testFn = story.parameters.storyshots?.skip ? test.skip : test;

        testFn(name, async () => {
          await story.run();
          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.
          await new Promise((resolve) => setTimeout(resolve, 1));
          expect(document.body.firstChild).toMatchSnapshot();
        });
      });
    });
  });
});
```

----------------------------------------

TITLE: Configuring Framework Field in main.js
DESCRIPTION: This snippet demonstrates how to configure the `framework` field in your `.storybook/main.js` file, which is mandatory in Storybook 7. It shows an example of setting the `name` and `options` properties for the `@storybook/react-vite` framework.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_98

LANGUAGE: js
CODE:
```
// .storybook/main.js
export default {
  // ... your configuration
  framework: {
    name: "@storybook/react-vite",
    options: {},
  },
};
```

----------------------------------------

TITLE: Updating Storybook Main Configuration
DESCRIPTION: This code snippet updates the `.storybook/main.js|ts` file to specify the `@storybook/svelte-vite` framework. This configuration is crucial for Storybook to recognize and utilize the Svelte-Vite framework.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
framework: "@storybook/svelte-vite"
```

LANGUAGE: TypeScript
CODE:
```
framework: "@storybook/svelte-vite"
```

----------------------------------------

TITLE: Initializing LoginForm Story with Web Components
DESCRIPTION: This code defines a Storybook story for the LoginForm component using Web Components. It imports necessary modules, defines the component, and creates stories for both empty and filled form scenarios, including simulating user input.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_17

LANGUAGE: js
CODE:
```
import { userEvent, within, expect } from 'storybook/test';

export default {
  component: 'demo-login-form',
};

export const EmptyForm = {};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');
```

----------------------------------------

TITLE: Documenting Multiple Components with Subcomponents in Storybook
DESCRIPTION: This example demonstrates how to document a main component along with its related subcomponents using the `subcomponents` property in Storybook's Autodocs. The main component and its subcomponents will be displayed in a tabbed version of the ArgTypes doc block.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
This is a placeholder for the 'list-story-with-subcomponents.md' code snippet.
```

----------------------------------------

TITLE: Splitting Component Stories into Multiple Files
DESCRIPTION: This snippet demonstrates how to split a component's stories into multiple files in Storybook while avoiding duplicate title warnings. It involves creating a primary file with the default export and re-exporting stories from other files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_242

LANGUAGE: javascript
CODE:
```
export default { title: 'foo/bar' };
export * from './Bar1.stories'
export * from './Bar2.stories'
export * from './Bar3.stories'

export const SomeStory = () => ...;
```

----------------------------------------

TITLE: Configuring Webpack Options in Storybook
DESCRIPTION: Example showing how to configure Webpack options like lazyCompilation and fsCache in Storybook's main configuration file. These settings can improve performance during development.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// .storybook/main.js
export default {
  framework: {
    name: '@storybook/react-webpack5',
    options: {},
  },
  // Webpack-specific configuration
  core: {
    builder: {
      options: {
        lazyCompilation: true,
        fsCache: true,
      },
    },
  },
};
```

----------------------------------------

TITLE: Checkbox Story MDX Example
DESCRIPTION: This MDX file demonstrates how to combine Markdown with a reference to a story defined in a separate CSF file. It showcases the basic structure of an MDX file used for documenting a component and embedding its stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_0

LANGUAGE: MDX
CODE:
```
<CodeSnippets path="checkbox-story.md" />
```

----------------------------------------

TITLE: Enable Table of Contents in Storybook Docs (TS)
DESCRIPTION: This TypeScript snippet configures the Storybook preview to enable the table of contents within the Docs addon. It imports the `Preview` type from `@storybook/your-framework` and sets the `toc` property to `true` within the `docs` parameter.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-enable-toc.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    docs: {
      toc: true, // 👈 Enables the table of contents
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Creating Button Documentation with MDX in Storybook (Svelte with Standard CSF)
DESCRIPTION: This MDX file provides documentation for a Button component using Svelte renderer but with standard CSF stories. It imports from a generic Button.stories file, configures metadata, provides descriptive text about the button component, and shows a basic usage example.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-starter-example.md#2025-04-22_snippet_2

LANGUAGE: mdx
CODE:
```
import { Meta, Story } from '@storybook/addon-docs/blocks';

import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

# Button

Button is a clickable interactive element that triggers a response.

You can place text and icons inside of a button.

Buttons are often used for form submissions and to toggle elements into view.

## Usage

<Story of={ButtonStories.Basic} />
```

----------------------------------------

TITLE: Configuring Number Control with Range in ArgTypes
DESCRIPTION: This snippet shows how to configure a number control with a specified range using the 'control' annotation in the argTypes field. It provides a numeric input with minimum, maximum, and step values for the 'even' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_14

LANGUAGE: javascript
CODE:
```
argTypes: { even: { control: { type: 'number', min:1, max:30, step: 2 } } }
```

----------------------------------------

TITLE: Configuring Storybook Meta for Component (JS)
DESCRIPTION: This code configures the Storybook metadata for a generic component using JavaScript. It imports the component and defines the meta object with component details and argTypes, specifically hiding the 'foo' property from the UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#_snippet_3

LANGUAGE: js
CODE:
```
import { YourComponent } from './YourComponent';

export default {
  component: YourComponent,
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      control: false,
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with Variants in Angular
DESCRIPTION: This code defines Storybook stories for an Angular Button component, including variants and a combo example. It uses the Meta and StoryObj types from '@storybook/angular' to configure the component and its stories, setting tags to control their visibility and testing behavior.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './Button';

const meta: Meta<Button> = {
  component: Button,
};
export default meta;

type Story = StoryObj<Button>;

export const Variant1: Story = {
  // 👇 This story will not appear in Storybook's sidebar or docs page
  tags: ['!dev', '!autodocs'],
  args: { variant: 1 },
};

export const Variant2: Story = {
  // 👇 This story will not appear in Storybook's sidebar or docs page
  tags: ['!dev', '!autodocs'],
  args: { variant: 2 },
};

export const Combo: Story = {
  // 👇 This story should not be tested, but will appear in the sidebar and docs page
  tags: ['!test'],
  render: () => ({
    template: `
      <div>
        <demo-button [variant]="1"></demo-button>
        <demo-button [variant]="2"></demo-button>
      </div>
    `,
  }),
};
```

----------------------------------------

TITLE: Configuring Svelte Button Story (TS)
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using TypeScript. It imports the necessary modules, defines the component metadata, sets up action handling for 'mouseover' and 'click .btn' events, and applies decorators. It uses satisfies Meta<typeof Button> to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

import { withActions } from 'storybook/actions/decorator';

const meta = {
  component: Button,
  parameters: {
    actions: {
      handles: ['mouseover', 'click .btn'],
    },
  },
  decorators: [withActions],
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Migrating from Implicit Actions to Explicit Actions
DESCRIPTION: This example illustrates the migration from implicit actions (automatically inferred from prop names) to explicit actions using '@storybook/test'. In Storybook 8, actions must be explicitly defined.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_80

LANGUAGE: typescript
CODE:
```
export default {
  component: Button,
};

export const ButtonClick = {
  play: async ({ args, canvasElement }) => {
    await userEvent.click(within(canvasElement).getByRole("button"));
    // args.onClick is a jest spy in 7.0
    await expect(args.onClick).toHaveBeenCalled();
  },
};
```

LANGUAGE: typescript
CODE:
```
import { fn } from "@storybook/test";

export default {
  component: Button,
  args: {
    onClick: fn(),
  },
};

export const ButtonClick = {
  play: async ({ args, canvasElement }) => {
    await userEvent.click(within(canvasElement).getByRole("button"));
    await expect(args.onClick).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Defining Svelte Story with CSF for DocumentScreen (TypeScript)
DESCRIPTION: This TypeScript code defines a Storybook story for the DocumentScreen component using Svelte and the Component Story Format (CSF). It imports necessary modules, defines a 'Simple' story with predefined arguments for user, document, and subdocuments, pulling data from other stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import DocumentScreen from './YourPage.svelte';

  // 👇 Imports the required stories
  import * as PageLayout from './PageLayout.stories.svelte';
  import * as DocumentHeader from './DocumentHeader.stories.svelte';
  import * as DocumentList from './DocumentList.stories.svelte';

  const { Story } = defineMeta({
    component: DocumentScreen,
  });
</script>

<Story
  name="Simple"
  args={{
    user: PageLayout.Simple.args.user,
    document: DocumentHeader.Simple.args.document,
    subdocuments: DocumentList.Simple.args.documents,
  }}
/>
```

----------------------------------------

TITLE: Configuring Storybook with Vite
DESCRIPTION: This configures Storybook with Vite, defining the framework and stories, and setting up module aliases using viteFinal. It mocks external and internal modules by resolving aliases to mock files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/module-aliases-config.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  viteFinal: async (config) => {
    if (config.resolve) {
      config.resolve.alias = {
        ...config.resolve?.alias,
        // 👇 External module
        lodash: require.resolve('./lodash.mock'),
        // 👇 Internal modules
        '@/api': path.resolve(__dirname, './api.mock.ts'),
        '@/app/actions': path.resolve(__dirname, './app/actions.mock.ts'),
        '@/lib/session': path.resolve(__dirname, './lib/session.mock.ts'),
        '@/lib/db': path.resolve(__dirname, './lib/db.mock.ts'),
      };
    }

    return config;
  },
};
```

----------------------------------------

TITLE: Writing TypeScript Stories in Storybook
DESCRIPTION: Basic example of writing stories using TypeScript for improved type safety and code completion. This uses generic types Meta and StoryObj to infer component metadata and prop types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/typescript.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
<CodeSnippets path="button-story-baseline.md" />
```

----------------------------------------

TITLE: Channel Options Configuration Type Definition
DESCRIPTION: TypeScript interface defining the available channel configuration options for communication between manager and preview.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-core.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
{
  allowDate: boolean;
  allowRegExp: boolean;
  allowSymbol: boolean;
  allowUndefined: boolean;
  maxDepth: number;
  space: number | undefined;
}
```

----------------------------------------

TITLE: Defining Button Stories with CSF in Typescript
DESCRIPTION: This code defines Storybook stories for a Button component using TypeScript and the Component Story Format (CSF). It imports Meta and StoryObj types from the Storybook framework and defines primary, secondary, and tertiary stories with different labels and background colors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_10

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    backgroundColor: '#ff0',
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
};

export const Tertiary: Story = {
  args: {
    ...Primary.args,
    label: '📚📕📈🤓',
  },
};

```

----------------------------------------

TITLE: Configuring Storybook Preview for Ember
DESCRIPTION: This code snippet sets up the Storybook preview configuration for an Ember project. It imports JSON documentation, sets it using the setJSONDoc function, and exports default parameters for controls, including matchers for colors and dates.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-metadata.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { setJSONDoc } from '@storybook/addon-docs/ember';

import docJson from '../dist/storybook-docgen/index.json';
setJSONDoc(docJson);

export default {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Preview with Theme Addon (TypeScript)
DESCRIPTION: This TypeScript snippet configures the Storybook preview to use the 'addon-themes' addon for applying themes based on a data attribute. It imports the necessary modules, defines themes (light and dark), sets the default theme to 'light', and specifies 'data-theme' as the attribute name to watch for theme changes. It also imports the global CSS file.  The snippet includes a placeholder import for the framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-data-attribute-decorator.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import { Preview, Renderer } from '@storybook/your-framework';

import { withThemeByDataAttribute } from '@storybook/addon-themes';

import '../src/index.css'; // Your application's global CSS file

const preview: Preview = {
  decorators: [
    withThemeByDataAttribute<Renderer>({
      themes: {
        light: 'light',
        dark: 'dark',
      },
      defaultTheme: 'light',
      attributeName: 'data-theme',
    }),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Spying on Mocked Modules in Storybook
DESCRIPTION: This code snippet demonstrates how to spy on a mocked module's functions within a Storybook story using the `fn` utility. It uses component tests to verify that the `saveNote` function was called when the user clicks the save button. This allows for asserting the behavior of the mocked function and ensuring it's called with the expected arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';
import { within, userEvent } from '@storybook/testing-library';

import { Page } from './Page';
import * as HeaderStories from './Header.stories';

import * as Module from './module';
import { fn } from '@storybook/test';

const mockedModule = fn(Module);

const meta: Meta<typeof Page> = {
  title: 'Example/Page',
  component: Page,
  parameters: {
    // More on how to position stories at:
    // https://storybook.js.org/docs/react/configure/story-layout
    layout: 'fullscreen',
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const LoggedIn: Story = {
  parameters: {
    msw: {
      handlers: [],
    },
  },
  decorators: [
    (story) => {
      mockedModule.getUserFromSession.mockReturnValue({
        name: 'Jane Doe',
      });
      return story();
    },
  ],
  args: {
    ...HeaderStories.LoggedIn.args,
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    await userEvent.click(canvas.getByRole('button'));
    expect(mockedModule.saveNote).toHaveBeenCalled();
  },
};

export const LoggedOut: Story = {
  args: {
    ...HeaderStories.LoggedOut.args,
  },
};

```

----------------------------------------

TITLE: Initializing Viewport Configuration in React (TS)
DESCRIPTION: This snippet initializes the viewport configuration for a React component in Storybook using TypeScript. It imports the component and sets the viewport parameter to use INITIAL_VIEWPORTS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { INITIAL_VIEWPORTS } from 'storybook/viewport';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
  parameters: {
    viewport: {
      //👇 Set available viewports for every story in the file
      options: INITIAL_VIEWPORTS,
    },
  },
} satisfies Meta<typeof MyComponent>;

export default meta;
```

----------------------------------------

TITLE: Setting Babel Configuration Inspection Environment Variable
DESCRIPTION: Shell command to debug Babel configuration by showing the effective configs for a specific file using the BABEL_SHOW_CONFIG_FOR environment variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/compilers.mdx#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
BABEL_SHOW_CONFIG_FOR=.storybook/preview.js yarn storybook
```

----------------------------------------

TITLE: Defining NoteUI Story with Save Flow in JavaScript
DESCRIPTION: This code defines a Storybook story for the NoteUI component in JavaScript. It imports necessary modules, defines metadata for the component, and sets up a 'Save Flow' story that simulates a user clicking the save button and asserts that the saveNote mock function is called.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#_snippet_2

LANGUAGE: js
CODE:
```
import { expect, userEvent, within } from 'storybook/test';

import { saveNote } from '#app/actions.mock';
import { createNotes } from '#mocks/notes';

import NoteUI from './note-ui.svelte';

export default {
  title: 'Mocked/NoteUI',
  component: NoteUI,
};

const notes = createNotes();

export const SaveFlow = {
  name: 'Save Flow ▶',
  args: {
    isEditing: true,
    note: notes[0],
  },
  play: async ({ canvasElement, step }) => {
    const canvas = within(canvasElement);

    const saveButton = canvas.getByRole('menuitem', { name: /done/i });
    await userEvent.click(saveButton);
    // 👇 This is the mock function, so you can assert its behavior
    await expect(saveNote).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Configuring Inline Check Control in ArgTypes
DESCRIPTION: This snippet shows how to configure an inline check control using the 'control' annotation in the argTypes field. It provides a set of inlined checkbox components for selecting multiple options for the 'contact' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_22

LANGUAGE: javascript
CODE:
```
argTypes: { contact: { control: 'inline-check', options: ['email', 'phone', 'mail'] } }
```

----------------------------------------

TITLE: Configuring Button Story with Svelte (Typescript)
DESCRIPTION: This code configures a Button component's story in Storybook using Svelte and Typescript. It imports the necessary modules, defines the component, and sets up argTypes for the 'arrow' property, allowing users to select from predefined arrow icons using a select control in the Storybook UI. The options and labels for the arrow selection are also defined.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#_snippet_5

LANGUAGE: typescript
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';

const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };

const meta = {
  component: Button,
  argTypes: {
    arrow: {
      options: Object.keys(arrows), // An array of serializable values
```

----------------------------------------

TITLE: Configuring Button Component Meta for Svelte in Storybook (CSF - JS)
DESCRIPTION: This code configures the metadata for a Button component in Storybook using Svelte and JavaScript. It defines the component and sets up argument types (argTypes) to control the component's properties, specifically allowing either a label or an image to be passed, but not both. The 'if' property within 'argTypes' is used to conditionally display the 'label' or 'image' control based on the presence of the other.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  argTypes: {
    // Button can be passed a label or an image, not both
    label: {
      control: 'text',
      if: { arg: 'image', truthy: false },
    },
    image: {
      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },
      if: { arg: 'label', truthy: false },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Layout
DESCRIPTION: This snippet demonstrates how to configure the Storybook layout using `addons.setConfig` in the `.storybook/manager.js` file. It allows customization of various UI elements such as sidebar size, panel position, and theme. The configuration options are passed as an object to `addons.setConfig`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/features-and-behavior.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import { addons } from '@storybook/preview-api';

addons.setConfig({
  navSize: 300,
  bottomPanelHeight: 200,
  rightPanelWidth: 200,
  panelPosition: 'bottom',
  enableShortcuts: true,
  showToolbar: true,
  theme: undefined,
  selectedPanel: 'storybook/actions/panel',
  initialActive: 'sidebar',
  layoutCustomisations: { showSidebar: ({ viewMode }, defaultValue) => viewMode === 'docs' ? false : defaultValue },
  sidebar: { showRoots: false },
  toolbar: { fullscreen: { hidden: false } }
});
```

----------------------------------------

TITLE: Initializing a library in Storybook preview
DESCRIPTION: This code snippet demonstrates how to initialize a library before your components render in Storybook. It imports the necessary types from the framework and initializes the library using the `initialize()` function. This code should be placed in `.storybook/preview.ts`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/story-rendering.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, web-components-vite, etc.)
import type { Preview } from '@storybook/your-framework';

import { initialize } from '../lib/your-library';

initialize();

const preview: Preview = {
  // ...
};

export default preview;
```

----------------------------------------

TITLE: Default Tags Configuration
DESCRIPTION: This code snippet shows the default configuration for tags, including which tags to include, exclude, or skip when running tests. These tags are defined as annotations in your story, meta, or preview.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_12

LANGUAGE: typescript
CODE:
```
{
  include: ['test'],
  exclude: [],
  skip: [],
}
```

----------------------------------------

TITLE: Configuring A11y Parameters in Vue3 CSF with TypeScript 4.9+
DESCRIPTION: Example of configuring accessibility parameters for a Vue3 component using newer TypeScript 4.9+ syntax with 'satisfies' keyword. Demonstrates how to set up accessibility testing with type validation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ExampleStory = {
  parameters: {
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Setting Storybook Parameters in JavaScript
DESCRIPTION: This JavaScript snippet sets the global parameters for Storybook stories. Specifically, it configures the 'controls' parameter to be expanded by default, providing an enhanced user experience for interacting with story controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-expanded-controls.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    controls: { expanded: true },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story (Common TS) with Meta
DESCRIPTION: This snippet initializes a Storybook story for a Button component using TypeScript and defines the component metadata using a 'meta' object. It includes the component itself and arguments like onClick, which uses 'fn' to spy on the click event. It also uses 'satisfies Meta<typeof Button>' to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-onclick-action-spy.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { fn } from 'storybook/test';

import { Button } from './Button';

const meta = {
  component: Button,
  // 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked
  args: { onClick: fn() },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Enabling Table of Contents in Storybook Preview
DESCRIPTION: This code snippet shows how to enable the table of contents feature for Storybook documentation pages by adding a `docs` parameter with a `toc` property to the `.storybook/preview.js` or `.storybook/preview.ts` file. This provides a quick overview of the documentation page and allows users to jump to specific sections.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
export const parameters = {
  docs: {
    toc: {},
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: This snippet is the TypeScript version of the Storybook configuration, defining the same settings and behaviors as the JavaScript version but utilizing TypeScript's type support. It specifies a framework, story locations, and adds a script to the HTML if an analytics ID is present. Import of 'StorybookConfig' type is necessary.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview-body.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  previewBody: (body) => `
    ${body}
    ${
      process.env.ANALYTICS_ID ? '<script src="https://cdn.example.com/analytics.js"></script>' : ''
    }
  `,
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet shows how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines a configuration object with type annotations, and exports it as the default configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-cross-origin-isolated.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    crossOriginIsolated: true,
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Static Directories in Storybook main.js/ts
DESCRIPTION: Sets a list of directories containing static files to be loaded by Storybook. This allows you to reference these files in your stories and components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-static-dirs.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // ...
  staticDirs: ['../public'],
};
```

----------------------------------------

TITLE: Displaying Webpack Configurations for Storybook Build (Shell)
DESCRIPTION: This command displays the final Webpack configurations used for the build process, aiding in debugging Webpack-related issues. It's useful for advanced users who need to understand the underlying build process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_34

LANGUAGE: shell
CODE:
```
storybook build --debug-webpack
```

----------------------------------------

TITLE: Configuring TypeScript Options for React in Storybook
DESCRIPTION: TypeScript configuration options for React projects in Storybook, including type checking, React component parsing, and compiler settings.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
{
  check?: boolean;
  checkOptions?: CheckOptions;
  reactDocgen?: 'react-docgen' | 'react-docgen-typescript' | false;
  reactDocgenTypescriptOptions?: ReactDocgenTypescriptOptions;
  skipCompiler?: boolean;
}
```

----------------------------------------

TITLE: Configuring Storybook with GitHub Flavored Markdown in JavaScript
DESCRIPTION: This snippet shows how to configure Storybook in JavaScript, including setting up the framework, specifying story locations, and adding the docs addon with remark-gfm plugin for GitHub Flavored Markdown support.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-config-remark-options.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import remarkGfm from 'remark-gfm';

export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    // Other addons go here
    {
      name: '@storybook/addon-docs',
      options: {
        mdxPluginOptions: {
          mdxCompileOptions: {
            remarkPlugins: [remarkGfm],
          },
        },
      },
    },
  ],
};
```

----------------------------------------

TITLE: Using waitForPageReady in Storybook Test-Runner for Asset Loading
DESCRIPTION: Demonstrates how to use the waitForPageReady helper function to ensure the page is fully loaded before running tests, which is useful for tests involving assets like images.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
// @vitest-environment @storybook/test-runner
import { expect, test } from '@storybook/test-runner';
import type { Page } from '@playwright/test';

test('my test', async ({ page, context }: { page: Page; context: any }) => {
  // This ensures your page is in the ready state before proceeding with the test
  await context.waitForPageReady();
  // Run your tests
});
```

----------------------------------------

TITLE: Configuring Manager Entries in Storybook Main.js
DESCRIPTION: This code snippet exports the main Storybook configuration object, specifically setting up manager entries. The configuration registers an addon's entry point script that will be loaded by the Storybook manager UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-use-manager-entries.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  managerEntries: ['some-storybook-addon/entry-point.js'],
};
```

----------------------------------------

TITLE: Navigation Type Definition
DESCRIPTION: Defines the TypeScript type for the `navigation` object, which mimics the `next/navigation` context in Next.js. It includes properties like `asPath`, `pathname`, `query`, and `segments` to represent the current route.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_33

LANGUAGE: typescript
CODE:
```
{
  asPath?: string;
  pathname?: string;
  query?: Record<string, string>;
  segments?: (string | [string, string])[];
}
```

----------------------------------------

TITLE: Adding a11y Addon with npm using npx
DESCRIPTION: This shell command uses `npx` (npm package runner) to execute the Storybook CLI `add` command. It installs and configures the `@storybook/addon-a11y` addon for a Storybook project managed with npm.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-add-command.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@latest add @storybook/addon-a11y
```

----------------------------------------

TITLE: MDX Styling with Line Breaks
DESCRIPTION: Demonstrates how to correctly format MDX code blocks with line breaks within the style tag to ensure proper styling in Storybook. The first example shows the incorrect way, which will break, while the second example shows the correct way to format the code.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#_snippet_9

LANGUAGE: mdx
CODE:
```
<style>{`
  .class1 {
    ...
  }

  .class2 {
    ...
  }
`}</style>
```

----------------------------------------

TITLE: Define Story with Play Function (Web Components)
DESCRIPTION: This code defines a Storybook story for a web component named `demo-registration-form`. It uses the `play` function to simulate user interaction with the form, filling in the email and password fields and then submitting the form. The `within` function is used to query the component's canvas for specific elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#_snippet_6

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

export default {
  component: 'demo-registration-form',
};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const emailInput = canvas.getByLabelText('email', {
      selector: 'input',
    });

    await userEvent.type(emailInput, 'example-email@email.com', {
      delay: 100,
    });

    const passwordInput = canvas.getByLabelText('password', {
      selector: 'input',
    });

    await userEvent.type(passwordInput, 'ExamplePassword', {
      delay: 100,
    });
    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const submitButton = canvas.getByRole('button');

    await userEvent.click(submitButton);
  },
};
```

----------------------------------------

TITLE: Example Image Import Object
DESCRIPTION: Shows the structure of the object returned when importing images in Next.js, including src, height, width, and blurDataURL properties.  This is important to understand when migrating to Next.js from older frameworks.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_27

LANGUAGE: jsonc
CODE:
```
// Image import object
{
  "src": "static/media/stories/assets/logo.svg",
  "height": 48,
  "width": 48,
  "blurDataURL": "static/media/stories/assets/logo.svg"
}
```

----------------------------------------

TITLE: Login Form Story with Play Function
DESCRIPTION: A Storybook story implementing a login form component with a play function to simulate user interactions and form validation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export const LoginForm = {
  args: {
    onSubmit: (username, password) => console.log(username, password),
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const loginButton = await canvas.getByRole('button');
    await userEvent.click(loginButton);
    
    const usernameInput = canvas.getByLabelText('username', {
      selector: 'input',
    });
    await userEvent.type(usernameInput, 'username@email.com', {
      delay: 100,
    });
    
    const passwordInput = canvas.getByLabelText('password', {
      selector: 'input',
    });
    await userEvent.type(passwordInput, 'password', { delay: 100 });
    await userEvent.click(loginButton);
  },
};
```

----------------------------------------

TITLE: Creating a Getting Started MDX Document for Storybook Project
DESCRIPTION: A complete MDX document that provides a starting guide for both designers and developers working with Storybook. It includes sections on design resources (Figma, UI/UX guidelines, design assets) and development resources (coding standards, version control, development tools).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-standalone-page.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
# Getting Started

Welcome! Whether you're a designer or a developer, this guide will help you get started and connect you to the essential resources you need.

## Table of Contents

- [Design Resources](#design-resources)

  - [Figma](#figma)
  - [UI/UX Design Guidelines](#uiux-design-guidelines)
  - [Design Assets](#design-assets)

- [Development Resources](#development-resources)
  - [Coding Standards](#coding-standards)
  - [Version Control](#version-control)
  - [Development Tools](#development-tools)

---

## Design Resources

### Figma

[Figma](https://www.figma.com/) is a collaborative design and prototyping tool. It's the heart of the design process, allowing designers to work together seamlessly.

- **Get Access**: If you're not already part of the Figma project, request access from the project lead or manager.

### UI/UX Design Guidelines

Before you dive into designing, familiarize yourself with our UI/UX design guidelines. They provide valuable insights into our design philosophy and standards.

- [UI/UX Guidelines Document](https://your-design-guidelines-link.com)

### Design Assets

All the essential design assets like logos, icons, and brand guidelines can be found in the Figma project. Ensure you have access and familiarize yourself with these assets for consistency.

---

## Development Resources

### Coding Standards

Maintaining a consistent code style is essential for collaborative development. Our coding standards document will guide you on best practices.

- [Coding Standards Document](https://your-coding-standards-link.com)

### Version Control

We use Git for version control. Make sure you have Git installed and are familiar with its basics.

### Development Tools

Your development environment is critical. Here are some tools and resources to help you set up your workspace:

- **Code Editor**: We recommend using [Visual Studio Code](https://code.visualstudio.com/) for development. It's highly customizable and supports a wide range of extensions.

- **Package Manager**: [npm](https://www.npmjs.com/) is the package manager we use for JavaScript projects. Install it to manage project dependencies.

---
```

----------------------------------------

TITLE: Configuring Storybook Main Configuration in JavaScript
DESCRIPTION: Basic JavaScript configuration for Storybook's main.js file, specifying the framework and stories location. The example shows how to configure Storybook to load stories from a specific folder.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-storyloading-with-directory.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  // 👇 Storybook will load all existing stories within the MyStories folder
  stories: ['../packages/MyStories'],
};
```

----------------------------------------

TITLE: Configuring Storybook with React and Webpack in JavaScript
DESCRIPTION: The code snippet sets up a basic Storybook configuration using React and Webpack in JavaScript. It exports a default object that specifies the framework settings required by Storybook for React, adapted to use Webpack 5 with potential customizable options. This setup is essential for developers working on a JavaScript-based React project that leverages Storybook for isolated UI component development.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-framework-options.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default {
  framework: {
    name: '@storybook/react-webpack5',
    options: {
      // ...
    },
  },
};
```

----------------------------------------

TITLE: Applying Component Decorators
DESCRIPTION: Illustrates how to use decorators to wrap a component in arbitrary markup when rendering a story. This is useful for adding padding or providing context to components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
No code provided in the original text.
```

----------------------------------------

TITLE: Configuring Storybook Preview with Custom Docs Container (TS)
DESCRIPTION: This TypeScript snippet configures Storybook's preview settings, including a custom DocsContainer component that wraps the default DocsContainer with an MDXProvider. This allows customizing the rendering of documentation using components from a design system. It also defines control matchers for color and date inputs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-override-mdx-container.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

import { MDXProvider } from '@mdx-js/react';

import { DocsContainer } from '@storybook/addon-docs/blocks';

import * as DesignSystem from 'your-design-system';

export const MyDocsContainer = (props) => (
  <MDXProvider
    components={{
      h1: DesignSystem.H1,
      h2: DesignSystem.H2,
    }}
  >
    <DocsContainer {...props} />
  </MDXProvider>
);

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
    docs: {
      container: MyDocsContainer,
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Custom Story Sorting Function in Storybook
DESCRIPTION: This code snippet demonstrates a custom story sorting function for Storybook. It allows developers to define a specific order for stories based on their titles, names, or import paths. The function takes two story entries as input and returns a number indicating their relative order.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/naming-components-and-hierarchy.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
/* storybook-preview-sort-function.md */
export const parameters = {
  options: {
    storySort: (a, b) =>
      a.id === b.id ? 0 : a.id.localeCompare(b.id, undefined, { numeric: true }),
  },
};

```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: This TypeScript configuration file sets up Storybook, specifying the framework, story locations, and builder options using Vite. It imports the StorybookConfig type and exports a configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-builder.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  framework: '@storybook/your-framework',
  core: {
    builder: {
      name: '@storybook/builder-vite',
      options: {
        viteConfigPath: '../../../vite.config.js',
      },
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Setting Environment Variables in .env File
DESCRIPTION: Shows how to define environment variables using a .env file in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/environment-variables.mdx#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
STORYBOOK_DATA_KEY=12345
```

----------------------------------------

TITLE: Configuring Storybook's main.js file in JavaScript
DESCRIPTION: This snippet demonstrates the basic structure of a Storybook main.js configuration file. It includes settings for stories, addons, and framework-specific options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/index.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// .storybook/main.js

module.exports = {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: ['@storybook/addon-links', '@storybook/addon-essentials'],
  framework: {
    name: '@storybook/react-webpack5',
    options: {},
  },
  docs: {
    autodocs: 'tag',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Main File in JavaScript
DESCRIPTION: This JavaScript configuration file for Storybook defines the framework, story file patterns, and disables telemetry. It uses ES6 module syntax to export the configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-telemetry.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    disableTelemetry: true,
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Parameters in JavaScript
DESCRIPTION: This JavaScript snippet configures Storybook's parameters to customize the behavior of controls. It defines regular expression matchers for color and date properties, ensuring they are correctly handled in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-controls-custom-matchers.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring MDX Plugin for Storybook in TypeScript
DESCRIPTION: This function sets up the MDX plugin for Vite, specifically for Storybook. It adds a compiler for files ending with 'stories.mdx' or 'story.mdx', using Storybook's internal CSF tools.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-builder-api-mdx.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import mdx from 'vite-plugin-mdx';

import { createCompiler } from 'storybook/internal/csf-tools/mdx';

export function mdxPlugin() {
  return mdx((filename) => {
    const compilers = [];

    if (filename.endsWith('stories.mdx') || filename.endsWith('story.mdx')) {
      compilers.push(createCompiler({}));
    }
    return {
      compilers,
    };
  });
}
```

----------------------------------------

TITLE: Dynamically Loading Stories in Storybook with JavaScript
DESCRIPTION: A JavaScript configuration for Storybook that uses an async function to dynamically find and load story files. The configuration exports a default object with the framework specification and a stories property that combines the default story list with dynamically found stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories-with-logic.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
async function findStories() {
  // your custom logic returns a list of files
}

export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: async (list) => [
    ...list,
    // 👇 Add your found stories to the existing list of story files
    ...(await findStories()),
  ],
};
```

----------------------------------------

TITLE: Play Function with Delay
DESCRIPTION: This snippet demonstrates how to introduce delays within a `play` function to emulate user interaction and assert if the values provided are valid or not. It is useful when working with components with validation logic implemented.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

export const ValidationComponent = () => /* component implementation */;

ValidationComponent.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  await userEvent.type(canvas.getByLabelText('Email'), 'invalid-email');
  // Wait for validation to complete
  await new Promise((resolve) => setTimeout(resolve, 500));
  await expect(canvas.getByText('Invalid email format')).toBeInTheDocument();
};
```

----------------------------------------

TITLE: Customizing Storybook Preview Body in JavaScript
DESCRIPTION: This snippet shows how to customize the Storybook preview body in JavaScript. It conditionally adds an analytics script based on the presence of an environment variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  previewBody: (body) => `
    ${body}
    ${
      process.env.ANALYTICS_ID ? '<script src="https://cdn.example.com/analytics.js"></script>' : ''
    }
  `,
};
```

----------------------------------------

TITLE: Description Block Usage in MDX Documentation
DESCRIPTION: Demonstrates different ways to use the Description block to show component and story descriptions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-description.mdx#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
import { Meta, Description } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

{/* Shows the description for the default export (the meta).
    If that didn't have any comments, it would show the 
    comments from the component instead */}
<Description of={ButtonStories} />

{/* Shows the description for the Primary export */}
<Description of={ButtonStories.Primary} />
```

----------------------------------------

TITLE: Configuring Button Story with argTypes in JavaScript
DESCRIPTION: This code configures a Storybook story for a Button component. It defines the component and its argTypes, which allow users to control the component's properties like label, advanced settings, margin, padding, and cornerRadius through the Storybook UI. The margin, padding, and cornerRadius are conditionally enabled based on the 'advanced' boolean.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  argTypes: {
    label: { control: 'text' }, // Always shows the control
    advanced: { control: 'boolean' },
    // Only enabled if advanced is true
    margin: { control: 'number', if: { arg: 'advanced' } },
    padding: { control: 'number', if: { arg: 'advanced' } },
    cornerRadius: { control: 'number', if: { arg: 'advanced' } },
  },
};
```

----------------------------------------

TITLE: Configuring Next.js Router in Storybook (JavaScript)
DESCRIPTION: This JavaScript snippet configures the Next.js router parameters within a Storybook story. It sets the pathname, asPath, and query parameters to simulate a specific route for the RouterBasedComponent. This allows testing of the component's behavior under a defined routing scenario.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-router-override-in-story.md#_snippet_0

LANGUAGE: js
CODE:
```
import RouterBasedComponent from './RouterBasedComponent';

export default {
  component: RouterBasedComponent,
};

// If you have the actions addon,
// you can interact with the links and see the route change events there
export const Example = {
  parameters: {
    nextjs: {
      router: {
        pathname: '/profile/[id]',
        asPath: '/profile/1',
        query: {
          id: '1',
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Extending Storybook Preview Annotations in JavaScript
DESCRIPTION: Exports a function that takes an optional entry array and options parameters, then returns a new array containing the original entries plus the resolved path to the preview distribution file. This is used to configure and extend Storybook's preview functionality.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-root-preset-preview-annotations.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export const previewAnnotations = (entry = [], options) => {
  return [...entry, require.resolve('./dist/preview')];
};
```

----------------------------------------

TITLE: Initializing Button Story - Web Components (JS)
DESCRIPTION: This code initializes a Storybook story for a Web Components button. It exports a default object that specifies the component as 'demo-button'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_13

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
};
```

----------------------------------------

TITLE: Configuring argTypes for Button Component (TS)
DESCRIPTION: This code configures the argTypes for a Button component in Storybook using TypeScript. It defines the 'arrow' property with options, mapping, and labels for a select control, allowing users to select arrow directions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';

const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };

const meta = {
  component: Button,
  argTypes: {
    arrow: {
      options: Object.keys(arrows), // An array of serializable values
      mapping: arrows, // Maps serializable option values to complex arg values
      control: {
        type: 'select', // Type 'select' is automatically inferred when 'options' is defined
        labels: {
          // 'labels' maps option values to string labels
          ArrowUp: 'Up',
          ArrowDown: 'Down',
          ArrowLeft: 'Left',
          ArrowRight: 'Right',
        },
      },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Configuring TypeScript Options for Non-React Renderers in Storybook
DESCRIPTION: TypeScript configuration options for non-React renderers in Storybook, including type checking and compiler settings.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
{
  check?: boolean;
  checkOptions?: CheckOptions;
  skipCompiler?: boolean;
}
```

----------------------------------------

TITLE: Initializing Storybook Preview with Svelte Decorator (JS)
DESCRIPTION: This snippet configures a Storybook preview for Svelte using JavaScript, adding a decorator that uses a Svelte component named MarginDecorator. It imports the MarginDecorator from a local file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#_snippet_5

LANGUAGE: js
CODE:
```
import MarginDecorator from './MarginDecorator.svelte';

export default { decorators: [() => MarginDecorator] };
```

----------------------------------------

TITLE: Configuring Vitest for Svelte Storybook Testing
DESCRIPTION: Defines Vitest configuration for Svelte Storybook components testing with Playwright integration. Sets up browser testing environment and Storybook test configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-workspace.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { defineConfig, mergeConfig } from 'vitest/config';
import { storybookTest } from '@storybook/addon-vitest/vitest-plugin';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

import viteConfig from './vite.config';

const dirname =
  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));

export default defineWorkspace([
  './vitest.config.ts',
  {
    extends: './vite.config.ts',
    plugins: [
      storybookTest({
        configDir: path.join(dirname, '.storybook'),
        storybookScript: 'yarn storybook --ci',
      }),
    ],
    test: {
      name: 'storybook',
      browser: {
        enabled: true,
        provider: 'playwright',
        headless: true,
        instances: [{ browser: 'chromium' }],
      },
      setupFiles: ['./.storybook/vitest.setup.ts'],
    },
  },
]);
```

----------------------------------------

TITLE: Initializing Button Story with Backgrounds in Svelte (CSF) - Typescript
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF), setting a global background color and overriding it for a specific story. It imports necessary modules from '@storybook/addon-svelte-csf' and defines the component and its metadata.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#_snippet_3

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    globals: {
      // 👇 Set background value for all component stories
      backgrounds: { value: 'gray', grid: false },
    },
  });
</script>

<!-- 👇 Override background value for this story-->
<Story
  name="OnDark"
  globals={{
    backgrounds: { value: "dark" },
  }}
/>

```

----------------------------------------

TITLE: Configuring Storybook Preview (JavaScript)
DESCRIPTION: This JavaScript snippet configures the Storybook preview by setting parameters for story sorting. It defines the sorting method, order, and locales within the `options` parameter.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-empty-sort-object.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    options: {
      storySort: {
        method: '',
        order: [],
        locales: '',
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Inline Radio Control in ArgTypes
DESCRIPTION: This snippet shows how to configure an inline radio control using the 'control' annotation in the argTypes field. It provides a set of inlined radio buttons based on the available options for the 'contact' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_20

LANGUAGE: javascript
CODE:
```
argTypes: { contact: { control: 'inline-radio', options: ['email', 'phone', 'mail'] } }
```

----------------------------------------

TITLE: Mocking Module Return Value in Storybook
DESCRIPTION: This code snippet demonstrates how to mock a module's return value within a Storybook story using Vitest's `mockReturnValue`. It defines a `beforeEach` function on the story to set a mocked return value for the `getUserFromSession` function, which is used by the Page component. This allows for isolated testing of the component's behavior with a controlled return value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { Page } from './Page';
import * as HeaderStories from './Header.stories';

import * as Module from './module';
import { fn } from '@storybook/test';

const mockedModule = fn(Module);

const meta: Meta<typeof Page> = {
  title: 'Example/Page',
  component: Page,
  parameters: {
    // More on how to position stories at:
    // https://storybook.js.org/docs/react/configure/story-layout
    layout: 'fullscreen',
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const LoggedIn: Story = {
  parameters: {
    msw: {
      handlers: [],
    },
  },
  decorators: [
    (story) => {
      mockedModule.getUserFromSession.mockReturnValue({
        name: 'Jane Doe',
      });
      return story();
    },
  ],
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};

export const LoggedOut: Story = {
  args: {
    ...HeaderStories.LoggedOut.args,
  },
};

```

----------------------------------------

TITLE: Configure Next.js App Directory in Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet configures a Storybook story for a `NavigationBasedComponent` to enable support for Next.js's app directory. It imports the component and sets the `appDirectory` parameter to `true` within the `nextjs` configuration in the story's parameters. The `Meta` type from `@storybook/your-framework` is used to provide type safety for the story configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-app-directory-in-meta.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Meta, StoryObj } from '@storybook/your-framework';

import NavigationBasedComponent from './NavigationBasedComponent';

const meta = {
  component: NavigationBasedComponent,
  parameters: {
    nextjs: {
      appDirectory: true, // 👈 Set this
    },
  },
} satisfies Meta<typeof NavigationBasedComponent>;
export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Preview (TypeScript)
DESCRIPTION: This TypeScript snippet configures the Storybook preview, including story sorting options. It imports the `Preview` type from `@storybook/your-framework` and defines the sorting method, order, and locales.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-empty-sort-object.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    options: {
      storySort: {
        method: '',
        order: [],
        locales: '',
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Button Component Stories with CSF in TypeScript
DESCRIPTION: This TypeScript code configures Storybook stories for a Button component using Component Story Format (CSF). It defines the component and three stories: Primary, Secondary, and Tertiary, each with different labels and background colors, utilizing render functions to pass props to the Button component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_10

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/svelte/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: () => ({
    Component: Button,
    props: {
      backgroundColor: '#ff0',
      label: 'Button',
    },
  }),
};

export const Secondary: Story = {
  render: () => ({
    Component: Button,
    props: {
      backgroundColor: '#ff0',
      label: '😄👍😍💯',
    },
  }),
};

export const Tertiary: Story = {
  render: () => ({
    Component: Button,
    props: {
      backgroundColor: '#ff0',
      label: '📚📕📈🤓',
    },
  }),
};
```

----------------------------------------

TITLE: Configuring Button Metadata with ArgTypes in JavaScript for Web Components
DESCRIPTION: This code configures the metadata for a Button component (specifically a web component) in Storybook using JavaScript. It defines argTypes to categorize and control the component's properties such as backgroundColor, primary, label, onClick, and size within the Storybook UI. The properties are organized into categories like Colors, Text, Events, and Sizes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-subcategories.md#_snippet_3

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  argTypes: {
    // Assigns the argTypes to the Colors category
    backgroundColor: {
      control: 'color',
      table: {
        category: 'Colors',
        // Assigns the argTypes to a specific subcategory
        subcategory: 'Button colors',
      },
    },
    primary: {
      table: {
        category: 'Colors',
        subcategory: 'Button style',
      },
    },
    label: {
      table: {
        category: 'Text',
        subcategory: 'Button contents',
      },
    },
    // Assigns the argType to the Events category
    onClick: {
      table: {
        category: 'Events',
        subcategory: 'Button Events',
      },
    },
    // Assigns the argType to the Sizes category
    size: {
      table: {
        category: 'Sizes',
      },
    },
  },
};
```

----------------------------------------

TITLE: Typical Storybook Main Configuration File Structure
DESCRIPTION: A basic example of a Storybook main.js configuration file showing the standard structure with essential properties like framework, stories, and addons.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
<CodeSnippets path="main-config-typical.md" />
```

----------------------------------------

TITLE: Register Vite Builder in Storybook Configuration
DESCRIPTION: Demonstrates how to register the Vite builder in the Storybook configuration file (main.js). This step is essential for Storybook to utilize Vite for building and serving stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  stories: ['../src/**/*.stories.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: [
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/addon-interactions',
  ],
  framework: '@storybook/react',
  core: {
    builder: '@storybook/builder-vite',
  },
  features: {
    storyStoreV7: true,
  },
};

```

----------------------------------------

TITLE: Configuring color control for string ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'color' control, providing a color picker to choose color values. It can be additionally configured to include a set of color presets within Storybook's controls panel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_14

LANGUAGE: JavaScript
CODE:
```
{ control: { type: 'color', presetColors: ['red', 'green']} }
```

----------------------------------------

TITLE: Conditional ArgType Rendering
DESCRIPTION: This code snippet demonstrates how to conditionally render an argType based on the value of another arg or global using the `if` property. The `if` property allows specifying a predicate type ('arg' or 'global'), a key (the name of the arg or global), and conditions such as `eq`, `exists`, `neq`, or `truthy` to determine when the argType should be rendered.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_17

LANGUAGE: typescript
CODE:
```
{
  [predicateType: 'arg' | 'global']: string;
  eq?: any;
  exists?: boolean;
  neq?: any;
  truthy?: boolean;
}
```

----------------------------------------

TITLE: Play Function with Select Event
DESCRIPTION: This snippet shows how to script a select event in a Storybook story using the `play` function. It simulates a user selecting an option from a select element and then asserts that the expected change occurs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

export const SelectComponent = () => /* component implementation */;

SelectComponent.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  await userEvent.selectOptions(canvas.getByRole('combobox'), ['Option 2']);
  await expect(canvas.getByText('Option 2 selected')).toBeInTheDocument();
};
```

----------------------------------------

TITLE: Testing Form Validation in Preact with Storybook Stories
DESCRIPTION: Implements form validation testing using @testing-library/preact and imported Storybook stories. Tests an invalid form submission using the InvalidForm story and verifies the presence of an invalid form indicator.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import '@testing-library/jest-dom/extend-expect';

import { h } from 'preact';

import { render, fireEvent } from '@testing-library/preact';

import { InvalidForm } from './LoginForm.stories'; //👈 Our stories imported here.

it('Checks if the form is valid', async () => {
  const { getByTestId, getByText } = render(<InvalidForm {...InvalidForm.args} />);

  fireEvent.click(getByText('Submit'));

  const isFormValid = getByTestId('invalid-form');
  expect(isFormValid).toBeInTheDocument();
});
```

----------------------------------------

TITLE: Installing MSW and MSW Addon
DESCRIPTION: This command installs Mock Service Worker (MSW) and the MSW addon for Storybook, enabling the mocking of API requests within stories. It is a necessary first step to use MSW in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install msw msw-storybook-addon --save-dev
```

----------------------------------------

TITLE: Customizing Webpack in Storybook
DESCRIPTION: This snippet shows how to customize the Webpack setup in Storybook. It provides an asynchronous function that receives the Webpack configuration and returns the modified configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
webpackFinal: async (config:any) => { return config; }
```

----------------------------------------

TITLE: Configuring Storybook Main File in JavaScript
DESCRIPTION: This snippet shows how to configure Storybook's main file using JavaScript. It sets the framework, specifies story locations, and enables crash reports for telemetry events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-enable-crash-reports.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    enableCrashReports: true, // 👈 Appends the crash reports to the telemetry events
  },
};
```

----------------------------------------

TITLE: Registering Svelte CSF Addon in Main Config
DESCRIPTION: This code snippet shows how to register the `@storybook/addon-svelte-csf` addon in the Storybook configuration file (`.storybook/main.js|ts`). This step is necessary to enable support for the Svelte CSF format in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
addons: ['@storybook/addon-svelte-csf']
```

LANGUAGE: TypeScript
CODE:
```
addons: ['@storybook/addon-svelte-csf']
```

----------------------------------------

TITLE: Configuring inline-radio control for enum ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'inline-radio' control for an enum, providing a set of inlined radio buttons based on the available options within Storybook's controls panel. The `options` array specifies the available choices.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
{ control: 'inline-radio', options: ['email', 'phone', 'mail'] }
```

----------------------------------------

TITLE: Configuring Vite for Svelte in Storybook
DESCRIPTION: This code snippet demonstrates how to configure Vite for a Svelte project within Storybook (without SvelteKit). It imports the defineConfig function from vite and the svelte plugin from @sveltejs/vite-plugin-svelte. The defineConfig function is then used to configure Vite with the svelte plugin.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_51

LANGUAGE: typescript
CODE:
```
import { defineConfig } from "vite";
import { svelte } from "@sveltejs/vite-plugin-svelte";

export default defineConfig({
  plugins: [svelte()],
});
```

----------------------------------------

TITLE: Rendering Button Story for HTML (TypeScript)
DESCRIPTION: This code defines a Storybook story for an HTML Button component using TypeScript and a render function. The render function dynamically creates a button element, sets its text content based on the 'label' argument, and applies CSS classes based on the 'primary' argument. It also defines the types for the arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/html';

type ButtonArgs = {
  primary: boolean;
  label: string;
};

const meta: Meta<ButtonArgs> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
};

export default meta;
type Story = StoryObj<ButtonArgs>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: (args) => {
    const btn = document.createElement('button');
    btn.innerText = args.label;

    const mode = args.primary ? 'storybook-button--primary' : 'storybook-button--secondary';
    btn.className = ['storybook-button', 'storybook-button--medium', mode].join(' ');

    return btn;
  },
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Defining Button Stories in React with TypeScript (CSF 2)
DESCRIPTION: Creates a default button story for React components using TypeScript and CSF 2 format. Uses ComponentStory type to provide proper typing for the Button component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// Other imports and story implementation
export const Default: ComponentStory<typeof Button> = (args) => <Button {...args} />;
```

----------------------------------------

TITLE: Configuring Global Loaders in Storybook Preview
DESCRIPTION: Demonstrates how to set up global loaders in .storybook/preview.js that will run for all stories, providing shared data like current user information.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/loaders.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export const loaders = [
  async () => ({
    currentUser: await fetch('/api/user').then((r) => r.json()),
  }),
];
```

----------------------------------------

TITLE: Initializing Storybook Preview with React ThemeProvider
DESCRIPTION: This snippet initializes the Storybook preview with a React ThemeProvider. It retrieves the theme from global parameters and wraps the story with the ThemeProvider component from styled-components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#_snippet_3

LANGUAGE: js
CODE:
```
import { ThemeProvider } from 'styled-components';

import { MyThemes } from '../my-theme-folder/my-theme-file';

const preview = {
  decorators: [
    (Story, context) => {
      const theme = MyThemes[context.globals.theme];
      return (
        <ThemeProvider theme={theme}>
          <Story />
        </ThemeProvider>
      );
    },
  ],
};

export default preview;
```

----------------------------------------

TITLE: Setting Storybook Parameters in TypeScript
DESCRIPTION: This TypeScript snippet configures Storybook's preview settings, specifically enabling expanded controls for all stories. It imports the Preview type from the Storybook framework and defines a preview configuration object with the desired parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-expanded-controls.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    controls: { expanded: true },
  },
};

export default preview;
```

----------------------------------------

TITLE: Resetting state with beforeEach in preview.js
DESCRIPTION: The `beforeEach` function in `.storybook/preview.js|ts` runs before each story, resetting state or modules. A cleanup function can be returned to run after each story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import type { Preview } from '@storybook/react';

const preview: Preview = {
  decorators: [
    (Story) => {
      // Reset the mocked date before each story
      const realDate = Date;

      beforeEach(() => {
        // @ts-expect-error
        global.Date = jest.fn(() => new Date('2023-04-03T10:00:00.000Z'));
      });

      afterEach(() => {
        global.Date = realDate;
      });

      return <Story />;
    },
  ],
};

export default preview;
```

----------------------------------------

TITLE: Configure Storybook with Next.js Vite (TypeScript)
DESCRIPTION: Configures Storybook to use the Next.js Vite framework in a TypeScript file. This involves importing the StorybookConfig type, defining a configuration object, setting the 'framework' property to '@storybook/nextjs-vite', and exporting the configuration. The previous Webpack 5 configuration should be commented out or removed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-add-framework.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/nextjs-vite';

const config: StorybookConfig = {
  // ...
  // framework: '@storybook/react-webpack5', 👈 Remove this
  framework: '@storybook/nextjs-vite', // 👈 Add this
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook Preview Parameters (JavaScript)
DESCRIPTION: This JavaScript snippet configures the default parameters for Storybook previews. It sets up action event handling by defining an `argTypesRegex` that matches argument names starting with 'on', enabling the capture of events triggered by user interactions within stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-matching-argtypes.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    actions: { argTypesRegex: '^on.*' },
  },
};
```

----------------------------------------

TITLE: Upgrading Storybook using pnpm
DESCRIPTION: This command upgrades Storybook to the latest version using pnpm. It uses pnpm dlx to execute the Storybook upgrade command without installing it globally.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade-prerelease.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@next upgrade
```

----------------------------------------

TITLE: Accessing and Updating Globals with useGlobals
DESCRIPTION: The `useGlobals` hook allows addons to access and update Storybook global values. It's recommended to optimize addons using `React.memo`, `useMemo`, or `useCallback` to prevent excessive re-renders.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_17

LANGUAGE: javascript
CODE:
```
import { useGlobals } from '@storybook/api';

export const MyAddon = () => {
  const [{ myGlobal }, updateGlobals] = useGlobals();

  return (
    <div>
      <p>My Global: {myGlobal}</p>
      <button onClick={() => updateGlobals({ myGlobal: 'new value' })}>Update Global</button>
    </div>
  );
};

```

----------------------------------------

TITLE: Configuring Storybook Main File in JavaScript
DESCRIPTION: This snippet shows how to configure the main Storybook file using JavaScript. It exports an object that specifies the framework and the glob pattern for story files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
};
```

----------------------------------------

TITLE: Configuring Button Story with argTypes in Typescript for Web Components
DESCRIPTION: This code configures a Storybook story for a web components Button component using Typescript. It defines the component and its argTypes, which allow users to control the component's properties like label, advanced settings, margin, padding, and cornerRadius through the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  argTypes: {
```

----------------------------------------

TITLE: Adding a11y Addon with Yarn using dlx
DESCRIPTION: This shell command uses `yarn dlx` (Yarn's equivalent to npx) to execute the Storybook CLI `add` command. It installs and configures the `@storybook/addon-a11y` addon for a Storybook project managed with Yarn.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-add-command.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@latest add @storybook/addon-a11y
```

----------------------------------------

TITLE: Configuring Addons in Storybook
DESCRIPTION: This snippet shows how to configure addons in Storybook. It defines a list of addons that Storybook will load.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
addons: ['@storybook/addon-docs']
```

----------------------------------------

TITLE: Configuring Story Sorting in Storybook Preview (TypeScript)
DESCRIPTION: This TypeScript snippet configures the Storybook preview to sort stories based on their ID. It uses the localeCompare function with the numeric option to ensure proper sorting of IDs that contain numbers. It also imports the Preview type from '@storybook/your-framework'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-sort-function.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    options: {
      // The `a` and `b` arguments in this function have a type of `import('storybook/internal/types').IndexEntry`. Remember that the function is executed in a JavaScript environment, so use JSDoc for IntelliSense to introspect it.
      storySort: (a, b) =>
        a.id === b.id ? 0 : a.id.localeCompare(b.id, undefined, { numeric: true }),
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet exports the default configuration for Storybook using JavaScript. It specifies the framework, story file patterns, and enables the 'argTypeTargetsV7' feature.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-features-arg-type-targets-v7.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  features: {
    argTypeTargetsV7: true,
  },
};
```

----------------------------------------

TITLE: Testing Form Validation in React with Storybook Stories (JavaScript)
DESCRIPTION: Implements form validation testing using @testing-library/react and @storybook/react's composeStories. Tests form validation by running the InvalidForm story and checking for invalid form state after submission.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { fireEvent, render, screen } from '@testing-library/react';

import { composeStories } from '@storybook/react';

import * as stories from './LoginForm.stories'; // 👈 Our stories imported here.

const { InvalidForm } = composeStories(stories);

test('Checks if the form is valid', async () => {
  // Renders the composed story
  await InvalidForm.run();

  const buttonElement = screen.getByRole('button', {
    name: 'Submit',
  });

  fireEvent.click(buttonElement);

  const isFormValid = screen.getByLabelText('invalid-form');
  expect(isFormValid).toBeInTheDocument();
});
```

----------------------------------------

TITLE: Configuring Component Meta with ArgTypes in JavaScript
DESCRIPTION: This code configures the metadata for a Storybook story in JavaScript. It imports the component and sets up the story, disabling the 'foo' property from appearing in the UI by setting 'disable: true' within the 'table' property of the 'argTypes' configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#_snippet_3

LANGUAGE: js
CODE:
```
import { YourComponent } from './YourComponent';

export default {
  component: YourComponent,
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      table: {
        disable: true,
      },
    },
  },
};
```

----------------------------------------

TITLE: Installing Chromatic with pnpm
DESCRIPTION: This command installs Chromatic as a development dependency using pnpm. It adds Chromatic to the project's devDependencies in package.json.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev chromatic
```

----------------------------------------

TITLE: Specifying File Glob for Storybook Migrate
DESCRIPTION: Sets a glob pattern to specify the files on which the codemods should be applied. This allows targeting specific files or directories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_86

LANGUAGE: Shell
CODE:
```
storybook migrate --glob src/**/*.stories.tsx
```

----------------------------------------

TITLE: Configuring Story for Example Component (JavaScript)
DESCRIPTION: This snippet configures a Storybook story for an 'Example' component using JavaScript. It defines the component and its argument types, specifically a 'number' type for the 'value' argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Example } from './Example';

export default {
  component: Example,
  argTypes: {
    value: { type: 'number' },
  },
};
```

----------------------------------------

TITLE: Fetching Data from REST API
DESCRIPTION: This component fetches data from a REST API using the `fetch` API. It demonstrates a basic data fetching operation that can be mocked using MSW.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
import React, { useState, useEffect } from 'react';

export const DocumentScreen = () => {
  const [document, setDocument] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      const response = await fetch('/document');
      const data = await response.json();
      setDocument(data);
    };

    fetchData();
  }, []);

  if (!document) {
    return <p>Loading...</p>;
  }

  return (
    <div>
      <h1>{document.title}</h1>
      <p>{document.content}</p>
    </div>
  );
};

```

----------------------------------------

TITLE: Configuring Storybook Addon Preview in JavaScript
DESCRIPTION: This JavaScript code configures a Storybook addon's preview module with a custom decorator and global parameters. It imports the PARAM_KEY constant and CustomDecorator, then exports a preview configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-preview.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import { PARAM_KEY } from './constants';

import { CustomDecorator } from './decorators';

const preview = {
  decorators: [CustomDecorator],
  globals: {
    [PARAM_KEY]: false,
  },
};

export default preview;
```

----------------------------------------

TITLE: Nx Library Storybook Configuration (Post-14.1.8)
DESCRIPTION: Configuration example for Nx library projects using Storybook after version 14.1.8, demonstrating the direct builder configuration with style preprocessing options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/styling-and-css.mdx#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{
  "storybook": {
    "executor": "@storybook/angular:start-storybook",
    "options": {
      "configDir": "apps/example-lib/.storybook",
      "browserTarget": "example-lib:build-storybook"
    }
  },
  "build-storybook": {
    "executor": "@storybook/angular:build-storybook",
    "outputs": ["{options.outputPath}"],
    "options": {
      "outputDir": "dist/storybook/example-lib",
      "configDir": "apps/example-lib/.storybook",
      "browserTarget": "example-lib:build-storybook",
      "styles": [".storybook/custom-styles.scss"],
      "stylePreprocessorOptions": {
        "includePaths": [
          "libs/design-system/src/lib"
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Svelte Story with Play Function (Svelte CSF, TS)
DESCRIPTION: This code defines a Svelte Storybook story using the Component Story Format (CSF) with Typescript. It imports necessary modules, defines the component, and uses a play function to simulate user interactions with a select element, including pauses between selections.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#_snippet_5

LANGUAGE: typescript
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, within } from 'storybook/test';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });

  function sleep(ms: number) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
</script>

<!--
  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
  to learn more about using the canvasElement to query the DOM
-->
<Story
  name="ExampleChangeEvent"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const select = canvas.getByRole('listbox');

    await userEvent.selectOptions(select, ['One Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Another Item']);
    await sleep(2000);
```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It exports a default configuration object that specifies the framework, story file locations, and build options. The framework should be replaced with the actual framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-docgen.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  build: {
    test: {
      disableDocgen: false,
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It specifies the framework, story file locations, and enables automatic documentation generation for tagged stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-docs-autodocs.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  docs: {
    autodocs: 'tag',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Manager for Custom Sidebar Labels
DESCRIPTION: Storybook manager configuration to customize sidebar rendering for URL links. This setup integrates with the custom indexer to display links properly in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
import { addons } from 'storybook/manager-api';

import SidebarLabelWrapper from './components/SidebarLabelWrapper.tsx';

addons.setConfig({
    sidebar: {
      renderLabel: (item) => SidebarLabelWrapper({ item }),
    },
});
```

----------------------------------------

TITLE: Simulating User Input and Interactions in Storybook (Common)
DESCRIPTION: This snippet demonstrates how to simulate user input and interactions within a Storybook story using common frameworks. It uses `userEvent` to type into an input field and click a submit button, and `waitFor` to ensure the component updates as expected.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, waitFor, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleAsyncStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const Input = canvas.getByLabelText('Username', {
      selector: 'input',
    });

    await userEvent.type(Input, 'WrongInput', {
      delay: 100,
    });

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const Submit = canvas.getByRole('button');
    await userEvent.click(Submit);

    await waitFor(async () => {
      await userEvent.hover(canvas.getByTestId('error'));
    });
  },
};
```

----------------------------------------

TITLE: Configuring TypeScript Module Resolution in Storybook
DESCRIPTION: Configuration to properly resolve TypeScript module aliases defined in tsconfig by adding tsconfig-paths-webpack-plugin to Storybook's webpack configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const path = require('path');
const TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');

module.exports = {
  webpackFinal: async (config) => {
    config.resolve.plugins = [
      ...(config.resolve.plugins || []),
      new TsconfigPathsPlugin({
        extensions: config.resolve.extensions,
      }),
    ];
    return config;
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Manager with Sidebar Customization (TS)
DESCRIPTION: This TypeScript snippet configures the Storybook manager to customize the sidebar's visibility. It uses the `addons.setConfig` method to set the `layoutCustomisations`, specifically the `showSidebar` function. This function checks if the current story is 'landing' and the view mode is 'docs', and if so, it hides the sidebar. It also uses TypeScript type annotations for the `state` and `defaultValue` parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-manager-sidebar-hide-on-landing.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { addons, type State } from 'storybook/manager-api';

addons.setConfig({
  layoutCustomisations: {
    // Hide the sidebar on the landing page, which has its own nav links to other pages.
    showSidebar(state: State, defaultValue: boolean) {
      if (state.storyId === 'landing' && state.viewMode === 'docs') {
        return false;
      }

      return defaultValue;
    },
  },
});
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the necessary modules from '@storybook/addon-svelte-csf' and defines a basic story with autoplay enabled in the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const meta = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Basic"
  parameters={{
    docs: {
      story: { autoplay: true },
    },
  }} />
```

----------------------------------------

TITLE: Defining Storybook Meta and Stories with Include/Exclude - Svelte (TS)
DESCRIPTION: This code defines Storybook stories for a Svelte component using TypeScript, demonstrating how to include and exclude controls using array and regular expression patterns. It imports the necessary modules from '@storybook/your-framework' and defines the component's metadata and stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import YourComponent from './YourComponent.svelte';

const meta = {
  component: YourComponent,
} satisfies Meta<typeof YourComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ArrayInclude: Story = {
  parameters: {
    controls: { include: ['foo', 'bar'] },
  },
};

export const RegexInclude: Story = {
  parameters: {
    controls: { include: /^hello*/ },
  },
};

export const ArrayExclude: Story = {
  parameters: {
    controls: { exclude: ['foo', 'bar'] },
  },
};

export const RegexExclude: Story = {
  parameters: {
    controls: { exclude: /^hello*/ },
  },
};
```

----------------------------------------

TITLE: Setting up Playwright Component Tests with Vue Storybook
DESCRIPTION: This code demonstrates how to use Playwright for component testing with Vue Storybook. It imports stories from a portable stories file, creates a test instance, and shows how to mount components with default and custom props while making assertions on the rendered output. Note that due to current limitations, stories must be referenced as JSX elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import { createTest } from '@storybook/vue3/experimental-playwright';
import { test as base } from '@playwright/experimental-ct-vue';

// See explanation below for `.portable` stories file
import stories from './Button.stories.portable';

const test = createTest(base);

// 👉 Important: Due to current limitations, you can only reference your stories as JSX elements.

test('renders primary button', async ({ mount }) => {
  // The mount function will execute all the necessary steps in the story,
  // such as loaders, render, and play function
  await mount(<stories.Primary />);
});

test('renders primary button with overridden props', async ({ mount }) => {
  // You can pass custom props to your component via JSX
  const component = await mount(<stories.Primary label="label from test" />);
  await expect(component).toContainText('label from test');
  await expect(component.getByRole('button')).toHaveClass(/storybook-button--primary/);
});
```

----------------------------------------

TITLE: Configuring Storybook Test Runner with Axe (JavaScript)
DESCRIPTION: JavaScript implementation of Storybook test runner configuration that integrates axe-playwright for accessibility testing. Includes preVisit hook for injecting axe and postVisit hook for running accessibility checks on stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-disable.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { getStoryContext } = require('@storybook/test-runner');

const { injectAxe, checkA11y } = require('axe-playwright');
/*
 * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api
 * to learn more about the test-runner hooks API.
 */
module.exports = {
  async preVisit(page) {
    await injectAxe(page);
  },
  async postVisit(page, context) {
    // Get the entire context of a story, including parameters, args, argTypes, etc.
    const storyContext = await getStoryContext(page, context);

    // Do not run a11y tests on disabled stories.
    if (storyContext.parameters?.a11y?.disable) {
      return;
    }
    await checkA11y(page, 'body', {
      detailedReport: true,
      detailedReportOptions: {
        html: true,
      },
    });
  },
};
```

----------------------------------------

TITLE: Configuring Svelte Story for Example Component (JavaScript)
DESCRIPTION: This snippet configures a Storybook story for a Svelte component named 'Example'. It defines the component and sets up an argument type for a 'value' property, allowing users to control it with a number input in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#_snippet_2

LANGUAGE: js
CODE:
```
import Example from './Example.svelte';

export default {
  component: Example,
  argTypes: {
    value: {
      control: {
        type: 'number',
        min: 0,
        max: 100,
        step: 10,
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring React Component Parsing in Storybook
DESCRIPTION: Sets the library used for parsing React components in Storybook, choosing between react-docgen and react-docgen-typescript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
export default {
  typescript: {
    reactDocgen: 'react-docgen-typescript'
  }
};
```

----------------------------------------

TITLE: Initializing Storybook Configuration for React in TypeScript
DESCRIPTION: This TypeScript snippet establishes a configuration object for Storybook in a React project, including paths for story files and customizing TypeScript's react-docgen behavior. It requires @storybook/your-framework and uses custom propFilter logic to omit props from dependencies in node_modules. Inputs include the project directory structure and framework presets, and the output is a config object exported for Storybook's use. The setup is extendable and expects the user to replace the framework placeholder with their specific renderer (e.g., react-webpack5).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typescript-react-docgen-typescript-options.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, react-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  typescript: {
    reactDocgen: 'react-docgen-typescript',
    reactDocgenTypescriptOptions: {
      shouldExtractLiteralValuesFromEnum: true,
      // 👇 Default prop filter, which excludes props from node_modules
      propFilter: (prop) => (prop.parent ? !/node_modules/.test(prop.parent.fileName) : true),
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Custom Documentation with UI Components
DESCRIPTION: Demonstrates using Storybook's UI components (Doc Blocks) to create custom documentation. These components help cover advanced cases and simplify the documentation process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_8

LANGUAGE: MDX
CODE:
```
import { Meta, Story, Canvas } from '@storybook/addon-docs';

<Meta title="Docs/MDX/Starter Example" />

# Starter Example

This is a starter example.

<Canvas>
  <Story name="Basic">
    {/* Add a story here if needed */}
  </Story>
</Canvas>
```

----------------------------------------

TITLE: Resulting Parameters for Basic Story
DESCRIPTION: This code shows the resulting parameters applied to the 'Basic' story after merging project and meta-level parameters. Note how meta-level parameters override project-level parameters where there are conflicts, and new properties are added.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
// Applied story parameters

// For the Basic story:
{
  layout: 'fullscreen',
  demo: {
    demoProperty: 'b',
    anotherDemoProperty: 'b',
    demoArray: [1, 2],
  },
}
```

----------------------------------------

TITLE: Initializing Button Stories with Framework (TS)
DESCRIPTION: This code initializes Storybook stories for a Button component using a generic framework with TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines the component's metadata, including global viewport settings. It also creates a story named 'OnPhone' that overrides the global viewport to simulate a mobile device.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  globals: {
    // 👇 Set viewport for all component stories
    viewport: { value: 'tablet', isRotated: false },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const OnPhone: Story = {
  globals: {
    // 👇 Override viewport for this story
    viewport: { value: 'mobile1', isRotated: false },
  },
};
```

----------------------------------------

TITLE: Configuring Button Story in Vue (TypeScript)
DESCRIPTION: This code configures a Storybook story for a Vue Button component using TypeScript. It imports the Button component and defines its metadata, including argument types for background color and default arguments to set the primary property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = {
  component: Button,
  //👇 Creates specific argTypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    //👇 Now all Button stories will be primary.
    primary: true,
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Configuring range control for number ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'range' control, providing a range slider with specified minimum, maximum, and step values within Storybook's controls panel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_11

LANGUAGE: JavaScript
CODE:
```
{ control: { type: 'range', min: 1, max: 30, step: 3 } }
```

----------------------------------------

TITLE: Defining Storybook Meta with Decorator
DESCRIPTION: This code defines the Storybook meta object for a component, including a decorator that wraps the component with the `MockApolloWrapperClient`. This provides the Apollo Client context to the component during Storybook rendering.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_15

LANGUAGE: typescript
CODE:
```
const meta = {
  component: DocumentScreen,
  decorators: [() => MockApolloWrapperClient],
} satisfies Meta<typeof DocumentScreen>;

export default meta;
type Story = StoryObj<typeof meta>;
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet exports a default configuration object for Storybook in TypeScript. It imports the StorybookConfig type, specifies the framework, story file locations, and TypeScript settings to allow multi-package component documentation via Autodocs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-fix-imports-autodocs-monorepo.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  typescript: {
    // Overrides the default Typescript configuration to allow multi-package components to be documented via Autodocs.
    reactDocgen: 'react-docgen',
    check: false,
  },
};

export default config;
```

----------------------------------------

TITLE: Installing Storybook with Custom Package Manager
DESCRIPTION: Command to install Storybook using a specific package manager, using the --package-manager flag to override automatic detection.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
<CodeSnippets path="create-command-custom-package-manager.md" />
```

----------------------------------------

TITLE: Configuring Array Control in ArgTypes
DESCRIPTION: This snippet demonstrates how to configure an array control using the 'control' annotation in the argTypes field. It provides a JSON-based editor component for handling the array's values for the 'odd' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_17

LANGUAGE: javascript
CODE:
```
argTypes: { odd: { control: 'object' } }
```

----------------------------------------

TITLE: Configuring ESLint for Storybook in Traditional Format (JavaScript)
DESCRIPTION: Extends the ESLint configuration to include the Storybook plugin recommendations. This setup applies the Storybook-specific rules to all relevant story files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
{
  // extend plugin:storybook/<configuration>, such as:
  "extends": ["plugin:storybook/recommended"]
}
```

----------------------------------------

TITLE: Initializing Storybook Preview with React Decorator (TS)
DESCRIPTION: This snippet configures a Storybook preview for React using TypeScript, adding a decorator that wraps each story with a div element, applying a 3em margin. It uses a functional component as a decorator and imports the Preview type from '@storybook/react-vite'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#_snippet_2

LANGUAGE: ts
CODE:
```
import React from 'react';

import type { Preview } from '@storybook/react-vite';

const preview: Preview = {
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </div>
    ),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook Main File using JavaScript
DESCRIPTION: This snippet demonstrates how to configure Storybook using a JavaScript main.js file. It sets the framework (which must be replaced with the actual framework, e.g., react-webpack5), specifies the patterns for locating story files, and defines a function to inject a custom font preload link into the Storybook Manager's HTML head. No special dependencies are required beyond a standard Storybook setup. The 'managerHead' property is a function that takes the existing head output as input and returns the modified string.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-manager-head.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  managerHead: (head) => `
    ${head}
    <link rel="preload" href="/fonts/my-custom-manager-font.woff2" />
  `,
};
```

----------------------------------------

TITLE: Configuring Button Metadata with ArgTypes in TypeScript
DESCRIPTION: This code configures the metadata for a Button component in Storybook using TypeScript. It defines argTypes to categorize and control the component's properties such as backgroundColor, primary, label, onClick, and size within the Storybook UI. The properties are organized into categories like Colors, Text, Events, and Sizes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-subcategories.md#_snippet_2

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  argTypes: {
    // Assigns the argTypes to the Colors category
    backgroundColor: {
      control: 'color',
      table: {
        category: 'Colors',
        // Assigns the argTypes to a specific subcategory
        subcategory: 'Button colors',
      },
    },
    primary: {
      table: {
        category: 'Colors',
        subcategory: 'Button style',
      },
    },
    label: {
      table: {
        category: 'Text',
        subcategory: 'Button contents',
      },
    },
    // Assigns the argType to the Events category
    onClick: {
      table: {
        category: 'Events',
        subcategory: 'Button Events',
      },
    },
    // Assigns the argType to the Sizes category
    size: {
      table: {
        category: 'Sizes',
      },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Simulating Form Submission with Play Function in Web Components (JS)
DESCRIPTION: This story simulates a user submitting a form by entering credentials and clicking the submit button. It uses the `play` function to interact with the component and `userEvent` to simulate user input. It then asserts that the `onSubmit` argument was called using `waitFor` and `expect`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-play-function.md#_snippet_6

LANGUAGE: js
CODE:
```
import { userEvent, waitFor, within, expect, fn } from 'storybook/test';

export default {
  component: 'my-form-element',
  args: {
    // 👇 Use `fn` to spy on the onSubmit arg
    onSubmit: fn(),
  },
};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted = {
  play: async ({ args, canvasElement, step }) => {
    const canvas = within(canvasElement);

    await step('Enter credentials', async () => {
      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
      await userEvent.type(canvas.getByTestId('password'), 'supersecret');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button'));
    });

    // 👇 Now we can assert that the onSubmit arg was called
    await waitFor(() => expect(args.onSubmit).toHaveBeenCalled());
  },
};
```

----------------------------------------

TITLE: Use Global Type in Other Framework Decorator
DESCRIPTION: This code snippet demonstrates how to consume a global type (e.g., `theme`) within a decorator in a Storybook for frameworks like Ember, HTML, Preact, Qwik, Svelte, Solid, or Web Components. It uses the `context.globals.theme` value to load a theme. This allows you to dynamically change the theme of your components based on the selected global value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
/** @param {import("lit").TemplateResult} args.story */
export const decorators = [
  (story, context) => {
    const theme = context.globals.theme;
    if (theme === 'dark') {
      document.body.classList.add('dark');
    } else {
      document.body.classList.remove('dark');
    }
    return story();
  },
];
```

----------------------------------------

TITLE: Mocking Context in Stories
DESCRIPTION: Example of mocking container components in Storybook stories
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/build-pages-with-storybook.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { ProfileHeader } from './ProfileHeader.stories';
import { ProfileTimeline } from './ProfileTimeline.stories';

export const LoggedIn = {
  decorators: [
    (Story) => (
      <ProfilePageContext.Provider
        value={{
          ProfileHeader: ProfileHeader.Mock,
          ProfileTimeline: ProfileTimeline.Mock,
        }}
      >
        <Story />
      </ProfilePageContext.Provider>
    ),
  ],
};
```

----------------------------------------

TITLE: Starting Storybook with PNPM
DESCRIPTION: Command to start the Storybook development server using PNPM package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-run-dev-mode.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm run start
```

----------------------------------------

TITLE: Registering Accessibility Addon Configuration
DESCRIPTION: Configuration code to register the Accessibility addon in Storybook's main configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/install-addons.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-a11y",
  ],
};
```

----------------------------------------

TITLE: Configuring React Alias in Vitest
DESCRIPTION: This code snippet demonstrates how to configure an alias in the Vitest configuration file to ensure the correct React version is used when encountering the `m.createRoot is not a function` error. This is necessary when the project uses a React version other than 18.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'vitest/config';

export default defineConfig({
  // ...
  resolve: {
    alias: {
      "@storybook/react-dom-shim": "@storybook/react-dom-shim/dist/react-16",
    },
  },
});
```

----------------------------------------

TITLE: Incorrect Usage of Storybook Interaction Functions in JavaScript
DESCRIPTION: This snippet demonstrates incorrect usage of Storybook interaction functions without awaiting them. This can cause issues with addon-interactions and debugging.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/await-interactions.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from '@storybook/test';

// or from the legacy package "@storybook/testing-library";

MyStory.play = (context) => {
  const canvas = within(context.canvasElement);
  // not awaited!
  userEvent.click(canvas.getByRole('button'));
};
```

----------------------------------------

TITLE: Defining Button Stories in Web Components with TypeScript (CSF 2)
DESCRIPTION: Creates a default button story for Web Components using TypeScript and CSF 2 format. Uses Story type for proper typing and template literals with the html tag to render the custom button element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
// Other imports and story implementation

export const Default: Story = ({ primary, backgroundColor, size, label }) =>
  html`<custom-button ?primary="${primary}" size="${size}" label="${label}"></custom-button>`;
```

----------------------------------------

TITLE: Configuring Storybook MDX Documentation with Common Renderer
DESCRIPTION: Sets up an MDX documentation file for Storybook using the common renderer. It imports Meta from Storybook addon-docs and references Checkbox stories to document them.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-meta-block.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories';

<Meta of={CheckboxStories} />
```

----------------------------------------

TITLE: Running Storybook Snapshot Tests with Jest - JavaScript
DESCRIPTION: This snippet sets up snapshot testing for Storybook stories in a JavaScript environment using Jest. It locates all story files using glob patterns, composes their stories with the specified renderer, and runs snapshot tests for each. Dependencies include 'path', 'glob', '@jest/globals', and '@storybook/your-renderer'. The main functions are 'compose', 'getAllStoryFiles', and the main Jest 'describe' and 'test' blocks. The expected input is a set of 'stories' or 'story' files, and the output comprises Jest snapshots; ensure a compatible renderer is used. The code expects at least one valid story per story module.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/snapshot-tests-portable-stories.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import path from 'path';\nimport * as glob from 'glob';\n\nimport { describe, test, expect } from '@jest/globals';\n\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\nconst compose = (entry) => {\n  try {\n    return composeStories(entry);\n  } catch (e) {\n    throw new Error(\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,\n    );\n  }\n};\n\nfunction getAllStoryFiles() {\n  // Place the glob you want to match your stories files\n  const storyFiles = glob.sync(\n    path.join(__dirname, 'stories/**/*.{stories,story}.{js,jsx,mjs,ts,tsx}'),\n  );\n\n  return storyFiles.map((filePath) => {\n    const storyFile = require(filePath);\n    const storyDir = path.dirname(filePath);\n    const componentName = path.basename(filePath).replace(/\\.(stories|story)\\.[^/.]+$/, '');\n\n    return { filePath, storyFile, storyDir, componentName };\n  });\n}\n\ndescribe('Stories Snapshots', () => {\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\n    const meta = storyFile.default;\n    const title = meta.title || componentName;\n\n    describe(title, () => {\n      const stories = Object.entries(compose(storyFile)).map(([name, story]) => ({ name, story }));\n\n      if (stories.length <= 0) {\n        throw new Error(\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`,\n        );\n      }\n\n      stories.forEach(({ name, story }) => {\n        test(name, async () => {\n          const mounted = render(story());\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n          expect(mounted.container).toMatchSnapshot();\n        });\n      });\n    });\n  });\n});
```

----------------------------------------

TITLE: Initializing Button Story with React (TypeScript) Decorators
DESCRIPTION: This code initializes a Storybook story for a React Button component using TypeScript. It imports necessary types from '@storybook/react-vite' and defines a primary story with a decorator that adds styling to the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </div>
    ),
  ],
};
```

----------------------------------------

TITLE: Creating a Story Variant with Parameter Override in Storybook CSF 2
DESCRIPTION: Creates a dark theme variant of a Primary Button story by using bind() to clone the original story, maintaining its args, and overriding its parameters to set a dark background. This pattern is useful for displaying the same component in different contexts without duplicating code.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-primary-dark-story.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export const PrimaryOnDark = Primary.bind({});
PrimaryOnDark.args = Primary.args;
PrimaryOnDark.parameters = { background: { default: 'dark' } };
```

----------------------------------------

TITLE: Defining Button Stories with Args in React (JS)
DESCRIPTION: This code defines Storybook stories for a React Button component, including Primary, Secondary, and Tertiary variants. It imports the Button component from './Button'. The stories configure the button's appearance through the 'args' property, setting properties like 'backgroundColor' and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Primary = {
  args: {
    backgroundColor: '#ff0',
    label: 'Button',
  },
};

export const Secondary = {
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
};

export const Tertiary = {
  args: {
    ...Primary.args,
    label: '📚📕📈🤓',
  },
};
```

----------------------------------------

TITLE: StorySortConfig Type Definition
DESCRIPTION: This TypeScript code defines the structure of the `StorySortConfig` object, which allows configuring story sorting in Storybook. It includes options for including story names, specifying locales, choosing a sorting method (alphabetical, alphabetical-by-kind, or custom), and defining a specific order for stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
type StorySortConfig = {
  includeNames?: boolean;
  locales?: string;
  method?: 'alphabetical' | 'alphabetical-by-kind' | 'custom';
  order?: string[];
};
```

----------------------------------------

TITLE: Define Storybook Meta and Story (TS)
DESCRIPTION: Defines the metadata for a Storybook story, including the component, argument types, and a default export. It also defines a story object with a render function that assigns the result of `someFunction` to a variable and passes it as a prop to the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_5

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import YourComponent from './YourComponent.svelte';

const meta = {
  component: YourComponent,
  //👇 Creates specific argTypes
  argTypes: {
    propertyA: {
      options: ['Item One', 'Item Two', 'Item Three'],
      control: { type: 'select' }, // Automatically inferred when 'options' is defined
    },
    propertyB: {
      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],
    },
  },
} satisfies Meta<typeof YourComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

const someFunction = (valuePropertyA, valuePropertyB) => {
  // Do some logic here
};

export const ExampleStory: Story = {
  render: (args) => {
    //👇 Assigns the function result to a variable
    const someFunctionResult = someFunction(args.propertyA, args.propertyB);
    return {
      Component: YourComponent,
      props: {
        ...args,
        someProperty: someFunctionResult,
      },
    };
  },
  args: {
    propertyA: 'Item One',
    propertyB: 'Another Item One',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook for Autodocs in Monorepo - TypeScript
DESCRIPTION: Updates Storybook's configuration file (i.e., `.storybook/main.js|ts`) to include necessary configurations for Autodocs to work correctly in a TypeScript monorepo setup. This ensures proper documentation generation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_16

LANGUAGE: TypeScript
CODE:
```
module.exports = {
  // ... other configurations
  typescript: {
    check: false,
    checkOptions: {},
    reactDocgen: 'react-docgen-typescript',
    reactDocgenTypescriptOptions: {
      shouldExtractLiteralValuesFromEnum: true,
      propFilter: (prop) => (prop.parent ? !/node_modules/.test(prop.parent.fileName) : true),
    },
  },
};
```

----------------------------------------

TITLE: Using Navigation Hooks with Params in Storybook
DESCRIPTION: This code demonstrates how to use the `useSelectedLayoutSegment`, `useSelectedLayoutSegments`, and `useParams` hooks from `next/navigation` within a Storybook component when the `nextjs.navigation.segments` parameter is configured to include parameter key-value pairs. It shows how to retrieve the current segment, segments, and parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
import { useSelectedLayoutSegment, useSelectedLayoutSegments, useParams } from 'next/navigation';

export default function ParamsBasedComponent() {
  const segment = useSelectedLayoutSegment(); // hello
  const segments = useSelectedLayoutSegments(); // ["hello", "nextjs"]
  const params = useParams(); // { slug: "hello", framework: "nextjs" }
  ...
}
```

----------------------------------------

TITLE: Configuring Component Meta with ArgTypes in Typescript
DESCRIPTION: This code configures the metadata for a Storybook story in TypeScript. It imports the component and sets up the story, disabling the 'foo' property from appearing in the UI by setting 'disable: true' within the 'table' property of the 'argTypes' configuration. It uses satisfies Meta to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc).
import type { Meta } from '@storybook/your-framework';

import { YourComponent } from './YourComponent';

const meta = {
  component: YourComponent,
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      table: {
        disable: true,
      },
    },
  },
} satisfies Meta<typeof YourComponent>;

export default meta;
```

----------------------------------------

TITLE: MDX Support Implementation
DESCRIPTION: Demonstrates how a builder must interpret MDX files and invoke Storybook's special extensions to support stories and documentation authored in MDX. This is essential for Storybook's Docs feature.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
{/* Button.mdx */}

import { Meta, Story } from '@storybook/addon-docs';
import Button from './Button';

<Meta title="Button" component={Button} />

<Story name="Primary">
  <Button primary>Primary</Button>
</Story>
```

----------------------------------------

TITLE: Custom Control Type Matchers Configuration
DESCRIPTION: Demonstrates how to define custom regex patterns to automatically infer controls based on arg names using the `matchers` property in the `controls` parameter within Storybook's configuration. This allows for custom control UIs to be displayed for args that match specific naming conventions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
{
  control: {
    matchers: {
      color: /(background|color)$/i,
      date: /Date$/,
    },
  },
}
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: This snippet defines the Storybook configuration using TypeScript. It imports the StorybookConfig type, sets the framework, specifies story file patterns, and configures webpack to use an alias for the src directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-ts-module-resolution-atsign-import.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import path from 'path';
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  webpackFinal: async (config) => {
    if (config.resolve) {
      config.resolve.alias = {
        ...config.resolve.alias,
        '@': path.resolve(__dirname, '../src'),
      };
    }
    return config;
  },
};

export default config;
```

----------------------------------------

TITLE: Installing Storybook with Manual Framework Specification
DESCRIPTION: Command to install Storybook for a specific framework using the --type flag, useful for custom environments or manual setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
<CodeSnippets path="create-command-manual-framework.md" />
```

----------------------------------------

TITLE: Initializing Button Story - React (JS)
DESCRIPTION: This code defines a Storybook story for a React Button component using JavaScript. It imports the Button component and the action function from 'storybook/actions'. The 'Text' story is configured with arguments for the label and onClick event, and a render function that returns the Button component with the specified props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_1

LANGUAGE: js
CODE:
```
import { action } from 'storybook/actions';

import { Button } from './Button';

export default {
  component: Button,
};

export const Text = {
  args: {
    label: 'Hello',
    onClick: action('clicked'),
  },
  render: ({ label, onClick }) => <Button label={label} onClick={onClick} />,
};
```

----------------------------------------

TITLE: Initializing Storybook Preview with Decorator - React (TSX)
DESCRIPTION: This snippet initializes a Storybook preview configuration for React using TypeScript, defining a decorator that wraps stories with a layout based on the 'pageLayout' parameter. It renders a div with a specific class around the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import React from 'react';

import type { Preview } from '@storybook/react-vite';

const preview: Preview = {
  decorators: [
    // 👇 Defining the decorator in the preview file applies it to all stories
    (Story, { parameters }) => {
      // 👇 Make it configurable by reading from parameters
      const { pageLayout } = parameters;
      switch (pageLayout) {
        case 'page':
          return (
            // Your page layout is probably a little more complex than this ;)
            <div className="page-layout">
              <Story />
            </div>
          );
        case 'page-mobile':
          return (
            <div className="page-mobile-layout">
              <Story />
            </div>
          );
        default:
          // In the default case, don't apply a layout
          return <Story />;
      }
    },
  ],
};

export default preview;
```

----------------------------------------

TITLE: Configuring Core Features in Storybook
DESCRIPTION: This snippet shows how to configure core features in Storybook. It defines options for Storybook's internal features, such as disabling telemetry.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
core: { disableTelemetry: true, }
```

----------------------------------------

TITLE: Configuring Storybook for Preact with Vite in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Storybook for Preact using Vite as the bundler in TypeScript. It imports the StorybookConfig type, defines a configuration object, and exports it as the default.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-framework-options.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/preact-vite';

const config: StorybookConfig = {
  framework: {
    name: '@storybook/preact-vite',
    options: {
      // ...
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Defining Storybook Meta Configuration
DESCRIPTION: This code defines the meta configuration for a Storybook story. It includes control definitions for properties like texture (file upload with .png acceptance), position (radio options), rotationAxis (checkbox options), scaling (select options), label (text input), meshColors (color picker with presets), and revisionDate (date picker). These controls enable interactive modification of the component's properties within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const meta = {
  parameters: {
    backgrounds: {
      default: 'dark',
    },
  },
  argTypes: {
    object: {
      control: 'object',
    },
    texture: {
      control: {
        type: 'file',
        accept: '.png',
      },
    },
    position: {
      control: 'radio',
      options: ['left', 'right', 'center'],
    },
    rotationAxis: {
      control: 'check',
      options: ['x', 'y', 'z'],
    },
    scaling: {
      control: 'select',
      options: [10, 50, 75, 100, 200],
    },
    label: {
      control: 'text',
    },
    meshColors: {
      control: {
        type: 'color',
        presetColors: ['#ff0000', '#00ff00', '#0000ff'],
      },
    },
    revisionDate: {
      control: 'date',
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Button Component Story - Common TS
DESCRIPTION: This code configures the story for a Button component in Storybook using TypeScript. It defines the component and its argTypes, which control the properties that can be customized in the Storybook UI, such as backgroundColor, primary, label, onClick, and size. The argTypes are organized into categories like Colors, Text, Events, and Sizes for better organization. It uses a generic type for Meta.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-categories.md#_snippet_2

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  argTypes: {
    // Assigns the argTypes to the Colors category
    backgroundColor: {
      control: 'color',
      table: {
        category: 'Colors',
      },
    },
    primary: {
      table: {
        category: 'Colors',
      },
    },
    // Assigns the argType to the Text category
    label: {
      table: {
        category: 'Text',
      },
    },
    // Assigns the argType to the Events category
    onClick: {
      table: {
        category: 'Events',
      },
    },
    // Assigns the argType to the Sizes category
    size: {
      table: {
        category: 'Sizes',
      },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Initializing LoginForm Story with Vue 3 and Vite
DESCRIPTION: This code defines a Storybook story for the LoginForm component using Vue 3 and Vite. It imports necessary modules, defines metadata for the component, and creates stories for both empty and filled form scenarios, including simulating user input and asserting the expected DOM structure after form submission.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_16

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import { userEvent, within, expect } from 'storybook/test';

import LoginForm from './LoginForm.vue';

const meta = {
  component: LoginForm,
} satisfies Meta<typeof LoginForm>;

export default meta;
type Story = StoryObj<typeof meta>;

export const EmptyForm: Story = {
  render: () => ({
    components: { LoginForm },
    template: `<LoginForm />`,
  }),
};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm: Story = {
  render: () => ({
    components: { LoginForm },
    template: `<LoginForm />`,
  }),
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));

    // 👇 Assert DOM structure
    await expect(
      canvas.getByText(
        'Everything is perfect. Your account is ready and we should probably get you started!'
      )
    ).toBeInTheDocument();
  },
};
```

----------------------------------------

TITLE: Running Storybook with yarn
DESCRIPTION: Command to start Storybook using yarn as the package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-run-dev.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
yarn storybook
```

----------------------------------------

TITLE: Configuring Webpack5 Builder in Storybook
DESCRIPTION: Sets up Storybook to use Webpack5 as the builder with file system caching enabled. This configuration exports the core settings that define the builder and its options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack5-fsCache.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  core: {
    builder: {
      name: 'webpack5',
      options: {
        fsCache: true,
      },
    },
  },
};
```

----------------------------------------

TITLE: Access Storybook's Internal State with useStorybookState Hook - JavaScript
DESCRIPTION: This hook allows access to Storybook's internal state. It is recommended to optimize your addon to rely on React.memo, useMemo, or useCallback to prevent a high volume of re-render cycles.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_12

LANGUAGE: javascript
CODE:
```
import { useStorybookState } from '@storybook/manager-api';

const MyAddon = () => {
  const storybookState = useStorybookState();

  return (
    <div>
      <h1>Storybook State</h1>
      <pre>{JSON.stringify(storybookState, null, 2)}</pre>
    </div>
  );
};
```

----------------------------------------

TITLE: Configuring Button Story with Svelte CSF (Typescript)
DESCRIPTION: This code configures a Button component's story in Storybook using Svelte, Typescript and the Component Story Format (CSF). It imports the necessary modules, defines the component, and sets up argTypes for the 'arrow' property, allowing users to select from predefined arrow icons using a select control in the Storybook UI. The options and labels for the arrow selection are also defined.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#_snippet_4

LANGUAGE: typescript
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';

  const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };

  const { Story } = defineMeta({
    component: Button,
    argTypes: {
      arrow: {
        options: Object.keys(arrows), // An array of serializable values
        mapping: arrows, // Maps serializable option values to complex arg values
        control: {
          type: 'select', // Type 'select' is automatically inferred when 'options' is defined
          labels: {
            // 'labels' maps option values to string labels
            ArrowUp: 'Up',
            ArrowDown: 'Down',
            ArrowLeft: 'Left',
            ArrowRight: 'Right',
          },
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Button Story with argTypes in Typescript
DESCRIPTION: This code configures a Storybook story for a Button component using Typescript. It defines the component and its argTypes, which allow users to control the component's properties like label, advanced settings, margin, padding, and cornerRadius through the Storybook UI. The margin, padding, and cornerRadius are conditionally enabled based on the 'advanced' boolean.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  argTypes: {
    label: { control: 'text' }, // Always shows the control
    advanced: { control: 'boolean' },
    // Only enabled if advanced is true
    margin: { control: 'number', if: { arg: 'advanced' } },
    padding: { control: 'number', if: { arg: 'advanced' } },
    cornerRadius: { control: 'number', if: { arg: 'advanced' } },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Preview (TypeScript)
DESCRIPTION: This TypeScript snippet configures the Storybook preview, excluding the 'style' control from the Docs tab. It imports the `Preview` type from `@storybook/your-framework` and defines a `preview` object with the desired configuration within the `parameters` object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-doc-blocks-controls-exclude-prop.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Component Meta with Conditional Controls in Storybook
DESCRIPTION: This code snippet configures the metadata for a Storybook component. It defines controls for properties such as 'label' (always visible), 'advanced' (boolean), and 'margin', 'padding', 'cornerRadius' (conditionally visible based on the 'advanced' boolean). The 'if' property within the control definition enables conditional display based on the value of another argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#_snippet_8

LANGUAGE: javascript
CODE:
```
{
    label: { control: 'text' }, // Always shows the control
    advanced: { control: 'boolean' },
    // Only enabled if advanced is true
    margin: { control: 'number', if: { arg: 'advanced' } },
    padding: { control: 'number', if: { arg: 'advanced' } },
    cornerRadius: { control: 'number', if: { arg: 'advanced' } },
  }
```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It sets up the framework and SWC compiler options, specifically enabling automatic runtime for React transforms.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-swc-jsx-transform.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  framework: {
    name: '@storybook/your-framework',
    options: {},
  },
  swc: (config, options) => ({
    jsc: {
      transform: {
        react: {
          runtime: 'automatic',
        },
      },
    },
  }),
};
```

----------------------------------------

TITLE: Defining Button Stories with Args in Solid (TS)
DESCRIPTION: This code defines Storybook stories for a Solid Button component using TypeScript, including Primary, Secondary, and Tertiary variants. It imports the necessary modules from 'storybook-solidjs' and the Button component from './Button'. The stories configure the button's appearance through the 'args' property, setting properties like 'backgroundColor' and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    backgroundColor: '#ff0',
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
};

export const Tertiary: Story = {
  args: {
    ...Primary.args,
    label: '📚📕📈🤓',
  },
};
```

----------------------------------------

TITLE: Defining Button Story with Click Handler in CSF
DESCRIPTION: Example showing how to create a button story with click event handling using traditional approach.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Button',
  component: Button,
};

export const Text = () => ({
  template: '<Button @click="log">Hello Button</Button>',
  methods: {
    log: action('clicked')
  }
});
```

----------------------------------------

TITLE: Configuring Storybook Preview with React (TypeScript) Theme Provider
DESCRIPTION: This snippet configures the Storybook preview for a React project written in TypeScript, using a decorator to wrap stories with a `ThemeProvider` component from `styled-components`. It demonstrates how to apply a default theme to all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-styled-components-decorator.md#_snippet_2

LANGUAGE: ts
CODE:
```
import React from 'react';

import type { Preview } from '@storybook/react-vite';

import { ThemeProvider } from 'styled-components';

const preview: Preview = {
  decorators: [
    (Story) => (
      <ThemeProvider theme="default">
        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </ThemeProvider>
    ),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Using Existing Webpack Config with Storybook
DESCRIPTION: Example of how to reuse an app's existing webpack configuration by importing it and merging with Storybook's config, particularly useful for projects generated with tools like Vue CLI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
const path = require('path');

// your app's webpack.config.js
const custom = require('../webpack.config.js');

module.exports = {
  webpackFinal: async (config, { configType }) => {
    // `configType` has a value of 'DEVELOPMENT' or 'PRODUCTION'
    // You can change the configuration based on that.
    // 'PRODUCTION' is used when building the static version of storybook.

    // Find the rule responsible for handling JavaScript/TypeScript files
    const transpileRule = config.module.rules.find((rule) => {
      // Find the rule that uses babel-loader
      const isBabelLoader = rule.use && rule.use.loader && rule.use.loader.includes('babel-loader');
      // For webpack 5 the babel-loader is usually in a nested use rule
      // Along with a bunch of other loaders
      const hasMultipleUses = rule.use && Array.isArray(rule.use);
      const hasBabelLoader = hasMultipleUses
        ? rule.use.some((use) => use.loader && use.loader.includes('babel-loader'))
        : false;

      return isBabelLoader || hasBabelLoader;
    });

    // Replace with the corresponding rule from your app's webpack config
    if (transpileRule) {
      config.module.rules = [...config.module.rules.filter((rule) => rule !== transpileRule), ...custom.module.rules];
    }

    // Return the altered config
    return config;
  },
};
```

----------------------------------------

TITLE: Implementing ArgTypes Block in MDX
DESCRIPTION: Basic implementation of the ArgTypes block in an MDX documentation file to display component argument types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-argtypes.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
import { Meta, ArgTypes } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

<ArgTypes of={ButtonStories} />
```

----------------------------------------

TITLE: Configuring Storybook Background Options with Globals API in JavaScript
DESCRIPTION: Sets up background color options in Storybook using the globals API options object syntax in JavaScript. This approach uses named keys instead of an array, defining the same Twitter and Facebook color presets.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-migrate-backgrounds-globals.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  parameters: {
    backgrounds: {
      options: {
        twitter: { name: 'twitter', value: '#00aced' },
        facebook: { name: 'facebook', value: '#3b5998' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Grouping interactions with the step function
DESCRIPTION: This snippet demonstrates how to group related interactions together using the `step` function in Storybook. This allows you to provide a custom label that describes a set of interactions, improving the readability and organization of your tests.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
import { step, within } from '@storybook/test';
import { expect } from '@storybook/jest';
import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
};

export default meta;

export const Task = {
  render: () => <MyComponent primary label="Click me" />,
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await step('Click the button', async () => {
      await fireEvent.click(canvas.getByRole('button'));
    });

    await step('Assert the output', async () => {
      expect(canvas.getByText('clicked')).toBeInTheDocument();
    });
  },
};

```

----------------------------------------

TITLE: Storybook Sandbox with Telemetry Disabled
DESCRIPTION: Disables Storybook's telemetry, preventing usage data from being sent.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_115

LANGUAGE: Shell
CODE:
```
storybook sandbox --disable-telemetry
```

----------------------------------------

TITLE: Configuring Storybook for Web Components with Vite in JavaScript
DESCRIPTION: This snippet demonstrates how to configure Storybook for a Web Components project using Vite as the bundler in JavaScript. It exports a default configuration object specifying the framework name and options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-framework-options.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  framework: {
    name: '@storybook/web-components-vite',
    options: {
      // ...
    },
  },
};
```

----------------------------------------

TITLE: Configuring @storybook/preset-create-react-app in main.js (Basic)
DESCRIPTION: Demonstrates the basic configuration for Storybook 5.3.0 and newer by adding the preset to the `addons` array within the `module.exports` object in the `./.storybook/main.js` file. This automatically applies Create React App's Webpack and Babel configurations to Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
module.exports = {
  addons: ['@storybook/preset-create-react-app'],
};
```

----------------------------------------

TITLE: Migrate storiesOf to CSF and CSF 2 to CSF 3
DESCRIPTION: These bash commands are used to migrate stories from storiesOf to CSF format and then from CSF version 2 to CSF version 3. These commands use the storybook migrate command with specific globs and parsers to transform story files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_82

LANGUAGE: Bash
CODE:
```
# 1. convert storiesOf to CSF
npx storybook@latest migrate storiesof-to-csf --glob="**/*.stories.tsx" --parser=tsx

# 2. Convert CSF 2 to CSF 3
npx storybook@latest migrate csf-2-to-3 --glob="**/*.stories.tsx" --parser=tsx
```

----------------------------------------

TITLE: Compose Storybook Story with Imported Stories (TS)
DESCRIPTION: This TypeScript code defines a Storybook story named 'Simple' for the 'demo-document-screen' component. It imports stories from 'PageLayout', 'DocumentHeader', and 'DocumentList' and passes their arguments as props to the 'demo-document-screen' component, composing a complete view. It uses TypeScript types for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

// 👇 Imports the required stories
import PageLayout from './PageLayout.stories';
import DocumentHeader from './DocumentHeader.stories';
import DocumentList from './DocumentList.stories';

const meta: Meta = {
  component: 'demo-document-screen',
};

export default meta;
type Story = StoryObj;

export const Simple: Story = {
  args: {
    user: PageLayout.Simple.args.user,
    document: DocumentHeader.Simple.args.document,
    subdocuments: DocumentList.Simple.args.documents,
  },
};
```

----------------------------------------

TITLE: Defining Button Stories in Solid with JavaScript (CSF 2)
DESCRIPTION: Creates a default button story for Solid components using JavaScript and CSF 2 format. The implementation spreads args as props to the Button component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
// Other imports and story implementation
export const Default = (args) => <Button {...args} />;
```

----------------------------------------

TITLE: Initializing Button stories with Svelte CSF using Typescript
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using the Component Story Format (CSF) and Typescript. It imports necessary modules from '@storybook/addon-svelte-csf', imports the Button and MarginDecorator components, and defines the Story using 'defineMeta'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_9

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';
  import MarginDecorator from './MarginDecorator.svelte';

  const { Story } = defineMeta({
    component: Button,
    decorators: [() => MarginDecorator],
  });
</script>
```

----------------------------------------

TITLE: Component-level a11y Configuration
DESCRIPTION: This code snippet shows how to customize a11y rules for all stories of a component by updating the default export of the story file. It allows you to define specific parameters and globals for the component's stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Button',
  parameters: {
    a11y: {
      element: '#storybook-root',
      config: {},
      options: {},
      manual: false,
    },
  },
};

```

----------------------------------------

TITLE: Running Storybook Automigration with PNPM
DESCRIPTION: Executes Storybook's automigration utility using PNPM's DLX command. Uses the latest version of Storybook to run the automigrate command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-automigrate.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@latest automigrate
```

----------------------------------------

TITLE: Configuring Button Story for Framework in Storybook
DESCRIPTION: This snippet configures a Storybook story for a Button component using a specified framework. It imports the necessary modules from '@storybook/your-framework' and the Button component, then defines the story's metadata, including the title and component. Finally, it exports the metadata and a basic story named 'Button'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hoisted.md#_snippet_2

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button as ButtonComponent } from './Button';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Design System/Atoms/Button',
  component: ButtonComponent,
} satisfies Meta<typeof ButtonComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

// This is the only named export in the file, and it matches the component name
export const Button: Story = {};
```

----------------------------------------

TITLE: Implementing Button Component in React with TypeScript
DESCRIPTION: React button component using TypeScript with a defined interface for props. Includes default values for props and strongly typed component definition using React.FC generic type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
export interface ButtonProps {
  /**
   * Checks if the button should be disabled
   */
  isDisabled: boolean;
  /**
  The display content of the button
  */
  content: string;
}

export const Button: React.FC<ButtonProps> = ({ isDisabled = false, content = '' }) => {
  return (
    <button type="button" disabled={isDisabled}>
      {content}
    </button>
  );
};
```

----------------------------------------

TITLE: Enable MDX2 preview feature
DESCRIPTION: This code snippet shows how to enable the experimental MDX2 preview feature in Storybook by adding the `previewMdx2` feature flag to the `.storybook/main.js` configuration file. This allows Storybook to process and render MDX2 files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_149

LANGUAGE: javascript
CODE:
```
module.exports = {
  features: {
    previewMdx2: true,
  },
};
```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet demonstrates how to configure Storybook using JavaScript. It specifies the framework, story locations, and build options. The configuration is exported as the default object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-autodocs.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  build: {
    test: {
      disableAutoDocs: false,
    },
  },
};
```

----------------------------------------

TITLE: Configuring Button Component Meta for Svelte in Storybook (CSF - TS)
DESCRIPTION: This code configures the metadata for a Button component in Storybook using Svelte and TypeScript. It imports the Button component and uses defineMeta to define the component and its argument types. The argTypes configuration ensures that either a label or an image can be passed to the Button, but not both, using conditional logic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    argTypes: {
      // Button can be passed a label or an image, not both
      label: {
        control: 'text',
        if: { arg: 'image', truthy: false },
      },
      image: {
        control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },
        if: { arg: 'label', truthy: false },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Storybook Preview (JavaScript)
DESCRIPTION: This JavaScript snippet configures the Storybook preview by importing global styles and setting default parameters. It imports a global CSS file to apply consistent styling across all stories and sets an empty parameters object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-import-global-styles.md#_snippet_0

LANGUAGE: js
CODE:
```
import '../src/styles/global.css';

export default {
  parameters: {},
};
```

----------------------------------------

TITLE: Configuring Button Story in Svelte (JavaScript)
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using JavaScript. It imports the Button component and defines its metadata, including argument types for background color and default arguments to set the primary property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_6

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  //👇 Creates specific argTypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    //👇 Now all Button stories will be primary.
    primary: true,
  },
};
```

----------------------------------------

TITLE: Installing @storybook/addon-a11y using pnpm (Shell)
DESCRIPTION: Installs the `@storybook/addon-a11y` package as a development dependency using the pnpm package manager. Requires Node.js and pnpm to be installed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev @storybook/addon-a11y
```

----------------------------------------

TITLE: Integration Catalog Metadata Configuration in package.json
DESCRIPTION: This JSON snippet configures the integration catalog metadata for a Storybook addon, including display name, unsupported frameworks, icon URL, and keywords. It customizes the addon's searchability and indexing in the integration catalog.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "name": "my-storybook-addon",
  "version": "1.0.0",
  "description": "My first storybook addon",
  "author": "Your Name",
  "storybook": {
    "displayName": "My Storybook Addon",
    "unsupportedFrameworks": ["react-native"],
    "icon": "https://yoursite.com/link-to-your-icon.png"
  },
  "keywords": ["storybook-addons", "appearance", "style", "css", "layout", "debug"]
}
```

----------------------------------------

TITLE: Subscribing to Events with useChannel
DESCRIPTION: The `useChannel` hook allows addons to subscribe to events and emit custom events to the Storybook channel. Messages can be listened to on both the iframe and the manager, enabling communication between different parts of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_14

LANGUAGE: javascript
CODE:
```
import { useChannel } from '@storybook/manager-api';
import { useEffect } from 'react';

export const MyAddon = () => {
  const emit = useChannel({
    'my-custom-event': (data) => {
      console.log('Received data:', data);
    },
  });

  useEffect(() => {
    // Emit a custom event
    emit('my-custom-event', { message: 'Hello from my addon!' });
  }, [emit]);

  return <div>My Addon</div>;
};

```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type from the framework-specific package and defines a config object with methods to customize Vite, Webpack, and Babel configurations. Each method is asynchronous and typed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-advanced-config-example.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  viteFinal: async (config, options) => {
    // Update config here
    return config;
  },
  webpackFinal: async (config, options) => {
    // Change webpack config
    return config;
  },
  babel: async (config, options) => {
    return config;
  },
};

export default config;
```

----------------------------------------

TITLE: Defining Conditional ArgTypes in Storybook (JavaScript)
DESCRIPTION: This snippet demonstrates how to define conditional argTypes in a Storybook story using JavaScript. It shows how to conditionally display argTypes based on the existence, truthiness, or specific values of other args or globals. This example is tailored for web-components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#_snippet_7

LANGUAGE: javascript
CODE:
```
export default {
  component: 'demo-example',
  argTypes: {
    parent: { control: 'select', options: ['one', 'two', 'three'] },

    // 👇 Only shown when `parent` arg exists
    parentExists: { if: { arg: 'parent', exists: true } },

    // 👇 Only shown when `parent` arg does not exist
    parentDoesNotExist: { if: { arg: 'parent', exists: false } },

    // 👇 Only shown when `parent` arg value is truthy
    parentIsTruthy: { if: { arg: 'parent' } },
    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },

    // 👇 Only shown when `parent` arg value is not truthy
```

----------------------------------------

TITLE: Configuring Storybook Main.js for Docs Addon
DESCRIPTION: JavaScript configuration to add Storybook Docs addon and set up story patterns in the main.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  stories: [
    '../src/**/*.mdx',
    '../src/**/*.stories.@(js|jsx|ts|tsx)',
  ],
  addons: [
    '@storybook/addon-docs',
  ],
};
```

----------------------------------------

TITLE: Configuring ArgTypes for Gizmo Component in Svelte
DESCRIPTION: This code defines the argument types for the Gizmo component in a Svelte Storybook story. It imports the Meta type from the Storybook framework and the Gizmo component itself. The argTypes object configures controls for various properties of the Gizmo component, such as canRotate, width, height, and others, allowing users to interactively modify these properties in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#_snippet_5

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/your-framework';

import Gizmo from './Gizmo.svelte';

const meta = {
  component: Gizmo,
  argTypes: {
    canRotate: {
      control: 'boolean',
    },
    width: {
      control: { type: 'number', min: 400, max: 1200, step: 50 },
    },
    height: {
      control: { type: 'range', min: 200, max: 1500, step: 50 },
    },
    rawData: {
      control: 'object',
    },
    coordinates: {
      control: 'object',
    },
    texture: {
      control: {
        type: 'file',
        accept: '.png',
      },
    },
    position: {
      control: 'radio',
      options: ['left', 'right', 'center'],
    },
    rotationAxis: {
      control: 'check',
      options: ['x', 'y', 'z'],
    },
    scaling: {
      control: 'select',
      options: [10, 50, 75, 100, 200],
    },
    label: {
      control: 'text',
    },
    meshColors: {
      control: {
        type: 'color',
        presetColors: ['#ff0000', '#00ff00', '#0000ff'],
      },
    },
    revisionDate: {
      control: 'date',
    },
  },
} satisfies Meta<typeof Gizmo>;

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Preview (JavaScript)
DESCRIPTION: Configures Storybook preview settings, including control matchers for identifying color and date properties, and sets the documentation theme to dark. This configuration ensures a consistent look and feel for Storybook documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-override-theme.md#_snippet_0

LANGUAGE: js
CODE:
```
import { themes, ensure } from 'storybook/theming';

export default {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
    docs: {
      theme: ensure(themes.dark), // The replacement theme to use
    },
  },
};
```

----------------------------------------

TITLE: Resulting Parameters for LargeScreen Story
DESCRIPTION: This code shows the resulting parameters applied to the 'LargeScreen' story after merging project, meta, and story-level parameters. Story-level parameters have the highest specificity and override any conflicting parameters from project or meta levels.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
// For the LargeScreen story:
{
  layout: 'padded',
  demo: {
    demoProperty: 'b',
    anotherDemoProperty: 'b',
    demoArray: [3, 4],
  },
}
```

----------------------------------------

TITLE: Solid Button Story Implementation (TypeScript)
DESCRIPTION: Default story implementation for a Button component in SolidJS using CSF 3 format with TypeScript. Includes Story type definition.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
export const Default: Story = {
  render: (args) => <Button {...args} />,
};
```

----------------------------------------

TITLE: Disabling query parameters with api.setQueryParams()
DESCRIPTION: Removes a query parameter by setting its value to `null`.  Additionally, if you need to remove a query parameter, set it as `null` instead of removing them from the addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
api.setQueryParams({ key: null });
```

----------------------------------------

TITLE: A11y parameter example
DESCRIPTION: Example of setting the a11y parameter at the project, component, and story levels to configure accessibility testing behavior.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
// .storybook/preview.js
export const parameters = {
  a11y: {
    test: 'todo',
  },
};

// MyComponent.stories.js
export default {
  parameters: {
    a11y: {
      test: 'error',
    },
  },
};

export const MyStory = {
  parameters: {
    a11y: {
      test: 'off',
    },
  },
};
```

LANGUAGE: typescript
CODE:
```
// .storybook/preview.ts
import type { Preview } from '@storybook/react';

const preview: Preview = {
  parameters: {
    a11y: {
      test: 'todo',
    },
  },
};

export default preview;

// MyComponent.stories.ts
import type { Meta } from '@storybook/react';

const meta: Meta = {
  parameters: {
    a11y: {
      test: 'error',
    },
  },
};

export default meta;

export const MyStory = {
  parameters: {
    a11y: {
      test: 'off',
    },
  },
};
```

----------------------------------------

TITLE: Configure Storybook Framework with Preact Vite in TypeScript
DESCRIPTION: This TypeScript snippet configures Storybook to use the Preact Vite framework. It imports the StorybookConfig type and sets the framework to '@storybook/preact-vite', replacing the webpack configuration. This is crucial for TypeScript projects migrating to Vite.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-add-framework.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/preact-vite';

const config: StorybookConfig = {
  // ...
  // framework: '@storybook/preact-webpack5', 👈 Remove this
  framework: '@storybook/preact-vite', // 👈 Add this
};

export default config;
```

----------------------------------------

TITLE: Initializing MyComponent Story with Solid (JS)
DESCRIPTION: This code defines a Storybook story for the MyComponent using Solid (JavaScript). It imports the necessary components and defines a story that renders the component within a specified layout using JSX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#_snippet_4

LANGUAGE: js
CODE:
```
import { Layout } from './Layout';

import { MyComponent } from './MyComponent';

export default {
  title: 'MyComponent',
  component: MyComponent,
};

// This story uses a render function to fully control how the component renders.
export const Example = {
  render: () => (
    <Layout>
      <header>
        <h1>Example</h1>
      </header>
      <article>
        <MyComponent />
      </article>
    </Layout>
  ),
};
```

----------------------------------------

TITLE: Defining Svelte Button Stories with CSF (TS)
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using the Component Story Format (CSF) with TypeScript. It imports necessary modules from '@storybook/addon-svelte-csf' and the Button component, configuring the component's properties and their controls. It defines two stories: Accessible and Inaccessible.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_8

LANGUAGE: ts-4-9
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    argTypes: {
      backgroundColor: { control: 'color' },
    },
  });
</script>

<!-- This is an accessible story -->
<Story name="Accessible" args={{ primary: false, label: 'Button' }} />

<!-- This is not -->
<Story name="Inaccessible" args={{ primary: false, label: 'Button', backgroundColor: 'red' }} />

```

----------------------------------------

TITLE: Defining Button Story with ArgTypes in Angular
DESCRIPTION: This code defines a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines the component's metadata, including argTypes for customizing the 'label' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;

type Story = StoryObj<typeof Button>;

export const Basic: Story = {
  argTypes: {
    // 👇 This story expects a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
};
```

----------------------------------------

TITLE: Applying Theme Decorator in Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet configures a Storybook decorator to apply themes using styled-components. It imports React, ThemeProvider, and themes, then defines a decorator that wraps each story with ThemeProvider, dynamically selecting the theme based on the 'theme' parameter. It also imports the Preview type from @storybook/react-vite.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-provider-in-preview.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import React from 'react';

import type { Preview } from '@storybook/react-vite';

import { ThemeProvider } from 'styled-components';

// themes = { light, dark }
import * as themes from '../src/themes';

const preview: Preview = {
  decorators: [
    // 👇 Defining the decorator in the preview file applies it to all stories
    (Story, { parameters }) => {
      // 👇 Make it configurable by reading the theme value from parameters
      const { theme = 'light' } = parameters;
      return (
        <ThemeProvider theme={themes[theme]}>
          <Story />
        </ThemeProvider>
      );
    },
  ],
};

export default preview;
```

----------------------------------------

TITLE: Configure a11y tests in test runner
DESCRIPTION: This snippet configures the test runner to include accessibility tests using `axe-playwright`. It defines `preVisit` and `postVisit` hooks to extend the default configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_13

LANGUAGE: javascript
CODE:
```
const { injectAxe, checkA11y } = require('axe-playwright');

module.exports = {
  async preVisit(page, context) {
    await injectAxe(page);
  },
  async postVisit(page, context) {
    await checkA11y(page, undefined, {
      detailedReport: true,
      detailedReportOptions: {
        html: true,
      },
    });
  },
};

```

----------------------------------------

TITLE: Running Storybook Tests with npm
DESCRIPTION: This command uses npm to run the 'test-storybook' script, which executes Storybook tests. It's designed for projects using npm as their package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm run test-storybook
```

----------------------------------------

TITLE: Initializing Button Storybook Story for Web Components - TS
DESCRIPTION: This code initializes a Storybook story for a Button component in Web Components using TypeScript. It defines metadata for the component and exports primary and secondary stories with different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    ...Primary.args,
    primary: false,
  },
};
```

----------------------------------------

TITLE: Initializing Button Storybook with CSF
DESCRIPTION: This code initializes a Storybook story for a Button component using the Component Story Format (CSF). It imports the Button component and exports a default object that configures the story's title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Design System/Atoms/Button',
  component: Button,
};
```

----------------------------------------

TITLE: Configuring Storybook for Web Components with Vite in TypeScript
DESCRIPTION: This snippet shows how to configure Storybook for a Web Components project using Vite as the bundler in TypeScript. It imports the StorybookConfig type, defines a typed configuration object, and exports it as the default.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-framework-options.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/web-components-vite';

const config: StorybookConfig = {
  framework: {
    name: '@storybook/web-components-vite',
    options: {
      // ...
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring and Executing Vite Build for Storybook in TypeScript
DESCRIPTION: This function configures and executes the Vite build process for Storybook. It creates a base configuration, applies presets, processes environment variables, and triggers the Vite build with the final configuration. The function handles output directory settings, sourcemap generation, and environment variable processing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-builder-api-build-server.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { build as viteBuild } from 'vite';
import { stringifyProcessEnvs } from './envs';
import { commonConfig } from './vite-config';

import type { EnvsRaw, ExtendedOptions } from './types';

export async function build(options: ExtendedOptions) {
  const { presets } = options;

  const baseConfig = await commonConfig(options, 'build');
  const config = {
    ...baseConfig,
    build: {
      outDir: options.outputDir,
      emptyOutDir: false,
      sourcemap: true,
    },
  };

  const finalConfig = await presets.apply('viteFinal', config, options);

  const envsRaw = await presets.apply<Promise<EnvsRaw>>('env');
  // Stringify env variables after getting `envPrefix` from the final config
  const envs = stringifyProcessEnvs(envsRaw, finalConfig.envPrefix);
  // Update `define`
  finalConfig.define = {
    ...finalConfig.define,
    ...envs,
  };

  await viteBuild(finalConfig);
}
```

----------------------------------------

TITLE: Configuring Svelte Story (TypeScript)
DESCRIPTION: This snippet configures a Storybook story for a Svelte component using TypeScript. It imports the Meta type from '@storybook/your-framework' (which should be replaced with 'storybook-svelte-vite' or 'storybook-sveltekit') and defines the component and its argument types, specifically a 'number' type for the 'value' argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Example from './Example.svelte';

const meta = {
  component: Example,
  argTypes: {
    value: { type: 'number' },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Active Button in TypeScript React
DESCRIPTION: Shows how to use the active prop to set the Button as active, which changes its background color. This is useful for indicating selected or current states.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_8

LANGUAGE: tsx
CODE:
```
<Button active>
  <FaceHappyIcon />Button
</Button>
```

----------------------------------------

TITLE: Initializing MSW in Storybook Preview (TypeScript)
DESCRIPTION: This snippet initializes MSW (Mock Service Worker) in Storybook's preview configuration using TypeScript. It imports the `initialize` and `mswLoader` functions from the `msw-storybook-addon` package and adds the MSW loader to the list of loaders, enabling MSW for all stories.  It also defines a `Preview` type from `@storybook/your-framework`. Replace `your-framework` with the framework you are using (e.g., `react-vite`, `vue3-vite`, `angular`, etc.).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-initialize.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

import { initialize, mswLoader } from 'msw-storybook-addon';

/*
 * Initializes MSW
 * See https://github.com/mswjs/msw-storybook-addon#configuring-msw
 * to learn how to customize it
 */
initialize();

const preview: Preview = {
  // ... rest of preview configuration
  loaders: [mswLoader], // 👈 Add the MSW loader to all stories
};

export default preview;
```

----------------------------------------

TITLE: Initializing Storybook Meta and First Story with Play Function (Web Components)
DESCRIPTION: This code initializes the Storybook meta object for the demo-my-component and defines the FirstStory with a play function that simulates user typing into an element with the test ID 'an-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_9

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

export default {
  component: 'demo-my-component',
};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FirstStory = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await userEvent.type(canvas.getByTestId('an-element'), 'example-value');
  },
};
```

----------------------------------------

TITLE: Storybook Init with Type
DESCRIPTION: This example shows how to define the framework to use for your Storybook instance (solid).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_48

LANGUAGE: shell
CODE:
```
storybook init --type solid
```

----------------------------------------

TITLE: Configuring Accessibility in Storybook Story for React (TypeScript)
DESCRIPTION: This example demonstrates a TypeScript-based React Storybook story configuration, using '@storybook/react' typing for strict structure. It includes advanced accessibility configuration for Axe rules, disables unwanted checks, and utilizes the 'manual' flag for accessibility testing control. The snippet is tailored for React projects that enforce TypeScript types on Storybook stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { MyComponent } from './MyComponent';

const meta: Meta<typeof MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<typeof MyComponent>;

export const ExampleStory: Story = {
  parameters: {
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Asynchronous Example Story (JS)
DESCRIPTION: This Storybook story demonstrates asynchronous interaction with a component using the 'play' function. It uses 'within' to scope queries to the component's canvas and 'findByRole' to wait for an element to be rendered before interacting with it.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-query-findby.md#_snippet_7

LANGUAGE: js
CODE:
```
/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const AsyncExample: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // Other steps

    // Waits for the component to be rendered before querying the element
    await canvas.findByRole('button', { name: / button label/i });
  },
};
```

----------------------------------------

TITLE: Using Storybook Play Function
DESCRIPTION: Demonstrates how to use Storybook's `play` function to test component scenarios that require user intervention. The `play` function executes after the story renders, allowing you to interact with and debug the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
No code provided in the original text.
```

----------------------------------------

TITLE: Writing MDX Documentation with Story Integration
DESCRIPTION: Example of an MDX file that combines markdown documentation with a Storybook story for a Checkbox component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/README.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
import { Meta, Story, Canvas } from '@storybook/addon-docs/blocks';
import * as CheckboxStories from './Checkbox.stories';

<Meta title="MDX/Checkbox" of={CheckboxStories} />

# Checkbox

With `MDX` we can include a story for `Checkbox` right in the middle of our
markdown documentation.

<Canvas>
  <Story of={CheckboxStories.Unchecked} />
</Canvas>
```

----------------------------------------

TITLE: Configuring Storybook Main with MDX
DESCRIPTION: Shows how to update the Storybook configuration file (main.js/ts/cjs) to enable custom documentation using MDX. This configuration allows Storybook to recognize and render MDX files as documentation pages.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import type { StorybookConfig } from '@storybook/core-common';
const config: StorybookConfig = {
  stories: ['../src/**/*.stories.@(js|jsx|ts|tsx)', '../src/**/*.mdx'],
  addons: [
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/addon-interactions',
    '@storybook/addon-mdx-gfm',
  ],
  framework: '@storybook/react-vite',
  docs: {
    autodocs: true,
  },
};
export default config;
```

----------------------------------------

TITLE: Update main Storybook config file
DESCRIPTION: Updates the .storybook/main.js|ts file to use the defineMain function. This involves replacing the StorybookConfig import and the config export with the new defineMain function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_6

LANGUAGE: Diff
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, nextjs, nextjs-vite)
+ import { defineMain } from '@storybook/your-framework/node';
- import { StorybookConfig } from '@storybook/your-framework';

+ export default defineMain({
- export const config: StorybookConfig = {
    // ...current config
+ });
- };
- export default config;
```

----------------------------------------

TITLE: Registering a Custom Storybook Addon in JavaScript/TypeScript
DESCRIPTION: This code snippet demonstrates how to register a custom addon with Storybook. It uses the addons.register method with a unique identifier ('my-organisation/my-addon') and a callback function that utilizes the API to select the 'Default' story in the current kind.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-selectincurrentkind.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
addons.register('my-organisation/my-addon', (api) => {
  api.selectInCurrentKind('Default');
});
```

----------------------------------------

TITLE: Running Storybook in Development Mode
DESCRIPTION: Starts Storybook in development mode, reflecting source code changes in real-time. This command should be executed from the root directory of your project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
storybook dev [options]
```

----------------------------------------

TITLE: Defining Svelte Storybook Configuration for Button Component (CSF)
DESCRIPTION: This code defines the Storybook configuration for a Svelte Button component using the Component Story Format (CSF). It imports the action function from 'storybook/actions' and the Button component. It then exports a default object containing the component and its arguments, including an onClick action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#_snippet_2

LANGUAGE: js
CODE:
```
import { action } from 'storybook/actions';

import Button from './Button.svelte';

export default {
  component: Button,
  args: {
    // 👇 Create an action that appears when the onClick event is fired
    onClick: action('on-click'),
  },
};
```

----------------------------------------

TITLE: Configuring Select Control in ArgTypes
DESCRIPTION: This snippet demonstrates how to configure a select control using the 'control' annotation in the argTypes field. It provides a drop-down list component to handle single value selection for the 'age' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_23

LANGUAGE: javascript
CODE:
```
argTypes: { age: { control: 'select', options: [20, 30, 40, 50] } }
```

----------------------------------------

TITLE: Conditional Controls - Toggle Example
DESCRIPTION: This example demonstrates how to conditionally display a collection of "advanced" settings only when the user toggles an "advanced" toggle. The visibility of the advanced settings is controlled by the state of the toggle.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_34

LANGUAGE: markdown
CODE:
```
<CodeSnippets path="component-story-conditional-controls-toggle.md" />
```

----------------------------------------

TITLE: Defining Component Args
DESCRIPTION: Defines args at the component level, which apply to all stories of that component unless overwritten. This is useful for setting default values for props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Example/Button',
  component: Button,
  argTypes: {
    backgroundColor: {
      control: 'color',
    },
  },
  args: {
    primary: true,
  },
};

```

----------------------------------------

TITLE: Implementing Storybook Play Function for Web Components in JavaScript
DESCRIPTION: This snippet demonstrates a Storybook play function for Web Components using JavaScript. It shows how to interact with a custom element and simulate form submission.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from 'storybook/test';

export default {
  component: 'my-component',
};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted = {
  play: async ({ args, canvasElement, step }) => {
    const canvas = within(canvasElement);

    await step('Enter email and password', async () => {
      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
      await userEvent.type(canvas.getByTestId('password'), 'supersecret');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button'));
    });
  },
};
```

----------------------------------------

TITLE: Using ArgsTable in MDX - JavaScript
DESCRIPTION: This code snippet shows how to use the ArgsTable block in MDX to display a props table for a component. It imports ArgsTable from @storybook/addon-docs and the component, then uses the ArgsTable component with the `of` prop set to the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// MyComponent.stories.mdx
import { ArgsTable } from '@storybook/addon-docs';
import { MyComponent } from './MyComponent';

# My Component!

<ArgsTable of={MyComponent} />
```

----------------------------------------

TITLE: Configuring Project-Level Parameters in Storybook
DESCRIPTION: This code snippet demonstrates how to define project-level parameters within the `.storybook/preview.js|ts` file. These parameters are applied to every story in the Storybook project, providing a global configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
const preview = {
  // 👇 Project-level parameters
  parameters: {
    layout: 'centered',
    demo: {
      demoProperty: 'a',
      demoArray: [1, 2],
    },
  },
  // ...
};
export default preview;
```

----------------------------------------

TITLE: Configuring Story Loading with Type Definition in Storybook
DESCRIPTION: Type definition for the 'stories' configuration field in Storybook, showing it can accept an array of strings/StoriesSpecifier or an async function that returns such an array.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-stories.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
| (string | StoriesSpecifier)[]
| async (list: (string | StoriesSpecifier)[]) => (string | StoriesSpecifier)[]
```

----------------------------------------

TITLE: Next.js Page Data Fetching After
DESCRIPTION: Demonstrates the recommended approach of extracting the component into a separate file for use in Storybook, allowing for easier testing and avoiding Webpack errors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_26

LANGUAGE: jsx
CODE:
```
// Use this component in your stories
import MyPage from './components/MyPage';

async function getData() {
  const res = await fetch(...);
  // ...
}

export default async function Page() {
  const data = await getData();

  return <MyPage {...data} />;
}
```

----------------------------------------

TITLE: Defining Button Stories with Svelte CSF
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using Svelte's Component Story Format (CSF) with the defineMeta function. It imports the necessary modules and defines primary, secondary, and tertiary stories with different labels and background colors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_9

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Primary"
  args={{
    backgroundColor: '#ff0',
    label: 'Button',
  }}
/>

<Story
  name="Secondary"
  args={{
    backgroundColor: '#ff0',
    label: '😄👍😍💯',
  }}
/>

<Story
  name="Tertiary"
  args={{
    backgroundColor:'#ff0',
    label: '📚📕📈🤓',
  }}
/>

```

----------------------------------------

TITLE: Configuring Theme Switching with Data Attributes in Storybook
DESCRIPTION: Diff showing how to use the withThemeByDataAttribute decorator to enable switching between light and dark modes using data attributes in the .storybook/preview.js file. This is useful when Tailwind is configured to use data attributes for theme toggling.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/tailwind.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
-import { Preview } from '@storybook/your-renderer';
+import { Preview, Renderer } from '@storybook/your-renderer';
+import { withThemeByDataAttribute } from '@storybook/addon-themes';

import '../src/index.css';


const preview: Preview = {
  parameters: { /* ... */ },
+ decorators: [
+  withThemeByDataAttribute<Renderer>({
+    themes: {
+      light: 'light',
+      dark: 'dark',
+    },
+    defaultTheme: 'light',
+    attributeName: 'data-theme',
+  }),
+ ]
};

export default preview;
```

----------------------------------------

TITLE: Customizing Webpack Configuration for Storybook in JavaScript
DESCRIPTION: This function modifies the webpack configuration for Storybook. It applies presets to get the webpack version and instance, logs this information, and returns the modified config. The function is asynchronous and uses ES6 syntax.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-versioned-webpack.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export function webpackFinal(config, { presets }) {
  const version = await presets.apply('webpackVersion');
  const instance = (await presets.apply('webpackInstance'))?.default;

  logger.info(`=> Running in webpack ${version}: ${instance}`);
  return config;
}
```

----------------------------------------

TITLE: Compose Story with Locale Override in Vue
DESCRIPTION: This snippet uses `composeStory` from `@storybook/vue3-vite` to create a new story, `PrimaryEnglish`, based on the `Primary` story and `meta` configuration. It overrides the global `locale` parameter to 'en', effectively creating an English version of the primary button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct-override-globals.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { composeStory } from '@storybook/vue3-vite';

import meta, { Primary } from './Button.stories';

export const PrimaryEnglish = composeStory(
  Primary,
  meta,
  { globals: { locale: 'en' } } // 👈 Project annotations to override the locale
);

export const PrimarySpanish = composeStory(Primary, meta, { globals: { locale: 'es' } });
```

----------------------------------------

TITLE: Generating LCOV Report from Storybook Coverage
DESCRIPTION: This snippet demonstrates how to generate an LCOV report from the JSON output of Storybook's coverage addon. It assumes the coverage data is in `coverage/storybook/coverage-storybook.json` and uses a tool like `genhtml` to create the report.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_14

LANGUAGE: bash
CODE:
```
{/* prettier-ignore-start */}

<CodeSnippets path="storybook-coverage-report-lcov.md" />

{/* prettier-ignore-end */}
```

----------------------------------------

TITLE: Initializing Storybook Meta for Component (TS)
DESCRIPTION: This code initializes the Storybook meta object for a component in TypeScript. It imports the Meta type from Storybook and the YourComponent. It then defines the component and sets the 'requiredFirst' sort order for controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { YourComponent } from './YourComponent';

const meta = {
  component: YourComponent,
  parameters: { controls: { sort: 'requiredFirst' } },
} satisfies Meta<typeof YourComponent>;

export default meta;
```

----------------------------------------

TITLE: Installing Storybook in Svelte/Vite Project
DESCRIPTION: This command initializes Storybook in a Svelte project using Vite. It sets up the necessary configurations and dependencies for Storybook to work with Svelte and Vite.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
npx storybook@latest init
```

----------------------------------------

TITLE: Configuring Storybook Parameters in JavaScript
DESCRIPTION: This JavaScript snippet configures Storybook parameters, including control matchers for color and date inputs, and sets a custom DocsContainer component for documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-custom-docs-container.md#_snippet_0

LANGUAGE: js
CODE:
```
import * as React from 'react';

import { DocsContainer } from '@storybook/addon-docs/blocks';

const ExampleContainer = ({ children, ...props }) => {
  return <DocsContainer {...props}>{children}</DocsContainer>;
};

export default {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
    docs: {
      container: ExampleContainer,
    },
  },
};
```

----------------------------------------

TITLE: Configure Storybook Preview with Custom Elements (TS)
DESCRIPTION: Configures Storybook to use a custom elements manifest, enabling proper rendering and interaction with Web Components. It also sets up control matchers for color and date properties to improve the user experience in the Storybook UI. Requires the '@storybook/web-components-vite' package and a 'custom-elements.json' file. Uses TypeScript for type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-elements-config.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/web-components-vite';

import { setCustomElementsManifest } from '@storybook/web-components-vite';

import customElements from '../custom-elements.json';

setCustomElementsManifest(customElements);

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/i,
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Initializing Button Story for React (JS)
DESCRIPTION: This code initializes a Storybook story for a React Button component using JavaScript. It imports the Button component and defines a default export with the component configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Text = {
  args: {},
};
```

----------------------------------------

TITLE: Creating List Component Stories with Solid (JavaScript)
DESCRIPTION: This code defines Storybook stories for a Solid List component. It imports the List and ListItem components, configures metadata for Storybook, and defines stories for rendering empty, single-item, and multi-item lists using JSX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_5

LANGUAGE: js
CODE:
```
import { List } from './List';
import { ListItem } from './ListItem';

export default {
  component: List,
};

export const Empty = {};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 */
```

----------------------------------------

TITLE: Test Runner Snapshot Configuration
DESCRIPTION: Configuration setup for enabling snapshot testing with Storybook test-runner, defining a postVisit hook to capture DOM snapshots after story rendering.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/snapshot-testing.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  async postVisit(page, context) {
    const root = page.locator('#storybook-root');
    const snapshot = await root.innerHTML();
    await expect(snapshot).toMatchSnapshot();
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Preview with Theme Addon (JavaScript)
DESCRIPTION: This JavaScript snippet configures the Storybook preview to use the 'addon-themes' addon for applying themes based on a data attribute. It imports the necessary modules, defines themes (light and dark), sets the default theme to 'light', and specifies 'data-theme' as the attribute name to watch for theme changes. It also imports the global CSS file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-data-attribute-decorator.md#_snippet_0

LANGUAGE: js
CODE:
```
import { withThemeByDataAttribute } from '@storybook/addon-themes';

import '../src/index.css'; // Your application's global CSS file

const preview = {
  decorators: [
    withThemeByDataAttribute({
      themes: {
        light: 'light',
        dark: 'dark',
      },
      defaultTheme: 'light',
      attributeName: 'data-theme',
    }),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: This JavaScript configuration file sets up Storybook, specifying the framework, story locations, and builder options using Vite. It exports a default configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-builder.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    builder: {
      name: '@storybook/builder-vite',
      options: {
        viteConfigPath: '../../../vite.config.js',
      },
    },
  },
};
```

----------------------------------------

TITLE: Options Parameter Type Definition
DESCRIPTION: This TypeScript code defines the structure of the `options` parameter used in Storybook configuration. It includes an optional `storySort` property, which can be either a `StorySortConfig` object or a `StorySortFn` function, allowing customization of story sorting in the Storybook UI. This parameter can only be applied at the project level.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
{
  storySort?: StorySortConfig | StorySortFn;
}
```

----------------------------------------

TITLE: Configuring Storybook with Vite Builder
DESCRIPTION: This JavaScript configuration file sets up Storybook to use the Vite builder, specifies the locations of story files (including MDX and JavaScript/TypeScript files), and includes the '@storybook/addon-docs' addon for documentation support.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-register.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: ['@storybook/addon-docs'],
  core: {
    builder: '@storybook/builder-vite', // 👈 The builder enabled here.
  },
};
```

----------------------------------------

TITLE: Configure Storybook with Vite Framework (JS)
DESCRIPTION: This JavaScript snippet configures Storybook to use the Vite framework and specifies the '@storybook/addon-react-native-web' addon. It exports a default configuration object for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-native-web-vite-add-framework.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  addons: [
    '@storybook/addon-react-native-web', // 👈 Remove the addon
  ],
  // Replace @storybook/react-webpack5 with the Vite framework
  framework: '@storybook/react-native-web-vite',
};
```

----------------------------------------

TITLE: Handle preview.js Exports
DESCRIPTION: Shows how to handle exports from the `preview.js` file, specifically decorators. Storybook converts these exports into internal API calls via virtual module entry, such as `addDecorator()`, and the builder must provide a similar implementation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
// .storybook/preview.js

import { addDecorator } from '@storybook/client-api';

addDecorator(myDecorator);

export const decorators = [myDecorator];
```

----------------------------------------

TITLE: Defining Button Story with Layout (JS/JSX)
DESCRIPTION: This code defines a Storybook story for a Button component with a centered layout. It imports the Button component and exports a default object containing the component, along with a named export 'WithLayout' that sets the layout parameter to 'centered'. This example is applicable to both JavaScript and JSX files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const WithLayout = {
  parameters: {
    layout: 'centered',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Component (CSF) - TS
DESCRIPTION: This code configures the Storybook metadata for a Svelte component using the Component Story Format (CSF) with TypeScript. It imports the component and defines the meta object with component details and argTypes, specifically hiding the 'foo' property from the UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import YourComponent from './YourComponent.svelte';

  const { Story } = defineMeta({
    component: YourComponent,
    argTypes: {
      // foo is the property we want to remove from the UI
      foo: {
        control: false,
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Initializing Storybook Meta and Combined Stories with Play Function (Angular)
DESCRIPTION: This code defines the CombinedStories with a play function that executes FirstStory and SecondStory before typing into 'another-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_2

LANGUAGE: ts
CODE:
```
export const CombinedStories: Story = {
  play: async ({ context, canvasElement }) => {
    const canvas = within(canvasElement);

    // Runs the FirstStory and Second story play function before running this story's play function
    await FirstStory.play(context);
    await SecondStory.play(context);
    await userEvent.type(canvas.getByTestId('another-element'), 'random value');
  },
};
```

----------------------------------------

TITLE: Configure Storybook URL in Vitest workspace
DESCRIPTION: This JavaScript code configures the Vitest workspace to use the `storybookTest` plugin. It sets the `storybookScript` to start Storybook in CI mode and the `storybookUrl` to the value of the `SB_URL` environment variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
export default defineWorkspace([
  // ...
  {
    // ...
    {
      plugins: [
        storybookTest({
          // ...
          storybookScript: 'yarn storybook --ci',
          storybookUrl: process.env.SB_URL
        }),
      ],
    },
  },
])
```

----------------------------------------

TITLE: Styled Components Theme Implementation
DESCRIPTION: Examples of using theme variables with styled-components in object notation and template literals.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/theming.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { styled } from '@storybook/theming';

const Button = styled.button({
  borderRadius: 3,
  border: '1px solid #eee',
  background: props.theme.background.app,
  color: props.theme.color.secondary,
  display: 'inline-block',
  padding: 15,
  margin: 5,
});
```

LANGUAGE: javascript
CODE:
```
import { styled } from '@storybook/theming';

const Button = styled.button`
  border-radius: ${props => props.theme.appBorderRadius}px;
  border: 1px solid ${props => props.theme.appBorderColor};
  background: ${props => props.theme.appBg};
  color: ${props => props.theme.color.secondary};
  display: inline-block;
  padding: 15px;
  margin: 5px;
`;
```

----------------------------------------

TITLE: Vite Configuration Update
DESCRIPTION: This JavaScript snippet illustrates how to update the Vite configuration file (`vite.config.js` or `vite.config.ts`) to ensure compatibility with Vite 5. It emphasizes the importance of using Vite 5 compatible plugins.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_4

LANGUAGE: javascript
CODE:
```
// vite.config.js or vite.config.ts
export default {
  // ... your other config
  // Make sure you're using Vite 5 compatible plugins
};
```

----------------------------------------

TITLE: Using moduleMetadata Decorator
DESCRIPTION: This code shows how to use the moduleMetadata decorator in Storybook to supply Angular directives and modules to components. It configures imports, declarations, and providers for the component's stories, either globally or for specific stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_7

LANGUAGE: ts
CODE:
```
import { Meta, moduleMetadata, StoryObj } from '@storybook/angular';

import { YourComponent } from './your.component';

const meta: Meta<YourComponent> = {
  component: YourComponent,
  decorators: [
    // Apply metadata to all stories
    moduleMetadata({
      // import necessary ngModules or standalone components
      imports: [...],
      // declare components that are used in the template
      declarations: [...],
      // List of providers that should be available to the root component and all its children.
      providers: [...],
    }),
  ],
};
export default meta;
type Story = StoryObj<YourComponent>;

export const Base: Story = {};

export const WithCustomProvider: Story = {
  decorators: [
    // Apply metadata to a specific story
    moduleMetadata({
      imports: [...],
      declarations: [...],
      providers: [...],
    }),
  ],
};
```

----------------------------------------

TITLE: Configuring Web Components Button Story (TS)
DESCRIPTION: This code configures a Storybook story for a Web Components Button component using TypeScript. It imports the necessary modules, defines the component metadata, and sets up action handling for 'mouseover' and 'click .btn' events. The component is referenced by its tag name 'demo-button'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

import { withActions } from 'storybook/actions/decorator';

const meta: Meta = {
  component: 'demo-button',
  parameters: {
    actions: {
      handles: ['mouseover', 'click .btn'],
    },
  },
  decorators: [withActions],
};

export default meta;
```

----------------------------------------

TITLE: Configuring Accessibility Parameters for Component Stories in TypeScript
DESCRIPTION: This code configures accessibility parameters for a Storybook story using TypeScript. It defines rules to include or exclude specific accessibility checks, configures Axe's options, and sets global accessibility parameters. It imports Meta from '@storybook/your-framework' and MyComponent from a local file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_9

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/your-framework';

import { MyComponent } from './MyComponent';

const meta: Meta<typeof MyComponent> = {
  component: MyComponent,
  parameters: {
    a11y: {
      // Optional selector to inspect
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      manual: true,
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Importing Header Stories and Defining LoggedIn Story - TS
DESCRIPTION: This TypeScript code imports stories from a Header component and defines a LoggedIn story for a Page component in Storybook. It sets the component and merges arguments from the Header's LoggedIn story. It also defines the Meta and StoryObj types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_13

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

// 👇 Imports all Header stories
import * as HeaderStories from './Header.stories';

const meta: Meta = {
  component: 'demo-page',
};

export default meta;
type Story = StoryObj;

export const LoggedIn: Story = {
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};
```

----------------------------------------

TITLE: Defining Svelte Button Story with CSF
DESCRIPTION: This snippet defines a Storybook story for a Svelte Button component using Component Story Format (CSF). It imports the necessary modules and defines a primary story with specified arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_13

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';
	const { Story } = defineMeta({
		component: Button,
	});
</script>

<Story name="Primary" args={{ primary: true, label: 'Button' }} />
```

----------------------------------------

TITLE: Defining Button Stories in Svelte
DESCRIPTION: This code defines Storybook stories for a Svelte Button component, including a Primary story. It imports the defineMeta function from '@storybook/addon-svelte-csf' and the Button component from './Button.svelte'. The story configures the button's appearance through the 'args' property, setting properties like 'backgroundColor' and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_7

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Primary"
  args={{
    backgroundColor: '#ff0',
    label: 'Button',
  }}
/>

<Story
  name="Secondary"
```

----------------------------------------

TITLE: Adding A11y Addon in JavaScript Configuration
DESCRIPTION: Shows how to include the Storybook accessibility addon in the main.js configuration file. This enables accessibility testing features in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-example-addon.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  addons: [
    // Other Storybook addons
    '@storybook/addon-a11y',
  ],
};
```

----------------------------------------

TITLE: Add Jest addon to Storybook configuration
DESCRIPTION: Registers the Jest addon in the Storybook main configuration file. This step is essential for enabling the addon's functionality within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/jest/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  addons: ['@storybook/addon-jest'],
};
```

----------------------------------------

TITLE: Using applicationConfig Decorator
DESCRIPTION: This code demonstrates how to use the applicationConfig decorator in Storybook to provide application-wide providers to components. It imports necessary modules and providers, including BrowserAnimationsModule, and configures them for the component's stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { Meta, applicationConfig, StoryObj } from '@storybook/angular';

import { BrowserAnimationsModule, provideAnimations } from '@angular/platform-browser/animations';
import { importProvidersFrom } from '@angular/core';

import { ChipsModule } from './angular-src/chips.module';

const meta: Meta<ChipsModule> = {
  component: ChipsModule,
  decorators: [
    // Apply application config to all stories
    applicationConfig({
      // List of providers and environment providers that should be available to the root component and all its children.
      providers: [
        ...
        // Import application-wide providers from a module
        importProvidersFrom(BrowserAnimationsModule)
        // Or use provide-style functions if available instead, e.g.
        provideAnimations()
      ],
    }),
  ],
};

export default meta;
type Story = StoryObj<ChipsModule>;

export const WithCustomApplicationProvider: Story = {
  render: () => ({
    // Apply application config to a specific story
    applicationConfig: {
      // The providers will be merged with the ones defined in the applicationConfig decorator's providers array of the global meta object
      providers: [...],
    }
  })
}
```

----------------------------------------

TITLE: Configuring Svelte Button Story with CSF (TS)
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using the Component Story Format (CSF) with TypeScript. It imports the necessary modules, defines the component metadata, sets up action handling for 'mouseover' and 'click .btn' events, and applies decorators.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  import { withActions } from 'storybook/actions/decorator';

  const { Story } = defineMeta({
    component: Button,
    parameters: {
      actions: {
        handles: ['mouseover', 'click .btn'],
      },
    },
    decorators: [withActions],
  });
</script>
```

----------------------------------------

TITLE: Configuring Storybook Main Settings in TypeScript
DESCRIPTION: This snippet shows the TypeScript equivalent for configuring Storybook's `.storybook/main.ts` file. It imports the `StorybookConfig` type for type safety (from a placeholder `@storybook/your-framework`), specifies the framework (also a placeholder `@storybook/your-framework`), defines the location of story files using glob patterns (`../src/**/*.mdx`, `../src/**/*.stories.@(js|jsx|mjs|ts|tsx)`), and disables the "What's New" notifications via the `core.disableWhatsNewNotifications` option. The configuration object is typed using `StorybookConfig`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-update-notifications.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    disableWhatsNewNotifications: true,
  },
};

export default config;
```

----------------------------------------

TITLE: Registering Storybook Addon Links
DESCRIPTION: Register the Storybook Links addon in your `.storybook/main.js` file. This enables the addon within your Storybook configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  addons: ['@storybook/addon-links'],
};
```

----------------------------------------

TITLE: Configuring Storybook Addons in main.js
DESCRIPTION: Adds the Storybook Docs addon to the list of addons in the .storybook/main.js configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  // other settings
  addons: ['@storybook/addon-docs']
}
```

----------------------------------------

TITLE: Configuring Storybook Documentation Preview Script
DESCRIPTION: Configuration for package.json to add a script that runs Storybook in documentation preview mode using the --docs flag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/build-documentation.mdx#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "storybook-docs": "storybook dev --docs"
  }
}
```

----------------------------------------

TITLE: Configuring Storybook Test Runner with Accessibility Testing (TypeScript)
DESCRIPTION: TypeScript implementation of Storybook test runner configuration with proper type definitions. Sets up automated accessibility testing using axe-playwright with pre-visit and post-visit hooks for axe injection and accessibility checking.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-configure.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';
import { getStoryContext } from '@storybook/test-runner';

import { injectAxe, checkA11y, configureAxe } from 'axe-playwright';

/*
 * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api
 * to learn more about the test-runner hooks API.
 */
const config: TestRunnerConfig = {
  async preVisit(page) {
    await injectAxe(page);
  },
  async postVisit(page, context) {
    // Get the entire context of a story, including parameters, args, argTypes, etc.
    const storyContext = await getStoryContext(page, context);

    // Apply story-level a11y rules
    await configureAxe(page, {
      rules: storyContext.parameters?.a11y?.config?.rules,
    });

    const element = storyContext.parameters?.a11y?.element ?? 'body';
    await checkA11y(page, element, {
      detailedReport: true,
      detailedReportOptions: {
        html: true,
      },
    });
  },
};

export default config;
```

----------------------------------------

TITLE: Setting Default Storybook Parameters in TypeScript
DESCRIPTION: This TypeScript snippet sets the default parameters for Storybook stories. It imports the Preview type from the Storybook framework and configures the layout to be 'centered'. Replace 'your-framework' with the specific framework being used (e.g., react-vite, vue3-vite, angular).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-layout-param.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    layout: 'centered',
  },
};

export default preview;
```

----------------------------------------

TITLE: Mocking SvelteKit Imports in Storybook (TypeScript)
DESCRIPTION: This code snippet demonstrates how to mock SvelteKit imports within a Storybook story using the `sveltekit_experimental` parameter. It defines mock values for the `page`, `navigating`, and `updated` stores, allowing components that rely on these stores to be tested in the Storybook environment. This approach is useful for working with SvelteKit modules that are not fully supported in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
export const MyStory = {
  parameters: {
    sveltekit_experimental: {
      stores: {
        page: {
          data: {
            test: 'passed',
          },
        },
        navigating: {
          route: {
            id: '/storybook',
          },
        },
        updated: true,
      },
    },
  },
};
```

----------------------------------------

TITLE: Registering Custom Tab Addon in Storybook Manager
DESCRIPTION: Implements a basic Storybook tab addon that renders a custom React component. Uses the addons.register() method to initialize the addon and addons.add() to create a new tab with specified type, title, and render function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-tab-example.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { addons, types } from 'storybook/manager-api';

addons.register('my-addon', () => {
  addons.add('my-addon/tab', {
    type: types.TAB,
    title: 'Example Storybook tab',
    render: () => (
      <div>
        <h2>I'm a tabbed addon in Storybook</h2>
      </div>
    ),
  });
});
```

----------------------------------------

TITLE: Setting Dark Theme for Storybook Docs (TS)
DESCRIPTION: This TypeScript snippet configures the Storybook preview to use the dark theme for documentation. It imports the 'themes' object from 'storybook/theming' and sets the 'docs.theme' parameter to 'themes.dark'. It also imports the Preview type from '@storybook/your-framework'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-docs-dark-theme.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

import { themes } from 'storybook/theming';

const preview: Preview = {
  parameters: {
    docs: {
      theme: themes.dark,
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Setting Angular Framework in Storybook (TS)
DESCRIPTION: This TypeScript snippet configures Storybook to use the Angular framework by setting the 'framework' property to '@storybook/angular' within the Storybook configuration object. It imports the StorybookConfig type from '@storybook/angular' for type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/angular-add-framework.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { StorybookConfig } from '@storybook/angular';

const config: StorybookConfig = {
  // ...
  framework: '@storybook/angular', // 👈 Add this
};

export default config;
```

----------------------------------------

TITLE: Configuring ArgTypes in Storybook
DESCRIPTION: This code defines the argTypes object for a Storybook component, configuring a 'label' property with type information, default values, custom descriptions, and table display settings. The control type is set to null to disable interactive controls for this property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-merged-argtypes.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const argTypes = {
  label: {
    name: 'label',
    type: { name: 'string', required: false },
    defaultValue: 'Hello',
    description: 'overwritten description',
    table: {
      type: {
        summary: 'something short',
        detail: 'something really really long',
      },
      defaultValue: { summary: 'Hello' },
    },
    control: {
      type: null,
    },
  },
};
```

----------------------------------------

TITLE: Implementing a Vite Plugin for URL Collection Processing in Storybook
DESCRIPTION: A Vite plugin that transforms URL collection files into Storybook-compatible stories. It uses AST parsing to extract named exports and convert them into Svelte components that can render as links.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import * as acorn from 'acorn';
import * as walk from 'acorn-walk';
import { defineConfig, type Plugin } from 'vite';
import { svelte } from '@sveltejs/vite-plugin-svelte';

function StorybookUrlLinksPlugin(): Plugin {
  return {
    name: 'storybook-url-links',
    async transform(code: string, id: string) {
      if (id.endsWith('.url.js')) {
        const ast = acorn.parse(code, {
          ecmaVersion: 2020,
          sourceType: 'module',
        });

        const namedExports: string[] = [];
        let defaultExport = 'export default {};';

        walk.simple(ast, {
          // Extracts the named exports, those represent our stories, and for each of them, we'll return a valid Svelte component.
          ExportNamedDeclaration(node: acorn.ExportNamedDeclaration) {
            if (
              node.declaration &&
              node.declaration.type === 'VariableDeclaration'
            ) {
              node.declaration.declarations.forEach((declaration) => {
                if ('name' in declaration.id) {
                  namedExports.push(declaration.id.name);
                }
              });
            }
          },
          // Preserve our default export.
          ExportDefaultDeclaration(node: acorn.ExportDefaultDeclaration) {
            defaultExport = code.slice(node.start, node.end);
          },
        });

        return {
          code: `
            import RedirectBack from '../../.storybook/components/RedirectBack.svelte';
            ${namedExports
              .map(
                (name) =>
                  `export const ${name} = () => new RedirectBack();`
              )
              .join('\n')}
            ${defaultExport}
          `,
          map: null,
        };
      }
    },
  };
}

export default defineConfig({
  plugins: [StorybookUrlLinksPlugin(), svelte()],
})
```

----------------------------------------

TITLE: Running Storybook Doctor with npm
DESCRIPTION: Executes the Storybook doctor command using npx to diagnose and fix issues in a Storybook installation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-doctor.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@latest doctor
```

----------------------------------------

TITLE: Configuring Storybook Test Runner in JavaScript
DESCRIPTION: JavaScript configuration for Storybook test runner that implements post-visit snapshot testing. It captures the innerHTML of the story root element (#storybook-root) and compares it against stored snapshots.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-dom-snapshot-testing.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  async postVisit(page, context) {
    // the #storybook-root element wraps the story. In Storybook 6.x, the selector is #root
    const elementHandler = await page.$('#storybook-root');
    const innerHTML = await elementHandler.innerHTML();
    expect(innerHTML).toMatchSnapshot();
  },
};
```

----------------------------------------

TITLE: Configuring Vue Button Component Stories with CSF in TypeScript
DESCRIPTION: This TypeScript code configures Storybook stories for a Vue Button component using Component Story Format (CSF). It defines the component and three stories: Primary, Secondary, and Tertiary, each with different labels and background colors, utilizing render functions and templates to render the Button component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_12

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof Button>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: () => ({
    components: { Button },
    template: '<Button backgroundColor="#ff0" label="Button" />',
  }),
};

export const Secondary: Story = {
  render: () => ({
    components: { Button },
    template: '<Button backgroundColor="#ff0" label="😄👍😍💯" />',
  }),
};

export const Tertiary: Story = {
  render: () => ({
    components: { Button },
    template: '<Button backgroundColor="#ff0" label="📚📕📈🤓" />',
  }),
};
```

----------------------------------------

TITLE: Update Storybook Framework to Next.js in JavaScript
DESCRIPTION: This snippet updates the Storybook configuration to use the Next.js framework. It replaces the existing framework, '@storybook/react-webpack5', with '@storybook/nextjs'. This change configures Storybook to work seamlessly with Next.js projects.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-add-framework.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  // framework: '@storybook/react-webpack5', 👈 Remove this
  framework: '@storybook/nextjs', // 👈 Add this
};
```

----------------------------------------

TITLE: Configuring SWC JSX Transform in Storybook
DESCRIPTION: Configuration for enabling JSX transform with SWC builder in React-based Storybook projects. This snippet shows how to properly configure the SWC compiler to handle JSX runtime imports.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/compilers.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  framework: {
    name: '@storybook/react-webpack5',
    options: {}
  },
  swc: () => ({
    jsc: {
      transform: {
        react: {
          runtime: 'automatic'
        }
      }
    }
  })
}
```

----------------------------------------

TITLE: Builder Configuration Type Definition
DESCRIPTION: TypeScript type definition for configuring Storybook's builder options, supporting both Vite and Webpack5 builders.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-core.mdx#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
| '@storybook/builder-vite' | '@storybook/builder-webpack5'
| {
    name: '@storybook/builder-vite' | '@storybook/builder-webpack5';
    options?: BuilderOptions;
  }
```

----------------------------------------

TITLE: Simulating Form Submission with Play Function in React
DESCRIPTION: This story simulates a user submitting a form by entering credentials and clicking the submit button. It uses the `play` function to interact with the component and `userEvent` to simulate user input. It then asserts that the `onSubmit` argument was called using `waitFor` and `expect`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-play-function.md#_snippet_5

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, waitFor, within, expect, fn } from 'storybook/test';

import { Form } from './Form';

const meta = {
  component: Form,
  args: {
    // 👇 Use `fn` to spy on the onSubmit arg
    onSubmit: fn(),
  },
} satisfies Meta<typeof Form>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted: Story = {
  play: async ({ args, canvasElement, step }) => {
    const canvas = within(canvasElement);

    await step('Enter credentials', async () => {
      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
      await userEvent.type(canvas.getByTestId('password'), 'supersecret');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button'));
    });

    // 👇 Now we can assert that the onSubmit arg was called
    await waitFor(() => expect(args.onSubmit).toHaveBeenCalled());
  },
};
```

----------------------------------------

TITLE: Configuring ArgTypes for Gizmo Web Component in TS
DESCRIPTION: This code defines the argument types for the Gizmo web component in a Storybook story using TypeScript. It imports the Meta type from the Storybook web-components-vite framework. The argTypes object configures controls for various properties of the Gizmo component, such as canRotate, width, height, and others, allowing users to interactively modify these properties in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'gizmo-element',
  argTypes: {
    canRotate: {
      control: 'boolean',
    },
    width: {
      control: { type: 'number', min: 400, max: 1200, step: 50 },
    },
    height: {
      control: { type: 'range', min: 200, max: 1500, step: 50 },
    },
    rawData: {
      control: 'object',
    },
    coordinates: {

```

----------------------------------------

TITLE: Opt-in to react-docgen-typescript in Storybook
DESCRIPTION: This code snippet shows how to opt-in to `react-docgen-typescript` for React component analysis in Storybook 8.0 by configuring the `typescript.reactDocgen` option in `.storybook/main.js`. This is useful if you need the full fidelity of `react-docgen-typescript` over the default `react-docgen`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_64

LANGUAGE: javascript
CODE:
```
export default {
  typescript: {
    reactDocgen: "react-docgen-typescript",
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Framework in TypeScript
DESCRIPTION: This TypeScript snippet imports the StorybookConfig type and exports a configuration object for Storybook, tailored for TypeScript projects. It outlines the same framework and story paths as the JavaScript version, with an option to disable tree shaking in the build test. Dependencies include the '@storybook/your-framework' and paths should point to valid story files. The placeholder value needs to be replaced by an actual framework identifier.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-treeshaking.md#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  build: {
    test: {
      disableTreeShaking: false,
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Initializing Storybook Story with Play Function in Svelte (CSF)
DESCRIPTION: This code defines a Storybook story for a Svelte component using the Component Story Format (CSF). It imports necessary modules, defines the meta information for the component, and uses the play function to simulate user interactions. The play function retrieves the component's root element using canvasElement and simulates typing into an element and clicking a button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, within } from 'storybook/test';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<!--
  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
  to learn more about using the canvasElement to query the DOM
-->
<Story
  name="ExampleStory"
  play={async ({ canvasElement }) => {
    // Assigns canvas to the component root element
    const canvas = within(canvasElement);

    // Starts querying from the component's root element
    await userEvent.type(canvas.getByTestId('example-element'), 'something');
    await userEvent.click(canvas.getByRole('button'));
  }} />
```

----------------------------------------

TITLE: Configuring Accessibility Parameters in Storybook Svelte
DESCRIPTION: This snippet demonstrates how to configure accessibility parameters within a Storybook story using the a11y addon. It shows how to define the element to inspect, configure rules, and set Axe's options. The configuration is applied within the `parameters.a11y` section of the story's metadata.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_6

LANGUAGE: typescript
CODE:
```
a11y: {
  // Optional selector to inspect
  element: 'body',
  config: {
    rules: [
      {
        // The autocomplete rule will not run based on the CSS selector provided
        id: 'autocomplete-valid',
        selector: '*:not([autocomplete="nope"])',
      },
      {
        // Setting the enabled option to false will disable checks for this particular rule on all stories.
        id: 'image-alt',
        enabled: false,
      },
    ],
  },
  /*
   * Axe's options parameter
   * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
   * to learn more about the available options.
  */
  options: {},
}
```

----------------------------------------

TITLE: Configuring Storybook with main.js
DESCRIPTION: This code snippet demonstrates the basic structure of a `main.js` file in Storybook. It defines the `stories` array, which specifies the location of story files using a glob pattern, and the `addons` array, which lists the addons to be used in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_243

LANGUAGE: javascript
CODE:
```
module.exports = {
  stories: ["../**/*.stories.js"],
  addons: ["@storybook/addon-knobs"]
};
```

----------------------------------------

TITLE: Simulating User Input and Interactions in Storybook (Svelte)
DESCRIPTION: This snippet demonstrates how to simulate user input and interactions within a Storybook story using Svelte. It uses `userEvent` to type into an input field and click a submit button, and `waitFor` to ensure the component updates as expected.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#_snippet_5

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, waitFor, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleAsyncStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const Input = canvas.getByLabelText('Username', {
      selector: 'input',
    });

    await userEvent.type(Input, 'WrongInput', {
      delay: 100,
    });

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const Submit = canvas.getByRole('button');
    await userEvent.click(Submit);

    await waitFor(async () => {
      await userEvent.hover(canvas.getByTestId('error'));
    });
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Preview (TypeScript)
DESCRIPTION: Configures Storybook preview settings using TypeScript, including control matchers for identifying color and date properties, and sets the documentation theme to dark.  It imports the Preview type from the Storybook framework and exports the preview configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-override-theme.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

import { themes, ensure } from 'storybook/theming';

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
    docs: {
      theme: ensure(themes.dark), // The replacement theme to use
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Mocking Successful GraphQL Query with MSW - Typescript
DESCRIPTION: This snippet defines a Storybook story that mocks a successful GraphQL query using MSW. It intercepts the 'AllInfoQuery' and returns a predefined 'TestData' object as the response. This allows testing the component's behavior when receiving valid data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { graphql, HttpResponse } from 'msw';

//👇The mocked data that will be used in the story
const TestData = {
  user: {
    userID: 1,
    name: 'Someone',
  },
  document: {
    id: 1,
    userID: 1,
    title: 'Something',
    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    status: 'approved',
  },
  subdocuments: [
    {
      id: 1,
      userID: 1,
      title: 'Something',
      content:
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
      status: 'approved',
    },
  ],
};

export const MockedSuccess: Story = {
  parameters: {
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', () => {
          return HttpResponse.json({
            data: {
              allInfo: {
                ...TestData,
              },
            },
          });
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Story Decorator with Context Usage
DESCRIPTION: Example showing how to create a parameterized decorator that applies different layouts based on story parameters
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/decorators.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export const decorators = [
  (Story, context) => {
    switch (context.parameters.pageLayout) {
      case 'page': {
        return (
          <div className="page">
            <div className="content">
              <Story />
            </div>
          </div>
        );
      }
      case 'page-mobile': {
        return (
          <div className="page-mobile">
            <div className="content">
              <Story />
            </div>
          </div>
        );
      }
      default: {
        return <Story />;
      }
    }
  },
];
```

----------------------------------------

TITLE: Remove a11y 'todo' parameter after fixing issues
DESCRIPTION: This snippet shows how to remove the a11y parameter after fixing accessibility issues in a component. This ensures that the component is fully tested against accessibility standards.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Example/Button',
  component: Button,
};

```

----------------------------------------

TITLE: Configuring Color Control in ArgTypes
DESCRIPTION: This snippet shows how to configure a color control using the 'control' annotation in the argTypes field. It provides a color picker component to handle color values, including a set of color presets for the 'color' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_26

LANGUAGE: javascript
CODE:
```
argTypes: { color: { control: { type: 'color', presetColors: ['red', 'green']} } }
```

----------------------------------------

TITLE: Configuring Storybook Decorators with React
DESCRIPTION: This JavaScript snippet configures Storybook decorators for a React project. It imports React, a navigation story, and a global context provider. It defines a decorator, AppDecorator, which wraps stories with the GlobalContainerContext.Provider, providing a context object to the stories. This ensures that the stories have access to necessary data and render correctly within the Storybook environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-global.md#_snippet_0

LANGUAGE: js
CODE:
```
import React from 'react';

import { normal as NavigationNormal } from '../components/Navigation.stories';

import GlobalContainerContext from '../components/lib/GlobalContainerContext';

const context = {
  NavigationContainer: NavigationNormal,
};

const AppDecorator = (storyFn) => {
  return (
    <GlobalContainerContext.Provider value={context}>{storyFn()}</GlobalContainerContext.Provider>
  );
};

export default { decorators: [AppDecorator] };
```

----------------------------------------

TITLE: Enabling Webpack Debugging in Angular Storybook
DESCRIPTION: Enables debugging of the Webpack configuration used by Storybook. This can be useful for troubleshooting build issues.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_13

LANGUAGE: JSON
CODE:
```
{"debugWebpack": true}
```

----------------------------------------

TITLE: Importing Canvas Component
DESCRIPTION: Basic import statement for the Canvas component from Storybook addon-docs blocks.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-canvas.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { Canvas } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Initializing Storybook Meta for Angular Component
DESCRIPTION: This code initializes the Storybook meta object for an Angular component. It imports the Meta type from Storybook Angular and the YourComponent. It then defines the component and sets the 'requiredFirst' sort order for controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from  from '@storybook/angular';

import { YourComponent } from './YourComponent.component';

const meta: Meta<YourComponent> = {
  component: YourComponent,
  parameters: { controls: { sort: 'requiredFirst' } },
};

export default meta;
```

----------------------------------------

TITLE: Mocking Date in Story Before Each - Angular
DESCRIPTION: This example demonstrates how to use the `mockdate` package to mock the `Date` object within a Storybook story's `beforeEach` function. It sets a specific date before the story runs and resets it afterward using a cleanup function. This ensures consistent rendering of the story regardless of the current date.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import MockDate from 'mockdate';

// ...rest of story file

export const ChristmasUI = {
  // 👇 Set the value of Date for this story
  async beforeEach() {
    MockDate.set('2024-12-25');

    // 👇 Reset the Date after this test runs
    return () => {
      MockDate.reset();
    };
  }
  async play({ canvasElement }) {
    // ... This will run with the mocked Date
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (CSF, TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte component, MyComponent, using CSF and Typescript. It defines a story named 'WithAnImage' that renders the component with specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_8

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

// Assume image.png is located in the "public" directory.
export const WithAnImage: Story = {
  render: () => ({
    Component: MyComponent,
    props: {
      src: '/image.png',
      alt: 'my image',
    },
  }),
};

```

----------------------------------------

TITLE: Writing a Preset Addon
DESCRIPTION: This code snippet demonstrates how to write your own preset addon. Storybook preset addons are grouped collections of `babel`, `webpack`, and `addons` configurations to integrate Storybook and other technologies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-types.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
<CodeSnippets path="storybook-preset-full-config-object.md" />
```

----------------------------------------

TITLE: Configuring Button Component Metadata with Decorator (Vue, TypeScript)
DESCRIPTION: This TypeScript snippet configures the metadata for a Button component in Storybook, specifically for a Vue renderer. It imports the Button component and defines a decorator that applies a margin around the story using a template. The metadata includes the component itself and the decorator function, utilizing TypeScript's type annotations for better type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_12

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = {
  component: Button,
  decorators: [() => ({ template: '<div style="margin: 3em;"><story /></div>' })],
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Defining argTypes with options in Web Components Storybook (TS)
DESCRIPTION: This snippet demonstrates how to define `argTypes` with options in a Web Components Storybook story using TypeScript. It configures `propertyA` and `propertyB` with predefined options for selection in the Storybook UI. The `control` property is used to specify the type of control for `propertyA`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_15

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

const meta: Meta = {
  component: 'custom-component',
  //👇 Creates specific argTypes with options
  argTypes: {
    propertyA: {
      options: ['Item One', 'Item Two', 'Item Three'],
      control: { type: 'select' }, // Automatically inferred when 'options' is defined
    },
    propertyB: {
      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],
    },
  },
};
```

----------------------------------------

TITLE: Configuring ArgTypes in Storybook Preview (JavaScript)
DESCRIPTION: This JavaScript snippet configures the global argTypes for Storybook stories. It defines a 'label' argument with a text control and a custom description, which will be available for all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-preview.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  argTypes: {
    // 👇 All stories expect a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for React Component (JS)
DESCRIPTION: This code initializes a Storybook story for a React component named MyComponent using JavaScript. It imports the component and an image file, then defines a story that renders the component with the image, passing the image source and alt text as props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_1

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

import imageFile from './static/image.png';

export default {
  component: MyComponent,
};

const image = {
  src: imageFile,
  alt: 'my image',
};

export const WithAnImage = {
  render: () => <img src={image.src} alt={image.alt} />,
};
```

----------------------------------------

TITLE: Disable Inline Story Rendering in Storybook (JavaScript)
DESCRIPTION: This JavaScript snippet configures Storybook's preview settings to disable inline rendering of stories within the Docs addon.  It sets the `inline` property of the `story` object within the `docs` parameter to `false`. This prevents stories from being rendered directly within the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-optout-inline.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    docs: {
      // Opt-out of inline rendering
      story: { inline: false },
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Stories with Solid (JS)
DESCRIPTION: This code initializes Storybook stories for a Solid Button component using JavaScript, defining metadata and two stories: Accessible and Inaccessible. It imports the Button component and configures its properties and controls within the Storybook environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_4

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
  },
};

// This is an accessible story
export const Accessible = {
  args: {
    primary: false,
    label: 'Button',
  },
};

// This is not
export const Inaccessible = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};

```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Component (TS)
DESCRIPTION: This snippet configures the Storybook metadata for a Svelte component using TypeScript. It imports the Meta type from Storybook, defines the component, tags, and documentation parameters, including disabling the table of contents.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-disable-toc.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
  tags: ['autodocs'],
  parameters: {
    docs: {
      toc: {
        disable: true, // 👈 Disables the table of contents
      },
    },
  },
} satisfies Meta<typeof MyComponent>;

export default meta;
```

----------------------------------------

TITLE: Defining List Story with Svelte CSF (JavaScript)
DESCRIPTION: This code defines a Storybook story for the List component in Svelte using the Component Story Format (CSF). It imports defineMeta from @storybook/addon-svelte-csf and the List component. The Empty story is rendered using the Story component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_7

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import List from './List.svelte';

  const { Story } = defineMeta({
    component: List,
  });
</script>

<!-- Always an empty list, not super interesting -->
<Story name="Empty" />

```

----------------------------------------

TITLE: Use Global Type in React Decorator
DESCRIPTION: This code snippet demonstrates how to consume a global type (e.g., `theme`) within a decorator in a React Storybook. It uses the `context.globals.theme` value to apply a theme provider (e.g., `styled-components`) to all stories. This allows you to dynamically change the theme of your components based on the selected global value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { ThemeProvider } from 'styled-components';
import { lightTheme, darkTheme } from '../src/themes';

const withTheme = (Story, context) => {
  const theme = context.globals.theme === 'dark' ? darkTheme : lightTheme;
  return (
    <ThemeProvider theme={theme}>
      <Story {...context} />
    </ThemeProvider>
  );
};

export const decorators = [withTheme];
```

----------------------------------------

TITLE: Initializing Storybook Story (TS)
DESCRIPTION: This code initializes a Storybook story for a component named MyComponent using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines the component, title, and default arguments for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { MyComponent } from './MyComponent';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  component: MyComponent,
  title: 'components/MyComponent/MyComponent',
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    something: 'Something else',
  },
};

```

----------------------------------------

TITLE: Resetting MockDate in Storybook Preview using JavaScript
DESCRIPTION: A JavaScript configuration for Storybook that resets MockDate before each story renders. This ensures consistent date behavior across stories by using the beforeEach hook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-preview.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import MockDate from 'mockdate';

export default {
  async beforeEach() {
    MockDate.reset();
  },
};
```

----------------------------------------

TITLE: Configure Storybook Loaders in TypeScript
DESCRIPTION: Configures Storybook loaders in TypeScript to fetch user data from a JSONPlaceholder API endpoint. This allows stories to access and display the fetched user data. The loader function uses `fetch` to retrieve the data and returns it as a property within an object. Includes type definition for Preview.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-loader.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  loaders: [
    async () => ({
      currentUser: await (await fetch('https://jsonplaceholder.typicode.com/users/1')).json(),
    }),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Installing @storybook/addon-a11y using Yarn (Shell)
DESCRIPTION: Installs the `@storybook/addon-a11y` package as a development dependency using the Yarn package manager. Requires Node.js and Yarn to be installed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev @storybook/addon-a11y
```

----------------------------------------

TITLE: Initializing Storybook Meta for Web Component (TS)
DESCRIPTION: This code initializes the Storybook meta object for a web component in TypeScript. It imports the Meta type from Storybook and defines the component as 'your-component'. It then sets the 'requiredFirst' sort order for controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'your-component',
  parameters: { controls: { sort: 'requiredFirst' } },
};

export default meta;
```

----------------------------------------

TITLE: Initializing Storybook Story for React Component (TS)
DESCRIPTION: Defines a Storybook story for a React component using TypeScript, including metadata and a story with a Figma design parameter. It imports the necessary modules from '@storybook/react-vite' and the component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { MyComponent } from './MyComponent';

// More on default export: https://storybook.js.org/docs/writing-stories/#default-export
const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Example: Story = {
  parameters: {
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/Sample-File',
    },
  },
};
```

----------------------------------------

TITLE: Defining CSS Outlines Utility Function in TypeScript
DESCRIPTION: This function 'outlineCSS' generates a CSS string that applies outlined styles to a wide range of HTML elements using a specific selector. It depends on the 'ts-dedent' package to format multi-line strings by removing unwanted indentation. The primary parameter is a 'selector' string, which ensures the generated styles are applied to elements within a specific context. It returns a dedented string of CSS rules, each applying a different color to the outline of various elements, such as 'header', 'footer', 'p', and many others. The key limitation is that it is primarily aimed at styling HTML elements within a controlled scope, making it ideal for debugging but not for production use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-css-example.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
import { dedent } from 'ts-dedent';

export default function outlineCSS(selector: string) {
  return dedent/* css */ `
    ${selector} body {
      outline: 1px solid #2980b9 !important;
    }

    ${selector} article {
      outline: 1px solid #3498db !important;
    }

    ${selector} nav {
      outline: 1px solid #0088c3 !important;
    }

    ${selector} aside {
      outline: 1px solid #33a0ce !important;
    }

    ${selector} section {
      outline: 1px solid #66b8da !important;
    }

    ${selector} header {
      outline: 1px solid #99cfe7 !important;
    }

    ${selector} footer {
      outline: 1px solid #cce7f3 !important;
    }

    ${selector} h1 {
      outline: 1px solid #162544 !important;
    }

    ${selector} h2 {
      outline: 1px solid #314e6e !important;
    }

    ${selector} h3 {
      outline: 1px solid #3e5e85 !important;
    }

    ${selector} h4 {
      outline: 1px solid #449baf !important;
    }

    ${selector} h5 {
      outline: 1px solid #c7d1cb !important;
    }

    ${selector} h6 {
      outline: 1px solid #4371d0 !important;
    }

    ${selector} main {
      outline: 1px solid #2f4f90 !important;
    }

    ${selector} address {
      outline: 1px solid #1a2c51 !important;
    }

    ${selector} div {
      outline: 1px solid #036cdb !important;
    }

    ${selector} p {
      outline: 1px solid #ac050b !important;
    }

    ${selector} hr {
      outline: 1px solid #ff063f !important;
    }

    ${selector} pre {
      outline: 1px solid #850440 !important;
    }

    ${selector} blockquote {
      outline: 1px solid #f1b8e7 !important;
    }

    ${selector} ol {
      outline: 1px solid #ff050c !important;
    }

    ${selector} ul {
      outline: 1px solid #d90416 !important;
    }

    ${selector} li {
      outline: 1px solid #d90416 !important;
    }

    ${selector} dl {
      outline: 1px solid #fd3427 !important;
    }

    ${selector} dt {
      outline: 1px solid #ff0043 !important;
    }

    ${selector} dd {
      outline: 1px solid #e80174 !important;
    }

    ${selector} figure {
      outline: 1px solid #ff00bb !important;
    }

    ${selector} figcaption {
      outline: 1px solid #bf0032 !important;
    }

    ${selector} table {
      outline: 1px solid #00cc99 !important;
    }

    ${selector} caption {
      outline: 1px solid #37ffc4 !important;
    }

    ${selector} thead {
      outline: 1px solid #98daca !important;
    }

    ${selector} tbody {
      outline: 1px solid #64a7a0 !important;
    }

    ${selector} tfoot {
      outline: 1px solid #22746b !important;
    }

    ${selector} tr {
      outline: 1px solid #86c0b2 !important;
    }

    ${selector} th {
      outline: 1px solid #a1e7d6 !important;
    }

    ${selector} td {
      outline: 1px solid #3f5a54 !important;
    }

    ${selector} col {
      outline: 1px solid #6c9a8f !important;
    }

    ${selector} colgroup {
      outline: 1px solid #6c9a9d !important;
    }

    ${selector} button {
      outline: 1px solid #da8301 !important;
    }

    ${selector} datalist {
      outline: 1px solid #c06000 !important;
    }

    ${selector} fieldset {
      outline: 1px solid #d95100 !important;
    }

    ${selector} form {
      outline: 1px solid #d23600 !important;
    }

    ${selector} input {
      outline: 1px solid #fca600 !important;
    }

    ${selector} keygen {
      outline: 1px solid #b31e00 !important;
    }

    ${selector} label {
      outline: 1px solid #ee8900 !important;
    }

    ${selector} legend {
      outline: 1px solid #de6d00 !important;
    }

    ${selector} meter {
      outline: 1px solid #e8630c !important;
    }

    ${selector} optgroup {
      outline: 1px solid #b33600 !important;
    }

    ${selector} option {
      outline: 1px solid #ff8a00 !important;
    }

    ${selector} output {
      outline: 1px solid #ff9619 !important;
    }

    ${selector} progress {
      outline: 1px solid #e57c00 !important;
    }

    ${selector} select {
      outline: 1px solid #e26e0f !important;
    }

    ${selector} textarea {
      outline: 1px solid #cc5400 !important;
    }

    ${selector} details {
      outline: 1px solid #33848f !important;
    }

    ${selector} summary {
      outline: 1px solid #60a1a6 !important;
    }

    ${selector} command {
      outline: 1px solid #438da1 !important;
    }

    ${selector} menu {
      outline: 1px solid #449da6 !important;
    }

    ${selector} del {
      outline: 1px solid #bf0000 !important;
    }

    ${selector} ins {
      outline: 1px solid #400000 !important;
    }

    ${selector} img {
      outline: 1px solid #22746b !important;
    }

    ${selector} iframe {
      outline: 1px solid #64a7a0 !important;
    }

    ${selector} embed {
      outline: 1px solid #98daca !important;
    }

    ${selector} object {
      outline: 1px solid #00cc99 !important;
    }

    ${selector} param {
      outline: 1px solid #37ffc4 !important;
    }

    ${selector} video {
      outline: 1px solid #6ee866 !important;
    }

    ${selector} audio {
      outline: 1px solid #027353 !important;
    }

    ${selector} source {
      outline: 1px solid #012426 !important;
    }

    ${selector} canvas {
      outline: 1px solid #a2f570 !important;
    }

    ${selector} track {
      outline: 1px solid #59a600 !important;
    }

    ${selector} map {
      outline: 1px solid #7be500 !important;
    }

    ${selector} area {
      outline: 1px solid #305900 !important;
    }

    ${selector} a {
      outline: 1px solid #ff62ab !important;
    }

    ${selector} em {
      outline: 1px solid #800b41 !important;
    }

    ${selector} strong {
      outline: 1px solid #ff1583 !important;
    }

    ${selector} i {
      outline: 1px solid #803156 !important;
    }

    ${selector} b {
      outline: 1px solid #cc1169 !important;
    }

    ${selector} u {
      outline: 1px solid #ff0430 !important;
    }

    ${selector} s {
      outline: 1px solid #f805e3 !important;
    }

    ${selector} small {
      outline: 1px solid #d107b2 !important;
    }

    ${selector} abbr {
      outline: 1px solid #4a0263 !important;
    }

    ${selector} q {
      outline: 1px solid #240018 !important;
    }

    ${selector} cite {
      outline: 1px solid #64003c !important;
    }

    ${selector} dfn {
      outline: 1px solid #b4005a !important;
    }

    ${selector} sub {
      outline: 1px solid #dba0c8 !important;
    }

    ${selector} sup {
      outline: 1px solid #cc0256 !important;
    }

    ${selector} time {
      outline: 1px solid #d6606d !important;
    }

    ${selector} code {
      outline: 1px solid #e04251 !important;
    }

    ${selector} kbd {
      outline: 1px solid #5e001f !important;
    }

    ${selector} samp {
      outline: 1px solid #9c0033 !important;
    }

    ${selector} var {
      outline: 1px solid #d90047 !important;
    }

    ${selector} mark {
      outline: 1px solid #ff0053 !important;
    }

    ${selector} bdi {
      outline: 1px solid #bf3668 !important;
    }

    ${selector} bdo {
      outline: 1px solid #6f1400 !important;
    }

    ${selector} ruby {
      outline: 1px solid #ff7b93 !important;
    }

    ${selector} rt {
      outline: 1px solid #ff2f54 !important;
    }

    ${selector} rp {
      outline: 1px solid #803e49 !important;
    }

    ${selector} span {
      outline: 1px solid #cc2643 !important;
    }

    ${selector} br {
      outline: 1px solid #db687d !important;
    }

    ${selector} wbr {
      outline: 1px solid #db175b !important;
    }`;
}
```

----------------------------------------

TITLE: Button Story with Args Implementation
DESCRIPTION: Example showing how to create a button story using args pattern for handling click events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Button',
  component: Button,
};

export const Text = (args) => ({
  template: '<Button @click="args.onClick">Hello Button</Button>',
  setup() {
    return { args };
  },
});
Text.args = {
  onClick: action('clicked'),
};
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (TS)
DESCRIPTION: Defines a Storybook story for a Svelte component using TypeScript, including metadata and a story with a Figma design parameter. It imports the necessary modules from '@storybook/your-framework' and the component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#_snippet_8

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import MyComponent from './MyComponent.svelte';

// More on default export: https://storybook.js.org/docs/svelte/writing-stories/introduction#default-export
const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Example: Story = {
  parameters: {
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/Sample-File',
    },
  },
};
```

----------------------------------------

TITLE: Implementing ngx-translate Decorator for Storybook in Angular
DESCRIPTION: This snippet demonstrates how to create a Storybook decorator that configures ngx-translate. It sets up the TranslateModule with HTTP loader and applies it to stories. The decorator can be used in preview.ts or individual stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/angular/template/stories/others/ngx-translate/README.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { TranslateLoader, TranslateModule } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { moduleMetadata, applicationConfig } from '@storybook/angular';

function createTranslateLoader(http: HttpClient) {
  return new TranslateHttpLoader(http, '/assets/i18n/', '.json');
}

const TranslateModuleDecorator = (storyFunc, context) => {
  const { locale } = context.globals;

  return applicationConfig({
    providers: [
      importProvidersFrom(
        HttpClientModule, 
        TranslateModule.forRoot({
          defaultLanguage: locale,
          loader: {
            provide: TranslateLoader,
            useFactory: createTranslateLoader,
            deps: [HttpClient],
          },
        })
      )
    ]
  })(storyFunc, context);
};

// for `preview.ts`
export const decorators = [
  moduleMetadata({
    imports: [TranslateModule],
  }),
  TranslateModuleDecorator,
];
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: This JavaScript configuration file sets up Storybook by defining the framework, specifying the location of story files, adding documentation addons, configuring documentation settings, and setting up static directories. It exports the configuration object for Storybook to use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typical.md#_snippet_0

LANGUAGE: js
CODE:
```
const config = {
  // Required
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  // Optional
  addons: ['@storybook/addon-docs'],
  docs: {
    autodocs: 'tag',
  },
  staticDirs: ['../public'],
};
export default config;
```

----------------------------------------

TITLE: Installing and Configuring Vitest Addon
DESCRIPTION: This command installs and configures the Vitest addon for Storybook. It also inspects the Vite and Vitest setup, installing and configuring them with sensible defaults if necessary.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
npx storybook add @storybook/addon-vitest
```

----------------------------------------

TITLE: Initializing Button Story for React with Typescript
DESCRIPTION: This code initializes a Storybook story for a React Button component using Typescript. It imports the necessary modules from '@storybook/react-vite' and defines a primary button story with a label and primary property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_5

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: () => <Button primary label="Button" />,
};

```

----------------------------------------

TITLE: Extending Storybook's Webpack Configuration Based on Environment
DESCRIPTION: Example of how to extend Storybook's webpack configuration in main.js with environment-specific adjustments using the webpackFinal field.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  webpackFinal: async (config, { configType }) => {
    // `configType` has a value of 'DEVELOPMENT' or 'PRODUCTION'
    // You can change the configuration based on that.
    // 'PRODUCTION' is used when building the static version of storybook.

    // Make whatever fine-grained changes you need
    config.module.rules.push({
      test: /\.scss$/,
      use: ['style-loader', 'css-loader', 'sass-loader'],
      include: path.resolve(__dirname, '../'),
    });

    // Return the altered config
    return config;
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Parameters in JavaScript
DESCRIPTION: This snippet configures the default parameters for Storybook stories, specifically setting up background options with light and dark themes. It defines the 'backgrounds' parameter with custom options for light and dark modes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-preview.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  parameters: {
    backgrounds: {
      options: {
        light: { name: 'Light', value: '#fff' },
        dark: { name: 'Dark', value: '#333' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Registering addon-themes in Storybook configuration
DESCRIPTION: Diff showing how to add the @storybook/addon-themes to the addons array in the .storybook/main.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/bootstrap.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
export default {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: [
    '@storybook/addon-essentials',
+   '@storybook/addon-themes',
  ],
};
```

----------------------------------------

TITLE: Configuring Storybook Main File in TypeScript
DESCRIPTION: TypeScript configuration file for Storybook that includes type definitions, framework specification, story patterns, and webpack customization. Uses the StorybookConfig type for type safety and provides the same functionality as the JavaScript version with added type checking.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-simplified-config.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  webpackFinal: async (config) => {
    config.plugins.push(/* ... */);
    return config;
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook Meta for React Button Component
DESCRIPTION: This code configures the Storybook metadata for a React Button component. It imports the Button component and defines the meta object, specifying the component and customizing the background options to include 'dark' and 'gray'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  parameters: {
    backgrounds: {
      options: {
        // 👇 Override the default `dark` option
        dark: { name: 'Dark', value: '#000' },
        // 👇 Add a new option
        gray: { name: 'Gray', value: '#CCC' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Object Control in ArgTypes
DESCRIPTION: This snippet shows how to configure an object control using the 'control' annotation in the argTypes field. It provides a JSON-based editor component for handling the object's values for the 'user' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_16

LANGUAGE: javascript
CODE:
```
argTypes: { user: { control: 'object' } }
```

----------------------------------------

TITLE: Configuring Storybook Main Configuration File with TypeScript
DESCRIPTION: Sets up the main Storybook configuration including story file patterns, framework specification, and TypeScript documentation generation settings using react-docgen-typescript. The configuration defines which files should be treated as stories and how TypeScript types should be processed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-react-docgen-typescript.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, react-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  typescript: {
    reactDocgen: 'react-docgen-typescript',
    // Provide your own options if necessary.
    // See https://storybook.js.org/docs/configure/typescript for more information.
    reactDocgenTypescriptOptions: {},
  },
};

export default config;
```

----------------------------------------

TITLE: Implementing Custom Jest Snapshot Serializer for React ARIA IDs in JavaScript
DESCRIPTION: This code defines a custom Jest snapshot serializer that replaces dynamic React ARIA IDs with static IDs. It uses the jest-serializer-html package and applies a regular expression to normalize IDs, ensuring consistent snapshots for HTML elements with dynamic ARIA attributes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-custom-snapshot-serializer.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
// The jest-serializer-html package is available as a dependency of the test-runner
const jestSerializerHtml = require('jest-serializer-html');

const DYNAMIC_ID_PATTERN = /"react-aria-\d+(\.\d+)?"/g;

module.exports = {
  /*
   * The test-runner calls the serialize function when the test reaches the expect(SomeHTMLElement).toMatchSnapshot().
   * It will replace all dynamic IDs with a static ID so that the snapshot is consistent.
   * For instance, from <label id="react-aria970235672-:rl:" for="react-aria970235672-:rk:">Favorite color</label> to <label id="react-mocked_id" for="react-mocked_id">Favorite color</label>
   */
  serialize(val) {
    const withFixedIds = val.replace(DYNAMIC_ID_PATTERN, 'mocked_id');
    return jestSerializerHtml.print(withFixedIds);
  },
  test(val) {
    return jestSerializerHtml.test(val);
  },
};
```

----------------------------------------

TITLE: Configuring Svelte Story with CSF for Example Component
DESCRIPTION: This snippet configures a Storybook story for a Svelte component named 'Example' using the Component Story Format (CSF) and the addon-svelte-csf. It defines the component and sets up an argument type for a 'value' property, allowing users to control it with a number input in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      value: {
        control: {
          type: 'number',
          min: 0,
          max: 100,
          step: 10,
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Storybook Framework, Stories, and TypeScript Checks in TypeScript
DESCRIPTION: This TypeScript snippet defines the main Storybook configuration object. It specifies the placeholder `'@storybook/your-framework'` which needs replacement with the actual framework being used (e.g., `react-webpack5`), points to story files (`.mdx`, `.stories.*`) within the `../src` directory using glob patterns, and enables TypeScript checking (`check: true`) along with ESLint validation (`eslint: true`) via `checkOptions`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typescript-check-options.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-webpack5)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  typescript: {
    check: true,
    checkOptions: {
      eslint: true,
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Documenting Multiple Components in a Single Page
DESCRIPTION: Illustrates referencing multiple components within a single MDX documentation page. Storybook composes the story metadata alongside the existing documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_9

LANGUAGE: MDX
CODE:
```
import { Meta, Story, Canvas } from '@storybook/addon-docs';

<Meta title="Docs/MDX/MDX File" />

# MDX File

This is an MDX file.

<Canvas>
  <Story name="Basic">
    {/* Add a story here if needed */}
  </Story>
</Canvas>
```

----------------------------------------

TITLE: Configuring Storybook Backgrounds in TypeScript
DESCRIPTION: This TypeScript snippet configures the background options for Storybook stories. It imports the Preview type from the Storybook framework and defines a set of named color values (red and green) that can be selected to change the background of components within the Storybook environment. The 'your-framework' placeholder should be replaced with the specific framework being used (e.g., react-vite, vue3-vite, angular).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-parameters.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    backgrounds: {
      values: [
        { name: 'red', value: '#f00' },
        { name: 'green', value: '#0f0' },
      ],
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configure test scripts in package.json
DESCRIPTION: This configures the `test` and `test-storybook` scripts in `package.json` to run Vitest tests. The `test-storybook` script uses the `--project=storybook` flag to specify Storybook tests.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test": "vitest",
    "test-storybook": "vitest --project=storybook"
  }
}
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: TypeScript configuration for Storybook's main.ts file that imports the StorybookConfig type, specifies the framework, story file patterns, and disables telemetry. Users need to replace 'your-framework' with their actual framework name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-disable-telemetry.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    disableTelemetry: true, // 👈 Disables telemetry
  },
};

export default config;
```

----------------------------------------

TITLE: Testing Form Validation in Vue with Storybook Stories (JavaScript)
DESCRIPTION: Implements form validation testing using @testing-library/vue and @storybook/vue3's composeStories. Tests form validation by running the InvalidForm story and verifying the invalid form state after button click.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { fireEvent, render, screen } from '@testing-library/vue';

import { composeStories } from '@storybook/vue3';

import * as stories from './LoginForm.stories'; // 👈 Our stories imported here.

const { InvalidForm } = composeStories(stories);

test('Checks if the form is valid', async () => {
  // Renders the composed story
  await InvalidForm.run();

  const buttonElement = screen.getByRole('button', {
    name: 'Submit',
  });

  fireEvent.click(buttonElement);

  const isFormValid = screen.getByLabelText('invalid-form');
  expect(isFormValid).toBeInTheDocument();
});
```

----------------------------------------

TITLE: Configuring Story Parameters with Decorators
DESCRIPTION: This example demonstrates how to configure story parameters in Storybook 4.0 using decorators, providing a more convenient way to configure addons. It shows how to apply notes to stories globally and locally.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_286

LANGUAGE: javascript
CODE:
```
// config.js
addDecorator(withNotes);

// Component.stories.js
storiesOf('My component', module)
  .add('story1', () => <Component ... />, { notes: 'some notes' })
  .add('story2', () => <Component ... />, { notes: 'other notes' });
```

----------------------------------------

TITLE: Debugging end-to-end tests with Playwright
DESCRIPTION: This command executes end-to-end tests in debug mode, allowing you to step through the tests and identify issues. It sets the `DEBUG` environment variable to `1` and uses the same task and template as the standard e2e test command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#_snippet_8

LANGUAGE: shell
CODE:
```
DEBUG=1 yarn task --task e2e-tests --template=react-vite/default-ts --start-from=auto
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF - TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript and the Component Story Format (CSF). It imports the necessary modules and defines the component and sets specific parameters at the component level, such as background options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  //👇 Creates specific parameters at the component level
  parameters: {
    backgrounds: {
      options: {},
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Configuring Vitest Setup for Storybook with React
DESCRIPTION: This snippet sets up Vitest for use with Storybook in a React project. It imports required dependencies, sets project annotations, and runs Storybook's beforeAll hook. It includes a note for Next.js users about importing from the appropriate package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations-simple.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { beforeAll } from 'vitest';
// 👇 If you're using Next.js, import from @storybook/nextjs
//   If you're using Next.js with Vite, import from @storybook/experimental-nextjs-vite
import { setProjectAnnotations } from '@storybook/react';
import * as previewAnnotations from './preview';

const annotations = setProjectAnnotations([previewAnnotations]);

// Run Storybook's beforeAll hook
beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Initializing Svelte Storybook Story
DESCRIPTION: This code initializes a Storybook story for a Svelte component. It imports the component and defines the component and its argument types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#_snippet_2

LANGUAGE: js
CODE:
```
import Example from './Example.svelte';

export default {
  component: Example,
  argTypes: {
    actualArgName: {
      name: 'Friendly name',
    },
  },
};
```

----------------------------------------

TITLE: Configuring React Docgen in Storybook
DESCRIPTION: JavaScript configuration for setting up React Docgen in Storybook, which is used to populate props tables in docs view and controls panel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-vite/README.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
export default {
  typescript: {
    reactDocgen: 'react-docgen`
  }
}
```

----------------------------------------

TITLE: Setting Environment Variables via Command Line in Storybook
DESCRIPTION: Demonstrates how to set environment variables when running Storybook through the command line.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/environment-variables.mdx#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
STORYBOOK_THEME=red STORYBOOK_DATA_KEY=12345 npm run storybook
```

----------------------------------------

TITLE: Configuring Storybook Main File in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the main Storybook file using TypeScript. It imports the StorybookConfig type, defines the framework, and specifies which story files to include.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories-ordered.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
};

export default config;
```

----------------------------------------

TITLE: Running Upgrade Hierarchy Separators Codemod
DESCRIPTION: This command runs the upgrade-hierarchy-separators codemod using jscodeshift. It updates the story hierarchy separators to use a single '/' separator.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
./node_modules/.bin/jscodeshift -t ./node_modules/@storybook/codemod/dist/transforms/upgrade-hierarchy-separators.js . --ignore-pattern "node_modules|dist"
```

----------------------------------------

TITLE: Configuring Jest to transform ESModules
DESCRIPTION: This code snippet shows how to configure Jest to transform Storybook packages that are now available as ESModules. This is necessary if your Jest tests stop working after upgrading to Storybook 6.2. It involves adding a `transformIgnorePatterns` entry to your Jest configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_197

LANGUAGE: JSON
CODE:
```
// In your jest config
transformIgnorePatterns: ['/node_modules/(?!@storybook)']
```

----------------------------------------

TITLE: Mocking Successful GraphQL Query with MSW - Svelte
DESCRIPTION: This snippet defines a Storybook story that mocks a successful GraphQL query using MSW in a Svelte component. It intercepts the 'AllInfoQuery' and returns a predefined 'TestData' object as the response. This allows testing the component's behavior when receiving valid data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_9

LANGUAGE: javascript
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { graphql, HttpResponse } from 'msw';

  import MockApolloWrapperClient from './MockApolloWrapperClient.svelte';
  import DocumentScreen from './YourPage.svelte';

  const { Story } = defineMeta({
    component: DocumentScreen,
    decorators: [() => MockApolloWrapperClient],
  });

  //👇The mocked data that will be used in the story
  const TestData = {
    user: {
      userID: 1,
      name: 'Someone',
    },
    document: {
      id: 1,
      userID: 1,
      title: 'Something',
      brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
      status: 'approved',
    },
    subdocuments: [
      {
        id: 1,
        userID: 1,
        title: 'Something',
        content:
          'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
        status: 'approved',
      },
    ],
  };
</script>

<Story
  name="MockedSuccess"
  parameters={{
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', () => {
          return HttpResponse.json({
            data: {
              AllInfoQuery: {
                ...TestData,
              },
            },
          });
        }),
      ],
    },
  }}
/>
```

----------------------------------------

TITLE: Configuring Storybook MDX Documentation with Svelte CSF Format
DESCRIPTION: Sets up an MDX documentation file for Storybook using the Svelte renderer with Svelte CSF format. It imports Checkbox stories specifically from a .stories.svelte file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-meta-block.md#2025-04-22_snippet_1

LANGUAGE: mdx
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories.svelte';

<Meta of={CheckboxStories} />
```

----------------------------------------

TITLE: Configuring Button Story with argTypes in Svelte CSF
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using the Component Story Format (CSF). It defines the component and its argTypes, which allow users to control the component's properties like label, advanced settings, margin, padding, and cornerRadius through the Storybook UI. The margin, padding, and cornerRadius are conditionally enabled based on the 'advanced' boolean.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    argTypes: {
      label: { control: 'text' }, // Always shows the control
      advanced: { control: 'boolean' },
      // Only enabled if advanced is true
      margin: { control: 'number', if: { arg: 'advanced' } },
      padding: { control: 'number', if: { arg: 'advanced' } },
      cornerRadius: { control: 'number', if: { arg: 'advanced' } },
    },
  });
</script>
```

----------------------------------------

TITLE: Initializing Storybook Story for Angular Component
DESCRIPTION: This code initializes a Storybook story for an Angular component, MyComponent. It imports the necessary modules from '@storybook/angular' and defines a story named 'WithAnImage' that renders the component with specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<typeof meta>;

// Assume image.png is located in the "public" directory.
export const WithAnImage: Story = {
  render: () => ({
    props: {
      src: '/image.png',
      alt: 'my image',
    },
  }),
};

```

----------------------------------------

TITLE: Configuring Component Meta with ArgTypes for Web Components (TS)
DESCRIPTION: This code configures the metadata for a Storybook story for web components using TypeScript. It sets the component to 'your-component' and disables the 'foo' property from appearing in the UI by setting 'disable: true' within the 'table' property of the 'argTypes' configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'your-component',
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      table: {
        disable: true,
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Environment-Specific Storybook Composition
DESCRIPTION: This snippet shows how to compose Storybooks based on the current development environment using a function in the 'refs' field.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/storybook-composition.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  refs: (config, { configType }) => {
    if (configType === 'DEVELOPMENT') {
      return {
        react: {
          title: 'React',
          url: 'http://localhost:6006',
        },
        angular: {
          title: 'Angular',
          url: 'http://localhost:6007',
        },
      };
    }
    return {
      react: {
        title: 'React',
        url: 'https://react.example.com',
      },
      angular: {
        title: 'Angular',
        url: 'https://angular.example.com',
      },
    };
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Core Builder with Webpack 5
DESCRIPTION: Exports the default Storybook configuration object that specifies webpack5 as the builder. This configuration is necessary for Storybook to properly bundle and serve stories using webpack 5.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack5.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  core: {
    builder: '@storybook/builder-webpack5',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Main Settings in JavaScript
DESCRIPTION: JavaScript configuration file for Storybook that defines the framework, story patterns, and webpack builder settings. Includes options for file system caching and lazy compilation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack-options.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    builder: {
      name: '@storybook/builder-webpack5',
      options: {
        fsCache: true,
        lazyCompilation: true,
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Stories for React Component (TS)
DESCRIPTION: This code configures Storybook stories for a React component using TypeScript, defining the component, included stories, and excluded stories. It also defines data objects and story configurations for rendering the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { MyComponent } from './MyComponent';

import someData from './data.json';

const meta = {
  component: MyComponent,
  includeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories
  excludeStories: /.*Data$/, // 👈 Storybook ignores anything that contains Data
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const simpleData = { foo: 1, bar: 'baz' };
export const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };

export const SimpleStory: Story = {
  args: {
    data: simpleData,
  },
};

export const ComplexStory: Story = {
  args: {
    data: complexData,
  },
};
```

----------------------------------------

TITLE: Configuring Button Story for Web Components (TypeScript)
DESCRIPTION: This TypeScript code configures a Storybook story for a web component named 'demo-button'. It imports the Meta type from '@storybook/web-components-vite' and disables a specific addon using parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-disable-addon.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  parameters: {
    myAddon: { disable: true }, // Disables the addon
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Web Components Story for Example Component (TypeScript)
DESCRIPTION: This snippet configures a Storybook story for a web component named 'demo-example'. It defines the component and sets up an argument type for a 'value' property, allowing users to control it with a number input in the Storybook UI. It uses TypeScript and imports Meta from '@storybook/web-components-vite'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-example',
  argTypes: {
    value: {
      control: {
        type: 'number',
        min: 0,
        max: 100,
        step: 10,
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Button Stories with TypeScript 4.9+
DESCRIPTION: Creates Button component story configuration using TypeScript 4.9+ with satisfies operator for type checking. Includes StoryObj type import and accessibility parameter configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-remove.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-renderer with the renderer you are using (e.g., react, vue3)
import { Meta, StoryObj } from '@storybook/your-renderer';

import { Button } from './Button';

const meta = {
  component: Button,
  parameters: {
    // 👇 Remove this once all stories pass accessibility tests
    // a11y: { test: 'todo' },
  },
} satisfies Meta<typeof Button>;
export default meta;
```

----------------------------------------

TITLE: Setting Global Accessibility Parameters in Storybook Svelte
DESCRIPTION: This snippet demonstrates how to set global accessibility parameters within a Storybook story using the a11y addon. It shows how to configure the `manual` option to true. The configuration is applied within the `globals.a11y` section of the story's metadata.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_7

LANGUAGE: typescript
CODE:
```
globals: {
  a11y: {
    manual: true,
  },
}
```

----------------------------------------

TITLE: Configuring Storybook Preview with SolidJS (TypeScript) Theme Provider
DESCRIPTION: This snippet configures the Storybook preview for a SolidJS project written in TypeScript, using a decorator to wrap stories with a `ThemeProvider` component from `solid-styled-components`. It defines a theme object with type definitions and applies it to all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-styled-components-decorator.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Preview } from 'storybook-solidjs';

import { ThemeProvider, DefaultTheme } from 'solid-styled-components';

const theme: DefaultTheme = {
  colors: {
    primary: 'hotpink',
  },
};

const preview: Preview = {
  decorators: [
    (Story) => (
      <ThemeProvider theme={theme}>
        <Story />
      </ThemeProvider>
    ),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Defining Svelte Button Story with CSF (TS)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using the Component Story Format (CSF) with TypeScript. It imports defineMeta from '@storybook/addon-svelte-csf', defines the component, and sets up parameters for handling actions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    parameters: { actions: { argTypesRegex: '^on.*' } },
  });
</script>
```

----------------------------------------

TITLE: Configuring Angular Storybook Story
DESCRIPTION: This code configures a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines a Meta object to configure the component, enabling auto-generated documentation using the 'autodocs' tag. It also defines a story that is excluded from the documentation using the '!autodocs' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './Button';

const meta: Meta<Button> = {
  component: Button,
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
};
export default meta;

type Story = StoryObj<Button>;

export const UndocumentedStory: Story = {
  // 👇 Removes this story from auto-generated documentation
  tags: ['!autodocs'],
};
```

----------------------------------------

TITLE: Implementing Storybook Global State Handler in TypeScript
DESCRIPTION: A higher-order function that wraps Storybook stories to apply outline styles based on global state. It handles both story and documentation modes, manages style injection and cleanup, and uses Storybook's hooks for global state management.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-use-global.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import type {
  Renderer,
  PartialStoryFn as StoryFunction,
  StoryContext,
} from 'storybook/internal/types';

import { useEffect, useMemo, useGlobals } from 'storybook/preview-api';
import { PARAM_KEY } from './constants';

import { clearStyles, addOutlineStyles } from './helpers';

import outlineCSS from './outlineCSS';

export const withGlobals = (StoryFn: StoryFunction<Renderer>, context: StoryContext<Renderer>) => {
  const [globals] = useGlobals();

  const isActive = [true, 'true'].includes(globals[PARAM_KEY]);

  // Is the addon being used in the docs panel
  const isInDocs = context.viewMode === 'docs';

  const outlineStyles = useMemo(() => {
    const selector = isInDocs ? `#anchor--${context.id} .docs-story` : '.sb-show-main';

    return outlineCSS(selector);
  }, [context.id]);
  useEffect(() => {
    const selectorId = isInDocs ? `my-addon-docs-${context.id}` : `my-addon`;

    if (!isActive) {
      clearStyles(selectorId);
      return;
    }

    addOutlineStyles(selectorId, outlineStyles);

    return () => {
      clearStyles(selectorId);
    };
  }, [isActive, outlineStyles, context.id]);

  return StoryFn();
};
```

----------------------------------------

TITLE: Storybook Snapshot Tests with Jest
DESCRIPTION: This code defines snapshot tests for Storybook stories using Jest. It iterates through all story files, composes the stories, and generates a snapshot for each story. The snapshot is compared against existing snapshots to detect visual regressions. It also includes a delay to ensure the component is fully rendered before taking the snapshot.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#_snippet_2

LANGUAGE: js
CODE:
```
describe('Stories Snapshots', () => {
  getAllStoryFiles().forEach(({ storyFile, componentName }) => {
    const meta = storyFile.default;
    const title = meta.title || componentName;

    describe(title, () => {
      const stories = Object.entries(compose(storyFile)).map(([name, story]) => ({ name, story }));

      if (stories.length <= 0) {
        throw new Error(
          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`,
        );
      }

      stories.forEach(({ name, story }) => {
        test(name, async () => {
          await story.run();
          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.
          await new Promise((resolve) => setTimeout(resolve, 1));
          // Defines the custom snapshot path location and file name
          const customSnapshotPath = `./__snapshots__/${componentName}.test.js.snap`;
          expect(document.body.firstChild).toMatchSpecificSnapshot(customSnapshotPath);
        });
      });
    });
  });
});
```

----------------------------------------

TITLE: Configuring Storybook with tsconfig References
DESCRIPTION: This code snippet shows how to configure Storybook to work with TypeScript projects that use `tsconfig` references. It updates the `.storybook/main.ts` configuration file to specify the `tsconfig.app.json` file. This ensures that Storybook can resolve component types and import aliases correctly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/vue3-vite';

const config: StorybookConfig = {
  framework: {
    name: '@storybook/vue3-vite',
    options: {
      docgen: {
        plugin: 'vue-component-meta',
        tsconfig: 'tsconfig.app.json',
      },
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Component for Props Table with storiesOf
DESCRIPTION: Sets up the component metadata for generating props tables in Storybook Docs using the storiesOf API.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { storiesOf } from '@storybook/react';
import { Button } from './Button';

storiesOf('InfoButton', module)
  .addParameters({ component: Button })
  .add( ... );
```

----------------------------------------

TITLE: Defining Storybook Mocked Error Story (Angular)
DESCRIPTION: This code defines a MockedError story for the DocumentScreen component in Angular. It uses MSW to mock a GraphQL query that returns an error after a delay of 800ms, simulating a failed API request. This allows testing the component's error handling logic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_1

LANGUAGE: ts
CODE:
```
export const MockedError: Story = {
  parameters: {
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', async () => {
          await delay(800);
          return HttpResponse.json({
            errors: [
              {
                message: 'Access denied',
              },
            ],
          });
        }),
      ],
    },
  },
};

```

----------------------------------------

TITLE: Defining Right Arrow SVG Component in React
DESCRIPTION: Creates a reusable React component for rendering a right arrow SVG icon. The component includes inline styling and SVG path definition.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/js/Configure.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
export const RightArrow = () => <svg 
    viewBox="0 0 14 14" 
    width="8px" 
    height="14px" 
    style={{ 
      marginLeft: '4px',
      display: 'inline-block',
      shapeRendering: 'inherit',
      verticalAlign: 'middle',
      fill: 'currentColor',
      'path fill': 'currentColor'
    }}
>
  <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
</svg>
```

----------------------------------------

TITLE: Testing React Story with Vitest
DESCRIPTION: This test uses Vitest and Storybook's composeStories to test a React story. It imports the stories, composes the Primary story, and then runs the story's play function to verify interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-with-play-function.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { test } from 'vitest';
import { composeStories } from '@storybook/react-vite';

import * as stories from './Button.stories';

const { Primary } = composeStories(stories);

test('renders and executes the play function', async () => {
  // Mount story and run interactions
  await Primary.run();
});
```

----------------------------------------

TITLE: Configuring Text Control in ArgTypes
DESCRIPTION: This snippet demonstrates how to configure a text control using the 'control' annotation in the argTypes field. It provides a freeform text input for the 'label' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_25

LANGUAGE: javascript
CODE:
```
argTypes: { label: { control: 'text' } }
```

----------------------------------------

TITLE: Configuring Background Options in Storybook Preview
DESCRIPTION: Defines available background colors and sets the initial background color using the `backgrounds` parameter in `.storybook/preview.js|ts`. It uses the `options` property to define colors and `initialGlobals` to set the initial color.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/backgrounds.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
export const parameters = {
  backgrounds: {
    default: 'twitter',
    values: [
      { name: 'twitter', value: '#00aced' },
      { name: 'facebook', value: '#3b5998' },
    ],
  },
};

export const globalTypes = {
  theme: {
    name: 'Theme',
    description: 'Global theme for components',
    defaultValue: 'light',
    toolbar: {
      icon: 'circlehollow',
      // array of plain string values or MenuItem shape (see below)
      items: ['light', 'dark'],
      // Change title based on selected value
      title: true,
    },
  },
};

```

----------------------------------------

TITLE: Performing health check after upgrade
DESCRIPTION: This command allows you to do a health check on your project for common issues that might arise after an upgrade, such as duplicated dependencies, incompatible addons or mismatched versions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/upgrading.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
npx storybook doctor
```

----------------------------------------

TITLE: Configuring Global Types for Locale in Storybook (JavaScript)
DESCRIPTION: This JavaScript snippet configures Storybook's preview to include a global type for selecting the locale. It defines the available locales (English, French, Spanish, Chinese, Korean) and their corresponding icons and titles. The initial locale is set to English.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-locales-globaltype.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const preview = {
  globalTypes: {
    locale: {
      description: 'Internationalization locale',
      toolbar: {
        icon: 'globe',
        items: [
          { value: 'en', right: '🇺🇸', title: 'English' },
          { value: 'fr', right: '🇫🇷', title: 'Français' },
          { value: 'es', right: '🇪🇸', title: 'Español' },
          { value: 'zh', right: '🇨🇳', title: '中文' },
          { value: 'kr', right: '🇰🇷', title: '한국어' },
        ],
      },
    },
  },
  initialGlobals: {
    locale: 'en',
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: This snippet sets up the main configuration for a Storybook project using JavaScript. It specifies the framework to be used, the location of the story files, and a customization for the HTML body to include analytics if an ID is present in the environment variables. No additional dependencies are required.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview-body.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  previewBody: (body) => `
    ${body}
    ${
      process.env.ANALYTICS_ID ? '<script src="https://cdn.example.com/analytics.js"></script>' : ''
    }
  `,
};
```

----------------------------------------

TITLE: Documenting UI Components in MDX for Storybook (Svelte with Standard CSF)
DESCRIPTION: An MDX file for the Svelte renderer that uses standard Component Story Format files without the .svelte extension. This documentation showcases Page, List, and ListItem components with descriptions and usage examples using Storybook's documentation components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-file.md#2025-04-22_snippet_2

LANGUAGE: mdx
CODE:
```
import { Canvas, Meta, Story } from '@storybook/addon-docs/blocks';

import * as ListStories from './List.stories';

import * as ListItemStories from './ListItem.stories';

import * as PageStories from './Page.stories';

<Meta of={PageStories} />

# Page

Page is a layout container that is used to position children in predetermined areas.

It's often used to apply consistent positioning for content across pages in an application

## Usage

<Canvas of={PageStories.Basic} />

# List

List is a grouping of related items. List can be ordered with multiple levels of nesting.

## Usage

<Story of={ListStories.Filled} />

# List Item

List items are used to group related content in a list. They must be nested within a List component.

## Usage

<Story of={ListItemStories.Starter} meta={ListItemStories} />
```

----------------------------------------

TITLE: Storybook Story with User Event Simulation (JS)
DESCRIPTION: This JavaScript code creates a Storybook story for a component and simulates a user click on a button within the component's canvas using `userEvent` and `within`. It imports the necessary modules and defines the component to be tested.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#_snippet_4

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleWithRole = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button', { name: / button label/i }));
  },
};
```

----------------------------------------

TITLE: Click Example Storybook Play Function (Svelte CSF)
DESCRIPTION: This play function simulates a user clicking a button within a Storybook story using the userEvent.click method. It queries the canvas for a button with a specific role and then triggers a click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#_snippet_2

LANGUAGE: js
CODE:
```
<Story
  name="ClickExample"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));
  }}
/>
```

----------------------------------------

TITLE: Extending Webpack Configuration in Storybook main.js
DESCRIPTION: This code exports an async webpack function that safely extends Storybook's base webpack configuration. It demonstrates the recommended pattern of creating a new configuration object rather than mutating the original to avoid unexpected bugs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack-preset-config.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export async function webpack(baseConfig, options) {
  // Modify or replace config.
  // Mutating the original reference object can cause unexpected bugs,
  // so in this example we replace.
  const { module = {} } = baseConfig;

  return {
    ...baseConfig,
    module: {
      ...module,
      rules: [
        ...(module.rules || []),
        {
          /* some new loader */
        },
      ],
    },
  };
}
```

----------------------------------------

TITLE: Using Svelte Snippets in Storybook Stories
DESCRIPTION: This code demonstrates how to use Svelte snippets within a Storybook story to create dynamic and reactive components. It imports necessary modules, defines a meta object with the component, and uses the template snippet to render the component with provided arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#_snippet_4

LANGUAGE: svelte
CODE:
```
<script>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story name="Default" args={{ exampleProperty: true }}>
  {#snippet template(args)}
    <MyComponent {...args}>Reactive component</MyComponent>
  {/snippet}
</Story>
```

----------------------------------------

TITLE: Configuring previewAnnotations in Next.js Storybook Framework
DESCRIPTION: Example implementation of previewAnnotations configuration from the Storybook Next.js framework. Shows how to extend existing preview annotations by adding framework-specific preview scripts.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-preview-annotations.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// @storybook/nextjs framework's src/preset.ts

import type { StorybookConfig } from './types';

export const previewAnnotations: StorybookConfig['previewAnnotations'] = (entry = []) => [
  ...entry,
  require.resolve('@storybook/nextjs/preview.js'),
];
```

----------------------------------------

TITLE: Initializing Button Story - Svelte (TS)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using TypeScript. It imports necessary modules, defines the component's metadata, and creates a 'Primary' story that renders the button with specified arguments (label and click).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/svelte-vite';

import { action } from 'storybook/actions';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  render: ({ label, click }) => ({
    Component: Button,
    props: {
      label,
    },
    on: {
      click,
    },
  }),
  args: {
    label: 'Hello',
    click: action('clicked'),
  },
};
```

----------------------------------------

TITLE: Simulating Hover Event in Storybook
DESCRIPTION: This snippet uses userEvent.hover to simulate a hover interaction on an element within a Storybook canvas. The canvas element is located using its test ID. This is useful for testing hover states and related UI changes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#_snippet_9

LANGUAGE: javascript
CODE:
```
await userEvent.hover(canvas.getByTestId('error'));
```

----------------------------------------

TITLE: Initializing Button Story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and the Button component itself.  It defines the component and sets specific parameters at the component level, such as background options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  //👇 Creates specific parameters at the component level
  parameters: {
    backgrounds: {
      options: {},
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Adding SWC Compiler Addon with pnpm
DESCRIPTION: This snippet illustrates how to use pnpm to add the Webpack5 Compiler SWC addon to a Storybook project. The command utilizes `pnpm dlx`, similar to `npx`, to run the latest `storybook` package and add the `@storybook/addon-webpack5-compiler-swc`. This requires pnpm and the Storybook environment set up in advance.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-compiler-swc-auto-install.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
pnpm dlx storybook@latest add @storybook/addon-webpack5-compiler-swc
```

----------------------------------------

TITLE: Installing Compodoc with npm for Angular in Storybook
DESCRIPTION: This snippet shows how to install Compodoc as a dev dependency using npm. It's intended for Angular projects in a Storybook environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/compodoc-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install @compodoc/compodoc --save-dev
```

----------------------------------------

TITLE: Configuring object control for array ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'object' control for an array, providing a JSON-based editor for manipulating the array's values within Storybook's controls panel. It allows editing in raw mode.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
{ control: 'object' }
```

----------------------------------------

TITLE: Initializing Storybook Configuration in TypeScript
DESCRIPTION: Sets up the main Storybook configuration including framework specification, story file patterns, and TypeScript compiler settings. The configuration uses a type-safe approach with StorybookConfig type definition.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typescript-skip-compiler.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  typescript: {
    skipCompiler: true,
  },
};

export default config;
```

----------------------------------------

TITLE: Implementing Button Component in React with TypeScript
DESCRIPTION: A TypeScript implementation of a React Button component with an interface defining the props. The component accepts properties for primary state, background color, size, label, and click handler, with detailed type definitions and default values.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-implementation.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
export interface ButtonProps {
  /**
   * Is this the principal call to action on the page?
   */
  primary?: boolean;
  /**
   * What background color to use
   */
  backgroundColor?: string;
  /**
   * How large should the button be?
   */
  size?: 'small' | 'medium' | 'large';
  /**
   * Button contents
   */
  label: string;
  /**
   * Optional click handler
   */
  onClick?: () => void;
}

/**
 * Primary UI component for user interaction
 */
export const Button: React.FC<ButtonProps> = ({
  primary = false,
  size = 'medium',
  backgroundColor,
  label,
  ...props
}) => {
  // the component implementation
};
```

----------------------------------------

TITLE: Setting up Vue3 with Pinia in Storybook
DESCRIPTION: This snippet sets up a Vue 3 application within Storybook using Pinia for state management. It registers a global Pinia instance to be consumed by stories and adds a decorator for consistent styling.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-library-decorator.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { setup } from '@storybook/vue3-vite';

import { createPinia } from 'pinia';

setup((app) => {
  //👇 Registers a global Pinia instance inside Storybook to be consumed by existing stories
  app.use(createPinia());
});

export default {
  decorators: [
    (story) => ({
      components: { story },
      template: '<div style="margin: 3em;"><story /></div>',
    }),
  ],
};
```

----------------------------------------

TITLE: Compose Stories for Playwright CT
DESCRIPTION: This code snippet demonstrates how to compose stories in a separate file for use in Playwright CT. It imports stories from a Storybook stories file and uses the `composeStories` function to export them as a single object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-playwright.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)
import { composeStories } from '@storybook/your-framework';

import * as stories from './Button.stories';

// This function will be executed in the browser
// and compose all stories, exporting them in a single object
export default composeStories(stories);
```

----------------------------------------

TITLE: Implementing Web Component Button in TypeScript using Lit
DESCRIPTION: Custom button web component using Lit library in TypeScript with decorators. Uses property decorators for reactive properties and customElement decorator for component registration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import { LitElement, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';

/**
 * @prop {string} content - The display label of the button
 * @prop {boolean} isDisabled - Checks if the button should be disabled
 * @summary This is a custom button element
 * @tag custom-button
 */

@customElement('custom-button')
export class CustomButton extends LitElement {
  @property()
  content?: string = 'One';
  @property()
  isDisabled?: boolean = false;

  render() {
    return html` <button type="button" ?disabled=${this.isDisabled}>${this.content}</button> `;
  }
}
```

----------------------------------------

TITLE: Configuring Vitest for React Storybook Testing
DESCRIPTION: This snippet configures Vitest to test React Storybook stories. It merges the base Vite configuration with Vitest-specific settings, including the storybookTest plugin for Storybook integration and browser testing setup with Playwright.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-config.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { defineConfig, mergeConfig } from 'vitest/config';
import { storybookTest } from '@storybook/addon-vitest/vitest-plugin';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const dirname =
  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));

import viteConfig from './vite.config';

export default mergeConfig(
  viteConfig,
  defineConfig({
    plugins: [
      storybookTest({
        // The location of your Storybook config, main.js|ts
        configDir: path.join(dirname, '.storybook'),
        // This should match your package.json script to run Storybook
        // The --ci flag will skip prompts and not open a browser
        storybookScript: 'yarn storybook --ci',
      }),
    ],
    test: {
      // Enable browser mode
      browser: {
        enabled: true,
        // Make sure to install Playwright
        provider: 'playwright',
        headless: true,
        instances: [{ browser: 'chromium' }],
      },
      setupFiles: ['./.storybook/vitest.setup.ts'],
    },
  }),
);
```

----------------------------------------

TITLE: Configuring Date Control in ArgTypes
DESCRIPTION: This snippet demonstrates how to configure a date control using the 'control' annotation in the argTypes field. It provides a datepicker component to handle date selection for the 'startDate' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_27

LANGUAGE: javascript
CODE:
```
argTypes: { startDate: { control: 'date' } }
```

----------------------------------------

TITLE: Mocking Successful API Response with MSW in Storybook (TS)
DESCRIPTION: This snippet configures a Storybook story to mock a successful API response using MSW in TypeScript. It defines an HTTP GET handler that intercepts requests to 'https://your-restful-endpoint/' and returns a predefined JSON object (TestData) as the response. This allows the 'demo-document-screen' component to render with mock data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { http, HttpResponse, delay } from 'msw';

const meta: Meta = {
  component: 'demo-document-screen',
};

export default meta;
type Story = StoryObj;

// 👇 The mocked data that will be used in the story
const TestData = {
  user: {
    userID: 1,
    name: 'Someone',
  },
  document: {
    id: 1,
    userID: 1,
    title: 'Something',
    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    status: 'approved',
  },
  subdocuments: [
    {
      id: 1,
      userID: 1,
      title: 'Something',
      content:
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
      status: 'approved',
    },
  ],
};

export const MockedSuccess: Story = {
  parameters: {
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint/', () => {
          return HttpResponse.json(TestData);
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for Angular Component
DESCRIPTION: This code initializes a Storybook story for an Angular component named MyComponent. It imports necessary modules from '@storybook/angular' and defines a story that renders the component with an image, passing the image source and alt text as props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

import imageFile from './static/image.png';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

const image = {
  src: imageFile,
  alt: 'my image',
};

export const WithAnImage: Story = {
  render: () => ({
    props: {
      src: image.src,
      alt: image.alt,
    },
    template: `<img src="{{src}}" alt="{{alt}}" />`,
  }),
};
```

----------------------------------------

TITLE: Simulating Filled Form Interactions (CSF)
DESCRIPTION: This code defines a Storybook story for a filled LoginForm, simulating user interactions such as typing in the email and password fields, clicking the submit button, and asserting that a success message is displayed. It uses 'storybook/test' for user event simulation and DOM querying.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_13

LANGUAGE: js
CODE:
```
export const FilledForm = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));

    // 👇 Assert DOM structure
    await expect(
      canvas.getByText(
        'Everything is perfect. Your account is ready and we should probably get you started!'
      )
    ).toBeInTheDocument();
  },
};
```

----------------------------------------

TITLE: Migrating Preview.js to Default Export in Storybook
DESCRIPTION: This code demonstrates the migration from the old `preview.js` format to the recommended default export format in Storybook 7. It shows how to encapsulate parameters within a `preview` object and export it as the default.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_86

LANGUAGE: js
CODE:
```
export const parameters = {
  actions: { argTypesRegex: "^on[A-Z].*" },
};
```

LANGUAGE: js
CODE:
```
const preview = {
  parameters: {
    actions: { argTypesRegex: "^on[A-Z].*" },
  },
};
export default preview;
```

----------------------------------------

TITLE: Initializing Storybook main config with defineMain - Typescript
DESCRIPTION: The `defineMain` function is used to specify the main Storybook configuration in a type-safe manner. It automatically infers types for the project, ensuring that the configuration is valid and consistent. This example shows how to define the framework, stories, and addons.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, nextjs, nextjs-vite)
import { defineMain } from '@storybook/your-framework/node';

export default defineMain({
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: ['@storybook/addon-a11y'],
});
```

----------------------------------------

TITLE: Loading Custom Fonts and Stylesheets in Storybook Preview
DESCRIPTION: This HTML snippet configures the preview head in Storybook to load a custom font from Google Fonts CDN and a local CSS file. It establishes preconnect links for performance optimization and includes the necessary stylesheet links.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-head-import-global-styles.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!-- Loads a font from a CDN -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap"
  rel="stylesheet"
/>
<!-- Load your CSS file -->
<link rel="stylesheet" href="path/to/your/styles.css" />
```

----------------------------------------

TITLE: Configuring Storybook Story for React Component (TypeScript)
DESCRIPTION: This snippet configures a Storybook story for a React component using TypeScript, adding a decorator that applies a margin around the rendered component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/react-vite';

import { YourComponent } from './YourComponent';

const meta = {
  component: YourComponent,
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </div>
    ),
  ],
} satisfies Meta<typeof YourComponent>;

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Main File in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Storybook's main file using TypeScript. It imports the StorybookConfig type, sets the framework, specifies story locations, and enables crash reports for telemetry events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-enable-crash-reports.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    enableCrashReports: true, // 👈 Appends the crash reports to the telemetry events
  },
};

export default config;
```

----------------------------------------

TITLE: Rendering a Web Component with Args and Function Result (JS)
DESCRIPTION: This snippet shows how to render a Web Component in a Storybook story, passing arguments and using a function to derive a property value. It defines a `render` function that receives arguments, calls `someFunction` with `propertyA` and `propertyB`, and returns an HTML template with the derived `someProperty`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_14

LANGUAGE: javascript
CODE:
```
const someFunction = (valuePropertyA, valuePropertyB) => {
  // Do some logic here
};

export const ExampleStory = {
  render: ({ propertyA, propertyB }) => {
    //👇 Assigns the function result to a variable
    const someFunctionResult = someFunction(propertyA, propertyB);

    return html`
      <custom-component
        .propertyA=${propertyA}
        .propertyB=${propertyB}
        .someProperty=${someFunctionResult}
      ></custom-component>
    `;
  },
  args: {
    propertyA: 'Item One',
    propertyB: 'Another Item One',
  },
};
```

----------------------------------------

TITLE: Testing Svelte Button Component with Storybook
DESCRIPTION: This snippet demonstrates how to test a Svelte Button component using Storybook's composeStories and testing-library. It imports stories, composes them, and then tests the rendering of the primary button with default arguments and overridden props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-compose-stories.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { test, expect } from 'vitest';
import { screen } from '@testing-library/svelte';
import { composeStories } from '@storybook/svelte-vite';

// Import all stories and the component annotations from the stories file
import * as stories from './Button.stories';

// Every component that is returned maps 1:1 with the stories,
// but they already contain all annotations from story, meta, and project levels
const { Primary, Secondary } = composeStories(stories);

test('renders primary button with default args', async () => {
  await Primary.run();
  const buttonElement = screen.getByText('Text coming from args in stories file!');
  expect(buttonElement).not.toBeNull();
});

test('renders primary button with overridden props', async () => {
  // You can override props by passing them in the context argument of the run function
  await Primary.run({ args: { ...Primary.args, children: 'Hello world' } });
  const buttonElement = screen.getByText(/Hello world/i);
  expect(buttonElement).not.toBeNull();
});
```

----------------------------------------

TITLE: Configure Storybook Preview with Custom Elements (JS)
DESCRIPTION: Configures Storybook to use a custom elements manifest, enabling proper rendering and interaction with Web Components. It also sets up control matchers for color and date properties to improve the user experience in the Storybook UI. Requires the '@storybook/web-components-vite' package and a 'custom-elements.json' file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-elements-config.md#_snippet_0

LANGUAGE: js
CODE:
```
import { setCustomElementsManifest } from '@storybook/web-components-vite';

import customElements from '../custom-elements.json';

setCustomElementsManifest(customElements);

export default {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
  },
};
```

----------------------------------------

TITLE: Storybook Meta and Story with Locale in Solid (TSX)
DESCRIPTION: This code defines a Storybook story for a Solid component, MyComponent, using TypeScript. It imports Meta and StoryObj from 'storybook-solidjs', defines a meta object for the component, and creates a story named StoryWithLocale that renders the component with a locale-specific caption. The caption is determined by the getCaptionForLocale function based on the provided locale.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

const getCaptionForLocale = (locale) => {
  switch (locale) {
    case 'es':
      return 'Hola!';
    case 'fr':
      return 'Bonjour!';
    case 'kr':
      return '안녕하세요!';
    case 'zh':
      return '你好!';
    default:
      return 'Hello!';
  }
};

export const StoryWithLocale = {
  render: (args, { globals: { locale } }) => {
    const caption = getCaptionForLocale(locale);
    return <p>{caption}</p>;
  },
};
```

----------------------------------------

TITLE: Configuring Component Meta with ArgTypes in Svelte (CSF - TS)
DESCRIPTION: This code configures the metadata for a Storybook story in Svelte using TypeScript and Component Story Format (CSF). It imports the component and uses defineMeta to set up the story, disabling the 'foo' property from appearing in the UI by setting 'disable: true' within the 'table' property of the 'argTypes' configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import YourComponent from './YourComponent.svelte';

  const { Story } = defineMeta({
    component: YourComponent,
    argTypes: {
      // foo is the property we want to remove from the UI
      foo: {
        table: {
          disable: true,
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Accessing Storybook Environment Variables in Vite
DESCRIPTION: This snippet shows how to access Storybook environment variables (STORYBOOK_THEME and STORYBOOK_DATA_KEY) in a Vite-based environment using the import.meta.env object. This syntax is specific to ES modules in Vite projects.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-read-environment-variables.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
console.log(import.meta.env.STORYBOOK_THEME);
console.log(import.meta.env.STORYBOOK_DATA_KEY);
```

----------------------------------------

TITLE: Customizing Storybook Preview Head in TypeScript
DESCRIPTION: This snippet demonstrates how to customize the Storybook preview head in TypeScript. It imports the StorybookConfig type and adds custom CSS styles to change the background color of the preview.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  previewHead: (head) => `
    ${head}
    <style>
      html, body {
        background: #827979;
      }
    </style>
 `,
};

export default config;
```

----------------------------------------

TITLE: Setting Title for Unattached MDX with Meta
DESCRIPTION: Demonstrates how to use the Meta component with the title prop to control the location of an unattached MDX file in the sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-meta.mdx#2025-04-22_snippet_4

LANGUAGE: markdown
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';

{/* Override the docs entry's location in the sidebar with title */}
<Meta title="path/to/Introduction" />
```

----------------------------------------

TITLE: Mocking Successful GraphQL Query with MSW - Javascript
DESCRIPTION: This snippet defines a Storybook story that mocks a successful GraphQL query using MSW in a Javascript component. It intercepts the 'AllInfoQuery' and returns a predefined 'TestData' object as the response. This allows testing the component's behavior when receiving valid data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import { graphql, HttpResponse } from 'msw';

import MockApolloWrapperClient from './MockApolloWrapperClient.svelte';
import DocumentScreen from './YourPage.svelte';

export default {
  component: DocumentScreen,
  decorators: [() => MockApolloWrapperClient],
};

//👇The mocked data that will be used in the story
const TestData = {
  user: {
    userID: 1,
    name: 'Someone',
  },
  document: {
    id: 1,
    userID: 1,
    title: 'Something',
    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    status: 'approved',
  },
  subdocuments: [
    {
      id: 1,
      userID: 1,
      title: 'Something',
      content:
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
      status: 'approved',
    },
  ],
};

export const MockedSuccess = {
```

----------------------------------------

TITLE: Handling potential undefined play function in composeStories
DESCRIPTION: This code snippet illustrates the TypeScript type change in the `play` function returned from `composeStories` or `composeStory`. It shows how to handle the case where the `play` function might be undefined.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_45

LANGUAGE: typescript
CODE:
```
const { Primary } = composeStories(stories)

// before
// await Primary.play(...)

// after
// await Primary.play?.(...) // if you don't care whether the play function exists
// await Primary.play!(...) // if you want a runtime error when the play function does not exist
```

----------------------------------------

TITLE: Configuring Button Component Story - Common JS
DESCRIPTION: This code configures the story for a Button component in Storybook using JavaScript. It defines the component and its argTypes, which control the properties that can be customized in the Storybook UI, such as backgroundColor, primary, label, onClick, and size. The argTypes are organized into categories like Colors, Text, Events, and Sizes for better organization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-categories.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  argTypes: {
    // Assigns the argTypes to the Colors category
    backgroundColor: {
      control: 'color',
      table: {
        category: 'Colors',
      },
    },
    primary: {
      table: {
        category: 'Colors',
      },
    },
    // Assigns the argType to the Text category
    label: {
      table: {
        category: 'Text',
      },
    },
    // Assigns the argType to the Events category
    onClick: {
      table: {
        category: 'Events',
      },
    },
    // Assigns the argType to the Sizes category
    size: {
      table: {
        category: 'Sizes',
      },
    },
  },
};
```

----------------------------------------

TITLE: Installing @storybook/preset-create-react-app using Shell
DESCRIPTION: Provides commands to install the `@storybook/preset-create-react-app` package as a development dependency using either the Yarn or npm package managers. This preset helps integrate Storybook with Create React App projects.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
# Yarn
yarn add -D @storybook/preset-create-react-app

# npm
npm install -D @storybook/preset-create-react-app
```

----------------------------------------

TITLE: Update Component to Use Subpath Import
DESCRIPTION: This TypeScript code demonstrates how to update a component file to use a subpath import instead of a relative import. It replaces the original import statement with a new one that uses the `#lib/session` subpath.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
// ➖ Remove this line
// import { getUserFromSession } from '../../lib/session';
// ➕ Add this line
import { getUserFromSession } from '#lib/session';
```

----------------------------------------

TITLE: Defining Svelte Story with CSF and Play Function
DESCRIPTION: This code defines a Svelte Storybook story using Component Story Format (CSF) and a play function. It imports necessary modules, defines the meta object, and uses 'userEvent.type' to simulate user input.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#_snippet_2

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, within } from 'storybook/test';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<!--
  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
  to learn more about using the canvasElement to query the DOM
-->
<Story
  name="DelayedStory"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const exampleElement = canvas.getByLabelText('example-element');

    // The delay option sets the amount of milliseconds between characters being typed
    await userEvent.type(exampleElement, 'random string', {
      delay: 100,
    });

    const AnotherExampleElement = canvas.getByLabelText('another-example-element');
    await userEvent.type(AnotherExampleElement, 'another random string', {
      delay: 100,
    });
  }}
/>
```

----------------------------------------

TITLE: Initializing Button Story with Backgrounds in Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF), setting a global background color and overriding it for a specific story. It imports the Button component and defines the default export with component metadata and a story with overridden background.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  globals: {
    // 👇 Set background value for all component stories
    backgrounds: { value: 'gray', grid: false },
  },
};

export const OnDark = {
  globals: {
    // 👇 Override background value for this story
    backgrounds: { value: 'dark' },
  },
};

```

----------------------------------------

TITLE: Configuring Storybook Meta for Button Component
DESCRIPTION: This code snippet imports the Meta type from Storybook and the Button component, then defines the metadata for the Button component using the 'satisfies' operator for stricter type checking. It exports the meta object as the default export for Storybook to use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-baseline-with-satisfies.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>; // 👈 Satisfies operator being used for stricter type checking.

export default meta;
```

----------------------------------------

TITLE: Correct Context Usage in Storybook Play Function (JavaScript)
DESCRIPTION: This snippet shows the correct way to pass the full context to the play function of another story in Storybook. It ensures that all necessary internal functionality is available for interactions to work correctly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/context-in-play-function.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { within, userEvent } from '@storybook/testing-library'

MyStory.play = (context) => {
  const canvas = within(context.canvasElement)
  // passing full context 👍
  await MyOtherStory.play(context)

  await userEvent.click(canvas.getByRole('button'))
}
```

LANGUAGE: javascript
CODE:
```
import { within, userEvent } from '@storybook/testing-library'

MyStory.play = ({ context, canvasElement }) => {
  const canvas = within(canvasElement)
  // passing self referencing context property 👍
  await MyOtherStory.play(context)

  await userEvent.click(canvas.getByRole('button'))
}
```

----------------------------------------

TITLE: Defining Storybook Meta for Angular Component
DESCRIPTION: This code defines the metadata for a Storybook story using Angular. It imports the component and the Meta type from '@storybook/angular'. It configures the component, and demonstrates the usage of 'args' to set the default value for the 'value' property, instead of the deprecated 'defaultValue'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Example } from './Example';

const meta: Meta<Example> = {
  component: Example,
  argTypes: {
    value: {
      // ⛔️ Deprecated, do not use
      defaultValue: 0,
    },
  },
  // ✅ Do this instead
  args: {
    value: 0,
  },
};

export default meta;
```

----------------------------------------

TITLE: Mark components with accessibility issues as 'todo'
DESCRIPTION: This snippet demonstrates how to temporarily reduce accessibility failures to warnings by applying the `'todo'` parameter value to a component's metadata. This keeps the issues visible without blocking development.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Example/Button',
  component: Button,
  parameters: {
    a11y: {
      config: {},
      options: {},
      test: 'todo',
    },
  },
};

```

----------------------------------------

TITLE: Highlighting Story Elements in Svelte (CSF, TS)
DESCRIPTION: This snippet demonstrates how to highlight specific elements within a Svelte Storybook story using the `useChannel` hook and the `HIGHLIGHT` event within a Component Story Format (CSF) using Typescript. It utilizes a decorator to wrap the story function and emit the highlight event with specified CSS selectors, enabling visual emphasis on particular parts of the component during development.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { useChannel } from 'storybook/preview-api';
  import { HIGHLIGHT } from 'storybook/highlight';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="Highlighted"
  decorators=[
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
      });
      return storyFn();
    },
  ]
/>
```

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Highlighted: Story = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Creating a Conditional Storybook Addon Panel in JavaScript/TypeScript
DESCRIPTION: Implements a React component that creates a custom addon panel for Storybook. The component uses the useStorybookState hook to detect the current view mode and conditionally renders different content based on whether the user is viewing documentation or a story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-usestorybookstate.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { AddonPanel } from 'storybook/internal/components';

import { useStorybookState } from 'storybook/manager-api';

export const Panel = () => {
  const state = useStorybookState();
  return (
    <AddonPanel {...props}>
      {state.viewMode !== 'docs' ? (
        <h2>Do something with the documentation</h2>
      ) : (
        <h2>Show the panel when viewing the story</h2>
      )}
    </AddonPanel>
  );
};
```

----------------------------------------

TITLE: Configuring Manager Entries in Storybook JavaScript
DESCRIPTION: This snippet defines a function to append a specific addon to the manager entries array in a Storybook setup. It requires the 'my-other-addon' package. The function takes an optional entry array and returns a new array with the addon included.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-load-external-addons-preset.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
function managerEntries(entry = []) {
  return [...entry, require.resolve('my-other-addon/register')];
}
```

----------------------------------------

TITLE: Initializing Storybook with yarn
DESCRIPTION: Command to initialize Storybook in a JavaScript project using yarn package manager. This uses the @next tag to install the latest pre-release version of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@next init
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It exports an object with methods to customize Vite, Webpack, and Babel configurations. Each method is asynchronous and receives the current config and options as parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-advanced-config-example.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  viteFinal: async (config, options) => {
    // Update config here
    return config;
  },
  webpackFinal: async (config, options) => {
    // Change webpack config
    return config;
  },
  babel: async (config, options) => {
    return config;
  },
};
```

----------------------------------------

TITLE: Setting Default Story Pseudo States
DESCRIPTION: Example of setting the `pseudo` property on a story's `parameters` to automatically apply specific pseudo states (e.g., hover) to a component. This enables snapshot testing of pseudo states in Chromatic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/pseudo-states/README.md#_snippet_2

LANGUAGE: jsx
CODE:
```
export const Hover = () => <Button>Label</Button>;
Hover.parameters = { pseudo: { hover: true } };
```

----------------------------------------

TITLE: Initializing Gizmo Story with ArgTypes in Angular
DESCRIPTION: This code defines the metadata for a Storybook story using Angular. It imports the Gizmo component and configures its properties (argTypes) to be controlled via the Storybook UI, allowing users to interactively modify and test the component's behavior.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Gizmo } from './Gizmo.component';

const meta: Meta<Gizmo> = {
  component: Gizmo,
  argTypes: {
    canRotate: {
      control: 'boolean',
    },
    width: {
      control: { type: 'number', min: 400, max: 1200, step: 50 },
    },
    height: {
      control: { type: 'range', min: 200, max: 1500, step: 50 },
    },
    rawData: {
      control: 'object',
    },
    coordinates: {
      control: 'object',
    },
    texture: {
      control: {
        type: 'file',
        accept: '.png',
      },
    },
    position: {
      control: 'radio',
      options: ['left', 'right', 'center'],
    },
    rotationAxis: {
      control: 'check',
      options: ['x', 'y', 'z'],
    },
    scaling: {
      control: 'select',
      options: [10, 50, 75, 100, 200],
    },
    label: {
      control: 'text',
    },
    meshColors: {
      control: {
        type: 'color',
        presetColors: ['#ff0000', '#00ff00', '#0000ff'],
      },
    },
    revisionDate: {
      control: 'date',
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Button Component Meta for Svelte in Storybook (CSF)
DESCRIPTION: This code configures the metadata for a Button component in Storybook using Svelte and the Component Story Format (CSF). It imports the Button component and uses defineMeta to define the component and its argument types. The argTypes configuration ensures that either a label or an image can be passed to the Button, but not both, using conditional logic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    argTypes: {
      // Button can be passed a label or an image, not both
      label: {
        control: 'text',
        if: { arg: 'image', truthy: false },
      },
      image: {
        control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },
        if: { arg: 'label', truthy: false },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Storybook Refs in main.ts (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to configure the `.storybook/main.ts` file with type checking using `StorybookConfig` imported from the chosen framework package. It specifies the framework (placeholder needing replacement), defines story file locations, and adds an external Storybook reference via the `refs` property, pointing to the Storybook Design System. This typed configuration enables Storybook Composition. Dependencies include Storybook, TypeScript, and the specific framework package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-refs.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  refs: {
    'design-system': {
      title: 'Storybook Design System',
      url: 'https://master--5ccbc373887ca40020446347.chromatic.com/',
      expanded: false, // Optional, true by default,
      sourceUrl: 'https://github.com/storybookjs/storybook', // Optional
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Defining Storybook Docs Configuration Types in TypeScript
DESCRIPTION: This TypeScript interface defines the structure for configuring Storybook's auto-generated documentation. It includes options for enabling autodocs, setting the default documentation name, and enabling docs-only mode.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-docs.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
{
  autodocs?: boolean | 'tag';
  defaultName?: string;
  docsMode?: boolean;
}
```

----------------------------------------

TITLE: Configuring Global Types for Locale in Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet configures Storybook's preview to include a global type for selecting the locale. It defines the available locales (English, French, Spanish, Chinese, Korean) and their corresponding icons and titles. The initial locale is set to English. Note: Replace 'your-framework' with the appropriate framework.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-locales-globaltype.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  globalTypes: {
    locale: {
      description: 'Internationalization locale',
      toolbar: {
        icon: 'globe',
        items: [
          { value: 'en', right: '🇺🇸', title: 'English' },
          { value: 'fr', right: '🇫🇷', title: 'Français' },
          { value: 'es', right: '🇪🇸', title: 'Español' },
          { value: 'zh', right: '🇨🇳', title: '中文' },
          { value: 'kr', right: '🇰🇷', title: '한국어' },
        ],
      },
    },
  },
  initialGlobals: {
    locale: 'en',
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook Story for Svelte Component
DESCRIPTION: This code configures a Storybook story for a Svelte component named 'Example'. It sets the component and defines the 'icon' argument with available options for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#_snippet_2

LANGUAGE: js
CODE:
```
import Example from './Example.svelte';

export default {
  component: Example,
  argTypes: {
    icon: {
      options: ['arrow-up', 'arrow-down', 'loading'],
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Composition Refs
DESCRIPTION: This snippet shows how to configure Storybook composition using refs. It defines references to other Storybook instances.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
refs: { example: { title: 'ExampleStorybook', url:'https://your-url.com' } }
```

----------------------------------------

TITLE: Initializing Storybook Preview with Web Components Decorator (TS)
DESCRIPTION: This snippet configures a Storybook preview for Web Components using TypeScript, adding a decorator that wraps each story with a div element, applying a 3em margin. It uses lit-html to define the template and imports the Preview type from '@storybook/web-components-vite'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/web-components-vite';

import { html } from 'lit';

const preview: Preview = {
  decorators: [(story) => html`<div style="margin: 3em">${story()}</div>`],
};

export default preview;
```

----------------------------------------

TITLE: Initializing Storybook Meta for Angular Component
DESCRIPTION: This code initializes the Storybook meta object for an Angular component, defining the component to be used in the stories. It imports the necessary modules from '@storybook/angular' and the component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const Default: Story = {};

export const WithProp: Story = {
  render: () => ({
    props: {
      prop: 'value',
    },
  }),
};

```

----------------------------------------

TITLE: Configure Storybook Framework in main.js/ts
DESCRIPTION: Updates the .storybook/main.js or .storybook/main.ts file to specify the @storybook/preact-vite framework. This configuration tells Storybook to use the Preact Vite framework for building and running stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/preact-vite.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import type { StorybookConfig } from "@storybook/preact-vite";
const config: StorybookConfig = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|ts|tsx)"],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: "@storybook/preact-vite",
    options: {},
  },
  docs: {
    autodocs: "tag",
  },
};
export default config;
```

----------------------------------------

TITLE: Initializing LoginForm Story with Svelte
DESCRIPTION: This code defines a Storybook story for the LoginForm component using Svelte. It imports necessary modules, defines metadata for the component, and creates stories for both empty and filled form scenarios, including simulating user input and asserting the expected DOM structure after form submission.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_14

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { expect, userEvent, within } from 'storybook/test';

import LoginForm from './LoginForm.svelte';

const meta = {
  component: LoginForm,
} satisfies Meta<typeof LoginForm>;

export default meta;
type Story = StoryObj<typeof meta>;

export const EmptyForm: Story = {};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));

    // 👇 Assert DOM structure
    await expect(
      canvas.getByText(
        'Everything is perfect. Your account is ready and we should probably get you started!'
      )
    ).toBeInTheDocument();
  },
};
```

----------------------------------------

TITLE: Registering JSON Stories Indexer in Storybook (JS)
DESCRIPTION: This code defines a custom Storybook indexer, `jsonStoriesIndexer`, to process JSON files as story sources. It reads the JSON file, extracts story definitions using `generateStoryIndexesFromJson`, and returns an array of story index entries. The indexer is then registered within the `experimental_indexers` configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers-jsonstories.md#_snippet_0

LANGUAGE: js
CODE:
```
import fs from 'fs/promises';

const jsonStoriesIndexer = {
  test: /stories\.json$/,
  createIndex: async (fileName) => {
    const content = JSON.parse(fs.readFileSync(fileName));

    const stories = generateStoryIndexesFromJson(content);

    return stories.map((story) => ({
      type: 'story',
      importPath: `virtual:jsonstories--${fileName}--${story.componentName}`,
      exportName: story.name,
    }));
  },
};

const config = {
  framework: '@storybook/your-framework',
  stories: [
    '../src/**/*.mdx',
    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',
    // 👇 Make sure files to index are included in `stories`
    '../src/**/*.stories.json',
  ],
  experimental_indexers: async (existingIndexers) => [...existingIndexers, jsonStoriesIndexer],
};

export default config;
```

----------------------------------------

TITLE: Configuring Button Component Story - Web Components JS
DESCRIPTION: This code configures the story for a Button component in Storybook using JavaScript for web components. It defines the component and its argTypes, which control the properties that can be customized in the Storybook UI, such as backgroundColor, primary, label, onClick, and size. The argTypes are organized into categories like Colors, Text, Events, and Sizes for better organization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-categories.md#_snippet_3

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  argTypes: {
    // Assigns the argTypes to the Colors category
    backgroundColor: {
      control: 'color',
      table: {
        category: 'Colors',
      },
    },
    primary: {
      table: {
        category: 'Colors',
      },
    },
    // Assigns the argType to the Text category
    label: {
      table: {
        category: 'Text',
      },
    },
    // Assigns the argType to the Events category
    onClick: {
      table: {
        category: 'Events',
      },
    },
    // Assigns the argType to the Sizes category
    size: {
      table: {
        category: 'Sizes',
      },
    },
  },
};
```

----------------------------------------

TITLE: Installing Storybook with Yarn for Solid.js
DESCRIPTION: Command to create a new Storybook installation for Solid.js projects using Yarn package manager. Uses the latest version of Storybook with Solid.js template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-manual-framework.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn create storybook@latest --type solid
```

----------------------------------------

TITLE: Documenting components with MDX Doc Blocks
DESCRIPTION: This MDX code snippet demonstrates how to use Doc Blocks such as Meta, Primary, Controls, and Story to document a Button component in Storybook. It imports the necessary components from @storybook/addon-docs/blocks and Button stories, then uses the blocks to define the component's metadata, primary story, props, and additional stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/doc-blocks.mdx#_snippet_0

LANGUAGE: Markdown
CODE:
```
import { Meta, Primary, Controls, Story } from '@storybook/addon-docs/blocks';

import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

# Button

A button is ...

<Primary />

## Props

<Controls />

## Stories

### Primary

A button can be of primary importance.

<Story of={ButtonStories.Primary} />

A button can be of secondary importance.

<Story of={ButtonStories.Secondary} />

{/* ... */}
```

----------------------------------------

TITLE: Compose Story with Locale Override in React
DESCRIPTION: This snippet uses `composeStory` from `@storybook/react-vite` to create a new story, `PrimaryEnglish`, based on the `Primary` story and `meta` configuration. It overrides the global `locale` parameter to 'en', effectively creating an English version of the primary button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct-override-globals.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { composeStory } from '@storybook/react-vite';

import meta, { Primary } from './Button.stories';

export const PrimaryEnglish = composeStory(
  Primary,
  meta,
  { globals: { locale: 'en' } } // 👈 Project annotations to override the locale
);

export const PrimarySpanish = composeStory(Primary, meta, { globals: { locale: 'es' } });
```

----------------------------------------

TITLE: Rendering Basic Button in Storybook (JSX)
DESCRIPTION: This snippet renders a basic Button component with a primary style and a label. It demonstrates the simplest way to define a story for the Button component in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_9

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: () => <Button primary label="Button" />,
};
```

----------------------------------------

TITLE: Defining Button Stories with Args in React (TS)
DESCRIPTION: This code defines Storybook stories for a React Button component using TypeScript, including Primary, Secondary, and Tertiary variants. It imports the necessary modules from '@storybook/react-vite' and the Button component from './Button'. The stories configure the button's appearance through the 'args' property, setting properties like 'backgroundColor' and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    backgroundColor: '#ff0',
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
};

export const Tertiary: Story = {
  args: {
    ...Primary.args,
    label: '📚📕📈🤓',
  },
};
```

----------------------------------------

TITLE: Install Babel Compiler Addon
DESCRIPTION: Installs the Storybook addon for Babel compiler support.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-webpack5.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npm install --save-dev @storybook/addon-styling-webpack babel-loader @babel/core
```

----------------------------------------

TITLE: Initializing Vue Story with CSF in Javascript
DESCRIPTION: This code initializes a Storybook story for a Vue component using JavaScript and the Component Story Format (CSF). It imports the component, defines the default export with the component, and creates a primary story with a render function and a loader that fetches todo data from an API.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import TodoItem from './TodoItem.vue';

export default {
  component: TodoItem,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: (args, { loaded: { todo } }) => ({
    components: { TodoItem },
    setup() {
      return { args, todo: todo };
    },
    template: '<TodoItem :todo="todo" />',
  }),
  loaders: [
    async () => ({
      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),
    }),
  ],
};
```

----------------------------------------

TITLE: Initializing Button Stories for Web Components (JS)
DESCRIPTION: This code initializes Storybook stories for a web component button. It defines the component's metadata, including global viewport settings. It also creates a story named 'OnPhone' that overrides the global viewport to simulate a mobile device.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  globals: {
    // 👇 Set viewport for all component stories
    viewport: { value: 'tablet', isRotated: false },
  },
};

export const OnPhone = {
  globals: {
    // 👇 Override viewport for this story
    viewport: { value: 'mobile1', isRotated: false },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the defineMeta function from '@storybook/addon-svelte-csf' and the Button component. It defines the component and sets specific parameters at the component level, such as background options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    //👇 Creates specific parameters at the component level
    parameters: {
      backgrounds: {
        options: {},
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Accessibility Parameters for Story (JS)
DESCRIPTION: This code configures accessibility parameters for a Storybook story using JavaScript. It defines rules to exclude certain elements from accessibility checks and disables specific rules. It also sets global accessibility parameters for manual testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_3

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
  parameters: {
    a11y: {
      // Optional selector to inspect
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (JS)
DESCRIPTION: Defines a Storybook story for a Svelte component, including metadata and a story with a Figma design parameter. It imports the component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#_snippet_6

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.svelte';

// More on default export: https://storybook.js.org/docs/writing-stories/#default-export
export default {
  component: MyComponent,
};

export const Example = {
  parameters: {
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/Sample-File',
    },
  },
};
```

----------------------------------------

TITLE: Configuring List Story for React in TypeScript
DESCRIPTION: This code configures a Storybook story for the List component using React and TypeScript. It imports the necessary modules from '@storybook/react-vite', the List component, and the Unchecked ListItem story. It defines metadata for the story, including the title and component, and then creates a OneItem story that renders the List with a single Unchecked ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-unchecked-children.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { List } from './List';

//👇 Instead of importing ListItem, we import the stories
import { Unchecked } from './ListItem.stories';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

export const OneItem: Story = {
  args: {
    children: <Unchecked {...Unchecked.args} />,
  },
};
```

----------------------------------------

TITLE: Installing Storybook Next.js package with yarn
DESCRIPTION: This command installs the @storybook/nextjs package as a development dependency using yarn. It provides another option for adding Storybook to a Next.js project using a different package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev @storybook/nextjs
```

----------------------------------------

TITLE: Defining Component in Story Default Export
DESCRIPTION: Setting the `component` annotation in the default export of a story file allows Storybook to infer controls and auto-generate matching argTypes for the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import type { Meta } from '@storybook/angular';
import { ButtonComponent } from './button.component';

const meta: Meta<ButtonComponent> = {
  title: 'Example/Button',
  component: ButtonComponent,
  argTypes: {
    backgroundColor: {
      control: 'color',
    },
  },
};

export default meta;

type Story = StoryObj<ButtonComponent>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    label: 'Button',
  },
};

export const Large: Story = {
  args: {
    size: 'large',
    label: 'Button',
  },
};

export const Small: Story = {
  args: {
    size: 'small',
    label: 'Button',
  },
};

```

----------------------------------------

TITLE: Registering Storybook Addons in main.js Configuration
DESCRIPTION: This snippet shows how to configure Storybook's main.js file to register a custom addon. The configuration uses an ES module that exports a default object with an 'addons' array containing the path to the addon's manager.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-addon.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  addons: ['path/to/manager.js'],
};
```

----------------------------------------

TITLE: Configuring Storybook Framework Options in main.js
DESCRIPTION: This code snippet demonstrates how to configure the Storybook framework options within the `.storybook/main.js` file. It includes settings for image loading and specifying the path to the `next.config.js` file. The `path` module is used to resolve the absolute path to the configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_32

LANGUAGE: javascript
CODE:
```
import * as path from 'path';

// Replace your-framework with nextjs or nextjs-vite
export default {
  // ...
  framework: {
    name: '@storybook/your-framework',
    options: {
      image: {
        loading: 'eager',
      },
      nextConfigPath: path.resolve(__dirname, '../next.config.js'),
    },
  },
};
```

----------------------------------------

TITLE: Add Jest test results to Storybook story
DESCRIPTION: Demonstrates how to import test results and use the `withTests` decorator to display them in a Storybook story.  It imports the necessary modules, including the component, test results, and the `withTests` decorator.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/jest/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
// MyComponent.stories.js|jsx
import { withTests } from '@storybook/addon-jest';
import results from '../.jest-test-results.json';
import MyComponent from './MyComponent';

export default {
  component: MyComponent,
  title: 'MyComponent',
  decorators: [withTests({ results })],
};
```

----------------------------------------

TITLE: Mocking Successful API Response with MSW in Storybook (JS)
DESCRIPTION: This snippet configures a Storybook story to mock a successful API response using MSW. It defines an HTTP GET handler that intercepts requests to 'https://your-restful-endpoint/' and returns a predefined JSON object (TestData) as the response. This allows the 'demo-document-screen' component to render with mock data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import { http, HttpResponse, delay } from 'msw';

export default {
  component: 'demo-document-screen',
};

// 👇 The mocked data that will be used in the story
const TestData = {
  user: {
    userID: 1,
    name: 'Someone',
  },
  document: {
    id: 1,
    userID: 1,
    title: 'Something',
    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    status: 'approved',
  },
  subdocuments: [
    {
      id: 1,
      userID: 1,
      title: 'Something',
      content:
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
      status: 'approved',
    },
  ],
};

export const MockedSuccess = {
  parameters: {
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint/', () => {
          return HttpResponse.json(TestData);
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Setting Mock Cookies and Headers in Storybook (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to set mock cookies and headers within a Storybook story's `beforeEach` hook. It uses the `cookies` and `headers` mocks from `@storybook/your-framework/headers.mock` to simulate a logged-in user in Europe. The `play` function asserts that the mocks are called as expected.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-headers-mock.md#_snippet_0

LANGUAGE: js
CODE:
```
import { expect, userEvent, within } from 'storybook/test';

/*
 * Replace your-framework with nextjs or nextjs-vite
 * 👇 Must include the `.mock` portion of filename to have mocks typed correctly
 */
import { cookies, headers } from '@storybook/your-framework/headers.mock';

import MyForm from './my-form';

export default {
  component: MyForm,
};

export const LoggedInEurope = {
  async beforeEach() {
    // 👇 Set mock cookies and headers ahead of rendering
    cookies().set('username', 'Sol');
    headers().set('timezone', 'Central European Summer Time');
  },
  async play() {
    // 👇 Assert that your component called the mocks
    await expect(cookies().get).toHaveBeenCalledOnce();
    await expect(cookies().get).toHaveBeenCalledWith('username');
    await expect(headers().get).toHaveBeenCalledOnce();
    await expect(cookies().get).toHaveBeenCalledWith('timezone');
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with Svelte CSF (TypeScript)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF) in TypeScript. It imports necessary types from '@storybook/your-framework' and defines a primary story with a decorator for adding margin.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#_snippet_7

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';
import MarginDecorator from './MarginDecorator.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  decorators: [() => MarginDecorator],
};
```

----------------------------------------

TITLE: Initializing Storybook Meta for Web Components (JS)
DESCRIPTION: This snippet initializes the Storybook meta object for a web component using JavaScript. It defines the component to be documented as 'my-component' and creates a simple story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-storyname.md#_snippet_3

LANGUAGE: js
CODE:
```
export default {
  component: 'my-component',
};

export const Simple = {
  name: 'So simple!',
  // ...
};
```

----------------------------------------

TITLE: Override Default Theme in Storybook
DESCRIPTION: This example demonstrates how to override the default theme used by Storybook's documentation by updating the Storybook UI configuration file (`.storybook/preview.js|ts`). This allows you to match the documentation theme to the existing UI theme.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_12

LANGUAGE: javascript
CODE:
```
This is a placeholder for the 'storybook-preview-auto-docs-override-theme.md' code snippet.
```

----------------------------------------

TITLE: Configuring Storybook Backgrounds in JavaScript
DESCRIPTION: This JavaScript snippet configures the background options for Storybook stories. It defines a set of named color values (red and green) that can be selected to change the background of components within the Storybook environment. This allows for easy visual testing of components against different backgrounds.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-parameters.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    backgrounds: {
      values: [
        { name: 'red', value: '#f00' },
        { name: 'green', value: '#0f0' },
      ],
    },
  },
};
```

----------------------------------------

TITLE: Custom Args for Populating Child Components
DESCRIPTION: Illustrates how to use custom args, which are not part of the main component, to populate child components within a Storybook story. This example shows how a `footer` arg can be used to populate a child component, enabling control over elements outside the primary component's scope.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
export const Footer = (args) => `<footer>${args.footer}</footer>`;

export const Page = (args) => `
  <article>
    <h1>My Article</h1>
    <Footer footer={args.footer} />
  </article>
`;

Page.argTypes = {
  footer: { control: 'text' },
};

```

----------------------------------------

TITLE: Configuring Web Components Story for Example Component (JavaScript)
DESCRIPTION: This snippet configures a Storybook story for a web component named 'demo-example'. It defines the component and sets up an argument type for a 'value' property, allowing users to control it with a number input in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-example',
  argTypes: {
    value: {
      control: {
        type: 'number',
        min: 0,
        max: 100,
        step: 10,
      },
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story for HTML with TS
DESCRIPTION: This code initializes a Storybook story for an HTML Button component using TypeScript. It imports the necessary modules from '@storybook/html' and defines the title for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/html';

import { createButton, ButtonArgs } from './Button';

const meta: Meta<ButtonArgs> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
};

export default meta;
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (Svelte CSF, TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte component, MyComponent, using Svelte CSF and Typescript. It imports the necessary modules and defines a story named 'WithAnImage' that renders the component with specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_7

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';
	const { Story } = defineMeta({
		component: MyComponent,
	});
</script>

<Story name="WithAnImage">
  <MyComponent src="/image.png" alt="my image" />
</Story>

```

----------------------------------------

TITLE: Defining Button Component Story Meta (Web Components, Typescript)
DESCRIPTION: This code defines the metadata for a Button component story in Storybook using Web Components and Typescript. It imports the Meta type from '@storybook/web-components-vite' and configures the meta object with the component, title, and documentation parameters, excluding the 'style' control.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Button',
  component: 'demo-button',
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Defining Button Story with JavaScript
DESCRIPTION: This code defines a Storybook story for a Button component using JavaScript. It exports a default object containing the title, component, and parameters for the story, and also exports a basic story with a render function that uses a Vue template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#_snippet_9

LANGUAGE: js
CODE:
```
import Button from './Button.vue';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
  //👇 Creates specific parameters for the story
  parameters: {
    myAddon: {
      data: 'This data is passed to the addon',
    },
  },
};

export const Basic = {
  render: () => ({
    components: { Button },
    template: '<Button label="Hello" />',
  }),
};
```

----------------------------------------

TITLE: Configuring Storybook Manager for Legacy Title Formatting
DESCRIPTION: Configuration to revert to the previous title formatting pattern using Lodash's startCase function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
// .storybook/manager.js

import { addons } from '@storybook/manager-api';
import { startCase } from 'lodash';

addons.setConfig({
  sidebar: {
    renderLabel: item => {
      const { name, type, parent } = item;
      if (type === 'story') return startCase(name);
      if (parent?.name === 'components' && type === 'component') return startCase(name);
      return name;
    },
  },
});
```

----------------------------------------

TITLE: Configuring Storybook Story with Mocked Data (JS)
DESCRIPTION: This JavaScript code configures a Storybook story for a DocumentScreen component, wrapping it with an ApolloWrapperClient component. It also defines mocked data and MSW handlers to simulate a successful GraphQL query.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_19

LANGUAGE: js
CODE:
```
import { graphql, HttpResponse, delay } from 'msw';

import WrapperComponent from './ApolloWrapperClient.vue';
import DocumentScreen from './YourPage.vue';

export default {
  component: DocumentScreen,
  render: () => ({
    components: { DocumentScreen, WrapperComponent },
    template: '<WrapperComponent><DocumentScreen /></WrapperComponent>',
  }),
};

//👇The mocked data that will be used in the story
const TestData = {
  user: {
    userID: 1,
    name: 'Someone',
  },
  document: {
    id: 1,
    userID: 1,
    title: 'Something',
    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    status: 'approved',
  },
  subdocuments: [
    {
      id: 1,
      userID: 1,
      title: 'Something',
      content:
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
      status: 'approved',
    },
  ],
};

export const MockedSuccess = {
  parameters: {
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', () => {
          return HttpResponse.json({
            data: {
              allInfo: {
                ...TestData,
              },
            },
          });
        }),
      ],
    },
  },
};

export const MockedError = {
  parameters: {
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', async () => {
          await delay(800);
          return HttpResponse.json({
            errors: [
              {
                message: 'Access denied',
              },
            ],
          });
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story - Svelte CSF (JS)
DESCRIPTION: This code defines a basic Storybook story for a Svelte Button component using JavaScript. It imports the Button component and exports a default object with the component and a 'Basic' story that configures documentation parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

export const Basic = {
  parameters: {
    docs: {
      canvas: { sourceState: 'shown' },
    },
  },
};
```

----------------------------------------

TITLE: Initializing Checkbox Storybook story for Svelte (CSF) - TS
DESCRIPTION: This code initializes a Storybook story for a Svelte Checkbox component using the Component Story Format (CSF) with TypeScript. It imports the necessary modules from '@storybook/addon-svelte-csf' and defines the component's metadata, including the title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import CheckBox from './Checkbox.svelte';

  const { Story } = defineMeta({
    /* 👇 The title prop is optional.
     * See https://storybook.js.org/docs/configure/#configure-story-loading
     * to learn how to generate automatic titles
     */
    title: 'Design System/Atoms/Checkbox',
    component: CheckBox,
  });
</script>
```

----------------------------------------

TITLE: Simulating Filled Form Interaction and Assertion in Angular
DESCRIPTION: This code defines a Storybook story for the LoginForm component in Angular, simulating user interaction with a filled form and asserting the expected DOM structure. It uses userEvent to type into email and password fields, clicks the submit button, and asserts that a success message is displayed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_1

LANGUAGE: ts
CODE:
```
/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));

    // 👇 Assert DOM structure
    await expect(
      canvas.getByText(
        'Everything is perfect. Your account is ready and we should probably get you started!'
      )
    ).toBeInTheDocument();
  },
};
```

----------------------------------------

TITLE: Creating Custom Storybook Addon Panel with Event Handling
DESCRIPTION: Implements a React component for a Storybook addon panel that listens to story changes and can emit custom events. Uses the Storybook channel API for communication and includes basic UI elements from Storybook's internal components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-usechannel.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { useChannel } from 'storybook/manager-api';
import { AddonPanel, Button } from 'storybook/internal/components';
import { STORY_CHANGED } from 'storybook/internal/core-events';

export const Panel = () => {
  // Creates a Storybook API channel and subscribes to the STORY_CHANGED event
  const emit = useChannel({
    STORY_CHANGED: (...args) => console.log(...args),
  });

  return (
    <AddonPanel key="custom-panel" active="true">
      <Button onClick={() => emit('my-event-type', { sampleData: 'example' })}>
        Emit a Storybook API event with custom data
      </Button>
    </AddonPanel>
  );
};
```

----------------------------------------

TITLE: Defining Button Stories in React with JavaScript (CSF 2)
DESCRIPTION: Creates a default button story for React components using JavaScript and CSF 2 format. The implementation spreads args as props to the Button component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// Other imports and story implementation
export const Default = (args) => <Button {...args} />;
```

----------------------------------------

TITLE: Storybook Story with Locale in React (JS)
DESCRIPTION: This code defines a Storybook story for a React component, MyComponent. It imports the component, defines a default export with the component, and creates a story named StoryWithLocale that renders the component with a locale-specific caption. The caption is determined by the getCaptionForLocale function based on the provided locale.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_1

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

const getCaptionForLocale = (locale) => {
  switch (locale) {
    case 'es':
      return 'Hola!';
    case 'fr':
      return 'Bonjour!';
    case 'kr':
      return '안녕하세요!';
    case 'zh':
      return '你好!';
    default:
      return 'Hello!';
  }
};

export const StoryWithLocale = {
  render: (args, { globals: { locale } }) => {
    const caption = getCaptionForLocale(locale);
    return <p>{caption}</p>;
  },
};
```

----------------------------------------

TITLE: Initializing Story with Play Function in JavaScript
DESCRIPTION: This code defines a Storybook story for a JavaScript component named MyComponent. It uses the play function to simulate user interaction: typing 'WrongInput' into a username field, clicking a submit button, and hovering over an error message. It relies on storybook/test for userEvent and waitFor utilities.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#_snippet_3

LANGUAGE: js
CODE:
```
import { userEvent, waitFor, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleAsyncStory = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const Input = canvas.getByLabelText('Username', {
      selector: 'input',
    });

    await userEvent.type(Input, 'WrongInput', {
      delay: 100,
    });

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const Submit = canvas.getByRole('button');
    await userEvent.click(Submit);

    await waitFor(async () => {
      await userEvent.hover(canvas.getByTestId('error'));
    });
  },
};
```

----------------------------------------

TITLE: Configure Storybook Framework with Options
DESCRIPTION: Configures the Storybook framework with additional options, such as Vite configuration. This allows customization of the build process and integration with other Vite plugins or settings.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/preact-vite.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import type { StorybookConfig } from "@storybook/preact-vite";
import type { ViteDevServer } from 'vite';

const config: StorybookConfig = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|ts|tsx)"],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: "@storybook/preact-vite",
    options: {
      viteFinal: (config: any) => {
        // do some stuff to the config
        return config;
      },
    },
  },
  docs: {
    autodocs: "tag",
  },
};
export default config;
```

----------------------------------------

TITLE: Configuring Storybook Preset Entry Points in JavaScript
DESCRIPTION: Exports a config function that takes an optional entry array parameter and merges it with the default parameters module path. This allows extending Storybook's configuration with custom preset values.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-backgrounds-preset-config.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export function config(entry = []) {
  return [...entry, require.resolve('./defaultParameters')];
}
```

----------------------------------------

TITLE: Configuring Angular Story for Example Component
DESCRIPTION: This snippet configures a Storybook story for an Angular component named 'Example'. It defines the component and sets up an argument type for a 'value' property, allowing users to control it with a number input in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Example } from './Example';

const meta: Meta<Example> = {
  component: Example,
  argTypes: {
    value: {
      control: {
        type: 'number',
        min: 0,
        max: 100,
        step: 10,
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Initializing Storybook Configuration with Options in Angular
DESCRIPTION: This code snippet demonstrates how to initialize a Storybook configuration in an Angular project using TypeScript. It imports the StorybookConfig type and defines a configuration object with framework options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_31

LANGUAGE: javascript
CODE:
```
import type { StorybookConfig } from '@storybook/angular';

const config: StorybookConfig = {
  framework: {
    name: '@storybook/angular',
    options: {
      // ...
    },
  },
};
```

----------------------------------------

TITLE: Highlighting Story Elements in React (TS)
DESCRIPTION: This snippet demonstrates how to highlight specific elements within a React Storybook story using TypeScript, the `useChannel` hook, and the `HIGHLIGHT` event. It uses a decorator to wrap the story function and emit the highlight event with specified CSS selectors, enabling visual emphasis on particular parts of the component during development.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Highlighted: Story = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Initializing Storybook Story for React Component (JS)
DESCRIPTION: Defines a Storybook story for a React component, including metadata and a story with a Figma design parameter. It imports the component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#_snippet_1

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

// More on default export: https://storybook.js.org/docs/writing-stories/#default-export
export default {
  component: MyComponent,
};

export const Example = {
  parameters: {
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/Sample-File',
    },
  },
};
```

----------------------------------------

TITLE: Defining SBType in TypeScript
DESCRIPTION: Defines the SBType, which represents the type of an arg in Storybook. It includes scalar types (boolean, string, number, function, symbol), array, object, enum, intersection, union, and other custom types.  Each type can have properties like required and raw.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_20

LANGUAGE: typescript
CODE:
```
interface SBBaseType {
    required?: boolean;
    raw?: string;
  }

  type SBScalarType = SBBaseType & {
    name: 'boolean' | 'string' | 'number' | 'function' | 'symbol';
  };

  type SBArrayType = SBBaseType & {
    name: 'array';
    value: SBType;
  };
  type SBObjectType = SBBaseType & {
    name: 'object';
    value: Record<string, SBType>;
  };
  type SBEnumType = SBBaseType & {
    name: 'enum';
    value: (string | number)[];
  };
  type SBIntersectionType = SBBaseType & {
    name: 'intersection';
    value: SBType[];
  };
  type SBUnionType = SBBaseType & {
    name: 'union';
    value: SBType[];
  };
  type SBOtherType = SBBaseType & {
    name: 'other';
    value: string;
  };

  type SBType =
    | SBScalarType
    | SBEnumType
    | SBArrayType
    | SBObjectType
    | SBIntersectionType
    | SBUnionType
    | SBOtherType;
```

----------------------------------------

TITLE: Client Preview Configuration
DESCRIPTION: Client-side preview configuration for framework implementation
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import './globals';
import { renderToDOM } from './render';

start(renderToDOM);
```

----------------------------------------

TITLE: Configuring Storybook Composition for Published Storybooks
DESCRIPTION: This snippet shows how to configure Storybook Composition to reference a published Storybook using the 'refs' field in the main configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/storybook-composition.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  refs: {
    'design-system': {
      title: 'Acme Design System',
      url: 'https://5ccbc373887ca40020446347-yldsqjoxzb.chromatic.com',
    },
  },
};
```

----------------------------------------

TITLE: Upgrading Storybook to Version 7 with npm
DESCRIPTION: This command upgrades Storybook to version 7 using npm. It uses npx to execute the upgrade command without installing Storybook globally.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade-to-prior-major.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@^7 upgrade
```

----------------------------------------

TITLE: Install Storybook SvelteKit Framework
DESCRIPTION: This command installs the `@storybook/sveltekit` package, which is required for using Storybook with SvelteKit.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
npm install -D @storybook/sveltekit
```

----------------------------------------

TITLE: Setting Globals on a Story
DESCRIPTION: This example demonstrates how to set global values for a specific story, overriding project-level global settings. It shows how to force a specific background color for Button stories, while allowing a different background for the `OnDark` story. The toolbar menu for the `backgrounds` global will be disabled for these stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
export const OnDark = Template.bind({});
OnDark.args = {
  label: 'On Dark',
};
OnDark.parameters = {
  backgrounds: {
    value: 'dark',
  },
};

OnDark.storyName = 'onDark';

export default {
  title: 'Button',
  component: Button,
  parameters: {
    backgrounds: {
      values: [
        { name: 'light', value: 'white' },
        { name: 'dark', value: 'gray' },
      ],
    },
  },
  decorators: [
    (Story) => (
      <div style={{ backgroundColor: 'var(--background-color)' }}>
        <Story />
      </div>
    ),
  ],
  globals: {
    backgrounds: {
      value: 'gray',
    },
  },
};

```

----------------------------------------

TITLE: Creating Storybook Addon Components with State Management in JavaScript/TypeScript
DESCRIPTION: This code implements two main components for a Storybook addon: a Panel and a Tool component. Both components use the useAddonState hook to maintain state that persists across the addon. The Panel appears in the addon panel section while the Tool adds an interactive button to the toolbar with a lightning icon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-useaddonstate.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { useAddonState } from 'storybook/manager-api';
import { AddonPanel, IconButton } from 'storybook/internal/components';
import { LightningIcon } from '@storybook/icons';

export const Panel = () => {
  const [state, setState] = useAddonState('addon-unique-identifier', 'initial state');

  return (
    <AddonPanel key="custom-panel" active="true">
      <Button onClick={() => setState('Example')}>
        Click to update Storybook's internal state
      </Button>
    </AddonPanel>
  );
};
export const Tool = () => {
  const [state, setState] = useAddonState('addon-unique-identifier', 'initial state');

  return (
    <IconButton
      key="custom-toolbar"
      active="true"
      title="Enable my addon"
      onClick={() => setState('Example')}
    >
      <LightningIcon />
    </IconButton>
  );
};
```

----------------------------------------

TITLE: Converting Storybook CSF 2 to CSF 3 using pnpm
DESCRIPTION: Command to migrate Storybook Component Story Format from version 2 to 3 using pnpm. This targets TypeScript React stories with the specified glob pattern and parser.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-csf-2-to-3.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
# Convert CSF 2 to CSF 3
pnpm dlx storybook@latest migrate csf-2-to-3 --glob="**/*.stories.tsx" --parser=tsx
```

----------------------------------------

TITLE: Configuring Storybook Framework with Svelte Vite in TypeScript
DESCRIPTION: This TypeScript snippet configures the Storybook framework to use @storybook/svelte-vite. It imports the StorybookConfig type and defines the framework name and options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-vite-framework-options.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/svelte-vite';

const config: StorybookConfig = {
  // ...
  framework: {
    name: '@storybook/svelte-vite',
    options: {
      // ...
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Adding React Refresh Dependencies
DESCRIPTION: These dependencies are required for enabling fast refresh in Webpack 5 projects after removing the `framework.options.fastRefresh` option.  `@pmmmwh/react-refresh-webpack-plugin` is a webpack plugin and `react-refresh` is a required dependency.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_59

LANGUAGE: json
CODE:
```
{
  "devDependencies": {
    "@pmmmwh/react-refresh-webpack-plugin": "^0.5.11",
    "react-refresh": "^0.14.0"
  }
}
```

----------------------------------------

TITLE: Specifying Package Manager for Storybook Add Command
DESCRIPTION: The `--package-manager` option sets the package manager to use when installing the addon with the `storybook add` command. Available package managers include `npm`, `yarn`, and `pnpm`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_61

LANGUAGE: Shell
CODE:
```
storybook add [addon] --package-manager pnpm
```

----------------------------------------

TITLE: JavaScript Button Story Definition
DESCRIPTION: Defines a story for a custom button component using JavaScript and lit-html. It imports the action function from storybook/actions and the html function from lit. The render function returns an HTML template that renders the custom-button component with the provided label and click handler. The default arguments set the label to 'Hello' and the onClick handler to an action that logs 'clicked'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
import { action } from 'storybook/actions';

import { html } from 'lit';

export default {
  component: 'custom-button',
};

export const Text = {
  render: ({ label, onClick }) =>
    html`<custom-button label="${label}" @click=${onClick}></custom-button>`, 
  args: {
    label: 'Hello',
    onClick: action('clicked'),
  },
};
```

----------------------------------------

TITLE: Initializing Svelte Story with CSF in Typescript
DESCRIPTION: This code initializes a Storybook story for a Svelte component using TypeScript and the Component Story Format (CSF). It imports the necessary modules, defines the meta object with the component and render function, and creates a primary story with a loader that fetches todo data from an API.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_8

LANGUAGE: typescript
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import TodoItem from './TodoItem.svelte';

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/svelte/api/csf
 * to learn how to use render functions.
 */
const meta = {
  component: TodoItem,
  render: (args, { loaded: { todo } }) => ({
    Component: TodoItem,
    props: {
      ...args,
      ...todo,
    },
  }),
} satisfies Meta<typeof TodoItem>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  loaders: [
    async () => ({
      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),
    }),
  ],
};
```

----------------------------------------

TITLE: Configuring Accessibility Parameters for Svelte Story (TS)
DESCRIPTION: This code configures accessibility parameters for a Svelte Storybook story using TypeScript. It defines rules to exclude certain elements from accessibility checks and disables specific rules. It also sets global accessibility parameters for manual testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_4

LANGUAGE: ts-4-9
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
    parameters: {
      a11y: {
        // Optional selector to inspect
        element: 'body',
        config: {
          rules: [
            {
              // The autocomplete rule will not run based on the CSS selector provided
              id: 'autocomplete-valid',
              selector: '*:not([autocomplete="nope"])',
            },
            {

```

----------------------------------------

TITLE: Generating MSW Service Worker
DESCRIPTION: This command generates the service worker file required for MSW to intercept and mock network requests. It is essential for MSW to function correctly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx msw init public/
```

----------------------------------------

TITLE: Configuring Button Story with Web Components Metadata in JS
DESCRIPTION: This code configures a Storybook story for a Button component using metadata for web components in JavaScript. It defines the component as 'demo-button' and sets up argument types, focusing on the 'label' argument to control the button's text within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#_snippet_5

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  argTypes: {
    // 👇 All Button stories expect a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
};
```

----------------------------------------

TITLE: React Button Story Implementation (TypeScript)
DESCRIPTION: TypeScript version of React Button story using CSF 2 format with proper type definitions from @storybook/react.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { ComponentStory, ComponentMeta } from '@storybook/react';

import { Button } from './Button';

export default {
  title: 'Button',
  component: Button,
} as ComponentMeta<typeof Button>;

export const Primary: ComponentStory<typeof Button> = (args) => <Button {...args} />;
Primary.args = { primary: true };
```

----------------------------------------

TITLE: Override Default Storybook UI Configuration - JavaScript
DESCRIPTION: This method allows you to override the default Storybook UI configuration, such as setting up a theme or hiding UI elements. It provides a way to customize the appearance and behavior of the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
import { addons } from '@storybook/preview-api';

addons.setConfig({
  theme: {
    // Your theme configuration here
  },
  showToolbar: false,
});
```

----------------------------------------

TITLE: Storybook main.js Configuration with Title Prefix
DESCRIPTION: This code snippet demonstrates how to configure the `titlePrefix` option in Storybook's `main.js` file. The `titlePrefix` is used to automatically prefix all story titles within the specified directories. This example shows a configuration that prefixes all stories in the `../src` directory with `Custom/`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_152

LANGUAGE: JavaScript
CODE:
```
// main.js
module.exports = {
  stories: [{ directory: '../src', titlePrefix: 'Custom' }]
}
```

----------------------------------------

TITLE: Documenting Icons with IconGallery and IconItem in Storybook
DESCRIPTION: This snippet demonstrates how to use IconGallery and IconItem blocks to document a set of icon components in a Storybook MDX file. It shows the basic structure and how to include multiple icons with their names.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-icongallery.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
import { Meta, IconGallery, IconItem } from '@storybook/addon-docs/blocks';

import { Icon as IconExample } from './Icon';

<Meta title="Iconography" />

# Iconography

<IconGallery>
  <IconItem name="mobile">
    <IconExample name="mobile" />
  </IconItem>
  <IconItem name="user">
    <IconExample name="user" />
  </IconItem>
  <IconItem name="browser">
    <IconExample name="browser" />
  </IconItem>
  <IconItem name="component">
    <IconExample name="component" />
  </IconItem>
  <IconItem name="calendar">
    <IconExample name="calendar" />
  </IconItem>
   <IconItem name="paintbrush">
    <IconExample name="paintbrush" />
  </IconItem>
   <IconItem name="add">
    <IconExample name="add" />
  </IconItem>
  <IconItem name="subtract">
    <IconExample name="subtract" />
  </IconItem>
   <IconItem name="document">
    <IconExample name="document" />
  </IconItem>
  <IconItem name="graphline">
    <IconExample name="graphline" />
  </IconItem>
</IconGallery>
```

----------------------------------------

TITLE: Adding Webpack Plugins to Storybook Configuration
DESCRIPTION: Demonstrates how to add custom Webpack plugins while preserving Storybook's plugins. It shows the proper way to append to the plugins array rather than overwriting it.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// .storybook/main.js
import webpack from 'webpack';

export default {
  framework: {
    name: '@storybook/react-webpack5',
    options: {},
  },
  webpackFinal: async (config) => {
    // Add your plugin to the existing plugins array
    config.plugins.push(
      new webpack.DefinePlugin({
        PRODUCTION: JSON.stringify(true),
        VERSION: JSON.stringify('5fa3b9'),
      })
    );
    
    return config;
  },
};
```

----------------------------------------

TITLE: Disable automated a11y tests
DESCRIPTION: Disable automated accessibility testing for stories or components by adding the following globals to your story's export or component's default export.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
export default {
  parameters: {
    a11y: { disable: true },
  },
};

export const MyStory = {
  parameters: {
    a11y: { disable: true },
  },
};
```

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/types';

const meta: Meta = {
  parameters: {
    a11y: { disable: true },
  },
};

export default meta;

export const MyStory: StoryObj = {
  parameters: {
    a11y: { disable: true },
  },
};
```

----------------------------------------

TITLE: Configuring Viewports in Storybook Preview (TypeScript)
DESCRIPTION: This TypeScript snippet configures the Storybook preview to include viewport options using `INITIAL_VIEWPORTS`. It sets the initial global viewport to 'ipad' with `isRotated` set to false, allowing for consistent testing across different screen sizes.  It imports the Preview type from the appropriate Storybook framework.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-options-in-preview.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import { Preview } from '@storybook/your-framework';

import { INITIAL_VIEWPORTS } from 'storybook/viewport';

const preview: Preview = {
  parameters: {
    viewport: {
      options: INITIAL_VIEWPORTS,
    },
  },
  initialGlobals: {
    viewport: { value: 'ipad', isRotated: false },
  },
};

export default preview;
```

----------------------------------------

TITLE: Defining Angular Storybook Meta for Button Component
DESCRIPTION: This code defines the Storybook meta configuration for an Angular Button component. It imports the Button component and the action function from Storybook, then sets up the meta object with the component and an onClick action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { action } from 'storybook/actions';

import Button from './button.component';

const meta: Meta<Button> = {
  component: Button,
  args: {
    // 👇 Create an action that appears when the onClick event is fired
    onClick: action('on-click'),
  },
};

export default meta;
```

----------------------------------------

TITLE: Initializing Button Storybook story for Web Components - TS
DESCRIPTION: This code initializes a Storybook story for a web component named 'demo-button' using TypeScript. It defines the component and sets documentation parameters to exclude the 'style' control.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-argtypes-parameter.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Playwright Test for Login Form
DESCRIPTION: Playwright test implementation that loads a Storybook story and verifies the login form functionality.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { test, expect } from '@playwright/test';

test('login form test', async ({ page }) => {
  await page.goto('http://localhost:6006/iframe.html?id=stories-login--login-form');
  await expect(page.getByLabel('username')).toHaveValue('username@email.com');
  await expect(page.getByLabel('password')).toHaveValue('password');
});
```

----------------------------------------

TITLE: Configuring Storybook Preview in TypeScript
DESCRIPTION: This snippet configures the Storybook preview using TypeScript, defining background options with light and dark themes. It imports the Preview type from the Storybook framework and sets the 'backgrounds' parameter with custom options for light and dark modes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-preview.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    backgrounds: {
      options: {
        light: { name: 'Light', value: '#fff' },
        dark: { name: 'Dark', value: '#333' },
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Install SWC Compiler Addon
DESCRIPTION: Installs the Storybook addon for SWC compiler support.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-webpack5.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install --save-dev @storybook/addon-styling-webpack @swc/core swc-loader
```

----------------------------------------

TITLE: Defining Storybook Story for Component (Common)
DESCRIPTION: This code defines a Storybook story for a component. It imports the component and exports a default object containing the component and its arguments. It configures the component and uses 'args' to set the default value for the 'value' property, instead of the deprecated 'defaultValue'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Example } from './Example';

export default {
  component: Example,
  argTypes: {
    value: {
      // ⛔️ Deprecated, do not use
      defaultValue: 0,
    },
  },
  // ✅ Do this instead
  args: {
    value: 0,
  },
};
```

----------------------------------------

TITLE: Configuring Story for Example Component (JavaScript)
DESCRIPTION: This snippet configures a Storybook story for an 'Example' component. It defines the component and sets up an argument type for a 'value' property, allowing users to control it with a number input in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Example } from './Example';

export default {
  component: Example,
  argTypes: {
    value: {
      control: {
        type: 'number',
        min: 0,
        max: 100,
        step: 10,
      },
    },
  },
};
```

----------------------------------------

TITLE: Svelte Story Definition with CSF
DESCRIPTION: Defines a Storybook story using the Component Story Format (CSF) for a Svelte component. It imports the component, defines metadata including which stories to include and exclude, and renders the stories with specific arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#_snippet_12

LANGUAGE: svelte
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  import someData from './data.json';

  const { Story } = defineMeta({
    component: MyComponent,
    includeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories
    excludeStories: /.*Data$/, // 👈 Storybook ignores anything that contains Data
  });

  export const simpleData = { foo: 1, bar: 'baz' };

  export const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };
</script>

<Story name="SimpleStory" args={{ data: simpleData }} />

<Story name="ComplexStory" args={{ data: complexData }} />
```

----------------------------------------

TITLE: Defining Svelte Story for DocumentScreen (JavaScript)
DESCRIPTION: This JavaScript code defines a Storybook story for the DocumentScreen component using Svelte. It imports necessary modules and defines a 'Simple' story with predefined arguments for user, document, and subdocuments, pulling data from other stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#_snippet_2

LANGUAGE: js
CODE:
```
import DocumentScreen from './YourPage.svelte';

// 👇 Imports the required stories
import * as PageLayout from './PageLayout.stories';
import * as DocumentHeader from './DocumentHeader.stories';
import * as DocumentList from './DocumentList.stories';

export default {
  component: DocumentScreen,
};

export const Simple = {
  args: {
    user: PageLayout.Simple.args.user,
    document: DocumentHeader.Simple.args.document,
    subdocuments: DocumentList.Simple.args.documents,
  },
};
```

----------------------------------------

TITLE: Customizing Doc Blocks with props in MDX
DESCRIPTION: This MDX code snippet demonstrates how to customize a Doc Block, specifically the Controls block, by using props to exclude certain properties from being displayed. In this case, the 'style' prop is excluded from the Controls table.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/doc-blocks.mdx#_snippet_2

LANGUAGE: Markdown
CODE:
```
<Controls exclude={['style']}>

```

----------------------------------------

TITLE: Configuring TypeScript Parser in Storybook Source Loader
DESCRIPTION: This snippet demonstrates configuring the source-loader to use the TypeScript parser instead of the default JavaScript parser. The loader is configured as a webpack rule to target story files with '.stories.tsx?' extensions. This setup requires the '@storybook/source-loader' module.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/source-loader/README.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = function ({ config }) {
  config.module.rules.push({
    test: /\.stories\.tsx?$/,\n    use: [\n      {\n        loader: require.resolve('@storybook/source-loader'),\n        options: { parser: 'typescript' },\n      },\n    ],\n    enforce: 'pre',\n  });\n  return config;\n};
```

----------------------------------------

TITLE: Implementing Button Component in Vue with TypeScript
DESCRIPTION: Vue button component using TypeScript with defineComponent for type safety. Defines props with types, default values, and requirement flags along with setup function for composition API usage.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
<template>
  <button type="button" :disabled="isDisabled">{{ label }}</button>
</template>

<script lang="ts">
  import { defineComponent } from 'vue';

  export default defineComponent({
    name: 'button',
    props: {
      /**
       * Checks if the button should be disabled
       */
      isDisabled: {
        type: Boolean,
        default: false,
      },
      /**
       * The display label of the button
       */
      label: {
        type: String,
        default: 'One',
        required: true,
      },
    },
    setup(props) {
      /**
       * What will be returned here will available to the component
       * Functions referenced here will act like methods
       */
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Docs in Storybook
DESCRIPTION: This snippet shows how to configure auto-generated documentation in Storybook. It defines options for the documentation, such as autodocs mode.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
docs: { autodocs: 'tag' }
```

----------------------------------------

TITLE: Defining Storybook Meta for Web Components (TypeScript)
DESCRIPTION: This code defines the Storybook metadata for a web component named 'demo-example' using TypeScript and lit-html. It configures the component and sets up the 'label' argument with a select control, options (Normal, Bold, Italic), and HTML mappings for Bold and Italic using lit-html's 'html' template literal.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

import { html } from 'lit';

const meta: Meta = {
  component: 'demo-example',
  argTypes: {
    label: {
      control: { type: 'select' },
      options: ['Normal', 'Bold', 'Italic'],
      mapping: {
        Bold: html`<b>Bold</b>`,
        Italic: html`<i>Italic</i>`,
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Composing Multiple Stories with composeStories in Storybook Tests
DESCRIPTION: This snippet demonstrates how to use composeStories to import and compose multiple stories from a stories file for testing. It allows adding decorators, overriding global types, and parameters for all composed stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/override-compose-story-test.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)
import { composeStories } from '@storybook/your-renderer';

import * as stories from './LoginForm.stories';

const { ValidForm } = composeStories(stories, {
  decorators: [
    // Decorators defined here will be added to all composed stories from this function
  ],
  globalTypes: {
    // Override globals for all composed stories from this function
  },
  parameters: {
    // Override parameters for all composed stories from this function
  },
});
```

----------------------------------------

TITLE: Initializing Button Story with Text Label in Angular
DESCRIPTION: This code defines a Storybook story for the Button component in Angular. It sets up the component with a label and an onClick handler using Storybook's action. The template renders the button with the specified label and binds the click event to the onClick action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { action } from 'storybook/actions';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Text: Story = {
  render: () => ({
    props: {
      label: 'Button',
      onClick: action('clicked'),
    },
    template: `<storybook-button [label]="label" (onClick)="onClick($event)"></storybook-button>`,
  }),
};
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF, TypeScript)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF) and TypeScript. It imports the necessary modules from '@storybook/addon-svelte-csf' and defines a 'Primary' story with specific arguments for the button's appearance and label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_10

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
```

----------------------------------------

TITLE: Configuring Storybook Meta for Component (TS)
DESCRIPTION: This snippet configures the Storybook metadata for a component using TypeScript. It imports the Meta type from Storybook, defines the component, tags, and documentation parameters, including disabling the table of contents.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-disable-toc.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
  tags: ['autodocs'],
  parameters: {
    docs: {
      toc: {
        disable: true, // 👈 Disables the table of contents
      },
    },
  },
} satisfies Meta<typeof MyComponent>;

export default meta;
```

----------------------------------------

TITLE: Configuring Svelte Story with CSF for Example Component (TS)
DESCRIPTION: This snippet configures a Storybook story for the Example component using Svelte and the Component Story Format (CSF) with TypeScript. It imports the necessary modules from '@storybook/addon-svelte-csf' and defines the component and its argument types, specifically describing the 'value' property of a slider.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      value: {
        description: 'The value of the slider',
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Accessibility in Storybook Story for Svelte (Svelte CSF, TypeScript 4.9)
DESCRIPTION: This Svelte CSF snippet, written with TypeScript 4.9, utilizes '@storybook/addon-svelte-csf' to strongly type story definitions and define accessibility options. It combines Svelte story syntax with advanced a11y configuration, such as disabling rules and using the manual flag for accessibility test runs. Intended for Svelte projects using modern TypeScript and the Svelte-specific CSF extension.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_6

LANGUAGE: ts-4-9
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="ExampleStory"
  parameters={{
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
      */
      options: {},
    },
  }}
  globals={{
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  }}
/>
```

----------------------------------------

TITLE: Configuring Web Components Button Story
DESCRIPTION: This code configures a Storybook story for a web components Button. It exports a default object that defines the component as 'demo-button' and sets up parameters for handling actions based on a regular expression.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  parameters: { actions: { argTypesRegex: '^on.*' } },
};
```

----------------------------------------

TITLE: Configuring Storybook Vite Builder with TypeScript
DESCRIPTION: Example of configuring the Storybook Vite builder using TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/react-vite';
import { mergeConfig } from 'vite';

const config: StorybookConfig = {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: ['@storybook/addon-links', '@storybook/addon-essentials'],
  core: {
    builder: '@storybook/builder-vite',
  },
  async viteFinal(config) {
    return mergeConfig(config, {
      // Add your configuration here
    });
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: A JavaScript configuration file for Storybook that sets up the React-Vite framework with legacyRootApi enabled and specifies story file paths. This configuration can be used as a template and customized for different frameworks.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-framework.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  framework: {
    // Replace react-vite with the framework you are using (e.g., react-webpack5)
    name: '@storybook/react-vite',
    options: {
      legacyRootApi: true,
    },
  },
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
};
```

----------------------------------------

TITLE: Args Composition
DESCRIPTION: Shows how to compose args for multiple stories of the same component. This allows for creating complex stories by combining simpler arg sets.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
const Template = (args) => <Button {...args} />;

export const Primary = Template.bind({});
Primary.args = {
  primary: true,
  label: 'Button',
};

export const Secondary = Template.bind({});
Secondary.args = {
  ...Primary.args,
  primary: false,
  label: '😄👍😍💯',
};

```

----------------------------------------

TITLE: Running Tests Against Non-Deployed Storybook in CI
DESCRIPTION: YAML configuration for building Storybook and running tests against a local instance in a CI environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_3

LANGUAGE: yaml
CODE:
```
name: 'Test-runner: Build'
on: push
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install dependencies
        run: yarn
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Build Storybook
        run: yarn build-storybook --quiet
      - name: Serve Storybook and run tests
        run: |
          npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "npx http-server storybook-static --port 6006 --silent" \
            "npx wait-on tcp:6006 && yarn test-storybook"
```

----------------------------------------

TITLE: Initializing MSW in Storybook Preview (JavaScript)
DESCRIPTION: This snippet initializes MSW (Mock Service Worker) in Storybook's preview configuration. It imports the `initialize` and `mswLoader` functions from the `msw-storybook-addon` package and adds the MSW loader to the list of loaders, enabling MSW for all stories. This allows mocking API requests during development and testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-initialize.md#_snippet_0

LANGUAGE: js
CODE:
```
import { initialize, mswLoader } from 'msw-storybook-addon';

/*
 * Initializes MSW
 * See https://github.com/mswjs/msw-storybook-addon#configuring-msw
 * to learn how to customize it
 */
initialize();

export default {
  // ... rest of preview configuration
  loaders: [mswLoader], // 👈 Add the MSW loader to all stories
};
```

----------------------------------------

TITLE: Rendering Storybook Story with Template (JavaScript - Web Components)
DESCRIPTION: This JavaScript code configures a Storybook story for a Button component in a web components environment. It sets the `tags` property to exclude the story from testing, and defines a render function that uses a lit-html template to display multiple Button components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_18

LANGUAGE: js
CODE:
```
export const Combo = {
  // 👇 This story should not be tested, but will appear in the sidebar and docs page
  tags: ['!test'],
  render: () => html`
    <div>
      <demo-button variant="1" />
      <demo-button variant="2" />
    </div>
  `,
};
```

----------------------------------------

TITLE: Defining Storybook Meta for Svelte Component (CSF)
DESCRIPTION: This code defines the Storybook metadata for a Svelte component named 'Example' using the Component Story Format (CSF). It imports the component and uses `defineMeta` from `@storybook/addon-svelte-csf` to configure the component and its 'value' argument type, including default value and type summary.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      value: {
        table: {
          defaultValue: { summary: 0 },
          type: { summary: 'number' },
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Svelte CSF Addon Options
DESCRIPTION: This code snippet demonstrates how to configure options for the `@storybook/addon-svelte-csf` addon in the Storybook configuration file (`.storybook/main.js|ts`). It shows how to enable the `legacyTemplate` option for backward compatibility.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
options: {
  legacyTemplate: true
}
```

LANGUAGE: TypeScript
CODE:
```
options: {
  legacyTemplate: true
}
```

----------------------------------------

TITLE: Configuring Storybook Test Runner with Axe (TypeScript)
DESCRIPTION: TypeScript implementation of Storybook test runner configuration with type safety and axe-playwright integration for accessibility testing. Includes proper type definitions and the same functionality as the JavaScript version.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-disable.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';
import { getStoryContext } from '@storybook/test-runner';

import { injectAxe, checkA11y } from 'axe-playwright';

/*
 * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api
 * to learn more about the test-runner hooks API.
 */
const config: TestRunnerConfig = {
  async preVisit(page) {
    await injectAxe(page);
  },
  async postVisit(page, context) {
    // Get the entire context of a story, including parameters, args, argTypes, etc.
    const storyContext = await getStoryContext(page, context);

    // Do not run a11y tests on disabled stories.
    if (storyContext.parameters?.a11y?.disable) {
      return;
    }
    await checkA11y(page, 'body', {
      detailedReport: true,
      detailedReportOptions: {
        html: true,
      },
    });
  },
};

export default config;
```

----------------------------------------

TITLE: Grouping Related Components with Separator
DESCRIPTION: This code snippet illustrates how to group related components in an expandable interface within Storybook using the `/` separator in the `title` parameter. This enhances Storybook organization by creating a hierarchical structure for components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/naming-components-and-hierarchy.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Components/Button',
  component: Button,
};

const Template = (args) => <Button {...args} />;

export const Primary = Template.bind({});
Primary.args = {
  primary: true,
  children: 'Primary',
};

```

----------------------------------------

TITLE: Configuring Component Story Default Export
DESCRIPTION: Basic story configuration for Web Components, specifying the component name that corresponds to an entry in the custom-elements.json file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/web-components/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Demo Card',
  component: 'your-component-name', // which is also found in the `custom-elements.json`
};
```

----------------------------------------

TITLE: Initializing Apollo Client with Uri and Exchanges
DESCRIPTION: This code initializes an Apollo Client instance with a specified GraphQL endpoint and configures exchanges for caching and fetching data. It also sets the client in the context for use by other components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_16

LANGUAGE: js
CODE:
```
    url: 'https://your-graphql-endpoint',
    exchanges: [cacheExchange, fetchExchange],
  });

  setContextClient(client);
```

----------------------------------------

TITLE: Playwright Configuration Example
DESCRIPTION: This code snippet shows an example of Playwright configuration with Vue. It aliases the `vue` module to resolve correctly in the Playwright CT environment by using the `ctViteConfig` property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-playwright.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
// playwright-config.ts
import { defineConfig } from '@playwright/experimental-ct-vue';

export default defineConfig({
  ctViteConfig: {
    resolve: {
      alias: {
        vue: 'vue/dist/vue.esm-bundler.js',
      },
    },
  },
});
```

----------------------------------------

TITLE: Updating Globals from an Addon
DESCRIPTION: This example demonstrates how to update global values from within a Storybook addon and refresh the UI. It uses the `updateGlobals` function from the `storybook/manager-api` module. It shows how to update the global once the user clicks on a button in a toolbar addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
import React from 'react';
import { useGlobals, useStorybookApi } from '@storybook/manager-api';
import { Button } from '@storybook/components';

export const MyToolbarButton = () => {
  const [globals, updateGlobals] = useGlobals();
  const api = useStorybookApi();

  const onClick = () => {
    updateGlobals({ theme: globals.theme === 'light' ? 'dark' : 'light' });
    api.emit('theme-updated', globals.theme);
  };

  return <Button onClick={onClick}>Toggle Theme</Button>;
};

```

----------------------------------------

TITLE: Configuring Storybook Test Runner in TypeScript
DESCRIPTION: TypeScript configuration for Storybook test runner with type safety using TestRunnerConfig type. Defines the same tag-based filtering rules as the JavaScript version but with added type checking.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-config.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';

const config: TestRunnerConfig = {
  tags: {
    include: ['test-only', 'pages'],
    exclude: ['no-tests', 'tokens'],
    skip: ['skip-test', 'layout'],
  },
};

export default config;
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (JS)
DESCRIPTION: This code initializes a Storybook story for a Svelte component named MyComponent using JavaScript. It imports the component and an image file, then defines a story that renders the component with the image, passing the image object as props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_6

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.svelte';

import imageFile from './static/image.png';

export default {
  component: MyComponent,
};

const image = {
  src: imageFile,
  alt: 'my image',
};

export const WithAnImage = {
  render: () => ({
    Component: MyComponent,
    props: image,
  }),
};
```

----------------------------------------

TITLE: Initializing Storybook Meta with Mocked Date - CSF (JS)
DESCRIPTION: This code defines the meta object for a Storybook story using JavaScript. It imports necessary modules, including MockDate, and sets up a beforeEach hook to mock the Date object before each story runs, resetting it afterward. This ensures consistent date values during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#_snippet_2

LANGUAGE: js
CODE:
```
import MockDate from 'mockdate';

import { getUserFromSession } from '#api/session.mock';

import Page from './Page.svelte';

export default {
  component: Page,
  // 👇 Set the value of Date for every story in the file
  async beforeEach() {
    MockDate.set('2024-02-14');

    // 👇 Reset the Date after each story
    return () => {
      MockDate.reset();
    };
  },
};

export const Default = {
  async play({ canvasElement }) {
    // ... This will run with the mocked Date
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: TypeScript configuration for Storybook's main.ts file. Imports the proper type definitions, defines the framework to use, story file patterns to load, and enables crash reports for telemetry events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-main-enable-crash-reports.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    enableCrashReports: true, // 👈 Appends the crash reports to the telemetry events
  },
};

export default config;
```

----------------------------------------

TITLE: Importing Material UI fonts in Storybook preview
DESCRIPTION: Diff showing how to import Roboto and Material Icon fonts from @fontsource in the Storybook preview.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/material-ui.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
import { Preview } from '@storybook/your-renderer';

+// Load Material UI fonts
+import '@fontsource/roboto/300.css';
+import '@fontsource/roboto/400.css';
+import '@fontsource/roboto/500.css';
+import '@fontsource/roboto/700.css';
+import '@fontsource/material-icons';

const preview: Preview = {
  parameters: { /* ... */ },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet shows how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines the configuration object, and exports it as the default.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-static-dirs-with-object.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  staticDirs: [{ from: '../my-custom-assets/images', to: '/assets' }],
};

export default config;
```

----------------------------------------

TITLE: Exporting Accessibility Parameters in Storybook Preview - JavaScript
DESCRIPTION: This snippet exports a default module with accessibility parameters for Storybook using JavaScript. It sets specific rules, such as ignoring the 'autocomplete' rule and disabling the 'image-alt' rule, to customize accessibility checks with Axe. The 'manual' flag in globals object allows for optional automatic checks. Dependencies include Axe and Storybook setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-global-config.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default {
  parameters: {
    a11y: {
      // Optional selector to inspect
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Story for Web Component
DESCRIPTION: This code configures a Storybook story for a web component. It sets the component name and defines the 'icon' argument with available options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#_snippet_6

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-example',
  argTypes: {
    icon: {
      options: ['arrow-up', 'arrow-down', 'loading'],
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Backgrounds in JavaScript (preview.js)
DESCRIPTION: This JavaScript snippet configures the Storybook backgrounds addon by exporting an object from `.storybook/preview.js`. It defines available background options ('Dark', 'Light', 'Maroon') within the `parameters.backgrounds.options` property and sets the initial background to 'Light' via the `initialGlobals.backgrounds` property. This configuration applies globally to all stories unless overridden.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-preview.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    backgrounds: {
      options: {
        // 👇 Default options
        dark: { name: 'Dark', value: '#333' },
        light: { name: 'Light', value: '#F7F9F2' },
        // 👇 Add your own
        maroon: { name: 'Maroon', value: '#400' },
      },
    },
  },
  initialGlobals: {
    // 👇 Set the initial background color
    backgrounds: { value: 'light' },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story for React (TypeScript)
DESCRIPTION: This code initializes a Storybook story for a React Button component using TypeScript. It imports the necessary modules from '@storybook/react-vite' and defines a 'Primary' story with specific arguments for the button's appearance and label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_5

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Codemod Command for Upgrading Deprecated Types in Storybook
DESCRIPTION: This command uses the Storybook CLI to automatically migrate deprecated types in your codebase.  Update the glob pattern to match your project's file structure.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_140

LANGUAGE: bash
CODE:
```
npx storybook@next migrate upgrade-deprecated-types --glob="**/*.stories.tsx"
```

----------------------------------------

TITLE: Integrate with Storybook Dev Server
DESCRIPTION: The builder needs to integrate with Storybook's internal development server when running in development mode. This integration allows the builder to manage the server's lifecycle and respond to events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
console.log('storybook-builder-api-dev-server.md content')
```

----------------------------------------

TITLE: Storybook Story with Locale in Svelte (CSF)
DESCRIPTION: This code defines a Storybook story for a Svelte component, MyComponent, using the Component Story Format (CSF). It imports defineMeta from '@storybook/addon-svelte-csf', imports the MyComponent, defines a meta object, and creates a story named StoryWithLocale that renders the component with a locale-specific caption. The caption is determined by the getCaptionForLocale function based on the provided locale.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from "@storybook/addon-svelte-csf";

  import MyComponent from "./MyComponent.svelte";

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<script>
  const getCaptionForLocale = (locale) => {
    switch (locale) {
      case 'es':
        return 'Hola!';
      case 'fr':
        return 'Bonjour!';
      case "kr":
        return '안녕하세요!';
      case "zh":
        return '你好!';
      default:
        return 'Hello!';
    }
  };
</script>

<Story name="StoryWithLocale">
  {#snippet template(args, { globals: { locale } })} 
    <MyComponent
      {...args}
      locale={getCaptionForLocale(locale)}
    />
  {/snippet}
</Story>
```

----------------------------------------

TITLE: Enabling Lazy Compilation in Webpack 5 for Storybook
DESCRIPTION: Configuration to enable Webpack 5's experimental lazy compilation feature in Storybook, which helps start up Storybook faster at the cost of slightly slower story browsing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  core: {
    builder: {
      name: 'webpack5',
      options: {
        lazyCompilation: true,
      },
    },
  },
};
```

----------------------------------------

TITLE: Creating Storybook Story with Play Function in JavaScript
DESCRIPTION: This code creates a Storybook story with a play function in JavaScript. It imports the component and necessary modules, and uses 'userEvent.type' to simulate user input with a delay.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#_snippet_3

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const DelayedStory = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const exampleElement = canvas.getByLabelText('example-element');

    // The delay option sets the amount of milliseconds between characters being typed
    await userEvent.type(exampleElement, 'random string', {
      delay: 100,
    });

    const AnotherExampleElement = canvas.getByLabelText('another-example-element');
    await userEvent.type(AnotherExampleElement, 'another random string', {
      delay: 100,
    });
  },
};
```

----------------------------------------

TITLE: Initializing Button Story for Web Components with Typescript
DESCRIPTION: This code defines a Storybook story for a Web Components Button component using Typescript. It sets the component to 'demo-button' and sets the layout parameter to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  // Sets the layout parameter component wide.
  parameters: {
    layout: 'centered',
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring checkProd option for Vite
DESCRIPTION: This configures the plugin to skip instrumentation in production environments. It sets the `checkProd` option to `true` within the `istanbul` options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
options: { istanbul: { checkProd: true,}}
```

----------------------------------------

TITLE: Ejecting Test Storybook Configuration with npm
DESCRIPTION: This command uses npm to run the test-storybook script with the --eject flag, which ejects the Storybook test configuration for customization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-eject-config.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm run test-storybook -- --eject
```

----------------------------------------

TITLE: Configuring Storybook Documentation Sidebar in YAML
DESCRIPTION: This YAML snippet defines the configuration for the Storybook documentation page. It sets the title to 'Documentation' and configures the sidebar with an order of 3 and a title of 'Documentation'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/index.mdx#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
---
title: Documentation
sidebar:
  order: 3
  title: Documentation
---
```

----------------------------------------

TITLE: Configuring Storybook Meta for Angular Component
DESCRIPTION: This code configures the Storybook metadata for an Angular component. It imports the component and defines the meta object with component details and argTypes, specifically hiding the 'foo' property from the UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { YourComponent } from './YourComponent.component';

const meta: Meta<YourComponent> = {
  component: YourComponent,
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      control: false,
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Framework for Vue 3 with Vite in TypeScript
DESCRIPTION: This snippet defines a TypeScript configuration for Storybook, importing the StorybookConfig type and setting up the framework as '@storybook/vue3-vite' with the docgen option set to 'vue-component-meta'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue-vite-framework-options.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/vue3-vite';

const config: StorybookConfig = {
  framework: {
    name: '@storybook/vue3-vite',
    options: {
      docgen: 'vue-component-meta',
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Svelte CSF MDX Documentation
DESCRIPTION: Configures an MDX documentation file specifically for Svelte CSF components. Demonstrates importing Svelte stories and setting up both standalone and component-linked documentation pages.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-docs-only-page.md#2025-04-22_snippet_1

LANGUAGE: mdx
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';

import * as ExampleComponentStories from './ExampleComponent.stories.svelte';

{/* 👇 Documentation-only page */}

<Meta title="Documentation" />

{/* 👇 Component documentation page */}

<Meta of={ExampleComponentStories} />
```

----------------------------------------

TITLE: Enable Auto-Generated Docs in Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet configures Storybook to enable auto-generated documentation for all stories. It imports the Preview type from the Storybook framework and sets the 'tags' property to include 'autodocs', which triggers the documentation generation process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-preview.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  // ...rest of preview
  //👇 Enables auto-generated documentation for all stories
  tags: ['autodocs'],
};

export default preview;
```

----------------------------------------

TITLE: Initializing Svelte Story with CSF
DESCRIPTION: This code initializes a Storybook story for a Svelte component using the Component Story Format (CSF). It imports the necessary modules, defines the meta object with the component and render function, and creates a primary story with a loader that fetches todo data from an API.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_7

LANGUAGE: svelte
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import TodoItem from './TodoItem.svelte';

  const { Story } = defineMeta({
    component: TodoItem,
    render: template,
  });
</script>

{#snippet template(args, { loaded: { todo } })} 
  <TodoItem {...args} {...todo} />
{/snippet}

<Story
  name="Primary"
  loaders={[
    async () => ({
      todo: await (
        await fetch('https://jsonplaceholder.typicode.com/todos/1')
      ).json(),
    }),
  ]}
/>
```

----------------------------------------

TITLE: Configure webpack5 builder
DESCRIPTION: Configures Storybook to use webpack5 builder by setting the `builder` property in the `core` object within `.storybook/main.js`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_187

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  core: {
    builder: "webpack5",
  },
};
```

----------------------------------------

TITLE: Initializing TodoItem Story - React (JS)
DESCRIPTION: This code defines a Storybook story for the TodoItem component in React using JavaScript. It configures the component and includes a primary story with a render function and data loader.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { TodoItem } from './TodoItem';

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export default {
  component: TodoItem,
  render: (args, { loaded: { todo } }) => <TodoItem {...args} {...todo} />,
};

export const Primary = {
  loaders: [
    async () => ({
      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),
    }),
  ],
};

```

----------------------------------------

TITLE: Running Storybook Snapshot Tests with Vitest - JavaScript
DESCRIPTION: This code adapts snapshot testing for Storybook stories to the Vitest test runner in a JavaScript context. It uses ESM-style module discovery with import.meta.glob to eagerly gather all story files, composes the stories with the given renderer, and performs snapshot comparison on each. Required dependencies are 'path', 'vitest', and '@storybook/your-renderer'. The test expects at least one valid story per story file and runs 'story.run()' for setup before snapshotting.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/snapshot-tests-portable-stories.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
// @vitest-environment jsdom\n\nimport path from 'path';\nimport { describe, expect, test } from 'vitest';\n\n// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)\nimport { composeStories } from '@storybook/your-renderer';\n\nconst compose = (entry) => {\n  try {\n    return composeStories(entry);\n  } catch (error) {\n    throw new Error(\n      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${error}`,\n    );\n  }\n};\nfunction getAllStoryFiles() {\n  // Place the glob you want to match your story files\n  const storyFiles = Object.entries(\n    import.meta.glob('./stories/**/*.(stories|story).@(js|jsx|mjs|ts|tsx)', {\n      eager: true,\n    }),\n  );\n\n  return storyFiles.map(([filePath, storyFile]) => {\n    const storyDir = path.dirname(filePath);\n    const componentName = path.basename(filePath).replace(/\\.(stories|story)\\.[^/.]+$/, '');\n    return { filePath, storyFile, componentName, storyDir };\n  });\n}\ndescribe('Stories Snapshots', () => {\n  getAllStoryFiles().forEach(({ storyFile, componentName }) => {\n    const meta = storyFile.default;\n    const title = meta.title || componentName;\n\n    describe(title, () => {\n      const stories = Object.entries(compose(storyFile)).map(([name, story]) => ({ name, story }));\n\n      if (stories.length <= 0) {\n        throw new Error(\n          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`,\n        );\n      }\n\n      stories.forEach(({ name, story }) => {\n        test(name, async () => {\n          await story.run();\n          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.\n          await new Promise((resolve) => setTimeout(resolve, 1));\n          expect(document.body.firstChild).toMatchSnapshot();\n        });\n      });\n    });\n  });\n});
```

----------------------------------------

TITLE: Initializing Button Story for Solid (TS)
DESCRIPTION: This code initializes a Storybook story for a Solid Button component using TypeScript. It imports the necessary modules from 'storybook-solidjs' and defines the component to be used in the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Text: Story = {
  args: {},
};
```

----------------------------------------

TITLE: Implementing Typeset Block in Storybook MDX
DESCRIPTION: This snippet demonstrates how to use the Typeset block in a Storybook MDX file to document typography. It includes importing necessary components, defining typography styles, and rendering the Typeset block with various font sizes and weights.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-typeset.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
```md title="Typography.mdx"
import { Meta, Typeset } from '@storybook/addon-docs/blocks';

<Meta title="Typography" />

export const typography = {
  type: {
    primary: '"Nunito Sans", "Helvetica Neue", Helvetica, Arial, sans-serif',
  },
  weight: {
    regular: '400',
    bold: '700',
    extrabold: '800',
    black: '900',
  },
  size: {
    s1: 12,
    s2: 14,
    s3: 16,
    m1: 20,
    m2: 24,
    m3: 28,
    l1: 32,
    l2: 40,
    l3: 48,
  },
};

export const SampleText = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';

# Typography

**Font:** Nunito Sans

**Weights:** 400(regular), 700(bold), 800(extrabold), 900(black)

<Typeset
  fontSizes={[
    Number(typography.size.s1),
    Number(typography.size.s2),
    Number(typography.size.s3),
    Number(typography.size.m1),
    Number(typography.size.m2),
    Number(typography.size.m3),
    Number(typography.size.l1),
    Number(typography.size.l2),
    Number(typography.size.l3),
  ]}
  fontWeight={typography.weight.black}
  sampleText={SampleText}
  fontFamily={typography.type.primary}
/>
```
```

----------------------------------------

TITLE: Testing Login Form Inputs with Playwright - JavaScript
DESCRIPTION: This JavaScript snippet defines an automated Playwright test that checks if the email and password fields of a Storybook-rendered login form contain default placeholder values. The snippet requires Playwright to be installed (with '@playwright/test') and assumes the test runs with access to a Storybook host on 'localhost:6006'. 'test' defines the suite, while 'expect' asserts retrieved input values match expected strings. Inputs are located via CSS selectors (#email and #password), and the final result is a passing/failing test based on value correctness. Limitations include the requirement of a local Storybook server and consistent field selectors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-playwright-test.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
const { test, expect } = require('@playwright/test');

test('Login Form inputs', async ({ page }) => {
  await page.goto('http://localhost:6006/iframe.html?id=components-login-form--example');
  const email = await page.inputValue('#email');
  const password = await page.inputValue('#password');
  await expect(email).toBe('email@provider.com');
  await expect(password).toBe('a-random-password');
});
```

----------------------------------------

TITLE: Configuring Component Meta with ArgTypes in Angular
DESCRIPTION: This code configures the metadata for a Storybook story in Angular, specifically disabling the 'foo' property from appearing in the UI by setting 'disable: true' within the 'table' property of the 'argTypes' configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { YourComponent } from './YourComponent.component';

const meta: Meta<YourComponent> = {
  component: YourComponent,
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      table: {
        disable: true,
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Test Runner in TypeScript
DESCRIPTION: This snippet exports a configuration object for the Storybook Test Runner using TypeScript. It imports the TestRunnerConfig type, defines the configuration, and exports it as the default.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-include.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';

const config: TestRunnerConfig = {
  tags: {
    include: ['test-only'],
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Stories to Render in iframes
DESCRIPTION: Storybook preview configuration to render web component stories in iframes instead of inline, useful for components that need their own rendering context.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/web-components/README.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
export const parameters = { docs: { story: { inline: false } } };
```

----------------------------------------

TITLE: Configuring Button Story in Solid (JavaScript)
DESCRIPTION: This code configures a Storybook story for a Solid Button component using JavaScript. It imports the Button component and defines its metadata, including argument types for background color and default arguments to set the primary property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  //👇 Creates specific argTypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    //👇 Now all Button stories will be primary.
    primary: true,
  },
};
```

----------------------------------------

TITLE: Configure Storybook Preview with Table of Contents (JavaScript)
DESCRIPTION: Configures the Storybook preview settings, specifically the table of contents (TOC) for documentation. It defines CSS selectors for the content area and heading levels to include in the TOC, as well as a selector for elements to exclude. It also sets the TOC title and disables the TOC.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-toc.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    docs: {
      toc: {
        contentsSelector: '.sbdocs-content',
        headingSelector: 'h1, h2, h3',
        ignoreSelector: '#primary',
        title: 'Table of Contents',
        disable: false,
        unsafeTocbotOptions: {
          orderedList: false,
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Preview with React ThemeProvider (TSX)
DESCRIPTION: This snippet initializes the Storybook preview with a React ThemeProvider using TypeScript. It retrieves the theme from global parameters and wraps the story with the ThemeProvider component from styled-components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/react-vite';

import { ThemeProvider } from 'styled-components';

import { MyThemes } from '../my-theme-folder/my-theme-file';

const preview: Preview = {
  decorators: [
    (Story, context) => {
      const theme = MyThemes[context.globals.theme];
      return (
        <ThemeProvider theme={theme}>
          <Story />
        </ThemeProvider>
      );
    },
  ],
};

export default preview;
```

----------------------------------------

TITLE: Initializing Button Story (Common TS)
DESCRIPTION: This code initializes a Storybook story for a Button component using TypeScript. It imports the Meta type from @storybook/your-framework, imports the Button component, and defines the story with auto-generated documentation enabled.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-meta.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
} satisfies Meta<typeof Button>;
export default meta;
```

----------------------------------------

TITLE: Nx Library Storybook Configuration (Pre-14.1.8)
DESCRIPTION: Configuration example for Nx library projects using Storybook before version 14.1.8, showing how to set up build options and style paths.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/styling-and-css.mdx#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "build-storybook": {
    "executor": "@nrwl/storybook:build",
    "outputs": ["{options.outputPath}"],
    "options": {
      "uiFramework": "@storybook/angular",
      "outputPath": "dist/storybook/example-lib",
      "config": {
        "configFolder": "libs/example-lib/storybook/.storybook"
      },
      "projectBuildConfig": "example-lib:build-storybook",
      "styles": ["apps/example-app/src/styles.scss"]
    }
  }
}
```

----------------------------------------

TITLE: Configuring Storybook Test Runner in JavaScript
DESCRIPTION: This code exports a configuration object for the Storybook test runner in JavaScript. It includes hooks for setup, preVisit, and postVisit stages of the test execution process. Each hook provides placeholders for custom configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-hooks-example.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  // Hook that is executed before the test runner starts running tests
  setup() {
    // Add your configuration here.
  },
  /* Hook to execute before a story is initially visited before being rendered in the browser.
   * The page argument is the Playwright's page object for the story.
   * The context argument is a Storybook object containing the story's id, title, and name.
   */
  async preVisit(page, context) {
    // Add your configuration here.
  },
  /* Hook to execute after a story is visited and fully rendered.
   * The page argument is the Playwright's page object for the story
   * The context argument is a Storybook object containing the story's id, title, and name.
   */
  async postVisit(page, context) {
    // Add your configuration here.
  },
};
```

----------------------------------------

TITLE: Importing ArgTypes Block
DESCRIPTION: JavaScript import statement for the ArgTypes block from Storybook addon-docs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-argtypes.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { ArgTypes } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Initializing Button Story - TypeScript
DESCRIPTION: This code initializes a Storybook story for a Button component in TypeScript. It imports the Button component and defines its metadata, including the 'variant' argType with options for 'primary' and 'secondary'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  argTypes: {
    variant: {
      options: ['primary', 'secondary'],
      control: { type: 'radio' },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Initializing Button Story (Common JS)
DESCRIPTION: This snippet initializes a Storybook story for a Button component using CommonJS syntax. It defines the component metadata, including the component itself and arguments like onClick, which uses 'fn' to spy on the click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-onclick-action-spy.md#_snippet_3

LANGUAGE: js
CODE:
```
import { fn } from 'storybook/test';

import { Button } from './Button';

export default {
  component: Button,
  // 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked
  args: { onClick: fn() },
};
```

----------------------------------------

TITLE: Rendering a List Component with One Item in Storybook (Web Components, TS)
DESCRIPTION: This code snippet defines a story named 'OneItem' that renders a List component with a single ListItem using lit-html in TypeScript. It imports the 'Unchecked' story from 'my-list-item.stories.ts' and renders it within the List component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

// 👇 Import the stories of MyListItem
import { Unchecked } from './my-list-item.stories';

const meta: Meta = {
  title: 'MyList',
  component: 'demo-my-list',
};
export default meta;

type Story = StoryObj;

export const OneItem: Story = {
  render: () => html` <List> ${Unchecked({ ...Unchecked.args })} </List> `,
};
```

----------------------------------------

TITLE: Defining Non-A11y Story in Angular Storybook
DESCRIPTION: This snippet defines a story for 'MyComponent' in an Angular project using Storybook, where automatic accessibility (a11y) checks are disabled by setting 'manual' to true. It requires '@storybook/angular' and the component itself as dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const NonA11yStory: Story = {
  globals: {
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  },
};

```

----------------------------------------

TITLE: Setting Global Parameters in Storybook Preview
DESCRIPTION: Demonstrates how to configure parameters that apply to all stories globally in the Storybook preview configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/parameters.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// .storybook/preview.js|ts
export const parameters = {
  backgrounds: {
    values: [
      { name: 'red', value: '#f00' },
      { name: 'green', value: '#0f0' },
    ],
  },
};
```

----------------------------------------

TITLE: Setting up Storybook Main Configuration with Vite Builder
DESCRIPTION: Exports default Storybook configuration that specifies story file patterns, sets Vite as the builder, and provides environment-specific configurations through viteFinal hook. Allows separate configurations for development and production environments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-vite-final-env.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    builder: '@storybook/builder-vite',
  },
  async viteFinal(config, { configType }) {
    const { mergeConfig } = await import('vite');

    if (configType === 'DEVELOPMENT') {
      // Your development configuration goes here
    }
    if (configType === 'PRODUCTION') {
      // Your production configuration goes here.
    }
    return mergeConfig(config, {
      // Your environment configuration here
    });
  },
};
```

----------------------------------------

TITLE: Initialize MSW with NPM
DESCRIPTION: Initializes the Mock Service Worker (MSW) service worker files in the public directory using NPM package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-generate-service-worker.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx msw init public/
```

----------------------------------------

TITLE: Configuring Web Components Story for Example Component (JS)
DESCRIPTION: This snippet configures a Storybook story for a web component named 'demo-example' using JavaScript. It defines the component and its argument types, specifically describing the 'value' property of a slider.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-example',
  argTypes: {
    value: {
      description: 'The value of the slider',
    },
  },
};
```

----------------------------------------

TITLE: Rendering Storybook Story with Template (JavaScript)
DESCRIPTION: This JavaScript code configures a Storybook story for a Button component. It sets the `tags` property to exclude the story from testing, and defines a render function that uses a Vue template to display multiple Button components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_12

LANGUAGE: js
CODE:
```
export const Combo = {
  // 👇 This story should not be tested, but will appear in the sidebar and docs page
  tags: ['!test'],
  render: () => ({
    components: { Button },
    template: `
      <div>
        <Button :variant="1" />
        <Button :variant="2" />
      </div>
    `,
  }),
};
```

----------------------------------------

TITLE: Initializing Button Story for React (TS)
DESCRIPTION: This code initializes a Storybook story for a React Button component using TypeScript. It imports the necessary modules from '@storybook/react-vite' and defines the component to be used in the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Text: Story = {
  args: {},
};
```

----------------------------------------

TITLE: Defining Svelte Storybook Component Story
DESCRIPTION: This code defines a basic Storybook story for a Svelte component. It imports the YourComponent and exports a default object that configures the component and sets the 'requiredFirst' sort order for controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#_snippet_2

LANGUAGE: js
CODE:
```
import YourComponent from './YourComponent.svelte';

export default {
  component: YourComponent,
  parameters: { controls: { sort: 'requiredFirst' } },
};
```

----------------------------------------

TITLE: Configuring Storybook Documentation Build Script
DESCRIPTION: Configuration for package.json to add a script that builds Storybook documentation for production using the --docs flag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/build-documentation.mdx#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "build-storybook-docs": "storybook build --docs"
  }
}
```

----------------------------------------

TITLE: Extracting Storybook with PNPM
DESCRIPTION: Executes Storybook's extract command using PNPM package manager at version 7.5.3.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-extract-specific-version.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@7.5.3 extract
```

----------------------------------------

TITLE: Initializing Page stories for Svelte (Svelte CSF, TS)
DESCRIPTION: This code initializes Storybook stories for the Page component in a Svelte application using Svelte CSF with TypeScript. It imports the Page component and Header stories, and defines a 'LoggedIn' story, importing related Header stories to populate arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_7

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Page from './Page.svelte';
  //👇 Imports all Header stories
  import * as HeaderStories from './Header.stories.svelte';

  const { Story } = defineMeta({
    component: Page,
  });
</script>

<Story name="LoggedIn" args={{ ...HeaderStories.LoggedIn.args }} />
```

----------------------------------------

TITLE: Configuring Button Component Meta for Svelte in Storybook (CSF - TS) with Framework
DESCRIPTION: This code configures the metadata for a Button component in Storybook using Svelte and TypeScript, specifying the framework. It imports the Button component and defines the component and its argument types. The argTypes configuration ensures that either a label or an image can be passed to the Button, but not both, using conditional logic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  argTypes: {
    // Button can be passed a label or an image, not both
    label: {
      control: 'text',
      if: { arg: 'image', truthy: false },
    },
    image: {
      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },
      if: { arg: 'label', truthy: false },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Testing Storybook Composed Button Story in React - TypeScript
DESCRIPTION: This snippet tests the 'Primary' composed Storybook story for a Button component in React using TypeScript. It leverages @testing-library/react for UI assertions and @storybook/react for composing stories, expecting type safety and correct typings from module imports. The test checks that the button's rendered label matches the 'label' argument from the composed Storybook story, minimizing code duplication. Required dependencies include @testing-library/react, @storybook/react, and suitable Button story definitions with proper type annotations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/reuse-args-test.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import { render, screen } from '@testing-library/react';

import { composeStories } from '@storybook/react';

import * as stories from './Button.stories';

const { Primary } = composeStories(stories);

test('reuses args from composed story', () => {
  render(<Primary />);

  const buttonElement = screen.getByRole('button');
  // Testing against values coming from the story itself! No need for duplication
  expect(buttonElement.textContent).toEqual(Primary.args.label);
});
```

----------------------------------------

TITLE: Defining NoteUI Story with Save Flow in Svelte CSF
DESCRIPTION: This code defines a Storybook story for the NoteUI component in Svelte using the Component Story Format (CSF). It imports necessary modules, defines metadata for the component using `defineMeta`, and sets up a 'Save Flow' story that simulates a user clicking the save button and asserts that the `saveNote` mock function is called.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { expect, userEvent, within } from 'storybook/test';

  // 👇 Must include the `.mock` portion of filename to have mocks typed correctly
  import { saveNote } from '#app/actions.mock';
  import { createNotes } from '#mocks/notes';

  import NoteUI from './note-ui.svelte';

  const meta = defineMeta({
    title: 'Mocked/NoteUI',
    component: NoteUI,
  });
</script>

<script>
  const notes = createNotes();
</script>

<Story name="Save Flow ▶"
  args={{ isEditing: true, note: notes[0] }}
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const saveButton = canvas.getByRole('menuitem', { name: /done/i });
    await userEvent.click(saveButton);
    // 👇 This is the mock function, so you can assert its behavior
    await expect(saveNote).toHaveBeenCalled();
  }} />
```

----------------------------------------

TITLE: Initializing Storybook Story with Play Function in Angular
DESCRIPTION: This code defines a Storybook story for an Angular component, utilizing the play function to simulate user interactions. It imports necessary modules from '@storybook/angular' and 'storybook/test', retrieves the component's root element using canvasElement, and then simulates typing into an element with the test ID 'example-element' and clicking a button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const ExampleStory: Story = {
  play: async ({ canvasElement }) => {
    // Assigns canvas to the component root element
    const canvas = within(canvasElement);

    // Starts querying from the component's root element
    await userEvent.type(canvas.getByTestId('example-element'), 'something');
    await userEvent.click(canvas.getByRole('button'));
  },
};
```

----------------------------------------

TITLE: Configuring Inline Stories in Storybook Preview
DESCRIPTION: Updates the .storybook/preview.js file to render stories in an iframe instead of inline for all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
export const parameters = { docs: { story: { inline: false } } };
```

----------------------------------------

TITLE: Testing Vue Button Component with Vitest and Storybook
DESCRIPTION: A Vitest test for a Vue 3 Button component using Storybook's composeStories utility. It configures the jsdom environment, imports vue-specific Storybook utilities, extracts the Primary story variant, and creates a snapshot test after rendering.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-snapshot-test-portable-stories.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// @vitest-environment jsdom

import { expect, test } from 'vitest';

import { composeStories } from '@storybook/vue3';

import * as stories from '../stories/Button.stories';

const { Primary } = composeStories(stories);
test('Button snapshot', async () => {
  await Primary.run();
  expect(document.body.firstChild).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Configuring Button Story with argTypes in Typescript
DESCRIPTION: This code configures a Storybook story for a Button component using Typescript. It defines the component and its argTypes, which allow users to control the component's properties like label, advanced settings, margin, padding, and cornerRadius through the Storybook UI. The margin, padding, and cornerRadius are conditionally enabled based on the 'advanced' boolean.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  argTypes: {
    label: { control: 'text' }, // Always shows the control
    advanced: { control: 'boolean' },
    // Only enabled if advanced is true
    margin: { control: 'number', if: { arg: 'advanced' } },
    padding: { control: 'number', if: { arg: 'advanced' } },
    cornerRadius: { control: 'number', if: { arg: 'advanced' } },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Stories for Solid Component (JS)
DESCRIPTION: This code configures Storybook stories for a Solid component using JavaScript, defining the component, included stories, and excluded stories. It also defines data objects and story configurations for rendering the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#_snippet_3

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

import someData from './data.json';

export default {
  component: MyComponent,
  includeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories
  excludeStories: /.*Data$/, // 👈 Storybook ignores anything that contains Data
};

export const simpleData = { foo: 1, bar: 'baz' };
export const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };

export const SimpleStory = {
  args: {
    data: simpleData,
  },
};

export const ComplexStory = {
  args: {
    data: complexData,
  },
};
```

----------------------------------------

TITLE: Starting Storybook in Angular with CLI Builder
DESCRIPTION: Command to run Storybook in an Angular project using the Angular CLI Builder.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-run-dev.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
ng run my-project:storybook
```

----------------------------------------

TITLE: Initializing Gizmo Story with ArgTypes in Svelte (CSF)
DESCRIPTION: This code defines a Storybook story for the Gizmo component using Svelte and the Component Story Format (CSF). It uses `defineMeta` from `@storybook/addon-svelte-csf` to configure the component and its properties (argTypes), enabling interactive control within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Gizmo from './Gizmo.svelte';

  const { Story } = defineMeta({
    component: Gizmo,
    argTypes: {
      canRotate: {
        control: 'boolean',
      },
      width: {
        control: { type: 'number', min: 400, max: 1200, step: 50 },
      },
      height: {
        control: { type: 'range', min: 200, max: 1500, step: 50 },
      },
      rawData: {
        control: 'object',
      },
      coordinates: {
        control: 'object',
      },
      texture: {
        control: {
          type: 'file',
          accept: '.png',
        },
      },
      position: {
        control: 'radio',
        options: ['left', 'right', 'center'],
      },
      rotationAxis: {
        control: 'check',
        options: ['x', 'y', 'z'],
      },
      scaling: {
        control: 'select',
        options: [10, 50, 75, 100, 200],
      },
      label: {
        control: 'text',
      },
      meshColors: {
        control: {
          type: 'color',
          presetColors: ['#ff0000', '#00ff00', '#0000ff'],
        },
      },
      revisionDate: {
        control: 'date',
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Registering Storybook Addon with Query Parameters
DESCRIPTION: Demonstrates how to register a custom Storybook addon using addons.register() and initialize query parameters using the API's setQueryParams method. The addon is registered with a unique identifier and configures an example parameter with null value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-disablequeryparams.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
addons.register('my-organisation/my-addon', (api) => {
  api.setQueryParams({
    exampleParameter: null,
  });
});
```

----------------------------------------

TITLE: Configuring Storybook Backgrounds in TypeScript (preview.ts)
DESCRIPTION: This TypeScript snippet configures the Storybook backgrounds addon using a typed `Preview` object in `.storybook/preview.ts`. It defines background options ('Dark', 'Light', 'Maroon') under `parameters.backgrounds.options` and sets the initial background to 'Light' using `initialGlobals.backgrounds`. Requires importing the `Preview` type from the appropriate Storybook framework package (e.g., `@storybook/react-vite`, replacing `your-framework`).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-preview.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    backgrounds: {
      options: {
        // 👇 Default options
        dark: { name: 'Dark', value: '#333' },
        light: { name: 'Light', value: '#F7F9F2' },
        // 👇 Add your own
        maroon: { name: 'Maroon', value: '#400' },
      },
    },
  },
  initialGlobals: {
    // 👇 Set the initial background color
    backgrounds: { value: 'light' },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Language in Storybook Code Snippet
DESCRIPTION: This code snippet demonstrates how to define the language to which the code snippet applies using the `language` attribute. The documentation uses this attribute to determine which variant to display (e.g., JavaScript, TypeScript, MDX).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#_snippet_2

LANGUAGE: ts
CODE:
```

```

----------------------------------------

TITLE: Configuring Storybook Story for Component (JS)
DESCRIPTION: This code configures a Storybook story for a component using JavaScript. It imports the MyComponent and defines the default export, which includes the title, component, decorators, and parameters for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#_snippet_2

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Path/To/MyComponent',
  component: MyComponent,
  decorators: [
    /* ... */
  ],
  parameters: {
    /* ... */
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Viewports in TypeScript
DESCRIPTION: TypeScript version of the viewport configuration that includes type definitions using the Preview type from Storybook. Extends minimal viewports with custom Kindle Fire device dimensions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-add-viewport-in-preview.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { Preview } from '@storybook/your-framework';

import { MINIMAL_VIEWPORTS } from 'storybook/viewport';

const kindleViewports = {
  kindleFire2: {
    name: 'Kindle Fire 2',
    styles: {
      width: '600px',
      height: '963px',
    },
  },
  kindleFireHD: {
    name: 'Kindle Fire HD',
    styles: {
      width: '533px',
      height: '801px',
    },
  },
};

const preview: Preview = {
  parameters: {
    viewport: {
      options: {
        ...MINIMAL_VIEWPORTS,
        ...kindleViewports,
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Angular Button Story Implementation (TypeScript)
DESCRIPTION: Default story implementation for a Button component in Angular using CSF 3 format. Uses TypeScript with props passing pattern specific to Angular.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export const Default: Story = {
  render: (args) => ({
    props: args,
  }),
};
```

----------------------------------------

TITLE: Configuring Playwright Component Tests for React Storybook
DESCRIPTION: This snippet configures Playwright component tests for a React Storybook project. It imports necessary modules from Playwright and Storybook, sets project annotations using 'setProjectAnnotations', and configures the 'beforeAll' hook to run before all tests.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct-compose-stories.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { test } from '@playwright/experimental-ct-react';
import { setProjectAnnotations } from '@storybook/react-vite';
// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this
import * as addonAnnotations from 'my-addon/preview';
import * as previewAnnotations from './.storybook/preview';

const annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);

// Supports beforeAll hook from Storybook
test.beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Defining TestBuildFlags Interface in TypeScript
DESCRIPTION: TypeScript interface definition for TestBuildFlags that specifies all available configuration options for optimizing Storybook's production build output. Includes flags for disabling various features like blocks, addons, MDX entries, autodocs, docgen, sourcemaps, and tree shaking.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-build.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
{
  disableBlocks?: boolean;
  disabledAddons?: string[];
  disableMDXEntries?: boolean;
  disableAutoDocs?: boolean;
  disableDocgen?: boolean;
  disableSourcemaps?: boolean;
  disableTreeShaking?: boolean;

}
```

----------------------------------------

TITLE: Defining Mocked Error Story with MSW - Typescript
DESCRIPTION: This code defines a Storybook story named 'MockedError' that uses MSW to mock an error response from an API. It intercepts GET requests to 'https://your-restful-endpoint', introduces a delay of 800ms, and then returns an HTTP response with a 403 status code. This allows testing of how the component handles error scenarios.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_7

LANGUAGE: typescript
CODE:
```
export const MockedError: Story = {
  parameters: {
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint', async () => {
          await delay(800);
          return new HttpResponse(null, {
            status: 403,
          });
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Configuring Vue Stories with Props (JavaScript)
DESCRIPTION: This code configures Storybook stories for a Vue component, defining the component and a story with a prop. It imports the component and exports a default object with the component and a story that renders the component with a specific prop value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_9

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.vue';

export default {
  component: MyComponent,
};

export const Basic = {
  render: () => ({
    components: { MyComponent },
    template: '<MyComponent />',
  }),
};

export const WithProp = {
  render: () => ({
    components: { MyComponent },
    template: '<MyComponent prop="value"/>',
  }),
};

```

----------------------------------------

TITLE: Initializing Storybook Story for Angular Component (TS)
DESCRIPTION: This code initializes a Storybook story for an Angular component. It imports the necessary modules from '@storybook/angular' and the YourComponent. It defines the component's metadata and a basic story with arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { YourComponent } from './your.component';

//👇 This default export determines where your story goes in the story list
const meta: Meta<YourComponent> = {
  component: YourComponent,
};

export default meta;
type Story = StoryObj<YourComponent>;

export const FirstStory: Story = {
  args: {
    //👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Integrating A11y Addon with Component Tests
DESCRIPTION: This code snippet demonstrates how to integrate the Accessibility addon with component tests in Storybook by importing and including the a11y addon annotations in the `vitest.setup.ts` file. This allows for extending component tests to include accessibility tests.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_34

LANGUAGE: diff
CODE:
```
// .storybook/vitest.setup.ts
...
+import * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';

const annotations = setProjectAnnotations([
  previewAnnotations,
+ a11yAddonAnnotations,
]);

// Run Storybook's beforeAll hook
beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Disabling Addons for Coverage in Optimized Builds
DESCRIPTION: This configuration adjusts the Storybook configuration file (i.e., `.storybook/main.js|ts`) to include the `disabledAddons` option, allowing the coverage addon to run tests in optimized builds at the expense of a slower build. This resolves the issue where the coverage addon doesn't instrument code due to the `--test` flag removing performance-impacting addons.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_16

LANGUAGE: JavaScript
CODE:
```
/*
 disabledAddons: [
   '@storybook/addon-docs',
 ],
 */
```

----------------------------------------

TITLE: Configuring Button stories for CommonJS (JS)
DESCRIPTION: This snippet configures Storybook stories for a Button component using CommonJS modules. It imports the Button component and defines the component and metadata for the story. The tags array specifies that the stories should be included in the documentation page but not appear in Storybook's sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  /*
   * All stories in this file will:
   * - Be included in the docs page
   * - Not appear in Storybook's sidebar
   */
  tags: ['autodocs', '!dev'],
};
```

----------------------------------------

TITLE: Configuring Storybook Manager with Sidebar Customization (JS)
DESCRIPTION: This JavaScript snippet configures the Storybook manager to customize the sidebar's visibility. It uses the `addons.setConfig` method to set the `layoutCustomisations`, specifically the `showSidebar` function. This function checks if the current story is 'landing' and the view mode is 'docs', and if so, it hides the sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-manager-sidebar-hide-on-landing.md#_snippet_0

LANGUAGE: js
CODE:
```
import { addons } from 'storybook/manager-api';

addons.setConfig({
  layoutCustomisations: {
    // Hide the sidebar on the landing page, which has its own nav links to other pages.
    showSidebar(state, defaultValue) {
      if (state.storyId === 'landing' && state.viewMode === 'docs') {
        return false;
      }

      return defaultValue;
    },
  },
});
```

----------------------------------------

TITLE: Initializing Storybook Meta for Angular Component
DESCRIPTION: This snippet initializes the Storybook meta object for an Angular component. It imports the necessary modules from '@storybook/angular' and the MyComponent.  It defines the component to be documented and creates a simple story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-storyname.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

const meta: Meta<Button> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const Simple: Story = {
  name: 'So simple!',
  // ...
};
```

----------------------------------------

TITLE: Initializing Button Storybook for Web Components
DESCRIPTION: This code initializes a Storybook story for a web-components Button component. It exports a default object that configures the story's title and component, specifying the component as 'demo-button'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  title: 'Design System/Atoms/Button',
  component: 'demo-button',
};
```

----------------------------------------

TITLE: Enable experimentalRSC Feature in Storybook (TypeScript)
DESCRIPTION: This snippet demonstrates how to enable the `experimentalRSC` feature in Storybook using TypeScript. It imports the `StorybookConfig` type and sets the `experimentalRSC` property to `true` within the `features` object in the Storybook configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/rsc-feature-flag.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  // ...
  features: {
    experimentalRSC: true,
  },
};

export default config;
```

----------------------------------------

TITLE: Creating Apollo Client Wrapper Component in Svelte
DESCRIPTION: This Svelte component creates an Apollo Client instance and provides it to the component tree using `setContextClient`. It initializes the client with a specified GraphQL endpoint and configures the `cacheExchange` and `fetchExchange`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_14

LANGUAGE: javascript
CODE:
```
<script>
  import {
    Client,
    setContextClient,
    cacheExchange,
    fetchExchange,
  } from '@urql/svelte';

  const client = new Client({
    url: 'https://your-graphql-endpoint',
    exchanges: [cacheExchange, fetchExchange],
  });

  setContextClient(client);

  const { children } = $props();
</script>

<div>
  {@render children()}
</div>
```

----------------------------------------

TITLE: Rendering Checkbox Story in MDX for Common Usage
DESCRIPTION: This snippet demonstrates how to import and render a Checkbox component story in Storybook documentation using MDX. It imports the Canvas component from Storybook addon-docs and the Checkbox stories, then renders the Unchecked story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-story.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Canvas } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories';

<Canvas of={CheckboxStories.Unchecked} />
```

----------------------------------------

TITLE: Svelte Page Story with TypeScript
DESCRIPTION: Storybook story for Svelte Page component using TypeScript. Creates a note in the database during play function and mounts the component with dynamic data through props. Includes user interaction testing and argument type controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-advanced.md#2025-04-22_snippet_2

LANGUAGE: ts
CODE:
```
export const Default: Story = {
  play: async ({ mount, args }) => {
    const note = await db.note.create({
      data: { title: 'Mount inside of play' },
    });

    const canvas = await mount(
      Page,
      // 👇 Pass data that is created inside of the play function to the component
      //   For example, a just-generated UUID
      { props: { ...args, params: { id: String(note.id) } } },
    );

    await userEvent.click(await canvas.findByRole('menuitem', { name: /login to add/i }));
  },
  argTypes: {
    // 👇 Make the params prop un-controllable, as the value is always overriden in the play function.
    params: { control: { disable: true } },
  },
};
```

----------------------------------------

TITLE: Configuring FontAwesome Icons in Vue Storybook
DESCRIPTION: This snippet configures FontAwesome icons for a Vue Storybook. It imports the necessary FontAwesome modules, adds a specific icon to the library, and registers the FontAwesomeIcon component globally.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-library-decorator.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { setup } from '@storybook/vue3-vite';

import { library } from '@fortawesome/fontawesome-svg-core';
import { faPlusSquare as fasPlusSquare } from '@fortawesome/free-solid-svg-icons';

import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';

setup((app) => {
  //👇 Adds the icon to the library so you can use it in your story.
  library.add(fasPlusSquare);
  app.component('font-awesome-icon', FontAwesomeIcon);
});

export default {
  decorators: [
    (story) => ({
      components: { story },
      template: '<div style="margin: 3em;"><story /></div>',
    }),
  ],
};
```

----------------------------------------

TITLE: Filled Registration Form Story
DESCRIPTION: This story demonstrates filling out a registration form and submitting it. It uses Storybook's `userEvent` to simulate user input and clicks. The `within` function is used to query elements within the component's canvas.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { userEvent, within } from 'storybook/test';

const meta: Meta = {
  component: 'demo-registration-form',
};

export default meta;
type Story = StoryObj;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const emailInput = canvas.getByLabelText('email', {
      selector: 'input',
    });

    await userEvent.type(emailInput, 'example-email@email.com', {
      delay: 100,
    });

    const passwordInput = canvas.getByLabelText('password', {
      selector: 'input',
    });

    await userEvent.type(passwordInput, 'ExamplePassword', {
      delay: 100,
    });
    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const submitButton = canvas.getByRole('button');

    await userEvent.click(submitButton);
  },
};
```

----------------------------------------

TITLE: CSF 2 Story Function Example
DESCRIPTION: Demonstrates a basic story function implementation in Component Story Format 2 (CSF 2).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
export const Primary = (args) => {
  return <Button {...args} />;
};
```

----------------------------------------

TITLE: Configuring Component Meta with ArgTypes in Svelte (CSF)
DESCRIPTION: This code configures the metadata for a Storybook story in Svelte using the Component Story Format (CSF). It imports the component and uses defineMeta to set up the story, disabling the 'foo' property from appearing in the UI by setting 'disable: true' within the 'table' property of the 'argTypes' configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import YourComponent from './YourComponent.svelte';

  const { Story } = defineMeta({
    component: YourComponent,
    argTypes: {
      // foo is the property we want to remove from the UI
      foo: {
        table: {
          disable: true,
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Page Story with Custom Footer in React (JS)
DESCRIPTION: This code defines a Storybook story for the Page component in React using JavaScript. It imports the Page component and defines a default export object with the component and a render function. The render function renders the Page component with the provided arguments and a footer element containing the custom footer text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Page } from './Page';

export default {
  component: Page,
  render: ({ footer, ...args }) => (
    <Page {...args}>
      <footer>{footer}</footer>
    </Page>
  ),
};

export const CustomFooter = {
  args: {
    footer: 'Built with Storybook',
  },
};
```

----------------------------------------

TITLE: Fetching Data with GraphQL
DESCRIPTION: This component fetches data from a GraphQL API using Apollo Client. It demonstrates a GraphQL data fetching operation that can be mocked using MSW.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import React, { useEffect, useState } from 'react';
import { ApolloClient, InMemoryCache, gql } from '@apollo/client';

const client = new ApolloClient({
  uri: '/graphql',
  cache: new InMemoryCache(),
});

export const DocumentScreen = () => {
  const [document, setDocument] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      const { data } = await client.query({
        query: gql`
          query GetDocument {
            document {
              title
              content
            }
          }
        `,
      });
      setDocument(data.document);
    };

    fetchData();
  }, []);

  if (!document) {
    return <p>Loading...</p>;
  }

  return (
    <div>
      <h1>{document.title}</h1>
      <p>{document.content}</p>
    </div>
  );
};

```

----------------------------------------

TITLE: Storybook Main Configuration with Composition
DESCRIPTION: This TypeScript configuration file defines a Storybook setup with a single MDX page and references to composed Storybooks. It configures the stories array to include the introduction page and defines the refs object for composed Storybooks.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
const config = {
  // define at least one local story/page here
  stories: ['../Introduction.mdx'],
  // define composed Storybooks here
  refs: {
    firstProject: { title: 'First', url: 'some-url' },
    secondProject: { title: 'Second', url: 'other-url' },
  },
  // ...
};
export default config;
```

----------------------------------------

TITLE: Storybook project configuration
DESCRIPTION: This JavaScript code snippet shows how to configure the stories glob in the `.storybook/main.js` file. It specifies the files that Storybook should consider as stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_158

LANGUAGE: JavaScript
CODE:
```
module.exports = { stories: ["../src/**/*.stories.*"] };
```

----------------------------------------

TITLE: Initializing Button Story - React (TS)
DESCRIPTION: This code defines a Storybook story for a React Button component using TypeScript. It imports necessary modules, defines the component's metadata, and creates a 'Text' story that renders the button with specified arguments (label and onClick).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { action } from 'storybook/actions';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Text = {
  args: {
    label: 'Hello',
    onClick: action('clicked'),
  },
  render: ({ label, onClick }) => <Button label={label} onClick={onClick} />,
};
```

----------------------------------------

TITLE: Defining Vue Button Stories with JavaScript
DESCRIPTION: This code defines Storybook stories for a Vue Button component using JavaScript. It imports the Button component and defines metadata including argTypes for controlling the background color. It exports two stories: Accessible and Inaccessible, demonstrating different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import Button from './Button.vue';

export default {
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
  },
};

// This is an accessible story
export const Accessible = {
  args: {
    primary: false,
    label: 'Button',
  },
};

// This is not
export const Inaccessible = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};
```

----------------------------------------

TITLE: Defining Svelte Button Story with CSF
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports defineMeta from '@storybook/addon-svelte-csf', defines the component, and sets up parameters for handling actions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    parameters: { actions: { argTypesRegex: '^on.*' } },
  });
</script>
```

----------------------------------------

TITLE: Initializing Storybook Meta with Mocked Date - Common (JS)
DESCRIPTION: This code defines the meta object for a Storybook story using JavaScript. It imports necessary modules, including MockDate, and sets up a beforeEach hook to mock the Date object before each story runs, resetting it afterward. This ensures consistent date values during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#_snippet_3

LANGUAGE: js
CODE:
```
import MockDate from 'mockdate';

import { getUserFromSession } from '#api/session.mock';
import { Page } from './Page';

export default {
  component: Page,
  // 👇 Set the value of Date for every story in the file
  async beforeEach() {
    MockDate.set('2024-02-14');

    // 👇 Reset the Date after each story
    return () => {
      MockDate.reset();
    };
  },
};

export const Default = {
  async play({ canvasElement }) {
    // ... This will run with the mocked Date
  },
};
```

----------------------------------------

TITLE: Svelte Component with TypeScript
DESCRIPTION: This Svelte component demonstrates TypeScript integration for state management and event handling. It uses `$state` to define reactive variables 'count' (number) and 'disabled' (boolean), and functions 'increaseBy' and 'decreaseBy' to modify the count.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/typescript.mdx#_snippet_2

LANGUAGE: svelte
CODE:
```
<script lang="ts">
    let count: number = $state(0);
    let disabled: boolean = $state(false);

    const increaseBy = () => {
      count += 1
    };
    
    const decreaseBy = () => {
      count -= 1
    };
  </script>

  <div class="card">
    {count}
    <button onclick={increaseBy} {disabled}> Increase by 1 </button>
    <button onclick={decreaseBy} {disabled}> Decrease by 1 </button>
  </div>
```

----------------------------------------

TITLE: Fixing TypeError in Vue Composed Stories
DESCRIPTION: This code snippet demonstrates how to fix the TypeError: Cannot read properties of undefined (reading 'devtoolsRawSetupState') error when migrating from @storybook/testing-vue3. It involves changing the usage of the composed story to reference it instead of calling it as a function, using the props option in the render function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_46

LANGUAGE: typescript
CODE:
```
import { it } from 'vitest';
import { render } from '@testing-library/vue';
import * as stories from './Button.stories';
import { composeStory } from '@storybook/vue3';

it('renders primary button', () => {
  const Primary = composeStory(stories.Primary, stories.default);
-  render(Primary({ label: 'Hello world' }));
+  render(Primary, { props: { label: 'Hello world' } });
});
```

----------------------------------------

TITLE: Initializing Button Story - TypeScript (Common)
DESCRIPTION: This code initializes a Storybook story for a Button component in TypeScript. It imports the Button component and defines its metadata, including the 'variant' argType with options for 'primary' and 'secondary'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  argTypes: {
    variant: {
      options: ['primary', 'secondary'],
      control: { type: 'radio' },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Replacing setGlobalConfig with setProjectAnnotations
DESCRIPTION: The 'setGlobalConfig' function is replaced with 'setProjectAnnotations'. This snippet demonstrates the necessary change in the import statement.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_70

LANGUAGE: typescript
CODE:
```
import { setProjectAnnotations } from `@storybook/react`.
```

----------------------------------------

TITLE: Running Storybook Automigration with Yarn
DESCRIPTION: Executes Storybook's automigration utility using Yarn's DLX command. Uses the latest version of Storybook to run the automigrate command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-automigrate.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@latest automigrate
```

----------------------------------------

TITLE: Configuring Storybook with TsconfigPathsPlugin in JavaScript
DESCRIPTION: This snippet demonstrates how to configure Storybook in JavaScript, including setting up the framework, defining story locations, and integrating TsconfigPathsPlugin for webpack. It uses the webpackFinal function to modify the webpack configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-ts-module-resolution.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin';

export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  webpackFinal: async (config) => {
    if (config.resolve) {
      config.resolve.plugins = [
        ...(config.resolve.plugins || []),
        new TsconfigPathsPlugin({
          extensions: config.resolve.extensions,
        }),
      ];
    }
    return config;
  },
};
```

----------------------------------------

TITLE: Importing Dependencies for Storybook Documentation
DESCRIPTION: Imports necessary dependencies for creating Storybook documentation, including meta tags and image components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/ts/Configure.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { Meta } from "@storybook/addon-docs/blocks";
import Image from "next/image";

import Github from "./assets/github.svg";
import Discord from "./assets/discord.svg";
import Youtube from "./assets/youtube.svg";
import Tutorials from "./assets/tutorials.svg";
import Styling from "./assets/styling.png";
import Context from "./assets/context.png";
import Assets from "./assets/assets.png";
import Docs from "./assets/docs.png";
import Share from "./assets/share.png";
import FigmaPlugin from "./assets/figma-plugin.png";
import Testing from "./assets/testing.png";
import Accessibility from "./assets/accessibility.png";
import Theming from "./assets/theming.png";
import AddonLibrary from "./assets/addon-library.png";
```

----------------------------------------

TITLE: Configuring NavigationBasedComponent Story with Next.js (TS)
DESCRIPTION: This TypeScript snippet configures a Storybook story for the NavigationBasedComponent. It imports Meta and StoryObj types from '@storybook/your-framework', sets the component, and defines the nextjs parameter to simulate navigation segments with 'slug' and 'framework' parameters. It uses satisfies to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-segments-for-use-params-override-in-meta.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Meta, StoryObj } from '@storybook/your-framework';

import NavigationBasedComponent from './NavigationBasedComponent';

const meta = {
  component: NavigationBasedComponent,
  parameters: {
    nextjs: {
      appDirectory: true,
      navigation: {
        segments: [
          ['slug', 'hello'],
          ['framework', 'nextjs'],
        ],
      },
    },
  },
} satisfies Meta<typeof NavigationBasedComponent>;
export default meta;
```

----------------------------------------

TITLE: Configuring Theme Switching in Storybook
DESCRIPTION: Setting up the withThemeByClassName decorator in the Storybook preview configuration to enable theme switching.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
-import { Preview } from "@storybook/your-renderer";
+import { Preview, Renderer } from "@storybook/your-renderer";
+import { withThemeByClassName } from "@storybook/addon-themes";

import "../src/index.css";


const preview: Preview = {
  parameters: { /* ... */ },
+ decorators: [
+  withThemeByClassName<Renderer>({
+    themes: {
+      light: "is-light",
+      dark: "is-dark",
+    },
+    defaultTheme: "light",
+  }),
+ ]
};

export default preview;
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component
DESCRIPTION: This code initializes a Storybook story for a Svelte component named MyComponent. It defines a story named 'WithAnImage' that renders the component with a specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#_snippet_6

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

export const WithAnImage = {
  render: () => ({
    Component: MyComponent,
    props: {
      src: 'https://storybook.js.org/images/placeholders/350x150.png',
      alt: 'My CDN placeholder',
    },
  }),
};
```

----------------------------------------

TITLE: Installing Storybook Angular with pnpm
DESCRIPTION: Command to install @storybook/angular as a dev dependency using pnpm package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/angular-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev @storybook/angular
```

----------------------------------------

TITLE: Setting Project Annotations with Storybook for Vue in JavaScript
DESCRIPTION: The JavaScript equivalent for Vue 3 projects, configuring project annotations via Storybook integrations. It includes accessibility setup and can be extended with custom project annotations, utilizing Vitest's `beforeAll`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { beforeAll } from 'vitest';

import { setProjectAnnotations } from '@storybook/vue3';

// Import the a11y addon annotations
import * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';

// Optionally import your own annotations
import * as projectAnnotations from './preview';

const project = setProjectAnnotations([
  // Add the a11y addon annotations
  a11yAddonAnnotations,
  projectAnnotations,
]);

beforeAll(project.beforeAll);
```

----------------------------------------

TITLE: Testing onclick handler with React and Storybook
DESCRIPTION: This test verifies that the onclick handler of a React Button component is called when the button is clicked. It uses composeStory from @storybook/react-vite to integrate the story with the test, and @testing-library/react to render and interact with the component. The test defines a mock onClick function using jest.fn(), passes it to the component, simulates a click, and asserts that the mock function was called.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-compose-story.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { jest, test, expect } from '@jest/globals';
import { render, screen } from '@testing-library/react';
// 👉 Using Next.js? Import from @storybook/nextjs instead
import { composeStory } from '@storybook/react-vite';

import meta, { Primary as PrimaryStory } from './Button.stories';

test('onclick handler is called', () => {
  // Returns a story which already contains all annotations from story, meta and global levels
  const Primary = composeStory(PrimaryStory, meta);

  const onClickSpy = jest.fn();
  await Primary.run({ args: { ...Primary.args, onClick: onClickSpy } });

  const buttonElement = screen.getByRole('button');
  buttonElement.click();
  expect(onClickSpy).toHaveBeenCalled();
});
```

----------------------------------------

TITLE: Mocking an Error API Response with MSW in JavaScript
DESCRIPTION: This story mocks an error API response using MSW in a JavaScript Storybook story. It defines a handler that intercepts GET requests to 'https://your-restful-endpoint' and returns a 403 status code after a delay of 800ms. This simulates a failed API request and allows testing the component's error handling.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_5

LANGUAGE: js
CODE:
```
export const MockedError = {
  parameters: {
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint', async () => {
          await delay(800);
          return new HttpResponse(null, {
            status: 403,
          });
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Defining Storybook Story for Web Components (JS)
DESCRIPTION: This snippet defines a Storybook story for a web component using JavaScript. It exports a default object containing the component definition (as a string representing the component's tag name). It also exports a named story with specific arguments, utilizing environment variables.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-vite-env-variables.md#_snippet_6

LANGUAGE: js
CODE:
```
export default {
  component: 'my-component',
};

export const ExampleStory = {
  args: {
    propertyA: import.meta.env.STORYBOOK_DATA_KEY,
    propertyB: import.meta.env.VITE_CUSTOM_VAR,
  },
};
```

----------------------------------------

TITLE: Installing @storybook/addon-a11y using npm (Shell)
DESCRIPTION: Installs the `@storybook/addon-a11y` package as a development dependency using the npm package manager. Requires Node.js and npm to be installed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install @storybook/addon-a11y --save-dev
```

----------------------------------------

TITLE: Mock UUID Wrapper Implementation
DESCRIPTION: This TypeScript code mocks the `uuidv4` function from the `lib/uuid` module using Storybook's `fn` utility. It imports the actual module and re-exports a mocked version with a preserved name for minification.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { fn } from 'storybook/test';

import * as actual from './uuid';

export const uuidv4 = fn(actual.uuidv4).mockName('uuidv4');
```

----------------------------------------

TITLE: Configuring Playwright Component Tests for Vue Storybook
DESCRIPTION: This snippet configures Playwright component tests for a Vue Storybook project. It imports necessary modules from Playwright and Storybook, sets project annotations using 'setProjectAnnotations', and configures the 'beforeAll' hook to run before all tests.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct-compose-stories.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { test } from '@playwright/experimental-ct-vue';
import { setProjectAnnotations } from '@storybook/vue3-vite';
// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this
import * as addonAnnotations from 'my-addon/preview';
import * as previewAnnotations from './.storybook/preview';

const annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);

// Supports beforeAll hook from Storybook
test.beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Configuring HTTP Headers in TypeScript Test Runner
DESCRIPTION: TypeScript implementation of a test runner configuration that sets Bearer token authorization headers with type safety using TestRunnerConfig interface.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-auth.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';

const config: TestRunnerConfig = {
  getHttpHeaders: async (url) => {
    const token = url.includes('prod') ? 'prod-token' : 'dev-token';
    return {
      Authorization: `Bearer ${token}`,
    };
  },
};

export default config;
```

----------------------------------------

TITLE: Exporting Accessibility Parameters in Storybook Preview - TypeScript
DESCRIPTION: This TypeScript snippet sets up accessibility parameters in Storybook’s configuration file by exporting a Preview object. It specifies rule settings for 'autocomplete' and 'image-alt', and allows manual control of automatic checks via the 'manual' flag. It requires integration with a specific JavaScript framework and set up for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-global-config.md#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react, vue3)
import { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    a11y: {
      // Optional selector to inspect
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Component (TS)
DESCRIPTION: This code defines the Storybook metadata for a Svelte component using TypeScript. It imports the necessary types from '@storybook/your-framework' (which should be replaced with the actual framework, e.g., 'svelte-vite'). It configures the component and its 'value' argument type, including default value and type summary.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import { Example } from './Example';

const meta = {
  component: Example,
  argTypes: {
    value: {
      table: {
        defaultValue: { summary: 0 },
        type: { summary: 'number' },
      },
    },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Importing local fonts with next/font/local in Next.js
DESCRIPTION: This code snippet demonstrates how to import and use a local font using `next/font/local` in a Next.js component. The `src` property specifies the path to the font file, relative to the component's directory. This example defines a local font named `localRubikStorm`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_2

LANGUAGE: js
CODE:
```
import localFont from 'next/font/local';

const localRubikStorm = localFont({ src: './fonts/RubikStorm-Regular.ttf' });
```

----------------------------------------

TITLE: Configuring Storybook Meta for Component (Common JS)
DESCRIPTION: This snippet configures the Storybook metadata for a component using JavaScript. It defines the component, tags, and documentation parameters, including disabling the table of contents.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-disable-toc.md#_snippet_3

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
  tags: ['autodocs'],
  parameters: {
    docs: {
      toc: {
        disable: true, // 👈 Disables the table of contents
      },
    },
  },
};
```

----------------------------------------

TITLE: Referencing MDX Documentation in CSF
DESCRIPTION: This JavaScript snippet shows how to reference an MDX file as documentation for a CSF story. It imports React, the Button component, and the MDX file. It then sets the 'docs.page' parameter in the default export to the imported MDX file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { Button } from './Button';
import mdx from './Button.mdx';

export default {
  title: 'Demo/Button',
  parameters: {
    docs: {
      page: mdx,
    },
  },
  component: Button,
};
export const basic = () => <Button>Basic</Button>;
```

----------------------------------------

TITLE: Initializing Button Story for Web Components (JS)
DESCRIPTION: This code initializes a Storybook story for a Web Components Button component using JavaScript. It defines the component as 'custom-button' and sets up argTypes for handling onClick events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#_snippet_9

LANGUAGE: js
CODE:
```
export default {
  component: 'custom-button',
  argTypes: {
    onClick: { action: 'onClick' },
  },
};

export const Text = {
  args: {},
};
```

----------------------------------------

TITLE: Defining Storybook Story for Solid (JS)
DESCRIPTION: This code defines a Storybook story for a Solid component using JavaScript. It imports necessary modules, defines argTypes with options, and creates a story with a render function that uses signals and effects to assign the function result to a signal and returns the component with props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_3

LANGUAGE: js
CODE:
```
import { createSignal, createEffect } from 'solid-js';

import { YourComponent } from './your-component';

export default {
  component: YourComponent,
  //👇 Creates specific argTypes with options
  argTypes: {
    propertyA: {
      options: ['Item One', 'Item Two', 'Item Three'],
      control: { type: 'select' }, // Automatically inferred when 'options' is defined
    },
    propertyB: {
      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],
    },
  },
};

const someFunction = (valuePropertyA, valuePropertyB) => {
  // Do some logic here
};

export const ExampleStory = {
  render: (args) => {
    const [someFunctionResult, setSomeFunctionResult] = createSignal();

    //👇 Assigns the function result to a signal
    createEffect(() => {
      setSomeFunctionResult(someFunction(args.propertyA, args.propertyB));
    });

    return <YourComponent {...args} someProperty={someFunctionResult()} />;
  },
  args: {
    propertyA: 'Item One',
    propertyB: 'Another Item One',
  },
};
```

----------------------------------------

TITLE: NPM scripts for testing and building Storybook
DESCRIPTION: Defines npm scripts for generating test output, running tests, and building Storybook. The `test:generate-output` script includes `|| true` to prevent build failures if tests fail.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/jest/README.md#_snippet_4

LANGUAGE: json
CODE:
```
"scripts": {
  "test:generate-output": "jest --json --outputFile=.jest-test-results.json || true",
  "test": "jest",
  "prebuild:storybook": "npm run test:generate-output",
  "build:storybook": "build-storybook -c .storybook -o build/",
  "predeploy": "npm run build:storybook",
  "deploy": "gh-pages -d build/",
}
```

----------------------------------------

TITLE: Configuring Static Directories with Configuration Objects in Storybook
DESCRIPTION: Uses configuration objects to define static directories with more control, mapping source directories to destination paths. This enables more precise control over where files are served from and to.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-static-dirs.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  // ...
  staticDirs: [
    { from: '../public', to: '/' },
    { from: '../assets', to: '/assets' },
  ],
};
```

----------------------------------------

TITLE: Simulating Change Event in Storybook (Web Components - TS)
DESCRIPTION: This Storybook story simulates a change event on a select element within a web component. It uses the `userEvent.selectOptions` function to select different options and `sleep` function to introduce delays between selections, demonstrating asynchronous interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#_snippet_9

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { userEvent, within } from 'storybook/test';

const meta: Meta = {
  component: 'demo-my-component',
};

export default meta;
type Story = StoryObj;

// Function to emulate pausing between interactions
function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleChangeEvent: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const select = canvas.getByRole('listbox');

    await userEvent.selectOptions(select, ['One Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Another Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Yet another item']);
  },
};
```

----------------------------------------

TITLE: Update Storybook Configuration
DESCRIPTION: This code snippet updates the `.storybook/main.js|ts` file to change the framework property and remove the `@storybook/addon-react-native-web` addon. This is necessary when migrating from the older addon to the Vite framework.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-native-web-vite.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
framework: "@storybook/react-native-web-vite"
```

----------------------------------------

TITLE: Reusing Story Definitions in Storybook Components
DESCRIPTION: Demonstrates how to reuse story definitions between components by referencing args from one story in another, specifically reusing ListItem story args in List stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/stories-for-multiple-components.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
<CodeSnippets path="list-story-reuse-data.md" />
```

----------------------------------------

TITLE: Creating Storybook Page Story with Custom Footer (TS)
DESCRIPTION: This TypeScript code defines a Storybook story for a 'Page' component, setting a custom footer. It imports types from '@storybook/web-components-vite' and the 'html' function from 'lit'. It defines a custom type 'CustomArgs' for the story arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

type CustomArgs = { footer?: string };

const meta: Meta<CustomArgs> = {
  title: 'Page',
  component: 'demo-page',
  render: ({ footer }) => html`
    <demo-page>
      <footer>${footer}</footer>
    </demo-page>
  `,
};

export default meta;
type Story = StoryObj<CustomArgs>;

export const CustomFooter: Story = {
  args: {
    footer: 'Built with Storybook',
  },
};
```

----------------------------------------

TITLE: Running Storybook Test-Runner with Index.json Mode
DESCRIPTION: Shows how to run the Storybook test-runner using the index.json mode, which tests the Storybook using the index.json file instead of transforming story files directly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
yarn test-storybook --url https://your-deployed-storybook-url.com --index-json
```

----------------------------------------

TITLE: Update Storybook Framework to Next.js in TypeScript
DESCRIPTION: This snippet updates the Storybook configuration to use the Next.js framework in a TypeScript project. It imports the StorybookConfig type and updates the framework property from '@storybook/react-webpack5' to '@storybook/nextjs'. This ensures Storybook is properly configured for Next.js projects using TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-add-framework.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/nextjs';

const config: StorybookConfig = {
  // ...
  // framework: '@storybook/react-webpack5', 👈 Remove this
  framework: '@storybook/nextjs', // 👈 Add this
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook for Preact with Vite in JavaScript
DESCRIPTION: This snippet shows how to configure Storybook for Preact using Vite as the bundler in JavaScript. It exports a default configuration object specifying the framework name and options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-framework-options.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  framework: {
    name: '@storybook/preact-vite',
    options: {
      // ...
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Framework with React Webpack 5 in TypeScript
DESCRIPTION: This snippet shows how to configure Storybook to use the React Webpack 5 framework in a TypeScript configuration file. It imports the `StorybookConfig` type and sets the `framework` property to `@storybook/react-webpack5`. This tells Storybook to use the React Webpack 5 builder.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-add-framework.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/react-webpack5';

const config: StorybookConfig = {
  // ...
  framework: '@storybook/react-webpack5', // 👈 Add this
};

export default config;
```

----------------------------------------

TITLE: Solid Button Story Implementation (JavaScript)
DESCRIPTION: Default story implementation for a Button component in SolidJS using CSF 3 format. Uses JavaScript with props spreading pattern.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
export const Default = {
  render: (args) => <Button {...args} />,
};
```

----------------------------------------

TITLE: Storybook v7-style Story Sort Function
DESCRIPTION: This code snippet shows an example of a story sort function for Storybook v7. It compares the `title` property of stories and uses `localeCompare` for sorting based on story IDs.  This version receives a `StoryIndexEntry` object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_171

LANGUAGE: javascript
CODE:
```
// v7-style sort
function storySort(a, b) {
  return a.title === b.title
    ? 0
    : a.id.localeCompare(b.id, undefined, { numeric: true });
},
```

----------------------------------------

TITLE: Initializing Svelte Button Story (CSF)
DESCRIPTION: This snippet initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports 'defineMeta' from '@storybook/addon-svelte-csf' and defines the component metadata, including the component itself and arguments like onClick, which uses 'fn' to spy on the click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-onclick-action-spy.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { fn } from 'storybook/test';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    // 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked
    args: { onClick: fn() },
  });
</script>
```

----------------------------------------

TITLE: Configure Storybook Framework with Svelte Vite (TS)
DESCRIPTION: This TypeScript snippet configures Storybook to use the Svelte Vite builder. It imports the StorybookConfig type and sets the framework property to '@storybook/svelte-vite'. This ensures Storybook uses the Svelte Vite builder for compiling and bundling stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-vite-add-framework.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/svelte-vite';

const config: StorybookConfig = {
  // ...
  framework: '@storybook/svelte-vite', // 👈 Add this
};

export default config;
```

----------------------------------------

TITLE: Configuring Local Preset for Storybook Addon in JavaScript
DESCRIPTION: This snippet demonstrates how to create a local preset for a Storybook addon, including configuration for builders, Babel, and third-party integrations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  babel: async (config) => ({
    ...config,
    // custom babel config
  }),
  webpackFinal: async (config) => ({
    ...config,
    // custom webpack config
  }),
  // other configuration options
};
```

----------------------------------------

TITLE: Configuring Storybook Test Runner in TypeScript
DESCRIPTION: TypeScript configuration for Storybook test runner with proper type definitions. Implements post-visit snapshot testing by capturing the innerHTML of the story root element (#storybook-root) and comparing it against stored snapshots.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-dom-snapshot-testing.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';

const config: TestRunnerConfig = {
  async postVisit(page, context) {
    // the #storybook-root element wraps the story. In Storybook 6.x, the selector is #root
    const elementHandler = await page.$('#storybook-root');
    const innerHTML = await elementHandler.innerHTML();
    expect(innerHTML).toMatchSnapshot();
  },
};

export default config;
```

----------------------------------------

TITLE: Removing Autodocs Tag from Component
DESCRIPTION: To disable automatic documentation for a specific component, remove the `autodocs` tag from the `tags` array in the component's meta definition. This will prevent a documentation page from being generated for that component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { Button } from './Button';

//👇 This default export determines where your story goes in the story list
const meta: Meta<typeof Button> = {
  title: 'Example/Button',
  component: Button,
  tags: [],
};

export default meta;
```

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from "@storybook/react";

import { Button } from "./Button";

//👇 This default export determines where your story goes in the story list
const meta: Meta<typeof Button> = {
  title: "Example/Button",
  component: Button,
  tags: [],
};

export default meta;
```

----------------------------------------

TITLE: Initializing Button stories with Svelte CSF
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using the Component Story Format (CSF). It imports the Button and MarginDecorator components, and defines the default export with the component and decorators.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_8

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';
import MarginDecorator from './MarginDecorator.svelte';

export default {
  component: Button,
  decorators: [() => MarginDecorator],
};
```

----------------------------------------

TITLE: Defining Button Stories for Solid (TypeScript)
DESCRIPTION: This code defines Storybook stories for a Solid Button component using TypeScript. It imports the Button component and defines stories for Primary, Secondary, and Tertiary variants, each with a different label and background color.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_5

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: () => <Button backgroundColor="#ff0" label="Button" />,
};

export const Secondary: Story = {
  render: () => <Button backgroundColor="#ff0" label="😄👍😍💯" />,
};

export const Tertiary: Story = {
```

----------------------------------------

TITLE: Correct Story File Format With Default Export
DESCRIPTION: Example showing correct story file format that follows the rule by including both a default export for component metadata and a named export for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/default-exports.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Button',
  args: { primary: true },
  component: Button,
};
export const Primary = {};
```

----------------------------------------

TITLE: Configuring List Story with Svelte CSF (JavaScript)
DESCRIPTION: This code configures a Storybook story for the List component in Svelte using JavaScript. It imports the List component and sets it as the component in the default export. The Empty story is defined as an empty object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_8

LANGUAGE: js
CODE:
```
import List from './List.svelte';

export default {
  component: List,
};

// Always an empty list, not super interesting
export const Empty = {};

```

----------------------------------------

TITLE: Using Next.js Image Component with Remote Images
DESCRIPTION: This code demonstrates how to use the Next.js Image component with remote images in a Storybook story. It imports the Image component from next/image. The Image component is then used to display the remote image with specified alt text, width, and height.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Image from 'next/image';

export default function Home() {
  return (
    <>
      <h1>My Homepage</h1>
      <Image src="/me.png" alt="Picture of the author" width={500} height={500} />
      <p>Welcome to my homepage!</p>
    </>
  );
}
```

----------------------------------------

TITLE: Configuring A11y Parameters in Web Components CSF with TypeScript
DESCRIPTION: Example of configuring accessibility parameters for Web Components using Component Story Format (CSF) in TypeScript. Demonstrates how to set up accessibility testing with type safety for custom elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const ExampleStory: Story = {
  parameters: {
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Configuring Button Story in Solid (TypeScript)
DESCRIPTION: This code configures a Storybook story for a Solid Button component using TypeScript. It imports the Button component and defines its metadata, including argument types for background color and default arguments to set the primary property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
  //👇 Creates specific argTypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    //👇 Now all Button stories will be primary.
    primary: true,
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Setting Global Window Object in Storybook Preview HTML
DESCRIPTION: This snippet adds a script to the preview HTML that sets the 'window' object as 'global'. This is useful for compatibility with libraries that expect a global scope, especially in environments where it might not be available by default.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-jest-mock.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<script>
  window.global = window;
</script>
```

----------------------------------------

TITLE: Configuring Stories in Storybook's main.js
DESCRIPTION: This snippet demonstrates how to configure stories in Storybook using the `stories` field in `main.js`, replacing the deprecated `configure` API. It shows how to load stories using a glob pattern.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_240

LANGUAGE: javascript
CODE:
```
// in .storybook/main.js
module.exports = {
  stories: ["../src/**/*.stories.js"],
};
```

----------------------------------------

TITLE: Implementing renderMain Function for Storybook Custom Framework Integration
DESCRIPTION: Defines the main rendering function used by Storybook to display stories in the preview iframe. It takes a story function, executes it to get the story object, processes it through a framework-specific rendering function, and updates the root DOM element with the resulting HTML.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-framework-render-function.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const rootElement = document.getElementById('root');

export default function renderMain({ storyFn }: RenderMainArgs) {
  const storyObj = storyFn();
  const html = fn(storyObj);
  rootElement.innerHTML = html;
}
```

----------------------------------------

TITLE: Linking Stories with linkTo
DESCRIPTION: Import `linkTo` from `@storybook/addon-links` and use it within your stories to create navigation links between different stories. The `onClick` handler triggers the navigation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { linkTo } from '@storybook/addon-links';

export default {
  title: 'Button',
};

export const first = () => <button onClick={linkTo('Button', 'second')}>Go to "Second"</button>;
export const second = () => <button onClick={linkTo('Button', 'first')}>Go to "First"</button>;
```

----------------------------------------

TITLE: Running Storybook Tests with Coverage using pnpm
DESCRIPTION: This command runs Storybook tests with coverage enabled using pnpm. It executes the 'test-storybook' script with the '--coverage' flag to generate test coverage reports.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-run-with-coverage.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm run test-storybook --coverage
```

----------------------------------------

TITLE: Testing Vue Story with Vitest
DESCRIPTION: This test uses Vitest and Storybook's composeStory to test a Vue story. It imports the stories, composes the Primary story, and then runs the story's play function to verify interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-with-play-function.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { test } from 'vitest';
import { composeStory } from '@storybook/vue3-vite';

import * as stories from './Button.stories';

const { Primary } = composeStories(stories);

test('renders and executes the play function', async () => {
  // Mount story and run interactions
  await Primary.run();
});
```

----------------------------------------

TITLE: Defining Basic Storybook Story in TypeScript
DESCRIPTION: This TypeScript code defines a basic Storybook story for the 'my-component' web component. It uses TypeScript types for Meta and StoryObj to provide type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_13

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const Basic: Story = {};

export const WithProp: Story = {
  render: () => html`<my-component prop="value" />`,
};
```

----------------------------------------

TITLE: Initializing Storybook Meta for CommonJS Component
DESCRIPTION: This snippet initializes the Storybook meta object for a component in a CommonJS environment. It imports the MyComponent and defines the component to be documented. It also creates a simple story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-storyname.md#_snippet_1

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const Simple = {
  name: 'So simple!',
  // ...
};
```

----------------------------------------

TITLE: Configuring Storybook to Use Viewport Addon
DESCRIPTION: JavaScript configuration to add the Viewport addon to Storybook. This code should be added to the .storybook/main.js file to enable the addon in your Storybook project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/viewport/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  addons: ['storybook/viewport'],
};
```

----------------------------------------

TITLE: Simulating User Interaction in Storybook
DESCRIPTION: This snippet demonstrates how to simulate user interaction within a Storybook story using `userEvent` and `within`. It assigns the component's root element to `canvas` and then uses `userEvent` to type text into an element and click a button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#_snippet_7

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

export default {
  component: 'demo-my-component',
};

export const ExampleStory = {
  play: async ({ canvasElement }) => {
    // Assigns canvas to the component root element
    const canvas = within(canvasElement);

    // Starts querying from the component's root element
    await userEvent.type(canvas.getByTestId('example-element'), 'something');
    await userEvent.click(canvas.getByRole('button'));
  },
};
```

----------------------------------------

TITLE: Installing Accessibility Addon Manually
DESCRIPTION: Command to install the Storybook Accessibility addon as a dev dependency using package managers.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/install-addons.mdx#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
# With npm
npm install @storybook/addon-a11y --save-dev

# With yarn
yarn add -D @storybook/addon-a11y

# With pnpm
pnpm add -D @storybook/addon-a11y
```

----------------------------------------

TITLE: Defining Story with Property in TypeScript
DESCRIPTION: This TypeScript code defines a Storybook story that renders the 'my-component' web component with a specific property. It uses the 'html' template literal from the 'lit' library to create the component's HTML and is type-safe.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_14

LANGUAGE: ts
CODE:
```
export const WithProp: Story = {
  render: () => html`<my-component prop="value" />`,
};
```

----------------------------------------

TITLE: Installing Specific Storybook Version (8.3+)
DESCRIPTION: Command to install a specific version of Storybook 8.3 or newer using the 'create' command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
<CodeSnippets path="create-command-custom-version.md" />
```

----------------------------------------

TITLE: Configuring Static Directories in Storybook (JavaScript)
DESCRIPTION: This JavaScript snippet configures Storybook to serve static assets from the `../src/components/fonts` directory, making them available under `src/components/fonts` within the Storybook environment. This is useful for serving font files or other static resources required by components. No specific dependencies are required beyond the standard Storybook setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-image-static-dirs.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  staticDirs: [
    {
      from: '../src/components/fonts',
      to: 'src/components/fonts',
    },
  ],
};
```

----------------------------------------

TITLE: Rendering Storybook Stories on Server in TypeScript
DESCRIPTION: This method renders a specific story on the server-side. It fetches the story details, prepares the rendering context, and uses the preview builder to render the story. It handles different rendering modes and returns the rendered output.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/server/README.md#2025-04-22_snippet_2

LANGUAGE: TypeScript
CODE:
```
async renderStory(storyId: StoryId, renderMode: RenderMode = 'story') {
  await this.ready;
  const story = await this.storyIndex.storyIdToEntry(storyId);
  if (!story) {
    throw new Error(`Unable to find story matching '${storyId}'`);
  }

  const context: RenderContext = {
    // ... context properties
  };

  return this.previewBuilder.renderStory(context, renderMode);
}
```

----------------------------------------

TITLE: Initializing Button Story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports the Meta type from Storybook, defines the component to be the Button, and sets up parameters for handling actions based on a regular expression.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  parameters: { actions: { argTypesRegex: '^on.*' } },
};

export default meta;
```

----------------------------------------

TITLE: Configuring text control for string ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'text' control, providing a freeform text input within Storybook's controls panel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_16

LANGUAGE: JavaScript
CODE:
```
{ control: 'text' }
```

----------------------------------------

TITLE: Configure Storybook Framework with Svelte Vite (JS)
DESCRIPTION: This JavaScript snippet configures Storybook to use the Svelte Vite builder by setting the framework property to '@storybook/svelte-vite'. This ensures that Storybook uses the correct builder for Svelte components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-vite-add-framework.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  framework: '@storybook/svelte-vite', // 👈 Add this
};
```

----------------------------------------

TITLE: Initializing Gizmo Story with ArgTypes in Svelte (TS)
DESCRIPTION: This code defines a Storybook story for the Gizmo component using Svelte and TypeScript. It uses `defineMeta` from `@storybook/addon-svelte-csf` to configure the component and its properties (argTypes), enabling interactive control within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Gizmo from './Gizmo.svelte';

  const { Story } = defineMeta({
    component: Gizmo,
    argTypes: {
      canRotate: {
        control: 'boolean',
      },
      width: {

```

----------------------------------------

TITLE: Defining Storybook Meta for Svelte Component (TS)
DESCRIPTION: This code defines the Storybook metadata for a Svelte component using TypeScript. It imports the Meta type from @storybook/your-framework and the MyComponent.svelte. It configures the title, component, decorators, and parameters for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import MyComponent from './MyComponent.svelte';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Path/To/MyComponent',
  component: MyComponent,
  decorators: [
    /* ... */
  ],
  parameters: {
    /* ... */
  },
} satisfies Meta<typeof MyComponent>;

export default meta;
```

----------------------------------------

TITLE: Configuring Test-Runner Workers in package.json
DESCRIPTION: Shows how to limit the number of parallel workers for the test-runner to avoid timeouts in CI environments or with large numbers of stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_12

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test-storybook:ci": "yarn test-storybook --maxWorkers=2"
  }
}
```

----------------------------------------

TITLE: Scroll Into View Story with Decorator (JS - Alternative)
DESCRIPTION: This JavaScript snippet defines a Storybook story with a decorator that uses the `useChannel` hook to emit a `SCROLL_INTO_VIEW` event. This event instructs Storybook to scroll to the element with the ID 'footer'. It demonstrates how to use decorators to interact with the Storybook API and trigger actions within the Storybook environment. This version uses a template instead of the story function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-scroll-into-view.md#_snippet_10

LANGUAGE: js
CODE:
```
export const ScrollIntoView: Story = {
  decorators: [
    () => {
      const emit = useChannel({});
      emit(SCROLL_INTO_VIEW, '#footer');
      return {
        template: '<story />',
      };
    },
  ],
};
```

----------------------------------------

TITLE: Configuring Story Sorting in Storybook Preview (JavaScript)
DESCRIPTION: This JavaScript snippet configures the Storybook preview to define a custom story sorting order. It sets the 'storySort' parameter within the 'options' parameter to specify the order of stories in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-ordered-pages-and-wildcard.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    options: {
      storySort: {
        order: ['Intro', 'Pages', ['Home', 'Login', 'Admin'], 'Components', '*', 'WIP'],
      },
    },
  },
};
```

----------------------------------------

TITLE: Basic MDX Example in Storybook
DESCRIPTION: A basic example of using MDX in Storybook to create documentation with an embedded Checkbox component story. This demonstrates the combination of markdown documentation with JSX components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
import { Meta, Story, Canvas } from '@storybook/addon-docs';
import { Checkbox } from './Checkbox';

<Meta title="MDX/Checkbox" component={Checkbox} />

# Checkbox

With `MDX` we can define a story for `Checkbox` right in the middle of our
markdown documentation.

<Canvas>
  <Story name="all checkboxes">
    <form>
      <Checkbox id="Unchecked" label="Unchecked" />
      <Checkbox id="Checked" label="Checked" checked />
      <Checkbox appearance="secondary" id="second" label="Secondary" checked />
    </form>
  </Story>
</Canvas>
```

----------------------------------------

TITLE: Configuring Test Hooks for Storybook Test Runner
DESCRIPTION: JavaScript configuration for setting up test hooks in the Storybook test runner, allowing custom actions before and after story rendering.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { setup } from '@storybook/test-runner';

setup();

export default {
  async prepare({ page, browserContext, testRunnerConfig }) {
    // Custom preparation logic
  },
  async preVisit(page, context) {
    // Custom logic before story visit
  },
  async postVisit(page, context) {
    // Custom logic after story visit
  },
};
```

----------------------------------------

TITLE: Configuring Environment Variables in Storybook Main Config
DESCRIPTION: Example of extending Storybook's main configuration file to define custom environment variables.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/environment-variables.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  env: (config) => ({
    ...config,
    EXAMPLE_VAR: 'An environment variable',
  }),
};
```

----------------------------------------

TITLE: Core Configuration Type Definition
DESCRIPTION: TypeScript interface defining the core configuration options available in Storybook's main.js/ts configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-core.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
{
  builder?: string | { name: string; options?: BuilderOptions };
  channelOptions?: ChannelOptions;
  crossOriginIsolated?: boolean;
  disableProjectJson?: boolean;
  disableTelemetry?: boolean;
  disableWebpackDefaults?: boolean;
  disableWhatsNewNotifications?: boolean;
  enableCrashReports?: boolean;
  renderer?: RendererName;
}
```

----------------------------------------

TITLE: Checkbox Story with useArgs in JavaScript
DESCRIPTION: This story demonstrates how to use the `useArgs` hook to manage the state of a Checkbox component in a Storybook story. It defines an `onChange` handler that updates the `isChecked` argument when the checkbox is clicked.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-args-within-story.md#_snippet_0

LANGUAGE: js
CODE:
```
import { useArgs } from 'storybook/preview-api';

import { Checkbox } from './checkbox';

export default {
  title: 'Inputs/Checkbox',
  component: Checkbox,
};

export const Example = {
  args: {
    isChecked: false,
    label: 'Try Me!',
  },
  /**
   * 👇 To avoid linting issues, it is recommended to use a function with a capitalized name.
   * If you are not concerned with linting, you may use an arrow function.
   */
  render: function Render(args) {
    const [{ isChecked }, updateArgs] = useArgs();

    function onChange() {
      updateArgs({ isChecked: !isChecked });
    }

    return <Checkbox {...args} onChange={onChange} isChecked={isChecked} />;
  },
};
```

----------------------------------------

TITLE: Installing Storybook React Webpack5 with pnpm (Shell)
DESCRIPTION: This shell command adds @storybook/react-webpack5 as a development dependency using pnpm, which is an alternative JavaScript package manager. Aimed at React projects leveraging Storybook with Webpack5 support; it requires pnpm to be installed and run from the project root. Automatically updates the devDependencies section of package.json.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev @storybook/react-webpack5
```

----------------------------------------

TITLE: Highlighting elements in Vue Storybook
DESCRIPTION: This JavaScript snippet defines a Storybook story for a Vue component, using the `HIGHLIGHT` addon to apply custom styles to specific elements (h2, a, .storybook-button). It uses `useChannel` to emit the `HIGHLIGHT` event with selectors, styles, hoverStyles, focusStyles, and keyframes for animation. The story returns a template to render the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-custom-style.md#_snippet_7

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.vue';

export default {
  component: MyComponent,
};

export const StyledHighlight = {
  decorators: [
    () => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        styles: {
          backgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`,
          outline: '3px solid hotpink',
          animation: 'pulse 3s linear infinite',
          transition: 'outline-offset 0.2s ease-in-out',
        },
        hoverStyles: {
          outlineOffset: '3px',
        },
        focusStyles: {
          backgroundColor: 'transparent',
        },
        keyframes: `@keyframes pulse {
          0% { outline-color: rgba(255, 105, 180, 1); }
          50% { outline-color: rgba(255, 105, 180, 0.2); }
          100% { outline-color: rgba(255, 105, 180, 1); }
        }`,
      });
      return {
        template: '<story />',
      };
    },
  ],
};
```

----------------------------------------

TITLE: Configuring Button Metadata with ArgTypes in TypeScript for Web Components
DESCRIPTION: This code configures the metadata for a Button component (specifically a web component) in Storybook using TypeScript. It defines argTypes to categorize and control the component's properties such as backgroundColor, primary, label, onClick, and size within the Storybook UI. The properties are organized into categories like Colors, Text, Events, and Sizes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-subcategories.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  argTypes: {
    // Assigns the argTypes to the Colors category
    backgroundColor: {
      control: 'color',
      table: {
        category: 'Colors',
        // Assigns the argTypes to a specific subcategory
        subcategory: 'Button colors',
      },
    },
    primary: {
      table: {
        category: 'Colors',
        subcategory: 'Button style',
      },
    },
    label: {
      table: {
        category: 'Text',
        subcategory: 'Button contents',
      },
    },
    // Assigns the argType to the Events category
    onClick: {
      table: {
        category: 'Events',
        subcategory: 'Button Events',
      },
    },
    // Assigns the argType to the Sizes category
    size: {
      table: {
        category: 'Sizes',
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Button Component (Svelte CSF)
DESCRIPTION: This code configures the Storybook metadata for a Svelte Button component using Svelte CSF. It imports the Button component and defines the meta object, specifying the component and customizing the background options to include 'dark' and 'gray'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_7

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    parameters: {
      backgrounds: {
        options: {
          // 👇 Override the default `dark` option
          dark: { name: 'Dark', value: '#000' },
          // 👇 Add a new option
          gray: { name: 'Gray', value: '#CCC' },
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Specifying Configuration Directory
DESCRIPTION: Specifies the directory where Storybook's configuration files are located.  This allows for custom configurations to be loaded.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_6

LANGUAGE: Shell
CODE:
```
storybook dev -c .storybook
```

----------------------------------------

TITLE: Using the Custom StoryName Block in Storybook MDX
DESCRIPTION: This example shows how to use the custom StoryName block in a Storybook MDX file. It demonstrates different ways of using the block with various references.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-useof.mdx#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';
import { StoryName } from '../.storybook/blocks/StoryName';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

{/* Renders "Secondary" */}
<StoryName of={ButtonStories.Secondary} />

{/* Renders "Primary" */}
<StoryName />

{/* Renders "Button" */}
<StoryName of={ButtonStories} />
```

----------------------------------------

TITLE: Providing SSL Certificate
DESCRIPTION: Provides an SSL certificate for HTTPS. Required when using HTTPS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_10

LANGUAGE: Shell
CODE:
```
storybook dev --ssl-cert my-ssl-certificate
```

----------------------------------------

TITLE: Simulating Filled Form Interactions (SolidJS)
DESCRIPTION: This code defines a Storybook story for a filled LoginForm, simulating user interactions such as typing in the email and password fields, clicking the submit button, and asserting that a success message is displayed. It uses 'storybook/test' for user event simulation and DOM querying.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_9

LANGUAGE: typescript
CODE:
```
import { userEvent, within, expect } from 'storybook/test';

export const FilledForm: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));

    // 👇 Assert DOM structure
    await expect(
      canvas.getByText(
        'Everything is perfect. Your account is ready and we should probably get you started!'
      )
    ).toBeInTheDocument();
  },
};
```

----------------------------------------

TITLE: Runtime Configuration Object in Storybook
DESCRIPTION: This JSON object represents the runtime configuration as it would be available within Storybook. Note that serverRuntimeConfig is empty because Storybook components are rendered client-side. The publicRuntimeConfig contains the values defined in next.config.js.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_23

LANGUAGE: json
CODE:
```
{
  "serverRuntimeConfig": {},
  "publicRuntimeConfig": {
    "staticFolder": "/static"
  }
}
```

----------------------------------------

TITLE: Applying tags in meta and story
DESCRIPTION: Applies tags at the component (meta) and story levels within a component's stories file.  Demonstrates how to apply the `experimental` tag to the component and the `new` tag to a specific story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/tags.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Example/Button',
  component: Button,
  tags: ['experimental'],
};

export const Primary = {
  args: {
    primary: true,
    label: 'Button',
  },
  tags: ['new'],
};

```

----------------------------------------

TITLE: Configuring Log Level in Storybook
DESCRIPTION: This snippet shows how to configure the log level in Storybook. It defines the level of logs to display in the browser terminal.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
logLevel: 'debug'
```

----------------------------------------

TITLE: Describing Props with JSDoc in Vue Component
DESCRIPTION: This code snippet demonstrates how to use JSDoc comments within a Vue component's props definition to provide descriptions and annotations for the props. These JSDoc comments are then used by `vue-component-meta` to generate controls and documentation for the component in Storybook. This allows for richer and more informative documentation of component props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#_snippet_2

LANGUAGE: html
CODE:
```
<script setup lang="ts">
  interface MyComponentProps {
    /** The name of the user */
    name: string;
    /**
      * The category of the component
      *
      * @since 8.0.0
      */
    category?: string;
  }

  withDefaults(defineProps<MyComponentProps>(), {
    category: 'Uncategorized',
  });
</script>
```

----------------------------------------

TITLE: Running Storybook Snapshot Tests Using Vitest (TypeScript)
DESCRIPTION: This snippet implements Storybook snapshot testing in TypeScript, leveraging static typing for improved safety. It defines a StoryFile type, uses typed version of import.meta.glob, and otherwise mirrors the JavaScript logic for composing stories, dynamically filtering them according to suite options, and running tests using Vitest. Dependencies include '@storybook/your-framework', '@storybook/your-renderer', 'vitest', and TS support for dynamic imports. Key parameters and configuration match the JavaScript version. It expects standard Storybook stories and outputs test reports with associated snapshots.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-snapshot-test.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// @vitest-environment jsdom

// Replace your-framework with one of the supported Storybook frameworks (react, vue3)
import type { Meta, StoryFn } from '@storybook/your-framework';

import { describe, expect, test } from 'vitest';

// Replace your-renderer with the renderer you are using (e.g., react, vue3, svelte, etc.)
import { composeStories } from '@storybook/your-renderer';

type StoryFile = {
  default: Meta;
  [name: string]: StoryFn | Meta;
};

const compose = (entry: StoryFile): ReturnType<typeof composeStories<StoryFile>> => {
  try {
    return composeStories(entry);
  } catch (e) {
    throw new Error(
      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,
    );
  }
};

function getAllStoryFiles() {
  // Place the glob you want to match your story files
  const storyFiles = Object.entries(
    import.meta.glob<StoryFile>('./stories/**/*.(stories|story).@(js|jsx|mjs|ts|tsx)', {
      eager: true,
    }),
  );

  return storyFiles.map(([filePath, storyFile]) => {
    const storyDir = path.dirname(filePath);
    const componentName = path.basename(filePath).replace(/\.(stories|story)\.[^/.]+$/, '');
    return { filePath, storyFile, componentName, storyDir };
  });
}

// Recreate similar options to Storyshots. Place your configuration below
const options = {
  suite: 'Storybook Tests',
  storyKindRegex: /^.*?DontTest$/,
  storyNameRegex: /UNSET/,
  snapshotsDirName: '__snapshots__',
  snapshotExtension: '.storyshot',
};

describe(options.suite, () => {
  getAllStoryFiles().forEach(({ storyFile, componentName, storyDir }) => {
    const meta = storyFile.default;
    const title = meta.title || componentName;

    if (options.storyKindRegex.test(title) || meta.parameters?.storyshots?.disable) {
      // Skip component tests if they are disabled
      return;
    }

    describe(title, () => {
      const stories = Object.entries(compose(storyFile))
        .map(([name, story]) => ({ name, story }))
        .filter(({ name, story }) => {
          // Implements a filtering mechanism to avoid running stories that are disabled via parameters or that match a specific regex mirroring the default behavior of Storyshots.
          return !options.storyNameRegex?.test(name) && !story.parameters.storyshots?.disable;
        });

      if (stories.length <= 0) {
        throw new Error(
          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module, without a disable parameter, or add parameters.storyshots.disable in the default export of this file.`,
        );
      }

      stories.forEach(({ name, story }) => {
        // Instead of not running the test, you can create logic to skip it, flagging it accordingly in the test results.
        const testFn = story.parameters.storyshots?.skip ? test.skip : test;

        testFn(name, async () => {
          await story.run();
          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.
          await new Promise((resolve) => setTimeout(resolve, 1));

          expect(document.body.firstChild).toMatchSnapshot();
        });
      });
    });
  });
});
```

----------------------------------------

TITLE: Configuring Storybook Meta for Angular Button Component
DESCRIPTION: This code configures the Storybook metadata for an Angular Button component. It imports the Button component and defines the meta object, specifying the component and customizing the background options to include 'dark' and 'gray'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  parameters: {
    backgrounds: {
      options: {
        // 👇 Override the default `dark` option
        dark: { name: 'Dark', value: '#000' },
        // 👇 Add a new option
        gray: { name: 'Gray', value: '#CCC' },
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Using CSS Modules in Next.js with Storybook
DESCRIPTION: This example demonstrates how to import and use CSS Modules within a Next.js component for styling. The styles are imported from a CSS module and applied to a button element. This approach is compatible with Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_14

LANGUAGE: jsx
CODE:
```
import styles from './Button.module.css';

export function Button() {
  return (
    <button type="button" className={styles.error}>
      Destroy
    </button>
  );
}
```

----------------------------------------

TITLE: Initializing Button Storybook Story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It defines metadata for the component and exports primary and secondary stories with different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });

  const primaryArgs = {
    primary: true,
    label: 'Button',
  }
</script>

<Story name="Primary" args={primaryArgs} />

<Story name="Secondary" args={{...primaryArgs, primary: false}} />
```

----------------------------------------

TITLE: Configuring Button Story with CSF
DESCRIPTION: This code configures a Storybook story for a Button component using the Component Story Format (CSF). It imports the Button component and defines metadata, including the component itself and its associated argument types. It specifically focuses on the 'label' argument, allowing control over the button's text within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#_snippet_2

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  argTypes: {
    // 👇 All Button stories expect a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
};
```

----------------------------------------

TITLE: Creating a Toggleable Addon Panel in Storybook with React
DESCRIPTION: This code creates a custom addon panel component that can be toggled on and off using Storybook's globals state. It uses the useGlobals hook to access and update the global state, and renders a button that toggles the panel's visibility based on a specific global parameter.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-useglobal.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import React from 'react';

import { AddonPanel, Button } from 'storybook/internal/components';

import { useGlobals } from 'storybook/manager-api';

export const Panel = () => {
  const [globals, updateGlobals] = useGlobals();

  const isActive = globals['my-param-key'] || false; // 👈 Sets visibility based on the global value.

  return (
    <AddonPanel key="custom-panel" active={isActive}>
      <Button onClick={() => updateGlobals({ ['my-param-key']: !isActive })}>
        {isActive ? 'Hide the addon panel' : 'Show the panel'}
      </Button>
    </AddonPanel>
  );
};
```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet shows how to configure Storybook using JavaScript. It exports a default configuration object that specifies the framework, story file patterns, and static directories. The framework should be replaced with the specific framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-static-dirs.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  staticDirs: ['../public', '../static'],
};
```

----------------------------------------

TITLE: Defining Array Exclude Controls - TypeScript
DESCRIPTION: This TypeScript snippet defines a story named 'ArrayExclude' that configures the Storybook controls to exclude the 'foo' and 'bar' properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_13

LANGUAGE: ts
CODE:
```
export const ArrayExclude: Story = {
  parameters: {
    controls: { exclude: ['foo', 'bar'] },
  },
};
```

----------------------------------------

TITLE: Configuring Custom Vite Config Path in Storybook
DESCRIPTION: JavaScript configuration for specifying a custom path to the Vite config file in Storybook's main configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-vite/README.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// .storybook/main.mjs

const config = {
  framework: {
    name: '@storybook/react-vite', // Your framework name here.
    options: {
      builder: {
        viteConfigPath: '.storybook/customViteConfig.js',
      },
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Web Components Storybook Story (TS)
DESCRIPTION: This code configures a Storybook story for a web component button using TypeScript. It imports the necessary modules from '@storybook/web-components-vite' and defines a Meta object to configure the component, enabling auto-generated documentation using the 'autodocs' tag. It also defines a story that is excluded from the documentation using the '!autodocs' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Button',
  component: 'demo-button',
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
};
export default meta;

type Story = StoryObj;

export const UndocumentedStory: Story = {
  // 👇 Removes this story from auto-generated documentation
  tags: ['!autodocs'],
};
```

----------------------------------------

TITLE: Documenting List Components with Subcomponents in Storybook
DESCRIPTION: Example showing how to document List and ListItem components together using the subcomponents property. This allows documenting parent-child component relationships while maintaining component prop documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/stories-for-multiple-components.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
<CodeSnippets path="list-story-with-subcomponents.md" />
```

----------------------------------------

TITLE: Configuring Button Story in Svelte (TypeScript)
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using TypeScript. It imports the Button component and defines its metadata, including argument types for background color and default arguments to set the primary property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_8

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  //👇 Creates specific argTypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    //👇 Now all Button stories will be primary.
    primary: true,
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Story (TS)
DESCRIPTION: This code configures a Storybook story for a Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines a Meta object to configure the component, enabling auto-generated documentation using the 'autodocs' tag. It also defines a story that is excluded from the documentation using the '!autodocs' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
} satisfies Meta<typeof Button>;
export default meta;

type Story = StoryObj<typeof meta>;

export const UndocumentedStory: Story = {
  // 👇 Removes this story from auto-generated documentation
  tags: ['!autodocs'],
};
```

----------------------------------------

TITLE: Compose Play Functions in Stories
DESCRIPTION: This snippet shows how to compose `play` functions in Storybook stories to verify a specific component workflow. It combines multiple stories to recreate the entire component workflow, reducing boilerplate code and enabling the spotting of potential issues.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/play-function.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from '@storybook/testing-library';
import { expect } from '@storybook/jest';

export const FirstStep = () => /* component implementation for the first step */;
export const SecondStep = () => /* component implementation for the second step */;

FirstStep.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  await userEvent.click(canvas.getByRole('button', { name: 'Next' }));
};

SecondStep.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  await expect(canvas.getByText('Step 2')).toBeInTheDocument();
};
```

----------------------------------------

TITLE: Mocking Error GraphQL Query with MSW in Storybook
DESCRIPTION: This code snippet demonstrates how to mock an error response for a GraphQL query in Storybook using MSW. It defines a handler for the 'AllInfoQuery' query that returns an error response with a message 'Access denied'. The handler is configured within the 'msw' parameter of the Story and includes a delay of 800ms to simulate a network latency.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_13

LANGUAGE: typescript
CODE:
```
export const MockedError: Story = {
  parameters: {
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', async () => {
          await delay(800);
          return HttpResponse.json({
            errors: [
              {
                message: 'Access denied',
              },
            ],
          });
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Configuring Arg Display Value in Storybook Docs (JavaScript)
DESCRIPTION: This code snippet shows how to manually configure the displayed value of an arg in Storybook's Docs using the `table.defaultValue` setting. This allows you to customize how the default value is presented in the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#_snippet_13

LANGUAGE: JavaScript
CODE:
```
export default {
  component: MyComponent,
  argTypes: {
    //👇 Defining the arg's display value in docs.
    text: {
      table: { defaultValue: { summary: 'SomeType<T>' } },
    },
  },
};
```

----------------------------------------

TITLE: Displaying Webpack Configuration
DESCRIPTION: Displays the final webpack configurations for debugging purposes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_17

LANGUAGE: Shell
CODE:
```
storybook dev --debug-webpack
```

----------------------------------------

TITLE: CSF 3 Default Render Function Usage
DESCRIPTION: Illustrates the simplified CSF 3 syntax using default render functions for common component rendering patterns.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
export const Primary = {};
```

----------------------------------------

TITLE: Creating Storybook Story with User Event Simulation (JS)
DESCRIPTION: This JavaScript code creates a Storybook story for a component and simulates a user click on a button within the component's canvas using `userEvent` and `within`. It imports the necessary modules and defines the component to be tested.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#_snippet_3

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleWithRole = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button', { name: / button label/i }));
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for Angular Component (TS)
DESCRIPTION: Defines a Storybook story for an Angular component, including metadata and a story with a Figma design parameter. It imports the necessary modules from '@storybook/angular' and the component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

// More on default export: https://storybook.js.org/docs/writing-stories/#default-export
const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const Example: Story = {
  parameters: {
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/Sample-File',
    },
  },
};
```

----------------------------------------

TITLE: Rendering Button in Spanish (Vue)
DESCRIPTION: This test renders the Primary story of the Button component in Spanish using Storybook's composeStory function for Vue. It overrides the global locale setting to 'es' and then executes the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-override-globals.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import { test } from '@jest/globals';
import { render } from '@testing-library/vue';
import { composeStory } from '@storybook/vue3-vite';

import meta, { Primary as PrimaryStory } from './Button.stories';

test('renders in Spanish', async () => {
  const Primary = composeStory(PrimaryStory, meta, { globals: { locale: 'es' } });

  await Primary.run();
});
```

----------------------------------------

TITLE: Creating Styled Component with Theme Access
DESCRIPTION: Defines a styled component using template literals to access theme properties. The component sets a background color from theme props and a fixed width. Uses the styled-components library with React.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-styled-variables-template-literals.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const Component = styled.div`
  background: `${props => props.theme.background.app}`
  width: 0;
`;
```

----------------------------------------

TITLE: Upgrading Storybook to Latest Version
DESCRIPTION: This command upgrades Storybook to the latest version. It's essential for projects using older Storybook versions to leverage new features and improvements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
npx storybook upgrade
```

----------------------------------------

TITLE: Loading stories with a loader function
DESCRIPTION: This code snippet demonstrates how to use a loader function to configure Storybook to load stories, filtering out those without a default export. This is useful when mixing storiesOf with CSF/MDX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const loadFn = () => {
  const req = require.context('../src', true, /\.stories\.js$/);
  return req
    .keys()
    .map((fname) => req(fname))
    .filter((exp) => !!exp.default);
};

configure(loadFn, module);
```

----------------------------------------

TITLE: Storybook Doctor with Config Directory
DESCRIPTION: Runs the health check, specifying a custom configuration directory for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_103

LANGUAGE: shell
CODE:
```
storybook doctor --config-dir .storybook
```

----------------------------------------

TITLE: Defining the Tool component for the addon
DESCRIPTION: This code defines the `Tool` component, which is the entry point for the addon. It uses the `useGlobals` hook to manage the addon's state, the `useStorybookApi` hook to register a keyboard shortcut, and the `IconButton` component to render a button in the toolbar. The component handles the logic to enable and disable the addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
export const Tool = memo(function MyAddonSelector() {
  const [globals, updateGlobals] = useGlobals();
  const api = useStorybookApi();

  const isActive = [true, 'true'].includes(globals[PARAM_KEY]);

  const toggleMyTool = useCallback(() => {
    updateGlobals({
      [PARAM_KEY]: !isActive,
    });
  }, [isActive]);

  useEffect(() => {
    api.setAddonShortcut(ADDON_ID, {
      label: 'Toggle Addon [8]',
      defaultShortcut: ['8'],
      actionName: 'myaddon',
      showInMenu: false,
      action: toggleMyTool,
    });
  }, [toggleMyTool, api]);

  return (
    <IconButton key={TOOL_ID} active={isActive} title="Enable my addon" onClick={toggleMyTool}>
      <LightningIcon />
    </IconButton>
  );
});
```

----------------------------------------

TITLE: Configuring Storybook Meta for Component (TS)
DESCRIPTION: This code configures the Storybook metadata for a generic component using TypeScript. It imports the component and defines the meta object with component details and argTypes, specifically hiding the 'foo' property from the UI. It uses satisfies Meta to provide type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { YourComponent } from './YourComponent';

const meta = {
  component: YourComponent,
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      control: false,
    },
  },
} satisfies Meta<typeof YourComponent>;

export default meta;
```

----------------------------------------

TITLE: Install axe-playwright for test runner
DESCRIPTION: This command installs `axe-playwright` as a dev dependency.  `axe-playwright` is used to integrate accessibility testing into the Storybook test runner.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_12

LANGUAGE: bash
CODE:
```
yarn add -D axe-playwright
```

----------------------------------------

TITLE: Defining Markdown Frontmatter for Storybook Documentation
DESCRIPTION: This code snippet defines the frontmatter for a Markdown document in Storybook's documentation. It sets the title, sidebar order, and sidebar title for the 'Frameworks' page.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/index.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: Frameworks
sidebar:
  order: 3
  title: Frameworks
---
```

----------------------------------------

TITLE: Running in CI Mode
DESCRIPTION: Runs Storybook in CI mode, skipping interactive prompts and preventing the browser from opening automatically.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_13

LANGUAGE: Shell
CODE:
```
storybook dev --ci
```

----------------------------------------

TITLE: Story Configuration with Play Function (TS)
DESCRIPTION: Configures a Storybook story for a web component using TypeScript, including a play function that interacts with the component using 'userEvent' and 'within'. It waits for a button to be rendered before interacting with it.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-query-findby.md#_snippet_9

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { userEvent, within } from 'storybook/test';

const meta: Meta = {
  component: 'demo-my-component',
};

export default meta;
type Story = StoryObj;

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const AsyncExample: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // Other steps

    // Waits for the component to be rendered before querying the element
    await canvas.findByRole('button', { name: / button label/i });
  },
};
```

----------------------------------------

TITLE: Highlighting elements in React (TypeScript) Storybook
DESCRIPTION: This story uses a decorator to emit a HIGHLIGHT event to the Storybook channel, configuring selectors for highlighting elements (h2, a, .storybook-button) and adding custom menu items with titles, descriptions, and click events. It depends on @storybook/react-vite, storybook/preview-api, and storybook/highlight.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-menu.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const StyledHighlight: Story = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        menu: [
          {
            id: 'button-name',
            title: 'Login',
            description: 'Navigate to the login page',
            clickEvent: 'my-menu-click-event',
          },
          {
            id: 'h2-home',
            title: 'Acme',
            description: 'Navigate to the home page',
          },
        ],
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Initializing List Story with React
DESCRIPTION: This code defines a Storybook story for a React List component. It imports the List and ListItem components, as well as a specific story from ListItem. It defines a template for rendering the list with items and creates stories for empty and single-item lists.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_1

LANGUAGE: js
CODE:
```
import { List } from './List';
import { ListItem } from './ListItem';

//👇 Imports a specific story from ListItem stories
import { Unchecked } from './ListItem.stories';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
};

//👇 The ListTemplate construct will be spread to the existing stories.
const ListTemplate = {
  render: ({ items, ...args }) => {
    return (
      <List>
        {items.map((item) => (
          <ListItem {...item} />
        ))}
      </List>
    );
  },
};

export const Empty = {
  ...ListTemplate,
  args: {
    items: [],
  },
};

export const OneItem = {
  ...ListTemplate,
  args: {
    items: [
      {
        ...Unchecked.args,
      },
    ],
  },
};

```

----------------------------------------

TITLE: Configuring Svelte Story with CSF for Example Component
DESCRIPTION: This snippet configures a Storybook story for the Example component using Svelte and the Component Story Format (CSF). It imports the necessary modules from '@storybook/addon-svelte-csf' and defines the component and its argument types, specifically describing the 'value' property of a slider.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      value: {
        description: 'The value of the slider',
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Handling Ugly Comments in Storybook Source Loader
DESCRIPTION: This example configures the source-loader to remove specific 'ugly' comments from the source code. It uses regular expressions to match and exclude undesired comments (e.g., eslint directives). Requires '@storybook/source-loader' and applies to files with '.stories.jsx?' extensions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/source-loader/README.md#2025-04-22_snippet_2

LANGUAGE: JavaScript
CODE:
```
module.exports = function ({ config }) {
  config.module.rules.push({
    test: /\.stories\.jsx?$/,\n    use: [\n      {\n        loader: require.resolve('@storybook/source-loader'),\n        options: {\n          uglyCommentsRegex: [/^eslint-.*/, /^global.*/],\n        },\n      },\n    ],\n    enforce: 'pre',\n  });\n  return config;\n};
```

----------------------------------------

TITLE: Configuring Vitest for Vue Storybook Testing
DESCRIPTION: This snippet configures Vitest to test Vue Storybook stories. It merges the base Vite configuration with Vitest-specific settings, including the storybookTest plugin for Storybook integration, storybookVuePlugin for Vue 3 support, and browser testing setup with Playwright.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-config.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { defineConfig, mergeConfig } from 'vitest/config';
import { storybookTest } from '@storybook/addon-vitest/vitest-plugin';
import { storybookVuePlugin } from '@storybook/vue3-vite/vite-plugin';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

import viteConfig from './vite.config';

const dirname =
  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));

export default mergeConfig(
  viteConfig,
  defineConfig({
    plugins: [
      storybookTest({
        // The location of your Storybook config, main.js|ts
        configDir: path.join(dirname, '.storybook'),
        // This should match your package.json script to run Storybook
        // The --ci flag will skip prompts and not open a browser
        storybookScript: 'yarn storybook --ci',
      }),
      storybookVuePlugin(),
    ],
    test: {
      // Enable browser mode
      browser: {
        enabled: true,
        // Make sure to install Playwright
        provider: 'playwright',
        headless: true,
        instances: [{ browser: 'chromium' }],
      },
      setupFiles: ['./.storybook/vitest.setup.ts'],
    },
  }),
);
```

----------------------------------------

TITLE: Initializing Storybook preview config with definePreview - Typescript
DESCRIPTION: The `definePreview` function is used to specify the project's story configuration in a type-safe manner. It infers types throughout the project and enables autocompletion and type checking for addons. This example shows how to add addons and configure parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, nextjs, nextjs-vite)
import { definePreview } from '@storybook/your-framework';
import addonA11y from '@storybook/addon-a11y';

export default definePreview({
  // 👇 Add your addons here
  addons: [addonA11y()],
  parameters: {
    // type-safe!
    a11y: {
      options: { xpath: true },
    },
  },
});
```

----------------------------------------

TITLE: Running Storybook with Telemetry Disabled
DESCRIPTION: Demonstrates how to disable Storybook's telemetry collection by setting the STORYBOOK_DISABLE_TELEMETRY environment variable to 1 before launching Storybook with yarn. This environment variable prevents Storybook from collecting usage data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-disable-telemetry-env.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
STORYBOOK_DISABLE_TELEMETRY=1 yarn storybook
```

----------------------------------------

TITLE: Testing CSF Export Name Formatting in JavaScript
DESCRIPTION: Test suite validating the storyNameFromExport function's ability to convert various export name formats into human-readable story titles. Tests include cases for simple names, camelCase, snake_case, and mixed formats with numbers.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-with-storyname.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
it('should format CSF exports with sensible defaults', () => {
  const testCases = {
    name: 'Name',
    someName: 'Some Name',
    someNAME: 'Some NAME',
    some_custom_NAME: 'Some Custom NAME',
    someName1234: 'Some Name 1234',
    someName1_2_3_4: 'Some Name 1 2 3 4',
  };
  Object.entries(testCases).forEach(([key, val]) => {
    expect(storyNameFromExport(key)).toBe(val);
  });
});
```

----------------------------------------

TITLE: Creating Web Component with LitElement in JavaScript
DESCRIPTION: Implements a LitElement-based web component to render a document screen. It uses reactive properties for managing data and rendering HTML templates. Prerequisites include LitElement and web component support in browsers.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_8

LANGUAGE: js
CODE:
```
import { LitElement, html } from 'lit-element';

class DocumentScreen extends LitElement {
  static get properties() {
    return {
      data: { type: Object },
    };
  }

  constructor() {
    super();
    this.data = {};
  }

  render() {
    const { user, document, subdocuments } = this.data;
    return html`
      <demo-page-layout .user=${user}>
        <demo-document-header .document=${document}></demo-document-header>
        <demo-document-list .documents=${subdocuments}></demo-document-list>
      </demo-page-layout>
    `;
  }
}

customElements.define('demo-document-screen', DocumentScreen);
```

----------------------------------------

TITLE: Configuring Storybook Component Meta (TypeScript)
DESCRIPTION: This code configures the Storybook component metadata for MyComponent using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines the component's metadata, including the component itself. It also defines a story to render a color palette.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-canvas-doc-block-story.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Meta } from '@storybook/your-framework';

import { ColorItem, ColorPalette } from '@storybook/addon-docs/blocks';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

const theme = {
  colors: {
    primaryDark: {
      value: '#1C1C1C',
    },
    primaryRegular: {
      value: '#363636',
    },
    primaryLight1: {
      value: '#4D4D4D',
    },
    primaryLight2: {
      value: '#878787',
    },
    primaryLight3: {
      value: '#D1D1D1',
    },
    primaryLight4: {
      value: '#EDEDED',
    },
  },
};

// ❌ Don't use the Doc Blocks inside your stories. It will break Storybook with a cryptic error.
export const Colors: Story = {
  render: () => (
    <ColorPalette>
      {Object.entries(theme.colors).map(([key, { value }]) => (
        <ColorItem
          colors={{
            [key]: value,
          }}
          key={key}
          subtitle={`theme.colors.${key}`}
          title={key}
        />
      ))}
    </ColorPalette>
  ),
};
```

----------------------------------------

TITLE: Configuring Storybook Story with TypeScript 4.9+
DESCRIPTION: TypeScript 4.9+ implementation using the satisfies operator for type checking, importing both Meta and StoryObj types for the DataTable component configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-todo-in-meta.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-renderer with the renderer you are using (e.g., react, vue3)
import { Meta, StoryObj } from '@storybook/your-renderer';

import { DataTable } from './DataTable';

const meta = {
  component: DataTable,
  parameters: {
    // 👇 This component's accessibility tests will not fail
    //    Instead, they display warnings in the Storybook UI
    a11y: { test: 'todo' },
  },
} satisfies Meta<typeof DataTable>;
export default meta;
```

----------------------------------------

TITLE: Configuring Default Babel Transform for React JSX
DESCRIPTION: Creates a default Babel configuration object that includes the React JSX transform plugin. The function accepts a TransformOptions parameter from @babel/core and returns a configuration object with the necessary plugin setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-babel-configuration-example.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { TransformOptions } from '@babel/core';

export function babelDefault(config: TransformOptions) {
  return {
    plugins: [[require.resolve('@babel/plugin-transform-react-jsx'), {}, 'preset']],
  };
}
```

----------------------------------------

TITLE: Svelte Button Story Implementation (TypeScript)
DESCRIPTION: Default story implementation for a Button component in Svelte using CSF 3 format with TypeScript. Includes Story type definition and Svelte-specific component structure.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
export const Default: Story = {
  render: (args) => ({
    Component: Button,
    props: args,
  }),
};
```

----------------------------------------

TITLE: Button Component Story Setup (JavaScript)
DESCRIPTION: This JavaScript code defines a story for the Button component. It imports the Button component and exports a default object with the component property set to Button. It also defines a Sample story that renders the button with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hypothetical-example.md#_snippet_0

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Sample = {
  render: () => ({
    template: '<button :label=label />',
    data: {
      label: 'hello button',
    },
  }),
};
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript in main.ts
DESCRIPTION: Example of a typical Storybook main.ts configuration file written in TypeScript as an ESM module. This provides the baseline configuration for Storybook with TypeScript support.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/typescript.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
<CodeSnippets path="main-config-typical.md" />
```

----------------------------------------

TITLE: Initializing Storybook Story with Play Function in Svelte (TS)
DESCRIPTION: This code defines a Storybook story for a Svelte component using TypeScript and Component Story Format (CSF). It imports necessary modules, defines the meta information for the component, and uses the play function to simulate user interactions. The play function retrieves the component's root element using canvasElement and simulates typing into an element and clicking a button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, within } from 'storybook/test';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="ExampleStory"
  play={async ({ canvasElement }) => {
    // Assigns canvas to the component root element
    const canvas = within(canvasElement);

    // Starts querying from the component's root element
    await userEvent.type(canvas.getByTestId('example-element'), 'something');
    await userEvent.click(canvas.getByRole('button'));
  }} />
```

----------------------------------------

TITLE: Defining Storybook Meta for Svelte Component (CSF)
DESCRIPTION: This code defines the metadata for a Storybook story using Svelte and the Component Story Format (CSF). It imports 'defineMeta' from '@storybook/addon-svelte-csf' and the Svelte component. It configures the component and uses 'args' to set the default value for the 'value' property, instead of the deprecated 'defaultValue'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      value: {
        // ⛔️ Deprecated, do not use
        defaultValue: 0,
      },
    },
    // ✅ Do this instead
    args: {
      value: 0,
    },
  });
</script>
```

----------------------------------------

TITLE: Configure Storybook to Use Webpack 5
DESCRIPTION: This code snippet shows how to configure Storybook to use Webpack 5 by setting the `builder` property in the `core` object of your `.storybook/main.js` file to `webpack5`. This ensures that Storybook uses Webpack 5 for building your project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_157

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  core: {
    builder: "webpack5",
  },
};
```

----------------------------------------

TITLE: Initializing LoginForm Story with Vue
DESCRIPTION: This code defines a Storybook story for the LoginForm component using Vue. It imports necessary modules, defines the component, and creates stories for both empty and filled form scenarios, including simulating user input and asserting the expected DOM structure after form submission.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_15

LANGUAGE: js
CODE:
```
import { userEvent, within, expect } from 'storybook/test';

import LoginForm from './LoginForm.vue';

export default {
  component: LoginForm,
};

export const EmptyForm = {
  render: () => ({
    components: { LoginForm },
    template: `<LoginForm />`,
  }),
};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm = {
  render: () => ({
    components: { LoginForm },
    template: `<LoginForm />`,
  }),
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));

    // 👇 Assert DOM structure
    await expect(
      canvas.getByText(
        'Everything is perfect. Your account is ready and we should probably get you started!'
      )
    ).toBeInTheDocument();
  },
};
```

----------------------------------------

TITLE: Defining Svelte Button Stories with CSF
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using the Component Story Format (CSF). It imports necessary modules from '@storybook/addon-svelte-csf' and the Button component, configuring the component's properties and their controls. It defines two stories: Accessible and Inaccessible.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_6

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    argTypes: {
      backgroundColor: { control: 'color' },
    },
  });
</script>

<!-- This is an accessible story -->
<Story name="Accessible" args={{ primary: false, label: 'Button' }} />

<!-- This is not -->
<Story name="Inaccessible" args={{ primary: false, label: 'Button', backgroundColor: 'red' }} />

```

----------------------------------------

TITLE: Defining Storybook Meta and Stories with Include/Exclude - Angular
DESCRIPTION: This code defines Storybook stories for an Angular component, demonstrating how to include and exclude controls using array and regular expression patterns. It imports the necessary modules from '@storybook/angular' and defines the component's metadata and stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { YourComponent } from './YourComponent.component';

const meta: Meta<YourComponent> = {
  component: YourComponent,
};

export default meta;
type Story = StoryObj<YourComponent>;

export const ArrayInclude: Story = {
  parameters: {
    controls: { include: ['foo', 'bar'] },
  },
};

export const RegexInclude: Story = {
  parameters: {
    controls: { include: /^hello*/ },
  },
};

export const ArrayExclude: Story = {
  parameters: {
    controls: { exclude: ['foo', 'bar'] },
  },
};

export const RegexExclude: Story = {
  parameters: {
    controls: { exclude: /^hello*/ },
  },
};
```

----------------------------------------

TITLE: Combining Interactions in a Web Component Story
DESCRIPTION: This story combines multiple user interactions by calling the `play` functions of `FirstStory` and `SecondStory` before performing an additional typing action. It demonstrates how to sequence interactions and reuse existing story logic. The `context` object is passed to the other story's play functions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_14

LANGUAGE: typescript
CODE:
```
export const CombinedStories: Story = {
  play: async ({ context, canvasElement }) => {
    const canvas = within(canvasElement);

    // Runs the FirstStory and Second story play function before running this story's play function
    await FirstStory.play(context);
    await SecondStory.play(context);
    await userEvent.type(canvas.getByTestId('another-element'), 'random value');
  },
};
```

----------------------------------------

TITLE: Overriding Default Storybook Preview URL
DESCRIPTION: This command overrides the default Storybook preview with a custom built preview URL. It's useful for integrating Storybook with external iframes or custom preview environments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_22

LANGUAGE: CLI
CODE:
```
storybook dev --preview-url=http://localhost:1337/external-iframe.html
```

----------------------------------------

TITLE: Filling Registration Form Story - Svelte CSF
DESCRIPTION: This story simulates filling out the registration form with an email and password, then submitting the form. It uses Storybook's `userEvent` to type into the input fields and click the submit button. The `within` function is used to query elements within the canvas.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, within } from 'storybook/test';

  import RegistrationForm from './RegistrationForm.svelte';

  const { Story } = defineMeta({
    component: RegistrationForm,
  });
</script>

<!--
  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
  to learn more about using the canvasElement to query the DOM
-->
<Story
  name="FilledForm"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const emailInput = canvas.getByLabelText('email', {
      selector: 'input',
    });

    await userEvent.type(emailInput, 'example-email@email.com', {
      delay: 100,
    });

    const passwordInput = canvas.getByLabelText('password', {
      selector: 'input',
    });

    await userEvent.type(passwordInput, 'ExamplePassword', {
      delay: 100,
    });

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const submitButton = canvas.getByRole('button');

    await userEvent.click(submitButton);
  }}
/>
```

----------------------------------------

TITLE: Emit SCROLL_INTO_VIEW Event with Selector and Options
DESCRIPTION: Emits the SCROLL_INTO_VIEW event to scroll a DOM element into view and briefly highlight it. The event requires a selector for the element and accepts an optional options object to customize the scroll behavior.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#_snippet_11

LANGUAGE: ts
CODE:
```
import { SCROLL_INTO_VIEW } from 'storybook/highlight';

channel.emit(
  SCROLL_INTO_VIEW,
  selector // Element selector to scroll into view
  options // An object inheriting from ScrollIntoViewOptions API to customize the scroll behavior
);
```

----------------------------------------

TITLE: Defining Vue Button Stories with Render Function
DESCRIPTION: This code defines Storybook stories for a Vue Button component using TypeScript and render functions. It imports the Button component and defines metadata including argTypes for controlling the background color. It exports two stories: Accessible and Inaccessible, demonstrating different argument configurations using render functions to define the component's template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_13

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3';

import Button from './Button.vue';

const meta: Meta<typeof Button> = {
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
  },
};

export default meta;
type Story = StoryObj<typeof Button>;

// This is an accessible story
export const Accessible: Story = {
  render: (args) => ({
    components: { Button },
    setup() {
      return { args };
    },
    template: '<Button v-bind="args" />',
  }),
  args: {
    primary: false,
    label: 'Button',
  },
};
// This is not
export const Inaccessible: Story = {
  render: (args) => ({
    components: { Button },
    setup() {
      return { args };
    },
    template: '<Button v-bind="args" />',
  }),
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};
```

----------------------------------------

TITLE: Defining Button Stories for HTML
DESCRIPTION: This code defines Storybook stories for an HTML Button component. It imports the createButton function and defines stories for Primary, Secondary, and Tertiary variants, each with a different label and background color.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_1

LANGUAGE: js
CODE:
```
import { createButton } from './Button';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: (args) => createButton({ backgroundColor: '#ff0', label: 'Button' }),
};

export const Secondary = {
  render: (args) => createButton({ backgroundColor: '#ff0', label: '😄👍😍💯' }),
};

export const Tertiary = {
  render: (args) => createButton({ backgroundColor: '#ff0', label: '📚📕📈🤓' }),
};
```

----------------------------------------

TITLE: Configuring Custom Fonts in Storybook Preview
DESCRIPTION: Example of adding custom font references to Storybook's preview-head.html file for applying custom typography to stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/images-and-assets.mdx#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet" />
```

----------------------------------------

TITLE: Add webpack 5 resolution to package.json
DESCRIPTION: Adds a resolution to your package.json to ensure that a consistent webpack version is provided across all of storybook packages.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_190

LANGUAGE: JavaScript
CODE:
```
// package.json
...
resolutions: {
  "@storybook/{app}/webpack": "^5"
}
...
```

----------------------------------------

TITLE: Defining Button Stories with Render Functions in Vue (JS)
DESCRIPTION: This code defines Storybook stories for a Vue Button component using render functions. It imports the Button component and defines primary, secondary, and tertiary stories with different labels and background colors. Each story includes a render function that configures the component and its template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_11

LANGUAGE: js
CODE:
```
import Button from './Button.vue';

export default {
  component: Button,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: (args) => ({
    components: { Button },
    setup() {
      return { args };
    },
    template: '<Button v-bind="args" />',
  }),
  args: {
    backgroundColor: '#ff0',
    label: 'Button',
  },
};

export const Secondary = {
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
  render: (args) => ({
    components: { Button },
    setup() {
      return { args };
    },
    template: '<Button v-bind="args" />',
  }),
};

export const Tertiary = {
  args: {
    ...Primary.args,
    label: '📚📕📈🤓',
  },
  render: (args) => ({
    components: { Button },
    setup() {
      return { args };
    },
    template: '<Button v-bind="args" />',
  }),
};

```

----------------------------------------

TITLE: Initializing Button Story - Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports the Meta type from Storybook and the Button component, then defines the component in the meta object for Storybook to use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
```

----------------------------------------

TITLE: Testing Vue Button Story
DESCRIPTION: This test suite verifies the rendering of the primary button story with default arguments and overridden props using Vue Testing Library and Vitest. It uses composeStory to integrate the story with testing utilities.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-compose-story.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { vi, test, expect } from 'vitest';
import { render, screen } from '@testing-library/vue';
import { composeStory } from '@storybook/vue3-vite';

import meta, { Primary as PrimaryStory } from './Button.stories';

// Returns a story which already contains all annotations from story, meta and global levels
const Primary = composeStory(PrimaryStory, meta);

test('renders primary button with default args', async () => {
  await Primary.run();

  const buttonElement = screen.getByText('Text coming from args in stories file!');
  expect(buttonElement).not.toBeNull();
});

test('renders primary button with overridden props', async () => {
  await Primary.run({ args: { ...Primary.args, label: 'Hello world' } });

  const buttonElement = screen.getByText(/Hello world/i);
  expect(buttonElement).not.toBeNull();
});
```

----------------------------------------

TITLE: Getting the communication channel with addons.getChannel()
DESCRIPTION: Retrieves the communication channel instance for interaction between the manager and preview. This channel, based on NodeJS EventEmitter, enables event emission and listening for inter-component communication.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
const channel = addons.getChannel();

channel.emit('my/event', { some: 'data' });
channel.on('my/event', data => console.log(data));
```

----------------------------------------

TITLE: Initializing Button Story - Svelte CSF
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and defines its metadata, including the 'variant' argType with options for 'primary' and 'secondary'. It uses defineMeta from '@storybook/addon-svelte-csf'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    argTypes: {
      variant: {
        options: ['primary', 'secondary'],
        control: { type: 'radio' },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Storybook Init with Version
DESCRIPTION: This example shows how to install a specific version of Storybook (8.4) into your project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_43

LANGUAGE: shell
CODE:
```
storybook@8.4 init
```

----------------------------------------

TITLE: Customizing automatic docs page template with Doc Blocks
DESCRIPTION: This JSX code snippet shows how to define a custom page template for automatic docs in Storybook using Doc Blocks like Title, Subtitle, Description, Primary, Controls, and Stories. It imports the necessary components from @storybook/addon-docs/blocks and uses them to structure the documentation page.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/doc-blocks.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
import { Title, Subtitle, Description, Primary, Controls, Stories } from '@storybook/addon-docs/blocks';

export const autoDocsTemplate = () => (
  <>
    <Title />
    <Subtitle />
    <Description />
    <Primary />
    <Controls />
    <Stories />
  </>
);

```

----------------------------------------

TITLE: Configuring Svelte Stories with Props (TypeScript)
DESCRIPTION: This code configures Storybook stories for a Svelte component using TypeScript, defining the component and a story with a prop. It imports the component and exports a default object with the component and a story that renders the component with a specific prop value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_8

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const WithProp: Story = {
  render: () => ({
    Component: MyComponent,
    props: {
      prop: 'value',
    },
  }),
};

```

----------------------------------------

TITLE: Configuring Storybook Core Builder with Webpack5
DESCRIPTION: This code snippet demonstrates how to configure Storybook to use the Webpack5 builder. It exports a default configuration object that specifies the builder to be used by Storybook's core.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-webpack5/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  core: {
    builder: '@storybook/builder-webpack5',
  },
};
```

----------------------------------------

TITLE: Overriding MDX Preview Block Component
DESCRIPTION: Advanced example demonstrating how to replace Storybook's Preview block with a custom component in the docs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/theming.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { MyPreview } from './MyPreview';

addParameters({
  docs: {
    components: {
      Preview: MyPreview,
    },
  },
});
```

----------------------------------------

TITLE: Defining Button Stories for Angular
DESCRIPTION: This code defines Storybook stories for an Angular Button component. It imports the Button component and defines stories for Primary, Secondary, and Tertiary variants, each with a different label and background color.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: () => ({
    props: {
      label: 'Button',
      backgroundColor: '#ff0',
    },
  }),
};

export const Secondary: Story = {
  render: () => ({
    props: {
      label: '😄👍😍💯',
      backgroundColor: '#ff0',
    },
  }),
};

export const Tertiary: Story = {
  render: () => ({
    props: {
      label: '📚📕📈🤓',
      backgroundColor: '#ff0',
    },
  }),
};
```

----------------------------------------

TITLE: Simulating Button Click with Play Function in Storybook
DESCRIPTION: This code snippet demonstrates how to use the `play` function in a Storybook story to simulate a button click. It uses `within` to query the DOM within the canvas element and `userEvent` to trigger a click event on a button with a specific role and name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleWithRole: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button', { name: / button label/i }));
  },
};
```

----------------------------------------

TITLE: Setting query parameters with api.setQueryParams()
DESCRIPTION: Sets query string parameters for temporary storage within addons.  This method allows you to set query string parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
api.setQueryParams({ key: 'value' });
```

----------------------------------------

TITLE: Configuring Storybook ArgTypes Object
DESCRIPTION: Defines a label argument type configuration object for Storybook components. Includes type definition, default value, description, table documentation, and control settings for the Storybook UI controls panel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-generated-argtypes.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const argTypes = {
  label: {
    name: 'label',
    type: { name: 'string', required: false },
    defaultValue: 'Hello',
    description: 'demo description',
    table: {
      type: { summary: 'string' },
      defaultValue: { summary: 'Hello' },
    },
    control: {
      type: 'text',
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Storybook (TS)
DESCRIPTION: This code initializes a Storybook story for a Button component using TypeScript. It imports the Meta type from '@storybook/your-framework' and the Button component, then defines a Meta object to configure the story's title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Design System/Atoms/Button',
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Defining Storybook Meta and Mocked Success Story (Angular)
DESCRIPTION: This code defines the Storybook meta configuration for the DocumentScreen component in Angular, including module metadata for necessary dependencies like CommonModule, HttpClientModule, and MockGraphQLModule. It also defines a MockedSuccess story that uses MSW to mock a successful GraphQL query, returning predefined test data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';
import { moduleMetadata } from '@storybook/angular';

import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { graphql, HttpResponse, delay } from 'msw';

import { DocumentHeader } from './DocumentHeader.component';
import { DocumentList } from './DocumentList.component';
import { PageLayout } from './PageLayout.component';
import { DocumentScreen } from './YourPage.component';
import { MockGraphQLModule } from './mock-graphql.module';

const meta: Meta<DocumentScreen> = {
  component: DocumentScreen,
  decorators: [
    moduleMetadata({
      declarations: [DocumentList, DocumentHeader, PageLayout],
      imports: [CommonModule, HttpClientModule, MockGraphQLModule],
    }),
  ],
};

export default meta;

//👇The mocked data that will be used in the story
const TestData = {
  user: {
    userID: 1,
    name: 'Someone',
  },
  document: {
    id: 1,
    userID: 1,
    title: 'Something',
    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    status: 'approved',
  },
  subdocuments: [
    {
      id: 1,
      userID: 1,
      title: 'Something',
      content:
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
      status: 'approved',
    },
  ],
};

type Story = StoryObj<DocumentScreen>;

export const MockedSuccess: Story = {
  parameters: {
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', () => {
          return HttpResponse.json({
            data: {
              allInfo: {
                ...TestData,
              },
            },
          });
        }),
      ],
    },
  },
};

```

----------------------------------------

TITLE: Initializing List Story with One Item in Vue (JS)
DESCRIPTION: This story renders the List component with a single ListItem in Vue using JavaScript. It imports the 'Unchecked' story and renders it within the List component using a render function and template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#_snippet_5

LANGUAGE: js
CODE:
```
import List from './List.vue';
import ListItem from './ListItem.vue';

//👇 Imports a specific story from ListItem stories
import { Unchecked } from './ListItem.stories';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const OneItem = {
  args: {
    ...Unchecked.args,
  },
  render: (args) => ({
    components: { List, ListItem },
    setup() {
      //👇 The args will now be passed down to the template
      return { args };
    },
    template: '<List v-bind="args"><ListItem v-bind="args"/></List>',
  }),
};
```

----------------------------------------

TITLE: Configuring Bootstrap theme switching in Storybook
DESCRIPTION: Diff showing how to set up theme switching for Bootstrap's light and dark modes using the withThemeByDataAttribute decorator from @storybook/addon-themes in the .storybook/preview.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/bootstrap.md#2025-04-22_snippet_3

LANGUAGE: diff
CODE:
```
-import { Preview } from '@storybook/your-renderer';
+import { Preview, Renderer } from '@storybook/your-renderer';
+import { withThemeByDataAttribute } from '@storybook/addon-themes';

import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle';

const preview: Preview = {
  parameters: { /* ... */ },
+ decorators: [
+  withThemeByDataAttribute<Renderer>({
+    themes: {
+      light: 'light',
+      dark: 'dark',
+    },
+    defaultTheme: 'light',
+    attributeName: 'data-bs-theme',
+  }),
+ ]
};

export default preview;
```

----------------------------------------

TITLE: Defining Storybook Story for React (JS)
DESCRIPTION: This code defines a Storybook story for a React component using JavaScript. It imports the component, defines argTypes with options, and creates a story with a render function that assigns the function result to a variable and returns the component with props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_1

LANGUAGE: js
CODE:
```
import { YourComponent } from './your-component';

export default {
  component: YourComponent,
  //👇 Creates specific argTypes with options
  argTypes: {
    propertyA: {
      options: ['Item One', 'Item Two', 'Item Three'],
      control: { type: 'select' }, // Automatically inferred when 'options' is defined
    },
    propertyB: {
      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],
    },
  },
};

const someFunction = (valuePropertyA, valuePropertyB) => {
  // Do some logic here
};

export const ExampleStory = {
  render: (args) => {
    const { propertyA, propertyB } = args;
    //👇 Assigns the function result to a variable
    const someFunctionResult = someFunction(propertyA, propertyB);

    return <YourComponent {...args} someProperty={someFunctionResult} />;
  },
  args: {
    propertyA: 'Item One',
    propertyB: 'Another Item One',
  },
};
```

----------------------------------------

TITLE: Initializing Web Components Checkbox Story (JS)
DESCRIPTION: This code initializes a Storybook story for a Checkbox web component using JavaScript. It defines the component's title and the component itself. It exports a default object containing the title and component, and an 'Unchecked' story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  title: 'Checkbox',
  component: 'checkbox',
};

export const Unchecked = {
  args: {
    label: 'Unchecked',
  },
};
```

----------------------------------------

TITLE: Running create-storybook
DESCRIPTION: Executes the create-storybook command with an optional version specifier.  Package managers like npm, pnpm, and Yarn will execute this command when running `create storybook`. You can specify a version (e.g., `@latest`, `@8`, `@next`) or it will default to the latest version.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_117

LANGUAGE: Shell
CODE:
```
create storybook[@version] [options]
```

----------------------------------------

TITLE: Icon System Update
DESCRIPTION: Updates the icon system to use `@storybook/icons` instead of the deprecated `Icons` and `IconButtonSkeleton` from `@storybook/components`. This change requires importing icons directly from the new package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_12

LANGUAGE: diff
CODE:
```
- import { Icons, IconButtonSkeleton } from '@storybook/components';
+ import { ZoomIcon } from '@storybook/icons';
```

----------------------------------------

TITLE: Initializing Storybook Preview with Angular Decorator
DESCRIPTION: This snippet configures a Storybook preview for Angular, adding a decorator that wraps each story with a div element, applying a 3em margin. It imports the componentWrapperDecorator from '@storybook/angular'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/angular';
import { componentWrapperDecorator } from '@storybook/angular';

const preview: Preview = {
  decorators: [componentWrapperDecorator((story) => `<div style="margin: 3em">${story}</div>`)],
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet exports a default configuration object for Storybook in TypeScript. It imports the StorybookConfig type, specifies the framework to use, and sets the location of story files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-configuration-src-dir.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src'],
};

export default config;
```

----------------------------------------

TITLE: Defining Web Components List Story (TypeScript)
DESCRIPTION: This TypeScript code defines a Storybook story for a Web Components List component. It imports the html function from lit-html. The 'ManyItems' story renders the List component with multiple ListItem components, using the 'Selected' and 'Unselected' stories from ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

// 👇 We're importing the necessary stories from ListItem
import { Selected, Unselected } from './ListItem.stories';

const meta: Meta = {
  component: 'demo-list',
};

export default meta;
type Story = StoryObj;

export const ManyItems: Story = {
  render: (args) => html`
    <demo-list>
      ${Selected({ ...args, ...Selected.args })} ${Unselected({ ...args, ...Unselected.args })}
      ${Unselected({ ...args, ...Unselected.args })}
    </demo-list>
  `,
};
```

----------------------------------------

TITLE: Customize Component and Story Descriptions
DESCRIPTION: This code snippet demonstrates how to customize component and story descriptions using the `docs.description.component` and `docs.description.story` parameters in Storybook. It shows how to add markdown descriptions to components and stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_219

LANGUAGE: javascript
CODE:
```
import { Button } from './Button';

export default {
  title: 'Button',
  parameters: { docs: { description: { component: 'some component **markdown**' }}}
}

export const Basic = () => <Button />
Basic.parameters = { docs: { description: { story: 'some story **markdown**' }}}
```

----------------------------------------

TITLE: SEO Meta Description Configuration
DESCRIPTION: HTML meta tag configuration for adding SEO description to Storybook
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/publish-storybook.mdx#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<meta name="description" content="Your Storybook description here" />
```

----------------------------------------

TITLE: Initializing List Component Story - Solid (TS)
DESCRIPTION: This code defines a Storybook story for the List component in Solid using TypeScript. It imports the List and ListItem components and defines the Meta and StoryObj types. The story renders a List component with three ListItems, using props from the Selected and Unselected stories of ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { List } from './List';
import { ListItem } from './ListItem';

//👇 We're importing the necessary stories from ListItem
import { Selected, Unselected } from './ListItem.stories';

const meta = {
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ManyItems: Story = {
  render: (args) => (
    <List {...args}>
      <ListItem {...Selected.args} />
      <ListItem {...Unselected.args} />
      <ListItem {...Unselected.args} />
    </List>
  ),
};
```

----------------------------------------

TITLE: Defining Vue Button Story Metadata
DESCRIPTION: This snippet defines the metadata for a Storybook story of a Vue Button component. It imports the necessary modules from '@storybook/vue3-vite' and the Button component itself. The meta object is then exported as the default export, which is used by Storybook to display the component in the UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_18

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;
```

----------------------------------------

TITLE: Configuring Storybook Addons in main.js
DESCRIPTION: JavaScript configuration to add the addon-docs to the Storybook addons list in the main.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  addons: ['@storybook/addon-docs'],
};
```

----------------------------------------

TITLE: Installing Storybook Vite Builder with NPM
DESCRIPTION: Command to install @storybook/builder-vite package using NPM package manager as a development dependency.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install @storybook/builder-vite --save-dev
```

----------------------------------------

TITLE: Rendering Button Story for Preact
DESCRIPTION: This code defines a Storybook story for a Preact Button component. It imports the 'h' function from 'preact' and the Button component. The 'Primary' story uses a render function to render the Button component with the provided arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_3

LANGUAGE: js
CODE:
```
/** @jsx h */
import { h } from 'preact';

import { Button } from './Button';

export default {
  component: Button,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: (args) => <Button {...args} />,
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Main.js for Docs Addon
DESCRIPTION: JavaScript configuration for adding the Docs addon to Storybook in the main.js configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
export default {
  addons: ['@storybook/addon-docs'],
};
```

----------------------------------------

TITLE: Implementing Storybook Play Function for Generic Framework in TypeScript
DESCRIPTION: This snippet shows a Storybook play function implementation for a generic framework using TypeScript. It demonstrates form interaction and submission.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the name of your framework
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

const meta: Meta<typeof MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<typeof MyComponent>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted: Story = {
  play: async ({ args, canvasElement, step }) => {
    const canvas = within(canvasElement);

    await step('Enter email and password', async () => {
      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
      await userEvent.type(canvas.getByTestId('password'), 'supersecret');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button'));
    });
  },
};
```

----------------------------------------

TITLE: Setting Storybook Environment for Vue in TypeScript
DESCRIPTION: This code snippet imports the global object from Storybook, extracts the window object, and sets the STORYBOOK_ENV global variable to 'vue'. This configuration is crucial for Storybook to recognize and properly handle Vue-specific functionalities.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-client-globals-example-file.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { global } from '@storybook/global';

const { window: globalWindow } = global;

globalWindow.STORYBOOK_ENV = 'vue';
```

----------------------------------------

TITLE: Mocking an Error API Response with MSW in Svelte CSF
DESCRIPTION: This story mocks an error API response using MSW in a Svelte CSF Storybook story. It defines a handler that intercepts GET requests to 'https://your-restful-endpoint' and returns a 403 status code after a delay of 800ms. This simulates a failed API request and allows testing the component's error handling.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_3

LANGUAGE: js
CODE:
```
<Story
  name="MockedError"
  parameters={{
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint', async () => {
          await delay(800);
          return new HttpResponse(null, {
            status: 403,
          });
        }),
      ],
    },
  }}
/>
```

----------------------------------------

TITLE: Configuring Storybook Story for Common Component
DESCRIPTION: This code configures a Storybook story for a generic component named 'Example'. It sets the component and defines the 'icon' argument with available options for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Example } from './Example';

export default {
  component: Example,
  argTypes: {
    icon: {
      options: ['arrow-up', 'arrow-down', 'loading'],
    },
  },
};
```

----------------------------------------

TITLE: Defining a Custom Storybook Preset with webpack and Babel Configuration
DESCRIPTION: This code exports a preset object with three async configuration hooks: managerWebpack for modifying the Storybook manager UI webpack config, webpackFinal for customizing the preview/stories webpack config, and babel for altering the Babel configuration. Each hook receives the current config and options, and must return the updated configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preset-full-config-object.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  managerWebpack: async (config, options) => {
    // Update config here
    return config;
  },
  webpackFinal: async (config, options) => {
    return config;
  },
  babel: async (config, options) => {
    return config;
  },
};
```

----------------------------------------

TITLE: Forcing a Build of Storybook's Preview Iframe
DESCRIPTION: This command forcefully builds Storybook's preview iframe. It's useful for resolving issues or ensuring the preview is up-to-date, especially when combined with `--preview-url`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_23

LANGUAGE: CLI
CODE:
```
storybook dev --force-build-preview
```

----------------------------------------

TITLE: Initializing Button stories with Angular
DESCRIPTION: This code defines Storybook stories for an Angular Button component. It imports necessary modules from '@storybook/angular', declares the Button component, and uses 'componentWrapperDecorator' to add styling and wrap the component with a parent component containing ng-content.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { componentWrapperDecorator, moduleMetadata } from '@storybook/angular';

import { Button } from './button.component';

import { Parent } from './parent.component'; // Parent contains ng-content

const meta: Meta<Button> = {
  component: Button,
  decorators: [
    moduleMetadata({
      declarations: [ParentComponent],
    }),
    // With template
    componentWrapperDecorator((story) => `<div style="margin: 3em">${story}</div>`),
    // With component which contains ng-content
    componentWrapperDecorator(Parent),
  ],
};

export default meta;
```

----------------------------------------

TITLE: Defining Array Exclude Controls - JavaScript
DESCRIPTION: This JavaScript snippet defines a story named 'ArrayExclude' that configures the Storybook controls to exclude the 'foo' and 'bar' properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_9

LANGUAGE: js
CODE:
```
export const ArrayExclude = {
  parameters: {
    controls: { exclude: ['foo', 'bar'] },
  },
};
```

----------------------------------------

TITLE: Setting Storybook Meta Title for Angular Core README
DESCRIPTION: This JSX snippet uses the Meta component to set the title for the Storybook documentation page, indicating it's for Angular core README examples.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/angular/template/stories/core/README.mdx#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Meta title="stories / frameworks / angular / core / README" />
```

----------------------------------------

TITLE: Mocking a Successful API Response with MSW in JavaScript
DESCRIPTION: This story mocks a successful API response using MSW in a JavaScript Storybook story. It defines a handler that intercepts GET requests to 'https://your-restful-endpoint/' and returns a predefined JSON object (TestData). This allows testing the component's behavior when receiving valid data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_4

LANGUAGE: js
CODE:
```
export const MockedSuccess = {
  parameters: {
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint/', () => {
          return HttpResponse.json(TestData);
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Decorators with SolidJS and Typescript
DESCRIPTION: This TypeScript snippet configures Storybook decorators for a SolidJS project. It imports a navigation story and a global context provider. It defines a decorator, AppDecorator, which wraps stories with the GlobalContainerContext.Provider, providing a context object to the stories. This ensures that the stories have access to necessary data and render correctly within the Storybook environment. It exports a preview configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-global.md#_snippet_3

LANGUAGE: ts
CODE:
```
import { normal as NavigationNormal } from '../components/Navigation.stories';

import GlobalContainerContext from '../components/lib/GlobalContainerContext';

const context = {
  NavigationContainer: NavigationNormal,
};

const AppDecorator = (storyFn) => {
  return (
    <GlobalContainerContext.Provider value={context}>{storyFn()}</GlobalContainerContext.Provider>
  );
};

const preview: Preview = {
  decorators: [AppDecorator],
};

export default preview;
```

----------------------------------------

TITLE: CSF 3.0 Story with Explicit Title
DESCRIPTION: Example of a Component Story Format 3.0 story with an explicit title to preserve naming scheme.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
  title: 'Components/MyComponent/MyComponent',
};

export const Default = {};
```

----------------------------------------

TITLE: React Button Story Implementation (JavaScript)
DESCRIPTION: Implements a Button story for React using JavaScript and CSF 2 format. Creates a primary button story using args spreading pattern.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { Button } from './Button';

export default {
  title: 'Button',
  component: Button,
};

export const Primary = (args) => <Button {...args} />;
Primary.args = { primary: true };
```

----------------------------------------

TITLE: Storybook Meta and Story with Locale in Angular
DESCRIPTION: This code defines a Storybook story for an Angular component, MyComponent. It imports Meta and StoryObj from '@storybook/angular', defines a meta object for the component, and creates a story named StoryWithLocale that renders the component with a locale-specific caption.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

const getCaptionForLocale = (locale) => {
  switch (locale) {
    case 'es':
      return 'Hola!';
    case 'fr':
      return 'Bonjour!';
    case 'kr':
      return '안녕하세요!';
    case 'zh':
      return '你好!';
    default:
      return 'Hello!';
  }
};

export const StoryWithLocale: Story = {
  render: (args, { globals: { locale } }) => {
    const caption = getCaptionForLocale(locale);
    return {
      template: `<p>${caption}</p>`,
    };
  },
};
```

----------------------------------------

TITLE: Adding Storybook to a New Project
DESCRIPTION: This command automatically detects the project's renderer, builder, or meta-framework and installs Storybook 8, configuring it to match the project settings. It simplifies the setup process for new Storybook projects.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/migration-guide/from-older-version.mdx#_snippet_1

LANGUAGE: CLI
CODE:
```
npx storybook@latest init
```

----------------------------------------

TITLE: Initializing Vue Story with CSF in Typescript
DESCRIPTION: This code initializes a Storybook story for a Vue component using TypeScript and the Component Story Format (CSF). It imports the necessary modules, defines the meta object with the component, and creates a primary story with a render function and a loader that fetches todo data from an API.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import TodoItem from './TodoItem.vue';

const meta = {
  component: TodoItem,
} satisfies Meta<typeof TodoItem>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: (args, { loaded: { todo } }) => ({
    components: { TodoItem },
    setup() {
      return { args, todo: todo };
    },
    template: '<TodoItem :todo="todo" />',
  }),
  loaders: [
    async () => ({
      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),
    }),
  ],
};
```

----------------------------------------

TITLE: Initializing Button Story - Svelte (JS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using JavaScript. It imports the Button component and exports a default object that specifies the component to be used in the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_8

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};
```

----------------------------------------

TITLE: Update preview config file
DESCRIPTION: Updates the .storybook/preview.js|ts file to use the definePreview function. This involves replacing the Preview import and the preview export with the new definePreview function, and updating addon imports.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_7

LANGUAGE: Diff
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, nextjs, nextjs-vite)
+ import { definePreview } from '@storybook/your-framework';
- import type { Preview } from '@storybook/your-framework';
// 👇 Import the addons you are using
+ import addonA11y from '@storybook/addon-a11y';

+ export default definePreview({
- export const preview: Preview = {
    // ...current config
    // 👇 Add your addons here
+   addons: [addonA11y()],
+ });
- };
- export default preview;
```

----------------------------------------

TITLE: Configuring Button Component Meta for Web Components in Storybook (JS)
DESCRIPTION: This code configures the metadata for a Button component in Storybook using JavaScript for web components. It defines the component and sets up argument types (argTypes) to control the component's properties, specifically allowing either a label or an image to be passed, but not both. The 'if' property within 'argTypes' is used to conditionally display the 'label' or 'image' control based on the presence of the other.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  argTypes: {
    // Button can be passed a label or an image, not both
    label: {
      control: 'text',
      if: { arg: 'image', truthy: false },
    },
    image: {
      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },
      if: { arg: 'label', truthy: false },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet exports the Storybook configuration in TypeScript. It imports the StorybookConfig type, defines the framework, story file patterns, and includes a Babel configuration function for development and production environments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-babel.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  async babel(config, { configType }) {
    if (configType === 'DEVELOPMENT') {
      // Your development configuration goes here
    }
    if (configType === 'PRODUCTION') {
      // Your production configuration goes here.
    }
    return config;
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook with Vite
DESCRIPTION: This JavaScript configuration file sets up Storybook to use Vite as its builder. It defines the locations of story files, includes the Docs addon, configures Vite for pre-optimization of dependencies like 'storybook-dark-mode', and merges custom configurations with the default Vite config.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-aliasing.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: ['@storybook/addon-docs'],
  core: {
    builder: '@storybook/builder-vite',
  },
  async viteFinal(config) {
    // Merge custom configuration into the default config
    const { mergeConfig } = await import('vite');

    return mergeConfig(config, {
      // Add dependencies to pre-optimization
      optimizeDeps: {
        include: ['storybook-dark-mode'],
      },
    });
  },
};
```

----------------------------------------

TITLE: Configuring Story (TypeScript)
DESCRIPTION: This snippet configures a Storybook story using TypeScript. It imports the Meta type from '@storybook/your-framework' (which should be replaced with the actual framework, e.g., 'react-vite', 'vue3-vite', 'angular') and defines the component and its argument types, specifically a 'number' type for the 'value' argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Example } from './Example';

const meta = {
  component: Example,
  argTypes: {
    value: { type: 'number' },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Configuring Button stories for CommonJS (TS)
DESCRIPTION: This snippet configures Storybook stories for a Button component using TypeScript and CommonJS modules. It imports the Meta type from '@storybook/your-framework' (to be replaced with the appropriate framework) and defines the component and metadata for the story. The tags array specifies that the stories should be included in the documentation page but not appear in Storybook's sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  /*
   * All stories in this file will:
   * - Be included in the docs page
   * - Not appear in Storybook's sidebar
   */
  tags: ['autodocs', '!dev'],
} satisfies Meta<typeof Button>;
export default meta;
```

----------------------------------------

TITLE: Configuring Button Story in React (JavaScript)
DESCRIPTION: This code configures a Storybook story for a React Button component using JavaScript. It imports the Button component and defines its metadata, including argument types for background color and default arguments to set the primary property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  //👇 Creates specific argTypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    //👇 Now all Button stories will be primary.
    primary: true,
  },
};
```

----------------------------------------

TITLE: Initializing Page stories for Svelte (CSF, TS)
DESCRIPTION: This code initializes Storybook stories for the Page component in a Svelte application using CSF with TypeScript. It imports the Page component and Header stories, and exports a default object configuring the component for Storybook. It also defines a 'LoggedIn' story, importing related Header stories to populate arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_8

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Page from './Page.svelte';

//👇 Imports all Header stories
import * as HeaderStories from './Header.stories';

const meta = {
  component: Page,
} satisfies Meta<typeof Page>;

export default meta;
type Story = StoryObj<typeof meta>;

export const LoggedIn: Story = {
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with Layout (TS/TSX)
DESCRIPTION: This code initializes a Storybook story for a Button component with a centered layout using Typescript. It imports the necessary modules from '@storybook/your-framework' and the Button component, then defines a story with the layout parameter set to 'centered'. This example is applicable to both Typescript and TSX files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const WithLayout: Story = {
  parameters: {
    layout: 'centered',
  },
};
```

----------------------------------------

TITLE: Simulating Change Event in Storybook (Svelte)
DESCRIPTION: This Storybook story simulates a change event on a select element within a Svelte component. It uses the `userEvent.selectOptions` function to select different options and `sleep` function to introduce delays between selections, demonstrating asynchronous interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

// Function to emulate pausing between interactions
function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleChangeEvent: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const select = canvas.getByRole('listbox');

    await userEvent.selectOptions(select, ['One Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Another Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Yet another item']);
  },
};
```

----------------------------------------

TITLE: Initializing ButtonGroup stories for React (JS)
DESCRIPTION: This code initializes Storybook stories for the ButtonGroup component in React using JavaScript. It imports the ButtonGroup component and Button stories, then defines a 'Pair' story with primary and secondary buttons in a horizontal orientation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_1

LANGUAGE: js
CODE:
```
import { ButtonGroup } from '../ButtonGroup';

//👇 Imports the Button stories
import * as ButtonStories from './Button.stories';

export default {
  component: ButtonGroup,
};

export const Pair = {
  args: {
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  },
};
```

----------------------------------------

TITLE: Advanced MDX Example with moduleMetadata and Templates
DESCRIPTION: MDX example demonstrating how to translate stories that use template, moduleMetadata, and decorators to the MDX format.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_9

LANGUAGE: markdown
CODE:
```
import { Meta, Story, ArgsTable } from '@storybook/addon-docs';
import { CheckboxComponent, RadioButtonComponent } from './my-components';
import { moduleMetadata } from '@storybook/angular';

<Meta title='Checkbox' decorators={[
  moduleMetadata({
    declarations: [CheckboxComponent]
  })
]} />

# Basic Checkbox

<Story name='basic check' height='400px'>{{
  template: `
    <div class="some-wrapper-with-padding">
      <my-checkbox [checked]="checked">Some Checkbox</my-checkbox>
    </div>
  `,
  props: {
    checked: true
  }
}}</Story>

# Basic Radiobutton

<Story name='basic radio' height='400px'>{{
  moduleMetadata: {
    declarations: [RadioButtonComponent]
  }
  template: `
    <div class="some-wrapper-with-padding">
      <my-radio-btn [checked]="checked">Some Checkbox</my-radio-btn>
    </div>
  `,
  props: {
    checked: true
  }
}}</Story>
```

----------------------------------------

TITLE: Validating Form via Storybook Story in Vue with JavaScript
DESCRIPTION: This code snippet implements a form validation test using Vue with JavaScript, Testing Library for Vue, and Storybook's composeStory for scenario setup. It simulates clicking a submit button within the composed Storybook story and asserts the absence of the 'invalid-form' label to confirm successful form validation. The test depends on a correctly configured Vue and Storybook environment along with '@testing-library/vue' and '@storybook/vue3'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/single-story-test.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import { fireEvent, screen } from '@testing-library/vue';\n\nimport { composeStory } from '@storybook/vue3';\n\nimport Meta, { ValidForm as ValidFormStory } from './LoginForm.stories';\n\nconst ValidForm = composeStory(ValidFormStory, Meta);\n\ntest('Validates form', async () => {\n  await ValidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).not.toBeInTheDocument();\n});
```

----------------------------------------

TITLE: Defining Svelte Story with Mocked Dependency (CSF)
DESCRIPTION: This snippet defines a Storybook story for a Svelte component named 'Page'. It mocks the 'getUserFromSession' function to return a predefined user object before each story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#_snippet_2

LANGUAGE: js
CODE:
```
import { getUserFromSession } from '#api/session.mock';

import Page from './Page.svelte';

export default {
  component: Page,
};

export const Default = {
  async beforeEach() {
    // 👇 Set the return value for the getUserFromSession function
    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });
  },
};
```

----------------------------------------

TITLE: Subpath Imports Configuration
DESCRIPTION: This JSON configuration defines subpath imports in `package.json` for internal modules. It maps subpaths (starting with `#`) to actual file paths, specifying different paths for Storybook, testing, and default environments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "imports": {
    "#lib/session": {
      "storybook": "./lib/session.mock.ts",
      "test": "./lib/session.mock.ts",
      "default": "./lib/session.ts"
    },
    "#utils/api": {
      "storybook": "./utils/api.mock.ts",
      "test": "./utils/api.mock.ts",
      "default": "./utils/api.ts"
    },
    "#components/Button": {
      "storybook": "./components/Button.mock.tsx",
      "test": "./components/Button.mock.tsx",
      "default": "./components/Button.tsx"
    },
    "#*": "./*"
  }
}
```

----------------------------------------

TITLE: Defining Button Story with ArgTypes in Web Components (TS)
DESCRIPTION: This code defines a Storybook story for a web-components Button component using TypeScript. It imports the necessary modules from '@storybook/web-components-vite' and defines the component's metadata, including argTypes for customizing the 'label' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Basic: Story = {
  argTypes: {
    // 👇 This story expects a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
};
```

----------------------------------------

TITLE: Defining Button Component Story Meta (Typescript, Svelte)
DESCRIPTION: This code defines the metadata for a Button component story in Storybook using Typescript with Svelte. It imports the Button component and the Meta type from '@storybook/your-framework', then configures the meta object with the component and documentation parameters, excluding the 'style' control. It uses satisfies to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: ButtonGroup Story Definition (Web Components, TS)
DESCRIPTION: Defines a Storybook story for the ButtonGroup component using Web Components with TypeScript. It imports the necessary types from Storybook and Button stories. The 'Pair' story configures the component with primary and secondary buttons. The component is referenced by its tag name 'demo-button-group'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_12

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

// 👇 Imports the Button stories
import * as ButtonStories from './Button.stories';

const meta: Meta = {
  component: 'demo-button-group',
};

export default meta;
type Story = StoryObj;

export const Pair: Story = {
  args: {
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  },
};
```

----------------------------------------

TITLE: Importing ColorItem in Storybook
DESCRIPTION: This snippet demonstrates how to import the ColorItem component from Storybook addon-docs blocks. The ColorItem component is used to display individual color swatches within a ColorPalette.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-colorpalette.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { ColorItem } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Initializing Histogram Story for React with Typescript
DESCRIPTION: This code defines a Storybook story for the Histogram component in a React environment using Typescript. It imports the necessary modules and defines the component's metadata. The 'Default' story configures the component with specific arguments such as 'dataType', 'showHistogramLabels', 'histogramAccentColor', and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#_snippet_5

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Histogram } from './Histogram';

const meta = {
  component: Histogram,
} satisfies Meta<typeof Histogram>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    dataType: 'latency',
    showHistogramLabels: true,
    histogramAccentColor: '#1EA7FD',
    label: 'Latency distribution',
  },
};
```

----------------------------------------

TITLE: Storybook v7+ Story Sort Configuration
DESCRIPTION: This code snippet shows how to configure story sorting in Storybook 7.0+ using the `order` property within the `storySort` option. This example sorts `*/Introduction` first, but not `Introduction` or `Very/Nested/Introduction`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_173

LANGUAGE: javascript
CODE:
```
storySort: {
  order: ['*', ['Introduction', '*']],
}
```

----------------------------------------

TITLE: Defining Button Stories with Render Functions in Vue (TS)
DESCRIPTION: This code defines Storybook stories for a Vue Button component using TypeScript and render functions. It imports Meta and StoryObj types from the Storybook framework and defines primary, secondary, and tertiary stories with different labels and background colors. Each story includes a render function that configures the component and its template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_12

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: (args) => ({
    components: { Button },
    setup() {
      return { args };
    },
    template: '<Button v-bind="args" />',
  }),
  args: {
    background: '#ff0',
    label: 'Button',
  },
};

export const Secondary: Story = {
  render: (args) => ({
    components: { Button },
    setup() {
      return { args };
    },
    template: '<Button v-bind="args" />',
  }),
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
};

export const Tertiary: Story = {
  render: (args) => ({
    components: { Button },
    setup() {
      return { args };
    },
    template: '<Button v-bind="args" />',
  }),
  args: {
    ...Primary.args,
    label: '📚📕📈🤓',
  },
};

```

----------------------------------------

TITLE: Configure Storybook Preview with Custom CodeBlock (TS)
DESCRIPTION: This TypeScript snippet configures the Storybook preview to use a custom `CodeBlock` component for rendering code snippets in the documentation. It imports the `CodeBlock` component and sets it as the `code` component within the `docs.components` parameter.  It also imports the `Preview` type from `@storybook/your-framework`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-code-renderer.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

import { CodeBlock } from './CodeBlock';

const preview: Preview = {
  parameters: {
    docs: {
      components: {
        code: CodeBlock,
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook Story (JS)
DESCRIPTION: This code configures a Storybook story for a Button component using JavaScript. It defines a default export object that configures the component and enables auto-generated documentation using the 'autodocs' tag. It also defines a story that is excluded from the documentation using the '!autodocs' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
};

export const UndocumentedStory = {
  // 👇 Removes this story from auto-generated documentation
  tags: ['!autodocs'],
};
```

----------------------------------------

TITLE: Defining Svelte Stories with CSF for Button Component in TypeScript
DESCRIPTION: This TypeScript component defines Storybook stories for a Button component using Component Story Format (CSF). It imports the Button component and defines three stories: Primary, Secondary, and Tertiary, each with a different label and background color.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_9

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

	const { Story } = defineMeta({
		component: Button,
	});
</script>

<Story name="Primary">
  <Button backgroundColor="#ff0" label="Button" />
</Story>

<Story name="Secondary">
  <Button backgroundColor="#ff0" label="😄👍😍💯" />
</Story>

<Story name="Tertiary">
  <Button backgroundColor="#ff0" label="📚📕📈🤓" />
</Story>
```

----------------------------------------

TITLE: Testing Storybook Composed Button Story in React - JavaScript
DESCRIPTION: This snippet tests the 'Primary' composed Storybook story for a Button component using React and JavaScript. It relies on @testing-library/react for rendering and querying elements, and @storybook/react for composing stories. The test ensures the button's text content matches the label argument defined in the story, which helps prevent duplication of test values. It expects dependencies on @testing-library/react, @storybook/react, and valid Button stories exports.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/reuse-args-test.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import { render, screen } from '@testing-library/react';

import { composeStories } from '@storybook/react';

import * as stories from './Button.stories';

const { Primary } = composeStories(stories);

test('reuses args from composed story', () => {
  render(<Primary />);

  const buttonElement = screen.getByRole('button');
  // Testing against values coming from the story itself! No need for duplication
  expect(buttonElement.textContent).toEqual(Primary.args.label);
});
```

----------------------------------------

TITLE: Specifying Port Number
DESCRIPTION: Runs Storybook on the specified port number.  Useful for avoiding conflicts with other services.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_3

LANGUAGE: Shell
CODE:
```
storybook dev -p 9009
```

----------------------------------------

TITLE: Web Component Story with Image (TypeScript)
DESCRIPTION: This snippet defines a Storybook story for a web component using TypeScript. It imports the necessary modules from '@storybook/web-components-vite' and 'lit', as well as the image file. It defines the component's metadata using TypeScript types and creates an image object. The story's render function uses the html template literal to render an img element with the image's src and alt attributes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

import imageFile from './static/image.png';

const meta: Meta = {
  component: 'my-component',
};

const image = {
  src: imageFile,
  alt: 'my image',
};

export default meta;
type Story = StoryObj;

export const WithAnImage: Story = {
  render: () => html`<img src="${image.src}" alt="${image.alt}" />`,
};
```

----------------------------------------

TITLE: Simulating Button Click with Play Function in Storybook
DESCRIPTION: This code snippet demonstrates how to use the `play` function in a Storybook story to simulate a button click. It uses `within` to query the DOM within the canvas element and `userEvent` to trigger a click event on a button with a specific role and name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#_snippet_9

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { userEvent, within } from 'storybook/test';

const meta: Meta = {
  component: 'demo-my-component',
};

export default meta;
type Story = StoryObj;

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleWithRole: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button', { name: / button label/i }));
  },
};
```

----------------------------------------

TITLE: Setting Story-Level Parameters in CSF
DESCRIPTION: Demonstrates how to set parameters for individual stories using the parameters key in Component Story Format (CSF). Shows setting background colors for a specific story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/parameters.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// Button.stories.js|jsx|ts|tsx|mdx
export const Primary = {
  parameters: {
    backgrounds: {
      values: [
        { name: 'red', value: '#f00' },
        { name: 'green', value: '#0f0' },
        { name: 'blue', value: '#00f' },
      ],
    },
  },
};
```

----------------------------------------

TITLE: Defining Button Story with ArgTypes in Svelte (TS)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines the component's metadata, including argTypes for customizing the 'label' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic = {
  argTypes: {
    // 👇 This story expects a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
} satisfies Story;
```

----------------------------------------

TITLE: Setting up Playwright Component Tests with React Storybook
DESCRIPTION: This code demonstrates how to use Playwright for component testing with React Storybook. It imports stories from a portable stories file, creates a test instance, and shows how to mount components with default and custom props while making assertions on the rendered output.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-playwright-ct.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
import { createTest } from '@storybook/react/experimental-playwright';
import { test as base } from '@playwright/experimental-ct-react';

// See explanation below for `.portable` stories file
import stories from './Button.stories.portable';

const test = createTest(base);

test('renders primary button', async ({ mount }) => {
  // The mount function will execute all the necessary steps in the story,
  // such as loaders, render, and play function
  await mount(<stories.Primary />);
});

test('renders primary button with overridden props', async ({ mount }) => {
  // You can pass custom props to your component via JSX
  const component = await mount(<stories.Primary label="label from test" />);
  await expect(component).toContainText('label from test');
  await expect(component.getByRole('button')).toHaveClass(/storybook-button--primary/);
});
```

----------------------------------------

TITLE: Initializing Storybook Meta for LoginForm
DESCRIPTION: This code initializes the Meta object for Storybook, defining the component to be 'demo-login-form'. This configuration is used to create stories for the LoginForm component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_18

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { userEvent, within, expect } from 'storybook/test';

const meta: Meta = {
  component: 'demo-login-form',
};

export default meta;
type Story = StoryObj;
```

----------------------------------------

TITLE: Initializing Storybook with yarn
DESCRIPTION: Command to create a new Storybook project using yarn package manager. Uses the latest version of the Storybook creation tool.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn create storybook@latest
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte component, MyComponent, using CSF. It defines a story named 'WithAnImage' that renders the component with specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_6

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

// Assume image.png is located in the "public" directory.
export const WithAnImage = {
  render: () => ({
    Component: MyComponent,
    props: {
      src: '/image.png',
      alt: 'my image',
    },
  }),
};

```

----------------------------------------

TITLE: Configuring inline-check control for enum ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'inline-check' control for an enum, providing a set of inlined checkboxes for selecting multiple options within Storybook's controls panel. The `options` array specifies the available choices.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
{ control: 'inline-check', options: ['email', 'phone', 'mail'] }
```

----------------------------------------

TITLE: Enabling CI Mode for Angular Storybook
DESCRIPTION: Starts Storybook in CI mode, skipping interactive prompts and preventing the browser from opening automatically.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_24

LANGUAGE: JSON
CODE:
```
{"ci": true}
```

----------------------------------------

TITLE: Configuring Storybook Main Config in TypeScript
DESCRIPTION: TypeScript configuration for Storybook's main configuration file with type safety. Imports the StorybookConfig type and configures the Svelte CSF addon with legacy template support.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-options.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the name of your Svelte framework
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  // Other configuration
  addons: [
    {
      name: '@storybook/addon-svelte-csf',
      options: {
        legacyTemplate: true, // Enables the legacy template syntax
      },
    },
  ],
};
export default config;
```

----------------------------------------

TITLE: Configuring Story for Example Component (TypeScript)
DESCRIPTION: This snippet configures a Storybook story for an 'Example' component. It defines the component and sets up an argument type for a 'value' property, allowing users to control it with a number input in the Storybook UI. It uses TypeScript and imports Meta from '@storybook/your-framework'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Example } from './Example';

const meta = {
  component: Example,
  argTypes: {
    value: {
      control: {
        type: 'number',
        min: 0,
        max: 100,
        step: 10,
      },
    },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Transforming Source Code with Prettier
DESCRIPTION: Illustrates how to use the `transform` function to format source code snippets using Prettier. This example configures a global transform in the preview file to ensure consistent code formatting across all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-source.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
export default {
  parameters: {
    docs: {
      source: {
        transform: async (source) => {
          const prettier = await import('prettier/standalone');
          const prettierPluginBabel = await import('prettier/plugins/babel');
          const prettierPluginEstree = await import('prettier/plugins/estree');

          return prettier.format(source, {
            parser: 'babel',
            plugins: [prettierPluginBabel, prettierPluginEstree],
          });
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook MDX Documentation with Svelte Renderer using Standard CSF
DESCRIPTION: Sets up an MDX documentation file for Storybook using the Svelte renderer with standard Component Story Format (CSF). It imports from a regular .stories file rather than a .stories.svelte file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-meta-block.md#2025-04-22_snippet_2

LANGUAGE: mdx
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories';

<Meta of={CheckboxStories} />
```

----------------------------------------

TITLE: Configuring Storybook Preview Parameters (TypeScript)
DESCRIPTION: This TypeScript snippet configures the default parameters for Storybook previews. It imports the `Preview` type from `@storybook/your-framework` and defines a `preview` object with parameters for action event handling, using an `argTypesRegex` to match argument names starting with 'on'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-matching-argtypes.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    actions: { argTypesRegex: '^on.*' },
  },
};

export default preview;
```

----------------------------------------

TITLE: Registering Storybook Addon and Accessing Query Parameters
DESCRIPTION: Demonstrates how to register a custom Storybook addon using addons.register() and access URL query parameters using the api.getQueryParam() method. The addon is registered under a unique identifier 'my-organisation/my-addon' and retrieves a parameter named 'exampleParameter'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-getqueryparam.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
addons.register('my-organisation/my-addon', (api) => {
  api.getQueryParam('exampleParameter');
});
```

----------------------------------------

TITLE: Configuring List Story with Vue (TypeScript)
DESCRIPTION: This code configures a Storybook story for the List component in Vue using TypeScript. It imports necessary types from @storybook/vue3-vite and the List component. The Empty story renders the List component within a template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_12

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import List from './ListComponent.vue';

const meta = {
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

// Always an empty list, not super interesting
export const Empty: Story = {
  render: () => ({
    components: { List },
    template: '<List/>',
  }),
};

```

----------------------------------------

TITLE: Creating Empty and OneItem Stories for React
DESCRIPTION: Creates Empty and OneItem stories for React by spreading the ListTemplate and defining specific args for each story. The Empty story renders an empty list, while the OneItem story renders a list with a single item based on the Unchecked story from ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_6

LANGUAGE: javascript
CODE:
```
export const Empty = {
  ...ListTemplate,
  args: {
    items: [],
  },
};

export const OneItem = {
  ...ListTemplate,
  args: {
    items: [{ ...Unchecked.args }],
  },
};
```

----------------------------------------

TITLE: Vitest Environment Setup
DESCRIPTION: This code snippet sets up the testing environment for Vitest to use jsdom. This allows the tests to run in a browser-like environment, which is necessary for testing components that rely on the DOM.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#_snippet_6

LANGUAGE: js
CODE:
```
// @vitest-environment jsdom
```

----------------------------------------

TITLE: Defining Button Story with Backgrounds in Svelte (TS)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using TypeScript and configures story-level parameters to set background options. It imports the Button component and uses defineMeta from '@storybook/addon-svelte-csf' to define the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<!-- 👇 Story-level parameters-->
<Story
  name="Primary"
  parameters={{
    backgrounds: {
      options: {
        red: { name: 'Red', value: '#f00' },
        green: { name: 'Green', value: '#0f0' },
        blue: { name: 'Blue', value: '#00f' },
      },
    },
  }}
/>
```

----------------------------------------

TITLE: Configuring Storybook with Composition in JavaScript
DESCRIPTION: This snippet shows how to configure Storybook in JavaScript, including setting the framework, specifying story patterns, and defining composed Storybooks for React and Angular. It uses a function to determine the appropriate URLs based on the environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-refs-with-function.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],

  // 👇 Retrieve the current environment from the configType argument
  refs: (config, { configType }) => {
    if (configType === 'DEVELOPMENT') {
      return {
        react: {
          title: 'Composed React Storybook running in development mode',
          url: 'http://localhost:7007',
        },
        angular: {
          title: 'Composed Angular Storybook running in development mode',
          url: 'http://localhost:7008',
        },
      };
    }
    return {
      react: {
        title: 'Composed React Storybook running in production',
        url: 'https://your-production-react-storybook-url',
      },
      angular: {
        title: 'Composed Angular Storybook running in production',
        url: 'https://your-production-angular-storybook-url',
      },
    };
  },
};
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF) - TS
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF) with TypeScript. It imports the necessary modules from '@storybook/addon-svelte-csf' and defines the component and title for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    /* 👇 The title prop is optional.
    * See https://storybook.js.org/docs/configure/#configure-story-loading
    * to learn how to generate automatic titles
    */
    title: 'Button',
    component: Button,
  });
</script>
```

----------------------------------------

TITLE: React Button Story Implementation (JavaScript)
DESCRIPTION: Default story implementation for a Button component in React using CSF 3 format. Uses JavaScript with React's spread props pattern.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export const Default = {
  render: (args) => <Button {...args} />,
};
```

----------------------------------------

TITLE: Configuring Button Story in React (TypeScript)
DESCRIPTION: This code configures a Storybook story for a React Button component using TypeScript. It imports the Button component and defines its metadata, including argument types for background color and default arguments to set the primary property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
  //👇 Creates specific argTypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    //👇 Now all Button stories will be primary.
    primary: true,
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Initializing Button Story for Web Components (TS)
DESCRIPTION: This code initializes a Storybook story for a Web Components Button component using TypeScript. It defines the component as 'custom-button' and sets up argTypes for handling onClick events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'custom-button',
  argTypes: {
    onClick: { action: 'onClick' },
  },
};

export default meta;
type Story = StoryObj;

export const Text: Story = {
  args: {},
};
```

----------------------------------------

TITLE: Registering Storybook Theme Addon
DESCRIPTION: Adding the @storybook/addon-themes to the addons array in the Storybook configuration file (.storybook/main.js).
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  stories: [
    "../stories/**/*.stories.mdx",
    "../stories/**/*.stories.@(js|jsx|ts|tsx)",
  ],
  addons: [
    "@storybook/addon-essentials",
+   "@storybook/addon-themes"
  ],
};
```

----------------------------------------

TITLE: Configuring Storybook Preview with Custom Canvas Component (JS)
DESCRIPTION: This JavaScript snippet configures the Storybook preview by defining a custom `Canvas` component within the `docs.components` parameter. This allows you to override the default Canvas component with your own implementation, `MyCanvas`, for customized documentation rendering.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-canvas.md#_snippet_0

LANGUAGE: js
CODE:
```
import { MyCanvas } from './MyCanvas';

export default {
  parameters: {
    docs: {
      components: {
        Canvas: MyCanvas,
      },
    },
  },
};
```

----------------------------------------

TITLE: Defining Web Components Button Story (JavaScript)
DESCRIPTION: This code defines a Storybook story for a web components Button component using JavaScript. It defines the component and creates a 'Primary' story with specific arguments for the button's appearance.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_14

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
};

export const Primary = {
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Configuring Button Story
DESCRIPTION: This code configures a Storybook story for a Button component. It imports the Button component and the withActions decorator, then defines the component metadata and sets up action handling for 'mouseover' and 'click .btn' events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

import { withActions } from 'storybook/actions/decorator';

export default {
  component: Button,
  parameters: {
    actions: {
      handles: ['mouseover', 'click .btn'],
    },
  },
  decorators: [withActions],
};
```

----------------------------------------

TITLE: Installing Storybook Test Runner with Yarn
DESCRIPTION: Installs the @storybook/test-runner package as a development dependency using yarn package manager
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev @storybook/test-runner
```

----------------------------------------

TITLE: Defining a story with meta.story - Typescript
DESCRIPTION: The `story` function on the `meta` object defines individual stories, accepting an object containing the name, args, parameters, and other story properties. This function provides type safety for the story configuration. This example shows how to define a primary story with a type-safe `primary` argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
// ...from above
const meta = preview.meta({ /* ... */ });

export const Primary = meta.story({
  args: {
    // type-safe!
    primary: true,
  },
});
```

----------------------------------------

TITLE: Highlighting elements in Svelte Storybook
DESCRIPTION: This JavaScript snippet defines a Storybook story for a Svelte component, using the `HIGHLIGHT` addon to apply custom styles to specific elements (h2, a, .storybook-button). It uses `useChannel` to emit the `HIGHLIGHT` event with selectors, styles, hoverStyles, focusStyles, and keyframes for animation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-custom-style.md#_snippet_4

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

export const StyledHighlight = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        styles: {
          backgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`,
          outline: '3px solid hotpink',
          animation: 'pulse 3s linear infinite',
          transition: 'outline-offset 0.2s ease-in-out',
        },
        hoverStyles: {
          outlineOffset: '3px',
        },
        focusStyles: {
          backgroundColor: 'transparent',
        },
        keyframes: `@keyframes pulse {
          0% { outline-color: rgba(255, 105, 180, 1); }
          50% { outline-color: rgba(255, 105, 180, 0.2); }
          100% { outline-color: rgba(255, 105, 180, 1); }
        }`,
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Using ArgsTable with Story in MDX - JavaScript
DESCRIPTION: This code snippet shows how to use ArgsTable with a story in MDX to display controls. The ArgsTable component is used with the `story` prop set to the name of the story, and the story function takes args as input and renders the component with those args.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#_snippet_3

LANGUAGE: javascript
CODE:
```
<Story name="WithControls">
  {args => <MyComponent {...args} />}
</Story>

<ArgsTable story="Controls" />
```

----------------------------------------

TITLE: Package script for Storybook tests
DESCRIPTION: This JSON snippet shows a package.json script to run Storybook tests using Vitest. The script executes Vitest on the 'storybook' project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test-storybook": "vitest --project=storybook"
  }
}
```

----------------------------------------

TITLE: Rendering Button with Text Label in React (JavaScript)
DESCRIPTION: This code defines a Storybook story for the Button component in React using JavaScript. It imports the Button component and the action function from Storybook. The story renders the button with a 'Hello' label and an onClick handler that triggers the 'clicked' action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#_snippet_1

LANGUAGE: js
CODE:
```
import { action } from 'storybook/actions';

import { Button } from './Button';

export default {
  component: Button,
};

export const Text = {
  render: () => <Button label="Hello" onClick={action('clicked')} />,
};
```

----------------------------------------

TITLE: Rendering Button with Text Label in Solid (TypeScript)
DESCRIPTION: This code defines a Storybook story for the Button component in Solid using TypeScript. It imports the Button component and the action function from Storybook. The story renders the button with a 'Hello' label and an onClick handler that triggers the 'clicked' action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { action } from 'storybook/actions';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {
  render: () => <Button label="Hello" onClick={action('clicked')} />,
};
```

----------------------------------------

TITLE: Vue Button Story Implementation (JavaScript)
DESCRIPTION: Implements a Button story for Vue using JavaScript and CSF 2 format. Uses Vue's component and template syntax with setup function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import Button from './Button.vue';

export default {
  title: 'Button',
  component: Button,
};

export const Primary = (args) => ({
  components: { Button },
  setup() {
    return { args };
  },
  template: '<Button v-bind="args" />',
});
Primary.args = { primary: true };
```

----------------------------------------

TITLE: Configuring Accessibility Parameters for Web Component Stories in TypeScript
DESCRIPTION: This code configures accessibility parameters for a web component Storybook story using TypeScript. It defines rules to include or exclude specific accessibility checks, configures Axe's options, and sets global accessibility parameters. It imports Meta and StoryObj from '@storybook/web-components'. The component is defined as 'my-component'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_11

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components';

const meta: Meta = {
  component: 'my-component',
  parameters: {
    a11y: {
      // Optional selector to inspect
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      manual: true,
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Initializing Button Story for Solid
DESCRIPTION: This code initializes a Storybook story for a Solid Button component. It imports the Button component and defines a 'Primary' story with specific arguments for the button's label and primary state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_6

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Primary = {
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Meta for Web Components Button
DESCRIPTION: This code configures the Storybook metadata for a Web Components Button. It defines the component as 'demo-button' and customizes the background options to include 'dark' and 'gray'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_1

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  parameters: {
    backgrounds: {
      options: {
        // 👇 Override the default `dark` option
        dark: { name: 'Dark', value: '#000' },
        // 👇 Add a new option
        gray: { name: 'Gray', value: '#CCC' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Displaying Help for Storybook Add Command
DESCRIPTION: The `--help` option displays usage information for the `storybook add` command. This includes available options and their descriptions. It is useful for understanding the command's syntax and available configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_59

LANGUAGE: Shell
CODE:
```
storybook add --help
```

----------------------------------------

TITLE: Removing Storybook Accessibility Addon with npm
DESCRIPTION: Command to remove the @storybook/addon-a11y addon from a Storybook project using npm package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-remove-command.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@latest remove @storybook/addon-a11y
```

----------------------------------------

TITLE: Define Meta for LoginForm (Svelte CSF)
DESCRIPTION: This code defines the meta object for the LoginForm component in Storybook using Svelte CSF. It imports the necessary modules from '@storybook/addon-svelte-csf' and defines the component to be documented.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_10

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { expect, userEvent, within } from 'storybook/test';

  import LoginForm from './LoginForm.svelte';

  const { Story } = defineMeta({
    component: LoginForm,
  });
</script>

<Story name="EmptyForm" />
```

----------------------------------------

TITLE: Defining Storybook Mocked Error Story (React)
DESCRIPTION: This code defines a MockedError story for the DocumentScreen component in React. It uses MSW to mock a GraphQL query that returns an error after a delay of 800ms, simulating a failed API request. This allows testing the component's error handling logic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_5

LANGUAGE: js
CODE:
```
export const MockedError = {
  parameters: {
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', async () => {
          await delay(800);
          return HttpResponse.json({
            errors: [

```

----------------------------------------

TITLE: Implementing Storybook Preview Middleware in TypeScript
DESCRIPTION: This method sets up the middleware for the Storybook preview. It handles various routes related to the preview, including the main preview HTML, static files, and story-specific endpoints. It uses the Express router to define these routes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/server/README.md#2025-04-22_snippet_3

LANGUAGE: TypeScript
CODE:
```
async initializeMiddleware() {
  this.router.get('/iframe.html', this.getPreviewHtml.bind(this));
  this.router.use('/sb-preview', express.static(this.options.previewDir));

  this.router.get(
    '/storybook-preview.js',
    async (req: Request, res: Response) => {
      const { body } = await this.previewBuilder.getMainFile();
      res.type('js');
      res.send(body);
    }
  );

  // ... other route handlers
}
```

----------------------------------------

TITLE: Initializing List Story with React (TypeScript)
DESCRIPTION: This code defines a Storybook story for a React List component using TypeScript. It imports the necessary components and types, including a specific story from ListItem. It defines a template for rendering the list with items and creates stories for empty and single-item lists, ensuring type safety with Storybook's Meta and StoryObj types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { List } from './List';
import { ListItem } from './ListItem';

//👇 Imports a specific story from ListItem stories
import { Unchecked } from './ListItem.stories';

const meta = {
  /* 👇 The title prop is optional.
   * Seehttps://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

//👇 The ListTemplate construct will be spread to the existing stories.
const ListTemplate: Story = {
  render: ({ items, ...args }) => {
    return (
      <List>
        {items.map((item) => (
          <ListItem {...item} />
        ))}
      </List>
    );
  },
};

export const Empty = {
  ...ListTemplate,
  args: {
    items: [],
  },
};

export const OneItem = {
  ...ListTemplate,
  args: {
    items: [{ ...Unchecked.args }],
  },
};

```

----------------------------------------

TITLE: Storybook CSF Configuration with Locale (TypeScript/Web Components)
DESCRIPTION: This TypeScript code defines a Storybook story using the Component Story Format (CSF) for a web component. It imports the `html` function from 'lit' and defines a `StoryWithLocale` story that renders a paragraph element with a locale-specific caption, determined by the `getCaptionForLocale` function based on the global `locale` variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

const meta: Meta = {
  component: 'my-component',
};

const getCaptionForLocale = (locale) => {
  switch (locale) {
    case 'es':
      return 'Hola!';
    case 'fr':
      return 'Bonjour!';
    case 'kr':
      return '안녕하세요!';
    case 'zh':
      return '你好!';
    default:
      return 'Hello!';
  }
};

export default meta;
type Story = StoryObj;

export const StoryWithLocale: Story = {
  render: (args, { globals: { locale } }) => {
    const caption = getCaptionForLocale(locale);
    return html`<p>${caption}</p>`;
  },
};
```

----------------------------------------

TITLE: Extracting Storybook with Yarn
DESCRIPTION: Executes Storybook's extract command using Yarn package manager at version 7.5.3.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-extract-specific-version.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@7.5.3 extract
```

----------------------------------------

TITLE: Defining Svelte Storybook Meta for Page Component
DESCRIPTION: This code defines the Storybook meta configuration for a Svelte Page component. It imports the Page component and sets the component property in the default export. It also disables auto-generated documentation using tags.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#_snippet_2

LANGUAGE: js
CODE:
```
import Page from './Page.svelte';

export default {
  component: Page,
  // 👇 Disable auto-generated documentation for this component
  tags: ['!autodocs'],
};
```

----------------------------------------

TITLE: Defining Button Stories in TypeScript
DESCRIPTION: This TypeScript file defines stories for the Button component in Storybook using TypeScript. It imports Meta and StoryObj types from the Storybook framework and configures the component's title and the component itself. It also defines a 'Primary' story with specific arguments, leveraging TypeScript's type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-title.md#_snippet_2

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  // Sets the name for the stories container
  title: 'components/Button',
  // The component name will be used if `title` is not set
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

// The story variable name will be used if `name` is not set
const Primary: Story = {
  // Sets the name for that particular story
  name: 'Primary',
  args: {
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with Layout in Svelte (Typescript)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component with a centered layout using Typescript. It imports the necessary modules from '@storybook/your-framework' and the Button component, then defines a story with the layout parameter set to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const WithLayout: Story = {
  parameters: {
    layout: 'centered',
  },
};
```

----------------------------------------

TITLE: Initializing Button Storybook for Web Components (TS)
DESCRIPTION: This code initializes a Storybook story for a web-components Button component using TypeScript. It imports the Meta type from '@storybook/web-components-vite' and defines a Meta object to configure the story's title and component, specifying the component as 'demo-button'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Design System/Atoms/Button',
  component: 'demo-button',
};

export default meta;
```

----------------------------------------

TITLE: Initializing Storybook Story for Vue Component (TS)
DESCRIPTION: Defines a Storybook story for a Vue component using TypeScript, including metadata. It imports the necessary modules from '@storybook/vue3-vite' and the component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import MyComponent from './MyComponent.vue';

// More on default export: https://storybook.js.org/docs/writing-stories/#default-export
const meta = {
```

----------------------------------------

TITLE: Configuring Button Metadata with ArgTypes in JavaScript
DESCRIPTION: This code configures the metadata for a Button component in Storybook using JavaScript. It defines argTypes to categorize and control the component's properties such as backgroundColor, primary, label, onClick, and size within the Storybook UI. The properties are organized into categories like Colors, Text, Events, and Sizes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-subcategories.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  argTypes: {
    // Assigns the argTypes to the Colors category
    backgroundColor: {
      control: 'color',
      table: {
        category: 'Colors',
        // Assigns the argTypes to a specific subcategory
        subcategory: 'Button colors',
      },
    },
    primary: {
      table: {
        category: 'Colors',
        subcategory: 'Button style',
      },
    },
    label: {
      table: {
        category: 'Text',
        subcategory: 'Button contents',
      },
    },
    // Assigns the argType to the Events category
    onClick: {
      table: {
        category: 'Events',
        subcategory: 'Button Events',
      },
    },
    // Assigns the argType to the Sizes category
    size: {
      table: {
        category: 'Sizes',
      },
    },
  },
};
```

----------------------------------------

TITLE: Converting MDX Stories to CSF with yarn
DESCRIPTION: Command to migrate Storybook stories from MDX format to Component Story Format (CSF) using yarn. The command uses yarn dlx to execute the storybook migration script targeting all .stories.mdx files in the src directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-mdx-to-csf.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
# Convert stories in MDX to CSF
yarn dlx storybook@latest migrate mdx-to-csf --glob "src/**/*.stories.mdx"
```

----------------------------------------

TITLE: Configuring Storybook Meta for Web Component (JS)
DESCRIPTION: This code configures the Storybook metadata for a web component using JavaScript. It defines the component name and argTypes, specifically hiding the 'foo' property from the UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'your-component',
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      control: false,
    },
  },
};
```

----------------------------------------

TITLE: Vitest addon integration setup
DESCRIPTION: Adjust your existing configuration (i.e., `.storybook/vitest.setup.ts`) to enable the integration as follows:
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
// .storybook/vitest.setup.ts
import { setProjectAnnotations } from '@storybook/test-runner';
import * as globalStorybookConfig from './preview';

setProjectAnnotations(globalStorybookConfig);

```

----------------------------------------

TITLE: Vitest Setup with Project Annotations
DESCRIPTION: This snippet demonstrates how to apply Storybook configuration defined in `.storybook/preview.js|ts` to your Vitest setup file. It uses the `setProjectAnnotations` function from the portable stories API to transform stories into tests.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { setProjectAnnotations } from '@storybook/preview-api';
import type { ProjectAnnotations } from '@storybook/types';

async function globalSetup() {
  const preview = await import('../.storybook/preview');
  setProjectAnnotations(preview.decorators as any, preview.parameters as any);
}

export default globalSetup;
```

----------------------------------------

TITLE: Initializing Svelte Button Story (CSF - JS)
DESCRIPTION: This snippet initializes a Storybook story for a Svelte Button component using JavaScript and the Component Story Format (CSF). It defines the component metadata, including the component itself and arguments like onClick, which uses 'fn' to spy on the click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-onclick-action-spy.md#_snippet_2

LANGUAGE: js
CODE:
```
import { fn } from 'storybook/test';

import Button from './Button.svelte';

export default {
  component: Button,
  // 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked
  args: { onClick: fn() },
};
```

----------------------------------------

TITLE: Using Next.js Image Component with Local Images
DESCRIPTION: This code demonstrates how to use the Next.js Image component with local images in a Storybook story. It imports the Image component from next/image and a local image file.  The Image component is then used to display the local image with specified alt text and automatically provided width and height.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from 'next/image';
import profilePic from '../public/me.png';

function Home() {
  return (
    <>
      <h1>My Homepage</h1>
      <Image
        src={profilePic}
        alt="Picture of the author"
        // width={500} automatically provided
        // height={500} automatically provided
        // blurDataURL="../public/me.png" set to equal the image itself (for this framework)
        // placeholder="blur" // Optional blur-up while loading
      />
      <p>Welcome to my homepage!</p>
    </>
  );
}
```

----------------------------------------

TITLE: Modern Storybook Story Definition in Svelte
DESCRIPTION: Demonstrates the updated approach to defining Storybook stories using the defineMeta helper function, which provides a more streamlined API and better type support.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-tags.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });

</script>

<Story name="Default" tags={['autodocs']} />
```

----------------------------------------

TITLE: Highlighting Story Elements in Angular
DESCRIPTION: This snippet demonstrates how to highlight specific elements within an Angular Storybook story using the `useChannel` hook and the `HIGHLIGHT` event. It utilizes the `componentWrapperDecorator` to wrap the story and emit the highlight event with specified CSS selectors. This allows for visual emphasis on particular parts of the component during development.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';
import { componentWrapperDecorator } from '@storybook/angular';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const Highlighted: Story = {
  decorators: [
    componentWrapperDecorator((story) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
      });
      return story;
    }),
  ],
};
```

----------------------------------------

TITLE: Defining Storybook Meta for Web Components - TS
DESCRIPTION: This code defines the metadata for a Storybook story using TypeScript for a web component. It imports the Meta type from '@storybook/web-components-vite'. It configures the component and uses 'args' to set the default value for the 'value' property, instead of the deprecated 'defaultValue'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-example',
  argTypes: {
    value: {
      // ⛔️ Deprecated, do not use
      defaultValue: 0,
    },
  },
  // ✅ Do this instead
  args: {
    value: 0,
  },
};

export default meta;
```

----------------------------------------

TITLE: Setting Project Annotations with Storybook for Svelte in JavaScript
DESCRIPTION: The JavaScript version for Svelte projects, configuring project annotations with Storybook. It uses Vitest's `beforeAll` and includes plugin imports for accessibility and optional project-specific adjustments. A switch to `@storybook/sveltekit` is advised if using SvelteKit.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { beforeAll } from 'vitest';

// Replace @storybook/svelte with @storybook/sveltekit if you are using SvelteKit
import { setProjectAnnotations } from '@storybook/svelte';

// Import the a11y addon annotations
import * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';

// Optionally import your own annotations
import * as projectAnnotations from './preview';

const project = setProjectAnnotations([
  // Add the a11y addon annotations
  a11yAddonAnnotations,
  projectAnnotations,
]);

beforeAll(project.beforeAll);
```

----------------------------------------

TITLE: Initializing Button Story with Svelte CSF
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports necessary modules from '@storybook/addon-svelte-csf' and defines a primary story with a decorator for adding margin.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';
  import MarginDecorator from './MarginDecorator.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Primary"
  decorators={[
    () => MarginDecorator
  ]}
/>
```

----------------------------------------

TITLE: Rendering List with Many Items in Vue
DESCRIPTION: This story renders a List component with multiple ListItems in Vue. It uses a render function to define the component's structure, including both the List and ListItem components in the template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_23

LANGUAGE: js
CODE:
```
export const ManyItems = {
  render: () => ({
    components: { List, ListItem },
    template: `
      <List>
        <list-item/>
        <list-item/>
        <list-item/>
      </List>`,
  }),
};
```

----------------------------------------

TITLE: Embedding Story in MDX
DESCRIPTION: This MDX snippet demonstrates how to embed an existing story within an MDX file using the Story component from @storybook/addon-docs. It imports the Story component and SomeComponent, then uses the Story component with an id to reference an existing story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_2

LANGUAGE: mdx
CODE:
```
import { Story } from '@storybook/addon-docs';
import { SomeComponent } from 'somewhere';

# Button

I can embed a story (but not define one, since this file should not contain a `Meta`):

<Story id="some--id" />

And I can also embed arbitrary markdown & JSX in this file.

<SomeComponent prop1="val1" />
```

----------------------------------------

TITLE: Initializing Button Story for Svelte with TS
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines the component and title for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Initializing List Story with One Item in Solid (JS)
DESCRIPTION: This story renders the List component with a single ListItem in Solid using JavaScript. It imports the 'Unchecked' story and renders it within the List component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#_snippet_3

LANGUAGE: js
CODE:
```
import { List } from './List';

//👇 Instead of importing ListItem, we import the stories
import { Unchecked } from './ListItem.stories';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
};

export const OneItem = {
  render: (args) => (
    <List {...args}>
      <Unchecked {...Unchecked.args} />
    </List>
  ),
};
```

----------------------------------------

TITLE: Defining Basic Button Story - Angular
DESCRIPTION: This code defines a basic Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and the Button component itself. The meta object configures the component for Storybook, and the Basic story sets documentation parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Basic: Story = {
  parameters: {
    docs: {
      source: { language: 'tsx' },
    },
  },
};
```

----------------------------------------

TITLE: Configuring FontAwesome Icons in Vue Storybook (TypeScript)
DESCRIPTION: This snippet configures FontAwesome icons for a Vue Storybook. It imports the necessary FontAwesome modules, adds a specific icon to the library, and registers the FontAwesomeIcon component globally. This is the TypeScript version.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-library-decorator.md#_snippet_5

LANGUAGE: typescript
CODE:
```
import { setup, Preview } from '@storybook/vue3-vite';

import { library } from '@fortawesome/fontawesome-svg-core';
import { faPlusSquare as fasPlusSquare } from '@fortawesome/free-solid-svg-icons';

import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';

setup((app) => {
  //👇 Adds the icon to the library so you can use it in your story.
  library.add(fasPlusSquare);
  app.component('font-awesome-icon', FontAwesomeIcon);
});

const preview: Preview = {
  decorators: [
    (story) => ({
      components: { story },
      template: '<div style="margin: 3em;"><story /></div>',
    }),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Defining Svelte Button Story with Render Function (TS)
DESCRIPTION: This snippet defines a Storybook story for a Svelte Button component using a render function with TypeScript. It imports the necessary modules, defines metadata, and sets up a primary story with specific props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_15

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: () => ({
    Component: Button,
    props: {
      primary: true,
      label: 'Button',
    },
  }),
};
```

----------------------------------------

TITLE: Configuring Storybook ESLint Plugin with Flat Config (JavaScript)
DESCRIPTION: Sets up the Storybook ESLint plugin using the flat config style. This configuration imports the plugin and applies its recommended settings.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import storybook from 'eslint-plugin-storybook';

export default [
  // Add more generic rulesets here, such as:
  // js.configs.recommended,
  ...storybook.configs['flat/recommended'],

  // ...
];
```

----------------------------------------

TITLE: Typing into an Element in a Web Component Story (SecondStory)
DESCRIPTION: This story demonstrates how to simulate user typing into a specific element within a web component using `userEvent.type`. It uses `canvas.getByTestId` to locate the element by its test ID and then types 'another value' into it. The `within` function scopes the query to the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_13

LANGUAGE: typescript
CODE:
```
export const SecondStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await userEvent.type(canvas.getByTestId('other-element'), 'another value');
  },
};
```

----------------------------------------

TITLE: Initializing List Component Story - Solid (JS)
DESCRIPTION: This code defines a Storybook story for the List component in Solid using JavaScript. It imports the List and ListItem components. The story renders a List component with three ListItems, using props from the Selected and Unselected stories of ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#_snippet_5

LANGUAGE: js
CODE:
```
import { List } from './List';
import { ListItem } from './ListItem';

//👇 We're importing the necessary stories from ListItem
import { Selected, Unselected } from './ListItem.stories';

export default {
  component: List,
};

export const ManyItems = {
  render: (args) => (
    <List {...args}>
      <ListItem {...Selected.args} />
      <ListItem {...Unselected.args} />
      <ListItem {...Unselected.args} />
    </List>
  ),
};
```

----------------------------------------

TITLE: Initializing Storybook Meta for React Component (TypeScript)
DESCRIPTION: This code initializes the Storybook meta object for a React component using TypeScript, defining the component to be used in the stories. It imports the necessary modules from '@storybook/react-vite' and the component itself, and defines a story that renders the component with a specific prop value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {};

export const WithProp: Story = {
  render: () => <MyComponent prop="value" />,
};

```

----------------------------------------

TITLE: Initializing Viewport Configuration in React (JS)
DESCRIPTION: This snippet initializes the viewport configuration for a React component in Storybook using JavaScript. It imports the component and sets the viewport parameter to use INITIAL_VIEWPORTS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#_snippet_3

LANGUAGE: js
CODE:
```
import { INITIAL_VIEWPORTS } from 'storybook/viewport';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
  parameters: {
    viewport: {
      //👇 Set available viewports for every story in the file
      options: INITIAL_VIEWPORTS,
    },
  },
};
```

----------------------------------------

TITLE: Storybook Story with Click Simulation (Web Components - JS)
DESCRIPTION: This code defines a Storybook story for a web component, including a play function that simulates a click event. It imports necessary modules from 'storybook/test', retrieves the canvas element, and uses userEvent to simulate the click.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#_snippet_10

LANGUAGE: js
CODE:
```
import { fireEvent, userEvent, within } from 'storybook/test';

export default {
  component: 'demo-my-component',
};

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ClickExample = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));
  },
};

export const FireEventExample = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await fireEvent.click(canvas.getByTestId('data-testid'));
  },
};
```

----------------------------------------

TITLE: Initializing Button stories with React using Typescript
DESCRIPTION: This code defines Storybook stories for a React Button component using Typescript. It imports the Button component from './Button' and uses a decorator to add margin around the story. The decorator wraps the Story component with a div that has a margin of 3em.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </div>
    ),
  ],
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Converting storiesOf to CSF 1 using npm
DESCRIPTION: This command uses npx to run the Storybook migration tool, converting stories from storiesOf API to CSF 1 format. It targets TypeScript (.tsx) story files using the specified glob pattern.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-stories-of-to-csf.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
# Convert storiesOf to CSF 1
npx storybook@latest migrate storiesof-to-csf --glob="**/*.stories.tsx" --parser=tsx
```

----------------------------------------

TITLE: Rendering Button with Text Label in Svelte (JavaScript)
DESCRIPTION: This code defines a Storybook story for the Button component in Svelte using JavaScript. It imports the Button component and the action function from Storybook. The story renders the button with a 'Hello' label and an onClick handler that triggers the 'clicked' action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#_snippet_5

LANGUAGE: js
CODE:
```
import { action } from 'storybook/actions';

import Button from './Button.svelte';

export default {
  component: Button,
};

export const Text = {
  render: () => ({
    Component: Button,
    props: {
      label: 'Hello',
    },
    on: {
      click: action('clicked'),
    },
  }),
};
```

----------------------------------------

TITLE: Setting Viewports in Storybook (JavaScript)
DESCRIPTION: This snippet demonstrates how to set available viewports for every story in a file using JavaScript. It imports `INITIAL_VIEWPORTS` from 'storybook/viewport' and sets it as the `options` for the `viewport` parameter in the story's default export.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#_snippet_9

LANGUAGE: js
CODE:
```
import { INITIAL_VIEWPORTS } from 'storybook/viewport';

export default {
  component: 'my-component',
  parameters: {
    viewport: {
      //👇 Set available viewports for every story in the file
      options: INITIAL_VIEWPORTS,
    },
  },
};
```

----------------------------------------

TITLE: Configuring Dark Theme in Storybook
DESCRIPTION: Example showing how to configure Storybook to use a dark theme via the parameters.themes object in main.js. This sets the dark theme as the default option.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/index.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// .storybook/main.js

export default {
  parameters: {
    themes: {
      default: 'dark',
    },
  },
};
```

----------------------------------------

TITLE: Customizing Story Test Name in Storybook
DESCRIPTION: This code snippet demonstrates how to customize the test name for a Storybook story by providing a `name` property. This allows for more descriptive test descriptions that can include spaces and special characters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_9

LANGUAGE: JavaScript
CODE:
```
export const Story = {
  name: 'custom, descriptive name'
};
```

----------------------------------------

TITLE: Defining Web Components Storybook Meta for Page Component (TS)
DESCRIPTION: This code defines the Storybook meta configuration for a Web Components Page component using TypeScript. It imports the Meta type from Storybook's web-components-vite library. The meta object configures the title and component properties and disables auto-generated documentation using tags.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Page',
  component: 'demo-page',
  // 👇 Disable auto-generated documentation for this component
  tags: ['!autodocs'],
};
export default meta;
```

----------------------------------------

TITLE: Button Story Configuration
DESCRIPTION: This code configures a story for a Button component within Storybook. It imports the component and defines metadata for Storybook to use. The Example story sets the 'primary' prop to true and the 'label' prop to 'Button'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-baseline-with-satisfies-story-level.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Example = {
  args: {
    primary: true,
    label: 'Button',
  },
} satisfies Story;
```

----------------------------------------

TITLE: Defining Svelte Story with CSF and Play Function (TypeScript)
DESCRIPTION: This code defines a Svelte Storybook story using Component Story Format (CSF) and a play function, written in TypeScript. It imports necessary modules, defines the meta object, and uses 'userEvent.type' to simulate user input.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#_snippet_5

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, within } from 'storybook/test';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<!--
  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
  to learn more about using the canvasElement to query the DOM
-->
<Story
  name="DelayedStory"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const exampleElement = canvas.getByLabelText('example-element');

    // The delay option sets the amount of milliseconds between characters being typed
    await userEvent.type(exampleElement, 'random string', {
      delay: 100,
    });
```

----------------------------------------

TITLE: Defining Storybook Meta for Svelte Component (TS)
DESCRIPTION: This code defines Storybook metadata for a Svelte component using TypeScript. It imports the component and defines the 'icon' argument with available options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      icon: {
        options: ['arrow-up', 'arrow-down', 'loading'],
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Defining Storybook Component Story
DESCRIPTION: This code defines a basic Storybook story for a component. It imports the YourComponent and exports a default object that configures the component and sets the 'requiredFirst' sort order for controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#_snippet_3

LANGUAGE: js
CODE:
```
import { YourComponent } from './YourComponent';

export default {
  component: YourComponent,
  parameters: { controls: { sort: 'requiredFirst' } },
};
```

----------------------------------------

TITLE: Configuring Storybook Preview with Styled Components Decorator
DESCRIPTION: This snippet demonstrates how to set up a decorator in the Storybook preview file to wrap all stories with a Styled Components ThemeProvider. It also shows examples for Vue Fontawesome and Angular theme providers.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/setup.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { ThemeProvider } from 'styled-components';

export const decorators = [
  (Story) => (
    <ThemeProvider theme={/* Your theme object */}>
      <Story />
    </ThemeProvider>
  ),
];

// If you're using Vue:
/*
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';

library.add(fas);
Vue.component('fa', FontAwesomeIcon);

export const decorators = [(story) => ({
  components: { story },
  template: '<div class="foo-theme"><story /></div>'
})]
*/

// If you're using Angular:
/*
import { moduleMetadata } from '@storybook/angular';
import { ThemeModule } from './theme.module';

export const decorators = [
  moduleMetadata({
    imports: [ThemeModule],
  }),
];
*/
```

----------------------------------------

TITLE: Initializing Svelte Checkbox Story (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Checkbox component using the Component Story Format (CSF). It imports 'defineMeta' from '@storybook/addon-svelte-csf' and the Checkbox component. It defines the component's metadata using 'defineMeta' and exports an 'Unchecked' story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Checkbox from './Checkbox.svelte';

  const { Story } = defineMeta({
    component: Checkbox,
  });
</script>

<Story
  name="Unchecked"
  args={{
    label: 'Unchecked',
  }}
/>
```

----------------------------------------

TITLE: Upgrading Storybook to Version 7 with pnpm
DESCRIPTION: This command upgrades Storybook to version 7 using pnpm. It uses pnpm dlx to execute the upgrade command without installing Storybook globally.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade-to-prior-major.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@^7 upgrade
```

----------------------------------------

TITLE: Initializing Checkbox Story (TS)
DESCRIPTION: This code initializes a Storybook story for a Checkbox component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and the Checkbox component. It defines the component's metadata and exports a default meta object and an 'Unchecked' story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Checkbox } from './Checkbox';

const meta = {
  component: Checkbox,
} satisfies Meta<typeof Checkbox>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Unchecked: Story = {
  args: {
    label: 'Unchecked',
  },
};
```

----------------------------------------

TITLE: Disabling a story in DocsPage
DESCRIPTION: This code snippet demonstrates how to disable a specific story from appearing in the DocsPage by setting the `docs.disable` parameter to `true` on the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_7

LANGUAGE: javascript
CODE:
```
export const foo = () => <Button>foo</Button>;
foo.parameters = { docs: { disable: true } };
```

----------------------------------------

TITLE: Setting Mock Cookies and Headers in Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to set mock cookies and headers within a Storybook story's `beforeEach` hook. It uses the `cookies` and `headers` mocks from `@storybook/your-framework/headers.mock` to simulate a logged-in user in Europe. The `play` function asserts that the mocks are called as expected.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-headers-mock.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Meta, StoryObj } from '@storybook/your-framework';

import { expect, fireEvent, userEvent, within } from 'storybook/test';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { cookies, headers } from '@storybook/your-framework/headers.mock';

import MyForm from './my-form';

const meta = {
  component: MyForm,
} satisfies Meta<typeof MyForm>;

export default meta;
type Story = StoryObj<typeof meta>;

export const LoggedInEurope: Story = {
  async beforeEach() {
    // 👇 Set mock cookies and headers ahead of rendering
    cookies().set('username', 'Sol');
    headers().set('timezone', 'Central European Summer Time');
  },
  async play() {
    // 👇 Assert that your component called the mocks
    await expect(cookies().get).toHaveBeenCalledOnce();
    await expect(cookies().get).toHaveBeenCalledWith('username');
    await expect(headers().get).toHaveBeenCalledOnce();
    await expect(cookies().get).toHaveBeenCalledWith('timezone');
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Meta with Mocked Date - Svelte CSF (JS)
DESCRIPTION: This code defines the meta object for a Storybook story using Svelte CSF with JavaScript. It imports necessary modules, including MockDate, and sets up a beforeEach hook to mock the Date object before each story runs, resetting it afterward. This ensures consistent date values during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MockDate from 'mockdate';

  // 👇 Must include the `.mock` portion of filename to have mocks typed correctly
  import { getUserFromSession } from '#api/session.mock';

  import Page from './Page.svelte';

  const meta = defineMeta({
    component: Page,
    // 👇 Set the value of Date for every story in the file
    async beforeEach() {
      MockDate.set('2024-02-14');

      // 👇 Reset the Date after each story
      return () => {
        MockDate.reset();
      };
    },
  });
</script>

<Story name="Default" play={async ({ canvasElement }) => {
  // ... This will run with the mocked Date
  }}
/>
```

----------------------------------------

TITLE: Initializing Storybook Story for Solid Component (JS)
DESCRIPTION: This code initializes a Storybook story for a Solid component named MyComponent using JavaScript. It imports the component and an image file, then defines a story that renders the component with the image, passing the image source and alt text as props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_3

LANGUAGE: js
CODE:
```
import imageFile from './static/image.png';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

const image = {
  src: imageFile,
  alt: 'my image',
};

export const WithAnImage = {
  render: () => <img src={image.src} alt={image.alt} />,
};
```

----------------------------------------

TITLE: Initializing ButtonGroup stories for Svelte (TS)
DESCRIPTION: This code initializes Storybook stories for the ButtonGroup component in Svelte using TypeScript and the Component Story Format (CSF). It imports necessary modules from '@storybook/addon-svelte-csf', the ButtonGroup component, and Button stories. It defines a 'Pair' story with primary and secondary buttons in a horizontal orientation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_7

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import ButtonGroup from './ButtonGroup.svelte';

  //👇 Imports the Button stories
  import * as ButtonStories from './Button.stories.svelte';

  const { Story } = defineMeta({
    component: ButtonGroup,
  });
</script>

<Story
  name="Pair"
  args={{
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  }}
/>
```

----------------------------------------

TITLE: Configure Storybook Preview with Custom CodeBlock (JS)
DESCRIPTION: This JavaScript snippet configures the Storybook preview to use a custom `CodeBlock` component for rendering code snippets in the documentation. It imports the `CodeBlock` component and sets it as the `code` component within the `docs.components` parameter.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-code-renderer.md#_snippet_0

LANGUAGE: js
CODE:
```
import { CodeBlock } from './CodeBlock';

export default {
  parameters: {
    docs: {
      components: {
        code: CodeBlock,
      },
    },
  },
};
```

----------------------------------------

TITLE: Setting Local IFrame Height in Story Parameters
DESCRIPTION: TypeScript example showing how to configure the iframe height for a specific story using story parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
export const basic = () => ...
basic.parameters = {
  docs: { story: { iframeHeight: '400px' } },
}
```

----------------------------------------

TITLE: Define Storybook Meta and Story (JS)
DESCRIPTION: Defines the metadata for a Storybook story, including the component and argument types. It also defines a story object with a render function that assigns the result of `someFunction` to a variable and passes it as a prop to the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_6

LANGUAGE: js
CODE:
```
import YourComponent from './YourComponent.svelte';

export default {
  component: YourComponent,
  //👇 Creates specific argTypes
  argTypes: {
    propertyA: {
      options: ['Item One', 'Item Two', 'Item Three'],
      control: { type: 'select' }, // Automatically inferred when 'options' is defined
    },
    propertyB: {
      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],
    },
  },
};

const someFunction = (valuePropertyA, valuePropertyB) => {
  // Do some logic here
};

export const ExampleStory = {
  render: (args) => {
    //👇 Assigns the function result to a variable
    const someFunctionResult = someFunction(args.propertyA, args.propertyB);
    return {
      Component: YourComponent,
      props: {
        ...args,
        someProperty: someFunctionResult,
      },
    };
  },
  args: {
    propertyA: 'Item One',
    propertyB: 'Another Item One',
  },
};
```

----------------------------------------

TITLE: Async Story with Play Function in Svelte (CSF)
DESCRIPTION: This Svelte snippet defines a Storybook story with a play function that interacts with the component on the canvas. It uses `within` to scope the query to the canvas element and `findByRole` to wait for a button to be rendered before interacting with it, demonstrating asynchronous testing in a Svelte component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-query-findby.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, within } from 'storybook/test';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<!--
  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
  to learn more about using the canvasElement to query the DOM
-->
<Story
  name="AsyncExample"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // Other steps

    // Waits for the component to be rendered before querying the element
    await canvas.findByRole('button', { name: / button label/i });
  }} />
```

----------------------------------------

TITLE: Debugging Webpack Configuration in Development Mode
DESCRIPTION: Command to debug Storybook's Webpack configuration in development mode. This helps in examining the configuration being used during development.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
npx storybook dev --debug-webpack
```

----------------------------------------

TITLE: Defining Button Story (JS/JSX)
DESCRIPTION: This code defines a Storybook story for a Button component. It imports the Button component and defines a default export with the component. It then creates a primary story with a 'primary' variant.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Primary = {
  args: {
    variant: 'primary',
  },
};

```

----------------------------------------

TITLE: Configuring Storybook Component with Next.js Navigation (JS)
DESCRIPTION: This JavaScript snippet configures a Storybook story for the NavigationBasedComponent. It sets the component and specifies Next.js parameters, including enabling the app directory and defining navigation segments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-segments-override-in-meta.md#_snippet_0

LANGUAGE: js
CODE:
```
import NavigationBasedComponent from './NavigationBasedComponent';

export default {
  component: NavigationBasedComponent,
  parameters: {
    nextjs: {
      appDirectory: true,
      navigation: {
        segments: ['dashboard', 'analytics'],
      },
    },
  },
};
```

----------------------------------------

TITLE: Initializing List Story with Angular
DESCRIPTION: This code initializes a Storybook story for the List component in Angular. It imports necessary modules from @storybook/angular and @angular/common, and configures the component's metadata, including declarations and imports. The Empty story renders the List component within a template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { moduleMetadata } from '@storybook/angular';

import { CommonModule } from '@angular/common';

import { List } from './list.component';

const meta: Meta<List> = {
  component: List,
  decorators: [
    moduleMetadata({
      declarations: [List],
      imports: [CommonModule],
    }),
  ],
};

export default meta;
type Story = StoryObj<List>;

// Always an empty list, not super interesting
export const Empty: Story = {
  render: (args) => ({
    props: args,
    template: `<app-list></app-list>`,
  }),
};

```

----------------------------------------

TITLE: Configuring cwd option for Vite
DESCRIPTION: This configures the working directory for the coverage tests. It defaults to `process.cwd()` if not specified.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
options: { istanbul: { cwd: process.cwd(),}}
```

----------------------------------------

TITLE: Adding SWC Compiler Addon with yarn
DESCRIPTION: This snippet shows how to add the Webpack5 Compiler SWC addon using yarn package manager. It employs `yarn dlx`, similar to `npx` or `pnpm dlx`, to execute the latest `storybook` package and include the `@storybook/addon-webpack5-compiler-swc`. Pre-requisite includes having yarn and a Storybook project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-compiler-swc-auto-install.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
yarn dlx storybook@latest add @storybook/addon-webpack5-compiler-swc
```

----------------------------------------

TITLE: Configuring Storybook Preview with Tags (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure a Storybook preview in TypeScript, specifically setting the 'autodocs' tag to apply to all stories. It imports the Preview type from the Storybook framework and exports the preview configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-preview.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  // ...rest of preview
  /*
   * All stories in your project will have these tags applied:
   * - autodocs
   * - dev (implicit default)
   * - test (implicit default)
   */
  tags: ['autodocs'],
};

export default preview;
```

----------------------------------------

TITLE: Configuring argTypes for Button Component (TS Web Components)
DESCRIPTION: This code configures the argTypes for a Button component in Storybook using TypeScript for web components. It defines the 'arrow' property with options, mapping, and labels for a select control, allowing users to select arrow directions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';

const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };

const meta: Meta = {
  component: 'demo-button',
  argTypes: {
    arrow: {
      options: Object.keys(arrows), // An array of serializable values
      mapping: arrows, // Maps serializable option values to complex arg values
      control: {
        type: 'select', // Type 'select' is automatically inferred when 'options' is defined
        labels: {
          // 'labels' maps option values to string labels
          ArrowUp: 'Up',
          ArrowDown: 'Down',
          ArrowLeft: 'Left',
          ArrowRight: 'Right',
        },
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Installing Storybook React Webpack5 with npm (Shell)
DESCRIPTION: This shell command installs the @storybook/react-webpack5 package as a development dependency using npm. It is intended for React projects that want to use Storybook with Webpack5 integration. Requires npm to be installed, and should be run in the project's root directory. Adds the package under devDependencies in package.json; no additional parameters are required.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev @storybook/react-webpack5
```

----------------------------------------

TITLE: Rendering Button with Text Label in Vue (JavaScript)
DESCRIPTION: This code defines a Storybook story for the Button component in Vue using JavaScript. It imports the Button component and the action function from Storybook. The story renders the button with a 'Hello' label and an onClick handler that triggers the 'clicked' action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#_snippet_7

LANGUAGE: js
CODE:
```
import { action } from 'storybook/actions';

import Button from './Button.vue';

export default {
  component: Button,
};

export const Text = {
  render: () => ({
    components: { Button },
    setup() {
      return {
        onClick: action('clicked'),
      };
    },
    template: '<Button label="Hello" @click="onClick" />',
  }),
};
```

----------------------------------------

TITLE: Configuring Button Component Meta in Storybook (Common - JS)
DESCRIPTION: This code configures the metadata for a Button component in Storybook using JavaScript. It defines the component and sets up argument types (argTypes) to control the component's properties, specifically allowing either a label or an image to be passed, but not both. The 'if' property within 'argTypes' is used to conditionally display the 'label' or 'image' control based on the presence of the other.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  argTypes: {
    // Button can be passed a label or an image, not both
    label: {
      control: 'text',
      if: { arg: 'image', truthy: false },
    },
    image: {
      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },
      if: { arg: 'label', truthy: false },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Preview with SCSS Syntax Highlighting (TS)
DESCRIPTION: This TypeScript snippet configures the Storybook preview. It imports and registers SCSS language support for syntax highlighting using `react-syntax-highlighter`. It also defines parameters for control matchers, specifically for color and date properties, to customize the Storybook UI.  It imports the Preview type from the framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-register-language-globally.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';
import scss from 'react-syntax-highlighter/dist/esm/languages/prism/scss';

// Registers and enables scss language support
SyntaxHighlighter.registerLanguage('scss', scss);

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Custom Snapshot Serializer
DESCRIPTION: Configuration setup for enabling a custom snapshot serializer to handle specific formatting requirements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  snapshotSerializers: ['./snapshot-serializer.js']
};
```

----------------------------------------

TITLE: Importing Source Block
DESCRIPTION: Demonstrates how to import the `Source` component from `@storybook/addon-docs/blocks` in a JavaScript environment. This import is necessary to use the `Source` block within your Storybook documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-source.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import { Source } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Testing React Button Story
DESCRIPTION: This test suite verifies the rendering of the primary button story with default arguments and overridden props using React Testing Library and Vitest. It uses composeStory to integrate the story with testing utilities.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-compose-story.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { vi, test, expect } from 'vitest';
import { screen } from '@testing-library/react';
import { composeStory } from '@storybook/react-vite';

import meta, { Primary as PrimaryStory } from './Button.stories';

// Returns a story which already contains all annotations from story, meta and global levels
const Primary = composeStory(PrimaryStory, meta);

test('renders primary button with default args', async () => {
  await Primary.run();

  const buttonElement = screen.getByText('Text coming from args in stories file!');
  expect(buttonElement).not.toBeNull();
});

test('renders primary button with overridden props', async () => {
  await Primary.run({ args: { ...Primary.args, label: 'Hello world' } });

  const buttonElement = screen.getByText(/Hello world/i);
  expect(buttonElement).not.toBeNull();
});
```

----------------------------------------

TITLE: Decorating Story with HTML in TypeScript
DESCRIPTION: This snippet demonstrates how to use decorators in Storybook to wrap a story with custom HTML using TypeScript. It imports necessary types from '@storybook/web-components-vite' and uses lit-html to define the HTML structure and apply styling to the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Primary: Story = {
  decorators: [(story) => html`<div style="margin: 3em">${story()}</div>`],
};
```

----------------------------------------

TITLE: Defining Story with Mocked Dependency (Common, TS)
DESCRIPTION: This snippet defines a Storybook story for a component named 'Page' using TypeScript. It imports necessary modules from '@storybook/your-framework' and mocks the 'getUserFromSession' function to return a predefined user object before each story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { getUserFromSession } from '#api/session.mock';

import { Page } from './Page';

const meta = {
  component: Page,
} satisfies Meta<typeof Page>;

export default meta;

type Story = StoryObj<typeof meta>;

export const Default: Story = {
  async beforeEach() {
    // 👇 Set the return value for the getUserFromSession function
    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });
  },
};
```

----------------------------------------

TITLE: Migrating from @storybook/testing-library to @storybook/test
DESCRIPTION: This code snippet illustrates how to migrate from the deprecated @storybook/testing-library package to @storybook/test. It involves changing the import statement for userEvent.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_48

LANGUAGE: typescript
CODE:
```
- import { userEvent } from '@storybook/testing-library';
+ import { userEvent } from '@storybook/test';
```

----------------------------------------

TITLE: Configuring Storybook Main Config in JavaScript
DESCRIPTION: JavaScript configuration for Storybook's main configuration file, enabling Svelte CSF addon with legacy template support. Exports a configuration object that sets up the necessary addons for Svelte support.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-options.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Other configuration
  addons: [
    {
      name: '@storybook/addon-svelte-csf',
      options: {
        legacyTemplate: true, // Enables the legacy template syntax
      },
    },
  ],
};
```

----------------------------------------

TITLE: Exporting Storybook Addon Configurations in JavaScript
DESCRIPTION: This snippet imports and re-exports configuration functions for webpack, Vite, and Babel. These functions are typically used to customize the build process in Storybook addons.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-local-preset.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { webpackFinal as webpack } from './webpack/webpackFinal';
import { viteFinal as vite } from './vite/viteFinal';
import { babelDefault as babel } from './babel/babelDefault';

export const webpackFinal = webpack;
export const viteFinal = vite;
export const babelDefault = babel;
```

----------------------------------------

TITLE: Configuring Button stories for Svelte CSF (JS) - Simple
DESCRIPTION: This snippet configures Storybook stories for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and defines the component and metadata for the story. The tags array specifies that the stories should be included in the documentation page but not appear in Storybook's sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  /*
   * All stories in this file will:
   * - Be included in the docs page
   * - Not appear in Storybook's sidebar
   */
  tags: ['autodocs', '!dev'],
};
```

----------------------------------------

TITLE: Initializing Button Storybook Story for Web Components
DESCRIPTION: This code initializes a Storybook story for a Button component in Web Components. It defines metadata for the component and exports primary and secondary stories with different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
};

export const Primary = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary = {
  args: {
    ...Primary.args,
    primary: false,
  },
};
```

----------------------------------------

TITLE: Importing Global Styles in Storybook Preview
DESCRIPTION: This example shows how to import global styles in the `.storybook/preview.js` file. This ensures that the global styles are applied to all stories in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_18

LANGUAGE: javascript
CODE:
```
import 'styles/globals.scss';

```

----------------------------------------

TITLE: Configuring Button Component Metadata with Decorator (Web Components, TypeScript)
DESCRIPTION: This TypeScript snippet configures the metadata for a button component in Storybook, specifically for a web components renderer. It imports the html function from lit and defines a decorator that applies a margin around the story using a template literal. The metadata includes the component itself and the decorator function, utilizing TypeScript's type annotations for better type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_14

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

const meta: Meta = {
  component: 'demo-button',
  decorators: [(story) => html`<div style="margin: 3em">${story()}</div>`],
};

export default meta;
type Story = StoryObj;

export const Example: Story = {};
```

----------------------------------------

TITLE: Configuring Component Meta with ArgTypes in Svelte with Typescript
DESCRIPTION: This code configures the metadata for a Storybook story in Svelte using TypeScript. It imports the component and sets up the story, disabling the 'foo' property from appearing in the UI by setting 'disable: true' within the 'table' property of the 'argTypes' configuration. It uses satisfies Meta to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import YourComponent from './YourComponent.svelte';

const meta = {
  component: YourComponent,
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      table: {
        disable: true,
      },
    },
  },
} satisfies Meta<typeof YourComponent>;

export default meta;
```

----------------------------------------

TITLE: Click Example Storybook Play Function (Angular)
DESCRIPTION: This play function simulates a user clicking a button within a Storybook story using the userEvent.click method. It queries the canvas for a button with a specific role and then triggers a click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#_snippet_0

LANGUAGE: ts
CODE:
```
export const ClickExample: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));
  },
};
```

----------------------------------------

TITLE: Composing Primary Story in JavaScript for Storybook
DESCRIPTION: This snippet demonstrates how to compose a primary story using the composeStory function from Storybook. It combines the Primary story with the default export data from the stories object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/__mocks__/composeStories.txt#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
const Primary = composeStory(stories.Primary, stories.default)
```

----------------------------------------

TITLE: Initializing Storybook Meta for Svelte Component (TS)
DESCRIPTION: This code initializes the Storybook meta object for a Svelte component in TypeScript. It imports the Meta type from Storybook and the YourComponent. It then defines the component and sets the 'requiredFirst' sort order for controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import YourComponent from './YourComponent.svelte';

const meta = {
  component: YourComponent,
  parameters: { controls: { sort: 'requiredFirst' } },
} satisfies Meta<typeof YourComponent>;

export default meta;
```

----------------------------------------

TITLE: Setting Query Parameters in Storybook Addon Registration
DESCRIPTION: Shows how to register a custom Storybook addon and configure URL query parameters. The code sets two example parameters that will be available in the addon's URL parameters. Uses the addons.register API to initialize the addon and api.setQueryParams to define the parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-setqueryparams.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
addons.register('my-organisation/my-addon', (api) => {
  api.setQueryParams({
    exampleParameter: 'Sets the example parameter value',
    anotherParameter: 'Sets the another parameter value',
  });
});
```

----------------------------------------

TITLE: Initializing Button Story - Web Components (TS)
DESCRIPTION: This code initializes a Storybook story for a Web Components button using TypeScript. It imports the Meta type from Storybook and defines the component as 'demo-button' within the meta object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_14

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Button',
  component: 'demo-button',
};

export default meta;
```

----------------------------------------

TITLE: Highlighting Story Elements in Vue (JS)
DESCRIPTION: This snippet demonstrates how to highlight specific elements within a Vue Storybook story using the `useChannel` hook and the `HIGHLIGHT` event. It uses a decorator to wrap the story and emit the highlight event with specified CSS selectors, enabling visual emphasis on particular parts of the component during development.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight.md#_snippet_5

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.vue';

export default {
  component: MyComponent,
};

export const Highlighted = {
  decorators: [
    () => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
      });
      return {
        template: '<story />',
      };
    },
  ],
};
```

----------------------------------------

TITLE: Building Storybook with Webpack Debugging (npm)
DESCRIPTION: This command builds the Storybook project using npm and enables webpack debugging. The `--debug-webpack` flag provides more detailed output from webpack during the build process, which can be helpful for diagnosing configuration issues.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-debug-webpack-prod.md#_snippet_0

LANGUAGE: shell
CODE:
```
npm run build-storybook -- --debug-webpack
```

----------------------------------------

TITLE: Setting Global Default iFrame Height in Preview.js
DESCRIPTION: TypeScript configuration to update the default iframe height for all stories in the preview.js configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_5

LANGUAGE: ts
CODE:
```
export const parameters = { docs: { story: { iframeHeight: '400px' } } };
```

----------------------------------------

TITLE: Configuring Web Components Story for Example Component (TS)
DESCRIPTION: This snippet configures a Storybook story for a web component named 'demo-example' using TypeScript. It imports the necessary modules from '@storybook/web-components-vite' and defines the component and its argument types, specifically describing the 'value' property of a slider.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-example',
  argTypes: {
    value: {
      description: 'The value of the slider',
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Vitest Setup for Storybook with Svelte
DESCRIPTION: This snippet configures Vitest for use with Storybook in a Svelte project. It imports necessary dependencies, sets project annotations, and executes Storybook's beforeAll hook. A note is included for Sveltekit users regarding the correct import statement.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations-simple.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { beforeAll } from 'vitest';
// 👇 If you're using Sveltekit, import from @storybook/sveltekit
import { setProjectAnnotations } from '@storybook/svelte';
import * as previewAnnotations from './preview';

const annotations = setProjectAnnotations([previewAnnotations]);

// Run Storybook's beforeAll hook
beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Defining Svelte Stories with CSF (TypeScript)
DESCRIPTION: This code defines Storybook stories for a Svelte component using Component Story Format (CSF). It imports the necessary modules from '@storybook/addon-svelte-csf' and the component itself, and defines two stories: 'Basic' and 'WithProp'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_7

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story name="Basic">
  <MyComponent />
</Story>

<Story name="WithProp">
  <MyComponent prop="value" />
</Story>

```

----------------------------------------

TITLE: Installing Storybook Addon Docs for Ember
DESCRIPTION: Command to add the Storybook addon-docs package to your Ember project using yarn.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
yarn add -D @storybook/addon-docs
```

----------------------------------------

TITLE: Setting Storybook Theme for Docs
DESCRIPTION: Example of applying the dark theme specifically to the Storybook Docs in the preview.js configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/theming.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { themes } from '@storybook/theming';

// or global addParameters
export const parameters = {
  docs: {
    theme: themes.dark,
  },
};
```

----------------------------------------

TITLE: Initializing Angular Storybook Story
DESCRIPTION: This code initializes a Storybook story for an Angular component named MyComponent. It imports the necessary modules from '@storybook/angular' and defines the component, title, and default arguments for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  component: MyComponent,
  title: 'components/MyComponent/MyComponent',
};

export default meta;
type Story = StoryObj<MyComponent>;

export const Default: Story = {
  args: {
    something: 'Something else',
  },
};

```

----------------------------------------

TITLE: Configuring Storybook Addons in main.js
DESCRIPTION: Configuration to add the Storybook Docs addon to the Storybook instance by updating the main.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  addons: ['@storybook/addon-docs'],
};
```

----------------------------------------

TITLE: Configuring Button Component Story - Web Components TS
DESCRIPTION: This code configures the story for a Button component in Storybook using TypeScript for web components. It defines the component and its argTypes, which control the properties that can be customized in the Storybook UI, such as backgroundColor, primary, label, onClick, and size. The argTypes are organized into categories like Colors, Text, Events, and Sizes for better organization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-categories.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  argTypes: {
    // Assigns the argTypes to the Colors category
    backgroundColor: {
      control: 'color',
      table: {
        category: 'Colors',
      },
    },
    primary: {
      table: {
        category: 'Colors',
      },
    },
    // Assigns the argType to the Text category
    label: {
      table: {
        category: 'Text',
      },
    },
    // Assigns the argType to the Events category
    onClick: {
      table: {
        category: 'Events',
      },
    },
    // Assigns the argType to the Sizes category
    size: {
      table: {
        category: 'Sizes',
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Global Decorators Configuration for Storybook
DESCRIPTION: Example of how to add global decorators and parameters to Storybook in the .storybook/preview.js configuration file. This affects all stories, including those defined in MDX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { addDecorator, addParameters } from '@storybook/react';

addDecorator(...);
addParameters({ ... });
```

----------------------------------------

TITLE: Configuring Viewports in Storybook Preview (JavaScript)
DESCRIPTION: This JavaScript snippet configures the Storybook preview to include viewport options using `INITIAL_VIEWPORTS`. It sets the initial global viewport to 'ipad' with `isRotated` set to false, allowing for consistent testing across different screen sizes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-options-in-preview.md#_snippet_0

LANGUAGE: js
CODE:
```
import { INITIAL_VIEWPORTS } from 'storybook/viewport';

export default {
  parameters: {
    viewport: {
      options: INITIAL_VIEWPORTS,
    },
  },
  initialGlobals: {
    viewport: { value: 'ipad', isRotated: false },
  },
};
```

----------------------------------------

TITLE: Updating Storybook Svelte configuration to use Vite
DESCRIPTION: This code snippet demonstrates how to update your Storybook configuration to use `@storybook/svelte-vite` instead of `@storybook/svelte-webpack5`. It shows the change in the `framework.name` property in `.storybook/main.js` or `.storybook/main.ts`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_21

LANGUAGE: diff
CODE:
```
export default {
  framework: {
-    name: '@storybook/svelte-webpack5'
+    name: '@storybook/svelte-vite',
  },
  // ...other configuration
};
```

----------------------------------------

TITLE: Initializing Storybook Project Annotations for Vue
DESCRIPTION: This snippet initializes Storybook project annotations for a Vue project using Vite. It imports necessary modules from Storybook and Vitest, merges preview and addon annotations, and runs Storybook's beforeAll hook. This ensures that Storybook is properly initialized with the necessary settings and configurations before running stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { beforeAll } from 'vitest';
import { setProjectAnnotations } from '@storybook/vue3-vite';
// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this
import * as addonAnnotations from 'my-addon/preview';
import * as previewAnnotations from './.storybook/preview';

const annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);

// Run Storybook's beforeAll hook
beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Creating Angular Storybook Story
DESCRIPTION: Defines a Storybook story for an Angular component. It imports the necessary modules from '@storybook/angular' and the component itself. The meta object configures the component for Storybook, and the ExampleStory defines a specific story with arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-env-variables.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const ExampleStory: Story = {
  args: {
    propertyA: process.env.STORYBOOK_DATA_KEY,
  },
};
```

----------------------------------------

TITLE: Registering Panel Addon in Storybook Manager
DESCRIPTION: Creates a custom panel addon using Storybook's addon API. The code registers a new panel with a title and renders a React component within the AddonPanel wrapper. Uses the types.PANEL type to specify the UI element type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-panel-example.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { AddonPanel } from 'storybook/internal/components';

import { useGlobals, addons, types } from 'storybook/manager-api';

addons.register('my/panel', () => {
  addons.add('my-panel-addon/panel', {
    title: 'Example Storybook panel',
    //👇 Sets the type of UI element in Storybook
    type: types.PANEL,
    render: ({ active }) => (
      <AddonPanel active={active}>
        <h2>I'm a panel addon in Storybook</h2>
      </AddonPanel>
    ),
  });
});
```

----------------------------------------

TITLE: New Storybook Global Parameters Configuration (JavaScript)
DESCRIPTION: This snippet demonstrates the new way to configure Storybook options using global parameters in Storybook 5.x. It shows how to set the theme, fullscreen mode, panel position, and tool visibility.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_260

LANGUAGE: JavaScript
CODE:
```
import { create } from "@storybook/theming/create";
addParameters({
  options: {
    theme: create({
      base: "light",
      brandTitle: "Storybook",
      brandUrl: "https://storybook.js.org",
      // To control appearance:
      // brandImage: 'http://url.of/some.svg',
    }),
    isFullscreen: false,
    panelPosition: "right",
    isToolshown: true,
  },
});
```

----------------------------------------

TITLE: Initializing Viewport Configuration in Svelte (JS)
DESCRIPTION: This snippet initializes the viewport configuration for a Svelte component in Storybook using JavaScript. It imports the component and sets the viewport parameter to use INITIAL_VIEWPORTS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { INITIAL_VIEWPORTS } from 'storybook/viewport';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
    parameters: {
      viewport: {
        //👇 Set available viewports for every story in the file
        options: INITIAL_VIEWPORTS,
      },
    },
  });
</script>
```

LANGUAGE: js
CODE:
```
import { INITIAL_VIEWPORTS } from 'storybook/viewport';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
  parameters: {
    viewport: {
      //👇 Set available viewports for every story in the file
      options: INITIAL_VIEWPORTS,
    },
  },
};
```

----------------------------------------

TITLE: Defining Svelte Story with Mocked Dependency (CSF, TS)
DESCRIPTION: This snippet defines a Storybook story for a Svelte component named 'Page' using TypeScript. It imports necessary modules from '@storybook/your-framework' and mocks the 'getUserFromSession' function to return a predefined user object before each story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { getUserFromSession } from '#api/session.mock';

import Page from './Page.svelte';

const meta = {
  component: Page,
} satisfies Meta<typeof Page>;

export default meta;

type Story = StoryObj<typeof meta>;

export const Default: Story = {
  async beforeEach() {
    // 👇 Set the return value for the getUserFromSession function
    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });
  },
};
```

----------------------------------------

TITLE: Configure Storybook Framework with Web Components Vite in JavaScript
DESCRIPTION: This code configures Storybook to use the Web Components Vite framework by setting the framework property to '@storybook/web-components-vite'. This enables Storybook to render and manage Web Components using Vite.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-add-framework.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  framework: '@storybook/web-components-vite', // 👈 Add this
};
```

----------------------------------------

TITLE: Docs-only stories
DESCRIPTION: Configures a story to be docs-only by enabling the `autodocs` tag and removing the `dev` tag. This ensures the story appears only in the documentation page and not in the Storybook sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/tags.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Example/Button',
  component: Button,
  tags: ['autodocs', '!dev'],
};

```

----------------------------------------

TITLE: Defining Web Components Story with Mocked Dependency (TS)
DESCRIPTION: This snippet defines a Storybook story for a web component named 'my-page' using TypeScript. It imports necessary modules from '@storybook/web-components-vite' and mocks the 'getUserFromSession' function to return a predefined user object before each story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { getUserFromSession } from '#api/session.mock';

const meta: Meta = {
  component: 'my-page',
};
export default meta;

type Story = StoryObj;

export const Default: Story = {
  async beforeEach() {
    // 👇 Set the return value for the getUserFromSession function
    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });
  },
};
```

----------------------------------------

TITLE: Storybook Init Skip Install
DESCRIPTION: This example shows how to skip the dependency installation step, used when you need to configure Storybook manually.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_47

LANGUAGE: shell
CODE:
```
storybook init --skip-install
```

----------------------------------------

TITLE: Typing with Delay in Storybook (Common)
DESCRIPTION: This code snippet demonstrates how to simulate typing into an input field with a delay in a Storybook story. It uses `userEvent.type` to simulate typing 'random string' into the element labeled 'example-element' and 'another random string' into 'another-example-element', with a delay of 100ms between each character.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const DelayedStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const exampleElement = canvas.getByLabelText('example-element');

    // The delay option sets the amount of milliseconds between characters being typed
    await userEvent.type(exampleElement, 'random string', {
      delay: 100,
    });

    const AnotherExampleElement = canvas.getByLabelText('another-example-element');
    await userEvent.type(AnotherExampleElement, 'another random string', {
      delay: 100,
    });
  },
};
```

----------------------------------------

TITLE: Overriding Story Properties in Tests
DESCRIPTION: Shows how to override global Storybook configurations for specific tests using composeStory and composeStories functions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { render, screen } from '@testing-library/react';
import { composeStory } from '@storybook/react';
import Meta, { Primary } from './Button.stories';

const ButtonWithCustomProps = composeStory(Primary, Meta, {
  args: {
    label: 'Hello world',
  },
  decorators: [
    (StoryFn) => (
      <div style={{ margin: '3em' }}>
        <StoryFn />
      </div>
    ),
  ],
});

test('renders button with overridden props', () => {
  render(<ButtonWithCustomProps />);
  expect(screen.getByRole('button')).toHaveTextContent(/hello world/i);
});
```

----------------------------------------

TITLE: Configuring Button Stories for Web Components
DESCRIPTION: This snippet configures Storybook stories for a Web Components Button. It imports necessary modules from '@storybook/web-components-vite' and defines stories for 'Basic' and 'Primary' button states, setting the 'primary' argument to true for the 'Primary' story. The component is referenced as 'demo-button'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/typed-csf-file.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Button',
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Basic: Story = {};

export const Primary: Story = {
  args: {
    primary: true,
  },
};
```

----------------------------------------

TITLE: Implementing Storybook Play Function for Web Components in TypeScript
DESCRIPTION: This snippet shows how to create a Storybook play function for Web Components using TypeScript. It demonstrates type definitions and simulates user interactions with a custom element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components';

import { userEvent, within } from 'storybook/test';

const meta: Meta = {
  title: 'MyComponent',
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted: Story = {
  play: async ({ args, canvasElement, step }) => {
    const canvas = within(canvasElement);

    await step('Enter email and password', async () => {
      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
      await userEvent.type(canvas.getByTestId('password'), 'supersecret');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button'));
    });
  },
};
```

----------------------------------------

TITLE: Defining Primary Button Story (JavaScript)
DESCRIPTION: This snippet defines a primary button story in Storybook using JavaScript. It sets the documentation parameters, including a story description that overrides the comments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#_snippet_8

LANGUAGE: js
CODE:
```
export const Primary = {
  parameters: {
    docs: {
      description: {
        story: 'Another description on the story, overriding the comments',
      },
    },
  },
};
```

----------------------------------------

TITLE: Testing Button Component with React
DESCRIPTION: This test suite uses Storybook's composeStories to test the Button component in a React environment. It imports stories and component annotations from the Button.stories file and renders the Primary story with default args and overridden props, asserting that the correct text is displayed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-compose-stories.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@jest/globals';
import { render, screen } from '@testing-library/react';
// 👉 Using Next.js? Import from @storybook/nextjs instead
import { composeStories } from '@storybook/react-vite';

// Import all stories and the component annotations from the stories file
import * as stories from './Button.stories';

// Every component that is returned maps 1:1 with the stories,
// but they already contain all annotations from story, meta, and project levels
const { Primary, Secondary } = composeStories(stories);

test('renders primary button with default args', () => {
  render(<Primary />);
  const buttonElement = screen.getByText('Text coming from args in stories file!');
  expect(buttonElement).not.toBeNull();
});

test('renders primary button with overridden props', () => {
  // You can override props and they will get merged with values from the story's args
  render(<Primary>Hello world</Primary>);
  const buttonElement = screen.getByText(/Hello world/i);
  expect(buttonElement).not.toBeNull();
});
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: This TypeScript code configures Storybook, specifying the framework, stories, and addons. It imports the StorybookConfig type and defines the configuration object. The stories property defines the location of story files using glob patterns, and the addons property configures addons for documentation, testing with Vitest, and code coverage. The build section allows customization, such as disabling addons during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-addon-optimized-config.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: ['@storybook/addon-docs', '@storybook/addon-vitest', '@storybook/addon-coverage'],
  build: {
    test: {
      disabledAddons: ['@storybook/addon-docs'],
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Disabling Telemetry for Storybook Remove Command
DESCRIPTION: The `--disable-telemetry` option disables Storybook's telemetry when using the `storybook remove` command. This prevents usage data from being sent to Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_68

LANGUAGE: Shell
CODE:
```
storybook remove --disable-telemetry
```

----------------------------------------

TITLE: Configuring Button Story for Angular
DESCRIPTION: This snippet configures a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines the component and a primary story with the 'primary' argument set to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-baseline.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

//👇 Throws a type error if the args don't match the component props
export const Primary: Story = {
  args: {
    primary: true,
  },
};
```

----------------------------------------

TITLE: Initializing Theme State with initializeThemeState
DESCRIPTION: A helper function that registers the available themes and default theme with the addon state. Used when creating custom theme decorators to ensure proper theme selection in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { DecoratorHelpers } from '@storybook/addon-themes';

const { initializeThemeState } = DecoratorHelpers;

export const myCustomDecorator = ({ themes, defaultState, ...rest }) => {
  initializeThemeState(Object.keys(themes), defaultTheme);

  return (storyFn, context) => {
    // Snipped
  };
};
```

----------------------------------------

TITLE: Initializing Button Story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It defines the component's metadata, including title, component, and parameters for Storybook addons. The Basic story renders the Button component with the text 'hello'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
  //👇 Creates specific parameters for the story
  parameters: {
    myAddon: {
      data: 'this data is passed to the addon',
    },
  },
};

export default meta;
type Story = StoryObj<Button>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Basic: Story = {
  render: () => ({
    template: `<app-button>hello</<app-button>`,
  }),
};
```

----------------------------------------

TITLE: Initializing Apollo Client for Storybook - Typescript
DESCRIPTION: This snippet initializes an Apollo Client with a mocked GraphQL endpoint and configures default options for query and watchQuery to disable caching and handle errors. This client is used to provide a consistent testing environment for the DocumentScreen component in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';

const mockedClient = new ApolloClient({
  uri: 'https://your-graphql-endpoint',
  cache: new InMemoryCache(),
  defaultOptions: {
    watchQuery: {
      fetchPolicy: 'no-cache',
      errorPolicy: 'all',
    },
    query: {
      fetchPolicy: 'no-cache',
      errorPolicy: 'all',
    },
  },
});
```

----------------------------------------

TITLE: Defining Svelte Button Story (CSF)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using Component Story Format (CSF). It imports the Button component and defines a default export with the component. It then creates a primary story with a 'primary' variant.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

export const Primary = {
  args: {
    variant: 'primary',
  },
};

```

----------------------------------------

TITLE: Configuring A11y Parameters in Vue CSF with JavaScript
DESCRIPTION: Example of configuring accessibility parameters for a Vue component using Component Story Format (CSF) in JavaScript. Shows how to specify accessibility testing rules, elements to test, and manual control options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
import MyComponent from './MyComponent.vue';

export default {
  component: MyComponent,
};

export const ExampleStory = {
  parameters: {
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Configuring TypeScript Props Generation in Storybook
DESCRIPTION: Updates the .storybook/main.js file to use react-docgen-typescript for generating props documentation from TypeScript types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
export default {
  typescript: {
    // also valid 'react-docgen' | false
    reactDocgen: 'react-docgen-typescript',
  },
};
```

----------------------------------------

TITLE: Configure Storybook Loaders in JavaScript
DESCRIPTION: Configures Storybook loaders to fetch user data from a JSONPlaceholder API endpoint. This allows stories to access and display the fetched user data. The loader function uses `fetch` to retrieve the data and returns it as a property within an object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-loader.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  loaders: [
    async () => ({
      currentUser: await (await fetch('https://jsonplaceholder.typicode.com/users/1')).json(),
    }),
  ],
};
```

----------------------------------------

TITLE: Initializing Storybook with npm
DESCRIPTION: This command uses npx to run the Storybook initialization script for version 7 or higher using npm as the package manager. It sets up Storybook in the current project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-init-v7.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@^7 init
```

----------------------------------------

TITLE: Creating Empty List Story
DESCRIPTION: Creates a Storybook story for rendering an empty list. It uses the `ListTemplate` and sets the `items` argument to an empty array. This story demonstrates the component's behavior when no items are present.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_12

LANGUAGE: typescript
CODE:
```
export const Empty: Story = {
  ...ListTemplate,
  args: {
    items: [],
  },
};
```

----------------------------------------

TITLE: Scroll Element Into View and Highlight in Storybook
DESCRIPTION: Emits a `SCROLL_INTO_VIEW` event to scroll an element into view and highlight it in Storybook. The event payload contains a `selector` property to target the element to scroll into view. When the element is visible, it will be highlighted briefly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
import { useEffect } from '@storybook/client-api';

export const ScrollIntoView = () => {
  useEffect(() => {
    const channel = window.__STORYBOOK_ADDONS_CHANNEL__;
    channel.emit('SCROLL_INTO_VIEW', { selector: '#root > div' });

    return () => channel.emit('REMOVE_HIGHLIGHT');
  }, []);

  return (
    <div style={{ padding: '3rem' }}>
      <p>Highlighting the outer div</p>
    </div>
  );
};

ScrollIntoView.storyName = 'scroll into view';

```

----------------------------------------

TITLE: Customizing Vite Configuration in Storybook's main.js|ts
DESCRIPTION: This snippet demonstrates how to use the viteFinal option to customize Vite configuration in Storybook. It shows how to modify the Vite config object, including adding plugins and adjusting settings based on the build type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-vite-final.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/react-vite';
import { mergeConfig } from 'vite';

const config: StorybookConfig = {
  // Your existing Storybook configuration
  viteFinal: async (config, { configType }) => {
    // Merge custom configuration into the default config
    return mergeConfig(config, {
      // Use the same configuration for both dev and build
      build: {
        sourcemap: true,
      },
      // Add dependencies to pre-optimization
      optimizeDeps: {
        include: ['storybook-dark-mode'],
      },
      // Add custom plugins
      plugins: [
        // Example: add a custom plugin based on configType
        configType === 'PRODUCTION' && customVitePluginForProduction(),
      ],
    });
  },
};

export default config;
```

----------------------------------------

TITLE: Web Components Button Story Implementation (JavaScript)
DESCRIPTION: Implements a Button story for Web Components using JavaScript and CSF 2 format. Uses lit-html for templating custom elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import { html } from 'lit';

export default {
  title: 'components/Button',
  component: 'demo-button',
};

export const Primary = ({ primary }) => html`<custom-button ?primary=${primary}></custom-button>`;
Primary.args = {
  primary: true,
};
```

----------------------------------------

TITLE: Update story files
DESCRIPTION: Updates story files to use CSF Factories. This involves importing the preview construct, creating the meta object via preview.meta, and creating stories from the meta object via meta.story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_8

LANGUAGE: Diff
CODE:
```
// Learn about the # subpath import: https://storybook.js.org/docs/api/csf/csf-factories#subpath-imports
+ import preview from '#.storybook/preview';
- import { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

+ const meta = preview.meta({
- const meta = {
    // ...current meta
+ });
- } satisfies Meta<typeof Button>;
- export default meta;

- type Story = StoryObj<typeof meta>;

+ export const Primary = meta.story({
- export const Primary: Story = {
    // ...current story
+ });
- };
```

----------------------------------------

TITLE: Configuring Basic Storybook Story for React Component
DESCRIPTION: This code configures a basic Storybook story for a React component, defining the component and a story with a prop. It imports the component and exports a default object with the component and a story that renders the component with a specific prop value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_1

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const Basic = {};

export const WithProp = {
  render: () => <MyComponent prop="value" />,
};

```

----------------------------------------

TITLE: Initializing MyComponent Story with React (TS)
DESCRIPTION: This code defines a Storybook story for the MyComponent using React (TypeScript). It imports the necessary modules and components, configures metadata, and defines a story that renders the component within a specified layout using JSX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#_snippet_3

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Layout } from './Layout';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

// This story uses a render function to fully control how the component renders.
export const Example: Story = {
  render: () => (
    <Layout>
      <header>
        <h1>Example</h1>
      </header>
      <article>
        <MyComponent />
      </article>
    </Layout>
  ),
};
```

----------------------------------------

TITLE: Initializing Storybook Story Configuration with Default Export
DESCRIPTION: Sets up the basic configuration for a Storybook story file by importing a component and exporting the default configuration object. Includes optional title property and component reference with explanatory comments about automatic title generation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'MyComponent',
  component: MyComponent,
};

// Your stories
```

----------------------------------------

TITLE: Configuring Primary Button Story in Svelte (JavaScript)
DESCRIPTION: This JavaScript code configures a primary button story within Storybook for a Svelte component. It imports the Button component from './Button.svelte' and sets up the story with arguments for label and primary state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_7

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

export const Primary = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Defining Vue Button Story (TypeScript)
DESCRIPTION: This code defines a Storybook story for a Vue Button component using TypeScript. It imports the necessary modules from Storybook and the Button component. It then defines the component's metadata and creates a 'Primary' story with a render function that renders the component with the specified arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_13

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: (args) => ({
    components: { Button },
    setup() {
      return { args };
    },
    template: '<Button v-bind="args" />',
  }),
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: ButtonGroup Story Definition (Vue Renderer, JS)
DESCRIPTION: Defines a Storybook story for the ButtonGroup component using Vue renderer. It imports the ButtonGroup component and Button stories, then defines a 'Pair' story that renders a ButtonGroup with primary and secondary buttons. The story uses a render function to bind arguments to the ButtonGroup component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_9

LANGUAGE: js
CODE:
```
import ButtonGroup from './ButtonGroup.vue';

//👇 Imports the Button stories
import * as ButtonStories from './Button.stories';

export default {
  component: ButtonGroup,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Pair = {
  render: (args) => ({
    components: { ButtonGroup },
    setup() {
      return { args };
    },
    template: '<ButtonGroup v-bind="args" />',
  }),
  args: {
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  },
};
```

----------------------------------------

TITLE: Adding Markdown Content in Storybook Documentation
DESCRIPTION: This snippet demonstrates the use of Markdown in Storybook documentation. It includes a header and a simple greeting, which would be rendered as formatted text in the Storybook interface.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/docs-id-generation/B.docs.mdx#2025-04-22_snippet_1

LANGUAGE: Markdown
CODE:
```
# Docs with of

hello docs
```

----------------------------------------

TITLE: Configuring List Story with Svelte (TypeScript)
DESCRIPTION: This code configures a Storybook story for the List component in Svelte using TypeScript. It imports necessary types from @storybook/your-framework and the List component. The Empty story is defined as an empty object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_10

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import List from './List.svelte';

const meta = {
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

// Always an empty list, not super interesting
export const Empty: Story = {};

```

----------------------------------------

TITLE: Initializing TodoItem Story - Svelte (CSF)
DESCRIPTION: This code defines a Storybook story for the TodoItem component in Svelte using the Component Story Format (CSF). It imports necessary modules, defines the component and render template, and sets up a primary story with a data loader.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_5

LANGUAGE: javascript
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import TodoItem from './TodoItem.svelte';

  const { Story } = defineMeta({
    component: TodoItem,
    render: template,
  });
</script>

{#snippet template(args, { loaded: { todo } })}
  <TodoItem {...args} {...todo} />
{/snippet}

<Story
  name="Primary"
  loaders=[
    async () => ({
      todo: await (
        await fetch('https://jsonplaceholder.typicode.com/todos/1')
      ).json(),
    }),
  ]
/>

```

----------------------------------------

TITLE: Configuring Storybook for React-Vite in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Storybook for a React project using Vite in TypeScript. It imports the StorybookConfig type, defines a configuration object with proper typing, and exports it as the default.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-framework-options.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/react-vite';

const config: StorybookConfig = {
  framework: {
    name: '@storybook/react-vite',
    options: {
      // ...
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Initializing Button Storybook Story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It defines metadata for the component and exports primary and secondary stories with different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    ...Primary.args,
    primary: false,
  },
};
```

----------------------------------------

TITLE: Storybook Story with Locale (JavaScript/Vue)
DESCRIPTION: This JavaScript code defines a Storybook story for a Vue component. It imports the component and defines a `StoryWithLocale` story that renders a paragraph element with a locale-specific caption, determined by the `getCaptionForLocale` function based on the global `locale` variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import MyComponent from './MyComponent.vue';

export default {
  component: MyComponent,
};

const getCaptionForLocale = (locale) => {
  switch (locale) {
    case 'es':
      return 'Hola!';
    case 'fr':
      return 'Bonjour!';
    case 'kr':
      return '안녕하세요!';
    case 'zh':
      return '你好!';
    default:
      return 'Hello!';
  }
};

export const StoryWithLocale = {
  render: (args, { globals: { locale } }) => {
    const caption = getCaptionForLocale(locale);
    return {
      template: `<p>${caption}</p>`,
    };
  },
};
```

----------------------------------------

TITLE: Creating Storybook Toolbar Addon Component in React
DESCRIPTION: Implementation of a React component that creates a custom toolbar addon with a toggle button and keyboard shortcut. Uses Storybook Manager API to register keyboard shortcuts and internal components for UI elements. The addon includes a chevron icon button and configurable keyboard shortcuts.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-useapi.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React, { useEffect, useCallback } from 'react';

import { useStorybookApi } from 'storybook/manager-api';
import { IconButton } from 'storybook/internal/components';
import { ChevronDownIcon } from '@storybook/icons';

export const Panel = () => {
  const api = useStorybookApi();

  const toggleMyTool = useCallback(() => {
    // Custom logic to toggle the addon here
  }, []);

  useEffect(() => {
    api.setAddonShortcut('custom-toolbar-addon', {
      label: 'Enable toolbar addon',
      defaultShortcut: ['G'],
      actionName: 'Toggle',
      showInMenu: false,
      action: toggleAddon,
    });
  }, [api]);

  return (
    <IconButton key="custom-toolbar" active="true" title="Show a toolbar addon">
      <ChevronDownIcon />
    </IconButton>
  );
};
```

----------------------------------------

TITLE: Scroll Into View Story with Decorator (Svelte CSF TS)
DESCRIPTION: This story demonstrates how to use a decorator in Svelte CSF to emit the SCROLL_INTO_VIEW event when the story is rendered. It uses the useChannel hook to emit the event to the Storybook channel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-scroll-into-view.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { useChannel } from 'storybook/preview-api';
  import { SCROLL_INTO_VIEW } from 'storybook/highlight';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="ScrollIntoView"
  decorators={[
    (storyFn) => {
      const emit = useChannel({});
      emit(SCROLL_INTO_VIEW, '#footer');
      return storyFn();
    },
  ]}
/>
```

----------------------------------------

TITLE: Custom MDX Documentation Page
DESCRIPTION: An MDX documentation file that showcases how to create custom documentation with embedded stories. It demonstrates different approaches for referencing stories both with and without defined story titles.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/custom-docs-page.md#2025-04-22_snippet_1

LANGUAGE: mdx
CODE:
```
# Replacing DocsPage with custom `MDX` content

This file is a documentation-only `MDX`file to customize Storybook's [DocsPage](https://storybook.js.org/docs/writing-docs/docs-page#replacing-docspage).

It can be further expanded with your own code snippets and include specific information related to your stories.

For example:

import { Story } from "@storybook/addon-docs";

## Button

Button is the primary component. It has four possible states.

- [Primary](#primary)
- [Secondary](#secondary)
- [Large](#large)
- [Small](#small)

## With the story title defined

If you included the title in the story's default export, use this approach.

### Primary

<Story id="example-button--primary" />

### Secondary

<Story id="example-button--secondary" />

### Large

<Story id="example-button--large" />

### Small

<Story id="example-button--small" />

## Without the story title defined

If you didn't include the title in the story's default export, use this approach.

### Primary

<Story id="your-directory-button--primary"/>

### Secondary

<Story id="your-directory-button--secondary"/>

### Large

<Story id="your-directory-button--large"/>

### Small

<Story id="your-directory-button--small" />
```

----------------------------------------

TITLE: Displaying React Version Information in MDX
DESCRIPTION: Renders React, ReactDOM, and ReactDOMServer version information within code tags. Uses optional chaining to handle cases where version information might not be available.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/ResolvedReact.mdx#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
<code>react</code>: <code data-testid="mdx-react">{ReactExport.version ?? 'no version export found'}</code>

<code>react-dom</code>: <code data-testid="mdx-react-dom">{ReactDom.version ?? 'no version export found'}</code>

<code>react-dom/server</code>: <code data-testid="mdx-react-dom-server">{ReactDomServer.version ?? 'no version export found'}</code>
```

----------------------------------------

TITLE: Configuring Storybook Preview with Layout Decorator (Vue)
DESCRIPTION: This code defines a Storybook preview configuration with a decorator that applies different page layouts to stories based on the 'pageLayout' parameter. It supports 'page' and 'page-mobile' layouts, and defaults to no layout if the parameter is not specified. The decorator uses Vue's template syntax to wrap the story within a div with a specific class name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import type { Preview } from '@storybook/vue3-vite';

const preview: Preview = {
  decorators: [
    // 👇 Defining the decorator in the preview file applies it to all stories
    (_, { parameters }) => {
      // 👇 Make it configurable by reading from parameters
      const { pageLayout } = parameters;
      switch (pageLayout) {
        case 'page':
          // Your page layout is probably a little more complex than this ;)
          return { template: '<div class="page-layout"><story/></div>' };
        case 'page-mobile':
          return { template: '<div class="page-mobile-layout"><story/></div>' };
        default:
          // In the default case, don't apply a layout
          return { template: '<story/>' };
      }
    },
  ],
};

export default preview;
```

----------------------------------------

TITLE: Initializing Storybook Meta and Second Story with Play Function (Angular)
DESCRIPTION: This code defines the SecondStory with a play function that simulates user typing into an element with the test ID 'other-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_1

LANGUAGE: ts
CODE:
```
export const SecondStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await userEvent.type(canvas.getByTestId('other-element'), 'another value');
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Preview Configuration for Angular with TypeScript
DESCRIPTION: Sets up the main preview configuration for Storybook in an Angular project. Imports and configures Compodoc documentation and defines default parameters for actions and control matchers. Uses regex patterns to automatically detect action handlers and specific control types for colors and dates.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-compodoc-config.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Preview } from '@storybook/angular';
import { setCompodocJson } from '@storybook/addon-docs/angular';

import docJson from '../documentation.json'; // The path to your generated json file from Compodoc contains all your documentation information.

setCompodocJson(docJson);

const preview: Preview = {
  parameters: {
    actions: { argTypesRegex: '^on[A-Z].*' },
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Initializing MyComponent Story with React (JS)
DESCRIPTION: This code defines a Storybook story for the MyComponent using React (JavaScript). It imports the necessary components and defines a story that renders the component within a specified layout using JSX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#_snippet_2

LANGUAGE: js
CODE:
```
import { Layout } from './Layout';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

// This story uses a render function to fully control how the component renders.
export const Example = {
  render: () => (
    <Layout>
      <header>
        <h1>Example</h1>
      </header>
      <article>
        <MyComponent />
      </article>
    </Layout>
  ),
};
```

----------------------------------------

TITLE: Initializing Storybook Meta with Mocked Date - Angular
DESCRIPTION: This code defines the meta object for a Storybook story using Angular. It imports necessary modules, including MockDate, and sets up a beforeEach hook to mock the Date object before each story runs, resetting it afterward. This ensures consistent date values during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import MockDate from 'mockdate';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { getUserFromSession } from '#api/session.mock';
import { Page } from './Page';

const meta: Meta<Page> = {
  component: Page,
  // 👇 Set the value of Date for every story in the file
  async beforeEach() {
    MockDate.set('2024-02-14');

    // 👇 Reset the Date after each story
    return () => {
      MockDate.reset();
    };
  },
};
export default meta;

type Story = StoryObj<Page>;

export const Default: Story = {
  async play({ canvasElement }) {
    // ... This will run with the mocked Date
  },
};
```

----------------------------------------

TITLE: Simulating Change Event in Storybook (Web Components - JS)
DESCRIPTION: This Storybook story simulates a change event on a select element within a web component. It uses the `userEvent.selectOptions` function to select different options and `sleep` function to introduce delays between selections, demonstrating asynchronous interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#_snippet_8

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

export default {
  component: 'demo-my-component',
};

// Function to emulate pausing between interactions
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleChangeEvent = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const select = canvas.getByRole('listbox');

    await userEvent.selectOptions(select, ['One Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Another Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Yet another item']);
  },
};
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript. It imports the necessary modules from '@storybook/svelte-vite' and defines the component to be used in the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/svelte-vite';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Text: Story = {
  args: {},
};
```

----------------------------------------

TITLE: Initializing Button Story for Web Components
DESCRIPTION: This code defines a Storybook story for a Web Components Button component. It sets the component to 'demo-button' and sets the layout parameter to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#_snippet_6

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  // Sets the layout parameter component wide.
  parameters: {
    layout: 'centered',
  },
};
```

----------------------------------------

TITLE: Configuring Web Components Button Story with TypeScript
DESCRIPTION: This code configures a Storybook story for a Web Components Button component using TypeScript. It imports Meta and StoryObj types from '@storybook/web-components-vite', defines metadata including the title, component, and parameters, and exports a basic story with a render function that uses lit-html to render the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#_snippet_12

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

const meta: Meta = {
  title: 'Button',
  component: 'custom-button',
  //👇 Creates specific parameters for the story
  parameters: {
    myAddon: {
      data: 'This data is passed to the addon',
    },
  },
};

export default meta;
type Story = StoryObj;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Basic: Story = {
  render: () => html`<custom-button label="Hello"></custom-button>`,
};
```

----------------------------------------

TITLE: Defining List Component Metadata in Svelte (TS)
DESCRIPTION: This code defines the metadata for the List component in Storybook using Svelte CSF with TypeScript. It imports necessary modules from '@storybook/addon-svelte-csf' and component files, then uses defineMeta to set the component property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_16

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import List from './List.svelte';
  import ListItem from './ListItem.svelte';

  const { Story } = defineMeta({
    component: List,
  });
</script>
```

----------------------------------------

TITLE: Initializing Button Story for Vue (TS)
DESCRIPTION: This code initializes a Storybook story for a Vue Button component using TypeScript. It imports the necessary modules from '@storybook/vue3-vite' and defines the component to be used in the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = {
  title: 'Button',
  component: Button,
  argTypes: {
    onClick: {},
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Text: Story = {
  args: {},
};
```

----------------------------------------

TITLE: Skipping interactive prompts
DESCRIPTION: Skips interactive prompts and automatically installs Storybook with default settings. This is useful for automated installations or when a fully default setup is desired.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_124

LANGUAGE: Shell
CODE:
```
create storybook --yes
```

----------------------------------------

TITLE: Defining Web Components Button Story with JavaScript
DESCRIPTION: This code defines a Storybook story for a Web Components Button component using JavaScript. It exports a default object containing the title, component, and parameters for the story, and also exports a basic story with a render function that uses lit-html to render the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#_snippet_11

LANGUAGE: js
CODE:
```
import { html } from 'lit';

export default {
  title: 'Button',
  component: 'custom-button',
  //👇 Creates specific parameters for the story
  parameters: {
    myAddon: {
      data: 'This data is passed to the addon',
    },
  },
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Basic = {
  render: () => html`<custom-button label="Hello"></custom-button>`,
};
```

----------------------------------------

TITLE: Highlighting Story Elements in React (JS)
DESCRIPTION: This snippet demonstrates how to highlight specific elements within a React Storybook story using the `useChannel` hook and the `HIGHLIGHT` event. It uses a decorator to wrap the story function and emit the highlight event with specified CSS selectors, enabling visual emphasis on particular parts of the component during development.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight.md#_snippet_1

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const Highlighted = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Single Story Decorator Example
DESCRIPTION: Demonstrates how to apply a decorator to a single story using the decorators property
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/decorators.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export const Primary = {
  decorators: [(Story) => <div style={{ margin: '3em' }}><Story/></div>],
};
```

----------------------------------------

TITLE: Initializing Button Story for React
DESCRIPTION: This code initializes a Storybook story for a React Button component. It imports the Button component and defines a 'Primary' story with specific arguments for the button's label and primary state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_4

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Primary = {
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Recommended Grid Parameter
DESCRIPTION: This code snippet demonstrates the recommended way of defining the grid configuration within the `backgrounds` parameter in `@storybook/addon-backgrounds`. It includes new properties for further customization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_207

LANGUAGE: javascript
CODE:
```
export const Basic = () => <Button />
Basic.parameters: {
  backgrounds: {
    grid: {
      disable: false,
      cellSize: 20,
      opacity: 0.5,
      cellAmount: 5,
      offsetX: 16, // default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
      offsetY: 16 // default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
    }
  }
},
```

----------------------------------------

TITLE: Initializing Storybook Story (TS)
DESCRIPTION: This code initializes a Storybook story for a component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines the component and its argument types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Example } from './Example';

const meta = {
  component: Example,
  argTypes: {
    actualArgName: {
      name: 'Friendly name',
    },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Configuring Vitest for Svelte Storybook Testing
DESCRIPTION: This snippet configures Vitest to test Svelte Storybook stories. It merges the base Vite configuration with Vitest-specific settings, including the storybookTest plugin for Storybook integration and browser testing setup with Playwright.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-config.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { defineConfig, mergeConfig } from 'vitest/config';
import { storybookTest } from '@storybook/addon-vitest/vitest-plugin';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const dirname =
  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));

import viteConfig from './vite.config';

export default mergeConfig(
  viteConfig,
  defineConfig({
    plugins: [
      storybookTest({
        // The location of your Storybook config, main.js|ts
        configDir: path.join(dirname, '.storybook'),
        // This should match your package.json script to run Storybook
        // The --ci flag will skip prompts and not open a browser
        storybookScript: 'yarn storybook --ci',
      }),
    ],
    test: {
      // Enable browser mode
      browser: {
        enabled: true,
        // Make sure to install Playwright
        provider: 'playwright',
        headless: true,
        instances: [{ browser: 'chromium' }],
      },
      setupFiles: ['./.storybook/vitest.setup.ts'],
    },
  }),
);
```

----------------------------------------

TITLE: Initializing LoginForm Story with Empty Form in React (TS)
DESCRIPTION: This code initializes a Storybook story for the LoginForm component in React (TypeScript), defining the metadata and an empty form story. It imports necessary modules from '@storybook/react-vite' and the LoginForm component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { userEvent, within, expect } from 'storybook/test';

import { LoginForm } from './LoginForm';

const meta = {
  component: LoginForm,
} satisfies Meta<typeof LoginForm>;

export default meta;
type Story = StoryObj<typeof meta>;

export const EmptyForm: Story = {};
```

----------------------------------------

TITLE: Initializing Storybook Preview with Vue and Vuetify (TS)
DESCRIPTION: This snippet initializes the Storybook preview with Vue and Vuetify using TypeScript. It registers plugins and sets up a decorator that wraps the story with a Vuetify VApp component, applying a theme based on global parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/vue3-vite';

import { setup } from '@storybook/vue3-vite';

import { VApp } from 'vuetify/components';

import { registerPlugins } from '../src/plugins';

setup((app) => {
  // Registers your app's plugins including Vuetify into Storybook
  registerPlugins(app);
});

const preview: Preview = {
  decorators: [
    (story, context) => {
      const theme = context.globals.theme || 'light';
      return {
        components: { story, VApp },
        template: `
          <v-app theme="${theme}">
            <div class="d-flex">
              <story/>
            </div>
          </v-app>
      `,
      };
    },
  ],
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook Meta for Angular Component
DESCRIPTION: This code defines the Storybook metadata for an Angular component named 'Example'. It specifies the component to be used in the story and defines the 'value' argument type, including its default value and type summary, which are displayed in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Example } from './Example';

const meta: Meta<Example> = {
  component: Example,
  argTypes: {
    value: {
      table: {
        defaultValue: { summary: 0 },
        type: { summary: 'number' },
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Main File in JavaScript
DESCRIPTION: JavaScript configuration file for Storybook that specifies the framework, story file patterns, and includes webpack configuration customization. The configuration exports an object with framework specification, story file patterns using glob syntax, and a webpack modifier function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-simplified-config.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  webpackFinal: async (config) => {
    config.plugins.push(/* ... */);
    return config;
  },
};
```

----------------------------------------

TITLE: Rendering Button with Text Label in Web Components (TypeScript)
DESCRIPTION: This code defines a Storybook story for a custom button web component using TypeScript. It imports the html function from lit-html and the action function from Storybook. The story renders the custom button with a 'Hello' label and an onClick handler that triggers the 'clicked' action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { action } from 'storybook/actions';

import { html } from 'lit';

const meta: Meta = {
  component: 'custom-button',
};

export default meta;
type Story = StoryObj;

export const Text: Story = {
  render: () => html`<custom-button label="Hello" @click=${action('clicked')}></custom-button>`,
};
```

----------------------------------------

TITLE: CSF 3 Automatic Title Generation
DESCRIPTION: Demonstrates CSF 3's automatic title generation feature where titles can be inferred from the file path.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
export default {
  component: Button,
};
```

----------------------------------------

TITLE: Rendering List with One Item in Svelte
DESCRIPTION: This story renders a List component with a single ListItem in Svelte. It uses a snippet template to define the component's structure, passing arguments to the List component and including one ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_14

LANGUAGE: js
CODE:
```
<Story name="One Item">
  {#snippet template(args)}
    <List {...args} >
      <ListItem />
    </List>
  {/snippet}
</Story>
```

----------------------------------------

TITLE: Configuring Storybook Addon Preview in TypeScript
DESCRIPTION: This TypeScript code configures a Storybook addon's preview module with proper type annotations. It imports Renderer and ProjectAnnotations types, the PARAM_KEY constant, and CustomDecorator, then exports a typed preview configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-preview.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import type { Renderer, ProjectAnnotations } from 'storybook/internal/types';
import { PARAM_KEY } from './constants';
import { CustomDecorator } from './decorators';

const preview: ProjectAnnotations<Renderer> = {
  decorators: [CustomDecorator],
  globals: {
    [PARAM_KEY]: false,
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook Framework and Addons in JavaScript
DESCRIPTION: This JavaScript snippet configures the Storybook framework, specifies the location of story files, and adds the documentation addon. It uses the `getAbsolutePath` helper function to resolve the paths of Storybook's addons and frameworks.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-pnpm-with-module-resolution.md#_snippet_0

LANGUAGE: js
CODE:
```
import path from 'path';

const _require = typeof require === 'undefined' ? import.meta : require;
const getAbsolutePath = (packageName) =>
  path.dirname(_require.resolve(path.join(packageName, 'package.json'))).replace(/^file:\/\//, '');

export default {
  framework: {
    // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
    name: getAbsolutePath('@storybook/your-framework'),
    options: {},
  },
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    //👇 Use getAbsolutePath when referencing Storybook's addons and frameworks
    getAbsolutePath('@storybook/addon-docs'),
  ],
};
```

----------------------------------------

TITLE: Implementing Web Component Button in JavaScript using Lit
DESCRIPTION: Custom button web component using Lit library in JavaScript. Defines properties using static getter and implements rendering logic with HTML template literals in the render method.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-component-with-proptypes.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import { LitElement, html } from 'lit';

/**
 * @prop {string} content - The display label of the button
 * @prop {boolean} isDisabled - Checks if the button should be disabled
 * @summary This is a custom button element
 * @tag custom-button
 */

export class CustomButton extends LitElement {
  static get properties() {
    return {
      content: { type: String },
      isDisabled: { type: Boolean },
    };
  }

  constructor() {
    super();
    this.content = 'One';
    this.isDisabled = false;
  }

  render() {
    return html` <button type="button" ?disabled=${this.isDisabled}>${this.content}</button> `;
  }
}

customElements.define('custom-button', CustomButton);
```

----------------------------------------

TITLE: Rendering Button in Spanish (React)
DESCRIPTION: This test renders the Primary story of the Button component in Spanish using Storybook's composeStory function. It overrides the global locale setting to 'es' and then executes the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-override-globals.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { test } from '@jest/globals';
// 👉 Using Next.js? Import from @storybook/nextjs instead
import { composeStory } from '@storybook/react-vite';

import meta, { Primary as PrimaryStory } from './Button.stories';

test('renders in Spanish', async () => {
  const Primary = composeStory(PrimaryStory, meta, { globals: { locale: 'es' } });

  await Primary.run();
});
```

----------------------------------------

TITLE: Installing Babel Compiler Support for Storybook
DESCRIPTION: Command to install and set up the Babel compiler addon for Storybook. This ensures compatibility with projects that rely on Babel's features.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
npx storybook add @storybook/addon-webpack5-compiler-babel
```

----------------------------------------

TITLE: Defining Button Stories in Vue with TypeScript (CSF 2)
DESCRIPTION: Creates a default button story for Vue components using TypeScript and CSF 2 format. Uses StoryFn type for proper typing and Vue's setup function to pass args to the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
// Other imports and story implementation
export const Default: StoryFn<typeof Button> = (args) => ({
  components: { Button },
  setup() {
    return { args };
  },
  template: '<Button v-bind="args" />',
});
```

----------------------------------------

TITLE: Defining Button Component Story Meta (Svelte CSF, Typescript)
DESCRIPTION: This code defines the metadata for a Button component story in Storybook using Svelte CSF (Component Story Format) with Typescript. It imports the Button component and the defineMeta function from '@storybook/addon-svelte-csf', then configures the meta object with the component and documentation parameters, excluding the 'style' control.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const meta = defineMeta({
    component: Button,
    parameters: {
      docs: {
        controls: { exclude: ['style'] },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Accessibility in Storybook Story for Svelte (Svelte CSF, JavaScript)
DESCRIPTION: This Svelte snippet uses the '@storybook/addon-svelte-csf' API to define meta information and create a story with customized a11y rules. It demonstrates how Storybook integrates with Svelte components and supports both parameterized accessibility configurations and a 'manual' global flag. The code is structured in a Svelte component with a module script and Story tag, and is designed for users adopting Svelte with JavaScript and Storybook CSF.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="ExampleStory"
  parameters={{
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
      */
      options: {},
    },
  }}
  globals={{
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  }}
/>
```

----------------------------------------

TITLE: Defining Story Args
DESCRIPTION: Defines the arguments for a single story using the `args` property. These args are specific to this story and can be reused via JavaScript object reuse.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
Primary.args = {
  primary: true,
  label: 'Button',
};
```

----------------------------------------

TITLE: Builder API Configuration Options
DESCRIPTION: Illustrates how a builder can provide its own configuration options through additional fields in the Storybook configuration. This allows users to customize the builder's behavior to suit their specific needs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  stories: ['../src/**/*.stories.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: [
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/addon-interactions',
  ],
  framework: '@storybook/react',
  core: {
    builder: {
      name: '@storybook/builder-vite',
      options: {
        viteConfigPath: 'path/to/your/vite.config.js',
      },
    },
  },
  features: {
    storyStoreV7: true,
  },
};

```

----------------------------------------

TITLE: Initializing Button Story - Svelte CSF (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF) in TypeScript. It imports the Button component and defines its metadata, including the 'variant' argType with options for 'primary' and 'secondary'. It uses defineMeta from '@storybook/addon-svelte-csf'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#_snippet_2

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    argTypes: {
      variant: {
        options: ['primary', 'secondary'],
        control: { type: 'radio' },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring List Story with React (TypeScript)
DESCRIPTION: This code configures a Storybook story for the List component in React using TypeScript. It imports necessary types from @storybook/react-vite and the List component. The Empty story is defined as an empty object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { List } from './List';

const meta = {
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

// Always an empty list, not super interesting
export const Empty: Story = {};

```

----------------------------------------

TITLE: Global a11y Configuration
DESCRIPTION: This code snippet demonstrates how to configure the a11y addon globally in Storybook's preview file (preview.js or preview.ts). This allows you to dismiss or modify accessibility rules across all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import { configureA11y } from '@storybook/addon-a11y';

configureA11y({
  rules: [
    {
      id: 'color-contrast',
      disable: true, // or override the rule options
    },
  ],
});
```

----------------------------------------

TITLE: Initializing Button Story - Svelte - JS
DESCRIPTION: This snippet initializes a Storybook story for a Svelte Button component using JavaScript. It imports the Button component and defines a default export with the component property set to the Button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#_snippet_5

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default { component: Button };

export const Primary = { args: { primary: true } };
```

----------------------------------------

TITLE: Initializing Jest Addon Globally in Storybook
DESCRIPTION: This snippet configures the Storybook preview to include the Jest addon globally. It imports the withTests decorator and the Jest test results, then adds the decorator to the list of decorators, displaying test results for stories with the `jest` parameter defined.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/jest/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
// .storybook/preview.js
import { withTests } from '@storybook/addon-jest';
import results from '../.jest-test-results.json';

export const decorators = [
  withTests({
    results,
  }),
];
```

----------------------------------------

TITLE: Defining Regex Include Controls - TypeScript
DESCRIPTION: This TypeScript snippet defines a story named 'RegexInclude' that configures the Storybook controls to only include properties that match the regular expression /^hello*/.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_12

LANGUAGE: ts
CODE:
```
export const RegexInclude: Story = {
  parameters: {
    controls: { include: /^hello*/ },
  },
};
```

----------------------------------------

TITLE: Storybook CSF Configuration with Locale (TypeScript/Vue)
DESCRIPTION: This TypeScript code defines a Storybook story using the Component Story Format (CSF) for a Vue component. It imports the component and defines a `MyStory` story that renders a paragraph element with a locale-specific caption, determined by the `getCaptionForLocale` function based on the global `locale` variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

const getCaptionForLocale = (locale) => {
  switch (locale) {
    case 'es':
      return 'Hola!';
    case 'fr':
      return 'Bonjour!';
    case 'kr':
      return '안녕하세요!';
    case 'zh':
      return '你好!';
    default:
      return 'Hello!';
  }
};

export default meta;
type Story = StoryObj<typeof MyComponent>;

export const MyStory: Story = {
  render: (args, { globals: { locale } }) => {
    const caption = getCaptionForLocale(locale);
    return {
      template: `<p>${caption}</p>`,
    };
  },
};
```

----------------------------------------

TITLE: Configuring Page Story with Custom Footer in Solid (TS)
DESCRIPTION: This code defines a Storybook story for the Page component in Solid using TypeScript. It imports necessary modules from 'storybook-solidjs' and defines a Meta object to configure the component and rendering function. The render function renders the Page component with the provided arguments and a footer element containing the custom footer text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { ComponentProps } from 'solid-js';

import type { Meta, StoryObj } from 'storybook-solidjs';

import { Page } from './Page';

type PagePropsAndCustomArgs = ComponentProps<typeof Page> & { footer?: string };

const meta = {
  component: Page,
  render: ({ footer, ...args }) => (
    <Page {...args}>
      <footer>{footer}</footer>
    </Page>
  ),
} satisfies Meta<PagePropsAndCustomArgs>;
export default meta;

type Story = StoryObj<typeof meta>;

export const CustomFooter = {
  args: {
    footer: 'Built with Storybook',
  },
} satisfies Story;
```

----------------------------------------

TITLE: Telemetry Event with Crash Report
DESCRIPTION: This code snippet shows the structure of the telemetry event when crash reporting is enabled. The `error` field contains the sanitized error object, providing information about the crash without exposing user paths.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/telemetry.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
{
  "error": {
    "name": "Error",
    "message": "Cannot read properties of undefined (reading 'foo')",
    "stack": "Error: Cannot read properties of undefined (reading 'foo')\n    at ..."
  }
}
```

----------------------------------------

TITLE: Importing Canvas Block in MDX
DESCRIPTION: Example showing how to import and use the Canvas block to reference a story in MDX documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-canvas.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
import { Meta, Canvas } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

<Canvas of={ButtonStories.Primary} />
```

----------------------------------------

TITLE: Initializing Button Story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines a primary button story with a label and primary property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: () => ({
    props: {
      label: 'Button',
      primary: true,
    },
  }),
};

```

----------------------------------------

TITLE: Displaying Help Information for Storybook Build (Shell)
DESCRIPTION: This command displays the help information for the `storybook build` command, listing all available options and their descriptions. It's useful for understanding the available configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_27

LANGUAGE: shell
CODE:
```
storybook build --help
```

----------------------------------------

TITLE: Initializing Storybook Meta for Angular Component
DESCRIPTION: This code initializes the Storybook metadata for an Angular component named 'Example'. It defines the component to be used in the story and configures the 'icon' argument with available options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Example } from './Example';

const meta: Meta<Example> = {
  component: Example,
  argTypes: {
    icon: {
      options: ['arrow-up', 'arrow-down', 'loading'],
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Custom Autodocs Template in preview.js|ts
DESCRIPTION: To replace the default documentation template used by Storybook, you can extend your UI configuration file (i.e., `.storybook/preview.js|ts`) and introduce a `docs` parameter. This parameter accepts a `page` function that returns a React component, which you can use to generate the required template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
import type { Preview } from '@storybook/react';
import { Title, Subtitle, Description, Primary, Controls, Stories } from '@storybook/blocks';

const preview: Preview = {
  parameters: {
    docs: {
      page: () => (
        <>
          <Title />
          <Subtitle />
          <Description />
          <Primary />
          <Controls />
          <Stories />
        </>
      ),
    },
  },
};

export default preview;
```

LANGUAGE: typescript
CODE:
```
import type { Preview } from "@storybook/react";
import { Title, Subtitle, Description, Primary, Controls, Stories } from "@storybook/blocks";

const preview: Preview = {
  parameters: {
    docs: {
      page: () => (
        <>
          <Title />
          <Subtitle />
          <Description />
          <Primary />
          <Controls />
          <Stories />
        </>
      ),
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Defining Storybook story for common component
DESCRIPTION: This snippet defines a Storybook story for a component in a common configuration. It imports the component and exports a default object containing the title and component, along with a story named 'Baz'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/foo-bar-baz-story.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Foo } from './Foo';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Foo/Bar',
  component: Foo,
};

export const Baz = {};
```

----------------------------------------

TITLE: Configuring Vite in Storybook Preset Addon
DESCRIPTION: This code demonstrates how to use the viteFinal API in a Storybook preset addon to modify the Vite configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  viteFinal: async (config, { configType }) => {
    // customize the Vite config here
    return config;
  },
};
```

----------------------------------------

TITLE: Defining List Story with Svelte CSF (TypeScript)
DESCRIPTION: This code defines a Storybook story for the List component in Svelte using the Component Story Format (CSF) with TypeScript. It imports defineMeta from @storybook/addon-svelte-csf and the List component. The Empty story is rendered using the Story component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_9

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import List from './List.svelte';

  const { Story } = defineMeta({
    component: List,
  });
</script>

<!-- Always an empty list, not super interesting -->
<Story name="Empty" />

```

----------------------------------------

TITLE: Initializing Button Story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines the component and title for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
};

export default meta;
```

----------------------------------------

TITLE: Configuring Primary Button Story in Web Components (JavaScript)
DESCRIPTION: This JavaScript code configures a primary button story within Storybook for a Web Component. It sets the component to 'demo-button' and sets up the story with arguments for label and primary state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_11

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
};

export const Primary = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Initializing Button Story - React - TS
DESCRIPTION: This snippet initializes a Storybook story for a React Button component using TypeScript. It imports the necessary modules from '@storybook/react-vite' and defines a Meta object to configure the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = { args: { primary: true } };
```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Component (TS)
DESCRIPTION: This code configures the Storybook metadata for a Svelte component using TypeScript. It imports the component and defines the meta object with component details and argTypes, specifically hiding the 'foo' property from the UI. It uses satisfies Meta to provide type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import YourComponent from './YourComponent.svelte';

const meta = {
  component: YourComponent,
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      control: false,
    },
  },
} satisfies Meta<typeof YourComponent>;

export default meta;
```

----------------------------------------

TITLE: Rendering List with Many Items in Vue (TS)
DESCRIPTION: This story renders a List component with multiple ListItems in Vue using TypeScript. It uses a render function to define the component's structure, including both the List and ListItem components in the template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_27

LANGUAGE: ts
CODE:
```
export const ManyItems: Story = {
  render: (args) => ({
    components: { List, ListItem },
    template: `
      <List>
        <list-item/>
        <list-item/>
        <list-item/>
      </List>`,
  }),
};
```

----------------------------------------

TITLE: Installing Chromatic with yarn
DESCRIPTION: This command installs Chromatic as a development dependency using yarn. It adds Chromatic to the project's devDependencies in package.json.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev chromatic
```

----------------------------------------

TITLE: Configuring Theme Switching with Class Names in Storybook
DESCRIPTION: Diff showing how to use the withThemeByClassName decorator to enable switching between light and dark modes using Tailwind's class-based approach in the .storybook/preview.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/tailwind.md#2025-04-22_snippet_3

LANGUAGE: diff
CODE:
```
-import { Preview } from '@storybook/your-renderer';
+import { Preview, Renderer } from '@storybook/your-renderer';
+import { withThemeByClassName } from '@storybook/addon-themes';

import '../src/index.css';


const preview: Preview = {
  parameters: { /* ... */ },
+ decorators: [
+  withThemeByClassName<Renderer>({
+    themes: {
+      light: '',
+      dark: 'dark',
+    },
+    defaultTheme: 'light',
+  }),
+ ]
};

export default preview;
```

----------------------------------------

TITLE: Initializing Page stories for Angular
DESCRIPTION: This code initializes Storybook stories for the Page component in an Angular application. It imports necessary modules and components, defines metadata for the Page component, and creates a 'LoggedIn' story using arguments from Header stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { moduleMetadata } from '@storybook/angular';

import type { Meta, StoryObj } from '@storybook/angular';

import { CommonModule } from '@angular/common';

import { Button } from './button.component';
import { Header } from './header.component';
import { Page } from './page.component';

//👇 Imports all Header stories
import * as HeaderStories from './Header.stories';

const meta: Meta<Page> = {
  component: Page,
  decorators: [
    moduleMetadata({
      declarations: [Button, Header],
      imports: [CommonModule],
    }),
  ],
};

export default meta;
type Story = StoryObj<Page>;

export const LoggedIn: Story = {
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};
```

----------------------------------------

TITLE: Setting Project Annotations with Storybook for Vue in TypeScript
DESCRIPTION: This TypeScript snippet sets up project annotations in a Vue environment using Storybook. It uses Vitest's `beforeAll` alongside Storybook for Vue 3 to integrate a11y and project-specific annotations for better accessibility.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { beforeAll } from 'vitest';

import { setProjectAnnotations } from '@storybook/vue3';

// Import the a11y addon annotations
import * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';

// Optionally import your own annotations
import * as projectAnnotations from './preview';

const project = setProjectAnnotations([
  // Add the a11y addon annotations
  a11yAddonAnnotations,
  projectAnnotations,
]);

beforeAll(project.beforeAll);
```

----------------------------------------

TITLE: Defining Simple and Complex Stories
DESCRIPTION: Defines two stories, SimpleStory and ComplexStory, which use the simpleData and complexData objects as arguments. These stories are used to showcase the component with different data configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#_snippet_8

LANGUAGE: javascript
CODE:
```
export const SimpleStory = {
  args: {
    data: simpleData,
  },
};

export const ComplexStory = {
  args: {
    data: complexData,
  },
};
```

----------------------------------------

TITLE: Configuring Button Story for Web Components in Storybook (JS)
DESCRIPTION: This snippet configures a Storybook story for a web component button. It defines the story's metadata, including the title and component (demo-button). It then exports a default object containing the metadata and a named export 'Button' representing a basic story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hoisted.md#_snippet_3

LANGUAGE: js
CODE:
```
export default {
  title: 'Design System/Atoms/Button',
  component: 'demo-button',
};

// This is the only named export in the file, and it matches the component name
export const Button = {};
```

----------------------------------------

TITLE: Registering @storybook/addon-themes in Storybook configuration
DESCRIPTION: Diff showing how to add @storybook/addon-themes to the addons array in the Storybook main.js configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/emotion.md#2025-04-22_snippet_3

LANGUAGE: diff
CODE:
```
export default {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    '@storybook/addon-essentials',
+   '@storybook/addon-themes',
  ],
};
```

----------------------------------------

TITLE: Styling Storybook UI Components with CSS
DESCRIPTION: This CSS snippet defines styles for various UI components in a Storybook project. It includes styles for containers, sections, images, grids, and responsive layouts. The code also handles the styling for a feature exploration section, social media links, and an addon showcase component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/js/Configure.mdx#2025-04-22_snippet_2

LANGUAGE: CSS
CODE:
```
.sb-container {
  margin-bottom: 48px;
}

.sb-section {
  width: 100%;
  display: flex;
  flex-direction: row;
  gap: 20px;
}

img {
  object-fit: cover;
}

.sb-section-title {
  margin-bottom: 32px;
}

.sb-section a:not(h1 a, h2 a, h3 a) {
  font-size: 14px;
}

.sb-section-item, .sb-grid-item {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.sb-section-item-heading {
  padding-top: 20px !important;
  padding-bottom: 5px !important;
  margin: 0 !important;
}
.sb-section-item-paragraph {
  margin: 0;
  padding-bottom: 10px;
}

.sb-chevron {
  margin-left: 5px;
}

.sb-features-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 32px 20px;
}

.sb-socials {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
}

.sb-socials p {
  margin-bottom: 10px;
}

.sb-explore-image {
  max-height: 32px;
  align-self: flex-start;
}

.sb-addon {
  width: 100%;
  display: flex;
  align-items: center;
  position: relative;
  background-color: #EEF3F8;
  border-radius: 5px;
  border: 1px solid rgba(0, 0, 0, 0.05);
  background: #EEF3F8;
  height: 180px;
  margin-bottom: 48px;
  overflow: hidden;
}

.sb-addon-text {
  padding-left: 48px;
  max-width: 240px;
}

.sb-addon-text h4 {
  padding-top: 0px;
}

.sb-addon-img {
  position: absolute;
  left: 345px;
  top: 0;
  height: 100%;
  width: 200%;
  overflow: hidden;
}

.sb-addon-img img {
  width: 650px;
  transform: rotate(-15deg);
  margin-left: 40px;
  margin-top: -72px;
  box-shadow: 0 0 1px rgba(255, 255, 255, 0);
  backface-visibility: hidden;
}

@media screen and (max-width: 800px) {
  .sb-addon-img {
    left: 300px;
  }
}

@media screen and (max-width: 600px) {
  .sb-section {
    flex-direction: column;
  }

  .sb-features-grid {
    grid-template-columns: repeat(1, 1fr);
  }

  .sb-socials {
    grid-template-columns: repeat(2, 1fr);
  }

  .sb-addon {
    height: 280px;
    align-items: flex-start;
    padding-top: 32px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 24px;
  }

  .sb-addon-img {
    right: 0;
    left: 0;
    top: 130px;
    bottom: 0;
    overflow: hidden;
    height: auto;
    width: 124%;
  }

  .sb-addon-img img {
    width: 1200px;
    transform: rotate(-12deg);
    margin-left: 0;
    margin-top: 48px;
    margin-bottom: -40px;
    margin-left: -24px;
  }
}
```

----------------------------------------

TITLE: Initializing Story with Play Function in Angular
DESCRIPTION: This code defines a Storybook story for an Angular component named MyComponent. It uses the play function to simulate user interaction: typing 'WrongInput' into a username field, clicking a submit button, and hovering over an error message. It relies on storybook/test for userEvent and waitFor utilities.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { userEvent, waitFor, within } from 'storybook/test';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleAsyncStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const Input = canvas.getByLabelText('Username', {
      selector: 'input',
    });

    await userEvent.type(Input, 'WrongInput', {
      delay: 100,
    });

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const Submit = canvas.getByRole('button');
    await userEvent.click(Submit);

    await waitFor(async () => {
      await userEvent.hover(canvas.getByTestId('error'));
    });
  },
};
```

----------------------------------------

TITLE: Using Custom MDX Template in Storybook Preview
DESCRIPTION: This code snippet demonstrates how to import and use a custom MDX template in the `.storybook/preview.js` or `.storybook/preview.ts` file to customize the documentation page for your components. It requires the custom MDX template file to be properly defined.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import customTemplate from './customTemplate.mdx';

export const parameters = {
  docs: {
    page: customTemplate,
  },
};
```

----------------------------------------

TITLE: Linking to a specific story canvas
DESCRIPTION: This markdown snippet creates a link that redirects to the Canvas tab of a specific story within Storybook, identified by the story's unique identifier.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_13

LANGUAGE: Markdown
CODE:
```
[Go to specific story canvas](?path=/story/some--id)
```

----------------------------------------

TITLE: Initializing Storybook Preview with importFn and getProjectAnnotations
DESCRIPTION: This snippet outlines the initialization process for the Storybook Preview. It defines two key functions: importFn for asynchronous imports, and getProjectAnnotations for combining preview.js and addon config files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
- `importFn` - is an async `import()` function

- `getProjectAnnotations` - is a simple function that evaluations `preview.js` and addon config files and combines them. If it errors, the Preview will show the error.
```

----------------------------------------

TITLE: Rendering List with Lit Template
DESCRIPTION: Defines a template for rendering the List component using Lit. The template takes an array of items and uses the `repeat` directive to generate `demo-list-item` elements for each item within the `demo-list` component. The spread operator is used to pass additional arguments to the template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_11

LANGUAGE: typescript
CODE:
```
import { html } from 'lit';
import { repeat } from 'lit/directives/repeat.js';

const ListTemplate = {
  render: ({ items, ...args }) => {
    return html`
      <demo-list>
        ${repeat(items, (item) => html`<demo-list-item>${item}</demo-list-item>`)}
      </demo-list>
    `;
  },
};
```

----------------------------------------

TITLE: Svelte CSF Story with Locale
DESCRIPTION: This Svelte component story demonstrates how to use the `defineMeta` function from `@storybook/addon-svelte-csf` to define a story with a locale. It imports `MyComponent` and uses a `getCaptionForLocale` function to dynamically set the locale based on the global `locale` variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_7

LANGUAGE: svelte
CODE:
```
<script module>
  import { defineMeta } from "@storybook/addon-svelte-csf";

  import MyComponent from "./MyComponent.svelte";

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<script lang="ts">
  const getCaptionForLocale = (locale:string) => {
    switch (locale) {
      case 'es':
        return 'Hola!';
      case 'fr':
        return 'Bonjour!';
      case "kr":
        return '안녕하세요!';
      case "zh":
        return '你好!';
      default:
        return 'Hello!';
    }
  };
</script>

<Story name="StoryWithLocale">
  {#snippet template(args, { globals: { locale } })}
    <MyComponent
      {...args}
      locale={getCaptionForLocale(locale)}
    />
  {/snippet}
</Story>
```

----------------------------------------

TITLE: Defining Button Stories with Dynamic Parameters in JSON
DESCRIPTION: This JSON code shows how to define button stories with dynamic parameters using args and the Controls addon. It allows for interactive control of button properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_6

LANGUAGE: json
CODE:
```
{
  "title": "Buttons",
  "stories": [
    {
      "name": "Red",
      "parameters": {
        "server": {
          "id": "button"
        }
      },
      "args": { "color": "red", "label": "Stop" }
    },
    {
      "name": "Green",
      "parameters": {
        "server": {
          "id": "button"
        }
      },
      "args": { "color": "green", "label": "Go" }
    }
  ]
}
```

----------------------------------------

TITLE: Rendering Button with Text Label in React (TypeScript)
DESCRIPTION: This code defines a Storybook story for the Button component in React using TypeScript. It imports the Button component and the action function from Storybook. The story renders the button with a 'Hello' label and an onClick handler that triggers the 'clicked' action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { action } from 'storybook/actions';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {
  render: () => <Button label="Hello" onClick={action('clicked')} />,
};
```

----------------------------------------

TITLE: Enabling Experimental Zoneless Mode in Angular Storybook
DESCRIPTION: This code snippet shows how to enable the experimental zoneless mode in your Angular Storybook by setting the `experimentalZoneless` config in your `angular.json` file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_30

LANGUAGE: diff
CODE:
```
{
  "projects": {
    "your-project": {
      "architect": {
        "storybook": {
          ...
          "options": {
            ...
+           "experimentalZoneless": true
          }
        }
        "build-storybook": {
          ...
          "options": {
            ...
+           "experimentalZoneless": true
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Initializing Page stories for Svelte (CSF)
DESCRIPTION: This code initializes Storybook stories for the Page component in a Svelte application using CSF. It imports the Page component and Header stories, and exports a default object configuring the component for Storybook. It also defines a 'LoggedIn' story, importing related Header stories to populate arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_6

LANGUAGE: js
CODE:
```
import Page from './Page.svelte';

//👇 Imports all Header stories
import * as HeaderStories from './Header.stories';

export default {
  component: Page,
};

export const LoggedIn = {
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: TypeScript configuration example for Storybook's main.ts file. Imports the StorybookConfig type for type safety, defines the framework, story patterns, and build options with proper TypeScript typing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-blocks.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  build: {
    test: {
      disableBlocks: false,
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Opt-out of Angular ngcc in Storybook
DESCRIPTION: This code snippet shows how to disable Angular Compatibility Compiler (ngcc) in your Storybook configuration. Setting `enableNgcc` to `false` in the `.storybook/main.js|ts` file can be useful if you are experiencing postinstall ngcc issues.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default {
  stories: [
    /* ... */
  ],
  addons: [
    /* ... */
  ],
  framework: {
    name: '@storybook/angular',
    options: {
      enableNgcc: false,
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Stories for Button Component in React
DESCRIPTION: This snippet sets up Storybook stories for a Button component. It imports necessary dependencies, defines the default export with the story title, and creates two stories: a basic one and one with emoji content.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.csf3.txt#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import React from "react";
import { action } from "storybook/actions";
import { Button } from "@storybook/react/demo";

export default {
  title: "Button",
};

export const Basic = {};

export const Emoji = {
  args: {
    children: '😀 😎 👍 💯'
  }
};
```

----------------------------------------

TITLE: Configuring Storybook Main Settings in TypeScript
DESCRIPTION: This snippet demonstrates the basic configuration for Storybook in a `.storybook/main.ts` file using TypeScript. It imports the `StorybookConfig` type from the specific framework package (placeholder used), defines a typed configuration object `config` specifying the `framework` (needs replacement), the `stories` location patterns, and enables the `developmentModeForBuild` feature. Using TypeScript provides type safety for the configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-features-development-mode-for-build.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  features: {
    developmentModeForBuild: true,
  },
};

export default config;
```

----------------------------------------

TITLE: Initializing Button Story for Web Components (TS)
DESCRIPTION: This code initializes a Storybook story for a web component button using TypeScript. It imports the necessary modules and defines the component as 'demo-button' and sets specific parameters at the component level, such as background options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  //👇 Creates specific parameters at the component level
  parameters: {
    backgrounds: {
      options: {},
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Running Jest tests for React components
DESCRIPTION: This command is used to run Jest tests specifically for React components, filtering by the `react-properties.test.ts` file and enabling watch mode for continuous testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#_snippet_9

LANGUAGE: bash
CODE:
```
yarn jest --testPathPattern=react-properties.test.ts --watch
```

----------------------------------------

TITLE: Installing Storybook with npm
DESCRIPTION: This command installs Storybook for React Native Web using npm as the package manager. It adds the '@storybook/react-native-web-vite' and 'vite' packages as development dependencies. Ensure npm is correctly set up in your system before running this command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-native-web-vite-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev @storybook/react-native-web-vite vite
```

----------------------------------------

TITLE: Defining Button Stories in Vue with JavaScript (CSF 2)
DESCRIPTION: Creates a default button story for Vue components using JavaScript and CSF 2 format. Uses Vue's setup function to pass args to the component and includes the component in the template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
// Other imports and story implementation
export const Default = (args) => ({
  components: { Button },
  setup() {
    return { args };
  },
  template: '<Button v-bind="args" />',
});
```

----------------------------------------

TITLE: Rendering Vue Button Component
DESCRIPTION: This snippet demonstrates how to render a Vue Button component within a Storybook story using a render function. It defines the components and template needed to display the button with a primary style and a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_17

LANGUAGE: typescript
CODE:
```
export const Primary = {
  render: () => ({
    components: { Button },
    template: '<Button primary label="Button" />',
  }),
};
```

----------------------------------------

TITLE: Defining Svelte Storybook Meta for Button Component (Svelte CSF)
DESCRIPTION: This code defines the Storybook meta configuration for a Svelte Button component using the Component Story Format (CSF). It imports necessary modules, including defineMeta from '@storybook/addon-svelte-csf', action from 'storybook/actions', and the Button component. It then uses defineMeta to set up the component and its onClick action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { action } from 'storybook/actions';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    args: {
      // 👇 Create an action that appears when the onClick event is fired
      onClick: action('on-click'),
    },
  });
</script>
```

----------------------------------------

TITLE: Vue CSF Story with Render Function (JS)
DESCRIPTION: Configures a Storybook story for a Vue component using Component Story Format (CSF) in JavaScript, including a render function. The render function defines how the component is rendered, including setting up the component and template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_12

LANGUAGE: js
CODE:
```
import YourComponent from './YourComponent.vue';

//👇 This default export determines where your story goes in the story list
export default {
  component: YourComponent,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const FirstStory = {
  render: (args) => ({
    components: { YourComponent },
    setup() {
      return { args };
    },
    template: '<YourComponent v-bind="args" />',
  }),
  args: {
    //👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Using Absolute Imports in Next.js with Storybook
DESCRIPTION: This example demonstrates the use of absolute imports in a Next.js component. It imports a component and a CSS module using paths relative to the project's root directory. This approach is supported in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_17

LANGUAGE: jsx
CODE:
```
import Button from 'components/button';
import styles from 'styles/HomePage.module.css';

export default function HomePage() {
  return (
    <>
      <h1 className={styles.title}>Hello World</h1>
      <Button />
    </>
  );
}
```

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Chromatic UI Testing
DESCRIPTION: Defines a GitHub Actions workflow that publishes Storybook components to Chromatic for visual testing and review. The workflow runs on push events, sets up a Node.js environment, and uses the official Chromatic GitHub Action with a project token.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-github-action.md#2025-04-22_snippet_0

LANGUAGE: yml
CODE:
```
# Workflow name
name: 'Chromatic Publish'

# Event for the workflow
on: push

# List of jobs
jobs:
  test:
    # Operating System
    runs-on: ubuntu-latest
    # Job steps
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      - run: yarn
      #👇 Adds Chromatic as a step in the workflow
      - uses: chromaui/action@latest
        # Options required for Chromatic's GitHub Action
        with:
          #👇 Chromatic projectToken,
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          token: ${{ secrets.GITHUB_TOKEN }}
```

----------------------------------------

TITLE: Enabling Addon Docs Integration in ember-cli-build.js
DESCRIPTION: Configuration to enable the addon docs integration in the Ember CLI build process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
let app = new EmberApp(defaults, {
  'ember-cli-storybook': {
    enableAddonDocsIntegration: true,
  },
});
```

----------------------------------------

TITLE: Configuring Accessibility Parameters for Web Component Stories in JavaScript
DESCRIPTION: This code configures accessibility parameters for a web component Storybook story using JavaScript. It defines rules to include or exclude specific accessibility checks, configures Axe's options, and sets global accessibility parameters. The component is defined as 'my-component'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_10

LANGUAGE: js
CODE:
```
export default {
  component: 'my-component',
  parameters: {
    a11y: {
      // Optional selector to inspect
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Creating Storybook Story for Preact Component (JS)
DESCRIPTION: This code creates a Storybook story for a Preact component using JavaScript. It imports the necessary modules from 'preact' and the YourComponent. It defines the component and a render function that uses JSX to render the component with the provided arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_3

LANGUAGE: js
CODE:
```
/** @jsx h */
import { h } from 'preact';

import { YourComponent } from './YourComponent';

//👇 This default export determines where your story goes in the story list
export default {
  component: YourComponent,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const FirstStory = {
  render: (args) => <YourComponent {...args} />,
  args: {
    //👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Initializing List Component Stories with Angular
DESCRIPTION: This code defines Storybook stories for an Angular List component. It imports necessary modules and components, configures metadata for Storybook, and defines stories for rendering empty, single-item, and multi-item lists using Angular templates.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { moduleMetadata } from '@storybook/angular';

import { CommonModule } from '@angular/common';

import { List } from './list.component';
import { ListItem } from './list-item.component';

const meta: Meta<List> = {
  component: List,
  decorators: [
    moduleMetadata({
      declarations: [List, ListItem],
      imports: [CommonModule],
    }),
  ],
};

export default meta;
type Story = StoryObj<List>;

// Always an empty list, not super interesting
export const Empty: Story = {
  render: (args) => ({
    props: args,
    template: '<app-list></app-list>',
  }),
};

export const OneItem: Story = {
  render: (args) => ({
    props: args,
    template: `
      <app-list>
        <app-list-item></app-list-item>
      </app-list>`,
  }),
};

export const ManyItems: Story = {
  render: (args) => ({
    props: args,
    template: `
      <app-list>
        <app-list-item></app-list-item>
        <app-list-item></app-list-item>
        <app-list-item></app-list-item>
      </app-list>
    `,
  }),
};
```

----------------------------------------

TITLE: Defining Web Component Story with Render Function (TS)
DESCRIPTION: This TypeScript code defines a Storybook story for a web component named 'my-component'. It uses a render function to control how the component is rendered within a layout, including a header and article section. The 'html' tag is likely from 'lit' library. It uses TypeScript types for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#_snippet_9

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

// This story uses a render function to fully control how the component renders.
export const Example: Story = {
  render: () => html`
    <layout>
      <header>
        <h1>Example</h1>
      </header>
      <article>
        <my-component />
      </article>
    </layout>
  `,
};
```

----------------------------------------

TITLE: Initializing Button Stories with Svelte (TS)
DESCRIPTION: This snippet initializes stories for a Button component in Svelte using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines metadata for the Button component, including documentation parameters. It also defines a primary story with specific documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

/**
 * Button stories
 * These stories showcase the button
 */
const meta = {
  component: Button,
  parameters: {
    docs: {
      description: {
        component: 'Another description, overriding the comments',
      },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/**
 * Primary Button
 * This is the primary button
 */
export const Primary: Story = {
  parameters: {
    docs: {
      description: {
        story: 'Another description on the story, overriding the comments',
      },
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with React Decorators
DESCRIPTION: This code initializes a Storybook story for a React Button component. It imports the Button component and defines a primary story with a decorator that adds styling to the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Primary = {
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </div>
    ),
  ],
};
```

----------------------------------------

TITLE: Configuring Storybook Story with Mocked Data (TS)
DESCRIPTION: This TypeScript code configures a Storybook story for a DocumentScreen component, wrapping it with an ApolloWrapperClient component. It defines mocked data and MSW handlers to simulate both successful and error GraphQL query responses.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_21

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import { graphql, HttpResponse, delay } from 'msw';

import WrapperComponent from './ApolloWrapperClient.vue';
import DocumentScreen from './YourPage.vue';

const meta = {
  component: DocumentScreen,
  render: () => ({
    components: { DocumentScreen, WrapperComponent },
    template: '<WrapperComponent><DocumentScreen /></WrapperComponent>',
  }),
} satisfies Meta<typeof DocumentScreen>;

//👇The mocked data that will be used in the story
const TestData = {
  user: {
    userID: 1,
    name: 'Someone',
  },
  document: {
    id: 1,
    userID: 1,
    title: 'Something',
    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    status: 'approved',
  },
  subdocuments: [
    {
      id: 1,
      userID: 1,
      title: 'Something',
      content:
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
      status: 'approved',
    },
  ],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const MockedSuccess: Story = {
  parameters: {
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', () => {
          return HttpResponse.json({
            data: {
              allInfo: {
                ...TestData,
              },
            },
          });
        }),
      ],
    },
  },
};

export const MockedError: Story = {
  parameters: {
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', async () => {
          await delay(800);
          return HttpResponse.json({
            errors: [
              {
                message: 'Access denied',
              },
            ],
          });
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Setting Themes with Data Attributes using withThemeByDataAttribute
DESCRIPTION: A decorator that applies theme values via data attributes to a parent element. It sets the specified data attribute on the parent element with the value corresponding to the selected theme.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { withThemeByDataAttribute } from '@storybook/addon-themes';

export const decorators = [
  withThemeByDataAttribute({
    themes: {
      light: 'light',
      dark: 'dark',
    },
    defaultTheme: 'light',
    attributeName: 'data-bs-theme',
  }),
];
```

----------------------------------------

TITLE: Configuring Component Meta with ArgTypes for Web Components (JS)
DESCRIPTION: This code configures the metadata for a Storybook story for web components using JavaScript. It sets the component to 'your-component' and disables the 'foo' property from appearing in the UI by setting 'disable: true' within the 'table' property of the 'argTypes' configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'your-component',
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      table: {
        disable: true,
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring NYC File Extensions using JSON
DESCRIPTION: JSON configuration for NYC test coverage tool. This configuration specifies which file extensions should be included in coverage analysis, equivalent to the JavaScript configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-report-vue.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "extension": [".js", ".cjs", ".mjs", ".ts", ".tsx", ".jsx", ".vue"]
}
```

----------------------------------------

TITLE: Initializing Storybook Preview with Angular Decorator
DESCRIPTION: This snippet initializes the Storybook preview with an Angular decorator. It uses componentWrapperDecorator to wrap stories with a div that applies a theme based on global parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/angular';
import { componentWrapperDecorator } from '@storybook/angular';

const preview: Preview = {
  decorators: [
    componentWrapperDecorator(
      (story) => `<div [class]="myTheme">${story}</div>`,
      ({ globals }) => {
        return { myTheme: globals['theme'] };
      },
    ),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Disabling Emotion Alias Feature Flag in Storybook
DESCRIPTION: This code snippet demonstrates how to disable the `emotionAlias` feature flag in a Storybook configuration. This flag is no longer needed in Storybook 7.0 and should be removed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_109

LANGUAGE: javascript
CODE:
```
module.exports = {
  features: {
    emotionAlias: false,
  },
};
```

----------------------------------------

TITLE: Correct CSF Default Export in JavaScript
DESCRIPTION: An example of a CSF default export that correctly includes the component property, adhering to the csf-component rule. This enables various Storybook features like automatic prop table documentation and auto-generated controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/csf-component.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Button',
  component: Button,
};
```

----------------------------------------

TITLE: Unattached Documentation with Meta Doc Block
DESCRIPTION: Demonstrates creating a documentation-only page using the Meta Doc Block in MDX. Storybook renders this as an 'unattached' documentation page in the sidebar navigation menu.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_5

LANGUAGE: MDX
CODE:
```
<Meta title="Docs/MDX/Docs-only page" />

# Docs-only page

This is a docs-only page.

<Canvas>
  <Story name="Basic">
    {/* Add a story here if needed */}
  </Story>
</Canvas>
```

----------------------------------------

TITLE: Run Storybook with Angular Builder
DESCRIPTION: These commands demonstrate how to run Storybook and build Storybook using the Angular builder. This is the recommended way to run Storybook when using the SB Angular builder. It uses the `ng run` command with the project name and target.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_181

LANGUAGE: shell
CODE:
```
ng run my-default-project:storybook
ng run my-default-project:build-storybook
```

----------------------------------------

TITLE: Defining Web Component Story with Render Function (JS)
DESCRIPTION: This JavaScript code defines a Storybook story for a web component named 'my-component'. It uses a render function to control how the component is rendered within a layout, including a header and article section. The 'html' tag is likely from 'lit' library.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#_snippet_8

LANGUAGE: js
CODE:
```
import { html } from 'lit';

export default {
  component: 'my-component',
};

// This story uses a render function to fully control how the component renders.
export const Example = {
  render: () => html`
    <layout>
      <header>
        <h1>Example</h1>
      </header>
      <article>
        <my-component />
      </article>
    </layout>
  `,
};
```

----------------------------------------

TITLE: Consuming Globals from an Addon
DESCRIPTION: This example demonstrates how to retrieve globals within a Storybook addon using the `useGlobals()` hook from the `storybook/manager-api` module. It expands the ThemeProvider example to display which theme is active inside a panel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import React, { useEffect, useState } from 'react';
import { addons, types, useGlobals } from '@storybook/manager-api';

const ADDON_ID = 'storybook/theme-switcher';
const PANEL_ID = `${ADDON_ID}/panel`;

const ThemePanel = () => {
  const [globals] = useGlobals();
  const [theme, setTheme] = useState(globals.theme);

  useEffect(() => {
    setTheme(globals.theme);
  }, [globals.theme]);

  return (
    <div>
      <p>Current theme: {theme}</p>
    </div>
  );
};

addons.register(ADDON_ID, () => {
  addons.addPanel({
    type: types.PANEL,
    title: 'Theme',
    render: ThemePanel,
    paramKey: 'theme',
  });
});

```

----------------------------------------

TITLE: Registering Custom Story Indexer in Storybook Configuration (TS)
DESCRIPTION: This code defines a custom indexer for Storybook using TypeScript, extracting the story title from the filename and formatting it using the makeTitle function. It configures Storybook to use this indexer by adding it to the experimental_indexers array, ensuring type safety with StorybookConfig and Indexer types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers-title.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/your-framework';
import type { Indexer } from 'storybook/internal/types';

const combosIndexer: Indexer = {
  test: /\.stories\.[tj]sx?$/,
  createIndex: async (fileName, { makeTitle }) => {
    // 👇 Grab title from fileName
    const title = fileName.match(/\/(.*)\.stories/)[1];

    // Read file and generate entries ...
    const entries = [];

    return entries.map((entry) => ({
      type: 'story',
      // 👇 Use makeTitle to format the title
      title: `${makeTitle(title)} Custom`,
      importPath: fileName,
      exportName: entry.name,
    }));
  },
};

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  experimental_indexers: async (existingIndexers) => [...existingIndexers, combosIndexer],
};

export default config;
```

----------------------------------------

TITLE: Button Variants in TypeScript React
DESCRIPTION: Demonstrates the use of the variant prop to change the Button's visual style. The component supports 'outline', 'solid', and 'ghost' variants, providing different visual options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
<Button variant="outline">Outline</Button>
<Button variant="solid">Solid</Button>
<Button variant="Ghost">Ghost</Button>
```

----------------------------------------

TITLE: Setting the Configuration Directory for Angular Storybook
DESCRIPTION: Specifies the location of the Storybook configuration directory. This directory contains files like main.js and preview.js.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_18

LANGUAGE: JSON
CODE:
```
{"configDir": ".storybook"}
```

----------------------------------------

TITLE: Initializing Checkbox Storybook story (JS)
DESCRIPTION: This code initializes a Storybook story for a Checkbox component. It imports the CheckBox component and defines the component's metadata, including the title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#_snippet_3

LANGUAGE: js
CODE:
```
import { CheckBox } from './Checkbox';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Design System/Atoms/Checkbox',
  component: CheckBox,
};
```

----------------------------------------

TITLE: Customizing Storybook Preview Body in TypeScript
DESCRIPTION: This snippet demonstrates how to customize the Storybook preview body in TypeScript. It imports the StorybookConfig type and conditionally adds an analytics script based on an environment variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  previewBody: (body) => `
    ${body}
    ${
      process.env.ANALYTICS_ID ? '<script src="https://cdn.example.com/analytics.js"></script>' : ''
    }
  `,
};

export default config;
```

----------------------------------------

TITLE: Initializing Storybook Project Annotations for React
DESCRIPTION: This snippet initializes Storybook project annotations for a React project using Vite. It imports necessary modules from Storybook and Vitest, merges preview and addon annotations, and runs Storybook's beforeAll hook. This ensures that Storybook is properly initialized with the necessary settings and configurations before running stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { beforeAll } from 'vitest';
// 👇 If you're using Next.js, import from @storybook/nextjs
//   If you're using Next.js with Vite, import from @storybook/experimental-nextjs-vite
import { setProjectAnnotations } from '@storybook/react-vite';
// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this
import * as addonAnnotations from 'my-addon/preview';
import * as previewAnnotations from './.storybook/preview';

const annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);

// Run Storybook's beforeAll hook
beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Configuring Storybook Sidebar Label Rendering with Lodash
DESCRIPTION: Sets up custom rendering for sidebar labels in Storybook, using Lodash's startCase function to format non-story item names while leaving story names unchanged.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-manager-render-label-stories.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { addons } from 'storybook/manager-api';

import startCase from 'lodash/startCase.js';

addons.setConfig({
  sidebar: {
    renderLabel: ({ name, type }) => (type === 'story' ? name : startCase(name)),
  },
});
```

----------------------------------------

TITLE: Configure Babel Options for MDX in Storybook Docs
DESCRIPTION: This code snippet shows how to configure Babel options for MDX files in Storybook's `.storybook/main.js` file.  It restores the old behavior of applying the user's babelrc or allows passing MDX-specific Babel options by setting `mdxBabelOptions`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_218

LANGUAGE: javascript
CODE:
```
module.exports = {
  addons: [
    {
      name: "@storybook/addon-docs",
      options: { mdxBabelOptions: { babelrc: true, configFile: true } },
    },
  ],
};
```

----------------------------------------

TITLE: Creating Custom Storybook Theme in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a custom theme for Storybook using the create function from storybook/theming. It sets the base theme to 'light' and customizes branding elements such as title, URL, image, and link target.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-theme-example-variables.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { create } from 'storybook/theming';

export default create({
  base: 'light',
  brandTitle: 'My custom Storybook',
  brandUrl: 'https://example.com',
  brandImage: 'https://storybook.js.org/images/placeholders/350x150.png',
  brandTarget: '_self',
});
```

----------------------------------------

TITLE: Configuring Webpack for SVG Handling in Storybook (JS)
DESCRIPTION: This code snippet configures Storybook's webpack settings to handle SVG files using @svgr/webpack. It modifies the existing image rule to exclude SVG files and adds a new rule to process them with @svgr/webpack. The webpackFinal function is used to modify the webpack configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-configure-svgr.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // ...
  webpackFinal: async (config) => {
    config.module = config.module || {};
    config.module.rules = config.module.rules || [];

    // This modifies the existing image rule to exclude .svg files
    // since you want to handle those files with @svgr/webpack
    const imageRule = config.module.rules.find((rule) => rule?.['test']?.test('.svg'));
    if (imageRule) {
      imageRule['exclude'] = /\.svg$/;
    }

    // Configure .svg files to be loaded with @svgr/webpack
    config.module.rules.push({
      test: /\.svg$/,
      use: ['@svgr/webpack'],
    });

    return config;
  },
};
```

----------------------------------------

TITLE: Implementing Tab Component in Storybook Addon
DESCRIPTION: A React component that creates a tab interface for the addon. Uses useParameter hook to access addon parameters. Conditionally renders a TabContent component based on the active state and displays parameter data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-toolkit-types.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
import React from 'react';

import { useParameter } from 'storybook/manager-api';

import { PARAM_KEY } from './constants';

// See https://github.com/storybookjs/addon-kit/blob/main/src/components/TabContent.tsx for an example of a TabContent component
import { TabContent } from './components/TabContent';

interface TabProps {
  active: boolean;
}

export const Tab: React.FC<TabProps> = ({ active }) => {
  // https://storybook.js.org/docs/addons/addons-api#useparameter
  const paramData = useParameter<string>(PARAM_KEY, '');

  return active ? <TabContent code={paramData} /> : null;
};
```

----------------------------------------

TITLE: Configuring MDX Documentation with SCSS Syntax Highlighting
DESCRIPTION: Sets up a Storybook documentation page using MDX format with custom syntax highlighting for SCSS code blocks. The code imports necessary components from Storybook addons and react-syntax-highlighter, and includes an example SCSS snippet.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-custom-syntax-highlight.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';

<Meta title="A Storybook doc with a custom syntax highlight for SCSS" />

# SCSS example

This is a sample SCSS code block example highlighted in Storybook

{/* Don't forget to replace (") with (```) when you copy the snippet to your own app */}

"scss
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
"

{/* The usage of this "Component" is intentional to enable react-syntax-highlighter's own highlighter */}

export const Component = () => {
  return <SyntaxHighlighter/>;
};
```

----------------------------------------

TITLE: Configuring Storybook Preview with Custom Canvas Component (TS)
DESCRIPTION: This TypeScript snippet configures the Storybook preview, similar to the JavaScript version, but with type annotations. It imports the `Preview` type from `@storybook/your-framework` and defines a `preview` object with a custom `Canvas` component (`MyCanvas`) within the `docs.components` parameter. This allows overriding the default Canvas component for customized documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-canvas.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

import { MyCanvas } from './MyCanvas';

const preview: Preview = {
  parameters: {
    docs: {
      components: {
        Canvas: MyCanvas,
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Defining Button Stories with Render Function in HTML
DESCRIPTION: This code defines Storybook stories for an HTML Button component, including Primary, Secondary, and Tertiary variants. It imports the createButton function from './Button'. The stories use a render function to create the button with specified arguments, configuring the button's appearance through the 'args' property, setting properties like 'backgroundColor' and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_1

LANGUAGE: js
CODE:
```
import { createButton } from './Button';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: (args) => createButton(args),
  args: {
    backgroundColor: '#ff0',
    label: 'Button',
  },
};

export const Secondary = {
  render: (args) => createButton(args),
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
};

export const Tertiary = {
  render: (args) => createButton(args),
  args: {
    ...Primary.args,
    label: '📚📕📈🤓',
  },
};
```

----------------------------------------

TITLE: Defining List Component Stories in Vue (TypeScript)
DESCRIPTION: Defines stories for the List component in Vue using TypeScript. It imports necessary types and components, defines a ListTemplate that renders the List with ListItem components based on the provided items, and creates stories for Empty and OneItem scenarios.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_9

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import List from './List.vue';
import ListItem from './ListItem.vue';

//👇 Imports a specific story from ListItem stories
import { Unchecked } from './ListItem.stories';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

//👇 The ListTemplate construct will be spread to the existing stories.
export const ListTemplate: Story = {
  render: (args) => ({
    components: { List, ListItem },
    setup() {
      return { ...args };
    },
    template: `
      <List v-bind="args">
        <div v-for="item in items" :key="item.title">
          <ListItem :item="item"/>
        </div>
      </List>
    `,
  }),
};

export const Empty: Story = {
  ...ListTemplate,
  args: {
    items: [],
  },
};
export const OneItem: Story = {
  ...ListTemplate,
  args: {
    items: [
      {
        ...Unchecked.args,
      },
    ],
  },
};
```

----------------------------------------

TITLE: Defining Storybook Meta for Angular Component
DESCRIPTION: This code defines the Storybook metadata for an Angular component named 'Example'. It specifies the component to be used in the story and configures the 'label' argument with a select control, options (Normal, Bold, Italic), and corresponding HTML mappings for Bold and Italic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Example } from './Example';

const meta: Meta<Example> = {
  component: Example,
  argTypes: {
    label: {
      control: { type: 'select' },
      options: ['Normal', 'Bold', 'Italic'],
      mapping: {
        Bold: <b>Bold</b>,
        Italic: <i>Italic</i>,
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Save Flow Story with Interactions (TS)
DESCRIPTION: This story defines the 'Save Flow' scenario for the NoteUI component. It sets up the component with editing enabled and a specific note, then simulates a user clicking the save button. Finally, it asserts that the mocked saveNote function was called, verifying the component's interaction with its dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { expect, userEvent, within } from 'storybook/test';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { saveNote } from '#app/actions.mock';
import { createNotes } from '#mocks/notes';

import NoteUI from './note-ui';

const meta = {
  title: 'Mocked/NoteUI',
  component: NoteUI,
} satisfies Meta<typeof NoteUI>;
export default meta;

type Story = StoryObj<typeof meta>;

const notes = createNotes();

export const SaveFlow: Story = {
  name: 'Save Flow ▶',
  args: {
    isEditing: true,
    note: notes[0],
  },
  play: async ({ canvasElement, step }) => {
    const canvas = within(canvasElement);

    const saveButton = canvas.getByRole('menuitem', { name: /done/i });
    await userEvent.click(saveButton);
    // 👇 This is the mock function, so you can assert its behavior
    await expect(saveNote).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Defining Button Stories with Args in Solid (JS)
DESCRIPTION: This code defines Storybook stories for a Solid Button component, including Primary, Secondary, and Tertiary variants. It imports the Button component from './Button'. The stories configure the button's appearance through the 'args' property, setting properties like 'backgroundColor' and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_5

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Primary = {
  args: {
    backgroundColor: '#ff0',
    label: 'Button',
  },
};

export const Secondary = {
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
};

export const Tertiary = {
  args: {
    ...Primary.args,
    label: '📚📕📈🤓',
  },
};
```

----------------------------------------

TITLE: Configuring Vue Docgen Options
DESCRIPTION: Advanced configuration example showing how to set up vue-docgen-api options with path aliases.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import * as path from 'path';

export default {
  addons: [
    {
      name: '@storybook/addon-docs',
      options: {
        vueDocgenOptions: {
          alias: {
            '@': path.resolve(__dirname, '../'),
          },
        },
      },
    },
  ],
};
```

----------------------------------------

TITLE: Configure a11y tests with story information
DESCRIPTION: This snippet demonstrates how to use helper methods provided by the test runner to access story information and configure accessibility tests based on specific story requirements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_14

LANGUAGE: javascript
CODE:
```
const { injectAxe, checkA11y, configureAxe } = require('axe-playwright');

module.exports = {
  async preVisit(page, context) {
    await injectAxe(page);
    await configureAxe(page, {
      rules: [
        {
          id: 'color-contrast',
          enabled: context.story.parameters.a11y?.disableContrast ? false : true,
        },
      ],
    });
  },
  async postVisit(page, context) {
    await checkA11y(page, undefined, {
      detailedReport: true,
      detailedReportOptions: {
        html: true,
      },
    });
  },
};

```

----------------------------------------

TITLE: Initializing Button Story with Vue (TypeScript)
DESCRIPTION: This code initializes a Storybook story for a Vue Button component using TypeScript. It imports necessary types from '@storybook/vue3-vite' and defines the component metadata.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#_snippet_9

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
```

----------------------------------------

TITLE: Defining Angular Component in TypeScript
DESCRIPTION: Defines an Angular component with user, document, and subdocuments as @Input properties. The component displays these in a structured layout using Angular's template syntax. Dependencies include Angular core modules, and it requires valid user and document objects to function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
import { Component, Input } from '@angular/core';

@Component({
  selector: 'document-screen',
  template: `
    <page-layout [user]="user">
      <document-header [document]="document"></document-header>
      <document-list [documents]="subdocuments"></document-list>
    </page-layout>
  `,
})
export class DocumentScreen {
  @Input()
  user: any = { id: 0, name: 'Some User' };

  @Input()
  document: any = { id: 0, title: 'Some Title' };

  @Input()
  subdocuments: any = [];
}
```

----------------------------------------

TITLE: Testing Form Validation in Vue with Storybook Stories (TypeScript)
DESCRIPTION: Implements form validation testing using @testing-library/vue and @storybook/vue3's composeStories with TypeScript. Tests form validation by running the InvalidForm story and verifying the invalid form state after button click.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { fireEvent, render, screen } from '@testing-library/vue';

import { composeStories } from '@storybook/vue3';

import * as stories from './LoginForm.stories'; // 👈 Our stories imported here.

const { InvalidForm } = composeStories(stories);

test('Checks if the form is valid', async () => {
  // Renders the composed story
  await InvalidForm.run();

  const buttonElement = screen.getByRole('button', {
    name: 'Submit',
  });

  fireEvent.click(buttonElement);

  const isFormValid = screen.getByLabelText('invalid-form');
  expect(isFormValid).toBeInTheDocument();
});
```

----------------------------------------

TITLE: Initializing Histogram Story for Angular
DESCRIPTION: This code defines a Storybook story for the Histogram component in an Angular environment. It imports the necessary modules from '@storybook/angular' and defines the component's metadata. The 'Default' story configures the component with specific arguments such as 'dataType', 'showHistogramLabels', 'histogramAccentColor', and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { HistogramComponent } from './histogram.component';

const meta: Meta<HistogramComponent> = {
  component: HistogramComponent,
};

export default meta;
type Story = StoryObj<HistogramComponent>;

export const Default: Story = {
  args: {
    dataType: 'latency',
    showHistogramLabels: true,
    histogramAccentColor: '#1EA7FD',
    label: 'Latency distribution',
  },
};
```

----------------------------------------

TITLE: Using Story Block with Autoplay Prop
DESCRIPTION: Shows how to use the Story block with the autoplay property enabled to automatically run the story's play function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-story.mdx#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
<Story of={ButtonStories.Basic} autoplay />
```

----------------------------------------

TITLE: Implementing ColorPalette and ColorItem in Storybook MDX
DESCRIPTION: This snippet demonstrates how to use the ColorPalette and ColorItem blocks in a Storybook MDX file to document various color swatches, including greyscale, primary, secondary, and gradient colors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-colorpalette.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
import { Meta, ColorPalette, ColorItem } from '@storybook/addon-docs/blocks';

<Meta title="Colors" />

<ColorPalette>
  <ColorItem
    title="theme.color.greyscale"
    subtitle="Some of the greys"
    colors={{ White: '#FFFFFF', Alabaster: '#F8F8F8', Concrete: '#F3F3F3' }}
  />
  <ColorItem 
    title="theme.color.primary" 
    subtitle="Coral" 
    colors={{ WildWatermelon: '#FF4785' }} 
  />
  <ColorItem 
    title="theme.color.secondary" 
    subtitle="Ocean" 
    colors={{ DodgerBlue: '#1EA7FD' }} 
  />
  <ColorItem
    title="theme.color.positive"
    subtitle="Green"
    colors={{
      Apple: 'rgba(102,191,60,1)',
      Apple80: 'rgba(102,191,60,.8)',
      Apple60: 'rgba(102,191,60,.6)',
      Apple30: 'rgba(102,191,60,.3)',
    }}
  />
  <ColorItem
    title="gradient"
    subtitle="Grayscale"
    colors={{
      Gradient: 'linear-gradient(to right,white,black)',
    }}
  />
  <ColorItem
    title="gradient"
    subtitle="Grayscale"
    colors={['linear-gradient(65deg,white,black)']}
  />
</ColorPalette>
```

----------------------------------------

TITLE: List Available Automigrations
DESCRIPTION: Displays a list of available automigrations that can be applied to the Storybook project. This allows users to see which migrations are available before running the automigrate command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_95

LANGUAGE: shell
CODE:
```
storybook automigrate --list
```

----------------------------------------

TITLE: Defining Button Story with ArgTypes in Svelte CSF (TS)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and defines a 'Basic' story with argTypes to control the 'label' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Basic"
  argTypes={{
    label: { control: 'text', description: 'Overwritten description' }
  }}
/>
```

----------------------------------------

TITLE: Initializing Storybook Meta for Web Component (TS)
DESCRIPTION: This code initializes the Storybook metadata for a web component using TypeScript. It imports the Meta type from @storybook/web-components-vite. It defines the title, component (specified as a string), decorators, and parameters for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Path/To/MyComponent',
  component: 'my-component',
  decorators: [
    /* ... */
  ],
  parameters: {
    /* ... */
  },
};

export default meta;
```

----------------------------------------

TITLE: Defining Storybook Story for Web Components - JS
DESCRIPTION: This code defines a Storybook story for a web component using JavaScript. It exports a default object containing the component name and its arguments. It configures the component and uses 'args' to set the default value for the 'value' property, instead of the deprecated 'defaultValue'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-example',
  argTypes: {
    value: {
      // ⛔️ Deprecated, do not use
      defaultValue: 0,
    },
  },
  // ✅ Do this instead
  args: {
    value: 0,
  },
};
```

----------------------------------------

TITLE: Configuring Initial URL Path for Storybook
DESCRIPTION: This command configures the URL that Storybook should open when it first launches the browser. It's useful for directing users to a specific page or documentation section upon startup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_21

LANGUAGE: CLI
CODE:
```
storybook dev --initial-path=/docs/getting-started--docs
```

----------------------------------------

TITLE: Configuring Storybook Meta for Angular Component
DESCRIPTION: This snippet configures the Storybook metadata for an Angular component. It imports the Meta type from Storybook's Angular package and defines the component, tags, and documentation parameters, including disabling the table of contents.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-disable-toc.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
  tags: ['autodocs'],
  parameters: {
    docs: {
      toc: {
        disable: true, // 👈 Disables the table of contents
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Specifying TypeScript Configuration for Angular Storybook
DESCRIPTION: Defines the location of the TypeScript configuration file used by Storybook, relative to the workspace root.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_14

LANGUAGE: JSON
CODE:
```
{"tsConfig": "./tsconfig.json"}
```

----------------------------------------

TITLE: Automigrate with Enable Crash Reports
DESCRIPTION: Enables sending crash reports to Storybook's telemetry during the automigration process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_100

LANGUAGE: shell
CODE:
```
storybook automigrate --enable-crash-reports
```

----------------------------------------

TITLE: Configuring Story for Example Component (JS)
DESCRIPTION: This snippet configures a Storybook story for the Example component using JavaScript. It defines the component and its argument types, specifically describing the 'value' property of a slider.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Example } from './Example';

export default {
  component: Example,
  argTypes: {
    value: {
      description: 'The value of the slider',
    },
  },
};
```

----------------------------------------

TITLE: Vue Story with Image
DESCRIPTION: This snippet defines a Storybook story in Vue that renders an image. It imports the image file, creates an image object with src and alt properties, and then uses the setup function to return the image object to the template. The template then binds the image object to an img element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import imageFile from './static/image.png';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

const image = {
  src: imageFile,
  alt: 'my image',
};

export default meta;
type Story = StoryObj<typeof meta>;

export const WithAnImage: Story = {
  render: () => ({
    setup() {
      //👇 Returns the content of the image object create above.
      return { image };
    },
    template: `<img v-bind="image"/>`,
  }),
};
```

----------------------------------------

TITLE: Rendering Button in English (Vue)
DESCRIPTION: This test renders the Primary story of the Button component in English using Storybook's composeStory function for Vue. It overrides the global locale setting to 'en' and then executes the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-override-globals.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { test } from '@jest/globals';
import { render } from '@testing-library/vue';
import { composeStory } from '@storybook/vue3-vite';

import meta, { Primary as PrimaryStory } from './Button.stories';

test('renders in English', async () => {
  const Primary = composeStory(
    PrimaryStory,
    meta,
    { globals: { locale: 'en' } } // 👈 Project annotations to override the locale
  );

  await Primary.run();
});
```

----------------------------------------

TITLE: Creating MDX Documentation for Angular Components
DESCRIPTION: MDX example showing how to create component documentation that includes metadata, description, story, and ArgsTable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_8

LANGUAGE: markdown
CODE:
```
import { Meta, Story, ArgsTable } from '@storybook/addon-docs';
import { AppComponent } from './app.component';

<Meta title='App Component' component={AppComponent} />

# App Component

Some **markdown** description, or whatever you want.

<Story name='basic' height='400px'>{{
  component: AppComponent,
  props: {},
}}</Story>

## ArgsTable

<ArgsTable of={AppComponent} />
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: A TypeScript configuration for Storybook's main.ts file that imports type definitions and defines the framework, story file patterns, and documentation settings. This configuration provides type safety for the Storybook configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-docs-default-name.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  docs: {
    defaultName: 'Documentation',
  },
};

export default config;
```

----------------------------------------

TITLE: Defining Button Stories with Svelte CSF
DESCRIPTION: This snippet defines stories for a Button component in Svelte using the Component Story Format (CSF) with SvelteKit. It imports the Button component and uses defineMeta from '@storybook/addon-svelte-csf' to configure the component's metadata and documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  /**
   * Button stories
   * These stories showcase the button
   */
  const meta = defineMeta({
    component: Button,
    parameters: {
      docs: {
        description: {
          component: 'Another description, overriding the comments',
        },
      },
    },
  });
</script>

<!--
 Button stories
 These stories showcase the button
 -->

<Story
  name="Primary"
  parameters={{
    docs: {
      description: {
        story: 'Another description on the story, overriding the comments'
      },
    },
  }} />
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and defines a basic story with autoplay enabled in the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

export const Basic = {
  parameters: {
    docs: {
      story: { autoplay: true },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Button Story in Svelte (TypeScript, CSF)
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using TypeScript and the Component Story Format (CSF). It imports the Button component and defines its metadata, including argument types for background color and default arguments to set the primary property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_7

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    //👇 Creates specific argTypes
    argTypes: {
      backgroundColor: { control: 'color' },
    },
    args: {
      //👇 Now all Button stories will be primary.
      primary: true,
    },
  });
</script>
```

----------------------------------------

TITLE: Defining Button Stories in JavaScript
DESCRIPTION: This JavaScript file defines stories for the Button component in Storybook. It exports a default object that configures the component's title and the component itself. It also defines a 'Primary' story with specific arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-title.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  // Sets the name for the stories container
  title: 'components/Button',
  // The component name will be used if `title` is not set
  component: Button,
};

// The story variable name will be used if `name` is not set
const Primary = {
  // Sets the name for that particular story
  name: 'Primary',
  args: {
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Configuring Button Story for CommonJS in Storybook
DESCRIPTION: This snippet configures a Storybook story for a Button component using CommonJS modules. It imports the Button component and defines the story's metadata, including the title and component. It then exports a default object containing the metadata and a named export 'Button' representing a basic story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hoisted.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Button as ButtonComponent } from './Button';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Design System/Atoms/Button',
  component: ButtonComponent,
};

// This is the only named export in the file, and it matches the component name
export const Button = {};
```

----------------------------------------

TITLE: Enable Code Panel in Docs Addon (JavaScript)
DESCRIPTION: This code snippet demonstrates how to enable the Code Panel in the Docs addon, which replaces the functionality of the removed @storybook/addon-storysource. It shows how to add the `codePanel: true` parameter to your stories or globally in .storybook/preview.js.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
export const parameters = {
  docs: {
    codePanel: true,
  },
};

```

LANGUAGE: JavaScript
CODE:
```
export const MyStory = {
  parameters: {
    docs: {
      codePanel: true,
    },
  },
};
```

----------------------------------------

TITLE: Initializing Storybook with pnpm
DESCRIPTION: Command to create a new Storybook project using pnpm package manager. Uses the latest version of the Storybook creation tool.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm create storybook@latest
```

----------------------------------------

TITLE: Configuring Autodocs in main.js|ts|cjs
DESCRIPTION: Extend your Storybook configuration file (i.e., `.storybook/main.js|ts|cjs`) and provide additional options to control how documentation gets created. Listed below are the available options and examples of how to use them.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
import type { StorybookConfig } from '@storybook/react';
const config: StorybookConfig = {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: [
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/addon-interactions',
  ],
  framework: {
    name: '@storybook/react-webpack5',
    options: {},
  },
  docs: {
    autodocs: 'tag',
    defaultName: 'Documentation',
  },
};
export default config;
```

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from "@storybook/react";
const config: StorybookConfig = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|ts|tsx)"],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: "@storybook/react-webpack5",
    options: {},
  },
  docs: {
    autodocs: "tag",
    defaultName: "Documentation",
  },
};
export default config;
```

----------------------------------------

TITLE: Custom Snapshot Serializer Implementation
DESCRIPTION: Custom serializer implementation for handling specific CSS-in-JS libraries and framework-specific attributes in snapshots.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/snapshot-testing.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  test: (val) => typeof val === 'string',
  print: (val) => {
    return val
      .replace(/data-emotion="[^"]+"/g, 'data-emotion=""')
      .replace(/data-testid="[^"]+"/g, '')
      .replace(/ng-[a-zA-Z-]+="[^"]+"/g, '');
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Features
DESCRIPTION: Defines the structure for configuring various Storybook features such as actions, controls, backgrounds, and viewport. Each property is a boolean that enables or disables the corresponding feature.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-features.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
{actions?: boolean;
  angularFilterNonInputControls?: boolean;
  argTypeTargetsV7?: boolean;
  backgrounds?: boolean;
  controls?: boolean;
  developmentModeForBuild?: boolean;
  highlight?: boolean;
  interactions?: boolean;
  legacyDecoratorFileOrder?: boolean;
  measure?: boolean;
  outline?: boolean;
  toolbars?: boolean;
  viewport?: boolean;}
```

----------------------------------------

TITLE: Rendering Button Story for HTML
DESCRIPTION: This code defines a Storybook story for an HTML Button component using a render function. The render function dynamically creates a button element, sets its text content based on the 'label' argument, and applies CSS classes based on the 'primary' argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_1

LANGUAGE: js
CODE:
```
export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: (args) => {
    const btn = document.createElement('button');
    btn.innerText = args.label;

    const mode = args.primary ? 'storybook-button--primary' : 'storybook-button--secondary';
    btn.className = ['storybook-button', 'storybook-button--medium', mode].join(' ');

    return btn;
  },
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (JS, CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using JavaScript and Component Story Format (CSF). It defines the component's metadata, including title, component, and parameters for Storybook addons. The Basic story is defined using the Story component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    /* 👇 The title prop is optional.
     * See https://storybook.js.org/docs/configure/#configure-story-loading
     * to learn how to generate automatic titles
    */
    title: 'Button',
    component: Button,
    parameters: {
      myAddon: {
        data: 'This data is passed to the addon',
      },
    },
  });
</script>

<Story name="Basic"/>
```

----------------------------------------

TITLE: Configuring Decorator Injection in Storybook Source Loader
DESCRIPTION: This snippet configures the source-loader in Storybook to control whether decorators should be injected automatically into the story source. Setting 'injectDecorator' to false disables auto-injection, requiring manual decorator addition. Targets '.stories.jsx?' files and uses '@storybook/source-loader'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/source-loader/README.md#2025-04-22_snippet_3

LANGUAGE: JavaScript
CODE:
```
module.exports = function ({ config }) {
  config.module.rules.push({
    test: /\.stories\.jsx?$/,\n    use: [\n      {\n        loader: require.resolve('@storybook/source-loader'),\n        options: { injectDecorator: false },\n      },\n    ],\n    enforce: 'pre',\n  });\n  return config;\n};
```

----------------------------------------

TITLE: Configuring Gizmo Story with ArgTypes in Svelte
DESCRIPTION: This code configures a Storybook story for the Gizmo component using Svelte. It defines the component and its properties (argTypes) to be controlled via the Storybook UI, allowing interactive modification and testing of the component's behavior.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#_snippet_2

LANGUAGE: js
CODE:
```
import Gizmo from './Gizmo.svelte';

export default {
  component: Gizmo,
  argTypes: {
    canRotate: {
      control: 'boolean',
    },
    width: {
      control: { type: 'number', min: 400, max: 1200, step: 50 },
    },
    height: {
      control: { type: 'range', min: 200, max: 1500, step: 50 },
    },
    rawData: {
      control: 'object',
    },
    coordinates: {
      control: 'object',
    },
    texture: {
      control: {
        type: 'file',
        accept: '.png',
      },
    },
    position: {
      control: 'radio',
      options: ['left', 'right', 'center'],
    },
    rotationAxis: {
      control: 'check',
      options: ['x', 'y', 'z'],
    },
    scaling: {
      control: 'select',
      options: [10, 50, 75, 100, 200],
    },
    label: {
      control: 'text',
    },
    meshColors: {
      control: {
        type: 'color',
        presetColors: ['#ff0000', '#00ff00', '#0000ff'],
      },
    },
    revisionDate: {
      control: 'date',
    },
  },
};
```

----------------------------------------

TITLE: Fire Event Click in Storybook Play Function
DESCRIPTION: This snippet shows how to use fireEvent.click within a Storybook story's play function to trigger a click event on an element identified by its data-testid. It utilizes the canvas element to find the element and then dispatches the click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#_snippet_13

LANGUAGE: javascript
CODE:
```
await fireEvent.click(canvas.getByTestId('data-testid'));
```

----------------------------------------

TITLE: Configuring Next.js Router in Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet configures the Next.js router parameters within a Storybook story using TypeScript syntax. It defines a Meta and Story type for the RouterBasedComponent and sets the pathname, asPath, and query parameters to simulate a specific route. This enables type-safe configuration and testing of the component's routing behavior.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-router-override-in-story.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Meta, StoryObj } from '@storybook/your-framework';

import RouterBasedComponent from './RouterBasedComponent';

const meta = {
  component: RouterBasedComponent,
} satisfies Meta<typeof RouterBasedComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

// If you have the actions addon,
// you can interact with the links and see the route change events there
export const Example: Story = {
  parameters: {
    nextjs: {
      router: {
        pathname: '/profile/[id]',
        asPath: '/profile/1',
        query: {
          id: '1',
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Creating a Custom Vuetify Theme Decorator
DESCRIPTION: A complete example of creating a custom theme decorator for Vuetify. This decorator hooks into Vuetify's theming system by accessing its global theme state and updating it based on the selected theme in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
// .storybook/withVuetifyTheme.decorator.js
import { DecoratorHelpers } from '@storybook/addon-themes';
import { useTheme } from 'vuetify';

const { initializeThemeState, pluckThemeFromContext } = DecoratorHelpers;

export const withVuetifyTheme = ({ themes, defaultTheme }) => {
  initializeThemeState(Object.keys(themes), defaultTheme);

  return (story, context) => {
    const selectedTheme = pluckThemeFromContext(context);
    const { themeOverride } = context.parameters.themes ?? {};

    const selected = themeOverride || selectedTheme || defaultTheme;

    return {
      components: { story },
      setup() {
        const theme = useTheme();

        theme.global.name.value = themes[selected];

        return {
          theme,
        };
      },
      template: `<v-app><story /></v-app>`,
    };
  };
};
```

----------------------------------------

TITLE: Async Story with Play Function in Svelte (JS)
DESCRIPTION: This JavaScript snippet defines a Storybook story with a play function that interacts with a Svelte component on the canvas. It uses `within` to scope the query to the canvas element and `findByRole` to wait for a button to be rendered before interacting with it, demonstrating asynchronous testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-query-findby.md#_snippet_2

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const AsyncExample = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // Other steps

    // Waits for the component to be rendered before querying the element
    await canvas.findByRole('button', { name: / button label/i });
  },
};
```

----------------------------------------

TITLE: Initializing Button Story - Svelte (JS)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using JavaScript. It imports the Button component and the action function from 'storybook/actions'. The 'Text' story is configured with arguments for the label and click event, and a render function that returns the Button component with the specified props and event handlers.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_5

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

import { action } from 'storybook/actions';

export default {
  component: Button,
};

export const Text = {
  render: ({ label, click }) => ({
    Component: Button,
    props: {
      label,
    },
    on: {
      click,
    },
  }),
  args: {
    label: 'Hello',
    click: action('clicked'),
  },
};
```

----------------------------------------

TITLE: Testing Component Story with Testing Library
DESCRIPTION: Example showing how to test a Login component story using Testing Library and the composeStories utility from Storybook. Demonstrates testing invalid credentials scenario.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { render, screen, waitFor } from '@testing-library/react';
import { userEvent } from '@testing-library/user-event';
import { composeStories } from '@storybook/react';
import * as stories from './Login.stories';

const { InvalidCredentials } = composeStories(stories);

test('renders login error', async () => {
  render(<InvalidCredentials />);
  const user = userEvent.setup();

  await user.type(screen.getByLabelText(/username/i), 'johndoe');
  await user.type(screen.getByLabelText(/password/i), 'invalidpassword');
  await user.click(screen.getByRole('button'));

  await waitFor(() => {
    expect(screen.getByRole('alert')).toHaveTextContent(/invalid credentials/i);
  });
});
```

----------------------------------------

TITLE: Configuring Storybook Backgrounds in JavaScript
DESCRIPTION: This JavaScript snippet configures the background options for Storybook stories. It defines a set of background values (red and green) that can be selected in the Storybook UI to change the background of the rendered components. This allows developers to preview components against different backgrounds.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-params.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    backgrounds: {
      values: [
        { name: 'red', value: '#f00' },
        { name: 'green', value: '#0f0' },
      ],
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: This TypeScript configuration file sets up Storybook, defining the framework, story locations, and custom indexers. It imports the StorybookConfig type and exports a configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: [
    '../src/**/*.mdx',
    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',
    // 👇 Make sure files to index are included in `stories`
    '../src/**/*.custom-stories.@(js|jsx|ts|tsx)',
  ],
  experimental_indexers: async (existingIndexers) => {
    const customIndexer = {
      test: /.custom-stories\.[tj]sx?$/,
      createIndex: async (fileName) => {
        // See API and examples below...
      },
    };
    return [...existingIndexers, customIndexer];
  },
};

export default config;
```

----------------------------------------

TITLE: Defining Non-A11y Story in Svelte Storybook (TypeScript 4.9)
DESCRIPTION: This TypeScript 4.9 snippet for Svelte CSF demonstrates the creation of a story for 'MyComponent', using '@storybook/addon-svelte-csf' for configuration and disabling default a11y checks.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_5

LANGUAGE: ts-4-9
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="NonA11yStory"
  globals={{
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  }}
/>

```

----------------------------------------

TITLE: Consuming Globals from a Story
DESCRIPTION: This example shows how to modify a story to retrieve the **Locale** `global` from the story context. It uses the global defined in the previous example.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { Button } from './Button';

export default {
  title: 'Example/Button',
  component: Button,
  argTypes: {
    backgroundColor: {
      control: 'color',
    },
  },
};

const Template = (args, { globals: { locale } }) => <Button {...args} />; // Accessing the locale global

export const Primary = Template.bind({});
Primary.args = {
  primary: true,
  label: 'Button',
};

```

----------------------------------------

TITLE: Adding React Vite Plugin Explicitly
DESCRIPTION: This code snippet demonstrates how to explicitly add the React Vite plugin in Storybook 8. It involves importing the react plugin from @vitejs/plugin-react and including it in the plugins array in vite.config.ts.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_49

LANGUAGE: typescript
CODE:
```
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
});
```

----------------------------------------

TITLE: Defining Svelte Button Stories with CSF (TS)
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using the Component Story Format (CSF) with TypeScript. It imports the Button component and defines a primary story with arguments for the primary state and label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });

  const primaryArgs = {
    primary: true,
    label: 'Button',
  }
</script>

<Story name="Primary" args={primaryArgs} />

<Story name="PrimaryLongName"
  args={{
    ...primaryArgs,
    label: 'Primary with a really long name'
  }} />
```

----------------------------------------

TITLE: Correct Usage of Storybook Interaction Functions in JavaScript
DESCRIPTION: This snippet shows the correct way to use Storybook interaction functions by awaiting them. This allows addon-interactions to intercept these helper functions and enables stepping through them when debugging.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/await-interactions.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from '@storybook/test';

// or from the legacy package "@storybook/testing-library";

MyStory.play = async (context) => {
  const canvas = within(context.canvasElement);
  // awaited 👍
  await userEvent.click(canvas.getByRole('button'));
};
```

----------------------------------------

TITLE: Initializing Storybook Project using CLI
DESCRIPTION: Command line instructions for adding Storybook to a project using npx. Navigate to the project directory and run the init command to set up Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/cli-storybook/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
cd my-app
npx storybook@latest init
```

----------------------------------------

TITLE: Configure Storybook Framework with Vue 3 and Vite in JavaScript
DESCRIPTION: This snippet configures Storybook to use the Vue 3 framework with Vite. It sets the framework property to '@storybook/vue3-vite'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue3-vite-add-framework.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  framework: '@storybook/vue3-vite', // 👈 Add this
};
```

----------------------------------------

TITLE: Adding a new repro template
DESCRIPTION: This code snippet shows the structure of a repro template entry in `code/lib/cli-storybook/src/sandbox-templates.ts`. It defines the name, script, and expected framework/renderer/builder for the template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#_snippet_13

LANGUAGE: typescript
CODE:
```
'cra/default-js': {
    name: 'Create React App (Javascript)',
    script: 'npx create-react-app .',
    inDevelopment: true,
    expected: {
      framework: '@storybook/cra',
      renderer: '@storybook/react',
      builder: '@storybook/builder-webpack5',
    },
  }
```

----------------------------------------

TITLE: Specify Preset Color Swatches for Color Controls
DESCRIPTION: This snippet demonstrates how to specify an array of preset colors for `color` controls in Storybook. These presets can be defined as an object with `color` and `title` or a simple CSS color string.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_29

LANGUAGE: javascript
CODE:
```
parameters: {
  controls: {
    presetColors: [
      { color: '#ff0', title: 'yellow' },
      '#0ff', // CSS color string
    ],
  },
}
```

----------------------------------------

TITLE: Implementing Dynamic Source Rendering with JSX Decorator
DESCRIPTION: React implementation of dynamic source rendering that transforms story output into a JSX string and emits it through the Storybook channel for consumption by the Source doc block.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/multiframework.md#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
import { StoryContext, addons } from '@storybook/preview-api';
import { SNIPPET_RENDERED } from '../../shared';

export const jsxDecorator = (storyFn: any, context: StoryContext) => {
  const story = storyFn();

  // We only need to render JSX if the source block is actually going to
  // consume it. Otherwise it's just slowing us down.
  if (skipJsxRender(context)) {
    return story;
  }

  const channel = addons.getChannel();

  const options = {}; // retrieve from story parameters
  const jsx = renderJsx(story, options);

  const { id, args } = context;
  channel.emit(SNIPPET_RENDERED, { id, args, source: jsx });

  return story;
};
```

----------------------------------------

TITLE: Initializing Storybook Meta and First Story with Play Function (Angular)
DESCRIPTION: This code initializes the Storybook meta object for the MyComponent using Angular and defines the FirstStory with a play function that simulates user typing into an element with the test ID 'an-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FirstStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await userEvent.type(canvas.getByTestId('an-element'), 'example-value');
  },
};
```

----------------------------------------

TITLE: Defining Storybook Story for Common Component (JS)
DESCRIPTION: This code defines a Storybook story for a component named MyComponent using JavaScript. It imports the component and defines a default story with an example property sourced from an environment variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-env-var-config.md#_snippet_1

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const Default = {
  args: {
    exampleProp: process.env.EXAMPLE_VAR,
  },
};
```

----------------------------------------

TITLE: Grouping Checkbox Components with Separator
DESCRIPTION: This code snippet illustrates how to group related components in an expandable interface within Storybook using the `/` separator in the `title` parameter. This enhances Storybook organization by creating a hierarchical structure for components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/naming-components-and-hierarchy.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Components/Checkbox',
  component: Checkbox,
};

const Template = (args) => <Checkbox {...args} />;

export const Primary = Template.bind({});
Primary.args = {
  primary: true,
  children: 'Primary',
};

```

----------------------------------------

TITLE: Defining Svelte Story with Tags
DESCRIPTION: This Svelte story defines a component with specific tags to control its visibility in Storybook. The `tags` property is used to exclude the story from the sidebar, documentation, and testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_7

LANGUAGE: svelte
CODE:
```
<Story
  name="Variant1"
  tags={['!dev', '!autodocs']}
  args={{ variant: 1 }}
/>
```

----------------------------------------

TITLE: Initializing Storybook Preview with React Decorator (JS)
DESCRIPTION: This snippet configures a Storybook preview for React using JavaScript, adding a decorator that wraps each story with a div element, applying a 3em margin. It uses a functional component as a decorator.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#_snippet_1

LANGUAGE: js
CODE:
```
import React from 'react';

export default {
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </div>
    ),
  ],
};
```

----------------------------------------

TITLE: Configuring Test Tags in TypeScript Stories
DESCRIPTION: Demonstrates the TypeScript implementation of configuring 'no-tests' tags with proper type definitions using Meta and StoryObj types. Shows how to apply tags at both component and story levels.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-exclude-tags.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { MyComponent } from './MyComponent';

const meta: Meta<typeof MyComponent> = {
  component: MyComponent,
  tags: ['no-tests'], // 👈 Provides the `no-tests` tag to all stories in this file
};

export default meta;
type Story = StoryObj<typeof MyComponent>;

export const ExcludeStory: Story = {
  //👇 Adds the `no-tests` tag to this story to exclude it from the tests when enabled in the test-runner configuration
  tags: ['no-tests'],
};
```

----------------------------------------

TITLE: Creating Storybook Page Story with Custom Footer (JS)
DESCRIPTION: This JavaScript code defines a Storybook story for a 'Page' component, setting a custom footer. It imports the 'html' function from the 'lit' library for rendering the component with the specified footer text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#_snippet_9

LANGUAGE: js
CODE:
```
import { html } from 'lit';

export default {
  title: 'Page',
  component: 'demo-page',
  render: ({ footer }) => html`
    <demo-page>
      <footer>${footer}</footer>
    </demo-page>
  `,
};

export const CustomFooter = {
  args: {
    footer: 'Built with Storybook',
  },
};
```

----------------------------------------

TITLE: Using Navigation Hooks in Storybook
DESCRIPTION: This code demonstrates how to use the `useSelectedLayoutSegment`, `useSelectedLayoutSegments`, and `useParams` hooks from `next/navigation` within a Storybook component. It shows how to retrieve the current segment, segments, and parameters based on the configured `nextjs.navigation.segments` parameter.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
import { useSelectedLayoutSegment, useSelectedLayoutSegments, useParams } from 'next/navigation';

export default function NavigationBasedComponent() {
  const segment = useSelectedLayoutSegment(); // dashboard
  const segments = useSelectedLayoutSegments(); // ["dashboard", "analytics"]
  const params = useParams(); // {}
  // ...
}
```

----------------------------------------

TITLE: Initializing Storybook Story
DESCRIPTION: This code initializes a Storybook story for a component named MyComponent. It imports the component and defines the default export with the component and title.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#_snippet_3

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
  title: 'components/MyComponent/MyComponent',
};

export const Default = {
  args: {
    something: 'Something else',
  },
};

```

----------------------------------------

TITLE: Styled Highlight Decorator in Web Components (TS) Story
DESCRIPTION: This TypeScript story for Web Components defines a decorator that uses `useChannel` to emit a `HIGHLIGHT` event. This event configures selectors for highlighting elements and defines menu items with associated actions. The decorator is applied to the 'StyledHighlight' story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-menu.md#_snippet_10

LANGUAGE: typescript
CODE:
```
export const StyledHighlight: Story = {
```

----------------------------------------

TITLE: Initializing Storybook Story for Vue Component (JS)
DESCRIPTION: This code initializes a Storybook story for a Vue component named MyComponent using JavaScript. It imports the component and an image file, then defines a story that renders the component with the image, binding the image object to the template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_9

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.vue';

import imageFile from './static/image.png';

export default {
  component: MyComponent,
};

const image = {
  src: imageFile,
  alt: 'my image',
};

export const WithAnImage = {
  render: () => ({
    setup() {
      //👇 Returns the content of the image object create above.
      return { image };
    },
    template: `<img v-bind="image"/>`,
  }),
};
```

----------------------------------------

TITLE: Styled Highlight Story with React Decorator (TS)
DESCRIPTION: This snippet defines a Storybook story for a React component named 'MyComponent' and applies styled highlights to specific elements (h2, a, .storybook-button) using a decorator function. It utilizes the 'useChannel' hook to emit a 'HIGHLIGHT' event with styles, hover styles, focus styles, and keyframes for the highlight effect. It uses Typescript syntax.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-custom-style.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const StyledHighlight: Story = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        styles: {
          backgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`,
          outline: '3px solid hotpink',
          animation: 'pulse 3s linear infinite',
          transition: 'outline-offset 0.2s ease-in-out',
        },
        hoverStyles: {
          outlineOffset: '3px',
        },
        focusStyles: {
          backgroundColor: 'transparent',
        },
        keyframes: `@keyframes pulse {
          0% { outline-color: rgba(255, 105, 180, 1); }
          50% { outline-color: rgba(255, 105, 180, 0.2); }
          100% { outline-color: rgba(255, 105, 180, 1); }
        }`,
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Action Event Handler
DESCRIPTION: Illustrates how to detect if a component is emitting the correct HTML events using the `parameters.actions.handles` parameter. This binds a standard HTML event handler to the outermost HTML element rendered by the component and triggers an action when the event is called.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/actions.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Button',
  parameters: {
    actions: {
      handles: ['click .btn', 'mouseover .label'],
    },
  },
};

const Template = () => '<button class="btn"><span class="label">Click me</span></button>';

export const Primary = Template.bind({});

```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: This JavaScript configuration file sets up Storybook, defining the framework, story locations, and custom indexers. It exports a default configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: [
    '../src/**/*.mdx',
    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',
    // 👇 Make sure files to index are included in `stories`
    '../src/**/*.custom-stories.@(js|jsx|ts|tsx)',
  ],
  experimental_indexers: async (existingIndexers) => {
    const customIndexer = {
      test: /.custom-stories\.[tj]sx?$/,
      createIndex: async (fileName) => {
        // See API and examples below...
      },
    };
    return [...existingIndexers, customIndexer];
  },
};
```

----------------------------------------

TITLE: Initializing Button Story - Angular - TS
DESCRIPTION: This snippet initializes a Storybook story for an Angular Button component using TypeScript. It imports the necessary modules from '@storybook/angular' and defines a Meta object to configure the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = { component: Button };

export default meta;
type Story = StoryObj<Button>;

export const Primary: Story = { args: { primary: true } };
```

----------------------------------------

TITLE: Testing Vue Button Story with Play Function
DESCRIPTION: This test renders the Primary story of the Button component and executes its play function using Storybook's composeStories and Jest. It imports the necessary modules from @storybook/vue3-vite and @jest/globals.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-with-play-function.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { test } from '@jest/globals';
import { composeStories } from '@storybook/vue3-vite';

import * as stories from './Button.stories';

const { Primary } = composeStories(stories);

test('renders and executes the play function', async () => {
  // Mount story and run interactions
  await Primary.run();
});
```

----------------------------------------

TITLE: Creating Storybook Story with Play Function (CSF)
DESCRIPTION: This code creates a Storybook story using the Component Story Format (CSF). It imports the component and defines a play function that simulates user interactions, specifically selecting options from a listbox with pauses between each selection.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

// Function to emulate pausing between interactions
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleChangeEvent = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const select = canvas.getByRole('listbox');

    await userEvent.selectOptions(select, ['One Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Another Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Yet another item']);
  },
};
```

----------------------------------------

TITLE: Initializing List Story with One Item in React (JS)
DESCRIPTION: This story renders the List component with a single ListItem in React using JavaScript. It imports the 'Unchecked' story and renders it within the List component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#_snippet_1

LANGUAGE: js
CODE:
```
import { List } from './List';

//👇 Instead of importing ListItem, we import the stories
import { Unchecked } from './ListItem.stories';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
};

export const OneItem = {
  render: (args) => (
    <List {...args}>
      <Unchecked {...Unchecked.args} />
    </List>
  ),
};
```

----------------------------------------

TITLE: Importing necessary modules from Storybook
DESCRIPTION: This code snippet imports the required modules from the `storybook/manager-api` and `storybook/internal/components` packages. `useGlobals` and `useStorybookApi` are hooks for accessing Storybook's APIs. `IconButton` is a component for rendering buttons in the toolbar, and `LightningIcon` is an icon from `@storybook/icons`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { useGlobals, useStorybookApi } from 'storybook/manager-api';
import { IconButton } from 'storybook/internal/components';
import { LightningIcon } from '@storybook/icons';
```

----------------------------------------

TITLE: Implementing Storybook Play Function with TypeScript 4.9+ Syntax
DESCRIPTION: This snippet demonstrates a Storybook play function using TypeScript 4.9+ syntax. It includes type satisfies for improved type checking and shows form interaction.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-step-function.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the name of your framework
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted: Story = {
  play: async ({ args, canvasElement, step }) => {
    const canvas = within(canvasElement);

    await step('Enter email and password', async () => {
      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
      await userEvent.type(canvas.getByTestId('password'), 'supersecret');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button'));
    });
  },
};
```

----------------------------------------

TITLE: Upgrading Storybook with version specifier
DESCRIPTION: Upgrades your Storybook instance to the specified version.  For example, `storybook@latest upgrade --dry-run` will perform a dry run (no actual changes) of upgrading your project to the latest version of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_70

LANGUAGE: Shell
CODE:
```
storybook[@version] upgrade [options]
```

----------------------------------------

TITLE: Initializing Button Story for React (JS)
DESCRIPTION: This code initializes a Storybook story for a React Button component using JavaScript. It defines the component's metadata, including title, component, and parameters for Storybook addons. The Basic story renders the Button component with the text 'Hello'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#_snippet_1

LANGUAGE: js
CODE:
```
import React from 'react';

import { Button } from './Button';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
  //👇 Creates specific parameters for the story
  parameters: {
    myAddon: {
      data: 'This data is passed to the addon',
    },
  },
};

export const Basic = {
  render: () => <Button>Hello</Button>,
};
```

----------------------------------------

TITLE: Rendering Document Screen with React in JavaScript
DESCRIPTION: Implements a React functional component that renders user, document, and subdocuments using props. It requires React library imports and document-related components. No internal state is used by this component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import React from 'react';

import { PageLayout } from './PageLayout';
import { DocumentHeader } from './DocumentHeader';
import { DocumentList } from './DocumentList';

export function DocumentScreen({ user, document, subdocuments }) {
  return (
    <PageLayout user={user}>
      <DocumentHeader document={document} />
      <DocumentList documents={subdocuments} />
    </PageLayout>
  );
}
```

----------------------------------------

TITLE: Mocking Date in Storybook with beforeEach
DESCRIPTION: This code snippet demonstrates how to use the `beforeEach` function to mock the `Date` object in a Storybook story using the `mockdate` package. It also shows how to return a cleanup function from `beforeEach` to reset the `Date` object after the story unmounts. This is useful for isolating components that rely on the current date and time.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';
import MockDate from 'mockdate';

import { PureInboxScreen } from './PureInboxScreen';

const meta: Meta<typeof PureInboxScreen> = {
  title: 'Example/PureInboxScreen',
  component: PureInboxScreen,
};

export default meta;

type Story = StoryObj<typeof PureInboxScreen>;

export const Default: Story = {
  parameters: {
    test: {
      beforeEach: () => {
        MockDate.set('2023-01-01');
        return () => {
          MockDate.reset();
        };
      },
    },
  },
};

export const Error: Story = {
  args: {
    error: true,
  },
};

```

----------------------------------------

TITLE: Initializing Button Story - Web Components (JS)
DESCRIPTION: This code initializes a Storybook story for a Web Components Button component in JavaScript. It defines the component as 'demo-button' and sets up the 'variant' argType with options for 'primary' and 'secondary'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  argTypes: {
    variant: {
      options: ['primary', 'secondary'],
      control: { type: 'radio' },
    },
  },
};
```

----------------------------------------

TITLE: Creating MDX Documentation
DESCRIPTION: Example of creating component documentation using MDX format with embedded stories and props tables.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_6

LANGUAGE: markdown
CODE:
```
import { Meta, Story, ArgsTable } from '@storybook/addon-docs';
import { InfoButton } from './InfoButton.vue';

<Meta title='InfoButton' component={InfoButton} />

# InfoButton

Some **markdown** description, or whatever you want.

<Story name='basic' height='400px'>{{
  components: { InfoButton },
  template: '<info-button label="I\'m a button!"/>',
}}</Story>

## ArgsTable

<ArgsTable of={InfoButton} />
```

----------------------------------------

TITLE: Button with Custom Wrapper in TypeScript React
DESCRIPTION: Shows how to use the asChild prop to render the Button with a custom wrapper, such as an external link or a custom router component. This allows for greater flexibility in button usage.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_6

LANGUAGE: tsx
CODE:
```
<Button asChild>
  <a href="https://storybook.js.org">Hello world!</a>
</Button>
<Button asChild>
  <Link href='/home'>Hello world!</Link>
</Button>
```

----------------------------------------

TITLE: Configuring Web Components Button Story
DESCRIPTION: This code configures a Storybook story for a Button component using web components. It defines metadata including parameters for customizing the background grid's appearance, such as cell size, opacity, and offsets.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-grid.md#_snippet_7

LANGUAGE: js
CODE:
```
// To apply a set of backgrounds to all stories of Button:
export default {
  component: 'demo-button',
  parameters: {
    backgrounds: {
      grid: {
        cellSize: 20,
        opacity: 0.5,
        cellAmount: 5,
        offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
```

----------------------------------------

TITLE: Generating a New ESLint Rule for Storybook
DESCRIPTION: Command to generate a new ESLint rule for Storybook, which creates rule file, tests, and documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/CONTRIBUTING.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
yarn generate-rule
```

----------------------------------------

TITLE: Importing and Using Story Block in MDX
DESCRIPTION: Demonstrates how to import the Story block and use it to render a story from a Button component's stories file within MDX documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-story.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
import { Meta, Story } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

<Story of={ButtonStories.Primary} />
```

----------------------------------------

TITLE: Svelte CSF Story Configuration (TS)
DESCRIPTION: Configures a Storybook story for a Svelte component using Component Story Format (CSF) in TypeScript. It imports `Meta` and `StoryObj` types from `@storybook/your-framework`, defines the component metadata, and exports a story with an empty `args` object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_11

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import YourComponent from './YourComponent.svelte';

//👇 This default export determines where your story goes in the story list
const meta = {
  component: YourComponent,
} satisfies Meta<typeof YourComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const FirstStory: Story = {
  args: {
    //👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Defining List Component Metadata in Vue (TS)
DESCRIPTION: This code defines the metadata for the List component in Storybook using Vue 3 with TypeScript. It imports necessary modules from '@storybook/vue3-vite' and component files, then sets the component property in the meta object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_24

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import List from './ListComponent.vue';
import ListItem from './ListItem.vue';

const meta = {
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;
```

----------------------------------------

TITLE: Svelte Margin Decorator Component (JavaScript)
DESCRIPTION: This Svelte component defines a margin decorator using JavaScript. It accepts a 'children' prop, which is a function that renders the story content. The component wraps the rendered content in a div with a margin of 3em applied via CSS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/margindecorator.md#_snippet_0

LANGUAGE: js
CODE:
```
<script>
  let { children } = $props();
</script>

<div>
  {@render children()}
</div>

<style>
  div {
    margin: 3em;
  }
</style>
```

----------------------------------------

TITLE: Rendering Button with React Hooks
DESCRIPTION: This code defines a Storybook story that renders a Button component with React Hooks. It uses the useState hook to manage the button's label and primary state, and a click handler to toggle the button's state between 'Primary' and 'Secondary'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_6

LANGUAGE: js
CODE:
```
import React, { useState } from 'react';

import { Button } from './Button';

export default {
  component: Button,
};

/*
 * Example Button story with React Hooks.
 * See note below related to this example.
 */
const ButtonWithHooks = () => {
  // Sets the hooks for both the label and primary props
  const [value, setValue] = useState('Secondary');
  const [isPrimary, setIsPrimary] = useState(false);

  // Sets a click handler to change the label's value
  const handleOnChange = () => {
    if (!isPrimary) {
      setIsPrimary(true);
      setValue('Primary');
    }
  };
  return <Button primary={isPrimary} onClick={handleOnChange} label={value} />;
};

export const Primary = {
  render: () => <ButtonWithHooks />,
};

```

----------------------------------------

TITLE: Configuring Storybook Addon Measure in main.js
DESCRIPTION: JavaScript configuration to add the Storybook Addon Measure to the addons array in the .storybook/main.js file. This step enables the addon in your Storybook instance.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/measure/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  addons: ['@storybook/addon-measure'],
};
```

----------------------------------------

TITLE: Resetting and Applying Highlight in Angular Story
DESCRIPTION: This story uses the `componentWrapperDecorator` to wrap the component and emit `RESET_HIGHLIGHT` and `HIGHLIGHT` events using the `useChannel` hook. This allows for resetting any existing highlights and then applying new highlights to specified selectors (header, section, footer).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-reset.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';
import { componentWrapperDecorator } from '@storybook/angular';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const ResetHighlight: Story = {
  decorators: [
    componentWrapperDecorator((story) => {
      const emit = useChannel({});
      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements
      emit(HIGHLIGHT, {
        selectors: ['header', 'section', 'footer'],
      });
      return story;
    }),
  ],
};
```

----------------------------------------

TITLE: Configuring Storybook Test Runner Viewport - JavaScript
DESCRIPTION: This JavaScript code configures the Storybook test runner to set the viewport size of the page based on the story's parameters. It retrieves the viewport name from the story context and uses it to fetch the corresponding viewport parameters from `MINIMAL_VIEWPORTS`. If a viewport is found, it sets the page's viewport size accordingly; otherwise, it uses a default viewport size.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-custom-page-viewport.md#_snippet_0

LANGUAGE: js
CODE:
```
const { getStoryContext } = require('@storybook/test-runner');
const { MINIMAL_VIEWPORTS } = require('storybook/viewport');

const DEFAULT_VIEWPORT_SIZE = { width: 1280, height: 720 };

module.exports = {
  async preVisit(page, story) {
    // Accesses the story's parameters and retrieves the viewport used to render it
    const context = await getStoryContext(page, story);
    const viewportName = context.parameters?.viewport?.defaultViewport;
    const viewportParameter = MINIMAL_VIEWPORTS[viewportName];

    if (viewportParameter) {
      const viewportSize = Object.entries(viewportParameter.styles).reduce(
        (acc, [screen, size]) => ({
          ...acc,
          // Converts the viewport size from percentages to numbers
          [screen]: parseInt(size),
        }),
        {},
      );
      // Configures the Playwright page to use the viewport size
      page.setViewportSize(viewportSize);
    } else {
      page.setViewportSize(DEFAULT_VIEWPORT_SIZE);
    }
  },
};
```

----------------------------------------

TITLE: Registering Addons in Storybook Main File
DESCRIPTION: This snippet shows how to use the addons API in the Storybook main.js file to register addons.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
module.exports = {
  addons: [
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/preset-create-react-app',
  ],
};
```

----------------------------------------

TITLE: Configuring Svelte Stories with Props (JavaScript)
DESCRIPTION: This code configures Storybook stories for a Svelte component, defining the component and a story with a prop. It imports the component and exports a default object with the component and a story that renders the component with a specific prop value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_6

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

export const Basic = {};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const WithProp = {
  render: () => ({
    Component: MyComponent,
    props: {
      prop: 'value',
    },
  }),
};

```

----------------------------------------

TITLE: Running Storybook Development Server
DESCRIPTION: Command to start the Storybook development server. This will launch the local server, provide the address, and open it in a new browser tab.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
<CodeSnippets path="storybook-run-dev.md" />
```

----------------------------------------

TITLE: Initializing Storybook Story for Solid Component (TypeScript)
DESCRIPTION: This code initializes a Storybook story for a Solid component named MyComponent using TypeScript. It imports the necessary modules from 'storybook-solidjs' and defines a story named 'WithAnImage' that renders the component with a specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const WithAnImage: Story = {
  render: () => (
    <img src="https://storybook.js.org/images/placeholders/350x150.png" alt="My CDN placeholder" />
  ),
};
```

----------------------------------------

TITLE: Defining Svelte Storybook Meta with CSF
DESCRIPTION: This code defines a Storybook story for a Svelte component using the Component Story Format (CSF). It imports defineMeta from @storybook/addon-svelte-csf and the YourComponent. It configures the component and sets the 'requiredFirst' sort order for controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import YourComponent from './YourComponent.svelte';

  const { Story } = defineMeta({
    component: YourComponent,
    parameters: { controls: { sort: 'requiredFirst' } },
  });
</script>
```

----------------------------------------

TITLE: Configuring Storybook Component Arguments and Label
DESCRIPTION: This snippet configures the arguments and label for a Storybook component. It sets the label property to '📚📕📈🤓', which will be displayed on the component in the Storybook environment. The spread operator (...Primary.args) is used to inherit existing arguments from a base configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
{
    ...Primary.args,
    label: '📚📕📈🤓',
  }
```

----------------------------------------

TITLE: Dry run Storybook upgrade
DESCRIPTION: Checks for version upgrades without installing them.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_71

LANGUAGE: Shell
CODE:
```
storybook upgrade --dry-run
```

----------------------------------------

TITLE: Adding Local Addon Dependency in package.json
DESCRIPTION: This code snippet demonstrates how to add a local addon as a dependency in your package.json file. This is useful when developing an addon as a package and you can't use npm link.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-knowledge-base.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "dependencies": {
    "@storybook/addon-controls": "file:///home/username/myrepo"
  }
}
```

----------------------------------------

TITLE: Configuring Storybook framework property
DESCRIPTION: Updates the .storybook/main.js or .storybook/main.ts file to set the framework property to '@storybook/web-components-vite'. This configuration tells Storybook to use the Web components Vite framework.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/web-components-vite.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type { import('@storybook/web-components-vite').StorybookConfig } */
const config = {
  stories: ["../stories/**/*.mdx", "../stories/**/*.stories.@(js|jsx|ts|tsx)"],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: '@storybook/web-components-vite',
    options: {},
  },
  docs: {
    autodocs: "tag",
  },
};
export default config;
```

----------------------------------------

TITLE: Initializing Svelte Button Stories with TypeScript
DESCRIPTION: This code initializes Storybook stories for a Svelte Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines metadata for the Button component, including a primary story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const PrimaryLongName: Story = {
  args: {
    ...Primary.args,
    label: 'Primary with a really long name',
  },
};
```

----------------------------------------

TITLE: Embedding Existing Stories in MDX Documentation
DESCRIPTION: This example shows how to embed an existing story with a specific ID into MDX documentation. This allows reusing existing stories within documentation pages.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
import { Story } from "@storybook/addon-docs";

# Some header

And markdown here

<Story id="some--id" />
```

----------------------------------------

TITLE: Defining Basic Button Story - Svelte CSF
DESCRIPTION: This code defines a basic Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports defineMeta from '@storybook/addon-svelte-csf' and the Button component. The meta object is created using defineMeta, and the Basic story sets documentation parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const meta = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Basic"
  parameters={{
    docs: {
      source: { language: 'tsx' },
    },
  }} />
```

----------------------------------------

TITLE: Implementing Button Component in Svelte
DESCRIPTION: A Svelte implementation of a Button component that uses export declarations for props and creates an event dispatcher for handling click events. The component includes reactive styling for background color and JSDoc comments for each property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-implementation.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
<script>
  import { createEventDispatcher } from 'svelte';
  /**
   * Is this the principal call to action on the page?
   */
  export let primary = false;

  /**
   * What background color to use
   */
  export let backgroundColor = undefined;
  /**
   * How large should the button be?
   */
  export let size = 'medium';
  /**
   * Button contents
   */
  export let label = '';

  $: style = backgroundColor ? `background-color: ${backgroundColor}` : '';

  const dispatch = createEventDispatcher();

  /**
   * Optional click handler
   */
  export let onClick = (event) => {
    dispatch('click', event);
  };
</script>

<button type="button" {style} on:click="{onClick}">{label}</button>
```

----------------------------------------

TITLE: Configuring Inline Stories
DESCRIPTION: Configuration to disable inline story rendering and use iframes instead.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
export const parameters = { docs: { story: { inline: false } } };
```

----------------------------------------

TITLE: Configuring Vue Button Story with TypeScript
DESCRIPTION: This code configures a Storybook story for a Vue Button component using TypeScript. It imports Meta and StoryObj types from '@storybook/vue3-vite', defines metadata including the title, component, and parameters, and exports a basic story with a render function that uses a Vue template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
  //👇 Creates specific parameters for the story
  parameters: {
    myAddon: {
      data: 'This data is passed to the addon',
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Basic: Story = {
  render: () => ({
    components: { Button },
    template: '<Button label="Hello" />',
  }),
};
```

----------------------------------------

TITLE: Exposing Properties and Methods in Vue
DESCRIPTION: This code snippet demonstrates how to expose properties and methods from a Vue component using `defineExpose`. It shows how to define reactive properties using `ref` and then expose them with JSDoc comments for documentation. Storybook can then generate controls for these exposed properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#_snippet_6

LANGUAGE: html
CODE:
```
<script setup lang="ts">
  import { ref } from 'vue';

  const label = ref('Button');
  const count = ref(100);

  defineExpose({
    /** A label string */
    label,
    /** A count number */
    count,
  });
</script>
```

----------------------------------------

TITLE: Adding a Tab to Storybook UI
DESCRIPTION: This code snippet demonstrates how to add a new Tab to Storybook's UI. Tab addons allow you to create your own custom tabs in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-types.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
<CodeSnippets path="storybook-addon-tab-example.md" />
```

----------------------------------------

TITLE: Configuring Vitest for Vue Storybook Testing
DESCRIPTION: Implements Vitest configuration for Vue Storybook components with Playwright browser testing support. Includes integration with existing Vite configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-workspace.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { defineConfig, mergeConfig } from 'vitest/config';
import { storybookTest } from '@storybook/addon-vitest/vitest-plugin';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

import viteConfig from './vite.config';

const dirname =
  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));

export default defineWorkspace([
  './vitest.config.ts',
  {
    extends: './vite.config.ts',
    plugins: [
      storybookTest({
        configDir: path.join(dirname, '.storybook'),
        storybookScript: 'yarn storybook --ci',
      }),
    ],
    test: {
      name: 'storybook',
      browser: {
        enabled: true,
        provider: 'playwright',
        headless: true,
        instances: [{ browser: 'chromium' }],
      },
      setupFiles: ['./.storybook/vitest.setup.ts'],
    },
  },
]);
```

----------------------------------------

TITLE: Configuring Storybook Meta for Web Component (TS)
DESCRIPTION: This snippet configures the Storybook metadata for a web component using TypeScript. It imports the Meta type from Storybook's web-components-vite package, defines the component name, tags, and documentation parameters, including disabling the table of contents.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-disable-toc.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'my-component',
  tags: ['autodocs'],
  parameters: {
    docs: {
      toc: {
        disable: true, // 👈 Disables the table of contents
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Setting Base Font Size for Storybook Preview in HTML/CSS
DESCRIPTION: This snippet defines a style tag within the preview-body.html file to set the base font size for all stories in the Storybook preview iframe. It sets the font size of the html element to 15 pixels.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-body-font-size.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<style>
  html {
    font-size: 15px;
  }
</style>
```

----------------------------------------

TITLE: Implementing Custom Snapshot Serializer
DESCRIPTION: Implementation of a custom snapshot serializer to standardize HTML output and handle dynamic attributes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
module.exports = {
  test: (val) => typeof val === 'string',
  print: (val) => val.replace(/css-[a-zA-Z0-9-]+/g, 'css-xxxxxxxx'),
};
```

----------------------------------------

TITLE: Configuring Storybook Addons
DESCRIPTION: Basic configuration to add the docs addon to Storybook's main configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  addons: ['@storybook/addon-docs'],
};
```

----------------------------------------

TITLE: Initializing Button Story with Variants in React (JS)
DESCRIPTION: This code defines Storybook stories for a React Button component using JavaScript, including variants and a combo example. It configures the component and its stories, setting tags to control their visibility and testing behavior within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Variant1 = {
  // 👇 This story will not appear in Storybook's sidebar or docs page
  tags: ['!dev', '!autodocs'],
  args: { variant: 1 },
};

export const Variant2 = {
  // 👇 This story will not appear in Storybook's sidebar or docs page
  tags: ['!dev', '!autodocs'],
  args: { variant: 2 },
};

export const Combo = {
  // 👇 This story should not be tested, but will appear in the sidebar and docs page
  tags: ['!test'],
  render: () => (
    <>
      <Button variant={1} />
      <Button variant={2} />
    </>
  ),
};
```

----------------------------------------

TITLE: Initializing Storybook Preview with Solid Decorator (JS)
DESCRIPTION: This snippet configures a Storybook preview for Solid using JavaScript, adding a decorator that wraps each story with a div element, applying a 3em margin. It uses a functional component as a decorator.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#_snippet_3

LANGUAGE: js
CODE:
```
export default {
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        <Story />
      </div>
    ),
  ],
};
```

----------------------------------------

TITLE: Defining Simple and Complex Stories
DESCRIPTION: Defines two stories, SimpleStory and ComplexStory, which use the simpleData and complexData objects as arguments. These stories are used to showcase the component with different data configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#_snippet_9

LANGUAGE: typescript
CODE:
```
export const SimpleStory: Story = {
  args: {
    data: simpleData,
  },
};

export const ComplexStory: Story = {
  args: {
    data: complexData,
  },
};
```

----------------------------------------

TITLE: Initializing Button Storybook story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and defines its metadata, including documentation parameters to exclude the 'style' control.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-argtypes-parameter.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Meta for Component (TS, Common)
DESCRIPTION: This code defines the Storybook metadata for a component using TypeScript. It imports the necessary types from '@storybook/your-framework' (which should be replaced with the actual framework, e.g., 'react-vite', 'vue3-vite', 'angular'). It configures the component and its 'value' argument type, including default value and type summary.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Example } from './Example';

const meta = {
  component: Example,
  argTypes: {
    value: {
      table: {
        defaultValue: { summary: 0 },
        type: { summary: 'number' },
      },
    },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Configuring Button Story with Web Components Metadata in TS
DESCRIPTION: This code configures a Storybook story for a Button component using metadata for web components in TypeScript. It defines the component as 'demo-button' and sets up argument types, focusing on the 'label' argument to control the button's text within Storybook. It imports Meta from '@storybook/web-components-vite'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  argTypes: {
    // 👇 All Button stories expect a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Storybook Story Sorting with Ordered Pages
DESCRIPTION: This code snippet demonstrates how to define a specific order for stories in Storybook using the `order` array within the `storySort` configuration. It shows how to create nested arrays to sort 2nd-level story kinds, providing a hierarchical structure for story organization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/naming-components-and-hierarchy.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
/* storybook-preview-with-ordered-pages.md */
export const parameters = {
  options: {
    storySort: {
      order: [
        'Intro',
        ['Intro', '*'],
        'Pages',
        ['Pages', 'Home'],
        ['Pages', 'Login'],
        ['Pages', 'Admin'],
        ['Pages', '*'],
        'Components',
        ['Components', '*'],
      ],
    },
  },
};

```

----------------------------------------

TITLE: Initializing Histogram Story for Solid
DESCRIPTION: This code defines a Storybook story for the Histogram component in a Solid environment. It imports the 'Histogram' component from './Histogram'. The 'Default' story configures the component with specific arguments such as 'dataType', 'showHistogramLabels', 'histogramAccentColor', and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#_snippet_6

LANGUAGE: js
CODE:
```
import { Histogram } from './Histogram';

export default {
  component: Histogram,
};

export const Default = {
  args: {
    dataType: 'latency',
    showHistogramLabels: true,
    histogramAccentColor: '#1EA7FD',
    label: 'Latency distribution',
  },
};
```

----------------------------------------

TITLE: Configuring Primary Button Story in Vue (JavaScript)
DESCRIPTION: This JavaScript code configures a primary button story within Storybook for a Vue component. It imports the Button component from './Button.vue' and sets up the story with arguments for label and primary state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_9

LANGUAGE: js
CODE:
```
import Button from './Button.vue';

export default {
  component: Button,
};

export const Primary = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Main Settings in TypeScript
DESCRIPTION: This snippet defines the main configuration for Storybook in TypeScript. It imports the StorybookConfig type, specifies the framework, story file patterns, and build test options. The framework should be replaced with the actual framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-mdx.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  build: {
    test: {
      disableMDXEntries: false,
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Simulating Change Event with Play Function (Common JS)
DESCRIPTION: This code defines a Storybook story that simulates a change event on a select element using the play function. It uses userEvent to select different options and includes a sleep function to pause between interactions. This version uses common JS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

// Function to emulate pausing between interactions
function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleChangeEvent = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const select = canvas.getByRole('listbox');

    await userEvent.selectOptions(select, ['One Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Another Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Yet another item']);
  },
};
```

----------------------------------------

TITLE: Fetching GraphQL Data in React (TypeScript)
DESCRIPTION: This component fetches data using Apollo Client in React with TypeScript. It defines a GraphQL query to retrieve user, document, and subdocument information using the `useQuery` hook. It also defines a TypeScript interface for the expected data structure. It renders a loading message, an error message, or the fetched data using the `PageLayout`, `DocumentHeader`, and `DocumentList` components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#_snippet_2

LANGUAGE: ts
CODE:
```
import { useQuery, gql } from '@apollo/client';

import { PageLayout } from './PageLayout';
import { DocumentHeader } from './DocumentHeader';
import { DocumentList } from './DocumentList';

const AllInfoQuery = gql`
  query AllInfo {
    user {
      userID
      name
    }
    document {
      id
      userID
      title
      brief
      status
    }
    subdocuments {
      id
      userID
      title
      content
      status
    }
  }
`;

interface Data {
  allInfo: {
    user: {
      userID: number;
      name: string;
      opening_crawl: boolean;
    };
    document: {
      id: number;
      userID: number;
      title: string;
      brief: string;
      status: string;
    };
    subdocuments: {
      id: number;
      userID: number;
      title: string;
      content: string;
      status: string;
    };
  };
}

function useFetchInfo() {
  const { loading, error, data } = useQuery<Data>(AllInfoQuery);

  return { loading, error, data };
}

export function DocumentScreen() {
  const { loading, error, data } = useFetchInfo();

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>There was an error fetching the data!</p>;
  }

  return (
    <PageLayout user={data.user}>
      <DocumentHeader document={data.document} />
      <DocumentList documents={data.subdocuments} />
    </PageLayout>
  );
}
```

----------------------------------------

TITLE: StoriesSpecifier Type Definition for Storybook Configuration
DESCRIPTION: Type definition of the StoriesSpecifier object used for configuring story loading, including directory, files, and titlePrefix properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-stories.mdx#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
{
  directory: string;
  files?: string;
  titlePrefix?: string;
}
```

----------------------------------------

TITLE: Configuring nycrcPath option for Vite
DESCRIPTION: This defines the relative path for the existing nyc configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_12

LANGUAGE: javascript
CODE:
```
options: { istanbul: { nycrcPath: '../nyc.config.js',}}
```

----------------------------------------

TITLE: Implementing Story Tests with Storybook Test Utilities in TypeScript
DESCRIPTION: This snippet demonstrates how to use the storybook/test package to create tests within a story's play function. It shows importing test utilities, defining a story with args, and writing a play function that simulates user interaction and checks expectations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/test/README.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Button.stories.ts
import { expect, fn, userEvent, within } from 'storybook/test';
import { Button } from './Button';

export default {
  component: Button,
  args: {
    onClick: fn(),
  },
};

export const Demo = {
  play: async ({ args, canvasElement }) => {
    const canvas = within(canvasElement);
    await userEvent.click(canvas.getByRole('button'));
    await expect(args.onClick).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Initializing Checkbox Storybook story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Checkbox component using the Component Story Format (CSF). It imports the necessary modules from '@storybook/addon-svelte-csf' and defines the component's metadata, including the title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import CheckBox from './Checkbox.svelte';

  const { Story } = defineMeta({
    /* 👇 The title prop is optional.
     * See https://storybook.js.org/docs/configure/#configure-story-loading
     * to learn how to generate automatic titles
     */
    title: 'Design System/Atoms/Checkbox',
    component: CheckBox,
  });
</script>
```

----------------------------------------

TITLE: Enabling Telemetry Debug Mode in Storybook with Yarn
DESCRIPTION: A shell command that enables debug mode for Storybook's telemetry functionality when using yarn. The STORYBOOK_TELEMETRY_DEBUG environment variable is set to 1 to output additional logging information about telemetry operations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-preview-event.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
STORYBOOK_TELEMETRY_DEBUG=1 yarn storybook
```

----------------------------------------

TITLE: Running end-to-end tests with Playwright
DESCRIPTION: This command executes end-to-end tests against a specified sandbox using the `e2e-tests` task. It uses the `react-vite/default-ts` template and starts from the `auto` task.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#_snippet_7

LANGUAGE: shell
CODE:
```
yarn task --task e2e-tests --template=react-vite/default-ts --start-from=auto
```

----------------------------------------

TITLE: Configuring NavigationBasedComponent Story (TypeScript)
DESCRIPTION: Defines a Storybook story for the NavigationBasedComponent using TypeScript, setting the component and enabling the Next.js app directory. It also configures navigation parameters to simulate a route change to '/profile' with a query parameter 'user=1'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-override-in-story.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Meta, StoryObj } from '@storybook/your-framework';

import NavigationBasedComponent from './NavigationBasedComponent';

const meta = {
  component: NavigationBasedComponent,
  parameters: {
    nextjs: {
      appDirectory: true,
    },
  },
} satisfies Meta<typeof NavigationBasedComponent>;
export default meta;

type Story = StoryObj<typeof meta>;

// If you have the actions addon,
// you can interact with the links and see the route change events there
export const Example: Story = {
  parameters: {
    nextjs: {
      navigation: {
        pathname: '/profile',
        query: {
          user: '1',
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Enable Auto-Generated Docs in Storybook (JavaScript)
DESCRIPTION: This JavaScript snippet configures Storybook to enable auto-generated documentation for all stories. It sets the 'tags' property to include 'autodocs', which triggers the documentation generation process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-preview.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...rest of preview
  //👇 Enables auto-generated documentation for all stories
  tags: ['autodocs'],
};
```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Component (CSF)
DESCRIPTION: This snippet configures the Storybook metadata for a Svelte component using the Component Story Format (CSF). It imports defineMeta from '@storybook/addon-svelte-csf', defines the component, tags, and documentation parameters, including disabling the table of contents.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-disable-toc.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
    tags: ['autodocs'],
    parameters: {
      docs: {
        toc: {
          disable: true, // 👈 Disables the table of contents
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Storybook Preview with Control Matchers and Custom Docs Page (JS)
DESCRIPTION: This JavaScript snippet configures Storybook's preview settings. It defines control matchers for color and date properties, enabling customized control UIs for these property types. It also sets up a custom documentation page layout using components from `@storybook/addon-docs/blocks`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-custom-template-function.md#_snippet_0

LANGUAGE: js
CODE:
```
import {
  Title,
  Subtitle,
  Description,
  Primary,
  Controls,
  Stories,
} from '@storybook/addon-docs/blocks';

export default {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
    docs: {
      page: () => (
        <>
          <Title />
          <Subtitle />
          <Description />
          <Primary />
          <Controls />
          <Stories />
        </>
      ),
    },
  },
};
```

----------------------------------------

TITLE: Configuring Component Meta with ArgTypes in Svelte (CSF - JS)
DESCRIPTION: This code configures the metadata for a Storybook story in Svelte using JavaScript. It imports the component and sets up the story, disabling the 'foo' property from appearing in the UI by setting 'disable: true' within the 'table' property of the 'argTypes' configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls.md#_snippet_2

LANGUAGE: js
CODE:
```
import YourComponent from './YourComponent.svelte';

export default {
  component: YourComponent,
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      table: {
        disable: true,
      },
    },
  },
};
```

----------------------------------------

TITLE: Defining Svelte Stories with CSF for Button Component
DESCRIPTION: This Svelte component defines Storybook stories for a Button component using Component Story Format (CSF). It imports the Button component and defines three stories: Primary, Secondary, and Tertiary, each with a different label and background color.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_7

LANGUAGE: svelte
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

	const { Story } = defineMeta({
		component: Button,
	});
</script>

<Story name="Primary">
  <Button backgroundColor="#ff0" label="Button" />
</Story>

<Story name="Secondary">
  <Button backgroundColor="#ff0" label="😄👍😍💯" />
</Story>

<Story name="Tertiary">
  <Button backgroundColor="#ff0" label="📚📕📈🤓" />
</Story>
```

----------------------------------------

TITLE: Defining Button Stories with JavaScript
DESCRIPTION: This code defines Storybook stories for a Button component using JavaScript. It imports the Button component and defines primary and primary long name stories with corresponding arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Primary = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const PrimaryLongName = {
  args: {
    ...Primary.args,
    label: 'Primary with a really long name',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Button Component (CSF, TS)
DESCRIPTION: This code configures the Storybook metadata for a Svelte Button component using TypeScript. It imports the Button component and defines the meta object, specifying the component and customizing the background options to include 'dark' and 'gray'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_10

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  parameters: {
    backgrounds: {
      options: {

```

----------------------------------------

TITLE: Configuring Button Story with argTypes in JavaScript for Web Components
DESCRIPTION: This code configures a Storybook story for a web components Button component. It defines the component and its argTypes, which allow users to control the component's properties like label, advanced settings, margin, padding, and cornerRadius through the Storybook UI. The margin, padding, and cornerRadius are conditionally enabled based on the 'advanced' boolean.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#_snippet_6

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  argTypes: {
    label: { control: 'text' }, // Always shows the control
    advanced: { control: 'boolean' },
    // Only enabled if advanced is true
    margin: { control: 'number', if: { arg: 'advanced' } },
    padding: { control: 'number', if: { arg: 'advanced' } },
    cornerRadius: { control: 'number', if: { arg: 'advanced' } },
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (TS)
DESCRIPTION: Defines a Storybook story for a Svelte component using Svelte CSF with TypeScript, including metadata and a story with a Figma design parameter. It imports the necessary modules from '@storybook/addon-svelte-csf' and the component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#_snippet_7

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="Example"
  parameters={{
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/Sample-File',
    },
  }}
/>
```

----------------------------------------

TITLE: Highlighting Elements in Web Components Story (JS)
DESCRIPTION: This snippet demonstrates how to highlight specific elements (h2, a, .storybook-button) in a Web Components story using JavaScript and the `HIGHLIGHT` addon. It uses the `useChannel` API to emit a highlight event within a decorator. The decorator wraps the story function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight.md#_snippet_7

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

export default {
  component: 'my-component',
};

export const Highlighted = {
  decorators: [
    (story) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
      });
      return story();
    },
  ],
};
```

----------------------------------------

TITLE: Configuring Stories Glob for MDX Files in Storybook
DESCRIPTION: This code snippet demonstrates how to configure the stories glob in Storybook's main.js to include or exclude MDX files. It shows how to specify a directory and a files specifier to match specific file patterns.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_105

LANGUAGE: javascript
CODE:
```
// in main.js
export default {
  stories: ['../path/to/directory']
};

// or
export default {
  stories: [{ directory: '../path/to/directory' }]
};
```

LANGUAGE: javascript
CODE:
```
export default {
  stories: [
    {
      directory: "../path/to/directory",
      files: "**/*.stories.@(mdx|tsx|ts|jsx|js)",
    },
  ],
};
```

----------------------------------------

TITLE: Initializing Button stories with Svelte CSF using Typescript
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using the Component Story Format (CSF) and Typescript. It imports the Meta type from '@storybook/your-framework' and the Button component. Note: 'your-framework' should be replaced with 'svelte-vite' or 'sveltekit'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_10

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';
```

----------------------------------------

TITLE: Configuring TypeScript Checking Options in Storybook
DESCRIPTION: Sets options for the fork-ts-checker-webpack-plugin when TypeScript checking is enabled in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
export default {
  typescript: {
    check: true,
    checkOptions: {
      typescript: {
        configOverwrite: {
          include: ["src/**/*"]
        }
      }
    },
  },
};
```

----------------------------------------

TITLE: Reset Highlight Story Decorator - Web Components (JavaScript)
DESCRIPTION: This story decorator for Web Components uses `useChannel` to emit `RESET_HIGHLIGHT` and `HIGHLIGHT` events. It removes previously highlighted elements and then highlights elements specified by the provided CSS selectors. The decorator returns the result of the story function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-reset.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';

export default {
  component: 'my-component',
};

export const ResetHighlight = {
  decorators: [
    (story) => {
      const emit = useChannel({});
      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements
      emit(HIGHLIGHT, {
        selectors: ['header', 'section', 'footer'],
      });
      return story();
    },
  ],
};
```

----------------------------------------

TITLE: Configuring Storybook for MDX Files
DESCRIPTION: Updates the .storybook/main.js configuration to load MDX files for documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/react/README.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
export default {
  stories: ['../src/stories/**/*.stories.@(js|mdx)'],
};
```

----------------------------------------

TITLE: Configuring DEFAULT_LANGUAGE for ngx-translate in Storybook
DESCRIPTION: This code snippet shows an alternative approach to configure ngx-translate in Storybook when TranslateModule.forRoot is handled by another module. It uses the DEFAULT_LANGUAGE provider to set the language based on Storybook's locale.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/angular/template/stories/others/ngx-translate/README.mdx#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { DEFAULT_LANGUAGE } from '@ngx-translate/core';

const TranslateModuleDecorator = (storyFunc, context) => {
  const { locale } = context.globals;

  return applicationConfig({
    providers: [{ provide: DEFAULT_LANGUAGE, useValue: locale }],
  })(storyFunc, context);
};
```

----------------------------------------

TITLE: Configuring Storybook Docs Preset Options
DESCRIPTION: JavaScript configuration to customize Storybook Docs preset options in the main.js file, including CSF and MDX plugin options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/README.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
export default {
  addons: [
    {
      name: '@storybook/addon-docs',
      options: {
        csfPluginOptions: null,
        mdxPluginOptions: {},
      },
    },
  ],
};
```

----------------------------------------

TITLE: Initializing Button Storybook with Svelte CSF
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports defineMeta from '@storybook/addon-svelte-csf' and the Button component, then uses defineMeta to configure the story's title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    /* 👇 The title prop is optional.
     * See https://storybook.js.org/docs/configure/#configure-story-loading
     * to learn how to generate automatic titles
     */
    title: 'Design System/Atoms/Button',
    component: Button,
  });
</script>
```

----------------------------------------

TITLE: Executing Compodoc Before Angular Storybook
DESCRIPTION: Executes Compodoc, a documentation tool for Angular applications, before starting Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_29

LANGUAGE: JSON
CODE:
```
{"compodoc": true}
```

----------------------------------------

TITLE: Initializing MyComponent Story with Angular
DESCRIPTION: This code defines a Storybook story for the MyComponent using Angular. It imports necessary modules and components, configures metadata, and defines a story that renders the component within a specified layout using a render function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { moduleMetadata, argsToTemplate } from '@storybook/angular';

import { CommonModule } from '@angular/common';

import { Layout } from './Layout.component';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
  decorators: [
    moduleMetadata({
      declarations: [Layout],
      imports: [CommonModule],
    }),
  ],
};

export default meta;
type Story = StoryObj<MyComponent>;

// This story uses a render function to fully control how the component renders.
export const Example: Story = {
  render: (args) => ({
    props: args,
    template: `
      <app-layout>
        <header>
          <h1>Example</h1>
        </header>
        <article>
          <app-my-component ${argsToTemplate(args)}></app-my-component>
        </article>
      </app-layout>
    `,
  }),
};
```

----------------------------------------

TITLE: Extending Vue Application in Storybook
DESCRIPTION: This code snippet demonstrates how to extend the Vue application within Storybook's preview configuration. It uses the `setup` function provided by `@storybook/vue3-vite` to register global components, plugins, and mixins, allowing you to configure your Storybook instance with custom Vue application settings. This is essential for components that rely on globally registered features.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import { setup } from '@storybook/vue3-vite';

setup((app) => {
  app.use(MyPlugin);
  app.component('my-component', MyComponent);
  app.mixin({
    // My mixin
  });
});
```

----------------------------------------

TITLE: Configuring framework options
DESCRIPTION: Example of passing an options object for additional configuration of the framework. In this case, configuring the builder options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/web-components-vite.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
/** @type { import('@storybook/web-components-vite').StorybookConfig } */
const config = {
  stories: ["../stories/**/*.mdx", "../stories/**/*.stories.@(js|jsx|ts|tsx)"],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: '@storybook/web-components-vite',
    options: {
      builder: {
        viteConfigPath: '.vite-storybook/vite.config.ts',
      },
    },
  },
  docs: {
    autodocs: "tag",
  },
};
export default config;
```

----------------------------------------

TITLE: Initializing Storybook Story for React Component (TypeScript)
DESCRIPTION: This code initializes a Storybook story for a React component named MyComponent using TypeScript. It imports the necessary modules from '@storybook/react-vite' and defines a story named 'WithAnImage' that renders the component with a specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const WithAnImage: Story = {
  render: () => (
    <img src="https://storybook.js.org/images/placeholders/350x150.png" alt="My CDN placeholder" />
  ),
};
```

----------------------------------------

TITLE: Configuring Story Sorting in Storybook Preview (JS)
DESCRIPTION: This JavaScript snippet configures the Storybook preview to define a custom order for stories. It sets the 'storySort' parameter within the 'options' parameter to specify the desired order, grouping stories into categories such as 'Intro', 'Pages', and 'Components'. This configuration affects how stories are displayed in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-ordered-pages.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  parameters: {
    options: {
      storySort: {
        order: ['Intro', 'Pages', ['Home', 'Login', 'Admin'], 'Components'],
      },
    },
  },
};
```

----------------------------------------

TITLE: Click Simulation with fireEvent in Storybook
DESCRIPTION: This snippet shows how to simulate a click event on an element within a Storybook story using the fireEvent utility. It retrieves the canvas element, finds an element by its data-testid attribute, and then simulates a click on that element. This is useful for testing component interactions within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#_snippet_7

LANGUAGE: ts
CODE:
```
await fireEvent.click(canvas.getByTestId('data-testid'));
```

----------------------------------------

TITLE: Initializing Svelte Storybook Story with CSF (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte component using Component Story Format (CSF) with TypeScript. It imports the necessary modules from '@storybook/addon-svelte-csf' and defines the component and its argument types within a <script module> tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      actualArgName: {
        name: 'Friendly name',
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Overriding the Default Root Element for Pseudo Classes
DESCRIPTION: Example of overriding the default root element for pseudo classes by setting the `rootSelector` property within the `parameters.pseudo` object. This is useful for components that render outside Storybook's root element, such as portals or dialogs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/pseudo-states/README.md#_snippet_4

LANGUAGE: jsx
CODE:
```
export const DialogButton = () => (
  <Dialog>
    <Button>Hover</Button>
  </Dialog>
);

DialogButton.parameters = {
  pseudo: { hover: true, rootSelector: 'body' },
};
```

----------------------------------------

TITLE: Rendering a Web Component with Args and Function Result (TS)
DESCRIPTION: This snippet shows how to render a Web Component in a Storybook story, passing arguments and using a function to derive a property value. It defines a `render` function that receives arguments, calls `someFunction` with `propertyA` and `propertyB`, and returns an HTML template with the derived `someProperty`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_16

LANGUAGE: typescript
CODE:
```
type Story = StoryObj;

const someFunction = (valuePropertyA: any, valuePropertyB: any) => {
  // Do some logic here
};

export const ExampleStory: Story = {
  render: ({ propertyA, propertyB }) => {
    //👇 Assigns the function result to a variable
    const someFunctionResult = someFunction(propertyA, propertyB);

    return html`
      <custom-component
        .propertyA=${propertyA}
        .propertyB=${propertyB}
        .someProperty=${someFunctionResult}
      ></custom-component>
    `;
  },
  args: {
    propertyA: 'Item One',
    propertyB: 'Another Item One',
  },
};
```

----------------------------------------

TITLE: Configuring Svelte Story with CSF for Example Component
DESCRIPTION: This snippet configures a Storybook story for a Svelte component named 'Example' using the Component Story Format (CSF). It imports 'defineMeta' from '@storybook/addon-svelte-csf' and defines the component and its argument types, specifically a 'number' type for the 'value' argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      value: { type: 'number' },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Primary Button Story in Solid (JavaScript)
DESCRIPTION: This JavaScript code configures a primary button story within Storybook for a Solid component. It imports the Button component from './Button' and sets up the story with arguments for label and primary state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_5

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Primary = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Styling Storybook UI Components with CSS
DESCRIPTION: This CSS snippet defines styles for various Storybook UI components, including containers, sections, grids, and responsive designs for different screen sizes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/ts/Configure.mdx#2025-04-22_snippet_4

LANGUAGE: CSS
CODE:
```
  .sb-container {
    margin-bottom: 48px;
  }

  .sb-section {
    width: 100%;
    display: flex;
    flex-direction: row;
    gap: 20px;
  }

  img {
    object-fit: cover;
  }

  .sb-section-title {
    margin-bottom: 32px;
  }

  .sb-section a:not(h1 a, h2 a, h3 a) {
    font-size: 14px;
  }

  .sb-section-item, .sb-grid-item {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .sb-section-item-heading {
    padding-top: 20px !important;
    padding-bottom: 5px !important;
    margin: 0 !important;
  }
  .sb-section-item-paragraph {
    margin: 0;
    padding-bottom: 10px;
  }

  .sb-chevron {
    margin-left: 5px;
  }

  .sb-features-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 32px 20px;
  }

  .sb-socials {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }

  .sb-socials p {
    margin-bottom: 10px;
  }

  .sb-explore-image {
    max-height: 32px;
    align-self: flex-start;
  }

  .sb-addon {
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    background-color: #EEF3F8;
    border-radius: 5px;
    border: 1px solid rgba(0, 0, 0, 0.05);
    background: #EEF3F8;
    height: 180px;
    margin-bottom: 48px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 48px;
    max-width: 240px;
  }

  .sb-addon-text h4 {
    padding-top: 0px;
  }

  .sb-addon-img {
    position: absolute;
    left: 345px;
    top: 0;
    height: 100%;
    width: 200%;
    overflow: hidden;
  }

  .sb-addon-img img {
    width: 650px;
    transform: rotate(-15deg);
    margin-left: 40px;
    margin-top: -72px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0);
    backface-visibility: hidden;
  }

  @media screen and (max-width: 800px) {
    .sb-addon-img {
      left: 300px;
    }
  }

  @media screen and (max-width: 600px) {
    .sb-section {
      flex-direction: column;
    }

    .sb-features-grid {
      grid-template-columns: repeat(1, 1fr);
    }

    .sb-socials {
      grid-template-columns: repeat(2, 1fr);
    }

    .sb-addon {
      height: 280px;
      align-items: flex-start;
      padding-top: 32px;
      overflow: hidden;
    }

    .sb-addon-text {
      padding-left: 24px;
    }

    .sb-addon-img {
      right: 0;
      left: 0;
      top: 130px;
      bottom: 0;
      overflow: hidden;
      height: auto;
      width: 124%;
    }

    .sb-addon-img img {
      width: 1200px;
      transform: rotate(-12deg);
      margin-left: 0;
      margin-top: 48px;
      margin-bottom: -40px;
      margin-left: -24px;
    }
  }
```

----------------------------------------

TITLE: Configuring Storybook Stories for React Component (JS)
DESCRIPTION: This code configures Storybook stories for a React component using JavaScript, defining the component, included stories, and excluded stories. It also defines data objects and story configurations for rendering the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#_snippet_1

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

import someData from './data.json';

export default {
  component: MyComponent,
  includeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories
  excludeStories: /.*Data$/, // 👈 Storybook ignores anything that contains Data
};

export const simpleData = { foo: 1, bar: 'baz' };
export const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };

export const SimpleStory = {
  args: {
    data: simpleData,
  },
};

export const ComplexStory = {
  args: {
    data: complexData,
  },
};
```

----------------------------------------

TITLE: Defining Default Button Story in CSF 3
DESCRIPTION: Creates a default story export for a Button component using Component Story Format 3. This minimal implementation uses an empty object to define the default story state, letting Storybook use all component default props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-default-render.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export const Default = {};
```

----------------------------------------

TITLE: Combo stories, still tested individually
DESCRIPTION: Demonstrates how to create combo stories for visualizing component variants while still testing them individually.  Applies the `test` tag to individual stories and removes it from the combo story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/tags.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
export const Primary = {
  args: {
    primary: true,
    label: 'Button',
  },
  tags: ['test'],
};

export const Secondary = {
  args: {
    primary: false,
    label: 'Button',
  },
  tags: ['test'],
};

export const Combo = {
  args: {
    primary: true,
    label: 'Button',
  },
  tags: ['!test'],
};

```

----------------------------------------

TITLE: Adding Function Parameters to Storybook Stories
DESCRIPTION: Shows how to add function parameters to a story, which in this case sets up an event listener when the story is rendered.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_8

LANGUAGE: JavaScript
CODE:
```
export const WithAddFunctionParameters = () => null
WithAddFunctionParameters.parameters = {
  foobar: () => {
    document.addEventListener('foo', () => console.log('bar'))
  },
}
```

----------------------------------------

TITLE: Testing Stories with Play Function in Jest
DESCRIPTION: Example showing how to use portable stories API with Jest to test stories that include play functions. The code demonstrates setting project annotations, composing stories, and running tests.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-jest.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { setProjectAnnotations, composeStories } from '@storybook/react';
import * as stories from './Button.stories';

setProjectAnnotations(projectAnnotations);
const { SubmitForm } = composeStories(stories);

test('reuses the play function', async () => {
  await SubmitForm.run();
});
```

----------------------------------------

TITLE: Initializing Storybook Story for Solid Component (TS)
DESCRIPTION: This code initializes a Storybook story for a Solid component named MyComponent using TypeScript. It imports necessary modules from 'storybook-solidjs' and defines a story that renders the component with an image, passing the image source and alt text as props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import imageFile from './static/image.png';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

const image = {
  src: imageFile,
  alt: 'my image',
};

export const WithAnImage: Story = {
  render: () => <img src={image.src} alt={image.alt} />,
};
```

----------------------------------------

TITLE: Configuring Button Story (JavaScript)
DESCRIPTION: This code configures a Button component's story in Storybook using JavaScript. It imports the necessary modules, defines the component, and sets up argTypes for the 'arrow' property, allowing users to select from predefined arrow icons using a select control in the Storybook UI. The options and labels for the arrow selection are also defined.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { Button } from './Button';

import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';

const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };

export default {
  component: Button,
  argTypes: {
    arrow: {
      options: Object.keys(arrows), // An array of serializable values
      mapping: arrows, // Maps serializable option values to complex arg values
      control: {
        type: 'select', // Type 'select' is automatically inferred when 'options' is defined
        labels: {
          // 'labels' maps option values to string labels
          ArrowUp: 'Up',
          ArrowDown: 'Down',
          ArrowLeft: 'Left',
          ArrowRight: 'Right',
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Configure PostCSS Plugins in Storybook
DESCRIPTION: This code snippet shows how to configure PostCSS plugins, such as `postcss-flexbugs-fixes` and `autoprefixer`, in a `postcss.config.js` file. This is necessary when switching to `@storybook/addon-postcss` and relying on these plugins.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_199

LANGUAGE: javascript
CODE:
```
module.exports = {
  plugins: [
    require("postcss-flexbugs-fixes"),
    require("autoprefixer")({
      flexbox: "no-2009",
    }),
  ],
};
```

----------------------------------------

TITLE: Adding a11y Addon with pnpm using dlx
DESCRIPTION: This shell command uses `pnpm dlx` (pnpm's equivalent to npx) to execute the Storybook CLI `add` command. It installs and configures the `@storybook/addon-a11y` addon for a Storybook project managed with pnpm.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-add-command.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@latest add @storybook/addon-a11y
```

----------------------------------------

TITLE: Configuring Storybook Addon Entry Points in JavaScript
DESCRIPTION: Exports the necessary entry points for a Storybook addon, including preview annotations for story customization and manager entries for UI extensions. It also re-exports the preset configuration to provide all addon functionality.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-root-preset.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export const previewAnnotations = [require.resolve('./dist/preview')];

export const managerEntries = [require.resolve('./dist/manager')];

export * from './dist/preset';
```

----------------------------------------

TITLE: Disabling Index.json Mode in Storybook Test-Runner
DESCRIPTION: Demonstrates how to explicitly disable the index.json mode in the Storybook test-runner if needed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
yarn test-storybook --url=https://your-deployed-storybook-url.com --no-index-json
```

----------------------------------------

TITLE: Testing React Button Component with Jest and Storybook
DESCRIPTION: A Jest test for a React Button component using Storybook's composeStories utility. It imports button stories, composes them to get the Primary story variant, runs it, and creates a snapshot test of the rendered output.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-snapshot-test-portable-stories.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { composeStories } from '@storybook/react';

import * as stories from '../stories/Button.stories';

const { Primary } = composeStories(stories);
test('Button snapshot', async () => {
  await Primary.run();
  expect(document.body.firstChild).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Initializing Web Components Story with CSF in Typescript
DESCRIPTION: This code initializes a Storybook story for a Web Component using TypeScript and the Component Story Format (CSF). It defines the meta object with the component name and a render function, and creates a primary story with a loader that fetches todo data from an API.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
const meta: Meta = {
  component: 'demo-todo-item',
  render: (args, { loaded: { todo } }) => TodoItem({ ...args, ...todo }),
};

export default meta;
type Story = StoryObj;

export const Primary: Story = {
  loaders: [
    async () => ({
      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),
    }),
  ],
};
```

----------------------------------------

TITLE: Simulating Button Click with Play Function in Storybook
DESCRIPTION: This code snippet demonstrates how to use the `play` function in a Storybook story to simulate a button click. It uses `within` to query the DOM within the canvas element and `userEvent` to trigger a click event on a button with a specific role and name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#_snippet_8

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

export default {
  component: 'demo-my-component',
};

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleWithRole = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button', { name: / button label/i }));
  },
};
```

----------------------------------------

TITLE: Composing Stories in JavaScript using destructuring assignment
DESCRIPTION: This code snippet demonstrates how to compose stories using the composeStories function. It extracts the Primary story from a stories object using object destructuring.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/__mocks__/composeStory.txt#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
// THIS IS A MOCK FILE, DO NOT TOUCH
const { Primary } = composeStories(stories)
```

----------------------------------------

TITLE: Enabling HTTPS for Angular Storybook
DESCRIPTION: Starts Storybook with HTTPS enabled, requiring custom certificate information for secure connections.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_19

LANGUAGE: JSON
CODE:
```
{"https": true}
```

----------------------------------------

TITLE: Installing Storybook Accessibility Addon via NPX
DESCRIPTION: This command adds the @storybook/addon-a11y package to an existing Storybook project. It uses npx to run the Storybook CLI and execute the 'add' command for the accessibility addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/a11y/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx storybook add @storybook/addon-a11y
```

----------------------------------------

TITLE: Installing Storybook using CLI
DESCRIPTION: Command to install Storybook in a project's root directory using the Storybook CLI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
<CodeSnippets path="create-command.md" />
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and sets the component and parameters (layout: centered) in the default export.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  // Sets the layout parameter component wide.
  parameters: {
    layout: 'centered',
  },
};
```

----------------------------------------

TITLE: Defining NoteUI Story with Save Flow in TypeScript (Common)
DESCRIPTION: This code defines a Storybook story for the NoteUI component in TypeScript, intended for a common environment. It imports necessary modules and types, but contains a placeholder for the framework-specific import from Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#_snippet_3

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { expect, userEvent, within } from 'storybook/test';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { saveNote } from '#app/actions.mock';
```

----------------------------------------

TITLE: Using Controls Block in MDX
DESCRIPTION: Demonstrates how to use the `Controls` block within an MDX file to display controls for a specific story. It imports necessary modules, defines metadata for the stories, renders a canvas for a primary story, and then displays the controls for that story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-controls.mdx#_snippet_1

LANGUAGE: markdown
CODE:
```
import { Meta, Canvas, Controls } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories'

<Meta of={ButtonStories} />

<Canvas of={ButtonStories.Primary} />

<Controls of={ButtonStories.Primary} />
```

----------------------------------------

TITLE: Defining Conditional ArgTypes in Storybook (Typescript)
DESCRIPTION: This snippet demonstrates how to define conditional argTypes in a Storybook story using Typescript. It shows how to conditionally display argTypes based on the existence, truthiness, or specific values of other args or globals.  It uses the `@storybook/your-framework` import, which should be replaced with the appropriate framework package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#_snippet_5

LANGUAGE: typescript
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Example from './Example.svelte';

const meta = {
  component: Example,
  argTypes: {
    parent: { control: 'select', options: ['one', 'two', 'three'] },

    // 👇 Only shown when `parent` arg exists
    parentExists: { if: { arg: 'parent', exists: true } },

    // 👇 Only shown when `parent` arg does not exist
    parentDoesNotExist: { if: { arg: 'parent', exists: false } },

    // 👇 Only shown when `parent` arg value is truthy
    parentIsTruthy: { if: { arg: 'parent' } },
    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },

    // 👇 Only shown when `parent` arg value is not truthy
    parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },

    // 👇 Only shown when `parent` arg value is 'three'
    parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },

    // 👇 Only shown when `parent` arg value is not 'three'
    parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },

    // Each of the above can also be conditional on the value of a globalType, e.g.:

    // 👇 Only shown when `theme` global exists
    parentExists: { if: { global: 'theme', exists: true } },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Rendering Document Data with Vue (TypeScript)
DESCRIPTION: This Vue component fetches user, document, and subdocument data using a GraphQL query with `@vue/apollo-composable`. It handles loading and error states, and renders the data using the PageLayout, DocumentHeader, and DocumentList components. The component is defined using the composition API with TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#_snippet_6

LANGUAGE: ts
CODE:
```
<template>
  <div v-if="loading">Loading...</div>

  <div v-else-if="error">There was an error fetching the data!</div>

  <div v-if="!loading && data && result.subdocuments.length">
    <PageLayout :user="data.user">
      <DocumentHeader :document="result.document" />
      <DocumentList :documents="result.subdocuments" />
    </PageLayout>
  </div>
</template>

<script lang="ts">
  import PageLayout from './PageLayout';
  import DocumentHeader from './DocumentHeader';
  import DocumentList from './DocumentList';

  import gql from 'graphql-tag';
  import { useQuery } from '@vue/apollo-composable';
  import { defineComponent } from 'vue';

  export default defineComponent({
    name: 'DocumentScreen',
    setup() {
      const { result, loading, error } = useQuery(gql`
        query AllInfoQuery {
          user {
            userID
            name
          }
          document {
            id
            userID
            title
            brief
            status
          }
          subdocuments {
            id
            userID
            title
            content
            status
          }
        }
      `);

      return {
        result,
        loading,
        error,
      };
    },
  });
</script>
```

----------------------------------------

TITLE: Installing Storybook Vite Builder with PNPM
DESCRIPTION: Command to install @storybook/builder-vite package using PNPM package manager as a development dependency.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev @storybook/builder-vite
```

----------------------------------------

TITLE: Importing and Configuring Storybook Docs
DESCRIPTION: Imports required components from Storybook addon-docs and account form stories. Sets up documentation structure with Meta and Story components to display form variations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/AccountForm.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { Meta, Story } from '@storybook/addon-docs';
import * as AccountFormStories from './AccountForm.stories';
```

----------------------------------------

TITLE: Defining Vue List Story (TypeScript)
DESCRIPTION: This TypeScript code defines a Storybook story for a Vue List component. It imports the List and ListItem components, as well as stories from ListItem. The 'ManyItems' story renders the List component with multiple ListItem components, using the 'Selected' and 'Unselected' stories from ListItem. It passes the isSelected property to each list item.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import List from './ListComponent.vue';
import ListItem from './ListItem.vue';

//👇 We're importing the necessary stories from ListItem
import { Selected, Unselected } from './ListItem.stories';

const meta = {
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ManyItems: Story = {
  render: (args) => ({
    components: { List, ListItem },
    setup() {
      return { ...args };
    },
    template: `
      <List v-bind="args">
        <list-item :isSelected="Selected"/>
        <list-item :isSelected="Unselected"/>
        <list-item :isSelected="Unselected"/>
      </List>`, 
  }),
  args: {
    Selected: Selected.args.isSelected,
    Unselected: Unselected.args.isSelected,
  },
};
```

----------------------------------------

TITLE: Exporting Storybook Configuration in JavaScript
DESCRIPTION: This JavaScript snippet exports the default configuration for Storybook, specifying the framework and story paths. Additionally, it includes a function to incorporate environment variables from existing configurations, supporting further customization via an ".env" file or command line configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-env.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  /*
   * 👇 The `config` argument contains all the other existing environment variables.
   * Either configured in an `.env` file or configured on the command line.
   */
  env: (config) => ({
    ...config,
    EXAMPLE_VAR: 'An environment variable configured in Storybook',
  }),
};
```

----------------------------------------

TITLE: Compose Storybook Story with Imported Stories (JS)
DESCRIPTION: This JavaScript code defines a Storybook story named 'Simple' for the 'demo-document-screen' component. It imports stories from 'PageLayout', 'DocumentHeader', and 'DocumentList' and passes their arguments as props to the 'demo-document-screen' component, composing a complete view.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#_snippet_7

LANGUAGE: js
CODE:
```
// 👇 Imports the required stories
import * as PageLayout from './PageLayout.stories';
import * as DocumentHeader from './DocumentHeader.stories';
import * as DocumentList from './DocumentList.stories';

export default {
  component: 'demo-document-screen',
};

export const Simple = {
  args: {
    user: PageLayout.Simple.args.user,
    document: DocumentHeader.Simple.args.document,
    subdocuments: DocumentList.Simple.args.documents,
  },
};
```

----------------------------------------

TITLE: Compose Stories Type Definition
DESCRIPTION: Type definition for the `composeStories` function, showing the input parameters (CSF file exports and optional project annotations) and the return type (a record of composed story functions).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-vitest.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
(
  csfExports: CSF file exports,
  projectAnnotations?: ProjectAnnotations
) => Record<string, ComposedStoryFn>
```

----------------------------------------

TITLE: Configuring Storybook Stories for Svelte Component (JS)
DESCRIPTION: This code configures Storybook stories for a Svelte component using JavaScript, defining the component, included stories, and excluded stories. It also defines data objects and story configurations for rendering the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  import someData from './data.json';

  const { Story } = defineMeta({
    component: MyComponent,
    includeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories
    excludeStories: /.*Data$/, // 👈 Storybook ignores anything that contains Data
  });

  export const simpleData = { foo: 1, bar: 'baz' };

  export const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };
</script>

<Story name="SimpleStory" args={{ data: simpleData }} />

<Story name="ComplexStory" args={{ data: complexData }} />
```

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.svelte';

import someData from './data.json';

export default {
  component: MyComponent,
  includeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories
  excludeStories: /.*Data$/, // 👈 Storybook ignores anything that contains Data
};

export const simpleData = { foo: 1, bar: 'baz' };
```

----------------------------------------

TITLE: Installing Storybook via npx
DESCRIPTION: This command uses npx to install and initialize Storybook in the current project. It automatically detects the project type and installs necessary dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/create-storybook/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@latest init
```

----------------------------------------

TITLE: Initializing Button Storybook Story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It defines metadata for the component and exports primary and secondary stories with different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

export const Primary = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary = {
  args: {
    ...Primary.args,
    primary: false,
  },
};
```

----------------------------------------

TITLE: GoBack Story Interaction Test (TypeScript)
DESCRIPTION: This story tests the 'GoBack' functionality of the MyForm component using TypeScript. It simulates a user click on the 'Go back' button and asserts that the router's back function is called. It utilizes Storybook's Meta and StoryObj types for type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-router-mock.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Meta, StoryObj } from '@storybook/your-framework';

import { expect, fireEvent, userEvent, within } from 'storybook/test';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { getRouter } from '@storybook/your-framework/router.mock';

import MyForm from './my-form';

const meta = {
  component: MyForm,
} satisfies Meta<typeof MyForm>;

export default meta;
type Story = StoryObj<typeof meta>;

export const GoBack: Story = {
  async play({ canvasElement }) {
    const canvas = within(canvasElement);
    const backBtn = await canvas.findByText('Go back');

    await userEvent.click(backBtn);
    // 👇 Assert that your component called back()
    await expect(getRouter().back).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Initializing List Story with SolidJS (JavaScript)
DESCRIPTION: This code defines a Storybook story for a SolidJS List component using JavaScript. It imports the List and ListItem components, as well as a specific story from ListItem. It defines a template for rendering the list with items and creates stories for empty and single-item lists.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_3

LANGUAGE: js
CODE:
```
import { List } from './List';
import { ListItem } from './ListItem';

//👇 Imports a specific story from ListItem stories
import { Unchecked } from './ListItem.stories';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
};

//👇 The ListTemplate construct will be spread to the existing stories.
const ListTemplate = {
  render: ({ items, ...args }) => {
    return (
      <List>
        {items.map((item) => (
          <ListItem {...item} />
        ))}
      </List>
    );
  },
};

export const Empty = {
  ...ListTemplate,
  args: {
    items: [],
  },
};

export const OneItem = {
  ...ListTemplate,
  args: {
    items: [
      {
        ...Unchecked.args,
      },
    ],
  },
};

```

----------------------------------------

TITLE: Creating MDX Documentation for Vue Components
DESCRIPTION: Example of an MDX file that includes a component story, markdown documentation, and an ArgsTable for a Vue component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_6

LANGUAGE: markdown
CODE:
```
import { Meta, Story, ArgsTable } from '@storybook/addon-docs';
import { InfoButton } from './InfoButton.vue';

<Meta title='InfoButton' component={InfoButton} />

# InfoButton

Some **markdown** description, or whatever you want.

<Story name='basic' height='400px'>{{
  components: { InfoButton },
  template: '<info-button label="I\'m a button!"/>',
}}</Story>

## ArgsTable

<ArgsTable of={InfoButton} />
```

----------------------------------------

TITLE: Storybook Init with Parser
DESCRIPTION: This example shows how to set the jscodeshift parser (tsx).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_53

LANGUAGE: shell
CODE:
```
storybook init --parser tsx
```

----------------------------------------

TITLE: Initializing Storybook Meta for Component (TS)
DESCRIPTION: This code initializes the Storybook metadata for a component using TypeScript. It imports the Meta type from @storybook/your-framework and the MyComponent. It defines the title, component, decorators, and parameters for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { MyComponent } from './MyComponent';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Path/To/MyComponent',
  component: MyComponent,
  decorators: [
    /* ... */
  ],
  parameters: {
    /* ... */
  },
} satisfies Meta<typeof MyComponent>;

export default meta;
```

----------------------------------------

TITLE: Conditional Rendering for Framework-Specific Documentation Links
DESCRIPTION: This code snippet uses conditional rendering tags to display framework-specific documentation links based on the renderer being used. It covers various frameworks including Qwik, React, SolidJS, Svelte, Vue, and Web Components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_10

LANGUAGE: markdown
CODE:
```
<IfRenderer renderer="qwik">
    * [Storybook's Qwik README](https://github.com/literalpie/storybook-framework-qwik) for more information on how to set up Storybook in your Qwik project.
    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.
  </IfRenderer>

  <IfRenderer renderer="react">
    * Storybook's React Vite [framework documentation](./frameworks/react-vite.mdx) for more information on how to set up Storybook in your React project with Vite.
    * Storybook's React Webpack [framework documentation](./frameworks/react-webpack5.mdx) for more information on how to set up Storybook in your React project with Webpack 5.
    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.
  </IfRenderer>

  <IfRenderer renderer="solid">
    * [Storybook's SolidJS README](https://github.com/storybookjs/solidjs) for more information on how to set up Storybook in your SolidJS project.
    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.
  </IfRenderer>

  <IfRenderer renderer="svelte">
    * Storybook's SvelteKit [framework documentation](./frameworks/sveltekit.mdx) for more information on how to set up Storybook in your SvelteKit project.
    * Storybook's Svelte Vite [framework documentation](./frameworks/svelte-vite.mdx) for more information on how to set up Storybook in your Svelte project with Vite.
    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.
  </IfRenderer>

  <IfRenderer renderer="vue">
    * Storybook's Vue 3 Vite [framework documentation](./frameworks/vue3-vite.mdx) for more information on how to set up Storybook in your Vue 3 project with Vite.
    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.
  </IfRenderer>

  <IfRenderer renderer="web-components">
    * Storybook's Web Components Vite [framework documentation](./frameworks/web-components-vite.mdx) for more information on how to set up Storybook in your Web Components project with Vite.
    * [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.
  </IfRenderer>
```

----------------------------------------

TITLE: Configuring requireEnv option for Vite
DESCRIPTION: This overrides the `VITE_COVERAGE` environment variable's value by granting access to the `env` variables.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_13

LANGUAGE: javascript
CODE:
```
options: { istanbul: { requireEnv: true,}}
```

----------------------------------------

TITLE: Creating List Story with HTML
DESCRIPTION: This code creates a Storybook story for the List component using HTML. It imports the createList function from the List module and defines a default export with a title. The Empty story renders the list using the createList function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_1

LANGUAGE: js
CODE:
```
import { createList } from './List';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
};

// Always an empty list, not super interesting
export const Empty = {
  render: (args) => createList(args),
};

```

----------------------------------------

TITLE: Fire Event Example Storybook Play Function (Svelte CSF)
DESCRIPTION: This play function simulates firing a click event on an element with a specific test ID within a Storybook story using the fireEvent.click method. It queries the canvas for an element with the 'data-testid' attribute and then triggers a click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#_snippet_3

LANGUAGE: js
CODE:
```
<Story
  name="FireEventExample"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await fireEvent.click(canvas.getByTestId('data-testid'));
  }}
/>
```

----------------------------------------

TITLE: Linking Storybook Package
DESCRIPTION: Links a local Storybook package (e.g., `@storybook/react`) for development.  This allows you to test changes in a local app without publishing the package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.old.md#_snippet_14

LANGUAGE: bash
CODE:
```
cd app/react
yarn link
```

----------------------------------------

TITLE: Configuring Storybook Setup with Addons in JavaScript
DESCRIPTION: Exports a configuration object for Storybook using a framework specified at '@storybook/your-framework'. Lists patterns for locating story files and includes various addons such as '@storybook/addon-a11y' for accessibility checks. The actual framework name should be replaced before use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-register.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    // Other Storybook addons
    '@storybook/addon-a11y', //👈 The a11y addon goes here
  ],
};
```

----------------------------------------

TITLE: Defining Storybook Story Metadata (JS)
DESCRIPTION: This JavaScript snippet defines the metadata for a Storybook story, specifying the component to be 'my-component' and an example story with a Figma design URL.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#_snippet_11

LANGUAGE: js
CODE:
```
export default {
  component: 'my-component',
};

export const Example = {
  parameters: {
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/Sample-File',
    },
  },
};
```

----------------------------------------

TITLE: Configuring Inline Stories Rendering Behavior
DESCRIPTION: Configuration in preview.js to control how stories render in the documentation, setting inline to false will render stories in iframes instead of inline.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
export const parameters = { docs: { story: { inline: false } } };
```

----------------------------------------

TITLE: Web Components CSF Story (JS)
DESCRIPTION: Configures a Storybook story for a Web Component using Component Story Format (CSF) in JavaScript. It defines the component and exports a story with an empty `args` object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_14

LANGUAGE: js
CODE:
```
// This default export determines where your story goes in the story list
export default {
  component: 'demo-your-component',
};

export const FirstStory = {
  args: {
    // 👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Configuring React Button Stories in JavaScript
DESCRIPTION: JavaScript configuration for Button component stories in React with background parameters. Sets up a basic story configuration with a gray background option.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-values-in-meta.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  parameters: {
    backgrounds: {
      default: 'Light',
      values: [
        // 👇 Add a new value
        { name: 'Gray', value: '#CCC' },
      ],
    },
  },
};
```

----------------------------------------

TITLE: Defining Storybook Configuration for Button Component
DESCRIPTION: This code defines the Storybook configuration for a Button component. It imports the action function from 'storybook/actions' and the Button component. It then exports a default object containing the component and its arguments, including an onClick action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#_snippet_3

LANGUAGE: js
CODE:
```
import { action } from 'storybook/actions';

import Button from './Button';

export default {
  component: Button,
  args: {
    // 👇 Create an action that appears when the onClick event is fired
    onClick: action('on-click'),
  },
};
```

----------------------------------------

TITLE: Configuring Story Sorting in Storybook Preview (TypeScript)
DESCRIPTION: This TypeScript snippet configures the Storybook preview, defining a custom story sorting order. It imports the Preview type from '@storybook/your-framework' and sets the 'storySort' parameter within the 'options' parameter to specify the order of stories in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-ordered-pages-and-wildcard.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    options: {
      storySort: {
        order: ['Intro', 'Pages', ['Home', 'Login', 'Admin'], 'Components', '*', 'WIP'],
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Defining Svelte Button Stories with Svelte CSF
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using the Svelte Component Story Format (CSF). It imports the Button component and defines metadata including argTypes for controlling the background color. It exports two stories: Accessible and Inaccessible, demonstrating different argument configurations within the Svelte template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_10

LANGUAGE: svelte
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    argTypes: {
      backgroundColor: { control: 'color' },
    },
  });
</script>

<!-- This is an accessible story -->
<Story name="Accessible" args={{ primary: false, label: 'Button' }} />

<!-- This is not -->
<Story name="Inaccessible" args={{ primary: false, label: 'Button', backgroundColor: 'red' }} />
```

----------------------------------------

TITLE: Configuring Angular Story for Example Component
DESCRIPTION: This snippet configures a Storybook story for the Example component using Angular. It imports the necessary modules from '@storybook/angular' and defines the component and its argument types, specifically describing the 'value' property of a slider.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Example } from './Example';

const meta: Meta<Example> = {
  component: Example,
  argTypes: {
    value: {
      description: 'The value of the slider',
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Setting Log Level
DESCRIPTION: Controls the level of logging during the build process. Available options include `silly`, `verbose`, `info`, `warn`, `error`, and `silent`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_7

LANGUAGE: Shell
CODE:
```
storybook dev --loglevel warn
```

----------------------------------------

TITLE: Configuring Storybook Setup with Addons in TypeScript
DESCRIPTION: Imports 'StorybookConfig' type and exports a configuration object for Storybook. Specifies the framework name, story file patterns, and required addons like '@storybook/addon-a11y'. The placeholder '@storybook/your-framework' should be replaced with a specific framework name prior to deployment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-register.md#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    // Other Storybook addons
    '@storybook/addon-a11y', //👈 The a11y addon goes here
  ],
};

export default config;
```

----------------------------------------

TITLE: Jest config to ignore test results file
DESCRIPTION: Adds the `jest-test-results.json` file to `modulePathIgnorePatterns` in the Jest configuration. This prevents Jest from infinitely looping when watching for changes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/jest/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
modulePathIgnorePatterns: ['node_modules', 'jest-test-results.json'],
```

----------------------------------------

TITLE: Dynamic Story Linking with Select Element
DESCRIPTION: This example shows how to use `linkTo` with a select element to dynamically link to different stories based on the selected value. The event object is passed to `linkTo`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { linkTo } from '@storybook/addon-links';
import LinkTo from '@storybook/addon-links/react';

export default {
  title: 'Select',
};

export const index = () => (
  <select value="Index" onChange={linkTo('Select', (e) => e.currentTarget.value)}>
    <option>index</option>
    <option>first</option>
    <option>second</option>
    <option>third</option>
  </select>
);
export const first = () => <LinkTo story="index">Go back</LinkTo>;
export const second = () => <LinkTo story="index">Go back</LinkTo>;
export const third = () => <LinkTo story="index">Go back</LinkTo>;
```

----------------------------------------

TITLE: Configuring React Button Stories in TypeScript
DESCRIPTION: TypeScript configuration for Button component stories in React with strict typing. Uses Meta type from @storybook/react for type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-values-in-meta.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import type { Meta } from '@storybook/react';

import { Button } from './Button';

const meta: Meta<typeof Button> = {
  component: Button,
  parameters: {
    backgrounds: {
      default: 'Light',
      values: [
        // 👇 Add a new value
        { name: 'Gray', value: '#CCC' },
      ],
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Web Components Button Story Implementation (JavaScript)
DESCRIPTION: Default story implementation for a Button web component using CSF 3 format. Uses JavaScript with HTML template literal syntax and click event handling.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
export const Default = {
  render: (args) => html`<demo-button label="Hello" @click=${action('clicked')}></demo-button>`,
};
```

----------------------------------------

TITLE: Defining Button Stories in Svelte with JavaScript (CSF 2)
DESCRIPTION: Creates a default button story for Svelte components using JavaScript and CSF 2 format. The story returns an object specifying the Component and props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
// Other imports and story implementation
export const Default = (args) => ({
  Component: Button,
  props: args,
});
```

----------------------------------------

TITLE: Running a Codemod with Storybook CLI
DESCRIPTION: This command runs a specific codemod using the Storybook CLI's migrate command, with a glob pattern to target specific files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
npx sb migrate <name-of-codemod> --glob="**/*.stories.js"
```

----------------------------------------

TITLE: Configuring Storybook Story for Svelte Component (CSF)
DESCRIPTION: This snippet configures a Storybook story for a Svelte component using Component Story Format (CSF), including a decorator that applies a margin around the story using a Svelte component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#_snippet_6

LANGUAGE: js
CODE:
```
import YourComponent from './YourComponent.svelte';
import MarginDecorator from './MarginDecorator.svelte';

export default {
  component: YourComponent,
  decorators: [() => MarginDecorator],
};
```

----------------------------------------

TITLE: Legacy Svelte Storybook Story Implementation
DESCRIPTION: Shows the original way of defining Storybook stories for Svelte components using direct Meta and Story imports from @storybook/addon-svelte-csf.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-story-migration.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
  import { Meta, Story } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';
</script>


<Meta title="MyComponent" component={MyComponent} />

<Story name="Default" />
```

----------------------------------------

TITLE: Disabling Jest Addon for a Single Story
DESCRIPTION: This snippet shows how to disable the Jest addon for a specific story by setting the `jest` parameter to `{disable: true}`. This prevents the addon from displaying test results for that particular story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/jest/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
// MyComponent.stories.js|jsx
import MyComponent from './MyComponent';

export default {
  component: MyComponent,
  title: 'MyComponent',
};

const Template = (args) => <MyComponent {...args} />;

export const Default = Template.bind({});

Default.args = {
  text: 'Jest results in Storybook',
};
Default.parameters = {
  jest: { disable: true },
};
```

----------------------------------------

TITLE: Remove Highlight Story with Decorator - Svelte CSF (JS)
DESCRIPTION: This story demonstrates how to use a decorator in Svelte CSF (JS) to emit HIGHLIGHT and REMOVE_HIGHLIGHT events using the useChannel hook. It highlights specific selectors and then removes the highlight.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-remove.md#_snippet_3

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { useChannel } from 'storybook/preview-api';
  import { HIGHLIGHT, REMOVE_HIGHLIGHT } from 'storybook/highlight';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="RemoveHighlight"
  decorators=[
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        id: 'my-unique-id',
        selectors: ['header', 'section', 'footer'],
      });
      emit(REMOVE_HIGHLIGHT, 'my-unique-id');
      return storyFn();
    },
  ]
/>
```

----------------------------------------

TITLE: Suppressing Verbose Output During Storybook Build (Shell)
DESCRIPTION: This command suppresses verbose output during the build process, providing a cleaner console output. It's useful when detailed logs are not required.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_32

LANGUAGE: shell
CODE:
```
storybook build --quiet
```

----------------------------------------

TITLE: Removing Storybook Addon via CLI
DESCRIPTION: Command to automatically remove a Storybook addon using the storybook remove command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/install-addons.mdx#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
# With npm
npm run storybook remove @storybook/addon-a11y

# With yarn
yarn storybook remove @storybook/addon-a11y

# With pnpm
pnpm storybook remove @storybook/addon-a11y
```

----------------------------------------

TITLE: Initializing Angular Checkbox Story
DESCRIPTION: This code initializes a Storybook story for an Angular Checkbox component. It imports the necessary modules from '@storybook/angular' and defines the component's metadata, including the component itself. It exports a default meta object and an 'Unchecked' story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Checkbox } from './checkbox.component';

const meta: Meta<Checkbox> = {
  component: Checkbox,
};

export default meta;
type Story = StoryObj<Checkbox>;

export const Unchecked: Story = {
  args: {
    label: 'Unchecked',
  },
};
```

----------------------------------------

TITLE: Importing Typeset Component in Storybook
DESCRIPTION: This snippet shows how to import the Typeset component from Storybook's addon-docs blocks. This is typically used at the top of a Storybook MDX file to make the Typeset component available for use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-typeset.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { Typeset } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Highlighting Elements in Web Components Story (TS)
DESCRIPTION: This snippet demonstrates how to highlight specific elements (h2, a, .storybook-button) in a Web Components story using TypeScript and the `HIGHLIGHT` addon. It uses the `useChannel` API to emit a highlight event within a decorator. The decorator wraps the story function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const Highlighted: Story = {
  decorators: [
    (story) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
      });
      return story();
    },
  ],
};
```

----------------------------------------

TITLE: Running Storybook Tests with pnpm
DESCRIPTION: This command uses pnpm to run the 'test-storybook' script, which executes Storybook tests. It's designed for projects using pnpm as their package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm run test-storybook
```

----------------------------------------

TITLE: Initializing Button Story for Svelte with Typescript
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using Typescript. It imports the Meta type from '@storybook/your-framework' and the Button component. The metadata sets the layout to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  // Sets the layout parameter component wide.
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Initializing Storybook with pnpm
DESCRIPTION: Command to initialize Storybook version 8.2 using pnpm package manager. This uses pnpm dlx to execute the Storybook init command without requiring a global installation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command-custom-version.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@8.2 init
```

----------------------------------------

TITLE: Basic Button Usage in TypeScript React
DESCRIPTION: Demonstrates basic usage of the Button component, including handling click events and using the asChild prop for custom rendering. This snippet shows two common ways to use the Button component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
// Using the onClick event handler
<Button onClick={}>Hello world!</Button>

  // Using the asChild prop to render a custom child
  <Button asChild>
    <a href="https://storybook.js.org">Hello world!</a>
  </Button>
```

----------------------------------------

TITLE: Configuring Chromatic for Storybook
DESCRIPTION: JSON configuration file for Chromatic addon, specifying options like project ID, build script, debug mode, and zip deployment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/visual-testing.mdx#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
  "buildScriptName": "deploy-storybook",
  "debug": true,
  "projectId": "Project:64cbcde96f99841e8b007d75",
  "zip": true
}
```

----------------------------------------

TITLE: Configuring Button Story for Web Components in Storybook (TS)
DESCRIPTION: This snippet configures a Storybook story for a web component button using TypeScript. It imports the necessary modules from '@storybook/web-components-vite' and defines the story's metadata, including the title and component (demo-component). Finally, it exports the metadata and a basic story named 'Button'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-hoisted.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Design System/Atoms/Button',
  component: 'demo-component',
};

export default meta;
type Story = StoryObj;

// This is the only named export in the file, and it matches the component name
export const Button: Story = {};
```

----------------------------------------

TITLE: Apollo Client Wrapper Component Setup in Vue
DESCRIPTION: This Vue component, `WrapperComponent`, initializes an Apollo Client with a specified GraphQL endpoint and provides it to its child components using Vue's `provide` feature. It uses `createHttpLink` to establish the connection and `InMemoryCache` for caching.  The component also sets default options to disable caching and handle errors for queries and watch queries.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_22

LANGUAGE: typescript
CODE:
```
<template>
  <div><slot /></div>
</template>

<script>
  import { defineComponent, provide } from 'vue';
  import { DefaultApolloClient } from '@vue/apollo-composable';
  import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client/core';

  // Apollo client wrapper component that can be used within your app and Storybook
  export default defineComponent({
    name: 'WrapperComponent',
    setup() {
      const httpLink = createHttpLink({
        // You should use an absolute URL here
        uri: 'https://your-graphql-endpoint',
      });
      const cache = new InMemoryCache();

      const mockedClient = new ApolloClient({
        link: httpLink,
        cache,
        defaultOptions: {
          watchQuery: {
            fetchPolicy: 'no-cache',
            errorPolicy: 'all',
          },
          query: {
            fetchPolicy: 'no-cache',
            errorPolicy: 'all',
          },
        },
      });
      provide(DefaultApolloClient, mockedClient);
    },
  });
</script>
```

----------------------------------------

TITLE: Initializing Button Story (Web Components TS)
DESCRIPTION: This code initializes a Storybook story for a Button component using TypeScript for Web Components. It imports the Meta type from @storybook/web-components-vite, defines the component, and enables auto-generated documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-meta.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Button',
  component: 'demo-button',
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
};
export default meta;
```

----------------------------------------

TITLE: Defining Svelte Story with CSF
DESCRIPTION: This snippet demonstrates how to define a story for a Svelte component using the classic Component Story Format (CSF) syntax. It imports necessary modules from `@storybook/addon-svelte-csf`, defines a Meta object for the component, and creates a Template and Story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-story-custom-children.md#_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
  import { Meta, Template, Story } from '@storybook/addon-svelte-csf';

  import OuterComponent from './OuterComponent.svelte';
  import MyComponent from './MyComponent.svelte';
</script>

<Meta title="MyComponent" component={MyComponent} />

<Template let:args>
  <OuterComponent>
    <MyComponent />
  </OuterComponent>
</Template>

<Story name="Default" />
```

----------------------------------------

TITLE: Register Handler for Story Navigation - JavaScript
DESCRIPTION: This method registers a handler function that is called whenever the user navigates between stories. It allows addons to respond to story changes and update their UI accordingly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
import { addons } from '@storybook/preview-api';

addons.register('my-addon', (api) => {
  api.on('storyChanged', (story) => {
    console.log(story);
  });
});
```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet exports a default configuration object for Storybook in JavaScript. It specifies the framework to use and the location of story files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-configuration-src-dir.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src'],
};
```

----------------------------------------

TITLE: Initializing Page stories for Vue (JS)
DESCRIPTION: This code initializes Storybook stories for the Page component in a Vue application using JavaScript. It imports the Page component and Header stories, and exports a default object configuring the component for Storybook. It also defines a 'LoggedIn' story, importing related Header stories to populate arguments and using a render function to control component rendering.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_9

LANGUAGE: js
CODE:
```
import Page from './Page.vue';

//👇 Imports all Header stories
import * as HeaderStories from './Header.stories';

export default {
  component: Page,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const LoggedIn = {
  render: (args) => ({
    components: { Page },
    setup() {
      return { args };
    },
    template: '<page v-bind="args" />',
  }),
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};
```

----------------------------------------

TITLE: Save Flow Story with Interactions (TS Web Components)
DESCRIPTION: This story defines the 'Save Flow' scenario for the NoteUI component in a web components environment using TypeScript. It sets up the component with editing enabled and a specific note, then simulates a user clicking the save button. Finally, it asserts that the mocked saveNote function was called, verifying the component's interaction with its dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { expect, userEvent, within } from 'storybook/test';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { saveNote } from '#app/actions.mock';
import { createNotes } from '#mocks/notes';

const meta: Meta = {
  title: 'Mocked/NoteUI',
  component: 'note-ui',
};
export default meta;

type Story = StoryObj;

const notes = createNotes();

export const SaveFlow: Story = {
  name: 'Save Flow ▶',
  args: {
    isEditing: true,
    note: notes[0],
  },
  play: async ({ canvasElement, step }) => {
    const canvas = within(canvasElement);

    const saveButton = canvas.getByRole('menuitem', { name: /done/i });
    await userEvent.click(saveButton);
    // 👇 This is the mock function, so you can assert its behavior
    await expect(saveNote).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Defining Svelte Button Stories with CSF
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and defines metadata including argTypes for controlling the background color. It exports two stories: Accessible and Inaccessible, demonstrating different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_9

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/svelte';

import Button from './Button.svelte';

const meta = {
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

// This is an accessible story
export const Accessible: Story = {
  args: {
    primary: false,
    label: 'Button',
  },
};

// This is not
export const Inaccessible: Story = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};
```

----------------------------------------

TITLE: Configuring List Story for React in JavaScript
DESCRIPTION: This code configures a Storybook story for the List component using React and JavaScript. It imports the List component and the Unchecked ListItem story, then defines a default export with the title 'List' and the component itself. The OneItem story renders the List with a single Unchecked ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-unchecked-children.md#_snippet_0

LANGUAGE: js
CODE:
```
import { List } from './List';

//👇 Instead of importing ListItem, we import the stories
import { Unchecked } from './ListItem.stories';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
};

export const OneItem = {
  args: {
    children: <Unchecked {...Unchecked.args} />,
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with Vue Render Function
DESCRIPTION: This code initializes a Storybook story for a Vue Button component using a render function. It imports the Button component and defines a primary story with a render function that renders the Button with a label and a decorator that adds margin.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#_snippet_8

LANGUAGE: js
CODE:
```
import Button from './Button.vue';

export default {
  component: Button,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: () => ({
    components: { Button },
    template: '<Button primary label="Hello World" />',
  }),
  decorators: [() => ({ template: '<div style="margin: 3em;"><story /></div>' })],
};
```

----------------------------------------

TITLE: Defining Web Components Button Story Metadata
DESCRIPTION: This snippet defines the metadata for a Storybook story of a web component button. It imports the necessary modules from '@storybook/web-components-vite' and the html function from 'lit'. The meta object is then exported as the default export, which is used by Storybook to display the component in the UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_20

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Primary: Story = {
  render: () => html`<demo-button primary></demo-button>`,
};
```

----------------------------------------

TITLE: Install React Native Web Vite Framework
DESCRIPTION: This command installs the React Native Web Vite framework and its peer dependencies. It's a crucial step in setting up Storybook for React Native Web.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-native-web-vite.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install --save-dev @storybook/react-native-web-vite vite react react-dom
```

----------------------------------------

TITLE: Standalone Documentation Page
DESCRIPTION: Shows how to create a standalone documentation page for project-level documentation, such as onboarding instructions. Storybook infers the page's placement in the sidebar based on the file's location.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_7

LANGUAGE: MDX
CODE:
```
---
title: Docs/MDX/Standalone Page
---

# Standalone Page

This is a standalone page.

<Canvas>
  <Story name="Basic">
    {/* Add a story here if needed */}
  </Story>
</Canvas>
```

----------------------------------------

TITLE: Rendering Demo List with One Item
DESCRIPTION: This story renders a demo-list component containing a single demo-list-item. It uses Lit's html template literal to define the component structure.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_34

LANGUAGE: TypeScript
CODE:
```
export const OneItem: Story = {
  render: () => html`
    <demo-list>
      <demo-list-item></demo-list-item>
    </demo-list>
  `,
};
```

----------------------------------------

TITLE: Compose Story Type Definition
DESCRIPTION: Defines the type signature for the `composeStory` function, which takes a story export, component annotations (Meta), project annotations, and an optional export name, and returns a composed story function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-vitest.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
(story: Story export,
    componentAnnotations: Meta,
    projectAnnotations?: ProjectAnnotations,
    exportsName?: string
  ) => ComposedStoryFn
```

----------------------------------------

TITLE: Migrating Svelte CSF Stories to New API
DESCRIPTION: This code snippet illustrates how to migrate Svelte CSF stories to the new API using the `defineMeta` function. It updates the story metadata definition and uses the `Story` component to define component stories, ensuring compatibility with the latest version of the addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import { defineMeta, Story } from '@storybook/addon-svelte-csf';

const meta = defineMeta({
  title: 'Example/Button',
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
    onClick: { action: 'onClick' },
    label: { control: 'text' },
  },
});

export default meta;

export const Primary: Story<Button> = {
  args: {
    primary: true,
    label: 'Button',
  },
};

```

----------------------------------------

TITLE: Configuring Storybook Main File in TypeScript
DESCRIPTION: This snippet demonstrates the configuration of the main Storybook file using TypeScript. It imports the StorybookConfig type, sets the framework, and defines story loading with a custom title prefix. The framework should be replaced with the specific framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-auto-title-custom.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: [
    {
      directory: '../src',
      titlePrefix: 'Custom', // 👈 Configure the title prefix
    },
  ],
};

export default config;
```

----------------------------------------

TITLE: Initializing Button Storybook Story for Svelte - TS
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript. It defines metadata for the component and exports primary and secondary stories with different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    ...Primary.args,
    primary: false,
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with Javascript
DESCRIPTION: This JavaScript configuration file sets up Storybook, defining the framework, story locations, and addons. It exports a configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-docs-options.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)

export default {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    {
      name: '@storybook/addon-docs',
      options: {
        csfPluginOptions: null,
        mdxPluginOptions: {
          mdxCompileOptions: {
            remarkPlugins: [],
          },
        },
      },
    },
  ],
};
```

----------------------------------------

TITLE: Exporting Storybook Story with Deprecated Hierarchy Separator in JavaScript
DESCRIPTION: Demonstrates how the Storybook story title was previously defined using the deprecated hierarchy separator '|'. This configuration is now considered incorrect in Storybook 6.0 and above, where only '/' is allowed. The snippet exports default metadata for the 'Input' component, grouping it under 'Components|Forms'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/hierarchy-separator.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default {
  title: 'Components|Forms/Input',
  component: Input,
};
```

----------------------------------------

TITLE: Configuring Svelte Button Story with CSF
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the necessary modules, defines the component metadata, sets up action handling for 'mouseover' and 'click .btn' events, and applies decorators.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  import { withActions } from 'storybook/actions/decorator';

  const { Story } = defineMeta({
    component: Button,
    parameters: {
      actions: {
        handles: ['mouseover', 'click .btn'],
      },
    },
    decorators: [withActions],
  });
</script>
```

----------------------------------------

TITLE: Initializing Button Story - Svelte CSF (TS)
DESCRIPTION: This code defines a basic Storybook story for a Svelte Button component using the Component Story Format (CSF) and TypeScript. It imports 'defineMeta' from '@storybook/addon-svelte-csf' and the Button component. The 'Basic' story configures documentation parameters to control the source display.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Basic"
  parameters={{
    docs: {
      canvas: { sourceState: 'shown' },
    },
  }} />
```

----------------------------------------

TITLE: Exporting Storybook Meta Configuration
DESCRIPTION: This code exports the meta configuration object, making it available for use in Storybook to define the component's properties and controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#_snippet_9

LANGUAGE: javascript
CODE:
```
export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Parameters in TypeScript
DESCRIPTION: This TypeScript snippet configures Storybook's parameters, defining control matchers for color and date properties.  It imports the Preview type from the appropriate Storybook framework and exports a preview configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-controls-custom-matchers.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Angular Button Story
DESCRIPTION: This code configures a Storybook story for an Angular Button component. It imports the necessary modules, defines the component metadata, sets up action handling for 'mouseover' and 'click .btn' events, and applies decorators.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { withActions } from 'storybook/actions/decorator';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  parameters: {
    actions: {
      handles: ['mouseover', 'click .btn'],
    },
  },
  decorators: [withActions],
};

export default meta;
```

----------------------------------------

TITLE: Initializing Button Storybook Story for Svelte (CSF) - TS
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF) with TypeScript. It defines metadata for the component and exports primary and secondary stories with different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-composition.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });

  const primaryArgs = {
    primary: true,
    label: 'Button',
  }
</script>

<Story name="Primary" args={primaryArgs} />

<Story name="Secondary" args={{...primaryArgs, primary: false}} />
```

----------------------------------------

TITLE: Initializing Button Story for Web Components with TS
DESCRIPTION: This code initializes a Storybook story for a Web Components Button component using TypeScript. It imports the necessary modules from '@storybook/web-components-vite' and defines the title and component for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Button',
  component: 'demo-button',
};

export default meta;
```

----------------------------------------

TITLE: Migrating Builder Options in main.js - Storybook 7.0
DESCRIPTION: This snippet demonstrates how to migrate the `core.builder` field in `main.js` to the new `framework.options.builder` structure in Storybook 7.0. The `lazyCompilation` option is moved from `core.builder.options` to `framework.options.builder`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_101

LANGUAGE: javascript
CODE:
```
export default {
  core: {
    builder: {
      name: 'webpack5',
      options: { lazyCompilation: true }
    },
  }
  framework: {
    name: '@storybook/react-webpack5',
    options: {},
  },
};
```

LANGUAGE: javascript
CODE:
```
export default {
  framework: {
    name: "@storybook/react-webpack5",
    options: {
      builder: { lazyCompilation: true },
    },
  },
};
```

----------------------------------------

TITLE: Creating Svelte Storybook Story with CSF
DESCRIPTION: Defines a Storybook story for a Svelte component using Component Story Format (CSF). It imports the component and uses defineMeta from '@storybook/addon-svelte-csf' to define the story's metadata. The ExampleStory is configured with specific arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-env-variables.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="ExampleStory"
  args={{
    propertyA: process.env.STORYBOOK_DATA_KEY
  }}
/>
```

----------------------------------------

TITLE: Enable experimentalRSC Feature in Storybook (JavaScript)
DESCRIPTION: This snippet shows how to enable the `experimentalRSC` feature in Storybook using JavaScript. It sets the `experimentalRSC` property to `true` within the `features` object in the Storybook configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/rsc-feature-flag.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  features: {
    experimentalRSC: true,
  },
};
```

----------------------------------------

TITLE: Defining Storybook Story with Play Function in JavaScript (Common)
DESCRIPTION: This code defines a Storybook story with a play function in JavaScript for a common component. It imports the component and necessary modules, and uses 'userEvent.type' to simulate user input with a delay.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#_snippet_4

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const DelayedStory = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const exampleElement = canvas.getByLabelText('example-element');

    // The delay option sets the amount of milliseconds between characters being typed
    await userEvent.type(exampleElement, 'random string', {
      delay: 100,
    });

    const AnotherExampleElement = canvas.getByLabelText('another-example-element');
    await userEvent.type(AnotherExampleElement, 'another random string', {
      delay: 100,
    });
  },
};
```

----------------------------------------

TITLE: Fetching GraphQL Data in SolidJS
DESCRIPTION: This component fetches data using a GraphQL client in SolidJS. It defines a GraphQL query to retrieve user, document, and subdocument information. It uses `createGraphQLClient` and the `newQuery` function to fetch data and returns the data to be rendered by the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Match, Switch } from 'solid-js';
import { createGraphQLClient, gql } from '@solid-primitives/graphql';

import { PageLayout } from './PageLayout';
import { DocumentHeader } from './DocumentHeader';
import { DocumentList } from './DocumentList';

const newQuery = createGraphQLClient('https://foobar.com/v1/api');
const AllInfoQuery = gql`
  query AllInfo {
    user {
      userID
      name
    }
    document {
      id
      userID
      title
      brief
      status
    }
    subdocuments {
      id
      userID
      title
      content
      status
    }
  }
`;

function useFetchInfo() {
  const [data] = newQuery(AllInfoQuery, { path: 'home' });
  return data;
}

export function DocumentScreen() {
  const data = useFetchInfo();
```

----------------------------------------

TITLE: Migrating Vue3 app export to setup function
DESCRIPTION: Shows how to migrate from the `app` export to the `setup` function in Storybook 7.0 for Vue3. This involves initializing the application within the `setup` function in `.storybook/preview.js`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_118

LANGUAGE: javascript
CODE:
```
import { setup } from "@storybook/vue3";
import Button from "./Button.vue";

setup((app) => {
  app.component("GlobalButton", Button);
});

```

----------------------------------------

TITLE: Initializing Storybook Meta and First Story with Play Function (TS with Framework)
DESCRIPTION: This code initializes the Storybook meta object for the MyComponent using a generic framework and defines the FirstStory with a play function that simulates user typing into an element with the test ID 'an-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FirstStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await userEvent.type(canvas.getByTestId('an-element'), 'example-value');
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with Svelte CSF (JS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using JavaScript. It imports the Button component and defines the story with auto-generated documentation enabled.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-meta.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
};
```

----------------------------------------

TITLE: Installing Storybook Angular with npm
DESCRIPTION: Command to install @storybook/angular as a dev dependency using npm package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/angular-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev @storybook/angular
```

----------------------------------------

TITLE: Defining Button Component Story (Web Components, JavaScript)
DESCRIPTION: This code defines a basic Storybook story for a Button component using Web Components and JavaScript. It exports a default object containing the component and a basic story with documentation parameters to show the source state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  title: 'Button',
  component: 'demo-button',
};

export const Basic = {
  parameters: {
    docs: {
      canvas: {
        sourceState: 'shown'
      },
    },
  },
};
```

----------------------------------------

TITLE: Incorrect Story Name Usage in Storybook CSF
DESCRIPTION: Example showing incorrect usage where the story name annotation is redundant with the export name. Storybook will automatically generate 'Primary Button' from PrimaryButton, making the explicit name unnecessary.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-redundant-story-name.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export const PrimaryButton = {
  // no need for this, as Storybook will resolve to this name already
  name: 'Primary Button',
};
```

----------------------------------------

TITLE: GraphQL Query with urql in Svelte
DESCRIPTION: This Svelte component uses urql to execute a GraphQL query and display the results. It imports necessary modules from '@urql/svelte' and defines a GraphQL query to fetch user, document, and subdocument data. The component then uses Svelte's reactive statements to display the data or handle loading and error states.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#_snippet_8

LANGUAGE: svelte
CODE:
```
<script lang="ts">
  import { queryStore, gql, getContextClient } from '@urql/svelte';

  import PageLayout from './PageLayout.svelte';
  import DocumentHeader from './DocumentHeader.svelte';
  import DocumentList from './DocumentList.svelte';

  const AllInfoQuery = queryStore({
    client: getContextClient(),
    query: gql`
      query AllInfoQuery {
        user {
          userID
          name
        }
        document {
          id
          userID
          title
          brief
          status
        }
        subdocuments {
          id
          userID
          title
          content
          status
        }
      }
    `,
  });
</script>

{#if $AllInfoQuery.fetching}
<p>Loading...</p>
{:else if $AllInfoQuery.error}
<p>There was an error fetching the data!</p>
{:else}
<PageLayout user={$AllInfoQuery.data.AllInfoQuery.user}>
  <DocumentHeader document={$AllInfoQuery.data.AllInfoQuery.document} />
  <DocumentList documents={$AllInfoQuery.data.AllInfoQuery.subdocuments} />
</PageLayout>
{/if}
```

----------------------------------------

TITLE: Installing ESLint with NPM
DESCRIPTION: Installs ESLint as a development dependency using NPM package manager. The --save-dev flag ensures ESLint is added to devDependencies in package.json.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/eslint-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev eslint
```

----------------------------------------

TITLE: Exclude Controls using MDX props
DESCRIPTION: Shows how to exclude specific controls from the args table using the `exclude` prop in the `Controls` block. This allows you to hide certain controls that are not relevant or should not be modified by the user.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-controls.mdx#_snippet_2

LANGUAGE: markdown
CODE:
```
<Controls of={ButtonStories} exclude={['style']} />
```

----------------------------------------

TITLE: Initializing Button Story - JavaScript
DESCRIPTION: This code initializes a Storybook story for a Button component in JavaScript. It imports the Button component and defines its metadata, including the 'variant' argType with options for 'primary' and 'secondary'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#_snippet_3

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  argTypes: {
    variant: {
      options: ['primary', 'secondary'],
      control: { type: 'radio' },
    },
  },
};
```

----------------------------------------

TITLE: GitHub Actions workflow for Storybook tests with coverage
DESCRIPTION: This YAML file defines a GitHub Actions workflow that runs Storybook tests and generates a coverage report. It checks out the code, sets up Node.js, installs dependencies, and runs the Storybook tests with coverage enabled.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_2

LANGUAGE: yaml
CODE:
```
name: Storybook Tests
on: push
jobs:
  test:
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: yarn
      - name: Run Storybook tests
        run: yarn test-storybook --coverage
```

----------------------------------------

TITLE: Custom Snapshot Directory Configuration
DESCRIPTION: Implementation of a custom snapshot resolver to specify alternative directory locations for snapshot files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/snapshot-testing.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  resolveSnapshotPath: (testPath, snapshotExtension) =>
    testPath.replace('src/', 'snapshots/') + snapshotExtension,

  resolveTestPath: (snapshotPath, snapshotExtension) =>
    snapshotPath
      .replace('snapshots/', 'src/')
      .slice(0, -snapshotExtension.length),

  testPathForConsistencyCheck: 'src/components/example.test.js',
};
```

----------------------------------------

TITLE: Update Storybook Main Configuration for SvelteKit
DESCRIPTION: This code snippet shows how to update the `.storybook/main.js` or `.storybook/main.ts` file to configure Storybook to use the `@storybook/sveltekit` framework. This involves setting the `framework` property to `@storybook/sveltekit`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
/** @type { import('@storybook/sveltekit').StorybookConfig } */
const config = {
	stories: ['../src/lib/**/*.stories.@(js|jsx|ts|tsx|svelte)'],
	addons: [
		'@storybook/addon-links',
		'@storybook/addon-essentials',
		'@storybook/addon-interactions',
		'@storybook/addon-svelte-csf',
		'@storybook/addon-a11y',
	],
	framework: {
		name: '@storybook/sveltekit',
		options: {},
	},
	docs: {
		autodocs: 'tag',
	},
};
export default config;
```

----------------------------------------

TITLE: Setting iFrame Height in MDX Story Components
DESCRIPTION: MDX snippet demonstrating how to set the height attribute directly on a Story component, useful for components with fixed or sticky positioning.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_7

LANGUAGE: md
CODE:
```
<Story name='basic' height='400px'>{...}</Story>
```

----------------------------------------

TITLE: Creating Storybook Story (TS)
DESCRIPTION: Defines a Storybook story for a component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and the component itself. The meta object configures the component for Storybook, and the ExampleStory defines a specific story with arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-env-variables.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ExampleStory: Story = {
  args: {
    propertyA: process.env.STORYBOOK_DATA_KEY,
  },
};
```

----------------------------------------

TITLE: Excluding Components from Prop Tables in Storybook Info Addon
DESCRIPTION: Demonstrates how to exclude specific components from being displayed in the prop tables. This is useful when a story includes utility components that aren't relevant to the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_8

LANGUAGE: jsx
CODE:
```
storiesOf('Addons|Info.Options.propTablesExclude', module).add(
  'Exclude component from prop tables',
  withInfo({
    text: 'This can exclude extraneous components from being displayed in prop tables.',
    propTablesExclude: [FlowTypeButton],
  })(() => (
    <div>
      <BaseButton label="Button" />
      <FlowTypeButton label="Flow Typed Button" />
    </div>
  ))
);
```

----------------------------------------

TITLE: Configuring Button Component Metadata with Decorator (Web Components)
DESCRIPTION: This JavaScript snippet configures the metadata for a button component in Storybook, specifically for a web components renderer. It imports the html function from lit and defines a decorator that applies a margin around the story using a template literal. The metadata includes the component itself and the decorator function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_13

LANGUAGE: js
CODE:
```
import { html } from 'lit';

export default {
  component: 'demo-button',
  decorators: [(story) => html`<div style="margin: 3em">${story()}</div>`],
};

export const Example = {};
```

----------------------------------------

TITLE: Configuring Button Story with TypeScript CSF
DESCRIPTION: This code configures a Storybook story for a Button component using TypeScript and the Component Story Format (CSF). It imports Meta and StoryObj types from '@storybook/your-framework', defines metadata including the title, component, and parameters, and exports a basic story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#_snippet_8

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
  //👇 Creates specific parameters for the story
  parameters: {
    myAddon: {
      data: 'this data is passed to the addon',
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {};
```

----------------------------------------

TITLE: Get All Story Files (Jest)
DESCRIPTION: This function locates all Storybook story files within the project using a glob pattern. It searches for files with the extensions `.stories.js`, `.story.js`, `.stories.jsx`, `.story.jsx`, `.stories.mjs`, `.story.mjs`, `.stories.ts`, `.story.ts`, `.stories.tsx`, and `.story.tsx` within the `stories` directory. It returns an array of objects, each containing the file path, story file content, story directory, and component name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#_snippet_1

LANGUAGE: js
CODE:
```
function getAllStoryFiles() {
  // Place the glob you want to match your stories files
  const storyFiles = glob.sync(
    path.join(__dirname, 'stories/**/*.{stories,story}.{js,jsx,mjs,ts,tsx}'),
  );

  return storyFiles.map((filePath) => {
    const storyFile = require(filePath);
    const storyDir = path.dirname(filePath);
    const componentName = path.basename(filePath).replace(/\.(stories|story)\.[^/.]+$/, '');

    return { filePath, storyFile, storyDir, componentName };
  });
}
```

----------------------------------------

TITLE: Initializing List Component Story - HTML (TS)
DESCRIPTION: This code defines a Storybook story for the List component in HTML using TypeScript. It imports functions to create List and ListItem elements, along with type definitions. The story renders a List component with three ListItems, using data from the Selected and Unselected stories of ListItem to configure the list items.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/html';

import { createList, ListArgs } from './List';
import { createListItem } from './ListItem';

// 👇 We're importing the necessary stories from ListItem
import { Selected, Unselected } from './ListItem.stories';

const meta: Meta<ListArgs> = {
  title: 'List',
};

export default meta;
type Story = StoryObj<ListArgs>;

export const ManyItems: Story = {
  render: (args) => {
    const list = createList(args);
    list.appendChild(createListItem(Selected.args));
    list.appendChild(createListItem(Unselected.args));
    list.appendChild(createListItem(Unselected.args));
    return list;
  },
};
```

----------------------------------------

TITLE: Initializing Storybook with npm
DESCRIPTION: Command to initialize Storybook in a JavaScript project using npm package manager. This uses the @next tag to install the latest pre-release version of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@next init
```

----------------------------------------

TITLE: Initializing Button Story for Solid (TypeScript)
DESCRIPTION: This code initializes a Storybook story for a Solid Button component using TypeScript. It imports the necessary modules from 'storybook-solidjs' and defines a 'Primary' story with specific arguments for the button's appearance and label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Defining Storybook Build Script in package.json
DESCRIPTION: This JSON snippet shows how to define a script in package.json to build Storybook using the Angular builder.  It simplifies the build process by providing a shortcut command.  The script executes the 'ng run' command with the project and target specified.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/angular-builder-production.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "build-storybook": "ng run my-project:build-storybook"
  }
}
```

----------------------------------------

TITLE: Rendering Storybook Story with Template (TypeScript)
DESCRIPTION: This TypeScript code configures a Storybook story for a Button component. It sets the `tags` property to exclude the story from testing, and defines a render function that uses a Vue template to display multiple Button components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_15

LANGUAGE: ts
CODE:
```
export const Combo: Story = {
  // 👇 This story should not be tested, but will appear in the sidebar and docs page
  tags: ['!test'],
  render: () => ({
    components: { Button },
    template: `
      <div>
        <Button :variant="1" />
        <Button :variant="2" />
      </div>
    `,
  }),
};
```

----------------------------------------

TITLE: Structuring Storybook Explore Section in HTML
DESCRIPTION: This HTML snippet structures the explore section of a Storybook page, including an image, description, and a link to tutorials.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/ts/Configure.mdx#2025-04-22_snippet_3

LANGUAGE: HTML
CODE:
```
        src={Tutorials} 
        alt="A book" 
        className="sb-explore-image"
      />
      <p>Follow guided walkthroughs on for key workflows.</p>

      <a
          href="https://storybook.js.org/tutorials/"
          target="_blank"
        >Discover tutorials<RightArrow /></a>
    </div>
</div>
```

----------------------------------------

TITLE: Specifying a builder
DESCRIPTION: Specifies the builder to use for the Storybook instance (webpack5 in this example). Builders handle the compilation and bundling of Storybook's assets.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_120

LANGUAGE: Shell
CODE:
```
create storybook --builder webpack5
```

----------------------------------------

TITLE: Enabling specific features
DESCRIPTION: Enables specific features during installation, skipping the interactive prompt. Supported values are `docs` and `test`, space separated.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_125

LANGUAGE: Shell
CODE:
```
create storybook --features docs test
```

----------------------------------------

TITLE: Defining Basic Button Story - Svelte (TS)
DESCRIPTION: This code defines a basic Storybook story for a Svelte Button component using TypeScript. It imports Meta and StoryObj from '@storybook/your-framework' and the Button component. The meta object configures the component for Storybook, and the Basic story sets documentation parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {
  parameters: {
    docs: {
      source: { language: 'tsx' },
    },
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Meta and Second Story with Play Function (Common JS)
DESCRIPTION: This code defines the SecondStory with a play function that simulates user typing into an element with the test ID 'other-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_4

LANGUAGE: js
CODE:
```
export const SecondStory = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await userEvent.type(canvas.getByTestId('other-element'), 'another value');
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Preview with Web Components Decorator (JS)
DESCRIPTION: This snippet configures a Storybook preview for Web Components using JavaScript, adding a decorator that wraps each story with a div element, applying a 3em margin. It uses lit-html to define the template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#_snippet_9

LANGUAGE: js
CODE:
```
import { html } from 'lit';

export default {
  decorators: [(story) => html`<div style="margin: 3em">${story()}</div>`],
};
```

----------------------------------------

TITLE: Providing SSL Key
DESCRIPTION: Provides an SSL key for HTTPS. Required when using HTTPS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_11

LANGUAGE: Shell
CODE:
```
storybook dev --ssl-key my-ssl-key
```

----------------------------------------

TITLE: Configuring Theme Provider in Storybook Preview
DESCRIPTION: Setting up the theme provider with light and dark themes using withThemeFromJSXProvider decorator in preview.js
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/styled-components.md#2025-04-22_snippet_2

LANGUAGE: diff
CODE:
```
-import { Preview } from '@storybook/your-renderer';
+import { Preview, Renderer } from '@storybook/your-renderer';
+import { withThemeFromJSXProvider } from '@storybook/addon-themes';
+import { ThemeProvider } from 'styled-components';
+import { GlobalStyles, lightTheme, darkTheme } from '../src/themes'; // Import your custom theme configs

const preview: Preview = {
  parameters: { /* ... */ },
+ decorators: [
+   withThemeFromJSXProvider<Renderer>({
+     themes: {
+       light: lightTheme,
+       dark: darkTheme,
+     },
+     defaultTheme: 'light',
+     Provider: ThemeProvider,
+     GlobalStyles: GlobalStyles,
+   }),
+ ],
};

export default preview;
```

----------------------------------------

TITLE: Installing Storybook Test Runner with PNPM
DESCRIPTION: Installs the @storybook/test-runner package as a development dependency using pnpm package manager
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev @storybook/test-runner
```

----------------------------------------

TITLE: Running Storybook Tests with yarn
DESCRIPTION: This command uses yarn to run the 'test-storybook' script, which executes Storybook tests. It's designed for projects using yarn as their package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn test-storybook
```

----------------------------------------

TITLE: Defining argTypes with options in Web Components Storybook (JS)
DESCRIPTION: This snippet demonstrates how to define `argTypes` with options in a Web Components Storybook story using JavaScript. It configures `propertyA` and `propertyB` with predefined options for selection in the Storybook UI. The `control` property is used to specify the type of control for `propertyA`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_13

LANGUAGE: javascript
CODE:
```
import { html } from 'lit';

export default {
  component: 'custom-component',
  //👇 Creates specific argTypes
  argTypes: {
    propertyA: {
      options: ['Item One', 'Item Two', 'Item Three'],
      control: { type: 'select' }, // Automatically inferred when 'options' is defined
    },
    propertyB: {
      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],
    },
  },
};
```

----------------------------------------

TITLE: Importing and Configuring Story Metadata in Storybook (Vue)
DESCRIPTION: This code snippet imports a specific story from ListItem stories and configures the metadata for a List component in Storybook. It defines the title and component for the story, and exports the metadata as the default export.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { Unchecked } from './ListItem.stories';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;
```

----------------------------------------

TITLE: Running Storybook Automigrate
DESCRIPTION: Executes the automigrate command to check and apply migrations to a Storybook project. The command accepts an optional fixId to target a specific migration and various options to customize the process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_90

LANGUAGE: shell
CODE:
```
storybook[@version] automigrate [fixId] [options]
```

----------------------------------------

TITLE: Configuring Button Stories for Angular
DESCRIPTION: This snippet configures Storybook stories for an Angular Button component. It imports necessary modules from '@storybook/angular' and defines stories for 'Basic' and 'Primary' button states, setting the 'primary' argument to true for the 'Primary' story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/typed-csf-file.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};
export default meta;

type Story = StoryObj<Button>;

export const Basic: Story = {};

export const Primary: Story = {
  args: {
    primary: true,
  },
};
```

----------------------------------------

TITLE: Configuring Vitest Plugin with Tags
DESCRIPTION: Configures the Vitest plugin to include stories with the 'test' tag and exclude stories with the 'experimental' tag. This allows for selective testing of stories based on their tags.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_8

LANGUAGE: JavaScript
CODE:
```
export default defineWorkspace([
  // ...
  {
    // ...
    {
      plugins: [
        storybookTest({
          // ...
          tags: {
            include: ['test'],
            exclude: ['experimental'],
          },
        }),
      ],
    },
  },
])
```

----------------------------------------

TITLE: Defining Conditional ArgTypes in Svelte Storybook
DESCRIPTION: This snippet demonstrates how to define conditional argTypes in a Svelte Storybook story using the `@storybook/addon-svelte-csf` library. It shows how to conditionally display argTypes based on the existence, truthiness, or specific values of other args or globals. The component being used is 'Example.svelte'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#_snippet_4

LANGUAGE: svelte
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      parent: { control: 'select', options: ['one', 'two', 'three'] },

      // 👇 Only shown when `parent` arg exists
      parentExists: { if: { arg: 'parent', exists: true } },

      // 👇 Only shown when `parent` arg does not exist
      parentDoesNotExist: { if: { arg: 'parent', exists: false } },

      // 👇 Only shown when `parent` arg value is truthy
      parentIsTruthy: { if: { arg: 'parent' } },
      parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },

      // 👇 Only shown when `parent` arg value is not truthy
      parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },

      // 👇 Only shown when `parent` arg value is 'three'
      parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },

      // 👇 Only shown when `parent` arg value is not 'three'
      parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },

      // Each of the above can also be conditional on the value of a globalType, e.g.:

      // 👇 Only shown when `theme` global exists
      parentExists: { if: { global: 'theme', exists: true } },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Rollup Plugin for GraphQL Queries
DESCRIPTION: Updates the rollup.config.js file to configure the replace plugin, enabling proper functionality of GraphQL queries when using Vue 3 with Storybook's MSW addon.  It requires installing `@rollup/plugin-replace`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
// Boilerplate imports

import replace from '@rollup/plugin-replace';
const production = !process.env.ROLLUP_WATCH;

// Remainder rollup.config implementation

export default {
  input: 'src/main.js',
  output: {
    sourcemap: true,
    format: 'iife',
    name: 'app',
    file: 'public/build/bundle.js',
  },
  plugins: [
    // Other plugins

    // Configures the replace plugin to allow GraphQL Queries to work properly
    replace({
      'process.env.NODE_ENV': JSON.stringify('development'),
    }),
  ]
};
```

----------------------------------------

TITLE: Initializing Svelte CSF Story
DESCRIPTION: This snippet initializes a Svelte Component Story Format (CSF) story for a component. It imports the necessary modules from '@storybook/addon-svelte-csf' and the component itself, then defines a story with specific arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-vite-env-variables.md#_snippet_0

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="ExampleStory"
  args={{
    propertyA: import.meta.env.STORYBOOK_DATA_KEY,
    propertyB: import.meta.env.VITE_CUSTOM_VAR,
  }}
/>
```

----------------------------------------

TITLE: Testing Form Validation in Svelte with Storybook Stories
DESCRIPTION: Implements form validation testing using @testing-library/svelte and @storybook/svelte's composeStories. Tests form validation by running the InvalidForm story and verifying the invalid form state after submission.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { fireEvent, render, screen } from '@testing-library/svelte';

import { composeStories } from '@storybook/svelte';

import * as stories from './LoginForm.stories'; // 👈 Our stories imported here.

const { InvalidForm } = composeStories(stories);

it('Checks if the form is valid', async () => {
  // Renders the composed story
  await InvalidForm.run();

  await fireEvent.click(screen.getByText('Submit'));

  const isFormValid = screen.getByTestId('invalid-form');
  expect(isFormValid).toBeInTheDocument();
});
```

----------------------------------------

TITLE: Defining Button Story with ArgTypes (TS)
DESCRIPTION: This code defines a Storybook story for a Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines the component's metadata, including argTypes for customizing the 'label' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {
  argTypes: {
    // 👇 This story expects a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
} satisfies Story;
```

----------------------------------------

TITLE: List Component Story Configuration (TypeScript)
DESCRIPTION: Configures the Storybook story for the List component using TypeScript. It imports necessary types and components, then defines the metadata for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_14

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import List from './List.vue';
import ListItem from './ListItem.vue';

const meta = {
  component: List,
  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent
} satisfies Meta<typeof List>;
export default meta;

type Story = StoryObj<typeof meta>;
```

----------------------------------------

TITLE: Defining Storybook Meta for Page Component (TS)
DESCRIPTION: This code defines the Storybook meta configuration for a Page component using TypeScript. It imports the Meta type from Storybook and the Page component. The meta object configures the component and disables auto-generated documentation using tags.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Page } from './Page';

const meta = {
  component: Page,
  // 👇 Disable auto-generated documentation for this component
  tags: ['!autodocs'],
} satisfies Meta<typeof Page>;
export default meta;
```

----------------------------------------

TITLE: Filter Controls Using Regular Expression
DESCRIPTION: This snippet shows how to filter controls in Storybook using a regular expression.  It uses the `include` configuration field in the `controls` parameter to only display controls that match the regex.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_30

LANGUAGE: javascript
CODE:
```
export const Basic = {
  parameters: {
    controls: {
      include: /^(back|border)/, // regex
    },
  },
};

```

----------------------------------------

TITLE: Defining Vue Button Story (JavaScript)
DESCRIPTION: This code defines a Storybook story for a Vue Button component using JavaScript. It imports the Button component and defines its metadata. It then creates a 'Primary' story with a render function that renders the component with the specified arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_12

LANGUAGE: js
CODE:
```
import Button from './Button.vue';

export default {
  component: Button,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: (args) => ({
    components: { Button },
    setup() {
      return { args };
    },
    template: '<Button v-bind="args" />',
  }),
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Configuring Page Story with Custom Footer in Solid (JS)
DESCRIPTION: This code defines a Storybook story for the Page component in Solid using JavaScript. It imports the Page component and defines a default export object with the component and a render function. The render function renders the Page component with the provided arguments and a footer element containing the custom footer text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Page } from './Page';

export default {
  component: Page,
  render: ({ footer, ...args }) => (
    <Page {...args}>
      <footer>{footer}</footer>
    </Page>
  ),
};

export const CustomFooter = {
  args: {
    footer: 'Built with Storybook',
  },
};
```

----------------------------------------

TITLE: Updating Storybook Configuration
DESCRIPTION: This code snippet shows how to update the Storybook configuration file (`.storybook/main.js` or `.storybook/main.ts`) to replace the experimental test addon with the vitest addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_3

LANGUAGE: diff
CODE:
```
export default {
  addons: [
-   '@storybook/experimental-addon-test',
+   '@storybook/addon-vitest',
  ],
};
```

----------------------------------------

TITLE: Configuring Button Story with Svelte CSF (TS)
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using TypeScript and the Component Story Format (CSF). It imports the defineMeta function from '@storybook/addon-svelte-csf' and defines metadata for the component, including tags. It also defines a story for an experimental feature using Svelte's templating.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    /*
     * All stories in this file will have these tags applied:
     * - autodocs
     * - dev (implicit default, inherited from preview)
     * - test (implicit default, inherited from preview)
     */
    tags: ['autodocs'],
  });
</script>

<!--
  This particular story will have these tags applied:
  - experimental
  - autodocs (inherited from meta)
  - dev (inherited from meta)
  - test (inherited from meta)
-->
<Story name="ExperimentalFeatureStory" tags={['experimental']} />

```

----------------------------------------

TITLE: Configuring Accessibility in Storybook Story for React (JavaScript)
DESCRIPTION: This snippet provides a JavaScript example for creating a Storybook story with accessibility customization for a React component. Dependencies include a proper React component import and Storybook configuration support. 'ExampleStory' demonstrates setting up a11y parameters, customizing rules, disabling certain checks, and using the 'manual' flag for running accessibility tests on demand. The structure enables story-level flexibility and easy integration into React-based Storybook projects.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const ExampleStory = {
  parameters: {
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Upgrade Hierarchy Separators Example (JavaScript)
DESCRIPTION: This code snippet demonstrates the before and after states of applying the upgrade-hierarchy-separators codemod to story definitions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
storiesOf('Foo|Bar/baz');
storiesOf('Foo.Bar.baz');

export default {
  title: 'Foo|Bar/baz.whatever',
};
```

LANGUAGE: js
CODE:
```
storiesOf('Foo/Bar/baz');
storiesOf('Foo/Bar/baz');

export default {
  title: 'Foo/Bar/baz/whatever',
};
```

----------------------------------------

TITLE: Creating Web Components Button Stories with JavaScript
DESCRIPTION: This code creates Storybook stories for a web components Button component using JavaScript. It exports a default object containing the component and defines primary and primary long name stories with corresponding arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
};

export const Primary = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const PrimaryLongName = {
  args: {
    ...Primary.args,
    label: 'Primary with a really long name',
  },
};
```

----------------------------------------

TITLE: Initializing Button Story for HTML
DESCRIPTION: This code initializes a Storybook story for an HTML Button component. It imports the createButton function and defines the title for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#_snippet_7

LANGUAGE: js
CODE:
```
import { createButton } from './Button';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
};
```

----------------------------------------

TITLE: Storybook Story with Locale (JavaScript/Web Components)
DESCRIPTION: This JavaScript code defines a Storybook story for a web component. It imports the `html` function from 'lit' and defines a `StoryWithLocale` story that renders a paragraph element with a locale-specific caption, determined by the `getCaptionForLocale` function based on the global `locale` variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import { html } from 'lit';

export default {
  component: 'my-component',
};

const getCaptionForLocale = (locale) => {
  switch (locale) {
    case 'es':
      return 'Hola!';
    case 'fr':
      return 'Bonjour!';
    case 'kr':
      return '안녕하세요!';
    case 'zh':
      return '你好!';
    default:
      return 'Hello!';
  }
};

export const StoryWithLocale = {
  render: (args, { globals: { locale } }) => {
    const caption = getCaptionForLocale(locale);
    return html`<p>${caption}</p>`;
  },
};
```

----------------------------------------

TITLE: Code Snippet Component Usage
DESCRIPTION: Demonstrates how to use the CodeSnippets component in MDX files to include code snippets. The path attribute specifies the location of the snippet file, and usesCsf3 indicates whether the snippet uses Component Story Format version 3.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
<CodeSnippets path="your-component.md" usesCsf3 />
```

----------------------------------------

TITLE: Installing Storybook Web Components Vite package with npm
DESCRIPTION: This command installs the @storybook/web-components-vite package as a dev dependency using npm. It's used to set up Storybook for Web Components projects that use Vite.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev @storybook/web-components-vite
```

----------------------------------------

TITLE: Configuring Background Color Parameters in Storybook
DESCRIPTION: This code exports a configuration object that defines default background color parameters for Storybook stories. It includes 'light' (#F8F8F8) and 'dark' (#333333) background options that can be selected when viewing stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-backgrounds-addon-default-params.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  parameters: {
    backgrounds: {
      values: [
        { name: 'light', value: '#F8F8F8' },
        { name: 'dark', value: '#333333' },
      ],
    },
  },
};
```

----------------------------------------

TITLE: Overriding Storybook ESLint Rules in Flat Config Format (JavaScript)
DESCRIPTION: Shows how to override or disable specific Storybook ESLint rules using the flat config style. This allows for customization of linting rules for Storybook files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import storybook from 'eslint-plugin-storybook';

export default [
  // ...

  ...storybook.configs['flat/recommended'],
  {
    // 👇 This should match the `stories` property in .storybook/main.js|ts
    files: ['**/*.stories.@(ts|tsx|js|jsx|mjs|cjs)'],
    rules: {
      // 👇 Enable this rule
      'storybook/csf-component': 'error',
      // 👇 Disable this rule
      'storybook/default-exports': 'off',
    },
  },

  // ...
];
```

----------------------------------------

TITLE: Building Storybook with Webpack Debugging (yarn)
DESCRIPTION: This command builds the Storybook project using yarn and enables webpack debugging. The `--debug-webpack` flag provides more detailed output from webpack during the build process, which can be helpful for diagnosing configuration issues.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-debug-webpack-prod.md#_snippet_1

LANGUAGE: shell
CODE:
```
yarn build-storybook --debug-webpack
```

----------------------------------------

TITLE: Validating Form via Storybook Story in React with TypeScript
DESCRIPTION: This snippet replicates form validation testing for a React component using TypeScript, leveraging composeStory from '@storybook/react' and Testing Library utilities. It sets up the ValidForm story and runs it within a test, simulating a click on the 'Submit' button. The test checks that the element labeled 'invalid-form' is not present post-submission, verifying expected form behavior. Requires TypeScript configuration and compatible React/Storybook setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/single-story-test.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import { fireEvent, screen } from '@testing-library/react';\n\nimport { composeStory } from '@storybook/react';\n\nimport Meta, { ValidForm as ValidFormStory } from './LoginForm.stories';\n\nconst ValidForm = composeStory(ValidFormStory, Meta);\n\ntest('Validates form', async () => {\n  await ValidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).not.toBeInTheDocument();\n});
```

----------------------------------------

TITLE: Rendering a Vue Component with Args and Function Result (TS)
DESCRIPTION: This snippet shows how to render a Vue component in a Storybook story, passing arguments and using a function to derive a property value. It defines a `render` function that receives arguments, calls `someFunction` with `propertyA` and `propertyB`, and returns a Vue component configuration with the derived `someProperty`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_10

LANGUAGE: typescript
CODE:
```
const someFunction = (valuePropertyA, valuePropertyB) => {
  // Do some logic here
};

export default meta;
type Story = StoryObj<typeof meta>;

export const ExampleStory: Story = {
  render: ({ args }) => {
    const { propertyA, propertyB } = args;
    //👇 Assigns the function result to a variable
    const functionResult = someFunction(propertyA, propertyB);
    return {
      components: { YourComponent },
      setup() {
        return {
          ...args,
          //👇 Replaces arg variable with the override (without the need of mutation)
          someProperty: functionResult,
        };
      },
      template:
        '<YourComponent :propertyA="propertyA" :propertyB="propertyB" :someProperty="someProperty"/>',
    };
  },
  args: {
    propertyA: 'Item One',
    propertyB: 'Another Item One',
  },
};
```

----------------------------------------

TITLE: Configuring Babel Default in Storybook Preset Addon
DESCRIPTION: This snippet shows how to use the babelDefault API in a Storybook preset addon to customize Babel configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  babelDefault: (config) => {
    return {
      ...config,
      plugins: [...config.plugins, require.resolve('@babel/plugin-transform-arrow-functions')],
    };
  },
};
```

----------------------------------------

TITLE: Scroll Into View Story with Decorator (React JS)
DESCRIPTION: This story demonstrates how to use a decorator in React to emit the SCROLL_INTO_VIEW event when the story is rendered. It uses the useChannel hook to emit the event to the Storybook channel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-scroll-into-view.md#_snippet_1

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { SCROLL_INTO_VIEW } from 'storybook/highlight';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const ScrollIntoView = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(SCROLL_INTO_VIEW, '#footer');
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Configuring Gizmo Story with ArgTypes in JavaScript
DESCRIPTION: This code configures a Storybook story for the Gizmo component using JavaScript. It defines the component and its properties (argTypes) to be controlled via the Storybook UI, enabling interactive modification and testing of the component's behavior.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Gizmo } from './Gizmo';

export default {
  component: Gizmo,
  argTypes: {
    canRotate: {
      control: 'boolean',
    },
    width: {
      control: { type: 'number', min: 400, max: 1200, step: 50 },
    },
    height: {
      control: { type: 'range', min: 200, max: 1500, step: 50 },
    },
    rawData: {
      control: 'object',
    },
    coordinates: {
      control: 'object',
    },
    texture: {
      control: {
        type: 'file',
        accept: '.png',
      },
    },
    position: {
      control: 'radio',
      options: ['left', 'right', 'center'],
    },
    rotationAxis: {
      control: 'check',
      options: ['x', 'y', 'z'],
    },
    scaling: {
      control: 'select',
      options: [10, 50, 75, 100, 200],
    },
    label: {
      control: 'text',
    },
    meshColors: {
      control: {
        type: 'color',
        presetColors: ['#ff0000', '#00ff00', '#0000ff'],
      },
    },
    revisionDate: {
      control: 'date',
    },
  },
};
```

----------------------------------------

TITLE: Upgrading Storybook with Yarn
DESCRIPTION: Command to upgrade Storybook to version 7.6.6 using Yarn package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/upgrade-command-specific-version.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@7.6.6 upgrade
```

----------------------------------------

TITLE: React Page Story with TypeScript
DESCRIPTION: Storybook story for React Page component using TypeScript. Creates a note in the database during play function and mounts the component with dynamic data. Includes user interaction testing and argument type controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-advanced.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
export const Default: Story = {
  play: async ({ mount, args }) => {
    const note = await db.note.create({
      data: { title: 'Mount inside of play' },
    });

    const canvas = await mount(
      // 👇 Pass data that is created inside of the play function to the component
      //   For example, a just-generated UUID
      <Page {...args} params={{ id: String(note.id) }} />,
    );

    await userEvent.click(await canvas.findByRole('menuitem', { name: /login to add/i }));
  },
  argTypes: {
    // 👇 Make the params prop un-controllable, as the value is always overriden in the play function.
    params: { control: { disable: true } },
  },
};
```

----------------------------------------

TITLE: Storybook Init with Debug
DESCRIPTION: This example shows how to output more logs in the CLI to assist debugging.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_54

LANGUAGE: shell
CODE:
```
storybook init --debug
```

----------------------------------------

TITLE: Toggle Toolbar Visibility in Storybook
DESCRIPTION: This function determines the visibility of the toolbar based on the current view mode. It hides the toolbar in 'docs' view mode and uses the default value otherwise. The function takes the viewMode and a default value as parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/features-and-behavior.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
({ viewMode }, defaultValue) => viewMode === 'docs' ? false : defaultValue
```

----------------------------------------

TITLE: Rendering with Solid in TypeScript
DESCRIPTION: Implements SolidJS component with TypeScript to define types for user, document, and subdocuments. The component utilizes imports for page layout and document management, ensuring type safety throughout.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_4

LANGUAGE: ts
CODE:
```
import PageLayout from './PageLayout';
import Document from './Document';
import SubDocuments from './SubDocuments';
import DocumentHeader from './DocumentHeader';
import DocumentList from './DocumentList';

export interface DocumentScreen {
  user?: {};
  document?: Document;
  subdocuments?: SubDocuments[];
}

function DocumentScreen({ user, document, subdocuments }) {
  return (
    <PageLayout user={user}>
      <DocumentHeader document={document} />
      <DocumentList documents={subdocuments} />
    </PageLayout>
  );
}
```

----------------------------------------

TITLE: Creating Storybook Story for ng-content Component
DESCRIPTION: This snippet creates a Storybook story for the Angular component with ng-content. It demonstrates how to use the component and inject content into it.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.angular-stories.txt#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
storiesOf('Custom|ng-content', module).add('Default', () => ({
  template: `<storybook-with-ng-content><h1>This is rendered in ng-content</h1></storybook-with-ng-content>`,
  moduleMetadata: {
    declarations: [WithNgContentComponent],
  },
}));
```

----------------------------------------

TITLE: Defining Svelte Button Story with CSF
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using Component Story Format (CSF). It imports the defineMeta function from '@storybook/addon-svelte-csf' and the Button component. It then defines metadata for the component and creates a primary story with a 'primary' variant.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story name="Primary" args={{ variant: 'primary' }} />

```

----------------------------------------

TITLE: Exporting Storybook Addon Configurations in TypeScript
DESCRIPTION: This TypeScript version imports and re-exports configuration functions for webpack, Vite, and Babel, with type assertions. It provides type safety for the exported functions used in Storybook addon configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-local-preset.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { webpackFinal as webpack } from './webpack/webpackFinal';

import { viteFinal as vite } from './vite/viteFinal';

import { babelDefault as babel } from './babel/babelDefault';

export const webpackFinal = webpack as any;

export const viteFinal = vite as any;

export const babelDefault = babel as any;
```

----------------------------------------

TITLE: Incorrect usage of global expect in Storybook interactions
DESCRIPTION: This example demonstrates the incorrect usage of the global `expect` function from Jest within a Storybook interaction. This will cause the test to fail when running in a browser environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/use-storybook-expect.md#_snippet_0

LANGUAGE: javascript
CODE:
```
Default.play = async () => {
  // using global expect from Jest. Will break on the browser
  await expect(123).toEqual(123);
};
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines a configuration object, and exports it as the default.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-js-md-files.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../my-project/src/components/*.@(js|md)'],
};

export default config;
```

----------------------------------------

TITLE: Automigrate with Package Manager
DESCRIPTION: Sets the package manager to use when running the automigration. Available package managers include npm, yarn, and pnpm.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_96

LANGUAGE: shell
CODE:
```
storybook automigrate --package-manager pnpm
```

----------------------------------------

TITLE: Registering a Custom Vuetify Theme Decorator in Storybook Preview
DESCRIPTION: Example of how to register a custom Vuetify theme decorator in Storybook's preview configuration. This setup integrates the custom decorator and defines the available themes and default theme.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
// .storybook/preview.js
import { setup } from '@storybook/vue3';
import { registerPlugins } from '../src/plugins';
import { withVuetifyTheme } from './withVuetifyTheme.decorator';

setup((app) => {
  registerPlugins(app);
});

/* snipped for brevity */

export const decorators = [
  withVuetifyTheme({
    // These keys are the labels that will be displayed in the toolbar theme switcher
    // The values must match the theme keys from your VuetifyOptions
    themes: {
      light: 'light',
      dark: 'dark',
      'high contrast': 'highContrast',
    },
    defaultTheme: 'light', // The key of your default theme
  }),
];
```

----------------------------------------

TITLE: Installing Storybook Design Addon with npm
DESCRIPTION: Adds the Storybook Design addon to your project using npm package manager. The command uses npx to execute the storybook CLI tool and add the design addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-figma-addon-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@latest add @storybook/addon-designs
```

----------------------------------------

TITLE: Installing Storybook Themes Addon
DESCRIPTION: Command to install the @storybook/addon-themes package as a dev dependency using npm.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm i -D @storybook/addon-themes
```

----------------------------------------

TITLE: Removing Storybook Accessibility Addon with pnpm
DESCRIPTION: Command to remove the @storybook/addon-a11y addon from a Storybook project using pnpm package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-remove-command.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@latest remove @storybook/addon-a11y
```

----------------------------------------

TITLE: Defining Button Story with Layout in Svelte (Module Script)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component with a centered layout using module script. It imports 'defineMeta' from '@storybook/addon-svelte-csf' and the Button component, then uses 'defineMeta' to configure the story with the layout parameter set to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
  name="WithLayout"
  parameters={{
    layout: 'centered',
  }}
/>
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (Svelte CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte component, MyComponent, using Svelte CSF. It imports the necessary modules and defines a story named 'WithAnImage' that renders the component with specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';
	const { Story } = defineMeta({
		component: MyComponent,
	});
</script>

<Story name="WithAnImage">
  <MyComponent src="/image.png" alt="my image" />
</Story>

```

----------------------------------------

TITLE: Importing Stories and Using Meta Component in Storybook
DESCRIPTION: This snippet imports all stories from A.stories and uses the Meta component to reference them in the documentation. The Meta component is used to provide context and configuration for the documentation page.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/MetaOf.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import * as AStories from '../A.stories';

<Meta of={AStories} />
```

----------------------------------------

TITLE: Initializing Button Story - React (TS)
DESCRIPTION: This code initializes a Storybook story for a React Button component using TypeScript. It imports the Meta type from Storybook and the Button component, then defines the component in the meta object for Storybook to use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Upgrading Storybook with NPM
DESCRIPTION: Command to upgrade Storybook to version 7.6.6 using NPM package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/upgrade-command-specific-version.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@7.6.6 upgrade
```

----------------------------------------

TITLE: Configuring Storybook Preview with Custom Docs Container (JS)
DESCRIPTION: This JavaScript snippet configures Storybook's preview settings, including a custom DocsContainer component that wraps the default DocsContainer with an MDXProvider. This allows customizing the rendering of documentation using components from a design system. It also defines control matchers for color and date inputs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-override-mdx-container.md#_snippet_0

LANGUAGE: js
CODE:
```
import { MDXProvider } from '@mdx-js/react';

import { DocsContainer } from '@storybook/addon-docs/blocks';

import * as DesignSystem from 'your-design-system';

export const MyDocsContainer = (props) => (
  <MDXProvider
    components={{
      h1: DesignSystem.H1,
      h2: DesignSystem.H2,
    }}
  >
    <DocsContainer {...props} />
  </MDXProvider>
);

export default {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
    docs: {
      container: MyDocsContainer,
    },
  },
};
```

----------------------------------------

TITLE: Configuring Svelte Storybook Story with CSF
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using the Component Story Format (CSF) with Svelte-specific additions. It imports 'defineMeta' from '@storybook/addon-svelte-csf' and uses it to define the component and enable auto-generated documentation using the 'autodocs' tag. It also defines a story that is excluded from the documentation using the '!autodocs' tag within the Svelte template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    //👇 Enables auto-generated documentation for this component and includes all stories in this file
    tags: ['autodocs'],
  });
</script>

<!--👇 Removes this story from auto-generated documentation -->
<Story name="UndocumentedStory" tags={['!autodocs']} />
```

----------------------------------------

TITLE: Configuring Storybook Meta for Web Component (TS)
DESCRIPTION: This code configures the Storybook metadata for a web component using TypeScript. It defines the component name and argTypes, specifically hiding the 'foo' property from the UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'your-component',
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      control: false,
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Initializing Button stories with HTML using Typescript
DESCRIPTION: This code defines Storybook stories for an HTML Button component using Typescript. It imports necessary modules from '@storybook/html', defines the 'ButtonArgs' type, sets the title to 'Button', and uses a decorator to add margin around the story. It also defines a 'Primary' story that uses the 'createButton' function to render the button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/html';

import { createButton, ButtonArgs } from './Button';

const meta: Meta<ButtonArgs> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  decorators: [
    (story) => {
      const decorator = document.createElement('div');
      decorator.style.margin = '3em';
      decorator.appendChild(story());
      return decorator;
    },
  ],
};

export default meta;
type Story = StoryObj<ButtonArgs>;

export const Primary: Story = {
  render: (args) => createButton(args),
};
```

----------------------------------------

TITLE: Initializing Page stories for Solid (JS)
DESCRIPTION: This code initializes Storybook stories for the Page component in a Solid application using JavaScript. It imports the Page component and Header stories, and exports a default object configuring the component for Storybook. It also defines a 'LoggedIn' story, importing related Header stories to populate arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Page } from './Page';

//👇 Imports all Header stories
import * as HeaderStories from './Header.stories';

export default {
  component: Page,
};

export const LoggedIn = {
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};
```

----------------------------------------

TITLE: Defining Server-Side Stories in JSON
DESCRIPTION: This JSON snippet demonstrates how to write stories for server-side rendering. It includes a title, parameters, and story definitions with server IDs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{
  "title": "Component",
  "parameters": {
    "options": { "component": "my_widget" }
  },
  "stories": [
    {
      "name": "Default",
      "parameters": {
        "server": { "id": "path/of/your/story" }
      }
    }
  ]
}
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF - JS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using JavaScript. It imports the Button component and defines the component and sets specific parameters at the component level, such as background options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  //👇 Creates specific parameters at the component level
  parameters: {
    backgrounds: {
      options: {},
    },
  },
};
```

----------------------------------------

TITLE: Checkbox Story with useArgs in TypeScript
DESCRIPTION: This story demonstrates how to use the `useArgs` hook to manage the state of a Checkbox component in a Storybook story written in TypeScript. It defines an `onChange` handler that updates the `isChecked` argument when the checkbox is clicked, leveraging TypeScript types for better code maintainability.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-args-within-story.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { StoryObj, Meta } from '@storybook/react-vite';
import { useArgs } from 'storybook/preview-api';

import { Checkbox } from './checkbox';

const meta = {
  title: 'Inputs/Checkbox',
  component: Checkbox,
} satisfies Meta<typeof Checkbox>;
export default meta;

type Story = StoryObj<typeof Checkbox>;

export const Example = {
  args: {
    isChecked: false,
    label: 'Try Me!',
  },
  /**
   * 👇 To avoid linting issues, it is recommended to use a function with a capitalized name.
   * If you are not concerned with linting, you may use an arrow function.
   */
  render: function Render(args) {
    const [{ isChecked }, updateArgs] = useArgs();

    function onChange() {
      updateArgs({ isChecked: !isChecked });
    }

    return <Checkbox {...args} onChange={onChange} isChecked={isChecked} />;
  },
} satisfies Story;
```

----------------------------------------

TITLE: Testing Button Component with Vitest and React Testing Library in Storybook
DESCRIPTION: This code snippet demonstrates how to test a Button component using Vitest and React Testing Library in a Storybook context. It includes tests for rendering the primary button with default args and with overridden props, showcasing the usage of Storybook's run function and screen queries from React Testing Library.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-csf-factory-run.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
import { test, expect } from 'vitest';
import { screen } from '@testing-library/react';

// Import all stories from the stories file
import * as stories from './Button.stories';

const { Primary, Secondary } = stories;

test('renders primary button with default args', async () => {
  // The run function will mount the component and run all of Storybook's lifecycle hooks
  await Primary.run();
  const buttonElement = screen.getByText('Text coming from args in stories file!');
  expect(buttonElement).not.toBeNull();
});

test('renders primary button with overridden props', async () => {
  // You can override props by passing them in the context argument of the run function
  await Primary.run({ args: { ...Primary.composed.args, children: 'Hello world' } });
  const buttonElement = screen.getByText(/Hello world/i);
  expect(buttonElement).not.toBeNull();
});
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (JS, CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte component named MyComponent using JavaScript and the Component Story Format (CSF). It imports necessary modules from '@storybook/addon-svelte-csf' and defines a story that renders the component with an image, passing the image object as a prop.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  import imageFile from './static/image.png';

  let image = {
    src: imageFile,
    alt: 'my image',
  };

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story name="WithAnImage">
  <MyComponent {image} />
</Story>
```

----------------------------------------

TITLE: Installing Storybook Docs Addon
DESCRIPTION: Command to install the Storybook documentation addon package using yarn.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
yarn add -D @storybook/addon-docs
```

----------------------------------------

TITLE: Storybook Story with Image using Lit HTML
DESCRIPTION: This code defines a Storybook story for a web component that renders an image. It imports Meta and StoryObj from '@storybook/web-components-vite' and uses Lit's html template literal to render an img element with a source pointing to '/image.png'. The image is assumed to be located in the 'public' directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

// Assume image.png is located in the "public" directory.
export const WithAnImage: Story = {
  render: () => html`<img src="/image.png" alt="image" />`,
};
```

----------------------------------------

TITLE: Importing StorybookConfig Type in TypeScript - Storybook 7.0
DESCRIPTION: This snippet shows how to import the `StorybookConfig` type from the framework package in TypeScript when using Storybook 7.0.  This is necessary for type checking your Storybook configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_102

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from "@storybook/react-vite";
const config: StorybookConfig = {
  framework: {
    name: "@storybook/react-vite",
    options: {},
  },
  // ... your configuration
};
export default config;
```

----------------------------------------

TITLE: Initializing Storybook Story for Vue Component (TS)
DESCRIPTION: This code initializes a Storybook story for a Vue component, MyComponent, using TypeScript. It defines a story named 'WithAnImage' that renders an image with a specified source and alt text using a template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const WithAnImage: Story = {
  render: () => ({
    template: '<img src="image.png" alt="my image" />',
  }),
};

```

----------------------------------------

TITLE: Defining Svelte Story for DocumentScreen (TypeScript)
DESCRIPTION: This TypeScript code defines a Storybook story for the DocumentScreen component using Svelte. It imports necessary modules and defines a 'Simple' story with predefined arguments for user, document, and subdocuments, pulling data from other stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import DocumentScreen from './YourPage.svelte';

// 👇 Imports the required stories
import * as PageLayout from './PageLayout.stories';
import * as DocumentHeader from './DocumentHeader.stories';
import * as DocumentList from './DocumentList.stories';

const meta = {
  component: DocumentScreen,
} satisfies Meta<typeof DocumentScreen>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Simple: Story = {
  args: {
    user: PageLayout.Simple.args.user,
    document: DocumentHeader.Simple.args.document,
    subdocuments: DocumentList.Simple.args.documents,
  },
};
```

----------------------------------------

TITLE: Configure Storybook SvelteKit Framework (JavaScript)
DESCRIPTION: Configures Storybook to use the SvelteKit framework using JavaScript. It sets the framework name to '@storybook/sveltekit' and allows for additional options to be specified within the options object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/sveltekit-framework-options.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  framework: {
    name: '@storybook/sveltekit',
    options: {
      // ...
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story - Vue (TS)
DESCRIPTION: This code initializes a Storybook story for a Vue Button component using TypeScript. It imports the Meta type from Storybook and the Button component, then defines the component in the meta object for Storybook to use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_12

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Configuring Jest Snapshot Resolver for Storybook
DESCRIPTION: This code configures a custom snapshot resolver for Jest in the Storybook project. It defines how snapshot paths are resolved and generated, ensuring snapshots are saved in a specific directory structure.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-snapshot-resolver-custom-directory.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import path from 'path';

export default {
  resolveSnapshotPath: (testPath) => {
    const fileName = path.basename(testPath);
    const fileNameWithoutExtension = fileName.replace(/\.[^/.]+$/, '');
    // Defines the file extension for the snapshot file
    const modifiedFileName = `${fileNameWithoutExtension}.snap`;

    // Configure Jest to generate snapshot files using the following convention (./src/test/__snapshots__/Button.stories.snap)
    return path.join('./src/test/__snapshots__', modifiedFileName);
  },
  resolveTestPath: (snapshotFilePath, snapshotExtension) =>
    path.basename(snapshotFilePath, snapshotExtension),
  testPathForConsistencyCheck: 'example',
};
```

----------------------------------------

TITLE: Initializing Button Storybook with Svelte CSF (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF) with TypeScript. It imports defineMeta from '@storybook/addon-svelte-csf' and the Button component, then uses defineMeta to configure the story's title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    /* 👇 The title prop is optional.
     * See https://storybook.js.org/docs/configure/#configure-story-loading
     * to learn how to generate automatic titles
     */
    title: 'Design System/Atoms/Button',
    component: Button,
  });
</script>
```

----------------------------------------

TITLE: Initializing Button Story with Backgrounds in Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component, setting a global background color and overriding it for a specific story. It imports necessary modules from '@storybook/angular' and defines the component and its metadata.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  globals: {
    // 👇 Set background value for all component stories
    backgrounds: { value: 'gray', grid: false },
  },
};

export default meta;
type Story = StoryObj<Button>;

export const OnDark: Story = {
  globals: {
    // 👇 Override background value for this story
    backgrounds: { value: 'dark' },
  },
};

```

----------------------------------------

TITLE: Creating Storybook Story for Table Component
DESCRIPTION: This snippet sets up a Storybook story for the Table component using the storiesOf and withInfo functions. It adds a story titled 'Flow Class' with a brief description.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.flow-stories.txt#2025-04-22_snippet_3

LANGUAGE: JavaScript
CODE:
```
const stories = storiesOf('Table', module);
stories.add('Flow Class', withInfo('Lorum Ipsum Nem')(() => <Table />));
```

----------------------------------------

TITLE: Initializing Button Storybook story (Common)
DESCRIPTION: This code initializes a Storybook story for a Button component. It imports the Button component and defines its metadata, including documentation parameters to exclude the 'style' control.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-argtypes-parameter.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
};
```

----------------------------------------

TITLE: Upgrade Storybook Version
DESCRIPTION: This command upgrades the Storybook version to the latest, ensuring compatibility with the React Native Web Vite framework. It's a prerequisite for migrating from the older addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-native-web-vite.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx storybook upgrade
```

----------------------------------------

TITLE: Creating Web Component with LitElement in TypeScript
DESCRIPTION: Defines a web component using LitElement in TypeScript, ensuring type safety for properties. It requires LitElement and TypeScript support to manage and render data within HTML templates.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_9

LANGUAGE: ts
CODE:
```
import { LitElement, html } from 'lit-element';

@customElement('demo-document-screen')
class DocumentScreen extends LitElement {
  @property({ type: Object })
  data: {
    user: Record<string, unknown>;
    document: Record<string, unknown>;
    subdocuments: Array<Record<string, unknown>>;
  } = {};

  constructor() {
    super();
  }

  render() {
    const { user, document, subdocuments } = this.data;
    return html`
      <demo-page-layout .user=${user}>
        <demo-document-header .document=${document}></demo-document-header>
        <demo-document-list .documents=${subdocuments}></demo-document-list>
      </demo-page-layout>
    `;
  }
}

declare global {
  interface HTMLElementTagNameMap {
    'demo-document-screen': DocumentScreen;
  }
}
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF) - TS
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript and the Component Story Format (CSF). It imports the necessary modules from '@storybook/addon-svelte-csf' and defines a basic story with autoplay enabled in the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const meta = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Basic"
  parameters={{
    docs: {
      story: { autoplay: true },
    },
  }} />
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: This JavaScript code configures Storybook, specifying the framework, stories, and addons. It defines the location of story files using glob patterns and configures addons for documentation, testing with Vitest, and code coverage. The build section allows customization, such as disabling addons during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-addon-optimized-config.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: ['@storybook/addon-docs', '@storybook/addon-vitest', '@storybook/addon-coverage'],
  build: {
    test: {
      disabledAddons: ['@storybook/addon-docs'],
    },
  },
};
```

----------------------------------------

TITLE: Configuring Button Component Meta in Storybook (Common - TS) with Framework
DESCRIPTION: This code configures the metadata for a Button component in Storybook using TypeScript, specifying the framework. It imports the Button component and defines the component and its argument types. The argTypes configuration ensures that either a label or an image can be passed to the Button, but not both, using conditional logic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  argTypes: {
    // Button can be passed a label or an image, not both
    label: {
      control: 'text',
      if: { arg: 'image', truthy: false },
    },
    image: {
      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },
      if: { arg: 'label', truthy: false },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Remove Highlight Story with Decorator - Svelte CSF (TS) - Alternative
DESCRIPTION: This story demonstrates how to use a decorator in Svelte CSF (TS) to emit HIGHLIGHT and REMOVE_HIGHLIGHT events using the useChannel hook. It highlights specific selectors and then removes the highlight.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-remove.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, REMOVE_HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const RemoveHighlight: Story = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        id: 'my-unique-id',
        selectors: ['header', 'section', 'footer'],
```

----------------------------------------

TITLE: Initializing Storybook Meta with Mocked Date - Common (TS)
DESCRIPTION: This code defines the meta object for a Storybook story using TypeScript. It imports necessary modules, including MockDate, and sets up a beforeEach hook to mock the Date object before each story runs, resetting it afterward. This ensures consistent date values during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import MockDate from 'mockdate';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { getUserFromSession } from '#api/session.mock';
import { Page } from './Page';

const meta = {
  component: Page,
  // 👇 Set the value of Date for every story in the file
  async beforeEach() {
    MockDate.set('2024-02-14');
```

----------------------------------------

TITLE: Defining Story Metadata with Conditional Arguments in Angular
DESCRIPTION: This code defines the metadata for a Storybook story in Angular, configuring conditional arguments for the 'Example' component. It uses the 'if' property within 'argTypes' to show or hide arguments based on the 'parent' argument's existence, truthiness, or specific value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Example } from './Example';

const meta: Meta<Example> = {
  component: Example,
  argTypes: {
    parent: { control: 'select', options: ['one', 'two', 'three'] },

    // 👇 Only shown when `parent` arg exists
    parentExists: { if: { arg: 'parent', exists: true } },

    // 👇 Only shown when `parent` arg does not exist
    parentDoesNotExist: { if: { arg: 'parent', exists: false } },

    // 👇 Only shown when `parent` arg value is truthy
    parentIsTruthy: { if: { arg: 'parent' } },
    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },

    // 👇 Only shown when `parent` arg value is not truthy
    parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },

    // 👇 Only shown when `parent` arg value is 'three'
    parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },

    // 👇 Only shown when `parent` arg value is not 'three'
    parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },

    // Each of the above can also be conditional on the value of a globalType, e.g.:

    // 👇 Only shown when `theme` global exists
    parentExists: { if: { global: 'theme', exists: true } },
  },
};

export default meta;
```

----------------------------------------

TITLE: Sorting Stories Alphabetically
DESCRIPTION: This JavaScript code snippet demonstrates how to sort stories alphabetically using the `localeCompare` method. It compares the `id` of two stories and returns a number indicating their order. The `numeric: true` option ensures that numeric portions of the IDs are compared numerically.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
(a, b) => (a.id === b.id ? 0 : a.id.localeCompare(b.id, undefined, { numeric: true }));
```

----------------------------------------

TITLE: Initializing Storybook Preview with Common Decorator
DESCRIPTION: This snippet initializes the Storybook preview with a common decorator. It selects a theme based on global parameters and makes it available to the story. It imports themes from '../my-theme-folder/my-theme-file'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#_snippet_1

LANGUAGE: js
CODE:
```
import { MyThemes } from '../my-theme-folder/my-theme-file';

const preview = {
  decorators: [
    (story, context) => {
      const selectedTheme = context.globals.theme || 'light';
      const theme = MyThemes[selectedTheme];
      // Your theme provider and other context providers goes in the return statement
      return;
    },
  ],
};

export default preview;
```

----------------------------------------

TITLE: Basic Button Story Implementation in Storybook
DESCRIPTION: Creates a basic Button component story with a click action handler that logs when the button is clicked.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
export const Basic = () => (
  <Button onClick={action("clicked")}>Hello Button</Button>
);
```

----------------------------------------

TITLE: Configuring React DocGen in Storybook Vite Builder
DESCRIPTION: Setting up react-docgen-typescript for automatic argType inference in Storybook with Vite builder.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
export default {
  framework: '@storybook/react-vite',
  core: {
    builder: '@storybook/builder-vite',
  },
  typescript: {
    reactDocgen: 'react-docgen-typescript',
    reactDocgenTypescriptOptions: {
      shouldExtractLiteralValuesFromEnum: true,
      propFilter: (prop) => (prop.parent ? !/node_modules/.test(prop.parent.fileName) : true),
    },
  },
};
```

----------------------------------------

TITLE: Initializing Histogram Story for React
DESCRIPTION: This code defines a Storybook story for the Histogram component in a React environment. It imports the 'Histogram' component from './Histogram'. The 'Default' story configures the component with specific arguments such as 'dataType', 'showHistogramLabels', 'histogramAccentColor', and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#_snippet_4

LANGUAGE: js
CODE:
```
import { Histogram } from './Histogram';

export default {
  component: Histogram,
};

export const Default = {
  args: {
    dataType: 'latency',
    showHistogramLabels: true,
    histogramAccentColor: '#1EA7FD',
    label: 'Latency distribution',
  },
};
```

----------------------------------------

TITLE: Configuring a Custom URL Indexer in Storybook
DESCRIPTION: Storybook configuration that implements a custom indexer for URL collections. The indexer processes URL files, extracts story metadata, and formats titles appropriately for the sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/svelte-vite';
import type { Indexer } from 'storybook/internal/types';

const urlIndexer: Indexer = {
  test: /\.url\.js$/,
  createIndex: async (fileName, { makeTitle }) => {
    const fileData = await import(fileName);

    return Object.entries(fileData)
      .filter(([key]) => key != 'default')
      .map(([name, url]) => {
        return {
          type: 'docs',
          importPath: fileName,
          exportName: name,
          title: makeTitle(name)
            .replace(/([a-z])([A-Z])/g, '$1 $2')
            .trim(),
          __id: `url--${name}--${encodeURIComponent(url as string)}`,
          tags: ['!autodocs', 'url']
        };
      });
  }
};

const config: StorybookConfig = {
  stories: ['../src/**/*.stories.@(js|ts|svelte)', '../src/**/*.url.js'],
  framework: {
    name: '@storybook/svelte-vite',
    options: {},
  },
  experimental_indexers: async (existingIndexers) => [urlIndexer, ...existingIndexers]
};
export default config;
```

----------------------------------------

TITLE: Upgrading Storybook with PNPM
DESCRIPTION: Command to upgrade Storybook to version 7.6.6 using PNPM package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/upgrade-command-specific-version.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@7.6.6 upgrade
```

----------------------------------------

TITLE: Resetting and Applying Highlight in React Story (TS)
DESCRIPTION: This story defines a decorator that uses the `useChannel` hook to emit `RESET_HIGHLIGHT` and `HIGHLIGHT` events. This allows for resetting any existing highlights and then applying new highlights to specified selectors (header, section, footer).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-reset.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ResetHighlight: Story = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements
      emit(HIGHLIGHT, {
        selectors: ['header', 'section', 'footer'],
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Configuring Web Components Story (JavaScript)
DESCRIPTION: This snippet configures a Storybook story for a web component named 'demo-example' using JavaScript. It defines the component and its argument types, specifically a 'number' type for the 'value' argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-example',
  argTypes: {
    value: { type: 'number' },
  },
};
```

----------------------------------------

TITLE: Disabling Automatic Storybook Composition from Package Dependencies
DESCRIPTION: Example demonstrating how to disable automatic Storybook composition for specific package dependencies by setting the 'disable' property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-refs.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  refs: {
    'package-name': { disable: true },
  },
};
```

----------------------------------------

TITLE: Rendering Svelte Component in JavaScript
DESCRIPTION: A Svelte component showcasing bindings for user, document, and subdocument data displayed in a structured layout. The component does not rely on TypeScript types and allows defaults to be set in a script tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
<script>
  import PageLayout from './PageLayout.svelte';
  import DocumentHeader from './DocumentHeader.svelte';
  import DocumentList from './DocumentList.svelte';

  export let user = {};
  export let document = {};
  export let subdocuments = [];
</script>

<div>
  <PageLayout {user}>
    <DocumentHeader {document} />
    <DocumentList documents="{subdocuments}" />
  </PageLayout>
</div>
```

----------------------------------------

TITLE: Configuring Storybook Background Options with Globals API in TypeScript
DESCRIPTION: Sets up background color options in Storybook using the globals API options object syntax in TypeScript with proper typing. This approach uses named keys for background options while maintaining type safety through the Preview interface.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-migrate-backgrounds-globals.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)
import type { Preview } from '@storybook/your-renderer';

const preview: Preview = {
  parameters: {
    backgrounds: {
      options: {
        twitter: { name: 'twitter', value: '#00aced' },
        facebook: { name: 'facebook', value: '#3b5998' },
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Customizing Styled JSX with Babel
DESCRIPTION: This example demonstrates how to customize Styled JSX using a Babel configuration file. It shows how to add plugins, such as the Sass plugin, to extend the functionality of Styled JSX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_16

LANGUAGE: jsonc
CODE:
```
{
  "presets": [
    [
      "next/babel",
      {
        "styled-jsx": {
          "plugins": ["@styled-jsx/plugin-sass"]
        }
      }
    ]
  ]
}
```

----------------------------------------

TITLE: Async Story with Play Function in Svelte (TS)
DESCRIPTION: This Svelte snippet defines a Storybook story with a play function that interacts with the component on the canvas. It uses `within` to scope the query to the canvas element and `findByRole` to wait for a button to be rendered before interacting with it, demonstrating asynchronous testing in a Svelte component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-query-findby.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, within } from 'storybook/test';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<!--
  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
  to learn more about using the canvasElement to query the DOM
-->
<Story
  name="AsyncExample"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // Other steps

    // Waits for the component to be rendered before querying the element
    await canvas.findByRole('button', { name: / button label/i });
  }} />
```

----------------------------------------

TITLE: Registering Custom Toolbar Addon in Storybook
DESCRIPTION: Creates a custom toolbar addon in Storybook that displays an icon button. The addon is visible only when viewing story canvas and uses the Storybook manager API for registration and rendering. Includes conditional rendering based on view mode and tab state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-toolbar-example.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { addons, types } from 'storybook/manager-api';
import { IconButton } from 'storybook/internal/components';
import { OutlineIcon } from '@storybook/icons';

addons.register('my-addon', () => {
  addons.add('my-addon/toolbar', {
    title: 'Example Storybook toolbar',
    //👇 Sets the type of UI element in Storybook
    type: types.TOOL,
    //👇 Shows the Toolbar UI element if the story canvas is being viewed
    match: ({ tabId, viewMode }) => !tabId && viewMode === 'story',
    render: ({ active }) => (
      <IconButton active={active} title="Show a Storybook toolbar">
        <OutlineIcon />
      </IconButton>
    ),
  });
});
```

----------------------------------------

TITLE: Registering Custom Story Indexer in Storybook Configuration (JS)
DESCRIPTION: This code defines a custom indexer for Storybook that extracts the story title from the filename and formats it using the makeTitle function. It then configures Storybook to use this indexer by adding it to the experimental_indexers array.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers-title.md#_snippet_0

LANGUAGE: js
CODE:
```
const combosIndexer = {
  test: /\.stories\.[tj]sx?$/,
  createIndex: async (fileName, { makeTitle }) => {
    // 👇 Grab title from fileName
    const title = fileName.match(/\/(.*)\.stories/)[1];

    // Read file and generate entries ...
    let entries = [];
    // Read file and generate entries...

    return entries.map((entry) => ({
      type: 'story',
      // 👇 Use makeTitle to format the title
      title: `${makeTitle(title)} Custom`,
      importPath: fileName,
      exportName: entry.name,
    }));
  },
};

const config = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  experimental_indexers: async (existingIndexers) => [...existingIndexers, combosIndexer],
};

export default config;
```

----------------------------------------

TITLE: Documenting CSF Story with MDX
DESCRIPTION: This MDX snippet documents a CSF story using Storybook's addon-docs. It imports Meta and Story components from the addon, as well as the Button component and stories from Button.stories.js. It then uses Meta to define the component and title, and Story to embed the 'basic' story from the CSF file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_1

LANGUAGE: mdx
CODE:
```
import { Meta, Story } from '@storybook/addon-docs';
import * as stories from './Button.stories.js';
import { Button } from './Button';
import { SomeComponent } from 'path/to/SomeComponent';

<Meta title="Demo/Button" component={Button} />

# Button

I can define a story with the function imported from CSF:

<Story story={stories.basic} />

And I can also embed arbitrary markdown & JSX in this file.

<SomeComponent prop1="val1" />
```

----------------------------------------

TITLE: Generating index.json for Outdated Storybook Versions
DESCRIPTION: This bash command uses the Storybook CLI to generate the index.json file for projects using older Storybook versions or with specific requirements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/storybook-composition.mdx#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npx -p @storybook/cli@6.5.14 sb extract
```

----------------------------------------

TITLE: Initializing Storybook Story (JS)
DESCRIPTION: This code initializes a Storybook story for a component. It imports the component and defines the component and its argument types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Example } from './Example';

export default {
  component: Example,
  argTypes: {
    actualArgName: {
      name: 'Friendly name',
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with Backgrounds in Svelte (CSF) - Typescript
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF), setting a global background color and overriding it for a specific story. It imports necessary modules from '@storybook/your-framework' and defines the component and its metadata.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  globals: {
    // 👇 Set background value for all component stories
    backgrounds: { value: 'gray', grid: false },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const OnDark: Story = {
  globals: {
    // 👇 Override background value for this story
    backgrounds: { value: 'dark' },
  },
};

```

----------------------------------------

TITLE: Enabling Crash Reports in Storybook with npm
DESCRIPTION: Command to run Storybook with crash reports enabled using npm as the package manager. The -- delimiter is necessary when passing flags to the underlying command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-storybook-enable-crash-reports-flag.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm run storybook -- --enable-crash-reports
```

----------------------------------------

TITLE: Compose Stories Function Example
DESCRIPTION: Example usage of the `composeStories` function to process and compose stories from a CSF file with project annotations for use in Vitest tests. It imports all exports from a story file and composes them.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-vitest.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { composeStories } from '@storybook/react';
import * as stories from './Button.stories';

const { Primary, Secondary } = composeStories(stories);
```

----------------------------------------

TITLE: Defining Storybook Meta for Svelte Component (CSF) - TS
DESCRIPTION: This code defines the metadata for a Storybook story using Svelte and TypeScript. It imports the Meta type from '@storybook/your-framework' (to be replaced with svelte-vite or sveltekit) and the Svelte component. It configures the component and uses 'args' to set the default value for the 'value' property, instead of the deprecated 'defaultValue'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-default-value.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Example from './Example.svelte';

const meta = {
  component: Example,
  argTypes: {
    value: {
      // ❌ Deprecated
      defaultValue: 0,
    },
  },
  // ✅ Do this instead
  args: {
    value: 0,
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Replacing 'config' with 'previewAnnotations' in Addon Presets
DESCRIPTION: This example demonstrates how to replace the deprecated 'config' preset field with 'previewAnnotations' in Storybook addon presets. This change is required for Storybook 8.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_79

LANGUAGE: diff
CODE:
```
// your-addon/preset.js

module.exports = {
-  config: (entries = []) => [...entries, ...yourEntry],
+  previewAnnotations: (entries = []) => [...entries, ...yourEntry],
};
```

----------------------------------------

TITLE: Initializing Button Story - React (JS)
DESCRIPTION: This code initializes a Storybook story for a React Button component using JavaScript. It imports the Button component and exports a default object that specifies the component to be used in the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};
```

----------------------------------------

TITLE: Import Highlight Events from storybook/highlight
DESCRIPTION: Imports the HIGHLIGHT, REMOVE_HIGHLIGHT, RESET_HIGHLIGHT, and SCROLL_INTO_VIEW events from the 'storybook/highlight' module. These events are used to control the highlighting of DOM elements within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#_snippet_6

LANGUAGE: js
CODE:
```
import { HIGHLIGHT, REMOVE_HIGHLIGHT, RESET_HIGHLIGHT, SCROLL_INTO_VIEW } from 'storybook/highlight';
```

----------------------------------------

TITLE: Defining story metadata with preview.meta - Typescript
DESCRIPTION: The `meta` function on the `preview` object is used to define the metadata for stories, including the component, title, and parameters. It accepts an object containing these properties and provides type safety. This example shows how to define the component and layout parameter.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
// Learn about the # subpath import: https://storybook.js.org/docs/api/csf/csf-factories#subpath-imports
import preview from '#.storybook/preview';

import { Button } from './Button';

const meta = preview.meta({
  component: Button,
  parameters: {
    // type-safe!
    layout: 'centered',
  }
});
export default meta;
```

----------------------------------------

TITLE: Attaching MDX to Component Stories with Meta
DESCRIPTION: Shows how to use the Meta component to attach an MDX file to a component's stories, allowing the use of other doc blocks in 'attached' mode.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-meta.mdx#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
import { Meta, Story } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />
```

----------------------------------------

TITLE: Configuring Storybook Test Runner Viewport - TypeScript
DESCRIPTION: This TypeScript code configures the Storybook test runner to set the viewport size of the page based on the story's parameters. It retrieves the viewport name from the story context and uses it to fetch the corresponding viewport parameters from `MINIMAL_VIEWPORTS`. If a viewport is found, it sets the page's viewport size accordingly; otherwise, it uses a default viewport size. It exports a configuration object of type `TestRunnerConfig`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-custom-page-viewport.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';
import { getStoryContext } from '@storybook/test-runner';

const { MINIMAL_VIEWPORTS } = require('storybook/viewport');

const DEFAULT_VIEWPORT_SIZE = { width: 1280, height: 720 };

const config: TestRunnerConfig = {
  async preVisit(page, story) {
    // Accesses the story's parameters and retrieves the viewport used to render it
    const context = await getStoryContext(page, story);
    const viewportName = context.parameters?.viewport?.defaultViewport;
    const viewportParameter = MINIMAL_VIEWPORTS[viewportName];

    if (viewportParameter) {
      const viewportSize = Object.entries(viewportParameter.styles).reduce(
        (acc, [screen, size]) => ({
          ...acc,
          // Converts the viewport size from percentages to numbers
          [screen]: parseInt(size),
        }),
        {},
      );
      // Configures the Playwright page to use the viewport size
      page.setViewportSize(viewportSize);
    } else {
      page.setViewportSize(DEFAULT_VIEWPORT_SIZE);
    }
  },
};

export default config;
```

----------------------------------------

TITLE: Initializing Button Story with Meta (TS)
DESCRIPTION: This code initializes a Storybook story for a Button component using TypeScript. It imports the Meta type from Storybook, defines the component to be the Button, and sets up parameters for handling actions based on a regular expression. It uses satisfies Meta to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  parameters: { actions: { argTypesRegex: '^on.*' } },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Registering Vite Builder in Storybook Configuration
DESCRIPTION: Update the Storybook configuration to use the Vite builder.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  framework: '@storybook/react-vite',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: ['@storybook/addon-links', '@storybook/addon-essentials'],
  core: {
    builder: '@storybook/builder-vite',
  },
};
```

----------------------------------------

TITLE: Setting Default Story Arguments in TypeScript
DESCRIPTION: This TypeScript snippet sets the default value of the 'theme' argument to 'light' for all stories in Storybook. It imports the Preview type from the Storybook framework and defines a preview configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/args-in-preview.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  // The default value of the theme arg for all stories
  args: { theme: 'light' },
};

export default preview;
```

----------------------------------------

TITLE: Disabling telemetry
DESCRIPTION: Disables Storybook's telemetry, preventing the collection of usage data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_130

LANGUAGE: Shell
CODE:
```
create storybook --disable-telemetry
```

----------------------------------------

TITLE: Adding Custom Favicon to Storybook Manager (TypeScript)
DESCRIPTION: This snippet demonstrates how to add a custom favicon to the Storybook manager interface using TypeScript. It imports the StorybookConfig type and defines the managerHead configuration to include a link tag for the favicon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-custom-manager-head.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  managerHead: (head) => `
    ${head}
    <link rel="icon" type="image/png" href="/logo192.png" sizes="192x192" />
  `,
};

export default config;
```

----------------------------------------

TITLE: Defining Button Stories with Tags in TypeScript
DESCRIPTION: This code defines a Storybook story for a Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines metadata for the component, including applying a 'stable' tag to all stories in the file. It then creates a specific story, ExperimentalFeatureStory, which removes the inherited 'stable' tag and applies an 'experimental' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  // 👇 Applies to all stories in this file
  tags: ['stable'],
} satisfies Meta<typeof Button>;
export default meta;

type Story = StoryObj<typeof meta>;

export const ExperimentalFeatureStory: Story = {
  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag
  tags: ['!stable', 'experimental'],
};
```

----------------------------------------

TITLE: Setting Global View Mode - JavaScript
DESCRIPTION: This code snippet shows how to set the default view mode globally in `.storybook/preview.js`. In this example, the view mode is set to 'docs' for all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_10

LANGUAGE: javascript
CODE:
```
// always reset the view mode to "docs" whenever the user navigates
export const parameters = {
  viewMode: 'docs',
};
```

----------------------------------------

TITLE: Disabling Telemetry in Storybook with pnpm
DESCRIPTION: Command to run Storybook with telemetry disabled using pnpm. The flag is passed directly after the storybook command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-disable-telemetry-flag.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm run storybook --disable-telemetry
```

----------------------------------------

TITLE: Configuring Button Story in Web Components (JavaScript)
DESCRIPTION: This code configures a Storybook story for a Web Components Button component using JavaScript. It defines the component as 'demo-button' and sets up argument types for background color and a default argument to set the primary property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_11

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  // 👇 Creates specific argTypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    // 👇 Now all Button stories will be primary.
    primary: true,
  },
};
```

----------------------------------------

TITLE: Listing Available Codemods for Storybook Migrate
DESCRIPTION: Displays a list of available codemods that can be used with the `storybook migrate` command to update the project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_85

LANGUAGE: Shell
CODE:
```
storybook migrate --list
```

----------------------------------------

TITLE: Converting MDX Stories to CSF with npm
DESCRIPTION: Command to migrate Storybook stories from MDX format to Component Story Format (CSF) using npm. The command uses npx to execute the storybook migration script targeting all .stories.mdx files in the src directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-mdx-to-csf.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
# Convert stories in MDX to CSF
npx storybook@latest migrate mdx-to-csf --glob "src/**/*.stories.mdx"
```

----------------------------------------

TITLE: Simulating Filled Form Interaction and Assertion in Solid (JS)
DESCRIPTION: This code defines a Storybook story for the LoginForm component in Solid (JavaScript), simulating user interaction with a filled form and asserting the expected DOM structure. It uses userEvent to type into email and password fields, clicks the submit button, and asserts that a success message is displayed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_7

LANGUAGE: js
CODE:
```
/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));

    // 👇 Assert DOM structure
    await expect(
      canvas.getByText(
        'Everything is perfect. Your account is ready and we should probably get you started!'
      )
    ).toBeInTheDocument();
  },
};
```

----------------------------------------

TITLE: Configuring Background Grid
DESCRIPTION: Demonstrates the default configuration for the background grid feature.  It shows the default values for the grid's properties, which are customizable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/backgrounds.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
export const parameters = {
  backgrounds: {
    grid: {
      cellAmount: 5,
      cellSize: 20,
      opacity: 0.5,
    },
  },
};

```

----------------------------------------

TITLE: Defining Button Stories with CSF in Svelte
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and exports a default object containing the component definition. It also defines primary, secondary, and tertiary stories with different labels and background colors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_8

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

export const Primary = {
  args: {
    backgroundColor: '#ff0',
    label: 'Button',
  },
};

export const Secondary = {
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
};

export const Tertiary = {
  args: {
    ...Primary.args,
    label: '📚📕📈🤓',
  },
};

```

----------------------------------------

TITLE: Configuring Controls for Server-Side Stories in JSON
DESCRIPTION: This JSON code demonstrates how to configure controls for server-side stories. It includes args and argTypes to specify control types for different properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_8

LANGUAGE: json
CODE:
```
{
  "title": "Controls",
  "stories": [
    {
      "name": "Button",
      "parameters": {
        "server": { "id": "controls/button" }
      },
      "args": { "button_text": "Push Me", "color": "red" },
      "argTypes": { "button_text": { "control": { "type": "color" } } }
    }
  ]
}
```

----------------------------------------

TITLE: Configuring Primary Button Story in React (JavaScript)
DESCRIPTION: This JavaScript code configures a primary button story within Storybook for a React component. It imports the Button component from './Button' and sets up the story with arguments for label and primary state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Primary = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Configuring Storybook in angular.json
DESCRIPTION: This snippet configures Storybook within an Angular project using the Angular CLI. It defines targets for starting and building Storybook, specifying options such as the configuration directory (.storybook), browser target (your-project:build), and Compodoc settings for documentation generation. The compodocArgs array includes arguments to export Compodoc data as JSON and specifies the root directory for introspection.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/angular-project-compodoc-config.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "your-project": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "storybook": {
          "builder": "@storybook/angular:start-storybook",
          "options": {
            "configDir": ".storybook",
            "browserTarget": "your-project:build",
            "compodoc": true,
            "compodocArgs": [
              "-e",
              "json",
              "-d",
              "." // Add this line to introspect the relevant files starting from the root directory of your project.
            ],
            "port": 6006
          }
        },
        "build-storybook": {
          "builder": "@storybook/angular:build-storybook",
          "options": {
            "configDir": ".storybook",
            "browserTarget": "your-project:build",
            "compodoc": true,
            "compodocArgs": [
              "-e",
              "json",
              "-d",
              "." // Add this line to introspect the relevant files starting from the root directory of your project.
            ],
            "outputDir": "storybook-static"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Regex Exclude Controls - JavaScript
DESCRIPTION: This JavaScript snippet defines a story named 'RegexExclude' that configures the Storybook controls to exclude properties that match the regular expression /^hello*/.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_10

LANGUAGE: js
CODE:
```
export const RegexExclude = {
  parameters: {
    controls: { exclude: /^hello*/ },
  },
};
```

----------------------------------------

TITLE: Initializing Secondary Button Story with Render Function
DESCRIPTION: Defines a Storybook story named 'Secondary' for a demo button. The render function uses lit's html template literal to create a demo-button element with a specified background color and label containing emojis.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_15

LANGUAGE: typescript
CODE:
```
export const Secondary: Story = {
  render: () => html`<demo-button .backgroundColor="#ff0" .label="😄👍😍💯"></demo-button>`,
};
```

----------------------------------------

TITLE: Executing Storybook Test Runner
DESCRIPTION: This command executes the Storybook test runner, which automates the process of running tests for all stories in your Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
test-storybook
```

----------------------------------------

TITLE: Configuring MSW Handlers for REST
DESCRIPTION: This code configures MSW handlers to mock REST requests for the document screen component. It defines two stories: one that fetches data successfully and another that simulates a failure.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { DocumentScreen } from './DocumentScreen';

export default {
  title: 'DocumentScreen',
  component: DocumentScreen,
};

const Template = () => <DocumentScreen />;

export const Success = Template.bind({});
Success.parameters = {
  msw: {
    handlers: [
      {
        path: '/document',
        method: 'GET',
        res: () => {
          return {
            status: 200,
            body: {
              title: 'My Document',
              content: 'This is the content of my document.',
            },
          };
        },
      },
    ],
  },
};

export const Failure = Template.bind({});
Failure.parameters = {
  msw: {
    handlers: [
      {
        path: '/document',
        method: 'GET',
        res: () => {
          return {
            status: 500,
          };
        },
      },
    ],
  },
};

```

----------------------------------------

TITLE: Defining Svelte Story with CSF for DocumentScreen
DESCRIPTION: This JavaScript code defines a Storybook story for the DocumentScreen component using Svelte and the Component Story Format (CSF). It imports necessary modules, defines a 'Simple' story with predefined arguments for user, document, and subdocuments, pulling data from other stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import DocumentScreen from './YourPage.svelte';

  // 👇 Imports the required stories
  import * as PageLayout from './PageLayout.stories.svelte';
  import * as DocumentHeader from './DocumentHeader.stories.svelte';
  import * as DocumentList from './DocumentList.stories.svelte';

  const { Story } = defineMeta({
    component: DocumentScreen,
  });
</script>

<Story
  name="Simple"
  args={{
    user: PageLayout.Simple.args.user,
    document: DocumentHeader.Simple.args.document,
    subdocuments: DocumentList.Simple.args.documents,
  }}
/>
```

----------------------------------------

TITLE: Configuring TypeScript in Storybook
DESCRIPTION: This snippet shows how to configure TypeScript handling in Storybook. It defines options for TypeScript checking.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
typescript: { check: false, checkOptions: {} }
```

----------------------------------------

TITLE: Initializing Button Story - Svelte CSF
DESCRIPTION: This code defines a basic Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports 'defineMeta' from '@storybook/addon-svelte-csf' and the Button component. The 'Basic' story configures documentation parameters to control the source display.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Basic"
  parameters={{
    docs: {
      canvas: { sourceState: 'shown' },
    },
  }} />
```

----------------------------------------

TITLE: Configuring NYC for Vue 3/Svelte Coverage
DESCRIPTION: This configuration adjusts the NYC configuration file (e.g., `.nycrc.json` or `nyc.config.js`) to enable coverage tests for frameworks with special files like Vue 3 or Svelte by adding the required file extensions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_15

LANGUAGE: JSON
CODE:
```
{}
```

----------------------------------------

TITLE: Initializing Storybook Meta for Svelte Component (TS)
DESCRIPTION: This code initializes the Storybook meta object for a Svelte component, defining the component to be used in the stories. It imports necessary modules from '@storybook/your-framework' and defines the component to be tested.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;
```

----------------------------------------

TITLE: Converting storiesOf to CSF 1 using pnpm
DESCRIPTION: This command uses pnpm to run the Storybook migration tool, converting stories from storiesOf API to CSF 1 format. It targets TypeScript (.tsx) story files using the specified glob pattern.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-stories-of-to-csf.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
# Convert storiesOf to CSF 1
pnpm dlx storybook@latest migrate storiesof-to-csf --glob="**/*.stories.tsx" --parser=tsx
```

----------------------------------------

TITLE: Configuring Button Stories for a Generic Framework
DESCRIPTION: This snippet configures Storybook stories for a Button component using a generic framework placeholder. It imports necessary modules from '@storybook/your-framework' and defines stories for 'Basic' and 'Primary' button states, setting the 'primary' argument to true for the 'Primary' story.  'your-framework' should be replaced with the actual framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/typed-csf-file.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;
export default meta;

type Story = StoryObj<typeof meta>;

export const Basic = {} satisfies Story;

export const Primary = {
  args: {
    primary: true,
  },
} satisfies Story;
```

----------------------------------------

TITLE: Configuring Primary Button Story in React (TypeScript)
DESCRIPTION: This TypeScript code configures a primary button story within Storybook for a React component. It imports necessary modules from '@storybook/react-vite' and defines the component and its arguments, setting the label to 'Button' and primary to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Rendering an Empty List in Vue (TS)
DESCRIPTION: This story renders an empty List component in Vue using TypeScript. It uses a render function to define the component's structure, including only the List component in the template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_25

LANGUAGE: ts
CODE:
```
export const Empty: Story = {
  render: () => ({
    components: { List },
    template: '<List/>',
  }),
};
```

----------------------------------------

TITLE: Migrating Webpack Configuration to Vite in Storybook
DESCRIPTION: Example of migrating a Webpack configuration for loading GraphQL queries to its Vite equivalent using a plugin.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
// Webpack
module.exports = async ({ config }) => {
  config.module.rules.push({
    test: /\.(graphql|gql)$/,
    exclude: /node_modules/,
    loader: 'graphql-tag/loader',
  });
  return config;
};

// Vite
import { mergeConfig } from 'vite';
import graphql from '@rollup/plugin-graphql';

export default {
  async viteFinal(config) {
    return mergeConfig(config, {
      plugins: [graphql()],
    });
  },
};
```

----------------------------------------

TITLE: Rendering an Empty List in Vue
DESCRIPTION: This story renders an empty List component in Vue. It uses a render function to define the component's structure, including only the List component in the template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_21

LANGUAGE: js
CODE:
```
export const Empty = {
  render: () => ({
    components: { List },
    template: '<List/>',
  }),
};
```

----------------------------------------

TITLE: CSF 3 Story Object with Render Function
DESCRIPTION: Shows how to rewrite a CSF 2 story into CSF 3 format using an explicit render function for component rendering.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
export const Primary = {
  render: (args) => {
    return <Button {...args} />;
  },
};
```

----------------------------------------

TITLE: Configuring Button Story in Vue (JavaScript)
DESCRIPTION: This code configures a Storybook story for a Vue Button component using JavaScript. It imports the Button component and defines its metadata, including argument types for background color and default arguments to set the primary property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_9

LANGUAGE: js
CODE:
```
import Button from './Button.vue';

export default {
  component: Button,
  //👇 Creates specific argTypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    //👇 Now all Button stories will be primary.
    primary: true,
  },
};
```

----------------------------------------

TITLE: Configuring Webpack for SVG Handling in Storybook (TS)
DESCRIPTION: This code snippet configures Storybook's webpack settings to handle SVG files using @svgr/webpack. It modifies the existing image rule to exclude SVG files and adds a new rule to process them with @svgr/webpack. The webpackFinal function is used to modify the webpack configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-configure-svgr.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/nextjs';

const config: StorybookConfig = {
  // ...
  webpackFinal: async (config) => {
    config.module = config.module || {};
    config.module.rules = config.module.rules || [];

    // This modifies the existing image rule to exclude .svg files
    // since you want to handle those files with @svgr/webpack
    const imageRule = config.module.rules.find((rule) => rule?.['test']?.test('.svg'));
    if (imageRule) {
      imageRule['exclude'] = /\.svg$/;
    }

    // Configure .svg files to be loaded with @svgr/webpack
    config.module.rules.push({
      test: /\.svg$/,
      use: ['@svgr/webpack'],
    });

    return config;
  },
};

export default config;
```

----------------------------------------

TITLE: Running Unit Tests with Jest
DESCRIPTION: This script executes unit tests using Jest to ensure the codebase functions as expected.
SOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
yarn test
```

----------------------------------------

TITLE: Initializing ButtonGroup stories for Svelte (CSF)
DESCRIPTION: This code initializes Storybook stories for the ButtonGroup component in Svelte using the Component Story Format (CSF). It imports necessary modules from '@storybook/addon-svelte-csf', the ButtonGroup component, and Button stories. It defines a 'Pair' story with primary and secondary buttons in a horizontal orientation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import ButtonGroup from './ButtonGroup.svelte';

  //👇 Imports the Button stories
  import * as ButtonStories from './Button.stories.svelte';

  const { Story } = defineMeta({
    component: ButtonGroup,
  });
</script>

<Story
  name="Pair"
  args={{
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  }}
/>
```

----------------------------------------

TITLE: Removing and Installing Dependencies for Web Components with Vite
DESCRIPTION: This command removes the webpack5 dependencies and installs the vite dependencies for Web Components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_25

LANGUAGE: bash
CODE:
```
npm remove @storybook/web-components-webpack5
npm install @storybook/web-components-vite --save-dev
```

----------------------------------------

TITLE: Initializing ListTemplate Story for React
DESCRIPTION: Defines a ListTemplate story for React that renders a List component with ListItem components based on the provided items. It uses the map function to iterate over the items and render a ListItem for each item.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const ListTemplate: Story = {
  render: ({ items, ...args }) => {
    return (
      <List>
        {items.map((item) => (
          <ListItem {...item} />
        ))}
      </List>
    );
  },
};
```

----------------------------------------

TITLE: Rendering List with Many Items in Web Components
DESCRIPTION: This story renders a List component with multiple ListItems in Web Components. It uses the html template literal to define the component's structure, including both the demo-list and demo-list-item components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_31

LANGUAGE: js
CODE:
```
export const ManyItems = {
  render: () => html`
    <demo-list>
      <demo-list-item></demo-list-item>
      <demo-list-item></demo-list-item>
      <demo-list-item></demo-list-item>
    </demo-list>
  `,
};
```

----------------------------------------

TITLE: Importing Description Block in MDX
DESCRIPTION: Shows how to import and use the Description block with a story in an MDX file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-description.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
import { Meta, Description } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

<Description of={ButtonStories.Primary} />
```

----------------------------------------

TITLE: Running Storybook Tests with PNPM Watch Mode
DESCRIPTION: Command to run Storybook tests in watch mode using pnpm package manager. The --watch flag enables continuous test execution on file changes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute-with-flags.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm run test-storybook --watch
```

----------------------------------------

TITLE: Configuring extension option for Vite
DESCRIPTION: This extends the default extension list with the provided list of file extensions to include in coverage.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
options: { istanbul: { extension: ['.js', '.cjs', '.mjs'],}}
```

----------------------------------------

TITLE: Disabling Sidebar Roots in Storybook Manager
DESCRIPTION: Configure Storybook to show top-level nodes as folders instead of roots by setting the sidebar.showRoots option to false in the manager.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// .storybook/manager.js

import { addons } from '@storybook/manager-api';

addons.setConfig({
  sidebar: {
    showRoots: false,
  },
});
```

----------------------------------------

TITLE: Initializing LoginForm Story with Empty Form in Angular
DESCRIPTION: This code initializes a Storybook story for the LoginForm component in Angular, defining the metadata and an empty form story. It imports necessary modules from '@storybook/angular' and the LoginForm component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { userEvent, within, expect } from 'storybook/test';

import { LoginForm } from './LoginForm.component';

const meta: Meta<LoginForm> = {
  component: LoginForm,
};

export default meta;
type Story = StoryObj<LoginForm>;

export const EmptyForm: Story = {};
```

----------------------------------------

TITLE: Installing Storybook Docs for Vue
DESCRIPTION: Command to install the Storybook Docs addon as a development dependency using Yarn. Ensures that all Storybook package versions match.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
yarn add -D @storybook/addon-docs
```

----------------------------------------

TITLE: Importing Stories Component in JavaScript for Storybook
DESCRIPTION: This snippet shows how to import the Stories component from the Storybook addon-docs blocks. This import is necessary to use the Stories block in your Storybook documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-stories.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { Stories } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Annotating a Story in Storybook 6.0 CSF (Recommended)
DESCRIPTION: This code snippet shows the recommended way to annotate a story in Storybook 6.0 using hoisted CSF annotations. This syntax is more compact and ergonomic than the previous method.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_209

LANGUAGE: javascript
CODE:
```
export const Basic = () => <Button />
Basic.storyName = 'foo';
Basic.parameters = { ... };
Basic.decorators = [ ... ];
```

----------------------------------------

TITLE: Adding Meta Robots Tag in Storybook Manager - HTML
DESCRIPTION: This snippet adds a <meta> tag to the Storybook manager's head section to instruct search engines not to index the page. No dependencies are required as this is standard HTML and is used by placing it inside the .storybook/manager-head.html file. This configuration is useful for keeping Storybook instances private; the expected behavior is that compliant web crawlers will not index the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/seo-noindex.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<meta name=\"robots\" content=\"noindex\" />
```

----------------------------------------

TITLE: Setting Global IFrame Height in preview.ts
DESCRIPTION: TypeScript configuration to set the default iframe height for all stories in the Storybook preview configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
export const parameters = { docs: { story: { iframeHeight: '400px' } } };
```

----------------------------------------

TITLE: Setting Local iFrame Height for DocsPage Stories
DESCRIPTION: TypeScript example showing how to set the iframe height parameter locally for a specific story when using DocsPage.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/common/README.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
export const basic = () => ...
basic.parameters = {
  docs: { story: { iframeHeight: '400px' } }
}
```

----------------------------------------

TITLE: Configuring Button stories for Angular
DESCRIPTION: This snippet configures Storybook stories for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines the component and metadata for the story. The tags array specifies that the stories should be included in the documentation page but not appear in Storybook's sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './Button';

const meta: Meta<Button> = {
  component: Button,
  /*
   * All stories in this file will:
   * - Be included in the docs page
   * - Not appear in Storybook's sidebar
   */
  tags: ['autodocs', '!dev'],
};
export default meta;
```

----------------------------------------

TITLE: Resetting and Applying Highlight in Svelte Story (TS)
DESCRIPTION: This Svelte story uses the `useChannel` hook within a decorator to emit `RESET_HIGHLIGHT` and `HIGHLIGHT` events. This allows for resetting any existing highlights and then applying new highlights to specified selectors (header, section, footer).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-reset.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ResetHighlight: Story = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements
      emit(HIGHLIGHT, {
```

----------------------------------------

TITLE: Testing Form Submission with Mocked Revalidation in JavaScript
DESCRIPTION: This Storybook story tests the submission of a form and verifies that the revalidatePath function (mocked from a framework-specific module) is called with the expected path. It uses userEvent to simulate a click on the submit button and expect to assert that revalidatePath is called with '/'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-cache-mock.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { expect, userEvent, within } from 'storybook/test';

/*
 * Replace your-framework with nextjs or nextjs-vite
 * 👇 Must include the `.mock` portion of filename to have mocks typed correctly
 */
import { revalidatePath } from '@storybook/your-framework/cache.mock';

import MyForm from './my-form';

export default {
  component: MyForm,
};

export const Submitted = {
  async play({ canvasElement }) {
    const canvas = within(canvasElement);

    const submitButton = canvas.getByRole('button', { name: /submit/i });
    await userEvent.click(saveButton);
    // 👇 Use any mock assertions on the function
    await expect(revalidatePath).toHaveBeenCalledWith('/');
  },
};
```

----------------------------------------

TITLE: Storybook Story with Locale in Svelte (JS)
DESCRIPTION: This code defines a Storybook story for a Svelte component, MyComponent. It imports the component, defines a default export with the component, and creates a story named StoryWithLocale that renders the component with a locale-specific caption. The caption is determined by the getCaptionForLocale function based on the provided locale and passed as a prop to the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_6

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

const getCaptionForLocale = (locale) => {
  switch (locale) {
    case 'es':
      return 'Hola!';
    case 'fr':
      return 'Bonjour!';
    case 'kr':
      return '안녕하세요!';
    case 'zh':
      return '你好!';
    default:
      return 'Hello!';
  }
};

export const StoryWithLocale = {
  render: (args, { globals: { locale } }) => {
    const caption = getCaptionForLocale(locale);
    return {
      Component: MyComponent,
      props: {
        locale: caption,
      },
    };
  },
};
```

----------------------------------------

TITLE: Configuring MDX Story with SCSS Example
DESCRIPTION: Shows how to set up a Storybook documentation page using MDX format, including Meta configuration and SCSS code block demonstration. The example includes basic SCSS variable definitions and styling.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-global-syntax-highlight.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';

<Meta title="A storybook story with syntax highlight registered globally" />

# SCSS example

This is a sample Sass snippet example with Storybook docs

{/* Don't forget to replace (") with (```) when you copy the snippet to your own app */}

"scss
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
font: 100% $font-stack;
  color: $primary-color;
}
"
```

----------------------------------------

TITLE: Defining Storybook Meta for Common Component (JavaScript)
DESCRIPTION: This code defines the Storybook metadata for a generic 'Example' component using JavaScript. It configures the component and sets up the 'label' argument with a select control, options (Normal, Bold, Italic), and HTML mappings for Bold and Italic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Example } from './Example';

export default {
  component: Example,
  argTypes: {
    label: {
      control: { type: 'select' },
      options: ['Normal', 'Bold', 'Italic'],
      mapping: {
        Bold: <b>Bold</b>,
        Italic: <i>Italic</i>,
      },
    },
  },
};
```

----------------------------------------

TITLE: Vue3 Page Story with JavaScript
DESCRIPTION: Storybook story for Vue3 Page component using JavaScript. Creates a note in the database during play function and mounts the component with dynamic data through props. Includes user interaction testing and argument type controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-advanced.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
export const Default = {
  play: async ({ mount, args }) => {
    const note = await db.note.create({
      data: { title: 'Mount inside of play' },
    });

    const canvas = await mount(
      Page,
      // 👇 Pass data that is created inside of the play function to the component
      //   For example, a just-generated UUID
      { props: { ...args, params: { id: String(note.id) } } },
    );

    await userEvent.click(await canvas.findByRole('menuitem', { name: /login to add/i }));
  },
  argTypes: {
    // 👇 Make the params prop un-controllable, as the value is always overriden in the play function.
    params: { control: { disable: true } },
  },
};
```

----------------------------------------

TITLE: Initializing Web Components Checkbox Story (TS)
DESCRIPTION: This code initializes a Storybook story for a Checkbox web component using TypeScript. It imports the necessary modules from '@storybook/web-components-vite'. It defines the component's metadata and exports a default meta object and an 'Unchecked' story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'checkbox-element',
};

export default meta;
type Story = StoryObj;

export const Unchecked: Story = {
  args: {
    label: 'Unchecked',
  },
};
```

----------------------------------------

TITLE: Forcing installation
DESCRIPTION: Forces the installation of Storybook, overwriting any existing files. This is useful when re-installing or upgrading Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_121

LANGUAGE: Shell
CODE:
```
create storybook --force
```

----------------------------------------

TITLE: Configuring Vite for Vue in Storybook
DESCRIPTION: This code snippet demonstrates how to configure Vite for a Vue project within Storybook. It imports the defineConfig function from vite and the vue plugin from @vitejs/plugin-vue. The defineConfig function is then used to configure Vite with the vue plugin.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_50

LANGUAGE: typescript
CODE:
```
import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";

export default defineConfig({
  plugins: [vue()],
});
```

----------------------------------------

TITLE: Mocking Error API Response with MSW in Storybook (TS)
DESCRIPTION: This snippet configures a Storybook story to mock an error API response using MSW in TypeScript. It defines an HTTP GET handler that intercepts requests to 'https://your-restful-endpoint' and returns an HTTP 403 status code after a delay of 800ms. This simulates a failed API request, allowing the 'demo-document-screen' component to handle error scenarios.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_13

LANGUAGE: typescript
CODE:
```
export const MockedError: Story = {
  parameters: {
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint', async () => {
          await delay(800);
          return new HttpResponse(null, {
            status: 403,
          });
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Rendering ResolvedReact Component in MDX
DESCRIPTION: Includes the ResolvedReact component which likely displays React version information in a different context. This allows comparison between versions in MDX and in a React component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/ResolvedReact.mdx#2025-04-22_snippet_3

LANGUAGE: JSX
CODE:
```
<ResolvedReact />
```

----------------------------------------

TITLE: Angular Document Screen Component Implementation
DESCRIPTION: Angular component that fetches document data from an API endpoint and renders it using a page layout with document header and list components. Handles loading and error states using *ngIf directives.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'document-screen',
  template: `
    <div>
      <div *ngIf="error"><p>There was an error fetching the data!</p></div>
      <div *ngIf="loading"><p>Loading...</p></div>
      <div *ngIf="!loading && subdocuments.length > 0">
        <page-layout [user]="user">
          <document-header [document]="document"></document-header>
          <document-list [documents]="subdocuments"></document-list>
        </page-layout>
      </div>
    </div>
  `,
})
export class DocumentScreen implements OnInit {
  user: any = { id: 0, name: 'Some User' };

  document: any = { id: 0, title: 'Some Title' };

  subdocuments: any = [];

  error = false;
  loading = true;

  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.http.get<any>('https://your-restful-endpoint').subscribe({
      next: (data) => {
        this.loading = false;
        this.user = data.user;
        this.document = data.document;
        this.documents.data.subdocuments;
      },
      error: (error) => {
        this.error = true;
      },
    });
  }
}
```

----------------------------------------

TITLE: Configuring Button Story with Svelte (JavaScript)
DESCRIPTION: This code configures a Button component's story in Storybook using Svelte and JavaScript. It imports the necessary modules, defines the component, and sets up argTypes for the 'arrow' property, allowing users to select from predefined arrow icons using a select control in the Storybook UI. The options and labels for the arrow selection are also defined.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import Button from './Button.svelte';

import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';

const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };

export default {
  component: Button,
  argTypes: {
    arrow: {
      options: Object.keys(arrows), // An array of serializable values
      mapping: arrows, // Maps serializable option values to complex arg values
      control: {
        type: 'select', // Type 'select' is automatically inferred when 'options' is defined
        labels: {
          // 'labels' maps option values to string labels
          ArrowUp: 'Up',
          ArrowDown: 'Down',
          ArrowLeft: 'Left',
          ArrowRight: 'Right',
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Structuring a Storybook Code Snippet in Markdown
DESCRIPTION: This code block demonstrates how to structure a code snippet in the Storybook documentation. It includes attributes to provide additional context to the code snippet, such as filename, renderer, language, and tabTitle.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import ButtonGroup from './ButtonGroup.vue';

//👇 Imports the Button stories
import * as ButtonStories from './Button.stories';

const meta = {
  component: ButtonGroup,
}} satisfies Meta<typeof ButtonGroup>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Pair: Story = {
  render: (args) => ({
    components: { ButtonGroup },
    setup() {
      return { args };
    },
    template: '<ButtonGroup v-bind="args" />',
  }),
  args: {
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  },
};
```

----------------------------------------

TITLE: Running a Sandbox Storybook
DESCRIPTION: This script starts a sandbox Storybook instance with test stories, allowing developers to test and develop Storybook components in isolation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn start
```

----------------------------------------

TITLE: TypeScript Storybook Main Configuration
DESCRIPTION: TypeScript version of the Storybook configuration with type definitions, defining framework, story patterns, and webpack configuration. Includes type safety and environment-specific webpack customization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-webpack-final.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  webpackFinal: async (config, { configType }) => {
    if (configType === 'DEVELOPMENT') {
      // Modify config for development
    }
    if (configType === 'PRODUCTION') {
      // Modify config for production
    }
    return config;
  },
};

export default config;
```

----------------------------------------

TITLE: Initializing Button Story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines the component to be used in the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-simplificated.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Text: Story = {
  args: {},
};
```

----------------------------------------

TITLE: Initializing Button Stories for Web Components (TS)
DESCRIPTION: This code initializes Storybook stories for a web component button using TypeScript. It imports the necessary modules from '@storybook/web-components-vite' and defines the component's metadata, including global viewport settings. It also creates a story named 'OnPhone' that overrides the global viewport to simulate a mobile device.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  globals: {
    // 👇 Set viewport for all component stories
    viewport: { value: 'tablet', isRotated: false },
  },
};

export default meta;
type Story = StoryObj;

export const OnPhone: Story = {
  globals: {
    // 👇 Override viewport for this story
    viewport: { value: 'mobile1', isRotated: false },
  },
};
```

----------------------------------------

TITLE: Incorrect Story Export Example (JavaScript)
DESCRIPTION: This example demonstrates incorrect code because it only includes a default export and lacks a named export for a story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/story-exports.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default {
  title: 'Button',
  args: { primary: true },
  component: Button,
};
// no named export
```

----------------------------------------

TITLE: Configuring Webpack in Storybook Preset Addon
DESCRIPTION: This snippet shows how to use the webpackFinal API in a Storybook preset addon to customize the Webpack configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  webpackFinal: async (config, { configType }) => {
    // customize the Webpack config here
    return config;
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Meta for Web Component (TS)
DESCRIPTION: This code configures Storybook metadata for a web component using TypeScript. It sets the component name and defines the 'icon' argument with available options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-example',
  argTypes: {
    icon: {
      options: ['arrow-up', 'arrow-down', 'loading'],
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Initializing Button Story with Layout in Web Components (TS)
DESCRIPTION: This code initializes a Storybook story for a Web Components Button component with a centered layout using Typescript. It imports the necessary modules from '@storybook/web-components-vite' and defines a story with the layout parameter set to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const WithLayout: Story = {
  parameters: {
    layout: 'centered',
  },
};
```

----------------------------------------

TITLE: Initializing List Story with One Item in Solid (TS)
DESCRIPTION: This story renders the List component with a single ListItem in Solid using TypeScript. It imports the 'Unchecked' story and renders it within the List component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { List } from './List';

//👇 Instead of importing ListItem, we import the stories
import { Unchecked } from './ListItem.stories';

export const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

export const OneItem: Story = {
  render: (args) => (
    <List {...args}>
      <Unchecked {...Unchecked.args} />
    </List>
  ),
};
```

----------------------------------------

TITLE: Importing and Using Subtitle Block in Storybook MDX
DESCRIPTION: This snippet demonstrates how to import and use the Subtitle block in a Storybook MDX file. The Subtitle component is used to create a secondary heading for the documentation entry.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-subtitle.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
import { Subtitle } from '@storybook/addon-docs/blocks';

<Subtitle>This is the subtitle</Subtitle>
```

----------------------------------------

TITLE: Initializing Button Stories with React (JS)
DESCRIPTION: This code initializes Storybook stories for a React Button component using JavaScript, defining metadata and two stories: Accessible and Inaccessible. It imports the Button component and configures its properties and controls within the Storybook environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
  },
};

// This is an accessible story
export const Accessible = {
  args: {
    primary: false,
    label: 'Button',
  },
};

// This is not
export const Inaccessible = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};

```

----------------------------------------

TITLE: Configuring Button Story with Svelte CSF
DESCRIPTION: This code configures a Button component's story in Storybook using Svelte and the Component Story Format (CSF). It imports the necessary modules, defines the component, and sets up argTypes for the 'arrow' property, allowing users to select from predefined arrow icons using a select control in the Storybook UI. The options and labels for the arrow selection are also defined.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#_snippet_1

LANGUAGE: javascript
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';

  const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };

  const { Story } = defineMeta({
    component: Button,
    argTypes: {
      arrow: {
        options: Object.keys(arrows), // An array of serializable values
        mapping: arrows, // Maps serializable option values to complex arg values
        control: {
          type: 'select', // Type 'select' is automatically inferred when 'options' is defined
          labels: {
            // 'labels' maps option values to string labels
            ArrowUp: 'Up',
            ArrowDown: 'Down',
            ArrowLeft: 'Left',
            ArrowRight: 'Right',
          },
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Defining Simple and Complex Data Objects
DESCRIPTION: Defines two data objects, simpleData and complexData, which are used as arguments for the stories. The simpleData object contains a simple key-value pair, while the complexData object contains a nested object and imports data from a JSON file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#_snippet_6

LANGUAGE: javascript
CODE:
```
export const simpleData = { foo: 1, bar: 'baz' };
export const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };
```

----------------------------------------

TITLE: Initializing Button Story - Web Components (TS)
DESCRIPTION: This code initializes a Storybook story for a Web Components Button component in TypeScript. It defines the component as 'demo-button' and sets up the 'variant' argType with options for 'primary' and 'secondary'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  argTypes: {
    variant: {
      options: ['primary', 'secondary'],
      control: { type: 'radio' },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Replacing --static-dir with staticDirs
DESCRIPTION: Shows how to replace the deprecated `--static-dir` CLI flag with the `staticDirs` field in `.storybook/main.js`. The CLI directories are relative to the current working directory, whereas the `staticDirs` are relative to the location of `main.js`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_184

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  staticDirs: [
    "../public",
    "../static",
    { from: "../foo/assets", to: "/assets" },
  ],
};
```

----------------------------------------

TITLE: Documenting Button Component with MDX
DESCRIPTION: This MDX file documents the Button component using Storybook's addon-docs. It imports Meta and Story components to define the documentation page and associate it with the Button stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-title.md#_snippet_0

LANGUAGE: mdx
CODE:
```
import { Meta, Story } from '@storybook/addon-docs/blocks';

{/* 👇 Documentation-only page */}

<Meta title="Documentation" />

{/* 👇 Component documentation page */}
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

<Story of={ButtonStories.Primary} />
```

----------------------------------------

TITLE: ButtonGroup Story Definition (Vue Renderer, TS)
DESCRIPTION: Defines a Storybook story for the ButtonGroup component using Vue renderer with TypeScript. It imports the necessary types from Storybook, the ButtonGroup component, and Button stories. The 'Pair' story renders a ButtonGroup with primary and secondary buttons, binding arguments to the component using a render function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import ButtonGroup from './ButtonGroup.vue';

//👇 Imports the Button stories
import * as ButtonStories from './Button.stories';

const meta = {
  component: ButtonGroup,
} satisfies Meta<typeof ButtonGroup>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Pair: Story = {
  render: (args) => ({
    components: { ButtonGroup },
    setup() {
      return { args };
    },
    template: '<ButtonGroup v-bind="args" />',
  }),
  args: {
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  },
};
```

----------------------------------------

TITLE: Styling Storybook UI Components with CSS-in-JS
DESCRIPTION: This snippet demonstrates how to apply custom styles to Storybook UI components using CSS-in-JS. It defines styles for containers, sections, grids, and other UI elements used in the Storybook configuration guide.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/create-storybook/rendererAssets/common/Configure.mdx#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
<style>
  {`
  .sb-container {
    margin-bottom: 48px;
  }

  .sb-section {
    width: 100%;
    display: flex;
    flex-direction: row;
    gap: 20px;
  }

  img {
    object-fit: cover;
  }

  .sb-section-title {
    margin-bottom: 32px;
  }

  .sb-section a:not(h1 a, h2 a, h3 a) {
    font-size: 14px;
  }

  .sb-section-item, .sb-grid-item {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .sb-section-item-heading {
    padding-top: 20px !important;
    padding-bottom: 5px !important;
    margin: 0 !important;
  }
  .sb-section-item-paragraph {
    margin: 0;
    padding-bottom: 10px;
  }

  .sb-chevron {
    margin-left: 5px;
  }

  .sb-features-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 32px 20px;
  }

  .sb-socials {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }

  .sb-socials p {
    margin-bottom: 10px;
  }

  .sb-explore-image {
    max-height: 32px;
    align-self: flex-start;
  }

  .sb-addon {
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    background-color: #EEF3F8;
    border-radius: 5px;
  `}
</style>
```

----------------------------------------

TITLE: Initializing Storybook Preview API in TypeScript
DESCRIPTION: Sets up the Storybook preview by importing the start function from the preview API and initializing it with a framework-specific render function. The file includes global declarations and starts the Storybook preview environment, creating the API that Storybook uses to render stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-client-preview.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { start } from 'storybook/preview-api';

import './globals';

import render from './render';

const api = start(render);

// the boilerplate code
```

----------------------------------------

TITLE: Linking Stories with React LinkTo Component
DESCRIPTION: The `LinkTo` component from `@storybook/addon-links/react` provides a React-specific way to create links between stories.  It accepts `story` and `kind` props to specify the target story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import LinkTo from '@storybook/addon-links/react';

export default {
  title: 'Link',
};

export const first = () => <LinkTo story="second">Go to Second</LinkTo>;
export const second = () => <LinkTo story="first">Go to First</LinkTo>;
```

----------------------------------------

TITLE: Initializing List Story with React (JavaScript)
DESCRIPTION: This code defines a Storybook story for the List component in React using JavaScript. It imports the List and ListItem components and defines stories for Empty and OneItem scenarios. The OneItem story renders the List component with a ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_1

LANGUAGE: js
CODE:
```
import React from 'react';

import { List } from './List';
import { ListItem } from './ListItem';

export default {
  component: List,
  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent
};

export const Empty = {};

export const OneItem = {
  render: (args) => (
    <List {...args}>
      <ListItem />
    </List>
  ),
};
```

----------------------------------------

TITLE: Initializing Web Components Button Stories with TypeScript
DESCRIPTION: This code initializes Storybook stories for a web components Button component using TypeScript. It imports the necessary modules from '@storybook/web-components-vite' and defines metadata for the Button component, including a primary story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const PrimaryLongName: Story = {
  args: {
    ...Primary.args,
    label: 'Primary with a really long name',
  },
};
```

----------------------------------------

TITLE: Targeting Specific Elements with Pseudo Styles
DESCRIPTION: Example of targeting specific elements with pseudo styles by providing a CSS selector string or an array of CSS selectors to the `pseudo` property in the story parameters. This allows enabling pseudo styles only on the specified elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/pseudo-states/README.md#_snippet_3

LANGUAGE: jsx
CODE:
```
export const Buttons = () => (
  <>
    <Button id="one">Hover</Button>
    <Button id="two">Hover focus</Button>
    <Button id="three">Hover focus active</Button>
  </>
);
Buttons.parameters = {
  pseudo: {
    hover: ['#one', '#two', '#three'],
    focus: ['#two', '#three'],
    active: '#three',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Preview with Styled Components Decorator
DESCRIPTION: This snippet demonstrates how to set up a decorator in the Storybook preview file to wrap all stories with a ThemeProvider from styled-components. It uses a mock theme object for demonstration purposes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-providers.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { ThemeProvider } from 'styled-components';

const mockTheme = {
  // Your theme properties
};

export const decorators = [
  (Story) => (
    <ThemeProvider theme={mockTheme}>
      <Story />
    </ThemeProvider>
  ),
];
```

----------------------------------------

TITLE: Creating an Angular Component with Store Injection
DESCRIPTION: Defines an Angular component that checks whether a Store is injected. The component displays different text based on the store injection status.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.ugly-comments-stories.txt#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
@Component({
  selector: 'storybook-comp-with-store',
  template: '<div>{{this.getStoreState()}}</div>',
})
class WithStoreComponent {
  private store: Store<any>;

  constructor(store: Store<any>) {
    this.store = store;
  }

  getStoreState(): string {
    return this.store === undefined ? 'Store is NOT injected' : 'Store is injected';
  }
}
```

----------------------------------------

TITLE: Simulating Change Event in Storybook (Generic)
DESCRIPTION: This Storybook story simulates a change event on a select element within a component. It uses the `userEvent.selectOptions` function to select different options and `sleep` function to introduce delays between selections, demonstrating asynchronous interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

// Function to emulate pausing between interactions
function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleChangeEvent: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const select = canvas.getByRole('listbox');

    await userEvent.selectOptions(select, ['One Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Another Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Yet another item']);
  },
};
```

----------------------------------------

TITLE: Defining Svelte Storybook Meta with CSF (TS)
DESCRIPTION: This code defines a Storybook story for a Svelte component using the Component Story Format (CSF) in TypeScript. It imports defineMeta from @storybook/addon-svelte-csf and the YourComponent. It configures the component and sets the 'requiredFirst' sort order for controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-sort-controls.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import YourComponent from './YourComponent.svelte';

  const { Story } = defineMeta({
    component: YourComponent,
    parameters: { controls: { sort: 'requiredFirst' } },
  });
</script>
```

----------------------------------------

TITLE: Defining Svelte Storybook Meta with CSF for Page Component
DESCRIPTION: This code defines the Storybook meta configuration for a Svelte Page component using Component Story Format (CSF). It imports defineMeta from @storybook/addon-svelte-csf and the Page component. The defineMeta function configures the component and disables auto-generated documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Page from './Page.svelte';

  const { Story } = defineMeta({
    component: Page,
    // 👇 Disable auto-generated documentation for this component
    tags: ['!autodocs'],
  });
</script>
```

----------------------------------------

TITLE: Initializing Storybook with npm
DESCRIPTION: Command to initialize Storybook version 8.2 using npm package manager. This uses npx to execute the Storybook init command without requiring a global installation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command-custom-version.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@8.2 init
```

----------------------------------------

TITLE: JavaScript Storybook Main Configuration
DESCRIPTION: JavaScript configuration file for Storybook that defines the framework, story file patterns, and webpack configuration options. Allows for environment-specific webpack modifications.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-webpack-final.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  webpackFinal: async (config, { configType }) => {
    if (configType === 'DEVELOPMENT') {
      // Modify config for development
    }
    if (configType === 'PRODUCTION') {
      // Modify config for production
    }
    return config;
  },
};
```

----------------------------------------

TITLE: Describing Slots with JSDoc in Vue
DESCRIPTION: This code snippet shows how to use `defineSlots` to describe each slot in a Vue component using JSDoc comments. This allows Storybook to generate controls based on the slot definitions. Each slot is defined with its name, props, and a description.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
defineSlots<{ 
  /** Example description for default */
  default(props: { num: number }): any;
  /** Example description for named */
  named(props: { str: string }): any;
  /** Example description for no-bind */
  noBind(props: {}): any;
  /** Example description for vbind */
  vbind(props: { num: number; str: string }): any;
}>();
```

----------------------------------------

TITLE: Initializing Button Story (Common)
DESCRIPTION: This code initializes a Storybook story for a Button component. It imports the Button component and defines the title and component for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
};
```

----------------------------------------

TITLE: Configuring Vitest Workspace for React Storybook Testing
DESCRIPTION: Sets up a Vitest workspace configuration for testing React Storybook components using Playwright. Includes browser testing setup and Storybook integration configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-vitest-workspace.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { defineWorkspace } from 'vitest/config';
import { storybookTest } from '@storybook/addon-vitest/vitest-plugin';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const dirname =
  typeof __dirname !== 'undefined' ? __dirname : path.dirname(fileURLToPath(import.meta.url));

export default defineWorkspace([
  './vitest.config.ts',
  {
    extends: './vite.config.ts',
    plugins: [
      storybookTest({
        configDir: path.join(dirname, '.storybook'),
        storybookScript: 'yarn storybook --ci',
      }),
    ],
    test: {
      name: 'storybook',
      browser: {
        enabled: true,
        provider: 'playwright',
        headless: true,
        instances: [{ browser: 'chromium' }],
      },
      setupFiles: ['./.storybook/vitest.setup.ts'],
    },
  },
]);
```

----------------------------------------

TITLE: Running Storybook Tasks
DESCRIPTION: Runs a Storybook task, prompting the user to answer questions to determine the desired setup.  Allows for running sandboxes with different renderers. Requires Yarn to be installed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#_snippet_3

LANGUAGE: Shell
CODE:
```
yarn task
```

----------------------------------------

TITLE: Configuring MSW Handlers for GraphQL
DESCRIPTION: This code configures MSW handlers to mock GraphQL requests for the document screen component. It defines two stories: one that fetches data successfully and another that simulates a failure.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { graphql } from 'msw';

import { DocumentScreen } from './DocumentScreen';

export default {
  title: 'DocumentScreen',
  component: DocumentScreen,
};

const Template = () => <DocumentScreen />;

export const Success = Template.bind({});
Success.parameters = {
  msw: {
    handlers: [
      graphql.query('GetDocument', (req, res, ctx) => {
        return res(
          ctx.data({
            document: {
              title: 'My Document',
              content: 'This is the content of my document.',
            },
          })
        );
      }),
    ],
  },
};

export const Failure = Template.bind({});
Failure.parameters = {
  msw: {
    handlers: [
      graphql.query('GetDocument', (req, res, ctx) => {
        return res(ctx.status(500));
      }),
    ],
  },
};

```

----------------------------------------

TITLE: Running Storybook Sandbox with Version
DESCRIPTION: Generates sandboxes using a specific Storybook version (e.g., @latest, @8, @next). Useful for testing features or reproducing bugs in a particular version.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_108

LANGUAGE: Shell
CODE:
```
storybook[@version] sandbox [framework-filter] [options]
```

----------------------------------------

TITLE: Simulating User Input and Interactions in Storybook (Web Components - JS)
DESCRIPTION: This snippet demonstrates how to simulate user input and interactions within a Storybook story using JavaScript for web components. It uses `userEvent` to type into an input field and click a submit button, and `waitFor` to ensure the component updates as expected.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#_snippet_7

LANGUAGE: js
CODE:
```
import { userEvent, waitFor, within } from 'storybook/test';

export default {
  component: 'demo-my-component',
};

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleAsyncStory = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const Input = canvas.getByLabelText('Username', {
      selector: 'input',
    });

    await userEvent.type(Input, 'WrongInput', {
      delay: 100,
    });

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const Submit = canvas.getByRole('button');
    await userEvent.click(Submit);

    await waitFor(async () => {
      await userEvent.hover(canvas.getByTestId('error'));
    });
  },
};
```

----------------------------------------

TITLE: Overriding Globals in Portable Stories with Vitest
DESCRIPTION: This snippet demonstrates how to override global values in portable stories when composing a story, allowing stories to behave differently based on globals (e.g., rendering text in different languages). It uses Vitest for testing and shows how to modify project annotations to change the global values.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-vitest.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { composeStories } from '@storybook/react';
import { render, screen } from '@testing-library/react';
import * as stories from './Button.stories';

const { Primary } = composeStories(stories, {
  globals: {
    locale: 'es',
  },
});

test('renders in Spanish', () => {
  render(<Primary />);
  expect(screen.getByText('Hola Mundo')).toBeInTheDocument();
});
```

----------------------------------------

TITLE: Installing Storybook Addon Outline via npm
DESCRIPTION: Command to install the Storybook Addon Outline package using npm. This step is necessary if the addon is not already included in your Storybook setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/outline/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm i -D @storybook/addon-outline
```

----------------------------------------

TITLE: Removing and Installing Dependencies for Preact with Vite
DESCRIPTION: This command removes the webpack5 dependencies and installs the vite dependencies for Preact.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_23

LANGUAGE: bash
CODE:
```
npm remove @storybook/preact-webpack5 @storybook/preset-preact-webpack
npm install @storybook/preact-vite --save-dev
```

----------------------------------------

TITLE: Defining Story Metadata with Conditional Arguments in Svelte (CSF)
DESCRIPTION: This code defines the metadata for a Storybook story in Svelte using Component Story Format (CSF), configuring conditional arguments for the 'Example' component. It utilizes the 'if' property within 'argTypes' to conditionally display arguments based on the 'parent' argument's existence, truthiness, or specific value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      parent: { control: 'select', options: ['one', 'two', 'three'] },

      // 👇 Only shown when `parent` arg exists
      parentExists: { if: { arg: 'parent', exists: true } },

      // 👇 Only shown when `parent` arg does not exist
      parentDoesNotExist: { if: { arg: 'parent', exists: false } },

      // 👇 Only shown when `parent` arg value is truthy
      parentIsTruthy: { if: { arg: 'parent' } },
      parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },

      // 👇 Only shown when `parent` arg value is not truthy
      parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },

      // 👇 Only shown when `parent` arg value is 'three'
      parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },

      // 👇 Only shown when `parent` arg value is not 'three'
      parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },

      // Each of the above can also be conditional on the value of a globalType, e.g.:

      // 👇 Only shown when `theme` global exists
      parentExists: { if: { global: 'theme', exists: true } },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Vue Stories with Props (TypeScript)
DESCRIPTION: This code configures Storybook stories for a Vue component using TypeScript, defining the component and a story with a prop. It imports the necessary modules from '@storybook/vue3-vite' and the component itself, and defines a story that renders the component with a specific prop value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {
  render: () => ({
    components: { MyComponent },
    template: '<MyComponent />',
  }),
};

export const WithProp: Story = {
  render: () => ({
    components: { MyComponent },

```

----------------------------------------

TITLE: Initializing Page stories for Svelte (Svelte CSF)
DESCRIPTION: This code initializes Storybook stories for the Page component in a Svelte application using Svelte CSF. It imports the Page component and Header stories, and defines a 'LoggedIn' story, importing related Header stories to populate arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Page from './Page.svelte';
  //👇 Imports all Header stories
  import * as HeaderStories from './Header.stories.svelte';

  const { Story } = defineMeta({
    component: Page,
  });
</script>

<Story name="LoggedIn" args={{ ...HeaderStories.LoggedIn.args }} />
```

----------------------------------------

TITLE: Importing Storybook Meta Component and Next.js Image Component
DESCRIPTION: Imports necessary components from Storybook and Next.js, as well as various SVG and image assets used throughout the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/ts/Configure.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { Meta } from "@storybook/addon-docs/blocks";
import Image from "next/image";

import Github from "./assets/github.svg";
import Discord from "./assets/discord.svg";
import Youtube from "./assets/youtube.svg";
import Tutorials from "./assets/tutorials.svg";
import Styling from "./assets/styling.png";
import Context from "./assets/context.png";
import Assets from "./assets/assets.png";
import Docs from "./assets/docs.png";
import Share from "./assets/share.png";
import FigmaPlugin from "./assets/figma-plugin.png";
import Testing from "./assets/testing.png";
import Accessibility from "./assets/accessibility.png";
import Theming from "./assets/theming.png";
import AddonLibrary from "./assets/addon-library.png";
```

----------------------------------------

TITLE: Creating Custom Documentation Component in JavaScript
DESCRIPTION: A React component implementation that creates a custom documentation page in Storybook. It provides a basic structure with a header and explanatory text for replacing the default DocsPage.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/custom-docs-page.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

export function CustomDocumentationComponent() {
  return (
    <div>
      <h1>Replacing DocsPage with a custom component</h1>
      <p>
        The Docs page can be customized with your own custom content written as a React Component.
      </p>
      <p>Write your own code here👇</p>
    </div>
  );
}
```

----------------------------------------

TITLE: Define Story with SolidJS and CSF
DESCRIPTION: Defines a Storybook story using SolidJS. It uses createSignal and createEffect to assign the result of `someFunction` to a signal and then renders the component with the signal's value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_8

LANGUAGE: js
CODE:
```
const someFunction = (valuePropertyA, valuePropertyB) => {
  // Do some logic here
};

export const ExampleStory: Story = {
  render: (args) => {
    const [someFunctionResult, setSomeFunctionResult] = createSignal();

    //👇 Assigns the function result to a signal
    createEffect(() => {
      setSomeFunctionResult(someFunction(args.propertyA, args.propertyB));
    });

    return <YourComponent {...args} someProperty={someFunctionResult()} />;
  },
  args: {
    propertyA: 'Item One',
    propertyB: 'Another Item One',
  },
};
```

----------------------------------------

TITLE: Configuring Framework Options for Storybook Integration in TypeScript
DESCRIPTION: Exports a configuration object that defines how a custom framework integrates with Storybook. It retrieves the package.json information, specifies the framework name, path, and includes a required framework preset.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-server-framework-options.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { sync } from 'read-pkg-up';

export default {
  packageJson: sync({ cwd: __dirname }).packageJson,
  framework: 'my-framework',
  frameworkPath: '@my-framework/storybook',
  frameworkPresets: [require.resolve('./framework-preset-my-framework.js')],
};
```

----------------------------------------

TITLE: Initializing Web Components Storybook Story
DESCRIPTION: This code initializes a Storybook story for a web component named 'my-component'. It defines the component and title for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'my-component',
  title: 'components/MyComponent/MyComponent',
};

export const Default = {
  args: {
    something: 'Something else',
  },
};

```

----------------------------------------

TITLE: Importing Story Block Component
DESCRIPTION: Shows how to import the Story block component from Storybook addon-docs package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-story.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { Story } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Global State Management: Renaming 'globals' to 'initialGlobals'
DESCRIPTION: Renames the `globals` field in project annotations to `initialGlobals` for defining global state. This change ensures proper initialization of global variables within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_13

LANGUAGE: diff
CODE:
```
export const preview = {
- globals: {
+ initialGlobals: {
    theme: 'light'
  }
};
```

----------------------------------------

TITLE: Correct Meta Object Definition with Satisfies Operator
DESCRIPTION: Examples of correct meta object definitions using the 'satisfies Meta' type check for better type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/meta-satisfies-type.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
export default {
  title: 'Button',
  args: { primary: true },
  component: Button,
} satisfies Meta<typeof Button>;
```

LANGUAGE: typescript
CODE:
```
const meta = {
  title: 'Button',
  args: { primary: true },
  component: Button,
} satisfies Meta<typeof Button>;
export default meta;
```

----------------------------------------

TITLE: Registering JSON Stories Indexer in Storybook (TS)
DESCRIPTION: This code defines a custom Storybook indexer, `jsonStoriesIndexer`, to process JSON files as story sources. It reads the JSON file, extracts story definitions using `generateStoryIndexesFromJson`, and returns an array of story index entries. The indexer is then registered within the `experimental_indexers` configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-indexers-jsonstories.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/your-framework';
import type { Indexer } from 'storybook/internal/types';

import fs from 'fs/promises';

const jsonStoriesIndexer: Indexer = {
  test: /stories\.json$/,
  createIndex: async (fileName) => {
    const content = JSON.parse(fs.readFileSync(fileName));

    const stories = generateStoryIndexesFromJson(content);

    return stories.map((story) => ({
      type: 'story',
      importPath: `virtual:jsonstories--${fileName}--${story.componentName}`,
      exportName: story.name,
    }));
  },
};

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: [
    '../src/**/*.mdx',
    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',
    // 👇 Make sure files to index are included in `stories`
    '../src/**/*.stories.json',
  ],
  experimental_indexers: async (existingIndexers) => [...existingIndexers, jsonStoriesIndexer],
};

export default config;
```

----------------------------------------

TITLE: Implementing Button Component in Vue with JavaScript
DESCRIPTION: A Vue.js implementation of a Button component using the Options API. The component defines props with validation for the size property, emits click events, and provides detailed JSDoc comments for each property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-implementation.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
<template> <!-- The component markup implementation --> </template>

<script>
  export default {
    name: 'button',
    props: {
      /**
       * Button contents
       */
      label: {
        type: String,
        required: true,
      },
      /**
       * Is this the principal call to action on the page?
       */
      primary: {
        type: Boolean,
        default: false,
      },
      /**
       * How large should the button be?
       */
      size: {
        type: String,
        default: 'medium',
        validator: function (value) {
          return ['small', 'medium', 'large'].indexOf(value) !== -1;
        },
      },
      /**
       * What background color to use
       */
      backgroundColor: {
        type: String,
      },
    },
    emits: ['click'],
    setup(props, { emit }) {
      props = reactive(props);
      return {
        /**
         * Optional click handler
         */
        onClick() {
          emit('click');
        },
      };
    },
  };
</script>
```

----------------------------------------

TITLE: Initializing Button stories with Solid using Typescript
DESCRIPTION: This code defines Storybook stories for a Solid Button component using Typescript. It imports the Button component from './Button' and uses a decorator to add margin around the story. The decorator wraps the Story component with a div that has a margin of 3em.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        <Story />
      </div>
    ),
  ],
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Initializing Storybook Project Annotations for Svelte
DESCRIPTION: This snippet initializes Storybook project annotations for a Svelte project using Vite. It imports necessary modules from Storybook and Vitest, merges preview and addon annotations, and runs Storybook's beforeAll hook. This ensures that Storybook is properly initialized with the necessary settings and configurations before running stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { beforeAll } from 'vitest';
// 👇 If you're using Sveltekit, import from @storybook/sveltekit
import { setProjectAnnotations } from '@storybook/svelte-vite';
// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this
import * as addonAnnotations from 'my-addon/preview';
import * as previewAnnotations from './.storybook/preview';

const annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);

// Run Storybook's beforeAll hook
beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Optimizing Storybook Build for Performance and Tests (Shell)
DESCRIPTION: This command optimizes Storybook's production build for performance and tests by removing unnecessary features. It's useful in CI/CD environments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_37

LANGUAGE: shell
CODE:
```
storybook build --test
```

----------------------------------------

TITLE: Automigrate with Renderer
DESCRIPTION: Specifies Storybook's renderer to use when running the automigration. Useful for monorepo environments where multiple Storybook instances can exist in the same project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_97

LANGUAGE: shell
CODE:
```
storybook automigrate --renderer vue
```

----------------------------------------

TITLE: Customizing Storybook Preview Head in JavaScript
DESCRIPTION: This snippet shows how to customize the Storybook preview head in JavaScript. It adds custom CSS styles to change the background color of the preview.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  previewHead: (head) => `
    ${head}
    <style>
      html, body {
        background: #827979;
      }
    </style>
 `,
};
```

----------------------------------------

TITLE: Initializing TodoItem Story - Solid (TS)
DESCRIPTION: This code defines a Storybook story for the TodoItem component in Solid using TypeScript. It configures the component's metadata and includes a primary story with a render function and data loader.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { TodoItem } from './TodoItem';

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
const meta = {
  component: TodoItem,
  render: (args, { loaded: { todo } }) => <TodoItem {...args} {...todo} />,
} satisfies Meta<typeof TodoItem>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  loaders: [
    async () => ({
      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),
    }),
  ],
};

```

----------------------------------------

TITLE: Providing SSL Certificate for Angular Storybook
DESCRIPTION: Provides an SSL certificate for secure connections when HTTPS is enabled. This is required for HTTPS to function correctly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_21

LANGUAGE: JSON
CODE:
```
{"sslCert": "your-custom-certificate"}
```

----------------------------------------

TITLE: Configuring Storybook Story for Solid Component
DESCRIPTION: This snippet configures a Storybook story for a Solid component, adding a decorator that applies a margin around the rendered component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#_snippet_3

LANGUAGE: js
CODE:
```
import { YourComponent } from './YourComponent';

export default {
  component: YourComponent,
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </div>
    ),
  ],
};
```

----------------------------------------

TITLE: Initializing Storybook Preview with Decorator - Solid (TSX)
DESCRIPTION: This snippet initializes a Storybook preview configuration for Solid using TypeScript, defining a decorator that wraps stories with a layout based on the 'pageLayout' parameter. It renders a div with a specific class around the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import type { Preview } from 'storybook-solidjs';

const preview: Preview = {
  decorators: [
    // 👇 Defining the decorator in the preview file applies it to all stories
    (Story, { parameters }) => {
      // 👇 Make it configurable by reading from parameters
      const { pageLayout } = parameters;
      switch (pageLayout) {
        case 'page':
          return (
            // Your page layout is probably a little more complex than this ;)
            <div className="page-layout">
              <Story />
            </div>
          );
        case 'page-mobile':
          return (
            <div className="page-mobile-layout">
              <Story />
            </div>
          );
        default:
          // In the default case, don't apply a layout
          return <Story />;
      }
    },
  ],
};

export default preview;
```

----------------------------------------

TITLE: Initializing Storybook Meta with Mocked Date - Svelte CSF (TS)
DESCRIPTION: This code defines the meta object for a Storybook story using Svelte CSF with TypeScript. It imports necessary modules, including MockDate, and sets up a beforeEach hook to mock the Date object before each story runs, resetting it afterward. This ensures consistent date values during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MockDate from 'mockdate';

  // 👇 Must include the `.mock` portion of filename to have mocks typed correctly
  import { getUserFromSession } from '#api/session.mock';

  import Page from './Page.svelte';

  const meta = defineMeta({
    component: Page,
    // 👇 Set the value of Date for every story in the file
    async beforeEach() {
      MockDate.set('2024-02-14');

      // 👇 Reset the Date after each story
      return () => {
        MockDate.reset();
      };
    },
  });
</script>

<Story name="Default" play={async ({ canvasElement }) => {
  // ... This will run with the mocked Date
  }}
/>
```

----------------------------------------

TITLE: Configure Storybook to Show Root Stories
DESCRIPTION: This code snippet configures Storybook to display root stories when using the `/` separator, replicating the behavior of previous versions that used `|`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_248

LANGUAGE: javascript
CODE:
```
addParameters({
  options: {
    showRoots: true,
  },
});
```

----------------------------------------

TITLE: Listing Available Codemods with Storybook CLI
DESCRIPTION: This command lists all available codemods using the Storybook CLI's migrate command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npx sb migrate --list
```

----------------------------------------

TITLE: Installing Storybook for React Vite Using yarn - Shell
DESCRIPTION: This shell command uses yarn to add the @storybook/react-vite package as a development dependency for a React project. The prerequisite is a project managed with yarn and initialized with a package.json file. The command updates the project's dependencies and should be run at the application root in a terminal.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev @storybook/react-vite
```

----------------------------------------

TITLE: Defining Angular Storybook Meta for Page Component
DESCRIPTION: This code defines the Storybook meta configuration for an Angular Page component. It imports the Meta type from Storybook's Angular library and the Page component itself. The meta object configures the component to be Page and disables auto-generated documentation using tags.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Page } from './Page';

const meta: Meta<Page> = {
  component: Page,
  // 👇 Disable auto-generated documentation for this component
  tags: ['!autodocs'],
};
export default meta;
```

----------------------------------------

TITLE: Defining Story for DocumentScreen (JavaScript)
DESCRIPTION: This JavaScript code defines a Storybook story for the DocumentScreen component. It imports necessary modules and defines a 'Simple' story with predefined arguments for user, document, and subdocuments, pulling data from other stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-with-args-composition.md#_snippet_3

LANGUAGE: js
CODE:
```
import { DocumentScreen } from './YourPage';

// 👇 Imports the required stories
import * as PageLayout from './PageLayout.stories';
import * as DocumentHeader from './DocumentHeader.stories';
import * as DocumentList from './DocumentList.stories';

export default {
  component: DocumentScreen,
};

export const Simple = {
  args: {
    user: PageLayout.Simple.args.user,
    document: DocumentHeader.Simple.args.document,
    subdocuments: DocumentList.Simple.args.documents,
  },
};
```

----------------------------------------

TITLE: Correct Storybook Addon Configuration
DESCRIPTION: Example showing correct configuration where all addons are properly registered and listed in package.json dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-uninstalled-addons.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// in .storybook/main.js
module.exports = {
  addons: [
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/addon-interactions',
  ],
}
```

LANGUAGE: json
CODE:
```
{
  "devDependencies": {
    "@storybook/addon-links": "0.0.1",
    "@storybook/addon-essentials": "0.0.1",
    "@storybook/addon-interactions": "0.0.1"
  }
}
```

----------------------------------------

TITLE: GoBack Story Interaction Test (JavaScript)
DESCRIPTION: This story tests the 'GoBack' functionality of the MyForm component. It simulates a user click on the 'Go back' button and asserts that the router's back function is called.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-router-mock.md#_snippet_0

LANGUAGE: js
CODE:
```
import { expect, fireEvent, userEvent, within } from 'storybook/test';

/*
 * Replace your-framework with nextjs or nextjs-vite
 * 👇 Must include the `.mock` portion of filename to have mocks typed correctly
 */
import { getRouter } from '@storybook/your-framework/router.mock';

import MyForm from './my-form';

export default {
  component: MyForm,
};

export const GoBack = {
  async play({ canvasElement }) {
    const canvas = within(canvasElement);
    const backBtn = await canvas.findByText('Go back');

    await userEvent.click(backBtn);
    // 👇 Assert that your component called back()
    await expect(getRouter().back).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Svelte Button Story Implementation (JavaScript)
DESCRIPTION: Default story implementation for a Button component in Svelte using CSF 3 format. Uses JavaScript with Svelte's component and props pattern.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
export const Default = {
  render: (args) => ({
    Component: Button,
    props: args,
  });
};
```

----------------------------------------

TITLE: Configuring Storybook Decorators with React and Typescript
DESCRIPTION: This TypeScript snippet configures Storybook decorators for a React project. It imports React, StoryObj and Meta types from '@storybook/react-vite', a navigation story, and a global context provider. It defines a decorator, AppDecorator, which wraps stories with the GlobalContainerContext.Provider, providing a context object to the stories. This ensures that the stories have access to necessary data and render correctly within the Storybook environment. It also exports a preview configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-global.md#_snippet_1

LANGUAGE: ts
CODE:
```
import React from 'react';

import type { Meta, StoryObj } from '@storybook/react-vite';

import { normal as NavigationNormal } from '../components/Navigation.stories';

import GlobalContainerContext from '../components/lib/GlobalContainerContext';

const context = {
  NavigationContainer: NavigationNormal,
};

const AppDecorator = (storyFn) => {
  return (
    <GlobalContainerContext.Provider value={context}>{storyFn()}</GlobalContainerContext.Provider>
  );
};

const preview: Preview = {
  decorators: [AppDecorator],
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook Main Settings with TypeScript
DESCRIPTION: This TypeScript snippet defines the main configuration for a Storybook instance targeting a specified framework. It imports the framework-specific StorybookConfig type, sets the framework property placeholder (to be replaced based on actual usage such as react-webpack5 or vue3-webpack5), defines glob patterns for locating story files, and turns on strict TypeScript type checking. The configuration is exported as default, making it discoverable by Storybook at runtime. Dependencies include @storybook/your-framework and TypeScript support.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typescript-check.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-webpack5)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  typescript: {
    check: true,
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook Main File in JavaScript
DESCRIPTION: This snippet shows how to configure the main Storybook file in JavaScript. It sets the framework and defines story loading with a custom title prefix. The framework should be replaced with the specific framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-auto-title-custom.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: [
    {
      directory: '../src',
      titlePrefix: 'Custom', // 👈 Configure the title prefix
    },
  ],
};
```

----------------------------------------

TITLE: Configuring Page Story with Custom Footer in Svelte (TS)
DESCRIPTION: This code defines a Storybook story for the Page component in Svelte using TypeScript. It imports the necessary modules from '@storybook/addon-svelte-csf' and defines a meta object using defineMeta to configure the component. The Story component renders the Page with provided arguments and a footer snippet.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#_snippet_6

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Page from './Page.svelte';

  const { Story } = defineMeta({
    component: Page
  });
</script>

<Story name="CustomFooter" args={{ footer: 'Built with Storybook' }}>
  {#snippet template(args)}
    <Page {...args} >
      <footer>{args.footer}</footer>
    </Page>
  {/snippet}
</Story>
```

----------------------------------------

TITLE: Writing Stats JSON to Disk for Storybook Build (Shell)
DESCRIPTION: This command writes the Webpack stats JSON to disk, providing detailed information about the build process. It requires Webpack and is useful for analyzing build performance.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_35

LANGUAGE: shell
CODE:
```
storybook build --stats-json /tmp/stats
```

----------------------------------------

TITLE: Emit REMOVE_HIGHLIGHT Event with ID
DESCRIPTION: Emits the REMOVE_HIGHLIGHT event to remove a previously created highlight. The event requires the ID of the highlight to be removed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#_snippet_9

LANGUAGE: ts
CODE:
```
import { REMOVE_HIGHLIGHT } from 'storybook/highlight';

channel.emit(
  REMOVE_HIGHLIGHT, 
  id // The id of the previously created highlight to be removed
);
```

----------------------------------------

TITLE: Creating Storybook Story for HTML Component (TS)
DESCRIPTION: This code creates a Storybook story for an HTML component using TypeScript. It imports the necessary modules from '@storybook/html' and the createYourComponent function. It defines the component's metadata, render function, and arguments for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/html';

import { createYourComponent, ComponentProps } from './YourComponent';

//👇 This default export determines where your story goes in the story list
const meta: Meta<ComponentProps> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'YourComponent',
};

export default meta;
type Story = StoryObj<ComponentProps>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const FirstStory: Story = {
  render: (args) => createYourComponent(args),
  args: {
    // 👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Deprecated --static-dir CLI flag
DESCRIPTION: Shows the deprecated CLI flag `--static-dir` and the replacement `staticDirs` field in `.storybook/main.js`. The CLI directories are relative to the current working directory, whereas the `staticDirs` are relative to the location of `main.js`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_183

LANGUAGE: Shell
CODE:
```
start-storybook --static-dir ./public,./static,./foo/assets:/assets
```

----------------------------------------

TITLE: Defining a Storybook Story with an Image
DESCRIPTION: This JavaScript snippet defines a Storybook story named 'WithAnImage' that renders an image using Lit's html template literal. The image source is a placeholder from storybook.js.org, and it includes an alt attribute for accessibility.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import { html } from 'lit';

export default {
  component: 'my-component',
};

export const WithAnImage = {
  render: () =>
    html`<img
      src="https://storybook.js.org/images/placeholders/350x150.png"
      alt="My CDN placeholder"
    />`,
};
```

----------------------------------------

TITLE: Type Definition of useOf Hook in TypeScript
DESCRIPTION: This code snippet provides the TypeScript type definition for the useOf hook, showing its parameters and return type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-useof.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
(
  moduleExportOrType: ModuleExport | 'story' | 'meta' | 'component',
  validTypes?: Array<'story' | 'meta' | 'component'>
) => EnhancedResolvedModuleExportType
```

----------------------------------------

TITLE: Creating Template Components for Story Generation
DESCRIPTION: Demonstrates creating a template component for generating stories, enabling better args reuse and control through the Controls addon in composite components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/stories-for-multiple-components.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
<CodeSnippets path="list-story-template.md" />
```

----------------------------------------

TITLE: Configuring Svelte Story for Example Component
DESCRIPTION: This snippet configures a Storybook story for the Example component using Svelte. It defines the component and its argument types, specifically describing the 'value' property of a slider.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#_snippet_2

LANGUAGE: js
CODE:
```
import Example from './Example.svelte';

export default {
  component: Example,
  argTypes: {
    value: {
      description: 'The value of the slider',
    },
  },
};
```

----------------------------------------

TITLE: Configuring Conditional Imports in package.json
DESCRIPTION: This JSON configuration within package.json sets up conditional imports using the 'imports' field. It allows specifying different module implementations based on the environment, such as using mock implementations for Storybook and test environments. This is achieved by defining conditions like 'storybook' and 'test' that map to specific file paths.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/subpath-imports-config.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "imports": {
    "#api": {
      "storybook": "./api.mock.ts",
      "default": "./api.ts"
    },
    "#app/actions": {
      "storybook": "./app/actions.mock.ts",
      "default": "./app/actions.ts"
    },
    "#lib/session": {
      "storybook": "./lib/session.mock.ts",
      "default": "./lib/session.ts"
    },
    "#lib/db": {
      "test": "./lib/db.mock.ts",
      "default": "./lib/db.ts"
    },
    "#*": ["./*", "./*.ts", "./*.tsx"]
  }
}
```

----------------------------------------

TITLE: Initializing Button Story - JavaScript (Common)
DESCRIPTION: This code initializes a Storybook story for a Button component in JavaScript. It imports the Button component and defines its metadata, including the 'variant' argType with options for 'primary' and 'secondary'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#_snippet_4

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  argTypes: {
    variant: {
      options: ['primary', 'secondary'],
      control: { type: 'radio' },
    },
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for Angular Component
DESCRIPTION: This code initializes a Storybook story for an Angular component named MyComponent. It imports the necessary modules from '@storybook/angular' and defines a story named 'WithAnImage' that renders the component with a specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<typeof meta>;

export const WithAnImage: Story = {
  render: () => ({
    props: {
      src: 'https://storybook.js.org/images/placeholders/350x150.png',
      alt: 'My CDN placeholder',
    },
  }),
};
```

----------------------------------------

TITLE: Running Storybook in Kitchen Sink App
DESCRIPTION: Navigates to the official Storybook example app and starts Storybook.  This allows verification of local changes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.old.md#_snippet_13

LANGUAGE: bash
CODE:
```
cd examples/official-storybook
yarn storybook
```

----------------------------------------

TITLE: Customizing Storybook Preview Head with CSS in JavaScript
DESCRIPTION: This snippet defines a Storybook configuration that injects custom CSS styling into the preview iframe's head. It uses the previewHead option which takes a function that receives the existing head content and returns modified content with additional styles, specifically setting a yellow background for the #main element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-preview-head.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  previewHead: (head) => (`
    ${head}
    <style>
      #main {
        background-color: yellow;
      }
    </style>
  `);
};
```

----------------------------------------

TITLE: Button Sizes in TypeScript React
DESCRIPTION: Shows how to use the size prop to change the Button's size. The component supports 'small' and 'medium' sizes, allowing for flexibility in design.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
<Button size="small">Small Button</Button>
<Button size="medium">Medium Button</Button>
```

----------------------------------------

TITLE: Rendering Custom Template for Emoji Button Documentation
DESCRIPTION: This JSX snippet renders the imported Template component, which likely contains the structure and content for the Emoji Button documentation page. The Template component is expected to provide a consistent layout for documenting the Emoji Button component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/emoji-button.mdx#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
<Template />
```

----------------------------------------

TITLE: Including Node Modules Stories in Storybook
DESCRIPTION: This code snippet demonstrates how to include story files from node_modules in Storybook 7.0 by explicitly specifying the node_modules directory in the stories glob pattern.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_108

LANGUAGE: javascript
CODE:
```
export default {
  stories: ["../**/*.stories.*"],
};
```

LANGUAGE: javascript
CODE:
```
export default {
  stories: ["../**/*.stories.*", "../**/node_modules/**/*.stories.*"],
};
```

----------------------------------------

TITLE: Configuring Accessibility in Storybook Story for Svelte (CSF, JavaScript)
DESCRIPTION: This JavaScript snippet exports a Storybook CSF configuration for a Svelte component, showing how to define component meta and a story with custom a11y parameters in standard JS. It enables or disables accessibility rules and uses the 'manual' global option. The structure mirrors common JS-based Storybook setups for Svelte and is suitable for projects that use plain CSF rather than the Svelte CSF extension.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

export const ExampleStory = {
  parameters: {
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Rendering Markdown with the Markdown Block
DESCRIPTION: This snippet demonstrates how to render plain markdown content in Storybook docs using the new `Markdown` block. It imports a markdown file and renders it within the MDX document.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_128

LANGUAGE: MDX
CODE:
```
import { Markdown } from '@storybook/blocks';
import ReadMe from './README.md?raw';

...

<Markdown>{ReadMe}</Markdown>
```

----------------------------------------

TITLE: Defining Web Components Button Story (JS)
DESCRIPTION: This code defines a Storybook story for a Web Components Button component using JavaScript. It defines a default export with the component name. It then creates a success story with a 'primary' variant.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
};

export const Success = {
  args: {
    variant: 'primary',
  },
};

```

----------------------------------------

TITLE: Styled Highlight Story with React Decorator (JS)
DESCRIPTION: This snippet defines a Storybook story for a React component named 'MyComponent' and applies styled highlights to specific elements (h2, a, .storybook-button) using a decorator function. It utilizes the 'useChannel' hook to emit a 'HIGHLIGHT' event with styles, hover styles, focus styles, and keyframes for the highlight effect. The story function is invoked using storyFn().
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-custom-style.md#_snippet_1

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const StyledHighlight = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        styles: {
          backgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`,
          outline: '3px solid hotpink',
          animation: 'pulse 3s linear infinite',
          transition: 'outline-offset 0.2s ease-in-out',
        },
        hoverStyles: {
          outlineOffset: '3px',
        },
        focusStyles: {
          backgroundColor: 'transparent',
        },
        keyframes: `@keyframes pulse {
          0% { outline-color: rgba(255, 105, 180, 1); }
          50% { outline-color: rgba(255, 105, 180, 0.2); }
          100% { outline-color: rgba(255, 105, 180, 1); }
        }`,
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Configuring ESLint for Storybook in Flat Config Format (JavaScript)
DESCRIPTION: Sets up ESLint using the new flat config style, which is the default in ESLint v9. This configuration ensures that the Storybook plugin rules are applied correctly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
export default [
  // ...
  {
    // Inside your .eslintignore file
    ignores: ['!.storybook'],
  },
];
```

----------------------------------------

TITLE: Overriding MDX Components in Storybook - JavaScript
DESCRIPTION: This code snippet demonstrates how to override MDX components within Storybook using the `MDXProvider` from `@mdx-js/react`. It shows how to customize the rendering of specific HTML elements like `h1` and `h2` within the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_133

LANGUAGE: javascript
CODE:
```
import { MDXProvider } from "@mdx-js/react";
import { DocsContainer } from "@storybook/blocks";
import * as DesignSystem from "your-design-system";

export const MyDocsContainer = (props) => (
  <MDXProvider
    components={{
      h1: DesignSystem.H1,
      h2: DesignSystem.H2,
    }}
  >
    <DocsContainer {...props} />
  </MDXProvider>
);
```

----------------------------------------

TITLE: Importing Markdown Component in Storybook
DESCRIPTION: Shows how to import the Markdown component from Storybook's addon-docs package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-markdown.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { Markdown } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Changing Default Element Selector for A11y Addon
DESCRIPTION: This code snippet shows how to change the default element selector used by the Accessibility addon from `#storybook-root` to `body` by setting the `a11y.element` parameter in the preview configuration file. This aligns with the default element selector used by the Test addon and includes Tooltips/Popovers rendered outside `#storybook-root` in accessibility tests.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_35

LANGUAGE: diff
CODE:
```
// .storybook/preview.js
export const parameters = {
  a11y: {
+    element: '#storybook-root',
  },
};
```

----------------------------------------

TITLE: Configuring Webpack with Custom Loader in JavaScript
DESCRIPTION: Demonstrates how to extend Webpack configuration in a Storybook addon using JavaScript. Adds a custom file loader for handling specific file extensions while preserving existing rules.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-webpackFinal.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export function webpackFinal(config, options = {}) {
  const rules = [
    ...(config.module?.rules || []),
    {
      test: /\.custom-file-extension$/,
      loader: require.resolve(`custom-loader`),
    },
  ];
  config.module.rules = rules;

  return config;
}
```

----------------------------------------

TITLE: Configuring React-Docgen-Typescript Options in Storybook
DESCRIPTION: Sets options for react-docgen-typescript-plugin when used for parsing React components in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
export default {
  typescript: {
    reactDocgen: 'react-docgen-typescript',
    reactDocgenTypescriptOptions: {
      shouldExtractLiteralValuesFromEnum: true,
      propFilter: (prop) => (prop.parent ? !/node_modules/.test(prop.parent.fileName) : true),
    }
  }
};
```

----------------------------------------

TITLE: Simulating Filled Form Interactions (Svelte CSF)
DESCRIPTION: This code defines a Storybook story for a filled LoginForm, simulating user interactions such as typing in the email and password fields, clicking the submit button, and asserting that a success message is displayed. It uses 'storybook/test' for user event simulation and DOM querying.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_11

LANGUAGE: js
CODE:
```
<Story
  name="FilledForm"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));

    // 👇 Assert DOM structure
    await expect(
      canvas.getByText(
        'Everything is perfect. Your account is ready and we should probably get you started!'
      )
    ).toBeInTheDocument();
  }}
/>
```

----------------------------------------

TITLE: Initializing Storybook with yarn
DESCRIPTION: Command to initialize Storybook version 8.2 using yarn package manager. This uses yarn dlx to execute the Storybook init command without requiring a global installation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command-custom-version.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@8.2 init
```

----------------------------------------

TITLE: Installing MSW Dependencies with PNPM
DESCRIPTION: Installs Mock Service Worker (MSW) and MSW Storybook addon using PNPM package manager as development dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-install.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
pnpm add msw msw-storybook-addon --save-dev
```

----------------------------------------

TITLE: Configuring Automatic Browser Opening for Angular Storybook
DESCRIPTION: Determines whether Storybook should automatically open in the browser when it starts.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_25

LANGUAGE: JSON
CODE:
```
{"open": true}
```

----------------------------------------

TITLE: Configuring Server URL in Storybook Preview JavaScript
DESCRIPTION: This code configures the server URL that Storybook will connect to for rendering stories. It exports global parameters including the server URL.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
export const parameters = {
  server: {
    url: `http://localhost:${port}/storybook_preview`,
  },
};
```

----------------------------------------

TITLE: Defining React Component with TypeScript
DESCRIPTION: Creates a TypeScript interface to define prop types for a React component. It ensures user, document, and subdocuments are type-checked and displayed using imported components. Requires TypeScript and React setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
import PageLayout from './PageLayout';
import Document from './Document';
import SubDocuments from './SubDocuments';
import DocumentHeader from './DocumentHeader';
import DocumentList from './DocumentList';

export interface DocumentScreenProps {
  user?: {};
  document?: Document;
  subdocuments?: SubDocuments[];
}

export function DocumentScreen({ user, document, subdocuments }: DocumentScreenProps) {
  return (
    <PageLayout user={user}>
      <DocumentHeader document={document} />
      <DocumentList documents={subdocuments} />
    </PageLayout>
  );
}
```

----------------------------------------

TITLE: Setting Component in Story Metadata with Component Syntax
DESCRIPTION: TypeScript code example showing how to specify the component in story metadata using the Component Story Format.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { AppComponent } from './app.component';

export default {
  title: 'App Component',
  component: AppComponent,
};
```

----------------------------------------

TITLE: Registering a Tool Addon with Tab Visibility Filtering
DESCRIPTION: This example shows how to register a tool addon in Storybook and filter its visibility based on the current tab. The 'match' function receives a 'tabId' property, allowing the addon to show or hide its content accordingly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_78

LANGUAGE: typescript
CODE:
```
import { addons, types } from "@storybook/manager-api";

addons.register("my-addon", () => {
  addons.add("my-addon/tool", {
    type: types.TOOL,
    title: "My Addon",
    match: ({ tabId }) => tabId === "my-addon/tab",
    render: () => <div>👀</div>,
  });
});
```

----------------------------------------

TITLE: Specifying a Custom react-scripts Package for @storybook/preset-create-react-app
DESCRIPTION: Demonstrates how to configure the preset in `./.storybook/main.js` when using a custom or forked `react-scripts` package instead of the official one. The `scriptsPackageName` option allows specifying the exact npm package name (e.g., '@my/react-scripts') so the preset can locate and utilize its specific Webpack and Babel configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
module.exports = {
  addons: [
    {
      name: '@storybook/preset-create-react-app',
      options: {
        scriptsPackageName: '@my/react-scripts',
      },
    },
  ],
};
```

----------------------------------------

TITLE: Configuring Story Locations in Storybook Main JavaScript
DESCRIPTION: This JavaScript code configures the location of JSON story files in the Storybook main configuration file. It uses a glob pattern to specify the story file locations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
export default {
  stories: ['../stories/**/*.stories.json'],
};
```

----------------------------------------

TITLE: Configuring Viewports in Storybook Preview
DESCRIPTION: This code snippet demonstrates how to configure the viewport addon in Storybook's `preview.js` or `preview.ts` file. It defines custom viewports using the `options` property and sets the initial viewport using the `initialGlobals` property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/viewport.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export const parameters = {
  viewport: {
    viewports: {
      mobile1: {
        name: 'Small mobile',
        styles: {
          width: '320px',
          height: '568px',
        },
      },
      tablet1: {
        name: 'Tablet',
        styles: {
          width: '768px',
          height: '1024px',
        },
      },
    },
  },
};

export const globalTypes = {
  viewport: {
    name: 'Viewport',
    description: 'Global viewport parameter',
    defaultValue: 'mobile1',
    toolbar: {
      icon: 'mobile',
      // Array of plain string values or MenuItem shape (see below)
      items: ['mobile1', 'tablet1', 'desktop'],
      // Property that specifies if the name of the item will be displayed
      title: true,
      // Change title based on selected value
      dynamicTitle: true,
    },
  },
};

```

----------------------------------------

TITLE: Importing Checkbox Stories for Common Renderer
DESCRIPTION: Basic MDX configuration for importing Checkbox stories using the common renderer in Storybook documentation
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-imports.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Canvas, Meta } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories';
```

----------------------------------------

TITLE: Migrating Storybook to Latest Version
DESCRIPTION: Command to migrate an existing Storybook project to the latest version, particularly useful when upgrading from Webpack 4 to Webpack 5.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
<CodeSnippets path="storybook-automigrate.md" />
```

----------------------------------------

TITLE: Defining Svelte Storybook story using CSF (TypeScript)
DESCRIPTION: This snippet defines a Storybook story for a Svelte component using Component Story Format (CSF) with TypeScript. It imports defineMeta from '@storybook/addon-svelte-csf', defines the component to be used, and exports a story named 'Baz'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/foo-bar-baz-story.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Foo from './Foo.svelte';

  const { Story } = defineMeta({
    /* 👇 The title prop is optional.
     * See https://storybook.js.org/docs/configure/#configure-story-loading
     * to learn how to generate automatic titles
     */
    title: 'Foo/Bar',
    component: Foo,
  });
</script>

<Story name="Baz" />
```

----------------------------------------

TITLE: Initializing MyForm Storybook Story (TypeScript)
DESCRIPTION: This TypeScript code initializes a Storybook story for the MyForm component, configuring Next.js parameters and defining interactions for unauthenticated and 'Go Back' scenarios. It uses mocked navigation functions to assert redirection and back navigation, leveraging TypeScript types for better code safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-mock.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Meta, StoryObj } from '@storybook/your-framework';

import { expect, fireEvent, userEvent, within } from 'storybook/test';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { redirect, getRouter } from '@storybook/your-framework/navigation.mock';

import MyForm from './my-form';

const meta = {
  component: MyForm,
  parameters: {
    nextjs: {
      // 👇 As in the Next.js application, next/navigation only works using App Router
      appDirectory: true,
    },
  },
} satisfies Meta<typeof MyForm>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Unauthenticated: Story = {
  async play() {
    // 👇 Assert that your component called redirect()
    await expect(redirect).toHaveBeenCalledWith('/login', 'replace');
  },
};

export const GoBack: Story = {
  async play({ canvasElement }) {
    const canvas = within(canvasElement);
    const backBtn = await canvas.findByText('Go back');

    await userEvent.click(backBtn);
    // 👇 Assert that your component called back()
    await expect(getRouter().back).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Initializing Storybook with Yarn
DESCRIPTION: This command uses Yarn's dlx feature to run the Storybook initialization script for version 7 or higher. It sets up Storybook in the current project using Yarn as the package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-init-v7.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@^7 init
```

----------------------------------------

TITLE: Rendering Document Data with Solid
DESCRIPTION: This Solid component fetches user, document, and subdocument data using a GraphQL query. It handles loading and error states, and renders the data using the PageLayout, DocumentHeader, and DocumentList components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#_snippet_4

LANGUAGE: ts
CODE:
```
import { createGraphQLClient, gql } from '@solid-primitives/graphql';

import { PageLayout } from './PageLayout';
import { DocumentHeader } from './DocumentHeader';
import { DocumentList } from './DocumentList';

const newQuery = createGraphQLClient('https://foobar.com/v1/api');
const AllInfoQuery = gql`
  query AllInfo {
    user {
      userID
      name
    }
    document {
      id
      userID
      title
      brief
      status
    }
    subdocuments {
      id
      userID
      title
      content
      status
    }
  }
`;

interface Data {
  allInfo: {
    user: {
      userID: number;
      name: string;
      opening_crawl: boolean;
    };
    document: {
      id: number;
      userID: number;
      title: string;
      brief: string;
      status: string;
    };
    subdocuments: {
      id: number;
      userID: number;
      title: string;
      content: string;
      status: string;
    };
  };
}

function useFetchInfo() {
  const [data] = newQuery<Data>(AllInfoQuery, { path: 'home' });
  return data;
}

export function DocumentScreen() {
  const data = useFetchInfo();

  return (
    <Switch>
      <Match when={data.loading}>
        <p>Loading...</p>
      </Match>
      <Match when={data.error}>
        <p>There was an error fetching the data!</p>
      </Match>
      <Match when={data()} keyed>
        {(data) => (
          <PageLayout user={data.user}>
            <DocumentHeader document={data.document} />
            <DocumentList documents={data.subdocuments} />
          </PageLayout>
        )}
      </Match>
    </Switch>
  );
}
```

----------------------------------------

TITLE: Storybook Story with Click Simulation (Svelte)
DESCRIPTION: This code defines a Storybook story for a Svelte component, including a play function that simulates a click event on a button. It imports necessary modules from '@storybook/your-framework' and 'storybook/test', retrieves the canvas element, and uses userEvent to simulate the click.  The 'your-framework' import should be replaced with 'svelte-vite' or 'sveltekit'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { fireEvent, userEvent, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ClickExample: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));
  },
};

export const FireEventExample: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await fireEvent.click(canvas.getByTestId('data-testid'));
  },
};
```

----------------------------------------

TITLE: Configuring Compodoc in Angular Project
DESCRIPTION: This configuration in `angular.json` includes Compodoc in Storybook's builder configuration, allowing Storybook to access component metadata generated by Compodoc.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "your-project": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/your-project",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.app.json",
            "assets": ["src/favicon.ico", "src/assets"],
            "styles": ["src/styles.css"],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "buildOptimizer": false,
              "optimization": false,
              "vendorChunk": true,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "browserTarget": "your-project:build:production"
            },
            "development": {
              "browserTarget": "your-project:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "browserTarget": "your-project:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/karma:karma",
          "options": {
            "main": "src/test.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.spec.json",
            "karmaConfig": "karma.conf.js",
            "assets": ["src/favicon.ico", "src/assets"],
            "styles": ["src/styles.css"],
            "scripts": []
          }
        },
        "lint": {
          "builder": "@angular-eslint/builder:lint",
          "options": {
            "lintFilePatterns": ["src/**/*.ts", "src/**/*.html"]
          }
        },
        "storybook": {
          "builder": "@storybook/angular:start-storybook",
          "options": {
            "configDir": ".storybook",
            "browserTarget": "your-project:build",
            "compodoc": true,
            "compodocArgs": ["-e", "json", "-d", "."]
          }
        }
      }
    }
  },
  "defaultProject": "your-project",
  "cli": {
    "packageManager": "npm",
    "schematicCollections": ["@angular-eslint/schematics"],
    "analytics": false
  }
}
```

----------------------------------------

TITLE: Creating Basic Storybook Story
DESCRIPTION: Defines a basic Storybook story for a component. It imports the component and exports a default object containing the component. The ExampleStory is configured with specific arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-env-variables.md#_snippet_3

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const ExampleStory = {
  args: {
    propertyA: process.env.STORYBOOK_DATA_KEY,
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with Webpack and GraphQL (TypeScript)
DESCRIPTION: TypeScript configuration for Storybook using Webpack bundler with GraphQL support. Includes type definitions and sets up loaders for .graphql and .gql files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/webpack-final-to-vite-final.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, nextjs, angular)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  async webpackFinal(config) {
    config.module?.rules?.push({
      test: /\.(graphql|gql)$/,
      include: [path.resolve('./lib/emails')],
      exclude: /node_modules/,
      loader: 'graphql-tag/loader',
    });
    config.module?.rules?.push({
      test: /\.(graphql|gql)$/,
      include: [path.resolve('./lib/schema')],
      exclude: /node_modules/,
      loader: 'raw-loader',
    });

    return config;
  },
};

export default config;
```

----------------------------------------

TITLE: Opting Out of Args First Behavior
DESCRIPTION: This code snippet shows how to opt out of the new Args-first behavior in Storybook 6.0 by setting the `passArgsFirst` parameter to `false` in the `.storybook/preview.js` config. This will revert to the old behavior of passing the `StoryContext` as the first argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_216

LANGUAGE: javascript
CODE:
```
export const parameters = {
  passArgsFirst: false,
};
```

----------------------------------------

TITLE: Initializing Angular Button Story
DESCRIPTION: This snippet initializes a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines the component metadata, including the component itself and arguments like onClick, which uses 'fn' to spy on the click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-onclick-action-spy.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { fn } from 'storybook/test';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  // 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked
  args: { onClick: fn() },
};

export default meta;
```

----------------------------------------

TITLE: Defining Svelte Story with Play Function (TS)
DESCRIPTION: This code defines a Svelte Storybook story with a play function that simulates a user click on a button within the component's canvas. It uses the `userEvent` and `within` utilities to interact with the DOM and trigger actions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#_snippet_5

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, within } from 'storybook/test';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<!--
  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
  to learn more about using the canvasElement to query the DOM
-->
<Story
  name="ExampleWithRole"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button', { name: / button label/i }));
  }} />
```

----------------------------------------

TITLE: Webpack Configuration in Storybook 5.0 (JavaScript)
DESCRIPTION: This snippet shows the simplified API for custom webpack configuration in Storybook 5.0. It demonstrates how to override the webpack config using a function that takes a parameters object with `config` and `mode` fields and returns a configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_256

LANGUAGE: JavaScript
CODE:
```
module.exports = ({ config, mode }) => { config.module.rules.push(...); return config; }
```

----------------------------------------

TITLE: Configure Storybook Preview with Table of Contents (TypeScript)
DESCRIPTION: Configures the Storybook preview settings using TypeScript, specifically focusing on the table of contents (TOC) for documentation. It defines CSS selectors for the content area and heading levels to include in the TOC, as well as a selector for elements to exclude. It also sets the TOC title and disables the TOC.  Note the placeholder for the framework type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-custom-toc.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    docs: {
      toc: {
        contentsSelector: '.sbdocs-content',
        headingSelector: 'h1, h2, h3',
        ignoreSelector: '#primary',
        title: 'Table of Contents',
        disable: false,
        unsafeTocbotOptions: {
          orderedList: false,
        },
      },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Initializing Button Stories with Solid (TS)
DESCRIPTION: This code initializes Storybook stories for a Solid Button component using TypeScript, defining metadata and two stories: Accessible and Inaccessible. It imports necessary modules from 'storybook-solidjs' and the Button component, configuring the component's properties and their controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_5

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

// This is an accessible story
export const Accessible: Story = {
  args: {
    primary: false,
    label: 'Button',
  },
};

// This is not
export const Inaccessible: Story = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};

```

----------------------------------------

TITLE: Initializing Button stories with Svelte CSF
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using the Component Story Format (CSF). It imports necessary modules from '@storybook/addon-svelte-csf', imports the Button and MarginDecorator components, and defines the Story using 'defineMeta'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_7

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';
  import MarginDecorator from './MarginDecorator.svelte';

  const { Story } = defineMeta({
    component: Button,
    decorators: [() => MarginDecorator],
  });
</script>
```

----------------------------------------

TITLE: Initializing Button Story - Preact
DESCRIPTION: This code initializes a Storybook story for a Preact Button component. It imports the Button component and exports a default object that specifies the component to be used in the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_2

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};
```

----------------------------------------

TITLE: Installing Chromatic addon with pnpm
DESCRIPTION: Command to add the Chromatic integration to a Storybook project using pnpm as the package manager. Uses pnpm dlx to execute the Storybook CLI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-storybook-add.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@latest add @chromatic-com/storybook
```

----------------------------------------

TITLE: Setting Up Global Container Context
DESCRIPTION: Example of setting up global container context in Storybook's preview configuration
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/build-pages-with-storybook.mdx#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import { GlobalContainerContext } from './GlobalContainerContext';
import { UserMenu } from './UserMenu.stories';

export const decorators = [
  (Story) => (
    <GlobalContainerContext.Provider
      value={{
        UserMenu: UserMenu.Mock,
      }}
    >
      <Story />
    </GlobalContainerContext.Provider>
  ),
];
```

----------------------------------------

TITLE: Running CSF Hoist Story Annotations Codemod
DESCRIPTION: This command runs the csf-hoist-story-annotations codemod using jscodeshift. It updates the story annotations to use the new hoisted format in CSF.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/codemod/README.md#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
./node_modules/.bin/jscodeshift -t ./node_modules/@storybook/codemod/dist/transforms/csf-hoist-story-annotations.js . --ignore-pattern "node_modules|dist" --extensions=js
```

----------------------------------------

TITLE: Build Storybook Frontpage
DESCRIPTION: Builds the Storybook website's frontpage. This step is crucial for previewing changes locally and verifying that everything is working as expected.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#_snippet_10

LANGUAGE: shell
CODE:
```
npm run build:frontpage
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: This snippet defines the Storybook configuration using JavaScript. It sets the framework, specifies story file patterns, and configures webpack to use an alias for the src directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-ts-module-resolution-atsign-import.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import path from 'path';

export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  webpackFinal: async (config) => {
    if (config.resolve) {
      config.resolve.alias = {
        ...config.resolve.alias,
        '@': path.resolve(__dirname, '../src'),
      };
    }
    return config;
  },
};
```

----------------------------------------

TITLE: Defining Svelte Button Stories with CSF
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and defines a primary story with arguments for the primary state and label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });

  const primaryArgs = {
    primary: true,
    label: 'Button',
  }
</script>

<Story name="Primary" args={primaryArgs} />

<Story name="PrimaryLongName"
  args={{
    ...primaryArgs,
    label: 'Primary with a really long name'
  }} />
```

----------------------------------------

TITLE: Initializing Story with Play Function in Svelte (JS - CSF)
DESCRIPTION: This code defines a Storybook story for a Svelte component named MyComponent using the Component Story Format (CSF). It uses the play function to simulate user interaction: typing 'WrongInput' into a username field, clicking a submit button, and hovering over an error message. It relies on storybook/test for userEvent and waitFor utilities.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#_snippet_2

LANGUAGE: js
CODE:
```
import { userEvent, waitFor, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleAsyncStory = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const Input = canvas.getByLabelText('Username', {
      selector: 'input',
    });

    await userEvent.type(Input, 'WrongInput', {
      delay: 100,
    });

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const Submit = canvas.getByRole('button');
    await userEvent.click(Submit);

    await waitFor(async () => {
      await userEvent.hover(canvas.getByTestId('error'));
    });
  },
};
```

----------------------------------------

TITLE: Configuring Compodoc in angular.json
DESCRIPTION: This configuration adds Compodoc options to the Storybook builder in angular.json. It specifies the use of Compodoc and provides arguments for generating documentation in JSON format.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_4

LANGUAGE: jsonc
CODE:
```
{
  "projects": {
    "your-project": {
      "architect": {
        "storybook": {
          "builder": "@storybook/angular:start-storybook",
          "options": {
            // 👇 Add these
            "compodoc": true,
            "compodocArgs": [
              "-e",
              "json",
              "-d",
              // Where to store the generated documentation. It's usually the root of your Angular project. It's not necessarily the root of your Angular Workspace!
              "."
            ],
          }
        },
        "build-storybook": {
          "builder": "@storybook/angular:build-storybook",
          "options": {
            // 👇 Add these
            "compodoc": true,
            "compodocArgs": [
              "-e",
              "json",
              "-d",
              "."
            ],
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Correct Story Export Example (JavaScript)
DESCRIPTION: This example demonstrates correct code because it includes both a default export and at least one named export for a story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/story-exports.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default {
  title: 'Button',
  args: { primary: true },
  component: Button,
};
export const Primary = {}; // at least one named export!
```

----------------------------------------

TITLE: Configuring Button Story with Common Framework (TS)
DESCRIPTION: This code configures a Storybook story for a Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines metadata for the component, including tags for documentation. It also defines a story for an experimental feature.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  /*
   * All stories in this file will have these tags applied:
   * - autodocs
   * - dev (implicit default, inherited from preview)
   * - test (implicit default, inherited from preview)
   */
  tags: ['autodocs'],

```

----------------------------------------

TITLE: Transformed Story with Source Snippet in JavaScript for Storybook CSF
DESCRIPTION: This snippet demonstrates how the CSF plugin transforms a basic story by adding a static source snippet. It adds a 'storySource' parameter containing the original source code of the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/csf-plugin/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export const Basic = () => <Button />;
Basic.parameters = {
  storySource: {
    source: '() => <Button />',
  },
  ...Basic.parameters,
};
```

----------------------------------------

TITLE: Initializing Button Story - Solid (JS)
DESCRIPTION: This code defines a Storybook story for a Solid Button component using JavaScript. It imports the Button component and the action function from 'storybook/actions'. The 'Text' story is configured with arguments for the label and onClick event, and a render function that returns the Button component with the specified props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_3

LANGUAGE: js
CODE:
```
import { action } from 'storybook/actions';

import { Button } from './Button';

export default {
  component: Button,
};

export const Text = {
  args: {
    label: 'Hello',
    onClick: action('clicked'),
  },
  render: ({ label, onClick }) => <Button label={label} onClick={onClick} />,
};
```

----------------------------------------

TITLE: Defining Documentation Page Configuration in YAML
DESCRIPTION: YAML front matter configuration for a documentation page that defines the title and sidebar properties for content about importing stories in tests.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/index.mdx#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
title: Import stories in tests
sidebar:
  order: 8
  title: Import stories in tests
```

----------------------------------------

TITLE: Defining Button Story with Layout in Svelte (CSF)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component with a centered layout using Component Story Format (CSF). It imports the Button component and exports a default object containing the component, along with a named export 'WithLayout' that sets the layout parameter to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

export const WithLayout = {
  parameters: {
    layout: 'centered',
  },
};
```

----------------------------------------

TITLE: Creating Checkbox Documentation with Svelte Renderer using Standard CSF in MDX
DESCRIPTION: This MDX document provides documentation for a Checkbox component using Storybook's Svelte renderer with standard Component Story Format. It imports stories from a regular stories file and displays an example of the unchecked state using Canvas.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story.md#2025-04-22_snippet_2

LANGUAGE: mdx
CODE:
```
import { Canvas, Meta } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories';

<Meta of={CheckboxStories} />

# Checkbox

A checkbox is a square box that can be activated or deactivated when ticked.

Use checkboxes to select one or more options from a list of choices.

<Canvas of={CheckboxStories.Unchecked} />
```

----------------------------------------

TITLE: Configuring Storybook Meta Export in React
DESCRIPTION: Defines the story metadata including title and story filtering configurations using excludeStories and includeStories patterns.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.csf-meta-var.txt#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
const meta = {
  title: "Button",
  excludeStories: ["text"],
  includeStories: /emoji.*/
};

export default meta;
```

----------------------------------------

TITLE: package.json scripts with compodoc
DESCRIPTION: Shows the original scripts section in package.json, including compodoc calls. This configuration is used before migrating to the Angular Storybook builder.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_10

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "docs:json": "compodoc -p tsconfig.json -e json -d ./documentation",
    "storybook": "npm run docs:json && start-storybook -p 6006",
    "build-storybook": "npm run docs:json && build-storybook"
  }
}
```

----------------------------------------

TITLE: Highlighting Story Elements in Svelte (CSF, JS)
DESCRIPTION: This snippet demonstrates how to highlight specific elements within a Svelte Storybook story using the `useChannel` hook and the `HIGHLIGHT` event within a Component Story Format (CSF). It utilizes a decorator to wrap the story function and emit the highlight event with specified CSS selectors, enabling visual emphasis on particular parts of the component during development.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight.md#_snippet_3

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { useChannel } from 'storybook/preview-api';
  import { HIGHLIGHT } from 'storybook/highlight';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="Highlighted"
  decorators=[
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
      });
      return storyFn();
    },
  ]
/>
```

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

export const Highlighted = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Defining Primary Story with Render Function - Vue
DESCRIPTION: This code defines a primary story for a Page component in Storybook using a render function. It configures the component's rendering, sets up arguments, and defines the template for the story. It also imports arguments from a Header story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_11

LANGUAGE: javascript
CODE:
```
export const Primary: Story = {
  render: (args) => ({
    components: { Page },
    setup() {
      return { args };
    },
    template: '<page v-bind="args" />',
  }),
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};
```

----------------------------------------

TITLE: Reset Highlighted Elements in Storybook
DESCRIPTION: Emits a `RESET_HIGHLIGHT` event to clear all highlighted elements in Storybook. This removes all highlights, even those created by other addons. This is useful for manually clearing highlights when transitioning between stories or when needed in an addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
import { useEffect } from '@storybook/client-api';

export const Reset = () => {
  useEffect(() => {
    const channel = window.__STORYBOOK_ADDONS_CHANNEL__;
    channel.emit('HIGHLIGHT', { selectors: ['#root > div'] });

    channel.emit('RESET_HIGHLIGHT');

    return () => channel.emit('REMOVE_HIGHLIGHT');
  }, []);

  return (
    <div style={{ padding: '3rem' }}>
      <p>Highlighting the outer div</p>
    </div>
  );
};

Reset.storyName = 'reset';

```

----------------------------------------

TITLE: Configuring Story Sorting in Storybook
DESCRIPTION: Example of adding a custom sorting function for stories using the storySort parameter in Storybook's preview.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/manager/README.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
addParameters({
  options: {
    storySort: (a, b) => a[1].id.localeCompare(b[1].id),
  },
});
```

----------------------------------------

TITLE: Button Component API Update
DESCRIPTION: Updates the Button component to use the new `variant` and `size` props instead of the deprecated `isLink`, `primary`, `secondary`, `tertiary`, `gray`, `inForm`, `small`, `outline`, and `containsIcon` props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_11

LANGUAGE: diff
CODE:
```
- <Button primary small>Click me</Button>
+ <Button variant="primary" size="small">Click me</Button>
```

----------------------------------------

TITLE: Defining Button Stories for Web Components (TS)
DESCRIPTION: This code defines Storybook stories for a web component named 'demo-button' using TypeScript. It imports Meta and StoryObj types from the Storybook framework and defines primary, secondary, and tertiary stories with different labels and background colors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-using-args.md#_snippet_14

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Primary: Story = {
  args: {
    backgroundColor: '#ff0',
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    ...Primary.args,
    label: '😄👍😍💯',
  },
};

export const Tertiary: Story = {
  args: {

```

----------------------------------------

TITLE: Scroll Into View Story with Decorator (Svelte CSF JS)
DESCRIPTION: This story demonstrates how to use a decorator in Svelte CSF to emit the SCROLL_INTO_VIEW event when the story is rendered. It uses the useChannel hook to emit the event to the Storybook channel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-scroll-into-view.md#_snippet_3

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { useChannel } from 'storybook/preview-api';
  import { SCROLL_INTO_VIEW } from 'storybook/highlight';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="ScrollIntoView"
  decorators={[
    (storyFn) => {
      const emit = useChannel({});
      emit(SCROLL_INTO_VIEW, '#footer');
      return storyFn();
    },
  ]}
/>
```

----------------------------------------

TITLE: Button Story with Args
DESCRIPTION: This snippet demonstrates how to render a Button component in the "primary" state and export a story called "Primary" using arguments. It showcases the use of args to define the component's properties and how they are used to render the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/whats-a-story.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { Button } from './Button';

// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
  title: 'Example/Button',
  component: Button,
  parameters: {
    // More on how to position stories at: https://storybook.js.org/docs/react/configure/story-layout
    layout: 'centered',
  },
  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes
  argTypes: {},
} satisfies Meta<typeof Button>;

export default meta;

type Story = StoryObj<typeof meta>;

// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    label: 'Button',
  },
};

export const Large: Story = {
  args: {
    size: 'large',
    label: 'Button',
  },
};

export const Small: Story = {
  args: {
    size: 'small',
    label: 'Button',
  },
};

```

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { Button } from './Button';

// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
  title: 'Example/Button',
  component: Button,
  parameters: {
    // More on how to position stories at: https://storybook.js.org/docs/react/configure/story-layout
    layout: 'centered',
  },
  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes
  argTypes: {},
} satisfies Meta<typeof Button>;

export default meta;

type Story = StoryObj<typeof meta>;

// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    label: 'Button',
  },
};

export const Large: Story = {
  args: {
    size: 'large',
    label: 'Button',
  },
};

export const Small: Story = {
  args: {
    size: 'small',
    label: 'Button',
  },
};

```

----------------------------------------

TITLE: SolidJS Document Screen Component
DESCRIPTION: SolidJS implementation of the Document Screen component using createSignal for state management and Switch/Match components for conditional rendering.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { createSignal, Match, Switch } from 'solid-js';

import { PageLayout } from './PageLayout';
import { DocumentHeader } from './DocumentHeader';
import { DocumentList } from './DocumentList';

function useFetchData() {
  const [status, setStatus] = createSignal('idle');
  const [data, setData] = createSignal([]);

  setStatus('loading');
  fetch('https://your-restful-endpoint')
    .then((res) => {
      if (!res.ok) {
        throw new Error(res.statusText);
      }
      return res;
    })
    .then((res) => res.json())
    .then((data) => {
      setStatus('success');
      setData(data);
    })
    .catch(() => {
      setStatus('error');
    });

  return {
    status,
    data,
  };
}
export function DocumentScreen() {
  const { status, data } = useFetchData();

  return (
    <Switch>
      <Match when={status() === 'loading'}>
        <p>Loading...</p>
      </Match>
      <Match when={status() === 'error'}>
        <p>There was an error fetching the data!</p>
      </Match>
      <Match when={user} keyed>
        <PageLayout user={data().user}>
          <DocumentHeader document={data().document} />
          <DocumentList documents={data().subdocuments} />
        </PageLayout>
      </Match>
    </Switch>
  );
}
```

----------------------------------------

TITLE: Initializing Button Story for Web Components
DESCRIPTION: This code initializes a Storybook story for a Web Components Button component. It defines a basic story with autoplay enabled in the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  title: 'Button',
  component: 'demo-button',
};

export const Basic = {
  parameters: {
    docs: {
      story: { autoplay: true },
    },
  },
};
```

----------------------------------------

TITLE: Importing Required Components and Utilities for Storybook Theming in JavaScript
DESCRIPTION: This snippet imports necessary components from Storybook's addon-docs and theming utilities. It sets up the foundation for displaying color palettes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/colorpalette.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { Meta, ColorPalette, ColorItem } from '@storybook/addon-docs/blocks';

import { themes, ThemeProvider, convert, ensure } from 'storybook/theming';

import { SideBySide } from './SideBySide';
```

----------------------------------------

TITLE: Configuring Storybook with TsconfigPathsPlugin in TypeScript
DESCRIPTION: This snippet shows the TypeScript version of the Storybook configuration. It includes type definitions, sets up the framework, defines story locations, and integrates TsconfigPathsPlugin for webpack. The configuration is exported as a StorybookConfig type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-ts-module-resolution.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

import TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  webpackFinal: async (config) => {
    if (config.resolve) {
      config.resolve.plugins = [
        ...(config.resolve.plugins || []),
        new TsconfigPathsPlugin({
          extensions: config.resolve.extensions,
        }),
      ];
    }
    return config;
  },
};

export default config;
```

----------------------------------------

TITLE: Defining Basic Story with CSF
DESCRIPTION: This JavaScript snippet defines a basic story using Component Story Format (CSF) for a Button component. It imports React and the Button component, then exports a named story called 'basic' that renders the Button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { Button } from './Button';

// NOTE: no default export since `Button.stories.mdx` is the story file for `Button` now
//
// export default {
//   title: 'Demo/Button',
//   component: Button,
// };

export const basic = () => <Button>Basic</Button>;
basic.parameters = {
  foo: 'bar',
};
```

----------------------------------------

TITLE: Enabling Legacy MDX1 Support in Storybook - JavaScript
DESCRIPTION: This code snippet shows how to enable legacy MDX1 support in Storybook by setting the `legacyMdx1` feature flag in the `.storybook/main.js` file. This allows processing `.stories.mdx` files with MDX1 instead of MDX2.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_134

LANGUAGE: javascript
CODE:
```
export default {
  features: {
    legacyMdx1: true,
  },
};
```

----------------------------------------

TITLE: Setting up Apollo Client and Mocked Data (React)
DESCRIPTION: This code initializes an Apollo Client instance with a specified URI, an InMemoryCache, and default options to disable caching and handle errors. It also defines a TestData object containing mocked data for the component. This setup is used to provide mocked data to the DocumentScreen component within a Storybook story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_3

LANGUAGE: js
CODE:
```
import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';
import { graphql, HttpResponse, delay } from 'msw';

import { DocumentScreen } from './YourPage';

const mockedClient = new ApolloClient({
  uri: 'https://your-graphql-endpoint',
  cache: new InMemoryCache(),
  defaultOptions: {
    watchQuery: {
      fetchPolicy: 'no-cache',
      errorPolicy: 'all',
    },
    query: {
      fetchPolicy: 'no-cache',
      errorPolicy: 'all',
    },
  },
});

//👇The mocked data that will be used in the story
const TestData = {
  user: {
    userID: 1,
    name: 'Someone',
  },
  document: {
    id: 1,
    userID: 1,
    title: 'Something',
    brief: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    status: 'approved',
  },
  subdocuments: [
    {
      id: 1,
      userID: 1,
      title: 'Something',
      content:
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
      status: 'approved',
    },
  ],
};

```

----------------------------------------

TITLE: Initializing Button Story (Common) with TS
DESCRIPTION: This code initializes a Storybook story for a Button component using TypeScript. It imports the Button component and defines the title and component for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Initializing Storybook Meta for Web Components (TS)
DESCRIPTION: This snippet initializes the Storybook meta object for a web component using TypeScript. It imports the necessary modules from '@storybook/web-components-vite' and defines the component to be documented as 'my-component'. It also creates a simple story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-storyname.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const Simple: Story = {
  name: 'So simple!',
  // ...
};
```

----------------------------------------

TITLE: Enabling Crash Reports in Storybook
DESCRIPTION: This command enables crash reporting in Storybook by setting the STORYBOOK_ENABLE_CRASH_REPORTS environment variable to 1 before running the storybook command. When enabled, Storybook will send crash reports that help the development team identify and fix issues.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-storybook-enable-crash-reports-env.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
STORYBOOK_ENABLE_CRASH_REPORTS=1 yarn storybook
```

----------------------------------------

TITLE: Defining Vue Button Stories with TypeScript
DESCRIPTION: This code defines Storybook stories for a Vue Button component using TypeScript. It imports the Button component and defines metadata including argTypes for controlling the background color. It exports two stories: Accessible and Inaccessible, demonstrating different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3';

import Button from './Button.vue';

const meta = {
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

// This is an accessible story
export const Accessible: Story = {
  args: {
    primary: false,
    label: 'Button',
  },
};
// This is not
export const Inaccessible: Story = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};
```

----------------------------------------

TITLE: Configuring Manager Head in Storybook Main File
DESCRIPTION: This snippet shows how to use the managerHead API in the Storybook main.js file to customize the manager UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
module.exports = {
  managerHead: (head) => `
    ${head}
    <style>
      .sidebar-header {
        background-color: #ff0 !important;
      }
    </style>
  `,
};
```

----------------------------------------

TITLE: Installing TypeScript Definitions for Storybook
DESCRIPTION: This command installs the necessary TypeScript definitions for Node.js, React, and Storybook's React integration. It is required for TypeScript users starting with Storybook version 3.1.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_291

LANGUAGE: sh
CODE:
```
yarn add @types/node @types/react @types/storybook__react --dev
```

----------------------------------------

TITLE: Generating Test Runner Configuration
DESCRIPTION: Command to eject and generate a custom test runner configuration file for configuring Jest options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
npx sb@latest test-runner eject
```

----------------------------------------

TITLE: Configuring Story File Types in main.js
DESCRIPTION: Configuration to load both JavaScript and MDX story files in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
export default {
  stories: ['../src/stories/**/*.stories.@(js|mdx)'],
};
```

----------------------------------------

TITLE: GitHub Actions Workflow for Chromatic
DESCRIPTION: GitHub Actions workflow configuration for automatically publishing Storybook to Chromatic on push events
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/publish-storybook.mdx#2025-04-22_snippet_1

LANGUAGE: yaml
CODE:
```
name: "Chromatic"
on: push
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: yarn
      - uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          token: ${{ secrets.GITHUB_TOKEN }}
```

----------------------------------------

TITLE: Setting Jest Parameter in Angular Storybook Story
DESCRIPTION: This snippet demonstrates how to set the `jest` parameter in an Angular Storybook story. The `jest` parameter is set to the name of the component file, allowing the addon to display the test results for that story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/jest/README.md#_snippet_11

LANGUAGE: typescript
CODE:
```
// MyComponent.stories.ts
import type { Meta, StoryFn } from '@storybook/angular';
import MyComponent from './MyComponent.component';

export default {
  component: MyComponent,
  title: 'MyComponent',
} as Meta;

const Template: StoryFn<MyComponent> = (args: MyComponent) => ({
  props: args,
});

export const Default = Template.bind({});
Default.parameters = {
  jest: 'MyComponent.component',
};
```

----------------------------------------

TITLE: Enabling Crash Reports in Storybook with pnpm
DESCRIPTION: Command to run Storybook with crash reports enabled using pnpm as the package manager. Note that with pnpm, the -- delimiter is not needed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-storybook-enable-crash-reports-flag.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm run storybook --enable-crash-reports
```

----------------------------------------

TITLE: Importing Dependencies for Storybook Info Addon in React
DESCRIPTION: Imports the necessary dependencies from React, Storybook, and the Info addon, along with custom components that will be used in the stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { storiesOf } from '@storybook/react';
import { withInfo } from '@storybook/addon-info';

import { DocgenButton } from '../components/DocgenButton';
import FlowTypeButton from '../components/FlowTypeButton';
import BaseButton from '../components/BaseButton';
import TableComponent from '../components/TableComponent';
```

----------------------------------------

TITLE: Structuring JSON Data for Dynamic Story Generation in Storybook
DESCRIPTION: Example JSON structure for dynamic story generation. This file defines components and their stories with associated arguments that will be processed by a custom indexer.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{
  "Button": {
    "componentPath": "./button/Button.jsx",
    "stories": {
      "Primary": {
        "args": {
          "primary": true
        },
      "Secondary": {
        "args": {
          "primary": false
        }
      }
    }
  },
  "Dialog": {
    "componentPath": "./dialog/Dialog.jsx",
    "stories": {
      "Closed": {},
      "Open": {
        "args": {
          "isOpen": true
        }
      },
    }
  }
}
```

----------------------------------------

TITLE: Svelte Button Story Implementation (JavaScript)
DESCRIPTION: Implements a Button story for Svelte using JavaScript and CSF 2 format. Shows component and props pattern specific to Svelte.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import Button from './Button.svelte';

export default {
  title: 'Button',
  component: Button,
};

export const Primary = (args) => ({
  Component: Button,
  props: args,
});
Primary.args = { primary: true };
```

----------------------------------------

TITLE: Configuring Ember CLI Build with Storybook Integration in JavaScript
DESCRIPTION: This code configures an Ember application build process to enable Storybook integration with addon documentation support. It creates an EmberApp instance with specific Storybook configuration options and returns the application's build tree.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-ember-cli-build.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
'use strict';

const EmberApp = require('ember-cli/lib/broccoli/ember-app');

module.exports = function (defaults) {
  const app = new EmberApp(defaults, {
    '@storybook/ember-cli-storybook': {
      enableAddonDocsIntegration: true,
    },
  });

  return app.toTree();
};
```

----------------------------------------

TITLE: Global Decorator Configuration
DESCRIPTION: Example of setting up a global decorator in Storybook's preview configuration file
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/decorators.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
export const decorators = [
  (Story) => (
    <div style={{ margin: '3em' }}>
      <Story />
    </div>
  ),
];
```

----------------------------------------

TITLE: Configuring MDX File Loading
DESCRIPTION: Configuration to enable loading of MDX files in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue3/README.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
export default {
  stories: ['../src/stories/**/*.stories.@(js|mdx)'],
};
```

----------------------------------------

TITLE: Initializing Svelte Button Story (CSF - TS)
DESCRIPTION: This snippet initializes a Storybook story for a Svelte Button component using TypeScript and the Component Story Format (CSF). It imports 'defineMeta' from '@storybook/addon-svelte-csf' and defines the component metadata, including the component itself and arguments like onClick, which uses 'fn' to spy on the click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-onclick-action-spy.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { fn } from 'storybook/test';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    // 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked
    args: { onClick: fn() },
  });
</script>
```

----------------------------------------

TITLE: Configure Sidebar Options in Storybook
DESCRIPTION: This code snippet demonstrates how to configure sidebar options, specifically the `showRoots` option, within the `sidebar` namespace in Storybook's configuration. The top-level `showRoots` option is deprecated and will be removed in Storybook 7.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_200

LANGUAGE: javascript
CODE:
```
addons.setConfig({
  sidebar: {
    showRoots: false,
  },
  // showRoots: false   <- this is deprecated
});
```

----------------------------------------

TITLE: Displaying Version Number
DESCRIPTION: Outputs the version number of the Storybook CLI being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
storybook dev -V
```

----------------------------------------

TITLE: Importing Storybook Functionality in TypeScript
DESCRIPTION: Demonstrates the correct way to import Storybook functionality for consumers. This approach ensures compatibility with future versions of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/README.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { addons } from 'storybook/manager-api';
```

----------------------------------------

TITLE: Initializing List Story with Solid (TypeScript)
DESCRIPTION: This code defines a Storybook story for the List component in Solid using TypeScript. It imports the List and ListItem components and defines stories for Empty and OneItem scenarios. The OneItem story renders the List component with a ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { List } from './List';
import { ListItem } from './ListItem';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
  //👈 Adds the ListItem component as a subcomponent
  subcomponents: { ListItem },
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Empty: Story = {};

export const OneItem: Story = {
  render: (args) => (
    <List {...args}>
      <ListItem />
    </List>
  ),
};
```

----------------------------------------

TITLE: Initializing Button Story with Svelte CSF
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports defineMeta from @storybook/addon-svelte-csf, imports the Button component, and defines the story with auto-generated documentation enabled.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-meta.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    //👇 Enables auto-generated documentation for this component and includes all stories in this file
    tags: ['autodocs'],
  });
</script>
```

----------------------------------------

TITLE: Filling Registration Form Story - Common
DESCRIPTION: This story simulates filling out the registration form with an email and password, then submitting the form. It uses Storybook's `userEvent` to type into the input fields and click the submit button. The `within` function is used to query elements within the canvas.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#_snippet_3

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

import { RegistrationForm } from './RegistrationForm';

export default {
  component: RegistrationForm,
};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const emailInput = canvas.getByLabelText('email', {
      selector: 'input',
    });

    await userEvent.type(emailInput, 'example-email@email.com', {
      delay: 100,
    });

    const passwordInput = canvas.getByLabelText('password', {
      selector: 'input',
    });

    await userEvent.type(passwordInput, 'ExamplePassword', {
      delay: 100,
    });
    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const submitButton = canvas.getByRole('button');

    await userEvent.click(submitButton);
  },
};
```

----------------------------------------

TITLE: Applying TypeScript 'satisfies' Operator at Story Level
DESCRIPTION: Example showing how to apply the TypeScript 'satisfies' operator at the individual story level for more granular type checking while maintaining type inference.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/typescript.mdx#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
<CodeSnippets path="button-story-baseline-with-satisfies-story-level.md" />
```

----------------------------------------

TITLE: Specifying Configuration Directory for Storybook Migrate
DESCRIPTION: Sets the configuration directory for the Storybook project when running the `migrate` command. This is useful when the configuration is not in the default location.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_83

LANGUAGE: Shell
CODE:
```
storybook migrate --config-dir .storybook
```

----------------------------------------

TITLE: Setting Component in Story Metadata with storiesOf API
DESCRIPTION: TypeScript code example showing how to specify the component in story metadata using the older storiesOf API.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
import { storiesOf } from '@storybook/angular';
import { AppComponent } from './app.component';

storiesOf('App Component', module)
  .addParameters({ component: AppComponent })
  .add( ... );
```

----------------------------------------

TITLE: Initializing Button Story - Vue - TS
DESCRIPTION: This snippet initializes a Storybook story for a Vue Button component using TypeScript. It imports the necessary modules from '@storybook/vue3-vite' and defines a Meta object to configure the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = { component: Button } satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = { args: { primary: true } };
```

----------------------------------------

TITLE: Import Controls from addon-docs
DESCRIPTION: Imports the `Controls` component from the `@storybook/addon-docs/blocks` module. This import is necessary to use the `Controls` block within MDX documentation files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-controls.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import { Controls } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Defining Angular Button Story
DESCRIPTION: This code defines a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and the Button component itself. It then defines metadata for the component and creates a primary story with a 'primary' variant.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Primary: Story = {
  args: {
    variant: 'primary',
  },
};

```

----------------------------------------

TITLE: Mocking Successful GraphQL Query with MSW in Storybook
DESCRIPTION: This code snippet demonstrates how to mock a successful GraphQL query in Storybook using MSW. It defines a handler for the 'AllInfoQuery' query that returns a mocked response with data from the 'TestData' object. The handler is configured within the 'msw' parameter of the Story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_12

LANGUAGE: typescript
CODE:
```
export const MockedSuccess: Story = {
  parameters: {
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', () => {
          return HttpResponse.json({
            data: {
              allInfo: {
                ...TestData,
              },
            },
          });
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Installing MSW Dependencies with NPM
DESCRIPTION: Installs Mock Service Worker (MSW) and MSW Storybook addon using NPM package manager as development dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-install.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm install msw msw-storybook-addon --save-dev
```

----------------------------------------

TITLE: Initializing Storybook Story for Vue Component (TypeScript)
DESCRIPTION: This code initializes a Storybook story for a Vue component named MyComponent using TypeScript. It imports the necessary modules from '@storybook/vue3-vite' and defines a story named 'WithAnImage' that renders the component with a specified image source and alt text using a template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const WithAnImage: Story = {
  render: () => ({
    template:
      '<img src="https://storybook.js.org/images/placeholders/350x150.png" alt="My CDN placeholder"/>',
  }),
};
```

----------------------------------------

TITLE: Migrating from Experimental Next.js Vite Builder
DESCRIPTION: This code snippet demonstrates how to update the dependencies in `package.json` to use the stable `@storybook/nextjs-vite` package instead of the experimental `@storybook/experimental-nextjs-vite` package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_28

LANGUAGE: diff
CODE:
```
{
  "dependencies": {
-   "@storybook/experimental-nextjs-vite": "^x.x.x"
+   "@storybook/nextjs-vite": "^9.0.0"
  }
}
```

----------------------------------------

TITLE: Configuring Storybook Story with TypeScript
DESCRIPTION: TypeScript implementation of a Storybook story configuration for DataTable component, using Meta type and including accessibility test parameters that display warnings instead of failures.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-todo-in-meta.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-renderer with the renderer you are using (e.g., react, vue3)
import { Meta } from '@storybook/your-renderer';

import { DataTable } from './DataTable';

const meta: Meta<typeof DataTable> = {
  component: DataTable,
  parameters: {
    // 👇 This component's accessibility tests will not fail
    //    Instead, they display warnings in the Storybook UI
    a11y: { test: 'todo' },
  },
};
export default meta;
```

----------------------------------------

TITLE: Configuring Compodoc in angular.json
DESCRIPTION: JSON configuration to set up Compodoc in the Angular project's angular.json file, for generating documentation metadata.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_4

LANGUAGE: json
CODE:
```
// angular.json
{
  "projects": {
    "your-project": {
      "architect": {
        "storybook": {
          ...,
          "compodoc": true,
          "compodocArgs": [
            "-e",
            "json",
            "-d",
            "." // the root folder of your project
          ],
        },
        "build-storybook": {
          ...,
          "compodoc": true,
          "compodocArgs": [
            "-e",
            "json",
            "-d",
            "." // the root folder of your project
          ],
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Primary Button Story in HTML (TypeScript)
DESCRIPTION: This TypeScript code configures a primary button story within Storybook for an HTML component. It imports necessary modules from '@storybook/html' and defines the component and its arguments, setting the label to 'Button' and primary to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/html';

import { createButton, ButtonArgs } from './Button';

const meta: Meta<ButtonArgs> = {
  render: (args) => createButton(args),
};

export default meta;
type Story = StoryObj<ButtonArgs>;

export const Primary: Story = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Testing Single Story with Metadata
DESCRIPTION: Demonstrates how to test a single story using composeStory function with story metadata included.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { render, screen } from '@testing-library/react';
import { composeStory } from '@storybook/react';
import Meta, { Primary } from './Button.stories';

const PrimaryButton = composeStory(Primary, Meta);

test('renders primary button', () => {
  render(<PrimaryButton />);
  expect(screen.getByRole('button')).toBeInTheDocument();
});
```

----------------------------------------

TITLE: Creating a Documentation Template in Storybook with MDX
DESCRIPTION: This MDX template provides a structured layout for documenting Storybook components. It imports necessary blocks from Storybook's addon-docs and defines sections for displaying the component, its props, and variations. The Meta component includes the isTemplate property to indicate this is a reusable template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-mdx-template-with-prop.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Meta, Title, Primary, Controls, Stories } from '@storybook/addon-docs/blocks';

{/*
  * 👇 The isTemplate property is required to tell Storybook that this is a template
  * See https://storybook.js.org/docs/api/doc-blocks/doc-block-meta
  * to learn how to use
*/}

<Meta isTemplate />

<Title />

# Default implementation

<Primary />

## Inputs

The component accepts the following inputs (props):

<Controls />

---

## Additional variations

Listed below are additional variations of the component.

<Stories />
```

----------------------------------------

TITLE: Disable Inline Story Rendering in Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet configures Storybook's preview settings to disable inline rendering of stories within the Docs addon. It imports the `Preview` type from `@storybook/your-framework` and sets the `inline` property of the `story` object within the `docs` parameter to `false`. This prevents stories from being rendered directly within the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-optout-inline.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    docs: {
      // Opt-out of inline rendering
      story: { inline: false },
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Defining Non-A11y Story in Svelte Storybook (JavaScript)
DESCRIPTION: This Svelte CSF story definition uses JavaScript to define 'MyComponent', disabling automatic a11y checks and showcasing how '@storybook/addon-svelte-csf' is utilized.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="NonA11yStory"
  globals={{
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  }}
/>

```

----------------------------------------

TITLE: Configuring Button Story for Web Components (JavaScript)
DESCRIPTION: This JavaScript code configures a Storybook story for a web component named 'demo-button'. It sets the component and disables a specific addon using parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-disable-addon.md#_snippet_3

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
  parameters: {
    myAddon: { disable: true }, // Disables the addon
  },
};
```

----------------------------------------

TITLE: Replacing collapseAll and expandAll APIs with Events
DESCRIPTION: The `collapseAll` and `expandAll` APIs have been removed. Emit `STORIES_COLLAPSE_ALL` and `STORIES_EXPAND_ALL` events instead.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_75

LANGUAGE: typescript
CODE:
```
import {
  STORIES_COLLAPSE_ALL,
  STORIES_EXPAND_ALL,
} from "@storybook/core-events";
import { useStorybookApi } from "@storybook/manager-api";

const api = useStorybookApi();
api.collapseAll(); // becomes api.emit(STORIES_COLLAPSE_ALL)
api.expandAll(); // becomes api.emit(STORIES_EXPAND_ALL)
```

----------------------------------------

TITLE: Framework Globals Configuration
DESCRIPTION: Global variable configuration for framework identification
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
window.FRAMEWORK = true;
```

----------------------------------------

TITLE: Defining Button Story with ArgTypes in Svelte (JS)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component. It imports the Button component and defines a 'Basic' story with argTypes to control the 'label' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

export const Basic = {
  argTypes: {
    // 👇 This story expects a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
};
```

----------------------------------------

TITLE: Initializing Primary Button Story with Render Function
DESCRIPTION: Defines a Storybook story named 'Primary' for a demo button. The render function uses lit's html template literal to create a demo-button element with a specified background color and label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_14

LANGUAGE: typescript
CODE:
```
export const Primary: Story = {
  render: () => html`<demo-button .backgroundColor="#ff0" .label="Button"></demo-button>`,
};
```

----------------------------------------

TITLE: Creating a Custom StoryName Block with useOf in React
DESCRIPTION: This snippet demonstrates how to create a custom StoryName block using the useOf hook. It renders the story name or title based on the type of reference passed to it.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-useof.mdx#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { useOf } from '@storybook/addon-docs/blocks';

/**
 * A block that displays the story name or title from the of prop
 * - if a story reference is passed, it renders the story name
 * - if a meta reference is passed, it renders the stories' title
 * - if nothing is passed, it defaults to the primary story
 */
export const StoryName = ({ of }) => {
  const resolvedOf = useOf(of || 'story', ['story', 'meta']);
  switch (resolvedOf.type) {
    case 'story': {
      return <h1>{resolvedOf.story.name}</h1>;
    }
    case 'meta': {
      return <h1>{resolvedOf.preparedMeta.title}</h1>;
    }
  }
  return null;
};
```

----------------------------------------

TITLE: GitHub Pages Deployment Workflow
DESCRIPTION: GitHub Actions workflow configuration for deploying Storybook to GitHub Pages
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/publish-storybook.mdx#2025-04-22_snippet_2

LANGUAGE: yaml
CODE:
```
name: Deploy Storybook to GitHub Pages

on:
  push:
    branches:
      - "main" # or "master"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: yarn
      - uses: bitovi/github-actions-storybook-to-github-pages@v1.0.1
```

----------------------------------------

TITLE: Configuring Storybook Test Runner in TypeScript
DESCRIPTION: This TypeScript code configures the Storybook Test Runner. It imports the TestRunnerConfig type, defines a configuration object with a 'skip' tag, and exports the config.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-tags-skip.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';

const config: TestRunnerConfig = {
  tags: {
    skip: ['skip-test'],
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Page Story with Custom Footer in Vue (JS)
DESCRIPTION: This code defines a Storybook story for the Page component in Vue using JavaScript. It imports the Page component and defines a default export object with the component and a render function. The render function renders the Page component with the provided arguments and a footer slot containing the custom footer text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#_snippet_7

LANGUAGE: js
CODE:
```
import Page from './Page.vue';

export default {
  component: Page,
  render: (args) => ({
    components: { Page },
    setup() {
      return { args };
    },
    template: `
      <page v-bind="args">
        <template v-slot:footer>
          <footer v-if="args.footer" v-html="args.footer" />
        </template>
      </page>
    `,
  }),
};

export const CustomFooter = {
  args: {
    footer: 'Built with Storybook',
  },
};
```

----------------------------------------

TITLE: Configuring Inline Stories in preview.js
DESCRIPTION: JavaScript configuration to set all stories to render in an iframe instead of inline by updating the preview.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
export const parameters = { docs: { story: { inline: false } } };
```

----------------------------------------

TITLE: Frontmatter Configuration for Storybook Documentation Page
DESCRIPTION: YAML frontmatter configuration for a Storybook documentation page, setting the title, hiding the renderer selector, and configuring the sidebar order and title.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/index.mdx#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
---
title: 'How to document components'
hideRendererSelector: true
sidebar:
  order: 4
  title: Docs
---
```

----------------------------------------

TITLE: Troubleshooting Storybook Startup Error
DESCRIPTION: This shell command shows the error that may occur when starting Storybook after upgrading to v7.0 due to a duplicate identifier declaration. This error can be resolved by removing the `svelteOptions` property in `.storybook/main.js`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#_snippet_5

LANGUAGE: sh
CODE:
```
ERR! SyntaxError: Identifier '__esbuild_register_import_meta_url__' has already been declared
```

----------------------------------------

TITLE: One Item List Story (TypeScript)
DESCRIPTION: Defines a story for rendering a List component with one ListItem in Storybook using TypeScript. It sets up the components, arguments, and template for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_16

LANGUAGE: typescript
CODE:
```
export const OneItem: Story = {
  render: (args) => ({
    components: { List, ListItem },
    setup() {
      return { args }
    }
    template: '<List v-bind="args"><ListItem /></List>',
  }),
};
```

----------------------------------------

TITLE: Enabling MDX experimental support in VSCode
DESCRIPTION: This JSON snippet configures VSCode to enable experimental support for MDX, providing linting, type checking, and auto-completion features.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_15

LANGUAGE: JSON
CODE:
```
{
  "mdx.server.enable": true
}
```

----------------------------------------

TITLE: Web Component Story with Image (JavaScript)
DESCRIPTION: This snippet defines a Storybook story for a web component using JavaScript. It imports the necessary modules from 'lit' and the image file. It defines the component's metadata and creates an image object. The story's render function uses the html template literal to render an img element with the image's src and alt attributes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import { html } from 'lit';

import imageFile from './static/image.png';

export default {
  component: 'my-component',
};

const image = {
  src: imageFile,
  alt: 'my image',
};

export const WithAnImage = {
  render: () => html`<img src="${image.src}" alt="${image.alt}" /> `,
};
```

----------------------------------------

TITLE: Defining Button Stories with Svelte CSF (TS)
DESCRIPTION: This snippet defines stories for a Button component in Svelte using TypeScript and the Component Story Format (CSF). It imports the Button component and uses defineMeta from '@storybook/addon-svelte-csf' to configure the component's metadata and documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  /**
   * Button stories
   * These stories showcase the button
   */
  const meta = defineMeta({
    component: Button,
    parameters: {
      docs: {
        description: {
          component: 'Another description, overriding the comments',
        },
      },
    },
  });
</script>

<!--
 Button stories
 These stories showcase the button
 -->

<Story
  name="Primary"
  parameters={{
    docs: {
      description: {
        story: 'Another description on the story, overriding the comments'
      },
    },
  }} />
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines a configuration object, and exports it as the default. The framework should be replaced with the actual framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-docgen.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  build: {
    test: {
      disableDocgen: false,
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Defining Storybook Meta Component in JSX
DESCRIPTION: Uses the Meta component to define documentation for the imported stories. The 'of' prop is used to reference the imported stories, and a custom name is provided.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfClashingDefaultName.mdx#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
<Meta of={BStories} name="Docs" />
```

----------------------------------------

TITLE: Configuring Web Components Button Stories in JavaScript
DESCRIPTION: JavaScript configuration for Button component stories using Web Components with custom background settings. Defines a demo-button component with a gray background option.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-values-in-meta.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  component: 'demo-button',
  parameters: {
    backgrounds: {
      default: 'Light',
      values: [
        // 👇 Add a new value
        { name: 'Gray', value: '#CCC' },
      ],
    },
  },
};
```

----------------------------------------

TITLE: Configuring Story-Level Parameters in Storybook
DESCRIPTION: This code snippet illustrates how to define story-level parameters for a specific story within a Storybook story file. These parameters only apply to the individual story they are defined in, overriding any project or meta-level parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
export const LargeScreen = {
  // 👇 Story-level parameters
  parameters: {
    layout: 'padded',
    demo: {
      demoArray: [3, 4],
    },
  },
};
```

----------------------------------------

TITLE: Incorrect Context Usage in Storybook Play Function (JavaScript)
DESCRIPTION: This snippet demonstrates incorrect usage where no context or partial context is passed to the play function of another story. This can lead to functionality issues in Storybook interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/context-in-play-function.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { within, userEvent } from '@storybook/testing-library'

MyStory.play = ({ canvasElement }) => {
  const canvas = within(canvasElement)
  // not passing any context
  await MyOtherStory.play()

  userEvent.click(canvas.getByRole('button'))
}
```

LANGUAGE: javascript
CODE:
```
import { within, userEvent } from '@storybook/testing-library'

MyStory.play = ({ canvasElement }) => {
  const canvas = within(canvasElement)
  // not passing the full context
  await MyOtherStory.play({ canvasElement })

  userEvent.click(canvas.getByRole('button'))
}
```

----------------------------------------

TITLE: Initializing Storybook Story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular component. It imports the necessary modules from '@storybook/angular' and defines the component and its argument types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Example } from './Example';

const meta: Meta<Example> = {
  component: Example,
  argTypes: {
    actualArgName: {
      name: 'Friendly name',
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Running Storybook Sandbox with Next Version
DESCRIPTION: Generates sandboxes using the newest pre-release version of Storybook. This is useful for testing the latest features and changes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_109

LANGUAGE: Shell
CODE:
```
storybook@next sandbox
```

----------------------------------------

TITLE: Rendering Button with Background Color and Label in Storybook
DESCRIPTION: This JavaScript snippet demonstrates how to render a Button component with a specified background color and label within a Storybook story. It sets the backgroundColor to '#ff0' and the label to '📚📕📈🤓'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_6

LANGUAGE: js
CODE:
```
render: () => <Button backgroundColor="#ff0" label="📚📕📈🤓" />
```

----------------------------------------

TITLE: Configuring React Native Async Storage
DESCRIPTION: This code snippet shows how to configure React Native Storybook with Async Storage. It uses `require` to conditionally load the correct Async Storage module based on the React Native version. It defaults to `null` to disable Async Storage if necessary.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_246

LANGUAGE: javascript
CODE:
```
getStorybookUI({
  ...
  asyncStorage: require('@react-native-async-storage/async-storage').default || require('react-native').AsyncStorage || null
});
```

----------------------------------------

TITLE: Initializing Storybook with pnpm
DESCRIPTION: Command to initialize Storybook in a JavaScript project using pnpm package manager. This uses the @next tag to install the latest pre-release version of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/init-command.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@next init
```

----------------------------------------

TITLE: Disabling Essential Features in Storybook
DESCRIPTION: This code snippet demonstrates how to disable specific essential features in Storybook by modifying the `.storybook/main.js|ts` configuration file.  It shows the structure for setting a feature to `false` within the `features` object. Replace `featureName` with the appropriate key (e.g., `backgrounds`, `actions`).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/index.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  stories: ['../stories/**/*.stories.mdx', '../stories/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: [
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/addon-interactions',
  ],
  framework: '@storybook/react',
  core: { builder: '@storybook/builder-webpack5' },
  features: {
    featureName: false, // Disable the feature
  },
};

```

----------------------------------------

TITLE: Simulating User Click in Storybook Play Function (Angular)
DESCRIPTION: This code defines a Storybook story with a play function that simulates a user click on a button within the component's canvas. It uses the `userEvent` and `within` utilities to interact with the DOM and trigger actions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#_snippet_1

LANGUAGE: ts
CODE:
```
/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleWithRole: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button', { name: / button label/i }));
  },
};
```

----------------------------------------

TITLE: Initializing List Story with Angular
DESCRIPTION: This code defines a Storybook story for an Angular List component, including metadata for the component and decorators for module configuration. It imports necessary modules and components, including a specific story from ListItem. It also defines templates and stories for different list states.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { moduleMetadata } from '@storybook/angular';

import { CommonModule } from '@angular/common';

import { List } from './list.component';
import { ListItem } from './list-item.component';

//👇 Imports a specific story from ListItem stories
import { Unchecked } from './ListItem.stories';

const meta: Meta<List> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
  decorators: [
    moduleMetadata({
      declarations: [List, ListItem],
      imports: [CommonModule],
    }),
  ],
};

export default meta;
type Story = StoryObj<List>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
const ListTemplate: Story = {
  render: (args) => ({
    props: args,
    template: `
      <app-list>
        <div *ngFor="let item of items">
          <app-list-item [item]="item"></app-list-item>
        </div>
      </app-list>
    `,
  }),
};

export const Empty: Story = {
  ...ListTemplate,
  args: { items: [] },
};

export const OneItem: Story = {
  ...ListTemplate,
  args: {
    items: [{ ...Unchecked.args }],
  },
};

```

----------------------------------------

TITLE: Configuring Storybook with TypeScript and React DocGen
DESCRIPTION: Defines a Storybook configuration that specifies the framework, story file patterns, and TypeScript options. It includes custom React DocGen TypeScript settings with compiler options and a prop filter that excludes node_modules properties except those from @mui packages.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-prop-filter.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, react-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  typescript: {
    reactDocgen: 'react-docgen-typescript',
    reactDocgenTypescriptOptions: {
      compilerOptions: {
        allowSyntheticDefaultImports: false,
        esModuleInterop: false,
      },
      // Filter out third-party props from node_modules except @mui packages.
      propFilter: (prop) =>
        prop.parent ? !/node_modules\/(?!@mui)/.test(prop.parent.fileName) : true,
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Primary Button Story in Svelte (TypeScript)
DESCRIPTION: This TypeScript code configures a primary button story within Storybook for a Svelte component. It imports necessary modules from '@storybook/svelte-vite' and defines the component and its arguments, setting the label to 'Button' and primary to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/svelte-vite';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Configuring Svelte Storybook Story with CSF (TS)
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using TypeScript and the Component Story Format (CSF) with Svelte-specific additions. It imports 'defineMeta' from '@storybook/addon-svelte-csf' and uses it to define the component and enable auto-generated documentation using the 'autodocs' tag. It also defines a story that is excluded from the documentation using the '!autodocs' tag within the Svelte template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    //👇 Enables auto-generated documentation for this component and includes all stories in this file
    tags: ['autodocs'],
  });
</script>

<!--👇 Removes this story from auto-generated documentation -->
<Story name="UndocumentedStory" tags={['!autodocs']} />
```

----------------------------------------

TITLE: Configuring Button Story with Svelte CSF
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and defines metadata using defineMeta from '@storybook/addon-svelte-csf', including the component itself and its associated argument types. It specifically focuses on the 'label' argument, allowing control over the button's text within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    argTypes: {
      // 👇 All Button stories expect a label arg
      label: {
        control: 'text',
        description: 'Overwritten description',
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and defines the title and component for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
};
```

----------------------------------------

TITLE: Visualizing Git Branch Strategy with Mermaid
DESCRIPTION: A mermaid diagram showing the relationship between different branches (main, next, latest-release, next-release) in the Storybook release process, including version tags and merge flows.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_0

LANGUAGE: mermaid
CODE:
```
%%{init: { 'gitGraph': { 'showCommitLabel': false } } }%%
gitGraph
    commit
    branch latest-release
    branch next
    commit
    branch next-release
    commit
    commit tag: "7.1.0-alpha.18"
    checkout next
    merge next-release
    commit id: "bugfix"
    commit
    checkout latest-release
    cherry-pick id: "bugfix"
    commit tag: "7.0.20"
    checkout next-release
    merge next
    commit tag: "7.1.0-alpha.19"
    checkout next
    merge next-release
    commit
    checkout main
    merge latest-release
```

----------------------------------------

TITLE: Configuring ArgTypes in Storybook Preview (TypeScript)
DESCRIPTION: This TypeScript snippet configures the global argTypes for Storybook stories. It defines a 'label' argument with a text control and a custom description, which will be available for all stories. It also imports the Preview type from '@storybook/your-framework'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-preview.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview = {
  argTypes: {
    // 👇 All stories expect a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
} satisfies Preview;

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: This TypeScript configuration file sets up Storybook by specifying the framework, defining the location of story files (MDX and stories), and including the documentation addon. It imports the StorybookConfig type and exports the configuration as the default export.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-main-mdx-config.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: [
    //👇 Your documentation written in MDX along with your stories goes here
    '../src/**/*.mdx',
    '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)',
  ],
  addons: ['@storybook/addon-docs'],
};

export default config;
```

----------------------------------------

TITLE: Initializing Button with Solid Hooks in Storybook (JSX)
DESCRIPTION: This snippet initializes a Button component with Solid hooks for managing the label and primary state. It includes a click handler to toggle the button's state between 'Primary' and 'Secondary'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_11

LANGUAGE: js
CODE:
```
import { createSignal } from 'solid-js';

import { Button } from './Button';

export default {
  component: Button,
};

/*
 * Example Button story with Solid Hooks.
 * See note below related to this example.
 */
const ButtonWithHooks = () => {
  // Sets the hooks for both the label and primary props
  const [value, setValue] = createSignal('Secondary');
  const [isPrimary, setIsPrimary] = createSignal(false);

  // Sets a click handler to change the label's value
  const handleOnChange = () => {
    if (!isPrimary()) {
      setIsPrimary(true);
      setValue('Primary');
    }
  };
  return <Button primary={isPrimary()} onClick={handleOnChange} label={value()} />;
};

export const Primary = {
  render: () => <ButtonWithHooks />,
};
```

----------------------------------------

TITLE: Configuring Inline Story Rendering for Vue Components
DESCRIPTION: Example of configuring the prepareForInline parameter to enable inline story rendering for Vue components by converting Vue components to React elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/multiframework.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import toReact from '@egoist/vue-to-react';

addParameters({
  docs: {
    // `container`, `page`, etc. here
    prepareForInline: (storyFn, { args }) => {
      const Story = toReact(storyFn());
      return <Story {...args} />;
    },
  },
});
```

----------------------------------------

TITLE: Defining RightArrow Component for UI in React
DESCRIPTION: Creates a React component that renders an SVG right arrow icon with inline styles.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/ts/Configure.mdx#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
export const RightArrow = () => <svg 
    viewBox="0 0 14 14" 
    width="8px" 
    height="14px" 
    style={{ 
      marginLeft: '4px',
      display: 'inline-block',
      shapeRendering: 'inherit',
      verticalAlign: 'middle',
      fill: 'currentColor',
      'path fill': 'currentColor'
    }}
>
  <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
</svg>
```

----------------------------------------

TITLE: Initializing List Story with One Item in Angular
DESCRIPTION: This story renders the List component with a single ListItem in Angular. It uses the 'Unchecked' story's arguments and defines a template to render the List with the ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { moduleMetadata } from '@storybook/angular';

import { CommonModule } from '@angular/common';

import { List } from './list.component';
import { ListItem } from './list-item.component';

//👇 Imports a specific story from ListItem stories
import { Unchecked } from './ListItem.stories';

const meta: Meta<List> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
  decorators: [
    moduleMetadata({
      declarations: [List, ListItem],
      imports: [CommonModule],
    }),
  ],
};

export default meta;
type Story = StoryObj<List>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const OneItem: Story = {
  render: (args) => ({
    props: args,
    template: `
      <app-list>
        <app-list-item [item]="item"></app-list-item>
      </app-list>
   `,
  }),
  args: {
    ...Unchecked.args,
  },
};
```

----------------------------------------

TITLE: Initializing List Story with HTML (TypeScript)
DESCRIPTION: This code initializes a Storybook story for the List component using HTML with TypeScript. It imports necessary types from @storybook/html and the createList function. The Empty story renders the list using the createList function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/html';

import { createList, ListArgs } from './List';

const meta: Meta<ListArgs> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
};

export default meta;
type Story = StoryObj<ListArgs>;

// Always an empty list, not super interesting
export const Empty: Story = {
  render: (args) => createList(args),
};

```

----------------------------------------

TITLE: Highlighting Elements in Vue 3 Story
DESCRIPTION: This snippet demonstrates how to highlight specific elements (h2, a, .storybook-button) in a Vue 3 component's story using the `HIGHLIGHT` addon. It uses the `useChannel` API to emit a highlight event within a decorator. The decorator wraps the story template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-highlight.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Highlighted: Story = {
  decorators: [
    () => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
      });
      return {
        template: '<story />',
      };
    },
  ],
};
```

----------------------------------------

TITLE: Installing MSW Dependencies with Yarn
DESCRIPTION: Installs Mock Service Worker (MSW) and MSW Storybook addon using Yarn package manager as development dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-install.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
yarn add msw msw-storybook-addon --save-dev
```

----------------------------------------

TITLE: Rendering List with One Item in Vue (TS)
DESCRIPTION: This story renders a List component with a single ListItem in Vue using TypeScript. It uses a render function to define the component's structure, including both the List and ListItem components in the template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_26

LANGUAGE: ts
CODE:
```
export const OneItem: Story = {
  render: () => ({
    components: { List, ListItem },
    template: `
      <List>
        <list-item/>
      </List>`,
  }),
};
```

----------------------------------------

TITLE: Defining Button Story with Backgrounds (JS)
DESCRIPTION: This code defines a Storybook story for a Button component and configures story-level parameters to set background options. It imports the Button component and defines a 'Primary' story with custom background colors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Primary = {
  // 👇 Story-level parameters
  parameters: {
    backgrounds: {
      options: {
        red: { name: 'Red', value: '#f00' },
        green: { name: 'Green', value: '#0f0' },
        blue: { name: 'Blue', value: '#00f' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Defining Button Stories with Tags in Svelte (CSF)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the defineMeta function from '@storybook/addon-svelte-csf' and defines metadata for the component, including applying a 'stable' tag to all stories. It then creates a specific story, ExperimentalFeatureStory, which removes the inherited 'stable' tag and applies an 'experimental' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    // 👇 Applies to all stories in this file
    tags: ['stable'],
  });
</script>

<!-- 👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag -->
<Story name="ExperimentalFeatureStory" tags={['!stable', 'experimental']} />
```

----------------------------------------

TITLE: Defining Storybook Meta and Stories with Include/Exclude - Svelte CSF
DESCRIPTION: This code defines Storybook stories for a Svelte component using the Component Story Format (CSF) with Svelte-specific additions. It demonstrates how to include and exclude controls using array and regular expression patterns within the Storybook interface.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import YourComponent from './YourComponent.svelte';

  const { Story } = defineMeta({
    component: YourComponent,
  });
</script>

<Story
  name="ArrayInclude"
  parameters={{
    controls: { include: ['foo', 'bar'] },
  }}
/>

<Story
  name="RegexInclude"
  parameters={{
    controls: { include: /^hello*/ },
  }}
/>

<Story
  name="ArrayExclude"
  parameters={{
    controls: { exclude: ['foo', 'bar'] },
  }}
/>

<Story
  name="RegexExclude"
  parameters={{
    controls: { exclude: /^hello*/ },
  }}
/>
```

----------------------------------------

TITLE: Defining List Component Metadata in Svelte
DESCRIPTION: This code defines the metadata for the List component in Storybook using Svelte CSF. It imports necessary modules from '@storybook/addon-svelte-csf' and component files, then uses defineMeta to set the component property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_12

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import List from './List.svelte';
  import ListItem from './ListItem.svelte';

  const { Story } = defineMeta({
    component: List,
  });
</script>
```

----------------------------------------

TITLE: Importing Storybook Stories in JavaScript
DESCRIPTION: This snippet imports all exports from a B.stories file, likely containing Storybook component stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfName.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import * as BStories from '../src/B.stories';
```

----------------------------------------

TITLE: Initializing Storybook Preview with Solid Decorator (TS)
DESCRIPTION: This snippet configures a Storybook preview for Solid using TypeScript, adding a decorator that wraps each story with a div element, applying a 3em margin. It uses a functional component as a decorator and imports the Preview type from 'storybook-solidjs'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Preview } from 'storybook-solidjs';

const preview: Preview = {
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        <Story />
      </div>
    ),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Overriding CRA File Loader Exclusions with @storybook/preset-create-react-app
DESCRIPTION: Illustrates how to use the `craOverrides` option within the preset's configuration in `./.storybook/main.js` to customize Create React App's default Webpack settings applied by the preset. Specifically, it shows how to modify the `fileLoaderExcludes` array to prevent CRA's built-in `file-loader` from processing PDF files, allowing other loaders or presets to handle them.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
module.exports = {
  addons: [
    {
      name: '@storybook/preset-create-react-app',
      options: {
        craOverrides: {
          fileLoaderExcludes: ['pdf'],
        },
      },
    },
  ],
};
```

----------------------------------------

TITLE: Preventing Default Docs Styles Leak - MDX
DESCRIPTION: This code snippet demonstrates how to prevent Storybook's default docs styles from leaking into non-story user components by wrapping the content with the `Unstyled` block from `@storybook/blocks`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_135

LANGUAGE: mdx
CODE:
```
import { Unstyled } from "@storybook/blocks";
import { MyComponent } from "./MyComponent";

# This is a header

<Unstyled>
  <MyComponent />
</Unstyled>
```

----------------------------------------

TITLE: Documenting Button Component with Stories Reference in Storybook MDX
DESCRIPTION: This MDX snippet creates documentation for a Button component by importing and referencing Button stories. It uses the 'of' prop in the Meta component to link to the imported stories, providing the same documentation structure as the previous example but with story integration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-baseline-example.md#2025-04-22_snippet_1

LANGUAGE: mdx
CODE:
```
import { Meta, Controls } from '@storybook/addon-docs/blocks';

import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

# Definition

Button is a clickable interactive element that triggers a response.

You can place text and icons inside of a button.

Buttons are often used for form submissions and to toggle elements into view.

## Usage

The component comes in different variants such as `primary`, `secondary`, `large` and `small` which you can use to alter the look and feel of the button.

## Inputs

Button has the following properties:

<Controls />
```

----------------------------------------

TITLE: Installing Babel 7 Dependencies
DESCRIPTION: This command installs the necessary Babel 7 dependencies for projects not already using Babel. It includes @babel/core and babel-loader.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_279

LANGUAGE: bash
CODE:
```
npm i -D @babel/core babel-loader@latest
```

----------------------------------------

TITLE: Configuring Jest with Custom Snapshot Serializer for Storybook Test Runner
DESCRIPTION: Extends the default Jest configuration from @storybook/test-runner by adding a custom snapshot serializer that preprocesses HTML before passing it to the test runner. The configuration merges the custom serializer with any existing serializers from the default config.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-config-serializer.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { getJestConfig } from '@storybook/test-runner';

const defaultConfig = getJestConfig();

const config = {
  ...defaultConfig,
  snapshotSerializers: [
    // Sets up the custom serializer to preprocess the HTML before it's passed onto the test-runner
    './snapshot-serializer.js',
    ...defaultConfig.snapshotSerializers,
  ],
};

export default config;
```

----------------------------------------

TITLE: Initializing Storybook Meta for Angular Component
DESCRIPTION: This snippet initializes the Storybook meta object for an Angular component, including a decorator to apply a margin around the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { componentWrapperDecorator } from '@storybook/angular';

import type { Meta } from '@storybook/angular';

import { YourComponent } from './your.component';

const meta: Meta<YourComponent> = {
  component: YourComponent,
  decorators: [componentWrapperDecorator((story) => `<div style="margin: 3em">${story}</div>`)],
};

export default meta;
```

----------------------------------------

TITLE: Managing Style Elements with Storybook Globals (TypeScript)
DESCRIPTION: Defines TypeScript functions to add or remove style tags on the DOM using the Storybook '@storybook/global' import. The main functions are 'clearStyles', which removes style elements by selector(s), and 'addOutlineStyles', which creates or updates a <style> tag based on a given selector id and CSS string. Parameters include selectors (as string or string array) and CSS source. Dependencies include Storybook and its global document reference. Outputs are DOM side effects; there are no return values. Functions handle cases where the target does or does not exist, with no error thrown for missing elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-css-helpers.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { global } from '@storybook/global';

export const clearStyles = (selector: string | string[]) => {
  const selectors = Array.isArray(selector) ? selector : [selector];
  selectors.forEach(clearStyle);
};

const clearStyle = (input: string | string[]) => {
  const selector = typeof input === 'string' ? input : input.join('');
  const element = global.document.getElementById(selector);
  if (element && element.parentElement) {
    element.parentElement.removeChild(element);
  }
};

export const addOutlineStyles = (selector: string, css: string) => {
  const existingStyle = global.document.getElementById(selector);
  if (existingStyle) {
    if (existingStyle.innerHTML !== css) {
      existingStyle.innerHTML = css;
    }
  } else {
    const style = global.document.createElement('style');
    style.setAttribute('id', selector);
    style.innerHTML = css;
    global.document.head.appendChild(style);
  }
};
```

----------------------------------------

TITLE: Incorrect Story Naming Example in JavaScript
DESCRIPTION: Example showing incorrect story naming using camelCase instead of the recommended PascalCase convention.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/prefer-pascal-case.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export const primaryButton = {};
```

----------------------------------------

TITLE: Implementing Toolbar Button Component in Storybook Addon
DESCRIPTION: A React component that creates a toggleable toolbar button for the addon. Uses useGlobals and useStorybookApi hooks to manage state and register keyboard shortcuts. Implements a lightning icon button that can be toggled on/off.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-toolkit-types.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
import React, { memo, useCallback, useEffect } from 'react';

import { useGlobals, useStorybookApi } from 'storybook/manager-api';
import { IconButton } from 'storybook/internal/components';
import { LightningIcon } from '@storybook/icons';

import { ADDON_ID, PARAM_KEY, TOOL_ID } from './constants';

export const Tool = memo(function MyAddonSelector() {
  const [globals, updateGlobals] = useGlobals();
  const api = useStorybookApi();

  const isActive = [true, 'true'].includes(globals[PARAM_KEY]);

  const toggleMyTool = useCallback(() => {
    updateGlobals({
      [PARAM_KEY]: !isActive,
    });
  }, [isActive]);

  useEffect(() => {
    api.setAddonShortcut(ADDON_ID, {
      label: 'Toggle Measure [O]',
      defaultShortcut: ['O'],
      actionName: 'outline',
      showInMenu: false,
      action: toggleMyTool,
    });
  }, [toggleMyTool, api]);

  return (
    <IconButton key={TOOL_ID} active={isActive} title="Enable my addon" onClick={toggleMyTool}>
      <LightningIcon />
    </IconButton>
  );
});
```

----------------------------------------

TITLE: Configuring Button Story with Angular
DESCRIPTION: This code configures a Button component's story in Storybook using Angular. It defines the component, and sets up argTypes for the 'arrow' property, allowing users to select from predefined arrow icons using a select control in the Storybook UI. The options and labels for the arrow selection are also defined.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';

const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };

const meta: Meta<Button> = {
  component: Button,
  argTypes: {
    arrow: {
      options: Object.keys(arrows), // An array of serializable values
      mapping: arrows, // Maps serializable option values to complex arg values
      control: {
        type: 'select', // Type 'select' is automatically inferred when 'options' is defined
        labels: {
          // 'labels' maps option values to string labels
          ArrowUp: 'Up',
          ArrowDown: 'Down',
          ArrowLeft: 'Left',
          ArrowRight: 'Right',
        },
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Storybook Decorator with useChannel Hook
DESCRIPTION: This decorator uses the `useChannel` hook to emit a `HIGHLIGHT` event, configuring interactive highlights on specified elements and defining a custom menu with navigation actions. It requires the `useChannel` hook from Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-menu.md#_snippet_11

LANGUAGE: javascript
CODE:
```
(story) => {
  const emit = useChannel({});
  emit(HIGHLIGHT, {
    selectors: ['h2', 'a', '.storybook-button'],
    menu: [
      {
        id: 'button-name',
        title: 'Login',
        description: 'Navigate to the login page',
        clickEvent: 'my-menu-click-event',
      },
      {
        id: 'h2-home',
        title: 'Acme',
        description: 'Navigate to the home page',
      },
    ],
  });
  return story();
}
```

----------------------------------------

TITLE: Installing Storybook Vue 3 Vite with NPM
DESCRIPTION: Installs @storybook/vue3-vite package as a development dependency using NPM package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue3-vite-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev @storybook/vue3-vite
```

----------------------------------------

TITLE: Customizing Vite Configuration with viteFinal
DESCRIPTION: JavaScript example showing how to use mergeConfig to customize the Vite configuration for Storybook, such as adding aliases or plugins.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-vite/README.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
// use `mergeConfig` to recursively merge Vite options
import { mergeConfig } from 'vite';

const config = {
  async viteFinal(config, { configType }) {
    // Be sure to return the customized config
    return mergeConfig(config, {
      // Customize the Vite config for Storybook
      resolve: {
        alias: { foo: 'bar' },
      },
    });
  },
};

export default config;
```

----------------------------------------

TITLE: Type definition for Project Annotations
DESCRIPTION: Defines the type for project annotations, which can be a single ProjectAnnotation or an array of ProjectAnnotation objects. These annotations are applied to all composed stories in the project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-playwright.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
(projectAnnotations: ProjectAnnotation | ProjectAnnotation[]) => ProjectAnnotation
```

----------------------------------------

TITLE: Setting the package manager
DESCRIPTION: Sets the package manager to use when installing Storybook (pnpm in this example). Available package managers include npm, yarn, and pnpm.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_126

LANGUAGE: Shell
CODE:
```
create storybook --package-manager pnpm
```

----------------------------------------

TITLE: Empty Story Definition (HTML)
DESCRIPTION: Defines an empty story for the component using HTML. This story renders the component in its default, empty state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_9

LANGUAGE: html
CODE:
```
export const Empty: Story = {};
```

----------------------------------------

TITLE: Main.js framework field configuration
DESCRIPTION: This JavaScript code snippet shows how to configure the framework field in the `main.js` file. This is required in Storybook 7.0 to specify the framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_168

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  // ... your existing config
  framework: "@storybook/react", // OR whatever framework you're using
};
```

----------------------------------------

TITLE: Configuring Static Directories with Object Notation
DESCRIPTION: Advanced configuration for static directories using object notation, allowing for more detailed control over asset serving paths.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/images-and-assets.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  staticDirs: [{
    from: '../my-custom-assets',
    to: '/assets',
  }],
};
```

----------------------------------------

TITLE: Enabling HTTPS
DESCRIPTION: Serves Storybook over HTTPS. Requires providing SSL certificate information.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_8

LANGUAGE: Shell
CODE:
```
storybook dev --https
```

----------------------------------------

TITLE: Initializing Storybook Preview with ThemeProvider (JS)
DESCRIPTION: This JavaScript snippet configures the Storybook preview to use styled-components ThemeProvider for theming. It imports light and dark themes, defines global styles, and uses withThemeFromJSXProvider to manage theme switching. The default theme is set to 'light'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-jsx-provider-decorator.md#_snippet_0

LANGUAGE: js
CODE:
```
import { withThemeFromJSXProvider } from '@storybook/addon-themes';

import { createGlobalStyle, ThemeProvider } from 'styled-components';
import { lightTheme, darkTheme } from '../src/themes';

const GlobalStyles = createGlobalStyle`
  body {
    font-family: "Nunito Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
  }
`;

const preview = {
  decorators: [
    withThemeFromJSXProvider({
      themes: {
        light: lightTheme,
        dark: darkTheme,
      },
      defaultTheme: 'light',
      Provider: ThemeProvider,
      GlobalStyles,
    }),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Canvas with Meta Example
DESCRIPTION: Example demonstrating how to use the meta prop to render stories from different CSF files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-canvas.mdx#2025-04-22_snippet_4

LANGUAGE: markdown
CODE:
```
import { Meta, Canvas } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';
import * as HeaderStories from './Header.stories';

<Meta of={ButtonStories} />

{/* Although this MDX file is largely concerned with Button,
    it can render Header stories too */}
<Canvas of={HeaderStories.LoggedIn} meta={HeaderStories} />
```

----------------------------------------

TITLE: Storybook Snapshot Tests with Jest (TypeScript)
DESCRIPTION: This code defines snapshot tests for Storybook stories using Jest. It iterates through all story files, composes the stories, and generates a snapshot for each story. The snapshot is compared against existing snapshots to detect visual regressions. It also includes a delay to ensure the component is fully rendered before taking the snapshot. This version is written in TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#_snippet_5

LANGUAGE: ts
CODE:
```
describe("Stories Snapshots", () => {
  getAllStoryFiles().forEach(({ storyFile, componentName }) => {
    const meta = storyFile.default;
    const title = meta.title || componentName;

    describe(title, () => {
      const stories = Object.entries(compose(storyFile)).map(
        ([name, story]) => ({ name, story })
      );

      if (stories.length <= 0) {
        throw new Error(
          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`
        );
      }

      stories.forEach(({ name, story }) => {
        test(name, async () => {
          await story.run();
          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.
          await new Promise((resolve) => setTimeout(resolve, 1));
          // Defines the custom snapshot path location and file name
          const customSnapshotPath = `./__snapshots__/${componentName}.test.ts.snap`;
          expect(document.body.firstChild).toMatchSpecificSnapshot(customSnapshotPath);
      });
    });
  });
});
```

----------------------------------------

TITLE: Configuring vue-component-meta in Storybook
DESCRIPTION: This code snippet shows how to configure `vue-component-meta` in your Storybook `main.ts` file. By setting the `docgen` option to `'vue-component-meta'`, you enable Storybook to use `vue-component-meta` for generating controls and documentation for your Vue components. This provides a more full-featured alternative to `vue-docgen-api`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/vue3-vite';

const config: StorybookConfig = {
  framework: {
    name: '@storybook/vue3-vite',
    options: {
      docgen: 'vue-component-meta',
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook Story for React Component
DESCRIPTION: This snippet configures a Storybook story for a React component, adding a decorator that applies a margin around the rendered component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#_snippet_1

LANGUAGE: js
CODE:
```
import { YourComponent } from './YourComponent';

export default {
  component: YourComponent,
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </div>
    ),
  ],
};
```

----------------------------------------

TITLE: Debugging Webpack Configuration in Production Mode
DESCRIPTION: Command to debug Storybook's Webpack configuration in production mode. This helps in examining the configuration used for static builds.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
npx storybook build --debug-webpack
```

----------------------------------------

TITLE: Configuring Viewports per Component in Storybook
DESCRIPTION: This code snippet illustrates how to configure available viewports for all stories within a component using parameters in Storybook. This allows you to specify a specific set of viewports that are relevant to a particular component, providing a more focused and relevant testing environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/viewport.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
{
  /* prettier-ignore-start */
}
{
  /* prettier-ignore-end */
}
```

----------------------------------------

TITLE: Storybook Init Disable Telemetry
DESCRIPTION: This example shows how to disable Storybook's telemetry.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_55

LANGUAGE: shell
CODE:
```
storybook init --disable-telemetry
```

----------------------------------------

TITLE: Styled JSX in Next.js with Storybook
DESCRIPTION: This example showcases the use of Styled JSX, Next.js' built-in CSS-in-JS solution, within a component. It includes scoped styles, media queries, and global styles. This configuration works seamlessly with Storybook without additional setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_15

LANGUAGE: jsx
CODE:
```
function HelloWorld() {
  return (
    <div>
      Hello world
      <p>scoped!</p>
      <style jsx>{`
        p {
          color: blue;
        }
        div {
          background: red;
        }
        @media (max-width: 600px) {
          div {
            background: blue;
          }
        }
      `}</style>
      <style global jsx>{`
        body {
          background: black;
        }
      `}</style>
    </div>
  );
}

export default HelloWorld;
```

----------------------------------------

TITLE: Defining Button Stories for HTML (TypeScript)
DESCRIPTION: This code defines Storybook stories for an HTML Button component using TypeScript. It imports the createButton function and defines stories for Primary, Secondary, and Tertiary variants, each with a different label and background color.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/html';
import { createButton, ButtonArgs } from './Button';

const meta: Meta<ButtonArgs> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
};

export default meta;
type Story = StoryObj<ButtonArgs>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: (args) => createButton({ backgroundColor: '#ff0', label: 'Button' }),
};

export const Secondary: Story = {
  render: (args) => createButton({ backgroundColor: '#ff0', label: '😄👍😍💯' }),
};

export const Tertiary: Story = {
  render: (args) => createButton({ backgroundColor: '#ff0', label: '📚📕📈🤓' }),
};
```

----------------------------------------

TITLE: Mocking Google Fonts in GitHub Actions for Storybook
DESCRIPTION: This YAML snippet demonstrates how to configure a GitHub Actions workflow to mock Google Fonts during a Storybook build. It sets the `NEXT_FONT_GOOGLE_MOCKED_RESPONSES` environment variable to point to a JavaScript module containing mocked font responses. This prevents potential build failures due to issues with fetching fonts from Google.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_4

LANGUAGE: yaml
CODE:
```
- uses: chromaui/action@latest
  env:
    #👇 the location of mocked fonts to use
    NEXT_FONT_GOOGLE_MOCKED_RESPONSES: ${{ github.workspace }}/mocked-google-fonts.js
  with:
    projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
    token: ${{ secrets.GITHUB_TOKEN }}
```

----------------------------------------

TITLE: Rendering List with One Item in Vue
DESCRIPTION: This story renders a List component with a single ListItem in Vue. It uses a render function to define the component's structure, including both the List and ListItem components in the template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_22

LANGUAGE: js
CODE:
```
export const OneItem = {
  render: () => ({
    components: { List, ListItem },
    template: `
      <List>
        <list-item/>
      </List>`,
  }),
};
```

----------------------------------------

TITLE: Shutdown Storybook Dev Server
DESCRIPTION: The builder must provide a mechanism to stop the development server when the process terminates, either due to user input or an error. This ensures resources are released and the environment is cleaned up.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
console.log('storybook-builder-api-shutdown-server.md content')
```

----------------------------------------

TITLE: Button Component with JSDoc Comments
DESCRIPTION: Example of a Button component with JSDoc documentation comments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-description.mdx#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
/**
 * The Button component shows a button
 */
export const Button = () => <button>Click me</button>;
```

----------------------------------------

TITLE: Customizing Source Code Snippets - JavaScript
DESCRIPTION: This code snippet shows how to override the `docs.source.code` parameter to render a custom string in the `Source` block. The `Source` block will render whatever string is added.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const Example = () => <Button />;
Example.parameters = {
  docs: { source: { code: 'some arbitrary string' } },
};
```

----------------------------------------

TITLE: Initializing Button Storybook with Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports the Meta type from Storybook and the Button component, then defines a Meta object to configure the story's title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Design System/Atoms/Button',
  component: Button,
};

export default meta;
```

----------------------------------------

TITLE: Initializing Viewport Configuration in SolidJS (TS)
DESCRIPTION: This snippet initializes the viewport configuration for a SolidJS component in Storybook using TypeScript. It imports the component and sets the viewport parameter to use INITIAL_VIEWPORTS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';
import { INITIAL_VIEWPORTS } from 'storybook/viewport';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
  parameters: {
    viewport: {
      //👇 Set available viewports for every story in the file
      viewports: INITIAL_VIEWPORTS,
    },
  },
} satisfies Meta<typeof MyComponent>;

export default meta;
```

----------------------------------------

TITLE: Fixing Imports for Autodocs in Monorepo - JavaScript
DESCRIPTION: Updates import statements to reference the component directly instead of the package's root in a monorepo setup. This ensures Autodocs can properly generate documentation for your stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_15

LANGUAGE: JavaScript
CODE:
```
import { Button } from '../components/Button';
```

----------------------------------------

TITLE: Defining Storybook Story for Web Component (JS)
DESCRIPTION: This code defines a Storybook story for a web component named 'my-component' using JavaScript. It defines a default story with an example property sourced from an environment variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-env-var-config.md#_snippet_3

LANGUAGE: js
CODE:
```
export default {
  component: 'my-component',
};

export const Default = {
  args: {
    exampleProp: process.env.EXAMPLE_VAR,
  },
};
```

----------------------------------------

TITLE: Resetting and Applying Highlight in Svelte Story (TS - CSF)
DESCRIPTION: This Svelte story uses the `useChannel` hook within a decorator to emit `RESET_HIGHLIGHT` and `HIGHLIGHT` events. This allows for resetting any existing highlights and then applying new highlights to specified selectors (header, section, footer). This example uses the Component Story Format (CSF).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-reset.md#_snippet_5

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { useChannel } from 'storybook/preview-api';
  import { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="ResetHighlight"
  decorators={[
    (storyFn) => {
      const emit = useChannel({});
      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements
      emit(HIGHLIGHT, {
        selectors: ['header', 'section', 'footer'],
      });
      return storyFn();
    },
  ]}
/>
```

----------------------------------------

TITLE: Installing Storybook with pnpm
DESCRIPTION: Command to create a new Storybook project using pnpm package manager for version 8.3.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-custom-version.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm create storybook@8.3
```

----------------------------------------

TITLE: Test Runner Jest Config for Custom Serializer
DESCRIPTION: Jest configuration to enable custom snapshot serializer implementation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/snapshot-testing.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  snapshotSerializers: ['<rootDir>/snapshot-serializer.js'],
};
```

----------------------------------------

TITLE: Styled Highlight Decorator in Svelte Story
DESCRIPTION: This Svelte story defines a decorator that uses `useChannel` to emit a `HIGHLIGHT` event. This event configures selectors for highlighting elements and defines menu items with associated actions. The decorator is applied to the 'StyledHighlight' story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-menu.md#_snippet_5

LANGUAGE: svelte
CODE:
```
<Story
  name="StyledHighlight"
  decorators={[
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        menu: [
          {
            id: 'button-name',
            title: 'Login',
            description: 'Navigate to the login page',
            clickEvent: 'my-menu-click-event',
          },
          {
            id: 'h2-home',
            title: 'Acme',
            description: 'Navigate to the home page',
          },
        ],
      });
      return storyFn();
    },
  ]}
/>
```

----------------------------------------

TITLE: Initializing Button Stories with React (TS)
DESCRIPTION: This code initializes Storybook stories for a React Button component using TypeScript, defining metadata and two stories: Accessible and Inaccessible. It imports necessary modules from '@storybook/react' and the Button component, configuring the component's properties and their controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_2

LANGUAGE: ts-4-9
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { Button } from './Button';

const meta = {
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

// This is an accessible story
export const Accessible: Story = {
  args: {
    primary: false,
    label: 'Button',
  },
};

// This is not
export const Inaccessible: Story = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};

```

----------------------------------------

TITLE: One Item Story Definition (HTML)
DESCRIPTION: Defines a story for the component with one item using HTML. This story renders the component with a single list item inside.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_10

LANGUAGE: html
CODE:
```
export const OneItem: Story = {
  render: () => html`
    <demo-list>
      <demo-list-item></demo-list-item>
    </demo-list>
  `,
};
```

----------------------------------------

TITLE: Registering Addon with Type Strict API in Storybook
DESCRIPTION: This code snippet demonstrates how to register an addon using the `@storybook/manager-api` with the required `type` property. The `id` property is no longer needed. It uses TypeScript for type safety and shows how to add a panel to the addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_84

LANGUAGE: tsx
CODE:
```
import { addons, types } from "@storybook/manager-api";

addons.register("my-addon", () => {
  addons.add("my-addon/panel", {
    type: types.PANEL,
    title: "My Addon",
    render: ({ active }) => (active ? <div>Hello World</div> : null),
  });
});
```

----------------------------------------

TITLE: React Profile Page Context Provider Implementation
DESCRIPTION: React implementation of a profile page component that provides user posts and friends containers through context. Uses React's Context API to maintain referential equality of context values between renders.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-provider.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

import ProfilePageContext from './ProfilePageContext';
import { ProfilePageContainer } from './ProfilePageContainer';
import { UserPostsContainer } from './UserPostsContainer';
import { UserFriendsContainer } from './UserFriendsContainer';

//👇 Ensure that your context value remains referentially equal between each render.
const context = {
  UserPostsContainer,
  UserFriendsContainer,
};

export const AppProfilePage = () => {
  return (
    <ProfilePageContext.Provider value={context}>
      <ProfilePageContainer />
    </ProfilePageContext.Provider>
  );
};
```

----------------------------------------

TITLE: Initializing Storybook Meta for Svelte Component (TS)
DESCRIPTION: This code initializes the Storybook metadata for a Svelte component using TypeScript. It imports defineMeta from @storybook/addon-svelte-csf and the MyComponent.svelte. It configures the title, component, decorators, and parameters for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#_snippet_3

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const meta = defineMeta({
    /* 👇 The title prop is optional.
     * See https://storybook.js.org/docs/configure/#configure-story-loading
     * to learn how to generate automatic titles
     */
    title: 'Path/To/MyComponent',
    component: MyComponent,
    decorators: [
      /* ... */
    ],
    parameters: {
      /* ... */
    },
  });
</script>
```

----------------------------------------

TITLE: Enabling crash reports
DESCRIPTION: Enables sending crash reports to Storybook's telemetry, helping to improve the stability of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_131

LANGUAGE: Shell
CODE:
```
create storybook --enable-crash-reports
```

----------------------------------------

TITLE: Validating Form via Storybook Story in Vue with TypeScript
DESCRIPTION: This snippet provides a TypeScript-based unit test for validating Vue form components utilizing composeStory from '@storybook/vue3' and Testing Library for Vue. After running the story, it simulates a user clicking the submit button and checks that the 'invalid-form' element is not present in the rendered DOM. The test presumes Storybook and Vue's Testing Library are properly configured with TypeScript support.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/single-story-test.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import { fireEvent, screen } from '@testing-library/vue';\n\nimport { composeStory } from '@storybook/vue3';\n\nimport Meta, { ValidForm as ValidFormStory } from './LoginForm.stories';\n\nconst ValidForm = composeStory(ValidFormStory, Meta);\n\ntest('Validates form', async () => {\n  await ValidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).not.toBeInTheDocument();\n});
```

----------------------------------------

TITLE: Initializing Story with Play Function in Svelte (JS)
DESCRIPTION: This code defines a Storybook story for a Svelte component named MyComponent. It uses the play function to simulate user interaction: typing 'WrongInput' into a username field, clicking a submit button, and hovering over an error message. It relies on storybook/test for userEvent and waitFor utilities.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, waitFor, within } from 'storybook/test';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<!--
  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
  to learn more about using the canvasElement to query the DOM
-->
<Story
  name="ExampleAsyncStory"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const Input = canvas.getByLabelText('Username', {
      selector: 'input',
    });

    await userEvent.type(Input, 'WrongInput', {
      delay: 100,
    });

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const Submit = canvas.getByRole('button');
    await userEvent.click(Submit);

    await waitFor(async () => {
      await userEvent.hover(canvas.getByTestId('error'));
    });
  }} />
```

----------------------------------------

TITLE: Testing Vue Button Component Localization
DESCRIPTION: This test suite verifies that the Vue Button component renders correctly in both English and Spanish locales using Storybook's composeStory function and Vue Testing Library. It imports the necessary modules from vitest, @testing-library/vue, and @storybook/vue3-vite, as well as the component's meta and Primary story. The tests override the global locale setting to 'en' and 'es' respectively, ensuring the component adapts to the specified language.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-override-globals.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { test } from 'vitest';
import { render } from '@testing-library/vue';
import { composeStory } from '@storybook/vue3-vite';

import meta, { Primary as PrimaryStory } from './Button.stories';

test('renders in English', async () => {
  const Primary = composeStory(
    PrimaryStory,
    meta,
    { globals: { locale: 'en' } } // 👈 Project annotations to override the locale
  );

  await Primary.run();
});

test('renders in Spanish', async () => {
  const Primary = composeStory(PrimaryStory, meta, { globals: { locale: 'es' } });

  await Primary.run();
});
```

----------------------------------------

TITLE: Defining Storybook Story for Common JavaScript Component
DESCRIPTION: This snippet defines a Storybook story for a JavaScript component named Foo. It imports the Foo component and defines a default export object that configures the story's title, component, and ID. The Baz constant defines a specific story instance.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/other-foo-bar-story.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Foo } from './Foo';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'OtherFoo/Bar',
  component: Foo,
  id: 'Foo/Bar', // Or 'foo-bar' if you prefer
};

export const Baz = {
  name: 'Insert name here',
};

```

----------------------------------------

TITLE: Compose Storybook Stories
DESCRIPTION: This function takes a story file as input and uses `composeStories` to compose the stories within that file. It handles potential errors during the composition process and throws a custom error message if any issues occur.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#_snippet_8

LANGUAGE: ts
CODE:
```
const compose = (entry: StoryFile): ReturnType<typeof composeStories<StoryFile>> => {
  try {
    return composeStories(entry);
  } catch (e) {
    throw new Error(
      `There was an issue composing stories for the module: ${JSON.stringify(entry)}, ${e}`,
    );
  }
};
```

----------------------------------------

TITLE: Initializing Page stories for React (JS)
DESCRIPTION: This code initializes Storybook stories for the Page component in a React application using JavaScript. It imports the Page component and Header stories, and exports a default object configuring the component for Storybook. It also defines a 'LoggedIn' story, importing related Header stories to populate arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Page } from './Page';

//👇 Imports all Header stories
import * as HeaderStories from './Header.stories';

export default {
  component: Page,
};

export const LoggedIn = {
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};
```

----------------------------------------

TITLE: Disable React Root API in Storybook
DESCRIPTION: This code snippet shows how to opt-out of the new React Root API in Storybook. By setting `legacyRootApi` to `true` in the `.storybook/main.js|ts` file, you can revert to the legacy React Root API.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
export default {
  framework: {
    name: '@storybook/react-webpack5',
    options: {
      legacyRootApi: true,
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF) - Typescript
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using the Component Story Format (CSF) with Typescript. It imports the `defineMeta` function from `@storybook/addon-svelte-csf` and the Button component. The metadata sets the layout to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    // Sets the layout parameter component wide.
    parameters: {
      layout: 'centered',
    },
  });
</script>
```

----------------------------------------

TITLE: Running Storybook Index
DESCRIPTION: Builds an `index.json` file that lists all stories and docs entries in the Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_107

LANGUAGE: shell
CODE:
```
storybook index [options]
```

----------------------------------------

TITLE: Configuring boolean control for boolean ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'boolean' control, providing a toggle for switching between true and false states within Storybook's controls panel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
{ control: 'boolean' }
```

----------------------------------------

TITLE: Babel configuration for modern browser support
DESCRIPTION: This code snippet shows a babel.config.js file configured to target modern browsers (Chrome 100+). This ensures that modern JavaScript features are supported.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_94

LANGUAGE: javascript
CODE:
```
// babel.config.js
module.exports = {
  presets: [
    [
      "@babel/preset-env",
      {
        shippedProposals: true,
        useBuiltIns: "usage",
        corejs: "3",
        modules: false,
        targets: { chrome: "100" },
      },
    ],
  ],
};
```

----------------------------------------

TITLE: Performing a Dry Run with Storybook Migrate
DESCRIPTION: Executes a dry run of the migration to verify its existence and show the files that would be affected without making any actual changes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_84

LANGUAGE: Shell
CODE:
```
storybook migrate --dry-run
```

----------------------------------------

TITLE: Initializing Storybook Meta for Angular Component (TS)
DESCRIPTION: This code initializes the Storybook metadata for an Angular component. It imports the Meta type from @storybook/angular and the MyComponent.component. It defines the title, component, decorators, and parameters for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Path/To/MyComponent',
  component: MyComponent,
  decorators: [
    /* ... */
  ],
  parameters: {
    /* ... */
  },
};

export default meta;
```

----------------------------------------

TITLE: Creating List Component Stories with React (TypeScript)
DESCRIPTION: This code defines Storybook stories for a React List component using TypeScript. It imports the List and ListItem components, configures metadata for Storybook, and defines stories for rendering empty, single-item, and multi-item lists using JSX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { List } from './List';
import { ListItem } from './ListItem';

const meta = {
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Empty: Story = {};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const OneItem: Story = {
  render: (args) => (
    <List {...args}>
      <ListItem />
    </List>
  ),
};

export const ManyItems: Story = {
  render: (args) => (
    <List {...args}>
      <ListItem />
      <ListItem />
      <ListItem />
    </List>
  ),
};
```

----------------------------------------

TITLE: Initializing ButtonGroup stories for React (TS)
DESCRIPTION: This code initializes Storybook stories for the ButtonGroup component in React using TypeScript. It imports necessary modules from '@storybook/react-vite', the ButtonGroup component, and Button stories. It defines metadata for the ButtonGroup component and a 'Pair' story with primary and secondary buttons in a horizontal orientation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { ButtonGroup } from '../ButtonGroup';

//👇 Imports the Button stories
import * as ButtonStories from './Button.stories';

const meta = {
  component: ButtonGroup,
} satisfies Meta<typeof ButtonGroup>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Pair: Story = {
  args: {
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  },
};
```

----------------------------------------

TITLE: Canvas with Additional Actions Example
DESCRIPTION: Example showing how to add custom actions to the Canvas component with a GitHub link button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-canvas.mdx#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
import { Meta, Story, Canvas, SourceState } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

{/* With an additional action */}
<Canvas
  additionalActions={[
    {
      title: 'Open in GitHub',
      onClick: () => {
        window.open(
          'https://github.com/storybookjs/storybook/blob/next/code/ui/blocks/src/examples/Button.stories.tsx',
          '_blank'
        );
      },
    }
  ]}
  of={ButtonStories.Primary}
/>
```

----------------------------------------

TITLE: Using Meta Doc Block in MDX
DESCRIPTION: Illustrates how to use the `Meta` Doc Block within an MDX file to associate documentation with a specific story.  The `of` prop is used to reference the default export of the story file, allowing the documentation to be rendered alongside the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_4

LANGUAGE: MDX
CODE:
```
import { Meta, Story } from '@storybook/blocks';
import * as CheckboxStories from './Checkbox.stories';

<Meta of={CheckboxStories} />
```

----------------------------------------

TITLE: Incorrect Meta Object Definition in TypeScript
DESCRIPTION: Examples of incorrect meta object definitions that don't use the 'satisfies Meta' type check.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/meta-satisfies-type.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export default {
  title: 'Button',
  args: { primary: true },
  component: Button,
};
```

LANGUAGE: typescript
CODE:
```
const meta: Meta<typeof Button> = {
  title: 'Button',
  args: { primary: true },
  component: Button,
};
export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Docs Template with Meta Component
DESCRIPTION: This snippet uses the Meta component to set up a template for Storybook documentation. The isTemplate prop indicates that this configuration should be used as a template for other docs pages.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/Template.mdx#2025-04-22_snippet_1

LANGUAGE: MDX
CODE:
```
<Meta isTemplate />
```

----------------------------------------

TITLE: Markdown Documentation Content in Storybook
DESCRIPTION: This snippet shows the Markdown content for the Storybook documentation. It includes a header and a greeting message, demonstrating how to structure documentation within a Storybook file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/A.mdx#2025-04-22_snippet_1

LANGUAGE: Markdown
CODE:
```
# Docs with of

hello docs
```

----------------------------------------

TITLE: Customizing Styles in Storybook Info Addon
DESCRIPTION: Shows two different approaches to customizing the styles of the Info addon: using a style object to directly modify styles, and using a function that has access to the existing stylesheet for more complex modifications.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_9

LANGUAGE: jsx
CODE:
```
storiesOf('Addons|Info.Options.styles', module)
  .add(
    'Extend info styles with an object',
    withInfo({
      styles: {
        button: {
          base: {
            background: 'purple',
          },
        },
        header: {
          h1: {
            color: 'green',
          },
        },
      },
    })(() => <BaseButton label="Button" />)
  )
  .add(
    'Full control over styles using a function',
    withInfo({
      styles: stylesheet => ({
        ...stylesheet,
        header: {
          ...stylesheet.header,
          h1: {
            ...stylesheet.header.h1,
            color: 'red',
          },
        },
      }),
    })(() => <BaseButton label="Button" />)
  );
```

----------------------------------------

TITLE: Removing Builder Dependencies
DESCRIPTION: This snippet shows the builder packages that can be removed from your project's dependencies after migrating to Storybook 7 and installing a framework package that includes the builder. This helps to avoid conflicts and simplify your project's dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_97

LANGUAGE: js
CODE:
```
'@storybook/builder-webpack5',
'@storybook/manager-webpack5',
'@storybook/builder-webpack4',
'@storybook/manager-webpack4',
'@storybook/builder-vite',
'storybook-builder-vite',
```

----------------------------------------

TITLE: Initializing Button Story - Ember
DESCRIPTION: This code initializes a Storybook story for an Ember button component. It exports a default object that specifies the component as 'button'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_1

LANGUAGE: js
CODE:
```
export default {
  component: 'button',
};
```

----------------------------------------

TITLE: Configuring ArgTypes for Gizmo Component
DESCRIPTION: This code defines the argument types for the Gizmo component in a Storybook story. It imports the Meta type from the Storybook framework and the Gizmo component itself. The argTypes object configures controls for various properties of the Gizmo component, such as canRotate, width, height, and others, allowing users to interactively modify these properties in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/gizmo-story-controls-customization.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/your-framework';

import { Gizmo } from './Gizmo';

const meta = {
  component: Gizmo,
  argTypes: {
    canRotate: {
      control: 'boolean',
    },
    width: {
      control: { type: 'number', min: 400, max: 1200, step: 50 },
    },
    height: {
      control: { type: 'range', min: 200, max: 1500, step: 50 },
    },
    rawData: {
      control: 'object',
    },
    coordinates: {
      control: 'object',
    },
    texture: {
      control: {
        type: 'file',
        accept: '.png',
      },
    },
    position: {
      control: 'radio',
      options: ['left', 'right', 'center'],
    },
    rotationAxis: {
      control: 'check',
      options: ['x', 'y', 'z'],
    },
    scaling: {
      control: 'select',
      options: [10, 50, 75, 100, 200],
    },
    label: {
      control: 'text',
    },
    meshColors: {
      control: {
        type: 'color',
        presetColors: ['#ff0000', '#00ff00', '#0000ff'],
      },
    },
    revisionDate: {
      control: 'date',
    },
  },
} satisfies Meta<typeof Gizmo>;

export default meta;
```

----------------------------------------

TITLE: Installing Vite and Storybook for a New Project
DESCRIPTION: Command line instructions for creating a new Vite project and initializing Storybook with the Vite builder.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-vite/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm create vite@latest # follow the prompts
npx storybook@latest init --builder vite && npm run storybook
```

----------------------------------------

TITLE: Using storiesOf API (Incorrect)
DESCRIPTION: This code demonstrates the usage of the deprecated storiesOf API in Storybook. It imports the storiesOf function from @storybook/react and uses it to define stories for a Button component. This approach is no longer recommended and should be replaced with the CSF format.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-stories-of.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { storiesOf } from '@storybook/react';

import Button from '../components/Button';

storiesOf('Button', module).add('primary', () => <Button primary />);
```

----------------------------------------

TITLE: Overriding Storybook ESLint Rules in Traditional Format (JavaScript)
DESCRIPTION: Demonstrates how to override or disable specific Storybook ESLint rules for story files. This configuration allows for fine-tuning the linting process for Storybook-specific files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
{
  "overrides": [
    {
      // 👇 This should match the `stories` property in .storybook/main.js|ts
      "files": ['**/*.stories.@(ts|tsx|js|jsx|mjs|cjs)'],
      "rules": {
        // 👇 Enable this rule
        'storybook/csf-component': 'error',
        // 👇 Disable this rule
        'storybook/default-exports': 'off',
      }
    }
  ]
}
```

----------------------------------------

TITLE: Configuring Component Parameter in CSF Format
DESCRIPTION: Shows how to set up the component parameter using Component Story Format (CSF) to enable automatic documentation generation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { Badge } from './Badge';

export default {
  title: 'Path/to/Badge',
  component: Badge,
};
```

----------------------------------------

TITLE: Defining Svelte Story with Tags
DESCRIPTION: This Svelte story defines a component with specific tags to control its visibility in Storybook. The `tags` property is used to exclude the story from the sidebar, documentation, and testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_8

LANGUAGE: svelte
CODE:
```
<Story
  name="Variant2"
  tags={['!dev', '!autodocs']}
  args={{ variant: 2 }}
/>
```

----------------------------------------

TITLE: Enabling StoryStoreV7 Feature Flag in Storybook
DESCRIPTION: This code snippet demonstrates how to enable the StoryStoreV7 feature flag in your Storybook configuration file (`.storybook/main.js`). Enabling this flag activates the v7 store, which implies `features.buildStoriesJson` and has the same limitations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_169

LANGUAGE: javascript
CODE:
```
module.exports = {
  // ... your existing config
  framework: "@storybook/react", // OR whatever framework you're using
  features: {
    storyStoreV7: true,
  },
};
```

----------------------------------------

TITLE: CSF 2 Manual Title Configuration
DESCRIPTION: Shows how titles were manually specified in CSF 2 format.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Components/Atoms/Button',
  component: Button,
};
```

----------------------------------------

TITLE: Configuring Story for Example Component (TS)
DESCRIPTION: This snippet configures a Storybook story for the Example component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines the component and its argument types, specifically describing the 'value' property of a slider.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Example } from './Example';

const meta = {
  component: Example,
  argTypes: {
    value: {
      description: 'The value of the slider',
    },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Vue Document Screen Component (TypeScript)
DESCRIPTION: TypeScript version of the Vue Document Screen component using defineComponent for proper type inference. Implements data fetching and conditional rendering with type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
<template>
  <div v-if="!loading && data && data.subdocuments.length">
    <PageLayout :user="data.user">
      <DocumentHeader :document="data.document" />
      <DocumentList :documents="data.subdocuments" />
    </PageLayout>
  </div>
  <p v-if="loading">Loading...</p>
  <p v-if="error">There was an error fetching the data!</p>
</template>
<script lang="ts">
  import { defineComponent, ref } from 'vue';
  import PageLayout from './PageLayout';
  import DocumentHeader from './DocumentHeader';
  import DocumentList from './DocumentList';

  export default defineComponent({
    name: 'SampleRestComponent',
    components: {
      PageLayout,
      DocumentHeader,
      DocumentList,
    },
    setup() {
      const data = ref(null);
      const loading = ref(true);
      const error = ref(null);
      fetch('https://your-restful-endpoint')
        .then((res) => {
          if (!res.ok) {
            error.value = res.statusText;
          }
          return res;
        })
        .then((res) => res.json())
        .then((requestData) => {
          data.value = requestData;
          loading.value = false;
        })
        .catch(() => {
          error.value = 'error';
        });
      return {
        error,
        loading,
        data,
      };
    },
  });
</script>
```

----------------------------------------

TITLE: Using CSF Format (Correct)
DESCRIPTION: This code demonstrates the correct way to define stories in Storybook using the CSF (Component Story Format). It exports a default object containing the component and then exports individual stories as named exports. This is the recommended approach for Storybook 5.2 and later.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-stories-of.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import Button from '../components/Button';

export default = {
  component: Button
}

export const Primary = () => <Button primary />
```

----------------------------------------

TITLE: CSS Resources Addon: Renamed 'name' to 'id' (New)
DESCRIPTION: This code shows the updated way of defining CSS resources in `@storybook/addon-cssresources`, where the `name` attribute has been renamed to `id`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_266

LANGUAGE: javascript
CODE:
```
import { withCssResources } from "@storybook/addon-cssresources";
import { addDecorator } from "@storybook/react";

addDecorator(
  withCssResources({
    cssresources: [
      {
        id: `bluetheme`, // Renamed
        code: `<style>body { background-color: lightblue; }</style>`,
        picked: false,
      },
    ],
  })
);
```

----------------------------------------

TITLE: Configuring Page Story with Custom Footer in Angular
DESCRIPTION: This code defines a Storybook story for the Page component in Angular, allowing customization of the footer. It imports necessary modules from '@storybook/angular' and defines a Meta object to configure the component and rendering function. The render function uses argsToTemplate to bind arguments to the component's template, including a footer slot.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';
import { argsToTemplate } from '@storybook/angular';

import { Page } from './page.component';

type PagePropsAndCustomArgs = Page & { footer?: string };

const meta: Meta<PagePropsAndCustomArgs> = {
  component: Page,
  render: ({ footer, ...args }) => ({
    props: args,
    template: `
      <storybook-page ${argsToTemplate(args)}>
        <ng-container footer>${footer}</ng-container>
      </storybook-page>`,
  }),
};
export default meta;

type Story = StoryObj<PagePropsAndCustomArgs>;

export const CustomFooter: Story = {
  args: {
    footer: 'Built with Storybook',
  },
};
```

----------------------------------------

TITLE: Importing Storybook Docs Components and Stories
DESCRIPTION: Imports required components from Storybook addon-docs and associated AccountForm stories for documentation purposes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/AccountForm.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { Meta, Story } from '@storybook/addon-docs';
import * as AccountFormStories from './AccountForm.stories';
```

----------------------------------------

TITLE: Rendering an Empty List in Solid
DESCRIPTION: This story renders an empty List component in Solid. It leverages the StoryObj type from Storybook to define a story with no specific properties or modifications to the base List component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_9

LANGUAGE: ts
CODE:
```
export const Empty: Story = {};
```

----------------------------------------

TITLE: Converting Storybook CSF 2 to CSF 3 using npm
DESCRIPTION: Command to migrate Storybook Component Story Format from version 2 to 3 using npm. This targets TypeScript React stories with the specified glob pattern and parser.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-csf-2-to-3.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
# Convert CSF 2 to CSF 3
npx storybook@latest migrate csf-2-to-3 --glob="**/*.stories.tsx" --parser=tsx
```

----------------------------------------

TITLE: Configuring Primary Button Story in Solid (TypeScript)
DESCRIPTION: This TypeScript code configures a primary button story within Storybook for a Solid component. It imports necessary modules from 'storybook-solidjs' and defines the component and its arguments, setting the label to 'Button' and primary to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Defining List Component Stories in Svelte
DESCRIPTION: Defines stories for the List component in Svelte using Svelte's snippet syntax. It imports necessary components, defines a template snippet that renders the List with ListItem components, and creates stories for Empty and One Item scenarios.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_7

LANGUAGE: svelte
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import List from './List.svelte';
  import ListItem from './ListItem.svelte';

  //👇 Imports a specific story from ListItem stories
  import { Unchecked } from './ListItem.stories.svelte';

  const { Story } = defineMeta({
    /* 👇 The title prop is optional.
     * See https://storybook.js.org/docs/configure/#configure-story-loading
     * to learn how to generate automatic titles
    */
    title: 'List',
    component: List,
  });
</script>

<!--
  The template construct will be spread to the existing stories.
  It's based on Svelte's snippet syntax allowing you share the same UI with small variations.
-->
{#snippet template(args)}
  <List {...args}>
    {#each args.items as item}
      <ListItem {...item} />
    {/each}
  </List>
{/snippet}

<Story name="Empty" args={{ items: [] }} {template} />

<Story
  name="One Item"
  args={{
    items: [{ ...Unchecked.args }],
  }}
  {template}
/>
```

----------------------------------------

TITLE: Enabling Development Mode for Storybook Builds
DESCRIPTION: This code snippet demonstrates how to enable the `developmentModeForBuild` feature flag in Storybook's main configuration file. This flag sets `process.env.NODE_ENV` to `development` in built Storybooks, enabling development-related optimizations and checks, such as React's `act`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_32

LANGUAGE: javascript
CODE:
```
export default {
  features: {
    developmentModeForBuild: true,
  },
};
```

----------------------------------------

TITLE: Reusing story properties
DESCRIPTION: Updates story files to access story properties via the composed property. This involves accessing story properties such as args or parameters from Story.composed instead of directly from Story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_9

LANGUAGE: Diff
CODE:
```
// ...rest of file

+ export const Primary = meta.story({
- export const Primary: Story = {
    args: { primary: true },
+ });
- };

+ export const PrimaryDisabled = meta.story({
- export const PrimaryDisabled: Story = {
    args: {
+     ...Primary.composed.args,
-     ...Primary.args,
      disabled: true,
    }
+ });
- };
```

----------------------------------------

TITLE: Testing React Button Component Localization
DESCRIPTION: This test suite verifies that the React Button component renders correctly in both English and Spanish locales using Storybook's composeStory function and React Testing Library. It imports the necessary modules from vitest, @testing-library/react, and @storybook/react-vite, as well as the component's meta and Primary story. The tests override the global locale setting to 'en' and 'es' respectively, ensuring the component adapts to the specified language.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-override-globals.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { test } from 'vitest';
import { render } from '@testing-library/react';
import { composeStory } from '@storybook/react-vite';

import meta, { Primary as PrimaryStory } from './Button.stories';

test('renders in English', async () => {
  const Primary = composeStory(
    PrimaryStory,
    meta,
    { globals: { locale: 'en' } } // 👈 Project annotations to override the locale
  );

  await Primary.run();
});

test('renders in Spanish', async () => {
  const Primary = composeStory(PrimaryStory, meta, { globals: { locale: 'es' } });

  await Primary.run();
});
```

----------------------------------------

TITLE: Mocking Links with hrefs Parameter in Storybook (TS)
DESCRIPTION: This code snippet demonstrates how to mock links in Storybook using the `sveltekit_experimental.hrefs` parameter. It defines a mapping of href strings or regular expressions to callback functions that handle link clicks, allowing you to override the default link-handling behavior.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/sveltekit.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
export const MyStory = {
  parameters: {
    sveltekit_experimental: {
      hrefs: {
        '/basic-href': (to, event) => {
          console.log(to, event);
        },
        '/root.*': {
          callback: (to, event) => {
            console.log(to, event);
          },
          asRegex: true,
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Get All Story Files (TypeScript)
DESCRIPTION: This function locates all Storybook story files within the project using a glob pattern. It searches for files with the extensions `.stories.js`, `.story.js`, `.stories.jsx`, `.story.jsx`, `.stories.mjs`, `.story.mjs`, `.stories.ts`, `.story.ts`, `.stories.tsx`, and `.story.tsx` within the `stories` directory. It returns an array of objects, each containing the file path, story file content, story directory, and component name. This version is written in TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#_snippet_4

LANGUAGE: ts
CODE:
```
function getAllStoryFiles() {
  // Place the glob you want to match your stories files
  const storyFiles = glob.sync(
    path.join(__dirname, 'stories/**/*.{stories,story}.{js,jsx,mjs,ts,tsx}'),
  );

  return storyFiles.map((filePath) => {
    const storyFile = require(filePath);
    const storyDir = path.dirname(filePath);
    const componentName = path
      .basename(filePath)
      .replace(/\.(stories|story)\.[^/.]+$/, "");

    return { filePath, storyFile, storyDir, componentName };
  });
}
```

----------------------------------------

TITLE: Fetching GraphQL Data in React (JavaScript)
DESCRIPTION: This component fetches data using Apollo Client in React with JavaScript. It defines a GraphQL query to retrieve user, document, and subdocument information using the `useQuery` hook. It renders a loading message, an error message, or the fetched data using the `PageLayout`, `DocumentHeader`, and `DocumentList` components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#_snippet_1

LANGUAGE: js
CODE:
```
import { useQuery, gql } from '@apollo/client';

import { PageLayout } from './PageLayout';
import { DocumentHeader } from './DocumentHeader';
import { DocumentList } from './DocumentList';

const AllInfoQuery = gql`
  query AllInfo {
    user {
      userID
      name
    }
    document {
      id
      userID
      title
      brief
      status
    }
    subdocuments {
      id
      userID
      title
      content
      status
    }
  }
`;

function useFetchInfo() {
  const { loading, error, data } = useQuery(AllInfoQuery);

  return { loading, error, data };
}

export function DocumentScreen() {
  const { loading, error, data } = useFetchInfo();

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>There was an error fetching the data!</p>;
  }

  return (
    <PageLayout user={data.user}>
      <DocumentHeader document={data.document} />
      <DocumentList documents={data.subdocuments} />
    </PageLayout>
  );
}
```

----------------------------------------

TITLE: Configuring Button Story for Web Components
DESCRIPTION: This snippet configures a Storybook story for a web components Button. It imports the necessary modules from '@storybook/web-components-vite' and defines the component and a primary story with the 'primary' argument set to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-baseline.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

//👇 Throws a type error if the args don't match the component props
export const Primary: Story = {
  args: {
    primary: true,
  },
};
```

----------------------------------------

TITLE: Installing Storybook Addon for Svelte CSF with npm
DESCRIPTION: This command uses npx to add the @storybook/addon-svelte-csf package to a Svelte project using Storybook. It utilizes the latest version of Storybook CLI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@latest add @storybook/addon-svelte-csf
```

----------------------------------------

TITLE: Rendering a List Component with One Item in Storybook (Web Components, JS)
DESCRIPTION: This code snippet defines a story named 'OneItem' that renders a List component with a single ListItem using lit-html. It imports the 'Unchecked' story from 'MyListItem.stories.js' and renders it within the List component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import { html } from 'lit';

// 👇 Import the stories of MyListItem
import { Unchecked } from './MyListItem.stories';

export default {
  title: 'MyList',
  component: 'demo-my-list',
};

export const OneItem = {
  render: () => html` <List> ${Unchecked({ ...Unchecked.args })} </List> `,
};
```

----------------------------------------

TITLE: Disabling Browser Auto-Open
DESCRIPTION: Prevents Storybook from automatically opening in the browser.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_14

LANGUAGE: Shell
CODE:
```
storybook dev --no-open
```

----------------------------------------

TITLE: Defining Button Stories with Accessibility Tests in TypeScript 4.9+
DESCRIPTION: This snippet shows how to create Storybook stories for a Button component using TypeScript 4.9+ syntax. It demonstrates the use of the 'satisfies' keyword for type inference and includes accessibility testing configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-example.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-renderer with the renderer you are using (e.g., react, vue3)
import { Meta, StoryObj } from '@storybook/your-renderer';

import { Button } from './Button';

const meta = {
  component: Button,
  parameters: {
    a11y: { test: 'error' },
  },
} satisfies Meta<typeof Button>;
export default meta;

type Story = StoryObj<typeof meta>;

// 👇 This story will use the 'error' value and fail on accessibility violations
export const Primary: Story = {
  args: { primary: true },
};

// 👇 This story will not fail on accessibility violations
//    (but will still run the tests and show warnings)
export const NoA11yFail: Story = {
  parameters: {
    a11y: { test: 'todo' },
  },
};
```

----------------------------------------

TITLE: Initializing Button Stories with Angular
DESCRIPTION: This code initializes Storybook stories for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines metadata for the Button component, including a primary story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const PrimaryLongName: Story = {
  args: {
    ...Primary.args,
    label: 'Primary with a really long name',
  },
};
```

----------------------------------------

TITLE: Running Storybook Codemod to Upgrade Hierarchy Separators via Shell
DESCRIPTION: Provides a shell command for automatically migrating all Storybook story titles in a codebase to use the correct '/' hierarchy separator. This requires having Node.js/npm and Storybook installed, and executes the Storybook codemod 'upgrade-hierarchy-separators' across matching story files. It expects story files to be located under various subdirectories and supports multiple file extensions like .tsx, .jsx, .ts, and .js.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/hierarchy-separator.md#2025-04-22_snippet_2

LANGUAGE: Shell
CODE:
```
npx storybook@latest migrate upgrade-hierarchy-separators --glob="*/**/*.stories.@(tsx|jsx|ts|js)"
```

----------------------------------------

TITLE: Initializing TodoItem Story - Angular
DESCRIPTION: This code defines a Storybook story for the TodoItem component in Angular. It configures the component's metadata, including declarations, imports, and a primary story with a render function and data loader.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { moduleMetadata } from '@storybook/angular';

import { CommonModule } from '@angular/common';

import { TodoItem } from './TodoItem';

const meta: Meta<TodoItem> = {
  component: TodoItem,
  decorators: [
    moduleMetadata({
      declarations: [TodoItem],
      imports: [CommonModule],
    }),
  ],
};

export default meta;
type Story = StoryObj<TodoItem>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: (args, { loaded: { todo } }) => ({
    props: {
      args,
      todo,
    },
  }),
  loaders: [
    async () => ({
      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),
    }),
  ],
};

```

----------------------------------------

TITLE: Rendering Button with Text Label in Solid (JavaScript)
DESCRIPTION: This code defines a Storybook story for the Button component in Solid using JavaScript. It imports the Button component and the action function from Storybook. The story renders the button with a 'Hello' label and an onClick handler that triggers the 'clicked' action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#_snippet_3

LANGUAGE: js
CODE:
```
import { action } from 'storybook/actions';

import { Button } from './Button';

export default {
  component: Button,
};

export const Text = {
  render: () => <Button label="Hello" onClick={action('clicked')} />,
};
```

----------------------------------------

TITLE: Setting Angular Framework in Storybook (JS)
DESCRIPTION: This JavaScript snippet configures Storybook to use the Angular framework by setting the 'framework' property to '@storybook/angular' within the Storybook configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/angular-add-framework.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  framework: '@storybook/angular', // 👈 Add this
};
```

----------------------------------------

TITLE: Defining List Component Stories in Vue (JavaScript)
DESCRIPTION: Defines stories for the List component in Vue using JavaScript. It imports the List and ListItem components, defines a ListTemplate that renders the List with ListItem components based on the provided items, and creates stories for Empty and OneItem scenarios.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import List from './List.vue';
import ListItem from './ListItem.vue';

//👇 Imports a specific story from ListItem stories
import { Unchecked } from './ListItem.stories';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
};

//👇 The ListTemplate construct will be spread to the existing stories.
const ListTemplate = {
  render: (args) => ({
    components: { List, ListItem },
    setup() {
      return { ...args };
    },
    template: `
      <List v-bind="args">
        <div v-for="item in items" :key="item.title">
          <ListItem :item="item"/>
        </div>
      </List>
    `,
  }),
};

export const Empty = {
  ...ListTemplate,
  args: {
    items: [],
  },
};
export const OneItem = {
  ...ListTemplate,
  args: {
    items: [
      {
        ...Unchecked.args,
      },
    ],
  },
};
```

----------------------------------------

TITLE: Loading JSON Documentation in preview.js
DESCRIPTION: JavaScript code to load the generated JSON documentation file in the Storybook preview.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/ember/README.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { setJSONDoc } from '@storybook/addon-docs/ember';
import docJson from '../dist/storybook-docgen/index.json';

setJSONDoc(docJson);
```

----------------------------------------

TITLE: Updating CLI Process Spawning for Windows Compatibility
DESCRIPTION: Fixes issues with spawning child processes on Windows operating systems in the Storybook CLI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.md#2025-04-22_snippet_6

LANGUAGE: JavaScript
CODE:
```
// Example of cross-platform process spawning
const { spawn } = require('child_process');
const isWindows = process.platform === 'win32';
const command = isWindows ? 'npm.cmd' : 'npm';
spawn(command, ['run', 'storybook'], { stdio: 'inherit' });
```

----------------------------------------

TITLE: Defining Svelte Button Story
DESCRIPTION: This code defines a Storybook story for a Svelte Button component. It imports the necessary modules from Storybook and the Button component itself. It then defines the component's metadata and creates a 'Primary' story with specific arguments for the button's appearance.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_11

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Handle Click Event for Menu Items
DESCRIPTION: Defines a function to handle click events from highlight menu items. It receives the item ID and details about the clicked element, allowing custom actions to be performed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#_snippet_8

LANGUAGE: ts
CODE:
```
import type { ClickEventDetails } from 'storybook/highlight';

const handleClickEvent = (itemId: string, details: ClickEventDetails) => {
  // Handle the menu item click event
}

// When you have a channel instance:
channel.on('MY_CLICK_EVENT', handleClickEvent)

// Or from a decorator:
useChannel({
  MY_CLICK_EVENT: handleClickEvent,
}, [handleClickEvent])
```

----------------------------------------

TITLE: Opting out of the new Angular renderer
DESCRIPTION: This code snippet shows how to opt out of the new Angular renderer in Storybook 6.2 and use the legacy renderer instead. This is done by adding the `angularLegacyRendering: true` parameter to the `.storybook/preview.ts` file. The legacy renderer will be removed in 7.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_196

LANGUAGE: TypeScript
CODE:
```
export const parameters = {
  angularLegacyRendering: true,
};
```

----------------------------------------

TITLE: Listening to Story Changes in React Provider
DESCRIPTION: Example of using the onStory API method in a custom React Provider to listen for story changes and update the preview.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/manager/README.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { Provider } from '@storybook/manager';

class ReactProvider extends Provider {
  handleAPI(api) {
    api.onStory((kind, story) => {
      this.globalState.emit('change', kind, story);
    });
  }
}
```

----------------------------------------

TITLE: Defining Button Story Metadata (JavaScript)
DESCRIPTION: This snippet defines the metadata for a Button component in Storybook using JavaScript. It sets the title, component, and documentation parameters, including a description that overrides the comments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  title: 'Button',
  component: 'demo-button',
  parameters: {
    docs: {
      description: {
        component: 'Another description, overriding the comments',
      },
    },
  },
};
```

----------------------------------------

TITLE: Defining Button Component Story Meta (Typescript)
DESCRIPTION: This code defines the metadata for a Button component story in Storybook using Typescript. It imports the Button component and the Meta type from '@storybook/your-framework', then configures the meta object with the component and documentation parameters, excluding the 'style' control. It uses satisfies to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Defining Button Component Story Meta (Svelte CSF)
DESCRIPTION: This code defines the metadata for a Button component story in Storybook using Svelte CSF (Component Story Format). It imports the Button component and the defineMeta function from '@storybook/addon-svelte-csf', then configures the meta object with the component and documentation parameters, excluding the 'style' control.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const meta = defineMeta({
    component: Button,
    parameters: {
      docs: {
        controls: { exclude: ['style'] },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Resolving TypeScript Module Paths in Storybook
DESCRIPTION: Shows how to configure Storybook to resolve TypeScript module paths using tsconfig-paths-webpack-plugin. This resolves issues with module aliases defined in tsconfig.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
// .storybook/main.js
import TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin';
import path from 'path';

export default {
  framework: {
    name: '@storybook/react-webpack5',
    options: {},
  },
  webpackFinal: async (config) => {
    config.resolve.plugins = [
      ...(config.resolve.plugins || []),
      new TsconfigPathsPlugin({
        extensions: config.resolve.extensions,
      }),
    ];
    return config;
  },
};
```

----------------------------------------

TITLE: Overriding Default Vite Configuration in Storybook
DESCRIPTION: Specifying a custom path for the Vite configuration file in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
export default {
  framework: '@storybook/react-vite',
  core: {
    builder: {
      name: '@storybook/builder-vite',
      options: {
        viteConfigPath: 'path/to/vite.config.js',
      },
    },
  },
};
```

----------------------------------------

TITLE: Transforming Source Code - JavaScript
DESCRIPTION: This code snippet demonstrates how to provide a function to transform the source code using the `docs.source.transform` parameter. This example removes the arrow at the beginning of a function that returns a string.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_13

LANGUAGE: javascript
CODE:
```
const SOURCE_REGEX = /^\(\) => `(.*)`$/;
export const parameters = {
  docs: {
    source: {
      transform: (src, storyContext) => {
        const match = SOURCE_REGEX.exec(src);
        return match ? match[1] : src;
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Webpack for Storybook in Create React App
DESCRIPTION: This function modifies the Storybook webpack configuration for Create React App projects. It checks if react-scripts is installed and applies the CRA webpack config if present. Otherwise, it returns the base config.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpackfinal-example.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export function webpackFinal(config, { configDir }) {
  if (!isReactScriptsInstalled()) {
    logger.info('=> Using base config because react-scripts is not installed.');
    return config;
  }

  logger.info('=> Loading create-react-app config.');
  return applyCRAWebpackConfig(config, configDir);
}
```

----------------------------------------

TITLE: Using mount function to run code before component rendering
DESCRIPTION: This example demonstrates how to use the `mount` function within a Storybook story's `play` function to execute code before the component is rendered. It uses the `mockdate` package to mock the `Date` object, ensuring a consistent state for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/component-testing.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import MockDate from 'mockdate';

export const Basic = {
  play: async ({ canvasElement, context }) => {
    const { mount } = context;

    await mount(async () => {
      MockDate.set('1/1/2023');
    });

    expect(canvasElement.textContent).toContain('January 1st, 2023');

    await mount(async () => {
      MockDate.reset();
    });
  },
};
```

----------------------------------------

TITLE: Preserving Symlinks in Angular Storybook
DESCRIPTION: Configures Storybook to resolve modules to their symlinked path instead of their real path. This is important for projects that use symlinks.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_15

LANGUAGE: JSON
CODE:
```
{"preserveSymlinks": true}
```

----------------------------------------

TITLE: Linking a local reproduction repository
DESCRIPTION: This command links a local reproduction directory to your monorepo dev setup, allowing you to develop against the local reproduction.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#_snippet_12

LANGUAGE: shell
CODE:
```
npx storybook@next link --local /path/to/local-repro-directory
```

----------------------------------------

TITLE: Initializing List Component Story - Angular
DESCRIPTION: This code defines a Storybook story for the List component in Angular. It imports necessary modules and components, including List, ListItem, and CommonModule. It configures the story to render a List component with three ListItems, using the isSelected property from the Selected and Unselected stories of ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { moduleMetadata } from '@storybook/angular';

import { CommonModule } from '@angular/common';

import { List } from './list.component';
import { ListItem } from './list-item.component';

//👇 We're importing the necessary stories from ListItem
import { Selected, Unselected } from './ListItem.stories';

const meta: Meta<List> = {
  component: List,
  decorators: [
    moduleMetadata({
      declarations: [List, ListItem],
      imports: [CommonModule],
    }),
  ],
};

export default meta;
type Story = StoryObj<List>;

export const ManyItems: Story = {
  args: {
    Selected: Selected.args.isSelected,
    Unselected: Unselected.args.isSelected,
  },
  render: (args) => ({
    props: args,
    template: `
      <app-list>
        <app-list-item [isSelected]="Selected"></app-list-item>
        <app-list-item [isSelected]="Unselected"></app-list-item>
        <app-list-item [isSelected]="Unselected"></app-list-item>
      </app-list>
    `,
  }),
};
```

----------------------------------------

TITLE: Defining Storybook Story with CSF (TypeScript)
DESCRIPTION: This TypeScript code defines a Storybook story for a Button component using the Component Story Format (CSF). It imports Meta and StoryObj from '@storybook/your-framework' (which should be replaced with the actual framework). It exports a default meta object containing the component and a 'Large' story that disables backgrounds.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-disabled.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Large: Story = {
  parameters: {
    backgrounds: { disable: true },
  },
};
```

----------------------------------------

TITLE: Incorrect Storybook Addon Configuration
DESCRIPTION: Example showing incorrect configuration where an addon is registered but not listed in package.json dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-uninstalled-addons.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// in .storybook/main.js
module.exports = {
  addons: [
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/addon-interactions', // <-- this addon is not listed in the package.json
  ],
}
```

LANGUAGE: json
CODE:
```
{
  "devDependencies": {
    "@storybook/addon-links": "0.0.1",
    "@storybook/addon-essentials": "0.0.1"
  }
}
```

----------------------------------------

TITLE: Configuring Vitest Setup for Storybook with Vue
DESCRIPTION: This snippet sets up Vitest for use with Storybook in a Vue project. It imports the required dependencies, sets project annotations, and runs Storybook's beforeAll hook. This configuration is specifically for Vue 3 projects.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-set-project-annotations-simple.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import { beforeAll } from 'vitest';
import { setProjectAnnotations } from '@storybook/vue3';
import * as previewAnnotations from './preview';

const annotations = setProjectAnnotations([previewAnnotations]);

// Run Storybook's beforeAll hook
beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Configuring Backgrounds Addon (New)
DESCRIPTION: This code shows the new way of configuring the `@storybook/addon-backgrounds` using parameters. The `backgrounds` parameter is passed to the `addParameters` function, allowing background options to be set globally or at the story level.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_264

LANGUAGE: javascript
CODE:
```
storiesOf("Stories", module).addParameters({ backgrounds: options });
```

----------------------------------------

TITLE: Defining Table Structure for API References in HTML
DESCRIPTION: This HTML snippet defines the structure of a table used to display API references. It includes a header row and multiple body rows, each containing a link to the specific API documentation and a brief description.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/index.mdx#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<Table>
  <thead>
    <Tr>
      <Th scope="col" width="33%">Name</Th>
      <Th scope="col">Description</Th>
    </Tr>
  </thead>

  <tbody>
    <Tr>
      <Td><A href="./api/main-config/main-config"><code>main.js|ts</code></A></Td>

      <Td>
        Storybook's primary configuration file, which specifies your Storybook project's behavior,
        including the location of your stories, the addons you use, feature flags and other
        project-specific settings.
      </Td>
    </Tr>

    <Tr>
      <Td><A href="./configure/#configure-story-rendering"><code>preview.js|jsx|ts|tsx</code></A></Td>

      <Td>
        This configuration file controls the way stories are rendered. You can also use it to run
        code that applies to all stories.
      </Td>
    </Tr>

    <Tr>
      <Td><A href="./configure/#configure-storybooks-ui"><code>manager.js|ts</code></A></Td>

      <Td>
        This configuration file controls the behavior of Storybook's UI, the manager.
      </Td>
    </Tr>

    <Tr>
      <Td><A href="./api/cli-options">CLI</A></Td>

      <Td>
        Storybook is a CLI tool. You can start Storybook in development mode or build a static
        version of your Storybook.
      </Td>
    </Tr>
  </tbody>
</Table>
```

----------------------------------------

TITLE: Enable Crash Reports in main.js
DESCRIPTION: This code snippet shows how to enable crash reports by setting the `enableCrashReports` configuration option to `true` in your Storybook's `main.js` file. This allows Storybook to collect sanitized crash data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/telemetry.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  ...,
  telemetry: {
    enableCrashReports: true,
  },
  ...
};
```

----------------------------------------

TITLE: Configuring TypeScript with Storybook and Vite
DESCRIPTION: TypeScript example showing how to set up strong typing for Storybook configuration with the Vite builder using StorybookConfig type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/builders/builder-vite/README.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/react-vite';

// (or whatever framework you are using)

const config: StorybookConfig = {
  // other storybook options...,
  async viteFinal(config, options) {
    // modify and return config
  },
};

export default config;
```

----------------------------------------

TITLE: Type Definition for Storybook refs Configuration
DESCRIPTION: TypeScript type definition for the refs configuration option in Storybook's main configuration file. It defines the structure for configuring Storybook composition.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-refs.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
{ [key: string]:
  | { title: string; url: string; expanded?: boolean, sourceUrl?: string }
  | (config: { title: string; url: string; expanded?: boolean, sourceUrl: string }) => { title: string; url: string; expanded?: boolean, sourceUrl?: string }
  | { disable: boolean }
}
```

----------------------------------------

TITLE: Initialize MSW with PNPM
DESCRIPTION: Initializes the Mock Service Worker (MSW) service worker files in the public directory using PNPM package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-generate-service-worker.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
pnpm dlx msw init public/
```

----------------------------------------

TITLE: Configuring Storybook Component Meta (JavaScript)
DESCRIPTION: This code configures the Storybook component metadata for MyComponent using JavaScript. It imports the component and defines a default export that specifies the component to be documented in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-canvas-doc-block-story.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { ColorItem, ColorPalette } from '@storybook/addon-docs/blocks';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

const theme = {
  colors: {
    primaryDark: {
      value: '#1C1C1C',
    },
    primaryRegular: {
      value: '#363636',
    },
    primaryLight1: {
      value: '#4D4D4D',
    },
    primaryLight2: {
      value: '#878787',
    },
    primaryLight3: {
      value: '#D1D1D1',
    },
    primaryLight4: {
      value: '#EDEDED',
    },
  },
};

// ❌ Don't use the Doc Blocks inside your stories. It will break Storybook with a cryptic error.
export const Colors = {
  render: () => (
    <ColorPalette>
      {Object.entries(theme.colors).map(([key, { value }]) => (
        <ColorItem
          colors={{
            [key]: value,
          }}
          key={key}
          subtitle={`theme.colors.${key}`}
          title={key}
        />
      ))}
    </ColorPalette>
  ),
};
```

----------------------------------------

TITLE: Disabling TypeScript Compiler in Storybook
DESCRIPTION: Disables the parsing of TypeScript files through the compiler in Storybook's Webpack5 configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
export default {
  typescript: {
    skipCompiler: true
  }
};
```

----------------------------------------

TITLE: Defining Environment Variables in Storybook
DESCRIPTION: This snippet shows how to define custom environment variables in Storybook. It provides a function that receives the current configuration and returns a new configuration object with the added environment variables.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
env: (config) => ({...config, EXAMPLE_VAR: 'Example var' }),
```

----------------------------------------

TITLE: Configuring PostCSS for Dark Theme Class
DESCRIPTION: Adding the postcss-dark-theme-class plugin to the PostCSS configuration file (postcss.config.js).
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  plugins: [
+   require('postcss-dark-theme-class'),
    require('autoprefixer')
  ]
}
```

----------------------------------------

TITLE: Creating List Component Stories with React (JavaScript)
DESCRIPTION: This code defines Storybook stories for a React List component. It imports the List and ListItem components, configures metadata for Storybook, and defines stories for rendering empty, single-item, and multi-item lists using JSX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_3

LANGUAGE: js
CODE:
```
import { List } from './List';
import { ListItem } from './ListItem';

export default {
  component: List,
};

export const Empty = {};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const OneItem = {
  render: (args) => (
    <List {...args}>
      <ListItem />
    </List>
  ),
};

export const ManyItems = {
  render: (args) => (
    <List {...args}>
      <ListItem />
      <ListItem />
      <ListItem />
    </List>
  ),
};
```

----------------------------------------

TITLE: Configuring Import Path Aliases in Storybook
DESCRIPTION: Shows how to configure import path aliases in Storybook, specifically for the '@' import path. This is useful for frameworks that provide default aliasing configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
// .storybook/main.js
export default {
  framework: {
    name: '@storybook/react-webpack5',
    options: {},
  },
  webpackFinal: async (config) => {
    // Update the webpack config to alias the @ import path
    config.resolve.alias['@'] = path.resolve(__dirname, '../src');
    return config;
  },
};
```

----------------------------------------

TITLE: Initializing List Story with Solid (JavaScript)
DESCRIPTION: This code defines a Storybook story for the List component in Solid using JavaScript. It imports the List and ListItem components and defines stories for Empty and OneItem scenarios. The OneItem story renders the List component with a ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_3

LANGUAGE: js
CODE:
```
import { List } from './List';
import { ListItem } from './ListItem';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent
};

export const Empty = {};

export const OneItem = {
  render: (args) => (
    <List {...args}>
      <ListItem />
    </List>
  ),
};
```

----------------------------------------

TITLE: Incorrect Storybook renderer imports
DESCRIPTION: Examples of incorrect code that directly imports from Storybook renderer packages. This is discouraged as it bypasses framework-specific optimizations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-renderer-packages.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Don't import renderer packages directly
import { something } from '@storybook/react';
import { something } from '@storybook/vue3';
import { something } from '@storybook/web-components';
```

----------------------------------------

TITLE: Enabling TypeScript Checking in Storybook Configuration
DESCRIPTION: Enables the fork-ts-checker-webpack-plugin for TypeScript checking in Storybook's Webpack configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-typescript.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  typescript: {
    check: true
  }
};
```

----------------------------------------

TITLE: Registering Themes Addon in Storybook Configuration
DESCRIPTION: Adding the themes addon to the Storybook configuration in main.js file
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/styled-components.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
export default {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    '@storybook/addon-essentials',
+   '@storybook/addon-themes',
  ],
};
```

----------------------------------------

TITLE: Initializing Storybook Meta and Combined Stories with Play Function (Web Components)
DESCRIPTION: This code defines the CombinedStories with a play function that executes FirstStory and SecondStory before typing into 'another-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_11

LANGUAGE: js
CODE:
```
export const CombinedStories = {
  play: async ({ context, canvasElement }) => {
    const canvas = within(canvasElement);

    // Runs the FirstStory and Second story play function before running this story's play function
    await FirstStory.play(context);
    await SecondStory.play(context);
```

----------------------------------------

TITLE: Importing Existing Webpack Configuration into Storybook
DESCRIPTION: Shows how to import an existing Webpack configuration and merge it with Storybook's default configuration. This is useful when reusing Webpack configurations from generators or other tools.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/webpack.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
// .storybook/main.js
import { merge } from 'webpack-merge';
import customWebpackConfig from '../webpack.config.js';

export default {
  framework: {
    name: '@storybook/react-webpack5',
    options: {},
  },
  webpackFinal: async (config) => {
    // Merge the customWebpackConfig with the Storybook config
    return merge(config, customWebpackConfig);
  },
};
```

----------------------------------------

TITLE: Simulating Interactions and Asserting DOM Structure in FilledForm Story
DESCRIPTION: This code defines a Storybook story named 'FilledForm' that simulates user interactions with the LoginForm component, such as typing into email and password fields, and clicking a button. It then asserts that the expected text is present in the DOM.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_20

LANGUAGE: typescript
CODE:
```
export const FilledForm: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // 👇 Simulate interactions with the component
    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');

    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await userEvent.click(canvas.getByRole('button'));

    // 👇 Assert DOM structure
    await expect(
      canvas.getByText(
        'Everything is perfect. Your account is ready and we should probably get you started!'
      )
    ).toBeInTheDocument();
  },
};
```

----------------------------------------

TITLE: Importing Dependencies for Storybook React Stories
DESCRIPTION: Imports React and the storiesOf function from Storybook's React integration. Includes ESLint disable comments for specific rules.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ugly-comments-stories.txt#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
/* eslint-disable global-require, import/no-dynamic-require */

import React from 'react';

/*
 eslint-disable some kind
 of multi line ignore, though
 I'm not sure it's possible.
*/

import { storiesOf } from '@storybook/react';
```

----------------------------------------

TITLE: Linking to a specific documentation section
DESCRIPTION: This markdown snippet creates a link that redirects to a specific section within a documentation page, identified by the documentation page's unique identifier and the section's anchor.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_12

LANGUAGE: Markdown
CODE:
```
[Go to the conclusion of the documentation page](?path=/docs/some--id#conclusion)
```

----------------------------------------

TITLE: Git Checkout for Code Snippet Contribution
DESCRIPTION: Creates a new branch for contributing code snippets to the Storybook documentation. This isolates the changes and allows for easier review and merging.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#_snippet_5

LANGUAGE: shell
CODE:
```
git checkout -b code-snippets-for-framework
```

----------------------------------------

TITLE: Creating Storybook Story for HTML Component (JS)
DESCRIPTION: This code creates a Storybook story for an HTML component using JavaScript. It imports the createYourComponent function and defines the story's title and render function. The render function uses createYourComponent to render the component with the provided arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_1

LANGUAGE: js
CODE:
```
import { createYourComponent } from './YourComponent';

// 👇 This default export determines where your story goes in the story list
export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'YourComponent',
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const FirstStory = {
  render: (args) => createYourComponent(args),
  args: {
    // 👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Remove Highlight Story with Decorator - Angular
DESCRIPTION: This story demonstrates how to use the componentWrapperDecorator in Angular to emit HIGHLIGHT and REMOVE_HIGHLIGHT events using the useChannel hook. It highlights specific selectors and then removes the highlight.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-remove.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';
import { componentWrapperDecorator } from '@storybook/angular';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, REMOVE_HIGHLIGHT } from 'storybook/highlight';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const RemoveHighlight: Story = {
  decorators: [
    componentWrapperDecorator((story) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        id: 'my-unique-id',
        selectors: ['header', 'section', 'footer'],
      });
      emit(REMOVE_HIGHLIGHT, 'my-unique-id');
      return story;
    }),
  ],
};
```

----------------------------------------

TITLE: Specifying Story Files in Storybook's main.js
DESCRIPTION: This snippet demonstrates how to specify individual story files in Storybook's `main.js` configuration, replacing the deprecated `configure` API. It shows how to load stories by providing an array of file names.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_241

LANGUAGE: javascript
CODE:
```
// in .storybook/main.js
module.exports = {
  stories: [
    "../src/components/Button.stories.js",
    "../src/components/Table.stories.js",
    "../src/components/Page.stories.js",
  ],
};
```

----------------------------------------

TITLE: Configuring Storybook Preview for Compodoc in Angular
DESCRIPTION: This configuration in `.storybook/preview.ts` imports the metadata generated by Compodoc and uses it to generate controls and argTypes for Storybook stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { setCompodocJson } from '@storybook/addon-docs/angular';
import docJson from '../documentation.json';

setCompodocJson(docJson);
```

----------------------------------------

TITLE: Initializing Storybook Preview with Decorator - Solid (JS)
DESCRIPTION: This snippet initializes a Storybook preview configuration for Solid using JavaScript, defining a decorator that wraps stories with a layout based on the 'pageLayout' parameter. It renders a div with a specific class around the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#_snippet_3

LANGUAGE: javascript
CODE:
```
export default {
  decorators: [
    // 👇 Defining the decorator in the preview file applies it to all stories
    (Story, { parameters }) => {
      // 👇 Make it configurable by reading from parameters
      const { pageLayout } = parameters;
      switch (pageLayout) {
        case 'page':
          return (
            // Your page layout is probably a little more complex than this ;)
            <div className="page-layout">
              <Story />
            </div>
          );
        case 'page-mobile':
          return (
            <div className="page-mobile-layout">
              <Story />
            </div>
          );
        default:
          // In the default case, don't apply a layout
          return <Story />;
      }
    },
  ],
};
```

----------------------------------------

TITLE: Reset Highlight Story Decorator - Vue (TypeScript)
DESCRIPTION: This story decorator for Vue components uses `useChannel` to emit `RESET_HIGHLIGHT` and `HIGHLIGHT` events. It removes previously highlighted elements and then highlights elements specified by the provided CSS selectors. The decorator returns a template containing the story. This example is written in TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-reset.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ResetHighlight: Story = {
  decorators: [
    () => {
      const emit = useChannel({});
      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements
      emit(HIGHLIGHT, {
        selectors: ['header', 'section', 'footer'],
      });
      return {
        template: '<story />',
      };
    },
  ],
};
```

----------------------------------------

TITLE: Creating a New Git Branch
DESCRIPTION: Creates a new Git branch for your contribution.  Assumes you are in the root directory of the Storybook monorepo. Requires Git to be installed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#_snippet_5

LANGUAGE: Shell
CODE:
```
git checkout -b my-first-storybook-contribution
```

----------------------------------------

TITLE: Rendering Right Arrow SVG Component in React
DESCRIPTION: This snippet defines a React component that renders an SVG right arrow icon. The component is styled inline and uses currentColor for fill, allowing for easy color customization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/create-storybook/rendererAssets/common/Configure.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
export const RightArrow = () => <svg 
    viewBox="0 0 14 14" 
    width="8px" 
    height="14px" 
    style={{ 
      marginLeft: '4px',
      display: 'inline-block',
      shapeRendering: 'inherit',
      verticalAlign: 'middle',
      fill: 'currentColor',
      'path fill': 'currentColor'
    }}
>
  <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
</svg>
```

----------------------------------------

TITLE: Initializing Storybook Story for Solid Component (JS)
DESCRIPTION: This code initializes a Storybook story for a Solid component, MyComponent, using JavaScript. It defines a story named 'WithAnImage' that renders an image with a specified source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_3

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

// Assume image.png is located in the "public" directory.
export const WithAnImage = {
  render: () => <img src="/image.png" alt="my image" />,
};

```

----------------------------------------

TITLE: Opting out of v7 store for Storyshots
DESCRIPTION: This code snippet shows how to opt-out of the v7 store when running Storyshots by checking the user agent. This workaround ensures compatibility with Storyshots, which is not currently compatible with the v7 store.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_174

LANGUAGE: javascript
CODE:
```
module.exports = {
  features: {
    storyStoreV7: !global.navigator?.userAgent?.match?.("jsdom"),
  },
};
```

----------------------------------------

TITLE: Setting Viewport Override with Globals
DESCRIPTION: This snippet illustrates how to set an override value for the viewport using the `globals` property. It also shows the change from `defaultOrientation` to `isRotated` for landscape orientation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_39

LANGUAGE: diff
CODE:
```
// Button.stories.ts
export default {
  component: Button,
- parameters: {
-   viewport: {
-     defaultViewport: "iphone5",
-     defaultOrientation: "landscape",
-   },
- },
+ globals: {
+   viewport: {
+     value: "iphone5",
+     isRotated: true,
+   },
+ },
};
```

----------------------------------------

TITLE: Testing Storybook Composed Button Story in Vue - TypeScript
DESCRIPTION: This snippet tests the 'Primary' composed Storybook story of a Button component for Vue 3 using TypeScript. It uses @testing-library/vue for rendering components and making assertions, and @storybook/vue3 to compose stories. The test checks that the 'button' role's text content matches the label value from the story, supporting maintainability and type safety. It depends on @testing-library/vue, @storybook/vue3, and valid TypeScript Button story exports.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/reuse-args-test.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import { render, screen } from '@testing-library/vue';

import { composeStories } from '@storybook/vue3';

import * as stories from './Button.stories';

const { Primary } = composeStories(stories);

test('reuses args from composed story', () => {
  render(Primary());

  const buttonElement = screen.getByRole('button');
  // Testing against values coming from the story itself! No need for duplication
  expect(buttonElement.textContent).toEqual(Primary.args.label);
});
```

----------------------------------------

TITLE: Configuring Storybook Component with Next.js Navigation (TS)
DESCRIPTION: This TypeScript snippet configures a Storybook story for the NavigationBasedComponent. It imports Meta and StoryObj types from Storybook, sets the component, and specifies Next.js parameters, including enabling the app directory and defining navigation segments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-segments-override-in-meta.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Meta, StoryObj } from '@storybook/your-framework';

import NavigationBasedComponent from './NavigationBasedComponent';

const meta = {
  component: NavigationBasedComponent,
  parameters: {
    nextjs: {
      appDirectory: true,
      navigation: {
        segments: ['dashboard', 'analytics'],
      },
    },
  },
} satisfies Meta<typeof NavigationBasedComponent>;
export default meta;
```

----------------------------------------

TITLE: Customizing Table of Contents in Storybook Preview
DESCRIPTION: This code snippet demonstrates how to customize the table of contents in Storybook by configuring the `toc` property within the `docs` parameter in the `.storybook/preview.js` or `.storybook/preview.ts` file. It shows how to set the title, heading selector, and other options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/autodocs.mdx#_snippet_8

LANGUAGE: JavaScript
CODE:
```
export const parameters = {
  docs: {
    toc: {
      title: 'Table of Contents',
      headingSelector: 'h2, h3',
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Main File using TypeScript
DESCRIPTION: This snippet shows how to configure Storybook using a TypeScript main.ts file with type safety. It imports and utilizes the 'StorybookConfig' type from the framework package (to be replaced with the actual package), defines framework, story paths, and customizes the manager head, similar to the JavaScript version. Dependencies include the relevant Storybook framework and TypeScript types. Key parameters are enforced by the 'StorybookConfig' type, ensuring valid configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-manager-head.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  managerHead: (head) => `
    ${head}
    <link rel="preload" href="/fonts/my-custom-manager-font.woff2" />
  `,
};

export default config;
```

----------------------------------------

TITLE: Filling Registration Form Story - Angular
DESCRIPTION: This story simulates filling out the registration form with an email and password, then submitting the form. It uses Storybook's `userEvent` to type into the input fields and click the submit button. The `within` function is used to query elements within the canvas.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { userEvent, within } from 'storybook/test';

import { RegistrationForm } from './RegistrationForm.component';

const meta: Meta<RegistrationForm> = {
  component: RegistrationForm,
};

export default meta;
type Story = StoryObj<RegistrationForm>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const emailInput = canvas.getByLabelText('email', {
      selector: 'input',
    });

    await userEvent.type(emailInput, 'example-email@email.com', {
      delay: 100,
    });

    const passwordInput = canvas.getByLabelText('password', {
      selector: 'input',
    });

    await userEvent.type(passwordInput, 'ExamplePassword', {
      delay: 100,
    });
    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const submitButton = canvas.getByRole('button');

    await userEvent.click(submitButton);
  },
};
```

----------------------------------------

TITLE: Registering ArgTypes Enhancers in Vue Framework
DESCRIPTION: Code snippet showing how to register an enhanceArgTypes function in a Vue framework-specific preview.js file to enable automatic ArgTables generation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/multiframework.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { enhanceArgTypes } from './enhanceArgTypes';

export const argTypesEnhancers = [enhanceArgTypes];
```

----------------------------------------

TITLE: Starting a Storybook Sandbox
DESCRIPTION: Starts a Storybook sandbox environment, which installs prerequisites, builds the code, creates and links a starter example based on a Vite React setup, and starts the Storybook server. Requires Yarn to be installed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: Initializing Button Story - Solid - TS
DESCRIPTION: This snippet initializes a Storybook story for a Solid Button component using TypeScript. It imports the necessary modules from 'storybook-solidjs' and defines a Meta object to configure the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#_snippet_3

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = { args: { primary: true } };
```

----------------------------------------

TITLE: Skipping dependency installation
DESCRIPTION: Skips the dependency installation step, allowing for manual configuration of Storybook's dependencies. This is useful for advanced users who want to customize the installation process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_122

LANGUAGE: Shell
CODE:
```
create storybook --skip-install
```

----------------------------------------

TITLE: Initializing List Story with Angular
DESCRIPTION: This code defines a Storybook story for the List component in Angular. It imports necessary modules, declares the List and ListItem components, and configures the story with module metadata. It also defines stories for Empty and OneItem scenarios, rendering the List component with a ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { moduleMetadata } from '@storybook/angular';

import { CommonModule } from '@angular/common';

import { List } from './list.component';
import { ListItem } from './list-item.component';

const meta: Meta<List> = {
  component: List,
  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent
  decorators: [
    moduleMetadata({
      declarations: [List, ListItem],
      imports: [CommonModule],
    }),
  ],
};
export default meta;

type Story = StoryObj<List>;

export const Empty: Story = {};

export const OneItem: Story = {
  args: {},
  render: (args) => ({
    props: args,
    template: `
      <app-list>
        <app-list-item></app-list-item>
      </app-list>
  `,
  }),
};
```

----------------------------------------

TITLE: Defining a Storybook Story with an Image in Typescript
DESCRIPTION: This TypeScript snippet defines a Storybook story named 'WithAnImage' that renders an image using Lit's html template literal. The image source is a placeholder from storybook.js.org, and it includes an alt attribute for accessibility. It uses TypeScript types for Meta and StoryObj from '@storybook/web-components-vite'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const WithAnImage: Story = {
  render: () =>
    html`<img
      src="https://storybook.js.org/images/placeholders/350x150.png"
      alt="My CDN placeholder"
    />`,
};
```

----------------------------------------

TITLE: Disable Storybook telemetry during upgrade
DESCRIPTION: Disables Storybook's telemetry.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_77

LANGUAGE: Shell
CODE:
```
storybook upgrade --disable-telemetry
```

----------------------------------------

TITLE: Configuring date control for string ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'date' control, providing a datepicker to choose a date within Storybook's controls panel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_15

LANGUAGE: JavaScript
CODE:
```
{ control: 'date' }
```

----------------------------------------

TITLE: Disabling Emotion Alias for Emotion 11 Compatibility
DESCRIPTION: This code snippet shows how to disable the Emotion alias feature flag in your Storybook configuration file (`.storybook/main.js`). Disabling this flag opts-out of pinning the Emotion version to v10, which unlocks theming for emotion11-based libraries in Storybook 6.4.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_175

LANGUAGE: javascript
CODE:
```
module.exports = {
  features: {
    emotionAlias: false,
  },
};
```

----------------------------------------

TITLE: Configuring Button Story in Angular
DESCRIPTION: This code configures a Storybook story for an Angular Button component. It imports the Button component and defines its metadata, including argument types for background color and default arguments to set the primary property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-args-primary.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  //👇 Creates specific argTypes
  argTypes: {
    backgroundColor: { control: 'color' },
  },
  args: {
    //👇 Now all Button stories will be primary.
    primary: true,
  },
};

export default meta;
```

----------------------------------------

TITLE: Disabling Angular Development Mode in Storybook
DESCRIPTION: Disables Angular's development mode, which turns off assertions and other checks within the framework, potentially improving performance.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_27

LANGUAGE: JSON
CODE:
```
{"enableProdMode": true}
```

----------------------------------------

TITLE: Initializing Svelte Storybook Story
DESCRIPTION: This code initializes a Storybook story for a Svelte component named MyComponent. It imports the component and defines the default export with the component and title.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#_snippet_2

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
  title: 'components/MyComponent/MyComponent',
};

export const Default = {
  args: {
    something: 'Something else',
  },
};

```

----------------------------------------

TITLE: Storybook Init with Features
DESCRIPTION: This example shows how to use specific features when installing, skipping the prompt. Supported values are `docs` and `test`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_50

LANGUAGE: shell
CODE:
```
storybook init --features docs test
```

----------------------------------------

TITLE: Customize story source - MDX
DESCRIPTION: This code snippet demonstrates how to customize the source snippet for a story in Storybook using MDX. It sets the `storySource` parameter within the Story tag to define a custom source string.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_232

LANGUAGE: jsx
CODE:
```
<Story name="Example" parameters={{ storySource: { source: "custom source" } }}>
  <Button />
</Story>
```

----------------------------------------

TITLE: Valid Glob Pattern in main.js
DESCRIPTION: This code snippet shows an example of a valid glob pattern for specifying story files in Storybook's `main.js` file. This pattern uses the `@()` syntax to correctly match TypeScript and JavaScript story files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_212

LANGUAGE: javascript
CODE:
```
stories: ['./**/*.stories.@(ts|js)']
```

----------------------------------------

TITLE: Linting Markdown Code
DESCRIPTION: This script checks markdown files and code samples within them for linting errors using remark.
SOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn lint:md
```

----------------------------------------

TITLE: Storybook Sandbox with Debug Mode
DESCRIPTION: Outputs more logs in the CLI to assist with debugging the sandbox generation process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_114

LANGUAGE: Shell
CODE:
```
storybook sandbox --debug
```

----------------------------------------

TITLE: Adding Decorator Configuration to Storybook JavaScript
DESCRIPTION: This function modifies the Storybook addon configuration by adding a decorator from 'my-other-addon'. The config function accepts an entries array and options, returning the array enriched with the specified decorator. It requires the 'my-other-addon' package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-load-external-addons-preset.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
const config = (entry = [], options) => {
  return [...entry, require.resolve('my-other-addon/addDecorator')];
};
```

----------------------------------------

TITLE: Defining Storybook Story for Web Components (TS)
DESCRIPTION: This snippet defines a Storybook story for a web component using TypeScript. It imports the necessary modules from '@storybook/web-components-vite'. It then defines a metadata object and a story object with specific arguments, utilizing environment variables.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-vite-env-variables.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const ExampleStory: Story = {
  args: {
    propertyA: import.meta.env.STORYBOOK_DATA_KEY,
    propertyB: import.meta.env.VITE_CUSTOM_VAR,
  },
};
```

----------------------------------------

TITLE: Registering @storybook/addon-themes in Storybook Configuration
DESCRIPTION: Diff showing how to add the @storybook/addon-themes to the addons array in the .storybook/main.js file. This step is necessary to enable the addon in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/tailwind.md#2025-04-22_snippet_1

LANGUAGE: diff
CODE:
```
export default {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    '@storybook/addon-essentials',
+   '@storybook/addon-themes',
  ],
};
```

----------------------------------------

TITLE: Adding withKnobs decorator
DESCRIPTION: This code snippet demonstrates how to add the withKnobs decorator to Storybook, which is necessary for using the addon-knobs addon in versions prior to Storybook 6.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_221

LANGUAGE: javascript
CODE:
```
import { withKnobs } from "../index";

addDecorator(withKnobs);
```

----------------------------------------

TITLE: Configuring Storybook Main Settings in TypeScript
DESCRIPTION: TypeScript configuration file for Storybook with type safety using StorybookConfig type. Defines the same settings as the JavaScript version but with proper type definitions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-webpack-options.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    builder: {
      name: '@storybook/builder-webpack5',
      options: {
        fsCache: true,
        lazyCompilation: true,
      },
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Defining Svelte Story with Play Function (Svelte CSF)
DESCRIPTION: This code defines a Svelte Storybook story using the Component Story Format (CSF). It imports necessary modules, defines the component, and uses a play function to simulate user interactions with a select element, including pauses between selections.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#_snippet_2

LANGUAGE: javascript
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, within } from 'storybook/test';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });

  function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
</script>

<!--
  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
  to learn more about using the canvasElement to query the DOM
-->
<Story
  name="ExampleChangeEvent"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const select = canvas.getByRole('listbox');

    await userEvent.selectOptions(select, ['One Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Another Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Yet another item']);
  }}
/>
```

----------------------------------------

TITLE: Defining Button Stories with Accessibility Tests in JavaScript
DESCRIPTION: This snippet illustrates how to create Storybook stories for a Button component in JavaScript. It includes accessibility testing configurations, showing how to set up stories that will fail on accessibility violations and others that will only show warnings.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-example.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  parameters: {
    a11y: { test: 'error' },
  },
};

// 👇 This story will use the 'error' value and fail on accessibility violations
export const Primary = {
  args: { primary: true },
};

// 👇 This story will not fail on accessibility violations
//    (but will still run the tests and show warnings)
export const NoA11yFail = {
  parameters: {
    a11y: { test: 'todo' },
  },
};
```

----------------------------------------

TITLE: Testing React Button Story with Play Function
DESCRIPTION: This test renders the Primary story of the Button component and executes its play function using Storybook's composeStories and Jest. It imports the necessary modules from @storybook/react-vite and @jest/globals.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-with-play-function.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { test } from '@jest/globals';
// 👉 Using Next.js? Import from @storybook/nextjs instead
import { composeStories } from '@storybook/react-vite';

import * as stories from './Button.stories';

const { Primary } = composeStories(stories);

test('renders and executes the play function', async () => {
  // Mount story and run interactions
  await Primary.run();
});
```

----------------------------------------

TITLE: Initializing Checkbox Storybook story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Checkbox component. It imports the necessary modules from '@storybook/angular' and defines the component's metadata, including the title and component class.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Checkbox } from './checkbox.component';

const meta: Meta<Checkbox> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Design System/Atoms/Checkbox',
  component: CheckBox,
};

export default meta;
```

----------------------------------------

TITLE: Configuring Web Components Button Stories in TypeScript
DESCRIPTION: TypeScript configuration for Button component stories using Web Components with background parameters. Includes type safety through @storybook/web-components Meta type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-values-in-meta.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import type { Meta } from '@storybook/web-components';

const meta: Meta = {
  component: 'demo-button',
  parameters: {
    backgrounds: {
      default: 'Light',
      values: [
        // 👇 Add a new value
        { name: 'Gray', value: '#CCC' },
      ],
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Running Storybook with npm
DESCRIPTION: Command to start Storybook using npm as the package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-run-dev.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
npm run storybook
```

----------------------------------------

TITLE: CSF3 object stories
DESCRIPTION: This TypeScript code snippet shows how to import the `StoryObj` type from `@storybook/<framework>` for CSF3 object stories. This approach will persist in Storybook 7.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_165

LANGUAGE: TypeScript
CODE:
```
import type { StoryObj } from "@storybook/<framework>";
```

----------------------------------------

TITLE: Testing Button Component with Vue
DESCRIPTION: This test suite uses Storybook's composeStories to test the Button component in a Vue environment. It imports stories and component annotations from the Button.stories file and renders the Primary story with default args and overridden props, asserting that the correct text is displayed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-compose-stories.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@jest/globals';
import { render, screen } from '@testing-library/vue';
import { composeStories } from '@storybook/vue3-vite';

// Import all stories and the component annotations from the stories file
import * as stories from './Button.stories';

// Every component that is returned maps 1:1 with the stories,
// but they already contain all annotations from story, meta, and project levels
const { Primary, Secondary } = composeStories(stories);

test('renders primary button with default args', () => {
  render(Primary);
  const buttonElement = screen.getByText('Text coming from args in stories file!');
  expect(buttonElement).not.toBeNull();
});

test('renders primary button with overridden props', () => {
  // You can override props and they will get merged with values from the story's args
  render(Primary, { props: { label: 'Hello world' } });
  const buttonElement = screen.getByText(/Hello world/i);
  expect(buttonElement).not.toBeNull();
});
```

----------------------------------------

TITLE: Configuring Storybook Framework with React Webpack 5 in JavaScript
DESCRIPTION: This snippet shows how to configure Storybook to use the React Webpack 5 framework in a JavaScript configuration file. It sets the `framework` property to `@storybook/react-webpack5`. This tells Storybook to use the React Webpack 5 builder.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-add-framework.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  framework: '@storybook/react-webpack5', // 👈 Add this
};
```

----------------------------------------

TITLE: Configuring Storybook with NgRx Store Integration
DESCRIPTION: This code sets up a Storybook story for an Angular component with NgRx store. It uses moduleMetadata decorator to import the StoreModule and declare the component, ensuring the store is properly injected when the story is rendered.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.txt#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
storiesOf('ngrx|Store', module)
  .addDecorator(
    moduleMetadata({
      imports: [StoreModule.forRoot({})],
      declarations: [WithStoreComponent],
    })
  )
  .add('With component', () => {
    return {
      component: WithStoreComponent,
    };
  });
```

----------------------------------------

TITLE: Creating Storybook Stories with React Docgen Examples
DESCRIPTION: Defines a group of stories that demonstrate how comments from different sources (PropType declarations, Flow declarations, and component declarations) are extracted and displayed in the Info addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
storiesOf('Addons|Info.React Docgen', module)
  .add(
    'Comments from PropType declarations',
    withInfo(
      'Comments above the PropType declarations should be extracted from the React component file itself and rendered in the Info Addon prop table'
    )(() => <DocgenButton label="Docgen Button" />)
  )
  .add(
    'Comments from Flow declarations',
    withInfo(
      'Comments above the Flow declarations should be extracted from the React component file itself and rendered in the Info Addon prop table'
    )(() => <FlowTypeButton label="Flow Typed Button" />)
  )
  .add(
    'Comments from component declaration',
    withInfo(
      'Comments above the component declaration should be extracted from the React component file itself and rendered below the Info Addon heading'
    )(() => <BaseButton label="Button" />)
  );
```

----------------------------------------

TITLE: Linking Figma Components to Storybook Stories
DESCRIPTION: Example of how to add a Figma design URL as a parameter to a Storybook story. This allows the design to be displayed alongside the story in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/design-integrations.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export const MyStory = {
  parameters: {
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/LKQ4FJ4bTnCSjedbRpk931/Sample-File'
    }
  }
}
```

----------------------------------------

TITLE: Configuring Vite for Solid in Storybook
DESCRIPTION: This code snippet demonstrates how to configure Vite for a Solid project within Storybook. It imports the defineConfig function from vite and the solid plugin from vite-plugin-solid. The defineConfig function is then used to configure Vite with the solid plugin.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_53

LANGUAGE: typescript
CODE:
```
import { defineConfig } from "vite";
import solid from "vite-plugin-solid";

export default defineConfig({
  plugins: [solid()],
});
```

----------------------------------------

TITLE: Managing Addon State with useAddonState
DESCRIPTION: The `useAddonState` hook is designed for addons that require data persistence. It's useful for maintaining state across Storybook's UI lifecycle or for more complex addons involving multiple UI elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_15

LANGUAGE: javascript
CODE:
```
import { useAddonState, useStorybookApi } from '@storybook/manager-api';

const ADDON_ID = 'my/addon-id';
const PANEL_ID = `${ADDON_ID}/panel`;

export const MyPanel = () => {
  const api = useStorybookApi();
  const [state, setState] = useAddonState(ADDON_ID, 'initial value');

  return (
    <div>
      <p>Current state: {state}</p>
      <button onClick={() => setState('new value')}>Update state</button>
    </div>
  );
};

```

----------------------------------------

TITLE: Running a Customizable Sandbox Storybook
DESCRIPTION: This script starts a sandbox Storybook instance with options to customize the sandbox environment, such as selecting different frameworks for testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
yarn task
```

----------------------------------------

TITLE: Customize Sidebar Label Rendering in Storybook
DESCRIPTION: This code snippet demonstrates how to customize the sidebar label rendering in Storybook using the addons API. It uses lodash's startCase function to transform the name of each item in the sidebar, except for stories, which retain their original name. This allows restoring the old titles in the UI after the auto-title changes in SB 6.5.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_150

LANGUAGE: JavaScript
CODE:
```
import { addons } from "@storybook/addons";
import startCase from "lodash/startCase";

addons.setConfig({
  sidebar: {
    renderLabel: ({ name, type }) =>
      type === "story" ? name : startCase(name),
  },
});
```

----------------------------------------

TITLE: Importing and Using Storybook Addons in Story
DESCRIPTION: Imports necessary modules from `@storybook/react`, `@storybook/addon-actions`, and `@storybook/addon-links` to define and use actions and links within a Storybook story.  This allows for interactive elements and navigation between stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_294

LANGUAGE: javascript
CODE:
```
import React from "react";
import { storiesOf } from "@storybook/react";
import { action } from "@storybook/addon-actions";
import { linkTo } from "@storybook/addon-links";
```

----------------------------------------

TITLE: Setting Story Hierarchy Defaults in Storybook (JavaScript)
DESCRIPTION: This snippet demonstrates how to set the `hierarchyRootSeparator` and `hierarchySeparator` options to configure the hierarchical tree of stories in Storybook's UI. It shows the recommended defaults introduced in Storybook 5.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_257

LANGUAGE: JavaScript
CODE:
```
{
  hierarchyRootSeparator: '|',
  hierarchySeparator: /\/|\./,
}
```

----------------------------------------

TITLE: MDX Story Example
DESCRIPTION: This MDX story defines a simple button with an action. It demonstrates the basic structure of an MDX story within Storybook Docs. The story renders a Button component that triggers an action when clicked.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/faq.md#_snippet_0

LANGUAGE: mdx
CODE:
```
<Story name="solo story">
  <Button onClick={action('clicked')}>solo</Button>
</Story>
```

----------------------------------------

TITLE: Typing stories with Meta and StoryObj in CSF file
DESCRIPTION: This code snippet demonstrates how to use the `Meta` and `StoryObj` types from Storybook to type stories in a CSF (Component Story Format) file. It shows how to define the component meta and individual stories with proper type annotations, enabling TypeScript to provide better type checking and autocompletion.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/typescript.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { Button } from './Button';

// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
  title: 'Example/Button',
  component: Button,
  argTypes: {
    backgroundColor: {
      control: 'color',
    },
  },
} satisfies Meta<typeof Button>;

export default meta;

type Story = StoryObj<typeof meta>;

// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const Secondary: Story = {
  args: {
    label: 'Button',
  },
};

export const Large: Story = {
  args: {
    size: 'large',
    label: 'Button',
  },
};

export const Small: Story = {
  args: {
    size: 'small',
    label: 'Button',
  },
};

```

----------------------------------------

TITLE: Defining Storybook Story for Common TypeScript Component
DESCRIPTION: This snippet defines a Storybook story for a TypeScript component named Foo, adaptable for various frameworks. It imports Meta and StoryObj types from '@storybook/your-framework', where 'your-framework' should be replaced with the specific framework being used. The meta object configures the story's title, component, and ID, while the Baz constant defines a story instance.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/other-foo-bar-story.md#_snippet_2

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Foo } from './Foo';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'OtherFoo/Bar',
  component: Foo,
  id: 'Foo/Bar', // Or 'foo-bar' if you prefer
} satisfies Meta<typeof Foo>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Baz: Story = {
  name: 'Insert name here',
};

```

----------------------------------------

TITLE: Initializing Button Storybook with Svelte (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript. It imports the Meta type from '@storybook/your-framework' and the Button component, then defines a Meta object to configure the story's title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-grouped.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Design System/Atoms/Button',
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Vitest Story Snapshot Tests
DESCRIPTION: This `describe` block defines the test suite for Storybook story snapshots. It iterates through each story file, composes the stories, and then creates a test case for each individual story. Each test case runs the story and compares the rendered output against a stored snapshot using `toMatchFileSnapshot`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#_snippet_10

LANGUAGE: ts
CODE:
```
describe('Stories Snapshots', () => {
  getAllStoryFiles().forEach(({ storyFile, componentName }) => {
    const meta = storyFile.default;
    const title = meta.title || componentName;

    describe(title, () => {
      const stories = Object.entries(compose(storyFile)).map(([name, story]) => ({ name, story }));

      if (stories.length <= 0) {
        throw new Error(
          `No stories found for this module: ${title}. Make sure there is at least one valid story for this module.`,
        );
      }

      stories.forEach(({ name, story }) => {
        test(name, async () => {
          await story.run();
          // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.
          await new Promise((resolve) => setTimeout(resolve, 1));
          // Defines the custom snapshot path location and file name
          const customSnapshotPath = `./__snapshots__/${componentName}.spec.ts.snap`;
          await expect(document.body.firstChild).toMatchFileSnapshot(customSnapshotPath);
        });
      });
    });
  });
});
```

----------------------------------------

TITLE: Testing Svelte Button Component Localization
DESCRIPTION: This test suite verifies that the Svelte Button component renders correctly in both English and Spanish locales using Storybook's composeStory function and Svelte Testing Library. It imports the necessary modules from vitest, @testing-library/svelte, and @storybook/svelte-vite, as well as the component's meta and Primary story. The tests override the global locale setting to 'en' and 'es' respectively, ensuring the component adapts to the specified language.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-override-globals.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { test } from 'vitest';
import { render } from '@testing-library/svelte';
import { composeStory } from '@storybook/svelte-vite';

import meta, { Primary as PrimaryStory } from './Button.stories';

test('renders in English', async () => {
  const Primary = composeStory(
    PrimaryStory,
    meta,
    { globals: { locale: 'en' } } // 👈 Project annotations to override the locale
  );

  await Primary.run();
});

test('renders in Spanish', async () => {
  const Primary = composeStory(PrimaryStory, meta, { globals: { locale: 'es' } });

  await Primary.run();
});
```

----------------------------------------

TITLE: Configuring argTypes for Button Component (JS)
DESCRIPTION: This code configures the argTypes for a Button component in Storybook using JavaScript. It defines the 'arrow' property with options, mapping, and labels for a select control, allowing users to select arrow directions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-mapping.md#_snippet_7

LANGUAGE: js
CODE:
```
import { ArrowUp, ArrowDown, ArrowLeft, ArrowRight } from './icons';

const arrows = { ArrowUp, ArrowDown, ArrowLeft, ArrowRight };

export default {
  component: 'demo-button',
  argTypes: {
    arrow: {
      options: Object.keys(arrows), // An array of serializable values
      mapping: arrows, // Maps serializable option values to complex arg values
      control: {
        type: 'select', // Type 'select' is automatically inferred when 'options' is defined
        labels: {
          // 'labels' maps option values to string labels
          ArrowUp: 'Up',
          ArrowDown: 'Down',
          ArrowLeft: 'Left',
          ArrowRight: 'Right',
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Meta for Component (TS)
DESCRIPTION: This snippet initializes the Storybook meta object for a component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and the MyComponent. It defines the component to be documented and creates a simple story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-storyname.md#_snippet_2

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Simple: Story = {
  name: 'So simple!',
  // ...
};
```

----------------------------------------

TITLE: Storybook Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the Storybook documentation page, setting the title, renderer visibility, and sidebar properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/index.mdx#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
---
title: 'Introduction to addons'
hideRendererSelector: true
sidebar:
  order: 7
  title: Addons
---
```

----------------------------------------

TITLE: Defining Svelte Story with Mocked Dependency (Svelte CSF, TS)
DESCRIPTION: This snippet defines a Storybook story for a Svelte component named 'Page' using TypeScript. It imports necessary modules from '@storybook/addon-svelte-csf' and mocks the 'getUserFromSession' function to return a predefined user object before each story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  // 👇 Must include the `.mock` portion of filename to have mocks typed correctly
  import { getUserFromSession } from '#api/session.mock';

  import Page from './Page.svelte';

  const meta = defineMeta({
    component: Page,
  });
</script>

<Story name="Default" beforeEach={() => {
  // 👇 Set the return value for the getUserFromSession function
  getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });
}} />
```

----------------------------------------

TITLE: Creating One-Item List Story
DESCRIPTION: Creates a Storybook story for rendering a list with one item. It uses the `ListTemplate` and sets the `items` argument to an array containing an object with properties from `Unchecked.args`. This story demonstrates the component's behavior when a single item is present.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_13

LANGUAGE: typescript
CODE:
```
export const OneItem: Story = {
  ...ListTemplate,
  args: {
    items: [
      {
        ...Unchecked.args,
      },
    ],
  },
};
```

----------------------------------------

TITLE: Defining Svelte Storybook Meta with CSF for Page Component (TS)
DESCRIPTION: This code defines the Storybook meta configuration for a Svelte Page component using Component Story Format (CSF) with TypeScript. It imports defineMeta from @storybook/addon-svelte-csf and the Page component. The defineMeta function configures the component and disables auto-generated documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Page from './Page.svelte';

  const { Story } = defineMeta({
    component: Page,
    // 👇 Disable auto-generated documentation for this component
    tags: ['!autodocs'],
  });
</script>
```

----------------------------------------

TITLE: Initializing Button with Hooks in Storybook (JSX)
DESCRIPTION: This snippet initializes a Button component with Solid hooks for managing the label and primary state. It includes a click handler to toggle the button's state between 'Primary' and 'Secondary'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_8

LANGUAGE: jsx
CODE:
```
const ButtonWithHooks = () => {
  // Sets the hooks for both the label and primary props
  const [value, setValue] = useState('Secondary');
  const [isPrimary, setIsPrimary] = useState(false);

  // Sets a click handler to change the label's value
  const handleOnChange = () => {
    if (!isPrimary) {
      setIsPrimary(true);
      setValue('Primary');
    }
  };
  return <Button primary={isPrimary} onClick={handleOnChange} label={value} />;
};

export const Primary = {
  render: () => <ButtonWithHooks />,
} satisfies Story;
```

----------------------------------------

TITLE: Building Storybook with Default Options (Shell)
DESCRIPTION: This command builds the Storybook instance with default settings. It compiles the Storybook and prepares it for deployment to a hosting service.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_26

LANGUAGE: shell
CODE:
```
storybook build [options]
```

----------------------------------------

TITLE: Telemetry Event Example
DESCRIPTION: This JSON snippet shows an example of the telemetry data collected by Storybook. It includes information about the project's story index, story statistics, metadata such as package manager and framework, and addon versions. The data is anonymous and used to improve Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/telemetry.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "anonymousId": "8bcfdfd5f9616a1923dd92adf89714331b2d18693c722e05152a47f8093392bb",
  "eventType": "dev",
  "payload": {
    "versionStatus": "cached",
    "storyIndex": {
      "storyCount": 0,
      "componentCount": 0,
      "pageStoryCount": 0,
      "playStoryCount": 0,
      "autodocsCount": 0,
      "mdxCount": 0,
      "exampleStoryCount": 8,
      "exampleDocsCount": 3,
      "onboardingStoryCount": 0,
      "onboardingDocsCount": 0,
      "version": 5
    },
    "storyStats": {
      "factory": 0,
      "play": 0,
      "render": 1,
      "loaders": 0,
      "beforeEach": 0,
      "globals": 0,
      "storyFn": 5,
      "mount": 0,
      "moduleMock": 0,
      "tags": 0
    }
  },
  "metadata": {
    "generatedAt": 1689007841223,
    "settingsCreatedAt": 1689007841223,
    "hasCustomBabel": false,
    "hasCustomWebpack": false,
    "hasStaticDirs": false,
    "hasStorybookEslint": false,
    "refCount": 0,
    "portableStoriesFileCount": 0,
    "packageManager": {
      "type": "yarn",
      "version": "3.1.1"
    },
    "monorepo": "Nx",
    "framework": {
      "name": "@storybook/react-vite",
      "options": {}
    },
    "builder": "@storybook/builder-vite",
    "renderer": "@storybook/react",
    "storybookVersion": "9.0.0",
    "storybookVersionSpecifier": "^9.0.0",
    "language": "typescript",
    "storybookPackages": {
      "@storybook/addon-docs/blocks": {
        "version": "9.0.0"
      },
      "@storybook/react": {
        "version": "9.0.0"
      },
      "@storybook/react-vite": {
        "version": "9.0.0"
      },
      "storybook": {
        "version": "9.0.0"
      }
    },
    "addons": {
      "@storybook/addon-onboarding": {
        "version": "1.0.6"
      }
    }
  }
}
```

----------------------------------------

TITLE: Adding SWC Compiler Addon with npm
DESCRIPTION: This snippet demonstrates how to add the Webpack5 Compiler SWC addon to a Storybook project using npm. It requires Node.js and npm installed on the system. The command uses `npx` to execute the latest `storybook` package, instructing it to add the `@storybook/addon-webpack5-compiler-swc`. This command assumes that the user has an existing Storybook setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-compiler-swc-auto-install.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npx storybook@latest add @storybook/addon-webpack5-compiler-swc
```

----------------------------------------

TITLE: Running Smoke Test
DESCRIPTION: Exits the process after a successful start. Used for basic validation in automated environments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_12

LANGUAGE: Shell
CODE:
```
storybook dev --smoke-test
```

----------------------------------------

TITLE: Initializing Storybook Preview with TypeScript
DESCRIPTION: A TypeScript configuration for Storybook's preview with proper type definitions. Imports the Preview type from the renderer package and calls an initialization function before all stories are loaded.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-all-in-preview.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)
import { Preview } from '@storybook/your-renderer';

import { init } from '../project-bootstrap';

const preview: Preview = {
  async beforeAll() {
    await init();
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Button Component Stories with CSF in JavaScript
DESCRIPTION: This JavaScript code configures Storybook stories for a Button component using Component Story Format (CSF). It defines the component and three stories: Primary, Secondary, and Tertiary, each with different labels and background colors, utilizing render functions to pass props to the Button component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_8

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: () => ({
    Component: Button,
    props: {
      backgroundColor: '#ff0',
      label: 'Button',
    },
  }),
};

export const Secondary = {
  render: () => ({
    Component: Button,
    props: {
      backgroundColor: '#ff0',
      label: '😄👍😍💯',
    },
  }),
};

export const Tertiary = {
  render: () => ({
    Component: Button,
    props: {
      backgroundColor: '#ff0',
      label: '📚📕📈🤓',
    },
  }),
};
```

----------------------------------------

TITLE: Initializing List Story with SolidJS (TypeScript)
DESCRIPTION: This code defines a Storybook story for a SolidJS List component using TypeScript. It imports the necessary components and types, including a specific story from ListItem. It defines the component metadata and exports the default metadata and story type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-template.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { List } from './List';
import { ListItem } from './ListItem';

//👇 Imports a specific story from ListItem stories
import { Unchecked } from './ListItem.stories';

const meta = {
  /* 👇 The title prop is optional.
   * Seehttps://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Component (CSF)
DESCRIPTION: This code configures the Storybook metadata for a Svelte component using the Component Story Format (CSF). It imports the component and defines the meta object with component details and argTypes, specifically hiding the 'foo' property from the UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-alt.md#_snippet_2

LANGUAGE: js
CODE:
```
import YourComponent from './YourComponent.svelte';

export default {
  component: YourComponent,
  argTypes: {
    // foo is the property we want to remove from the UI
    foo: {
      control: false,
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story for Svelte with Vite (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines a basic story with autoplay enabled in the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {
  parameters: {
    docs: {
      story: { autoplay: true },
    },
  },
};
```

----------------------------------------

TITLE: Disable a11y tests for a specific story
DESCRIPTION: This snippet shows how to disable accessibility tests for a particular story using the `a11y` parameter. This can be useful for stories that are intentionally non-accessible or are not yet ready for accessibility testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_15

LANGUAGE: javascript
CODE:
```
export const MyStory = {
  parameters: {
    a11y: { disable: true },
  },
};

```

----------------------------------------

TITLE: Install React Vite Framework
DESCRIPTION: Installs the @storybook/react-vite framework as a dependency for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-vite.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install -D @storybook/react-vite
```

LANGUAGE: bash
CODE:
```
yarn add -D @storybook/react-vite
```

LANGUAGE: bash
CODE:
```
pnpm add -D @storybook/react-vite
```

----------------------------------------

TITLE: Configuring Application Providers in Angular with applicationConfig
DESCRIPTION: Demonstrates how to configure application-wide providers in Storybook 7.0 for Angular using the `applicationConfig` decorator and `importProvidersFrom`. This replaces the previous method of adding ModuleWithProviders to the 'imports' array of the moduleMetadata definition.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_114

LANGUAGE: javascript
CODE:
```
import { BrowserAnimationsModule } from "@angular/platform-browser/animations";
import { importProvidersFrom } from "@angular/core";
import { applicationConfig, Meta, StoryObj } from "@storybook/angular";
import { ExampleComponent } from "./example.component";

const meta: Meta = {
  title: "Example",
  component: ExampleComponent,
  decorators: [
    // Define application-wide providers with the applicationConfig decorator
    applicationConfig({
      providers: [
        importProvidersFrom(BrowserAnimationsModule),
        // Extract all providers (and nested ones) from a ModuleWithProviders
        importProvidersFrom(SomeOtherModule.forRoot()),
      ],
    }),
  ],
};

export default meta;

type Story = StoryObj<typeof ExampleComponent>;

export const Default: Story = {
  render: () => ({
    // Define application-wide providers directly in the render function
    applicationConfig: {
      providers: [importProvidersFrom(BrowserAnimationsModule)],
    },
  }),
};

```

----------------------------------------

TITLE: Defining Storybook Channel Class in JavaScript
DESCRIPTION: This snippet defines the Channel class with methods for managing event listeners and emitting events. It's used to handle communication in Storybook implementations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/channels/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
class Channel {
  addListener(type, listener) {}
  addPeerListener(type, listener) {} // ignore events from itself
  emit(type, ...args) {}
  eventNames() {}
  listenerCount(type) {}
  listeners(type) {}
  on(type, listener) {}
  once(type, listener) {}
  prependListener(type, listener) {}
  prependOnceListener(type, listener) {}
  removeAllListeners(type) {}
  removeListener(type, listener) {}
}
```

----------------------------------------

TITLE: Running Release with PNPM
DESCRIPTION: Executes the release script using PNPM package manager
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-release.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm run release
```

----------------------------------------

TITLE: Initializing TodoItem Story - Solid (JS)
DESCRIPTION: This code defines a Storybook story for the TodoItem component in Solid using JavaScript. It configures the component and includes a primary story with a render function and data loader.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { TodoItem } from './TodoItem';

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export default {
  component: TodoItem,
  render: (args, { loaded: { todo } }) => <TodoItem {...args} {...todo} />,
};

export const Primary = {
  loaders: [
    async () => ({
      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),
    }),
  ],
};

```

----------------------------------------

TITLE: Story with Non-Story Exports Example
DESCRIPTION: Shows how to handle mixture of story and non-story exports in a single file using includeStories configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/index.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
export const simpleData = {
  foo: 1,
  bar: 2
};
export const complexData = {
  foo: 1,
  bar: 2
};

export const SimpleStory = {
  name: 'Simple'
};

export const ComplexStory = {
  name: 'Complex'
};

export default {
  title: 'Misc/Imports',
  includeStories: ['SimpleStory', 'ComplexStory']
};
```

----------------------------------------

TITLE: Removing Storybook Addons via CLI
DESCRIPTION: The `storybook remove` command deletes a Storybook addon from the project. It accepts the addon name as an argument and supports options for specifying the package manager and disabling telemetry. Use `--package-manager` to specify `npm`, `yarn`, or `pnpm`. Use `--disable-telemetry` to disable Storybook's telemetry.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_64

LANGUAGE: Shell
CODE:
```
storybook remove [addon] [options]
```

----------------------------------------

TITLE: Using the Unstyled Block Component in Storybook Addon-Docs
DESCRIPTION: Example of how to import and use the Unstyled component from Storybook addon-docs to selectively remove default styling from content elements. The example demonstrates the difference between styled and unstyled headings, subheadings, block quotes, paragraphs, and components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/src/blocks/blocks/Unstyled.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
import { Unstyled } from '@storybook/addon-docs/blocks';

# This heading will be styled

<h2>So will this subheading</h2>

> This block quote will be styled

... and so will this paragraph.

<Unstyled>
  # This heading will not be styled

  <h2>Neither will this subheading</h2>

  > This block quote will not be styled

  ... neither will this paragraph, nor the following component:
  <MyCustomComponent />
</Unstyled>
```

----------------------------------------

TITLE: Initializing Storybook with npm
DESCRIPTION: Command to create a new Storybook project using npm package manager. Uses the latest version of the Storybook creation tool.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm create storybook@latest
```

----------------------------------------

TITLE: Installing Storybook SvelteKit with npm
DESCRIPTION: Command to install @storybook/sveltekit package as a dev dependency using npm package manager
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/sveltekit-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev @storybook/sveltekit
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: JavaScript configuration example for Storybook's main.js file. Specifies the framework to use, defines story file patterns to include, and configures build test options with blocks enabled.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-blocks.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  build: {
    test: {
      disableBlocks: false,
    },
  },
};
```

----------------------------------------

TITLE: Customizing component description extraction
DESCRIPTION: This code snippet shows how to customize the extraction of component descriptions for DocsPage by providing a custom `docs.extractComponentDescription` parameter. It extracts the description from a `notes` parameter added to each component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { addParameters } from '@storybook/preview-api';

addParameters({
  docs: {
    extractComponentDescription: (component, { notes }) => {
      if (notes) {
        return typeof notes === 'string' ? notes : notes.markdown || notes.text;
      }
      return null;
    },
  },
});
```

----------------------------------------

TITLE: Importing Global Styles in Storybook
DESCRIPTION: This code shows how to import global Sass/Scss stylesheets into Storybook by importing them in the `.storybook/preview.js|ts` file. This ensures that the styles are applied to all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_12

LANGUAGE: javascript
CODE:
```
import '../styles/globals.scss';
```

----------------------------------------

TITLE: Defining Storybook Meta with Svelte CSF
DESCRIPTION: This code defines Storybook metadata for a Svelte component named 'Example' using the Component Story Format (CSF). It imports the component and defines the 'icon' argument with available options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      icon: {
        options: ['arrow-up', 'arrow-down', 'loading'],
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Global State Management: Using initialGlobals for defaultValue
DESCRIPTION: Demonstrates how to use `initialGlobals` to define the default value for global types, as loading the defaultValue from `globalTypes` is no longer supported.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_14

LANGUAGE: diff
CODE:
```
// .storybook/preview.js
export default {
+ initialGlobals: {
+   locale: 'en'
+ },
  globalTypes: {
    locale: {
      description: 'Locale for components',
-     defaultValue: 'en',
      toolbar: {
        title: 'Locale',
        icon: 'circlehollow',
        items: ['es', 'en'],
      },
    },
  },
}
```

----------------------------------------

TITLE: Initializing Button Story - Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports the Button component and defines its metadata, including the 'variant' argType with options for 'primary' and 'secondary'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-radio-group.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  argTypes: {
    variant: {
      options: ['primary', 'secondary'],
      control: { type: 'radio' },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Icons API update in Storybook 7
DESCRIPTION: This diff illustrates the changes to the IconsProps interface in Storybook 7. The icon and symbol properties have been replaced with icon and useSymbol, respectively, to provide a more flexible and consistent API for using icons in addons.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_123

LANGUAGE: diff
CODE:
```
export interface IconsProps extends ComponentProps<typeof Svg> {
-  icon?: IconKey;
-  symbol?: IconKey;
+  icon: IconType;
+  useSymbol?: boolean;
}
```

----------------------------------------

TITLE: Converting Storybook CSF 2 to CSF 3 using yarn
DESCRIPTION: Command to migrate Storybook Component Story Format from version 2 to 3 using yarn. This targets TypeScript React stories with the specified glob pattern and parser.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-csf-2-to-3.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
# Convert CSF 2 to CSF 3
yarn dlx storybook@latest migrate csf-2-to-3 --glob="**/*.stories.tsx" --parser=tsx
```

----------------------------------------

TITLE: Initializing Storybook Story with Play Function (TS)
DESCRIPTION: This code defines a Storybook story using TypeScript for a generic component. It imports necessary modules, defines the component, and uses the play function to simulate user interactions. The play function retrieves the component's root element using canvasElement and simulates typing into an element and clicking a button. It uses "@storybook/your-framework" which should be replaced with the actual framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ExampleStory: Story = {
  play: async ({ canvasElement }) => {
    // Assigns canvas to the component root element
    const canvas = within(canvasElement);

    // Starts querying from the component's root element
    await userEvent.type(canvas.getByTestId('example-element'), 'something');
    await userEvent.click(canvas.getByRole('button'));
  },
};
```

----------------------------------------

TITLE: Run coverage for all tests in project
DESCRIPTION: This shell command executes Vitest with the --coverage flag, generating a coverage report for all tests in the project, not just Storybook stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_1

LANGUAGE: sh
CODE:
```
npx vitest --coverage
```

----------------------------------------

TITLE: Using prefers-color-scheme Media Query in CSS
DESCRIPTION: Example of using the prefers-color-scheme media query to define different styles for light and dark themes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
:root {
  --text-color: black;
}
@media (prefers-color-scheme: dark) {
  html {
    --text-color: white;
  }
}
```

----------------------------------------

TITLE: Simulating Change Event with Play Function in Angular
DESCRIPTION: This code defines a Storybook story that simulates a change event on a select element using the play function. It uses userEvent to select different options and includes a sleep function to pause between interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Function to emulate pausing between interactions
function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleChangeEvent: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const select = canvas.getByRole('listbox');

    await userEvent.selectOptions(select, ['One Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Another Item']);
    await sleep(2000);

    await userEvent.selectOptions(select, ['Yet another item']);
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Preview with Vue and Vuetify
DESCRIPTION: This snippet initializes the Storybook preview with Vue and Vuetify. It registers plugins and sets up a decorator that wraps the story with a Vuetify VApp component, applying a theme based on global parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#_snippet_5

LANGUAGE: js
CODE:
```
import { setup } from '@storybook/vue3-vite';

import { VApp } from 'vuetify/components';

import { registerPlugins } from '../src/plugins';

setup((app) => {
  // Registers your app's plugins including Vuetify into Storybook
  registerPlugins(app);
});

const preview = {
  decorators: [
    (story, context) => {
      const theme = context.globals.theme || 'light';
      return {
        components: { story, VApp },
        template: `
          <v-app theme="${theme}">
            <div>
              <story/>
            </div>
          </v-app>
      `,
      };
    },
  ],
};

export default preview;
```

----------------------------------------

TITLE: Typing with Delay in Svelte Storybook
DESCRIPTION: This code snippet demonstrates how to simulate typing into an input field with a delay in a Svelte Storybook story. It uses `userEvent.type` to simulate typing 'random string' into the element labeled 'example-element' and 'another random string' into 'another-example-element', with a delay of 100ms between each character.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const DelayedStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const exampleElement = canvas.getByLabelText('example-element');

    // The delay option sets the amount of milliseconds between characters being typed
    await userEvent.type(exampleElement, 'random string', {
      delay: 100,
    });

    const AnotherExampleElement = canvas.getByLabelText('another-example-element');
    await userEvent.type(AnotherExampleElement, 'another random string', {
      delay: 100,
    });
  },
};
```

----------------------------------------

TITLE: Creating Custom Storybook Theme in JavaScript
DESCRIPTION: This code creates a custom theme for Storybook using the create function. It sets various theme properties including base theme, typography, branding, colors, UI elements, and form styles. The theme can be applied to customize the appearance of the Storybook interface.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-theme.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { create } from 'storybook/theming/create';

export default create({
  base: 'light',
  // Typography
  fontBase: '"Open Sans", sans-serif',
  fontCode: 'monospace',

  brandTitle: 'My custom Storybook',
  brandUrl: 'https://example.com',
  brandImage: 'https://storybook.js.org/images/placeholders/350x150.png',
  brandTarget: '_self',

  //
  colorPrimary: '#3A10E5',
  colorSecondary: '#585C6D',

  // UI
  appBg: '#ffffff',
  appContentBg: '#ffffff',
  appPreviewBg: '#ffffff',
  appBorderColor: '#585C6D',
  appBorderRadius: 4,

  // Text colors
  textColor: '#10162F',
  textInverseColor: '#ffffff',

  // Toolbar default and active colors
  barTextColor: '#9E9E9E',
  barSelectedColor: '#585C6D',
  barHoverColor: '#585C6D',
  barBg: '#ffffff',

  // Form colors
  inputBg: '#ffffff',
  inputBorder: '#10162F',
  inputTextColor: '#10162F',
  inputBorderRadius: 2,
});
```

----------------------------------------

TITLE: Initializing Viewport Configuration in Vue (TS)
DESCRIPTION: This snippet initializes the viewport configuration for a Vue component in Storybook using TypeScript. It imports the component and sets the viewport parameter to use INITIAL_VIEWPORTS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import { INITIAL_VIEWPORTS } from 'storybook/viewport';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
  parameters: {
    viewport: {
      //👇 Set available viewports for every story in the file
```

----------------------------------------

TITLE: Transforming source code with Prettier in Storybook
DESCRIPTION: This code snippet demonstrates how to use the `transform` parameter in Storybook to format source code using Prettier. It imports Prettier and its Babel and estree plugins, then uses them to format the source code.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_18

LANGUAGE: javascript
CODE:
```
export default {
  parameters: {
    docs: {
      source: {
        transform: async (source) => {
          const prettier = await import("prettier/standalone");
          const prettierPluginBabel = await import("prettier/plugins/babel");
          const prettierPluginEstree = await import("prettier/plugins/estree");

          return prettier.format(source, {
            parser: "babel",
            plugins: [prettierPluginBabel, prettierPluginEstree],
          });
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Creating a Custom Provider Class in React
DESCRIPTION: Example of creating a custom Provider class extending from @storybook/manager's Provider. Includes methods for getElements, renderPreview, and handleAPI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/manager/README.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
import React from 'react';
import { Provider } from '@storybook/manager';

export default class MyProvider extends Provider {
  getElements(type) {
    return {};
  }

  renderPreview() {
    return <p>This is the Preview</p>;
  }

  handleAPI(api) {
    // no need to do anything for now.
  }
}
```

----------------------------------------

TITLE: Environment-based Vite Configuration in Storybook
DESCRIPTION: Customizing Vite configuration based on the environment in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
export default {
  async viteFinal(config, { configType }) {
    if (configType === 'PRODUCTION') {
      // customize for production
      config.base = '/my-static-storybook/';
    }
    return config;
  },
};
```

----------------------------------------

TITLE: Configure React Vite Framework Options
DESCRIPTION: Passes an options object for additional configuration to the framework property in .storybook/main.js|ts.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-vite.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
/** @type { import('@storybook/react-vite').StorybookConfig } */
const config = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|mjs|ts|tsx)"],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-onboarding",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: '@storybook/react-vite',
    options: {
      /**
       * Example of how to configure Storybook's Vite builder.
       * @see https://storybook.js.org/docs/builders/vite#configuration
       */
      builder: {
        viteConfigPath: '.vite/storybook.vite.config.ts',
      },
    },
  },
  docs: {
    autodocs: "tag",
  },
};
export default config;
```

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/react-vite';
const config: StorybookConfig = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|mjs|ts|tsx)"],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-onboarding",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: '@storybook/react-vite',
    options: {
      /**
       * Example of how to configure Storybook's Vite builder.
       * @see https://storybook.js.org/docs/builders/vite#configuration
       */
      builder: {
        viteConfigPath: '.vite/storybook.vite.config.ts',
      },
    },
  },
  docs: {
    autodocs: "tag",
  },
};
export default config;
```

----------------------------------------

TITLE: Importing Checkbox Stories for Svelte CSF
DESCRIPTION: MDX configuration specifically for Svelte CSF format, importing Checkbox stories with .svelte extension
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-imports.md#2025-04-22_snippet_1

LANGUAGE: mdx
CODE:
```
import { Canvas, Meta } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories.svelte';
```

----------------------------------------

TITLE: Highlighting elements in Svelte Storybook (CSF - JS)
DESCRIPTION: This story uses a decorator to emit a HIGHLIGHT event to the Storybook channel, configuring selectors for highlighting elements (h2, a, .storybook-button) and adding custom menu items with titles, descriptions, and click events. It depends on storybook/preview-api and storybook/highlight.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-menu.md#_snippet_4

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

export const StyledHighlight = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        menu: [
          {
            id: 'button-name',
            title: 'Login',
            description: 'Navigate to the login page',
            clickEvent: 'my-menu-click-event',
          },
          {
            id: 'h2-home',
            title: 'Acme',
            description: 'Navigate to the home page',
          },
        ],
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Initializing Button Story (Common JS)
DESCRIPTION: This code initializes a Storybook story for a Button component using CommonJS syntax. It imports the Button component and defines the story with auto-generated documentation enabled.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-meta.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
};
```

----------------------------------------

TITLE: Initializing Storybook Story for Solid Component (JS)
DESCRIPTION: Defines a Storybook story for a Solid component, including metadata and a story with a Figma design parameter. It imports the component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-figma-integration.md#_snippet_3

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const Example = {
  parameters: {
    design: {
      type: 'figma',
      url: 'https://www.figma.com/file/Sample-File',
    },
  },
};
```

----------------------------------------

TITLE: Building Storybook packages in Bash
DESCRIPTION: Commands to install dependencies and compile all packages without linking.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
yarn install
yarn task --task compile --no-link
```

----------------------------------------

TITLE: Initializing ButtonGroup stories for Svelte (TS - CSF)
DESCRIPTION: This code initializes Storybook stories for the ButtonGroup component in Svelte using TypeScript and the Component Story Format (CSF). It imports necessary modules from '@storybook/your-framework', the ButtonGroup component, and Button stories. It defines metadata for the ButtonGroup component and a 'Pair' story with primary and secondary buttons in a horizontal orientation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_8

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import ButtonGroup from './ButtonGroup.svelte';

//👇 Imports the Button stories
import * as ButtonStories from './Button.stories';

const meta = {
  component: ButtonGroup,
} satisfies Meta<typeof ButtonGroup>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Pair: Story = {
  args: {
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
```

----------------------------------------

TITLE: JavaScript Test File Naming Convention
DESCRIPTION: This shows the proper naming convention and structure for JavaScript test files within the project. It illustrates that for a file named '[filename].js', the corresponding test file should be named '[filename].test.js' and reside in the same directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.old.md#_snippet_7

LANGUAGE: sh
CODE:
```
# Proper naming convention and structure for js tests files
+-- parentFolder
|   +-- [filename].js
|   +-- [filename].test.js
```

----------------------------------------

TITLE: Initializing List Component Stories with HTML (TypeScript)
DESCRIPTION: This code defines Storybook stories for a List component using HTML and TypeScript. It imports necessary modules and components, configures metadata for Storybook, and defines stories for rendering empty, single-item, and multi-item lists by manipulating the DOM.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/html';

import { createList, ListArgs } from './List';
import { createListItem } from './ListItem';

const meta: Meta<ListArgs> = {
  title: 'List',
};

export default meta;
type Story = StoryObj<ListArgs>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Empty: Story = {
  render: () => createList(args),
};

export const OneItem: Story = {
  render: (args) => {
    const list = createList(args);
    list.appendChild(createListItem());
    return list;
  },
};

export const ManyItems: Story = {
  render: (args) => {
    const list = createList(args);
    list.appendChild(createListItem());
    list.appendChild(createListItem());
    list.appendChild(createListItem());
    return list;
  },
};
```

----------------------------------------

TITLE: Installing Storybook Test Runner with NPM
DESCRIPTION: Installs the @storybook/test-runner package as a development dependency using npm package manager
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install @storybook/test-runner --save-dev
```

----------------------------------------

TITLE: Configuring Storybook Backgrounds Grid
DESCRIPTION: This code configures the Storybook backgrounds addon to display a grid behind the 'demo-button' component. It sets the cell size to 20, opacity to 0.5, cell amount to 5, and offsets the grid by 16 pixels on both the X and Y axes. This configuration applies to all stories associated with the specified component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-grid.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

// To apply a set of backgrounds to all stories of Button:
const meta: Meta = {
  component: 'demo-button',
  parameters: {
    backgrounds: {
      grid: {
        cellSize: 20,
        opacity: 0.5,
        cellAmount: 5,
        offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
        offsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Initializing Storybook Story for Vue Component
DESCRIPTION: This code initializes a Storybook story for a Vue component named MyComponent. It defines a story named 'WithAnImage' that renders the component with a specified image source and alt text using a template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#_snippet_9

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.vue';

export default {
  component: MyComponent,
};

export const WithAnImage = {
  render: () => ({
    template:
      '<img src="https://storybook.js.org/images/placeholders/350x150.png" alt="My CDN placeholder"/>',
  }),
};
```

----------------------------------------

TITLE: CSF3 object stories, using future 7.0 types
DESCRIPTION: This TypeScript code snippet shows how to import the `Story` type from `@storybook/<framework>/types-7-0` for CSF3 object stories, using future Storybook 7.0 types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_167

LANGUAGE: TypeScript
CODE:
```
import type { Story } from "@storybook/<framework>/types-7-0";
```

----------------------------------------

TITLE: Defining Error Object with Stack Trace and Message in JavaScript
DESCRIPTION: This snippet creates a JavaScript object containing an error stack trace and a corresponding error message. The stack trace provides detailed information about the error's origin and call stack, while the message offers a concise description of the error.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-crash-report-event.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
{
  stack: 'Error: Your button is not working\n' +
    '    at Object.<anonymous> ($SNIP/test.js:39:27)\n' +
    '    at Module._compile (node:internal/modules/cjs/loader:1103:14)\n' +
    '    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1157:10)\n' +
    '    at Module.load (node:internal/modules/cjs/loader:981:32)\n' +
    '    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n' +
    '    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:77:12)\n' +
    '    at node:internal/main/run_main_module:17:47',
  message: 'Your button is not working'
}
```

----------------------------------------

TITLE: Configuring DOM Snapshot Testing with Storybook Test Runner
DESCRIPTION: Example showing how to enable DOM snapshot testing by extending the test-runner configuration file using hooks and Playwright APIs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  hooks: {
    test: async ({ testRunner, step }) => {
      const { describe, it } = testRunner;

      describe('DOM snapshots', () => {
        it('should match DOM snapshots', async ({ page, expect }) => {
          await step('getByTestId', async () => {
            const domSnapshot = await page.locator('#storybook-root').innerHTML();
            await expect(domSnapshot).toMatchSnapshot();
          });
        });
      });
    }
  }
};
```

----------------------------------------

TITLE: Webpack Extend Mode Configuration
DESCRIPTION: This JavaScript code demonstrates the deprecated webpack extend mode configuration in Storybook. It shows how to modify the default webpack configuration by exporting an object with module rules. This mode is being replaced by full control mode in future versions of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_253

LANGUAGE: javascript
CODE:
```
module.exports = {
  module: {
    rules: [
      /* ... */
    ],
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Theme with manager.js
DESCRIPTION: This code snippet demonstrates how to configure the Storybook theme using `manager.js`. It imports the necessary modules, creates a custom theme using `create`, and sets the theme and panel position using `addons.setConfig`. This allows for customizing the appearance of the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_245

LANGUAGE: javascript
CODE:
```
import { addons } from "@storybook/addons";
import { create } from "@storybook/theming/create";

const theme = create({
  base: "light",
  brandTitle: "My custom title"
});

addons.setConfig({
  panelPosition: "bottom",
  theme
});
```

----------------------------------------

TITLE: Configuring Viewport Addon (New)
DESCRIPTION: This code shows the new way of configuring the `@storybook/addon-viewport` using parameters. The `viewport` parameter is passed to the `addParameters` function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_268

LANGUAGE: javascript
CODE:
```
import { addParameters } from "@storybook/react"; // or others

addParameters({ viewport: options });
```

----------------------------------------

TITLE: Initializing ButtonGroup stories for Solid (TS)
DESCRIPTION: This code initializes Storybook stories for the ButtonGroup component in Solid using TypeScript. It imports necessary modules from 'storybook-solidjs', the ButtonGroup component, and Button stories. It defines metadata for the ButtonGroup component and a 'Pair' story with primary and secondary buttons in a horizontal orientation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { ButtonGroup } from '../ButtonGroup';

//👇 Imports the Button stories
import * as ButtonStories from './Button.stories';

const meta = {
  component: ButtonGroup,
} satisfies Meta<typeof ButtonGroup>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Pair: Story = {
  args: {
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  },
};
```

----------------------------------------

TITLE: Automigrate with Yes Flag
DESCRIPTION: Automatically applies available migrations without prompting for confirmation. This is useful for unattended or automated migration processes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_94

LANGUAGE: shell
CODE:
```
storybook automigrate --yes
```

----------------------------------------

TITLE: Initializing Storybook Meta with Mocked Date - Svelte CSF (TS)
DESCRIPTION: This code defines the meta object for a Storybook story using TypeScript. It imports necessary modules, including MockDate, and sets up a beforeEach hook to mock the Date object before each story runs, resetting it afterward. This ensures consistent date values during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import MockDate from 'mockdate';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { getUserFromSession } from '#api/session.mock';
import Page from './Page.svelte';

const meta = {
  component: Page,
  // 👇 Set the value of Date for every story in the file
  async beforeEach() {
    MockDate.set('2024-02-14');

    // 👇 Reset the Date after each story
    return () => {
      MockDate.reset();
    };
  },
} satisfies Meta<typeof Page>;
export default meta;

type Story = StoryObj<typeof meta>;

export const Default: Story = {
  async play({ canvasElement }) {
    // ... This will run with the mocked Date
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Main Settings in JavaScript
DESCRIPTION: This JavaScript snippet configures the main Storybook settings within `.storybook/main.js`. It specifies the UI framework being used (placeholder `'@storybook/your-framework'`), defines the glob patterns for locating story files (`stories`), and uses the `previewHead` function to conditionally inject an analytics script tag into the preview's HTML `<head>` based on the presence of the `ANALYTICS_ID` environment variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-preview-head.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
```js filename=".storybook/main.js" renderer="common" language="js"
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  previewHead: (head) => `
    ${head}
    ${
      process.env.ANALYTICS_ID ? '<script src="https://cdn.example.com/analytics.js"></script>' : ''
    }
  `,
};
```
```

----------------------------------------

TITLE: Save Flow Story with Interactions (JS)
DESCRIPTION: This story defines the 'Save Flow' scenario for the NoteUI component using JavaScript. It sets up the component with editing enabled and a specific note, then simulates a user clicking the save button. Finally, it asserts that the mocked saveNote function was called, verifying the component's interaction with its dependencies.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-fn-mock-spy.md#_snippet_5

LANGUAGE: js
CODE:
```
import { expect, userEvent, within } from 'storybook/test';

import { saveNote } from '#app/actions.mock';
import { createNotes } from '#mocks/notes';

export default {
  title: 'Mocked/NoteUI',
  component: 'note-ui',
};

const notes = createNotes();

export const SaveFlow = {
  name: 'Save Flow ▶',
  args: {
    isEditing: true,
    note: notes[0],
  },
  play: async ({ canvasElement, step }) => {
    const canvas = within(canvasElement);

    const saveButton = canvas.getByRole('menuitem', { name: /done/i });
    await userEvent.click(saveButton);
    // 👇 This is the mock function, so you can assert its behavior
    await expect(saveNote).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Install Website Dependencies
DESCRIPTION: Installs the necessary dependencies for the Storybook website. This ensures that the website can be built and run locally.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#_snippet_9

LANGUAGE: shell
CODE:
```
npm install
```

----------------------------------------

TITLE: Initializing Button Stories with Angular
DESCRIPTION: This code initializes Storybook stories for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines the component's metadata, including global viewport settings. It also creates a story named 'OnPhone' that overrides the global viewport to simulate a mobile device.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  globals: {
    // 👇 Set viewport for all component stories
    viewport: { value: 'tablet', isRotated: false },
  },
};

export default meta;
type Story = StoryObj<Button>;

export const OnPhone: Story = {
  globals: {
    // 👇 Override viewport for this story
    viewport: { value: 'mobile1', isRotated: false },
  },
};
```

----------------------------------------

TITLE: Submitting Form with Play Function in Angular
DESCRIPTION: This story simulates a user submitting a form in Angular. It uses the `play` function to enter credentials into email and password fields, clicks the submit button, and then asserts that the `onSubmit` argument was called.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-interactions-play-function.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { userEvent, waitFor, within, expect, fn } from 'storybook/test';

import { Form } from './Form.component';

const meta: Meta<Form> = {
  component: Form,
  args: {
    // 👇 Use `fn` to spy on the submit output
    submit: fn(),
  },
};

export default meta;
type Story = StoryObj<Form>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const Submitted: Story = {
  play: async ({ args, canvasElement, step }) => {
    const canvas = within(canvasElement);

    await step('Enter credentials', async () => {
      await userEvent.type(canvas.getByTestId('email'), 'hi@example.com');
      await userEvent.type(canvas.getByTestId('password'), 'supersecret');
    });

    await step('Submit form', async () => {
      await userEvent.click(canvas.getByRole('button'));
    });

    // 👇 Now we can assert that the onSubmit arg was called
    await waitFor(() => expect(args.onSubmit).toHaveBeenCalled());
  },
};
```

----------------------------------------

TITLE: Configuring react-docgen-typescript in Storybook
DESCRIPTION: This code snippet shows how to configure react-docgen-typescript in Storybook's main configuration file to enable the experimental watch program feature. This feature allows for automatic updates to controls and args tables when component props are changed, without requiring a Storybook restart.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_31

LANGUAGE: typescript
CODE:
```
const config = {
  // ...
  typescript: {
    reactDocgen: "react-docgen-typescript",
    reactDocgenTypescriptOptions: {
      EXPERIMENTAL_useWatchProgram: true,
    },
  },
};
export default config;
```

----------------------------------------

TITLE: Installing Chromatic addon with npm
DESCRIPTION: Command to add the Chromatic integration to a Storybook project using npm as the package manager. Uses npx to execute the Storybook CLI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/chromatic-storybook-add.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@latest add @chromatic-com/storybook
```

----------------------------------------

TITLE: Rendering List with One Item in Web Components
DESCRIPTION: This story renders a List component with a single ListItem in Web Components. It uses the html template literal to define the component's structure, including both the demo-list and demo-list-item components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_30

LANGUAGE: js
CODE:
```
export const OneItem = {
  render: () => html`
    <demo-list>
      <demo-list-item></demo-list-item>
    </demo-list>
  `,
};
```

----------------------------------------

TITLE: Installing ESLint with PNPM
DESCRIPTION: Installs ESLint as a development dependency using PNPM package manager. The --save-dev flag ensures ESLint is added to devDependencies in package.json.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/eslint-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev eslint
```

----------------------------------------

TITLE: Testing React Button Component with Vitest and Storybook
DESCRIPTION: A Vitest test for a React Button component using Storybook's composeStories utility. It sets up the jsdom environment, imports the Primary story variant, runs it, and creates a snapshot test of the rendered output.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-snapshot-test-portable-stories.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// @vitest-environment jsdom

import { expect, test } from 'vitest';

import { composeStories } from '@storybook/react';

import * as stories from '../stories/Button.stories';

const { Primary } = composeStories(stories);
test('Button snapshot', async () => {
  await Primary.run();
  expect(document.body.firstChild).toMatchSnapshot();
});
```

----------------------------------------

TITLE: Rendering a List Component with One Item in Storybook (Vue)
DESCRIPTION: This code snippet defines a story named 'OneItem' that renders a List component with a single ListItem. It uses a render function to control how the component is rendered, passing arguments to both the List and ListItem components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-unchecked.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
export const OneItem: Story = {
  render: (args) => ({
    components: { List, ListItem },
    setup() {
      //👇 The args will now be passed down to the template
      return { args };
    },
    template: '<List v-bind="args"><ListItem v-bind="args"/></List>',
  }),
  args: {
    ...Unchecked.args,
  },
};
```

----------------------------------------

TITLE: Configuring Preview Head and Body in Storybook Main File
DESCRIPTION: This code demonstrates how to use the previewHead and previewBody APIs in the Storybook main.js file to customize the preview HTML.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
module.exports = {
  previewHead: (head) => `
    ${head}
    <style>
      body { padding: 10px !important; }
    </style>
  `,
  previewBody: (body) => `
    ${body}
    <div id="custom-root"></div>
  `,
};
```

----------------------------------------

TITLE: Configuring Storybook Manager Layout (TypeScript)
DESCRIPTION: Configures the Storybook manager to customize the layout, specifically to hide the toolbar on docs pages while respecting user preferences elsewhere. It uses the `addons.setConfig` method to define custom layout configurations, setting the `showToolbar` function within `layoutCustomisations`. It uses TypeScript types for `state`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-manager-toolbar-hide-on-docs.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { addons, type State } from 'storybook/manager-api';

addons.setConfig({
  layoutCustomisations: {
    // Always hide the toolbar on docs pages, and respect user preferences elsewhere.
    showToolbar(state: State, defaultValue: boolean) {
      if (state.viewMode === 'docs') {
        return false;
      }

      return defaultValue;
    },
  },
});
```

----------------------------------------

TITLE: Configuring Code Block Display State
DESCRIPTION: Shows how to configure the default visibility state of code blocks in the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
export const parameters = {
  docs: {
    canvas: {
      sourceState: 'shown',
    },
  },
};
```

----------------------------------------

TITLE: Icon-only Button in TypeScript React
DESCRIPTION: Demonstrates how to create an icon-only button by removing the text and setting the padding prop to 'small'. This ensures the button maintains a square shape.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_5

LANGUAGE: tsx
CODE:
```
<Button padding="small">
  <FaceHappyIcon />
</Button>
```

----------------------------------------

TITLE: Creating Storybook Story for React Component (JS)
DESCRIPTION: This code creates a Storybook story for a React component using JavaScript. It imports the YourComponent and defines the component and a basic story with arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_4

LANGUAGE: js
CODE:
```
import { YourComponent } from './YourComponent';

//👇 This default export determines where your story goes in the story list
export default {
  component: YourComponent,
};

export const FirstStory = {
  args: {
    //👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Defining Story Meta and Experimental Story - JavaScript
DESCRIPTION: This JavaScript snippet defines the meta object for a Storybook story, specifying the title, component, and tags. It also defines an ExperimentalFeatureStory with a specific tag, inheriting other tags from the meta object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  title: 'Button',
  component: 'demo-button',
  /*
   * All stories in this file will have these tags applied:
   * - autodocs
   * - dev (implicit default, inherited from preview)
   * - test (implicit default, inherited from preview)
   */
  tags: ['autodocs'],
};

export const ExperimentalFeatureStory = {
  /*
   * This particular story will have these tags applied:
   * - experimental
   * - autodocs (inherited from meta)
   * - dev (inherited from meta)
   * - test (inherited from meta)
   */
  tags: ['experimental'],
};
```

----------------------------------------

TITLE: Disabling Backgrounds in a Story
DESCRIPTION: Turns off backgrounds in a story by configuring the `backgrounds` parameter with the `disable` property set to `true`. This allows you to prevent any background from being applied to a specific story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/backgrounds.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export const Primary = {
  parameters: {
    backgrounds: {
      disable: true,
    },
  },
  args: {
    primary: true,
    label: 'Primary',
  },
};

```

----------------------------------------

TITLE: Using Info Addon as a Storybook Decorator
DESCRIPTION: Shows how to use the Info addon as a decorator, which applies it to all stories within a storiesOf group. This avoids repeating the withInfo call for each individual story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_11

LANGUAGE: jsx
CODE:
```
storiesOf('Addons|Info.Decorator', module)
  .addDecorator((story, context) =>
    withInfo('Info could be used as a global or local decorator as well.')(story)(context)
  )
  .add('Use Info as story decorator', () => <BaseButton label="Button" />);
```

----------------------------------------

TITLE: Creating Checkbox Documentation with Svelte CSF Renderer in MDX
DESCRIPTION: This MDX document provides documentation for a Checkbox component using Storybook's Svelte renderer with CSF. It imports stories from a Svelte-specific stories file and displays an example of the unchecked state using Canvas.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story.md#2025-04-22_snippet_1

LANGUAGE: mdx
CODE:
```
import { Canvas, Meta } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories.svelte';

<Meta of={CheckboxStories} />

# Checkbox

A checkbox is a square box that can be activated or deactivated when ticked.

Use checkboxes to select one or more options from a list of choices.

<Canvas of={CheckboxStories.Unchecked} />
```

----------------------------------------

TITLE: Bootstrapping Storybook Core
DESCRIPTION: This command bootstraps the core modules of Storybook. This is useful when working specifically on the core functionality and want to minimize the scope of the bootstrapping process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.old.md#_snippet_1

LANGUAGE: sh
CODE:
```
yarn bootstrap --core
```

----------------------------------------

TITLE: Importing Storybook Stories in JavaScript
DESCRIPTION: Imports all exports from a B.stories file, likely containing Storybook story definitions for a component B.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfClashingDefaultName.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import * as BStories from '../src/B.stories';
```

----------------------------------------

TITLE: Storybook Init with Package Manager
DESCRIPTION: This example shows how to set the package manager to use when installing Storybook (pnpm).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_51

LANGUAGE: shell
CODE:
```
storybook init --package-manager pnpm
```

----------------------------------------

TITLE: Add subpath import in package.json
DESCRIPTION: Adds a subpath import configuration to the package.json file. This allows consistent importing of the preview file from any location within the project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "imports": {
    "#*": ["./*", "./*.ts", "./*.tsx"],
  },
}
```

----------------------------------------

TITLE: Initializing Svelte Button Story (CSF - TS) with Meta
DESCRIPTION: This snippet initializes a Storybook story for a Svelte Button component using TypeScript and defines the component metadata using a 'meta' object. It includes the component itself and arguments like onClick, which uses 'fn' to spy on the click event. It also uses 'satisfies Meta<typeof Button>' to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-onclick-action-spy.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import { fn } from 'storybook/test';

import Button from './Button.svelte';

const meta = {
  component: Button,
  // 👇 Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked
  args: { onClick: fn() },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Extending Background Options in Meta
DESCRIPTION: Configures backgrounds on a per-component basis by adjusting the colors for all stories of a component. This example adjusts the colors for all of the Button component's stories using the `options` property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/backgrounds.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Example/Button',
  component: Button,
  parameters: {
    backgrounds: {
      values: [
        { name: 'red', value: '#f00' },
        { name: 'green', value: '#0f0' },
      ],
    },
  },
};

```

----------------------------------------

TITLE: Importing and Using Meta Component in MDX
DESCRIPTION: Example of importing and using the Meta component in an MDX file to attach it to a component's stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-meta.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />
```

----------------------------------------

TITLE: Storybook Init Help
DESCRIPTION: This example shows how to output usage information for the `init` command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_44

LANGUAGE: shell
CODE:
```
storybook init --help
```

----------------------------------------

TITLE: Defining a Storybook Story for React Component
DESCRIPTION: Creates a story for a 'Foo' component with a 'bar' variant that renders a div containing 'baz'. Includes ESLint disable comments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ugly-comments-stories.txt#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
/* eslint-disable-line */ const x = 0;

// eslint-disable-line
storiesOf('Foo', module)
  .add('bar', () => <div>baz</div>);
```

----------------------------------------

TITLE: Initializing Button Story with Svelte (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript. It imports the Meta type from @storybook/your-framework, imports the Button component, and defines the story with auto-generated documentation enabled.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-meta.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
} satisfies Meta<typeof Button>;
export default meta;
```

----------------------------------------

TITLE: Defining Histogram Story with TypeScript CSF
DESCRIPTION: This code defines a Storybook story for the Histogram component using TypeScript's Component Story Format (CSF). It imports the necessary modules and defines a default story with specific arguments to configure the histogram's appearance and data. It uses type annotations for better type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#_snippet_10

LANGUAGE: typescript
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Histogram from './Histogram.svelte';

const meta = {
  component: Histogram,
} satisfies Meta<typeof Histogram>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    dataType: 'latency',
    showHistogramLabels: true,
    histogramAccentColor: '#1EA7FD',
    label: 'Latency distribution',
  },
};
```

----------------------------------------

TITLE: Defining YAML Front Matter for Storybook Documentation
DESCRIPTION: This YAML snippet defines metadata for a Storybook documentation page. It specifies the title, sidebar order, and sidebar title for the 'Get Started' section.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/index.mdx#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
---
title: Get started with Storybook
sidebar:
  order: 1
  title: Get Started
---
```

----------------------------------------

TITLE: Import Storybook Components
DESCRIPTION: This code snippet illustrates the change in importing Storybook HTML components. They are now exported directly from '@storybook/components' instead of '@storybook/components/html' for better ESM and Typescript compatibility.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_202

LANGUAGE: javascript
CODE:
```
// before
import { components } from "@storybook/components/html";

// after
import { components } from "@storybook/components";
```

----------------------------------------

TITLE: Styled Highlight Decorator in Vue (JS) Story
DESCRIPTION: This JavaScript story for Vue defines a decorator that uses `useChannel` to emit a `HIGHLIGHT` event. This event configures selectors for highlighting elements and defines menu items with associated actions. The decorator is applied to the 'StyledHighlight' story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-menu.md#_snippet_7

LANGUAGE: javascript
CODE:
```
export const StyledHighlight = {
  decorators: [
    () => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        menu: [
          {
            id: 'button-name',
            title: 'Login',
            description: 'Navigate to the login page',
            clickEvent: 'my-menu-click-event',
          },
          {
            id: 'h2-home',
            title: 'Acme',
            description: 'Navigate to the home page',
          },
        ],
      });
      return {
        template: '<story />',
      };
    },
  ],
};
```

----------------------------------------

TITLE: Legacy Storybook Story Definition in Svelte
DESCRIPTION: Shows the traditional way of defining Storybook stories for Svelte components using @storybook/addon-svelte-csf with Meta, Template, and Story components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-csf-addon-tags.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
  import { Meta, Template, Story } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';
</script>

<Meta title="MyComponent" component={MyComponent} />

<Template let:args>
  <MyComponent {...args} />
</Template>

<Story name="Default" autodocs />
```

----------------------------------------

TITLE: Configuring Button Stories in JavaScript
DESCRIPTION: Framework-agnostic JavaScript configuration for Button component stories. Demonstrates setting default and story-specific background parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-default.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  parameters: {
    backgrounds: {
      // 👇 Set default background value for all component stories
      default: 'Gray',
    },
  },
};

export const OnDark = {
  parameters: {
    backgrounds: {
      // 👇 Override default background value for this story
      default: 'Dark',
    },
  },
};
```

----------------------------------------

TITLE: Building Vue Component in HTML
DESCRIPTION: A basic Vue component setup to display a Document Screen. It uses Vue's reactive system to manage props for user, document, and subdocuments. Requires Vue.js and related libraries.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_7

LANGUAGE: js
CODE:
```
<template>
  <PageLayout :user="user">
    <DocumentHeader :document="document" />
    <DocumentList :documents="subdocuments" />
  </PageLayout>
</template>

<script>
  import PageLayout from './PageLayout';
  import DocumentHeader from './DocumentHeader';
  import DocumentList from './DocumentList';
  import { reactive } from 'vue';

  export default {
    name: 'DocumentScreen',
    components: { PageLayout, DocumentHeader, DocumentList },
    props: {
      user: {
        type: String,
        default: 'N/A',
      },
      document: {
        type: Object,
        default: () => ({
          id: 1,
          title: 'A document',
          content: 'Lorem Ipsum',
        }),
      },
      subdocuments: {
        type: Array,
        default: () => [],
      },
    },
    setup(props) {
      props = reactive(props);
      return {
        /**
         * What will be returned here will available to the component
         * Functions referenced here will act like methods
         */
      };
    },
  };
</script>
```

----------------------------------------

TITLE: Rendering Vue Component with Slot
DESCRIPTION: This code renders a Vue component's template, including a div element that contains a slot. The slot is populated with the result of calling the 'children' function, allowing for dynamic content injection.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_18

LANGUAGE: js
CODE:
```
<div>
  {@render children?.()}
</div>
```

----------------------------------------

TITLE: Configuring Common Renderer MDX Documentation
DESCRIPTION: Sets up a Storybook MDX documentation file using the common renderer. Shows both standalone documentation page setup and component documentation configuration using story imports.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-docs-only-page.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';

import * as ExampleComponentStories from './ExampleComponent.stories';

{/* 👇 Documentation-only page */}

<Meta title="Documentation" />

{/* 👇 Component documentation page */}

<Meta of={ExampleComponentStories} />
```

----------------------------------------

TITLE: Viewing Stories in Storybook UI
DESCRIPTION: This command runs the Storybook dev server, which attaches to the Parcel dev server, lists its stories in the navigation, and displays them in the preview iframe.
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/standalone-preview/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn storybook
```

----------------------------------------

TITLE: Implementing Custom Story HTML Fetching in JavaScript
DESCRIPTION: This JavaScript code demonstrates how to implement a custom fetchStoryHtml function for advanced control over how Storybook fetches HTML from the server. It includes the function signature and usage in preview.js.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
// .storybook/preview.js

const fetchStoryHtml = async (url, path, params, context) => {
  // Custom fetch implementation
  // ....
  return html;
};

export const parameters = {
  server: {
    url: `http://localhost:${port}/storybook_preview`,
    fetchStoryHtml,
  },
};

type FetchStoryHtmlType = (
  url: string,
  id: string,
  params: any,
  context: StoryContext
) => Promise<string | Node>;
```

----------------------------------------

TITLE: Deprecated hideNoControlsWarning Parameter in Storybook
DESCRIPTION: This code shows the deprecated `hideNoControlsWarning` parameter within the `controls` configuration in Storybook. This parameter is no longer necessary due to UI changes in the Controls addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_85

LANGUAGE: ts
CODE:
```
export const Primary = {
  parameters: {
    controls: { hideNoControlsWarning: true }, // this parameter is now unnecessary
  },
};
```

----------------------------------------

TITLE: Configuring Material UI themes in Storybook preview
DESCRIPTION: Diff showing how to set up custom Material UI themes using the withThemeFromJSXProvider decorator in the Storybook preview.js file. This includes importing necessary components and custom theme configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/material-ui.md#2025-04-22_snippet_5

LANGUAGE: diff
CODE:
```
-import { Preview } from '@storybook/your-renderer';
+import { Preview, Renderer } from '@storybook/your-renderer';
+import { withThemeFromJSXProvider } from '@storybook/addon-themes';
+import { CssBaseline, ThemeProvider } from '@mui/material';
+import { lightTheme, darkTheme } from '../src/themes'; // Import your custom theme configs

// Load Roboto fonts
import '@fontsource/roboto/300.css';
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';
import '@fontsource/material-icons';

const preview: Preview = {
  parameters: { /* ... */ },
+ decorators: [
+   withThemeFromJSXProvider<Renderer>({
+     themes: {
+       light: lightTheme,
+       dark: darkTheme,
+     },
+     defaultTheme: 'light',
+     Provider: ThemeProvider,
+     GlobalStyles: CssBaseline,
+   }),
+ ],
};

export default preview;
```

----------------------------------------

TITLE: Migrate Hierarchy Separators using Codemod
DESCRIPTION: This command uses a codemod to automatically rename components when migrating from custom hierarchy separators to the standard `/` separator in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_247

LANGUAGE: shell
CODE:
```
yarn sb migrate upgrade-hierarchy-separators --glob="*.stories.js"
```

----------------------------------------

TITLE: ArgType Table Configuration
DESCRIPTION: This code snippet shows the structure for configuring the `table` property of an ArgType. The `table` property allows specifying how the arg is documented in the ArgTypes doc block, Controls doc block, and Controls panel, including properties like `category`, `defaultValue`, `disable`, `subcategory`, and `type`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_19

LANGUAGE: typescript
CODE:
```
{
  category?: string;
  defaultValue?: {
    detail?: string;
    summary: string;
  };
  disable?: boolean;
  subcategory?: string;
  type?: {
    detail?: string;
    summary: string;
  };
}
```

----------------------------------------

TITLE: Creating a Storybook Addon Panel for Theme Display in JavaScript
DESCRIPTION: This code creates a Storybook addon panel that displays information about the currently selected theme. It imports necessary components from Storybook, retrieves the current theme from globals, and renders either the theme details or a placeholder when no theme is selected.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-consume-globaltype.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { useGlobals } from 'storybook/manager-api';

import {
  AddonPanel,
  Placeholder,
  Separator,
  Source,
  Spaced,
  Title,
} from 'storybook/internal/components';

import { MyThemes } from '../my-theme-folder/my-theme-file';

// Function to obtain the intended theme
const getTheme = (themeName) => {
  return MyThemes[themeName];
};

const ThemePanel = (props) => {
  const [{ theme: themeName }] = useGlobals();

  const selectedTheme = getTheme(themeName);

  return (
    <AddonPanel {...props}>
      {selectedTheme ? (
        <Spaced row={3} outer={1}>
          <Title>{selectedTheme.name}</Title>
          <p>The full theme object</p>
          <Source
            code={JSON.stringify(selectedTheme, null, 2)}
            language="js"
            copyable
            padded
            showLineNumbers
          />
        </Spaced>
      ) : (
        <Placeholder>No theme selected</Placeholder>
      )}
    </AddonPanel>
  );
};
```

----------------------------------------

TITLE: Configuring Accessibility Parameters for Svelte Story (CSF)
DESCRIPTION: This code configures accessibility parameters for a Svelte Storybook story using the Component Story Format (CSF). It defines rules to exclude certain elements from accessibility checks and disables specific rules. It also sets global accessibility parameters for manual testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
    parameters: {
      a11y: {
        // Optional selector to inspect
        element: 'body',
        config: {
          rules: [
            {
              // The autocomplete rule will not run based on the CSS selector provided
              id: 'autocomplete-valid',
              selector: '*:not([autocomplete="nope"])',
            },
            {
              // Setting the enabled option to false will disable checks for this particular rule on all stories.
              id: 'image-alt',
              enabled: false,
            },
          ],
        },
        /*
         * Axe's options parameter
         * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
         * to learn more about the available options.
        */
        options: {}
      },
    },
    globals: {
      a11y: {
        manual: true,
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Migrate storyIndexers to experimental_indexers
DESCRIPTION: This code snippet demonstrates how to migrate from the deprecated storyIndexers to the new experimental_indexers in Storybook's main configuration file. It shows the changes required to adapt custom indexers to the new API, including returning a list of IndexInput instead of CsfFile.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_83

LANGUAGE: TypeScript
CODE:
```
// .storybook/main.ts

import { readFileSync } from 'fs';
import { loadCsf } from '@storybook/csf-tools';

export default {
-  storyIndexers = (indexers) => {
-    const indexer = async (fileName, opts) => {
+  experimental_indexers = (indexers) => {
+    const createIndex = async (fileName, opts) => {
      const code = readFileSync(fileName, { encoding: 'utf-8' });
      const makeTitle = (userTitle) => {
        // Do something with the auto title retrieved by Storybook
        return userTitle;
      };

      // Parse the CSF file with makeTitle as a custom context
-      return loadCsf(code, { ...compilationOptions, makeTitle, fileName }).parse();
+      return loadCsf(code, { ...compilationOptions, makeTitle, fileName }).parse().indexInputs;
    };

    return [
      {
        test: /(stories|story)\.[tj]sx?$/,
-        indexer,
+        createIndex,
      },
      ...(indexers || []),
    ];
  },
};
```

----------------------------------------

TITLE: Styled Highlight Story with Angular Decorator
DESCRIPTION: This snippet defines a Storybook story for an Angular component named 'MyComponent' and applies styled highlights to specific elements (h2, a, .storybook-button) using the 'componentWrapperDecorator'. It uses the 'useChannel' hook to emit a 'HIGHLIGHT' event with styles, hover styles, focus styles, and keyframes for the highlight effect.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-custom-style.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';
import { componentWrapperDecorator } from '@storybook/angular';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const StyledHighlight: Story = {
  decorators: [
    componentWrapperDecorator((story) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        styles: {
          backgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`,
          outline: '3px solid hotpink',
          animation: 'pulse 3s linear infinite',
          transition: 'outline-offset 0.2s ease-in-out',
        },
        hoverStyles: {
          outlineOffset: '3px',
        },
        focusStyles: {
          backgroundColor: 'transparent',
        },
        keyframes: `@keyframes pulse {
          0% { outline-color: rgba(255, 105, 180, 1); }
          50% { outline-color: rgba(255, 105, 180, 0.2); }
          100% { outline-color: rgba(255, 105, 180, 1); }
        }`,
      });
      return story;
    }),
  ],
};
```

----------------------------------------

TITLE: Rendering Storybook Documentation Structure
DESCRIPTION: Demonstrates the MDX structure for rendering Storybook documentation including Meta configuration, Story display, and Stories collection.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/MetaOf.mdx#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Meta of={ButtonStories} />

# Docs with of, but no name

hello docs

<Story of={ButtonStories.Basic} />

<Stories />
```

----------------------------------------

TITLE: Importing Title Component
DESCRIPTION: Demonstrates how to import the Title component from Storybook's addon-docs package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-title.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { Title } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Configuring Accessibility Testing in Storybook Preview (TypeScript)
DESCRIPTION: This TypeScript code configures the Storybook preview to fail all accessibility tests when violations are found. It imports the Preview type from the renderer-specific Storybook package and sets the a11y parameter in the preview object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-a11y-parameter-error-in-preview.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-renderer with the renderer you are using (e.g., react, vue3)
import { Preview } from '@storybook/your-renderer';

const preview: Preview = {
  // ...
  parameters: {
    // 👇 Fail all accessibility tests when violations are found
    a11y: { test: 'error' },
  },
};
export default preview;
```

----------------------------------------

TITLE: Rendering with Solid in JavaScript
DESCRIPTION: Defines a SolidJS component that accepts user, document, and subdocuments to display in a layout. The component imports required Solid utilities and maintains a consistent rendering structure with other implementations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
import { PageLayout } from './PageLayout';
import { DocumentHeader } from './DocumentHeader';
import { DocumentList } from './DocumentList';

export function DocumentScreen({ user, document, subdocuments }) {
  return (
    <PageLayout user={user}>
      <DocumentHeader document={document} />
      <DocumentList documents={subdocuments} />
    </PageLayout>
  );
}
```

----------------------------------------

TITLE: Initializing List Component Story - React (JS)
DESCRIPTION: This code defines a Storybook story for the List component in React using JavaScript. It imports the List and ListItem components. The story renders a List component with three ListItems, using props from the Selected and Unselected stories of ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#_snippet_3

LANGUAGE: js
CODE:
```
import React from 'react';

import { List } from './List';
import { ListItem } from './ListItem';

//👇 We're importing the necessary stories from ListItem
import { Selected, Unselected } from './ListItem.stories';

export default {
  component: List,
};

export const ManyItems = {
  render: (args) => (
    <List {...args}>
      <ListItem {...Selected.args} />
      <ListItem {...Unselected.args} />
      <ListItem {...Unselected.args} />
    </List>
  ),
};
```

----------------------------------------

TITLE: Rendering Changelog in Storybook using MDX
DESCRIPTION: This code imports the Meta and Markdown components from Storybook's addon-docs, as well as a raw Changelog markdown file. It then sets up a Storybook page titled 'Changelog' and renders the content of the Changelog file using the Markdown component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-custom-docs-markdown.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Meta, Markdown } from '@storybook/addon-docs/blocks';

import Readme from '../../Changelog.md?raw';

<Meta title="Changelog" />

# Changelog

<Markdown>{Readme}</Markdown>
```

----------------------------------------

TITLE: Configuring Custom Host for Angular Storybook
DESCRIPTION: Sets up a custom host address for Storybook. This allows Storybook to be accessed from a specific domain or IP address.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_17

LANGUAGE: JSON
CODE:
```
{"host": "http://my-custom-host"}
```

----------------------------------------

TITLE: Storybook Meta and Story with Locale in React (TSX)
DESCRIPTION: This code defines a Storybook story for a React component, MyComponent, using TypeScript. It imports Meta and StoryObj from '@storybook/react-vite', defines a meta object for the component, and creates a story named StoryWithLocale that renders the component with a locale-specific caption. The caption is determined by the getCaptionForLocale function based on the provided locale.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

const getCaptionForLocale = (locale) => {
  switch (locale) {
    case 'es':
      return 'Hola!';
    case 'fr':
      return 'Bonjour!';
    case 'kr':
      return '안녕하세요!';
    case 'zh':
      return '你好!';
    default:
      return 'Hello!';
  }
};

export const StoryWithLocale = {
  render: (args, { globals: { locale } }) => {
    const caption = getCaptionForLocale(locale);
    return <p>{caption}</p>;
  },
};
```

----------------------------------------

TITLE: Running ESLint Rule Tests for Storybook
DESCRIPTION: Command to run tests for ESLint rules in the Storybook project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/CONTRIBUTING.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
yarn test
```

----------------------------------------

TITLE: Configuring List Component in Web Components
DESCRIPTION: This code configures the List component for Storybook using Web Components. It imports the html function from 'lit' and sets the default export to include the component name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_28

LANGUAGE: js
CODE:
```
import { html } from 'lit';

export default {
  component: 'demo-list',
};
```

----------------------------------------

TITLE: Uninstalling Onboarding Addon with NPM
DESCRIPTION: Command to remove the Storybook onboarding addon using NPM package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/onboarding/README.md#2025-04-22_snippet_1

LANGUAGE: zsh
CODE:
```
npm uninstall -D @storybook/addon-onboarding
```

----------------------------------------

TITLE: Configure Storybook-Specific Styles
DESCRIPTION: This JSON snippet shows how to configure Storybook-specific styles using the SB Angular builder. This allows you to override your project's styles with styles specific to Storybook. The styles array within the options completely overrides the project's styles.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_180

LANGUAGE: json
CODE:
```
      "storybook": {
        "builder": "@storybook/angular:start-storybook",
        "options": {
          "browserTarget": "my-default-project:build",
          "styles": [".storybook/custom-styles.scss"],
        },
      }
```

----------------------------------------

TITLE: Using Meta Component in Storybook Documentation
DESCRIPTION: This snippet uses the Meta component to reference a specific story named 'Story One' from the imported AStories. The comment indicates that this story name matches an existing story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/errors/MetaOfClashingName.mdx#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
{/* This is the same name as a story */}

<Meta of={AStories} name="Story One" />
```

----------------------------------------

TITLE: Sort Stories by ID using storySort Option
DESCRIPTION: This code snippet demonstrates how to sort stories by their ID using the `storySort` option in Storybook, providing a comparator function for sorting.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_251

LANGUAGE: javascript
CODE:
```
addParameters({
  options: {
    storySort: (a, b) =>
      a[1].kind === b[1].kind
        ? 0
        : a[1].id.localeCompare(b[1].id, undefined, { numeric: true }),
  },
});
```

----------------------------------------

TITLE: Initializing List Component Story - HTML
DESCRIPTION: This code defines a Storybook story for the List component in HTML. It imports functions to create List and ListItem elements. The story renders a List component with three ListItems, using data from the Selected and Unselected stories of ListItem to configure the list items.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#_snippet_1

LANGUAGE: js
CODE:
```
import { createList } from './List';
import { createListItem } from './ListItem';

// 👇 We're importing the necessary stories from ListItem
import { Selected, Unselected } from './ListItem.stories';

export default {
  title: 'List',
};

export const ManyItems = {
  render: (args) => {
    const list = createList(args);
    list.appendChild(createListItem(Selected.args));
    list.appendChild(createListItem(Unselected.args));
    list.appendChild(createListItem(Unselected.args));
    return list;
  },
};
```

----------------------------------------

TITLE: Rendering Primary Button in React
DESCRIPTION: This code defines a Storybook story to render a primary button using React. It imports the necessary modules from React and renders the Button component with primary and label properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_4

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: () => <Button primary label="Button" />,
};

```

----------------------------------------

TITLE: Configuring Preset Colors in Storybook Controls (TS)
DESCRIPTION: This TypeScript snippet configures the Storybook preview to customize the preset colors available in the controls addon. It imports the Preview type from the Storybook framework and defines a preview configuration object with custom color presets.  It defines an array of color objects and color strings that will be displayed as options for color selection in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-parameters-color-swatches.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

const preview: Preview = {
  parameters: {
    controls: {
      presetColors: [{ color: '#ff4785', title: 'Coral' }, 'rgba(0, 159, 183, 1)', '#fe4a49'],
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Defining Slots in Vue Components
DESCRIPTION: This code snippet shows how to define slots in a Vue component using the `<slot>` tag. It demonstrates the use of named slots, default slots, and slots with bound properties. The `v-bind` directive is used to pass multiple properties to a slot.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/vue3-vite.mdx#_snippet_4

LANGUAGE: html
CODE:
```
<template>
  <slot :num="123"></slot>
  <br />
  <slot name="named" str="str"></slot>
  <br />
  <slot name="no-bind"></slot>
  <br />
  <slot name="vbind" v-bind="{ num: 123, str: 'str' }"></slot>
</template>

<script setup lang="ts"></script>
```

----------------------------------------

TITLE: Installing ESLint with Yarn
DESCRIPTION: Installs ESLint as a development dependency using Yarn package manager. The --dev flag ensures ESLint is added to devDependencies in package.json.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/eslint-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev eslint
```

----------------------------------------

TITLE: Installing Storybook Vite Builder
DESCRIPTION: Command to install the Storybook Vite builder using npm or yarn.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @storybook/builder-vite --save-dev
```

LANGUAGE: bash
CODE:
```
yarn add @storybook/builder-vite --dev
```

----------------------------------------

TITLE: Defining Button Component Story Meta (Angular)
DESCRIPTION: This code defines the metadata for a Button component story in Storybook using Angular. It imports the Button component and configures the meta object with the component and documentation parameters, specifically excluding the 'style' control.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Main File in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the main Storybook file using TypeScript. It imports the StorybookConfig type, defines a config object with framework and stories patterns, and exports it.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-stories.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
};

export default config;
```

----------------------------------------

TITLE: Migrate Storybook CSF 2 to CSF 3
DESCRIPTION: This codemod automatically converts stories from CSF 2 to CSF 3 format.  It updates the code to the new format, improving maintainability and enabling new features.  Update the glob to match your project's file structure.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/migration-guide/index.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
storybook-migrate-csf-2-to-3.md
```

----------------------------------------

TITLE: Rendering Histogram with Preact
DESCRIPTION: This code defines a Storybook story for rendering a Histogram component using Preact. It imports the 'h' function from 'preact' and the 'Histogram' component from './Histogram'. The 'Default' story uses a render function to render the Histogram component with specified arguments such as 'dataType', 'showHistogramLabels', 'histogramAccentColor', and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#_snippet_3

LANGUAGE: js
CODE:
```
/** @jsx h */
import { h } from 'preact';

import { Histogram } from './Histogram';

export default {
  component: Histogram,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Default = {
  render: (args) => <Histogram {...args} />,
  args: {
    dataType: 'latency',
    showHistogramLabels: true,
    histogramAccentColor: '#1EA7FD',
    label: 'Latency distribution',
  },
};
```

----------------------------------------

TITLE: Enabling Telemetry Debug Mode in Storybook with NPM
DESCRIPTION: A shell command that enables debug mode for Storybook's telemetry functionality when using npm. The STORYBOOK_TELEMETRY_DEBUG environment variable is set to 1 to output additional logging information about telemetry operations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-preview-event.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
STORYBOOK_TELEMETRY_DEBUG=1 npm run storybook
```

----------------------------------------

TITLE: Configuring Storybook Meta Component
DESCRIPTION: This code sets up a Storybook Meta component, referencing the imported AStories and naming the documentation page 'Second Docs'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/SecondMetaOf.mdx#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
<Meta of={AStories} name="Second Docs" />
```

----------------------------------------

TITLE: Importing number from addon-knobs in Storybook 4.x
DESCRIPTION: This snippet demonstrates the updated import statement for the `number` function from the `@storybook/addon-knobs` package in Storybook 4.x, reflecting the introduction of generic addon decorators.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_277

LANGUAGE: js
CODE:
```
import { number } from "@storybook/addon-knobs";
```

----------------------------------------

TITLE: Installing Storybook Themes Addon via Package Managers
DESCRIPTION: Commands for installing @storybook/addon-themes package using different package managers (yarn, npm, pnpm)
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/styled-components.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
yarn add -D @storybook/addon-themes
```

LANGUAGE: zsh
CODE:
```
npm install -D @storybook/addon-themes
```

LANGUAGE: zsh
CODE:
```
pnpm add -D @storybook/addon-themes
```

----------------------------------------

TITLE: React Button Story Implementation (TypeScript)
DESCRIPTION: Default story implementation for a Button component in React using CSF 3 format with TypeScript. Includes type definition for Story interface.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
export const Default: Story = {
  render: (args) => <Button {...args} />,
};
```

----------------------------------------

TITLE: Set Project Annotations Type Definition
DESCRIPTION: Defines the type signature for the `setProjectAnnotations` function, which accepts project annotations (either a single annotation or an array) and returns a project annotation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-vitest.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
(projectAnnotations: ProjectAnnotation | ProjectAnnotation[]) => ProjectAnnotation
```

----------------------------------------

TITLE: Creating .babelrc.json with Storybook CLI
DESCRIPTION: This command generates a `.babelrc.json` file in your project, containing babel plugins and installing them as dev dependencies. It provides a configuration file equivalent to the 6.x default.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_113

LANGUAGE: sh
CODE:
```
npx storybook@latest babelrc
```

----------------------------------------

TITLE: Configuring Svelte Storybook Story with CSF (JS)
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using JavaScript. It defines a default export object that configures the component and enables auto-generated documentation using the 'autodocs' tag. It also defines a story that is excluded from the documentation using the '!autodocs' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
};

export const UndocumentedStory = {
  // 👇 Removes this story from auto-generated documentation
  tags: ['!autodocs'],
};
```

----------------------------------------

TITLE: New setStories event format
DESCRIPTION: This code snippet shows the new format of the setStories event data in Storybook 6.0, which includes global and kind-level parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_225

LANGUAGE: javascript
CODE:
```
{
  globalParameters: { p: 'q' },
  kindParameters: { kind: { p: 'q' } },
  stories: /* as before but with only story-level parameters */
}
```

----------------------------------------

TITLE: Configuring Accessibility Parameters for Svelte Story (CSF - JS)
DESCRIPTION: This code configures accessibility parameters for a Svelte Storybook story using JavaScript. It defines rules to exclude certain elements from accessibility checks and disables specific rules. It also sets global accessibility parameters for manual testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_2

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
  parameters: {
    a11y: {
      // Optional selector to inspect
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Enable Babel Mode V7 in Storybook
DESCRIPTION: This code snippet shows how to enable the `babelModeV7` feature flag in the `.storybook/main.js` configuration file. Enabling this flag changes the way Babel is configured in Storybook, making it more consistent with the application's Babel configuration. This flag is recommended for Storybook 7.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_176

LANGUAGE: javascript
CODE:
```
module.exports = {
  // ... your existing config
  features: {
    babelModeV7: true,
  },
};
```

----------------------------------------

TITLE: TypeScript Interface Definition for Indexer
DESCRIPTION: Type definition for the Indexer interface that specifies how to index story files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
{
  test: RegExp;
  createIndex: (fileName: string, options: IndexerOptions) => Promise<IndexInput[]>;
}
```

----------------------------------------

TITLE: Debugging Storybook Remove Command
DESCRIPTION: The `--debug` option outputs more logs in the CLI to assist debugging when using the `storybook remove` command. This provides more detailed information about the removal process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_67

LANGUAGE: Shell
CODE:
```
storybook remove --debug
```

----------------------------------------

TITLE: Defining Non-A11y Story in Vue Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet defines a story for a Vue component, turning off automatic accessibility checks. It features setups with standard StorybookVue TypeScript configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3';

import MyComponent from './MyComponent.vue';

const meta: Meta<typeof MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<typeof MyComponent>;

export const NonA11yStory: Story = {
  globals: {
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  },
};

```

----------------------------------------

TITLE: Defining Non-A11y Story in React Storybook (TypeScript)
DESCRIPTION: This snippet configures a story for 'MyComponent' in TypeScript targeting React, with all automatic a11y checks turned off. It involves standard Storybook typings and uses '@storybook/react'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_3

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { MyComponent } from './MyComponent';

const meta: Meta<typeof MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<typeof MyComponent>;

export const NonA11yStory: Story = {
  globals: {
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  },
};

```

----------------------------------------

TITLE: Configuring Custom Snapshot Resolver
DESCRIPTION: Configuration setup for enabling a custom snapshot resolver in the test runner to control snapshot file paths and naming conventions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  snapshotResolver: './snapshot-resolver.js'
};
```

----------------------------------------

TITLE: Mocking Error GraphQL Query with MSW - Svelte
DESCRIPTION: This snippet defines a Storybook story that mocks an error response from a GraphQL query using MSW in a Svelte component. It intercepts the 'AllInfoQuery', introduces a delay of 800ms, and returns an error message. This allows testing the component's error handling capabilities.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_10

LANGUAGE: javascript
CODE:
```
<Story
  name="MockedError"
  parameters={{
    msw: {
      handlers: [
        graphql.query('AllInfoQuery', async () => {
          await delay(800);
          return HttpResponse.json({
            errors: [
              {
                message: 'Access denied',
              },
            ],
          });
        }),
      ],
    },
  }}
/>
```

----------------------------------------

TITLE: Defining Button Stories with Tags in JavaScript
DESCRIPTION: This code defines a Storybook story for a Button component using JavaScript. It exports a default object containing metadata for the component, including applying a 'stable' tag to all stories. It then defines a specific story, ExperimentalFeatureStory, which removes the inherited 'stable' tag and applies an 'experimental' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  // 👇 Applies to all stories in this file
  tags: ['stable'],
};

export const ExperimentalFeatureStory = {
  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag
  tags: ['!stable', 'experimental'],
};
```

----------------------------------------

TITLE: Configuring JavaScript Test Runner for Storybook
DESCRIPTION: JavaScript implementation of Storybook test runner configuration with hooks for test lifecycle management. Includes setup, preVisit, and postVisit hooks with utilities for getting story context and waiting for page readiness.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-helper-function.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { getStoryContext, waitForPageReady } = require('@storybook/test-runner');

module.exports = {
  // Hook that is executed before the test runner starts running tests
  setup() {
    // Add your configuration here.
  },
  /* Hook to execute before a story is initially visited before being rendered in the browser.
   * The page argument is the Playwright's page object for the story.
   * The context argument is a Storybook object containing the story's id, title, and name.
   */
  async preVisit(page, context) {
    // Add your configuration here.
  },
  /* Hook to execute after a story is visited and fully rendered.
   * The page argument is the Playwright's page object for the story
   * The context argument is a Storybook object containing the story's id, title, and name.
   */
  async postVisit(page, context) {
    // Get the entire context of a story, including parameters, args, argTypes, etc.
    const storyContext = await getStoryContext(page, context);

    // This utility function is designed for image snapshot testing. It will wait for the page to be fully loaded, including all the async items (e.g., images, fonts, etc.).
    await waitForPageReady(page);

    // Add your configuration here.
  },
};
```

----------------------------------------

TITLE: Configuring Web Components Story (TypeScript)
DESCRIPTION: This snippet configures a Storybook story for a web component named 'demo-example' using TypeScript. It imports the Meta type from '@storybook/web-components-vite' and defines the component and its argument types, specifically a 'number' type for the 'value' argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-example',
  argTypes: {
    value: { type: 'number' },
  },
};

export default meta;
```

----------------------------------------

TITLE: Defining Apollo Client Wrapper Component (Vue)
DESCRIPTION: This Vue component provides an Apollo Client instance to its children using the provide function. It creates an Apollo Client with a specified URI, in-memory cache, and default options for query and watchQuery.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-graphql.md#_snippet_20

LANGUAGE: html
CODE:
```
<template>
  <div><slot /></div>
</template>

<script>
  import { defineComponent, provide } from 'vue';
  import { DefaultApolloClient } from '@vue/apollo-composable';
  import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client/core';

  // Apollo client wrapper component that can be used within your app and Storybook
  export default defineComponent({
    name: 'WrapperComponent',
    setup() {
      const httpLink = createHttpLink({
        // You should use an absolute URL here
        uri: 'https://your-graphql-endpoint',
      });
      const cache = new InMemoryCache();

      const mockedClient = new ApolloClient({
        link: httpLink,
        cache,
        defaultOptions: {
          watchQuery: {
            fetchPolicy: 'no-cache',
            errorPolicy: 'all',
          },
          query: {
            fetchPolicy: 'no-cache',
            errorPolicy: 'all',
          },
        },
      });
      provide(DefaultApolloClient, mockedClient);
    },
  });
</script>
```

----------------------------------------

TITLE: Automigrate with Config Directory
DESCRIPTION: Specifies the Storybook configuration directory to use during the automigration process. This is useful when the configuration is located in a non-standard directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_92

LANGUAGE: shell
CODE:
```
storybook automigrate --config-dir .storybook
```

----------------------------------------

TITLE: Initializing Storybook Project Annotations for Vue
DESCRIPTION: This snippet initializes Storybook project annotations for a Vue project. It imports necessary modules, combines preview and addon annotations, and sets up a beforeAll hook for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-set-project-annotations.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { beforeAll } from '@jest/globals';
import { setProjectAnnotations } from '@storybook/vue3-vite';
// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this
import * as addonAnnotations from 'my-addon/preview';
import * as previewAnnotations from './.storybook/preview';

const annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);

// Supports beforeAll hook from Storybook
beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Configuring Framework Types in Storybook
DESCRIPTION: Type definitions for the framework configuration in Storybook's main configuration file. Shows both simple string configuration and expanded object configuration with options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-framework.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
type FrameworkName = string

type FrameworkOptions = Record<string, any>
```

----------------------------------------

TITLE: Configuring Button Metadata with ArgTypes in Angular
DESCRIPTION: This code configures the metadata for a Button component in Storybook using Angular. It defines argTypes to categorize and control the component's properties such as backgroundColor, primary, label, onClick, and size within the Storybook UI. The properties are organized into categories like Colors, Text, Events, and Sizes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-argtypes-with-subcategories.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  argTypes: {
    // Assigns the argTypes to the Colors category
    backgroundColor: {
      control: 'color',
      table: {
        category: 'Colors',
        // Assigns the argTypes to a specific subcategory
        subcategory: 'Button colors',
      },
    },
    primary: {
      table: {
        category: 'Colors',
        subcategory: 'Button style',
      },
    },
    label: {
      table: {
        category: 'Text',
        subcategory: 'Button contents',
      },
    },
    // Assigns the argType to the Events category
    onClick: {
      table: {
        category: 'Events',
        subcategory: 'Button Events',
      },
    },
    // Assigns the argType to the Sizes category
    size: {
      table: {
        category: 'Sizes',
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Exporting Storybook Options for Vue in TypeScript
DESCRIPTION: This code snippet exports a configuration object for Storybook when used with Vue. It uses the 'read-pkg-up' package to synchronously read the package.json file, specifies 'vue' as the framework, and sets the framework preset.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-server-options.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { sync } from 'read-pkg-up';

export default {
  packageJson: sync({ cwd: __dirname }).packageJson,
  framework: 'vue',
  frameworkPresets: [require.resolve('./framework-preset-vue.js')],
};
```

----------------------------------------

TITLE: Creating Web Components Storybook Story (TS)
DESCRIPTION: Defines a Storybook story for a web component using TypeScript. It imports the necessary modules from '@storybook/web-components-vite'. The meta object configures the component for Storybook, and the ExampleStory defines a specific story with arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-env-variables.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const ExampleStory: Story = {
  args: {
    propertyA: process.env.STORYBOOK_DATA_KEY,
  },
};
```

----------------------------------------

TITLE: Add multiple Jest test results to Storybook story
DESCRIPTION: Shows how to add multiple test results to a Storybook story using the `jest` parameter. This allows you to specify which test files should be associated with a particular story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/jest/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
// MyComponent.stories.js|jsx

import MyComponent from './MyComponent';

import results from '../.jest-test-results.json';

import { withTests } from '@storybook/addon-jest';

export default {
  component: MyComponent,
  title: 'MyComponent',
  decorators: [withTests({ results })],
};

const Template = (args) => <MyComponent {....args} />;

export const Default = Template.bind({});
Default.args = {
  text: 'Jest results in Storybook',
};
Default.parameters = {
  jest: ['MyComponent.test.js', 'MyOtherComponent.test.js']
};
```

----------------------------------------

TITLE: Enable debug logging for Storybook upgrade
DESCRIPTION: Outputs more logs in the CLI to assist debugging.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_76

LANGUAGE: Shell
CODE:
```
storybook upgrade --debug
```

----------------------------------------

TITLE: Importing Angular Polyfills
DESCRIPTION: This snippet imports the necessary polyfills for an Angular application. It specifically imports the '@angular/localize/init' module.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-library-decorator.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import '@angular/localize/init';
```

----------------------------------------

TITLE: Defining Empty List Story (JavaScript)
DESCRIPTION: This story renders an empty demo-list component using lit-html. It imports the html function from the lit library and exports a story named Empty that renders the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_13

LANGUAGE: js
CODE:
```
import { html } from 'lit';

export default {
  component: 'demo-list',
};

// Always an empty list, not super interesting
export const Empty = {
  render: () => html`<demo-list></demo-list>`,
};
```

----------------------------------------

TITLE: Storybook CSF Configuration with Locale (TypeScript)
DESCRIPTION: This TypeScript code defines a Storybook story using the Component Story Format (CSF) for a Svelte component. It imports the component and defines a `StoryWithLocale` story that renders the component with a locale-specific caption, determined by the `getCaptionForLocale` function based on the global `locale` variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_8

LANGUAGE: typescript
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

const getCaptionForLocale = (locale) => {
  switch (locale) {
    case 'es':
      return 'Hola!';
    case 'fr':
      return 'Bonjour!';
    case 'kr':
      return '안녕하세요!';
    case 'zh':
      return '你好!';
    default:
      return 'Hello!';
  }
};

export const StoryWithLocale: Story = {
  render: (args, { globals: { locale } }) => {
    const caption = getCaptionForLocale(locale);
    return {
      Component: MyComponent,
      props: {
        locale: caption,
      },
    };
  },
};
```

----------------------------------------

TITLE: Configuring Jest Snapshot Resolution for Storybook in JavaScript
DESCRIPTION: This code exports a configuration object for Jest's snapshot resolver. It customizes the naming and location of snapshot files, placing them in a '__snapshots__' directory with a '.storyshot' extension.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-custom-snapshot-resolver.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import path from 'path';

export default {
  resolveSnapshotPath: (testPath) => {
    const fileName = path.basename(testPath);
    const fileNameWithoutExtension = fileName.replace(/\.[^/.]+$/, '');
    const modifiedFileName = `${fileNameWithoutExtension}.storyshot`;

    // Configure Jest to generate snapshot files using the following naming convention (__snapshots__/Button.storyshot)
    return path.join(path.dirname(testPath), '__snapshots__', modifiedFileName);
  },
  resolveTestPath: (snapshotFilePath, snapshotExtension) =>
    path.basename(snapshotFilePath, snapshotExtension),
  testPathForConsistencyCheck: 'example.storyshot',
};
```

----------------------------------------

TITLE: Opt-out of Angular Ivy in Storybook
DESCRIPTION: This code snippet demonstrates how to disable Angular Ivy within your Storybook configuration. By setting `enableIvy` to `false` in the `.storybook/main.js|ts` file, you can revert to the previous rendering engine if you encounter compatibility issues.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default {
  stories: [
    /* ... */
  ],
  addons: [
    /* ... */
  ],
  framework: {
    name: '@storybook/angular',
    options: {
      enableIvy: false,
    },
  },
};
```

----------------------------------------

TITLE: Configuring Skip Tests in TypeScript Storybook Stories
DESCRIPTION: Shows how to implement skip-test tags in Storybook stories using TypeScript with proper type definitions. Includes type imports from @storybook framework and demonstrates applying skip tags at both component and story levels.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-skip-tags.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/your-framework';

import { MyComponent } from './MyComponent';

const meta: Meta<typeof MyComponent> = {
  component: MyComponent,
  tags: ['skip-test'], // 👈 Provides the `skip-test` tag to all stories in this file
};

export default meta;
type Story = StoryObj<typeof MyComponent>;

export const SkipStory: Story = {
  //👇 Adds the `skip-test` tag to this story to allow it to be skipped in the tests when enabled in the test-runner configuration
  tags: ['skip-test'],
};
```

----------------------------------------

TITLE: Configuring Storybook Main Settings in JavaScript
DESCRIPTION: This snippet demonstrates the basic configuration for Storybook in a `.storybook/main.js` file. It exports an object defining the `framework` (which needs replacement with the actual framework being used, like '@storybook/react-webpack5'), the glob patterns for locating `stories` (including MDX and various JS/TS formats), and enables the `developmentModeForBuild` feature. This feature optimizes the build process for development environments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-features-development-mode-for-build.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  features: {
    developmentModeForBuild: true,
  },
};
```

----------------------------------------

TITLE: Next.js Page Data Fetching Before
DESCRIPTION: Illustrates the anti-pattern of fetching data directly within a Next.js page component, which can cause issues with Storybook's Webpack configuration due to node module imports.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_25

LANGUAGE: jsx
CODE:
```
async function getData() {
  const res = await fetch(...);
  // ...
}

// Using this component in your stories will break the Storybook build
export default async function Page() {
  const data = await getData();

  return // ...
}
```

----------------------------------------

TITLE: Installing Storybook ESLint Plugin with pnpm
DESCRIPTION: Installs eslint-plugin-storybook as a development dependency using pnpm package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/eslint-plugin-storybook-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev eslint-plugin-storybook
```

----------------------------------------

TITLE: Implicit Actions Example in Storybook 7
DESCRIPTION: This code shows how Storybook 7 automatically inferred action props by checking if they started with `onX` or matched `actions.argTypesRegex`, filling in jest spies for those args. This behavior has been removed in Storybook 8.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_56

LANGUAGE: typescript
CODE:
```
export default {
  component: Button,
};

export const ButtonClick = {
  play: async ({ args, canvasElement }) => {
    await userEvent.click(within(canvasElement).getByRole("button"));
    // args.onClick is a jest spy in 7.0
    await expect(args.onClick).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Adding Decorators to Stories (SB4)
DESCRIPTION: This code demonstrates how decorators were added to a subset of stories in Storybook 4.  The `addDecorator` function was used to apply a decorator to stories added after the call. This behavior changed in Storybook 5.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_261

LANGUAGE: javascript
CODE:
```
storiesOf("Stories", module)
  .add("noncentered", () => "Hello")
  .addDecorator(centered)
  .add("centered", () => "Hello");
```

----------------------------------------

TITLE: Rendering Button with Primary Style and Text Label in Svelte (TypeScript)
DESCRIPTION: This code defines a Storybook story for the Button component in Svelte using TypeScript. It imports the Button component and the action function from Storybook. The story renders the button with a 'Button' label and sets the 'primary' property to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/svelte-vite';

import { action } from 'storybook/actions';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  render: (args) => ({
    Component: Button,
    props: args,
  }),
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Defining Button Stories in Svelte with TypeScript (CSF 2)
DESCRIPTION: Creates a default button story for Svelte components using TypeScript and CSF 2 format. Uses StoryFn type for proper typing and returns an object with Component and props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
// Other imports and story implementation
export const Default: StoryFn<typeof Button> = (args) => ({
  Component: Button,
  props: args,
});
```

----------------------------------------

TITLE: Defining Button Stories with Tags in TypeScript (CSF)
DESCRIPTION: This code defines a Storybook story for a Button component using TypeScript and the Component Story Format (CSF). It imports the necessary modules from '@storybook/your-framework' and defines metadata for the component, including applying a 'stable' tag to all stories in the file. It then creates a specific story, ExperimentalFeatureStory, which removes the inherited 'stable' tag and applies an 'experimental' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  // 👇 Applies to all stories in this file
  tags: ['stable'],
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ExperimentalFeatureStory: Story = {
  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag
  tags: ['!stable', 'experimental'],
};
```

----------------------------------------

TITLE: Advanced MDX Story Example with Multiple Stories
DESCRIPTION: A more complex MDX example showing how to define multiple Badge component stories with different variations. It demonstrates standalone stories, stories in Canvas for code snippets, and grouped stories in a single Canvas.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
import { Meta, Story, Canvas } from '@storybook/addon-docs';

import { Badge } from './Badge';
import { Icon } from './Icon';

<Meta title="MDX/Badge" component={Badge} />

# Badge

Let's define a story for our `Badge` component:

<Story name="positive">
  <Badge status="positive">Positive</Badge>
</Story>

We can drop it in a `Canvas` to get a code snippet:

<Canvas>
  <Story name="negative">
    <Badge status="negative">Negative</Badge>
  </Story>
</Canvas>

We can even preview multiple stories in a block. This
gets rendered as a group, but defines individual stories
with unique URLs and isolated snapshot tests.

<Canvas>
  <Story name="warning">
    <Badge status="warning">Warning</Badge>
  </Story>
  <Story name="neutral">
    <Badge status="neutral">Neutral</Badge>
  </Story>
  <Story name="error">
    <Badge status="error">Error</Badge>
  </Story>
  <Story name="with icon">
    <Badge status="warning">
      <Icon icon="check" inline />
      with icon
    </Badge>
  </Story>
</Canvas>
```

----------------------------------------

TITLE: Mocking Date in TypeScript 4.9 Storybook Story
DESCRIPTION: TypeScript 4.9 implementation of date mocking in a Storybook story using MockDate. Shows proper type annotation for the Story object while setting a fixed Christmas date.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-basic.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import MockDate from 'mockdate';

// ...rest of story file

export const ChristmasUI: Story = {
  async play({ mount }) {
    MockDate.set('2024-12-25');
    // 👇 Render the component with the mocked date
    await mount();
    // ...rest of test
  },
};
```

----------------------------------------

TITLE: Defining Basic Button Story - Common (TS)
DESCRIPTION: This code defines a basic Storybook story for a Button component using TypeScript. It imports Meta and StoryObj from '@storybook/your-framework' and the Button component. The meta object configures the component for Storybook, and the Basic story sets documentation parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {
  parameters: {
    docs: {
      source: { language: 'tsx' },
    },
  },
};
```

----------------------------------------

TITLE: Defining Storybook Meta for Svelte Component (TypeScript)
DESCRIPTION: This snippet defines the Storybook meta object for a Svelte component using TypeScript, including a decorator that applies a margin around the story using a Svelte component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#_snippet_8

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import YourComponent from './YourComponent.svelte';
import MarginDecorator from './MarginDecorator.svelte';

const meta = {
  component: YourComponent,
  decorators: [() => MarginDecorator],
} satisfies Meta<typeof YourComponent>;

export default meta;
```

----------------------------------------

TITLE: Running Storybook Tests
DESCRIPTION: This command executes the test suites for Storybook. It supports various options like watch mode, coverage reporting, and running tests serially.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.old.md#_snippet_2

LANGUAGE: sh
CODE:
```
yarn test
```

----------------------------------------

TITLE: Configuring List Story with Solid (TypeScript)
DESCRIPTION: This code configures a Storybook story for the List component in Solid using TypeScript. It imports necessary types from storybook-solidjs and the List component. The Empty story is defined as an empty object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { List } from './List';

const meta = {
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

// Always an empty list, not super interesting
export const Empty: Story = {};

```

----------------------------------------

TITLE: Testing Storybook Composed Button Story in Vue - JavaScript
DESCRIPTION: This snippet provides a test for the 'Primary' composed Storybook story for a Button component using Vue 3 and JavaScript. Utilizing @testing-library/vue for UI testing and @storybook/vue3 for story composition, it ensures the button's text content is sourced directly from the story's args. The test is designed to avoid hard-coding values, with dependencies on @testing-library/vue and @storybook/vue3, and expects properly exported Button stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/reuse-args-test.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import { render, screen } from '@testing-library/vue';

import { composeStories } from '@storybook/vue3';

import * as stories from './Button.stories';

const { Primary } = composeStories(stories);

test('reuses args from composed story', () => {
  render(Primary());

  const buttonElement = screen.getByRole('button');
  // Testing against values coming from the story itself! No need for duplication
  expect(buttonElement.textContent).toEqual(Primary.args.label);
});
```

----------------------------------------

TITLE: Disabling Storybook Telemetry (Shell)
DESCRIPTION: This command disables Storybook's telemetry, preventing the collection of usage data. It's useful for users who prefer not to share usage information.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_40

LANGUAGE: shell
CODE:
```
storybook build --disable-telemetry
```

----------------------------------------

TITLE: Mock addon channel for non-browser environments
DESCRIPTION: This code snippet demonstrates how to mock the addon channel in a non-browser environment like Jest. This is necessary when an addon tries to access the channel (e.g., by calling `setOptions`) in an environment where the channel is not available.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { addons, mockChannel } from 'storybook/preview-api';

addons.setChannel(mockChannel());
```

----------------------------------------

TITLE: Initializing Button Story - Vue (JS)
DESCRIPTION: This code initializes a Storybook story for a Vue Button component using JavaScript. It imports the Button component and exports a default object that specifies the component to be used in the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_11

LANGUAGE: js
CODE:
```
import Button from './Button.vue';

export default {
  component: Button,
};
```

----------------------------------------

TITLE: Setting Legacy Decorator File Order in Storybook
DESCRIPTION: This code snippet shows how to set the `legacyDecoratorFileOrder` feature flag to `true` in the `main.js` file. This reverts the decorator order to the previous behavior, allowing access to context information added by addons/frameworks from decorators defined in `preview.js`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_110

LANGUAGE: javascript
CODE:
```
// main.js
export default {
  features: {
    legacyDecoratorFileOrder: true,
  },
};
```

----------------------------------------

TITLE: Updating Background Parameters in preview.js - Diff
DESCRIPTION: This code snippet demonstrates the updated format for configuring selectable backgrounds in Storybook's `addon-backgrounds`. The `backgrounds` parameter is now an object with an `options` property, which is a key-value pair defining the background options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_36

LANGUAGE: diff
CODE:
```
// .storybook/preview.js
export const parameters = {
  backgrounds: {
-   values: [
-     { name: 'twitter', value: '#00aced' },
-     { name: 'facebook', value: '#3b5998' },
-   ],
+   options: {
+     twitter: { name: 'Twitter', value: '#00aced' },
+     facebook: { name: 'Facebook', value: '#3b5998' },
+   },
  },
};
```

----------------------------------------

TITLE: Installing Storybook 7 for Vue 2 Projects
DESCRIPTION: Command to install the latest version of Storybook 7 for projects still using Vue 2, as Storybook no longer supports Vue 2 in newer versions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_7

LANGUAGE: shell
CODE:
```
<CodeSnippets path="storybook-init-v7.md" />
```

----------------------------------------

TITLE: Defining Mocked Success Story with MSW - Svelte
DESCRIPTION: This code defines a Storybook story named 'MockedSuccess' that uses MSW to mock a successful API response within a Svelte component. It intercepts GET requests to 'https://your-restful-endpoint' and returns a predefined 'TestData' object as a JSON response. This allows the component to be tested with consistent and predictable data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_8

LANGUAGE: svelte
CODE:
```
<Story
  name="MockedSuccess"
  parameters={{
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint', () => {
          return HttpResponse.json(TestData);
        }),
      ],
    },
  }}
/>
```

----------------------------------------

TITLE: Git ignore generated test results
DESCRIPTION: Adds the generated test results file to `.gitignore`. This prevents the file from being tracked by Git, as it's a generated artifact. However, the documentation recommends checking in the file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/jest/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
.jest-test-results.json
```

----------------------------------------

TITLE: Building Storybook with pnpm
DESCRIPTION: This command uses pnpm to run the build-storybook script, which builds Storybook for the project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/build-storybook-production-mode.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
pnpm run build-storybook
```

----------------------------------------

TITLE: Import Statements for Vitest Tests
DESCRIPTION: This code snippet imports necessary modules from 'path' and 'vitest'. The 'path' module is used for handling file paths, and the 'vitest' module provides the testing framework.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#_snippet_7

LANGUAGE: js
CODE:
```
import path from 'path';
import { describe, expect, test } from 'vitest';
```

----------------------------------------

TITLE: Default Navigation Context
DESCRIPTION: This code defines the default navigation context used in Storybook when no overrides are provided. It includes the default pathname and query parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
// Default navigation context
const defaultNavigationContext = {
  pathname: '/',
  query: {},
};
```

----------------------------------------

TITLE: Installing Storybook Angular with yarn
DESCRIPTION: Command to install @storybook/angular as a dev dependency using yarn package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/angular-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev @storybook/angular
```

----------------------------------------

TITLE: Disabling addon-knobs preset
DESCRIPTION: This code snippet shows how to disable the addon-knobs preset in Storybook 6.0 and force it to use the register logic instead.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_222

LANGUAGE: javascript
CODE:
```
module.exports = {
  stories: ["../**/*.stories.js"],
  addons: ["@storybook/addon-knobs/register"]
};
```

----------------------------------------

TITLE: Configuring Nginx for Serving Storybook with MJS Files
DESCRIPTION: This code snippet shows how to configure Nginx to correctly serve .mjs files with the application/javascript MIME type, ensuring proper loading of ECMAScript Modules in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_107

LANGUAGE: nginx
CODE:
```
include mime.types;
types {
    application/javascript mjs;
}
```

----------------------------------------

TITLE: Mock UUID Module Wrapper
DESCRIPTION: This TypeScript code creates a wrapper around the external `uuid` module, exporting the `uuidv4` function. This allows for mocking the UUID generation in tests and Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-modules.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { v4 } from 'uuid';

export const uuidv4 = v4;
```

----------------------------------------

TITLE: Configuring Storybook with Webpack
DESCRIPTION: This configures Storybook with Webpack, defining the framework and stories, and setting up module aliases using webpackFinal. It mocks external and internal modules by resolving aliases to mock files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/module-aliases-config.md#_snippet_2

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., nextjs, react-webpack5)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  webpackFinal: async (config) => {
    if (config.resolve) {
      config.resolve.alias = {
        ...config.resolve.alias,
        // 👇 External module
        lodash: require.resolve('./lodash.mock'),
        // 👇 Internal modules
        '@/api$': path.resolve(__dirname, './api.mock.ts'),
        '@/app/actions$': path.resolve(__dirname, './app/actions.mock.ts'),
        '@/lib/session$': path.resolve(__dirname, './lib/session.mock.ts'),
        '@/lib/db$': path.resolve(__dirname, './lib/db.mock.ts'),
      };
    }

    return config;
  },
};
```

----------------------------------------

TITLE: Running Storybook Test Index with NPM
DESCRIPTION: Executes the test-storybook command with NPM package manager to generate index JSON file
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-with-index-json.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm run test-storybook -- --index-json
```

----------------------------------------

TITLE: Setting Up Compodoc in preview.ts
DESCRIPTION: Code for manual Compodoc setup that registers the generated documentation.json file in the Storybook preview configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { setCompodocJson } from '@storybook/addon-docs/angular';
import docJson from '../documentation.json';

setCompodocJson(docJson);
```

----------------------------------------

TITLE: Extracting Storybook with NPM
DESCRIPTION: Executes Storybook's extract command using NPM package manager at version 7.5.3.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-extract-specific-version.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npx storybook@7.5.3 extract
```

----------------------------------------

TITLE: Creating Custom Storybook Toolbar Component with React
DESCRIPTION: Implements a toolbar button component that toggles a global parameter and triggers UI refresh. Uses Storybook's hooks, icons, and internal components with React to create an interactive toolbar button that maintains state through Storybook's globals.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-consume-and-update-globaltype.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React, { useCallback } from 'react';
import { OutlineIcon } from '@storybook/icons';
import { useGlobals } from 'storybook/manager-api';
import { addons } from 'storybook/preview-api';
import { IconButton } from 'storybook/internal/components';
import { FORCE_RE_RENDER } from 'storybook/internal/core-events';

const ExampleToolbar = () => {
  const [globals, updateGlobals] = useGlobals();

  const isActive = globals['my-param-key'] || false;

  // Function that will update the global value and trigger a UI refresh.
  const refreshAndUpdateGlobal = () => {
    // Updates Storybook global value
    updateGlobals({
      ['my-param-key']: !isActive,
    }),
      // Invokes Storybook's addon API method (with the FORCE_RE_RENDER) event to trigger a UI refresh
      addons.getChannel().emit(FORCE_RE_RENDER);
  };

  const toggleOutline = useCallback(() => refreshAndUpdateGlobal(), [isActive]);

  return (
    <IconButton
      key="Example"
      active={isActive}
      title="Show a Storybook toolbar"
      onClick={toggleOutline}
    >
      <OutlineIcon />
    </IconButton>
  );
};
```

----------------------------------------

TITLE: Styling Storybook Explore Page Components with CSS
DESCRIPTION: This CSS snippet defines styles for various components of the Storybook explore page, including containers, sections, images, and responsive layouts for different screen sizes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/js/Configure.mdx#2025-04-22_snippet_3

LANGUAGE: CSS
CODE:
```
.sb-container {
  margin-bottom: 48px;
}

.sb-section {
  width: 100%;
  display: flex;
  flex-direction: row;
  gap: 20px;
}

img {
  object-fit: cover;
}

.sb-section-title {
  margin-bottom: 32px;
}

.sb-section a:not(h1 a, h2 a, h3 a) {
  font-size: 14px;
}

.sb-section-item, .sb-grid-item {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.sb-section-item-heading {
  padding-top: 20px !important;
  padding-bottom: 5px !important;
  margin: 0 !important;
}
.sb-section-item-paragraph {
  margin: 0;
  padding-bottom: 10px;
}

.sb-chevron {
  margin-left: 5px;
}

.sb-features-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 32px 20px;
}

.sb-socials {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
}

.sb-socials p {
  margin-bottom: 10px;
}

.sb-explore-image {
  max-height: 32px;
  align-self: flex-start;
}

.sb-addon {
  width: 100%;
  display: flex;
  align-items: center;
  position: relative;
  background-color: #EEF3F8;
  border-radius: 5px;
  border: 1px solid rgba(0, 0, 0, 0.05);
  background: #EEF3F8;
  height: 180px;
  margin-bottom: 48px;
  overflow: hidden;
}

.sb-addon-text {
  padding-left: 48px;
  max-width: 240px;
}

.sb-addon-text h4 {
  padding-top: 0px;
}

.sb-addon-img {
  position: absolute;
  left: 345px;
  top: 0;
  height: 100%;
  width: 200%;
  overflow: hidden;
}

.sb-addon-img img {
  width: 650px;
  transform: rotate(-15deg);
  margin-left: 40px;
  margin-top: -72px;
  box-shadow: 0 0 1px rgba(255, 255, 255, 0);
  backface-visibility: hidden;
}

@media screen and (max-width: 800px) {
  .sb-addon-img {
    left: 300px;
  }
}

@media screen and (max-width: 600px) {
  .sb-section {
    flex-direction: column;
  }

  .sb-features-grid {
    grid-template-columns: repeat(1, 1fr);
  }

  .sb-socials {
    grid-template-columns: repeat(2, 1fr);
  }

  .sb-addon {
    height: 280px;
    align-items: flex-start;
    padding-top: 32px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 24px;
  }

  .sb-addon-img {
    right: 0;
    left: 0;
    top: 130px;
    bottom: 0;
    overflow: hidden;
    height: auto;
    width: 124%;
  }

  .sb-addon-img img {
    width: 1200px;
    transform: rotate(-12deg);
    margin-left: 0;
    margin-top: 48px;
    margin-bottom: -40px;
    margin-left: -24px;
  }
}
```

----------------------------------------

TITLE: Defining Simple and Complex Data Objects
DESCRIPTION: Defines two data objects, simpleData and complexData, which are used as arguments for the stories. The simpleData object contains a simple key-value pair, while the complexData object contains a nested object and imports data from a JSON file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#_snippet_7

LANGUAGE: typescript
CODE:
```
export const simpleData = { foo: 1, bar: 'baz' };
export const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };
```

----------------------------------------

TITLE: Configuring Framework in Storybook
DESCRIPTION: This snippet shows how to configure the framework in Storybook. It specifies the framework to use and any framework-specific options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/index.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
framework: { name: '@storybook/svelte-vite', options:{} }
```

----------------------------------------

TITLE: Implementing React Table Component with Flow Types
DESCRIPTION: This snippet defines a Table component class with Flow type annotations for props and state. It includes a constructor and a render method that returns a TableComponent.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.flow-stories.txt#2025-04-22_snippet_2

LANGUAGE: JavaScript
CODE:
```
class Table extends React.Component<Props, State> {
  constructor(props) {
    super(props);
    this.state = {
      value: undefined,
    };
  }

  state: State;

  render() {
    return <TableComponent />;
  }
}
```

----------------------------------------

TITLE: Installing Storybook Design Addon with pnpm
DESCRIPTION: Adds the Storybook Design addon to your project using pnpm package manager. This command uses pnpm dlx to execute the storybook CLI tool and add the design addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-figma-addon-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@latest add @storybook/addon-designs
```

----------------------------------------

TITLE: Storybook Configuration (JavaScript)
DESCRIPTION: Configures Storybook with framework, stories, addons, and build settings.  It defines the UI framework, story file locations, and addons like accessibility and Vitest integration. The build configuration disables the accessibility addon during testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-disableaddons.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: ['@storybook/addon-a11y', '@storybook/addon-vitest'],
  build: {
    test: {
      disabledAddons: ['@storybook/addon-a11y'],
    },
  },
};
```

----------------------------------------

TITLE: Simulating User Input in Angular Storybook Play Function
DESCRIPTION: This code defines a Storybook story with a play function that simulates user input in an Angular component. It uses 'userEvent.type' to type text into input elements with a specified delay.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-delay.md#_snippet_1

LANGUAGE: ts
CODE:
```
/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const DelayedStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const exampleElement = canvas.getByLabelText('example-element');

    // The delay option sets the amount of milliseconds between characters being typed
    await userEvent.type(exampleElement, 'random string', {
      delay: 100,
    });

    const AnotherExampleElement = canvas.getByLabelText('another-example-element');
    await userEvent.type(AnotherExampleElement, 'another random string', {
      delay: 100,
    });
  },
};
```

----------------------------------------

TITLE: Centered Addon Deprecation (Vue)
DESCRIPTION: This code shows the new way of importing the centered addon for Vue. The specific version should be imported.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_273

LANGUAGE: javascript
CODE:
```
import centered from "@storybook/addon-centered/vue";
```

----------------------------------------

TITLE: Initializing Storybook Meta and Second Story with Play Function (Web Components)
DESCRIPTION: This code defines the SecondStory with a play function that simulates user typing into an element with the test ID 'other-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_10

LANGUAGE: js
CODE:
```
export const SecondStory = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await userEvent.type(canvas.getByTestId('other-element'), 'another value');
  },
};
```

----------------------------------------

TITLE: Registering Addon in Storybook with TypeScript
DESCRIPTION: This TypeScript snippet registers an addon and a corresponding tool in Storybook utilizing the manager API. The registration process involves specifying an addon ID along with a tool ID and providing a configuration which includes title, match logic, and a render function. This code requires the 'storybook/manager-api' and local constants from './constants'. Inputs include Storybook's tabId and viewMode.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-manager-initial-state.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { addons, types } from 'storybook/manager-api';
import { ADDON_ID, TOOL_ID } from './constants';
import { Tool } from './Tool';

// Register the addon
addons.register(ADDON_ID, () => {
  // Register the tool
  addons.add(TOOL_ID, {
    type: types.TOOL,
    title: 'My addon',
    match: ({ tabId, viewMode }) => !tabId && viewMode === 'story',
    render: Tool,
  });
});
```

----------------------------------------

TITLE: Configuring Static Directories in Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet configures Storybook to serve static assets from the `../src/components/fonts` directory, making them available under `src/components/fonts` within the Storybook environment. It imports the `StorybookConfig` type from `@storybook/your-framework` (replace `your-framework` with the appropriate framework, e.g., `nextjs` or `nextjs-vite`). This configuration is useful for serving font files or other static resources required by components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-image-static-dirs.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  // ...
  staticDirs: [
    {
      from: '../src/components/fonts',
      to: 'src/components/fonts',
    },
  ],
};

export default config;
```

----------------------------------------

TITLE: Initializing Common Button Story Metadata (TS)
DESCRIPTION: This code initializes the metadata for a Button component in a common Storybook story using TypeScript. It configures the background grid parameters, such as cell size, opacity, cell amount, and offsets, to customize the visual appearance of the component within the Storybook environment. It uses satisfies to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-grid.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

// To apply a set of backgrounds to all stories of Button:
const meta = {
  component: Button,
  parameters: {
    backgrounds: {
      grid: {
        cellSize: 20,
        opacity: 0.5,
        cellAmount: 5,
        offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
        offsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
      },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Defining Storybook Meta for Svelte Component (TypeScript)
DESCRIPTION: This code defines the Storybook metadata for a Svelte component named 'Example'. It uses 'defineMeta' from '@storybook/addon-svelte-csf' to configure the component and its arguments. The 'label' argument is set up with a select control, options (Normal, Bold, Italic), and mappings to Svelte snippets for each option.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#_snippet_2

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      label: {
        control: { type: 'select' },
        options: ['Normal', 'Bold', 'Italic'],
        mapping: {
          Normal: normal,
          Bold: bold,
          Italic: italic,
        },
      },
    },
  });
</script>

{#snippet normal()}
  <span>Normal</span>
{/snippet}

{#snippet bold()}
  <b>Bold</b>
{/snippet}
{#snippet italic()}
  <i>Italic</i>
{/snippet}
```

----------------------------------------

TITLE: Define Meta with Accessibility Parameters in Svelte CSF
DESCRIPTION: This snippet demonstrates how to define meta with accessibility parameters in a Svelte CSF (Component Story Format) story. It includes setting the component, configuring accessibility rules, and setting global accessibility parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_8

LANGUAGE: ts
CODE:
```
const { Story } = defineMeta({
  component: MyComponent,
  parameters: {
    a11y: {
      // Optional selector to inspect
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.comabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
      */
      options: {},
    },
  },
  globals: {
    a11y: {
      manual: true,
    },
  },
});
```

----------------------------------------

TITLE: Example Vitest Setup File
DESCRIPTION: This is an example of a Vitest setup file (`.storybook/vitest.setup.ts`). It configures the testing environment for Storybook components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { expect, afterEach, vi } from 'vitest';
import { cleanup } from '@testing-library/react';
import * as matchers from '@testing-library/jest-dom/matchers';

// extends Vitest's expect method with methods from react-testing-library
expect.extend(matchers);

// runs a cleanup after each test case (e.g. clearing jsdom)
afterEach(() => {
  cleanup();
  vi.restoreAllMocks();
});
```

----------------------------------------

TITLE: Importing Styled from Storybook Theming
DESCRIPTION: Imports the styled utility from Storybook's theming module to enable custom theme creation and styling. This is a fundamental import needed for creating custom themes in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-theming-styled-import.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { styled } from 'storybook/theming';
```

----------------------------------------

TITLE: Configuring Storybook Preview with Theme Decorator (JavaScript)
DESCRIPTION: This JavaScript snippet configures the Storybook preview to include a theme decorator. It imports the `withThemeByClassName` function from `@storybook/addon-themes` and applies it as a decorator to switch between light and dark themes by toggling CSS classes. It also imports the application's global CSS file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-themes-classname-decorator.md#_snippet_0

LANGUAGE: js
CODE:
```
import { withThemeByClassName } from '@storybook/addon-themes';

import '../src/index.css'; // Your application's global CSS file

const preview = {
  decorators: [
    withThemeByClassName({
      themes: {
        light: '',
        dark: 'dark',
      },
      defaultTheme: 'light',
    }),
  ],
};

export default preview;
```

----------------------------------------

TITLE: Vue CSF Story with Render Function (TS)
DESCRIPTION: Configures a Storybook story for a Vue component using Component Story Format (CSF) in TypeScript, including a render function. The render function defines how the component is rendered, including setting up the component and template. It uses types from `@storybook/vue3-vite`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_13

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import YourComponent from './YourComponent.vue';

const meta = {
  component: YourComponent,
} satisfies Meta<typeof YourComponent>;

//👇 This default export determines where your story goes in the story list
export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: (args) => ({
    components: { YourComponent },
    setup() {
      return { args };
    },
    template: '<YourComponent v-bind="args" />',
  }),
  args: {
    //👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Typing into an Element in a Web Component Story (FirstStory)
DESCRIPTION: This story demonstrates how to simulate user typing into a specific element within a web component using `userEvent.type`. It uses `canvas.getByTestId` to locate the element by its test ID and then types 'example-value' into it. The `within` function scopes the query to the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_12

LANGUAGE: typescript
CODE:
```
export const FirstStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await userEvent.type(canvas.getByTestId('an-element'), 'example-value');
  },
};
```

----------------------------------------

TITLE: Removing Storybook Accessibility Addon with yarn
DESCRIPTION: Command to remove the @storybook/addon-a11y addon from a Storybook project using yarn package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-remove-command.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@latest remove @storybook/addon-a11y
```

----------------------------------------

TITLE: Mocking Window Object for Component Tests in Storybook Vite
DESCRIPTION: Adding a mock for the window object in preview-head.html to resolve issues with component tests when migrating from Webpack to Vite.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/vite.mdx#2025-04-22_snippet_8

LANGUAGE: html
CODE:
```
<script>
  if (typeof window === 'undefined') {
    global.window = {}
  }
</script>
```

----------------------------------------

TITLE: Registering @storybook/addon-themes in Storybook configuration
DESCRIPTION: Diff showing how to add the @storybook/addon-themes to the addons array in the Storybook main.js configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/material-ui.md#2025-04-22_snippet_3

LANGUAGE: diff
CODE:
```
export default {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    '@storybook/addon-essentials',
+   '@storybook/addon-themes',
  ],
};
```

----------------------------------------

TITLE: Defining Button Stories with Tags in JavaScript (Web Components)
DESCRIPTION: This code defines a Storybook story for a Web Components Button component using JavaScript. It exports a default object containing metadata for the component, including applying a 'stable' tag to all stories. It then defines a specific story, ExperimentalFeatureStory, which removes the inherited 'stable' tag and applies an 'experimental' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  title: 'Button',
  component: 'demo-button',
  // 👇 Applies to all stories in this file
  tags: ['stable'],
};

export const ExperimentalFeatureStory = {
  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag
  tags: ['!stable', 'experimental'],
};
```

----------------------------------------

TITLE: Adding Decorators to Stories (SB5)
DESCRIPTION: This code demonstrates how to add decorators to individual stories in Storybook 5 using parameters. The `decorators` parameter is passed as the third argument to the `.add()` function, allowing specific stories to be decorated.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_262

LANGUAGE: javascript
CODE:
```
storiesOf("Stories", module)
  .add("noncentered", () => "Hello")
  .add("centered", () => "Hello", { decorators: [centered] });
```

----------------------------------------

TITLE: Generating changelog for Storybook release in Bash
DESCRIPTION: Command to generate a changelog for a Storybook release.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_10

LANGUAGE: bash
CODE:
```
yarn release:write-changelog <NEXT_VERSION_FROM_PREVIOUS_STEP> --verbose
```

----------------------------------------

TITLE: Configuring Jest for Storybook Test Runner in JavaScript
DESCRIPTION: This code snippet sets up a Jest configuration for the Storybook Test Runner. It imports the default configuration from '@storybook/test-runner', extends it, and adds a custom snapshot resolver. This configuration is then exported as the default export.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-config-snapshot-resolver.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import { getJestConfig } from '@storybook/test-runner';

const defaultConfig = getJestConfig();

const config = {
  // The default Jest configuration comes from @storybook/test-runner
  ...defaultConfig,
  snapshotResolver: './snapshot-resolver.js',
};

export default config;
```

----------------------------------------

TITLE: Defining Story with Mocked Dependency (Common)
DESCRIPTION: This snippet defines a Storybook story for a component named 'Page'. It mocks the 'getUserFromSession' function to return a predefined user object before each story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#_snippet_3

LANGUAGE: js
CODE:
```
import { getUserFromSession } from '#api/session.mock';

import { Page } from './Page';

export default {
  component: Page,
};

export const Default = {
  async beforeEach() {
    // 👇 Set the return value for the getUserFromSession function
    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });
  },
};
```

----------------------------------------

TITLE: Configuring Svelte Story for Example Component (TypeScript)
DESCRIPTION: This snippet configures a Storybook story for a Svelte component named 'Example'. It defines the component and sets up an argument type for a 'value' property, allowing users to control it with a number input in the Storybook UI. It uses TypeScript and imports Meta from '@storybook/your-framework'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-control.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Example from './Example.svelte';

const meta = {
  component: Example,
  argTypes: {
    value: {
      control: {
        type: 'number',
        min: 0,
        max: 100,
        step: 10,
      },
    },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Applying tags to all stories in preview.js|ts
DESCRIPTION: Applies the `autodocs` tag to all stories in the Storybook project. This configuration is typically placed in `.storybook/preview.js` or `.storybook/preview.ts`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/tags.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
/** @type { import('@storybook/types').Preview } */
const preview = {
  tags: ['autodocs'],
};

export default preview;
```

----------------------------------------

TITLE: Implementing Panel Component in Storybook Addon
DESCRIPTION: A React component that creates a panel view for the addon. Uses useAddonState and useChannel hooks to manage state and handle communication between the addon and Storybook. Renders a PanelContent component with data fetching and clearing capabilities.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-toolkit-types.md#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
import React from 'react';

import { useAddonState, useChannel } from 'storybook/manager-api';
import { AddonPanel } from 'storybook/internal/components';

import { ADDON_ID, EVENTS } from './constants';

// See https://github.com/storybookjs/addon-kit/blob/main/src/components/PanelContent.tsx for an example of a PanelContent component
import { PanelContent } from './components/PanelContent';

interface PanelProps {
  active: boolean;
}

export const Panel: React.FC<PanelProps> = (props) => {
  // https://storybook.js.org/docs/addons/addons-api#useaddonstate
  const [results, setState] = useAddonState(ADDON_ID, {
    danger: [],
    warning: [],
  });

  // https://storybook.js.org/docs/addons/addons-api#usechannel
  const emit = useChannel({
    [EVENTS.RESULT]: (newResults) => setState(newResults),
  });

  return (
    <AddonPanel {...props}>
      <PanelContent
        results={results}
        fetchData={() => {
          emit(EVENTS.REQUEST);
        }}
        clearData={() => {
          emit(EVENTS.CLEAR);
        }}
      />
    </AddonPanel>
  );
};
```

----------------------------------------

TITLE: Applying Themes with CSS Classes using withThemeByClassName
DESCRIPTION: A decorator that applies theme classes to a parent element to enable theme switching. It applies the specified class names to the parent element based on the selected theme.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { withThemeByClassName } from '@storybook/addon-themes';

export const decorators = [
  withThemeByClassName({
    themes: {
      light: 'light-theme',
      dark: 'dark-theme',
    },
    defaultTheme: 'light',
  }),
];
```

----------------------------------------

TITLE: Configuring Check Control in ArgTypes
DESCRIPTION: This snippet demonstrates how to configure a check control using the 'control' annotation in the argTypes field. It provides a set of checkbox components for selecting multiple options for the 'contact' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_21

LANGUAGE: javascript
CODE:
```
argTypes: { contact: { control: 'check', options: ['email', 'phone', 'mail'] } }
```

----------------------------------------

TITLE: Defining Storybook Meta for Web Components (JavaScript)
DESCRIPTION: This code defines the Storybook metadata for a web component named 'demo-example' using JavaScript and lit-html. It configures the component and sets up the 'label' argument with a select control, options (Normal, Bold, Italic), and HTML mappings for Bold and Italic using lit-html's 'html' template literal.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-mapping.md#_snippet_5

LANGUAGE: js
CODE:
```
import { html } from 'lit';

export default {
  component: 'demo-example',
  argTypes: {
    label: {
      control: { type: 'select' },
      options: ['Normal', 'Bold', 'Italic'],
      mapping: {
        Bold: html`<b>Bold</b>`,
        Italic: html`<i>Italic</i>`,
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Sass Options in Next.js
DESCRIPTION: This code demonstrates how to configure Sass options in the `next.config.js` file. These options, such as `includePaths`, are automatically included in Sass compilation for Storybook stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_13

LANGUAGE: javascript
CODE:
```
import * as path from 'path';

export default {
  // Any options here are included in Sass compilation for your stories
  sassOptions: {
    includePaths: [path.join(__dirname, 'styles')],
  },
};
```

----------------------------------------

TITLE: Storybook Sandbox with Output Directory
DESCRIPTION: Configures the location where the sandbox project will be generated. This allows you to specify a custom directory for the project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_112

LANGUAGE: Shell
CODE:
```
storybook sandbox --output /my-sandbox-project
```

----------------------------------------

TITLE: Defining Button Stories for React (TypeScript)
DESCRIPTION: This code defines Storybook stories for a React Button component using TypeScript. It imports the Button component and defines stories for Primary, Secondary, and Tertiary variants, each with a different label and background color.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: () => <Button backgroundColor="#ff0" label="Button" />,
};

export const Secondary: Story = {
  render: () => <Button backgroundColor="#ff0" label="😄👍😍💯" />,
};

export const Tertiary: Story = {
  render: () => <Button backgroundColor="#ff0" label="📚📕📈🤓" />,
};
```

----------------------------------------

TITLE: Configuring Storybook with Vite and GraphQL (JavaScript)
DESCRIPTION: JavaScript configuration for Storybook using Vite bundler with GraphQL support. Adds the vite-plugin-graphql-loader to handle GraphQL files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/webpack-final-to-vite-final.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import graphql from 'vite-plugin-graphql-loader';

export default {
  // Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  async viteFinal(config) {
    return {
      ...config,
      plugins: [...(config.plugins ?? []), graphql()],
    };
  },
};
```

----------------------------------------

TITLE: Styled Highlight Story with Decorators in Vue3
DESCRIPTION: This story demonstrates how to apply styled highlights to a Vue3 component using decorators. It uses the `useChannel` hook to emit a `HIGHLIGHT` event with styling information, including selectors, styles, hover styles, focus styles, and keyframes. The styles are applied to elements matching the specified selectors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-custom-style.md#_snippet_8

LANGUAGE: vue
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const StyledHighlight: Story = {
  decorators: [
    () => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        styles: {
          backgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`,
          outline: '3px solid hotpink',
          animation: 'pulse 3s linear infinite',
          transition: 'outline-offset 0.2s ease-in-out',
        },
        hoverStyles: {
          outlineOffset: '3px',
        },
        focusStyles: {
          backgroundColor: 'transparent',
        },
        keyframes: `@keyframes pulse {
          0% { outline-color: rgba(255, 105, 180, 1); }
          50% { outline-color: rgba(255, 105, 180, 0.2); }
          100% { outline-color: rgba(255, 105, 180, 1); }
        }`,
      });
      return {
        template: '<story />',
      };
    },
  ],
};
```

----------------------------------------

TITLE: Installing Storybook Vue 3 Vite with Yarn
DESCRIPTION: Installs @storybook/vue3-vite package as a development dependency using Yarn package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue3-vite-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev @storybook/vue3-vite
```

----------------------------------------

TITLE: Initializing Button Story - Web Components - TS
DESCRIPTION: This snippet initializes a Storybook story for a Web Components Button component using TypeScript. It imports the necessary modules from '@storybook/web-components-vite' and defines a Meta object to configure the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'components/Button',
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Primary: Story = { args: { primary: true } };
```

----------------------------------------

TITLE: Installing Storybook with NPM for Solid.js
DESCRIPTION: Command to create a new Storybook installation for Solid.js projects using NPM package manager. Uses the latest version of Storybook with Solid.js template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/create-command-manual-framework.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm create storybook@latest --type solid
```

----------------------------------------

TITLE: Defining Component Metadata and Include Controls - JavaScript
DESCRIPTION: This JavaScript snippet defines the default export for a Storybook story, specifying the component to be 'your-component'. It then defines a story named 'ArrayInclude' that configures the Storybook controls to only include the 'foo' and 'bar' properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'your-component',
};

export const ArrayInclude = {
  parameters: {
    controls: { include: ['foo', 'bar'] },
  },
};
```

----------------------------------------

TITLE: Story definition with inferred title
DESCRIPTION: This JavaScript code snippet demonstrates how to define a story without specifying a title. The title will be inferred from the file's location on disk, based on the stories glob in the configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_159

LANGUAGE: JavaScript
CODE:
```
import { Button } from "./Button";
export default { component: Button };
// named exports...
```

----------------------------------------

TITLE: Web Components CSF Story (TS)
DESCRIPTION: Configures a Storybook story for a Web Component using Component Story Format (CSF) in TypeScript. It defines the component and exports a story with an empty `args` object, using types from `@storybook/web-components-vite`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_15

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

// This default export determines where your story goes in the story list
const meta: Meta = {
  component: 'demo-your-component',
};

export default meta;
type Story = StoryObj;

export const FirstStory: Story = {
  args: {
    // 👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Preview with Common Decorator (TS)
DESCRIPTION: This snippet initializes the Storybook preview with a common decorator using TypeScript. It selects a theme based on global parameters and makes it available to the story. It imports themes from '../my-theme-folder/my-theme-file'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-use-global-type.md#_snippet_2

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

import { MyThemes } from '../my-theme-folder/my-theme-file';

const preview: Preview = {
  decorators: [
    (story, context) => {
      const selectedTheme = context.globals.theme || 'light';
      const theme = MyThemes[selectedTheme];
      // Your theme provider and other context providers goes in the return statement
      return;
    },
  ],
};

export default preview;
```

----------------------------------------

TITLE: Configuring Meta-Level Parameters in Storybook
DESCRIPTION: This code snippet shows how to define meta-level parameters within a Storybook story file (e.g., `Dialog.stories.js|ts`). These parameters are applied to all stories associated with the component defined in the `meta` object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
const meta = {
  component: Dialog,
  // 👇 Meta-level parameters
  parameters: {
    layout: 'fullscreen',
    demo: {
      demoProperty: 'b',
      anotherDemoProperty: 'b',
    },
  },
};
export default meta;

// (no additional parameters specified)
export const Basic = {};
```

----------------------------------------

TITLE: Initializing Meta for Demo List Component
DESCRIPTION: This code initializes the Meta object for the demo-list component, specifying the component to be documented in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_32

LANGUAGE: TypeScript
CODE:
```
import { html } from 'lit';

const meta: Meta = {
  component: 'demo-list',
};

export default meta;
type Story = StoryObj;
```

----------------------------------------

TITLE: Installing @storybook/addon-themes using yarn
DESCRIPTION: Command to install @storybook/addon-themes as a dev dependency using yarn package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/emotion.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
yarn add -D @storybook/addon-themes
```

----------------------------------------

TITLE: Configuring Interceptable Functions in JavaScript
DESCRIPTION: An example of an intercept function that determines which methods should be interceptable based on their name and path.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/instrumenter/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
(method, path) => path[0] === 'fireEvent' || method.startsWith('findBy') || method.startsWith('waitFor'),
```

----------------------------------------

TITLE: Creating Empty Template Story with Args in Storybook
DESCRIPTION: Demonstrates another variation of using Template.bind() without passing an object, but still configuring args for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-parameters.ts.csf.txt#2025-04-22_snippet_7

LANGUAGE: JavaScript
CODE:
```
export const WithEmptyTemplate = Template.bind();
WithEmptyTemplate.args = { foo: 'baz' };
```

----------------------------------------

TITLE: Adding Storybook Docs Addon to Configuration
DESCRIPTION: Basic configuration to add the Storybook Docs addon to your Storybook setup in the .storybook/main.js file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  addons: ['@storybook/addon-docs'],
};
```

----------------------------------------

TITLE: Configuring Storybook Meta for React Button Component (TS)
DESCRIPTION: This code configures the Storybook metadata for a React Button component using TypeScript. It imports the Button component and defines the meta object, specifying the component and customizing the background options to include 'dark' and 'gray'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
  parameters: {
    backgrounds: {
      options: {
        // 👇 Override the default `dark` option
        dark: { name: 'Dark', value: '#000' },
        // 👇 Add a new option
        gray: { name: 'Gray', value: '#CCC' },
      },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Correct Storybook framework-specific imports
DESCRIPTION: Examples of correct code that imports from framework-specific packages. These packages are optimized for specific build tools like Vite and Webpack.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-renderer-packages.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Do use the appropriate framework package for your build tool
import { something } from '@storybook/react-vite'; // For Vite
import { something } from '@storybook/vue3-webpack5'; // For Webpack 5
import { something } from '@storybook/web-components-vite'; // For Vite
import { something } from '@storybook/nextjs'; // For Next.js
```

----------------------------------------

TITLE: Importing Component for Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to import a component directly from its source file for use in a Storybook story. It avoids using the package's index file to ensure proper component loading and behavior within Storybook.  It also configures the story's title and component using the Meta type from Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-fix-imports-autodocs-monorepo.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

// ❌ Don't use the package's index file to import the component.
// import { MyComponent } from '@component-package';

// ✅ Use the component's export to import it directly.
import { MyComponent } from '@component-package/src/MyComponent';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'MyComponent',
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook Coverage Addon in JavaScript
DESCRIPTION: This snippet shows how to configure the Storybook Coverage addon in a JavaScript environment. It sets up the addon with specific include and exclude patterns for Istanbul coverage.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-addon-config-options.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  stories: [],
  addons: [
    // Other Storybook addons
    {
      name: '@storybook/addon-coverage',
      options: {
        istanbul: {
          include: ['**/stories/**'],
          exclude: ['**/exampleDirectory/**'],
        },
      },
    },
  ],
};
```

----------------------------------------

TITLE: Validating Form via Storybook Story in React with JavaScript
DESCRIPTION: This snippet demonstrates a unit test for a React form component by composing a Storybook story and running it within a Jest test environment. Dependencies include '@testing-library/react' for UI interaction, '@storybook/react' for story composition, and a form story imported from 'LoginForm.stories'. The test simulates a user clicking the submit button and asserts that the 'invalid-form' label is no longer in the document, indicating successful validation. Inputs are simulated user events and DOM queries; outputs are assertion results. Requires React setup and relevant Storybook configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/single-story-test.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
import { fireEvent, screen } from '@testing-library/react';\n\nimport { composeStory } from '@storybook/react';\n\nimport Meta, { ValidForm as ValidFormStory } from './LoginForm.stories';\n\nconst ValidForm = composeStory(ValidFormStory, Meta);\n\ntest('Validates form', async () => {\n  await ValidForm.run();\n\n  const buttonElement = screen.getByRole('button', {\n    name: 'Submit',\n  });\n\n  fireEvent.click(buttonElement);\n\n  const isFormValid = screen.getByLabelText('invalid-form');\n  expect(isFormValid).not.toBeInTheDocument();\n});
```

----------------------------------------

TITLE: Example ArgTypes Data Structure
DESCRIPTION: Illustrates the in-memory data structure generated by Storybook for the Button component's ArgTypes. This structure includes the name, type, default value, description, table, and control properties for the 'label' prop.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const argTypes = {
  label: {
    name: 'label',
    type: { name: 'string', required: false },
    defaultValue: 'Hello',
    description: 'demo description',
    table: {
      type: { summary: 'string' },
      defaultValue: { summary: 'Hello' },
    }
    control: {
      type: 'text'
    }
  }
}
```

----------------------------------------

TITLE: Install webpack5 manager
DESCRIPTION: Installs the `@storybook/manager-webpack5` package as a dev dependency to avoid hoisting issues when upgrading from 6.2 and already using the experimental webpack5 feature.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_188

LANGUAGE: Shell
CODE:
```
yarn add @storybook/manager-webpack5 --dev
```

LANGUAGE: Shell
CODE:
```
npm install @storybook/manager-webpack5 --save-dev
```

----------------------------------------

TITLE: Initializing Storybook Story for React Component
DESCRIPTION: This code initializes a Storybook story for a React component named MyComponent. It defines a story named 'WithAnImage' that renders the component with a specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#_snippet_1

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const WithAnImage = {
  render: () => (
    <img src="https://storybook.js.org/images/placeholders/350x150.png" alt="My CDN placeholder" />
  ),
};
```

----------------------------------------

TITLE: Running Storybook Tests with NPM
DESCRIPTION: Executes Storybook tests using npm package manager with the --no-index-json flag to disable index.json file generation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-no-index-json.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm run test-storybook -- --no-index-json
```

----------------------------------------

TITLE: Rendering Dark Theme Colors in Storybook using JSX
DESCRIPTION: This snippet renders the color palette for the dark theme. It iterates through the theme's color properties and creates ColorItem components for each valid color value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/colorpalette.mdx#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
<ColorPalette>
  {Object.entries(convert(themes.dark).color).map(([k, v]) => {
    if (typeof v === 'string' && (v.match(/^#/) || v.match(/^rgb/) || k.match(/color/i))) {
      return <ColorItem key={k} title={k} colors={{ [k]: v }} />;
    } else if (typeof v === 'object') {
      return (
        <ColorItem
          key={k}
          title={k}
          colors={Object.entries(v).reduce(
            (acc, [key, value]) =>
              typeof value === 'string' &&
              (value.match(/^#/) || value.match(/^rgb/) || key.match(/color/i))
                ? { ...acc, [key]: value }
                : acc,
            {}
          )}
        />
      );
    }
    return null;
  })}
</ColorPalette>
```

----------------------------------------

TITLE: Configuring themes with withThemeFromJSXProvider in Storybook preview
DESCRIPTION: Diff showing how to set up themes using withThemeFromJSXProvider decorator in the Storybook preview.js file. It includes importing necessary components, setting up themes, and configuring the ThemeProvider.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/emotion.md#2025-04-22_snippet_4

LANGUAGE: diff
CODE:
```
-import { Preview } from '@storybook/your-renderer';
+import { Preview, Renderer } from '@storybook/your-renderer';
+import { withThemeFromJSXProvider } from '@storybook/addon-themes';
+import { ThemeProvider } from '@emotion/react';
+import { GlobalStyles, lightTheme, darkTheme } from '../src/themes'; // Import your custom theme configs


const preview: Preview = {
  parameters: { /* ... */ },
+ decorators: [
+  withThemeFromJSXProvider<Renderer>({
+    themes: {
+      light: lightTheme,
+      dark: darkTheme,
+    },
+    defaultTheme: 'light',
+    Provider: ThemeProvider,
+    GlobalStyles: GlobalStyles,
+  }),
+ ]
};

export default preview;
```

----------------------------------------

TITLE: Using useGlobals Hook for Accessing Storybook Globals in JavaScript
DESCRIPTION: Demonstrates how to use the useGlobals hook to access and update global values in Storybook. This hook is available in both @storybook/preview-api and @storybook/manager-api.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview-api/README-store.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { useGlobals } from '@storybook/preview-api';

// or '@storybook/manager-api'

const [globals, updateGlobals] = useGlobals();
```

----------------------------------------

TITLE: Initializing Storybook Documentation Page in JSX/MDX
DESCRIPTION: Demonstrates how to create a basic Storybook documentation page using the Meta and Subtitle components from @storybook/addon-docs. Sets up a page with a title, heading, subtitle, and content.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/Title.mdx#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { Meta, Subtitle } from '@storybook/addon-docs';

<Meta title="Yabbadabbadooo" />

# Docs with title

<Subtitle>Subtitle</Subtitle>

hello docs
```

----------------------------------------

TITLE: Configuring Storybook Story for Vue Component
DESCRIPTION: This snippet configures a Storybook story for a Vue component, adding a decorator that applies a margin around the rendered component using a template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#_snippet_9

LANGUAGE: js
CODE:
```
import YourComponent from './YourComponent.vue';

export default {
  component: YourComponent,
  decorators: [() => ({ template: '<div style="margin: 3em;"><story/></div>' })],
};
```

----------------------------------------

TITLE: Updating Storybook Configuration to Use Vite Builder
DESCRIPTION: This code snippet shows how to update the Storybook configuration file (`.storybook/main.js|ts`) to use the Vite builder for Preact, Vue3, or Web Components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_27

LANGUAGE: tsx
CODE:
```
export default {
  framework: {
    name: "@storybook/[framework]-vite", // replace [framework] with preact, vue3, or web-components
    options: {},
  },
  // ... other configurations
};
```

----------------------------------------

TITLE: Initializing Button Story - Vue (TS)
DESCRIPTION: This code defines a Storybook story for a Vue Button component using TypeScript. It imports necessary modules, defines the component's metadata, and creates a 'Primary' story that renders the button with specified arguments (label).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import { action } from 'storybook/actions';

import Button from './Button.vue';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  render: (args) => ({
    components: { Button },
    setup() {
      return {
        ...args,
        onClick: action('clicked'),
      };
    },
```

----------------------------------------

TITLE: Remove Highlight Decorator in Storybook (Web Components, TS)
DESCRIPTION: This decorator emits HIGHLIGHT and REMOVE_HIGHLIGHT events to highlight and then remove the highlight from specified selectors within the web component. It uses storybook/preview-api's useChannel to emit events. This version is written in TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-remove.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, REMOVE_HIGHLIGHT } from 'storybook/highlight';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const RemoveHighlight: Story = {
  decorators: [
    (story) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        id: 'my-unique-id',
        selectors: ['header', 'section', 'footer'],
      });
      emit(REMOVE_HIGHLIGHT, 'my-unique-id');
      return story();
    },
  ],
};
```

----------------------------------------

TITLE: Installing Storybook Vitest Addon with PNPM
DESCRIPTION: Command to install @storybook/addon-vitest using PNPM package manager
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-test-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm exec storybook add @storybook/addon-vitest
```

----------------------------------------

TITLE: Removing Babel Core and Runtime
DESCRIPTION: This command removes babel-core and babel-runtime dependencies when upgrading CRA1 to Babel 7.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_280

LANGUAGE: bash
CODE:
```
yarn remove babel-core babel-runtime
```

----------------------------------------

TITLE: Testing Form Validation in Angular with Storybook Stories
DESCRIPTION: Implements form validation testing using @testing-library/angular and imported Storybook stories. Tests an invalid form submission by clicking the submit button and verifying the presence of an invalid form indicator.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-test-with-testing-library.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { render, screen, fireEvent } from '@testing-library/angular';

import { FormComponent } from './LoginForm.component';

import { InvalidForm } from './Form.stories'; //👈 Our stories imported here.

test('Checks if the form is valid ', async () => {
  await render(FormComponent, {
    componentProperties: InvalidForm.args,
  });

  fireEvent.click(screen.getByText('Submit'));

  const isFormValid = screen.getByTestId('invalid-form');
  expect(isFormValid).toBeInTheDocument();
});
```

----------------------------------------

TITLE: Configuring cypress option for Vite
DESCRIPTION: This replaces the `VITE_COVERAGE` environment variable with `CYPRESS_COVERAGE`. Requires Cypress's code coverage.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
options: { istanbul: { cypress: true,}}
```

----------------------------------------

TITLE: React Document Screen Component with JavaScript
DESCRIPTION: React component implementation using JavaScript that uses a custom hook for data fetching and handles loading/error states. Renders document data using PageLayout, DocumentHeader, and DocumentList components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import React, { useState, useEffect } from 'react';

import { PageLayout } from './PageLayout';
import { DocumentHeader } from './DocumentHeader';
import { DocumentList } from './DocumentList';

function useFetchData() {
  const [status, setStatus] = useState('idle');
  const [data, setData] = useState([]);
  useEffect(() => {
    setStatus('loading');
    fetch('https://your-restful-endpoint')
      .then((res) => {
        if (!res.ok) {
          throw new Error(res.statusText);
        }
        return res;
      })
      .then((res) => res.json())
      .then((data) => {
        setStatus('success');
        setData(data);
      })
      .catch(() => {
        setStatus('error');
      });
  }, []);
  return {
    status,
    data,
  };
}
export function DocumentScreen() {
  const { status, data } = useFetchData();

  const { user, document, subdocuments } = data;

  if (status === 'loading') {
    return <p>Loading...</p>;
  }
  if (status === 'error') {
    return <p>There was an error fetching the data!</p>;
  }
  return (
    <PageLayout user={user}>
      <DocumentHeader document={document} />
      <DocumentList documents={subdocuments} />
    </PageLayout>
  );
}
```

----------------------------------------

TITLE: Configuring Button Story with argTypes in Angular
DESCRIPTION: This code configures a Storybook story for an Angular Button component. It defines the component and its argTypes, which allow users to control the component's properties like label, advanced settings, margin, padding, and cornerRadius through the Storybook UI. The margin, padding, and cornerRadius are conditionally enabled based on the 'advanced' boolean.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-toggle.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  argTypes: {
    label: { control: 'text' }, // Always shows the control
    advanced: { control: 'boolean' },
    // Only enabled if advanced is true
    margin: { control: 'number', if: { arg: 'advanced' } },
    padding: { control: 'number', if: { arg: 'advanced' } },
    cornerRadius: { control: 'number', if: { arg: 'advanced' } },
  },
};

export default meta;
```

----------------------------------------

TITLE: Setting and Resetting Mocked Date in beforeEach (TS)
DESCRIPTION: This snippet demonstrates how to use MockDate to set a specific date before each story and reset it afterward within the beforeEach hook. This ensures that the Date object is mocked consistently for each story, providing predictable test results. It is written in TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import MockDate from 'mockdate';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { getUserFromSession } from '#api/session.mock';

const meta: Meta = {
  component: 'my-page',
  // 👇 Set the value of Date for every story in the file
  async beforeEach() {
    MockDate.set('2024-02-14');

    // 👇 Reset the Date after each story
    return () => {
      MockDate.reset();
    };
  },
};
export default meta;

type Story = StoryObj;

export const Default: Story = {
  async play({ canvasElement }) {
    // ... This will run with the mocked Date
  },
};
```

----------------------------------------

TITLE: Initializing Svelte Button Story Metadata (TS)
DESCRIPTION: This code initializes the metadata for a Svelte Button component in a Storybook story using TypeScript. It configures the background grid parameters, such as cell size, opacity, cell amount, and offsets, to customize the visual appearance of the component within the Storybook environment. It uses satisfies to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-grid.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

// To apply a set of backgrounds to all stories of Button:
const meta = {
  component: Button,
  parameters: {
    backgrounds: {
      grid: {
        cellSize: 20,
        opacity: 0.5,
        cellAmount: 5,
        offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
        offsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
      },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Defining Storybook Meta and Stories with Include/Exclude - Common (TS)
DESCRIPTION: This code defines Storybook stories for a component using TypeScript, demonstrating how to include and exclude controls using array and regular expression patterns. It imports the necessary modules from '@storybook/your-framework' and defines the component's metadata and stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { YourComponent } from './YourComponent';

const meta = {
  component: YourComponent,
} satisfies Meta<typeof YourComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ArrayInclude: Story = {
  parameters: {
    controls: { include: ['foo', 'bar'] },
  },
};

export const RegexInclude: Story = {
  parameters: {
    controls: { include: /^hello*/ },
  },
};

export const ArrayExclude: Story = {
  parameters: {
    controls: { exclude: ['foo', 'bar'] },
  },
};

export const RegexExclude: Story = {
  parameters: {
    controls: { exclude: /^hello*/ },
  },
};
```

----------------------------------------

TITLE: Resetting and Applying Highlight in Svelte Story (JS - CSF)
DESCRIPTION: This Svelte story uses the `useChannel` hook within a decorator to emit `RESET_HIGHLIGHT` and `HIGHLIGHT` events. This allows for resetting any existing highlights and then applying new highlights to specified selectors (header, section, footer). This example uses the Component Story Format (CSF).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-reset.md#_snippet_3

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { useChannel } from 'storybook/preview-api';
  import { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="ResetHighlight"
  decorators={[
    (storyFn) => {
      const emit = useChannel({});
      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements
      emit(HIGHLIGHT, {
        selectors: ['header', 'section', 'footer'],
      });
      return storyFn();
    },
  ]}
/>
```

----------------------------------------

TITLE: Storybook Story with Click Simulation (Web Components - TS)
DESCRIPTION: This code defines a Storybook story for a web component using TypeScript, including a play function that simulates a click event. It imports necessary modules from '@storybook/web-components-vite' and 'storybook/test', retrieves the canvas element, and uses userEvent to simulate the click.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#_snippet_11

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { fireEvent, userEvent, within } from 'storybook/test';

const meta: Meta = {
  component: 'demo-my-component',
};

export default meta;
type Story = StoryObj;

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ClickExample: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
```

----------------------------------------

TITLE: Visualizing Non-patch Release Workflow with Mermaid
DESCRIPTION: A git graph diagram illustrating the non-patch release process, showing how feature and bugfix changes are incorporated into a new alpha release version 7.1.0-alpha.29.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_2

LANGUAGE: mermaid
CODE:
```
%%{init: { 'gitGraph': { 'mainBranchName': 'next' } } }%%
gitGraph
    commit
    branch next-release
    commit tag: "7.1.0-alpha.28"
    checkout next
    merge next-release
    commit type: HIGHLIGHT id: "direct commit"
    branch new-feature
    commit
    commit
    checkout next
    merge new-feature type: HIGHLIGHT
    branch some-bugfix
    commit
    checkout next
    merge some-bugfix type: HIGHLIGHT
    branch version-non-patch-from-7.1.0-alpha.28
    commit id: "write changelog"
    checkout next-release
    merge version-non-patch-from-7.1.0-alpha.28
    commit id: "bump versions" tag: "7.1.0-alpha.29"
    checkout next
    merge next-release
```

----------------------------------------

TITLE: Configuring Package Executables in JSON
DESCRIPTION: JSON configuration for exposing Storybook executables in package.json
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "bin": {
    "storybook": "./bin/index.js",
    "build-storybook": "./bin/build.js"
  }
}
```

----------------------------------------

TITLE: Example Sync Event Payload in JavaScript
DESCRIPTION: Illustrates the structure of a sync event payload, including control states and log items for interceptable calls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/instrumenter/README.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
{
  controlStates: {
    start: false,
    back: false,
    goto: true,
    next: true,
    end: true,
  },
  logItems: [
    { callId: 'tooltip--hovered [0] hover', status: 'waiting' }
  ]
}
```

----------------------------------------

TITLE: Accessing Selected Theme from Context with pluckThemeFromContext
DESCRIPTION: A helper function that extracts the currently selected theme from Storybook's context. Useful when creating custom theme decorators to access the theme state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { DecoratorHelpers } from '@storybook/addon-themes';

const { pluckThemeFromContext } = DecoratorHelpers;

export const myCustomDecorator =
  ({ themes, defaultState, ...rest }) =>
  (storyFn, context) => {
    const selectedTheme = pluckThemeFromContext(context);

    // Snipped
  };
```

----------------------------------------

TITLE: Example of Instrumented Function Call Metadata
DESCRIPTION: Demonstrates the structure of metadata for an instrumented function call, which is used to generate pseudo-code representations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/instrumenter/README.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
{ path: ['userEvent'], method: 'keyboard', args: ['hello'], ... }
```

----------------------------------------

TITLE: Building Storybook with Angular Builder
DESCRIPTION: This shell command builds the Storybook using Angular's custom builder.  It requires the @storybook/angular package and a correctly configured Angular project. The command executes the build-storybook target defined in the angular.json file for the specified project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/angular-builder-production.md#_snippet_0

LANGUAGE: shell
CODE:
```
ng run my-project:build-storybook
```

----------------------------------------

TITLE: Initializing Button Stories with TypeScript
DESCRIPTION: This code initializes Storybook stories for a Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines metadata for the Button component, including a primary story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the name of your framework
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const PrimaryLongName: Story = {
  args: {
    ...Primary.args,
    label: 'Primary with a really long name',
  },
};
```

----------------------------------------

TITLE: Configuring Button Stories with TypeScript 4.9+
DESCRIPTION: TypeScript configuration using the satisfies operator for improved type safety. Shows framework-agnostic setup with type definitions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-default.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the name of your framework
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  parameters: {
    backgrounds: {
      // 👇 Set default background value for all component stories
      default: 'Gray',
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const OnDark: Story = {
  parameters: {
    backgrounds: {
      // 👇 Override default background value for this story
      default: 'Dark',
    },
  },
};
```

----------------------------------------

TITLE: Installing Storybook Theme Addon and PostCSS Dark Theme Class
DESCRIPTION: Commands for installing @storybook/addon-themes and postcss-dark-theme-class using different package managers (yarn, npm, pnpm).
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
yarn add -D @storybook/addon-themes postcss-dark-theme-class
```

LANGUAGE: zsh
CODE:
```
npm install -D @storybook/addon-themes postcss-dark-theme-class
```

LANGUAGE: zsh
CODE:
```
pnpm add -D @storybook/addon-themes postcss-dark-theme-class
```

----------------------------------------

TITLE: Enabling Debug Mode
DESCRIPTION: Outputs more logs in the CLI to assist with debugging issues.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_16

LANGUAGE: Shell
CODE:
```
storybook dev --debug
```

----------------------------------------

TITLE: Initializing MyComponent Story with Vue (JS)
DESCRIPTION: This code defines a Storybook story for the MyComponent using Vue (JavaScript). It imports the necessary components and defines a story that renders the component within a specified layout using a render function and a template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#_snippet_6

LANGUAGE: js
CODE:
```
import Layout from './Layout.vue';

import MyComponent from './MyComponent.vue';

export default {
  component: MyComponent,
};

// This story uses a render function to fully control how the component renders.
export const Example = {
  render: () => ({
    components: { Layout, MyComponent },
    template: `
      <Layout>
        <header>
          <h1>Example</h1>
        </header>
        <article>
          <MyComponent />
        </article>
      </Layout>
    `,
  }),
};
```

----------------------------------------

TITLE: Setting Storybook Documentation Page Title with Meta Component in JSX
DESCRIPTION: This JSX code uses the Meta component to set the title of the Storybook documentation page. The title is set to 'docs2/Yabbadabbadooo'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/Title.mdx#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
<Meta title="docs2/Yabbadabbadooo" />
```

----------------------------------------

TITLE: Initializing Storybook story for Angular component
DESCRIPTION: This snippet initializes a Storybook story for an Angular component. It imports Meta and StoryObj from '@storybook/angular', defines the component to be used, and exports the meta object and a story named 'Baz'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/foo-bar-baz-story.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Foo } from './Foo.component';

const meta: Meta<Foo> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Foo/Bar',
  component: Foo,
};

export default meta;
type Story = StoryObj<Foo>;

export const Baz: Story = {};
```

----------------------------------------

TITLE: Implementing ProfilePage Component in React
DESCRIPTION: A React component that renders a user profile page with posts and friends sections. Uses React Context to access container components and receives name and userId as props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-in-use.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { useContext } from 'react';

import ProfilePageContext from './ProfilePageContext';

export const ProfilePage = ({ name, userId }) => {
  const { UserPostsContainer, UserFriendsContainer } = useContext(ProfilePageContext);

  return (
    <div>
      <h1>{name}</h1>
      <UserPostsContainer userId={userId} />
      <UserFriendsContainer userId={userId} />
    </div>
  );
};
```

----------------------------------------

TITLE: Invalid expression title
DESCRIPTION: This JavaScript code snippet demonstrates an invalid story title using a JavaScript expression. This is not supported in Storybook 7.0 and later.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_162

LANGUAGE: JavaScript
CODE:
```
export default {
  title: foo('bar'),
};
```

----------------------------------------

TITLE: Invalid Glob Pattern in main.js
DESCRIPTION: This code snippet shows an example of an invalid glob pattern used in Storybook's `main.js` file. This pattern may have worked in previous versions but will cause a warning and break in future versions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_211

LANGUAGE: javascript
CODE:
```
stories: ['./**/*.stories.(ts|js)']
```

----------------------------------------

TITLE: Installing @storybook/addon-themes with Package Managers
DESCRIPTION: Commands for installing the @storybook/addon-themes package using yarn, npm, and pnpm package managers. This addon is required for theme integration in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/tailwind.md#2025-04-22_snippet_0

LANGUAGE: zsh
CODE:
```
yarn add -D @storybook/addon-themes
```

LANGUAGE: zsh
CODE:
```
npm install -D @storybook/addon-themes
```

LANGUAGE: zsh
CODE:
```
pnpm add -D @storybook/addon-themes
```

----------------------------------------

TITLE: Importing Subtitle Block in JavaScript for Storybook Docs
DESCRIPTION: This snippet shows how to import the Subtitle component from Storybook's addon-docs blocks in a JavaScript file. This import is necessary before using the Subtitle component in your documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-subtitle.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { Subtitle } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Updating Storybook Main Configuration for Next.js Vite
DESCRIPTION: This code snippet shows how to update the `.storybook/main.<js|ts>` file to use the stable `@storybook/nextjs-vite` addon instead of the experimental one.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_29

LANGUAGE: diff
CODE:
```
export default {
  addons: [
-   "@storybook/experimental-nextjs-vite",
+   "@storybook/nextjs-vite"
  ]
}
```

----------------------------------------

TITLE: Specifying Host Address
DESCRIPTION: Runs Storybook on the specified host address.  Useful for accessing Storybook from other machines on the network.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_5

LANGUAGE: Shell
CODE:
```
storybook dev -h my-host.com
```

----------------------------------------

TITLE: Providing SSL Certificate Authority
DESCRIPTION: Provides an SSL certificate authority. Required if using a self-signed certificate with HTTPS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_9

LANGUAGE: Shell
CODE:
```
storybook dev --ssl-ca my-certificate
```

----------------------------------------

TITLE: Demonstrating Markdown Syntax Differences in MDX
DESCRIPTION: Shows examples of valid markdown syntax that would cause issues if directly imported into an MDX file due to MDX2's stricter interpretation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-markdown.mdx#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
# A header

{ this is valid in a plain markdown file, but MDX2 will try to evaluate this as an expression }

<This is also valid, but MDX2 thinks this is a JSX component />
```

----------------------------------------

TITLE: Empty List Story (TypeScript)
DESCRIPTION: Defines a story for rendering an empty List component in Storybook using TypeScript. It specifies the component to render and the template to use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_15

LANGUAGE: typescript
CODE:
```
export const Empty: Story = {
  render: () => ({
    components: { List },
    template: '<List />',
  }),
};
```

----------------------------------------

TITLE: Initializing Storybook Meta for Angular Component
DESCRIPTION: This code initializes the Storybook meta object for an Angular component. It imports the necessary modules from Storybook and defines the component to be used in the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-selectevent.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;
```

----------------------------------------

TITLE: Defining Svelte Storybook Meta for Button Component (Svelte CSF) - Typescript
DESCRIPTION: This code defines the Storybook meta configuration for a Svelte Button component using the Component Story Format (CSF) with Typescript. It imports necessary modules, including defineMeta from '@storybook/addon-svelte-csf', action from 'storybook/actions', and the Button component. It then uses defineMeta to set up the component and its onClick action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { action } from 'storybook/actions';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    args: {
      // 👇 Create an action that appears when the onClick event is fired
      onClick: action('on-click'),
    },
  });
</script>
```

----------------------------------------

TITLE: Initializing MSW Addon in preview.js
DESCRIPTION: This code initializes the MSW addon and applies it to all stories using a project-level loader. This ensures that MSW is active and ready to mock API requests in every story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
import { initialize, mswDecorator } from 'msw-storybook-addon';

initialize();

export const decorators = [mswDecorator];
```

----------------------------------------

TITLE: Disabling Telemetry in Storybook with yarn
DESCRIPTION: Command to run Storybook with telemetry disabled using yarn. The flag is passed directly after the storybook command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-disable-telemetry-flag.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn storybook --disable-telemetry
```

----------------------------------------

TITLE: Deprecated register.js Usage
DESCRIPTION: This code snippet illustrates the deprecated method of registering Storybook addons using `addon-name/register.js`. This method is being replaced by simply adding the addon name to the `addons` array in `.storybook/main.js`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_153

LANGUAGE: JavaScript
CODE:
```
module.exports = { addons: ["my-addon/register.js"] };
```

----------------------------------------

TITLE: Setting Up Storybook Documentation Components
DESCRIPTION: Configures Meta component to reference AccountForm stories and displays the Standard story variant using Story component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/AccountForm.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
<Meta of={AccountFormStories} />

<Story of={AccountFormStories.Standard} />
```

----------------------------------------

TITLE: Configuring Storybook Preview Annotations in TypeScript
DESCRIPTION: TypeScript version of the previewAnnotations function that appends the local preview module to the entry array. This is used by Storybook to extend the preview configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
export const previewAnnotations = (entry = [], options) => {
  return [...entry, require.resolve('./dist/preview')];
};
```

----------------------------------------

TITLE: Defining Angular Component with ng-content
DESCRIPTION: This snippet defines an Angular component that uses ng-content for content projection. The component wraps its content in a div with blue text color.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.angular-stories.txt#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
@Component({
  selector: 'storybook-with-ng-content',
  template: `<div style="color: #1e88e5;"><ng-content></ng-content></div>`,
})
class WithNgContentComponent {}
```

----------------------------------------

TITLE: Vue3 Page Story with TypeScript
DESCRIPTION: Storybook story for Vue3 Page component using TypeScript. Creates a note in the database during play function and mounts the component with dynamic data through props. Includes user interaction testing and argument type controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-advanced.md#2025-04-22_snippet_4

LANGUAGE: ts
CODE:
```
export const Default: Story = {
  play: async ({ mount, args }) => {
    const note = await db.note.create({
      data: { title: 'Mount inside of play' },
    });

    const canvas = await mount(
      Page,
      // 👇 Pass data that is created inside of the play function to the component
      //   For example, a just-generated UUID
      { props: { ...args, params: { id: String(note.id) } } },
    );

    await userEvent.click(await canvas.findByRole('menuitem', { name: /login to add/i }));
  },
  argTypes: {
    // 👇 Make the params prop un-controllable, as the value is always overriden in the play function.
    params: { control: { disable: true } },
  },
};
```

----------------------------------------

TITLE: Module Metadata Configuration in package.json
DESCRIPTION: This JSON snippet configures the module metadata for a Storybook addon, including entry points, file inclusions, and development dependencies. It defines how the addon is integrated with Storybook and specifies the files to include when the addon is published.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "node": "./dist/index.js",
      "require": "./dist/index.js",
      "import": "./dist/index.mjs"
    },
    "./manager": "./dist/manager.mjs",
    "./preview": "./dist/preview.mjs",
    "./package.json": "./package.json"
  },
  "main": "dist/index.js",
  "module": "dist/index.mjs",
  "types": "dist/index.d.ts",
  "files": ["dist/**/*", "README.md", "*.js", "*.d.ts"],
  "devDependencies": {
    "@storybook/blocks": "^9.0.0",
    "storybook": "^9.0.0"
  },
  "bundler": {
    "exportEntries": ["src/index.ts"],
    "managerEntries": ["src/manager.ts"],
    "previewEntries": ["src/preview.ts"]
  }
}
```

----------------------------------------

TITLE: Initializing Story with Play Function in Svelte (TS)
DESCRIPTION: This code defines a Storybook story for a Svelte component named MyComponent. It uses the play function to simulate user interaction: typing 'WrongInput' into a username field, clicking a submit button, and hovering over an error message. It relies on storybook/test for userEvent and waitFor utilities.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { userEvent, waitFor, within } from 'storybook/test';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<!--
  See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
  to learn more about using the canvasElement to query the DOM
-->
<Story
  name="ExampleAsyncStory"
  play={async ({ canvasElement }) => {
    const canvas = within(canvasElement);
```

----------------------------------------

TITLE: Configuring Storybook Main Settings in JavaScript
DESCRIPTION: This snippet demonstrates the basic configuration for Storybook's `.storybook/main.js` file using JavaScript. It specifies the framework (using a placeholder `@storybook/your-framework` that needs replacement), defines the location of story files using glob patterns (`../src/**/*.mdx`, `../src/**/*.stories.@(js|jsx|mjs|ts|tsx)`), and disables the "What's New" notifications via the `core.disableWhatsNewNotifications` option.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-update-notifications.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    disableWhatsNewNotifications: true,
  },
};
```

----------------------------------------

TITLE: Initializing Button Stories with Svelte CSF (TS)
DESCRIPTION: This code initializes Storybook stories for a Svelte Button component using the Component Story Format (CSF) with TypeScript. It imports the defineMeta function from '@storybook/addon-svelte-csf' and defines the component's metadata, including global viewport settings. It also creates a story named 'OnPhone' that overrides the global viewport to simulate a mobile device.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#_snippet_3

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    globals: {
      // 👇 Set viewport for all component stories
      viewport: { value: "tablet", isRotated: false },
    },
  });
</script>

<Story
  name="OnPhone"
  globals={{
    viewport: { value: "mobile1", isRotated: false },
  }}
/>
```

----------------------------------------

TITLE: Defining Button Story with ArgTypes (JS)
DESCRIPTION: This code defines a Storybook story for a Button component. It imports the Button component and defines a 'Basic' story with argTypes to control the 'label' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Basic = {
  argTypes: {
    // 👇 This story expects a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with Svelte CSF (JavaScript)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF) in JavaScript. It imports the Button component and a MarginDecorator, then defines a primary story with the MarginDecorator.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#_snippet_6

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';
import MarginDecorator from './MarginDecorator.svelte';

export default {
  component: Button,
};

export const Primary = {
  decorators: [() => MarginDecorator],
};
```

----------------------------------------

TITLE: Hypothetical Framework Story Example
DESCRIPTION: Example of a story implementation for a hypothetical framework
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/new-frameworks.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
export const story = {
  render: () => ({
    component: 'Button',
    args: { label: 'The Button' }
  })
}
```

----------------------------------------

TITLE: Cypress Test for Login Form
DESCRIPTION: Cypress test implementation that loads a Storybook story and validates the login form inputs and interactions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
describe('Login form', () => {
  it('authenticates user with valid credentials', () => {
    cy.loadStory('stories/login.stories.js', 'LoginForm');
    cy.get('#username').should('have.value', 'username@email.com');
    cy.get('#password').should('have.value', 'password');
  });
});
```

----------------------------------------

TITLE: Define Storybook as Peer Dependency in package.json (JSONC)
DESCRIPTION: This JSON configuration demonstrates how to define Storybook as a peer dependency in your addon's package.json. This ensures compatibility with the host project's Storybook version and avoids duplicate packages.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-migration-guide.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "name": "your-storybook-addon",
  "peerDependencies": {
    "storybook": "^9.0.0"
  },
  "devDependencies": {
    "storybook": ">=9.0.0-0 <10.0.0-0" // For local development
  }
}
```

----------------------------------------

TITLE: Creating a Function-based Emoji Button Story in React JSX
DESCRIPTION: This story demonstrates creating a Button component with emoji content using a named function export.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.csf.txt#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
export function emojiFn() {
  return (
    <Button onClick={action("clicked")}>
      <span role="img" aria-label="so cool">
        😀 😎 👍 💯
      </span>
    </Button>
  )
};
```

----------------------------------------

TITLE: Creating a decorator with makeDecorator
DESCRIPTION: Creates a decorator in the style of official addons.  The decorator will not be called if the story's parameters include `{ exampleParameter: { disable: true } }` (where `exampleParameter` is the `parameterName` of your addon).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
const withExample = makeDecorator({
  name: 'withExample',
  parameterName: 'exampleParameter',
  // This means don't run this decorator if the story doesn't have exampleParameter
  skipIfNoParametersOrOptions: false,
  wrapper: (getStory, context, { options, parameters }) => {
    const channel = addons.getChannel();

    channel.emit('example/event', { options, parameters });
    // Our simple component
    return <div style={{ margin: '1rem' }}>{getStory(context)}</div>;
  },
});
```

----------------------------------------

TITLE: Update Storybook Configuration
DESCRIPTION: Updates the .storybook/main.js|ts file to use the @storybook/react-vite framework.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-vite.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type { import('@storybook/react-vite').StorybookConfig } */
const config = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|mjs|ts|tsx)"],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-onboarding",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: '@storybook/react-vite',
    options: {},
  },
  docs: {
    autodocs: "tag",
  },
};
export default config;
```

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/react-vite';
const config: StorybookConfig = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|mjs|ts|tsx)"],
  addons: [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-onboarding",
    "@storybook/addon-interactions",
  ],
  framework: {
    name: '@storybook/react-vite',
    options: {},
  },
  docs: {
    autodocs: "tag",
  },
};
export default config;
```

----------------------------------------

TITLE: Defining Web Components Button Story (TypeScript)
DESCRIPTION: This code defines a Storybook story for a web components Button component using TypeScript. It imports the necessary modules from Storybook and defines the component's metadata. It then creates a 'Primary' story with specific arguments for the button's appearance.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_15

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Story for Solid Component (TypeScript)
DESCRIPTION: This snippet configures a Storybook story for a Solid component using TypeScript, adding a decorator that applies a margin around the rendered component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta } from 'storybook-solidjs';

import { YourComponent } from './YourComponent';

const meta = {
  component: YourComponent,
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        {/* 👇 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}
        <Story />
      </div>
    ),
  ],
} satisfies Meta<typeof YourComponent>;

export default meta;
```

----------------------------------------

TITLE: Defining Storybook Story with CSF
DESCRIPTION: This snippet defines a Storybook story using the Component Story Format (CSF). It imports the component and exports a default object containing the component definition. It also exports a named story with specific arguments, utilizing environment variables.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-vite-env-variables.md#_snippet_1

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

export const ExampleStory = {
  args: {
    propertyA: import.meta.env.STORYBOOK_DATA_KEY,
    propertyB: import.meta.env.VITE_CUSTOM_VAR,
  },
};
```

----------------------------------------

TITLE: Uninstalling and Installing Storybook Addons
DESCRIPTION: This command uninstalls the experimental addon and installs the vitest addon. It ensures the correct addon is used for testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm uninstall @storybook/experimental-addon-test
npm install --save-dev @storybook/addon-vitest
```

----------------------------------------

TITLE: Initializing Storybook Story for Web Components (JS)
DESCRIPTION: This code initializes a Storybook story for a web component using JavaScript. It defines the component and its argument types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-example',
  argTypes: {
    actualArgName: {
      name: 'Friendly name',
    },
  },
};
```

----------------------------------------

TITLE: Defining Web Components Story with Mocked Dependency
DESCRIPTION: This snippet defines a Storybook story for a web component named 'my-page'. It mocks the 'getUserFromSession' function to return a predefined user object before each story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#_snippet_7

LANGUAGE: js
CODE:
```
import { getUserFromSession } from '#api/session.mock';

export default {
  component: 'my-page',
};

export const Default = {
  async beforeEach() {
    // 👇 Set the return value for the getUserFromSession function
    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });
  },
};
```

----------------------------------------

TITLE: Initializing Button Story (Common TS)
DESCRIPTION: This code initializes a Storybook story for a Button component using TypeScript. It imports the Button component and defines a basic story with autoplay enabled in the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {
  parameters: {
    docs: {
      story: { autoplay: true },
    },
  },
};
```

----------------------------------------

TITLE: Testing React Button Component with Vitest and React Testing Library
DESCRIPTION: This code snippet demonstrates unit tests for a React Button component using Vitest and React Testing Library. It imports stories from a separate file and tests both default and overridden props for the Primary story. The tests ensure that the button renders correctly with different text content.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-csf-factory-render.md#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
import { test, expect } from 'vitest';
import { render, screen } from '@testing-library/react';

// Import all stories from the stories file
import * as stories from './Button.stories';

const { Primary, Secondary } = stories;

test('renders primary button with default args', async () => {
  // Access the story's component via the .Component property
  render(<Primary.Component />);
  const buttonElement = screen.getByText('Text coming from args in stories file!');
  expect(buttonElement).not.toBeNull();
});

test('renders primary button with overridden props', async () => {
  // You can override props by passing them directly to the story's component
  render(<Primary.Component>Hello world</Primary.Component>);
  const buttonElement = screen.getByText(/Hello world/i);
  expect(buttonElement).not.toBeNull();
});
```

----------------------------------------

TITLE: Enable crash reports during Storybook upgrade
DESCRIPTION: Enables sending crash reports to Storybook's telemetry.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_78

LANGUAGE: Shell
CODE:
```
storybook upgrade --enable-crash-reports
```

----------------------------------------

TITLE: Configuring Storybook Preview Head with Static Files and Custom JavaScript
DESCRIPTION: This code snippet shows how to configure the Storybook preview head by including static files and custom JavaScript. It demonstrates preloading a font file and loading a Typekit script with error handling.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-head-example.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!--
Pull in static files served from your Static directory or the internet
Example:
`main.js|ts` is configured with staticDirs: ['../public'] and your font is located in the `fonts`
directory inside your `public` directory
-->
<link rel="preload" href="/fonts/my-font.woff2" />

<!-- Or you can load custom head-tag JavaScript: -->
<script src="https://use.typekit.net/xxxyyy.js"></script>
<script>
  try {
    Typekit.load();
  } catch (e) {}
</script>
```

----------------------------------------

TITLE: Fire Event Example Storybook Play Function (JavaScript)
DESCRIPTION: This play function simulates firing a click event on an element with a specific test ID within a Storybook story using the fireEvent.click method. It queries the canvas for an element with the 'data-testid' attribute and then triggers a click event.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-clickevent.md#_snippet_5

LANGUAGE: js
CODE:
```
export const FireEventExample = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    await fireEvent.click(canvas.getByTestId('data-testid'));
  },
};
```

----------------------------------------

TITLE: Starting Storybook in Documentation Mode
DESCRIPTION: This command starts Storybook in documentation mode, which is designed for writing and previewing documentation. It allows you to focus on creating and reviewing documentation within the Storybook environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_20

LANGUAGE: CLI
CODE:
```
storybook dev --docs
```

----------------------------------------

TITLE: Initializing Button Storybook story (Common) - TS
DESCRIPTION: This code initializes a Storybook story for a Button component using TypeScript. It imports the Button component and defines its metadata, including documentation parameters to exclude the 'style' control. It uses 'your-framework' as a placeholder for the actual framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-argtypes-parameter.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Enabling Source Code Panel in Storybook Docs
DESCRIPTION: This code snippet shows how to enable the source code panel in Storybook Docs by configuring the `docs.codePanel` parameter in the preview configuration file. This adds a new addon panel to stories that displays a source snippet beneath each story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_33

LANGUAGE: javascript
CODE:
```
export default {
  parameters: {
    docs: {
      codePanel: true,
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Stories (JS)
DESCRIPTION: This code initializes Storybook stories for a Button component. It defines the component's metadata, including global viewport settings. It also creates a story named 'OnPhone' that overrides the global viewport to simulate a mobile device.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#_snippet_5

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  globals: {
    // 👇 Set viewport for all component stories
    viewport: { value: 'tablet', isRotated: false },
  },
};

export const OnPhone = {
  globals: {
    // 👇 Override viewport for this story
    viewport: { value: 'mobile1', isRotated: false },
  },
};
```

----------------------------------------

TITLE: Configuring Specific ESLint Rule Test for Storybook
DESCRIPTION: Example of configuring a test for a specific ESLint rule in Storybook, including how to run only a particular test case.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/CONTRIBUTING.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
ruleTester.run('my-rule-name', rule, {
  valid: [
    'export default { component: Button }',
  ],

  invalid: [
    {
      only: true, // <-- Add this property, which is equivalent to it.only in jest
      code: "export default { title: 'Button', component: Button }",
      errors: [ ... ],
    },
  ]
})
```

----------------------------------------

TITLE: Running Storybook Tests with Yarn
DESCRIPTION: Executes Storybook tests using yarn package manager with the --no-index-json flag to disable index.json file generation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-no-index-json.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn test-storybook --no-index-json
```

----------------------------------------

TITLE: Checkbox Story CSF Example
DESCRIPTION: This JavaScript/TypeScript file demonstrates a story written in Component Story Format (CSF). It defines the stories for a Checkbox component, showcasing different states and configurations. This file is referenced by the MDX example to embed the stories within the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
<CodeSnippets path="checkbox-story-csf.md" />
```

----------------------------------------

TITLE: Story Type Definition
DESCRIPTION: This TypeScript code defines the structure of a `Story` object, which represents a story in Storybook. It includes properties for the story's ID, import path, name, and title. This type is used in the `StorySortFn` type definition for custom story sorting.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
type Story = {
  id: string;
  importPath: string;
  name: string;
  title: string;
};
```

----------------------------------------

TITLE: Initializing Button Story - Web Components (JS)
DESCRIPTION: This code defines a basic Storybook story for a web components Button. It exports a default object with the component and a 'Basic' story that configures documentation parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  title: 'Button',
  component: 'demo-button',
};

export const Basic = {
  parameters: {
    docs: {
      canvas: { sourceState: 'shown' },
    },
  },
};
```

----------------------------------------

TITLE: Configuring @storybook/preset-create-react-app in presets.js
DESCRIPTION: Shows an alternative basic configuration method applicable to all Storybook versions by adding the preset name directly to the array exported from the `./.storybook/presets.js` file. This achieves the same goal as configuring it in `main.js`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/presets/create-react-app/README.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
module.exports = ['@storybook/preset-create-react-app'];
```

----------------------------------------

TITLE: Initializing Svelte Checkbox Story (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Checkbox component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and the Checkbox component. It defines the component's metadata and exports a default meta object and an 'Unchecked' story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Checkbox from './Checkbox.svelte';

const meta = {
  component: Checkbox,
} satisfies Meta<typeof Checkbox>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Unchecked: Story = {
  args: {
    label: 'Unchecked',
  },
};
```

----------------------------------------

TITLE: Rendering Stories from Multiple Sources
DESCRIPTION: Demonstrates how to render stories from multiple CSF files in the same MDX document using the meta prop.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-story.mdx#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
import { Meta, Story } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';
import * as HeaderStories from './Header.stories';

<Meta of={ButtonStories} />

{/* Although this MDX file is largely concerned with Button,
    it can render Header stories too */}
<Story of={HeaderStories.LoggedIn} meta={HeaderStories} />
```

----------------------------------------

TITLE: Importing addons from @storybook/addons
DESCRIPTION: This code snippet demonstrates the correct way to import the addons object from the @storybook/addons package using named exports, as the default export has been removed in Storybook 7. This ensures backwards compatibility with older versions of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_122

LANGUAGE: javascript
CODE:
```
import { addons } from "@storybook/addons";
```

----------------------------------------

TITLE: Upgrading terser-webpack-plugin in Storybook
DESCRIPTION: Bump terser-webpack-plugin from version 2.3.6 to 3.0.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_14

LANGUAGE: JavaScript
CODE:
```
Bump terser-webpack-plugin from 2.3.6 to 3.0.0
```

----------------------------------------

TITLE: Fetching GraphQL Data in Angular
DESCRIPTION: This component fetches data using Apollo Client in Angular. It defines a GraphQL query to retrieve user, document, and subdocument information and updates the component's state with the fetched data. The component also handles loading and error states.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { Component, OnInit } from '@angular/core';
import { Apollo } from 'apollo-angular';
import gql from 'graphql-tag';

@Component({
  selector: 'document-screen',
  template: `
    <div *ngIf="loading">Loading...</div>
    <div *ngIf="error">There was an error fetching the data!</div>
    <div *ngIf="!loading && subdocuments.length > 0">
      <page-layout [user]="user">
        <document-header [document]="document"></document-header>
        <document-list [documents]="subdocuments"></document-list>
      </page-layout>
    </div>
  `,
})
export class SampleGraphqlComponent implements OnInit {
  user: any = { id: 0, name: 'Some User' };

  document: any = { id: 0, title: 'Some Title' };

  subdocuments: any = [];

  error = '';
  loading = true;

  constructor(private apollo: Apollo) {}
  ngOnInit() {
    this.apollo
      .watchQuery({
        query: gql`
          query AllInfoQuery {
            user {
              userID
              name
            }
            document {
              id
              userID
              title
              brief
              status
            }
            subdocuments {
              id
              userID
              title
              content
              status
            }
          }
        `,
      })
      .valueChanges.subscribe((result: any) => {
        this.user = result?.data?.user;
        this.document = result?.data?.document;
        this.subdocuments = result?.data?.subdocuments;
        this.loading = result.loading;

        // Errors is an array and we're getting the first item only
        this.error = result.errors[0].message;
      });
  }
}
```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet provides a JavaScript configuration for setting up Storybook. It requires replacing 'your-framework' with the desired framework, such as 'react-webpack5' or 'vue3-vite'. The configuration includes paths to story files and an option to disable default Webpack settings.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-webpack-defaults.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    disableWebpackDefaults: true,
  },
};
```

----------------------------------------

TITLE: Initializing List Story with Web Components (JavaScript)
DESCRIPTION: This code defines a Storybook story for the List component in Web Components using JavaScript. It imports the html function from lit, defines the component and subcomponents, and creates stories for Empty and OneItem scenarios. The OneItem story renders the List component with a ListItem using lit's html template literal.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_7

LANGUAGE: js
CODE:
```
import { html } from 'lit';

export default {
  title: 'List',
  component: 'demo-list',
  subcomponents: { ListItem: 'demo-list-item' }, // 👈 Adds the ListItem component as a subcomponent
};

export const Empty = {};

export const OneItem = {
  render: () => html`
    <demo-list>
      <demo-list-item></demo-list-item>
    </demo-list>
  `,
};
```

----------------------------------------

TITLE: Initializing Button Story with Variants in Solid (TSX)
DESCRIPTION: This code defines Storybook stories for a Solid Button component using TypeScript, including variants and a combo example. It uses the Meta and StoryObj types from 'storybook-solidjs' to configure the component and its stories, setting tags to control their visibility and testing behavior.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;
export default meta;

type Story = StoryObj<typeof meta>;

export const Variant1: Story = {
  // 👇 This story will not appear in Storybook's sidebar or docs page
  tags: ['!dev', '!autodocs'],
  args: { variant: 1 },
};

export const Variant2: Story = {
  // 👇 This story will not appear in Storybook's sidebar or docs page
  tags: ['!dev', '!autodocs'],
  args: { variant: 2 },
};

export const Combo: Story = {
  // 👇 This story should not be tested, but will appear in the sidebar and docs page
  tags: ['!test'],
  render: () => (
    <>
      <Button variant={1} />
      <Button variant={2} />
    </>
  ),
};
```

----------------------------------------

TITLE: Defining Right Arrow SVG Component in React
DESCRIPTION: Creates a reusable React component for rendering a right-facing arrow SVG icon. The component includes inline styling and is used throughout the document for navigation links.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/ts/Configure.mdx#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
export const RightArrow = () => <svg 
    viewBox="0 0 14 14" 
    width="8px" 
    height="14px" 
    style={{ 
      marginLeft: '4px',
      display: 'inline-block',
      shapeRendering: 'inherit',
      verticalAlign: 'middle',
      fill: 'currentColor',
      'path fill': 'currentColor'
    }}
>
  <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
</svg>
```

----------------------------------------

TITLE: Initializing Storybook Story for React Component (TS)
DESCRIPTION: This code initializes a Storybook story for a React component named MyComponent using TypeScript. It imports necessary modules from '@storybook/react-vite' and defines a story that renders the component with an image, passing the image source and alt text as props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import imageFile from './static/image.png';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

const image = {
  src: imageFile,
  alt: 'my image',
};

export const WithAnImage: Story = {
  render: () => <img src={image.src} alt={image.alt} />,
};
```

----------------------------------------

TITLE: Configuring Web Components Button Story
DESCRIPTION: This code configures a Storybook story for a Web Components Button component. It imports the withActions decorator, then defines the component metadata and sets up action handling for 'mouseover' and 'click .btn' events. The component is referenced by its tag name 'demo-button'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#_snippet_7

LANGUAGE: js
CODE:
```
import { withActions } from 'storybook/actions/decorator';

export default {
  component: 'demo-button',
  parameters: {
    actions: {
      handles: ['mouseover', 'click .btn'],
    },
  },
  decorators: [withActions],
};
```

----------------------------------------

TITLE: Define Svelte Story with CSF
DESCRIPTION: Defines a Svelte Storybook story using Component Story Format (CSF). It imports `defineMeta` from `@storybook/addon-svelte-csf` to define the component, argument types, and a template for rendering the component with specified arguments. The `someFunction` is defined within the script module.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_7

LANGUAGE: svelte
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  const { Story } = defineMeta({
      component: YourComponent,
      //👇 Creates specific argTypes
      argTypes: {
        propertyA: {
          options: ['Item One', 'Item Two', 'Item Three'],
          control: { type: 'select' }, // Automatically inferred when 'options' is defined
        },
        propertyB: {
          options: ['Another Item One', 'Another Item Two', 'Another Item Three'],
        },
      },
  });

  const someFunction = (valuePropertyA, valuePropertyB) => {
    // Do some logic here
  };
</script>

<Story
  name="ExampleStory"
  args={{
    propertyA: 'Item One',
    propertyB: 'Another Item One',
  }}
>
  {#snippet template(args)}
    <YourComponent
      {...args}
      someProperty={someFunction(args.propertyA, args.propertyB)}
    />
  {/snippet}
</Story>
```

----------------------------------------

TITLE: Configuring Storybook with Composition in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, sets the framework, specifies story patterns, and defines composed Storybooks for React and Angular with environment-specific URLs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-refs-with-function.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],

  // 👇 Retrieve the current environment from the configType argument
  refs: (config, { configType }) => {
    if (configType === 'DEVELOPMENT') {
      return {
        react: {
          title: 'Composed React Storybook running in development mode',
          url: 'http://localhost:7007',
        },
        angular: {
          title: 'Composed Angular Storybook running in development mode',
          url: 'http://localhost:7008',
        },
      };
    }
    return {
      react: {
        title: 'Composed React Storybook running in production',
        url: 'https://your-production-react-storybook-url',
      },
      angular: {
        title: 'Composed Angular Storybook running in production',
        url: 'https://your-production-angular-storybook-url',
      },
    };
  },
};

export default config;
```

----------------------------------------

TITLE: Importing ComponentReference in JavaScript/JSX
DESCRIPTION: This snippet imports a ComponentReference component. The comment suggests there might be a naming conflict with another file of the same name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/ComponentReference.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
{/* This will overlap with ComponentReference.mdx (this file). There's not much we can do about this */}
import ComponentReference from './ComponentReference';
```

----------------------------------------

TITLE: Accessing Storybook Environment Variables in Node.js
DESCRIPTION: This snippet demonstrates how to access Storybook environment variables (STORYBOOK_THEME and STORYBOOK_DATA_KEY) in a Node.js environment using the process.env object. This approach is typical for Node.js and webpack-based applications.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-read-environment-variables.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
console.log(process.env.STORYBOOK_THEME);
console.log(process.env.STORYBOOK_DATA_KEY);
```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Button Component (Svelte CSF, TS)
DESCRIPTION: This code configures the Storybook metadata for a Svelte Button component using Svelte CSF and TypeScript. It imports the Button component and defines the meta object, specifying the component and customizing the background options to include 'dark' and 'gray'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_9

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    parameters: {
      backgrounds: {
        options: {
          // 👇 Override the default `dark` option
          dark: { name: 'Dark', value: '#000' },
          // 👇 Add a new option
          gray: { name: 'Gray', value: '#CCC' },
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Rendering List with Many Items in Svelte
DESCRIPTION: This story renders a List component with multiple ListItems in Svelte. It uses a snippet template to define the component's structure, passing arguments to the List component and including three ListItems.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_15

LANGUAGE: js
CODE:
```
<Story name="Many Items">
  {#snippet template(args)}
    <List {...args} >
      <ListItem />
      <ListItem />
      <ListItem />
    </List>
  {/snippet}
</Story>
```

----------------------------------------

TITLE: Initializing Button Story for Solid (JS)
DESCRIPTION: This code initializes a Storybook story for a Solid Button component using JavaScript. It defines the component's metadata, including title, component, and parameters for Storybook addons. The Basic story renders the Button component with the text 'Hello'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
  //👇 Creates specific parameters for the story
  parameters: {
    myAddon: {
      data: 'This data is passed to the addon',
    },
  },
};

export const Basic = {
  render: () => <Button>Hello</Button>,
};
```

----------------------------------------

TITLE: Remove Highlight Story with Decorator - Svelte (JS)
DESCRIPTION: This story demonstrates how to use a decorator in Svelte (JS) to emit HIGHLIGHT and REMOVE_HIGHLIGHT events using the useChannel hook. It highlights specific selectors and then removes the highlight.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-remove.md#_snippet_4

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, REMOVE_HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

export const RemoveHighlight = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        id: 'my-unique-id',
        selectors: ['header', 'section', 'footer'],
      });
      emit(REMOVE_HIGHLIGHT, 'my-unique-id');
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Initializing Button Story with Backgrounds in TypeScript
DESCRIPTION: This code initializes a Storybook story for a Button component, setting a global background color and overriding it for a specific story. It imports the Button component and defines the default export with component metadata and a story with overridden background.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the name of your framework (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  globals: {
    // 👇 Set background value for all component stories
    backgrounds: { value: 'gray', grid: false },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const OnDark: Story = {
  globals: {
    // 👇 Override background value for this story
    backgrounds: { value: 'dark' },
  },
};

```

----------------------------------------

TITLE: Configuring Storybook Addons in JavaScript
DESCRIPTION: This code snippet exports the default configuration for Storybook, specifically adding the addon-docs preset. It demonstrates how to include addons in a Storybook project's main configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-presets-managerentry.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  addons: [
    '@storybook/addon-docs/preset', // A preset registered here, in this case from the addon-docs addon.
  ],
};
```

----------------------------------------

TITLE: Registering Manager Addons with React 18
DESCRIPTION: This code snippet shows how to register manager addons in Storybook using React 18. It demonstrates the usage of addons.register and addons.add to create a panel addon. The render function now receives an active prop instead of a key prop.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_47

LANGUAGE: tsx
CODE:
```
import { addons, types } from "@storybook/manager-api";

addons.register("my-addon", () => {
  addons.add("my-addon/panel", {
    type: types.PANEL,
    title: "My Addon",
    // This will be called as a JSX element by react 18
    render: ({ active }) => (active ? <div>Hello World</div> : null),
  });
});
```

----------------------------------------

TITLE: Specifying a framework
DESCRIPTION: Specifies the framework to use for the Storybook instance (solid in this example). Frameworks define the UI library or framework that Storybook will be used with.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_123

LANGUAGE: Shell
CODE:
```
create storybook --type solid
```

----------------------------------------

TITLE: Using the new --https CLI parameter in Storybook
DESCRIPTION: This snippet shows the updated CLI parameter for enabling HTTPS in Storybook. The `--secure` flag is replaced by `--https` to align with other Storybook start commands.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_275

LANGUAGE: sh
CODE:
```
start-storybook --https
```

----------------------------------------

TITLE: Installing Storybook SvelteKit with pnpm
DESCRIPTION: Command to install @storybook/sveltekit package as a dev dependency using pnpm package manager
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/sveltekit-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev @storybook/sveltekit
```

----------------------------------------

TITLE: Importing number from addon-knobs in Storybook
DESCRIPTION: This snippet illustrates how to import the `number` function from the `@storybook/addon-knobs/react` package in older versions of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_276

LANGUAGE: js
CODE:
```
import { number } from "@storybook/addon-knobs/react";
```

----------------------------------------

TITLE: Installing Storybook ESLint Plugin with yarn
DESCRIPTION: Installs eslint-plugin-storybook as a development dependency using yarn package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/eslint-plugin-storybook-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev eslint-plugin-storybook
```

----------------------------------------

TITLE: Serving Storybook Build with pnpm and http-server
DESCRIPTION: This command uses pnpm dlx to run http-server and serve the Storybook build directory. It requires pnpm to be installed and the Storybook build to be completed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preview-storybook-production-mode.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx http-server ./path/to/build
```

----------------------------------------

TITLE: Configuring Page Story with Custom Footer in Svelte (JS)
DESCRIPTION: This code defines a Storybook story for the Page component in Svelte using JavaScript. It imports the necessary modules from '@storybook/addon-svelte-csf' and defines a meta object using defineMeta to configure the component. The Story component renders the Page with provided arguments and a footer snippet.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Page from './Page.svelte';

  const { Story } = defineMeta({
    component: Page
  });
</script>

<Story name="CustomFooter" args={{ footer: 'Built with Storybook' }}>
  {#snippet template(args)}
    <Page {...args} >
      <footer>{args.footer}</footer>
    </Page>
  {/snippet}
</Story>
```

----------------------------------------

TITLE: Installing Storybook for React Vite Using pnpm - Shell
DESCRIPTION: This shell command uses pnpm to add the @storybook/react-vite package as a development dependency for a React project. Dependencies include pnpm installed globally and a pnpm-initialized project. It modifies the project's package.json accordingly and should be executed in the terminal at the project root.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev @storybook/react-vite
```

----------------------------------------

TITLE: Defining Button Stories with Tags in Angular
DESCRIPTION: This code defines a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines metadata for the component, including applying a 'stable' tag to all stories in the file. It then creates a specific story, ExperimentalFeatureStory, which removes the inherited 'stable' tag and applies an 'experimental' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './Button.component';

const meta: Meta<Button> = {
  component: Button,
  // 👇 Applies to all stories in this file
  tags: ['stable'],
};

export default meta;
type Story = StoryObj<Button>;

export const ExperimentalFeatureStory: Story = {
  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag
  tags: ['!stable', 'experimental'],
};
```

----------------------------------------

TITLE: Visualizing Patch Release Workflow with Mermaid
DESCRIPTION: A git graph diagram showing the workflow of a patch release process, where two bug fixes with 'patch:yes' label are cherry-picked from 'next' branch to create version 7.0.19.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_1

LANGUAGE: mermaid
CODE:
```
gitGraph
    commit
    branch latest-release
    branch next
    checkout latest-release
    commit tag: "v7.0.18"
    checkout main
    merge latest-release
    checkout next
    commit
    branch some-patched-bugfix
    commit
    commit id: "patch1"
    checkout next
    merge some-patched-bugfix
    branch new-feature
    commit
    checkout next
    merge new-feature
    branch other-patched-bugfix
    commit id: "patch2"
    checkout next
    merge other-patched-bugfix
    checkout main
    branch version-patch-from-7.0.18
    cherry-pick id: "patch1"
    cherry-pick id: "patch2"
    commit id: "write changelog"
    checkout latest-release
    merge version-patch-from-7.0.18
    commit id: "bump versions" tag: "v7.0.19"
    checkout main
    merge latest-release
```

----------------------------------------

TITLE: Configuring Storybook Decorators with SolidJS
DESCRIPTION: This JavaScript snippet configures Storybook decorators for a SolidJS project. It imports a navigation story and a global context provider. It defines a decorator, AppDecorator, which wraps stories with the GlobalContainerContext.Provider, providing a context object to the stories. This ensures that the stories have access to necessary data and render correctly within the Storybook environment. It exports the decorators array.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-global.md#_snippet_2

LANGUAGE: js
CODE:
```
import { normal as NavigationNormal } from '../components/Navigation.stories';

import GlobalContainerContext from '../components/lib/GlobalContainerContext';

const context = {
  NavigationContainer: NavigationNormal,
};

const AppDecorator = (storyFn) => {
  return (
    <GlobalContainerContext.Provider value={context}>{storyFn()}</GlobalContainerContext.Provider>
  );
};
export const decorators = [AppDecorator];
```

----------------------------------------

TITLE: Configuring Accessibility Parameters for Angular Story
DESCRIPTION: This code configures accessibility parameters for an Angular Storybook story. It defines rules to exclude certain elements from accessibility checks and disables specific rules. It also sets global accessibility parameters for manual testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { MyComponent } from './MyComponent';

const meta: Meta<MyComponent> = {
  component: MyComponent,
  parameters: {
    a11y: {
      // Optional selector to inspect
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      manual: true,
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Svelte Document Screen Component (TypeScript)
DESCRIPTION: TypeScript version of the Svelte Document Screen component with type annotations for props and status. Implements data fetching and conditional rendering logic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
<script lang="ts">
  import { onMount } from 'svelte';

  import PageLayout from './PageLayout.svelte';
  import DocumentHeader from './DocumentHeader.svelte';
  import DocumentList from './DocumentList.svelte';

  export let user: Record<string, unknown> = {};
  export let document: Record<string, unknown> = {};
  export let subdocuments: Record<string, unknown>[] = [];
  export let status: 'error' | 'loading' | 'success' = 'loading';

  onMount(async () => {
    await fetch('https://your-restful-endpoint')
      .then((res) => {
        if (!res.ok) {
          throw new Error(res.statusText);
        }
        return res;
      })
      .then((res) => res.json())
      .then((data) => {
        user = data.user;
        status = 'success';
        document = data.document;
        subdocuments = data.subdocuments;
      })
      .catch(() => {
        status = 'error';
      });
  });
</script>

{#if status === "error"}
<p>There was an error fetching the data!</p>
{:else if status === "loading"}
<p>Loading...</p>
{:else}
<PageLayout {user}>
  <DocumentHeader {document} />
  <DocumentList documents="{subdocuments}" />
</PageLayout>
{/if}
```

----------------------------------------

TITLE: Initializing Button Stories (TS)
DESCRIPTION: This code initializes Storybook stories for a Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines the component's metadata, including global viewport settings. It also creates a story named 'OnPhone' that overrides the global viewport to simulate a mobile device.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  globals: {
    // 👇 Set viewport for all component stories
    viewport: { value: 'tablet', isRotated: false },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const OnPhone: Story = {
  globals: {
    // 👇 Override viewport for this story
    viewport: { value: 'mobile1', isRotated: false },
  },
};
```

----------------------------------------

TITLE: Reset Highlight Story Decorator - Web Components (TypeScript)
DESCRIPTION: This story decorator for Web Components uses `useChannel` to emit `RESET_HIGHLIGHT` and `HIGHLIGHT` events. It removes previously highlighted elements and then highlights elements specified by the provided CSS selectors. The decorator returns the result of the story function. This example is written in TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-reset.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const ResetHighlight: Story = {
  decorators: [
    (story) => {
      const emit = useChannel({});
      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements
      emit(HIGHLIGHT, {
        selectors: ['header', 'section', 'footer'],
      });
      return story();
    },
  ],
};
```

----------------------------------------

TITLE: Configuring Storybook Test Runner in TypeScript
DESCRIPTION: This snippet configures the Storybook test runner in TypeScript. It imports necessary types, sets up image snapshot testing, defines a custom snapshots directory, and implements a post-visit hook for capturing screenshots after ensuring the page is ready.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-image-snapshot-testing.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import { TestRunnerConfig, waitForPageReady } from '@storybook/test-runner';

import { toMatchImageSnapshot } from 'jest-image-snapshot';

const customSnapshotsDir = `${process.cwd()}/__snapshots__`;

const config: TestRunnerConfig = {
  setup() {
    expect.extend({ toMatchImageSnapshot });
  },
  async postVisit(page, context) {
    // Waits for the page to be ready before taking a screenshot to ensure consistent results
    await waitForPageReady(page);

    // To capture a screenshot for for different browsers, add page.context().browser().browserType().name() to get the browser name to prefix the file name
    const image = await page.screenshot();
    expect(image).toMatchImageSnapshot({
      customSnapshotsDir,
      customSnapshotIdentifier: context.id,
    });
  },
};
export default config;
```

----------------------------------------

TITLE: Styled Highlight Decorator in Web Components (JS) Story
DESCRIPTION: This JavaScript story for Web Components defines a decorator that uses `useChannel` to emit a `HIGHLIGHT` event. This event configures selectors for highlighting elements and defines menu items with associated actions. The decorator is applied to the 'StyledHighlight' story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-menu.md#_snippet_9

LANGUAGE: javascript
CODE:
```
export const StyledHighlight = {
  decorators: [
    (story) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        menu: [
          {
            id: 'button-name',
            title: 'Login',
            description: 'Navigate to the login page',
            clickEvent: 'my-menu-click-event',
          },
          {
            id: 'h2-home',
            title: 'Acme',
            description: 'Navigate to the home page',
          },
        ],
      });
      return story();
    },
  ],
};
```

----------------------------------------

TITLE: Building Storybook with yarn
DESCRIPTION: This command uses yarn to run the build-storybook script, which builds Storybook for the project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/build-storybook-production-mode.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
yarn build-storybook
```

----------------------------------------

TITLE: Defining Checkbox Component Description with MDX
DESCRIPTION: Documentation for a Checkbox UI component written in MDX format for Storybook. It explains that checkboxes are square boxes that can be activated or deactivated, and provides guidance on using checkboxes to select multiple options from a list.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-definition.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
# Checkbox

A checkbox is a square box that can be activated or deactivated when ticked.

Use checkboxes to select one or more options from a list of choices.
```

----------------------------------------

TITLE: Initializing Histogram Story for HTML with Typescript
DESCRIPTION: This code defines a Storybook story for the Histogram component in an HTML environment using TypeScript. It imports the necessary modules and defines the component's metadata. The 'Default' story uses a render function to create the histogram with specified arguments such as 'dataType', 'showHistogramLabels', 'histogramAccentColor', and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/html';

import { createHistogram, HistogramProps } from './Histogram';

const meta: Meta<HistogramProps> = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Histogram',
};

export default meta;
type Story = StoryObj<HistogramProps>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Default: Story = {
  render: (args) => createHistogram(args),
  args: {
    dataType: 'latency',
    showHistogramLabels: true,
    histogramAccentColor: '#1EA7FD',
    label: 'Latency distribution',
  },
};
```

----------------------------------------

TITLE: Adding Babel Core and Loader
DESCRIPTION: This command adds @babel/core and babel-loader as dev dependencies when upgrading CRA1 to Babel 7.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_281

LANGUAGE: bash
CODE:
```
yarn add @babel/core babel-loader --dev
```

----------------------------------------

TITLE: Initializing ButtonGroup stories for Svelte (JS)
DESCRIPTION: This code initializes Storybook stories for the ButtonGroup component in Svelte using JavaScript. It imports the ButtonGroup component and Button stories, then defines a 'Pair' story with primary and secondary buttons in a horizontal orientation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_6

LANGUAGE: js
CODE:
```
import ButtonGroup from '../ButtonGroup.svelte';

//👇 Imports the Button stories
import * as ButtonStories from './Button.stories';

export default {
  component: ButtonGroup,
};

export const Pair = {
  args: {
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  },
};
```

----------------------------------------

TITLE: Defining Button Story with Backgrounds in Web Components (TS)
DESCRIPTION: This code defines a Storybook story for a Web Components Button component using TypeScript and configures story-level parameters to set background options. It sets the component to 'demo-button' and defines a 'Primary' story with custom background colors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Primary = {
  // 👇 Story-level parameters
  parameters: {
    backgrounds: {
      options: {
        red: { name: 'Red', value: '#f00' },
        green: { name: 'Green', value: '#0f0' },
        blue: { name: 'Blue', value: '#00f' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Updating ESLint Rules and Documentation for Storybook
DESCRIPTION: Commands to update configuration files and documentation after making changes to ESLint rules in the Storybook project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/CONTRIBUTING.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
yarn update-rules
```

LANGUAGE: sh
CODE:
```
nx build eslint-plugin
```

----------------------------------------

TITLE: Vue Document Screen Component (JavaScript)
DESCRIPTION: Vue implementation using JavaScript with ref for reactive state management. Handles data fetching and different display states using v-if directives.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
<template>
  <div v-if="!loading && data && data.subdocuments.length">
    <PageLayout :user="data.user">
      <DocumentHeader :document="data.document" />
      <DocumentList :documents="data.subdocuments" />
    </PageLayout>
  </div>
  <p v-if="loading">Loading...</p>
  <p v-if="error">There was an error fetching the data!</p>
</template>
<script>
  import { ref } from 'vue';

  import PageLayout from './PageLayout';
  import DocumentHeader from './DocumentHeader';
  import DocumentList from './DocumentList';

  export default {
    name: 'DocumentScreen',
    setup() {
      const data = ref(null);
      const loading = ref(true);
      const error = ref(null);
      fetch('https://your-restful-endpoint')
        .then((res) => {
          if (!res.ok) {
            error.value = res.statusText;
          }
          return res;
        })
        .then((res) => res.json())
        .then((requestData) => {
          data.value = requestData;
          loading.value = false;
        })
        .catch(() => {
          error.value = 'error';
        });
      return {
        error,
        loading,
        data,
      };
    },
  };
</script>
```

----------------------------------------

TITLE: Custom DocsPage with Doc Blocks
DESCRIPTION: Example of creating a custom DocsPage layout using individual documentation blocks and components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { ArgsTable, Description, Primary, Stories, Subtitle, Title } from '@storybook/addon-docs';
import { DocgenButton } from '../../components/DocgenButton';

export default {
  title: 'Addons/Docs/stories docs blocks',
  component: DocgenButton,
  parameters: {
    docs: {
      page: () => (
        <>
          <Title />
          <Subtitle />
          <Description />
          <Primary />
          <ArgsTable />
          <Stories />
        </>
      ),
    },
  },
};
```

----------------------------------------

TITLE: Installing Storybook Addon Measure via npm
DESCRIPTION: Command to install the Storybook Addon Measure package using npm. This step is necessary if the addon is not already included in your Storybook setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/measure/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm i -D @storybook/addon-measure
```

----------------------------------------

TITLE: Initializing Storybook Story for Web Components (JS)
DESCRIPTION: This code initializes a Storybook story for a Web Component, 'my-component', using JavaScript and lit-html. It defines a story named 'WithAnImage' that renders an image with a specified source and alt text using a lit-html template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_11

LANGUAGE: js
CODE:
```
import { html } from 'lit';

export default {
  component: 'my-component',
};

// Assume image.png is located in the "public" directory.
export const WithAnImage = {
  render: () => html`<img src="/image.png" alt="image" />`,
};

```

----------------------------------------

TITLE: Enabling angularFilterNonInputControls feature in Storybook
DESCRIPTION: This code snippet demonstrates how to enable the `angularFilterNonInputControls` feature flag in Storybook. It shows how to set the feature flag in your `.storybook/main.<js|ts>` file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_22

LANGUAGE: typescript
CODE:
```
export default {
  features: {
    angularFilterNonInputControls: true
  },
  // ... other configurations
};
```

----------------------------------------

TITLE: Defining Angular Story with Mocked Dependency
DESCRIPTION: This snippet defines a Storybook story for an Angular component named 'Page'. It imports necessary modules from '@storybook/angular' and mocks the 'getUserFromSession' function to return a predefined user object before each story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { getUserFromSession } from '#api/session.mock';

import { Page } from './Page';

const meta: Meta<Page> = {
  component: Page,
};
export default meta;

type Story = StoryObj<Page>;

export const Default: Story = {
  async beforeEach() {
    // 👇 Set the return value for the getUserFromSession function
    getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });
  },
};
```

----------------------------------------

TITLE: Configure Storybook toolbar visibility
DESCRIPTION: This code snippet demonstrates how to configure the visibility of the Storybook toolbar using the `showToolbar` option in the `.storybook/manager.js` file. It utilizes the `addons.setConfig` method to set the `showToolbar` property to `false`, effectively hiding the toolbar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_148

LANGUAGE: javascript
CODE:
```
// .storybook/manager.js
import { addons } from "@storybook/addons";

addons.setConfig({
  showToolbar: false,
});
```

----------------------------------------

TITLE: Defining Non-A11y Story in Vue Storybook (TypeScript 4.9)
DESCRIPTION: This TypeScript 4.9 snippet configures a non-accessibility checked story for a Vue component using '@storybook/vue3'. Required dependencies include the Storybook Vue plugin and the component file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_9

LANGUAGE: ts-4-9
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const NonA11yStory: Story = {
  globals: {
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  },
};

```

----------------------------------------

TITLE: Reordering Docs Tab First - JavaScript
DESCRIPTION: This code snippet demonstrates how to reorder the preview tabs, specifically moving the `Docs` tab to the first position. This can be applied to a specific story or globally in `.storybook/preview.js`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_11

LANGUAGE: javascript
CODE:
```
export const Foo = () => <Component />;
Foo.parameters = {
  previewTabs: { 'storybook/docs/panel': { index: -1 } },
};
```

----------------------------------------

TITLE: Upgrading Storybook to Version 7 with yarn
DESCRIPTION: This command upgrades Storybook to version 7 using yarn. It uses yarn dlx to execute the upgrade command without installing Storybook globally.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade-to-prior-major.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@^7 upgrade
```

----------------------------------------

TITLE: Conditional Rendering for Next Steps After Storybook Installation
DESCRIPTION: This code snippet uses conditional rendering to provide different instructions for the next steps after installing Storybook, based on the framework being used. It differentiates between React and other frameworks.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_11

LANGUAGE: markdown
CODE:
```
<IfRenderer renderer="react">
  Now that you have successfully installed Storybook and understood how it works, let's continue where you left off in the [setup wizard](#run-the-setup-wizard) and delve deeper into writing stories.
</IfRenderer>

<IfRenderer renderer={['angular', 'vue', 'web-components', 'ember', 'html', 'svelte', 'preact', 'qwik', 'solid' ]}>
  Now that you installed Storybook successfully, let's take a look at a story that was written for us.
</IfRenderer>
```

----------------------------------------

TITLE: Solid Button Story Implementation (TypeScript)
DESCRIPTION: TypeScript version of SolidJS Button story with proper type definitions from storybook-solidjs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-starter.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { ComponentStory, ComponentMeta } from 'storybook-solidjs';

import { Button } from './Button';

export default {
  title: 'Button',
  component: Button,
} as ComponentMeta<typeof Button>;

export const Primary: ComponentStory<typeof Button> = (args) => <Button {...args} />;
Primary.args = { primary: true };
```

----------------------------------------

TITLE: Testing React Form Component with JavaScript
DESCRIPTION: Test suite for a React form component using Testing Library and Storybook's composeStories. Tests both invalid and valid form states by interacting with form elements and verifying validation feedback.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/multiple-stories-test.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { fireEvent, screen } from '@testing-library/react';

import { composeStories } from '@storybook/react';

import * as FormStories from './LoginForm.stories';

const { InvalidForm, ValidForm } = composeStories(FormStories);

test('Tests invalid form state', async () => {
  await InvalidForm.run();

  const buttonElement = screen.getByRole('button', {
    name: 'Submit',
  });

  fireEvent.click(buttonElement);

  const isFormValid = screen.getByLabelText('invalid-form');
  expect(isFormValid).toBeInTheDocument();
});

test('Tests filled form', async () => {
  await ValidForm.run();

  const buttonElement = screen.getByRole('button', {
    name: 'Submit',
  });

  fireEvent.click(buttonElement);

  const isFormValid = screen.getByLabelText('invalid-form');
  expect(isFormValid).not.toBeInTheDocument();
});
```

----------------------------------------

TITLE: Migrate storiesOf to CSF using codemod
DESCRIPTION: This command uses the storybook codemod to automatically migrate all storiesOf usages to CSF format. It should be run in the root folder of the project and uses a glob pattern to find all story files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-stories-of.md#_snippet_3

LANGUAGE: shell
CODE:
```
npx storybook@latest migrate storiesof-to-csf --glob="*/**/*.stories.@(tsx|jsx|ts|js)"
```

----------------------------------------

TITLE: Register Addon-backgrounds
DESCRIPTION: This code snippet shows the correct way to register the `addon-backgrounds` in `main.js`. The `/register` entry point is no longer valid and should be replaced with `@storybook/addon-backgrounds`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_203

LANGUAGE: javascript
CODE:
```
module.exports = {
  stories: ["../**/*.stories.js"],
  addons: ["@storybook/addon-backgrounds"],
};
```

----------------------------------------

TITLE: Configuring Babel with React JSX Transform in TypeScript
DESCRIPTION: This TypeScript version of the babelDefault function extends the provided Babel configuration to include the React JSX transform plugin. It uses the TransformOptions type from @babel/core for type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-babelDefault.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import { TransformOptions } from '@babel/core';

export function babelDefault(config: TransformOptions) {
  return {
    ...config,
    plugins: [
      ...config.plugins,
      [require.resolve('@babel/plugin-transform-react-jsx'), {}, 'preset'],
    ],
  };
}
```

----------------------------------------

TITLE: Creating List Component Stories with HTML
DESCRIPTION: This code defines Storybook stories for a List component using plain HTML. It imports functions to create list and list item elements, then defines stories for rendering empty, single-item, and multi-item lists by manipulating the DOM.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_1

LANGUAGE: js
CODE:
```
import { createList } from './List';
import { createListItem } from './ListItem';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Empty = {
  render: () => createList(args),
};

export const OneItem = {
  render: (args) => {
    const list = createList(args);
    list.appendChild(createListItem());
    return list;
  },
};

export const ManyItems = {
  render: (args) => {
    const list = createList(args);
    list.appendChild(createListItem());
    list.appendChild(createListItem());
    list.appendChild(createListItem());
    return list;
  },
};
```

----------------------------------------

TITLE: Configuring Svelte Button Story with CSF (TS)
DESCRIPTION: This code configures a Svelte Storybook story for a Button component using Component Story Format (CSF) with TypeScript. It imports the Button component and defines metadata including parameters for customizing the background grid's appearance, such as cell size, opacity, and offsets.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-grid.md#_snippet_3

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  // To apply a set of backgrounds to all stories of Button:
  const { Story } = defineMeta({
    component: Button,
    parameters: {
      backgrounds: {
        grid: {
          cellSize: 20,
          opacity: 0.5,
          cellAmount: 5,
          offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
          offsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Defining Button Stories with Tags in JavaScript (CSF)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using JavaScript and the Component Story Format (CSF). It exports a default object containing metadata for the component, including applying a 'stable' tag to all stories. It then defines a specific story, ExperimentalFeatureStory, which removes the inherited 'stable' tag and applies an 'experimental' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-remove-in-story.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  // 👇 Applies to all stories in this file
  tags: ['stable'],
};

export const ExperimentalFeatureStory = {
  //👇 For this particular story, remove the inherited `stable` tag and apply the `experimental` tag
  tags: ['!stable', 'experimental'],
};
```

----------------------------------------

TITLE: Implementing ProfilePage Stories in React
DESCRIPTION: React implementation of a Storybook story for ProfilePage component. Shows how to set up context providers, import other component stories, and compose them together with props and containers.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { ProfilePage } from './ProfilePage';
import { UserPosts } from './UserPosts';

//👇 Imports a specific story from a story file
import { Normal as UserFriendsNormal } from './UserFriends.stories';

export default {
  component: ProfilePage,
};

const ProfilePageProps = {
  name: 'Jimi Hendrix',
  userId: '1',
};

const context = {
  //👇 We can access the `userId` prop here if required:
  UserPostsContainer({ userId }) {
    return <UserPosts {...UserPostsProps} />;
  },
  // Most of the time we can simply pass in a story.
  // In this case we're passing in the `normal` story export
  // from the `UserFriends` component stories.
  UserFriendsContainer: UserFriendsNormal,
};

export const Normal = {
  render: () => (
    <ProfilePageContext.Provider value={context}>
      <ProfilePage {...ProfilePageProps} />
    </ProfilePageContext.Provider>
  ),
};
```

----------------------------------------

TITLE: Scroll Into View Story with Decorator (TS)
DESCRIPTION: This TypeScript snippet defines a Storybook story with a decorator that uses the `useChannel` hook to emit a `SCROLL_INTO_VIEW` event. This event instructs Storybook to scroll to the element with the ID 'footer'. It demonstrates how to use decorators to interact with the Storybook API and trigger actions within the Storybook environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-scroll-into-view.md#_snippet_9

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { useChannel } from 'storybook/preview-api';
import { SCROLL_INTO_VIEW } from 'storybook/highlight';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const ScrollIntoView: Story = {
  decorators: [
    (story) => {
      const emit = useChannel({});
      emit(SCROLL_INTO_VIEW, '#footer');
      return story();
    },
  ],
};
```

----------------------------------------

TITLE: Setting and Resetting Mocked Date in beforeEach (JS)
DESCRIPTION: This snippet demonstrates how to use MockDate to set a specific date before each story and reset it afterward within the beforeEach hook. This ensures that the Date object is mocked consistently for each story, providing predictable test results. It is written in JavaScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-meta-mock-date.md#_snippet_7

LANGUAGE: js
CODE:
```
import MockDate from 'mockdate';

import { getUserFromSession } from '../../api/session.mock';

export default {
  component: 'my-page',
  // 👇 Set the value of Date for every story in the file
  async beforeEach() {
    MockDate.set('2024-02-14');

    // 👇 Reset the Date after each story
    return () => {
      MockDate.reset();
    };
  },
};

export const Default = {
  async play({ canvasElement }) {
    // ... This will run with the mocked Date
  },
};
```

----------------------------------------

TITLE: Initializing Button Storybook story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports the Button component and defines its metadata, including documentation parameters to exclude the 'style' control.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-argtypes-parameter.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Initializing Viewports with Options in Storybook
DESCRIPTION: This code snippet demonstrates how to include the `INITIAL_VIEWPORTS` export in your Storybook configuration to use the detailed set of predefined devices. This allows you to simulate various screen sizes and device types when developing and testing your components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/viewport.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
{
  /* prettier-ignore-start */
}
{
  /* prettier-ignore-end */
}
```

----------------------------------------

TITLE: Storybook Init with Builder
DESCRIPTION: This example shows how to define the builder to use for your Storybook instance (webpack5).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_45

LANGUAGE: shell
CODE:
```
storybook init --builder webpack5
```

----------------------------------------

TITLE: Configuring Storybook with GitHub Flavored Markdown in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Storybook in TypeScript, including setting up the framework, specifying story locations, and adding the docs addon with remark-gfm plugin for GitHub Flavored Markdown support. It also includes type definitions for better type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-config-remark-options.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import remarkGfm from 'remark-gfm';

// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    // Other addons go here
    {
      name: '@storybook/addon-docs',
      options: {
        mdxPluginOptions: {
          mdxCompileOptions: {
            remarkPlugins: [remarkGfm],
          },
        },
      },
    },
  ],
};

export default config;
```

----------------------------------------

TITLE: Reset Highlight Story Decorator - Vue (JavaScript)
DESCRIPTION: This story decorator for Vue components uses `useChannel` to emit `RESET_HIGHLIGHT` and `HIGHLIGHT` events. It removes previously highlighted elements and then highlights elements specified by the provided CSS selectors. The decorator returns a template containing the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-reset.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.vue';

export default {
  component: MyComponent,
};

export const ResetHighlight = {
  decorators: [
    () => {
      const emit = useChannel({});
      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements
      emit(HIGHLIGHT, {
        selectors: ['header', 'section', 'footer'],
      });
      return {
        template: '<story />',
      };
    },
  ],
};
```

----------------------------------------

TITLE: Add Highlight Menu in Storybook
DESCRIPTION: Adds a debugging menu to highlighted elements in Storybook, allowing users to select the highlighted elements when they click them. The `menu` property in the `HIGHLIGHT` event payload contains additional information about the elements or trigger actions. Each item must include an `id` and a `title`, and can also include an optional `selectors` property to limit the menu item to specific highlighted elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import { useEffect } from '@storybook/client-api';

export const Menu = () => {
  useEffect(() => {
    const channel = window.__STORYBOOK_ADDONS_CHANNEL__;
    channel.emit('HIGHLIGHT', {
      selectors: ['#root > div'],
      menu: {
        items: [
          {
            id: 'inspect-div',
            title: 'Inspect div',
          },
        ],
      },
    });
    return () => channel.emit('REMOVE_HIGHLIGHT');
  }, []);

  return (
    <div style={{ padding: '3rem' }}>
      <p>Highlighting the outer div</p>
    </div>
  );
};

Menu.storyName = 'menu';

```

----------------------------------------

TITLE: Configuring Page Story with Custom Footer in Vue (TS)
DESCRIPTION: This code defines a Storybook story for the Page component in Vue using TypeScript. It imports necessary modules from '@storybook/vue3-vite' and 'vue-component-type-helpers' and defines a Meta object to configure the component and rendering function. The render function renders the Page component with the provided arguments and a footer slot containing the custom footer text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#_snippet_8

LANGUAGE: ts
CODE:
```
// https://www.npmjs.com/package/vue-component-type-helpers
import type { ComponentProps } from 'vue-component-type-helpers';

import type { Meta, StoryObj } from '@storybook/vue3-vite';

import Page from './Page.vue';

type PagePropsAndCustomArgs = ComponentProps<typeof Page> & { footer?: string };

const meta = {
  component: Page,
  render: (args) => ({
    components: { Page },
    setup() {
      return { args };
    },
    template: `
      <page v-bind="args">
        <template v-slot:footer>
          <footer v-if="args.footer" v-html="args.footer" />
        </template>
      </page>
    `,
  }),
} satisfies Meta<PagePropsAndCustomArgs>;
export default meta;

type Story = StoryObj<typeof meta>;

export const Primary = {
  args: {
    footer: 'Built with Storybook',
  },
} satisfies Story;
```

----------------------------------------

TITLE: Defining Svelte Story with CSF
DESCRIPTION: This Svelte component story defines a 'Large' story for the Button component using the Component Story Format (CSF). It imports the Button component and uses defineMeta from '@storybook/addon-svelte-csf' to define the component's metadata. The story disables backgrounds.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-disabled.md#_snippet_0

LANGUAGE: svelte
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Large"
  parameters={{
    backgrounds: { disable: true },
  }}
/>
```

----------------------------------------

TITLE: Importing IconItem Component in Storybook
DESCRIPTION: This snippet demonstrates how to import the IconItem component from Storybook's addon-docs blocks. It's a straightforward import statement used in MDX files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-icongallery.mdx#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { IconItem } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Configuring Storybook Preview Annotations in JavaScript
DESCRIPTION: Defines a previewAnnotations function that appends the local preview module to the entry array. This is used by Storybook to extend the preview configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export const previewAnnotations = (entry = [], options) => {
  return [...entry, require.resolve('./dist/preview')];
};
```

----------------------------------------

TITLE: Adding Accessibility Addon with Storybook in Shell (pnpm)
DESCRIPTION: This shell command uses pnpm to install the @storybook/addon-a11y package in a Storybook project. This is applicable for projects using pnpm as their package manager, and requires an existing Storybook configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-a11y-add.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm exec storybook add @storybook/addon-a11y
```

----------------------------------------

TITLE: Initializing Button Story - Vue - JS
DESCRIPTION: This snippet initializes a Storybook story for a Vue Button component using JavaScript. It imports the Button component and defines a default export with the component property set to the Button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#_snippet_7

LANGUAGE: js
CODE:
```
import Button from './Button.vue';

export default { component: Button };

export const Primary = { args: { primary: true } };
```

----------------------------------------

TITLE: Creating Basic Svelte Button Story
DESCRIPTION: This code creates a basic Storybook story for a Svelte Button component. It imports the Button component and exports a default object that defines the component and its parameters, including action handling.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  parameters: { actions: { argTypesRegex: '^on.*' } },
};
```

----------------------------------------

TITLE: Defining Non-A11y Story in React Storybook (TypeScript 4.9)
DESCRIPTION: This TypeScript snippet features a Storybook story setup for a React component, specifying 'MyComponent' and disabling all automatic a11y checks by setting 'manual' to true. It leverages '@storybook/react' for typing and story structure.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_2

LANGUAGE: ts-4-9
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const NonA11yStory: Story = {
  globals: {
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  },
};

```

----------------------------------------

TITLE: Automigrate with Disable Telemetry
DESCRIPTION: Disables Storybook's telemetry during the automigration process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_99

LANGUAGE: shell
CODE:
```
storybook automigrate --disable-telemetry
```

----------------------------------------

TITLE: Configure Babel plugins in Storybook for Preact
DESCRIPTION: This code snippet demonstrates how to configure Babel plugins specifically for Storybook in a Preact project. It adds the `@babel/plugin-transform-react-jsx` and `@babel/preset-typescript` plugins to the Babel configuration within the `.storybook/main.js` file. This allows you to use JSX and TypeScript in your Preact components within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_66

LANGUAGE: javascript
CODE:
```
const config = {
  ...
  babel: async (options) => {
    options.plugins.push(
      [
        "@babel/plugin-transform-react-jsx", {
          "importSource": "preact",
          "runtime": "automatic"
        }
      ],
      "@babel/preset-typescript"
    )
    return options;
  },
}

export default config
```

----------------------------------------

TITLE: Initializing Storybook Story for Web Components (TS)
DESCRIPTION: This code initializes a Storybook story for a web component using TypeScript. It imports the necessary modules from '@storybook/web-components-vite' and defines the component and its argument types.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-example',
  argTypes: {
    actualArgName: {
      name: 'Friendly name',
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Using Storybook Logger for Client-Side Logging in JavaScript
DESCRIPTION: Demonstrates how to import and use Storybook's client-side logger to output messages at different severity levels. The logger provides methods for info, warning, and error messages.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/client-logger/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { logger } from 'storybook/internal/client-logger';

logger.info('Info message');
logger.warn('Warning message');
logger.error('Error message');
```

----------------------------------------

TITLE: Default Navigation Value
DESCRIPTION: Specifies the default value for the `navigation` object, providing a fallback when the actual Next.js context is not available. It initializes the `segments` property as an empty array.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_34

LANGUAGE: javascript
CODE:
```
{
  segments: [];
}
```

----------------------------------------

TITLE: Initializing Button Stories with Svelte CSF
DESCRIPTION: This code initializes Storybook stories for a Svelte Button component using the Component Story Format (CSF). It imports the defineMeta function from '@storybook/addon-svelte-csf' and defines the component's metadata, including global viewport settings. It also creates a story named 'OnPhone' that overrides the global viewport to simulate a mobile device.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-define-globals.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    globals: {
      // 👇 Set viewport for all component stories
      viewport: { value: "tablet", isRotated: false },
    },
  });
</script>

<Story
  name="OnPhone"
  globals={{
    viewport: { value: "mobile1", isRotated: false },
  }}
/>
```

----------------------------------------

TITLE: Rendering Empty Demo List
DESCRIPTION: This story renders an empty demo-list component using Lit's html template literal. It demonstrates the component with no list items.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_33

LANGUAGE: TypeScript
CODE:
```
export const Empty: Story = {
  render: () => html`<demo-list></demo-list>`,
};
```

----------------------------------------

TITLE: Configuring Storybook Framework in JavaScript
DESCRIPTION: This JavaScript snippet exports a default configuration object for Storybook. It specifies the framework to use and the paths to the story files. Additionally, it includes a build setting that disables tree shaking. The placeholder "your-framework" should be replaced with the actual framework being used. Expected inputs include valid paths to story files, and the output is an updated Storybook configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-treeshaking.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  build: {
    test: {
      disableTreeShaking: false,
    },
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte component named MyComponent using the Component Story Format (CSF). It imports the necessary modules from '@storybook/addon-svelte-csf' and defines a story named 'WithAnImage' that renders the component with a specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

	const { Story } = defineMeta({
		component: MyComponent,
	});
</script>

<Story name="WithAnImage">
  <MyComponent
    src="https://storybook.js.org/images/placeholders/350x150.png"
    alt="My CDN placeholder"
  />
</Story>
```

----------------------------------------

TITLE: Configure Storybook Framework with Vue 3 and Vite in TypeScript
DESCRIPTION: This snippet configures Storybook to use the Vue 3 framework with Vite using TypeScript. It imports the StorybookConfig type and sets the framework property to '@storybook/vue3-vite'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue3-vite-add-framework.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/vue3-vite';

const config: StorybookConfig = {
  // ...
  framework: '@storybook/vue3-vite', // 👈 Add this
};

export default config;
```

----------------------------------------

TITLE: TypeScript Button Story Definition
DESCRIPTION: Defines a story for a custom button component using TypeScript and lit-html. It imports Meta and StoryObj types from @storybook/web-components-vite, the action function from storybook/actions, and the html function from lit. The render function returns an HTML template that renders the custom-button component with the provided label and click handler. The default arguments set the label to 'Hello' and the onClick handler to an action that logs 'clicked'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { action } from 'storybook/actions';

import { html } from 'lit';

const meta: Meta = {
  component: 'custom-button',
};

export default meta;
type Story = StoryObj;

export const Text: Story = {
  render: ({ label, onClick }) =>
    html`<custom-button label="${label}" @click=${onClick}></custom-button>`, 
  args: {
    label: 'Hello',
    onClick: action('clicked'),
  },
};
```

----------------------------------------

TITLE: Renaming XFramework to XRenderer in Storybook
DESCRIPTION: This code snippet demonstrates the renaming of `XFramework` types to `XRenderer` types in Storybook 7.0. It shows the deprecated and the new import statements for React, Vue, and Svelte.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_143

LANGUAGE: typescript
CODE:
```
import type { ReactFramework } from "@storybook/react";
import type { VueFramework } from "@storybook/vue";
import type { SvelteFramework } from "@storybook/svelte";

// etc.
```

LANGUAGE: typescript
CODE:
```
import type { ReactRenderer } from "@storybook/react";
import type { VueRenderer } from "@storybook/vue";
import type { SvelteRenderer } from "@storybook/svelte";

// etc.
```

----------------------------------------

TITLE: Registering Storybook Addons
DESCRIPTION: Registers the `@storybook/addon-actions` and `@storybook/addon-links` addons in Storybook. This is done in the `addons.js` file to make the addons available in the Storybook environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_293

LANGUAGE: javascript
CODE:
```
import "@storybook/addon-actions/register";
import "@storybook/addon-links/register";
```

----------------------------------------

TITLE: Storybook Sandbox with Crash Reports Enabled
DESCRIPTION: Enables sending crash reports to Storybook's telemetry, helping the Storybook team identify and fix issues.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_116

LANGUAGE: Shell
CODE:
```
storybook sandbox --enable-crash-reports
```

----------------------------------------

TITLE: Initializing Svelte Component with GraphQL
DESCRIPTION: This Svelte component initializes the necessary imports for using GraphQL with urql. It imports `queryStore`, `gql`, and `getContextClient` from `@urql/svelte`, as well as the PageLayout, DocumentHeader, and DocumentList components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-with-graphql.md#_snippet_7

LANGUAGE: js
CODE:
```
<script>
  import { queryStore, gql, getContextClient } from '@urql/svelte';

  import PageLayout from './PageLayout.svelte';
  import DocumentHeader from './DocumentHeader.svelte';
  import DocumentList from './DocumentList.svelte';
```

----------------------------------------

TITLE: Upgrading node-fetch in Storybook
DESCRIPTION: Upgrades the node-fetch dependency to the latest version in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
Upgrade node-fetch to latest version
```

----------------------------------------

TITLE: Example custom-elements.json Structure
DESCRIPTION: Example of a custom-elements.json file that defines a web component with properties, methods, and events. This format follows schema version 1.0.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/web-components/README.md#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/my-element.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MyElement",
          "members": [
            {
              "kind": "field",
              "name": "disabled"
            },
            {
              "kind": "method",
              "name": "fire"
            }
          ],
          "events": [
            {
              "name": "disabled-changed",
              "type": {
                "text": "Event"
              }
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "my-element"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "my-element",
          "declaration": {
            "name": "MyElement",
            "module": "src/my-element.js"
          }
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Checking for Untracked Files in Git Repository
DESCRIPTION: This Git command performs a dry run to show which untracked or ignored files and directories would be removed from the working directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
git clean -dx --dry-run
```

----------------------------------------

TITLE: Sample package.json Template for Storybook Framework
DESCRIPTION: A template for creating a package.json file for a Storybook framework. It includes essential configurations like exports, dependencies, peer dependencies, and publishing settings required for a framework package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/framework.mdx#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "<your-framework-name>",
  "version": "1.0.0",
  "description": "Storybook for <meta-framework-name> or <renderer> & <builder>",
  "keywords": [
    "Storybook",
    "<meta-framework-name>",
    "<renderer>",
    "<builder>",
    "<anything>",
    "<else>",
    "<relevant>"
  ],
  "homepage": "<your package's homepage>",
  "bugs": {
    "url": "https://github.com/<your-org>/<your-repo>/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/<your-org>/<your-repo>.git",
    "directory": "<path/to/your/framework>"
  },
  "license": "MIT",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "require": "./dist/index.js",
      "import": "./dist/index.mjs"
    },
    "./preset": {
      "types": "./dist/preset.d.ts",
      "require": "./dist/preset.js",
      "import": "./dist/preset.mjs"
    },
    "./preview.js": {
      "types": "./dist/preview.d.ts",
      "require": "./dist/preview.js",
      "import": "./dist/preview.mjs"
    },
    "./package.json": "./package.json"
  },
  "main": "dist/index.js",
  "module": "dist/index.mjs",
  "types": "dist/index.d.ts",
  "files": ["dist/**/*", "types/**/*", "README.md", "*.js", "*.d.ts"],
  "scripts": {
    "check": "tsc --noEmit",
    "test": "..."
  },
  "dependencies": {
    "storybook": "^9.0.0",
    "@storybook/<builder>": "^9.0.0",
    "@storybook/<renderer>": "^9.0.0"
  },
  "devDependencies": {
    "typescript": "x.x.x",
    "<meta-framework>": "^x.x.x",
    "<builder>": "^x.x.x"
  },
  "peerDependencies": {
    "<meta-framework>": "^x.x.x || ^x.x.x",
    "<renderer>": "^x.x.x || ^x.x.x",
    "<builder>": "^x.x.x"
  },
  "engines": {
    "node": ">=20.0.0"
  },
  "publishConfig": {
    "access": "public"
  }
}
```

----------------------------------------

TITLE: Opting into Autodocs per-CSF file - TypeScript
DESCRIPTION: This code snippet demonstrates how to opt into Autodocs on a per-CSF (Component Story Format) file basis using the `autodocs` tag. This is the new default behavior in Storybook 7.0, requiring explicit opt-in for Autodocs. The `tags` property is used to enable Autodocs for a specific component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_125

LANGUAGE: typescript
CODE:
```
export default {
  component: MyComponent
  // Tags are a new feature coming in 7.1, that we are using to drive this behaviour.
  tags: ['autodocs']
}
```

----------------------------------------

TITLE: Initializing Storybook Story with Play Function in Svelte (JS)
DESCRIPTION: This code defines a Storybook story for a Svelte component using JavaScript. It imports necessary modules, defines the component, and uses the play function to simulate user interactions. The play function retrieves the component's root element using canvasElement and simulates typing into an element and clicking a button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#_snippet_2

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

export const ExampleStory = {
  play: async ({ canvasElement }) => {
    // Assigns canvas to the component root element
    const canvas = within(canvasElement);

    // Starts querying from the component's root element
    await userEvent.type(canvas.getByTestId('example-element'), 'something');
    await userEvent.click(canvas.getByRole('button'));
  },
};
```

----------------------------------------

TITLE: Rendering List with One Item in Solid
DESCRIPTION: This story renders a List component with a single ListItem in Solid. It uses a render function to define the component's structure, passing arguments to the List component and including one ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_6

LANGUAGE: tsx
CODE:
```
export const OneItem = {
  render: (args) => (
    <List {...args}>
      <ListItem />
    </List>
  ),
};
```

----------------------------------------

TITLE: Converting storiesOf to CSF 1 using yarn
DESCRIPTION: This command uses yarn to run the Storybook migration tool, converting stories from storiesOf API to CSF 1 format. It targets TypeScript (.tsx) story files using the specified glob pattern.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-migrate-stories-of-to-csf.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
# Convert storiesOf to CSF 1
yarn dlx storybook@latest migrate storiesof-to-csf --glob="**/*.stories.tsx" --parser=tsx
```

----------------------------------------

TITLE: Initializing Storybook Meta and Combined Stories with Play Function (TS with Framework)
DESCRIPTION: This code defines the CombinedStories with a play function that executes FirstStory and SecondStory before typing into 'another-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_8

LANGUAGE: ts
CODE:
```
export const CombinedStories: Story = {
  play: async ({ context, canvasElement }) => {
    const canvas = within(canvasElement);

    // Runs the FirstStory and Second story play function before running this story's play function
    await FirstStory.play(context);
    await SecondStory.play(context);
    await userEvent.type(canvas.getByTestId('another-element'), 'random value');
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Story for Web Components (JS)
DESCRIPTION: This code configures a Storybook story for a web component named 'demo-example'. It specifies the component and defines the 'value' argument type, including its default value and type summary, which are displayed in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#_snippet_6

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-example',
  argTypes: {
    value: {
      table: {
        defaultValue: { summary: 0 },
        type: { summary: 'number' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring A11y Parameters in Vue3 CSF with Standard TypeScript
DESCRIPTION: Example of configuring accessibility parameters for a Vue3 component using standard TypeScript syntax with explicit type annotations. Shows how to configure accessibility testing rules with proper typing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3';

import MyComponent from './MyComponent.vue';

const meta: Meta<typeof MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<typeof MyComponent>;

export const ExampleStory = {
  parameters: {
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Installing Svelte CSF Addon
DESCRIPTION: This command installs the `@storybook/addon-svelte-csf` addon, which allows writing stories for Svelte components using the template syntax. It enhances the Storybook experience for Svelte developers.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#_snippet_4

LANGUAGE: Shell
CODE:
```
npm install -D @storybook/addon-svelte-csf
```

----------------------------------------

TITLE: Defining Button Component Story (JavaScript)
DESCRIPTION: This code defines a basic Storybook story for a Button component using JavaScript. It imports the Button component and exports a default object containing the component and documentation parameters, excluding the 'style' control.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-controls-parameter.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
};
```

----------------------------------------

TITLE: Setting View Mode for a Story - JavaScript
DESCRIPTION: This code snippet demonstrates how to set the view mode for an individual story using the `viewMode` parameter. When a user navigates to this story, the view mode will be reset to 'story'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_9

LANGUAGE: javascript
CODE:
```
export const Foo = () => <Component />;
Foo.parameters = {
  // reset the view mode to "story" whenever the user navigates to this story
  viewMode: 'story',
};
```

----------------------------------------

TITLE: Incorrect CSF Default Export in JavaScript
DESCRIPTION: An example of a CSF default export that incorrectly omits the component property. This violates the csf-component rule.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/csf-component.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Button',
};
```

----------------------------------------

TITLE: Bootstrapping All Storybook Packages
DESCRIPTION: Bootstraps all Storybook packages, which can be a slow process.  It is followed by running tests to verify that everything worked correctly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.old.md#_snippet_11

LANGUAGE: bash
CODE:
```
yarn bootstrap --all
```

LANGUAGE: bash
CODE:
```
yarn test
```

----------------------------------------

TITLE: Defining a Simple React Button Component in JavaScript
DESCRIPTION: A minimal example of a React functional component that renders a button element. This demonstrates the basic syntax for creating React components using arrow functions and JSX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/src/blocks/components/DocsPageExampleCaption.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const Button = () => <button />;
```

----------------------------------------

TITLE: Importing Storybook Components and Button Stories in JavaScript
DESCRIPTION: Imports the Meta component from Storybook's addon-docs, the Button component stories, and a custom Template component. These imports are used to set up the documentation structure for the Button component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/button.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './button.stories.tsx';
import Template from './Template.mdx';
```

----------------------------------------

TITLE: Defining URL Collections as Sidebar Links in Storybook
DESCRIPTION: Creating a URL collection file with named exports that will be transformed into sidebar links. Each export name becomes a story title, and the value serves as the unique identifier.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
export default {};

export const DesignTokens = 'https://www.designtokens.org/';
export const CobaltUI = 'https://cobalt-ui.pages.dev/';
export const MiseEnMode = 'https://mode.place/';
export const IndexerAPI = 'https://github.com/storybookjs/storybook/discussions/23176';
```

----------------------------------------

TITLE: Setting Up Storybook Documentation Structure
DESCRIPTION: Configures the Storybook documentation layout using MDX components to render the documentation template with the EmojiButton stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/emoji-button.mdx#2025-04-22_snippet_1

LANGUAGE: mdx
CODE:
```
<Meta of={EmojiButtonStories} />

<Template />
```

----------------------------------------

TITLE: Simplifying Storybook's Webpack Configuration
DESCRIPTION: Example of how to simplify Storybook's webpack configuration by carefully preserving critical plugins while appending custom ones.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/webpack.mdx#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  webpackFinal: async (config, { configType }) => {
    // `configType` has a value of 'DEVELOPMENT' or 'PRODUCTION'
    // You can change the configuration based on that.
    // 'PRODUCTION' is used when building the static version of storybook.

    // Find the plugin
    const htmlWebpackPluginIndex = config.plugins.findIndex(
      (plugin) => plugin.constructor.name === 'HtmlWebpackPlugin'
    );

    // Get a reference to the plugin
    const htmlWebpackPlugin = config.plugins[htmlWebpackPluginIndex];

    // Replace the plugins
    config.plugins = [
      // Add the plugins you want to keep
      htmlWebpackPlugin,
      // Add any new plugins
      new MyPlugin(),
    ];

    return config;
  },
};
```

----------------------------------------

TITLE: Configuring Page Story with Custom Footer in React (TS)
DESCRIPTION: This code defines a Storybook story for the Page component in React using TypeScript. It imports necessary modules from '@storybook/react-vite' and defines a Meta object to configure the component and rendering function. The render function renders the Page component with the provided arguments and a footer element containing the custom footer text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story-slots.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Page } from './Page';

type PagePropsAndCustomArgs = React.ComponentProps<typeof Page> & { footer?: string };

const meta = {
  component: Page,
  render: ({ footer, ...args }) => (
    <Page {...args}>
      <footer>{footer}</footer>
    </Page>
  ),
} satisfies Meta<PagePropsAndCustomArgs>;
export default meta;

type Story = StoryObj<typeof meta>;

export const CustomFooter = {
  args: {
    footer: 'Built with Storybook',
  },
} satisfies Story;
```

----------------------------------------

TITLE: Vue Button Story Definition
DESCRIPTION: Defines a story for a Vue button component, specifying the template and default arguments. The template uses the Button component, binds the click event to the onClick method, and passes the label as a prop. The default arguments set the initial label to 'Hello'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_9

LANGUAGE: Vue
CODE:
```
template: '<Button @click="onClick" :label="label" />',
  }),
  args: {
    label: 'Hello',
  },
```

----------------------------------------

TITLE: Rendering Light Theme Backgrounds in Storybook using JSX
DESCRIPTION: This snippet renders the background color palette for the light theme. It filters out the 'color' key and creates ColorItem components for each valid background color value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/colorpalette.mdx#2025-04-22_snippet_4

LANGUAGE: JSX
CODE:
```
<ColorPalette>
  {Object.entries(convert(themes.light).background).map(([k,v]) => {
    if(k === 'color'){
      return null
    }
    if (typeof v === 'string' && (v.match(/^#/) || v.match(/^rgb/) || k.match(/color/i))) {
      return (
        <ColorItem
          key={k}
          title={k}
          colors={{ [k]: v }}
        />
      );
    } else if (typeof v === 'object') {
      const colors = Object.entries(v).reduce((acc, [key, value]) => (typeof value === 'string' && (value.match(/^#/) || value.match(/^rgb/) || key.match(/color/i))) ? {...acc, [key]: value} : acc, {});
      return (
        <ColorItem
          key={k}
          title={k}
          colors={colors}
        />
      );
    }
    return null;
  })}
</ColorPalette>
```

----------------------------------------

TITLE: Initializing ButtonGroup stories for Angular
DESCRIPTION: This code initializes Storybook stories for the ButtonGroup component in Angular. It imports necessary modules from '@storybook/angular' and '@angular/common', declares the Button component, and defines a 'Pair' story with primary and secondary buttons in a horizontal orientation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { moduleMetadata } from '@storybook/angular';

import { CommonModule } from '@angular/common';

import { ButtonGroup } from './ButtonGroup.component';
import { Button } from './button.component';

//👇 Imports the Button stories
import * as ButtonStories from './Button.stories';

const meta: Meta<ButtonGroup> = {
  component: ButtonGroup,
  decorators: [
    moduleMetadata({
      declarations: [Button],
      imports: [CommonModule],
    }),
  ],
};

export default meta;
type Story = StoryObj<ButtonGroup>;

export const Pair: Story = {
  args: {
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  },
};
```

----------------------------------------

TITLE: Storybook Story with Locale in Solid (JS)
DESCRIPTION: This code defines a Storybook story for a Solid component, MyComponent. It imports the component, defines a default export with the component, and creates a story named StoryWithLocale that renders the component with a locale-specific caption. The caption is determined by the getCaptionForLocale function based on the provided locale.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-use-globaltype.md#_snippet_3

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

const getCaptionForLocale = (locale) => {
  switch (locale) {
    case 'es':
      return 'Hola!';
    case 'fr':
      return 'Bonjour!';
    case 'kr':
      return '안녕하세요!';
    case 'zh':
      return '你好!';
    default:
      return 'Hello!';
  }
};

export const StoryWithLocale = {
  render: (args, { globals: { locale } }) => {
    const caption = getCaptionForLocale(locale);
    return <p>{caption}</p>;
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story with Play Function (Common JS)
DESCRIPTION: This code defines a Storybook story using JavaScript for a generic component. It imports necessary modules, defines the component, and uses the play function to simulate user interactions. The play function retrieves the component's root element using canvasElement and simulates typing into an element and clicking a button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#_snippet_3

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const ExampleStory = {
  play: async ({ canvasElement }) => {
    // Assigns canvas to the component root element
    const canvas = within(canvasElement);

    // Starts querying from the component's root element
    await userEvent.type(canvas.getByTestId('example-element'), 'something');
    await userEvent.click(canvas.getByRole('button'));
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with Vite (TypeScript)
DESCRIPTION: This configures Storybook with Vite using TypeScript, defining the framework and stories, and setting up module aliases using viteFinal. It mocks external and internal modules by resolving aliases to mock files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/module-aliases-config.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  viteFinal: async (config) => {
    if (config.resolve) {
      config.resolve.alias = {
        ...config.resolve?.alias,
        // 👇 External module
        lodash: require.resolve('./lodash.mock'),
        // 👇 Internal modules
        '@/api': path.resolve(__dirname, './api.mock.ts'),
        '@/app/actions': path.resolve(__dirname, './app/actions.mock.ts'),
        '@/lib/session': path.resolve(__dirname, './lib/session.mock.ts'),
        '@/lib/db': path.resolve(__dirname, './lib/db.mock.ts'),
      };
    }

    return config;
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Storybook Tests in YAML
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow that runs Storybook tests after a successful deployment. It sets up Node.js, installs dependencies, and uses Playwright to execute the tests. The workflow is triggered by deployment status changes and targets the deployed URL.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-with-deploy-event-workflow.md#2025-04-22_snippet_0

LANGUAGE: yaml
CODE:
```
name: Storybook Tests

on: deployment_status

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Install dependencies
        run: yarn
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Run Storybook tests
        run: yarn test-storybook
        env:
          TARGET_URL: '${{ github.event.deployment_status.target_url }}'
```

----------------------------------------

TITLE: Mapping Primitives to Complex Values
DESCRIPTION: Demonstrates how to map primitive values to complex values before rendering using the `mapping` property in Storybook. This provides an easier way to handle complex values compared to using a custom `render` function, and allows for custom labels to be configured for checkbox, radio, or select inputs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/controls.mdx#_snippet_12

LANGUAGE: javascript
CODE:
```
export const MyComponent = (args) => {
  const mappedValue = args.value;
  return <div>{mappedValue}</div>;
};

MyComponent.argTypes = {
  value: {
    control: {
      type: 'select',
      options: ['option1', 'option2'],
      labels: {
        option1: 'Option One Label',
        option2: 'Option Two Label',
      },
    },
    mapping: {
      option1: <div>Option One Content</div>,
      option2: <div>Option Two Content</div>,
    },
  },
};

```

----------------------------------------

TITLE: Updating Vitest Setup for CSF Factories
DESCRIPTION: This code snippet demonstrates the changes required in a Vitest setup file to accommodate the new CSF Factories format. It involves removing the previous method of setting project annotations and instead using the composed beforeAll hook from the preview configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_10

LANGUAGE: diff
CODE:
```
import { beforeAll } from 'vitest';
// 👇 No longer necessary
- import { setProjectAnnotations } from '@storybook/react-vite';
- import * as addonAnnotations from 'my-addon/preview';
+ import preview from './.storybook/preview';
- import * as previewAnnotations from './.storybook/preview';

// No longer necessary
- const annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);
 
// Run Storybook's beforeAll hook
+ beforeAll(preview.composed.beforeAll);
- beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Configuring Svelte Button Story with CSF
DESCRIPTION: This code configures a Svelte Storybook story for a Button component using Component Story Format (CSF). It imports the Button component and defines metadata including parameters for customizing the background grid's appearance, such as cell size, opacity, and offsets.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-grid.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  // To apply a set of backgrounds to all stories of Button:
  const { Story } = defineMeta({
    component: Button,
    parameters: {
      backgrounds: {
        grid: {
          cellSize: 20,
          opacity: 0.5,
          cellAmount: 5,
          offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
          offsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Triggering Canary Release Workflow Using GitHub CLI
DESCRIPTION: Command to trigger a canary release workflow for a specific pull request. The release will create a version with format 0.0.0-pr-<PR_NUMBER>-sha-<COMMIT_SHA>.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_12

LANGUAGE: bash
CODE:
```
gh workflow run --repo storybookjs/storybook canary-release-pr.yml --field pr=<PR_NUMBER>
```

----------------------------------------

TITLE: Automatically upgrade Storybook to the latest version
DESCRIPTION: Skips interactive prompts and automatically upgrades Storybook to the latest version.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_73

LANGUAGE: Shell
CODE:
```
storybook upgrade --yes
```

----------------------------------------

TITLE: Define Story with Play Function (Common Framework)
DESCRIPTION: This code defines a Storybook story for a RegistrationForm component. It uses the `play` function to simulate user interaction with the form, filling in the email and password fields and then submitting the form. The `within` function is used to query the component's canvas for specific elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/register-component-with-play-function.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { userEvent, within } from 'storybook/test';

import { RegistrationForm } from './RegistrationForm';

const meta: Meta<typeof RegistrationForm> = {
  component: RegistrationForm,
};

export default meta;
type Story = StoryObj<typeof RegistrationForm>;

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FilledForm: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const emailInput = canvas.getByLabelText('email', {
      selector: 'input',
    });

    await userEvent.type(emailInput, 'example-email@email.com', {
      delay: 100,
    });

    const passwordInput = canvas.getByLabelText('password', {
      selector: 'input',
    });

    await userEvent.type(passwordInput, 'ExamplePassword', {
      delay: 100,
    });
    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const submitButton = canvas.getByRole('button');

    await userEvent.click(submitButton);
  },
};
```

----------------------------------------

TITLE: SEO No-Index Configuration
DESCRIPTION: HTML meta tag configuration to prevent search engines from indexing Storybook
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/publish-storybook.mdx#2025-04-22_snippet_4

LANGUAGE: html
CODE:
```
<meta name="robots" content="noindex" />
```

----------------------------------------

TITLE: CSF2 function stories
DESCRIPTION: This TypeScript code snippet shows how to import the `Story` type from `@storybook/<framework>` for CSF2 function stories. This approach will break in Storybook 7.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_164

LANGUAGE: TypeScript
CODE:
```
import type { Story } from "@storybook/<framework>";
```

----------------------------------------

TITLE: Initializing Button Story - Svelte (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript. It imports the Meta type from Storybook and the Button component, then defines the component in the meta object for Storybook to use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export-with-component.md#_snippet_10

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Importing React for Storybook
DESCRIPTION: Imports the React library, which is required for creating React components in Storybook stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.ugly-comments-stories.txt#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
```

----------------------------------------

TITLE: Transforming source code in Storybook (After)
DESCRIPTION: This code snippet demonstrates how to use the `transform` parameter in Storybook to modify source code. It provides a basic example where the source code is returned without modification, allowing for custom transformation logic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_19

LANGUAGE: javascript
CODE:
```
export const MyStory = {
  parameters: {
    docs: {
      source: {
        transform: async (source) => {
          // Your custom transformation logic here
          return source;
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Defining a Button Component Story with CSF 2 in Storybook
DESCRIPTION: This code snippet demonstrates how to define a Button component story using Component Story Format 2 in Storybook. It exports a default object that specifies the component title (which determines its location in the Storybook sidebar) and references the Button component itself. This is the foundation for adding specific stories for the Button component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-title.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  title: 'components/Button',
  component: Button,
};
```

----------------------------------------

TITLE: Setting up Storybook in a Project
DESCRIPTION: Installs Storybook and links the local `@storybook/react` package.  This replaces the version in `node_modules` with a symlink to the local development version.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.old.md#_snippet_15

LANGUAGE: bash
CODE:
```
getstorybook
yarn storybook
```

----------------------------------------

TITLE: Initializing Storybook Meta and First Story with Play Function (Common JS)
DESCRIPTION: This code initializes the Storybook meta object for the MyComponent and defines the FirstStory with a play function that simulates user typing into an element with the test ID 'an-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_3

LANGUAGE: js
CODE:
```
import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

/*
 * See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const FirstStory = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await userEvent.type(canvas.getByTestId('an-element'), 'example-value');
  },
};
```

----------------------------------------

TITLE: Defining Storybook Story with CSF (JavaScript)
DESCRIPTION: This JavaScript code defines a Storybook story for a Button component using the Component Story Format (CSF). It exports a default object containing the component and a 'Large' story that disables backgrounds.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-disabled.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Large = {
  parameters: {
    backgrounds: { disable: true },
  },
};
```

----------------------------------------

TITLE: Installing Compodoc for Angular Documentation
DESCRIPTION: Command to install Compodoc as a development dependency, which is required for generating component API documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
yarn add -D @compodoc/compodoc
```

----------------------------------------

TITLE: Installing Typescript Addon Definitions
DESCRIPTION: This command installs the necessary TypeScript definitions for Storybook addons. This is required when upgrading to Storybook 3.2.x.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_289

LANGUAGE: shell
CODE:
```
yarn add @types/storybook__addon-notes @types/storybook__addon-options @types/storybook__addon-knobs @types/storybook__addon-links --dev
```

----------------------------------------

TITLE: Documenting UI Components in MDX for Storybook (Common Renderer)
DESCRIPTION: An MDX file that documents Page, List, and ListItem components using Storybook's addon-docs. It imports stories from respective files and displays them with Meta, Canvas, and Story components. The document provides component descriptions and usage examples.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-file.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Canvas, Meta, Story } from '@storybook/addon-docs/blocks';

import * as ListStories from './List.stories';

import * as ListItemStories from './ListItem.stories';

import * as PageStories from './Page.stories';

<Meta of={PageStories} />

# Page

Page is a layout container that is used to position children in predetermined areas.

It's often used to apply consistent positioning for content across pages in an application

## Usage

<Canvas of={PageStories.Basic} />

# List

List is a grouping of related items. List can be ordered with multiple levels of nesting.

## Usage

<Story of={ListStories.Filled} />

# List Item

List items are used to group related content in a list. They must be nested within a List component.

## Usage

<Story of={ListItemStories.Starter} meta={ListItemStories} />
```

----------------------------------------

TITLE: Adding IS_STORYBOOK global variable
DESCRIPTION: Adds a new global variable IS_STORYBOOK to the Storybook core.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_8

LANGUAGE: JavaScript
CODE:
```
Core: Add IS_STORYBOOK global variable
```

----------------------------------------

TITLE: Creating a Custom Storybook Addon Panel with Parameters
DESCRIPTION: Creates a React component that serves as a custom addon panel in Storybook. It uses the useParameter hook to retrieve custom parameters from the current story and renders different content based on whether a parameter is provided or uses the default value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-useparameter.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { AddonPanel } from 'storybook/internal/components';

import { useParameter } from 'storybook/manager-api';

export const Panel = () => {
  // Connects to Storybook's API and retrieves the value of the custom parameter for the current story
  const value = useParameter('custom-parameter', 'initial value');

  return (
    <AddonPanel key="custom-panel" active="true">
      {value === 'initial value' ? (
        <h2>The story doesn't contain custom parameters. Defaulting to the initial value.</h2>
      ) : (
        <h2>You've set {value} as the parameter.</h2>
      )}
    </AddonPanel>
  );
};
```

----------------------------------------

TITLE: Rendering Markdown in Storybook Info Addon Description
DESCRIPTION: Creates a story that demonstrates how to use markdown in the Info addon description. This allows for richer text formatting in the component documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
storiesOf('Addons|Info.Markdown', module).add(
  'Displays Markdown in description',
  withInfo(markdownDescription)(() => <BaseButton label="Button" />)
);
```

----------------------------------------

TITLE: Updating deprecated docs parameters
DESCRIPTION: The following story and meta parameters are now removed:
parameters.docs.iframeHeight; // becomes docs.story.iframeHeight
parameters.docs.inlineStories; // becomes docs.story.inline
parameters.jsx.transformSource; // becomes parameters.docs.source.transform
parameters.docs.transformSource; // becomes parameters.docs.source.transform
parameters.docs.source.transformSource; // becomes parameters.docs.source.transform
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_76

LANGUAGE: typescript
CODE:
```
parameters.docs.iframeHeight; // becomes docs.story.iframeHeight
parameters.docs.inlineStories; // becomes docs.story.inline
parameters.jsx.transformSource; // becomes parameters.docs.source.transform
parameters.docs.transformSource; // becomes parameters.docs.source.transform
parameters.docs.source.transformSource; // becomes parameters.docs.source.transform
```

----------------------------------------

TITLE: Running Storybook Tests with pnpm
DESCRIPTION: This command executes Storybook tests using pnpm, targeting a specific Storybook URL for testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute-with-url.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm run test-storybook  --url https://the-storybook-url-here.com
```

----------------------------------------

TITLE: Migrating Standalone Build API - Storybook 7.0
DESCRIPTION: This snippet demonstrates how to migrate the standalone build API from `@storybook/react/standalone` to `@storybook/core-server` in Storybook 7.0. The `buildStandalone` function is replaced with the `build` function.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_104

LANGUAGE: javascript
CODE:
```
const buildStandalone = require("@storybook/react/standalone");
const options = {};
buildStandalone(options).then(() => console.log("done"));
```

LANGUAGE: javascript
CODE:
```
const { build } = require("@storybook/core-server");
const options = {};
build(options).then(() => console.log("done"));
```

----------------------------------------

TITLE: Simulating User Input and Interactions in Storybook (Web Components - TS)
DESCRIPTION: This snippet demonstrates how to simulate user input and interactions within a Storybook story using TypeScript for web components. It uses `userEvent` to type into an input field and click a submit button, and `waitFor` to ensure the component updates as expected.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-waitfor.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { userEvent, waitFor, within } from 'storybook/test';

const meta: Meta = {
  component: 'demo-my-component',
};

export default meta;
type Story = StoryObj;

/* See https://storybook.js.org/docs/writing-stories/play-function#working-with-the-canvas
 * to learn more about using the canvasElement to query the DOM
 */
export const ExampleAsyncStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const Input = canvas.getByLabelText('Username', {
      selector: 'input',
    });

    await userEvent.type(Input, 'WrongInput', {
      delay: 100,
    });

    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel
    const Submit = canvas.getByRole('button');
    await userEvent.click(Submit);

    await waitFor(async () => {
```

LANGUAGE: ts
CODE:
```
      await userEvent.hover(canvas.getByTestId('error'));
    });
  },
};
```

----------------------------------------

TITLE: Configuring Button Component Story (JavaScript)
DESCRIPTION: This JavaScript snippet configures a Storybook story for the Button component. It imports the Button component and defines a default story and a dark theme story by setting the 'theme' parameter to 'dark'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/configure-mock-provider-with-story-parameter.md#_snippet_0

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

// Wrapped in light theme
export const Default = {};

// Wrapped in dark theme
export const Dark = {
  parameters: {
    theme: 'dark',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet exports the default configuration for Storybook using TypeScript. It imports the StorybookConfig type, specifies the framework, story file patterns, and enables the 'argTypeTargetsV7' feature.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-features-arg-type-targets-v7.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  features: {
    argTypeTargetsV7: true,
  },
};

export default config;
```

----------------------------------------

TITLE: Installing Chromatic Addon for Storybook
DESCRIPTION: Command to install the @chromatic-com/storybook addon for enabling visual tests in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/visual-testing.mdx#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install @chromatic-com/storybook --save-dev
```

----------------------------------------

TITLE: Initializing Storybook for Server in JavaScript
DESCRIPTION: This snippet shows how to initialize Storybook for server-side rendering using npx. It sets up Storybook with the server template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
cd my-app
npx storybook@latest init -t server
```

----------------------------------------

TITLE: Configuring Button Story (TS)
DESCRIPTION: This code configures a Storybook story for a Button component using TypeScript. It imports the necessary modules, defines the component metadata, sets up action handling for 'mouseover' and 'click .btn' events, and applies decorators. It uses satisfies Meta<typeof Button> to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { withActions } from 'storybook/actions/decorator';

import { Button } from './Button';

const meta = {
  component: Button,
  parameters: {
    actions: {
      handles: ['mouseover', 'click .btn'],
    },
  },
  decorators: [withActions],
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Styled Highlight Decorator in Vue (TS) Story
DESCRIPTION: This TypeScript story for Vue defines a decorator that uses `useChannel` to emit a `HIGHLIGHT` event. This event configures selectors for highlighting elements and defines menu items with associated actions. The decorator is applied to the 'StyledHighlight' story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-menu.md#_snippet_8

LANGUAGE: typescript
CODE:
```
export const StyledHighlight: Story = {
  decorators: [
    () => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        menu: [
          {
            id: 'button-name',
            title: 'Login',
            description: 'Navigate to the login page',
            clickEvent: 'my-menu-click-event',
          },
          {
            id: 'h2-home',
            title: 'Acme',
            description: 'Navigate to the home page',
          },
        ],
      });
      return {
        template: '<story />',
      };
    },
  ],
};
```

----------------------------------------

TITLE: Svelte Page Story with JavaScript
DESCRIPTION: Storybook story for Svelte Page component using JavaScript. Creates a note in the database during play function and mounts the component with dynamic data through props. Includes user interaction testing and argument type controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mount-advanced.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
export const Default = {
  play: async ({ mount, args }) => {
    const note = await db.note.create({
      data: { title: 'Mount inside of play' },
    });

    const canvas = await mount(
      Page,
      // 👇 Pass data that is created inside of the play function to the component
      //   For example, a just-generated UUID
      { props: { ...args, params: { id: String(note.id) } } },
    );

    await userEvent.click(await canvas.findByRole('menuitem', { name: /login to add/i }));
  },
  argTypes: {
    // 👇 Make the params prop un-controllable, as the value is always overriden in the play function.
    params: { control: { disable: true } },
  },
};
```

----------------------------------------

TITLE: Defining Story with Snippets in Svelte Storybook
DESCRIPTION: This code demonstrates how to define a Story in Svelte Storybook using snippets instead of slots. It imports the necessary modules, defines the meta information for the component, and creates a story with a custom snippet to provide dynamic content. The `template` snippet allows creating dynamic stories while maintaining reactivity.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/svelte-vite.mdx#_snippet_8

LANGUAGE: svelte
CODE:
```
<script>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story name="Default" args={{ exampleProperty: true }}>
  {#snippet template(args)}
    <MyComponent {...args}>Reactive component</MyComponent>
  {/snippet}
</Story>
```

----------------------------------------

TITLE: Reusing Stories in Test Files with CSF Factories
DESCRIPTION: This code snippet illustrates how to reuse stories directly in test files using the CSF Factories format. It shows how to import stories and access them directly without needing to compose them first, simplifying the testing process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_11

LANGUAGE: diff
CODE:
```
import { test, expect } from 'vitest';
import { screen } from '@testing-library/react';
- import { composeStories } from '@storybook/react-vite';
 
// Import all stories from the stories file
import * as stories from './Button.stories';
 
+ const { Primary } = stories;
- const { Primary } = composeStories(stories);
 
test('renders primary button with default args', async () => {
  // The run function will mount the component and run all of Storybook's lifecycle hooks
  await Primary.run();
  const buttonElement = screen.getByText('Text coming from args in stories file!');
  expect(buttonElement).not.toBeNull();
});
```

----------------------------------------

TITLE: Configuring Storybook Test Runner with Image Snapshots in TypeScript
DESCRIPTION: This TypeScript version configures the Storybook test runner for image snapshot testing. It imports necessary types, sets up the test environment, waits for the page to load, captures a screenshot, and compares it to a stored snapshot.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-waitpageready.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';

import { waitForPageReady } from '@storybook/test-runner';

import { toMatchImageSnapshot } from 'jest-image-snapshot';

const customSnapshotsDir = `${process.cwd()}/__snapshots__`;

const config: TestRunnerConfig = {
  setup() {
    expect.extend({ toMatchImageSnapshot });
  },
  async postVisit(page, context) {
    // Awaits for the page to be loaded and available including assets (e.g., fonts)
    await waitForPageReady(page);

    // Generates a snapshot file based on the story identifier
    const image = await page.screenshot();
    expect(image).toMatchImageSnapshot({
      customSnapshotsDir,
      customSnapshotIdentifier: context.id,
    });
  },
};

export default config;
```

----------------------------------------

TITLE: Svelte Document Screen Component (JavaScript)
DESCRIPTION: Svelte implementation using JavaScript that handles document data fetching and display. Uses onMount for data fetching and conditional rendering for different states.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
<script>
  import { onMount } from 'svelte';

  import PageLayout from './PageLayout.svelte';
  import DocumentHeader from './DocumentHeader.svelte';
  import DocumentList from './DocumentList.svelte';

  export let user = {};
  export let document = {};
  export let subdocuments = [];
  export let status = 'loading';

  onMount(async () => {
    await fetch('https://your-restful-endpoint')
      .then((res) => {
        if (!res.ok) {
          throw new Error(res.statusText);
        }
        return res;
      })
      .then((res) => res.json())
      .then((data) => {
        user = data.user;
        status = 'success';
        document = data.document;
        subdocuments = data.subdocuments;
      })
      .catch(() => {
        status = 'error';
      });
  });
</script>

{#if status === "error"}
<p>There was an error fetching the data!</p>
{:else if status === "loading"}
<p>Loading...</p>
{:else}
<PageLayout {user}>
  <DocumentHeader {document} />
  <DocumentList documents="{subdocuments}" />
</PageLayout>
{/if}
```

----------------------------------------

TITLE: Initializing Web Components Story with CSF in Javascript
DESCRIPTION: This code initializes a Storybook story for a Web Component using JavaScript and the Component Story Format (CSF). It defines the default export with the component name and a render function, and creates a primary story with a loader that fetches todo data from an API.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_11

LANGUAGE: javascript
CODE:
```
/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export default {
  component: 'demo-todo-item',
  render: (args, { loaded: { todo } }) => TodoItem({ ...args, ...todo }),
};

export const Primary = {
  loaders: [
    async () => ({
      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),
    }),
  ],
};
```

----------------------------------------

TITLE: Remove Highlight Decorator in Storybook (Vue, TS)
DESCRIPTION: This decorator emits HIGHLIGHT and REMOVE_HIGHLIGHT events to highlight and then remove the highlight from specified selectors within the Vue component. It uses storybook/preview-api's useChannel to emit events. This version is written in TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-remove.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, REMOVE_HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const RemoveHighlight: Story = {
  decorators: [
    () => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        id: 'my-unique-id',
        selectors: ['header', 'section', 'footer'],
      });
      emit(REMOVE_HIGHLIGHT, 'my-unique-id');
      return {
        template: '<story />',
      };
    },
  ],
};
```

----------------------------------------

TITLE: Defining Svelte Story with Mocked Dependency (Svelte CSF)
DESCRIPTION: This snippet defines a Storybook story for a Svelte component named 'Page'. It imports necessary modules from '@storybook/addon-svelte-csf' and mocks the 'getUserFromSession' function to return a predefined user object before each story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-test-mock-return-value.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  // 👇 Must include the `.mock` portion of filename to have mocks typed correctly
  import { getUserFromSession } from '#api/session.mock';

  import Page from './Page.svelte';

  const meta = defineMeta({
    component: Page,
  });
</script>

<Story name="Default" beforeEach={() => {
  // 👇 Set the return value for the getUserFromSession function
  getUserFromSession.mockReturnValue({ id: '1', name: 'Alice' });
}} />
```

----------------------------------------

TITLE: Removing tags in story
DESCRIPTION: Removes the `test` tag from a specific story.  The `!` prefix is used to negate a tag, effectively excluding it from the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/tags.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
export const Primary = {
  args: {
    primary: true,
    label: 'Button',
  },
  tags: ['!test'],
};

```

----------------------------------------

TITLE: Mocking Error API Response with MSW in Storybook (JS)
DESCRIPTION: This snippet configures a Storybook story to mock an error API response using MSW. It defines an HTTP GET handler that intercepts requests to 'https://your-restful-endpoint' and returns an HTTP 403 status code after a delay of 800ms. This simulates a failed API request, allowing the 'demo-document-screen' component to handle error scenarios.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_11

LANGUAGE: javascript
CODE:
```
export const MockedError = {
  parameters: {
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint', async () => {
          await delay(800);
          return new HttpResponse(null, {
            status: 403,
          });
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Enabling Debug Mode for Storybook Build (Shell)
DESCRIPTION: This command enables debug mode, outputting more logs to the CLI to assist in debugging. It provides detailed information about the build process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_33

LANGUAGE: shell
CODE:
```
storybook build --debug
```

----------------------------------------

TITLE: Installing Storybook Vue 3 Vite with PNPM
DESCRIPTION: Installs @storybook/vue3-vite package as a development dependency using PNPM package manager.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vue3-vite-install.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev @storybook/vue3-vite
```

----------------------------------------

TITLE: Resetting and Applying Highlight in Svelte Story (JS)
DESCRIPTION: This Svelte story uses the `useChannel` hook within a decorator to emit `RESET_HIGHLIGHT` and `HIGHLIGHT` events. This allows for resetting any existing highlights and then applying new highlights to specified selectors (header, section, footer).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-reset.md#_snippet_4

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, RESET_HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.svelte';

export default {
  component: MyComponent,
};

export const ResetHighlight = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(RESET_HIGHLIGHT); //👈 Remove previously highlighted elements
      emit(HIGHLIGHT, {
        selectors: ['header', 'section', 'footer'],
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Styled Highlight Story with Decorators in JavaScript
DESCRIPTION: This story demonstrates how to apply styled highlights to a component using decorators in JavaScript. It utilizes the `useChannel` hook to emit a `HIGHLIGHT` event with styling information, including selectors, styles, hover styles, focus styles, and keyframes. The styles are applied to elements matching the specified selectors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-custom-style.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

export default {
  component: 'my-component',
};

export const StyledHighlight = {
  decorators: [
    (story) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        styles: {
          backgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`,
          outline: '3px solid hotpink',
          animation: 'pulse 3s linear infinite',
          transition: 'outline-offset 0.2s ease-in-out',
        },
        hoverStyles: {
          outlineOffset: '3px',
        },
        focusStyles: {
          backgroundColor: 'transparent',
        },
        keyframes: `@keyframes pulse {
          0% { outline-color: rgba(255, 105, 180, 1); }
          50% { outline-color: rgba(255, 105, 180, 0.2); }
          100% { outline-color: rgba(255, 105, 180, 1); }
        }`,
      });
      return story();
    },
  ],
};
```

----------------------------------------

TITLE: Styled Highlight Story with Svelte Decorator
DESCRIPTION: This snippet defines a Storybook story for a Svelte component named 'MyComponent' and applies styled highlights to specific elements (h2, a, .storybook-button) using a decorator function within a Svelte CSF (Component Story Format) file. It uses the 'useChannel' hook to emit a 'HIGHLIGHT' event with styles, hover styles, focus styles, and keyframes for the highlight effect.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-custom-style.md#_snippet_3

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { useChannel } from 'storybook/preview-api';
  import { HIGHLIGHT } from 'storybook/highlight';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="StyledHighlight"
  decorators=[
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        styles: {
          backgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`,
          outline: '3px solid hotpink',
          animation: 'pulse 3s linear infinite',
          transition: 'outline-offset 0.2s ease-in-out',
        },
        hoverStyles: {
          outlineOffset: '3px',
        },
        focusStyles: {
          backgroundColor: 'transparent',
        },
        keyframes: `@keyframes pulse {
          0% { outline-color: rgba(255, 105, 180, 1); }
          50% { outline-color: rgba(255, 105, 180, 0.2); }
          100% { outline-color: rgba(255, 105, 180, 1); }
        }`,
      });
      return storyFn();
```

----------------------------------------

TITLE: Initializing TodoItem Story - Svelte (CSF - JS)
DESCRIPTION: This code defines a Storybook story for the TodoItem component in Svelte using JavaScript. It configures the component and includes a primary story with a render function and data loader.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import TodoItem from './TodoItem.svelte';

export default {
  component: TodoItem,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: (args, { loaded: { todo } }) => ({
    Component: TodoItem,
    props: {
      ...args,
      todo,
    },
  }),
  loaders: [
    async () => ({
      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),
    }),
  ],
};

```

----------------------------------------

TITLE: Rules Documentation Table in Markdown
DESCRIPTION: A markdown table documenting Storybook's ESLint rules, showing rule names, descriptions, auto-fix status, and configuration inclusion details. The table is wrapped in HTML-style comments to denote the rules list section.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/integration/eslint-plugin.mdx#2025-04-22_snippet_6

LANGUAGE: markdown
CODE:
```
{/* RULES-LIST:START */}

**Configurations**: csf, csf-strict, addon-interactions, recommended

| Name                                                                                                                                                               | Description                                                                                                                   | Automatically fixable | Included in configurations                                                                                                     |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------- | --------------------- | ------------------------------------------------------------------------------------------------------------------------------ |
| [`storybook/await-interactions`](https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/await-interactions.md)                       | Interactions should be awaited                                                                                                | ✅                    | <ul><li>addon-interactions</li><li>flat/addon-interactions</li><li>recommended</li><li>flat/recommended</li></ul>              |
[...truncated for brevity...]

{/* RULES-LIST:END */}
```

----------------------------------------

TITLE: Running the test suite
DESCRIPTION: This command executes the complete test suite for Storybook. It's recommended to run this before submitting a pull request to ensure that all tests pass.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#_snippet_9

LANGUAGE: shell
CODE:
```
yarn test
```

----------------------------------------

TITLE: Adding A11y Addon in TypeScript Configuration
DESCRIPTION: Demonstrates TypeScript configuration for adding the Storybook accessibility addon, including proper type imports and type annotations. Framework-specific configuration needs to be specified in the type import.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-register-example-addon.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  addons: [
    // Other Storybook addons
    '@storybook/addon-a11y',
  ],
};

export default config;
```

----------------------------------------

TITLE: Creating Button Documentation with MDX in Storybook (Svelte CSF)
DESCRIPTION: This MDX file documents a Button component specifically for Svelte using Component Story Format. It imports stories from a Svelte-specific file (Button.stories.svelte), sets component metadata, describes the button's functionality, and displays a usage example.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-starter-example.md#2025-04-22_snippet_1

LANGUAGE: mdx
CODE:
```
import { Meta, Story } from '@storybook/addon-docs/blocks';

import * as ButtonStories from './Button.stories.svelte';

<Meta of={ButtonStories} />

# Button

Button is a clickable interactive element that triggers a response.

You can place text and icons inside of a button.

Buttons are often used for form submissions and to toggle elements into view.

## Usage

<Story of={ButtonStories.Basic} />
```

----------------------------------------

TITLE: Initializing Button Story with Variants in Svelte (JS)
DESCRIPTION: This code defines Storybook stories for a Svelte Button component using JavaScript, including variants and a combo example. It uses the defineMeta function from '@storybook/addon-svelte-csf' to configure the component and its stories, setting tags to control their visibility and testing behavior.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_5

LANGUAGE: javascript
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';
  import { Button } from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<!-- 👇 This story will not appear in Storybook's sidebar or docs page -->
<Story
  name="Variant1"
  tags={['!dev', '!autodocs']}
  args={{ variant: 1 }}
/>

<!-- 👇 This story will not appear in Storybook's sidebar or docs page -->
<Story
  name="Variant2"
  tags={['!dev', '!autodocs']}
  args={{ variant: 2 }}
/>

<!-- 👇 This story should not be tested, but will appear in the sidebar and docs page -->
<Story name="Combo" tags={['!test']}>
  <Button variant={1}>
  <Button variant={2}>
</Story>
```

----------------------------------------

TITLE: Adding source-loader to Webpack config for storiesOf in Storybook
DESCRIPTION: This code snippet demonstrates how to add the `@storybook/source-loader` to your Webpack configuration in `main.js` to restore the behavior of displaying static code snippets for `storiesOf` when migrating to Storybook 7.0. It configures the loader to process story files and allows specifying `sourceLoaderOptions`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_136

LANGUAGE: javascript
CODE:
```
module.exports = {
  webpackFinal: (config) => {
    config.module.rules.push({
      test: /\.stories\.[tj]sx?$/,
      use: [
        {
          loader: require.resolve("@storybook/source-loader"),
          options: {} /* your sourceLoaderOptions here */,
        },
      ],
      enforce: "pre",
    });
    return config;
  },
};
```

----------------------------------------

TITLE: Running Storybook with Angular CLI
DESCRIPTION: This command shows how to run Storybook for a specific Angular project using the Angular CLI.  Replace `<your-project>` with the name of your Angular project as defined in `angular.json`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_1

LANGUAGE: shell
CODE:
```
ng run <your-project>:storybook
```

----------------------------------------

TITLE: Installing Storybook Svelte-Vite with npm
DESCRIPTION: Installs @storybook/svelte-vite as a development dependency using npm package manager
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/svelte-vite-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev @storybook/svelte-vite
```

----------------------------------------

TITLE: Disable addon panel for a story
DESCRIPTION: Disables the addon panel for a specific story by setting the `myPanel.disable` parameter to `true` in the story's parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-knowledge-base.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { Button } from '@storybook/components';

export default {
  title: 'Button',
};

export const WithSomeEmoji = () => (
  <Button>😀 😎 👍 💯</Button>
);

WithSomeEmoji.story = {
  name: 'with some emoji',
  parameters: {
    myPanel: {
      disable: true,
    },
  },
};

export const WithAButton = () => (
  <Button>Hello Button</Button>
);

WithAButton.story = {
  name: 'with a button',
};

```

----------------------------------------

TITLE: Configuring SvelteKit Framework in Storybook
DESCRIPTION: Demonstrates the required configuration for SvelteKit projects in Storybook 7.0, which involves specifying the `@storybook/sveltekit` framework in the `main.js` file. This replaces the previous method of setting up Storybook with Svelte+Vite.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_117

LANGUAGE: javascript
CODE:
```
// .storybook/main.js
export default {
  framework: "@storybook/sveltekit",
};

```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Component (TS)
DESCRIPTION: This code configures Storybook metadata for a Svelte component using TypeScript. It defines the component and configures the 'icon' argument with available options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Example from './Example.svelte';

const meta = {
  component: Example,
  argTypes: {
    icon: {
      options: ['arrow-up', 'arrow-down', 'loading'],
    },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Importing CSS in Storybook Preview
DESCRIPTION: Adding an import statement for the main CSS file in the Storybook preview configuration (.storybook/preview.js).
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/postcss.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { Preview } from "@storybook/your-renderer";

+import "../src/index.css";

const preview: Preview = {
  parameters: { /* ... */ },
};

export default preview;
```

----------------------------------------

TITLE: Installing Storybook React Webpack5 with yarn (Shell)
DESCRIPTION: This shell command adds @storybook/react-webpack5 as a development dependency via yarn. It is suitable for React projects that use Storybook and require Webpack5 integration. Prerequisites include having yarn installed and executing the command from the project's main directory; updates devDependencies in package.json without requiring extra input.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-webpack5-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev @storybook/react-webpack5
```

----------------------------------------

TITLE: Outputting the Version Number of Storybook Build (Shell)
DESCRIPTION: This command outputs the version number of the Storybook CLI being used. It helps in verifying the installed version and ensuring compatibility.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_28

LANGUAGE: shell
CODE:
```
storybook build -V
```

----------------------------------------

TITLE: Defining Non-A11y Story in Vue Storybook (JavaScript)
DESCRIPTION: Shows how to set up a story in JavaScript for a Vue component in Storybook. The accessibility checks are disabled by setting 'manual' to true under globals.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_8

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.vue';

export default {
  component: MyComponent,
};

export const NonA11yStory = {
  globals: {
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  },
};

```

----------------------------------------

TITLE: Defining Story Meta and Experimental Story - TypeScript
DESCRIPTION: This TypeScript snippet defines the meta object for a Storybook story, specifying the title, component, and tags using TypeScript types. It also defines an ExperimentalFeatureStory with a specific tag, inheriting other tags from the meta object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Button',
  component: 'demo-button',
  /*
   * All stories in this file will have these tags applied:
   *  - autodocs
   * - dev (implicit default, inherited from preview)
   * - test (implicit default, inherited from preview)
   */
  tags: ['autodocs'],
};

export default meta;
type Story = StoryObj;

export const ExperimentalFeatureStory: Story = {
  /*
   * This particular story will have these tags applied:
   * - experimental
   * - autodocs (inherited from meta)
   * - dev (inherited from meta)
   * - test (inherited from meta)
   */
  tags: ['experimental'],
};
```

----------------------------------------

TITLE: Upgrading Storybook using yarn
DESCRIPTION: This command upgrades Storybook to the latest version using yarn. It uses yarn dlx to execute the Storybook upgrade command without installing it globally.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade-prerelease.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@next upgrade
```

----------------------------------------

TITLE: Button with Icon in TypeScript React
DESCRIPTION: Shows how to add an icon to the Button component. Icons should be imported from the @storybook/icons library and placed to the left of the button text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_4

LANGUAGE: tsx
CODE:
```
<Button>
  <FaceHappyIcon />Button
</Button>
```

----------------------------------------

TITLE: Creating Storybook Story for Solid Component (TS)
DESCRIPTION: This code creates a Storybook story for a Solid component using TypeScript. It imports the necessary modules from 'storybook-solidjs' and the YourComponent. It defines the component's metadata and a basic story with arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { YourComponent } from './YourComponent';

//👇 This default export determines where your story goes in the story list
const meta = {
  component: YourComponent,
} satisfies Meta<typeof YourComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const FirstStory: Story = {
  args: {
    //👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Fixing Auto-title in CSF3
DESCRIPTION: Fix the Auto-title feature in CSF3 to respect file system capitalization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CHANGELOG.v6.md#2025-04-22_snippet_3

LANGUAGE: JavaScript
CODE:
```
// Fix Auto-title to respect file system capitalization
// See PR #17574 for details
```

----------------------------------------

TITLE: Storybook Sandbox Help
DESCRIPTION: Displays usage information for the sandbox command, listing available options and their descriptions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_111

LANGUAGE: Shell
CODE:
```
storybook sandbox --help
```

----------------------------------------

TITLE: Example Input Object for Instrumentation
DESCRIPTION: Shows the structure of an input object that would result in a specific call path when instrumented.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/instrumenter/README.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
{ userEvent: { keyboard: function(text) { ... } } }
```

----------------------------------------

TITLE: Vitest Plugin Configuration
DESCRIPTION: This snippet shows the simplest way to include the Vitest plugin in your Vitest configuration file. It imports the plugin and adds it to the plugins array in the Vitest configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { defineConfig } from 'vitest/config';
import { viteStaticCopy } from 'vite-plugin-static-copy';
import path from 'path';

import { storybookVite } from './dist/index';

export default defineConfig({
  plugins: [
    storybookVite(),
    viteStaticCopy({
      targets: [
        {
          src: path.resolve(__dirname, './src/assets/styles.css'),
          dest: './',
        },
      ],
    }),
  ],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: ['.storybook/vitest-setup.ts'],
    reporters: ['default', 'verbose'],
    coverage: {
      reporter: ['text', 'json', 'html'],
    },
  },
});
```

----------------------------------------

TITLE: Running Storybook Doctor with pnpm
DESCRIPTION: Executes the Storybook doctor command using pnpm's dlx feature to diagnose and fix issues in a Storybook installation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-doctor.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm dlx storybook@latest doctor
```

----------------------------------------

TITLE: Setting Storybook Log Level Configuration
DESCRIPTION: Configuration option in Storybook's main config file that controls the verbosity of logs in the browser terminal. Supports five different log levels: debug, error, info, trace, and warn. Default value is 'info'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-log-level.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export default {
  logLevel: 'warn'
};
```

----------------------------------------

TITLE: Defining a Data-Fetching LitElement Web Component in JavaScript
DESCRIPTION: This JavaScript code defines a LitElement web component named `DocumentScreen`. It uses component properties (`_data`) and internal state (`_status`) to manage fetched data and its loading status ('idle', 'loading', 'success', 'error'). Data is fetched from 'https://your-restful-endpoint' when the component connects to the DOM (`connectedCallback`). The `render` method uses `lit-html` to conditionally display loading messages, error messages, or the fetched data by passing it to child components (`demo-page-layout`, `demo-document-header`, `demo-document-list`).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/document-screen-fetch.md#2025-04-22_snippet_9

LANGUAGE: js
CODE:
```
import { LitElement, html } from 'lit-element';

class DocumentScreen extends LitElement {
  static get properties() {
    return {
      _data: { type: Object },
      _status: { state: true },
    };
  }

  constructor() {
    super();
    this._status = 'idle';
  }

  connectedCallback() {
    super.connectedCallback();
    this.fetchData();
  }

  fetchData() {
    this._status = 'loading';

    fetch('https://your-restful-endpoint')
      .then((response) => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        response.json();
      })
      .then((data) => {
        this._status = 'success';
        this._data = data;
      })
      .catch((error) => {
        this._status = 'error';
      });
  }

  render() {
    if (this._status === 'error') {
      return html`<p>There was an error fetching the data!</p>`;
    }

    if (this._status === 'loading') {
      return html`<p>Loading...</p>`;
    }

    const { user, document, subdocuments } = this._data;
    return html`
      <demo-page-layout .user=${user}>
        <demo-document-header .document=${document}></demo-document-header>
        <demo-document-list .documents=${subdocuments}></demo-document-list>
      </demo-page-layout>
    `;
  }
}

customElements.define('demo-document-screen', DocumentScreen);
```

----------------------------------------

TITLE: Initializing Storybook Preview with Decorator - React (JS)
DESCRIPTION: This snippet initializes a Storybook preview configuration for React using JavaScript, defining a decorator that wraps stories with a layout based on the 'pageLayout' parameter. It renders a div with a specific class around the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/decorator-parameterized-in-preview.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import React from 'react';

export default {
  decorators: [
    // 👇 Defining the decorator in the preview file applies it to all stories
    (Story, { parameters }) => {
      // 👇 Make it configurable by reading from parameters
      const { pageLayout } = parameters;
      switch (pageLayout) {
        case 'page':
          return (
            // Your page layout is probably a little more complex than this ;)
            <div className="page-layout">
              <Story />
            </div>
          );
        case 'page-mobile':
          return (
            <div className="page-mobile-layout">
              <Story />
            </div>
          );
        default:
          // In the default case, don't apply a layout
          return <Story />;
      }
    },
  ],
};
```

----------------------------------------

TITLE: Deprecated Grid Parameter
DESCRIPTION: This code snippet demonstrates the deprecated way of defining the grid parameter in `@storybook/addon-backgrounds`. The grid configuration should now be nested inside the `backgrounds` parameter.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_206

LANGUAGE: javascript
CODE:
```
export const Basic = () => <Button />
Basic.parameters: {
  grid: {
    cellSize: 10
  }
},
```

----------------------------------------

TITLE: Initializing Button Story - Angular
DESCRIPTION: This code defines a Storybook story for an Angular Button component. It imports necessary modules, defines the component's metadata, and creates a 'Text' story that renders the button with specified arguments (label and onClick). The argsToTemplate helper function is used to bind the arguments to the component's template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';
import { argsToTemplate } from '@storybook/angular';

import { action } from 'storybook/actions';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Text: Story = {
  render: (args) => ({
    props: args,
    // The argsToTemplate helper function converts the args to property and event bindings.
    // You could also write the template in plain HTML and bind to the component's inputs and outputs yourself:
    // <storybook-button ["label"]="label" (onClick)="onClick($event)">
    // We don't recommend the latter since it can conflict with how Storybook applies arguments via its controls addon.
    // Binding to the component's inputs and outputs yourself will conflict with default values set inside the component's class.
    // In edge-case scenarios, you may need to define the template yourself, though.
    template: `<storybook-button ${argsToTemplate(args)}></storybook-button>`,
  }),
  args: {
    label: 'Hello',
    onClick: action('clicked'),
  },
};
```

----------------------------------------

TITLE: Importing and Using Stories Block in MDX for Storybook
DESCRIPTION: This snippet demonstrates how to import and use the Stories block in an MDX file for Storybook documentation. It imports the necessary components and story files, then uses the Meta and Stories components to render the collection of stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-stories.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
```md title="ButtonDocs.mdx"
import { Meta, Stories } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

<Stories />
```
```

----------------------------------------

TITLE: Remove @storybook/addon-storysource (Bash)
DESCRIPTION: This command removes the @storybook/addon-storysource package from your project. This addon is being removed in Storybook 9.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_9

LANGUAGE: Bash
CODE:
```
npx storybook remove @storybook/addon-storysource
```

----------------------------------------

TITLE: Running Storybook Test Coverage with Yarn
DESCRIPTION: Executes Storybook test coverage using Yarn package manager. The command runs the test-storybook script with the coverage flag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-coverage.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn test-storybook --coverage
```

----------------------------------------

TITLE: Importing Storybook Documentation Components and Stories
DESCRIPTION: Imports necessary components from Storybook addon-docs and button stories for documentation purposes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/template/stories/docs2/MetaOf.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { Meta, Story, Stories } from '@storybook/addon-docs';
import * as ButtonStories from './button.stories.ts';
```

----------------------------------------

TITLE: Configuring Button Component Meta for Angular in Storybook
DESCRIPTION: This code configures the metadata for a Button component in Storybook using Angular. It defines the component and sets up argument types (argTypes) to control the component's properties, specifically allowing either a label or an image to be passed, but not both. The 'if' property within 'argTypes' is used to conditionally display the 'label' or 'image' control based on the presence of the other.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-conditional-controls-mutual-exclusion.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  argTypes: {
    // Button can be passed a label or an image, not both
    label: {
      control: 'text',
      if: { arg: 'image', truthy: false },
    },
    image: {
      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },
      if: { arg: 'label', truthy: false },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Adding React and ReactDOM as devDependencies
DESCRIPTION: This code snippet shows how to add React and ReactDOM as devDependencies using npm. This is required for Storybook 7.0 when using addon-docs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_95

LANGUAGE: shell
CODE:
```
npm add react react-dom --save-dev
```

----------------------------------------

TITLE: Configuring Storybook Parameters in TypeScript
DESCRIPTION: This TypeScript snippet configures Storybook parameters, including control matchers for color and date inputs, and sets a custom DocsContainer component for documentation. It also defines a Preview type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-auto-docs-custom-docs-container.md#_snippet_1

LANGUAGE: ts
CODE:
```
import * as React from 'react';

// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Preview } from '@storybook/your-framework';

import { DocsContainer } from '@storybook/addon-docs/blocks';

const ExampleContainer = ({ children, ...props }) => {
  return <DocsContainer {...props}>{children}</DocsContainer>;
};

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/,
      },
    },
    docs: {
      container: ExampleContainer,
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Viewport Addon (Old)
DESCRIPTION: This code shows the old way of configuring the `@storybook/addon-viewport` using `configureViewport`. This function is no longer supported.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_267

LANGUAGE: javascript
CODE:
```
import { configureViewport } from `@storybook/addon-viewport`;

configureViewport(options);
```

----------------------------------------

TITLE: Remove Highlight Decorator in Storybook (Vue, JS)
DESCRIPTION: This decorator emits HIGHLIGHT and REMOVE_HIGHLIGHT events to highlight and then remove the highlight from specified selectors within the Vue component. It uses storybook/preview-api's useChannel to emit events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-remove.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, REMOVE_HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.vue';

export default {
  component: MyComponent,
};

export const RemoveHighlight = {
  decorators: [
    () => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        id: 'my-unique-id',
        selectors: ['header', 'section', 'footer'],
      });
      emit(REMOVE_HIGHLIGHT, 'my-unique-id');
      return {
        template: '<story />',
      };
    },
  ],
};
```

----------------------------------------

TITLE: Setting Project Annotations with Storybook for React in JavaScript
DESCRIPTION: This snippet performs a similar task as the TypeScript version but for JavaScript. It involves setting up annotations for a React project using Storybook, utilizing `beforeAll` from Vitest along with a11y and project-specific annotations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { beforeAll } from 'vitest';

import { setProjectAnnotations } from '@storybook/react';

// Import the a11y addon annotations
import * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';

// Optionally import your own annotations
import * as projectAnnotations from './preview';

const project = setProjectAnnotations([
  // Add the a11y addon annotations
  a11yAddonAnnotations,
  projectAnnotations,
]);

beforeAll(project.beforeAll);
```

----------------------------------------

TITLE: Configuring Storybook Test Runner in TypeScript
DESCRIPTION: This code defines and exports a configuration object for the Storybook test runner in TypeScript. It imports the TestRunnerConfig type and includes typed hooks for setup, preVisit, and postVisit stages of the test execution process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-hooks-example.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';

const config: TestRunnerConfig = {
  // Hook that is executed before the test runner starts running tests
  setup() {
    // Add your configuration here.
  },
  /* Hook to execute before a story is initially visited before being rendered in the browser.
   * The page argument is the Playwright's page object for the story.
   * The context argument is a Storybook object containing the story's id, title, and name.
   */
  async preVisit(page, context) {
    // Add your configuration here.
  },
  /* Hook to execute after a story is visited and fully rendered.
   * The page argument is the Playwright's page object for the story
   * The context argument is a Storybook object containing the story's id, title, and name.
   */
  async postVisit(page, context) {
    // Add your configuration here.
  },
};

export default config;
```

----------------------------------------

TITLE: Running Core Unit Tests in Watch Mode
DESCRIPTION: This script runs the core unit tests in watch mode, automatically re-running tests when changes are detected.
SOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
yarn run test --core --watch
```

----------------------------------------

TITLE: Empty StorybookJS Preset Configuration
DESCRIPTION: An empty preset configuration file marked with a comment indicating that no configuration is required for this particular setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-storysource-manager-entries.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
/* nothing needed */
```

----------------------------------------

TITLE: Initializing List Story with Svelte
DESCRIPTION: This code defines a Storybook story for the List component in Svelte. It imports necessary modules and components, defines the meta object with the component and subcomponents, and creates stories for Empty and One Item scenarios using Svelte's snippet syntax.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import List from './List.svelte';
  import ListItem from './ListItem.svelte';

  const { Story } = defineMeta({
    component: List,
    subcomponents: { ListItem },
  });
</script>

<Story name="Empty" />

<Story name="One Item">
  {#snippet children(args)}
    <List {...args}>
      <ListItem />
    </List>
  {/snippet}
</Story>
```

----------------------------------------

TITLE: Configuring Storybook with Reanimated
DESCRIPTION: This code snippet shows an example configuration for integrating Reanimated with Storybook. It demonstrates how to add the necessary Babel plugins for Reanimated to the Storybook configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-native-web-vite.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
const main: StorybookConfig = {
  // ... rest of config

  framework: {
    name: "@storybook/react-native-web-vite",
    options: {
      pluginReactOptions: {
        babel: {
          plugins: [
            "@babel/plugin-proposal-export-namespace-from",
            "react-native-reanimated/plugin",
          ],
        },
      },
    },
  },

  // ... rest of config
}
```

----------------------------------------

TITLE: Creating a Vite Plugin for JSON Story Files in Storybook
DESCRIPTION: A Vite plugin that transforms JSON story files into standard CSF (Component Story Format) files. The plugin intercepts virtual imports and dynamically creates story exports based on the JSON content.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-indexers.mdx#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
// vite-plugin-storybook-json-stories.ts

import type { PluginOption } from 'vite';
import fs from 'fs/promises';

function JsonStoriesPlugin(): PluginOption {
  return {
    name: 'vite-plugin-storybook-json-stories',
    load(id) {
      if (!id.startsWith('virtual:jsonstories')) {
        return;
      }

      const [, fileName, componentName] = id.split('--');
      const content = JSON.parse(fs.readFileSync(fileName));

      const { componentPath, stories } = getComponentStoriesFromJson(content, componentName);

      return `
        import ${componentName} from '${componentPath}';

        export default { component: ${componentName} };

        ${stories.map((story) => `export const ${story.name} = ${story.config};\n`)}      
      `;
    },
  };
}
```

----------------------------------------

TITLE: Retrieving Story Context for Viewport Configuration in Playwright Tests
DESCRIPTION: Shows how to use the getStoryContext helper function to access story parameters and configure Playwright's page viewport size based on the story's parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
// @vitest-environment @storybook/test-runner
import { expect, test } from '@storybook/test-runner';
import type { Page } from '@playwright/test';

test('my test', async ({ page, context }: { page: Page; context: any }) => {
  const storyContext = await context.getStoryContext();
  const storyViewport = storyContext.parameters?.viewport;
  // Check if the story has viewport parameters and await page has loaded
  if (storyViewport && storyViewport.viewports) {
    // Extract viewport & parameters
    const viewportKey = storyViewport.defaultViewport;
    const viewportParams = storyViewport.viewports[viewportKey];
    // Set the viewport size
    await page.setViewportSize({
      width: viewportParams.width,
      height: viewportParams.height,
    });
  }
  // Run your tests
});
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: This JavaScript configuration file sets up Storybook, specifying the framework, defining where to find story files, and configuring addons for documentation and styling with Webpack. It uses style-loader, css-loader, and postcss-loader to handle CSS files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-addons.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  addons: [
    '@storybook/addon-docs',
    {
      name: '@storybook/addon-styling-webpack',
      options: {
        rules: [
          {
            test: /\.css$/,
            use: [
              'style-loader',
              'css-loader',
              {
                loader: 'postcss-loader',
                options: {
                  implementation: require.resolve('postcss'),
                },
              },
            ],
          },
        ],
      },
    },
  ],
};
```

----------------------------------------

TITLE: Initializing List Component Story - React (TS)
DESCRIPTION: This code defines a Storybook story for the List component in React using TypeScript. It imports the List and ListItem components and defines the Meta and StoryObj types. The story renders a List component with three ListItems, using props from the Selected and Unselected stories of ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-reuse-data.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { List } from './List';
import { ListItem } from './ListItem';

//👇 We're importing the necessary stories from ListItem
import { Selected, Unselected } from './ListItem.stories';

const meta = {
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ManyItems: Story = {
  render: (args) => (
    <List {...args}>
      <ListItem {...Selected.args} />
      <ListItem {...Unselected.args} />
      <ListItem {...Unselected.args} />
    </List>
  ),
};
```

----------------------------------------

TITLE: Initializing Button Stories with React (TS)
DESCRIPTION: This code initializes Storybook stories for a React Button component using TypeScript, defining metadata and two stories: Accessible and Inaccessible. It imports necessary modules from '@storybook/react' and the Button component, configuring the component's properties and their controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_3

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react';

import { Button } from './Button';

const meta: Meta<typeof Button> = {
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
  },
};

export default meta;
type Story = StoryObj<typeof Button>;

// This is an accessible story
export const Accessible: Story = {
  args: {
    primary: false,
    label: 'Button',
  },
};

// This is not
export const Inaccessible: Story = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};

```

----------------------------------------

TITLE: Defining Storybook Story with CSF (TSX)
DESCRIPTION: This snippet defines a Storybook story using the Component Story Format (CSF) in a TypeScript/TSX environment. It imports the necessary modules from '@storybook/your-framework' and the component itself. It then defines a metadata object and a story object with specific arguments, utilizing environment variables.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-vite-env-variables.md#_snippet_4

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ExampleStory: Story = {
  args: {
    propertyA: import.meta.env.STORYBOOK_DATA_KEY,
    propertyB: import.meta.env.VITE_CUSTOM_VAR,
  },
};
```

----------------------------------------

TITLE: Overriding Next.js Router Defaults in Storybook Preview
DESCRIPTION: Demonstrates how to override the default Next.js router properties within the `.storybook/preview.js|ts` file. It uses the `nextjs.router` parameter to modify properties like `basePath`. It also shows how to mock router methods like `push` using `getRouter().push.mockImplementation()`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
// Replace your-framework with nextjs or nextjs-vite
import type { Preview } from '@storybook/your-framework';

// 👇 Must include the `.mock` portion of filename to have mocks typed correctly
import { getRouter } from "@storybook/your-framework/router.mock";

const preview: Preview = {
  parameters: {
    nextjs: {
      // 👇 Override the default router properties
      router: {
        basePath: '/app/',
      },
    },
  },
  async beforeEach() {
    // 👇 Manipulate the default router method mocks
    getRouter().push.mockImplementation(() => {
      /* ... */
    });
  },
};
```

----------------------------------------

TITLE: Deprecated Story Type Usage in Storybook
DESCRIPTION: This code snippet demonstrates the deprecated usage of the `Story` type in Storybook 6.x. It shows how to define a story using the `Story` type from `@storybook/react`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_138

LANGUAGE: typescript
CODE:
```
import type { Story } from "@storybook/react";

export const MyStory: Story = () => <div />;
```

----------------------------------------

TITLE: Configuring Storybook Main with Title Prefix
DESCRIPTION: Configuration in storybook/main.js to set a title prefix for automatically generated story titles.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
export default {
  stories: [
    {
      directory: '../src/components',
      titlePrefix: 'Custom',
    },
  ],
};
```

----------------------------------------

TITLE: Installing Web components Vite framework
DESCRIPTION: Installs the @storybook/web-components-vite framework as a dev dependency using npm. This command adds the necessary package for Storybook to work with Web components and Vite.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/web-components-vite.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev @storybook/web-components-vite
```

----------------------------------------

TITLE: Defining Button Story with Backgrounds in Svelte (CSF)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using the Component Story Format (CSF) and configures story-level parameters to set background options. It imports the Button component and uses defineMeta from '@storybook/addon-svelte-csf' to define the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<!-- 👇 Story-level parameters-->
<Story
  name="Primary"
  parameters={{
    backgrounds: {
      options: {
        red: { name: 'Red', value: '#f00' },
        green: { name: 'Green', value: '#0f0' },
        blue: { name: 'Blue', value: '#00f' },
      },
    },
  }}
/>
```

----------------------------------------

TITLE: Configuring Storybook with Webpack (TypeScript)
DESCRIPTION: This configures Storybook with Webpack using TypeScript, defining the framework and stories, and setting up module aliases using webpackFinal. It mocks external and internal modules by resolving aliases to mock files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/module-aliases-config.md#_snippet_3

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., nextjs, react-webpack5)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  webpackFinal: async (config) => {
    if (config.resolve) {
      config.resolve.alias = {
        ...config.resolve.alias,
        // 👇 External module
        lodash: require.resolve('./lodash.mock'),
        // 👇 Internal modules
        '@/api$': path.resolve(__dirname, './api.mock.ts'),
        '@/app/actions$': path.resolve(__dirname, './app/actions.mock.ts'),
        '@/lib/session$': path.resolve(__dirname, './lib/session.mock.ts'),
        '@/lib/db$': path.resolve(__dirname, './lib/db.mock.ts'),
      };
    }

    return config;
  },
};

export default config;
```

----------------------------------------

TITLE: Initializing Button Story for Common Frameworks with Typescript
DESCRIPTION: This code defines a Storybook story for a Button component, intended for use with common frameworks using Typescript. It imports the Meta type from '@storybook/your-framework' and the Button component. The metadata sets the layout to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#_snippet_7

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  // Sets the layout parameter component wide.
  parameters: {
    layout: 'centered',
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Ordered Story Loading Configuration in Storybook
DESCRIPTION: Configuration that loads stories in a specific order using an array of glob patterns, controlling how stories appear in the sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-stories.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
export default {
  stories: [
    '../src/docs/**/*.mdx', // Load docs first
    '../src/components/**/*.stories.@(js|jsx|mjs|ts|tsx)', // Then load component stories
  ],
};
```

----------------------------------------

TITLE: Registering addon panel with paramKey
DESCRIPTION: Registers an addon panel with a specific `paramKey`. This key is used to identify the panel and allows disabling it for specific stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-knowledge-base.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { useStorybookState } from '@storybook/api';
import { AddonPanel } from '@storybook/components';
import { addons, types } from '@storybook/addons';

const Content = () => {
  const storybookState = useStorybookState();

  return (
    <div>
      <p>Story:</p>
      <pre>{JSON.stringify(storybookState.story, null, 2)}</pre>
      <p>Selected Kind:</p>
      <pre>{JSON.stringify(storybookState.selectedKind, null, 2)}</pre>
      <p>Selected Story:</p>
      <pre>{JSON.stringify(storybookState.selectedStory, null, 2)}</pre>
    </div>
  );
};

addons.register('my/panel', () => {
  addons.addPanel({
    type: types.PANEL,
    title: 'My Panel',
    paramKey: 'myPanel',
    render: ({ active, key }) => (
      <AddonPanel active={active} key={key}>
        <Content />
      </AddonPanel>
    ),
  });
});
```

----------------------------------------

TITLE: Old Storybook Options Configuration (JavaScript)
DESCRIPTION: This snippet shows an example of the old configuration using `withOptions` in Storybook 4.x, which is now deprecated in favor of global parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_259

LANGUAGE: JavaScript
CODE:
```
addDecorator(
  withOptions({
    name: "Storybook",
    url: "https://storybook.js.org",
    goFullScreen: false,
    addonPanelInRight: true,
  })
);
```

----------------------------------------

TITLE: Defining Storybook Story with CSF (TypeScript)
DESCRIPTION: This TypeScript code defines a Storybook story for a Button component using the Component Story Format (CSF). It imports Meta and StoryObj from '@storybook/your-framework' (which should be replaced with the actual framework). It exports a default meta object containing the component and a 'Large' story that disables backgrounds.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-disabled.md#_snippet_2

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Large: Story = {
  parameters: {
    backgrounds: { disable: true },
  },
};
```

----------------------------------------

TITLE: Importing Storybook React API
DESCRIPTION: Imports the storiesOf function from the Storybook React package, which is used to create and organize stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.ugly-comments-stories.txt#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { storiesOf } from '@storybook/react';
```

----------------------------------------

TITLE: Installing Storybook Coverage Addon with yarn
DESCRIPTION: Installs the @storybook/addon-coverage package using yarn package manager. This command uses yarn dlx to execute the latest version of storybook CLI to add the coverage addon to your project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-coverage-addon-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@latest add @storybook/addon-coverage
```

----------------------------------------

TITLE: Importing Button Component in TypeScript React
DESCRIPTION: Shows how to import the Button component and icons from Storybook libraries. This is essential for using the Button component in a React project with TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/components/Button/Docs.mdx#2025-04-22_snippet_0

LANGUAGE: tsx
CODE:
```
import { Button } from '@storybook/components';

// If you would like to use icons, please import them from the icons library
import { FaceHappyIcon, HeartIcon } from '@storybook/icons'
```

----------------------------------------

TITLE: Defining Storybook Label Table in Markdown
DESCRIPTION: A markdown table defining various labels used in the Storybook project's GitHub repository. It includes label names and their corresponding purposes, covering a wide range of categories such as accessibility, addons, frameworks, APIs, and development processes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MAINTAINERS.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Labels

| label name                     | purpose                                                                                                                                              |
| ------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------- |
| accessibility                  | Issue, bug, or pull request related to accessibility                                                                                                 |
| addon:(name)                   | Issue, bug, or pull request related to Storybook addons (e.g., [Controls](/docs/essentials/controls.mdx))                                            |
| app:(name)                     | Issue, bug, or pull request related to Storybook's supported frameworks (e.g., React)                                                                |
| api:(name)                     | Issue, bug, or pull request related to Storybook's API (e.g.,[makeDecorator](/docs/addons/addons-api.mdx#makeDecorator-API))                         |
| args                           | Issue, bug, or pull request related to Storybook's [args](/docs/writing-stories/args.mdx)                                                            |
| babel/webpack                  | Issue, bug, or pull request related to Storybook's build system (e.g., Webpack or Babel), for Webpack 5 issues see below                             |
| block:(name)                   | Issue or bug within a certain surface are of Storybook (e.g., [argTypes](/docs/api/doc-blocks/doc-block-argtypes.mdx))                               |
| BREAKING CHANGE                | Issue or pull request that introduces a breaking change within Storybook's ecosystem.                                                                |
| BREAKING PRERELASE             | Breaking, but only for prerelease users (not relative to the stable release)                                                                         |
| build-storybook                | Issue, bug, or pull request related to Storybook's production build                                                                                  |
| cleanup                        | Minor cleanup style change that won't show up in release changelog                                                                                   |
| bug                            | A bug within Storybook                                                                                                                               |
| cli                            | Issue, bug, or pull request that affects the Storybook's CLI                                                                                         |
| compatibility with other tools | Issue, bug, or pull request between Storybook and other tools (e.g., [Nuxt](https://nuxtjs.org/))                                                    |
| components                     | Issue, bug, or pull request related to Storybook's internal components                                                                               |
| composition                    | Issue, bug, or pull request related to Storybook [Composition](/docs/sharing/storybook-composition.mdx)                                              |
| configuration                  | Issue, bug, or pull request related to Storybook [configuration](/docs/configure/index.mdx)                                                          |
| core                           | Issue, bug, or pull request related to Storybook's Core                                                                                              |
| cra                            | Issue, bug, or pull request that affects Storybook's compatibility with Create React APP ([CRA](https://create-react-app.dev/docs/getting-started/)) |
| CSF                            | Issue, bug, or pull request related to Storybook's [Component Story Format (CSF)](/docs/api/csf.mdx)                                                 |
| decorators                     | Issue, bug, or pull related to Storybook's [Decorators](/docs/writing-stories/decorators.mdx)                                                        |
| dependencies                   | Issue, bug, or pull request that related to upstream dependencies                                                                                    |
| discussion                     | Issue currently being discussed between the maintainers and community                                                                                |
| do not merge                   | Pull request that will introduce regressions and will not be merged                                                                                  |
| documentation                  | Issue, bug, or pull request that affects Storybook's documentation                                                                                   |
| duplicate                      | Question or issue already asked in the repo's issues                                                                                                 |
| feature request                | Request for a new feature to be included in Storybook                                                                                                |
| flow                           | Issue, bug, or pull request related to Storybook and Flow                                                                                            |
| Funded on Issuehunt            | Storybook issue funded on [IssueHunt](https://issuehunt.io/)                                                                                         |
| gatsby                         | Issue, bug, or pull request that affects Storybook and [Gatsby](https://www.gatsbyjs.com/)                                                           |
| good first issue               | Low impact Storybook issues that help new members get involved and start contributing                                                                |
| has workaround                 | Issue or bug that has an alternative way to be solved with Storybook                                                                                 |
| help wanted                    | Issue, or bug that requires additional help from the community                                                                                       |
| ie11                           | Issue, bug, or pull request related to Storybook and IE11                                                                                            |
| in progress                    | Issue or pull request that is currently being reviewed or worked on with the author                                                                  |
| inactive                       | Issue, or pull request that has gone stale and no active development has been done                                                                   |
| maintenance                    | Issue, or pull request related to Storybook's internal maintenance                                                                                   |
| mdx                            | Issue, bug, or pull request related to MDX and Storybook                                                                                             |
| medium                         | Issue or pull request that involves a significant amount of work within Storybook                                                                    |
| monorepos                      | Issue, bug, or pull request related to Storybook and monorepos                                                                                       |
| mui                            | Issue, bug, or pull request that affects Storybook and [Material-UI](https://material-ui.com/)                                                       |
| multiframework                 | Issue, bug, or pull request that affects multiple supported frameworks (e.g., React, Vue)                                                            |
| needs more info                | Issue, or bug that requires additional context from the author                                                                                       |
| needs reproduction             | Issue, or bug that requires a reproduction to be looked at                                                                                           |
| needs triage                   | Issue, bug, or pull request that requires further investigation from the maintainers                                                                 |
| nextjs                         | Issue, bug, or pull request related to Storybook's integration with [Next.js](https://nextjs.org/)                                                   |
| nx                             | Issue, bug, or pull request related to Storybook's integration with [NX](https://nx.dev/)                                                            |
| other                          | Storybook's miscellaneous issue or pull request                                                                                                      |
| P(n)                           | Bug or issue priority. Ranges from `0` (most urgent) to `N` (least urgent)                                                                           |
| patch                          | Bug fix and documentation pull request that will be picked to the main branch                                                                        |
| performance issue              | Issue, bug or pull request that affects Storybook's performance                                                                                      |
```

----------------------------------------

TITLE: Defining Button Stories for React (JavaScript)
DESCRIPTION: This code defines Storybook stories for a React Button component using JavaScript. It imports the Button component and defines stories for Primary, Secondary, and Tertiary variants, each with a different label and background color.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary = {
  render: () => <Button backgroundColor="#ff0" label="Button" />,
};

export const Secondary = {
  render: () => <Button backgroundColor="#ff0" label="😄👍😍💯" />,
};

export const Tertiary = {
  render: () => <Button backgroundColor="#ff0" label="📚📕📈🤓" />,
};
```

----------------------------------------

TITLE: Embedding HTML in Storybook Canvas
DESCRIPTION: Example of embedding HTML content within a Storybook Canvas component with source code display
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/index.mdx#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
<Canvas withSource={{ language: 'html', code: '<h1>hahaha</h1>' }}>
  <Story of={AccountFormStories.Standard} />
</Canvas>
```

----------------------------------------

TITLE: Adding babel-core as a dev dependency
DESCRIPTION: This command adds babel-core as a dev dependency to your project. This is required if you don't use babel in your project and are upgrading to Storybook 3.3.x.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_287

LANGUAGE: shell
CODE:
```
yarn add babel-core --dev
```

----------------------------------------

TITLE: Working with React Hooks in Storybook
DESCRIPTION: This snippet demonstrates how to use React Hooks within a Storybook story to manage component state. It showcases the use of useState to change the button's state, providing an example of advanced usage within Storybook stories. It is recommended to use args as much as possible when writing stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/index.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import React, { useState } from 'react';

import { Button } from './Button';

export default {
  title: 'Example/Button',
  component: Button,
};

const Template = (args) => {
  const [count, setCount] = useState(0);
  return <Button {...args} onClick={() => setCount(count + 1)}>Clicked {count} times</Button>;
};

export const WithHooks = Template.bind({});
WithHooks.args = {
  primary: true,
  label: 'With Hooks',
};

```

----------------------------------------

TITLE: Applying Theme Decorator in Storybook (JavaScript)
DESCRIPTION: This JavaScript snippet configures a Storybook decorator to apply themes using styled-components. It imports React, ThemeProvider, and themes, then defines a decorator that wraps each story with ThemeProvider, dynamically selecting the theme based on the 'theme' parameter.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-provider-in-preview.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { ThemeProvider } from 'styled-components';

// themes = { light, dark }
import * as themes from '../src/themes';

export default {
  decorators: [
    // 👇 Defining the decorator in the preview file applies it to all stories
    (Story, { parameters }) => {
      // 👇 Make it configurable by reading the theme value from parameters
      const { theme = 'light' } = parameters;
      return (
        <ThemeProvider theme={themes[theme]}>
          <Story />
        </ThemeProvider>
      );
    },
  ],
};
```

----------------------------------------

TITLE: Remove Highlight Story with Decorator - Svelte CSF (TS)
DESCRIPTION: This story demonstrates how to use a decorator in Svelte CSF (TS) to emit HIGHLIGHT and REMOVE_HIGHLIGHT events using the useChannel hook. It highlights specific selectors and then removes the highlight.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-remove.md#_snippet_5

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { useChannel } from 'storybook/preview-api';
  import { HIGHLIGHT, REMOVE_HIGHLIGHT } from 'storybook/highlight';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="RemoveHighlight"
  decorators=[
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        id: 'my-unique-id',
        selectors: ['header', 'section', 'footer'],
      });
      emit(REMOVE_HIGHLIGHT, 'my-unique-id');
      return storyFn();
    },
  ]
/>
```

----------------------------------------

TITLE: Configuring Storybook Test Runner with Accessibility Testing in TypeScript
DESCRIPTION: This snippet configures the Storybook test runner using TypeScript, setting up accessibility testing with axe-playwright. It injects axe before each story visit and performs accessibility checks after each visit, generating a detailed HTML report.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-config.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';
import { injectAxe, checkA11y } from 'axe-playwright';

/*
 * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api
 * to learn more about the test-runner hooks API.
 */
const config: TestRunnerConfig = {
  async preVisit(page) {
    await injectAxe(page);
  },
  async postVisit(page) {
    await checkA11y(page, 'body', {
      detailedReport: true,
      detailedReportOptions: {
        html: true,
      },
    });
  },
};

export default config;
```

----------------------------------------

TITLE: A11y Addon: Migrate from manual parameter to globals (JavaScript)
DESCRIPTION: This code snippet demonstrates how to migrate from the deprecated `manual` parameter in the A11y addon to the new `globals.a11y.manual` setting. It shows how to update story parameters and the preview.js file to enable manual mode.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
// Old way (no longer works)
export const MyStory = {
  parameters: {
    a11y: {
      manual: true
    }
  }
};

// New way
export const MyStory = {
  parameters: {
    a11y: {
      // other a11y parameters
    }
  }
  globals: {
    a11y: {
      manual: true
    }
  }
};

// To enable manual mode globally, use .storybook/preview.js:
export const initialGlobals = {
  a11y: {
    manual: true
  }
};
```

----------------------------------------

TITLE: Defining Storybook Story for Web Components (TS)
DESCRIPTION: This snippet defines a Storybook story for a Web Component named 'foo' using TypeScript. It imports Meta and StoryObj types from '@storybook/web-components-vite'. The meta object configures the story's title, component (specified as a string 'foo'), and ID. The Baz constant defines a story instance.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/other-foo-bar-story.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'OtherFoo/Bar',
  component: 'foo',
  id: 'Foo/Bar', // Or 'foo-bar' if you prefer
};

export default meta;
type Story = StoryObj;

export const Baz: Story = {
  name: 'Insert name here',
};

```

----------------------------------------

TITLE: Storybook Story Sorting with Wildcard
DESCRIPTION: This code snippet demonstrates how to use a wildcard character (*) in the `order` array of Storybook's `storySort` configuration.  The wildcard allows you to specify where "all other stories" should be displayed in the story list, enabling you to push specific categories to the end.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/naming-components-and-hierarchy.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
/* storybook-preview-with-ordered-pages-and-wildcard.md */
export const parameters = {
  options: {
    storySort: {
      order: [
        'Intro',
        'Pages',
        'Components',
        '*',
        'WIP',
      ],
    },
  },
};

```

----------------------------------------

TITLE: Exporting Storybook Story with Correct Hierarchy Separator in JavaScript
DESCRIPTION: Shows the recommended way of defining the Storybook story title using the '/' separator for hierarchical grouping. This configuration is required for Storybook 6.0 and later and ensures that stories appear under the correct sidebar grouping. The snippet exports default metadata for the 'Input' component within the 'Components/Forms' hierarchy.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/hierarchy-separator.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default {
  title: 'Components/Forms/Input',
  component: Input,
};
```

----------------------------------------

TITLE: Installing Storybook for React Vite Using npm - Shell
DESCRIPTION: This shell command installs the @storybook/react-vite package as a development dependency in a React project using the npm package manager. Prerequisites include an existing project set up with npm and Node.js installed. The command expects a package.json file in the project root and will update the file with the new dependency; it should be run in the terminal at the root of your JavaScript/React project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-install.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev @storybook/react-vite
```

----------------------------------------

TITLE: File System-Based Documentation
DESCRIPTION: Illustrates how Storybook uses the file's physical location to place documentation in the sidebar, overriding auto-generated documentation. This approach is suitable for standalone pages or component testing guidelines.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-docs/mdx.mdx#_snippet_6

LANGUAGE: MDX
CODE:
```
---
title: Docs/MDX/Custom File
---

# Custom File

This is a custom file.

<Canvas>
  <Story name="Basic">
    {/* Add a story here if needed */}
  </Story>
</Canvas>
```

----------------------------------------

TITLE: Importing Description Component
DESCRIPTION: Shows how to import the Description component from Storybook addon-docs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-description.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { Description } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Initializing Storybook Meta and Combined Stories with Play Function (Common JS)
DESCRIPTION: This code defines the CombinedStories with a play function that executes FirstStory and SecondStory before typing into 'another-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_5

LANGUAGE: js
CODE:
```
export const CombinedStories = {
  play: async ({ context, canvasElement }) => {
    const canvas = within(canvasElement);

    // Runs the FirstStory and Second story play function before running this story's play function
    await FirstStory.play(context);
    await SecondStory.play(context);
    await userEvent.type(canvas.getByTestId('another-element'), 'random value');
  },
};
```

----------------------------------------

TITLE: Demonstrating Invalid Direct Markdown Import in MDX
DESCRIPTION: Illustrates an incorrect way of importing markdown directly into an MDX file, which will not work due to syntactical differences between markdown and MDX2.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-markdown.mdx#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
{/* THIS WON'T WORK, THIS IS TO DEMONSTRATE AN ERROR */}

import ReadMe from './README.md';

# A header 

{ReadMe}
```

----------------------------------------

TITLE: Simulating User Interaction in Storybook with TypeScript
DESCRIPTION: This snippet demonstrates how to simulate user interaction within a Storybook story using `userEvent` and `within` in TypeScript. It assigns the component's root element to `canvas` and then uses `userEvent` to type text into an element and click a button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-with-canvas.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { userEvent, within } from 'storybook/test';

const meta: Meta = {
  component: 'demo-my-component',
};

export default meta;
type Story = StoryObj;

export const ExampleStory: Story = {
  play: async ({ canvasElement }) => {
    // Assigns canvas to the component root element
    const canvas = within(canvasElement);

    // Starts querying from the component's root element
    await userEvent.type(canvas.getByTestId('example-element'), 'something');
    await userEvent.click(canvas.getByRole('button'));
  },
};
```

----------------------------------------

TITLE: Configuring NavigationBasedComponent Story (JavaScript)
DESCRIPTION: Defines a Storybook story for the NavigationBasedComponent, setting the component and enabling the Next.js app directory. It also configures navigation parameters to simulate a route change to '/profile' with a query parameter 'user=1'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-override-in-story.md#_snippet_0

LANGUAGE: js
CODE:
```
import NavigationBasedComponent from './NavigationBasedComponent';

export default {
  component: NavigationBasedComponent,
  parameters: {
    nextjs: {
      appDirectory: true,
    },
  },
};

// If you have the actions addon,
// you can interact with the links and see the route change events there
export const Example = {
  parameters: {
    nextjs: {
      navigation: {
        pathname: '/profile',
        query: {
          user: '1',
        },
      },
    },
  },
};
```

----------------------------------------

TITLE: Scroll Into View Story with Decorator (Svelte TS)
DESCRIPTION: This story demonstrates how to use a decorator in Svelte to emit the SCROLL_INTO_VIEW event when the story is rendered. It uses the useChannel hook to emit the event to the Storybook channel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-scroll-into-view.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { useChannel } from 'storybook/preview-api';
import { SCROLL_INTO_VIEW } from 'storybook/highlight';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ScrollIntoView: Story = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(SCROLL_INTO_VIEW, '#footer');
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Initializing Button Stories with Common Renderer (TS)
DESCRIPTION: This snippet initializes stories for a Button component using TypeScript and a common renderer. It imports the necessary modules from '@storybook/your-framework' and defines metadata for the Button component, including documentation parameters. It also defines a primary story with specific documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

/**
 * Button stories
 * These stories showcase the button
 */
const meta = {
  component: Button,
  parameters: {
    docs: {
      description: {
        component: 'Another description, overriding the comments',
      },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/**
 * Primary Button
 * This is the primary button
 */
export const Primary: Story = {
  parameters: {
    docs: {
      description: {

```

----------------------------------------

TITLE: Importing Header Stories and Defining LoggedIn Story - JS
DESCRIPTION: This JavaScript code imports stories from a Header component and defines a LoggedIn story for a Page component in Storybook. It sets the component and merges arguments from the Header's LoggedIn story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_12

LANGUAGE: javascript
CODE:
```
// 👇 Imports all Header stories
import * as HeaderStories from './Header.stories';

export default {
  component: 'demo-page',
};

export const LoggedIn = {
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};
```

----------------------------------------

TITLE: Debugging Webpack with npm in Storybook
DESCRIPTION: Command to run Storybook with the webpack debugging flag enabled using npm. This allows developers to inspect webpack configuration and behavior during Storybook execution.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-debug-webpack-dev.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm run storybook -- --debug-webpack
```

----------------------------------------

TITLE: Configuring Storybook Meta for Angular Component
DESCRIPTION: This code configures the Storybook metadata for an Angular component, specifying the component, included stories, and excluded stories. It also defines data objects for use in the stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-with-nonstory.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent.component';

import someData from './data.json';

const meta: Meta<MyComponent> = {
  component: MyComponent,
  includeStories: ['SimpleStory', 'ComplexStory'], // 👈 Storybook loads these stories
  excludeStories: /.*Data$/, // 👈 Storybook ignores anything that contains Data
};

export default meta;

export const simpleData = { foo: 1, bar: 'baz' };
export const complexData = { foo: 1, foobar: { bar: 'baz', baz: someData } };

type Story = StoryObj<MyComponent>;

export const SimpleStory: Story = {
  args: {
    data: simpleData,
  },
};

export const ComplexStory: Story = {
  args: {
    data: complexData,
  },
};
```

----------------------------------------

TITLE: Rendering Basic Button in Storybook (TSX)
DESCRIPTION: This snippet renders a basic Button component with a primary style and a label using TypeScript. It defines the component's metadata and a story for the Button component in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Primary: Story = {
  render: () => <Button primary label="Button" />,
};
```

----------------------------------------

TITLE: Initializing Histogram Story for Solid with Typescript
DESCRIPTION: This code defines a Storybook story for the Histogram component in a Solid environment using Typescript. It imports the necessary modules and defines the component's metadata. The 'Default' story configures the component with specific arguments such as 'dataType', 'showHistogramLabels', 'histogramAccentColor', and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Histogram } from './Histogram';

const meta = {
  component: Histogram,
} satisfies Meta<typeof Histogram>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    dataType: 'latency',
    showHistogramLabels: true,
    histogramAccentColor: '#1EA7FD',
    label: 'Latency distribution',
  },
};
```

----------------------------------------

TITLE: Installing Storybook Addon Links
DESCRIPTION: Install the Storybook Links addon using yarn. This command adds the addon as a development dependency to your project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
yarn add -D @storybook/addon-links
```

----------------------------------------

TITLE: Configuring Button stories for Svelte (TS)
DESCRIPTION: This snippet configures Storybook stories for a Svelte Button component using TypeScript. It imports the Meta type from '@storybook/your-framework' (to be replaced with svelte-vite or sveltekit) and defines the component and metadata for the story. The tags array specifies that the stories should be included in the documentation page but not appear in Storybook's sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  /*
   * All stories in this file will:
   * - Be included in the docs page
   * - Not appear in Storybook's sidebar
   */
  tags: ['autodocs', '!dev'],
} satisfies Meta<typeof Button>;
export default meta;
```

----------------------------------------

TITLE: Defining Non-A11y Story in Svelte Storybook with TypeScript (CSF)
DESCRIPTION: This snippet in TypeScript configures the story structure for 'MyComponent' using '@storybook/svelte' with an a11y manual setting, for Svelte applications.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/svelte';

import MyComponent from './MyComponent.svelte';

const meta: Meta<typeof MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<typeof meta>;

export const NonA11yStory: Story = {
  globals: {
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  },
};

```

----------------------------------------

TITLE: Accessing argTypes in Storybook addon using useArgTypes hook
DESCRIPTION: This snippet demonstrates how to import and use the useArgTypes hook from Storybook's manager API to access argTypes within a custom addon panel. The hook returns an object containing argTypes that can be destructured and used in the addon's functionality.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-argtypes-with-addon.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { useArgTypes } from 'storybook/manager-api';

// inside your panel
const { argTypes } = useArgTypes();
```

----------------------------------------

TITLE: Defining a Basic Storybook Story
DESCRIPTION: Example of a simple Storybook story definition using the default naming convention.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Foo/Bar',
  component: Button,
};

export const Baz = {
  args: {
    label: 'Baz',
  },
};
```

----------------------------------------

TITLE: Running Storybook Tests with PNPM
DESCRIPTION: Executes Storybook tests using pnpm package manager with the --no-index-json flag to disable index.json file generation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-no-index-json.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
pnpm run test-storybook --no-index-json
```

----------------------------------------

TITLE: Forcing the Build of Storybook's Preview Iframe (Shell)
DESCRIPTION: This command forcefully builds Storybook's preview iframe. It's useful when experiencing issues or when combined with `--preview-url` to ensure the preview is up-to-date.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_39

LANGUAGE: shell
CODE:
```
storybook build --force-build-preview
```

----------------------------------------

TITLE: Defining Conditional ArgTypes in Storybook (Generic Typescript)
DESCRIPTION: This snippet demonstrates how to define conditional argTypes in a Storybook story using Typescript for a generic framework. It shows how to conditionally display argTypes based on the existence, truthiness, or specific values of other args or globals. It uses the `@storybook/your-framework` import, which should be replaced with the appropriate framework package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-if.md#_snippet_6

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Example } from './Example';

const meta = {
  component: Example,
  argTypes: {
    parent: { control: 'select', options: ['one', 'two', 'three'] },

    // 👇 Only shown when `parent` arg exists
    parentExists: { if: { arg: 'parent', exists: true } },

    // 👇 Only shown when `parent` arg does not exist
    parentDoesNotExist: { if: { arg: 'parent', exists: false } },

    // 👇 Only shown when `parent` arg value is truthy
    parentIsTruthy: { if: { arg: 'parent' } },
    parentIsTruthyVerbose: { if: { arg: 'parent', truthy: true } },

    // 👇 Only shown when `parent` arg value is not truthy
    parentIsNotTruthy: { if: { arg: 'parent', truthy: false } },

    // 👇 Only shown when `parent` arg value is 'three'
    parentIsEqToValue: { if: { arg: 'parent', eq: 'three' } },

    // 👇 Only shown when `parent` arg value is not 'three'
    parentIsNotEqToValue: { if: { arg: 'parent', neq: 'three' } },

    // Each of the above can also be conditional on the value of a globalType, e.g.:

    // 👇 Only shown when `theme` global exists
    parentExists: { if: { global: 'theme', exists: true } },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Configuring Button Story with Svelte (TS)
DESCRIPTION: This code configures a Storybook story for a Svelte Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines metadata for the component, including tags for documentation. It also defines a story for an experimental feature.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-in-meta-and-story.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  /*
   * All stories in this file will have these tags applied:
   * - autodocs
   * - dev (implicit default, inherited from preview)
   * - test (implicit default, inherited from preview)
   */
  tags: ['autodocs'],
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const ExperimentalFeatureStory: Story = {
  /*
   * This particular story will have these tags applied:
   * - experimental
   * - autodocs (inherited from meta)
   * - dev (inherited from meta)
   * - test (inherited from meta)
   */
  tags: ['experimental'],
};

```

----------------------------------------

TITLE: Initializing Button Story - Solid (TS)
DESCRIPTION: This code defines a Storybook story for a Solid Button component using TypeScript. It imports necessary modules, defines the component's metadata, and creates a 'Text' story that renders the button with specified arguments (label and onClick).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { action } from 'storybook/actions';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Text = {
  args: {
    label: 'Hello',
    onClick: action('clicked'),
  },
  render: ({ label, onClick }) => <Button label={label} onClick={onClick} />,
};
```

----------------------------------------

TITLE: Initializing LoginForm Meta (SolidJS)
DESCRIPTION: This code initializes the meta object for the LoginForm component in Storybook using SolidJS. It imports the necessary modules from 'storybook-solidjs' and defines the component to be documented.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { LoginForm } from './LoginForm';

const meta = {
  component: LoginForm,
} satisfies Meta<typeof LoginForm>;

export default meta;
type Story = StoryObj<typeof meta>;
```

----------------------------------------

TITLE: Storybook Init Enable Crash Reports
DESCRIPTION: This example shows how to enable sending crash reports to Storybook's telemetry.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_56

LANGUAGE: shell
CODE:
```
storybook init --enable-crash-reports
```

----------------------------------------

TITLE: Rendering Dark Theme Backgrounds in Storybook using JSX
DESCRIPTION: This snippet renders the background color palette for the dark theme. It filters out the 'color' key and creates ColorItem components for each valid background color value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/colorpalette.mdx#2025-04-22_snippet_2

LANGUAGE: JSX
CODE:
```
<ColorPalette>
  {Object.entries(convert(themes.dark).background).map(([k,v]) => {
    if(k === 'color'){
      return null
    }
    if (typeof v === 'string' && (v.match(/^#/) || v.match(/^rgb/) || k.match(/color/i))) {
      return (
        <ColorItem
          key={k}
          title={k}
          colors={{ [k]: v }}
        />
      );
    } else if (typeof v === 'object') {
      const colors = Object.entries(v).reduce((acc, [key, value]) => (typeof value === 'string' && (value.match(/^#/) || value.match(/^rgb/) || key.match(/color/i))) ? {...acc, [key]: value} : acc, {});
      return (
        <ColorItem
          key={k}
          title={k}
          colors={colors}
        />
      );
    }
    return null;
  })}
</ColorPalette>
```

----------------------------------------

TITLE: Initializing LoginForm Story with Empty Form in React (JS)
DESCRIPTION: This code initializes a Storybook story for the LoginForm component in React (JavaScript), defining the component and an empty form story. It imports necessary modules from 'storybook/test' and the LoginForm component itself.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/login-form-with-play-function.md#_snippet_2

LANGUAGE: js
CODE:
```
import { userEvent, within, expect } from 'storybook/test';

import { LoginForm } from './LoginForm';

export default {
  component: LoginForm,
};

export const EmptyForm = {};
```

----------------------------------------

TITLE: Defining Button Stories for Solid.js in Storybook
DESCRIPTION: This snippet defines a Storybook story for a Button component in Solid.js. It's identical to the React version, demonstrating how the same component can be used across different frameworks. It imports the Button, sets up the default export, and defines a 'Sample' story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-sample.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
};

export const Sample = {
  render: () => <Button label="hello button" />,
};
```

----------------------------------------

TITLE: Importing Meta from Storybook Addon Docs for Angular
DESCRIPTION: This snippet imports the Meta component from Storybook's addon-docs package, which is used to define metadata for the story or documentation page.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/angular/template/stories/core/README.mdx#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Meta } from '@storybook/addon-docs';
```

----------------------------------------

TITLE: Listing Storybook Core-server Components in Markdown
DESCRIPTION: This code snippet enumerates the main components and functionalities provided by the Storybook Core-server package. It includes CLI arg parsing, webpack configuration for the manager UI, dev server, static builder, and presets handling.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
- CLI arg parsing
- Storybook UI "manager" webpack configuration
- `storybook dev` dev server
- `storybook build` static builder
- presets handling
```

----------------------------------------

TITLE: Initializing List Story with Web Components (TypeScript)
DESCRIPTION: This code defines a Storybook story for the List component in Web Components using TypeScript. It imports necessary modules, defines the component and subcomponents, and sets up the meta object for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

import { html } from 'lit';

const meta: Meta = {
  title: 'List',
  component: 'demo-list',
  subcomponents: { ListItem: 'demo-list-item' }, // 👈 Adds the ListItem component as a subcomponent
};
export default meta;

type Story = StoryObj;
```

----------------------------------------

TITLE: Configuring staticDirs for local fonts in Storybook
DESCRIPTION: This configuration tells Storybook where to find the `fonts` directory. The `from` value is relative to the `.storybook` directory, and the `to` value is relative to the execution context of Storybook, which is likely the root of your project. This allows Storybook to serve the local font files correctly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_3

LANGUAGE: js
CODE:
```
module.exports = {
  staticDirs: [
    {
      from: '../path/to/your/fonts',
      to: 'fonts',
    },
  ],
};
```

----------------------------------------

TITLE: Remove Highlight from Element in Storybook
DESCRIPTION: Emits a `REMOVE_HIGHLIGHT` event to remove a highlight from a specific element in Storybook. The event payload contains the `id` of the highlight to be removed. This allows for selectively removing highlights from specific elements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/highlight.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
import { useEffect } from '@storybook/client-api';

export const Remove = () => {
  useEffect(() => {
    const channel = window.__STORYBOOK_ADDONS_CHANNEL__;
    channel.emit('HIGHLIGHT', { selectors: ['#root > div'], id: 'highlighted-div' });

    channel.emit('REMOVE_HIGHLIGHT', { id: 'highlighted-div' });

    return () => channel.emit('REMOVE_HIGHLIGHT');
  }, []);

  return (
    <div style={{ padding: '3rem' }}>
      <p>Highlighting the outer div</p>
    </div>
  );
};

Remove.storyName = 'remove';

```

----------------------------------------

TITLE: Configuring Storybook Manager Layout (JavaScript)
DESCRIPTION: Configures the Storybook manager to customize the layout, specifically to hide the toolbar on docs pages while respecting user preferences elsewhere. It uses the `addons.setConfig` method to define custom layout configurations, setting the `showToolbar` function within `layoutCustomisations`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-manager-toolbar-hide-on-docs.md#_snippet_0

LANGUAGE: js
CODE:
```
import { addons } from 'storybook/manager-api';

addons.setConfig({
  layoutCustomisations: {
    // Always hide the toolbar on docs pages, and respect user preferences elsewhere.
    showToolbar(state, defaultValue) {
      if (state.viewMode === 'docs') {
        return false;
      }

      return defaultValue;
    },
  },
});
```

----------------------------------------

TITLE: Specifying the Configuration Directory for Storybook Build (Shell)
DESCRIPTION: This command specifies the directory containing the Storybook configuration files (e.g., `main.js`, `preview.js`). It allows using a custom configuration directory instead of the default `.storybook`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_30

LANGUAGE: shell
CODE:
```
storybook build -c .storybook
```

----------------------------------------

TITLE: Bumping versions for Storybook release in Bash
DESCRIPTION: Commands to bump versions for a Storybook release, with options for deferred or immediate bumping.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING/RELEASING.md#2025-04-22_snippet_9

LANGUAGE: bash
CODE:
```
yarn release:version --verbose --deferred --release-type <RELEASE_TYPE> --pre-id <PRE_ID>
yarn release:version --verbose --release-type <RELEASE_TYPE> --pre-id <PRE_ID>
```

----------------------------------------

TITLE: Install sharp with Yarn
DESCRIPTION: Command to install the sharp package using Yarn. Sharp is a dependency of Next.js's image optimization feature.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_29

LANGUAGE: bash
CODE:
```
yarn add sharp
```

----------------------------------------

TITLE: ESLint Override for Custom Storybook Config Directory
DESCRIPTION: Configuration to apply the rule to a custom Storybook configuration directory.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-uninstalled-addons.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
{
  overrides: [
      {
        files: ['your-config-dir/main.@(js|cjs|mjs|ts)'],
        rules: {
          'storybook/no-uninstalled-addons': 'error'
        },
      },
    ],
}
```

----------------------------------------

TITLE: Configuring Storybook Preview with Global Types and Initial Globals in JavaScript
DESCRIPTION: This JavaScript snippet configures the Storybook preview by defining global types and initial globals. It sets up a theme global type with a toolbar that allows users to switch between 'light' and 'dark' themes. The initial theme is set to 'light'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-configure-globaltypes.md#_snippet_0

LANGUAGE: js
CODE:
```
const preview = {
  globalTypes: {
    theme: {
      description: 'Global theme for components',
      toolbar: {
        // The label to show for this toolbar item
        title: 'Theme',
        icon: 'circlehollow',
        // Array of plain string values or MenuItem shape (see below)
        items: ['light', 'dark'],
        // Change title based on selected value
        dynamicTitle: true,
      },
    },
  },
  initialGlobals: {
    theme: 'light',
  },
};

export default preview;
```

----------------------------------------

TITLE: Initializing Page stories for Solid (TS)
DESCRIPTION: This code initializes Storybook stories for the Page component in a Solid application using TypeScript. It imports the Page component and Header stories, and exports a default object configuring the component for Storybook. It also defines a 'LoggedIn' story, importing related Header stories to populate arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Page } from './Page';

//👇 Imports all Header stories
import * as HeaderStories from './Header.stories';

const meta = {
  component: Page,
} satisfies Meta<typeof Page>;

export default meta;
type Story = StoryObj<typeof meta>;

export const LoggedIn: Story = {
  args: {
    ...HeaderStories.LoggedIn.args,
  },
};
```

----------------------------------------

TITLE: Storybook Snapshot Test Generation
DESCRIPTION: This code snippet iterates through story files and stories within them to generate snapshot tests. It uses Jest's `toMatchFileSnapshot` to compare the rendered output against existing snapshots. It defines the snapshot path based on the story directory, component name, and snapshot extension.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-vitest-multi-snapshot-test.md#_snippet_0

LANGUAGE: javascript
CODE:
```
getAllStoryFiles().forEach(({ filePath, storyFile, storyDir }) => {
  // ...Previously existing code
  describe(title, () => {
    // ...Previously existing code
    stories.forEach(({ name, story }) => {
      // ...Previously existing code
      testFn(name, async () => {
        await story.run();
        // Ensures a consistent snapshot by waiting for the component to render by adding a delay of 1 ms before taking the snapshot.
        await new Promise((resolve) => setTimeout(resolve, 1));

        // 👇 Define the path to save the snapshot to:
        const snapshotPath = path.join(
          storyDir,
          options.snapshotsDirName,
          `${componentName}${options.snapshotExtension}`,
        );
        await expect(document.body.firstChild).toMatchFileSnapshot(snapshotPath);
      });
    });
  });
});
```

----------------------------------------

TITLE: Initializing TodoItem Story - React (TS)
DESCRIPTION: This code defines a Storybook story for the TodoItem component in React using TypeScript. It configures the component's metadata and includes a primary story with a render function and data loader.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/loader-story.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { TodoItem } from './TodoItem';

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
const meta = {
  component: TodoItem,
  render: (args, { loaded: { todo } }) => <TodoItem {...args} {...todo} />,
} satisfies Meta<typeof TodoItem>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  loaders: [
    async () => ({
      todo: await (await fetch('https://jsonplaceholder.typicode.com/todos/1')).json(),
    }),
  ],
};

```

----------------------------------------

TITLE: Initializing Button Stories with Angular
DESCRIPTION: This code initializes Storybook stories for an Angular Button component, defining metadata and two stories: Accessible and Inaccessible. It imports necessary modules from '@storybook/angular' and the Button component itself, configuring the component's properties and their controls.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './Button.component';

const meta: Meta<Button> = {
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
  },
};

export default meta;
type Story = StoryObj<Button>;

// This is an accessible story
export const Accessible: Story = {
  args: {
    primary: false,
    label: 'Button',
  },
};
// This is not
export const Inaccessible: Story = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};

```

----------------------------------------

TITLE: Defining Mocked Success Story with MSW - Typescript
DESCRIPTION: This code defines a Storybook story named 'MockedSuccess' that uses MSW to mock a successful API response. It intercepts GET requests to 'https://your-restful-endpoint/' and returns a predefined 'TestData' object as a JSON response. This allows the component to be tested with consistent and predictable data.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_6

LANGUAGE: typescript
CODE:
```
export const MockedSuccess: Story = {
  parameters: {
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint/', () => {
          return HttpResponse.json(TestData);
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Component (CSF - TS)
DESCRIPTION: This snippet configures the Storybook metadata for a Svelte component using TypeScript and Component Story Format (CSF). It imports defineMeta from '@storybook/addon-svelte-csf', defines the component, tags, and documentation parameters, including disabling the table of contents.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-disable-toc.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
    tags: ['autodocs'],
    parameters: {
      docs: {
        toc: {
          disable: true, // 👈 Disables the table of contents
        },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Registering Custom Storybook Addon Panel
DESCRIPTION: Shows how to register a new addon panel in Storybook using the manager API. The code creates a basic panel with a static div element, sets up the necessary identifiers, and configures the panel's rendering behavior with React.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-panel-initial.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';

import { addons, types } from 'storybook/manager-api';

import { AddonPanel } from 'storybook/internal/components';

const ADDON_ID = 'myaddon';
const PANEL_ID = `${ADDON_ID}/panel`;

addons.register(ADDON_ID, (api) => {
  addons.add(PANEL_ID, {
    type: types.PANEL,
    title: 'My Addon',
    render: ({ active }) => (
      <AddonPanel active={active}>
        <div> Storybook addon panel </div>
      </AddonPanel>
    ),
  });
});
```

----------------------------------------

TITLE: Defining Button Story with Backgrounds in Angular
DESCRIPTION: This code defines a Storybook story for an Angular Button component, configuring story-level parameters to set background options. It imports the necessary modules from '@storybook/angular' and the Button component, then defines a 'Primary' story with custom background colors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Primary: Story = {
  // 👇 Story-level parameters
  parameters: {
    backgrounds: {
      options: {
        red: { name: 'Red', value: '#f00' },
        green: { name: 'Green', value: '#0f0' },
        blue: { name: 'Blue', value: '#00f' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Defining Storybook Meta for Svelte Component (JS)
DESCRIPTION: This code defines the Storybook metadata for a Svelte component using the Svelte CSF (Component Story Format). It imports defineMeta from @storybook/addon-svelte-csf and the MyComponent.svelte. It configures the title, component, decorators, and parameters for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const meta = defineMeta({
    /* 👇 The title prop is optional.
     * See https://storybook.js.org/docs/configure/#configure-story-loading
     * to learn how to generate automatic titles
     */
    title: 'Path/To/MyComponent',
    component: MyComponent,
    decorators: [
      /* ... */
    ],
    parameters: {
      /* ... */
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring Storybook Test Runner with Image Snapshots in JavaScript
DESCRIPTION: This snippet configures the Storybook test runner to perform image snapshot testing. It sets up the test environment, waits for the page to be ready, takes a screenshot, and compares it to a stored snapshot.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-waitpageready.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { waitForPageReady } = require('@storybook/test-runner');

const { toMatchImageSnapshot } = require('jest-image-snapshot');

const customSnapshotsDir = `${process.cwd()}/__snapshots__`;

module.exports = {
  setup() {
    expect.extend({ toMatchImageSnapshot });
  },
  async postVisit(page, context) {
    // Awaits for the page to be loaded and available including assets (e.g., fonts)
    await waitForPageReady(page);

    // Generates a snapshot file based on the story identifier
    const image = await page.screenshot();
    expect(image).toMatchImageSnapshot({
      customSnapshotsDir,
      customSnapshotIdentifier: context.id,
    });
  },
};
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: This TypeScript configuration file sets up Storybook by defining the framework, specifying the location of story files, adding documentation addons, configuring documentation settings, and setting up static directories. It imports the StorybookConfig type and exports the configuration object for Storybook to use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-typical.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  // Required
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  // Optional
  addons: ['@storybook/addon-docs'],
  docs: {
    autodocs: 'tag',
  },
  staticDirs: ['../public'],
};

export default config;
```

----------------------------------------

TITLE: Initializing Button Story with Backgrounds in Web Components (TS)
DESCRIPTION: This code initializes a Storybook story for a web component button, setting a global background color and overriding it for a specific story. It imports necessary modules from '@storybook/web-components-vite' and defines the component and its metadata.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  globals: {
    // 👇 Set background value for all component stories
    backgrounds: { value: 'gray', grid: false },
  },
};

export default meta;
type Story = StoryObj;

export const OnDark: Story = {
  globals: {
    // 👇 Override background value for this story
    backgrounds: { value: 'dark' },
  },
};

```

----------------------------------------

TITLE: Mapping Complex Arg Values
DESCRIPTION: Illustrates how to map simple string arg values to complex types using the `mapping` property in `argTypes`. This is useful for values such as JSX elements that cannot be serialized to the manager or synced with the URL. It is commonly used with the `select` control type.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
export const argTypes = {
  complexValue: {
    control: 'select',
    options: ['string1', 'string2'],
    mapping: {
      string1: <div>Complex JSX 1</div>,
      string2: <div>Complex JSX 2</div>,
    },
  },
};
```

----------------------------------------

TITLE: Testing Vue Form Component with TypeScript
DESCRIPTION: TypeScript version of the Vue form component test suite using Vue Testing Library and Storybook's composeStories. Provides type safety while testing form validation states in a Vue environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/multiple-stories-test.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { fireEvent, screen } from '@testing-library/vue';

import { composeStories } from '@storybook/vue3';

import * as FormStories from './LoginForm.stories';

const { InvalidForm, ValidForm } = composeStories(FormStories);

test('Tests invalid form state', async () => {
  await InvalidForm.run();

  const buttonElement = screen.getByRole('button', {
    name: 'Submit',
  });

  fireEvent.click(buttonElement);

  const isFormValid = screen.getByLabelText('invalid-form');
  expect(isFormValid).toBeInTheDocument();
});

test('Tests filled form', async () => {
  await ValidForm.run();

  const buttonElement = screen.getByRole('button', {
    name: 'Submit',
  });

  fireEvent.click(buttonElement);

  const isFormValid = screen.getByLabelText('invalid-form');
  expect(isFormValid).not.toBeInTheDocument();
});
```

----------------------------------------

TITLE: Configuring Button Story with Angular Metadata
DESCRIPTION: This code configures a Storybook story for an Angular Button component. It imports the Button component and defines metadata, including the component itself and its associated argument types. It specifically focuses on the 'label' argument, allowing control over the button's text within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-meta.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  argTypes: {
    // 👇 All Button stories expect a label arg
    label: {
      control: 'text',
      description: 'Overwritten description',
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Initializing List Story with Svelte (TypeScript)
DESCRIPTION: This code defines a Storybook story for the List component in Svelte. It imports necessary modules and components, defines the meta object with the component and subcomponents, and creates stories for Empty and One Item scenarios using Svelte's snippet syntax.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_6

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import List from './List.svelte';
  import ListItem from './ListItem.svelte';

  const { Story } = defineMeta({
    component: List,
    subcomponents: { ListItem },
  });
</script>

<Story name="Empty" />

<Story name="One Item">
  {#snippet children(args)}
    <List {...args}>
      <ListItem />
    </List>
  {/snippet}
</Story>
```

----------------------------------------

TITLE: Using Decorator with Generic Parameter in Storybook
DESCRIPTION: This code snippet shows how to use the `Decorator` type with a generic parameter to define the type of the arguments passed to the decorator. It provides an example with a `locale` argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_145

LANGUAGE: tsx
CODE:
```
import type { Decorator } from "@storybook/react";
import { LocaleProvider } from "./locale";

const withLocale: Decorator<{ locale: "en" | "es" }> = (Story, { args }) => (
  <LocaleProvider lang={args.locale}>
    <Story />
  </LocaleProvider>
);
```

----------------------------------------

TITLE: Defining Button Stories in Angular with TypeScript (CSF 2)
DESCRIPTION: Creates a default button story for Angular components using TypeScript and CSF 2 format. The story passes args as props to the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-2-example-story.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Other imports and story implementation
export const Default: Story = (args) => ({
  props: args,
});
```

----------------------------------------

TITLE: Importing Compodoc JSON in preview.ts
DESCRIPTION: This code snippet imports the generated Compodoc JSON file and sets it for Storybook's addon-docs. This allows Storybook to display documentation generated by Compodoc.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_5

LANGUAGE: ts
CODE:
```
import type { Preview } from '@storybook/angular';

// 👇 Add these
import { setCompodocJson } from '@storybook/addon-docs/angular';
import docJson from '../documentation.json';
setCompodocJson(docJson);

const preview: Preview = {};
export default preview;
```

----------------------------------------

TITLE: Configuring Storybook Story (TS, Generic)
DESCRIPTION: This code configures a Storybook story for a Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines a Meta object to configure the component, enabling auto-generated documentation using the 'autodocs' tag. It also defines a story that is excluded from the documentation using the '!autodocs' tag.  A comment reminds the user to replace 'your-framework' with the specific framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
} satisfies Meta<typeof Button>;
export default meta;

type Story = StoryObj<typeof meta>;

export const UndocumentedStory: Story = {
  // 👇 Removes this story from auto-generated documentation
  tags: ['!autodocs'],
};
```

----------------------------------------

TITLE: Wrapping Stories with Theme Provider using withThemeFromJSXProvider
DESCRIPTION: A decorator that takes a provider component, global styles, and theme objects to wrap stories. It automatically adds a toolbar item for theme switching when multiple themes are provided.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { withThemeFromJSXProvider } from '@storybook/addon-themes';

export const decorators = [
  withThemeFromJSXProvider({
    themes: {
      light: lightTheme,
      dark: darkTheme,
    },
    defaultTheme: 'light',
    Provider: ThemeProvider,
    GlobalStyles: CssBaseline,
  }),
];
```

----------------------------------------

TITLE: Setting a Manual Title
DESCRIPTION: This JavaScript code demonstrates how to manually specify the title for a story in Storybook. This is useful for overriding the default autotitling behavior, especially after the changes in Storybook 8.0.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_62

LANGUAGE: javascript
CODE:
```
export default {
  title: "path/to/foo",
};
```

----------------------------------------

TITLE: Initializing Svelte Storybook Story with CSF (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte component named MyComponent using the Component Story Format (CSF) with TypeScript. It imports the component and defines the meta object with the component and title.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
    title: 'components/MyComponent/MyComponent',
  });
</script>

<Story name="Default" args={{ something: 'Something else'}} />
```

----------------------------------------

TITLE: Linting JavaScript Code
DESCRIPTION: This script specifically checks JavaScript files for linting errors using ESLint.
SOURCE: https://github.com/storybookjs/storybook/blob/next/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn lint:js
```

----------------------------------------

TITLE: Configuring List Story for Solid in TypeScript
DESCRIPTION: This code configures a Storybook story for the List component using Solid and TypeScript. It imports the necessary modules from 'storybook-solidjs', the List component, and the Unchecked ListItem story. It defines metadata for the story, including the title and component, and then creates a OneItem story that renders the List with a single Unchecked ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-unchecked-children.md#_snippet_3

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { List } from './List';

//👇 Instead of importing ListItem, we import the stories
import { Unchecked } from './ListItem.stories';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'List',
  component: List,
} satisfies Meta<typeof List>;

export default meta;
type Story = StoryObj<typeof meta>;

export const OneItem: Story = {
  args: {
    children: <Unchecked {...Unchecked.args} />,
  },
};
```

----------------------------------------

TITLE: Initializing Storybook with the CLI
DESCRIPTION: This command uses the Storybook CLI to update your project's configuration and dependencies to use the new package names under the @storybook namespace. It simplifies the migration process from older versions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_292

LANGUAGE: bash
CODE:
```
npx -p @storybook/cli sb init
```

----------------------------------------

TITLE: Angular 7 tsconfig.json Paths Configuration
DESCRIPTION: This JSON configuration is required to resolve conflicts between Storybook's core-js@^3.0.0 dependency and Angular 7's core-js@^2.0.0 dependency. It maps the required core-js paths to the appropriate node_modules directories, allowing Storybook to run without errors in an Angular 7 project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_252

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "paths": {
      "core-js/es7/reflect": [
        "node_modules/core-js/proposals/reflect-metadata"
      ],
      "core-js/es6/*": ["node_modules/core-js/es"]
    }
  }
}
```

----------------------------------------

TITLE: Initializing Button Story with Angular Decorators
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports necessary modules from '@storybook/angular' and defines decorators for styling and component composition, including a component wrapper and module metadata for a parent component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { componentWrapperDecorator, moduleMetadata } from '@storybook/angular';

import { Button } from './button.component';

import { Parent } from './parent.component'; // Parent contains ng-content

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Primary: Story = {
  decorators: [componentWrapperDecorator((story) => `<div style="margin: 3em">${story}</div>`)],
};

export const InsideParent: Story = {
  decorators: [
    moduleMetadata({
      declarations: [Parent],
    }),
    componentWrapperDecorator(Parent),
  ],
};
```

----------------------------------------

TITLE: Defining Storybook Meta for Svelte Button Component (CSF)
DESCRIPTION: This code defines the Storybook meta configuration for a Svelte Button component using the Component Story Format (CSF). It imports the Meta type from '@storybook/your-framework', the action function from 'storybook/actions', and the Button component. It then defines a meta object with the component and an onClick action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import { action } from 'storybook/actions';

import Button from './Button.svelte';

const meta = {
  component: Button,
  args: {
    // 👇 Create an action that appears when the onClick event is fired
    onClick: action('on-click'),
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Initializing MyComponent Story with Solid (TS)
DESCRIPTION: This code defines a Storybook story for the MyComponent using Solid (TypeScript). It imports the necessary modules and components, configures metadata, and defines a story that renders the component within a specified layout using JSX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#_snippet_5

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Layout } from './Layout';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

// This story uses a render function to fully control how the component renders.
export const Example: Story = {
  render: () => (
    <Layout>
      <header>
        <h1>Example</h1>
      </header>
      <article>
        <MyComponent />
      </article>
    </Layout>
  ),
};
```

----------------------------------------

TITLE: Initializing Button Story with Svelte CSF
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It defines the title, component, and a custom parameter for the story, utilizing the defineMeta function from '@storybook/addon-svelte-csf'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#_snippet_7

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    /* 👇 The title prop is optional.
     * See https://storybook.js.org/docs/configure/#configure-story-loading
     * to learn how to generate automatic titles
    */
    title: 'Button',
    component: Button,
    parameters: {
      myAddon: {
        data: 'This data is passed to the addon',
      },
    },
  });
</script>

<Story name="Basic"/>
```

----------------------------------------

TITLE: Defining Button Story with Backgrounds (TS)
DESCRIPTION: This code defines a Storybook story for a Button component using TypeScript and configures story-level parameters to set background options. It imports the Button component and defines a 'Primary' story with custom background colors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  // 👇 Story-level parameters
  parameters: {
    backgrounds: {
      options: {
        red: { name: 'Red', value: '#f00' },
        green: { name: 'Green', value: '#0f0' },
        blue: { name: 'Blue', value: '#00f' },
      },
    },
  },
};
```

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  // 👇 Story-level parameters
  parameters: {
    backgrounds: {
      options: {
        red: { name: 'Red', value: '#f00' },
        green: { name: 'Green', value: '#0f0' },
        blue: { name: 'Blue', value: '#00f' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Meta with Decorators
DESCRIPTION: This code snippet configures Storybook metadata using the `Meta` object. It sets a decorator that wraps each story in a `div` with a margin of 3em, providing consistent styling across all stories. The `export default meta;` statement exports the configuration for Storybook to use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#_snippet_12

LANGUAGE: javascript
CODE:
```
decorators: [(story) => html`<div style="margin: 3em">${story()}</div>`],
};
export default meta;
```

----------------------------------------

TITLE: Rendering Button with Text Label in Web Components (JavaScript)
DESCRIPTION: This code defines a Storybook story for a custom button web component using JavaScript. It imports the html function from lit-html and the action function from Storybook. The story renders the custom button with a 'Hello' label and an onClick handler that triggers the 'clicked' action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler.md#_snippet_9

LANGUAGE: js
CODE:
```
import { html } from 'lit';

import { action } from 'storybook/actions';

export default {
  component: 'custom-button',
};

export const Text = {
  render: () => html`<custom-button label="Hello" @click=${action('clicked')}></custom-button>`,
};
```

----------------------------------------

TITLE: Setting Project Annotations with Storybook for React in TypeScript
DESCRIPTION: This snippet sets up project annotations in a React environment using TypeScript for Storybook. It imports `beforeAll` from Vitest and applies accessibility and project-specific annotations. Dependencies include `@storybook/react` and `@storybook/addon-a11y`. It supports customization with additional project annotations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { beforeAll } from 'vitest';

import { setProjectAnnotations } from '@storybook/react';

// Import the a11y addon annotations
import * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';

// Optionally import your own annotations
import * as projectAnnotations from './preview';

const project = setProjectAnnotations([
  // Add the a11y addon annotations
  a11yAddonAnnotations,
  projectAnnotations,
]);

beforeAll(project.beforeAll);
```

----------------------------------------

TITLE: Configuring Common Button Story
DESCRIPTION: This code configures a Storybook story for a Button component in a common JavaScript environment. It imports the Button component and defines metadata including parameters for customizing the background grid's appearance, such as cell size, opacity, and offsets.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-grid.md#_snippet_5

LANGUAGE: js
CODE:
```
import { Button } from './Button';

// To apply a grid to all stories of Button:
export default {
  component: Button,
  parameters: {
    backgrounds: {
      grid: {
        cellSize: 20,
        opacity: 0.5,
        cellAmount: 5,
        offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
        offsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'
      },
    },
  },
};
```

----------------------------------------

TITLE: GitHub Actions workflow for Storybook tests
DESCRIPTION: This YAML file defines a GitHub Actions workflow to run Storybook tests on deployment success. It sets up Node.js, installs dependencies, runs the tests, and passes the deployment URL to the tests via an environment variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_6

LANGUAGE: yaml
CODE:
```
name: Storybook Tests
on: deployment_status
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Install dependencies
        run: yarn
      - name: Run Storybook tests
        run: yarn test-storybook
        env:
          SB_URL: '${{ github.event.deployment_status.target_url }}'
```

----------------------------------------

TITLE: Enabling Crash Reports for Storybook Telemetry (Shell)
DESCRIPTION: This command enables sending crash reports to Storybook's telemetry, helping the Storybook team identify and fix issues. It's disabled by default.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_41

LANGUAGE: shell
CODE:
```
storybook build --enable-crash-reports
```

----------------------------------------

TITLE: Rendering Button with Render Function
DESCRIPTION: This snippet demonstrates how to use a render function in Storybook to define how a Button component is rendered. It specifies the component to use and the template for rendering, along with a decorator to add styling.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#_snippet_10

LANGUAGE: javascript
CODE:
```
export const Primary: Story = {
  render: () => ({
    components: { Button },
    template: '<Button primary label="Hello World" />',
  }),
  decorators: [() => ({ template: '<div style="margin: 3em;"><story /></div>' })],
};
```

----------------------------------------

TITLE: Initializing Button Story for React (TS)
DESCRIPTION: This code initializes a Storybook story for a React Button component using TypeScript. It defines the component's metadata, including title, component, and parameters for Storybook addons. The Basic story renders the Button component with the text 'Hello'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-addon-example.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
  //👇 Creates specific parameters for the story
  parameters: {
    myAddon: {
      data: 'This data is passed to the addon',
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Basic: Story = {
  render: () => <Button>Hello</Button>,
};
```

----------------------------------------

TITLE: Referencing Storybook Builder Package in Markdown
DESCRIPTION: This snippet mentions the separate implementation of the preview (iframe) side in pluggable builders, specifically referencing the @storybook/builder-webpack5 package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/README.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
- `@storybook/builder-webpack5`
```

----------------------------------------

TITLE: Configuring A11y Parameters in Web Components CSF with JavaScript
DESCRIPTION: Example of configuring accessibility parameters for Web Components using Component Story Format (CSF) in JavaScript. Shows how to specify the component selector and set up accessibility testing rules.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-story-config.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
export default {
  component: 'my-component',
};

export const ExampleStory = {
  parameters: {
    a11y: {
      element: 'body',
      config: {
        rules: [
          {
            // The autocomplete rule will not run based on the CSS selector provided
            id: 'autocomplete-valid',
            selector: '*:not([autocomplete="nope"])',
          },
          {
            // Setting the enabled option to false will disable checks for this particular rule on all stories.
            id: 'image-alt',
            enabled: false,
          },
        ],
      },
      /*
       * Axe's options parameter
       * See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter
       * to learn more about the available options.
       */
      options: {},
    },
  },
  globals: {
    a11y: {
      // Optional flag to prevent the automatic check
      manual: true,
    },
  },
};
```

----------------------------------------

TITLE: Configuring Test Tags in JavaScript Stories
DESCRIPTION: Shows how to configure the 'no-tests' tag at both the component and story level in JavaScript/JSX. The tag is applied to exclude stories from test execution when enabled in the test-runner configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-exclude-tags.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
  tags: ['no-tests'], // 👈 Provides the `no-tests` tag to all stories in this file
};

export const ExcludeStory = {
  //👇 Adds the `no-tests` tag to this story to exclude it from the tests when enabled in the test-runner configuration
  tags: ['no-tests'],
};
```

----------------------------------------

TITLE: Rendering Checkbox Story in MDX for Svelte using CSF
DESCRIPTION: This snippet demonstrates how to import and render a Checkbox component story for Svelte using Component Story Format (CSF) in Storybook documentation. It imports the Canvas component and Checkbox stories, then renders the Unchecked story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-story.md#2025-04-22_snippet_2

LANGUAGE: mdx
CODE:
```
import { Canvas } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories';

<Canvas of={CheckboxStories.Unchecked} />
```

----------------------------------------

TITLE: Highlighting elements in Angular Storybook
DESCRIPTION: This story uses the componentWrapperDecorator to emit a HIGHLIGHT event to the Storybook channel, configuring selectors for highlighting elements (h2, a, .storybook-button) and adding custom menu items with titles, descriptions, and click events. It depends on @storybook/angular, storybook/preview-api, and storybook/highlight.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-menu.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';
import { componentWrapperDecorator } from '@storybook/angular';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const StyledHighlight: Story = {
  decorators: [
    componentWrapperDecorator((story) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        menu: [
          {
            id: 'button-name',
            title: 'Login',
            description: 'Navigate to the login page',
            clickEvent: 'my-menu-click-event',
          },
          {
            id: 'h2-home',
            title: 'Acme',
            description: 'Navigate to the home page',
          },
        ],
      });
      return story;
    }),
  ],
};
```

----------------------------------------

TITLE: Referencing Universal Store Documentation in Markdown
DESCRIPTION: This snippet provides links to the Universal Store's JSDocs and test files for detailed documentation and usage examples. It emphasizes that the API is experimental and subject to change.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/shared/universal-store/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Universal Store

The Universal Store API is used to manage state and events that should be synced across multiple environments, such as the server, the manager or the preview.

It is still highly experimental, and the API is subject to change - please don't use it.

For docs, see [UniversalStore's JSDocs](./index.ts). For usage examples and expected behavior, see [the tests](./index.test.ts)
```

----------------------------------------

TITLE: Setting Project Annotations with Storybook for Svelte in TypeScript
DESCRIPTION: This script configures project annotations for a Svelte application using TypeScript with Storybook. It imports necessary modules from Vitest and sets annotations, using a11y and optional project annotations. It mentions the possibility to switch to `@storybook/sveltekit` for SvelteKit projects.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-test-setup.md#2025-04-22_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { beforeAll } from 'vitest';

// Replace @storybook/svelte with @storybook/sveltekit if you are using SvelteKit
import { setProjectAnnotations } from '@storybook/svelte';

// Import the a11y addon annotations
import * as a11yAddonAnnotations from '@storybook/addon-a11y/preview';

// Optionally import your own annotations
import * as projectAnnotations from './preview';

const project = setProjectAnnotations([
  // Add the a11y addon annotations
  a11yAddonAnnotations,
  projectAnnotations,
]);

beforeAll(project.beforeAll);
```

----------------------------------------

TITLE: Initializing Svelte Button Story with Meta (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript. It imports the Meta type from Storybook, defines the component to be the Button, and sets up parameters for handling actions based on a regular expression. It uses satisfies Meta to ensure type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-matching-argtypes.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  parameters: { actions: { argTypesRegex: '^on.*' } },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Initializing Checkbox Storybook story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Checkbox component using the Component Story Format (CSF). It imports the Checkbox component and defines the component's metadata, including the title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#_snippet_2

LANGUAGE: js
CODE:
```
import CheckBox from './Checkbox.svelte';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Design System/Atoms/Checkbox',
  component: CheckBox,
};
```

----------------------------------------

TITLE: Configure Storybook Framework with Preact Vite in JavaScript
DESCRIPTION: This JavaScript snippet configures Storybook to use the Preact Vite framework. It replaces the previous webpack configuration with the new Vite configuration. This change is essential for projects migrating from webpack to Vite.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-add-framework.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  // framework: '@storybook/preact-webpack5', 👈 Remove this
  framework: '@storybook/preact-vite', // 👈 Add this
};
```

----------------------------------------

TITLE: Importing Checkbox Stories for Standard CSF
DESCRIPTION: MDX configuration for standard Component Story Format (CSF), importing Checkbox stories without specific framework extension
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-imports.md#2025-04-22_snippet_2

LANGUAGE: mdx
CODE:
```
import { Canvas, Meta } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories';
```

----------------------------------------

TITLE: Initializing Svelte Button Stories
DESCRIPTION: This code initializes Storybook stories for a Svelte Button component, defining metadata and two stories: Accessible and Inaccessible. It imports the Button component and configures its properties and controls within the Storybook environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_7

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  argTypes: {
    backgroundColor: { control: 'color' },
  },
};

// This is an accessible story
export const Accessible = {
  args: {
    primary: false,
    label: 'Button',
  },
};

// This is not
export const Inaccessible = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};

```

----------------------------------------

TITLE: Disabling Telemetry in Storybook with npm
DESCRIPTION: Command to run Storybook with telemetry disabled using npm. Note the double dash syntax required for passing the telemetry flag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-disable-telemetry-flag.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
npm run storybook -- --disable-telemetry
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: JavaScript configuration for Storybook's main.js file. Defines the framework to use, story file patterns to load, and enables crash reports for telemetry events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-telemetry-main-enable-crash-reports.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    enableCrashReports: true, // 👈 Appends the crash reports to the telemetry events
  },
};
```

----------------------------------------

TITLE: Install Storybook Preact Vite Framework
DESCRIPTION: Installs the @storybook/preact-vite framework as a dependency to enable Storybook in a Preact project using Vite. This command adds the necessary packages to your project for Storybook integration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/preact-vite.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install -D @storybook/preact-vite
```

LANGUAGE: bash
CODE:
```
yarn add -D @storybook/preact-vite
```

LANGUAGE: bash
CODE:
```
pnpm add -D @storybook/preact-vite
```

----------------------------------------

TITLE: Initializing Button Story for Web Components
DESCRIPTION: This code initializes a Storybook story for a Web Components Button component. It defines the title and component for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#_snippet_9

LANGUAGE: js
CODE:
```
export default {
  title: 'Button',
  component: 'demo-button',
};
```

----------------------------------------

TITLE: Importing IconGallery Component in Storybook
DESCRIPTION: This snippet shows how to import the IconGallery component from Storybook's addon-docs blocks. It's a simple import statement used in MDX files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-icongallery.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import { IconGallery } from '@storybook/addon-docs/blocks';
```

----------------------------------------

TITLE: Setting GitHub and NPM tokens in .env
DESCRIPTION: This snippet shows how to set the GitHub and NPM tokens in a `.env` file. These tokens are used for authentication and authorization when publishing the addon to NPM and GitHub.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-addons.mdx#_snippet_5

LANGUAGE: Plaintext
CODE:
```
GH_TOKEN=value_you_just_got_from_github
NPM_TOKEN=value_you_just_got_from_npm
```

----------------------------------------

TITLE: Defining Button Story with Layout in Web Components (JS)
DESCRIPTION: This code defines a Storybook story for a Web Components Button component with a centered layout using JavaScript. It exports a default object containing the component name ('demo-button'), along with a named export 'WithLayout' that sets the layout parameter to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
};

export const WithLayout = {
  parameters: {
    layout: 'centered',
  },
};
```

----------------------------------------

TITLE: Configure ArgsTable default value
DESCRIPTION: Configures the value that is shown in the ArgsTable doc block using the `table.defaultValue` setting.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_192

LANGUAGE: JavaScript
CODE:
```
export default {
  component: MyComponent,
  argTypes: {
    argName: {
      table: { defaultValue: { summary: "SomeType<T>" } },
    },
  },
};
```

----------------------------------------

TITLE: Handling HOC Components with Duplicate DisplayNames in Storybook Info Addon
DESCRIPTION: Demonstrates a solution for GitHub issue #1814, showing how to handle Higher Order Components (HOCs) that may have duplicate display names in the Info addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_12

LANGUAGE: jsx
CODE:
```
const hoc = WrapComponent => ({ ...props }) => <WrapComponent {...props} />;

const Input = hoc(() => <input type="text" />);

const TextArea = hoc(({ children }) => <textarea>{children}</textarea>);

storiesOf('Addons|Info.GitHub issues', module).add(
  '#1814',
  withInfo('Allow Duplicate DisplayNames for HOC #1814')(() => (
    <div>
      <Input />
      <TextArea />
    </div>
  ))
);
```

----------------------------------------

TITLE: Correct Story Name Usage in Storybook CSF
DESCRIPTION: Example showing correct usage where the story name is different from what would be automatically generated from the export name, providing a meaningful distinction.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-redundant-story-name.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export const PrimaryButton = {
  name: 'I am the primary',
};
```

----------------------------------------

TITLE: Adding Decorators and Parameters in MDX
DESCRIPTION: This demonstrates how to add decorators and parameters to stories in MDX format. It shows how to add them both at the Meta level (affecting all stories) and at the individual Story level.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_4

LANGUAGE: markdown
CODE:
```
<Meta
  title='MyComponent'
  decorators={[ ... ]}
  parameters={{ ... }}
/>

<Story name="story" decorators={[ ... ]} parameters={{ ... }} >
...
</Story>
```

----------------------------------------

TITLE: Initializing Storybook Preview with Vue Decorator (JS)
DESCRIPTION: This snippet configures a Storybook preview for Vue using JavaScript, adding a decorator that wraps each story with a div element, applying a 3em margin. It uses a functional component as a decorator and defines a template for rendering the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-global-decorator.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  decorators: [
    (story) => ({
      components: { story },
      template: '<div style="margin: 3em;"><story /></div>',
    }),
  ],
};
```

----------------------------------------

TITLE: Initializing Storybook Meta for Solid Component (TypeScript)
DESCRIPTION: This code initializes the Storybook meta object for a Solid component using TypeScript, defining the component to be used in the stories. It imports the necessary modules from 'storybook-solidjs' and the component itself, and defines a story that renders the component with a specific prop value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {};

export const WithProp: Story = {
  render: () => <MyComponent prop="value" />,
};

```

----------------------------------------

TITLE: Configuring Storybook Preview with Angular Theme Provider
DESCRIPTION: This snippet configures the Storybook preview for an Angular project, using `componentWrapperDecorator` to wrap stories with a `ThemeProvider` component. It demonstrates how to apply a default theme to all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-with-styled-components-decorator.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { componentWrapperDecorator } from '@storybook/angular';
import type { Preview } from '@storybook/angular';

import { ThemeProvider } from './theme-provider.component';

const preview: Preview = {
  decorators: [
    moduleMetadata({ declarations: [ThemeProvider] }),
    componentWrapperDecorator(
      (story) => `<theme-provider class="default">${story}</theme-provider>`,
    ),
  ],
};
export default preview;

// or with globals of story context
const preview: Preview = {
  decorators: [
    moduleMetadata({ declarations: [ThemeProvider] }),
    componentWrapperDecorator(
      (story) => `<theme-provider [class]="theme">${story}</theme-provider>`,
      ({ globals }) => ({ theme: globals.theme }),
    ),
  ],
};
export default preview;
```

----------------------------------------

TITLE: Configure ArgTypes with Options, Labels, and Mapping
DESCRIPTION: This code snippet shows how to configure `argTypes` with `options`, `labels`, and `mapping` for radio/check/select controls in Storybook. The `options` are specified as an array, and `control.labels` is used to customize labels. A `mapping` can be used to deal with complex values.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_201

LANGUAGE: javascript
CODE:
```
argTypes: {
  answer:
    options: ['yes', 'no'],
    mapping: {
      yes: <Check />,
      no: <Cross />,
    },
    control: {
      type: 'radio',
      labels: {
        yes: 'да',
        no: 'нет',
      }
    }
  }
}
```

----------------------------------------

TITLE: Building Storybook with npm
DESCRIPTION: This command uses npm to run the build-storybook script, which builds Storybook for the project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/build-storybook-production-mode.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
npm run build-storybook
```

----------------------------------------

TITLE: Correct Usage of Inline Meta Properties in Storybook CSF (JavaScript)
DESCRIPTION: This snippet shows the correct way to define meta properties inline within the default export of a Storybook CSF file, as recommended by the rule. All properties are defined directly in the export object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/meta-inline-properties.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Button',
  args: { primary: true },
  component: Button,
};
```

----------------------------------------

TITLE: Attaching MDX file to CSF file - MDX
DESCRIPTION: This code snippet shows how to attach an MDX file to a CSF (Component Story Format) file to document stories. It uses the `Meta` block to associate the MDX file with the CSF file and the `Story` block to render specific stories from the CSF file. The `of` prop in `Meta` and `Story` components links the MDX documentation to the corresponding CSF file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_126

LANGUAGE: mdx
CODE:
```
import { Meta, Story } from "@storybook/blocks";
import * as ComponentStories from "./some-component.stories";

<Meta of={ComponentStories} />

<Story of={ComponentStories.Primary} />
```

----------------------------------------

TITLE: Setting the Parser for Storybook Migrate
DESCRIPTION: Sets the jscodeshift parser to be used during the migration process. Available parsers include `babel`, `babylon`, `flow`, `ts`, and `tsx`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_87

LANGUAGE: Shell
CODE:
```
storybook migrate --parser tsx
```

----------------------------------------

TITLE: Initializing Button Story - Common (TS)
DESCRIPTION: This code defines a basic Storybook story for a Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and the Button component. The 'Basic' story configures documentation parameters to control the source display.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {
  parameters: {
    docs: {
      canvas: { sourceState: 'shown' },
    },
  },
};
```

----------------------------------------

TITLE: Setting Up Button Stories with Common Renderer
DESCRIPTION: This snippet sets up stories for a Button component using a common renderer. It imports the Button component and defines a default export containing the component's metadata and documentation parameters. It also defines a primary story with specific documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Button } from './Button';

/**
 * Button stories
 * These stories showcase the button
 */
export default {
  component: Button,
  parameters: {
    docs: {
      description: {
        component: 'Another description, overriding the comments',
      },
    },
  },
};

/**
 * Primary Button
 * This is the primary button
 */
export const Primary = {
  parameters: {
    docs: {
      description: {
        story: 'Another description on the story, overriding the comments',
      },
    },
  },
};
```

----------------------------------------

TITLE: Defining Basic Button Story - Svelte CSF (TS)
DESCRIPTION: This code defines a basic Storybook story for a Svelte Button component using TypeScript and the Component Story Format (CSF). It imports defineMeta from '@storybook/addon-svelte-csf' and the Button component. The meta object is created using defineMeta, and the Basic story sets documentation parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const meta = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Basic"
  parameters={{
    docs: {
      source: { language: 'tsx' },
    },
  }} />
```

----------------------------------------

TITLE: Defining Button Story with Layout in Svelte (Typescript)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component with a centered layout using module script and Typescript. It imports 'defineMeta' from '@storybook/addon-svelte-csf' and the Button component, then uses 'defineMeta' to configure the story with the layout parameter set to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
  name="WithLayout"
  parameters={{
    layout: 'centered',
  }}
/>
```

----------------------------------------

TITLE: Defining Locale Global Type in Storybook
DESCRIPTION: This example demonstrates how to implement a new global called **locale** for internationalization, which shows a flag on the right side of the toolbar. It adds the configuration in `.storybook/preview.js|ts`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/toolbars-and-globals.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
const locales = {
  en: 'English',
  es: 'Español',
  zh: '中文',
};

export const globalTypes = {
  locale: {
    name: 'Locale',
    description: 'Internationalization locale',
    defaultValue: 'en',
    toolbar: {
      icon: 'globe',
      items: Object.entries(locales).map(([key, value]) => ({
        value: key,
        title: value,
        right: key,
      })),
      showName: true,
    },
  },
};

```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet provides a TypeScript configuration for setting up Storybook. Similar to the JavaScript version, it requires replacing 'your-framework' with the desired framework. It defines the types for configuration with 'StorybookConfig' and includes story paths and Webpack settings.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-disable-webpack-defaults.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    disableWebpackDefaults: true,
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook Background Values in TypeScript
DESCRIPTION: Sets up background color options in Storybook using the values array syntax in TypeScript with proper typing. This configuration imports the Preview type from Storybook and defines two background color presets that can be used across stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-migrate-backgrounds-globals.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)
import type { Preview } from '@storybook/your-renderer';

const preview: Preview = {
  parameters: {
    backgrounds: {
      values: [
        { name: 'twitter', value: '#00aced' },
        { name: 'facebook', value: '#3b5998' },
      ],
    },
  },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Storybook Main Settings in TypeScript
DESCRIPTION: TypeScript configuration file for Storybook that provides type-safe configuration using StorybookConfig type. Defines the framework, story patterns, and external references with proper type checking.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-ref-local.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  refs: {
    react: {
      title: 'React',
      url: 'http://localhost:7007',
    },
    angular: {
      title: 'Angular',
      url: 'http://localhost:7008',
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook Addon Settings and Parameters
DESCRIPTION: Defines core configuration for a Storybook addon including preview entry points, manager entries, and default background parameters. Exports functions to handle entry configuration and manager entries, along with default background color presets for light and dark themes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-preset-example.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export function config(entry = []) {
  return [...entry, require.resolve('./defaultParameters')];
}

export function managerEntries(entries) {
  return [...entries, require.resolve('./register')];
}

export default {
  parameters: {
    backgrounds: {
      values: [
        { name: 'light', value: '#F8F8F8' },
        { name: 'dark', value: '#333333' },
      ],
    },
  },
};
```

----------------------------------------

TITLE: Importing Tailwind CSS in Storybook Preview
DESCRIPTION: Diff showing how to import the Tailwind CSS file into the .storybook/preview.js file. This step ensures that Tailwind styles are available to all stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/getting-started/tailwind.md#2025-04-22_snippet_2

LANGUAGE: diff
CODE:
```
import { Preview } from '@storybook/your-renderer';

+import '../src/index.css';

const preview: Preview = {
  parameters: { /* ... */ },
};

export default preview;
```

----------------------------------------

TITLE: Configuring Svelte Story for Example Component (TS)
DESCRIPTION: This snippet configures a Storybook story for the Example component using Svelte with TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines the component and its argument types, specifically describing the 'value' property of a slider.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-description.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Example from './Example.svelte';

const meta = {
  component: Example,
  argTypes: {
    value: {
      description: 'The value of the slider',
    },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Highlighting elements in Svelte Storybook (CSF)
DESCRIPTION: This story uses a decorator within a Svelte CSF story to emit a HIGHLIGHT event to the Storybook channel, configuring selectors for highlighting elements (h2, a, .storybook-button) and adding custom menu items with titles, descriptions, and click events. It depends on @storybook/addon-svelte-csf, storybook/preview-api, and storybook/highlight.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-menu.md#_snippet_3

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { useChannel } from 'storybook/preview-api';
  import { HIGHLIGHT } from 'storybook/highlight';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="StyledHighlight"
  decorators=[
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        menu: [
          {
            id: 'button-name',
            title: 'Login',
            description: 'Navigate to the login page',
            clickEvent: 'my-menu-click-event',
          },
          {
            id: 'h2-home',
            title: 'Acme',
            description: 'Navigate to the home page',
          },
        ],
      });
      return storyFn();
    },
  ]
/>
```

----------------------------------------

TITLE: Configuring SWC in Storybook with TypeScript
DESCRIPTION: A TypeScript configuration example for customizing SWC in Storybook's main.ts file. It imports necessary types from @swc/core and Storybook, then defines a strongly-typed configuration object with framework settings and a swc function for custom configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-swc.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
import type { Options } from '@swc/core';
// Replace your-framework with the webpack-based framework you are using (e.g., react-webpack5)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: {
    name: '@storybook/your-framework',
    options: {},
  },
  swc: (config: Options, options): Options => {
    return {
      ...config,
      // Apply your custom SWC configuration
    };
  },
};

export default config;
```

----------------------------------------

TITLE: Initializing Button Story with Backgrounds in Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF), setting a global background color and overriding it for a specific story. It imports necessary modules from '@storybook/addon-svelte-csf' and defines the component and its metadata.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-define-globals.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    globals: {
      // 👇 Set background value for all component stories
      backgrounds: { value: 'gray', grid: false },
    },
  });
</script>

<!-- 👇 Override background value for this story -->
<Story
  name="OnDark"
  globals={{
    backgrounds: { value: "dark" },
  }}
/>

```

----------------------------------------

TITLE: Using subpath imports for preview - Typescript
DESCRIPTION: CSF Factories leverages subpath imports to simplify importing constructs from the preview file. Subpath imports offer a more convenient and maintainable approach compared to relative path imports, as they won't break if you move story files around.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/csf/csf-factories.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
// ✅ Subpath imports won't break if you move story files around
import preview from '#.storybook/preview';

// ❌ Relative imports will break if you move story files around
import preview from '../../../.storybook/preview';
```

----------------------------------------

TITLE: Disabling DocsPage at Component Level
DESCRIPTION: Example of disabling DocsPage for a specific component in the story file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/docspage.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { Button } from './Button';

export default {
  title: 'Demo/Button',
  component: Button,
  parameters: { docs: { page: null } },
};
```

----------------------------------------

TITLE: Starting Storybook Server for Ember Demo
DESCRIPTION: This command launches the Storybook server, allowing you to view and interact with the Ember components in the Storybook interface.
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/ember-cli/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
yarn storybook
```

----------------------------------------

TITLE: Configuring Storybook Story for Component (Common)
DESCRIPTION: This code configures a Storybook story for a component named 'Example'. It specifies the component and defines the 'value' argument type, including its default value and type summary, which are displayed in the Storybook UI. This configuration is intended to be framework-agnostic.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#_snippet_3

LANGUAGE: js
CODE:
```
import { Example } from './Example';

export default {
  component: Example,
  argTypes: {
    value: {
      table: {
        defaultValue: { summary: 0 },
        type: { summary: 'number' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Updating Viewport Configuration in Storybook
DESCRIPTION: This snippet demonstrates the change in the viewport addon configuration format. The `viewport` parameter now uses an `options` property instead of `viewports` to define selectable viewports.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_38

LANGUAGE: diff
CODE:
```
// .storybook/preview.js
export const parameters = {
  viewport: {
-   viewports: {
-     iphone5: {
-       name: 'phone',
-       styles: {
-         width: '320px',
-         height: '568px',
-       },
-     },
-    },
+   options: {
+     iphone5: {
+       name: 'phone',
+       styles: {
+         width: '320px',
+         height: '568px',
+       },
+     },
+   },
  },
};
```

----------------------------------------

TITLE: Prerelease steps
DESCRIPTION: This script outlines the steps for creating a Storybook prerelease. It includes checking out the next branch, generating and editing the changelog, cleaning and building the project, publishing the release, and updating the release page.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.old.md#_snippet_18

LANGUAGE: sh
CODE:
```
# make sure you current with origin/next.
git checkout next
git status

# generate changelog and edit as appropriate
# generates a Next section
yarn changelog:next x.y.z-alpha.a

# Edit the changelog/PRs as needed, then commit
git commit -m "x.y.z-alpha.a changelog"

# clean build
yarn bootstrap --reset --core

# publish and tag the release
yarn run publish:next

# update the release page
open https://github.com/storybookjs/storybook/releases
```

----------------------------------------

TITLE: Configuring Storybook Story for Svelte Component (CSF)
DESCRIPTION: This code configures a Storybook story for a Svelte component named 'Example' using the Component Story Format (CSF). It specifies the component and defines the 'value' argument type, including its default value and type summary, which are displayed in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-table.md#_snippet_2

LANGUAGE: js
CODE:
```
import Example from './Example.svelte';

export default {
  component: Example,
  argTypes: {
    value: {
      table: {
        defaultValue: { summary: 0 },
        type: { summary: 'number' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Dynamic Mock Provider in Storybook Preview
DESCRIPTION: This snippet shows how to create a flexible decorator that reads the theme from story parameters. It allows for dynamic theme switching in individual stories without repeating the provider setup.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-providers.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { ThemeProvider } from 'styled-components';

const lightTheme = {
  // Light theme properties
};

const darkTheme = {
  // Dark theme properties
};

export const decorators = [
  (Story, context) => {
    const theme = context.parameters.theme === 'dark' ? darkTheme : lightTheme;
    return (
      <ThemeProvider theme={theme}>
        <Story />
      </ThemeProvider>
    );
  },
];
```

----------------------------------------

TITLE: Initializing Button Story - Svelte (TS)
DESCRIPTION: This code defines a basic Storybook story for a Svelte Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and the Button component. The 'Basic' story configures documentation parameters to control the source display.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-canvas-parameter.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {
  parameters: {
    docs: {
      canvas: { sourceState: 'shown' },
    },
  },
};
```

----------------------------------------

TITLE: Svelte CSF Story Configuration (Svelte)
DESCRIPTION: Configures a Storybook story for a Svelte component using Component Story Format (CSF) directly within a Svelte file. It imports `defineMeta` from `@storybook/addon-svelte-csf`, defines the component metadata, and creates a story using the `Story` component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component.md#_snippet_10

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import YourComponent from './YourComponent.svelte';

  //👇 This export determines where your story goes in the story list
  const { Story } = defineMeta({
    component: YourComponent,
  });
</script>

<Story
  name="FirstStory"
  args={{
    /*👇 The args you need here will depend on your component */
  }}
/>
```

----------------------------------------

TITLE: Initializing Button Storybook story for Svelte - TS
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript. It imports the Button component and defines its metadata, including documentation parameters to exclude the 'style' control. It uses 'your-framework' as a placeholder for the actual framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-argtypes-parameter.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Button from './Button.svelte';

const meta = {
  component: Button,
  parameters: {
    docs: {
      controls: { exclude: ['style'] },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Initializing Svelte Checkbox Story (CSF - TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Checkbox component using TypeScript and the Component Story Format (CSF). It imports 'defineMeta' from '@storybook/addon-svelte-csf' and the Checkbox component. It defines the component's metadata using 'defineMeta' and exports an 'Unchecked' story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Checkbox from './Checkbox.svelte';

  const { Story } = defineMeta({
    component: Checkbox,
  });
</script>

<Story
  name="Unchecked"
  args={{
    label: 'Unchecked',
  }}
/>
```

----------------------------------------

TITLE: Initializing Svelte CSF Story (TS)
DESCRIPTION: This snippet initializes a Svelte Component Story Format (CSF) story for a component using TypeScript. It imports the necessary modules from '@storybook/addon-svelte-csf' and the component itself, then defines a story with specific arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-vite-env-variables.md#_snippet_3

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="ExampleStory"
  args={{
    propertyA: import.meta.env.STORYBOOK_DATA_KEY,
    propertyB: import.meta.env.VITE_CUSTOM_VAR,
  }}
/>
```

----------------------------------------

TITLE: Defining Histogram Story with TypeScript for Web Components
DESCRIPTION: This code defines a Storybook story for the Histogram component using TypeScript for Web Components. It imports the necessary modules and defines a default story with arguments to configure the component's properties. It uses type annotations for better type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#_snippet_14

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'histogram-component',
};

export default meta;
type Story = StoryObj;

export const Default: Story = {
  args: {
    dataType: 'latency',
    showHistogramLabels: true,
    histogramAccentColor: '#1EA7FD',
    label: 'Latency distribution',
  },
};
```

----------------------------------------

TITLE: Storybook Configuration (TypeScript)
DESCRIPTION: Configures Storybook using TypeScript, defining the framework, stories, and Vite configuration. It imports StorybookConfig and exports a default configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-vite-final.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  // Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  async viteFinal(config, { configType }) {
    const { mergeConfig } = await import('vite');

    if (configType === 'DEVELOPMENT') {
      // Your development configuration goes here
    }
    if (configType === 'PRODUCTION') {
      // Your production configuration goes here.
    }
    return mergeConfig(config, {
      // Your environment configuration here
    });
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Web Components Storybook Story (JS)
DESCRIPTION: This code configures a Storybook story for a web component button using JavaScript. It defines a default export object that configures the component and enables auto-generated documentation using the 'autodocs' tag. It also defines a story that is excluded from the documentation using the '!autodocs' tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-story.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  title: 'Button',
  component: 'demo-button',
  //👇 Enables auto-generated documentation for this component and includes all stories in this file
  tags: ['autodocs'],
};

export const UndocumentedStory = {
  // 👇 Removes this story from auto-generated documentation
  tags: ['!autodocs'],
};
```

----------------------------------------

TITLE: Overriding Background Value in Story - Diff
DESCRIPTION: This code snippet illustrates how to override the background value for a specific story using the `globals` property. This locks the story to a specific background, preventing changes via the addon UI. Feature flag `backgroundsStoryGlobals` must be set to `true` in `.storybook/main.ts`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_37

LANGUAGE: diff
CODE:
```
// Button.stories.ts
export default {
  component: Button,
- parameters: {
-   backgrounds: {
-     default: "twitter",
-   },
- },
+ globals: {
+   backgrounds: { value: "twitter" },
+ },
};
```

----------------------------------------

TITLE: Configuring Storybook Meta for Vue Button Component (TS)
DESCRIPTION: This code configures the Storybook metadata for a Vue Button component using TypeScript. It imports the Button component and defines the meta object, specifying the component and customizing the background options to include 'dark' and 'gray'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/vue3-vite';

import Button from './Button.vue';

const meta = {
  component: Button,
  parameters: {
    backgrounds: {
      options: {
        // 👇 Override the default `dark` option
        dark: { name: 'Dark', value: '#000' },
        // 👇 Add a new option
        gray: { name: 'Gray', value: '#CCC' },
      },
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Configuring Button Story (TypeScript)
DESCRIPTION: This TypeScript code configures a Storybook story for a Button component, using a type-safe Meta object. It defines the component, sets the title, and disables a specific addon via parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-disable-addon.md#_snippet_2

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Button',
  component: Button,
  parameters: {
    myAddon: { disable: true }, // Disables the addon
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Full release steps
DESCRIPTION: This script outlines the steps for creating a full Storybook release. It includes checking out the main branch, generating and editing the changelog, cleaning and building the project, publishing the release, and updating the release page.
SOURCE: https://github.com/storybookjs/storybook/blob/next/CONTRIBUTING.old.md#_snippet_19

LANGUAGE: sh
CODE:
```
# make sure you current with origin/main.
git checkout main
git status

# generate changelog and edit as appropriate
# generates a vNext section
yarn changelog x.y.z

# Edit the changelog/PRs as needed, then commit
git commit -m "x.y.z changelog"

# clean build
yarn bootstrap --reset --core

# publish and tag the release
yarn run publish:latest

# update the release page
open https://github.com/storybookjs/storybook/releases
```

----------------------------------------

TITLE: Configuring Autodocs in main.js - JavaScript
DESCRIPTION: This code snippet shows how to configure Autodocs in Storybook's `main.js` file. It demonstrates setting the `autodocs` option to `true` and customizing the default name of the generated docs entries. This configuration enables Autodocs for all CSF files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_124

LANGUAGE: javascript
CODE:
```
module.exports = {
  docs: {
    autodocs: true, // see below for alternatives
    defaultName: "Docs", // set to change the name of generated docs entries
  },
};
```

----------------------------------------

TITLE: Remove Highlight Decorator in Storybook (Web Components, JS)
DESCRIPTION: This decorator emits HIGHLIGHT and REMOVE_HIGHLIGHT events to highlight and then remove the highlight from specified selectors within the web component. It uses storybook/preview-api's useChannel to emit events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-remove.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT, REMOVE_HIGHLIGHT } from 'storybook/highlight';

export default {
  component: 'my-component',
};

export const RemoveHighlight = {
  decorators: [
    (story) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        id: 'my-unique-id',
        selectors: ['header', 'section', 'footer'],
      });
      emit(REMOVE_HIGHLIGHT, 'my-unique-id');
      return story();
    },
  ],
};
```

----------------------------------------

TITLE: Granular Control over ArgType Matching
DESCRIPTION: Demonstrates how to adjust stories to include the `argTypesRegex` parameter for more granular control over which `argTypes` are matched. This allows for creating actions based on specific patterns in the argTypes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/actions.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
import { fn } from '@storybook/test';

export default {
  title: 'Button',
  argTypes: {
    onClick: {
      action: 'clicked',
    },
  },
};

const Template = ({ label, ...args }) => {
  const btn = document.createElement('button');
  btn.innerText = label;
  btn.addEventListener('click', args.onClick);
  return btn;
};

export const Primary = Template.bind({});
Primary.args = {
  label: 'Primary',
  onClick: fn(),
};

```

----------------------------------------

TITLE: Adding Custom Viewports to Storybook
DESCRIPTION: This code snippet shows how to add new devices to the list of viewports in Storybook. By defining custom viewports, you can simulate specific devices or screen sizes that are not included in the default set, allowing for more precise testing and development.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/viewport.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
{
  /* prettier-ignore-start */
}
{
  /* prettier-ignore-end */
}
```

----------------------------------------

TITLE: Valid string literal title
DESCRIPTION: This JavaScript code snippet demonstrates a valid string literal title for a Storybook story. This is the recommended way to define titles in Storybook 7.0 and later.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_160

LANGUAGE: JavaScript
CODE:
```
export default {
  title: 'Components/Atoms/Button',
};
```

----------------------------------------

TITLE: Specifying Config Directory for Storybook Add Command
DESCRIPTION: The `--config-dir` option specifies the Storybook configuration directory for the `storybook add` command. This allows you to target a specific configuration directory when adding an addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_60

LANGUAGE: Shell
CODE:
```
storybook migrate --config-dir .storybook
```

----------------------------------------

TITLE: Defining Web Components Button Story (TS)
DESCRIPTION: This code defines a Storybook story for a Web Components Button component using TypeScript. It imports the necessary modules from '@storybook/web-components-vite'. It then defines metadata for the component and creates a primary story with a 'primary' variant.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Primary: Story = {
  args: {
    variant: 'primary',
  },
};

```

----------------------------------------

TITLE: Output Storybook upgrade usage information
DESCRIPTION: Outputs usage information.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_80

LANGUAGE: Shell
CODE:
```
storybook upgrade --help
```

----------------------------------------

TITLE: Installing Storybook Designs Addon
DESCRIPTION: Command to install the Storybook Designs addon using npm or yarn. This addon allows embedding of Figma files and prototypes in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/design-integrations.mdx#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev @storybook/addon-designs
```

----------------------------------------

TITLE: Defining Basic Button Story - Svelte CSF (JS)
DESCRIPTION: This code defines a basic Storybook story for a Svelte Button component using JavaScript. It imports the Button component and exports a default object with the component property set to the Button. The Basic story sets documentation parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-source-parameter.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

export const Basic = {
  parameters: {
    docs: {
      source: { language: 'jsx' },
    },
  },
};
```

----------------------------------------

TITLE: Defining Storybook Story with CSF (JS/JSX)
DESCRIPTION: This snippet defines a Storybook story using the Component Story Format (CSF) in a JavaScript/JSX environment. It imports the component and exports a default object containing the component definition. It also exports a named story with specific arguments, utilizing environment variables.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-vite-env-variables.md#_snippet_2

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const ExampleStory = {
  args: {
    propertyA: import.meta.env.STORYBOOK_DATA_KEY,
    propertyB: import.meta.env.VITE_CUSTOM_VAR,
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte component named MyComponent using TypeScript. It imports necessary modules from '@storybook/your-framework' and defines a story that renders the component with an image, passing the image object as props.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_8

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import MyComponent from './MyComponent.svelte';

import imageFile from './static/image.png';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

const image = {
  src: imageFile,
  alt: 'my image',
};

export const WithAnImage: Story = {
  render: () => ({
    Component: MyComponent,
    props: image,
  }),
};
```

----------------------------------------

TITLE: Defining Button Story (TS/TSX)
DESCRIPTION: This code defines a Storybook story for a Button component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and the Button component. It then defines metadata for the component and creates a primary story with a 'primary' variant.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-controls-primary-variant.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  args: {
    variant: 'primary',
  },
};

```

----------------------------------------

TITLE: Implementing Primary Block in MDX Documentation
DESCRIPTION: Shows how to import and use the Primary block in a Storybook MDX documentation file to display the primary story from a stories file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-primary.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
import { Meta, Primary } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

<Primary />
```

----------------------------------------

TITLE: Initializing Storybook Story for Svelte Component (TS, CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte component named MyComponent using TypeScript and the Component Story Format (CSF). It imports necessary modules from '@storybook/addon-svelte-csf' and defines a story that renders the component with an image, passing the image object as a prop.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-with-import.md#_snippet_7

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  import imageFile from './static/image.png';

  let image = {
    src: imageFile,
    alt: 'my image',
  };

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story name="WithAnImage">
	<MyComponent {image} />
</Story>
```

----------------------------------------

TITLE: Configuring Storybook Addon Outline in main.js
DESCRIPTION: JavaScript code to add the Storybook Addon Outline to the addons array in the Storybook configuration file. This step enables the addon in your Storybook project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/outline/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export default {
  addons: ['@storybook/addon-outline'],
};
```

----------------------------------------

TITLE: Rewrite Angular Stories (Component Parameter)
DESCRIPTION: This JavaScript snippet shows how to rewrite Angular stories that were using the `parameters.component` to override the default export. This approach was an internal implementation and is no longer recommended. The component should be passed directly in the return value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_182

LANGUAGE: javascript
CODE:
```
export const MyStory = () => ({ ... })
SomeStory.parameters = { component: MyComponent };
```

LANGUAGE: javascript
CODE:
```
export const MyStory = () => ({ component: MyComponent, ... })
```

----------------------------------------

TITLE: Overriding Globals in Portable Stories
DESCRIPTION: Demonstrates how to override global values when testing stories that depend on global variables. Shows how to modify project annotations to test different language variations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/portable-stories/portable-stories-jest.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { setProjectAnnotations, composeStories } from '@storybook/react';
import * as stories from './MyComponent.stories';

setProjectAnnotations({
  ...projectAnnotations,
  globals: {
    locale: 'es',
  },
});

const { StoryInSpanish } = composeStories(stories);
```

----------------------------------------

TITLE: Setting up Custom Elements Manifest in Storybook Preview
DESCRIPTION: Code snippet for importing and setting the custom elements manifest in the Storybook preview configuration file, which is necessary for Web Components documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/web-components/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { setCustomElementsManifest } from '@storybook/web-components';
import customElements from '../custom-elements.json';

setCustomElementsManifest(customElements);
```

----------------------------------------

TITLE: Installing Storybook Next.js Vite with yarn
DESCRIPTION: This command installs the @storybook/nextjs-vite package as a development dependency using yarn. It ensures that the package is available during development and build processes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-install.md#_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev @storybook/nextjs-vite
```

----------------------------------------

TITLE: Configuring forceBuildInstrument option for Vite
DESCRIPTION: This configures the plugin to add instrumentation in build mode.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
options: { istanbul: { forceBuildInstrument: true,}}
```

----------------------------------------

TITLE: Configuring Storybook Test Runner with Accessibility Testing (JavaScript)
DESCRIPTION: JavaScript implementation of Storybook test runner configuration that injects axe-playwright for accessibility testing. Includes hooks for pre-visit injection of axe and post-visit accessibility checks with detailed HTML reporting.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-a11y-configure.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { injectAxe, checkA11y, configureAxe } = require('axe-playwright');

const { getStoryContext } = require('@storybook/test-runner');

/*
 * See https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api
 * to learn more about the test-runner hooks API.
 */
module.exports = {
  async preVisit(page) {
    await injectAxe(page);
  },
  async postVisit(page, context) {
    // Get the entire context of a story, including parameters, args, argTypes, etc.
    const storyContext = await getStoryContext(page, context);

    // Apply story-level a11y rules
    await configureAxe(page, {
      rules: storyContext.parameters?.a11y?.config?.rules,
    });

    const element = storyContext.parameters?.a11y?.element ?? 'body';
    await checkA11y(page, element, {
      detailedReport: true,
      detailedReportOptions: {
        html: true,
      },
    });
  },
};
```

----------------------------------------

TITLE: Installing @storybook/preact-vite with yarn
DESCRIPTION: This command installs the @storybook/preact-vite package as a dev dependency using yarn. It's used to set up Storybook for Preact projects with Vite.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/preact-vite-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev @storybook/preact-vite
```

----------------------------------------

TITLE: Configure Storybook Framework for SvelteKit in JavaScript
DESCRIPTION: This JavaScript snippet configures Storybook to use the SvelteKit framework. It sets the 'framework' property to '@storybook/sveltekit' and removes the 'svelteOptions' property, which is no longer needed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/sveltekit-add-framework.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // ...
  framework: '@storybook/sveltekit', // 👈 Add this
  // svelteOptions: { ... }, 👈 Remove this
};
```

----------------------------------------

TITLE: Jest Configuration with getPackageAliases
DESCRIPTION: Demonstrates how to use the getPackageAliases helper from @storybook/nextjs/export-mocks to generate aliases for portable stories in a Jest configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_31

LANGUAGE: typescript
CODE:
```
import type { Config } from 'jest';
import nextJest from 'next/jest.js';
// 👇 Import the utility function
import { getPackageAliases } from '@storybook/nextjs/export-mocks';

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
});

const config: Config = {
  testEnvironment: 'jsdom',
  // ... rest of Jest config
  moduleNameMapper: {
    ...getPackageAliases(), // 👈 Add the utility as mapped module names
  },
};

export default createJestConfig(config);
```

----------------------------------------

TITLE: Rendering Storybook Documentation with MDX
DESCRIPTION: Uses the Meta component to associate the documentation with the Button stories, and renders the custom Template component. This structure allows for dynamic, interactive documentation of the Button component within Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/button.mdx#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
<Meta of={ButtonStories} />

<Template />
```

----------------------------------------

TITLE: Accessing Story Args in Tests
DESCRIPTION: Example showing how to access and utilize story args within test cases.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { composeStories } from '@storybook/react';
import * as stories from './Login.stories';

const { Submit } = composeStories(stories);

test('default args from story', () => {
  console.log(Submit.args);
  // { primary: true, label: 'Submit' }
});
```

----------------------------------------

TITLE: Automating Icon Documentation with IconGallery and IconItem in Storybook
DESCRIPTION: This snippet shows how to automate the process of documenting multiple icons using IconGallery and IconItem blocks. It demonstrates how to iterate over an object of icons and dynamically create IconItem components for each.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-icongallery.mdx#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
import { Meta, IconGallery, IconItem } from '@storybook/addon-docs/blocks';

import { Icon as IconExample } from './Icon';
import * as icons from './icons';

# Iconography

<IconGallery>
  {Object.keys(icons).map((icon) => (
    <IconItem name={icon}>
      <IconExample icon={icon} />
    </IconItem>
  ))}
</IconGallery>
```

----------------------------------------

TITLE: Initializing Button Story - Vue (JS)
DESCRIPTION: This code defines a Storybook story for a Vue Button component using JavaScript. It imports the Button component and the action function from 'storybook/actions'. The 'Text' story is configured with arguments for the label, and a render function that returns the Button component with the specified props and event handlers.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-click-handler-args.md#_snippet_7

LANGUAGE: js
CODE:
```
import { action } from 'storybook/actions';

import Button from './Button.vue';

export default {
  component: Button,
};

export const Text = {
  render: (args) => ({
    components: { Button },
    setup() {
      return {
        ...args,
        onClick: action('clicked'),
      };
    },
    template: '<Button @click="onClick" :label="label" />',
  }),
  args: {
    label: 'Hello',
  },
};
```

----------------------------------------

TITLE: Using useArgs Hook for Accessing Story Args in JavaScript
DESCRIPTION: Shows how to use the useArgs hook to access and update story args in decorators or addon panels. This hook is available in both @storybook/preview-api and @storybook/manager-api.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview-api/README-store.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { useArgs } from '@storybook/preview-api';

// or '@storybook/manager-api'

// `args` is the args of the currently rendered story
// `updateArgs` will update its args. You can pass a subset of the args; other args will not be changed.
const [args, updateArgs] = useArgs();
```

----------------------------------------

TITLE: Configuring Storybook Meta for Vue Button Component
DESCRIPTION: This code configures the Storybook metadata for a Vue Button component. It imports the Button component and defines the meta object, specifying the component and customizing the background options to include 'dark' and 'gray'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_5

LANGUAGE: js
CODE:
```
import Button from './Button.vue';

export default {
  component: Button,
  parameters: {
    backgrounds: {
      options: {
        // 👇 Override the default `dark` option
        dark: { name: 'Dark', value: '#000' },
        // 👇 Add a new option
        gray: { name: 'Gray', value: '#CCC' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Rendering Button in English (React)
DESCRIPTION: This test renders the Primary story of the Button component in English using Storybook's composeStory function. It overrides the global locale setting to 'en' and then executes the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-override-globals.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { test } from '@jest/globals';
// 👉 Using Next.js? Import from @storybook/nextjs instead
import { composeStory } from '@storybook/react-vite';

import meta, { Primary as PrimaryStory } from './Button.stories';

test('renders in English', async () => {
  const Primary = composeStory(
    PrimaryStory,
    meta,
    { globals: { locale: 'en' } } // 👈 Project annotations to override the locale
  );

  await Primary.run();
});
```

----------------------------------------

TITLE: Mocking an Error API Response with MSW in Angular
DESCRIPTION: This story mocks an error API response using MSW in an Angular Storybook story. It defines a handler that intercepts GET requests to 'https://your-restful-endpoint' and returns a 403 status code after a delay of 800ms. This simulates a failed API request and allows testing the component's error handling.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/msw-addon-configure-handlers-http.md#_snippet_1

LANGUAGE: ts
CODE:
```
export const MockedError: Story = {
  parameters: {
    msw: {
      handlers: [
        http.get('https://your-restful-endpoint', async () => {
          await delay(800);
          return new HttpResponse(null, {
            status: 403,
          });
        }),
      ],
    },
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with SolidJS (TypeScript) Decorators
DESCRIPTION: This code initializes a Storybook story for a SolidJS Button component using TypeScript. It imports necessary types from 'storybook-solidjs' and defines a primary story with a decorator that adds styling to the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-decorator.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from 'storybook-solidjs';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = {
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        <Story />
      </div>
    ),
  ],
};
```

----------------------------------------

TITLE: Configuring Storybook for Svelte CSF Addon
DESCRIPTION: Configuration snippet to enable support for the Svelte CSF addon in the Storybook configuration file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/install.mdx#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
<CodeSnippets path="main-config-svelte-csf-register.md" />
```

----------------------------------------

TITLE: Running Storybook Tests with yarn
DESCRIPTION: This command launches Storybook tests using yarn, providing a URL for the Storybook instance to be tested.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-execute-with-url.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn test-storybook --url https://the-storybook-url-here.com
```

----------------------------------------

TITLE: Adding Markdown Content in Storybook Documentation
DESCRIPTION: This snippet demonstrates the use of Markdown in Storybook documentation. It includes a header and a simple greeting message.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/core-server/utils/__mockdata__/src/docs2/MetaOf.mdx#2025-04-22_snippet_1

LANGUAGE: Markdown
CODE:
```
# Docs with of

hello docs
```

----------------------------------------

TITLE: Configuring Storybook Meta Component
DESCRIPTION: Sets up the Storybook Meta component to define the title for the configuration section in the Storybook interface.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/js/Configure.mdx#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
<Meta title="Configure your project" />
```

----------------------------------------

TITLE: Install Puppeteer as a Dev Dependency
DESCRIPTION: This command installs Puppeteer as a development dependency, allowing control over the Chrome version used by StoryShots Puppeteer.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_249

LANGUAGE: shell
CODE:
```
yarn add puppeteer --dev
OR
npm install puppeteer --save-dev
```

----------------------------------------

TITLE: Creating an unattached docs MDX file - MDX
DESCRIPTION: This code snippet demonstrates how to create an unattached docs MDX file (one not attached to a story or CSF file) in Storybook 6.x. It uses the `Meta` doc block to define the title of the documentation page.  In Storybook 7.0, the `.stories` suffix is dropped, simplifying the process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_127

LANGUAGE: mdx
CODE:
```
import { Meta } from "@storybook/addon-docs";

<Meta title="Introduction" />
```

----------------------------------------

TITLE: Configuring Storybook Addons in JavaScript
DESCRIPTION: This JavaScript snippet configures Storybook addons. It shows how to specify addons within the `.storybook/main.js` file. The `addons` array lists the addons to be used by Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-remove-addons.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  addons: [
    // ...
    // 👇 These can both be removed
    // 'storybook-addon-next',
    // 'storybook-addon-next-router',
  ],
};
```

----------------------------------------

TITLE: Initializing List Story with React (TypeScript)
DESCRIPTION: This code defines a Storybook story for the List component in React using TypeScript. It imports the List and ListItem components and defines stories for Empty and OneItem scenarios. The OneItem story renders the List component with a ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_2

LANGUAGE: ts
CODE:
```
import React from 'react';

import type { Meta, StoryObj } from '@storybook/react-vite';

import { List } from './List';
import { ListItem } from './ListItem';

const meta = {
  component: List,
  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent
} satisfies Meta<typeof List>;
export default meta;

type Story = StoryObj<typeof meta>;

export const Empty: Story = {};

export const OneItem: Story = {
  render: (args) => (
    <List {...args}>
      <ListItem />
    </List>
  ),
};
```

----------------------------------------

TITLE: Configuring Primary Button Story in Web Components (TypeScript)
DESCRIPTION: This TypeScript code configures a primary button story within Storybook for a Web Component. It imports necessary modules from '@storybook/web-components-vite' and sets the component to 'demo-button' and sets up the story with arguments for label and primary state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_12

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
};

export default meta;
type Story = StoryObj;

export const Primary: Story = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Defining Storybook Story for Common Component (TS)
DESCRIPTION: This code defines a Storybook story for a component named MyComponent using TypeScript. It imports necessary modules from '@storybook/your-framework' and defines a default story with an example property sourced from an environment variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-env-var-config.md#_snippet_2

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta, StoryObj } from '@storybook/your-framework';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    exampleProp: process.env.EXAMPLE_VAR,
  },
};
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the necessary modules from '@storybook/addon-svelte-csf' and defines a 'Primary' story with specific arguments for the button's appearance and label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_8

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Primary"
  args={{
    primary: true,
    label: 'Button'
  }}
/>
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, sets up the framework, and configures SWC compiler options, including automatic runtime for React transforms.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-swc-jsx-transform.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the webpack-based framework you are using (e.g., react-webpack5)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: {
    name: '@storybook/your-framework',
    options: {},
  },
  swc: (config, options) => ({
    jsc: {
      transform: {
        react: {
          runtime: 'automatic',
        },
      },
    },
  }),
};

export default config;
```

----------------------------------------

TITLE: Configure Test-Only Stories in TypeScript/TSX
DESCRIPTION: Shows TypeScript implementation of test-only stories in Storybook using proper type definitions. Includes type safety with Meta and StoryObj types from the framework-specific Storybook package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-include-tags.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the name of your framework
import type { Meta, StoryObj } from '@storybook/your-framework';

import { MyComponent } from './MyComponent';

const meta: Meta<typeof MyComponent> = {
  component: MyComponent,
  tags: ['test-only'], // 👈 Provides the `test-only` tag to all stories in this file
};

export default meta;
type Story = StoryObj<typeof MyComponent>;

export const IncludeStory: Story = {
  //👇 Adds the `test-only` tag to this story to be included in the tests when enabled in the test-runner configuration
  tags: ['test-only'],
};
```

----------------------------------------

TITLE: Vitest Workspace Configuration
DESCRIPTION: This snippet demonstrates how to define a new workspace project when using a Vitest workspace. It configures the root, test environment, and other settings for the workspace project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/vitest-addon.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { defineConfig } from 'vitest/config';
import { storybookVite } from './dist/index';
import path from 'path';

export default defineConfig({
  root: path.resolve(__dirname),
  plugins: [storybookVite()],
  test: {
    environment: 'jsdom',
    setupFiles: [path.resolve(__dirname, './.storybook/vitest-setup.ts')],
    include: ['**/*.test.ts', '**/*.test.tsx', '**/*.spec.ts', '**/*.spec.tsx'],
    exclude: ['**/node_modules/**', '**/dist/**'],
  },
});
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines the framework, story file locations, and enables automatic documentation generation for tagged stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-docs-autodocs.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  docs: {
    autodocs: 'tag',
  },
};

export default config;
```

----------------------------------------

TITLE: Initializing Svelte Storybook Story with CSF
DESCRIPTION: This code initializes a Storybook story for a Svelte component using Component Story Format (CSF). It imports the necessary modules from '@storybook/addon-svelte-csf' and defines the component and its argument types within a <script module> tag.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-name.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Example from './Example.svelte';

  const { Story } = defineMeta({
    component: Example,
    argTypes: {
      actualArgName: {
        name: 'Friendly name',
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Setting args through URL
DESCRIPTION: Shows how to set initial args for a Storybook story by adding an `args` query parameter to the URL. The arg's keys and values are limited to alphanumeric characters, spaces, underscores, and dashes to prevent XSS attacks. Values are coerced to their respective `argTypes`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#_snippet_7

LANGUAGE: text
CODE:
```
?path=/story/avatar--default&args=style:rounded;size:100
```

----------------------------------------

TITLE: Initializing Tertiary Button Story with Render Function
DESCRIPTION: Defines a Storybook story named 'Tertiary' for a demo button. The render function uses lit's html template literal to create a demo-button element with a specified background color and label containing book and chart emojis.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-emojis.md#_snippet_16

LANGUAGE: typescript
CODE:
```
export const Tertiary: Story = {
  render: () => html`<demo-button .backgroundColor="#ff0" .label="📚📕📈🤓"></demo-button>`,
};
```

----------------------------------------

TITLE: Qwik Component Story Snippet
DESCRIPTION: Defines a Storybook story for a Qwik component, including imports, meta configuration, and a basic story with arguments. This snippet showcases the structure of a component story file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from 'storybook-framework-qwik';

import type { YourComponentProps } from './YourComponent';

import { YourComponent } from './YourComponent';

//👇 This default export determines where your story goes in the story list
const meta = {
  component: YourComponent,
} satisfies Meta<YourComponentProps>;

export default meta;
type Story = StoryObj<YourComponentProps>;

export const FirstStory: Story = {
  args: {
  //👇 The args you need here will depend on your component
  },
};
```

----------------------------------------

TITLE: Describing Storybook Docs Utils in Markdown
DESCRIPTION: This markdown snippet outlines the main purposes of the Storybook Docs Utils, including ArgType extraction, dynamic snippet generation, and user interaction detection. It also notes that this library is widely used across framework packages and should be kept minimal.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/docs-tools/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Storybook Docs Utils

Shared utility functions for frameworks to implement docs:

- ArgType extraction
- Dynamic snippet generation
- Is the user using docs or controls?

This library is used by most framework packages so it and its dependencies should be minimized
```

----------------------------------------

TITLE: StorySortFn Type Definition
DESCRIPTION: This TypeScript code defines the type for a custom story sorting function (`StorySortFn`) in Storybook. The function takes two `Story` objects as input and returns a number, similar to a standard JavaScript sorting function. This allows developers to implement custom sorting logic for stories in the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/parameters.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
type StorySortFn = (a: Story, b: Story) => number;
```

----------------------------------------

TITLE: Next.js Configuration with Runtime Config
DESCRIPTION: This example demonstrates how to configure Next.js with both server-side and public runtime configurations. The serverRuntimeConfig is intended for server-side use and may contain secrets, while publicRuntimeConfig is accessible on both the server and client.  This configuration is defined in `next.config.js`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/nextjs.mdx#_snippet_22

LANGUAGE: javascript
CODE:
```
module.exports = {
  serverRuntimeConfig: {
    mySecret: 'secret',
    secondSecret: process.env.SECOND_SECRET, // Pass through env variables
  },
  publicRuntimeConfig: {
    staticFolder: '/static',
  },
};
```

----------------------------------------

TITLE: Defining Button Story with Backgrounds in Web Components (JS)
DESCRIPTION: This code defines a Storybook story for a Web Components Button component and configures story-level parameters to set background options. It sets the component to 'demo-button' and defines a 'Primary' story with custom background colors.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-story.md#_snippet_6

LANGUAGE: js
CODE:
```
export default {
  component: 'demo-button',
};

export const Primary = {
  // 👇 Story-level parameters
  parameters: {
    backgrounds: {
      options: {
        red: { name: 'Red', value: '#f00' },
        green: { name: 'Green', value: '#0f0' },
        blue: { name: 'Blue', value: '#00f' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Button Component Story (TypeScript)
DESCRIPTION: This TypeScript snippet configures a Storybook story for the Button component using TypeScript. It imports necessary types from Storybook and defines a default story and a dark theme story by setting the 'theme' parameter to 'dark'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/configure-mock-provider-with-story-parameter.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { Button } from './Button';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;
export default meta;

type Story = StoryObj<typeof meta>;

// Wrapped in light theme
export const Default: Story = {};

// Wrapped in dark theme
export const Dark: Story = {
  parameters: {
    theme: 'dark',
  },
};
```

----------------------------------------

TITLE: Share Webpack configuration with Next.js
DESCRIPTION: This code snippet illustrates how to share Webpack rules between your Next.js configuration and Storybook. By requiring the `next.config.js` file in your `.storybook/main.js|ts` file, you can merge the Next.js Webpack configuration into the Storybook Webpack configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/faq.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
export default {
  webpackFinal: async (baseConfig) => {
    const nextConfig = require('/path/to/next.config.js');

    // merge whatever from nextConfig into the webpack config storybook will use
    return { ...baseConfig, ...nextConfig };
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for React Component (TS)
DESCRIPTION: This code initializes a Storybook story for a React component, MyComponent, using TypeScript. It defines a story named 'WithAnImage' that renders an image with a specified source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/react-vite';

import { MyComponent } from './MyComponent';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

// Assume image.png is located in the "public" directory.
export const WithAnImage: Story = {
  render: () => <img src="/image.png" alt="my image" />,
};

```

----------------------------------------

TITLE: Customizing ArgTypes in Story Definition
DESCRIPTION: Demonstrates how to customize the ArgTypes within a Storybook story to override the default values extracted by Storybook. This example modifies the description, table type, and control type for the 'label' prop.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#_snippet_7

LANGUAGE: javascript
CODE:
```
export default {
  title: 'Button',
  component: Button,
  argTypes: {
    label: {
      description: 'overwritten description',
      table: {
        type: { summary: 'something short', detail: 'something really really long' },
      },
      control: {
        type: null,
      },
    },
  },
};
```

----------------------------------------

TITLE: Initializing Checkbox Storybook story for Svelte (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Checkbox component using TypeScript. It imports the necessary modules from '@storybook/your-framework' and defines the component's metadata, including the title and component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-grouped.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import CheckBox from './Checkbox.svelte';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Design System/Atoms/Checkbox',
  component: CheckBox,
} satisfies Meta<typeof CheckBox>;

export default meta;
```

----------------------------------------

TITLE: Installing Storybook Web Components Vite package with yarn
DESCRIPTION: This command installs the @storybook/web-components-vite package as a dev dependency using yarn. It's used to set up Storybook for Web Components projects that use Vite.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/web-components-vite-install.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn add --dev @storybook/web-components-vite
```

----------------------------------------

TITLE: Solid.js Profile Page Context Provider Implementation
DESCRIPTION: Solid.js implementation of a profile page component that provides user posts and friends containers through context. Maintains the same pattern as React implementation for context value referential equality.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-container-provider.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import ProfilePageContext from './ProfilePageContext';
import { ProfilePageContainer } from './ProfilePageContainer';
import { UserPostsContainer } from './UserPostsContainer';
import { UserFriendsContainer } from './UserFriendsContainer';

//👇 Ensure that your context value remains referentially equal between each render.
const context = {
  UserPostsContainer,
  UserFriendsContainer,
};

export const AppProfilePage = () => {
  return (
    <ProfilePageContext.Provider value={context}>
      <ProfilePageContainer />
    </ProfilePageContext.Provider>
  );
};
```

----------------------------------------

TITLE: Get All Story Files
DESCRIPTION: This function uses `import.meta.glob` to find all story files matching a specified pattern. It then extracts the file path, story file content, component name, and story directory for each story file and returns an array of objects containing this information.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/individual-snapshot-tests-portable-stories.md#_snippet_9

LANGUAGE: ts
CODE:
```
function getAllStoryFiles() {
  // Place the glob you want to match your story files
  const storyFiles = Object.entries(
    import.meta.glob<StoryFile>('./stories/**/*.(stories|story).@(js|jsx|mjs|ts|tsx)', {
      eager: true,
    }),
  );

  return storyFiles.map(([filePath, storyFile]) => {
    const storyDir = path.dirname(filePath);
    const componentName = path.basename(filePath).replace(/\.(stories|story)\.[^/.]+$/, '');
    return { filePath, storyFile, componentName, storyDir };
  });
}
```

----------------------------------------

TITLE: Removing and Installing Dependencies for Vue3 with Vite
DESCRIPTION: This command removes the webpack5 dependencies and installs the vite dependencies for Vue3.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_24

LANGUAGE: bash
CODE:
```
npm remove @storybook/vue3-webpack5 @storybook/preset-vue3-webpack
npm install @storybook/vue3-vite --save-dev
```

----------------------------------------

TITLE: Install React Webpack 5 Framework
DESCRIPTION: Installs the @storybook/react-webpack5 framework as a dependency for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-webpack5.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev @storybook/react-webpack5
```

----------------------------------------

TITLE: Migrating from autodocs to tags in Storybook
DESCRIPTION: This code snippet demonstrates how to migrate from the `autodocs` configuration option to using tags in Storybook. It shows the removal of the `autodocs` property from the `docs` object in `preview.js` and the addition of the `tags` array in CSF files.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_20

LANGUAGE: diff
CODE:
```
// .storybook/preview.js
export default {
- docs: { autodocs: true }
};

// In your CSF files:
+ export default {
+   tags: ['autodocs']
+ };
```

----------------------------------------

TITLE: Initializing Storybook Meta and Second Story with Play Function (TS with Framework)
DESCRIPTION: This code defines the SecondStory with a play function that simulates user typing into an element with the test ID 'other-element'. It uses storybook/test's userEvent and within functions to interact with the canvas element.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-composition.md#_snippet_7

LANGUAGE: ts
CODE:
```
export const SecondStory: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    await userEvent.type(canvas.getByTestId('other-element'), 'another value');
  },
};
```

----------------------------------------

TITLE: Configuring Primary Button Story in Angular
DESCRIPTION: This code configures a primary button story within Storybook for an Angular component. It imports necessary modules from '@storybook/angular' and defines the component and its arguments, setting the label to 'Button' and primary to true.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Primary: Story = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Meta for Web Components Button (TS)
DESCRIPTION: This code configures the Storybook metadata for a Web Components Button using TypeScript. It defines the component as 'demo-button' and customizes the background options to include 'dark' and 'gray'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-button',
  parameters: {
    backgrounds: {
      options: {
        // 👇 Override the default `dark` option
        dark: { name: 'Dark', value: '#000' },
        // 👇 Add a new option
        gray: { name: 'Gray', value: '#CCC' },
      },
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: A TypeScript configuration file for Storybook that imports type definitions and configures the same settings as the JavaScript version. It includes framework specification, story patterns, and logging level with proper type annotation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-log-level.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  logLevel: 'debug',
};

export default config;
```

----------------------------------------

TITLE: Initializing Button Story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the necessary modules from '@storybook/addon-svelte-csf' and defines the component and title for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-default-export.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    /* 👇 The title prop is optional.
    * See https://storybook.js.org/docs/configure/#configure-story-loading
    * to learn how to generate automatic titles
    */
    title: 'Button',
    component: Button,
  });
</script>
```

----------------------------------------

TITLE: Configuring Storybook Main File in TypeScript
DESCRIPTION: This snippet shows how to configure the main Storybook file using TypeScript. It imports the StorybookConfig type, defines the framework, story file patterns, and build options for testing.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-sourcemaps.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  build: {
    test: {
      disableSourcemaps: false,
    },
  },
};

export default config;
```

----------------------------------------

TITLE: Creating Checkbox Documentation with Common Renderer in MDX
DESCRIPTION: This MDX document provides documentation for a Checkbox component using Storybook's common renderer. It imports stories from a standard Checkbox.stories file and displays an example of the unchecked state using Canvas.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
import { Canvas, Meta } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories';

<Meta of={CheckboxStories} />

# Checkbox

A checkbox is a square box that can be activated or deactivated when ticked.

Use checkboxes to select one or more options from a list of choices.

<Canvas of={CheckboxStories.Unchecked} />
```

----------------------------------------

TITLE: Defining Svelte Storybook story using CSF
DESCRIPTION: This snippet defines a Storybook story for a Svelte component using Component Story Format (CSF). It imports defineMeta from '@storybook/addon-svelte-csf', defines the component to be used, and exports a story named 'Baz'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/foo-bar-baz-story.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Foo from './Foo.svelte';

  const { Story } = defineMeta({
    /* 👇 The title prop is optional.
     * See https://storybook.js.org/docs/configure/#configure-story-loading
     * to learn how to generate automatic titles
     */
    title: 'Foo/Bar',
    component: Foo,
  });
</script>

<Story name="Baz" />
```

----------------------------------------

TITLE: Svelte Margin Decorator Component (TypeScript)
DESCRIPTION: This Svelte component defines a margin decorator using TypeScript. It imports the 'Snippet' type from 'svelte' and uses it to type the 'children' prop. The component wraps the rendered story content in a div with a margin of 3em applied via CSS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/margindecorator.md#_snippet_1

LANGUAGE: ts
CODE:
```
<script>
  import type { Snippet } from 'svelte';

  let { children }: { children: Snippet } = $props();
</script>

<div>
  {@render children()}
</div>

<style>
  div {
    margin: 3em;
  }
</style>
```

----------------------------------------

TITLE: Opt-out of React 18 new root API
DESCRIPTION: This code snippet shows how to opt out of the new root API introduced in React 18 by setting the `reactOptions.legacyRootApi` flag to `true` in the `.storybook/main.js` configuration file. This is useful for maintaining compatibility with older React versions or specific project requirements.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_147

LANGUAGE: javascript
CODE:
```
module.exports = {
  reactOptions: { legacyRootApi: true },
};
```

----------------------------------------

TITLE: Configure Storybook with Vite Framework (TS)
DESCRIPTION: This TypeScript snippet configures Storybook to use the Vite framework and specifies the '@storybook/addon-react-native-web' addon. It imports the StorybookConfig type and exports a default configuration object for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-native-web-vite-add-framework.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import type { StorybookConfig } from '@storybook/react-native-web-vite';

const config: StorybookConfig = {
  addons: [
    '@storybook/addon-react-native-web', // 👈 Remove the addon
  ],
  // Replace @storybook/react-webpack5 with the Vite framework
  framework: '@storybook/react-native-web-vite',
};

export default config;
```

----------------------------------------

TITLE: Initializing MyComponent Story with Preact
DESCRIPTION: This code defines a Storybook story for the MyComponent using Preact. It imports the necessary components and defines a story that renders the component within a specified layout using JSX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-custom-render-function.md#_snippet_1

LANGUAGE: js
CODE:
```
/** @jsx h */
import { h } from 'preact';

import { Layout } from './Layout';

import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

// This story uses a render function to fully control how the component renders.
export const Example = {
  render: () => (
    <Layout>
      <header>
        <h1>Example</h1>
      </header>
      <article>
        <MyComponent />
      </article>
    </Layout>
  ),
};
```

----------------------------------------

TITLE: Registering a Tab Addon in Storybook
DESCRIPTION: This example demonstrates how to register a tab addon in Storybook. The addon renders content when the 'tab' query parameter is set to the addon's ID. The 'match' and 'route' properties are no longer needed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_77

LANGUAGE: typescript
CODE:
```
import { addons, types } from "@storybook/manager-api";

addons.register("my-addon", () => {
  addons.add("my-addon/tab", {
    type: types.TAB,
    title: "My Addon",
    render: () => <div>Hello World</div>,
  });
});
```

----------------------------------------

TITLE: Adding Custom Favicon to Storybook Manager (JavaScript)
DESCRIPTION: This snippet shows how to add a custom favicon to the Storybook manager interface using JavaScript. It modifies the managerHead configuration to include a link tag for the favicon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-custom-manager-head.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  managerHead: (head) => `
    ${head}
    <link rel="icon" type="image/png" href="/logo192.png" sizes="192x192" />
  `,
};
```

----------------------------------------

TITLE: Vue Button Story Implementation (JavaScript)
DESCRIPTION: Default story implementation for a Button component in Vue using CSF 3 format. Uses JavaScript with Vue's component registration and template binding pattern.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-render.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
export const Default = {
  render: (args) => ({
    components: { Button },
    setup() {
      return { args };
    },
    template: '<Button v-bind="args" />',
  }),
};
```

----------------------------------------

TITLE: Rendering Histogram with HTML
DESCRIPTION: This code defines a Storybook story for rendering a Histogram component using HTML. It imports the 'createHistogram' function from the './Histogram' module. The 'Default' story uses a render function to create the histogram with specified arguments such as 'dataType', 'showHistogramLabels', 'histogramAccentColor', and 'label'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#_snippet_1

LANGUAGE: js
CODE:
```
import { createHistogram } from './Histogram';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Histogram',
};

/*
 *👇 Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/api/csf
 * to learn how to use render functions.
 */
export const Default = {
  render: (args) => createHistogram(args),
  args: {
    dataType: 'latency',
    showHistogramLabels: true,
    histogramAccentColor: '#1EA7FD',
    label: 'Latency distribution',
  },
};
```

----------------------------------------

TITLE: Defining Web Components Button Stories with TypeScript
DESCRIPTION: This code defines Storybook stories for a Web Components Button component using TypeScript. It sets the component to 'custom-button' and defines argTypes for controlling the background color. It exports two stories: Accessible and Inaccessible, demonstrating different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_15

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components';

const meta: Meta = {
  component: 'custom-button',
  argTypes: {
    backgroundColor: { control: 'color' },
  },
};

export default meta;
type Story = StoryObj;

// This is an accessible story
export const Accessible: Story = {
  args: {
    primary: false,
    label: 'Button',
  },
};

// This is not
export const Inaccessible: Story = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};
```

----------------------------------------

TITLE: Defining Background Globals for a Story
DESCRIPTION: Sets a specific background color for a story using the `globals` option. When a background color is specified this way, it cannot be changed using the toolbar, ensuring the story is always rendered on the defined background.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/essentials/backgrounds.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export const Primary = {
  parameters: {
    backgrounds: {
      default: 'reds',
    },
  },
  args: {
    primary: true,
    label: 'Primary',
  },
};

```

----------------------------------------

TITLE: Defining Button Usage Guidelines in Storybook MDX
DESCRIPTION: MDX component documentation that specifies best practices for button implementation, including when to use primary buttons and navigation links. The guidelines are structured using Dos and Donts components to clearly separate recommended practices from anti-patterns.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-dos-donts.md#2025-04-22_snippet_0

LANGUAGE: mdx
CODE:
```
<Guidelines>
  <Dos>
    - Use buttons for the main actions on your page
    - Identify the primary action and make it `primary`
  </Dos>
  <Donts>
    - Use a button when a link will do (e.g., for navigation-only actions)
    - Use multiple `primary` buttons in a single UI state
  </Donts>
</Guidelines>
```

----------------------------------------

TITLE: Highlighting elements in Svelte Storybook with Typescript CSF
DESCRIPTION: This TypeScript snippet defines a Storybook story for a Svelte component using Component Story Format (CSF). It imports types from '@storybook/your-framework' (replace your-framework with svelte-vite or sveltekit), uses the `HIGHLIGHT` addon to apply styles to specific elements, and exports the story for use in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-custom-style.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import { useChannel } from 'storybook/preview-api';
import { HIGHLIGHT } from 'storybook/highlight';

import MyComponent from './MyComponent.svelte';

const meta = {
  component: MyComponent,
} satisfies Meta<typeof MyComponent>;

export default meta;
type Story = StoryObj<typeof meta>;

export const StyledHighlight: Story = {
  decorators: [
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        styles: {
          backgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`,
          outline: '3px solid hotpink',
          animation: 'pulse 3s linear infinite',
          transition: 'outline-offset 0.2s ease-in-out',
        },
        hoverStyles: {
          outlineOffset: '3px',
        },
        focusStyles: {
          backgroundColor: 'transparent',
        },
        keyframes: `@keyframes pulse {
          0% { outline-color: rgba(255, 105, 180, 1); }
          50% { outline-color: rgba(255, 105, 180, 0.2); }
          100% { outline-color: rgba(255, 105, 180, 1); }
        }`,
      });
      return storyFn();
    },
  ],
};
```

----------------------------------------

TITLE: Creating Vite Development Server with HMR Configuration
DESCRIPTION: Creates and configures a Vite development server with middleware mode enabled and Hot Module Replacement (HMR) settings. Takes extended options and a dev server instance as parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-builder-api-dev-server.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { createServer } from 'vite';

export async function createViteServer(options: ExtendedOptions, devServer: Server) {
  const { port } = options;
  // Remainder server configuration

  // Creates the server.
  return createServer({
    // The server configuration goes here
    server: {
      middlewareMode: true,
      hmr: {
        port,
        server: devServer,
      },
    },
  });
}
```

----------------------------------------

TITLE: Initializing Button Story (Common TS)
DESCRIPTION: This code initializes a Storybook story for a Button component using TypeScript. It imports the necessary modules and defines the component and sets specific parameters at the component level, such as background options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/parameters-in-meta.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Button } from './Button';

const meta = {
  component: Button,
  //👇 Creates specific parameters at the component level
  parameters: {
    backgrounds: {
      options: {},
    },
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Initializing MyForm Storybook Story
DESCRIPTION: This JavaScript code initializes a Storybook story for the MyForm component, configuring Next.js parameters and defining interactions for unauthenticated and 'Go Back' scenarios. It uses mocked navigation functions to assert redirection and back navigation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-navigation-mock.md#_snippet_0

LANGUAGE: js
CODE:
```
import { expect, fireEvent, userEvent, within } from 'storybook/test';

/*
 * Replace your-framework with nextjs or nextjs-vite
 * 👇 Must include the `.mock` portion of filename to have mocks typed correctly
 */
import { redirect, getRouter } from '@storybook/your-framework/navigation.mock';

import MyForm from './my-form';

export default {
  component: MyForm,
  parameters: {
    nextjs: {
      // 👇 As in the Next.js application, next/navigation only works using App Router
      appDirectory: true,
    },
  },
};

export const Unauthenticated = {
  async play() {
    // 👇 Assert that your component called redirect()
    await expect(redirect).toHaveBeenCalledWith('/login', 'replace');
  },
};

export const GoBack = {
  async play({ canvasElement }) {
    const canvas = within(canvasElement);
    const backBtn = await canvas.findByText('Go back');

    await userEvent.click(backBtn);
    // 👇 Assert that your component called back()
    await expect(getRouter().back).toHaveBeenCalled();
  },
};
```

----------------------------------------

TITLE: Initializing Storybook story for Svelte component (TS)
DESCRIPTION: This snippet initializes a Storybook story for a Svelte component using TypeScript. It imports Meta and StoryObj from '@storybook/your-framework', defines the component to be used, and exports the meta object and a story named 'Baz'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/foo-bar-baz-story.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta, StoryObj } from '@storybook/your-framework';

import Foo from './Foo.svelte';

const meta = {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Foo/Bar',
  component: Foo,
} satisfies Meta<typeof Foo>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Baz: Story = {};
```

----------------------------------------

TITLE: Installing Storybook Addons via CLI
DESCRIPTION: The `storybook add` command installs a Storybook addon and configures the project. It accepts the addon name as an argument and supports options for specifying the package manager and skipping post-install configuration. Use `--package-manager` to specify `npm`, `yarn`, or `pnpm`. Use `--skip-postinstall` to manually configure the addon.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_58

LANGUAGE: Shell
CODE:
```
storybook add [addon] [options]
```

----------------------------------------

TITLE: Configuring Button stories for Web Components (TS)
DESCRIPTION: This snippet configures Storybook stories for a Web Components Button component using TypeScript. It imports the Meta and StoryObj types from '@storybook/web-components-vite' and defines the component and metadata for the story. The tags array specifies that the stories should be included in the documentation page but not appear in Storybook's sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-docs-only-in-meta.md#_snippet_8

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  title: 'Button',
  component: 'demo-button',
  /*
   * All stories in this file will:
   * - Be included in the docs page
   * - Not appear in Storybook's sidebar
   */
  tags: ['autodocs', '!dev'],
};
export default meta;
```

----------------------------------------

TITLE: Configuring Root-Level Preset for Storybook Addon in JavaScript
DESCRIPTION: This code shows how to set up a root-level preset for a Storybook addon, including registration of preview annotations and manager entries.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  previewAnnotations: (entry = []) => [
    ...entry,
    require.resolve('./preview'),
  ],
  managerEntries: (entry = []) => [
    ...entry,
    require.resolve('./manager'),
  ],
};
```

----------------------------------------

TITLE: Scroll Into View Story with Decorator (JS)
DESCRIPTION: This JavaScript snippet defines a Storybook story with a decorator that uses the `useChannel` hook to emit a `SCROLL_INTO_VIEW` event. This event instructs Storybook to scroll to the element with the ID 'footer'. It demonstrates how to use decorators to interact with the Storybook API and trigger actions within the Storybook environment.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-scroll-into-view.md#_snippet_8

LANGUAGE: js
CODE:
```
import { useChannel } from 'storybook/preview-api';
import { SCROLL_INTO_VIEW } from 'storybook/highlight';

export default {
  component: 'my-component',
};

export const ScrollIntoView = {
  decorators: [
    (story) => {
      const emit = useChannel({});
      emit(SCROLL_INTO_VIEW, '#footer');
      return story();
    },
  ],
};
```

----------------------------------------

TITLE: Initializing Button Stories with Angular
DESCRIPTION: This snippet initializes stories for a Button component in Angular using Storybook. It imports the necessary modules from '@storybook/angular' and defines metadata for the Button component, including documentation parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

/**
 * Button stories
 * These stories showcase the button
 */
const meta: Meta<Button> = {
  component: Button,
  parameters: {
    docs: {
      description: {
        component: 'Another description, overriding the comments',
      },
    },
  },
};

export default meta;
type Story = StoryObj<Button>;

/**
 * Primary Button
 * This is the primary button
 */
export const Primary: Story = {
  parameters: {
    docs: {
      description: {
        story: 'Another description on the story, overriding the comments',
      },
    },
  },
};
```

----------------------------------------

TITLE: Configuring Authentication for Deployed Storybook Tests
DESCRIPTION: JavaScript configuration for adding authentication headers to Storybook test runner requests for secure deployments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
module.exports = {
  async getHttpHeaders(url) {
    return {
      Authorization: 'Bearer YOUR_TOKEN_HERE',
    };
  },
};
```

----------------------------------------

TITLE: Defining Empty List Story (TypeScript)
DESCRIPTION: This story renders an empty demo-list component using lit-html in TypeScript. It imports Meta and StoryObj types from Storybook, defines metadata for the component, and exports a story named Empty that renders the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_14

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'demo-list',
};

export default meta;
type Story = StoryObj;

// Always an empty list, not super interesting
export const Empty: Story = {
  render: () => html`<demo-list></demo-list>`,
};
```

----------------------------------------

TITLE: Installing Compodoc Dependency
DESCRIPTION: This command installs the Compodoc dependency as a dev dependency in your Angular project. Compodoc is used to generate documentation for your Angular components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_3

LANGUAGE: sh
CODE:
```
npm install --save-dev @compodoc/compodoc
```

----------------------------------------

TITLE: Configuring List Story with React (JavaScript)
DESCRIPTION: This code configures a Storybook story for the List component in React using JavaScript. It imports the List component and sets it as the component in the default export. The Empty story is defined as an empty object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-starter.md#_snippet_3

LANGUAGE: js
CODE:
```
import { List } from './List';

export default {
  component: List,
};

// Always an empty list, not super interesting
export const Empty = {};

```

----------------------------------------

TITLE: Setting Storybook Options in React Provider
DESCRIPTION: Example of using the setOptions API method in a custom React Provider to configure Storybook options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/manager/README.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
import { Provider } from '@storybook/manager';

class ReactProvider extends Provider {
  handleAPI(api) {
    api.setOptions({
      // see available options in
      // https://storybook.js.org/docs/react/configure/features-and-behavior
    });
  }
}
```

----------------------------------------

TITLE: Setting Component-Level Parameters in CSF
DESCRIPTION: Shows how to define parameters that apply to all stories within a component using the default export in Component Story Format (CSF).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/parameters.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// Button.stories.js|jsx|ts|tsx|mdx
export default {
  parameters: {
    backgrounds: {
      values: [
        { name: 'red', value: '#f00' },
        { name: 'green', value: '#0f0' },
        { name: 'blue', value: '#00f' },
      ],
    },
  },
};
```

----------------------------------------

TITLE: ButtonGroup Story Definition (Web Components, JS)
DESCRIPTION: Defines a Storybook story for the ButtonGroup component using Web Components. It imports Button stories and defines a 'Pair' story that configures the component with primary and secondary buttons. The component is referenced by its tag name 'demo-button-group'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-group-story.md#_snippet_11

LANGUAGE: js
CODE:
```
// 👇 Imports the Button stories
import * as ButtonStories from './Button.stories';

export default {
  component: 'demo-button-group',
};

export const Pair = {
  args: {
    buttons: [{ ...ButtonStories.Primary.args }, { ...ButtonStories.Secondary.args }],
    orientation: 'horizontal',
  },
};
```

----------------------------------------

TITLE: Basic Story Loading Configuration in Storybook
DESCRIPTION: Standard configuration for loading stories in Storybook using glob patterns, where stories are colocated with their components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-stories.mdx#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
export default {
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
};
```

----------------------------------------

TITLE: Creating Solid.js Context for Profile Page
DESCRIPTION: Creates a Solid.js context object for managing profile page state and data. This context provides a way to share profile-related data across components in the Solid.js component tree.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/mock-context-create.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { createContext } from 'solid-js';

const ProfilePageContext = createContext();

export default ProfilePageContext;
```

----------------------------------------

TITLE: Configuring Storybook Meta for Svelte Button Component (CSF)
DESCRIPTION: This code configures the Storybook metadata for a Svelte Button component using CSF. It imports the Button component and defines the meta object, specifying the component and customizing the background options to include 'dark' and 'gray'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_8

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
  parameters: {
    backgrounds: {
      options: {
        // 👇 Override the default `dark` option
        dark: { name: 'Dark', value: '#000' },
        // 👇 Add a new option
        gray: { name: 'Gray', value: '#CCC' },
      },
    },
  },
};
```

----------------------------------------

TITLE: Defining argTypes with options in Vue Storybook (TS)
DESCRIPTION: This snippet demonstrates how to define `argTypes` with options in a Vue Storybook story using TypeScript. It configures `propertyA` and `propertyB` with predefined options for selection in the Storybook UI. The `control` property is used to specify the type of control for `propertyA`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_9

LANGUAGE: typescript
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import YourComponent from './YourComponent.vue';

const meta = {
  component: YourComponent,
  //👇 Creates specific argTypes with options
  argTypes: {
    propertyA: {
      options: ['Item One', 'Item Two', 'Item Three'],
      control: { type: 'select' }, // automatically inferred when 'options' is defined
    },
    propertyB: {
      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],
    },
  },
} satisfies Meta<typeof YourComponent>;
```

----------------------------------------

TITLE: Rendering Storybook Story with Template (TypeScript - Web Components)
DESCRIPTION: This TypeScript code configures a Storybook story for a Button component in a web components environment. It sets the `tags` property to exclude the story from testing, and defines a render function that uses a lit-html template to display multiple Button components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_21

LANGUAGE: ts
CODE:
```
export const Combo: Story = {
  // 👇 This story should not be tested, but will appear in the sidebar and docs page
  tags: ['!test'],
  render: () => html`
    <div>
      <demo-button variant="1" />
      <demo-button variant="2" />
    </div>
  `,
};
```

----------------------------------------

TITLE: Styling Storybook Welcome Page with CSS
DESCRIPTION: This CSS snippet provides styles for the Storybook welcome page, including layout, spacing, and responsive design for various screen sizes. It defines styles for sections, grids, social links, and an addon showcase.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/template/cli/ts/Configure.mdx#2025-04-22_snippet_3

LANGUAGE: CSS
CODE:
```
  .sb-container {
    margin-bottom: 48px;
  }

  .sb-section {
    width: 100%;
    display: flex;
    flex-direction: row;
    gap: 20px;
  }

  img {
    object-fit: cover;
  }

  .sb-section-title {
    margin-bottom: 32px;
  }

  .sb-section a:not(h1 a, h2 a, h3 a) {
    font-size: 14px;
  }

  .sb-section-item, .sb-grid-item {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .sb-section-item-heading {
    padding-top: 20px !important;
    padding-bottom: 5px !important;
    margin: 0 !important;
  }
  .sb-section-item-paragraph {
    margin: 0;
    padding-bottom: 10px;
  }

  .sb-chevron {
    margin-left: 5px;
  }

  .sb-features-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 32px 20px;
  }

  .sb-socials {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }

  .sb-socials p {
    margin-bottom: 10px;
  }

  .sb-explore-image {
    max-height: 32px;
    align-self: flex-start;
  }

  .sb-addon {
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    background-color: #EEF3F8;
    border-radius: 5px;
    border: 1px solid rgba(0, 0, 0, 0.05);
    background: #EEF3F8;
    height: 180px;
    margin-bottom: 48px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 48px;
    max-width: 240px;
  }

  .sb-addon-text h4 {
    padding-top: 0px;
  }

  .sb-addon-img {
    position: absolute;
    left: 345px;
    top: 0;
    height: 100%;
    width: 200%;
    overflow: hidden;
  }

  .sb-addon-img img {
    width: 650px;
    transform: rotate(-15deg);
    margin-left: 40px;
    margin-top: -72px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0);
    backface-visibility: hidden;
  }

  @media screen and (max-width: 800px) {
    .sb-addon-img {
      left: 300px;
    }
  }

  @media screen and (max-width: 600px) {
    .sb-section {
      flex-direction: column;
    }

    .sb-features-grid {
      grid-template-columns: repeat(1, 1fr);
    }

    .sb-socials {
      grid-template-columns: repeat(2, 1fr);
    }

    .sb-addon {
      height: 280px;
      align-items: flex-start;
      padding-top: 32px;
      overflow: hidden;
    }

    .sb-addon-text {
      padding-left: 24px;
    }

    .sb-addon-img {
      right: 0;
      left: 0;
      top: 130px;
      bottom: 0;
      overflow: hidden;
      height: auto;
      width: 124%;
    }

    .sb-addon-img img {
      width: 1200px;
      transform: rotate(-12deg);
      margin-left: 0;
      margin-top: 48px;
      margin-bottom: -40px;
      margin-left: -24px;
    }
  }
```

----------------------------------------

TITLE: Defining RightArrow Component for UI in React
DESCRIPTION: This snippet defines a RightArrow component using an SVG. The component is used throughout the Storybook configuration for visual indicators in links.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs-vite/template/cli/js/Configure.mdx#2025-04-22_snippet_1

LANGUAGE: JSX
CODE:
```
export const RightArrow = () => <svg 
    viewBox="0 0 14 14" 
    width="8px" 
    height="14px" 
    style={{ 
      marginLeft: '4px',
      display: 'inline-block',
      shapeRendering: 'inherit',
      verticalAlign: 'middle',
      fill: 'currentColor',
      'path fill': 'currentColor'
    }}
>
  <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
</svg>
```

----------------------------------------

TITLE: Disabling a story in MDX
DESCRIPTION: This code snippet demonstrates how to disable a specific story from appearing in the docs when writing documentation and stories side-by-side in a single MDX file.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_8

LANGUAGE: mdx
CODE:
```
<Story name="foo" parameters={{ docs: { disable: true } }}>
  <Button>foo</Button>
</Story>
```

----------------------------------------

TITLE: Initializing Page stories for Vue (TS)
DESCRIPTION: This code initializes Storybook stories for the Page component in a Vue application using TypeScript. It imports the Page component and Header stories, and exports a default object configuring the component for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/page-story.md#_snippet_10

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import Page from './Page.vue';

//👇 Imports all Header stories
import * as HeaderStories from './Header.stories';

const meta = {
  component: Page,
} satisfies Meta<typeof Page>;
```

----------------------------------------

TITLE: Configuring Controls for Button Stories in JSON
DESCRIPTION: This JSON snippet demonstrates how to configure controls for button stories using argTypes. It specifies a color control type for the button color property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/frameworks/server-webpack5/README.md#2025-04-22_snippet_7

LANGUAGE: json
CODE:
```
{
  "title": "Buttons",
  "argTypes": {
    "color": { "control": { "type": "color" } }
  },
  "stories": [
    {
      "name": "Red",
      "parameters": {
        "server": {
          "id": "button"
        }
      },
      "args": { "color": "red", "label": "Stop" }
    },
    {
      "name": "Green",
      "parameters": {
        "server": {
          "id": "button"
        }
      },
      "args": { "color": "green", "label": "Go" }
    }
  ]
}
```

----------------------------------------

TITLE: Creating Themed Styled Component in React
DESCRIPTION: Defines a styled div component that uses theme values for background color and sets a fixed width. The component utilizes styled-components with theme prop destructuring to access theme values.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-styled-variables-object-notation.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const Component = styled.div(({ theme }) => ({
  background: theme.background.app,
  width: 0,
}));
```

----------------------------------------

TITLE: Configuring staticDirs in main.js
DESCRIPTION: This configuration ensures that Storybook serves the generated MSW service worker file.  It is necessary for MSW to intercept network requests during Storybook execution.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/mocking-data-and-modules/mocking-network-requests.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
module.exports = {
  stories: ['../src/**/*.stories.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: [
    '@storybook/addon-links',
    '@storybook/addon-essentials',
    '@storybook/addon-interactions',
    'msw-storybook-addon',
  ],
  framework: '@storybook/react',
  core: { builder: '@storybook/builder-webpack5' },
  staticDirs: ['../public'],
  docs: { autodocs: true },
};

```

----------------------------------------

TITLE: Defining Component Metadata and Include Controls - TypeScript
DESCRIPTION: This TypeScript snippet defines the metadata for a Storybook story, specifying the component to be 'your-component'. It then defines a story named 'ArrayInclude' that configures the Storybook controls to only include the 'foo' and 'bar' properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_11

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'your-component',
};

export default meta;
type Story = StoryObj;

export const ArrayInclude: Story = {
  parameters: {
    controls: { include: ['foo', 'bar'] },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Main Settings in JavaScript
DESCRIPTION: This snippet defines the main configuration for Storybook in JavaScript. It specifies the framework, story file patterns, and build test options. The framework should be replaced with the actual framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-test-disable-mdx.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  build: {
    test: {
      disableMDXEntries: false,
    },
  },
};
```

----------------------------------------

TITLE: Adding Storybook Webpack 5 Babel Addon via pnpm
DESCRIPTION: Uses `pnpm dlx` (pnpm download and execute) to run the latest version of the Storybook CLI and add the `@storybook/addon-webpack5-compiler-babel` addon to the current project. This command is intended for projects managed with pnpm.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-compiler-babel-auto-install.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
pnpm dlx storybook@latest add @storybook/addon-webpack5-compiler-babel
```

----------------------------------------

TITLE: Storybook v6.x Story Sort Configuration
DESCRIPTION: This code snippet shows how to configure story sorting in Storybook 6.x using the `order` property within the `storySort` option.  This example sorts any story/doc containing the title segment `Introduction` to the top of the sidebar.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_172

LANGUAGE: javascript
CODE:
```
// preview.js
export default {
  parameters: {
    options: {
      storySort: {
        order: ["Introduction", "*"],
      },
    },
  },
};
```

----------------------------------------

TITLE: Manually Specify Story Title
DESCRIPTION: This code snippet shows how to manually specify the title of a story in a CSF3 file. This is useful for overriding the default auto-title behavior, especially when the filename matches the directory name. It sets the title property in the default export to the desired string value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_151

LANGUAGE: JavaScript
CODE:
```
// atoms/Button/Button.stories.js
export default { title: "Atoms/Button/Button" };
```

----------------------------------------

TITLE: Rendering Svelte Component in TypeScript
DESCRIPTION: Defines a Svelte component with TypeScript support, ensuring type-checking for user and document-related properties. The setup requires a Svelte environment configured for TypeScript.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/simple-page-implementation.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
<script lang="ts">
  import PageLayout from './PageLayout.svelte';
  import DocumentHeader from './DocumentHeader.svelte';
  import DocumentList from './DocumentList.svelte';

  export let user: Record<string, unknown> = {};
  export let document: Record<string, unknown> = {};
  export let subdocuments: Record<string, unknown>[] = [];
</script>

<div>
  <PageLayout {user}>
    <DocumentHeader {document} />
    <DocumentList documents="{subdocuments}" />
  </PageLayout>
</div>
```

----------------------------------------

TITLE: Specify Wider Version Range for Storybook Peer Dependency (JSONC)
DESCRIPTION: This JSON configuration shows how to specify a wider version range for the Storybook peer dependency in your addon's package.json. This allows your addon to support multiple major versions of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addon-migration-guide.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "name": "your-storybook-addon",
  "peerDependencies": {
    "storybook": "^8.0.0 || ^9.0.0"
  },
  "devDependencies": {
    "storybook": ">=9.0.0-0 <10.0.0-0" // For local development
  }
}
```

----------------------------------------

TITLE: Initializing Storybook Story for Vue Component (JS)
DESCRIPTION: This code initializes a Storybook story for a Vue component, MyComponent, using JavaScript. It defines a story named 'WithAnImage' that renders an image with a specified source and alt text using a template.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_9

LANGUAGE: js
CODE:
```
import MyComponent from './MyComponent.vue';

export default {
  component: MyComponent,
};

// Assume image.png is located in the "public" directory.
export const WithAnImage = {
  render: () => ({
    template: '<img src="image.png" alt="my image" />',
  }),
};

```

----------------------------------------

TITLE: Mapping Options to Values
DESCRIPTION: This code snippet illustrates how to map options to values using the `mapping` property in ArgTypes. The `mapping` property allows associating string keys with specific option values, enabling the representation of non-primitive values in the URL and synchronization between the manager and the preview.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_18

LANGUAGE: typescript
CODE:
```
{ [key: string]: { [option: string]: any } }
```

----------------------------------------

TITLE: Defining Storybook Story for Web Component (TS)
DESCRIPTION: This code defines a Storybook story for a web component named 'my-component' using TypeScript. It imports necessary modules from '@storybook/web-components-vite' and defines a default story with an example property sourced from an environment variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-env-var-config.md#_snippet_4

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components-vite';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const Default: Story = {
  args: {
    exampleProp: process.env.EXAMPLE_VAR,
  },
};
```

----------------------------------------

TITLE: Specifying Exact Version in package.json for Storybook
DESCRIPTION: This snippet demonstrates how to pin a specific version of a library in package.json. It shows 'example-library' being pinned to version 3.4.6 due to a bug in version 3.5.x that affects functionality.
SOURCE: https://github.com/storybookjs/storybook/blob/next/RESOLUTIONS.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
example-library@3.4.6 (bug: 3.5.x): Pinned as there is a bug in version 3.5.x that prevents foo from doing bar.
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: JavaScript configuration for Storybook's main.js file that specifies the framework, story file patterns, and disables telemetry. Users need to replace 'your-framework' with their actual framework name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-disable-telemetry.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    disableTelemetry: true, // 👈 Disables telemetry
  },
};
```

----------------------------------------

TITLE: Initializing Button Story with Layout in Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component with a centered layout. It imports the necessary modules from '@storybook/angular' and the Button component itself, then defines a story with the layout parameter set to 'centered'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-story-layout-param.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const WithLayout: Story = {
  parameters: {
    layout: 'centered',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook in TypeScript
DESCRIPTION: This snippet shows how to configure Storybook using TypeScript. It imports the StorybookConfig type, defines the framework, story file patterns, and enables the legacyDecoratorFileOrder feature.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-features-legacy-decorator-file-order.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  features: {
    legacyDecoratorFileOrder: true,
  },
};

export default config;
```

----------------------------------------

TITLE: Initializing Button Storybook story for Svelte (CSF) - TS
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF) with TypeScript. It imports the Button component and defines its metadata, including documentation parameters to exclude the 'style' control.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-argtypes-parameter.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const meta = defineMeta({
    component: Button,
    parameters: {
      docs: {
        controls: { exclude: ['style'] },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Configuring check control for enum ArgType in Storybook
DESCRIPTION: This snippet shows how to configure an ArgType to use the 'check' control for an enum, providing a set of stacked checkboxes for selecting multiple options within Storybook's controls panel. The `options` array specifies the available choices.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
{ control: 'check', options: ['email', 'phone', 'mail'] }
```

----------------------------------------

TITLE: Button Component Definition
DESCRIPTION: Defines a simple React Button component with a label prop, including PropTypes for type checking and a default value. This component serves as the basis for demonstrating ArgTypes customization in Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/props-tables.md#_snippet_4

LANGUAGE: javascript
CODE:
```
// Button.js
import React from 'react';
import PropTypes from 'prop-types';

export const Button = ({ label }) => <button>{label}</button>;
Button.propTypes = {
  /** Demo description */
  label: PropTypes.string,
};
Button.defaultProps = {
  label: 'Hello',
};
```

----------------------------------------

TITLE: Control Configuration Type
DESCRIPTION: Describes the structure for configuring the control panel behavior for an argument, allowing specification of the control type, accepted file types, labels for options, maximum and minimum values, preset colors, and step value.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/arg-types.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
| ControlType
| {
    type: ControlType,
    accept?: string;
    labels?: { [option: string]: string };
    max?: number;
    min?: number;
    presetColors?: string[];
    step?: number;
  }
| false
```

----------------------------------------

TITLE: Defining Svelte Storybook Meta for Page Component (TS)
DESCRIPTION: This code defines the Storybook meta configuration for a Svelte Page component using TypeScript. It imports the Meta type from Storybook and the Page component. The meta object configures the component and disables auto-generated documentation using tags.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-remove-component.md#_snippet_5

LANGUAGE: ts
CODE:
```
// Replace your-framework with svelte-vite or sveltekit
import type { Meta } from '@storybook/your-framework';

import Page from './Page.svelte';

const meta = {
  component: Page,
  // 👇 Disable auto-generated documentation for this component
  tags: ['!autodocs'],
} satisfies Meta<typeof Page>;
export default meta;
```

----------------------------------------

TITLE: Declarative Story Links with withLinks Decorator
DESCRIPTION: The `withLinks` decorator enables defining story links using data attributes (`data-sb-kind` and `data-sb-story`). This provides a declarative way to specify links directly within the component's JSX.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { withLinks } from '@storybook/addon-links';

export default {
  title: 'Button',
  decorators: [withLinks],
};

export const first = () => (
  <button data-sb-kind="OtherKind" data-sb-story="otherStory">
    Go to "OtherStory"
  </button>
);
```

----------------------------------------

TITLE: Configuring Button Stories with JavaScript CSF
DESCRIPTION: This snippet configures stories for a Button component using JavaScript and the Component Story Format (CSF). It imports the Button component and defines a default export containing the component's metadata and documentation parameters.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-description-example.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

/**
 * Button stories
 * These stories showcase the button
 */
export default {
  component: Button,
  parameters: {
    docs: {
      description: {
        component: 'Another description, overriding the comments',
      },
    },
  },
};

/**
 * Primary Button
 * This is the primary button
 */
export const Primary = {
  parameters: {
    docs: {
      description: {
        story: 'Another description on the story, overriding the comments',
      },
    },
  },
};
```

----------------------------------------

TITLE: Adding Additional Prop Tables in Storybook Info Addon
DESCRIPTION: Shows how to include prop tables for components that are not directly used in the story. This is useful for documenting related components or available alternatives.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_7

LANGUAGE: jsx
CODE:
```
storiesOf('Addons|Info.Options.propTables', module).add(
  'Shows additional component prop tables',
  withInfo({
    text: 'There should be a prop table added for a component not included in the story',
    propTables: [FlowTypeButton],
  })(() => <BaseButton label="Button" />)
);
```

----------------------------------------

TITLE: Defining Storybook Story for Angular Component
DESCRIPTION: This code defines a Storybook story for an Angular component named MyComponent. It imports necessary modules from '@storybook/angular' and defines a default story with an example property sourced from an environment variable.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-env-var-config.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { MyComponent } from './MyComponent';

// To apply a set of backgrounds to all stories of Button:
const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;

export const Default: Story = {
  args: {
    exampleProp: process.env.EXAMPLE_VAR,
  },
};
```

----------------------------------------

TITLE: Defining Example Story in Web Components Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates setting a web component story in Storybook, specifying the component name and disabling default accessibility checks through globals.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_12

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/web-components';

const meta: Meta = {
  component: 'my-component',
};

export default meta;
type Story = StoryObj;

export const ExampleStory: Story = {
  globals: {
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  },
};

```

----------------------------------------

TITLE: Displaying Help Information
DESCRIPTION: Displays the usage information for the `storybook dev` command, listing all available options and their descriptions.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
storybook dev --help
```

----------------------------------------

TITLE: Defining Storybook Meta for Button Component (CSF)
DESCRIPTION: This code defines the Storybook meta configuration for a Button component using the Component Story Format (CSF). It imports the Meta type from '@storybook/your-framework', the action function from 'storybook/actions', and the Button component. It then defines a meta object with the component and an onClick action.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-actions-action-function.md#_snippet_6

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { action } from 'storybook/actions';

import Button from './Button';

const meta = {
  component: Button,
  args: {
    // 👇 Create an action that appears when the onClick event is fired
    onClick: action('on-click'),
  },
} satisfies Meta<typeof Button>;

export default meta;
```

----------------------------------------

TITLE: Configuring Storybook with TypeScript
DESCRIPTION: This TypeScript configuration file defines the Storybook framework, specifies the location of story files, and disables the backgrounds feature. It also imports the StorybookConfig type for type safety.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/essential-feature-disable.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  features: {
    backgrounds: false, // 👈 disable the backgrounds feature
  },
};

export default config;
```

----------------------------------------

TITLE: Defining Button Story with ArgTypes in Svelte CSF (JS)
DESCRIPTION: This code defines a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and defines a 'Basic' story with argTypes to control the 'label' property.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-in-story.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
  });
</script>

<Story
  name="Basic"
  argTypes={{
    label: { control: 'text', description: 'Overwritten description' }
  }}
/>
```

----------------------------------------

TITLE: Initializing Button stories with Solid
DESCRIPTION: This code defines Storybook stories for a Solid Button component. It imports the Button component from './Button' and uses a decorator to add margin around the story. The decorator wraps the Story component with a div that has a margin of 3em.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-component-decorator.md#_snippet_5

LANGUAGE: js
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  decorators: [
    (Story) => (
      <div style={{ margin: '3em' }}>
        <Story />
      </div>
    ),
  ],
};
```

----------------------------------------

TITLE: Configuring Angular Story for Example Component
DESCRIPTION: This snippet configures a Storybook story for an Angular component named 'Example'. It imports the necessary modules from '@storybook/angular' and defines the component and its argument types, specifically a 'number' type for the 'value' argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-type.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Example } from './Example';

const meta: Meta<Example> = {
  component: Example,
  argTypes: {
    value: { type: 'number' },
  },
};

export default meta;
```

----------------------------------------

TITLE: Initializing Storybook Project Annotations for React
DESCRIPTION: This snippet initializes Storybook project annotations for a React project. It imports necessary modules, combines preview and addon annotations, and sets up a beforeAll hook for Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/portable-stories-jest-set-project-annotations.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { beforeAll } from '@jest/globals';
import { setProjectAnnotations } from '@storybook/react-vite';
// 👇 Import the exported annotations, if any, from the addons you're using; otherwise remove this
import * as addonAnnotations from 'my-addon/preview';
import * as previewAnnotations from './.storybook/preview';

const annotations = setProjectAnnotations([previewAnnotations, addonAnnotations]);

// Supports beforeAll hook from Storybook
beforeAll(annotations.beforeAll);
```

----------------------------------------

TITLE: Importing Dependencies and Setting Up Storybook Documentation for Button Stories
DESCRIPTION: This snippet imports required dependencies from Storybook and local files, then sets up the documentation structure using Meta and Template components. It's used to create a documentation page for Button component stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/pages/button.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { Meta } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './button.stories.tsx';
import Template from './Template.mdx';

<Meta of={ButtonStories} />

<Template />
```

----------------------------------------

TITLE: Defining Non-A11y Story in React Storybook (JavaScript)
DESCRIPTION: This snippet sets up a story for 'MyComponent' in a React application using Storybook, with accessibility checks disabled. The component import and basic story configuration for React are demonstrated.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const NonA11yStory = {
  globals: {
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  },
};

```

----------------------------------------

TITLE: Rendering Checkbox Story in MDX for Svelte CSF
DESCRIPTION: This snippet shows how to import and render a Checkbox component story specifically for Svelte using Component Story Format (CSF) in Storybook documentation. It imports the Canvas component and Svelte-specific Checkbox stories, then renders the Unchecked story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-auto-docs-mdx-docs-story.md#2025-04-22_snippet_1

LANGUAGE: mdx
CODE:
```
import { Canvas } from '@storybook/addon-docs/blocks';

import * as CheckboxStories from './Checkbox.stories.svelte';

<Canvas of={CheckboxStories.Unchecked} />
```

----------------------------------------

TITLE: Configuring Svelte Button Story
DESCRIPTION: This code configures a Storybook story for a Svelte Button component. It imports the Button component and the withActions decorator, then defines the component metadata and sets up action handling for 'mouseover' and 'click .btn' events.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-action-event-handle.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

import { withActions } from 'storybook/actions/decorator';

export default {
  component: Button,
  parameters: {
    actions: {
      handles: ['mouseover', 'click .btn'],
    },
  },
  decorators: [withActions],
};
```

----------------------------------------

TITLE: Adding Storybook Webpack 5 Babel Addon via npm
DESCRIPTION: Uses `npx` (Node Package Execute) to run the latest version of the Storybook CLI and add the `@storybook/addon-webpack5-compiler-babel` addon to the current project. This command is intended for projects managed with npm.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-compiler-babel-auto-install.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npx storybook@latest add @storybook/addon-webpack5-compiler-babel
```

----------------------------------------

TITLE: Initializing Button Storybook story for Svelte (CSF)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using the Component Story Format (CSF). It imports the Button component and defines its metadata, including documentation parameters to exclude the 'style' control.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-argtypes-parameter.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const meta = defineMeta({
    component: Button,
    parameters: {
      docs: {
        controls: { exclude: ['style'] },
      },
    },
  });
</script>
```

----------------------------------------

TITLE: Defining Histogram Story with JavaScript for Web Components
DESCRIPTION: This code defines a Storybook story for the Histogram component using JavaScript for Web Components. It exports a default object that specifies the component to be rendered. It also defines a default story with arguments to configure the component's properties.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/histogram-story.md#_snippet_13

LANGUAGE: javascript
CODE:
```
export default {
  component: 'histogram-component',
};

export const Default = {
  args: {
    dataType: 'latency',
    showHistogramLabels: true,
    histogramAccentColor: '#1EA7FD',
    label: 'Latency distribution',
  },
};
```

----------------------------------------

TITLE: Component Story Format (CSF) Equivalent of MDX Example
DESCRIPTION: This shows the same Checkbox story from the MDX example rewritten in Component Story Format (CSF). It demonstrates the one-to-one mapping between MDX and CSF syntax.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/mdx.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { Checkbox } from './Checkbox';
export default { title: "MDX/Checkbox" component: Checkbox };
export const allCheckboxes = () => (
  <form>
    <Checkbox id="Unchecked" label="Unchecked" />
    <Checkbox id="Checked" label="Checked" checked />
    <Checkbox appearance="secondary" id="second" label="Secondary" checked />
  </form>
);
```

----------------------------------------

TITLE: Configuring Vite for Preact in Storybook
DESCRIPTION: This code snippet demonstrates how to configure Vite for a Preact project within Storybook. It imports the defineConfig function from vite and the preact plugin from @preact/preset-vite. The defineConfig function is then used to configure Vite with the preact plugin.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_52

LANGUAGE: typescript
CODE:
```
import { defineConfig } from "vite";
import preact from "@preact/preset-vite";

export default defineConfig({
  plugins: [preact()],
});
```

----------------------------------------

TITLE: Get URL State with Override Parameters - JavaScript
DESCRIPTION: This method retrieves the application URL state, including any overridden or custom parameter values. It allows addons to access and modify the current URL state of the Storybook application.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/addons-api.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
import { addons } from '@storybook/preview-api';

const channel = addons.getChannel();

channel.on('storybookAPI/getUrlState', (overrideParams) => {
  const urlState = addons.getUrlState(overrideParams);
  console.log(urlState);
});
```

----------------------------------------

TITLE: Story-level a11y Configuration
DESCRIPTION: This code snippet demonstrates how to customize the a11y ruleset at the story level by including a new parameter in the story. This allows you to override the global or component-level configurations for a specific story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/accessibility-testing.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
export const MyStory = () => <Button label="Click me" />;
MyStory.parameters = {
  a11y: {
    element: '#storybook-root',
    config: {},
    options: {},
    manual: false,
  },
};

```

----------------------------------------

TITLE: Storybook Builder API Interface
DESCRIPTION: Defines the interface that every Storybook builder must implement. It exposes configuration options and entry points for starting the development server and building the static Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/builders/builder-api.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
export interface Builder {
  getConfig: (options: Options) => Promise<any>;
  usePreviewUrl?: boolean;
  corePresets?: string[];
  overrideWebpackConfig?: ({ config, options, presets }: any) => Promise<any>;
  start: (options: Options) => Promise<void>;
  build: (options: Options) => Promise<void>;
  docs?: {
    frameworkPreviewDocsOptions?: any;
  };
}

```

----------------------------------------

TITLE: Configuring Primary Button Story in HTML
DESCRIPTION: This JavaScript code configures a primary button story within Storybook for an HTML component. It imports the createButton function from './Button' and sets up the story with arguments for label and primary state.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-rename-story.md#_snippet_1

LANGUAGE: js
CODE:
```
import { createButton } from './Button';

export default {
  render: (args) => createButton(args),
};

export const Primary = {
  // 👇 Rename this story
  name: 'I am the primary',
  args: {
    label: 'Button',
    primary: true,
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for React Component (JS)
DESCRIPTION: This code initializes a Storybook story for a React component, MyComponent, using JavaScript. It defines a story named 'WithAnImage' that renders an image with a specified source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-without-import.md#_snippet_1

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

// Assume image.png is located in the "public" directory.
export const WithAnImage = {
  render: () => <img src="/image.png" alt="my image" />,
};

```

----------------------------------------

TITLE: Defining Web Components Button Stories with JavaScript
DESCRIPTION: This code defines Storybook stories for a Web Components Button component using JavaScript. It sets the component to 'custom-button' and defines argTypes for controlling the background color. It exports two stories: Accessible and Inaccessible, demonstrating different argument configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-with-accessibility.md#_snippet_14

LANGUAGE: javascript
CODE:
```
export default {
  component: 'custom-button',
  argTypes: {
    backgroundColor: { control: 'color' },
  },
};

// This is an accessible story
export const Accessible = {
  args: {
    primary: false,
    label: 'Button',
  },
};

// This is not
export const Inaccessible = {
  args: {
    ...Accessible.args,
    backgroundColor: 'red',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook Composition for Local Storybooks
DESCRIPTION: This snippet demonstrates how to compose multiple local Storybooks running on different ports, such as React and Angular Storybooks.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/sharing/storybook-composition.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  refs: {
    react: {
      title: 'React',
      url: 'http://localhost:6006',
    },
    angular: {
      title: 'Angular',
      url: 'http://localhost:6007',
    },
  },
};
```

----------------------------------------

TITLE: Providing SSL Key for Angular Storybook
DESCRIPTION: Provides an SSL key to serve Storybook over HTTPS. This is required for HTTPS to function correctly.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_22

LANGUAGE: JSON
CODE:
```
{"sslKey": "your-ssl-key"}
```

----------------------------------------

TITLE: Configuring SWC in Storybook with JavaScript
DESCRIPTION: A JavaScript configuration example for customizing SWC in Storybook's main.js file. It exports a default configuration object that specifies the framework and includes a swc function to modify the default SWC configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-swc.md#2025-04-22_snippet_0

LANGUAGE: js
CODE:
```
export default {
  framework: {
    name: '@storybook/your-framework',
    options: {},
  },
  swc: (config, options) => {
    return {
      ...config,
      // Apply your custom SWC configuration
    };
  },
};
```

----------------------------------------

TITLE: Typing Preview.js Default Export with TypeScript in Storybook
DESCRIPTION: This code snippet illustrates how to use TypeScript to type the default export in `preview.ts`. It imports the `Preview` type from the appropriate Storybook renderer package (e.g., `@storybook/react`) and applies it to the `preview` object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_87

LANGUAGE: ts
CODE:
```
import { Preview } from "@storybook/react";

const preview: Preview = {
  parameters: {
    actions: { argTypesRegex: "^on[A-Z].*" },
  },
};
export default preview;
```

----------------------------------------

TITLE: Scroll Into View Story with Decorator (Vue TS)
DESCRIPTION: This story demonstrates how to use a decorator in Vue (TypeScript) to emit the SCROLL_INTO_VIEW event when the story is rendered. It uses the useChannel hook to emit the event to the Storybook channel.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-scroll-into-view.md#_snippet_7

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/vue3-vite';

import { useChannel } from 'storybook/preview-api';
import { SCROLL_INTO_VIEW } from 'storybook/highlight';

import MyComponent from './MyComponent.vue';

const meta = {
  component: MyComponent,
```

----------------------------------------

TITLE: List Component Story Configuration (JavaScript)
DESCRIPTION: Configures the Storybook story for the List component using JavaScript. It imports the List and ListItem components and defines the default export for Storybook, including subcomponents.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-with-subcomponents.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import List from './List.vue';
import ListItem from './ListItem.vue';

export default {
  component: List,
  subcomponents: { ListItem }, //👈 Adds the ListItem component as a subcomponent
};
```

----------------------------------------

TITLE: Upgrading Storybook with yarn
DESCRIPTION: This command uses yarn dlx to upgrade Storybook to the latest version using yarn package manager. It runs the 'upgrade' command of the '@next' version of Storybook.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-upgrade.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn dlx storybook@next upgrade
```

----------------------------------------

TITLE: Implementing Theme Overrides in Stories
DESCRIPTION: Example showing how to override themes at both the meta and story level using the globals.theme parameter in a Button component story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/themes/README.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { Button } from './Button';

export default {
  title: 'Example/Button',
  component: Button,
  // meta level override
  globals: { theme: 'dark' },
};

export const Primary = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const PrimaryDark = {
  args: {
    primary: true,
    label: 'Button',
  },
  // story level override
  globals: { theme: 'dark' },
};
```

----------------------------------------

TITLE: Defining argTypes with options in Vue Storybook (JS)
DESCRIPTION: This snippet demonstrates how to define `argTypes` with options in a Vue Storybook story using JavaScript. It configures `propertyA` and `propertyB` with predefined options for selection in the Storybook UI. The `control` property is used to specify the type of control for `propertyA`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-custom-args-complex.md#_snippet_11

LANGUAGE: javascript
CODE:
```
component: YourComponent,
  //👇 Creates specific argTypes with options
  argTypes: {
    propertyA: {
      options: ['Item One', 'Item Two', 'Item Three'],
      control: { type: 'select' }, // automatically inferred when 'options' is defined
    },
    propertyB: {
      options: ['Another Item One', 'Another Item Two', 'Another Item Three'],
    },
  },
};
```

----------------------------------------

TITLE: Referencing a Story in MDX
DESCRIPTION: This snippet shows how to reference a story within an MDX file using the `of` prop. It imports the necessary modules and component stories, then uses the `Story` block to display a specific story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_129

LANGUAGE: MDX
CODE:
```
import { Meta, Story } from "@storybook/blocks";
import * as ComponentStories from "./some-component.stories";

<Meta of={ComponentStories} />

<Story of={ComponentStories.standard} />
```

----------------------------------------

TITLE: Configuring TypeScript Test Runner for Storybook
DESCRIPTION: TypeScript implementation of Storybook test runner configuration with type-safe hooks for test lifecycle management. Includes setup, preVisit, and postVisit hooks with utilities for getting story context and waiting for page readiness.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-helper-function.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { TestRunnerConfig } from '@storybook/test-runner';
import { getStoryContext, waitForPageReady } from '@storybook/test-runner';

const config: TestRunnerConfig = {
  // Hook that is executed before the test runner starts running tests
  setup() {
    // Add your configuration here.
  },
  /* Hook to execute before a story is initially visited before being rendered in the browser.
   * The page argument is the Playwright's page object for the story.
   * The context argument is a Storybook object containing the story's id, title, and name.
   */
  async preVisit(page, context) {
    // Add your configuration here.
  },
  /* Hook to execute after a story is visited and fully rendered.
   * The page argument is the Playwright's page object for the story
   * The context argument is a Storybook object containing the story's id, title, and name.
   */
  async postVisit(page, context) {
    // Get the entire context of a story, including parameters, args, argTypes, etc.
    const storyContext = await getStoryContext(page, context);

    // This utility function is designed for image snapshot testing. It will wait for the page to be fully loaded, including all the async items (e.g., images, fonts, etc.).
    await waitForPageReady(page);

    // Add your configuration here.
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Test Filtering with Tags in Storybook
DESCRIPTION: JavaScript configuration for filtering Storybook tests using tags, allowing inclusion, exclusion, or skipping of specific stories.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-runner.mdx#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
module.exports = {
  tags: {
    exclude: ['exclude-tag'],
    include: ['include-tag'],
    skip: ['skip-tag'],
  },
};
```

----------------------------------------

TITLE: Installing Storybook Next.js Vite with pnpm
DESCRIPTION: This command installs the @storybook/nextjs-vite package as a development dependency using pnpm. It ensures that the package is available during development and build processes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-install.md#_snippet_1

LANGUAGE: shell
CODE:
```
pnpm add --save-dev @storybook/nextjs-vite
```

----------------------------------------

TITLE: Running Release with Yarn
DESCRIPTION: Executes the release script using Yarn package manager
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-release.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
yarn release
```

----------------------------------------

TITLE: Automigrate Skipping Install
DESCRIPTION: Skips the installation of dependencies during the automigration process. This can be useful when dependencies are already managed or when installation is not desired.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_93

LANGUAGE: shell
CODE:
```
storybook automigrate --skip-install
```

----------------------------------------

TITLE: Configuring Storybook Meta for Common Component (TS)
DESCRIPTION: This code configures Storybook metadata for a generic component using TypeScript. It defines the component and configures the 'icon' argument with available options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/arg-types-options.md#_snippet_7

LANGUAGE: ts
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite, angular, etc.)
import type { Meta } from '@storybook/your-framework';

import { Example } from './Example';

const meta = {
  component: Example,
  argTypes: {
    icon: {
      options: ['arrow-up', 'arrow-down', 'loading'],
    },
  },
} satisfies Meta<typeof Example>;

export default meta;
```

----------------------------------------

TITLE: Initializing Button Story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines a 'Primary' story with specific arguments for the button's appearance and label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-with-args.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular/';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Primary: Story = {
  args: {
    primary: true,
    label: 'Button',
  },
};
```

----------------------------------------

TITLE: CSF 3.0 Story with Auto-titling
DESCRIPTION: Demonstrates a Component Story Format 3.0 story using auto-titling features, including explicit title and story name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/configure/user-interface/sidebar-and-urls.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { Button } from './Button';

export default {
  component: Button,
  title: 'Custom Title',
};

export const Primary = {
  name: 'I am the primary',
};
```

----------------------------------------

TITLE: Including Filename in Storybook Code Snippet
DESCRIPTION: This code snippet demonstrates how to include a filename in a Storybook code snippet using the `filename` attribute. This helps readers understand which file the code relates to and where to paste it into their project.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/documentation/new-snippets.mdx#_snippet_1

LANGUAGE: ts
CODE:
```

```

----------------------------------------

TITLE: Disabling Storybook Telemetry
DESCRIPTION: This command disables Storybook's telemetry, preventing the collection of usage data. It's useful for users who prefer to opt-out of data collection.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_24

LANGUAGE: CLI
CODE:
```
storybook dev --disable-telemetry
```

----------------------------------------

TITLE: Styling Storybook Addon Layout with CSS
DESCRIPTION: Defines CSS rules for styling the Storybook addon section, including text containers, images, and responsiveness for various screen sizes. No additional dependencies are required beyond standard CSS support. Key selectors target layouts for .sb-addon, .sb-addon-text, and .sb-addon-img, and media queries ensure that the layout adapts for tablet and mobile displays. Inputs are based on class selectors applied to HTML elements, and outputs are visual—defining padding, images, margins, and positioning for Storybook addon panels and their children.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/create-storybook/rendererAssets/common/Configure.mdx#2025-04-22_snippet_2

LANGUAGE: CSS
CODE:
```
  border: 1px solid rgba(0, 0, 0, 0.05);
  background: #EEF3F8;
  height: 180px;
  margin-bottom: 48px;
  overflow: hidden;
}

.sb-addon-text {
  padding-left: 48px;
  max-width: 240px;
}

.sb-addon-text h4 {
  padding-top: 0px;
}

.sb-addon-img {
  position: absolute;
  left: 345px;
  top: 0;
  height: 100%;
  width: 200%;
  overflow: hidden;
}

.sb-addon-img img {
  width: 650px;
  transform: rotate(-15deg);
  margin-left: 40px;
  margin-top: -72px;
  box-shadow: 0 0 1px rgba(255, 255, 255, 0);
  backface-visibility: hidden;
}

@media screen and (max-width: 800px) {
  .sb-addon-img {
    left: 300px;
  }
}

@media screen and (max-width: 600px) {
  .sb-section {
    flex-direction: column;
  }

  .sb-features-grid {
    grid-template-columns: repeat(1, 1fr);
  }

  .sb-socials {
    grid-template-columns: repeat(2, 1fr);
  }

  .sb-addon {
    height: 280px;
    align-items: flex-start;
    padding-top: 32px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 24px;
  }

  .sb-addon-img {
    right: 0;
    left: 0;
    top: 130px;
    bottom: 0;
    overflow: hidden;
    height: auto;
    width: 124%;
  }

  .sb-addon-img img {
    width: 1200px;
    transform: rotate(-12deg);
    margin-left: 0;
    margin-top: 48px;
    margin-bottom: -40px;
    margin-left: -24px;
  }
}
  `}
</style>
```

----------------------------------------

TITLE: Configuring Accessibility Rules in Storybook Svelte
DESCRIPTION: This snippet demonstrates how to configure accessibility rules within a Storybook story using the a11y addon. It shows how to define rules, specify selectors, and disable specific checks based on their IDs. The configuration is applied within the `parameters.a11y.config.rules` section of the story's metadata.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-component-config.md#_snippet_5

LANGUAGE: typescript
CODE:
```
{
  id: 'autocomplete-valid',
  selector: '*:not([autocomplete="nope"])',
}
```

LANGUAGE: typescript
CODE:
```
{
  id: 'image-alt',
  enabled: false,
}
```

----------------------------------------

TITLE: Installing Storybook Next.js Vite with npm
DESCRIPTION: This command installs the @storybook/nextjs-vite package as a development dependency using npm. It ensures that the package is available during development and build processes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-install.md#_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev @storybook/nextjs-vite
```

----------------------------------------

TITLE: Automigrate to webpack5 builders
DESCRIPTION: Detects whether to migrate to webpack5 builders and applies the changes automatically without changing the Storybook version.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_186

LANGUAGE: Shell
CODE:
```
npx sb automigrate
```

----------------------------------------

TITLE: Defining Storybook Stories with Include/Exclude - JavaScript
DESCRIPTION: This code defines Storybook stories for a component using JavaScript, demonstrating how to include and exclude controls using array and regular expression patterns. It exports the component and defines stories with parameters to control the Storybook UI.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_2

LANGUAGE: js
CODE:
```
import YourComponent from './YourComponent.svelte';

export default {
  component: YourComponent,
};

export const ArrayInclude = {
  parameters: {
    controls: { include: ['foo', 'bar'] },
  },
};

export const RegexInclude = {
  parameters: {
    controls: { include: /^hello*/ },
  },
};

export const ArrayExclude = {
  parameters: {
    controls: { exclude: ['foo', 'bar'] },
  },
};

export const RegexExclude = {
  parameters: {
    controls: { exclude: /^hello*/ },
  },
};
```

----------------------------------------

TITLE: Defining Storybook story for Svelte component
DESCRIPTION: This snippet defines a basic Storybook story for a Svelte component. It imports the component and exports a default object containing the title and component, along with a story named 'Baz'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/foo-bar-baz-story.md#_snippet_2

LANGUAGE: js
CODE:
```
import Foo from './Foo.svelte';

export default {
  /* 👇 The title prop is optional.
   * See https://storybook.js.org/docs/configure/#configure-story-loading
   * to learn how to generate automatic titles
   */
  title: 'Foo/Bar',
  component: Foo,
};

export const Baz = {};
```

----------------------------------------

TITLE: Opting out of autodocs for a component
DESCRIPTION: This code snippet shows how to remove the 'autodocs' tag for a specific component to prevent autodocs generation. This is useful when you have set autodocs globally but want to opt-out for certain components.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_43

LANGUAGE: javascript
CODE:
```
// Button.stories.ts
export default {
  component: Button,
  tags: ["!autodocs"],
};
```

----------------------------------------

TITLE: Resetting MockDate in Storybook Preview using TypeScript
DESCRIPTION: A TypeScript configuration for Storybook that types the preview object and resets MockDate before each story renders. Uses the Preview type from the renderer-specific Storybook package.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/before-each-in-preview.md#2025-04-22_snippet_1

LANGUAGE: ts
CODE:
```
// Replace your-renderer with the renderer you are using (e.g., react, vue3, angular, etc.)
import { Preview } from '@storybook/your-renderer';
import MockDate from 'mockdate';

const preview: Preview = {
  async beforeEach() {
    MockDate.reset();
  },
};

export default preview;
```

----------------------------------------

TITLE: Debugging Storybook Add Command
DESCRIPTION: The `--debug` option outputs more logs in the CLI to assist debugging when using the `storybook add` command. This provides more detailed information about the installation process.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_63

LANGUAGE: Shell
CODE:
```
storybook add --debug
```

----------------------------------------

TITLE: Using a Function for Dynamic refs Configuration
DESCRIPTION: Example showing how to use a function to dynamically configure refs in Storybook's main configuration file, allowing for runtime decisions on Storybook composition.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/main-config/main-config-refs.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// Function form allows you to execute code to build the refs dynamically
export default {
  refs: (config, { configType }) => {
    if (configType === 'DEVELOPMENT') {
      return {
        react: {
          title: 'React',
          url: 'http://localhost:7007',
        },
      };
    }
    return {
      react: {
        title: 'React',
        url: 'https://storybook.reactjs.org/',
      },
    };
  },
};
```

----------------------------------------

TITLE: Setting Up Image Snapshot Testing with Test Runner
DESCRIPTION: Configuration for running visual regression testing alongside other tests using the test-runner.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/snapshot-testing/storyshots-migration-guide.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
const { toMatchImageSnapshot } = require('jest-image-snapshot');

export default {
  hooks: {
    test: async ({ testRunner, step }) => {
      const { describe, it } = testRunner;
      expect.extend({ toMatchImageSnapshot });

      describe('Image snapshots', () => {
        it('should match image snapshots', async ({ page, expect }) => {
          await step('image snapshot', async () => {
            const image = await page.screenshot();
            expect(image).toMatchImageSnapshot();
          });
        });
      });
    }
  }
};
```

----------------------------------------

TITLE: Fetching Story URL with hrefTo
DESCRIPTION: Use `hrefTo` to retrieve the URL for a specific story. This example demonstrates how to use the returned promise to log the URL using Storybook's `action`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { hrefTo } from '@storybook/addon-links';
import { action } from 'storybook/actions';

export default {
  title: 'Href',
};

export const log = () => {
  hrefTo('Href', 'log').then(action('URL of this story'));

  return <span>See action logger</span>;
};
```

----------------------------------------

TITLE: Configure Storybook Addons in TypeScript
DESCRIPTION: Configures Storybook addons using TypeScript, specifically commenting out Next.js related addons. It imports the StorybookConfig type from '@storybook/nextjs-vite'. This configuration is exported as the default export for Storybook to use.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-vite-remove-addons.md#_snippet_1

LANGUAGE: ts
CODE:
```
import type { StorybookConfig } from '@storybook/nextjs-vite';

const config: StorybookConfig = {
  // ...
  addons: [
    // ...
    // 👇 These can both be removed
    // 'storybook-addon-next',
    // 'storybook-addon-next-router',
  ],
};

export default config;
```

----------------------------------------

TITLE: Defining Non-A11y Story in Svelte Storybook (TypeScript)
DESCRIPTION: This TypeScript snippet configures a Svelte component story using '@storybook/addon-svelte-csf', outlining how to disable automatic accessibility checks on 'MyComponent'.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_6

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="NonA11yStory"
  globals={{
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  }}
/>

```

----------------------------------------

TITLE: Configuring Storybook with Vite and GraphQL (TypeScript)
DESCRIPTION: TypeScript configuration for Storybook using Vite bundler with GraphQL support. Includes type definitions and adds the vite-plugin-graphql-loader.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/webpack-final-to-vite-final.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';
import graphql from 'vite-plugin-graphql-loader';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  async viteFinal(config) {
    return {
      ...config,
      plugins: [...(config.plugins ?? []), graphql()],
    };
  },
};

export default config;
```

----------------------------------------

TITLE: Defining Angular Component with NgRx Store Injection
DESCRIPTION: This component demonstrates dependency injection of NgRx Store. It has a method that checks if the store is properly injected and returns a status message.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.ts.txt#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
@Component({
  selector: 'storybook-comp-with-store',
  template: '<div>{{this.getStoreState()}}</div>',
})
class WithStoreComponent {
  private store: Store<any>;

  constructor(store: Store<any>) {
    this.store = store;
  }

  getStoreState(): string {
    return this.store === undefined ? 'Store is NOT injected' : 'Store is injected';
  }
}
```

----------------------------------------

TITLE: Enable Next.js appDirectory in Storybook (JS)
DESCRIPTION: This JavaScript snippet configures Storybook to work with the Next.js app directory by setting the `appDirectory` parameter to `true` within the `nextjs` configuration. This allows Storybook to correctly resolve modules and components within the Next.js app directory structure.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/nextjs-app-directory-in-preview.md#_snippet_0

LANGUAGE: js
CODE:
```
export default {
  // ...
  parameters: {
    // ...
    nextjs: {
      appDirectory: true,
    },
  },
};
```

----------------------------------------

TITLE: Handling Storybook Preview Requests in TypeScript
DESCRIPTION: This function handles requests for the Storybook preview iframe. It sets up the necessary headers, renders the preview HTML, and sends the response. It also handles errors and sends appropriate error responses.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/server/README.md#2025-04-22_snippet_1

LANGUAGE: TypeScript
CODE:
```
async getPreviewHtml(req: Request, res: Response) {
  await this.ready;
  const { headers, body } = await this.previewBuilder.getPreviewResult();
  Object.entries(headers).forEach(([key, value]) => {
    res.setHeader(key, value);
  });
  res.send(body);
}
```

----------------------------------------

TITLE: Configuring Storybook Story (TypeScript - Web Components)
DESCRIPTION: This TypeScript code configures a Storybook story for a Button component in a web components environment. It sets the `tags` property to exclude the story from the sidebar and documentation, and defines arguments for the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_20

LANGUAGE: ts
CODE:
```
export const Variant2: Story = {
  // 👇 This story will not appear in Storybook's sidebar or docs page
  tags: ['!dev', '!autodocs'],
  args: { variant: 2 },
};
```

----------------------------------------

TITLE: Rendering Custom Code with Source Block
DESCRIPTION: Demonstrates how to render custom code using the `Source` block by providing the code directly as a string prop. This allows displaying arbitrary code snippets within your documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-source.mdx#_snippet_3

LANGUAGE: markdown
CODE:
```
import { Meta, Source } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

<Source code={`const thisIsCustomSource = true;
if (isSyntaxHighlighted) {
  console.log('syntax highlighting is working');
}`} />
```

----------------------------------------

TITLE: Using linkTo with String or Function Parameters
DESCRIPTION: Demonstrates the flexibility of `linkTo` by accepting either string literals or functions that return strings as parameters for specifying the target story kind and name.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/links/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import { linkTo } from '@storybook/addon-links';

linkTo('Toggle', 'off');
linkTo(
  () => 'Toggle',
  () => 'off'
);
linkTo('Toggle'); // Links to the first story in the 'Toggle' kind
```

----------------------------------------

TITLE: Rendering Web Components Button
DESCRIPTION: This snippet demonstrates how to render a web component button within a Storybook story using a render function and lit-html. It imports the html function from 'lit' and uses it to define the template for the button.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_19

LANGUAGE: javascript
CODE:
```
import { html } from 'lit';

export default {
  component: 'demo-button',
};

export const Primary = {
  render: () => html`<demo-button primary></demo-button>`,
};
```

----------------------------------------

TITLE: Initializing Viewport Configuration in Angular (TS)
DESCRIPTION: This snippet initializes the viewport configuration for an Angular component in Storybook using TypeScript. It imports the component and sets the viewport parameter to use INITIAL_VIEWPORTS.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-viewport-configuration-in-meta.md#_snippet_2

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { INITIAL_VIEWPORTS } from 'storybook/viewport';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
  parameters: {
    viewport: {
      //👇 Set available viewports for every story in the file
      options: INITIAL_VIEWPORTS,
    },
  },
};

export default meta;
```

----------------------------------------

TITLE: Defining Svelte Button Story with CSF (TS)
DESCRIPTION: This snippet defines a Storybook story for a Svelte Button component using Component Story Format (CSF) with TypeScript. It imports the necessary modules and defines a primary story with specified arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story.md#_snippet_14

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';
	const { Story } = defineMeta({
		component: Button,
	});
</script>

<Story name="Primary" args={{ primary: true, label: 'Button' }} />
```

----------------------------------------

TITLE: Configuring Storybook Meta with Custom Color Options
DESCRIPTION: This code snippet demonstrates how to configure Storybook metadata for a Button component using TypeScript. It defines the component, title, tags, and custom color options for the background color using argTypes.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/addon-backgrounds-options-in-meta.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
dark: { name: 'Dark', value: '#000' },
        // 👇 Add a new option
        gray: { name: 'Gray', value: '#CCC' },
```

----------------------------------------

TITLE: Advanced Configuration in Storybook Main File
DESCRIPTION: This code demonstrates advanced configuration options in the Storybook main.js file, including custom webpack and babel configurations.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/addons/writing-presets.mdx#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
module.exports = {
  stories: ['../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: ['@storybook/addon-essentials'],
  webpackFinal: async (config) => {
    config.module.rules.push({
      test: /\.scss$/,
      use: ['style-loader', 'css-loader', 'sass-loader'],
    });
    return config;
  },
  babel: async (options) => ({
    ...options,
    plugins: [...options.plugins, '@babel/plugin-transform-react-jsx'],
  }),
};
```

----------------------------------------

TITLE: Initializing Svelte Storybook Story with CSF
DESCRIPTION: This code initializes a Storybook story for a Svelte component named MyComponent using the Component Story Format (CSF). It imports the component and defines the meta object with the component and title.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-csf-3-auto-title-redundant.md#_snippet_1

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
    title: 'components/MyComponent/MyComponent',
  });
</script>

<Story name="Default" args={{ something: 'Something else' }} />
```

----------------------------------------

TITLE: Defining Monospace Font Family in CSS
DESCRIPTION: This CSS snippet defines the font-family for monospace text used in Storybook. It includes a fallback list of commonly available monospace fonts for different operating systems and environments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/components/brand/typography.mdx#2025-04-22_snippet_2

LANGUAGE: CSS
CODE:
```
font-family:
  ui-monospace,
  Menlo,
  Monaco,
  "Roboto Mono",
  "Oxygen Mono",
  "Ubuntu Monospace",
  "Source Code Pro",
  "Droid Sans Mono",
  "Courier New",
  monospace;
```

----------------------------------------

TITLE: Storybook v6-style Story Sort Function
DESCRIPTION: This code snippet shows an example of a story sort function used in Storybook v6.x. It compares the `kind` property of stories and uses `localeCompare` for sorting based on story IDs.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_170

LANGUAGE: javascript
CODE:
```
// v6-style sort
function storySort(a, b) {
  return a[1].kind === b[1].kind
    ? 0
    : a[1].id.localeCompare(b[1].id, undefined, { numeric: true });
},
```

----------------------------------------

TITLE: Updating WithTooltip Properties in React
DESCRIPTION: The properties `tooltipShown`, `closeOnClick`, and `onVisibilityChange` of `WithTooltipComponent` from `@storybook/components` have been removed. Replace `closeOnClick` with `closeOnOutsideClick`, `tooltipShown` with `defaultVisible`, and `onVisibilityChange` with `onVisibleChange`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_72

LANGUAGE: tsx
CODE:
```
<WithTooltip
  closeOnClick // becomes closeOnOutsideClick
  tooltipShown // becomes defaultVisible
  onVisibilityChange // becomes onVisibleChange
>
  ...
</WithTooltip>
```

----------------------------------------

TITLE: Configuring Storybook with Nativewind
DESCRIPTION: This code snippet provides an example configuration for using Nativewind with Storybook. It illustrates how to set the `jsxImportSource` option to "nativewind" within the Storybook configuration.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/react-native-web-vite.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
const main: StorybookConfig = {
  // ... rest of config

  framework: {
    name: "@storybook/react-native-web-vite",
    options: {
      pluginReactOptions: {
        jsxImportSource: "nativewind",
      },
    },
  },
}
```

----------------------------------------

TITLE: Building Storybook
DESCRIPTION: Runs the Storybook build process, which transpiles the code.  Can be run in watch mode for interactive development. Requires Yarn to be installed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/contribute/code.mdx#_snippet_6

LANGUAGE: Shell
CODE:
```
yarn build
```

----------------------------------------

TITLE: Configuring Storybook with Typescript
DESCRIPTION: This code defines the Storybook configuration using Typescript. It specifies the framework to use, the location of story files, and a function to customize the Vite configuration. The framework should be replaced with the specific framework being used (e.g., react-vite, vue3-vite).
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-vite-builder-ts-configure.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  async viteFinal(config, options) {
    // Add your configuration here
    return config;
  },
};

export default config;
```

----------------------------------------

TITLE: Configuring Storybook Story (TypeScript - Web Components)
DESCRIPTION: This TypeScript code configures a Storybook story for a Button component in a web components environment. It sets the `tags` property to exclude the story from the sidebar and documentation, and defines arguments for the component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-combo-example.md#_snippet_19

LANGUAGE: ts
CODE:
```
export const Variant1: Story = {
  // 👇 This story will not appear in Storybook's sidebar or docs page
  tags: ['!dev', '!autodocs'],
  args: { variant: 1 },
};
```

----------------------------------------

TITLE: Registering a Custom Storybook Addon with Event Listener in JavaScript/TypeScript
DESCRIPTION: This code registers a custom addon with Storybook and sets up an event listener for a custom event. When the 'custom-addon-event' is emitted, the callback function logs the event data to the browser console.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-api-on.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
addons.register('my-organisation/my-addon', (api) => {
  // Logs the event data to the browser console whenever the event is emitted.
  api.on('custom-addon-event', (eventData) => console.log(eventData));
});
```

----------------------------------------

TITLE: Rendering CSF4 Stories in MDX
DESCRIPTION: This MDX code block uses the Stories component to render all the stories from the imported CSF4 module. It allows for automatic display of all stories within the MDX documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/renderers/react/template/stories/csf4.mdx#2025-04-22_snippet_2

LANGUAGE: MDX
CODE:
```
<Stories />
```

----------------------------------------

TITLE: Configuring Storybook in JavaScript
DESCRIPTION: This snippet demonstrates how to configure Storybook using JavaScript. It exports a default configuration object that specifies the framework, story file patterns, and enables cross-origin isolation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-core-cross-origin-isolated.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  core: {
    crossOriginIsolated: true,
  },
};
```

----------------------------------------

TITLE: Specifying Package Manager for Storybook Remove Command
DESCRIPTION: The `--package-manager` option sets the package manager to use when removing the addon with the `storybook remove` command. Available package managers include `npm`, `yarn`, and `pnpm`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_66

LANGUAGE: Shell
CODE:
```
storybook remove [addon]--package-manager pnpm
```

----------------------------------------

TITLE: Defining a Story Function with Args in JavaScript
DESCRIPTION: Demonstrates how to define a story function that uses args. The args are passed as the first argument, and the context as the second argument.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/core/src/preview-api/README-store.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const YourStory = ({ x, y } /*, context*/) => /* render your story using `x` and `y` */
```

----------------------------------------

TITLE: Initializing Storybook Meta for Angular Component
DESCRIPTION: This code initializes the Storybook meta object for an Angular component, defining the component to be used in the stories. It imports necessary modules from '@storybook/angular' and defines the component to be tested.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-play-function-alt-queries.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { userEvent, within } from 'storybook/test';

import { MyComponent } from './MyComponent.component';

const meta: Meta<MyComponent> = {
  component: MyComponent,
};

export default meta;
type Story = StoryObj<MyComponent>;
```

----------------------------------------

TITLE: Using useArgs Hook in Storybook Addons
DESCRIPTION: Shows how to use the `useArgs` hook exported by `storybook/manager-api` to read or update args within a Storybook addon. This allows addons to interact with and modify the args of the currently displayed story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/args.mdx#_snippet_10

LANGUAGE: javascript
CODE:
```
import { useArgs } from '@storybook/manager-api';

function MyAddon() {
  const [{ myArg }] = useArgs();

  return <div>{myArg}</div>;
}
```

----------------------------------------

TITLE: Configure Test-Only Stories in JavaScript/JSX
DESCRIPTION: Demonstrates how to configure test-only stories using JavaScript/JSX in Storybook. Shows how to apply the test-only tag at both the component and story level using CSF format.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-include-tags.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
  tags: ['test-only'], // 👈 Provides the `test-only` tag to all stories in this file
};

export const IncludeStory = {
  //👇 Adds the `test-only` tag to this story to be included in the tests when enabled in the test-runner configuration
  tags: ['test-only'],
};
```

----------------------------------------

TITLE: Importing Dependencies for Storybook Emoji Button Documentation
DESCRIPTION: This snippet imports the required components and files for setting up the Storybook documentation page for the Emoji Button component. It includes the Meta component from addon-docs, the stories for the Emoji Button, and a custom Template component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/test-storybooks/external-docs/components/emoji-button.mdx#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { Meta } from '@storybook/addon-docs';
import * as EmojiButtonStories from './emoji-button.stories.tsx';
import Template from './Template.mdx';
```

----------------------------------------

TITLE: Defining Story with Property in JavaScript
DESCRIPTION: This JavaScript code defines a Storybook story that renders the 'my-component' web component with a specific property. It uses the 'html' template literal from the 'lit' library to create the component's HTML.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-basic-and-props.md#_snippet_12

LANGUAGE: js
CODE:
```
export const WithProp = {
  render: () => html`<my-component prop="value" />`,
};
```

----------------------------------------

TITLE: Importing and Rendering Raw Markdown Content in Storybook
DESCRIPTION: This code snippet demonstrates how to import a Markdown file as raw content and render it using Storybook's Markdown component. The ?raw suffix is crucial for importing the raw content rather than a processed module.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/src/blocks/examples/Markdown-content.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
import { Markdown } from '@storybook/addon-docs/blocks';
import content from './Markdown-content.md?raw';

<Markdown>{content}</Markdown>
```

----------------------------------------

TITLE: Initializing Button Story for Angular
DESCRIPTION: This code defines a Storybook story for an Angular Button component. It imports the component and defines its metadata, including setting the layout parameter to 'centered'. This ensures the component is centered within the Storybook canvas.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-component-layout-param.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
  // Sets the layout parameter component wide.
  parameters: {
    layout: 'centered',
  },
};
```

----------------------------------------

TITLE: Initializing Svelte Checkbox Story (CSF - JS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Checkbox component using JavaScript. It imports the Checkbox component and defines the component's metadata. It exports a default object containing the component and an 'Unchecked' story with a label.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/checkbox-story-csf.md#_snippet_2

LANGUAGE: js
CODE:
```
import Checkbox from './Checkbox.svelte';

export default {
  component: Checkbox,
};

export const Unchecked = {
  args: {
    label: 'Unchecked',
  },
};
```

----------------------------------------

TITLE: Initializing Button Story - Svelte - TS
DESCRIPTION: This snippet initializes a Storybook story for a Svelte Button component using TypeScript. It imports the necessary modules from '@storybook/svelte-vite' and defines a Meta object to configure the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/csf-3-example-starter.md#_snippet_6

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/svelte-vite';

import Button from './Button.svelte';

const meta = {
  component: Button,
} satisfies Meta<typeof Button>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Primary: Story = { args: { primary: true } };
```

----------------------------------------

TITLE: Configure JSX in Storybook Docs
DESCRIPTION: This code snippet demonstrates how to configure the `configureJSX` option in Storybook's `.storybook/main.js` file. Setting `configureJSX` to `false` restores the old JSX handling behavior by preventing the addition of `@babel/plugin-transform-react-jsx`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_217

LANGUAGE: javascript
CODE:
```
module.exports = {
  addons: [
    {
      name: "@storybook/addon-docs",
      options: { configureJSX: false },
    },
  ],
};
```

----------------------------------------

TITLE: Rendering List with One Item in Solid (Storybook)
DESCRIPTION: This story renders a List component with a single ListItem in Solid within Storybook. It uses a render function to define the component's structure, passing arguments to the List component and including one ListItem.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/list-story-expanded.md#_snippet_10

LANGUAGE: ts
CODE:
```
export const OneItem: Story = {
  render: (args) => (
    <List {...args}>
      <ListItem />
    </List>
  ),
};
```

----------------------------------------

TITLE: Configuring Storybook with JavaScript
DESCRIPTION: A JavaScript configuration for Storybook's main.js file that defines the framework, story file patterns, and documentation settings. This configuration uses ES modules syntax to export the configuration object.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/main-config-docs-default-name.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  docs: {
    defaultName: 'Documentation',
  },
};
```

----------------------------------------

TITLE: Initializing Storybook Story for Solid Component
DESCRIPTION: This code initializes a Storybook story for a Solid component named MyComponent. It defines a story named 'WithAnImage' that renders the component with a specified image source and alt text.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-static-asset-cdn.md#_snippet_3

LANGUAGE: js
CODE:
```
import { MyComponent } from './MyComponent';

export default {
  component: MyComponent,
};

export const WithAnImage = {
  render: () => (
    <img src="https://storybook.js.org/images/placeholders/350x150.png" alt="My CDN placeholder" />
  ),
};
```

----------------------------------------

TITLE: Configuring Webpack with Custom Loader in TypeScript
DESCRIPTION: TypeScript implementation of Webpack configuration extension for Storybook addon. Includes type definitions and adds a custom file loader while maintaining existing module rules.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addons-preset-webpackFinal.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Configuration as WebpackConfig } from 'webpack';

export function webpackFinal(config: WebpackConfig, options: any = {}) {
  const rules = [
    ...(config.module?.rules || []),
    {
      test: /\.custom-file$/,
      loader: require.resolve(`custom-loader`),
    },
  ];
  config.module.rules = rules;

  return config;
}
```

----------------------------------------

TITLE: Defining Storybook Meta for Svelte Component (CSF)
DESCRIPTION: This snippet defines the Storybook meta object for a Svelte component using Component Story Format (CSF), including a decorator that applies a margin around the story using a Svelte component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/your-component-with-decorator.md#_snippet_5

LANGUAGE: js
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import YourComponent from './YourComponent.svelte';
  import MarginDecorator from './MarginDecorator.svelte';

  const { Story } = defineMeta({
    component: YourComponent,
    decorators: [() => MarginDecorator],
  });
</script>
```

----------------------------------------

TITLE: Initializing Button Story for Angular
DESCRIPTION: This code initializes a Storybook story for an Angular Button component. It imports the necessary modules from '@storybook/angular' and defines a basic story with autoplay enabled in the documentation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/api-doc-block-story-parameter.md#_snippet_0

LANGUAGE: ts
CODE:
```
import type { Meta, StoryObj } from '@storybook/angular';

import { Button } from './button.component';

const meta: Meta<Button> = {
  component: Button,
};

export default meta;
type Story = StoryObj<Button>;

export const Basic: Story = {
  parameters: {
    docs: {
      story: { autoplay: true },
    },
  },
};
```

----------------------------------------

TITLE: Migrating Angular Options in main.js - Storybook 7.0
DESCRIPTION: This snippet illustrates how to migrate the `angularOptions` field in `main.js` to the new `framework.options` structure in Storybook 7.0. The `enableIvy` option is moved from `angularOptions` to `framework.options`.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_100

LANGUAGE: javascript
CODE:
```
export default {
  angularOptions: { enableIvy: true },
  framework: {
    name: "@storybook/angular",
    options: {},
  },
};
```

LANGUAGE: javascript
CODE:
```
export default {
  framework: {
    name: "@storybook/angular",
    options: { enableIvy: true },
  },
};
```

----------------------------------------

TITLE: Configuring Storybook for React-Vite in JavaScript
DESCRIPTION: This snippet shows how to configure Storybook for a React project using Vite in JavaScript. It exports a default configuration object specifying the framework name and leaving room for additional options.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/react-vite-framework-options.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  framework: {
    name: '@storybook/react-vite',
    options: {
      // ...
    },
  },
};
```

----------------------------------------

TITLE: Correct Meta Title Definition in Storybook CSF 3.0 - JavaScript
DESCRIPTION: This example shows the correct approach by not including a title property, allowing Storybook to infer it from the file path. This practice keeps the codebase consistent with CSF 3.0 rules.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/eslint-plugin/docs/rules/no-title-property-in-meta.md#2025-04-22_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default {
  component: Input, // no title necessary, it will be inferred from path on disk!
};
```

----------------------------------------

TITLE: Overwriting Docs Container - JavaScript
DESCRIPTION: This code snippet demonstrates how to overwrite the default Docs container using the `docs.container` parameter. This allows you to add a wrapper element around the page being rendered, such as a border.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import { Meta, DocsContainer } from '@storybook/addon-docs';

<Meta
  title="Addons/Docs/container-override"
  parameters={{
    docs: {
      container: ({ children, context }) => (
        <DocsContainer context={context}>
          <div style={{ border: '5px solid red' }}>{children}</div>
        </DocsContainer>
      ),
    },
  }}
/>

# Title

Rest of your file...
```

----------------------------------------

TITLE: Installing Vitest Coverage with PNPM
DESCRIPTION: Commands to install Vitest coverage packages using PNPM package manager. Shows installation for both v8 and istanbul coverage providers.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/vitest-plugin-install-coverage-support-packages.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# For v8
pnpm add --save-dev @vitest/coverage-v8

# For istanbul
pnpm add --save-dev @vitest/coverage-istanbul
```

----------------------------------------

TITLE: Configuring Storybook Meta for Web Component (JS)
DESCRIPTION: This snippet configures the Storybook metadata for a web component using JavaScript. It defines the component name, tags, and documentation parameters, including disabling the table of contents.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-disable-toc.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'my-component',
  tags: ['autodocs'],
  parameters: {
    docs: {
      toc: {
        disable: true, // 👈 Disables the table of contents
      },
    },
  },
};
```

----------------------------------------

TITLE: Using presets in main.js
DESCRIPTION: This code snippet shows how to include presets in the `main.js` file. It includes the Create React App preset and the addon-docs preset with specific options. This configuration allows Storybook to leverage the configurations provided by these presets.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_244

LANGUAGE: javascript
CODE:
```
module.exports = {
  stories: ["../**/*.stories.js"],
  addons: [
    "@storybook/preset-create-react-app",
    {
      name: "@storybook/addon-docs",
      options: { configureJSX: true }
    }
  ]
};
```

----------------------------------------

TITLE: Configuring Storybook Story for Web Component (JS)
DESCRIPTION: This code configures a Storybook story for a web component using JavaScript. It defines the default export, which includes the title, component (specified as a string), decorators, and parameters for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-story-mandatory-export.md#_snippet_6

LANGUAGE: js
CODE:
```
export default {
  title: 'Path/To/MyComponent',
  component: 'my-component',
  decorators: [
    /* ... */
  ],
  parameters: {
    /* ... */
  },
};
```

----------------------------------------

TITLE: Providing Application-Wide Services in Angular with provideAnimations
DESCRIPTION: Shows how to provide an application-wide service in Storybook 7.0 for Angular using the `provideAnimations` function and the `applicationConfig` decorator. This is an alternative method for configuring application-wide providers.
SOURCE: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#_snippet_115

LANGUAGE: javascript
CODE:
```
import { provideAnimations } from "@angular/platform-browser/animations";
import { moduleMetadata } from "@storybook/angular";

export default {
  title: "Example",
  decorators: [
    applicationConfig({
      providers: [provideAnimations()],
    }),
  ],
};

```

----------------------------------------

TITLE: Installing Storybook Docs for Angular
DESCRIPTION: Command to install the Storybook Docs addon package as a development dependency using yarn.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/angular/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add -D @storybook/addon-docs
```

----------------------------------------

TITLE: Empty Story Sorting Configuration Object in Storybook
DESCRIPTION: This code snippet shows an empty configuration object for Storybook's story sorting.  It demonstrates the basic structure for customizing the story order using an object with properties like `method`, `order`, `includeNames`, and `locales`.  This object is passed to the `storySort` option.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-stories/naming-components-and-hierarchy.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
/* storybook-preview-empty-sort-object.md */
export const parameters = {
  options: {
    storySort: {
      method: 'alphabetical',
      order: [],
      includeNames: false,
      locales: 'en-US',
    },
  },
};

```

----------------------------------------

TITLE: Ejecting Test Storybook Configuration with yarn
DESCRIPTION: This command uses yarn to run the test-storybook script with the --eject flag, enabling ejection of the Storybook test configuration for further customization.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/test-runner-eject-config.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
yarn test-storybook --eject
```

----------------------------------------

TITLE: Creating Button Stories with JavaScript
DESCRIPTION: This code creates Storybook stories for a Button component using JavaScript. It exports a default object containing the component and defines primary and primary long name stories with corresponding arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/button-story-primary-long-name.md#_snippet_2

LANGUAGE: js
CODE:
```
import Button from './Button.svelte';

export default {
  component: Button,
};

export const Primary = {
  args: {
    primary: true,
    label: 'Button',
  },
};

export const PrimaryLongName = {
  args: {
    ...Primary.args,
    label: 'Primary with a really long name',
  },
};
```

----------------------------------------

TITLE: Configuring Storybook for Common Framework in TypeScript
DESCRIPTION: This snippet sets up the Storybook configuration for a generic framework. It defines the framework, story patterns, and TypeScript settings. The framework needs to be specified by replacing 'your-framework' with the actual framework being used.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-main-extend-ts-config.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)
import type { StorybookConfig } from '@storybook/your-framework';

const config: StorybookConfig = {
  framework: '@storybook/your-framework',
  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],
  typescript: {
    check: false,
    checkOptions: {},
    skipCompiler: false,
  },
};

export default config;
```

----------------------------------------

TITLE: Defining Markdown Description for Storybook Info Addon
DESCRIPTION: Creates a markdown string that will be used as the description in a Storybook info addon example. The markdown includes headings, code blocks, and links to demonstrate formatting capabilities.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/__mocks__/inject-decorator.stories.txt#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
const markdownDescription = `
#### You can use markdown in your withInfo() description.

Sometimes you might want to manually include some code examples:
~~~js
const Button = () => <button />;
~~~

Maybe include a [link](http://storybook.js.org) to your project as well.
`;
```

----------------------------------------

TITLE: Configuring Addon Actions Theme in Storybook
DESCRIPTION: This code defines a custom theme configuration for the Storybook Addon Actions. It extends the chromeLight theme, overrides the base font family to use a monospace font, and sets a transparent background.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-preview-extended-theme-variables.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
addonActionsTheme: {
  ...chromeLight,
  BASE_FONT_FAMILY: typography.fonts.mono,
  BASE_BACKGROUND_COLOR: 'transparent',
}
```

----------------------------------------

TITLE: Defining a Basic Story in JavaScript for Storybook CSF
DESCRIPTION: This snippet shows how to define a basic story using the Component Story Format (CSF) in Storybook. It exports a constant named 'Basic' that renders a Button component.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/lib/csf-plugin/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export const Basic = () => <Button />;
```

----------------------------------------

TITLE: Highlighting elements in Svelte Storybook with CSF
DESCRIPTION: This Svelte component story uses the `defineMeta` function from `@storybook/addon-svelte-csf` to define a story with decorators. It utilizes `useChannel` and `HIGHLIGHT` to apply styles to specific elements, similar to the JavaScript example, but within a Svelte component context.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/highlight-custom-style.md#_snippet_5

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import { useChannel } from 'storybook/preview-api';
  import { HIGHLIGHT } from 'storybook/highlight';

  import MyComponent from './MyComponent.svelte';

  const { Story } = defineMeta({
    component: MyComponent,
  });
</script>

<Story
  name="StyledHighlight"
  decorators={[
    (storyFn) => {
      const emit = useChannel({});
      emit(HIGHLIGHT, {
        selectors: ['h2', 'a', '.storybook-button'],
        styles: {
          backgroundColor: `color-mix(in srgb, hotpink, transparent 90%)`,
          outline: '3px solid hotpink',
          animation: 'pulse 3s linear infinite',
          transition: 'outline-offset 0.2s ease-in-out',
        },
        hoverStyles: {
          outlineOffset: '3px',
        },
        focusStyles: {
          backgroundColor: 'transparent',
        },
        keyframes: `@keyframes pulse {
          0% { outline-color: rgba(255, 105, 180, 1); }
          50% { outline-color: rgba(255, 105, 180, 0.2); }
          100% { outline-color: rgba(255, 105, 180, 1); }
        }`,
      });
      return storyFn();
    },
  ]}
/>
```

----------------------------------------

TITLE: Enabling Smoke Test Mode for Angular Storybook
DESCRIPTION: Exits Storybook after a successful start. This is useful for automated testing and CI environments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/get-started/frameworks/angular.mdx#_snippet_23

LANGUAGE: JSON
CODE:
```
{"smokeTest": true}
```

----------------------------------------

TITLE: Running Storybook Migrate Command
DESCRIPTION: Executes the specified codemod to update the Storybook project. Requires the codemod name as an argument. Use `--dry-run` to preview changes without applying them.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_81

LANGUAGE: Shell
CODE:
```
storybook[@version] migrate [codemod] [options]
```

----------------------------------------

TITLE: Building Storybook with only docs
DESCRIPTION: This command shows how to build a static Storybook export with only the documentation pages, reducing clutter when the component workshop is not needed.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#_snippet_6

LANGUAGE: shell
CODE:
```
yarn storybook build --docs
```

----------------------------------------

TITLE: Rendering Story Source with MDX
DESCRIPTION: Illustrates how to use the `Source` block in an MDX file to render the source code of a specific story. It imports necessary modules and specifies the story to extract the source from.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/doc-blocks/doc-block-source.mdx#_snippet_1

LANGUAGE: markdown
CODE:
```
import { Meta, Source } from '@storybook/addon-docs/blocks';
import * as ButtonStories from './Button.stories';

<Meta of={ButtonStories} />

<Source of={ButtonStories.Primary} />
```

----------------------------------------

TITLE: Defining Example Story in Web Components Storybook (JavaScript)
DESCRIPTION: Define a story for a custom Web Component named 'my-component' in Storybook using JavaScript. Includes configurations to disable accessibility checks globally for the story.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/storybook-addon-a11y-disable.md#2025-04-22_snippet_11

LANGUAGE: js
CODE:
```
export default {
  component: 'my-component',
};

export const ExampleStory = {
  globals: {
    a11y: {
      // This option disables all automatic a11y checks on this story
      manual: true,
    },
  },
};

```

----------------------------------------

TITLE: Configuring Coverage Provider in Vitest
DESCRIPTION: This code snippet shows how to configure the coverage provider (either v8 or Istanbul) in your Vitest configuration file. The `provider` option within the `coverage` settings allows you to select the desired provider.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/writing-tests/test-coverage.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'vitest/config';

export default defineConfig({
  // ...
  test: {
    // ...
    coverage: {
      // ...
      provider: 'istanbul', // 'v8' is the default
    },
  },
});
```

----------------------------------------

TITLE: Specifying Component Metadata for Props Tables using StoriesOf API
DESCRIPTION: Example of how to specify the component in your story metadata using the older storiesOf API to enable props table generation.
SOURCE: https://github.com/storybookjs/storybook/blob/next/code/addons/docs/vue/README.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import { storiesOf } from '@storybook/vue';
import { InfoButton } from './InfoButton.vue';

storiesOf('InfoButton', module)
  .addParameters({ component: InfoButton })
  .add( ... );
```

----------------------------------------

TITLE: Storybook Doctor Help
DESCRIPTION: Displays usage information for the `storybook doctor` command.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/api/cli-options.mdx#_snippet_102

LANGUAGE: shell
CODE:
```
storybook doctor --help
```

----------------------------------------

TITLE: Creating Web Components Storybook Story
DESCRIPTION: Defines a Storybook story for a web component. It exports a default object containing the component's name. The ExampleStory is configured with specific arguments.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/my-component-with-env-variables.md#_snippet_7

LANGUAGE: js
CODE:
```
export default {
  component: 'my-component',
};

export const ExampleStory = {
  args: {
    propertyA: process.env.STORYBOOK_DATA_KEY,
  },
};
```

----------------------------------------

TITLE: Defining Storybook Meta and Stories with Include/Exclude - Svelte CSF (TS)
DESCRIPTION: This code defines Storybook stories for a Svelte component using TypeScript and the Component Story Format (CSF) with Svelte-specific additions. It demonstrates how to include and exclude controls using array and regular expression patterns within the Storybook interface.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/component-story-disable-controls-regex.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import YourComponent from './YourComponent.svelte';

  const { Story } = defineMeta({
    component: YourComponent,
  });
</script>

<Story
  name="ArrayInclude"
  parameters={{
    controls: { include: ['foo', 'bar'] },
  }}
/>

<Story
  name="RegexInclude"
  parameters={{
    controls: { include: /^hello*/ },
  }}
/>

<Story
  name="ArrayExclude"
  parameters={{
    controls: { exclude: ['foo', 'bar'] },
  }}
/>

<Story
  name="RegexExclude"
  parameters={{
    controls: { exclude: /^hello*/ },
  }}
/>
```

----------------------------------------

TITLE: Initializing Button Story with Svelte CSF (TS)
DESCRIPTION: This code initializes a Storybook story for a Svelte Button component using TypeScript and the Component Story Format (CSF). It imports defineMeta from @storybook/addon-svelte-csf, imports the Button component, and defines the story with auto-generated documentation enabled.
SOURCE: https://github.com/storybookjs/storybook/blob/next/docs/_snippets/tags-autodocs-in-meta.md#_snippet_4

LANGUAGE: ts
CODE:
```
<script module>
  import { defineMeta } from '@storybook/addon-svelte-csf';

  import Button from './Button.svelte';

  const { Story } = defineMeta({
    component: Button,
    //👇 Enables auto-generated documentation for this component and includes all stories in this file
    tags: ['autodocs'],
  });
</script>
```