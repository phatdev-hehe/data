TITLE: Demonstrating React Component State Updates and Event Loop Processing in React Native
DESCRIPTION: This code example demonstrates how the React Native event loop handles state updates across multiple components. It shows how a button press triggers state updates that are processed in microtasks, and how layout effects are executed synchronously within the same microtask, with all UI updates being flushed to the host platform only at the end of the event loop tick.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/runtimescheduler/__docs__/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
function App(props) {
  const [showContent, setShowContent] = useState(false);

  return (
    <>
      <Header
        onPressButton={event => {
          // A task executes all the event handlers.
          // The state update is processed in a microtask.
          setShowContent(true);
        }}
      />
      {showContent ? <Content /> : null}
    </>
  );
}

function Content(props) {
  const [width, setWidth] = useState(0);

  // Executed synchronously as part of the commit phase, in the microtask.
  useLayoutEffect(() => {
    // This state update is processed synchronously in the same microtask.
    // UI updates are still not flushed to the host platform until the end
    // of the event loop tick, so the user never saw this changed widths.
    setWidth(ref.getBoundingClientRect().width);
  }, []);

  return (
    <>
      <SomeView ref={ref} />
      <OtherComponent width={width} />
    </>
  );
}
```

----------------------------------------

TITLE: Defining Feature Flags in JavaScript Configuration File
DESCRIPTION: Example of how to define common and JS-only feature flags in the ReactNativeFeatureFlags.config.js file, which serves as the source of truth for feature flag definitions.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  common: {
    enableNativeBehavior: {
      description: 'Enable some behavior both in native and in JS.',
      defaultValue: false,
    },
  },
  jsOnly: {
    enableJSBehavior: {
      description: 'Enables some behavior in the JS layer.',
      defaultValue: false,
    },
  },
};
```

----------------------------------------

TITLE: Using the start command in React Native CLI
DESCRIPTION: Command for starting the React Native development server with available options including port configuration, host settings, cache management, and HTTPS capabilities.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/community-cli-plugin/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npx @react-native-community/cli start [options]
```

----------------------------------------

TITLE: Explaining Cookie Security Issue in React Native
DESCRIPTION: This snippet outlines a security issue where a cookie is not sent from one origin to another on same-site requests due to different schemes. It recommends migrating the entire site to HTTPS and using the Secure attribute on cookies to resolve the issue.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/SameSiteExcludeNavigationContextDowngrade.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Migrate entirely to HTTPS to have cookies sent on same-site requests

A cookie was not sent to {PLACEHOLDER_destination} origin from {PLACEHOLDER_origin} context on a navigation.
Because this cookie would have been sent across schemes on the same site, it was not sent.
This behavior enhances the `SameSite` attribute's protection of user data from request forgery by network attackers.

Resolve this issue by migrating your site (as defined by the eTLD+1) entirely to HTTPS.
It is also recommended to mark the cookie with the `Secure` attribute if that is not already the case.
```

----------------------------------------

TITLE: Using NewAppScreen Component in React Native (JavaScript)
DESCRIPTION: This snippet shows how to import the `NewAppScreen` component from the `@react-native/new-app-screen` package. It then demonstrates rendering the component within a functional React Native component called `MyAppOrTemplate`. This basic usage illustrates how to integrate the default new app screen into a custom application or template.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/new-app-screen/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { NewAppScreen } from '@react-native/new-app-screen';

function MyAppOrTemplate() {
  ...

  return <NewAppScreen />;
}
```

----------------------------------------

TITLE: Using aria-labelledby Attribute Example
DESCRIPTION: This snippet demonstrates the concept of aria-labelledby attribute references which must match element IDs for proper accessibility functionality. The aria-labelledby attribute should contain space-separated IDs that correspond to existing element IDs in the DOM.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/genericFormAriaLabelledByToNonExistingId.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# An aria-labelledby attribute doesn't match any element id
```

----------------------------------------

TITLE: Defining Third-Party Cookies in Markdown
DESCRIPTION: This snippet defines the attributes of cookies that are considered third-party and explains Chrome's policy on blocking them. It uses Markdown syntax to highlight key terms.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/cookieExcludeThirdPartyPhaseoutRead.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Reading third-party cookie is blocked

Cookies with the `SameSite=None; Secure` and not `Partitioned` attributes that operate in cross-site contexts are third-party cookies.
Chrome blocks third-party cookies to protect user data from cross-site tracking.

Please refer to the article linked to learn more about preparing your site to avoid potential breakage due to this.
```

----------------------------------------

TITLE: Configuring babel.config.js with React Native preset
DESCRIPTION: Basic configuration for babel.config.js file that uses the React Native preset. This configuration tells Babel to use the @react-native/babel-preset module for transforming JavaScript code.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-babel-preset/README.md#2025-04-22_snippet_2

LANGUAGE: json
CODE:
```
{
  "presets": ["module:@react-native/babel-preset"]
}
```

----------------------------------------

TITLE: Setting Cross-Origin Resource Policy Header for External Resources
DESCRIPTION: This header configuration enables cross-origin access to resources that would otherwise be restricted to same-site usage. Adding this header to the resource's HTTP response will allow it to be loaded from any origin, which presents potential security implications.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/CoepCorpNotSameSite.md#2025-04-22_snippet_0

LANGUAGE: http
CODE:
```
Cross-Origin-Resource-Policy: cross-origin
```

----------------------------------------

TITLE: Setting Cross-Origin Resource Policy Headers for Cross-Origin Resources
DESCRIPTION: HTTP header configuration for allowing cross-origin resources to be loaded. This header should be added when the resource is served from a different location than your website, with the caution that it allows any website to embed the resource.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/CoepCorpNotSameOrigin.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
Cross-Origin-Resource-Policy: cross-origin
```

----------------------------------------

TITLE: Installing React Native ESLint Plugin with Yarn
DESCRIPTION: Command to install the ESLint plugin and its dependencies using Yarn package manager.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-plugin-react-native/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add --dev eslint @react-native/eslint-plugin
```

----------------------------------------

TITLE: Setting Up ADB Reverse for Physical Android Devices
DESCRIPTION: Command to set up ADB reverse for accessing Metro on a physical Android device.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_6

LANGUAGE: sh
CODE:
```
adb reverse tcp:8081 tcp:8081
```

----------------------------------------

TITLE: Enabling animated tracking with native driver in React Native
DESCRIPTION: Use the useNativeDriver flag to enable animated tracking with the native driver for smoother animations that track other Animated.Values.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_44

LANGUAGE: JavaScript
CODE:
```
Animated.timing(animatedValue, {
  toValue: otherAnimatedValue,
  duration: 1000,
  useNativeDriver: true
}).start();
```

----------------------------------------

TITLE: Configuring ESLint for React Native
DESCRIPTION: ESLint configuration snippet showing how to add the React Native plugin to your project's ESLint configuration file (.eslintrc or package.json).
SOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-plugin-react-native/README.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
    "plugins": ["@react-native"]
}
```

----------------------------------------

TITLE: Using the bundle command in React Native CLI
DESCRIPTION: Command for building a JavaScript bundle from an entry file with options for platform targeting, minification, sourcemap generation, and asset management.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/community-cli-plugin/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
npx @react-native-community/cli bundle --entry-file <path> [options]
```

----------------------------------------

TITLE: Safely Using Optional Native Module Methods in JavaScript
DESCRIPTION: Example showing how to safely use an optional method by checking for its existence before calling it.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
if (NativeAnalytics.logError) {
  NativeAnalytics.logError('Oh No! We hit a crash');
}
```

----------------------------------------

TITLE: Installing @react-native/babel-preset with yarn
DESCRIPTION: Command to install @react-native/babel-preset as a development dependency using yarn package manager.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-babel-preset/README.md#2025-04-22_snippet_1

LANGUAGE: sh
CODE:
```
yarn add -D @react-native/babel-preset
```

----------------------------------------

TITLE: Defining Basic Analytics Native Module Interface in JavaScript
DESCRIPTION: Example of a simple TurboModule interface definition for an Analytics module with a basic log method.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
export interface Spec extends TurboModule {
  log: (eventName: string, content: string) => void;
}
```

----------------------------------------

TITLE: Installing @react-native/babel-preset with npm
DESCRIPTION: Command to install @react-native/babel-preset as a development dependency using npm package manager.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-babel-preset/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
npm i @react-native/babel-preset --save-dev
```

----------------------------------------

TITLE: Accessing Feature Flags in JavaScript
DESCRIPTION: Shows how to import and use both common and JS-only feature flags in JavaScript code by checking their boolean values.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
import * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';

if (ReactNativeFeatureFlags.enableNativeBehavior()) {
  // Native flag
}

if (ReactNativeFeatureFlags.enableJSBehavior()) {
  // JS-only flag
}
```

----------------------------------------

TITLE: Importing Animated Library in React Native
DESCRIPTION: Shows how to import the Animated module from React Native using ES6 destructuring syntax. This is the basic setup needed to start using the Animated API.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/js/examples/AnimatedGratuitousApp/AnExSlides.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
var { Animated } = require('react-native');
```

----------------------------------------

TITLE: Making Method Additions Compatible with Optional Properties
DESCRIPTION: Example showing how to safely add a new method to a Native Module interface by making it optional.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
export interface Spec extends TurboModule {
  log: (eventName: string, content: string) => void;
  logError?: (message: string) => void;
}
```

----------------------------------------

TITLE: Setting Cross-Origin Resource Policy Headers for Same-Site Resources
DESCRIPTION: HTTP header configuration for allowing same-site resources to be loaded. This header should be added to the resource's HTML response when the resource and your site are served from the same site.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/CoepCorpNotSameOrigin.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
Cross-Origin-Resource-Policy: same-site
```

----------------------------------------

TITLE: New API Feature - Appearance Module Integration
DESCRIPTION: Addition of the Appearance module that allows detecting user's theme preference (dark/light mode) and related useColorScheme hook for theme-aware components.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
import { Appearance, useColorScheme } from 'react-native';

// Using the hook
const colorScheme = useColorScheme();

// Using Appearance API
const currentTheme = Appearance.getColorScheme();
```

----------------------------------------

TITLE: Adding textTransform Style Support on iOS in React Native
DESCRIPTION: This iOS-specific addition implements support for the textTransform style property, allowing for text case transformations in iOS applications.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_41

LANGUAGE: Objective-C
CODE:
```
// Add textTransform style support
// Commit: 8621d4b79731e13a0c6e397abd93c193c6219000
```

----------------------------------------

TITLE: Accessing Feature Flags in Kotlin
DESCRIPTION: Example of how to access common feature flags in Kotlin code by importing the ReactNativeFeatureFlags class and checking flag values in a method.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_3

LANGUAGE: kotlin
CODE:
```
import com.facebook.react.internal.featureflags.ReactNativeFeatureFlags

fun someMethod() {
  if (ReactNativeFeatureFlags.enableNativeBehavior()) {
    // do something
  }
}
```

----------------------------------------

TITLE: Accessing Feature Flags in C++/Objective-C
DESCRIPTION: Code snippet demonstrating how to access common feature flags in C++ or Objective-C code by including the appropriate header and checking flag values.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_2

LANGUAGE: c++
CODE:
```
#include <react/featureflags/ReactNativeFeatureFlags.h>

if (ReactNativeFeatureFlags::enableNativeBehavior()) {
  // do something
}
```

----------------------------------------

TITLE: Configuring ESLint for React Native
DESCRIPTION: JSON configuration to extend the React Native ESLint rules in a project. This should be added to the .eslintrc file or the eslintConfig field in package.json to apply the standardized linting rules.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-config-react-native/README.md#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
{
    "extends": "@react-native"
}
```

----------------------------------------

TITLE: Including React Native Gradle Plugin in Gradle Build Script
DESCRIPTION: Example of how to include the React Native Gradle Plugin in a project's build.gradle file by adding it as a classpath dependency in the buildscript block.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/gradle-plugin/react-native-gradle-plugin/README.md#2025-04-22_snippet_0

LANGUAGE: gradle
CODE:
```
buildscript {
    // ...
    dependencies {
        classpath("com.facebook.react:react-native-gradle-plugin")
    }
}
```

----------------------------------------

TITLE: Creating an Asynchronous Pointer Event Test with React Native
DESCRIPTION: Demonstrates how to use the useAsyncTest hook to verify pointer events. This example creates a test that waits for a pointermove event and automatically completes when the event is triggered.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/js/examples/Experimental/PlatformTest/README.md#2025-04-22_snippet_2

LANGUAGE: jsx
CODE:
```
function BasicPointerMoveTestCase({harness}) {
  const testPointerMove = harness.useAsyncTest('pointermove event received');

  return (
    <View
      style={{width: 100, height: 100, backgroundColor: 'black'}}
      onPointerMove={() => testPointerMove.done()}
    />
  );
}
```

----------------------------------------

TITLE: Warning Message for Bridgeless Mode in React Native iOS
DESCRIPTION: A markdown warning message indicating that the Bridgeless Mode library for iOS in React Native is not production-ready and subject to breaking changes. It advises users about the risks of using these APIs.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/runtime/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Bridgeless Mode for iOS

This library is not ready for integration for production nor local experimentation. Expect breaking changes regularly if you use any of these APIs. Use at your own risk!
```

----------------------------------------

TITLE: Adding space-evenly justifyContent Value in React Native
DESCRIPTION: Foundational work for implementing a new 'space-evenly' value for the justifyContent property in React Native layouts.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_56

LANGUAGE: JavaScript
CODE:
```
1050e0b47611602b758f73d99f51a1dd5ceabade
```

----------------------------------------

TITLE: Installing Metro Config Dependencies
DESCRIPTION: Command to install Metro bundler configuration and related dependencies using yarn package manager. Installs js-polyfills, metro-config, metro-babel-transformer, metro-runtime, and metro-config packages.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/metro-config/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add --dev @react-native/js-polyfills metro-config @react-native/metro-babel-transformer metro-runtime @react-native/metro-config
```

----------------------------------------

TITLE: Describing @react-native/typescript-config Package in Markdown
DESCRIPTION: This Markdown snippet introduces the @react-native/typescript-config package, explaining its purpose of providing a default tsconfig.json for new React Native apps. It emphasizes that the configuration is version-specific and should be kept in sync with the app's React Native version.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/typescript-config/README.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
# @react-native/typescript-config

This package provides the default `tsconfig.json` used by newly built React Native apps.

This template is customized for specific versions of React Native, and should be updated in sync with the rest of your app.
```

----------------------------------------

TITLE: Cloning and Installing React Native Repository
DESCRIPTION: Commands to clone the React Native repository and install dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_0

LANGUAGE: sh
CODE:
```
git clone https://github.com/facebook/react-native.git
cd react-native
yarn install
```

----------------------------------------

TITLE: Installing @react-native/eslint-config with Yarn
DESCRIPTION: Command to install the ESLint configuration package along with its peer dependencies using Yarn. This installs eslint, prettier, and the React Native ESLint config package as development dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-config-react-native/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add --dev eslint prettier @react-native/eslint-config
```

----------------------------------------

TITLE: Running Android Clean Command in Bash
DESCRIPTION: This snippet shows how to execute the Android clean command implemented using @react-native/core-cli-utils in a custom framework CLI. It demonstrates the expected output format.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/core-cli-utils/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ ./fancy-framework android clean
🧹 let me clean your Android caches
    Gradle: // a bunch of gradle output
    Gradle: ....
```

----------------------------------------

TITLE: Installing @react-native/js-polyfills with Yarn
DESCRIPTION: Command to install the @react-native/js-polyfills package using Yarn package manager. This is the recommended installation method for the package.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/polyfills/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add @react-native/js-polyfills
```

----------------------------------------

TITLE: Installing the React Native Compatibility Check Package
DESCRIPTION: Command to install the @react-native/compatibility-check package using Yarn.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
yarn add @react-native/compatibility-check
```

----------------------------------------

TITLE: Implementing a Synchronous Layout Test with React Native
DESCRIPTION: A test case that verifies view layout dimensions using the synchronous test API. This example shows how to create a view with specific dimensions, measure it, and assert that its computed dimensions match the expected values.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/js/examples/Experimental/PlatformTest/README.md#2025-04-22_snippet_1

LANGUAGE: jsx
CODE:
```
const EXPECTED_WIDTH = 100;
const EXPECTED_HEIGHT = 200;

function BasicLayoutTestCase({harness}) {
  const viewRef = useRef(null);

  const runTest = useCallback(() => {
    const view = viewRef.current;
    if (view != null) {
      view.measureInWindow(({width, height}) => {
        harness.test(({assert_equals}) => {
          assert_equals(
            width,
            EXPECTED_WIDTH,
            `view's computed width should be ${EXPECTED_WIDTH}`,
          );
          assert_equals(
            height,
            EXPECTED_HEIGHT,
            `view's computed width should be ${EXPECTED_HEIGHT}`,
          );
        }, "view's width and height are correct");
      });
    }
  }, [harness]);

  return (
    <>
      <View
        ref={viewRef}
        style={{width: EXPECTED_WIDTH, height: EXPECTED_HEIGHT}}
      />
      <Button title="Start Test" onPress={runTest} />
    </>
  );
}
```

----------------------------------------

TITLE: Printing Feature Flags as JSON
DESCRIPTION: Shell command to print all feature flags as structured JSON data, useful for consuming the configuration programmatically.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_9

LANGUAGE: shell
CODE:
```
yarn featureflags --print --json
```

----------------------------------------

TITLE: Ignoring YellowBox Warnings in React Native
DESCRIPTION: Shows the new recommended way to ignore YellowBox warnings in React Native, replacing the deprecated console.ignoredYellowBox approach. This pattern helps suppress specific warning messages that you've acknowledged.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_53

LANGUAGE: javascript
CODE:
```
YellowBox.ignoreWarnings([...])
```

----------------------------------------

TITLE: Basic Fantom Test Structure (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates the standard structure for a Fantom integration test. It imports the @react-native/fantom package, uses Jest's describe and it blocks, creates a root instance, and wraps the rendering logic within Fantom.runTask. This structure is the common boilerplate for defining and running tests using the Fantom framework.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/__docs__/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import * as Fantom from '@react-native/fantom';

describe('My feature', () => {
  it('should do something interesting', () => {
    const root = Fantom.createRoot();

    Fantom.runTask(() => {
      root.render(/* ... */);})

    /* some checks */
  });
});
```

----------------------------------------

TITLE: Installing @react-native/codegen with Yarn
DESCRIPTION: Command to install the @react-native/codegen package as a development dependency using Yarn. This package is used for code generation in React Native projects.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-codegen/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add --dev @react-native/codegen
```

----------------------------------------

TITLE: Adding DOCTYPE Declaration to Fix Quirks Mode in HTML
DESCRIPTION: This code snippet shows the DOCTYPE declaration that should be added to HTML documents to render pages in No Quirks Mode instead of Quirks Mode. Adding this declaration at the beginning of HTML documents prevents rendering quirks that are incompatible with current HTML and CSS specifications.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/CompatibilityModeQuirks.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
```

----------------------------------------

TITLE: Configuring and Building a Sample TurboModule Static Library in CMake
DESCRIPTION: This CMake script sets up the build configuration for a sample TurboModule static library. It specifies the minimum CMake version, enables verbose output, includes React Native flags, collects source files, and configures the library with appropriate include directories, linked dependencies, and compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/samples/platform/android/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB sampleturbomodule_SRC CONFIGURE_DEPENDS ReactCommon/*.cpp)
add_library(sampleturbomodule STATIC ${sampleturbomodule_SRC})

target_include_directories(sampleturbomodule PUBLIC .)

target_link_libraries(sampleturbomodule
        fbjni
        jsi
        reactnative
)

target_compile_reactnative_options(sampleturbomodule PRIVATE "ReactNative")
target_compile_options(sampleturbomodule PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Modifying Fabric Flag in RNTester's Podfile
DESCRIPTION: Ruby code snippet to disable Fabric in RNTester's Podfile for testing non-fabric components.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_1

LANGUAGE: ruby
CODE:
```
fabric_enabled = false
```

----------------------------------------

TITLE: Installing React Native Normalize Colors Package
DESCRIPTION: Command to install the @react-native/normalize-colors package as a development dependency using yarn package manager.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/normalize-color/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add --dev @react-native/normalize-colors
```

----------------------------------------

TITLE: Installing @react-native/eslint-plugin-specs with Yarn
DESCRIPTION: Command to install the @react-native/eslint-plugin-specs package as a development dependency using Yarn package manager.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-plugin-specs/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add --dev @react-native/eslint-plugin-specs
```

----------------------------------------

TITLE: Updating Promise Dependency in package.json
DESCRIPTION: Bumps version of 'promise' package from 8.0.3 to 8.2.0, enabling Promise.allSettled functionality.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_2

LANGUAGE: JSON
CODE:
```
"promise": "8.2.0"
```

----------------------------------------

TITLE: Configuring Fabric JNI Library Build in React Native Android
DESCRIPTION: This CMake script configures the build process for the Fabric JNI implementation in React Native Android. It includes several utility files, sets up the fabricjni library from source files, and links against numerous dependencies including React renderer components, UI managers, and yoga.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/fabric/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB fabricjni_SRCS CONFIGURE_DEPENDS *.cpp)

add_library(
        fabricjni
        OBJECT
        ${fabricjni_SRCS}
)

target_include_directories(fabricjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_merge_so(fabricjni)

target_link_libraries(
        fabricjni
        fbjni
        folly_runtime
        glog
        jsi
        mapbufferjni
        react_codegen_rncore
        react_debug
        react_featureflags
        react_renderer_animations
        react_renderer_attributedstring
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_css
        react_renderer_debug
        react_renderer_dom
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_runtimescheduler
        react_renderer_scheduler
        react_renderer_telemetry
        react_renderer_textlayoutmanager
        react_renderer_uimanager
        react_renderer_uimanager_consistency
        rrc_legacyviewmanagerinterop
        react_utils
        reactnativejni
        rrc_image
        rrc_modal
        rrc_progressbar
        rrc_root
        rrc_safeareaview
        rrc_scrollview
        rrc_switch
        rrc_text
        rrc_textinput
        rrc_unimplementedview
        rrc_view
        yoga
)

target_compile_reactnative_options(fabricjni PRIVATE "Fabric")
```

----------------------------------------

TITLE: Enhanced Platform Selection API
DESCRIPTION: Extension of Platform.select to support 'native' as an option for platform-specific code implementation.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
Platform.select({
  native: () => require('NativeComponent'),
  default: () => require('WebComponent')
});
```

----------------------------------------

TITLE: Breaking Image Component Method Changes
DESCRIPTION: Image component public methods (blur, focus, measure, measureInWindow, measureLayout, setNativeProps) are no longer bound to component instances. Method references must now be wrapped in arrow functions when used as callbacks.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_27

LANGUAGE: javascript
CODE:
```
// Old way - no longer works
setTimeout(this._imgRef.focus, 1000);

// New way - correct usage
setTimeout(() => this._imgRef.focus(), 1000);
```

----------------------------------------

TITLE: Enabling inlineRequires in Metro Configuration
DESCRIPTION: Configuration for enabling inlineRequires by default in Metro for new React Native projects. This change provides performance benefits but results in a slightly different JavaScript execution order.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
// In metro.config.js
inlineRequires: true
```

----------------------------------------

TITLE: Defining an Enum Type for Native Module Interface
DESCRIPTION: Example of defining an enum type used in a TurboModule interface for color scheme values returned from native.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
enum TestEnum {
  LIGHT = 1,
  DARK = 2,
  SYSTEM = 3,
}

export interface Spec extends TurboModule {
  getColorScheme: () => TestEnum;
}
```

----------------------------------------

TITLE: Installing @react-native/virtualized-lists with Yarn
DESCRIPTION: Command to install the @react-native/virtualized-lists package using Yarn package manager.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/virtualized-lists/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add @react-native/virtualized-lists
```

----------------------------------------

TITLE: React Native StyleSheet Type Definition Update
DESCRIPTION: Fix for StyleSheet.create return type definition and validation for functions with custom prototype methods.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_10



----------------------------------------

TITLE: Updating Gradle Dependencies in React Native Android
DESCRIPTION: This snippet shows updates to Gradle, Kotlin, and SDK versions for the Android build of React Native.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_3

LANGUAGE: gradle
CODE:
```
Bump Kotlin version to 1.6.10
Bump Soloader to 0.10.3
Bump Gradle to 7.3
Bump Android compile and target SDK to 31
```

----------------------------------------

TITLE: Adding Support for flexWrap: 'wrap-reverse' in React Native
DESCRIPTION: This commit adds support for the 'wrap-reverse' value in the flexWrap style property, expanding layout options for components.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_31

LANGUAGE: JavaScript
CODE:
```
// Support flexWrap: 'wrap-reverse'
// Commit: d69e55060fd76d91eccc45905d250a9fce4b2c49
```

----------------------------------------

TITLE: Supporting Multiple Enum Values for Backward Compatibility
DESCRIPTION: Example showing how to maintain backward compatibility when changing enum values by supporting both old and new values.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
enum TestEnum {
  LIGHT = 1,
  DARK = 2,
  SYSTEM = 3,
  SYSTEM_ALSO = -1,
}
```

----------------------------------------

TITLE: Running Fantom Tests in Watch Mode (Shell)
DESCRIPTION: This shell command demonstrates how to run Fantom tests in continuous "watch" mode using yarn. Similar to Jest's watch mode, it automatically re-runs tests when relevant files are changed. The --watch flag activates this mode, and an optional test pattern can be provided to focus on specific test files.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/__docs__/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
yarn fantom --watch [optional test pattern]
```

----------------------------------------

TITLE: Configuring React Native Monorepo Package Build Options (JavaScript)
DESCRIPTION: This JavaScript snippet illustrates the structure used in `config.js` to configure build options for individual packages opted into the monorepo build process. It shows how to specify options like `emitTypeScriptDefs` and the build `target` ('node' in this example) for a specific package like 'dev-middleware' within the `packages` object.
SOURCE: https://github.com/facebook/react-native/blob/main/scripts/build/README.md#_snippet_1

LANGUAGE: js
CODE:
```
const buildConfig /*: BuildConfig */ = {
  'packages': {
    'dev-middleware': {
      emitTypeScriptDefs: true,
      target: 'node',
    },
    ...
}
```

----------------------------------------

TITLE: Demonstrating Incorrect Label Usage in HTML Forms
DESCRIPTION: This snippet shows an example of incorrect usage of the 'for' attribute in a label element. The 'for' attribute doesn't match any element 'id', which can cause issues with form autofill and accessibility.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/genericFormLabelForMatchesNonExistingIdError.md#2025-04-22_snippet_0

LANGUAGE: HTML
CODE:
```
<label for=FORM_ELEMENT>
```

----------------------------------------

TITLE: Installing @react-native/assets-registry Package
DESCRIPTION: Command to install the @react-native/assets-registry package as a development dependency using yarn package manager.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/assets/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add --dev @react-native/assets-registry
```

----------------------------------------

TITLE: Building React Native Test Package
DESCRIPTION: Commands to install dependencies, build the project, and run the React Native code generator. These steps are required for setting up the testing package.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-test-library/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn install
yarn build
npx react-native codegen
```

----------------------------------------

TITLE: Calling a Newly Added Native Module Method in JavaScript
DESCRIPTION: Example of calling a newly added method on a Native Module which would cause crashes on older native clients.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
NativeAnalytics.logError('Oh No! We hit a crash')
```

----------------------------------------

TITLE: Setting Include Directories for Native C++ Module
DESCRIPTION: Configures the include directories for the native C++ module library, making the current directory publicly accessible.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: CMake
CODE:
```
target_include_directories(nativecxxmoduleexample PUBLIC .)
```

----------------------------------------

TITLE: Incorrect Usage of <label> 'for' Attribute in HTML
DESCRIPTION: This snippet demonstrates the incorrect use of the <label> element's 'for' attribute, which references a form field by its 'name' instead of 'id'. This can cause issues with browser autofill and accessibility tools.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/genericFormLabelForNameError.md#2025-04-22_snippet_0

LANGUAGE: HTML
CODE:
```
<label for=FORM_ELEMENT>
```

----------------------------------------

TITLE: Describing Attribution Trigger Registration Error in Markdown
DESCRIPTION: This markdown snippet explains the conditions under which an attribution trigger registration is ignored, including the required headers and restrictions on HTTP redirect chains.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/arTriggerIgnored.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# An attribution trigger registration was ignored because the request was ineligible

This page tried to register a trigger using the Attribution Reporting API, but
the request was ineligible to do so, so the trigger registration was ignored.

A request is eligible for trigger registration if it has an
`Attribution-Reporting-Eligible` header whose value is a structured dictionary
that contains the key `trigger`, or if the header is absent. Otherwise, any
`Attribution-Reporting-Register-Trigger` response header will be ignored.

Additionally, a single HTTP redirect chain may register only all sources or all
triggers, not a combination of both.
```

----------------------------------------

TITLE: Enabling Optional Chaining Operator in React Native
DESCRIPTION: This commit enables the optional chaining operator (?.) plugins in React Native, allowing for safer property access and method calls.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_30

LANGUAGE: JavaScript
CODE:
```
// Enable ?.  optional chaining operator plugins
// Commit: aa6f394c4236e5a4998c3be8ed61ec1bab950775
```

----------------------------------------

TITLE: Error Message for getUserInfo() Function Failure in React Native
DESCRIPTION: An error message that indicates the getUserInfo() function failed to execute properly because the configuration and well-known files it depends on were invalid or improperly formatted.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthUserInfoRequestInvalidConfigOrWellKnown.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# getUserInfo() failed because the config and well-known files were invalid.
```

----------------------------------------

TITLE: Executing React Native Monorepo Build Commands (Shell)
DESCRIPTION: This snippet shows common shell commands used to interact with the React Native monorepo build system via npm scripts. It includes commands to build all configured packages, build a specific package by name (e.g., `dev-middleware`), and clean the build directories to remove compiled artifacts.
SOURCE: https://github.com/facebook/react-native/blob/main/scripts/build/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
# Build all packages
yarn build

# Build a specific package
yarn build dev-middleware

# Clean build directories
yarn clean
```

----------------------------------------

TITLE: Installing React Native Gradle Plugin using Yarn
DESCRIPTION: Command to install the @react-native/gradle-plugin package using Yarn package manager.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/gradle-plugin/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add @react-native/gradle-plugin
```

----------------------------------------

TITLE: Configuring Android Conscrypt Dependency in build.gradle
DESCRIPTION: Code snippet showing how to add Conscrypt TLS 1.3 support to Android applications by including the dependency in the build.gradle file. This enables TLS 1.3 support for all Android versions.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_2

LANGUAGE: gradle
CODE:
```
implementation('org.conscrypt:conscrypt-android:2.0.0')
```

----------------------------------------

TITLE: Updating Native Module with @ReactModule Annotation in Java
DESCRIPTION: Example of how to update an Android Native Module to use the required @ReactModule annotation. This change is necessary to access the .getNativeModule method on the ReactContext.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_19

LANGUAGE: java
CODE:
```
// CustomModule.java

// ...
+  import com.facebook.react.module.annotations.ReactModule;

+  @ReactModule(name="CustomBridge")
public class CustomModule extends ReactContextBaseJavaModule {
  // ...

  @Override
  public String getName() {
      return "CustomBridge";
  }

  // ...
}
```

----------------------------------------

TITLE: Configuring C++ Compilation Options for React Native
DESCRIPTION: Sets compilation options for C++ code, including enabling exceptions, RTTI, C++20 standard, and defining necessary macros for React Native integration.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: CMake
CODE:
```
add_compile_options(
        -fexceptions
        -frtti
        -std=c++20
        -Wall
        -Wpedantic
        -DFOLLY_NO_CONFIG=1
        -DLOG_TAG=\"ReactNative\")
```

----------------------------------------

TITLE: Installing Dependencies for iOS
DESCRIPTION: Commands to install Bundler and CocoaPods dependencies for running RNTester on iOS.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
gem install bundler
bundle install && bundle exec pod install
```

----------------------------------------

TITLE: Running Danger for Pull Request Analysis in React Native
DESCRIPTION: This command demonstrates how to run Danger to analyze a GitHub pull request for the React Native project. It requires a GitHub Public Access Token and the PR URL.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-bots/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
cd packages/react-native-bots && yarn
DANGER_GITHUB_API_TOKEN=ghp_<REDACTED> yarn danger pr https://github.com/facebook/react-native/pull/1234
```

----------------------------------------

TITLE: Error Message for Incompatible Enum Value Modification
DESCRIPTION: Detailed error message from the compatibility-check tool when detecting an incompatible change to an enum value.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
ColorManager: Object contained a property with a type mismatch
   -- getColorScheme: has conflicting type changes
       --new: ()=>Enum<number>
       --old: ()=>Enum<number>
       Function return types do not match
           --new: ()=>Enum<number>
           --old: ()=>Enum<number>
           Enum types do not match
               --new: Enum<number> {LIGHT = 1, DARK = 2, SYSTEM = -1}
               --old: Enum<number> {LIGHT = 1, DARK = 2, SYSTEM = 3}
               Enum contained a member with a type mismatch
                   -- Member SYSTEM: has conflicting changes
                       --new: -1
                       --old: 3
                       Numeric literals are not equal
                           --new: -1
                           --old: 3
```

----------------------------------------

TITLE: Adding displayName to ActivityIndicator in React Native
DESCRIPTION: Adds a displayName property to the ActivityIndicator component to improve debugging and testing.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_20

LANGUAGE: JavaScript
CODE:
```
Fix: Add displayName to ActivityIndicator (#22417) ([53da585832](https://github.com/facebook/react-native/commit/53da5858326bbddd2df112f86b2c1e935adc3882))
```

----------------------------------------

TITLE: Implementing Dev Middleware in a Custom Server with Metro
DESCRIPTION: This snippet demonstrates how to attach the middleware to a Metro dev server using the createDevMiddleware API. It shows the basic pattern for integrating the middleware with Metro's runServer function.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/dev-middleware/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { createDevMiddleware } from '@react-native/dev-middleware';

function myDevServerImpl(args) {
  ...

  const {middleware, websocketEndpoints} = createDevMiddleware({
    projectRoot: metroConfig.projectRoot,
    serverBaseUrl: `http://${args.host}:${args.port}`,
    logger,
  });

  await Metro.runServer(metroConfig, {
    host: args.host,
    ...,
    unstable_extraMiddleware: [
      middleware,
      // Optionally extend with additional HTTP middleware
    ],
    websocketEndpoints: {
      ...websocketEndpoints,
      // Optionally extend with additional WebSocket endpoints
    },
  });
}
```

----------------------------------------

TITLE: Adding a New Method to Native Module Interface in JavaScript
DESCRIPTION: Example showing how adding a new method to a Native Module interface can cause compatibility issues with older native clients.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
export interface Spec extends TurboModule {
  log: (eventName: string, content: string) => void;
  logError: (message: string) => void;
}
```

----------------------------------------

TITLE: Android TextInput Cursor API Update
DESCRIPTION: Implementation of new setTextCursorDrawable API for Android 10 compatibility in TextInput components.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_8



----------------------------------------

TITLE: Implementing Image.defaultSource on Android in React Native
DESCRIPTION: This Android-specific addition implements the Image.defaultSource feature, allowing for a default image to be displayed while the main image is loading.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_37

LANGUAGE: Java
CODE:
```
// Implement Image.defaultSource
// Commit: b0fa3228a77d89d6736da6fcae5dd32f74f3052c
```

----------------------------------------

TITLE: Simulating ScrollView Scrolling in Fantom (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to simulate scrolling an element, specifically a ScrollView, using the Fantom.scrollTo method. It takes the element reference and a scroll offset object as arguments. After calling the method, it asserts that the element's scrollTop property reflects the simulated scroll position, allowing testing of scroll-related behavior and event handling in Fantom.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/__docs__/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
Fantom.scrollTo(scrollViewElement, {
  x: 0,
  y: 1,
});

expect(scrollViewElement.scrollTop).toBe(1);
```

----------------------------------------

TITLE: Updating Feature Flags Using Yarn Command
DESCRIPTION: Shell command to regenerate the code that provides access to feature flags after any changes to their definitions.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
yarn featureflags --update
```

----------------------------------------

TITLE: Configuring Android Gradle for Custom CMake in React Native
DESCRIPTION: Code showing how to extend the Android Gradle build file to use a custom CMake configuration for React Native. This modification points Gradle to a custom CMake file location.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/cmake-utils/default-app-setup/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: gradle
CODE:
```
android {
   // Other config here...
   externalNativeBuild {
       cmake {
           path "src/main/jni/CMakeLists.txt"
       }
   }
}
```

----------------------------------------

TITLE: Listing Feature Flags with CLI
DESCRIPTION: Shell command to print a list of all available feature flags with their configurations using the feature flags CLI tool.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_8

LANGUAGE: shell
CODE:
```
yarn featureflags --print
```

----------------------------------------

TITLE: Modifying an Enum Value in a Native Module Interface
DESCRIPTION: Example showing a modification to an enum value in a TurboModule interface which can cause compatibility issues.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
enum TestEnum {
  LIGHT = 1,
  DARK = 2,
  SYSTEM = -1,
}
```

----------------------------------------

TITLE: Adding EXTRA_PACKAGER_ARGS to iOS React Native Xcode Script
DESCRIPTION: A code modification to the react-native-xcode.sh script that adds an extensibility point for additional packager arguments. This allows developers to pass custom arguments to the Metro bundler during iOS builds.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_48

LANGUAGE: shell
CODE:
```
EXTRA_PACKAGER_ARGS
```

----------------------------------------

TITLE: Modifying a Union Type Parameter in a Native Module Interface
DESCRIPTION: Example showing a modification to a union type parameter in a TurboModule interface which can cause compatibility issues.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
export interface Spec extends TurboModule {
  // You add 'system' to this union
  +setColorScheme: (color: 'light' | 'dark') => void;
}
```

----------------------------------------

TITLE: JavaScript Functions Blocked by Content Security Policy
DESCRIPTION: Lists JavaScript functions that are typically blocked by Content Security Policy due to their ability to evaluate strings as code. These functions should be avoided for better security.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/cspEvalViolation.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
eval()
new Function()
setTimeout([string], ...)
setInterval([string], ...)
```

----------------------------------------

TITLE: Testing React Native Normalize Colors Package
DESCRIPTION: Commands to run tests for the normalize-colors package from the React Native root folder. Includes dependency installation and jest test execution.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/normalize-color/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn
yarn jest packages/normalize-color
```

----------------------------------------

TITLE: Setting Autocomplete Attribute Example
DESCRIPTION: Example showing how to properly set the autocomplete attribute on a form field in React Native to enable browser autofill functionality. The autocomplete attribute helps browsers correctly identify form fields for autofilling user data.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/genericFormInputAssignedAutocompleteValueToIdOrNameAttributeError.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
<TextInput
  id="email"
  name="email"
  autocomplete="email"
/>
```

----------------------------------------

TITLE: Defining Third-Party Cookie Attributes in Markdown
DESCRIPTION: This snippet defines the attributes of cookies that are considered third-party and blocked by Chrome. It specifies that cookies with 'SameSite=None; Secure' and not 'Partitioned' attributes operating in cross-site contexts are third-party cookies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/cookieExcludeThirdPartyPhaseoutSet.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
Cookies with the `SameSite=None; Secure` and not `Partitioned` attributes that operate in cross-site contexts are third-party cookies.
```

----------------------------------------

TITLE: Installing @react-native/babel-plugin-codegen with yarn
DESCRIPTION: Command to install the babel plugin and its dependencies using yarn. This installs both @babel/core and the @react-native/babel-plugin-codegen as development dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/babel-plugin-codegen/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
yarn add --dev @babel/core @react-native/babel-plugin-codegen
```

----------------------------------------

TITLE: Adding Support for Image resizeMode=repeat on Android in React Native
DESCRIPTION: This Android-specific addition implements support for the 'repeat' resize mode for images, allowing for tiled image backgrounds.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_38

LANGUAGE: Java
CODE:
```
// Support Image resizeMode=repeat
// Commit: 0459e4ffaadb161598ce1a5b14c08d49a9257c9c
```

----------------------------------------

TITLE: Running Tests for @react-native/assets-registry
DESCRIPTION: Commands to install dependencies and run tests for the assets-registry package in the React Native project.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/assets/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn
yarn jest packages/assets
```

----------------------------------------

TITLE: Error Message for Incompatible Union Type Modification
DESCRIPTION: Example error message from the compatibility-check tool when detecting an incompatible addition to a union type parameter.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
ColorManager.setColorScheme parameter 0: Union added items, but native will not expect/support them
  -- position 3 system
```

----------------------------------------

TITLE: Generate Source Maps in Android for Hermes
DESCRIPTION: Fix for generating correct source maps on Android when Hermes is not enabled and adjusting source map generation location outside of assets directory.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_15

LANGUAGE: javascript
CODE:
```
// b1f81be4bc - Generate correct source map if hermes not enabled
// 60e75dc1ab - Generate source maps outside of assets/
```

----------------------------------------

TITLE: Running Metro Config Tests
DESCRIPTION: Two-step process for running package tests from React Native root folder. First installs dependencies, then executes Jest tests specifically for the metro-config package.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/metro-config/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn
```

LANGUAGE: bash
CODE:
```
yarn jest packages/metro-config
```

----------------------------------------

TITLE: Adding Support for springDamping in SpringInterpolator in React Native
DESCRIPTION: This commit adds support for the springDamping parameter in the SpringInterpolator, allowing for more control over spring animations.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_34

LANGUAGE: JavaScript
CODE:
```
// Add support for springDamping in SpringInterpolator
// Commit: 1dde989919d2c272ca7fcaa5c4b2d9ee02c490a0
```

----------------------------------------

TITLE: Setting Request Mode to 'no-cors' in React Native
DESCRIPTION: Example of setting a fetch request's mode to 'no-cors' to bypass CORS requirements when an opaque response is sufficient. This approach disables CORS checks but makes the response content inaccessible.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/corsInvalidHeaderValues.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
no-cors
```

----------------------------------------

TITLE: Running tests for babel-plugin-codegen
DESCRIPTION: Commands to run the tests for the babel-plugin-codegen package from the React Native root folder. First install dependencies with yarn, then run the tests using Jest.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/babel-plugin-codegen/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn jest packages/babel-plugin-codegen
```

----------------------------------------

TITLE: Setting Request Mode to 'no-cors' in React Native
DESCRIPTION: Example of setting the request mode to 'no-cors' to handle requests with schemes that don't support CORS. This approach allows the request to proceed but results in an opaque response where the content is inaccessible.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/corsDisabledScheme.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
`no-cors`
```

----------------------------------------

TITLE: Fixing URLSearchParams Encoding in JavaScript
DESCRIPTION: Encodes URL parameters in URLSearchParams.toString() method for security purposes.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_0

LANGUAGE: JavaScript
CODE:
```
Encode URL params in URLSearchParams.toString()
```

----------------------------------------

TITLE: React Native Animation Validation Fix
DESCRIPTION: Fix for validation of event mappings in AnimatedEvent and support for AnimationInterpolation as possible type for toValue in animations.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_9



----------------------------------------

TITLE: Implementing a Schema Compatibility Check Script
DESCRIPTION: Example script showing how to use the compareSchemas function to check compatibility between current and previous schema versions and handle different compatibility outcomes.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
import {compareSchemas} from '@react-native/compatibility-check';
const util = require('util');

async function run(argv: Argv, STDERR: string) {
  const debug = (log: mixed) => {
    argv.debug &&
      console.info(util.inspect(log, {showHidden: false, depth: null}));
  };

  const currentSchema =
    JSON.parse(/*you'll read the file generated by codegen wherever it is in your app*/);
  const previousSchema =
    JSON.parse(/*you'll read the schema file that you persisted from when your native app was built*/);

  const safetyResult = compareSchemas(currentSchema, previousSchema);

  const summary = safetyResult.getSummary();
  switch (summary.status) {
    case 'ok':
      debug('No changes in boundary');
      console.log(JSON.stringify(summary));
      break;
    case 'patchable':
      debug('Changes in boundary, but are compatible');
      debug(result.getDebugInfo());
      console.log(JSON.stringify(summary));
      break;
    default:
      debug(result.getDebugInfo());
      console.error(JSON.stringify(result.getErrors()));
      throw new Error(`Incompatible changes in boundary`);
  }
}
```

----------------------------------------

TITLE: Overriding Feature Flags in JavaScript
DESCRIPTION: Example of how to override JS-only feature flags in JavaScript by calling the override method with an object containing flag override functions.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
import * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';

ReactNativeFeatureFlags.override({
  enableJSBehavior: () => true,
});
```

----------------------------------------

TITLE: Adding a New Method for Union Type Modifications
DESCRIPTION: Example showing how to safely add support for new union values by creating a new optional method rather than modifying the existing one.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
export interface Spec extends TurboModule {
  +setColorScheme: (color: 'light' | 'dark') => void
  +setColorSchemeWithSystem?: (color: 'light' | 'dark' | 'system') => void
}
```

----------------------------------------

TITLE: Running Tests for @react-native/js-polyfills
DESCRIPTION: Commands to run tests for the @react-native/js-polyfills package. These commands should be executed from the React Native root folder. The first command installs dependencies, and the second runs the tests using Jest.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/polyfills/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn
```

LANGUAGE: bash
CODE:
```
yarn jest packages/polyfills
```

----------------------------------------

TITLE: Testing Layout with Fantom (JavaScript)
DESCRIPTION: This JavaScript snippet illustrates using Fantom to test component layout. It creates a root, renders a View with specific styles, runs the render operation within Fantom.runTask, and then asserts the calculated dimensions using getBoundingClientRect which is available in Fantom's environment. This capability avoids the need for mocking typically required in standard Jest tests for layout properties.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/__docs__/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const root = Fantom.createRoot({viewportWidth: 200, viewportHeight: 600});
let viewElement;

Fantom.runTask(() => {
  root.render(
    <View
      ref={node => {
        viewElement = node;
      }}
      style={{width: '50%', height: '10%'}}
    />,
  );
});

// Without Fantom, getBoundingClientRect would have to be mocked.
const boundingClientRect = viewElement.getBoundingClientRect();
expect(boundingClientRect.height).toBe(60);
expect(boundingClientRect.width).toBe(100);
```

----------------------------------------

TITLE: Modifying Android Build Configuration in React Native
DESCRIPTION: This snippet demonstrates changes to the Android build configuration, including NDK setup and Gradle plugin modifications.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_4

LANGUAGE: gradle
CODE:
```
Use side-by-side NDK for Android
Leverage Gradle implicit dependency substitution for Gradle Plugin
```

----------------------------------------

TITLE: Describing React Native Release Testing Scripts in Markdown
DESCRIPTION: This Markdown snippet provides an overview of the scripts used for release testing in React Native. It explains the purpose of the scripts and lists two main commands: 'test-e2e-local' for setting up and installing test app configurations, and 'test-e2e-local-clean' for cleaning up between tests.
SOURCE: https://github.com/facebook/react-native/blob/main/scripts/release-testing/README.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
# scripts/release-testing

Scripts supporting local manual release testing. See also [How to Test a Release](https://reactnative.dev/contributing/release-testing).

## Commands

For information on command arguments, run `node <command> --help`.

### `test-e2e-local`

Set up, build, and install a given test app configuration.

### `test-e2e-local-clean`

Clean up all file system and cache state between tests.
```

----------------------------------------

TITLE: iOS App Extension Shared Application Access
DESCRIPTION: Fix to prevent calling sharedApplication in iOS App Extensions, which is not allowed by Apple.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_17

LANGUAGE: objective-c
CODE:
```
// c5ea18f738 - Don't call sharedApplication in App Extension
```

----------------------------------------

TITLE: Implementing Android Clean Command with React Native Core CLI Utils in JavaScript
DESCRIPTION: This snippet demonstrates how to use @react-native/core-cli-utils to create an Android clean command in a custom framework CLI. It sets up a Commander command, uses the clean.android utility, and executes cleaning tasks with logging.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/core-cli-utils/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
import { Command } from 'commander';
import cli from '@react-native/core-cli-utils';
import debug from 'debug';

const android = new Command('android');

const frameworkFindsAndroidSrcDir = "...";
const tasks = cli.clean.android(frameworkFindsAndroidSrcDir);
const log = debug('fancy-framework:android');

android
    .command('clean')
    .description(cli.clean.android)
    .action(async () => {
        const log = debug('fancy-framework:android:clean');
        log(`🧹 let me clean your Android caches`);
        // Add other caches your framework needs besides the normal React Native caches
        // here.
        for (const task of tasks) {
            try {
                log(`\t ${task.label}`);
                // See: https://github.com/sindresorhus/execa#lines
                const {stdout} = await task.action({ lines: true })
                log(stdout.join('\n\tGradle: '));
            } catch (e) {
                log(`\t ⚠️ whoops: ${e.message}`);
            }
        }
    });
```

----------------------------------------

TITLE: Adding devDependencies Support for Templates in React Native
DESCRIPTION: This commit adds support for devDependencies in React Native templates, allowing for better management of development-specific dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_33

LANGUAGE: JavaScript
CODE:
```
// Add devDependencies support for templates
// Commit: c4ab03a18e75e6ed55444b5d86f3ceea435b9a78
```

----------------------------------------

TITLE: Package Dependencies for React Native 0.68.1
DESCRIPTION: Example package.json dependencies section showing the aligned versions of React and React Native for version 0.68.1. This represents one of the two synchronization points between the frameworks.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Renderer/README.md#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
  "dependencies": {
    "react": "17.0.2",
    "react-native": "0.68.1"
  },
```

----------------------------------------

TITLE: TextInput Accessibility Enhancement
DESCRIPTION: Addition of autoFocus property to TextInput component and improvements to selection handling.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_14

LANGUAGE: javascript
CODE:
```
<TextInput
  autoFocus={true}
  onSelectionChange={(event) => {
    const {selection} = event.nativeEvent;
    // Handle selection change
  }}
/>
```

----------------------------------------

TITLE: Allowed Attribution Reporting API Headers List in Markdown
DESCRIPTION: Lists the four Attribution Reporting API headers that should not be mixed across web and OS contexts in the same HTTP response. At most one header should be used from either the web or OS category.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/arWebAndOsHeaders.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
- `Attribution-Reporting-Register-OS-Source`
- `Attribution-Reporting-Register-OS-Trigger`
- `Attribution-Reporting-Register-Source`
- `Attribution-Reporting-Register-Trigger`
```

----------------------------------------

TITLE: Creating a Basic RNTester Platform Test Component
DESCRIPTION: Example showing how to structure a basic test case with RNTesterPlatformTest component. This demonstrates how to set up a test with title, description, instructions, and a test component that receives the harness API.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/js/examples/Experimental/PlatformTest/README.md#2025-04-22_snippet_0

LANGUAGE: jsx
CODE:
```
function ExampleTestCase ({ harness }) { /* ... */ }

<RNTesterPlatformTest
  title="Example Test"
  description="Imagine there's a detailed description of this example test here"
  instructions={[
    "This is the example test's first step",
    "A second step",
    "A third step",
  ]}
  component={ExampleTestCase}
/>
```

----------------------------------------

TITLE: Metro Configuration Update
DESCRIPTION: Changes to Metro bundler configuration in react-native CLI, affecting how the Metro bundler is configured and initialized.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_28

LANGUAGE: javascript
CODE:
```
// metro.config.js settings are now preserved
// CLI doesn't override existing metro.config.js configurations
```

----------------------------------------

TITLE: Running RNTester on Android
DESCRIPTION: Command to build and run RNTester on Android from the root of the repository.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_4

LANGUAGE: sh
CODE:
```
yarn android
```

----------------------------------------

TITLE: Updating setTimeout Usage for Text Component Focus in JavaScript
DESCRIPTION: Demonstrates the breaking change where public methods of Text components are no longer bound to the instance. The code shows how to update setTimeout usage to properly focus a Text component.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_43

LANGUAGE: JavaScript
CODE:
```
// Old (no longer works):
setTimeout(this._txtRef.focus, 1000);

// New (correct usage):
setTimeout(() => this._txtRef.focus(), 1000);
```

----------------------------------------

TITLE: Specifying HTTP Header Requirement in Markdown
DESCRIPTION: This snippet defines a requirement for the 'match' field in the 'Use-As-Dictionary' HTTP response header. It states that the field must be a string, which is crucial for proper header parsing and usage in React Native applications.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/sharedDictionaryWriteErrorNonStringMatchField.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# The `match` field of the `Use-As-Dictionary` HTTP response header must be a string
```

----------------------------------------

TITLE: Installing JSC for Android RNTester
DESCRIPTION: Commands to install and start RNTester with JSC instead of Hermes on Android.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_5

LANGUAGE: sh
CODE:
```
cd packages/rn-tester
yarn install-android-jsc
yarn start
```

----------------------------------------

TITLE: DevTools Settings Persistence Table in Markdown
DESCRIPTION: A markdown table comparing two DevTools settings modules (DevToolsRuntimeSettings and DevToolsSettings) and their persistence behavior across native and JavaScript VM restarts.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/devtoolsruntimesettings/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
| Module | Survives native restarts | Survives JavaScript VM restarts |
| --- | --- | --- |
| DevToolsRuntimeSettings | No | Yes
| DevToolsSettings | Yes | Yes
```

----------------------------------------

TITLE: Adding Decimal Pad Support on Android in React Native
DESCRIPTION: This Android-specific addition implements support for a decimal pad input type, enhancing numeric input capabilities on Android devices.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_36

LANGUAGE: Java
CODE:
```
// Add decimal pad to android
// Commit: 75e49a0637eaa3bd3bb7e445648f084a42d9c8af
```

----------------------------------------

TITLE: Running Fantom Tests via Yarn (Shell)
DESCRIPTION: This shell command provides the basic instruction for executing Fantom tests from the root of the React Native repository using yarn. It invokes the fantom script, which is configured as a Jest runner, and optionally accepts a test pattern argument to filter which tests are executed. This is the primary method for running Fantom integration tests locally.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/__docs__/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
yarn fantom [optional test pattern]
```

----------------------------------------

TITLE: Android OkHttpClient Provider Update
DESCRIPTION: Breaking change replacing OkHttpClientProvider.replaceOkHttpClient method with setOkHttpClientFactory for version 0.54+.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_4

LANGUAGE: java
CODE:
```
// Before:
OkHttpClientProvider.replaceOkHttpClient();

// After:
OkHttpClientProvider.setOkHttpClientFactory();
```

----------------------------------------

TITLE: Improving Switch Accessibility in React Native
DESCRIPTION: Enhances the accessibility features of the Switch component for better user experience.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_21

LANGUAGE: JavaScript
CODE:
```
Switch: Improve Accessibility ([0c8db08f51](https://github.com/facebook/react-native/commit/0c8db08f519fdf5162dff1d9a18b58885c4c7d2f) by [@yungsters](https://github.com/yungsters))
```

----------------------------------------

TITLE: Overriding Feature Flags in Kotlin
DESCRIPTION: Shows how to override feature flag values in Kotlin by creating an anonymous object that extends the defaults class and overrides specific methods.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_6

LANGUAGE: kotlin
CODE:
```
import com.facebook.react.internal.featureflags.ReactNativeFeatureFlags
import com.facebook.react.internal.featureflags.ReactNativeFeatureFlagsDefaults

fun overrideFeatureFlags() {
  ReactNativeFeatureFlags.override(object : ReactNativeFeatureFlagsDefaults() {
    override fun useMicrotasks(): Boolean = true
  })
}
```

----------------------------------------

TITLE: Setting contextMenuHidden property on TextInput in React Native
DESCRIPTION: The contextMenuHidden property can be used to hide the context menu on TextInput components.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_46

LANGUAGE: JavaScript
CODE:
```
<TextInput
  contextMenuHidden={true}
/>
```

----------------------------------------

TITLE: Updating Gradle Configuration for Android
DESCRIPTION: This code update addresses warnings related to updating to gradle 4.10.1 or higher in the Android build process.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_7

LANGUAGE: JavaScript
CODE:
```
Fix warnings related to updating to gradle 4.10.1 or higher
```

----------------------------------------

TITLE: Associating Labels with Form Fields in HTML
DESCRIPTION: Two recommended approaches for associating labels with form fields for accessibility: either nesting the input element inside the label element, or using matching 'for' and 'id' attributes to create the association.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/genericFormLabelHasNeitherForNorNestedInput.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# No label associated with a form field

A `<label>` isn't associated with a form field.

To fix this issue, nest the `<input>` in the `<label>` or provide a `for` attribute on the `<label>` that matches a form field `id`.
```

----------------------------------------

TITLE: Android ViewHelper Deprecation
DESCRIPTION: Breaking change removing ViewHelper in favor of ViewCompat. This requires updating android:theme to use Theme.AppCompat.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_3

LANGUAGE: java
CODE:
```
// Before:
ViewHelper.setBackground(view, background);

// After:
ViewCompat.setBackground(view, background);
```

----------------------------------------

TITLE: Adding accessibilityTraits Prop Type to Text Component in React Native
DESCRIPTION: This commit adds the accessibilityTraits prop type to the Text component, improving accessibility support in React Native applications.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_32

LANGUAGE: JavaScript
CODE:
```
// Add prop type accessibilityTraits to Text
// Commit: 654435d1ed9e584e65fff601e1fa50591e042664
```

----------------------------------------

TITLE: Linking Libraries for React Native Unit Tests in CMake
DESCRIPTION: Links the 'reactnative_unittest' target with all required libraries, including various React Native components, Facebook libraries like Folly and Yoga, Google libraries like glog, and testing frameworks like GTest.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_10

LANGUAGE: CMake
CODE:
```
target_link_libraries(reactnative_unittest
  fabricjni
  folly_runtime
  glog
  glog_init
  gtest_main
  hermes-engine::libhermes
  hermes_inspector_modern
  jserrorhandler
  jsi
  mapbufferjni
  react_codegen_rncore
  react_cxxreact
  react_debug
  react_renderer_animations
  react_renderer_attributedstring
  react_renderer_core
  react_renderer_css
  react_renderer_debug
  react_renderer_dom
  react_renderer_element
  react_renderer_graphics
  react_renderer_mapbuffer
  react_renderer_mounting
  react_renderer_telemetry
  react_renderer_textlayoutmanager
  react_renderer_uimanager
  react_renderer_uimanager_consistency
  react_utils
  reactnative
  rrc_legacyviewmanagerinterop
  rrc_modal
  rrc_root
  rrc_scrollview
  rrc_text
  rrc_textinput
  rrc_view
  yoga
)
```

----------------------------------------

TITLE: Adding unsafe-eval to Content Security Policy
DESCRIPTION: Shows how to modify the Content Security Policy to allow string evaluation. This should only be used if absolutely necessary, as it increases security risks.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/cspEvalViolation.md#2025-04-22_snippet_1

LANGUAGE: HTML
CODE:
```
script-src 'unsafe-eval'
```

----------------------------------------

TITLE: Setting Metro Bundler Host using Android System Properties
DESCRIPTION: Shows how to set the Metro bundler server host using Android System Properties for easier debugging across multiple apps or app installs.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_18

LANGUAGE: bash
CODE:
```
adb shell setprop metro.host
```

----------------------------------------

TITLE: Installing Third-Party Dependencies for iOS
DESCRIPTION: Commands to install and configure third-party dependencies for iOS to fix build issues with Xcode 10.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_24

LANGUAGE: bash
CODE:
```
cd node_modules/react-native
scripts/ios-install-third-party.sh
cd third-party/glog-0.3.5/
../../scripts/ios-configure-glog.sh
```

----------------------------------------

TITLE: Configuring React Native Application Modules in CMake
DESCRIPTION: Defines the CMake configuration for React Native application modules on Android. It sets up the project, includes the React Native application CMake utilities, adds subdirectories for sample TurboModule and NativeCxxModule implementations, and links the project against these sample modules.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/android/app/src/main/jni/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)

# Define the application dynamic library name here.
project(appmodules)

include(${REACT_ANDROID_DIR}/cmake-utils/ReactNative-application.cmake)

add_subdirectory(${REACT_COMMON_DIR}/react/nativemodule/samples/platform/android/ sampleturbomodule_build)
add_subdirectory(${REACT_COMMON_DIR}/../../rn-tester/NativeCxxModuleExample/ nativecxxmoduleexample_build)

# RN Tester needs to link against the sample turbomobule
target_link_libraries(${CMAKE_PROJECT_NAME}
        sampleturbomodule)
# RN Tester needs to link against the NativeCxxModuleExample
target_link_libraries(${CMAKE_PROJECT_NAME}
        nativecxxmoduleexample)
```

----------------------------------------

TITLE: Fixing Exception During TextView Fading on Android
DESCRIPTION: This code resolves an exception that was occurring while fading a TextView component on Android.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_14

LANGUAGE: JavaScript
CODE:
```
Fix exception occurring while fading a TextView
```

----------------------------------------

TITLE: Using testOnly_pressed prop in TouchableHighlight for testing
DESCRIPTION: The testOnly_pressed prop can be set on TouchableHighlight components to simulate the pressed state in snapshot tests.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_47

LANGUAGE: JavaScript
CODE:
```
<TouchableHighlight
  testOnly_pressed={true}
>
  <Text>Press me</Text>
</TouchableHighlight>
```

----------------------------------------

TITLE: Running Tests for @react-native/codegen
DESCRIPTION: Commands to run the test suite for the @react-native/codegen package. These commands should be executed from the React Native root folder, starting with installing dependencies and then running Jest.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-codegen/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn
```

LANGUAGE: bash
CODE:
```
yarn jest packages/react-native-codegen
```

----------------------------------------

TITLE: Running tests for @react-native/virtualized-lists
DESCRIPTION: Commands to run tests for the virtualized-lists package from the React Native root folder, including installing dependencies first.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/virtualized-lists/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn
yarn jest packages/virtualized-lists
```

----------------------------------------

TITLE: Updating Debugger Frontend Assets for Stable Branch using Shell
DESCRIPTION: This shell command updates the compiled assets for the debugger frontend by running a Node.js script for a specific stable branch (e.g., 0.73-stable).
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/README.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
node scripts/debugger-frontend/sync-and-build --branch 0.73-stable
```

----------------------------------------

TITLE: Fixed Text View Nesting in React Native
DESCRIPTION: Fix to support rendering Views with no fixed size when nested within Text components, addressing crashes with nested Text/View/Image components.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_7



----------------------------------------

TITLE: Updating iOS Method Signature in React Native
DESCRIPTION: This code snippet shows an update to an iOS method signature for bundle URL retrieval in React Native.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_5

LANGUAGE: objective-c
CODE:
```
updated `jsBundleURLForBundleRoot:fallbackResource` to `jsBundleURLForBundleRoot:`
```

----------------------------------------

TITLE: Fixing Inverted Horizontal ScrollView on Android
DESCRIPTION: This code fixes an issue with inverted horizontal ScrollView components on Android.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_9

LANGUAGE: JavaScript
CODE:
```
Fix Inverted Horizontal ScrollView
```

----------------------------------------

TITLE: Setting Compiler Options for React Native Unit Tests in CMake
DESCRIPTION: Configures compiler options for the 'reactnative_unittest' target. It applies React Native-specific compilation options and enables the Hermes debugger through a compile definition.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_9

LANGUAGE: CMake
CODE:
```
target_compile_reactnative_options(reactnative_unittest PRIVATE)
target_compile_options(reactnative_unittest PRIVATE -DHERMES_ENABLE_DEBUGGER)
```

----------------------------------------

TITLE: Testing React Native Gradle Plugin
DESCRIPTION: Commands to run tests for the gradle plugin. Requires executing from the React Native root folder, first installing dependencies and then running the Gradle test task.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/gradle-plugin/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
yarn
```

LANGUAGE: shell
CODE:
```
./gradlew -p packages/gradle-plugin test
```

----------------------------------------

TITLE: Updating Debugger Frontend Assets for Main Branch using Shell
DESCRIPTION: This shell command updates the compiled assets for the debugger frontend by running a Node.js script for the main branch.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
node scripts/debugger-frontend/sync-and-build --branch main
```

----------------------------------------

TITLE: Overriding Feature Flags in C++/Objective-C
DESCRIPTION: Demonstrates how to create a custom class that extends the default feature flags implementation in C++/Objective-C to override specific flag values.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/src/private/featureflags/__docs__/README.md#2025-04-22_snippet_5

LANGUAGE: c++
CODE:
```
#include <react/featureflags/ReactNativeFeatureFlags.h>
#include <react/featureflags/ReactNativeFeatureFlagsDefaults.h>

class CustomReactNativeFeatureFlags : public ReactNativeFeatureFlagsDefaults {
 public:
  CustomReactNativeFeatureFlags();

  bool enableNativeBehavior() override {
    return true;
  }
}

ReactNativeFeatureFlags::override(std::make_unique<CustomReactNativeFeatureFlags>());
```

----------------------------------------

TITLE: Handling Undefined Error Description in Image onError Callback
DESCRIPTION: This code fixes an issue where undefined error descriptions were occurring in the Image component's onError callback on Android.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_11

LANGUAGE: JavaScript
CODE:
```
Fix undefined error description in Image `onError` callback
```

----------------------------------------

TITLE: Configuring and Building React Native MapBuffer Renderer Library with CMake
DESCRIPTION: This CMake script sets up the build configuration for the React Native MapBuffer renderer library. It includes necessary directories, compiles source files, and links required libraries. The script also sets compilation flags and options specific to the Fabric architecture.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/mapbuffer/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
file(GLOB react_renderer_mapbuffer_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_mapbuffer OBJECT ${react_renderer_mapbuffer_SRC})

target_include_directories(react_renderer_mapbuffer PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_mapbuffer glog glog_init react_debug)
target_compile_reactnative_options(react_renderer_mapbuffer PRIVATE "Fabric")
target_compile_options(react_renderer_mapbuffer PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Updating Proguard Config for Android
DESCRIPTION: Adds a new ProGuard rule to keep JNI classes when using Hermes 0.4.0.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_11

LANGUAGE: ProGuard
CODE:
```
-keep class com.facebook.jni.** { *; }
```

----------------------------------------

TITLE: Configuring Bridgeless Native View Config Library in CMake for React Native
DESCRIPTION: Sets up a CMake build configuration for the 'bridgelessnativeviewconfig' library. The configuration establishes minimum CMake version requirements, includes React Native common flags, collects all C++ source files recursively, and creates an object library with proper include directories and dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/runtime/nativeviewconfig/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE bridgeless_nativeviewconfig_SRC CONFIGURE_DEPENDS *.cpp)
add_library(
        bridgelessnativeviewconfig
        OBJECT
        ${bridgeless_nativeviewconfig_SRC}
)
target_include_directories(bridgelessnativeviewconfig PUBLIC .)

target_link_libraries(bridgelessnativeviewconfig jsi)
target_compile_reactnative_options(bridgelessnativeviewconfig PRIVATE)
```

----------------------------------------

TITLE: Preventing Automatic Charset Appending in Fetch POST Requests
DESCRIPTION: This code prevents fetch() POST requests from automatically appending 'charset=utf-8' to the Content-Type header on Android.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_16

LANGUAGE: JavaScript
CODE:
```
Prevent `fetch()` POST requests from appending `charset=utf-8` to `Content-Type` header
```

----------------------------------------

TITLE: Updating React version for React Native 0.57.5-0.57.7
DESCRIPTION: When upgrading to React Native versions 0.57.5-0.57.7, you need to also upgrade react and react-test-renderer to version 16.6.1.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_23

LANGUAGE: JSON
CODE:
```
{
  "dependencies": {
    "react": "16.6.1",
    "react-test-renderer": "16.6.1"
  }
}
```

----------------------------------------

TITLE: Preserving Existing Global Performance Object
DESCRIPTION: Fix to prevent overwriting the global.performance object if it has already been initialized, maintaining existing functionality.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_60

LANGUAGE: JavaScript
CODE:
```
dfebcb70a5c948db94d1cd580bbcaa0aaa702349
```

----------------------------------------

TITLE: Configuring CMake for React Native Bridgeless Instance Library
DESCRIPTION: This CMake snippet sets up the build configuration for a React Native bridgeless instance library. It defines the minimum CMake version, includes utility files, specifies source files, and configures the 'rninstance' library with compilation options and dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/runtime/jni/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE bridgeless_jni_SRC CONFIGURE_DEPENDS *.cpp)

add_library(rninstance
        OBJECT
        ${bridgeless_jni_SRC}
)

target_compile_reactnative_options(rninstance PRIVATE)
target_compile_options(rninstance PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)

target_merge_so(rninstance)
target_include_directories(rninstance PUBLIC .)
target_link_libraries(
        rninstance
        fabricjni
        react_featureflagsjni
        turbomodulejsijni
        jsi
        jsitooling
        fbjni
        bridgeless
)
```

----------------------------------------

TITLE: Demonstrating Cross-Site Redirect Chain in Markdown
DESCRIPTION: This snippet illustrates an example of a cross-site redirect chain where site A redirects to site B, which then redirects back to site A, resulting in the final request to site A being treated as a cross-site request.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/cookieCrossSiteRedirectDowngrade.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
For example: If site A redirects to site B which then redirects back to site A,
the final request to site A will be a cross-site request.
```

----------------------------------------

TITLE: Updating Metro Configuration for React Native 0.57
DESCRIPTION: Diff showing the required changes to migrate a custom Metro packager configuration (rn-cli.config.js) to work with React Native 0.57's updated Metro configuration structure.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_26

LANGUAGE: diff
CODE:
```
-const blacklist = require('metro/src/blacklist')
+const blacklist = require('metro-config/src/defaults/blacklist')

// ...

module.exports = {
+  watchFolders: alternateRoots,
+  resolver: {
+    blacklistRE: blacklist
+  },
+  transformer: {
+    babelTransformerPath: require.resolve('./scripts/transformer.js'),
+  },
-  getProjectRoots() {
-    return [
-      path.resolve(__dirname),
-    ].concat(alternateRoots)
-  },
-  getBlacklistRE() {
-    return blacklist;
-  },
-  transformModulePath: require.resolve('./scripts/transformer.js'),
}
```

----------------------------------------

TITLE: Setting up React Native Android CMake Project
DESCRIPTION: Main CMake configuration that defines the project and includes the necessary React Native architecture components. This configures the native modules project and links it with React Native.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/cmake-utils/default-app-setup/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)

# Define the library name here.
project(appmodules)

# This file includes all the necessary to let you build your application with the New Architecture.
include(${REACT_ANDROID_DIR}/cmake-utils/ReactNative-application.cmake)
```

----------------------------------------

TITLE: Adding Support for Homebrew-installed Node on iOS in React Native
DESCRIPTION: This iOS-specific addition adds support for Node.js installations via Homebrew, improving development environment flexibility on macOS.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_40

LANGUAGE: Objective-C
CODE:
```
// Add support for Homebrew-installed Node
// Commit: 0964135a178b459e06b44a49a4ecb0dd6c5bec9b
```

----------------------------------------

TITLE: Adding Swift Usage Documentation to RCTBridgeModule.h for iOS
DESCRIPTION: This iOS-specific addition includes documentation for Swift usage in the RCTBridgeModule.h file, improving guidance for Swift developers using React Native.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_42

LANGUAGE: Swift
CODE:
```
// Add docs for Swift usage to RCTBridgeModule.h
// Commit: ca898f4367083e0943603521a41c48dec403e6c9
```

----------------------------------------

TITLE: Configuring CMake Build for React Native Text Layout Manager
DESCRIPTION: This CMake script configures the build for React Native's text layout manager component. It collects source files, sets up include directories, and defines library dependencies needed for compilation. The script specifically targets the Fabric architecture and enables pedantic warnings.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/textlayoutmanager/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_textlayourmanager_SRC CONFIGURE_DEPENDS
        *.cpp
        platform/android/react/renderer/textlayoutmanager/*.cpp)

add_library(react_renderer_textlayoutmanager
        OBJECT
        ${react_renderer_textlayourmanager_SRC})

target_include_directories(react_renderer_textlayoutmanager
        PUBLIC
          .
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
)

target_link_libraries(react_renderer_textlayoutmanager
        glog
        fbjni
        folly_runtime
        mapbufferjni
        react_debug
        react_renderer_attributedstring
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_telemetry
        react_utils
        reactnativejni
        yoga
)
target_compile_reactnative_options(react_renderer_textlayoutmanager PRIVATE "Fabric")
target_compile_options(react_renderer_textlayoutmanager PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Android Border Radius Fix
DESCRIPTION: Patch to correctly implement border radius styling on Android components.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_16

LANGUAGE: java
CODE:
```
// b432b8f13b - Correctly set the border radius on android
```

----------------------------------------

TITLE: Configuring JSInspector Library Build in React Native with CMake
DESCRIPTION: This CMake snippet configures the build process for the jsinspector library, which contains app-global state singletons. It defines an OBJECT library from all cpp files in the directory, sets include paths, links necessary dependencies, and applies React Native-specific compilation options including debug flags.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsinspector-modern/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB jsinspector_SRC CONFIGURE_DEPENDS *.cpp)
# jsinspector contains singletons that hold app-global state (InspectorFlags, InspectorImpl).
# Placing it in a shared library makes the singletons safe to use from arbitrary shared libraries
# (even ones that don't depend on one another).
add_library(jsinspector OBJECT ${jsinspector_SRC})
target_merge_so(jsinspector)

target_include_directories(jsinspector PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector
        folly_runtime
        glog
        jsinspector_network
        jsinspector_tracing
        react_featureflags
        runtimeexecutor
)
target_compile_reactnative_options(jsinspector PRIVATE)
target_compile_options(jsinspector PRIVATE
        $<$<CONFIG:Debug>:-DREACT_NATIVE_DEBUGGER_ENABLED=1>
        $<$<CONFIG:Debug>:-DREACT_NATIVE_DEBUGGER_ENABLED_DEVONLY=1>
)
```

----------------------------------------

TITLE: Enabling Compression Dictionary Transport in Chrome
DESCRIPTION: Instructions for enabling the Compression Dictionary Transport feature through Chrome flags. This flag can optimize network requests by allowing compression dictionaries to be transported between client and server.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/sharedDictionaryWriteErrorFeatureDisabled.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
chrome://flags/#enable-compression-dictionary-transport
```

----------------------------------------

TITLE: Configuring and Building the react_newarchdefaults Library in CMake
DESCRIPTION: This CMake script configures the building of the react_newarchdefaults library. It gathers C++ source files, sets up the library as an object library, specifies include directories, and links against various React Native dependencies including fbjni, fabricjni, and other native modules.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/newarchdefaults/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_newarchdefaults_SRC CONFIGURE_DEPENDS *.cpp)

add_library(react_newarchdefaults OBJECT ${react_newarchdefaults_SRC})

target_merge_so(react_newarchdefaults)

target_include_directories(react_newarchdefaults PUBLIC .)

target_link_libraries(react_newarchdefaults
        fbjni
        fabricjni
        react_featureflagsjni
        react_nativemodule_core
        react_codegen_rncore
        react_cxxreactpackage
        react_nativemodule_defaults
        react_nativemodule_dom
        react_nativemodule_featureflags
        react_nativemodule_microtasks
        react_nativemodule_idlecallbacks
        jsi)

target_compile_reactnative_options(react_newarchdefaults PRIVATE "ReactNative")
```

----------------------------------------

TITLE: Configuring CMake for React Native Renderer Element Library
DESCRIPTION: Sets up the CMake configuration for building the React Native renderer element library. It defines the minimum CMake version, includes necessary files, sets up source files, and configures compilation options and dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/element/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_element_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_element OBJECT ${react_renderer_element_SRC})

target_include_directories(react_renderer_element PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_element
        folly_runtime
        glog
        react_renderer_core
        react_renderer_componentregistry
)
target_compile_reactnative_options(react_renderer_element PRIVATE "Fabric")
target_compile_options(react_renderer_element PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring CMake for React Native Renderer Observers Events Library
DESCRIPTION: This CMake snippet sets up the project, includes utilities, defines source files, and configures the react_renderer_observers_events library. It specifies include directories, links required libraries, and sets compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/observers/events/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_observers_events_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_observers_events OBJECT ${react_renderer_observers_events_SRC})

target_include_directories(react_renderer_observers_events PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_observers_events
        react_performance_timeline
        react_timing
        react_renderer_core
        react_renderer_runtimescheduler
        react_featureflags
        react_renderer_uimanager
        react_utils)
target_compile_reactnative_options(react_renderer_observers_events PRIVATE "Fabric")
target_compile_options(react_renderer_observers_events PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring Hermes Executor Build in CMake for React Native
DESCRIPTION: This CMake script defines the build configuration for the Hermes JavaScript engine executor in React Native. It collects source files, sets up include directories, defines library dependencies including the Hermes engine, and configures compilation options with special handling for debug builds enabling the debugger.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/hermes/reactexecutor/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

file(GLOB_RECURSE hermes_executor_SRC CONFIGURE_DEPENDS *.cpp)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(hermes_executor
        OBJECT
        ${hermes_executor_SRC}
)
target_merge_so(hermes_executor)
target_include_directories(hermes_executor PRIVATE .)
target_link_libraries(
        hermes_executor
        hermes_executor_common
        hermes-engine::libhermes
        jsi
        reactnative
)
target_compile_reactnative_options(hermes_executor PRIVATE)
target_compile_options(hermes_executor PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)
```

----------------------------------------

TITLE: Path conversion and ccache configuration
DESCRIPTION: Converts input paths to CMake format and configures ccache support for faster builds. Sets build ID option for shared libraries.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: cmake
CODE:
```
file(TO_CMAKE_PATH "${REACT_ANDROID_DIR}" REACT_ANDROID_DIR)
file(TO_CMAKE_PATH "${REACT_BUILD_DIR}" REACT_BUILD_DIR)
file(TO_CMAKE_PATH "${REACT_COMMON_DIR}" REACT_COMMON_DIR)

find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif(CCACHE_FOUND)

add_link_options(-Wl,--build-id)
```

----------------------------------------

TITLE: Adding Yoga Library to the Project
DESCRIPTION: Includes the Yoga library as a subdirectory in the project using the custom function.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/tester/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: CMake
CODE:
```
# Common targets
add_react_common_subdir(yoga)
```

----------------------------------------

TITLE: Importing and Using Debugger Frontend Path in JavaScript
DESCRIPTION: This snippet demonstrates how to import the absolute path to the directory containing the frontend assets and suggests passing it to a static server.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/README.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const frontendPath = require('@react-native/debugger-frontend');

// Pass frontendPath to a static server, etc
```

----------------------------------------

TITLE: Fixing Android Crash on Animation with useNativeDriver
DESCRIPTION: This code addresses a crash that was occurring on Android when animating with the useNativeDriver option.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_12

LANGUAGE: JavaScript
CODE:
```
Fix Android crash on animating with `useNativeDriver`
```

----------------------------------------

TITLE: Preventing Crash on CheckBox for Older Android Versions
DESCRIPTION: This fix prevents crashes that were occurring with CheckBox components on older versions of Android.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_10

LANGUAGE: JavaScript
CODE:
```
Fix crash on CheckBox on older Android versions
```

----------------------------------------

TITLE: Configuring React Native NativeModule Defaults Library with CMake
DESCRIPTION: This CMake script sets up the react_nativemodule_defaults library, which serves as a collection of default native modules for React Native. It includes compiler settings, links with required dependencies like DOM, DevTools, FeatureFlags, Microtasks, and IdleCallbacks modules, and applies React Native specific compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/defaults/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_defaults_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_defaults OBJECT ${react_nativemodule_defaults_SRC})

target_include_directories(react_nativemodule_defaults PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_defaults
        react_nativemodule_dom
        react_nativemodule_devtoolsruntimesettings
        react_nativemodule_featureflags
        react_nativemodule_microtasks
        react_nativemodule_idlecallbacks
)
target_compile_reactnative_options(react_nativemodule_defaults PRIVATE "ReactNative")
target_compile_options(react_nativemodule_defaults PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: HTTP Headers for Attribution Reporting
DESCRIPTION: Example of HTTP headers that need to be registered from a secure origin for Attribution Reporting API functionality.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/arUntrustworthyReportingOrigin.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
Attribution-Reporting-Register-Source
Attribution-Reporting-Register-Trigger
```

----------------------------------------

TITLE: Updating babelHelpers with Babel 7 Support in React Native
DESCRIPTION: This commit updates the babelHelpers to add support for Babel 7 in React Native. It ensures compatibility with the latest version of Babel.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_29

LANGUAGE: JavaScript
CODE:
```
// Update babelHelpers with Babel 7 support
// Commit: fbd1beaf666be9c09a380784f8c0cd34ba083a6b
```

----------------------------------------

TITLE: Configuring Android API 28 Security for Metro Access
DESCRIPTION: This code adds a security configuration for metro access when using Android API 28, fixing related issues.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_8

LANGUAGE: JavaScript
CODE:
```
Fix issue with use of Android API 28 by adding security config for metro access
```

----------------------------------------

TITLE: Configuring CMake Build for React Native Logger Library
DESCRIPTION: Sets up CMake configuration for building the React Native logger library. Includes source files, sets include directories, and links against the glog dependency. Uses verbose makefile output and requires CMake 3.13 or higher.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/logger/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB logger_SRC CONFIGURE_DEPENDS *.cpp)
add_library(logger OBJECT ${logger_SRC})

target_include_directories(logger PUBLIC .)

target_link_libraries(logger glog)
target_compile_reactnative_options(logger PRIVATE)
```

----------------------------------------

TITLE: Using the new UTFSequence module in React Native
DESCRIPTION: The UTFSequence module provides common Unicode sequences like Emoji. It can be imported and used to insert Unicode characters.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_45

LANGUAGE: JavaScript
CODE:
```
import { UTFSequence } from 'react-native';

console.log(UTFSequence.HOURGLASS);
```

----------------------------------------

TITLE: Setting up CMake Requirements and Flags for React Native Android
DESCRIPTION: Configures the minimum CMake version, enables verbose output, and includes common React Native flags for the build process.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jni/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
```

----------------------------------------

TITLE: Linking Dependencies to React Native Shared Library in CMake
DESCRIPTION: Links required external libraries to the reactnative shared library. These dependencies include Android system libraries, logging utilities, and core React Native dependencies like yoga and JSI.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_5

LANGUAGE: CMake
CODE:
```
target_link_libraries(reactnative
          PUBLIC
            android
            double-conversion
            fbjni
            folly_runtime
            glog
            jsi
            log
            yogacore
)
```

----------------------------------------

TITLE: Configuring React Native Renderer Scheduler Library in CMake
DESCRIPTION: This CMake script configures the build for the React Native renderer scheduler library. It compiles C++ source files into a static library and sets up the necessary include directories and linked dependencies. The configuration includes compiler flags specific to the Fabric renderer architecture.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/scheduler/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_scheduler_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_scheduler STATIC ${react_renderer_scheduler_SRC})

target_include_directories(react_renderer_scheduler PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_scheduler
        folly_runtime
        glog
        jsi
        react_debug
        react_featureflags
        react_performance_timeline
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mounting
        react_renderer_observers_events
        react_renderer_runtimescheduler
        react_renderer_uimanager
        react_utils
        rrc_root
        rrc_view
        yoga
)
target_compile_reactnative_options(react_renderer_scheduler PRIVATE "Fabric")
target_compile_options(react_renderer_scheduler PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Native Renderer Debug Library in CMake
DESCRIPTION: This CMake script sets up the build configuration for the React Native renderer debug library. It defines minimum CMake version, enables verbose output, includes common flags, collects source files, and configures the library with appropriate dependencies and compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/debug/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_debug_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_debug OBJECT ${react_renderer_debug_SRC})

target_include_directories(react_renderer_debug PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_debug folly_runtime react_debug)
target_compile_reactnative_options(react_renderer_debug PRIVATE "Fabric")
target_compile_options(react_renderer_debug PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Native Animations Renderer Build
DESCRIPTION: Configures and builds a static library for React Native's animations renderer component. Sets up compiler flags, includes necessary directories, and links required dependencies like Folly, JSI, Yoga, and other React Native renderer components.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/animations/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_animations_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_animations STATIC ${react_renderer_animations_SRC})

target_include_directories(react_renderer_animations PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_animations
        folly_runtime
        glog
        glog_init
        jsi
        react_debug
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mounting
        react_renderer_uimanager
        rrc_view
        runtimeexecutor
        yoga
)
target_compile_reactnative_options(react_renderer_animations PRIVATE "Fabric")
target_compile_options(react_renderer_animations PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Native Renderer Mounting Build in CMake
DESCRIPTION: This CMake script configures the build process for the react_renderer_mounting library. It collects source files from the current directory and its subdirectories, sets up include paths, and links required dependencies including Folly, glog, JSI, and various React Native renderer components.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/mounting/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_mounting_SRC CONFIGURE_DEPENDS
        *.cpp
        internal/*.cpp
        stubs/*.cpp)
add_library(react_renderer_mounting OBJECT ${react_renderer_mounting_SRC})

target_include_directories(react_renderer_mounting PRIVATE .)
target_include_directories(react_renderer_mounting PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_mounting
        folly_runtime
        glog
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_telemetry
        react_utils
        rrc_root
        rrc_view
        yoga)
target_compile_reactnative_options(react_renderer_mounting PRIVATE "Fabric")
target_compile_options(react_renderer_mounting PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Renderer Consistency Library in CMake
DESCRIPTION: This CMake script configures the build for the 'react_renderer_consistency' library in React Native's Fabric renderer. It sets up compilation flags, includes necessary paths, and creates an object library from all C++ source files in the directory.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/consistency/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_consistency_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_consistency OBJECT ${react_renderer_consistency_SRC})

target_include_directories(react_renderer_consistency PUBLIC ${REACT_COMMON_DIR})
target_compile_reactnative_options(react_renderer_consistency PRIVATE "Fabric")
target_compile_options(react_renderer_consistency PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Native AttributedString Renderer with CMake
DESCRIPTION: This CMake script configures the build for the AttributedString renderer component in React Native. It finds source files, creates a library target, sets include directories, and specifies dependencies like folly, glog, and other React Native components.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/attributedstring/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_attributedstring_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_attributedstring OBJECT ${react_renderer_attributedstring_SRC})

target_include_directories(react_renderer_attributedstring PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_attributedstring
        folly_runtime
        glog
        glog_init
        react_debug
        rrc_view
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_utils
        rrc_view
        yoga
)
target_compile_reactnative_options(react_renderer_attributedstring PRIVATE "Fabric")
target_compile_options(react_renderer_attributedstring PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring reactnativejni_common Library for React Native Android
DESCRIPTION: Defines the reactnativejni_common library that contains shared JNI code used by both old and new architectures. Includes SO merging utilities, source files, include directories, and required dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jni/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: CMake
CODE:
```
include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_library(
        reactnativejni_common
        OBJECT
          JDynamicNative.cpp
          JReactMarker.cpp
          NativeArray.cpp
          NativeCommon.cpp
          NativeMap.cpp
          OnLoad-common.cpp
          ReadableNativeArray.cpp
          ReadableNativeMap.cpp
          WritableNativeArray.cpp
          WritableNativeMap.cpp
)
target_merge_so(reactnativejni_common)
target_include_directories(reactnativejni_common PUBLIC ../../)

target_link_libraries(reactnativejni_common fbjni folly_runtime react_cxxreact)
target_compile_reactnative_options(reactnativejni_common PRIVATE)
target_compile_options(reactnativejni_common PRIVATE -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: Deprecated Pattern for Ignoring YellowBox Warnings in React Native
DESCRIPTION: Shows the deprecated approach for ignoring YellowBox warnings in React Native. This pattern is no longer recommended and developers should migrate to YellowBox.ignoreWarnings().
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_54

LANGUAGE: javascript
CODE:
```
console.ignoredYellowBox = [...]
```

----------------------------------------

TITLE: Flow Type Definition Updates
DESCRIPTION: Enhanced Flow type definitions for ViewPropTypes and TimePickerAndroid interfaces.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_5

LANGUAGE: flow
CODE:
```
// Updated ViewPropTypes Flow definitions
type ViewPropTypes = {
  // enhanced type definitions
};
```

----------------------------------------

TITLE: Configuring CMake Build for React Native Idle Callbacks Module
DESCRIPTION: Sets up CMake build configuration for React Native idle callbacks native module. Includes dependency specifications, compilation flags, and library linking. Requires CMake 3.13 or higher and React Native common directory setup.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/idlecallbacks/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
file(GLOB react_nativemodule_idlecallbacks_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_idlecallbacks OBJECT ${react_nativemodule_idlecallbacks_SRC})

target_include_directories(react_nativemodule_idlecallbacks PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_idlecallbacks
        react_codegen_rncore
        react_cxxreact
        react_renderer_runtimescheduler
)
target_compile_reactnative_options(react_nativemodule_idlecallbacks PRIVATE "ReactNative")
target_compile_options(react_nativemodule_idlecallbacks PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Token Fetching Error Message in Markdown
DESCRIPTION: An error message indicating that a request to fetch tokens is invalid. This may appear during authentication flows or API token requests.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthRequestIdTokenInvalidRequest.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# The token fetching request is invalid.
```

----------------------------------------

TITLE: Preserving SystemUiVisibility Flags for StatusBar on Android
DESCRIPTION: This fix prevents StatusBar from overwriting previously set SystemUiVisibility flags on Android.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_15

LANGUAGE: JavaScript
CODE:
```
Fix StatusBar overwriting previously set `SystemUiVisibility` flags
```

----------------------------------------

TITLE: Error Message for Incompatible Native Module Method Addition
DESCRIPTION: Example error message from the compatibility-check tool when detecting an incompatible addition of a required method.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-compatibility-check/README.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
NativeAnalytics: Object added required properties, which native will not provide
  -- logError
```

----------------------------------------

TITLE: Applying React Native Compile Options CMake
DESCRIPTION: Applies specific compile options defined by React Native's CMake infrastructure to the 'react_performance_timeline' target. The PRIVATE keyword ensures these options only affect the compilation of this target's source files.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/performance/timeline/CMakeLists.txt#_snippet_5

LANGUAGE: CMake
CODE:
```
target_compile_reactnative_options(react_performance_timeline PRIVATE "ReactNative")
```

----------------------------------------

TITLE: Configuring CallInvoker Interface Library in CMake
DESCRIPTION: Sets up a CMake interface library named 'callinvoker' with React Native specific compilation flags and include directories. Requires CMake 3.13 or higher and includes React Native common flags from cmake-utils.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/callinvoker/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(callinvoker INTERFACE)

target_include_directories(callinvoker INTERFACE .)
target_compile_reactnative_options(callinvoker INTERFACE)
target_compile_options(callinvoker INTERFACE -Wpedantic)
```

----------------------------------------

TITLE: Provider Token Invalid Error Message in Markdown
DESCRIPTION: Error message indicating that a provider's authentication token is invalid or has expired.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthRequestIdTokenInvalidResponse.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Provider's token is invalid.
```

----------------------------------------

TITLE: Configuring CMake Build for Google Logging Library
DESCRIPTION: Sets up CMake build configuration for glog library with specific source files, include directories, and compiler options. Configures the library as static and sets both private and public include paths for internal and external usage.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/glog/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(glog
        STATIC
        glog-0.3.5/src/demangle.cc
        glog-0.3.5/src/logging.cc
        glog-0.3.5/src/raw_logging.cc
        glog-0.3.5/src/signalhandler.cc
        glog-0.3.5/src/symbolize.cc
        glog-0.3.5/src/utilities.cc
        glog-0.3.5/src/vlog_is_on.cc
        )

# For private compilation, we include all the headers.
# config.h is also there.
target_include_directories(glog PRIVATE .)
# For consumer, we set the `exported` dir as the
# include folder.
target_include_directories(glog PUBLIC exported)

target_compile_reactnative_options(glog PRIVATE)

target_compile_options(glog PRIVATE
        -Wwrite-strings
        -Woverloaded-virtual
        -Wno-sign-compare
        -DNDEBUG
        -g
        -O2
        -DHAVE_PREAD=1
)
```

----------------------------------------

TITLE: Configuring SafeAreaView Component Build in React Native with CMake
DESCRIPTION: This CMake script defines the build configuration for the React Native SafeAreaView component. It creates a static library target named 'rrc_safeareaview', sets up include directories, links required dependencies, and applies compiler options specific to the React Native Fabric architecture.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/safeareaview/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_safeareaview_SRCS CONFIGURE_DEPENDS *.cpp)

add_library(
        rrc_safeareaview
        STATIC
        ${rrc_safeareaview_SRCS}
)

target_include_directories(rrc_safeareaview PUBLIC .)

target_link_libraries(
        rrc_safeareaview
        glog
        fbjni
        folly_runtime
        glog_init
        react_codegen_rncore
        react_debug
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_uimanager
        reactnativejni
        rrc_view
        yoga
)

target_compile_reactnative_options(rrc_safeareaview PRIVATE "Fabric")
target_compile_options(rrc_safeareaview PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring Include Directories for React Native Library in CMake
DESCRIPTION: Sets up include directories for the reactnative library by reusing the interface include directories from all component libraries. This ensures proper header resolution during compilation.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_7

LANGUAGE: CMake
CODE:
```
target_include_directories(reactnative
        PUBLIC
        $<TARGET_PROPERTY:bridgeless,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:bridgelessnativeviewconfig,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:callinvokerholder,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:fabricjni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:glog_init,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jserrorhandler,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsinspector,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsinspector_cdp,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsinspector_network,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsinspector_tracing,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsireact,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:mapbufferjni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_bridging,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_codegen_rncore,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_cxxreact,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_debug,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_devsupportjni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_featureflags,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_featureflagsjni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_nativemodule_core,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_nativemodule_defaults,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_nativemodule_dom,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_nativemodule_featureflags,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_nativemodule_idlecallbacks,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_nativemodule_microtasks,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_newarchdefaults,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_performance_timeline,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_animations,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_attributedstring,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_componentregistry,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_componentregistry,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_consistency,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_core,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_css,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_debug,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_dom,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_element,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_graphics,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_imagemanager,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_leakchecker,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_mapbuffer,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_mounting,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_observers_events,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_runtimescheduler,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_scheduler,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_telemetry,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_textlayoutmanager,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_uimanager,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_renderer_uimanager_consistency,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_utils,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:reactnativeblob,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:reactnativejni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:reactnativejni_common,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:reactperflogger,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rninstance,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_image,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_legacyviewmanagerinterop,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_modal,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_native,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_progressbar,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_root,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_safeareaview,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_scrollview,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_switch,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_text,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_textinput,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:rrc_view,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:runtimeexecutor,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:turbomodulejsijni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:uimanagerjni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:yoga,INTERFACE_INCLUDE_DIRECTORIES>
)
```

----------------------------------------

TITLE: Configuring CMake for React Native Android TextInput Component
DESCRIPTION: Sets up CMake configuration for building the React Native Android TextInput component. It defines source files, includes directories, specifies libraries, and sets compile options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/textinput/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_textinput_SRC CONFIGURE_DEPENDS *.cpp platform/android/react/renderer/components/androidtextinput/*.cpp)
add_library(rrc_textinput OBJECT ${rrc_textinput_SRC})

target_include_directories(rrc_textinput PUBLIC . ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/)

target_link_libraries(rrc_textinput
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_attributedstring
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_textlayoutmanager
        react_renderer_uimanager
        react_utils
        rrc_image
        rrc_text
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_textinput PRIVATE "Fabric")
target_compile_options(rrc_textinput PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring JNI Library Merge Glue in CMake for React Native
DESCRIPTION: Sets up the CMake project, includes necessary files, and defines the 'jni_lib_merge_glue' library. This library is essential for so-merging in React Native OSS, handling JNI_OnLoad function redefinition.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/first-party/jni-lib-merge/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(jni_lib_merge_glue OBJECT jni_lib_merge.c)

add_definitions(-DJNI_MERGE_PRINT_ONLOAD)

target_include_directories(jni_lib_merge_glue PUBLIC jni-lib-merge)

target_link_libraries(jni_lib_merge_glue PUBLIC log)
target_compile_options(jni_lib_merge_glue PRIVATE -frtti -fexceptions)
```

----------------------------------------

TITLE: Configuring Babel for React Native 0.57
DESCRIPTION: JSON configuration required for updating the Babel preset in React Native 0.57, which now uses metro-react-native-babel-preset instead of babel-preset-react-native.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_25

LANGUAGE: JSON
CODE:
```
  {
    "presets": ["module:metro-react-native-babel-preset"]
  }
```

----------------------------------------

TITLE: Configuring Library Dependencies
DESCRIPTION: Sets up the library dependencies for JSExecutor, including the unwinder library and React Native components.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: cmake
CODE:
```
target_link_libraries(jscexecutor
        ${LIB_UNWIND}
        jscruntime
        jsi
        reactnative)
target_compile_reactnative_options(jscexecutor PRIVATE)
```

----------------------------------------

TITLE: Configuring Yoga Core Library Sources
DESCRIPTION: Gathers all C++ source files for the Yoga Core library and adds them to a static library target.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/yoga/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: CMake
CODE:
```
file(GLOB SOURCES CONFIGURE_DEPENDS
    ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/**/*.cpp)

add_library(yogacore STATIC ${SOURCES})
```

----------------------------------------

TITLE: Configuring CMake Build for React Native View Component
DESCRIPTION: This CMake script configures the build for the React Native view component. It sets minimum required CMake version, enables verbose makefiles, includes React Native flags, collects source files, and defines an object library with its include paths and dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/view/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_view_SRC CONFIGURE_DEPENDS
        *.cpp
        platform/android/react/renderer/components/view/*.cpp)

add_library(rrc_view OBJECT ${rrc_view_SRC})

target_include_directories(rrc_view
        PUBLIC
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
)

target_link_libraries(rrc_view
        folly_runtime
        glog
        glog_init
        jsi
        logger
        react_debug
        react_renderer_core
        react_renderer_css
        react_renderer_debug
        react_renderer_graphics
        yoga)
target_compile_reactnative_options(rrc_view PRIVATE "Fabric")
target_compile_options(rrc_view PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Creating JSExecutor Library Target
DESCRIPTION: Creates and configures the JSExecutor library target by gathering source files and setting include directories.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: cmake
CODE:
```
file(GLOB jscexecutor_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
add_library(jscexecutor OBJECT ${jscexecutor_SRC})

target_include_directories(jscexecutor PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_merge_so(jscexecutor)
```

----------------------------------------

TITLE: Configuring Fantom Tester Executable
DESCRIPTION: Defines the 'fantom_tester' executable, specifies its source files, links it with the Yoga library, and sets compiler options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/tester/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: CMake
CODE:
```
file(GLOB SOURCES "src/*.cpp" "src/*.h")
add_executable(fantom_tester ${SOURCES})

target_link_libraries(fantom_tester PUBLIC yogacore)

target_compile_options(fantom_tester
  PRIVATE
    -Wall
    -Werror
    -fexceptions
    -frtti
    -std=c++20)
```

----------------------------------------

TITLE: Setting Up CMake Environment for MapBuffer JNI Library in React Native
DESCRIPTION: This CMake configuration sets up the build process for the MapBuffer JNI library in React Native. It sets minimum required CMake version, enables verbose makefile output, includes utility files for SO merging and React Native flags, configures source files, include directories, and links necessary dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/mapbuffer/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB mapbuffer_SRC CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/react/common/mapbuffer/*.cpp)

add_library(mapbufferjni OBJECT ${mapbuffer_SRC})

target_include_directories(mapbufferjni
        PUBLIC
          ${CMAKE_CURRENT_SOURCE_DIR}
        PRIVATE
          ${CMAKE_CURRENT_SOURCE_DIR}/react/common/mapbuffer/
)

target_merge_so(mapbufferjni)

target_link_libraries(mapbufferjni
        fbjni
        folly_runtime
        glog
        glog_init
        react_debug
        react_renderer_mapbuffer
        react_utils
        yoga
)

target_compile_reactnative_options(mapbufferjni PRIVATE "Fabric")
```

----------------------------------------

TITLE: Configuring React Timing Interface Library in CMake
DESCRIPTION: Sets up a CMake interface library for React timing functionality. The configuration includes setting minimum CMake version, enabling verbose output, including React Native flags, and configuring the interface library with appropriate include directories and compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/timing/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(react_timing INTERFACE)

target_include_directories(react_timing INTERFACE ${REACT_COMMON_DIR})
target_compile_reactnative_options(react_timing INTERFACE)
target_compile_options(react_timing INTERFACE -Wpedantic)
```

----------------------------------------

TITLE: Configuring and Building fmt Library with CMake in React Native
DESCRIPTION: Sets up the CMake build for the fmt static library by specifying minimum CMake version, enabling verbose output, including React Native flags, and configuring the build target with appropriate includes and compile options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/fmt/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(fmt STATIC src/format.cc)

target_include_directories(fmt PUBLIC include)
target_compile_reactnative_options(fmt PRIVATE)
```

----------------------------------------

TITLE: Configuring CMake for React Native Root
DESCRIPTION: Sets up the CMake environment, defines the 'rrc_root' library target, and configures its compilation and linking options. It includes necessary React Native directories and libraries, and sets specific compiler flags.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/root/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_root_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_root OBJECT ${rrc_root_SRC})

target_include_directories(rrc_root PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_root
        folly_runtime
        glog
        glog_init
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_root PRIVATE "Fabric")
target_compile_options(rrc_root PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Fixing Location-related Exceptions on Android
DESCRIPTION: This code addresses issues with the Location API that were leading to exceptions in two specific cases on Android.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_17

LANGUAGE: JavaScript
CODE:
```
Fix issue with Location that led to exceptions in two cases
```

----------------------------------------

TITLE: Configuring CMake for React Native JSInspector CDP Module
DESCRIPTION: Defines the build configuration for the JSInspector CDP (Chrome DevTools Protocol) module. It sets the minimum CMake version, enables verbose makefile output, includes SoMerging utilities, and configures compiler options including C++20 standard and warning flags.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsinspector-modern/cdp/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_compile_options(
        -fexceptions
        -std=c++20
        -Wall
        -Wpedantic)
```

----------------------------------------

TITLE: Configuring CMake for Unimplemented View Component in React Native
DESCRIPTION: This snippet sets up the CMake configuration for building the unimplemented view component in React Native. It defines the minimum CMake version, includes necessary utilities, creates a static library from source files, sets include directories, links required libraries, and applies compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/unimplementedview/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_unimplementedview_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_unimplementedview STATIC ${rrc_unimplementedview_SRC})

target_include_directories(rrc_unimplementedview PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_unimplementedview
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_unimplementedview PRIVATE "Fabric")
target_compile_options(rrc_unimplementedview PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring JSC Tooling Shared Library in CMake for React Native Android
DESCRIPTION: This CMake snippet creates a shared library 'jsctooling' that merges JSC-related libraries for React Native Android. It sets up the library, links dependencies, configures include directories, and applies React Native-specific compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jsctooling/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(jsctooling
        SHARED
        $<TARGET_OBJECTS:jni_lib_merge_glue>
        $<TARGET_OBJECTS:jscinstance>
        $<TARGET_OBJECTS:jscruntime>
        $<TARGET_OBJECTS:jscexecutor>
)
target_merge_so(jsctooling)
target_link_libraries(jsctooling
        PUBLIC
        reactnative
        jsc
)
target_include_directories(jsctooling
        PUBLIC
        $<TARGET_PROPERTY:jscexecutor,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jscruntime,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jscinstance,INTERFACE_INCLUDE_DIRECTORIES>
)
target_compile_reactnative_options(jsctooling PRIVATE)
```

----------------------------------------

TITLE: Configuring CMake Build for React Native DevSupport JNI Library
DESCRIPTION: Sets up CMake build configuration for the React Native DevSupport JNI library. Includes required dependencies, configures source files, and specifies library linking requirements. The build process includes merging shared objects and setting up compilation options specific to React Native.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/devsupport/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_devsupportjni_SRC CONFIGURE_DEPENDS *.cpp)

add_library(react_devsupportjni OBJECT ${react_devsupportjni_SRC})

target_merge_so(react_devsupportjni)

target_include_directories(react_devsupportjni PUBLIC .)

target_link_libraries(react_devsupportjni
        fbjni
        jsinspector)

target_compile_reactnative_options(react_devsupportjni PRIVATE "ReactNative")
```

----------------------------------------

TITLE: Implementing Systrace-based Telemetry for Hermes GC
DESCRIPTION: Addition of Systrace-based telemetry to the Hermes Garbage Collector for improved performance monitoring.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_57

LANGUAGE: C++
CODE:
```
05e862d48d363a8af765b2f0283569419dbd2e5c
```

----------------------------------------

TITLE: Setting up CMake build configuration for React Native Android
DESCRIPTION: Core CMake configuration that sets up the project, enables LTO support if available, and configures ccache. Defines basic project parameters and build options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

project(ReactAndroid)

include(CheckIPOSupported)
check_ipo_supported(RESULT IPO_SUPPORT)
if (IPO_SUPPORT)
  message(STATUS "LTO support is enabled")
  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
```

----------------------------------------

TITLE: Conditional Symbol Usage for SystraceSection
DESCRIPTION: Implementation of different symbols for SystraceSection based on the WITH_FBYSTRACE flag to optimize tracing.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_59

LANGUAGE: C++
CODE:
```
03956c4ecfda381396336f725ea1c12d913df17d
```

----------------------------------------

TITLE: Running Code Analysis Bot for Pull Request Linting in React Native
DESCRIPTION: This command shows how to run the Code Analysis Bot to perform linting on a GitHub pull request for the React Native project. It requires a GitHub token and the PR number.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-bots/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
GITHUB_TOKEN=[ENV_ABOVE] GITHUB_PR_NUMBER=1234 yarn lint-ci
```

----------------------------------------

TITLE: Configuring CMake Build for Glog Initialization
DESCRIPTION: Sets up CMake build configuration for glog initialization library. Includes compiler options for exceptions and frame pointers, links required dependencies, and sets up target include directories.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/first-party/fbgloginit/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_compile_options(-fexceptions -fno-omit-frame-pointer)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(glog_init OBJECT glog_init.cpp)

target_include_directories(glog_init PUBLIC .)

target_link_libraries(glog_init log glog)
target_compile_reactnative_options(glog_init PRIVATE)
```

----------------------------------------

TITLE: Resolving Dev Settings Menu Display Issue on Android
DESCRIPTION: This fix ensures the dev settings menu appears correctly for certain codebases where namespace conflicts were preventing its display.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_13

LANGUAGE: JavaScript
CODE:
```
Fix dev settings menu not appearing for certain codebases due to namespace conflicts
```

----------------------------------------

TITLE: Unifying Systrace Native Hook Argument Passing
DESCRIPTION: Standardization of argument passing for Systrace native hooks to improve consistency and maintainability.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_58

LANGUAGE: C++
CODE:
```
52e3ae9063705bac53bad99ffe23976c29c8f1b2
```

----------------------------------------

TITLE: Fixing TextTransform with Other Text Styles on Android
DESCRIPTION: This code snippet fixes an issue where textTransform was not working correctly when used with other text styles on Android.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_6

LANGUAGE: JavaScript
CODE:
```
Fix textTransform when used with other text styles on Android (#22670)
```

----------------------------------------

TITLE: Configuring JSInspector Network Module Build in React Native with CMake
DESCRIPTION: This CMake script configures the build for the JSInspector Network module in React Native. It sets minimum CMake version, compilation options for C++20, glob patterns for source files, and links against folly_runtime and jsinspector_cdp dependencies. The script also enables verbose output during the build process.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsinspector-modern/network/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_compile_options(
        -fexceptions
        -std=c++20
        -Wall
        -Wpedantic)

file(GLOB jsinspector_network_SRC CONFIGURE_DEPENDS *.cpp)

add_library(jsinspector_network OBJECT ${jsinspector_network_SRC})
target_merge_so(jsinspector_network)

target_include_directories(jsinspector_network PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector_network
        folly_runtime
        jsinspector_cdp
)
```

----------------------------------------

TITLE: Configuring JSC Instance Library in CMake for React Native Android
DESCRIPTION: This CMake script configures the build for the 'jscinstance' library in React Native. It includes utility functions for SO merging, sets up source files, includes directories, and specifies dependencies like jscruntime, fbjni, and reactnative. The script also applies React Native specific compilation options and sets visibility to hidden.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/runtime/jsc/jni/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)


include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB jscinstance_SRC CONFIGURE_DEPENDS "*.cpp")

add_library(jscinstance OBJECT ${jscinstance_SRC})

target_include_directories(jscinstance PUBLIC .)
target_merge_so(jscinstance)

target_link_libraries(jscinstance
        jscruntime
        fbjni
        reactnative
)
target_compile_reactnative_options(jscinstance PRIVATE)
target_compile_options(jscinstance PRIVATE -fvisibility=hidden)
```

----------------------------------------

TITLE: Linking Android-specific Dependencies
DESCRIPTION: Conditionally links the Android log library when building for Android platforms.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/yoga/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: CMake
CODE:
```
if (ANDROID)
    target_link_libraries(yogacore log)
endif()
```

----------------------------------------

TITLE: Setting Folly Compilation Flags in CMake
DESCRIPTION: Defines a set of compilation flags for the Folly library to configure its behavior for mobile environments. These flags disable certain features and enable others appropriate for Android/mobile platforms.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/folly/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
SET(folly_FLAGS
        -DFOLLY_NO_CONFIG=1
        -DFOLLY_HAVE_CLOCK_GETTIME=1
        -DFOLLY_USE_LIBCPP=1
        -DFOLLY_CFG_NO_COROUTINES=1
        -DFOLLY_MOBILE=1
        -DFOLLY_HAVE_RECVMMSG=1
        -DFOLLY_HAVE_PTHREAD=1
        # If APP_PLATFORM in Application.mk targets android-23 above, please comment
        # the following line. NDK uses GNU style stderror_r() after API 23.
        -DFOLLY_HAVE_XSI_STRERROR_R=1
        )
```

----------------------------------------

TITLE: Configuring reactnativejni Library for React Native Android
DESCRIPTION: Defines the main reactnativejni library with all React Native Android JNI implementation files. Includes configuration for dependencies, linking with other libraries, and compile options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jni/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: CMake
CODE:
```
include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_library(
        reactnativejni
        OBJECT
          CatalystInstanceImpl.cpp
          InspectorNetworkRequestListener.cpp
          JExecutor.cpp
          JInspector.cpp
          JMessageQueueThread.cpp
          JReactCxxErrorHandler.cpp
          JReactSoftExceptionLogger.cpp
          JRuntimeExecutor.cpp
          JRuntimeScheduler.cpp
          JSLoader.cpp
          JSLogging.cpp
          JavaModuleWrapper.cpp
          JniJSModulesUnbundle.cpp
          MethodInvoker.cpp
          ModuleRegistryBuilder.cpp
          OnLoad.cpp
          ReactInstanceManagerInspectorTarget.cpp
          SafeReleaseJniRef.cpp
)
target_merge_so(reactnativejni)

# TODO This should not be ../../
target_include_directories(reactnativejni PUBLIC ../../)

target_link_libraries(reactnativejni
        android
        callinvokerholder
        fbjni
        folly_runtime
        glog_init
        logger
        react_cxxreact
        react_renderer_runtimescheduler
        reactnativejni_common
        runtimeexecutor
        yoga
        )
target_compile_reactnative_options(reactnativejni PRIVATE)
target_compile_options(reactnativejni PRIVATE -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: Configuring and Building the Bridgeless Hermes Library in React Native with CMake
DESCRIPTION: This CMake script configures the bridgelesshermes library by gathering source files, setting up include directories, and linking required dependencies. It applies React Native-specific compilation options and enables the Hermes debugger in debug builds.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/runtime/hermes/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE bridgeless_hermes_SRC CONFIGURE_DEPENDS *.cpp)
add_library(
        bridgelesshermes
        OBJECT
        ${bridgeless_hermes_SRC}
)
target_include_directories(bridgelesshermes PUBLIC .)

target_link_libraries(bridgelesshermes
        hermes-engine::libhermes
        hermes_executor_common
        hermes_inspector_modern
        jsi
        jsinspector
        reactnative
)

target_compile_reactnative_options(bridgelesshermes PRIVATE "Fabric")
if(${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(
                bridgelesshermes
                PRIVATE
                -DHERMES_ENABLE_DEBUGGER=1
        )
endif()
```

----------------------------------------

TITLE: Configuring JavaScript Error Handler Library in CMake for React Native
DESCRIPTION: This CMake script sets up the build configuration for the JavaScript error handler library in React Native. It defines the source files, includes necessary directories, links required libraries, and sets compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jserrorhandler/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB js_error_handler_SRC CONFIGURE_DEPENDS *.cpp)
add_library(
        jserrorhandler
        OBJECT
        ${js_error_handler_SRC}
)
target_include_directories(jserrorhandler PUBLIC .)
target_link_libraries(jserrorhandler
        jsi
        folly_runtime
        mapbufferjni
        react_featureflags
)
target_compile_reactnative_options(jserrorhandler PRIVATE)
```

----------------------------------------

TITLE: Defining Documentation Structure in Markdown
DESCRIPTION: Illustrates the hierarchical structure of documentation files and directories within the React Native project. This structure supports both exploratory and goal-based documentation use cases.
SOURCE: https://github.com/facebook/react-native/blob/main/__docs__/GUIDELINES.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
- `<root>/__docs__/README.md` (with links to subsystems 1, 2, etc.)
  - `Subsystem 1/__docs__/README.md` (with links to root and subsystems 1.1,
    1.2, etc.)
    - `Subsystem 1.1/__docs__/README.md` (with links to subsystem 1 and
      subsystems 1.1.1, 1.1.2, etc.)
    - `Subsystem 1.2/__docs__/README.md`
  - `Subsystem 2/__docs__/README.md`
```

----------------------------------------

TITLE: Initializing CMake Project for Yoga Core
DESCRIPTION: Sets up the CMake project for Yoga Core, including minimum CMake version, project name, and verbose output.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/yoga/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13...3.26)
project(yogacore)
set(CMAKE_VERBOSE_MAKEFILE on)
```

----------------------------------------

TITLE: Configuring React Native Native Module Core Library in CMake
DESCRIPTION: This CMake script configures the build for the react_nativemodule_core library. It sets up source files, include directories, and links necessary dependencies for the React Native project.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/core/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_core_SRC CONFIGURE_DEPENDS
        ReactCommon/*.cpp
        platform/android/ReactCommon/*.cpp)
add_library(react_nativemodule_core
        OBJECT
        ${react_nativemodule_core_SRC})

target_include_directories(react_nativemodule_core
        PUBLIC
          ${CMAKE_CURRENT_SOURCE_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
        )

target_link_libraries(react_nativemodule_core
        fbjni
        folly_runtime
        glog
        jsi
        react_bridging
        react_debug
        react_utils
        react_featureflags
        reactperflogger
        reactnativejni)
target_compile_reactnative_options(react_nativemodule_core PRIVATE "ReactNative")
target_compile_options(react_nativemodule_core PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring Hermes Instance JNI Library Build for React Native with CMake
DESCRIPTION: This CMake configuration sets up the build process for the Hermes Instance JNI library, which provides JNI bindings for the Hermes JavaScript engine in React Native. It identifies source files, includes required dependencies, and configures the library target with appropriate compilation flags and linked libraries.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/runtime/hermes/jni/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE hermes_instance_jni_SRC CONFIGURE_DEPENDS *.cpp)

add_library(hermesinstancejni
        OBJECT
        ${hermes_instance_jni_SRC}
)
target_include_directories(hermesinstancejni PRIVATE .)
target_merge_so(hermesinstancejni)

target_link_libraries(hermesinstancejni
        hermes-engine::libhermes
        jsitooling
        fbjni
        bridgelesshermes
        reactnative
)

target_compile_reactnative_options(hermesinstancejni PRIVATE)
target_compile_options(hermesinstancejni PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)
```

----------------------------------------

TITLE: Adding Object Library CMake
DESCRIPTION: Defines a CMake library target named 'react_performance_timeline'. The OBJECT type means this target will produce object files (.o or .obj) but not a final linked library or executable. These object files can then be linked into other targets.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/performance/timeline/CMakeLists.txt#_snippet_4

LANGUAGE: CMake
CODE:
```
add_library(react_performance_timeline OBJECT ${react_performance_timeline_SRC})
```

----------------------------------------

TITLE: Configuring CMake for React Native DevTools Runtime Settings
DESCRIPTION: Sets up CMake configuration for building the React Native DevTools runtime settings library. It includes necessary directories, links dependencies, and sets compilation flags.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/devtoolsruntimesettings/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(react_devtoolsruntimesettingscxx INTERFACE)

target_include_directories(react_devtoolsruntimesettingscxx INTERFACE .)

target_link_libraries(react_devtoolsruntimesettingscxx jsi)
target_compile_reactnative_options(react_devtoolsruntimesettingscxx PRIVATE)
target_compile_options(react_devtoolsruntimesettingscxx PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring CMake for React Native Renderer Leak Checker
DESCRIPTION: Sets up a CMake build configuration for the React Native renderer leak checker library. It defines minimum CMake version, includes common flags, creates a static library from all CPP files in the directory, and configures dependencies and compiler options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/leakchecker/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_leakchecker_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_leakchecker STATIC ${react_renderer_leakchecker_SRC})

target_include_directories(react_renderer_leakchecker PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_leakchecker
        glog
        react_renderer_core
        runtimeexecutor)
target_compile_reactnative_options(react_renderer_leakchecker PRIVATE "Fabric")
target_compile_options(react_renderer_leakchecker PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring JSI React Library Build in CMake
DESCRIPTION: Defines CMake build configuration for the JSI React library. Sets up minimum CMake version, creates library target with source files, configures include directories, and specifies library dependencies. Includes performance optimization flags and React Native specific compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsiexecutor/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(jsireact
        OBJECT
        jsireact/JSIExecutor.cpp
        jsireact/JSINativeModules.cpp)

target_include_directories(jsireact PUBLIC .)

target_link_libraries(jsireact
        react_cxxreact
        reactperflogger
        folly_runtime
        glog
        jsi)

target_compile_reactnative_options(jsireact PRIVATE)
target_compile_options(jsireact PRIVATE -O3)
```

----------------------------------------

TITLE: Configuring React Native Renderer Graphics Library in CMake
DESCRIPTION: This CMake script configures and builds the react_renderer_graphics library. It sets minimum CMake version, includes dependencies, compiles source files, and links against required libraries like glog, fbjni, and folly_runtime. The library is part of React Native's Fabric architecture.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/graphics/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_graphics_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_graphics OBJECT ${react_renderer_graphics_SRC})

target_include_directories(react_renderer_graphics
        PUBLIC
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
        )

target_link_libraries(react_renderer_graphics
        glog
        fbjni
        folly_runtime
        react_debug
        react_utils
)
target_compile_reactnative_options(react_renderer_graphics PRIVATE "Fabric")
target_compile_options(react_renderer_graphics PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Running Release Script Commands in Node.js
DESCRIPTION: Demonstrates how to run the release script commands using Node.js. It shows the general syntax for executing these scripts and obtaining help information.
SOURCE: https://github.com/facebook/react-native/blob/main/scripts/releases/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
node <command> --help
```

----------------------------------------

TITLE: Cleaning Up RNTester iOS Build Files
DESCRIPTION: Commands to clean up generated files and folders for a clean installation of RNTester on iOS.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/README.md#2025-04-22_snippet_2

LANGUAGE: sh
CODE:
```
cd packages/rn-tester
yarn clean-ios
```

----------------------------------------

TITLE: HTML iframe Example with Disabled Attribution Reporting Permission
DESCRIPTION: Example of how a parent frame can disable the attribution-reporting permission in a child iframe using the allow attribute with a 'none' value.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/arPermissionPolicyDisabled.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<iframe src="…" allow="attribution-reporting 'none'">
```

----------------------------------------

TITLE: Setting Installation Rules
DESCRIPTION: Configures the installation rules for JSI header files, excluding test files from installation.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsi/jsi/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: cmake
CODE:
```
install(DIRECTORY "${PROJECT_SOURCE_DIR}/API/jsi/" DESTINATION include
  FILES_MATCHING PATTERN "*.h"
  PATTERN "test" EXCLUDE)
```

----------------------------------------

TITLE: Configuring UIManager Consistency Module Build in CMake
DESCRIPTION: Sets up CMake configuration for building the React Native UIManager consistency module. It defines the library target, includes necessary directories, links required dependencies, and sets specific compiler options for the Fabric renderer component.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/uimanager/consistency/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_uimanager_consistency_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_uimanager_consistency OBJECT ${react_renderer_uimanager_consistency_SRC})

target_include_directories(react_renderer_uimanager_consistency PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_uimanager_consistency
        glog
        rrc_root
        react_renderer_consistency
        react_renderer_mounting)
target_compile_reactnative_options(react_renderer_uimanager_consistency PRIVATE "Fabric")
target_compile_options(react_renderer_uimanager_consistency PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Defining React Native Shared Library with Component Objects in CMake
DESCRIPTION: Creates a shared library named 'reactnative' that combines object files from various React Native components. This approach reduces the number of .so files that need to be shipped in the final library, as noted in the file's comment.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: CMake
CODE:
```
add_library(reactnative
        SHARED
          $<TARGET_OBJECTS:bridgeless>
          $<TARGET_OBJECTS:bridgelessnativeviewconfig>
          $<TARGET_OBJECTS:callinvokerholder>
          $<TARGET_OBJECTS:fabricjni>
          $<TARGET_OBJECTS:glog_init>
          $<TARGET_OBJECTS:jni_lib_merge_glue>
          $<TARGET_OBJECTS:jserrorhandler>
          $<TARGET_OBJECTS:jsinspector>
          $<TARGET_OBJECTS:jsitooling>
          $<TARGET_OBJECTS:jsinspector_cdp>
          $<TARGET_OBJECTS:jsinspector_network>
          $<TARGET_OBJECTS:jsinspector_tracing>
          $<TARGET_OBJECTS:jsireact>
          $<TARGET_OBJECTS:logger>
          $<TARGET_OBJECTS:mapbufferjni>
          $<TARGET_OBJECTS:oscompat>
          $<TARGET_OBJECTS:react_bridging>
          $<TARGET_OBJECTS:react_codegen_rncore>
          $<TARGET_OBJECTS:react_cxxreact>
          $<TARGET_OBJECTS:react_debug>
          $<TARGET_OBJECTS:react_devsupportjni>
          $<TARGET_OBJECTS:react_featureflags>
          $<TARGET_OBJECTS:react_featureflagsjni>
          $<TARGET_OBJECTS:react_nativemodule_core>
          $<TARGET_OBJECTS:react_nativemodule_defaults>
          $<TARGET_OBJECTS:react_nativemodule_dom>
          $<TARGET_OBJECTS:react_nativemodule_featureflags>
          $<TARGET_OBJECTS:react_nativemodule_idlecallbacks>
          $<TARGET_OBJECTS:react_nativemodule_microtasks>
          $<TARGET_OBJECTS:react_newarchdefaults>
          $<TARGET_OBJECTS:react_performance_timeline>
          $<TARGET_OBJECTS:react_renderer_animations>
          $<TARGET_OBJECTS:react_renderer_attributedstring>
          $<TARGET_OBJECTS:react_renderer_componentregistry>
          $<TARGET_OBJECTS:react_renderer_consistency>
          $<TARGET_OBJECTS:react_renderer_core>
          $<TARGET_OBJECTS:react_renderer_debug>
          $<TARGET_OBJECTS:react_renderer_dom>
          $<TARGET_OBJECTS:react_renderer_element>
          $<TARGET_OBJECTS:react_renderer_graphics>
          $<TARGET_OBJECTS:react_renderer_imagemanager>
          $<TARGET_OBJECTS:react_renderer_leakchecker>
          $<TARGET_OBJECTS:react_renderer_mapbuffer>
          $<TARGET_OBJECTS:react_renderer_mounting>
          $<TARGET_OBJECTS:react_renderer_observers_events>
          $<TARGET_OBJECTS:react_renderer_runtimescheduler>
          $<TARGET_OBJECTS:react_renderer_scheduler>
          $<TARGET_OBJECTS:react_renderer_telemetry>
          $<TARGET_OBJECTS:react_renderer_textlayoutmanager>
          $<TARGET_OBJECTS:react_renderer_uimanager>
          $<TARGET_OBJECTS:react_renderer_uimanager_consistency>
          $<TARGET_OBJECTS:react_utils>
          $<TARGET_OBJECTS:reactnativeblob>
          $<TARGET_OBJECTS:reactnativejni>
          $<TARGET_OBJECTS:reactnativejni_common>
          $<TARGET_OBJECTS:reactperflogger>
          $<TARGET_OBJECTS:rninstance>
          $<TARGET_OBJECTS:rrc_image>
          $<TARGET_OBJECTS:rrc_legacyviewmanagerinterop>
          $<TARGET_OBJECTS:rrc_modal>
          $<TARGET_OBJECTS:rrc_native>
          $<TARGET_OBJECTS:rrc_progressbar>
          $<TARGET_OBJECTS:rrc_root>
          $<TARGET_OBJECTS:rrc_safeareaview>
          $<TARGET_OBJECTS:rrc_scrollview>
          $<TARGET_OBJECTS:rrc_switch>
          $<TARGET_OBJECTS:rrc_text>
          $<TARGET_OBJECTS:rrc_textinput>
          $<TARGET_OBJECTS:rrc_view>
          $<TARGET_OBJECTS:runtimeexecutor>
          $<TARGET_OBJECTS:turbomodulejsijni>
          $<TARGET_OBJECTS:uimanagerjni>
          $<TARGET_OBJECTS:yoga>
)
```

----------------------------------------

TITLE: Including React Native CMake Flags CMake
DESCRIPTION: Includes a CMake script located in the common React Native directory that likely defines standard build flags, macros, or functions used across the project. Depends on the REACT_COMMON_DIR variable.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/performance/timeline/CMakeLists.txt#_snippet_2

LANGUAGE: CMake
CODE:
```
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
```

----------------------------------------

TITLE: Configuring FastFloat Interface Library in CMake
DESCRIPTION: Creates and configures a fast_float interface library with React Native compilation options. Sets minimum CMake version, enables verbose makefile output, and configures include directories.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/fast_float/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(fast_float INTERFACE)

target_include_directories(fast_float INTERFACE include)
target_compile_reactnative_options(fast_float INTERFACE)
```

----------------------------------------

TITLE: Configuring DOM Renderer Library in CMake for React Native
DESCRIPTION: This CMake script configures the build process for the React Native DOM renderer. It sets up the module as an object library, includes necessary directories, links required dependencies, and applies specific compiler options and flags.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/dom/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_dom_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_dom OBJECT ${react_renderer_dom_SRC})

target_include_directories(react_renderer_dom PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_dom
        react_renderer_core
        react_renderer_graphics
        rrc_root
        rrc_text)
target_compile_reactnative_options(react_renderer_dom PRIVATE "Fabric")
target_compile_options(react_renderer_dom PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring and Building JSI Library with CMake
DESCRIPTION: CMake configuration that builds the JSI (JavaScript Interface) shared library. It sets minimum CMake version, includes React Native flags, collects source files, and configures compilation options with dependencies on folly_runtime and glog libraries.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsi/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)


file(GLOB jsi_SRC CONFIGURE_DEPENDS jsi/*.cpp)
add_library(jsi SHARED ${jsi_SRC})

target_include_directories(jsi PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_link_libraries(jsi
        folly_runtime
        glog)

target_compile_reactnative_options(jsi PRIVATE "ReactNative")
target_compile_options(jsi PRIVATE -O3 -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: Configuring JSC Runtime Library Build in CMake
DESCRIPTION: Configures the build process for the JSC Runtime library. Sets up include directories, links required dependencies like jsc, jsi, and reactnative, and configures compilation options including optimization flags. Includes special handling for Debug/Release builds and React Native specific compilation flags.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsc/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_library(jscruntime
        OBJECT
        JSCRuntime.h
        JSCRuntime.cpp)

target_include_directories(jscruntime PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_merge_so(jscruntime)

target_link_libraries(jscruntime
        jsc
        jsi
        reactnative)

if(NOT ${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(jscruntime PRIVATE -DNDEBUG)
endif()

target_compile_reactnative_options(jscruntime PRIVATE "ReactNative")
target_compile_options(jscruntime PRIVATE -O3 -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: Configuring Fantom Tests via Pragmas (JSDoc)
DESCRIPTION: This JSDoc comment block illustrates how to configure Fantom test execution using pragmas. The @fantom_flags pragma sets specific React Native feature flags (like jsOnlyTestFlag to true), while @fantom_mode sets the bundle compilation mode (like opt for optimized Hermes bytecode). These pragmas allow customization of the test environment and execution characteristics directly within the test file's header.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/__docs__/README.md#_snippet_2

LANGUAGE: JSDoc
CODE:
```
/**
 * @fantom_flags jsOnlyTestFlag:true
 * @fantom_mode opt
 */
```

----------------------------------------

TITLE: Calling target_merge_so for React Native Library in CMake
DESCRIPTION: Invokes the target_merge_so function on the reactnative library, which likely handles special merging operations for shared objects on Android.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_4

LANGUAGE: CMake
CODE:
```
target_merge_so(reactnative)
```

----------------------------------------

TITLE: Configuring CMake for React Native Feature Flags Module
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native Feature Flags native module. It defines the minimum CMake version, sets verbose output, includes common flags, compiles source files, and sets up include directories and library dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/featureflags/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_featureflags_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_featureflags OBJECT ${react_nativemodule_featureflags_SRC})

target_include_directories(react_nativemodule_featureflags PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_featureflags
        react_codegen_rncore
        react_cxxreact
        react_featureflags
)
target_compile_reactnative_options(react_nativemodule_featureflags PRIVATE "ReactNative")
target_compile_options(react_nativemodule_featureflags PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring Yoga CMake Build Settings for React Native
DESCRIPTION: This CMake script sets up the build configuration for Yoga in React Native. It enforces Release mode for all builds to optimize performance, even in debug builds. The script sets verbose output and adds the yoga subdirectory to the build process.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

# Yoga by default does not enable optimizations in debug builds. Enable -O2
# for all builds in RN for faster debug app performance (at the cost of not
# being able to debug inside Yoga)
set(CMAKE_BUILD_TYPE Release)

add_subdirectory(yoga)
```

----------------------------------------

TITLE: Error Message in Markdown
DESCRIPTION: Simple error message header indicating that a provider's accounts list has validation issues
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthRequestAccountsInvalidResponse.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Provider's accounts list is invalid.
```

----------------------------------------

TITLE: Setting up OSSLibraryExampleSpec Codegen Library in React Native with CMake
DESCRIPTION: Configures CMake to build the OSSLibraryExampleSpec component library for React Native. Defines build settings including compiler flags for C++20, exception handling, and RTTI support. Links against fbjni, jsi, and reactnative libraries, which are essential dependencies for React Native components.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-test-library/android/src/main/jni/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

file(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/OSSLibraryExampleSpec/*.cpp)

add_library(
  react_codegen_OSSLibraryExampleSpec
  OBJECT
  ${react_codegen_SRCS}
)

target_include_directories(react_codegen_OSSLibraryExampleSpec PUBLIC . react/renderer/components/OSSLibraryExampleSpec)

target_link_libraries(
  react_codegen_OSSLibraryExampleSpec
  fbjni
  jsi
  reactnative
)

target_compile_options(
  react_codegen_OSSLibraryExampleSpec
  PRIVATE
  -DLOG_TAG=\"ReactNative\"
  -fexceptions
  -frtti
  -std=c++20
  -Wall
)
```

----------------------------------------

TITLE: Configuring CMake for React Native Runtime Scheduler Library
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native Runtime Scheduler library. It defines the minimum CMake version, includes utility files, specifies source files, and configures the library with its dependencies and compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/runtimescheduler/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_runtimescheduler_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_runtimescheduler STATIC ${react_renderer_runtimescheduler_SRC})

target_include_directories(react_renderer_runtimescheduler PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_runtimescheduler
        callinvoker
        jsi
        react_debug
        react_performance_timeline
        react_renderer_consistency
        react_renderer_debug
        react_timing
        react_utils
        react_featureflags
        runtimeexecutor
        jsinspector_tracing)
target_compile_reactnative_options(react_renderer_runtimescheduler PRIVATE "Fabric")
target_compile_options(react_renderer_runtimescheduler PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Native DOM Module Library in CMake
DESCRIPTION: Sets up the CMake configuration for building the React Native DOM module library. It defines the library target, includes necessary files, sets compiler flags, and specifies dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/dom/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_dom_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_dom
        OBJECT
            ${react_nativemodule_dom_SRC}
            $<TARGET_OBJECTS:react_codegen_rncore>
)

target_include_directories(react_nativemodule_dom PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_dom
        rrc_root
        react_codegen_rncore
        react_cxxreact
        react_renderer_dom
        react_renderer_uimanager
)
target_compile_reactnative_options(react_nativemodule_dom PRIVATE "ReactNative")
target_compile_options(react_nativemodule_dom PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring Compiler-Specific Flags
DESCRIPTION: Sets compiler-specific flags for different compilers (Clang, GNU, MSVC) to handle warnings and error handling appropriately.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsi/jsi/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: cmake
CODE:
```
set(jsi_compile_flags "")
if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" OR
    "${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
  list(APPEND jsi_compile_flags "-Wno-non-virtual-dtor")
elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "MSVC")
  # Turn on Error Handling in MSVC, otherwise objects are not destructed
  # when they go out of scope due to exceptions.
  list(APPEND jsi_compile_flags "/EHsc")
endif()
target_compile_options(jsi PRIVATE ${jsi_compile_flags})
```

----------------------------------------

TITLE: Configuring CMake Build for React Native Modal Component
DESCRIPTION: Sets up the build configuration for the React Native Modal component, including version requirements, source file collection, library dependencies, and compiler settings. This CMake script creates a static library named 'rrc_modal' that's part of the Fabric renderer architecture.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/modal/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_modal_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_modal STATIC ${rrc_modal_SRC})

target_include_directories(rrc_modal PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_modal
        glog
        folly_runtime
        glog_init
        react_codegen_rncore
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_uimanager
        rrc_image
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_modal PRIVATE "Fabric")
target_compile_options(rrc_modal PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring and Building Hermes Inspector Modern Library in CMake
DESCRIPTION: This CMake script sets up the build configuration for the Hermes Inspector Modern library. It includes necessary files, defines source files, sets compiler options, and specifies library dependencies. The script also enables debugging features in Debug build mode.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/hermes/inspector-modern/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB hermesinspectormodern_SRC CONFIGURE_DEPENDS chrome/*.cpp)

add_library(hermes_inspector_modern
        OBJECT
        ${hermesinspectormodern_SRC})

target_compile_reactnative_options(hermes_inspector_modern PRIVATE)

if(${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(
                hermes_inspector_modern
                PRIVATE
                -DHERMES_ENABLE_DEBUGGER=1
        )
endif()

target_include_directories(hermes_inspector_modern PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(hermes_inspector_modern
        hermes-engine::libhermes
        jsi
        reactnative)
```

----------------------------------------

TITLE: Configuring CMake for React Native Blob Library
DESCRIPTION: This snippet sets up the CMake configuration for building the React Native Blob library. It defines the minimum CMake version, includes necessary modules, specifies source files, creates a library target, and sets compilation and linking options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/reactnativeblob/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB reactnativeblob_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
add_library(reactnativeblob OBJECT ${reactnativeblob_SRC})

target_include_directories(reactnativeblob PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_merge_so(reactnativeblob)

target_link_libraries(reactnativeblob
        jsireact
        fbjni
        folly_runtime
        jsi
        reactnativejni)

target_compile_reactnative_options(reactnativeblob PRIVATE)
target_compile_options(reactnativeblob PRIVATE -fvisibility=hidden)
```

----------------------------------------

TITLE: Configuring CMake for React Native UIManager Renderer
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native UIManager renderer. It defines the minimum CMake version, includes necessary files, sets up the library target, and configures compiler options and linked libraries.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/uimanager/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_uimanager_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_uimanager OBJECT ${react_renderer_uimanager_SRC})

target_include_directories(react_renderer_uimanager PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_uimanager
        glog
        folly_runtime
        jsi
        react_cxxreact
        react_debug
        react_featureflags
        react_renderer_componentregistry
        react_renderer_consistency
        react_renderer_uimanager_consistency
        react_renderer_core
        react_renderer_debug
        react_renderer_dom
        react_renderer_graphics
        react_renderer_leakchecker
        react_renderer_runtimescheduler
        react_renderer_mounting
        rrc_root
        rrc_view
        runtimeexecutor
)
target_compile_reactnative_options(react_renderer_uimanager PRIVATE "Fabric")
target_compile_options(react_renderer_uimanager PRIVATE -Wno-unused-local-typedef)
target_compile_options(react_renderer_uimanager PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring CMake for React Native ScrollView Component Build
DESCRIPTION: This CMake script sets up the build environment for the React Native ScrollView component. It defines the source files, include directories, linked libraries, and compiler options for the 'rrc_scrollview' static library.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/scrollview/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_scrollview_SRC CONFIGURE_DEPENDS *.cpp platform/android/react/renderer/components/scrollview/*.cpp)
add_library(rrc_scrollview STATIC ${rrc_scrollview_SRC})

target_include_directories(rrc_scrollview PUBLIC ${REACT_COMMON_DIR} . ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/)

target_link_libraries(rrc_scrollview
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_scrollview PRIVATE "Fabric")
target_compile_options(rrc_scrollview PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring and Building react_featureflags Library in CMake
DESCRIPTION: Sets up CMake configuration for the React Native feature flags library. It specifies the minimum CMake version, enables verbose output, includes React Native flags utilities, collects source files, and configures the library with appropriate include directories, dependencies, and compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/featureflags/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_featureflags_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_featureflags OBJECT ${react_featureflags_SRC})

target_include_directories(react_featureflags PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_featureflags folly_runtime)
target_compile_reactnative_options(react_featureflags PRIVATE "ReactNative")
target_compile_options(react_featureflags PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Directory helper functions for React Native components
DESCRIPTION: Helper functions to add subdirectories for different parts of React Native: Android-specific, build, third-party NDK, and common components.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: cmake
CODE:
```
function(add_react_android_subdir relative_path)
  add_subdirectory(${REACT_ANDROID_DIR}/${relative_path} ReactAndroid/${relative_path})
endfunction()

function(add_react_build_subdir relative_path)
  add_subdirectory(${REACT_BUILD_DIR}/${relative_path} build/${relative_path})
endfunction()

function(add_react_third_party_ndk_subdir relative_path)
  add_react_build_subdir(third-party-ndk/${relative_path})
endfunction()

function(add_react_common_subdir relative_path)
  add_subdirectory(${REACT_COMMON_DIR}/${relative_path} ReactCommon/${relative_path})
endfunction()
```

----------------------------------------

TITLE: Configuring Yoga Module Build in CMake for React Native
DESCRIPTION: This CMake configuration sets up the build process for the Yoga layout engine in React Native. It compiles C++ source files into a library, includes necessary dependencies like yogacore and fbjni, and applies optimization flags. The configuration also incorporates React Native's custom build utilities.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/first-party/yogajni/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB yoga_SRC CONFIGURE_DEPENDS jni/*.cpp)
add_library(yoga OBJECT ${yoga_SRC})

target_include_directories(yoga PUBLIC jni)
target_merge_so(yoga)

target_link_libraries(yoga
        yogacore
        fbjni
        log
        android
)

target_compile_reactnative_options(yoga PRIVATE)
target_compile_options(yoga PRIVATE -fvisibility=hidden -O3)
```

----------------------------------------

TITLE: Configuring and Building React Bridging Library with CMake
DESCRIPTION: This CMake script sets up the compilation of the React Bridging library for React Native. It includes necessary files, defines source files, and sets compilation flags and linked libraries. The script creates an object library named 'react_bridging' with specific include directories and compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/bridging/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_bridging_SRC CONFIGURE_DEPENDS *.cpp)

add_library(react_bridging OBJECT ${react_bridging_SRC})

target_include_directories(react_bridging PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_bridging jsi callinvoker)
target_compile_reactnative_options(react_bridging PRIVATE "ReactNative")
target_compile_options(react_bridging PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Creating the JSInspector CDP Library in React Native
DESCRIPTION: Builds the JSInspector CDP library by gathering all CPP source files in the directory, creating an OBJECT library, configuring it for shared object merging, including necessary headers, and linking against folly_runtime.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsinspector-modern/cdp/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: cmake
CODE:
```
file(GLOB jsinspector_cdp_SRC CONFIGURE_DEPENDS *.cpp)

add_library(jsinspector_cdp OBJECT ${jsinspector_cdp_SRC})
target_merge_so(jsinspector_cdp)

target_include_directories(jsinspector_cdp PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector_cdp
        folly_runtime
)
```

----------------------------------------

TITLE: Executing Publish Updated Packages Script in Node.js
DESCRIPTION: This command publishes all updated packages (excluding react-native) to npm. It is triggered when a commit on a release branch contains the specific comment #publish-packages-to-npm.
SOURCE: https://github.com/facebook/react-native/blob/main/scripts/releases-ci/README.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
### `publish-updated-packages`

Publishes all updated packages (excluding `react-native`) to npm. Triggered when a commit on a release branch contains `#publish-packages-to-npm`.
```

----------------------------------------

TITLE: Configuring React Native Core Renderer Library in CMake
DESCRIPTION: This CMake script sets up the build process for the React Native Core Renderer library. It defines the minimum CMake version, enables verbose output, includes React Native flags, collects source files, and configures the library with necessary dependencies and compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/core/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_core_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_core OBJECT ${react_renderer_core_SRC})

target_include_directories(react_renderer_core PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_core
        folly_runtime
        glog
        jsi
        logger
        react_debug
        react_featureflags
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_renderer_runtimescheduler
        react_utils
        runtimeexecutor)
target_compile_reactnative_options(react_renderer_core PRIVATE "Fabric")
target_compile_options(react_renderer_core PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Native Renderer Telemetry Library in CMake
DESCRIPTION: This CMake script sets up the build configuration for the React Native renderer telemetry library. It collects all .cpp files in the directory, creates an object library, and configures the necessary include directories and dependencies for compilation. The script also applies specific compiler flags for the Fabric architecture and enables pedantic warning checks.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/telemetry/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_telemetry_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_telemetry OBJECT ${react_renderer_telemetry_SRC})

target_include_directories(react_renderer_telemetry PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_telemetry
        folly_runtime
        glog
        glog_init
        react_debug
        react_renderer_core
        react_renderer_debug
        react_utils
        rrc_root
        rrc_view
        yoga)
target_compile_reactnative_options(react_renderer_telemetry PRIVATE "Fabric")
target_compile_options(react_renderer_telemetry PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Native CSS Renderer Library in CMake
DESCRIPTION: Configures the React Native CSS renderer library, creating either an INTERFACE library (if header-only) or an OBJECT library based on whether source files are found. Sets up include directories, links required dependencies, and applies React Native specific compiler options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/css/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_css_SRC CONFIGURE_DEPENDS *.cpp)

# We need to create library as INTERFACE if it is header only
if("${react_renderer_css_SRC}" STREQUAL "")
  add_library(react_renderer_css INTERFACE)

  target_include_directories(react_renderer_css INTERFACE ${REACT_COMMON_DIR})
  target_link_libraries(react_renderer_css INTERFACE
        fast_float
        glog
        react_debug
        react_utils)
  target_compile_reactnative_options(react_renderer_css INTERFACE "Fabric")
  target_compile_options(react_renderer_css INTERFACE -Wpedantic)
else()
  add_library(react_renderer_css OBJECT ${react_renderer_css_SRC})

  target_include_directories(react_renderer_css PUBLIC ${REACT_COMMON_DIR})
  target_link_libraries(react_renderer_css
        fast_float
        glog
        react_debug
        react_utils)
  target_compile_reactnative_options(react_renderer_css PRIVATE "Fabric")
  target_compile_options(react_renderer_css PRIVATE -Wpedantic)
endif()
```

----------------------------------------

TITLE: Configuring CMake Build for React Native CXX Runtime
DESCRIPTION: Sets up CMake build configuration for React Native's C++ runtime library. Includes compilation flags, source files globbing, and dependency specifications. The configuration enables verbose build output and links against required libraries like boost, folly, and JSI.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/cxxreact/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_cxxreact_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_cxxreact OBJECT ${react_cxxreact_SRC})

target_include_directories(react_cxxreact PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_cxxreact
        boost
        callinvoker
        folly_runtime
        glog
        jsi
        jsinspector
        logger
        reactperflogger
        runtimeexecutor
        react_debug)

target_compile_reactnative_options(react_cxxreact PRIVATE "ReactNative")
target_compile_options(react_cxxreact PRIVATE -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: Configuring CMake for React Native Bridgeless Library
DESCRIPTION: This CMake script sets up the build configuration for the React Native bridgeless library. It defines the source files, compilation options, and links necessary dependencies for the bridgeless implementation.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/runtime/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB bridgeless_SRC "*.cpp")

add_library(bridgeless
        OBJECT
        ${bridgeless_SRC}
)
target_compile_reactnative_options(bridgeless PRIVATE)
target_compile_options(bridgeless PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)
target_include_directories(bridgeless PUBLIC .)

target_link_libraries(
        bridgeless
        jserrorhandler
        fabricjni
        react_featureflagsjni
        turbomodulejsijni
        jsi
        jsitooling
        jsireact
        react_utils
        jsinspector
        react_featureflags
        react_performance_timeline
        react_utils
)
```

----------------------------------------

TITLE: Configuring Hermes Executor Common Library in CMake for React Native
DESCRIPTION: Defines the build configuration for the hermes_executor_common library. It collects all source files, sets include directories, configures dependencies, and handles debug/release build differences. The library integrates the Hermes JavaScript engine with React Native's native modules system.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/hermes/executor/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE hermes_executor_SRC CONFIGURE_DEPENDS *.cpp)
add_library(
        hermes_executor_common
        OBJECT
        ${hermes_executor_SRC}
)
target_include_directories(hermes_executor_common PUBLIC .)
target_link_libraries(hermes_executor_common
        hermes-engine::libhermes
        hermes_inspector_modern
        jsi
        reactnative
)

target_compile_reactnative_options(hermes_executor_common PRIVATE)
if(${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(
                hermes_executor_common
                PRIVATE
                -DHERMES_ENABLE_DEBUGGER=1
        )
else()
        target_compile_options(
                hermes_executor_common
                PRIVATE
                -DNDEBUG
        )
endif()
```

----------------------------------------

TITLE: Running tests for eslint-plugin-specs package
DESCRIPTION: Commands to run the test suite for the eslint-plugin-specs package from the React Native root folder. Includes installing dependencies and executing the Jest test runner.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/eslint-plugin-specs/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
yarn
yarn jest packages/eslint-plugin-specs
```

----------------------------------------

TITLE: Configuring Hermes Shared Library Import in CMake
DESCRIPTION: Sets up CMake configuration to import the Hermes JavaScript engine as a shared library. Specifies minimum CMake version 3.13, enables verbose build output, and configures the library import with the appropriate ABI-specific path.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/first-party/hermes/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_library(hermes SHARED IMPORTED GLOBAL)
set_target_properties(hermes
        PROPERTIES
        IMPORTED_LOCATION
        ${CMAKE_CURRENT_SOURCE_DIR}/jni/${ANDROID_ABI}/libhermes.so)
```

----------------------------------------

TITLE: Configuring CMake for jsinspector_tracing Library in React Native
DESCRIPTION: This CMake script sets up the build configuration for the jsinspector_tracing library. It includes necessary utilities, defines the library source files, and specifies compilation options and dependencies. The script also enables verbose output and sets the minimum required CMake version.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsinspector-modern/tracing/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB jsinspector_tracing_SRC CONFIGURE_DEPENDS *.cpp)

add_library(jsinspector_tracing OBJECT ${jsinspector_tracing_SRC})
target_merge_so(jsinspector_tracing)

target_include_directories(jsinspector_tracing PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector_tracing
        folly_runtime
        oscompat
)
target_compile_reactnative_options(jsinspector_tracing PRIVATE)
target_compile_options(jsinspector_tracing PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Placeholder for Invalid or Missing @property Rule in React Native
DESCRIPTION: A placeholder that would be replaced with the specific @property rule that was ignored due to containing an invalid property or missing a required property in React Native.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/propertyRuleIssue.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
{PLACEHOLDER_property}
```

----------------------------------------

TITLE: Adding Support for CRLF in build.gradle for react-native link on Android
DESCRIPTION: This Android-specific addition adds support for build.gradle files with CRLF line endings when using the react-native link command.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_35

LANGUAGE: Java
CODE:
```
// Add support for build.gradle with CRLF for use with react-native link
// Commit: 843cfc3b202433aad9a236b1b623da7c45e1ac15
```

----------------------------------------

TITLE: Executing Prepare Package for Release Script in Node.js
DESCRIPTION: This command prepares files within the react-native package and template for the target release version. It creates a new commit and tag, which triggers the publish-npm.js script in a new workflow.
SOURCE: https://github.com/facebook/react-native/blob/main/scripts/releases-ci/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
### `prepare-package-for-release`

Prepares files within the `react-native` package and template for the target release version. Writes a new commit and tag, which will trigger `publish-npm.js` in a new workflow.
```

----------------------------------------

TITLE: Configuring CMake for React Native Image Module
DESCRIPTION: This CMake script sets up the build configuration for the React Native image module. It defines the minimum CMake version, includes necessary utilities, sets up the source files, and configures the 'rrc_image' library with its dependencies and compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/image/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_image_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_image OBJECT ${rrc_image_SRC})

target_include_directories(rrc_image PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_image
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_utils
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_mapbuffer
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_image PRIVATE "Fabric")
target_compile_options(rrc_image PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring CMake Build for React Native Android Switch Component
DESCRIPTION: This CMake script configures the build process for the React Native Android Switch component. It sets up the required minimum CMake version, includes React Native flags, collects source files, and defines the static library with appropriate dependencies and compiler options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/switch/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_switch_SRCS CONFIGURE_DEPENDS androidswitch/react/renderer/components/androidswitch/*.cpp)

add_library(
        rrc_switch
        STATIC
        ${rrc_switch_SRCS}
)

target_include_directories(rrc_switch PUBLIC androidswitch/)

target_link_libraries(
        rrc_switch
        glog
        fbjni
        folly_runtime
        glog_init
        react_codegen_rncore
        react_debug
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_uimanager
        reactnativejni
        rrc_view
        yoga
)

target_compile_reactnative_options(rrc_switch PRIVATE "Fabric")
target_compile_options(rrc_switch PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring Hermestooling Shared Library in CMake for React Native
DESCRIPTION: Creates a shared library named 'hermestooling' that merges multiple Hermes-related libraries. This acts as an umbrella library that consolidates bridgelesshermes, hermes_executor, and other Hermes components. The library can be removed by React Native Gradle Plugin for users who opt to use JSC instead of Hermes.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/hermes/tooling/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

# hermestooling is a shared library where we merge all the hermes* related libraries.
#
# It acts as an 'umbrella' library and gets removed by RNGP (see `configureJsEnginePackagingOptions`)
# Please note that this library gets removed for users that opt to use JSC as their JS engine.

add_library(hermestooling
        SHARED
        $<TARGET_OBJECTS:bridgelesshermes>
        $<TARGET_OBJECTS:hermes_executor>
        $<TARGET_OBJECTS:hermes_executor_common>
        $<TARGET_OBJECTS:hermes_inspector_modern>
        $<TARGET_OBJECTS:hermesinstancejni>
        $<TARGET_OBJECTS:jni_lib_merge_glue>
        $<TARGET_OBJECTS:jsijniprofiler>
)
target_merge_so(hermestooling)
target_link_libraries(hermestooling
        PUBLIC
        reactnative
        jsi
        hermes-engine::libhermes
)
target_include_directories(hermestooling
        PUBLIC
        $<TARGET_PROPERTY:bridgelesshermes,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermes_executor,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermes_executor_common,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermes_inspector_modern,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermesinstancejni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsijniprofiler,INTERFACE_INCLUDE_DIRECTORIES>
)
target_compile_reactnative_options(hermestooling PRIVATE)
```

----------------------------------------

TITLE: Creating and Configuring Folly Runtime Library in CMake
DESCRIPTION: Creates a static library target for Folly runtime and configures its compilation options, include directories, and dependency linkage. Enables exceptions, RTTI, and applies all the previously defined Folly flags.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/folly/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: CMake
CODE:
```
add_library(folly_runtime STATIC ${folly_runtime_SRC})

target_compile_options(folly_runtime
        PRIVATE
        -fexceptions
        -fno-omit-frame-pointer
        -frtti
        -Wno-sign-compare
        ${folly_FLAGS})

target_compile_options(folly_runtime PUBLIC ${folly_FLAGS})

target_include_directories(folly_runtime PUBLIC .)
target_link_libraries(folly_runtime glog double-conversion boost fmt fast_float)
```

----------------------------------------

TITLE: Configuring CMake for React Native OS Compatibility Library
DESCRIPTION: This CMake snippet sets up the build configuration for the OS compatibility layer in React Native. It defines the minimum CMake version, enables verbose output, includes React Native specific flags, and creates an object library from all .cpp files in the directory.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/oscompat/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB oscompat_SRC CONFIGURE_DEPENDS *.cpp)
add_library(oscompat OBJECT ${oscompat_SRC})

target_include_directories(oscompat PUBLIC .)
target_compile_reactnative_options(oscompat PRIVATE)
```

----------------------------------------

TITLE: Configuring React Native Utils Library in CMake
DESCRIPTION: Sets up the CMake configuration for building the React Native utils library. It defines source files, includes directories, sets compilation flags, and specifies linked libraries.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/utils/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_utils_SRC CONFIGURE_DEPENDS *.cpp *.mm)
add_library(react_utils OBJECT ${react_utils_SRC})

target_include_directories(react_utils PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_utils
        glog
        glog_init
        jsireact
        react_debug)
target_compile_reactnative_options(react_utils PRIVATE "Fabric")
target_compile_options(react_utils PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Native Performance Logger JNI Library in CMake
DESCRIPTION: Sets up CMake configuration for reactperfloggerjni interface library, including minimum CMake version, verbose output, dependency inclusion, and library configuration with necessary include directories and linked libraries.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/reactperflogger/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(reactperfloggerjni INTERFACE)

target_include_directories(reactperfloggerjni
        INTERFACE
          ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(reactperfloggerjni
        INTERFACE
        fbjni
        android
        reactperflogger)

target_compile_reactnative_options(reactperfloggerjni INTERFACE)
```

----------------------------------------

TITLE: Linking Required Dependencies for Native C++ Module
DESCRIPTION: Links the native C++ module library with necessary React Native dependencies including fbjni, jsi, and reactnative libraries.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_4

LANGUAGE: CMake
CODE:
```
target_link_libraries(nativecxxmoduleexample
        fbjni
        jsi
        reactnative
)
```

----------------------------------------

TITLE: Creating Native C++ Module Library
DESCRIPTION: Finds all C++ source files in the directory and creates a static library named 'nativecxxmoduleexample' from them.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: CMake
CODE:
```
file(GLOB nativecxxmoduleexample_SRC CONFIGURE_DEPENDS *.cpp)
add_library(nativecxxmoduleexample STATIC ${nativecxxmoduleexample_SRC})
```

----------------------------------------

TITLE: Configuring JSI JNI Profiler Library Build in CMake
DESCRIPTION: This CMake configuration sets up the build for the JSI JNI Profiler library. It collects all CPP source files, includes necessary utility scripts, and configures the library with appropriate compilation options and dependencies including Hermes engine, JSI, and React Native.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/hermes/instrumentation/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

file(GLOB_RECURSE jsijniprofiler_SRC CONFIGURE_DEPENDS *.cpp)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(
        jsijniprofiler
        OBJECT
        ${jsijniprofiler_SRC}
)
target_compile_reactnative_options(jsijniprofiler PRIVATE)
target_merge_so(jsijniprofiler)

target_include_directories(jsijniprofiler PRIVATE .)

target_link_libraries(
      jsijniprofiler
      hermes-engine::libhermes
      jsi
      reactnative
)
```

----------------------------------------

TITLE: Configuring CallInvokerHolder Library Build in CMake
DESCRIPTION: Defines the build configuration for the callinvokerholder library which handles native method call invocation. Includes source files, include directories, and links required dependencies like fbjni and runtimeexecutor.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/turbomodule/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
add_library(
        callinvokerholder
        OBJECT
        ReactCommon/CallInvokerHolder.cpp
        ReactCommon/NativeMethodCallInvokerHolder.cpp
)

target_include_directories(callinvokerholder
        PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}
        )

target_link_libraries(callinvokerholder
        fbjni
        runtimeexecutor
        callinvoker
        reactperfloggerjni)
target_compile_reactnative_options(callinvokerholder PRIVATE)
```

----------------------------------------

TITLE: Configuring CMake for React Native Popup Menu Android Specs Library
DESCRIPTION: This CMake script sets up the build configuration for the react_codegen_ReactPopupMenuAndroidSpecs library. It defines the source files, include directories, linked libraries, and compilation options. The library is built as an OBJECT library and includes C++ files from the current directory and the ReactPopupMenuAndroidSpecs subdirectory.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-popup-menu-android/android/src/main/jni/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

file(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/ReactPopupMenuAndroidSpecs/*.cpp)

add_library(
  react_codegen_ReactPopupMenuAndroidSpecs
  OBJECT
  ${react_codegen_SRCS}
)

target_include_directories(react_codegen_ReactPopupMenuAndroidSpecs PUBLIC . react/renderer/components/ReactPopupMenuAndroidSpecs)

target_link_libraries(
  react_codegen_ReactPopupMenuAndroidSpecs
  fbjni
  jsi
  reactnative
)

target_compile_options(
  react_codegen_ReactPopupMenuAndroidSpecs
  PRIVATE
  -DLOG_TAG=\"ReactNative\"
  -fexceptions
  -frtti
  -std=c++20
  -Wall
)
```

----------------------------------------

TITLE: Conditionally Linking with React Native Codegen
DESCRIPTION: Adds conditional linking with the React Native code generation system, ensuring the build works during Gradle sync in Android Studio when the codegen target might not exist yet.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_5

LANGUAGE: CMake
CODE:
```
# For Gradle Syncs (i.e. when you first open the project in Android Studio),
# the react_codegen_AppSpecs target is not existing yet as it's generated by
# Codegen. Therefore skip the linking with that library if it's missing in the
# CMake dependency Graph. It will be included anyway in the final build.
if (TARGET react_codegen_AppSpecs)
    target_include_directories(react_codegen_AppSpecs PUBLIC .)
    target_link_libraries(nativecxxmoduleexample react_codegen_AppSpecs)
endif ()
```

----------------------------------------

TITLE: Handling NDK Version-Specific Unwinder Library
DESCRIPTION: Determines the appropriate unwinder library based on NDK version to prevent undefined '_Unwind_Resume' symbol issues when handling C++ exceptions.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: cmake
CODE:
```
if(ANDROID_NDK_REVISION VERSION_LESS "23.0.0")
  set(LIB_UNWIND gcc)
else()
  set(LIB_UNWIND unwind)
endif()
```

----------------------------------------

TITLE: Documenting User Authentication Rejection in React Native
DESCRIPTION: A comment that documents the scenario when a user actively declines a sign-in attempt in a React Native application. This message is likely used as part of error handling or user flow documentation.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthRequestApprovalDeclined.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# User declined the sign-in attempt.
```

----------------------------------------

TITLE: Removing prepareReact call from bridge in JavaScript
DESCRIPTION: Removes the 'prepareReact' call from the bridge, likely as part of a refactoring or optimization.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_49

LANGUAGE: JavaScript
CODE:
```
80f9e1f7de407ea417cecb04b3ba20b05696b478
```

LANGUAGE: JavaScript
CODE:
```
56a42e57d05ff609e8fce35dcb5e9db7938db801
```

----------------------------------------

TITLE: Creating JSI Library Target
DESCRIPTION: Creates the JSI library target and sets its include directories.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsi/jsi/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: cmake
CODE:
```
add_library(jsi
        jsi.cpp)

target_include_directories(jsi PUBLIC ..)
```

----------------------------------------

TITLE: Configuring React Native Component Registry CMake Build
DESCRIPTION: This CMake script configures the build process for the React Native component registry module. It sets up verbose build output, includes React Native flags, compiles all .cpp files in the directory, and links against required dependencies like Folly, JSI, and other React Native components.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/componentregistry/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_componentregistry_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_componentregistry OBJECT ${react_renderer_componentregistry_SRC})

target_include_directories(react_renderer_componentregistry PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_componentregistry
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_utils
        rrc_legacyviewmanagerinterop
)
target_compile_reactnative_options(react_renderer_componentregistry PRIVATE "Fabric")
target_compile_options(react_renderer_componentregistry PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Enabling Verbose Makefile Output CMake
DESCRIPTION: Sets the CMAKE_VERBOSE_MAKEFILE variable to 'on', causing CMake to print the exact commands executed during the build process. This is useful for debugging build issues.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/performance/timeline/CMakeLists.txt#_snippet_1

LANGUAGE: CMake
CODE:
```
set(CMAKE_VERBOSE_MAKEFILE on)
```

----------------------------------------

TITLE: Gathering Source Files CMake
DESCRIPTION: Uses the file(GLOB ...) command to find all files matching the pattern '*.cpp' in the current directory and stores their paths in the react_performance_timeline_SRC variable. CONFIGURE_DEPENDS ensures CMake re-runs if source files are added or removed.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/performance/timeline/CMakeLists.txt#_snippet_3

LANGUAGE: CMake
CODE:
```
file(GLOB react_performance_timeline_SRC CONFIGURE_DEPENDS *.cpp)
```

----------------------------------------

TITLE: Enabling Interprocedural Optimization
DESCRIPTION: Checks if interprocedural optimization is supported and enables it for the Yoga Core target if available.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/yoga/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: CMake
CODE:
```
check_ipo_supported(RESULT result)
if(result)
  set_target_properties(yogacore PROPERTIES
    CMAKE_INTERPROCEDURAL_OPTIMIZATION true)
endif()
```

----------------------------------------

TITLE: Setting up CMake Build Configuration for JSExecutor
DESCRIPTION: Configures the base CMake settings, sets compilation options for visibility and exceptions, and includes required utility files for SO merging and React Native flags.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_compile_options(-fvisibility=hidden -fexceptions -frtti)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
```

----------------------------------------

TITLE: Configuring GTest Executable for React Native Unit Tests in CMake
DESCRIPTION: Defines a CMake executable target named 'reactnative_unittest' that includes numerous test source files from React Native's core components. The configuration specifies which test files to compile, with some problematic tests commented out and categorized by their failure type.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_8

LANGUAGE: CMake
CODE:
```
add_executable(reactnative_unittest
  ${REACT_COMMON_DIR}/cxxreact/tests/jsarg_helpers.cpp
  ${REACT_COMMON_DIR}/cxxreact/tests/jsbigstring.cpp
  ${REACT_COMMON_DIR}/cxxreact/tests/methodcall.cpp
  ${REACT_COMMON_DIR}/cxxreact/tests/RecoverableErrorTest.cpp
  ${REACT_COMMON_DIR}/react/bridging/tests/BridgingTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/attributedstring/tests/AttributedStringBoxTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/components/image/tests/ImageTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/components/root/tests/RootShadowNodeTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/components/scrollview/tests/ScrollViewTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/components/view/tests/LayoutTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/components/view/tests/ViewTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/DynamicPropsUtilitiesTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/EventQueueProcessorTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/FindNodeAtPointTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/LayoutableShadowNodeTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/PrimitivesTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/RawPropsTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/ShadowNodeFamilyTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/debug/tests/DebugStringConvertibleTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/element/tests/ElementTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/graphics/tests/GraphicsTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/graphics/tests/TransformTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/imagemanager/tests/ImageManagerTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/mapbuffer/tests/MapBufferTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/mounting/tests/StackingContextTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/mounting/tests/StateReconciliationTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/runtimescheduler/tests/RuntimeSchedulerTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/runtimescheduler/tests/SchedulerPriorityTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/telemetry/tests/TransactionTelemetryTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/textlayoutmanager/tests/TextLayoutManagerTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/uimanager/tests/FabricUIManagerTest.cpp

  ########## (COMPILE BUT FAIL ON ASSERTS) ###########
  # ${REACT_COMMON_DIR}/react/renderer/animations/tests/LayoutAnimationTest.cpp
  # ${REACT_COMMON_DIR}/react/renderer/mounting/tests/MountingTest.cpp
  # ${REACT_COMMON_DIR}/react/renderer/mounting/tests/ShadowTreeLifeCycleTest.cpp

  ########## (COMPILE BUT FAIL WITH RUNTIME EXCEPTIONS) ###########
  # ${REACT_COMMON_DIR}/hermes/inspector-modern/chrome/tests/ConnectionDemuxTests.cpp

  ########## (DO NOT COMPILE) ###########
  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ShadowNodeTest.cpp
  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ConcreteShadowNodeTest.cpp
  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ComponentDescriptorTest.cpp
  )
```

----------------------------------------

TITLE: Adding Pedantic Compile Option CMake
DESCRIPTION: Adds the '-Wpedantic' compiler flag to the 'react_performance_timeline' target. This flag enables strict warnings according to the C++ standard. The PRIVATE keyword limits this option to the target's own compilation.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/performance/timeline/CMakeLists.txt#_snippet_6

LANGUAGE: CMake
CODE:
```
target_compile_options(react_performance_timeline PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Defining Custom Function for Adding React Common Subdirectories
DESCRIPTION: Creates a function 'add_react_common_subdir' to simplify adding subdirectories from the React Common directory.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/tester/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: CMake
CODE:
```
function(add_react_common_subdir relative_path)
  add_subdirectory(${REACT_COMMON_DIR}/${relative_path} src/${relative_path})
endfunction()
```

----------------------------------------

TITLE: Documenting navigator.credentials.get API limitation in Markdown
DESCRIPTION: A comment that highlights an important constraint when using the Web Credentials API. It warns developers that they cannot have multiple simultaneous navigator.credentials.get requests.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthRequestTooManyRequests.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Only one navigator.credentials.get request may be outstanding at one time.
```

----------------------------------------

TITLE: Defining React Native Text Component Build Target - CMake
DESCRIPTION: This CMake script defines the build process for the `rrc_text` object library. It gathers source files, sets include paths relative to the source and build directories, and links against numerous dependencies like glog, folly, jsi, and other React Native internal libraries required for the text rendering component. It also applies specific compile flags.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/text/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_text_SRC CONFIGURE_DEPENDS
        *.cpp
        platform/android/react/renderer/components/text/*.cpp)

add_library(rrc_text OBJECT ${rrc_text_SRC})

target_include_directories(rrc_text PUBLIC
        ${REACT_COMMON_DIR}
        ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/)

target_include_directories(rrc_text PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/react/renderer/components/text/)

target_link_libraries(rrc_text
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_attributedstring
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_textlayoutmanager
        react_utils
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_text PRIVATE "Fabric")
target_compile_options(rrc_text PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring TurboModuleJSIJNI Library Build in CMake
DESCRIPTION: Sets up the build configuration for the turbomodulejsijni library (to be renamed to react_nativemodule_manager) which handles native module management. Includes source files, additional objects, and links required dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/turbomodule/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: cmake
CODE:
```
add_library(
        turbomodulejsijni
        OBJECT
        ReactCommon/BindingsInstallerHolder.cpp
        ReactCommon/OnLoad.cpp
        ReactCommon/TurboModuleManager.cpp
        $<TARGET_OBJECTS:logger>
        $<TARGET_OBJECTS:react_bridging>
)
target_merge_so(turbomodulejsijni)

target_include_directories(
        turbomodulejsijni
        PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(turbomodulejsijni
        fbjni
        jsi
        react_nativemodule_core
        callinvokerholder
        reactperfloggerjni)
target_compile_reactnative_options(turbomodulejsijni PRIVATE)
```

----------------------------------------

TITLE: Setting up CMake Configuration for React Native CXXReactPackage
DESCRIPTION: Configures the CMake build system for the React Native CXXReactPackage library. It defines an interface library with include directories, links dependencies like fb and fbjni, and applies React Native specific compiler flags and options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/runtime/cxxreactpackage/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

#########################
###  cxxreactpackage  ###
#########################

add_library(react_cxxreactpackage INTERFACE)

target_include_directories(react_cxxreactpackage
        INTERFACE
        ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(react_cxxreactpackage
        INTERFACE
        fb
        fbjni)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
target_compile_reactnative_options(react_cxxreactpackage INTERFACE)
target_compile_options(react_cxxreactpackage INTERFACE -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: Setting Up CMake Configuration for React Native Feature Flags JNI Library
DESCRIPTION: Configures the CMake build process for the react_featureflagsjni library, including minimum CMake version requirements, includes necessary utility files, glob patterns for source files, and sets up library dependencies and compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/featureflags/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_featureflagsjni_SRCS CONFIGURE_DEPENDS *.cpp)

add_library(
        react_featureflagsjni
        OBJECT
        ${react_featureflagsjni_SRCS}
)

target_include_directories(react_featureflagsjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_link_libraries(
        react_featureflagsjni
        fbjni
        react_featureflags
        reactnativejni
)

target_merge_so(react_featureflagsjni)
target_compile_reactnative_options(react_featureflagsjni PRIVATE "ReactNative")
```

----------------------------------------

TITLE: Configuring Runtime Executor Library Build in CMake
DESCRIPTION: Sets up the build configuration for the runtimeexecutor library, including source file collection, library definition, include directories, and linking with dependencies. Applies React Native specific compilation flags and additional warning options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/runtimeexecutor/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE runtimeexecutor_SRC CONFIGURE_DEPENDS *.cpp *.h)

add_library(runtimeexecutor OBJECT ${runtimeexecutor_SRC})

target_include_directories(runtimeexecutor PUBLIC .)

target_link_libraries(runtimeexecutor jsi)
target_compile_reactnative_options(runtimeexecutor PRIVATE)
target_compile_options(runtimeexecutor PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Native Microtasks Library in CMake
DESCRIPTION: Sets up the CMake build configuration for the react_nativemodule_microtasks library. It defines the minimum CMake version, includes React Native flags, compiles all CPP files in the directory, and links against required dependencies.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/microtasks/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_microtasks_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_microtasks OBJECT ${react_nativemodule_microtasks_SRC})

target_include_directories(react_nativemodule_microtasks PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_microtasks
        react_codegen_rncore
        react_cxxreact
)
target_compile_reactnative_options(react_nativemodule_microtasks PRIVATE "ReactNative")
target_compile_options(react_nativemodule_microtasks PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Native Debug Library Build with CMake
DESCRIPTION: Complete CMake configuration for building the react_debug library. It sets minimum CMake version, enables verbose output, includes react-native-flags, compiles all .cpp files in the directory, and configures necessary include directories, library dependencies, and compiler options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/debug/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_debug_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_debug OBJECT ${react_debug_SRC})

target_include_directories(react_debug PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_debug log folly_runtime)

target_compile_reactnative_options(react_debug PRIVATE "Fabric")
target_compile_options(react_debug PRIVATE -Wpedantic)
if(NOT ${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(react_debug PUBLIC -DNDEBUG)
endif()
```

----------------------------------------

TITLE: Configuring and Building JSI Tooling Library in CMake for React Native
DESCRIPTION: This CMake script configures and builds the JSI tooling library for React Native. It collects source files from the react/runtime directory, sets up include paths, and links against dependencies like react_cxxreact, folly_runtime, glog, and jsi. The script also applies React Native-specific compilation options and enforces pedantic warnings.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsitooling/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
file(GLOB jsitooling_SRC CONFIGURE_DEPENDS react/runtime/*.cpp)
add_library(jsitooling OBJECT ${jsitooling_SRC})

target_include_directories(jsitooling
    PUBLIC
    ${REACT_COMMON_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(jsitooling
        react_cxxreact
        folly_runtime
        glog
        jsi)

target_compile_reactnative_options(jsitooling PRIVATE "ReactNative")
target_compile_options(jsitooling PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Linking Libraries CMake
DESCRIPTION: Links the 'react_performance_timeline' target against several other libraries: jsinspector_tracing, reactperflogger, and react_timing. This makes the symbols and dependencies of these libraries available to the current target.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/performance/timeline/CMakeLists.txt#_snippet_8

LANGUAGE: CMake
CODE:
```
target_link_libraries(react_performance_timeline
        jsinspector_tracing
        reactperflogger
        react_timing)
```

----------------------------------------

TITLE: Configuring RRC Native Library Build in CMake for React Native
DESCRIPTION: This CMake script configures the build process for the 'rrc_native' library. It sets the minimum required CMake version, includes React Native common flags, collects source files, and establishes dependencies and compiler options for the library.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/componentregistry/native/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_native_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_native OBJECT ${rrc_native_SRC})

target_include_directories(rrc_native PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_native
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_utils
        callinvoker
)
target_compile_reactnative_options(rrc_native PRIVATE "Fabric")
target_compile_options(rrc_native PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring CMake for React Native Performance Logger
DESCRIPTION: Sets up CMake configuration for building the React Native Performance Logger library. It defines the minimum CMake version, sets verbosity, includes necessary files, and configures the library with its dependencies and compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/reactperflogger/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB reactperflogger_SRC CONFIGURE_DEPENDS
        reactperflogger/*.cpp
        fusebox/*.cpp)
add_library(reactperflogger OBJECT ${reactperflogger_SRC})

target_include_directories(reactperflogger PUBLIC .)

target_link_libraries(reactperflogger
        react_timing
        folly_runtime
)
target_compile_reactnative_options(reactperflogger PRIVATE)
target_compile_options(reactperflogger PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configuring React Native Image Manager Component with CMake
DESCRIPTION: This CMake script sets up the build configuration for the React Native Image Manager component. It includes source files, defines include directories, and links necessary dependencies to create the react_renderer_imagemanager library object.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/imagemanager/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_imagemanager_SRC CONFIGURE_DEPENDS
        *.cpp
        platform/android/react/renderer/imagemanager/*.cpp)

add_library(react_renderer_imagemanager
        OBJECT
        ${react_renderer_imagemanager_SRC})

target_include_directories(react_renderer_imagemanager
        PUBLIC
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
        PRIVATE
          ${CMAKE_CURRENT_SOURCE_DIR}
        )

target_link_libraries(react_renderer_imagemanager
        folly_runtime
        mapbufferjni
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mounting
        reactnativejni
        yoga)
target_compile_reactnative_options(react_renderer_imagemanager PRIVATE "Fabric")
target_compile_options(react_renderer_imagemanager PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Setting C++ Standard Version
DESCRIPTION: Configures the C++ standard version to C++14 and makes it required for the build.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/jsi/jsi/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
```

----------------------------------------

TITLE: Configuring UIManager JNI Library Build in CMake for React Native Android
DESCRIPTION: This CMake script sets up the build configuration for the UIManager JNI library in React Native for Android. It includes necessary files, defines the library target, sets include directories, links dependencies, and applies React Native-specific compile options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/react/uimanager/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB uimanagerjni_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
add_library(uimanagerjni
        OBJECT
            ${uimanagerjni_SRC}
            $<TARGET_OBJECTS:react_renderer_graphics>
            $<TARGET_OBJECTS:rrc_legacyviewmanagerinterop>
            $<TARGET_OBJECTS:rrc_view>
)
target_merge_so(uimanagerjni)

target_include_directories(uimanagerjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_link_libraries(uimanagerjni
        bridgelessnativeviewconfig
        callinvokerholder
        fbjni
        folly_runtime
        glog
        glog_init
        jsi
        log
        react_renderer_componentregistry
        reactnativejni
        rrc_native
        yoga
)

target_compile_reactnative_options(uimanagerjni PRIVATE "ReactNative")
```

----------------------------------------

TITLE: Setting Compiler Options for React Native Library in CMake
DESCRIPTION: Applies React Native specific compiler options to the reactnative target with private visibility.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#2025-04-22_snippet_6

LANGUAGE: CMake
CODE:
```
target_compile_reactnative_options(reactnative PRIVATE)
```

----------------------------------------

TITLE: Configuring CMake Project for React Native Fantom Tester
DESCRIPTION: Sets up the CMake project 'fantom_tester', defines minimum CMake version, enables verbose output, and adds a build ID to shared libraries.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native-fantom/tester/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

project(fantom_tester)

# Convert input paths to CMake format (with forward slashes)
file(TO_CMAKE_PATH "${REACT_COMMON_DIR}" REACT_COMMON_DIR)

# Make sure every shared lib includes a .note.gnu.build-id header
add_link_options(-Wl,--build-id)
```

----------------------------------------

TITLE: Configuring Boost Library with ASM Files for React Native Android
DESCRIPTION: Sets up a static boost library using assembly files needed for Folly futures. The configuration enables ASM language support, finds assembly source files for the current Android ABI, and creates a static library with appropriate compiler options and include directories.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/boost/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

# These ASM files are picked from the boost release separately,
# because the react native version does not include anything outside of headers.
# They are required for Folly futures to compile successfully.
ENABLE_LANGUAGE(ASM)
file(GLOB_RECURSE
        boostasm_SRC
        CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/asm/${ANDROID_ABI}/*.S)
add_library(boost STATIC ${boostasm_SRC})

set_target_properties(boost PROPERTIES LINKER_LANGUAGE CXX)

target_include_directories(boost PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/boost_1_83_0)
target_compile_options(boost PRIVATE -fexceptions -frtti)
```

----------------------------------------

TITLE: Configuring CMake Build for React Native ProgressBar Component
DESCRIPTION: This CMake script creates a library for the React Native ProgressBar component. It gathers source files, configures include directories, and links against required dependencies like glog, fbjni, folly, and various React Native renderer libraries. The build is specifically configured for Fabric architecture with pedantic warnings enabled.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/renderer/components/progressbar/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_progressbar_SRC CONFIGURE_DEPENDS android/react/renderer/components/progressbar/*.cpp)
add_library(rrc_progressbar OBJECT ${rrc_progressbar_SRC})

target_include_directories(rrc_progressbar
        PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/android/
)

target_link_libraries(rrc_progressbar
        glog
        fbjni
        folly_runtime
        glog_init
        react_codegen_rncore
        react_debug
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_uimanager
        reactnativejni
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_progressbar PRIVATE "Fabric")
target_compile_options(rrc_progressbar PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Defining Folly Runtime Source Files in CMake
DESCRIPTION: Lists all the source files that comprise the Folly runtime library, including core utilities, concurrency, containers, string manipulation, JSON parsing, and system-level functionality.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/folly/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: CMake
CODE:
```
SET(folly_runtime_SRC
        folly/Conv.cpp
        folly/Demangle.cpp
        folly/FileUtil.cpp
        folly/Format.cpp
        folly/ScopeGuard.cpp
        folly/SharedMutex.cpp
        folly/String.cpp
        folly/Unicode.cpp
        folly/concurrency/CacheLocality.cpp
        folly/container/detail/F14Table.cpp
        folly/detail/FileUtilDetail.cpp
        folly/detail/Futex.cpp
        folly/detail/SplitStringSimd.cpp
        folly/detail/UniqueInstance.cpp
        folly/hash/SpookyHashV2.cpp
        folly/json/dynamic.cpp
        folly/json/json_pointer.cpp
        folly/json/json.cpp
        folly/lang/CString.cpp
        folly/lang/SafeAssert.cpp
        folly/lang/ToAscii.cpp
        folly/memory/detail/MallocImpl.cpp
        folly/net/NetOps.cpp
        folly/portability/SysUio.cpp
        folly/synchronization/SanitizeThread.cpp
        folly/synchronization/ParkingLot.cpp
        folly/system/AtFork.cpp
        folly/system/ThreadId.cpp)
```

----------------------------------------

TITLE: Adding Include Directories CMake
DESCRIPTION: Adds the directory specified by the REACT_COMMON_DIR variable to the include paths for the 'react_performance_timeline' target. The PUBLIC keyword means this include directory is also propagated to targets that link against 'react_performance_timeline'.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/performance/timeline/CMakeLists.txt#_snippet_7

LANGUAGE: CMake
CODE:
```
target_include_directories(react_performance_timeline PUBLIC ${REACT_COMMON_DIR})
```

----------------------------------------

TITLE: Setting CMake Minimum Version and Verbose Output
DESCRIPTION: Defines the minimum required CMake version and enables verbose output during the build process.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)
```

----------------------------------------

TITLE: Linking to Feature Flags System Documentation in Markdown
DESCRIPTION: This code snippet shows how to create a link to the specific Feature Flags system documentation within the React Native project using Markdown syntax. It helps developers navigate to more detailed information about the feature flags implementation.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/featureflags/__docs__/README.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
- [Feature Flags system](../../../src/private/featureflags/__docs__/README.md)
```

----------------------------------------

TITLE: Configuring CMake for React Native DevTools Runtime Settings Module
DESCRIPTION: This CMake snippet sets up the build configuration for the React Native DevTools Runtime Settings module. It defines the minimum CMake version, enables verbose output, includes React Native flags, and creates a library target with specific compilation options.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/nativemodule/devtoolsruntimesettings/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_devtoolsruntimesettings_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_devtoolsruntimesettings OBJECT ${react_nativemodule_devtoolsruntimesettings_SRC})

target_include_directories(react_nativemodule_devtoolsruntimesettings PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_devtoolsruntimesettings
        react_devtoolsruntimesettingscxx
)
target_compile_reactnative_options(react_nativemodule_devtoolsruntimesettings PRIVATE "ReactNative")
target_compile_options(react_nativemodule_devtoolsruntimesettings PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Extending Error Message for RCTFatalException on iOS
DESCRIPTION: Improves error reporting by extending the reason message for RCTFatalException on iOS.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_22

LANGUAGE: Objective-C
CODE:
```
Extend reason message for `RCTFatalException` (#22532) ([2831d9ef61](https://github.com/facebook/react-native/commit/2831d9ef614280d08699f3134eeaeda84c30234e) by [@zackzachariah](https://github.com/zackzachariah))
```

----------------------------------------

TITLE: Setting Minimum CMake Version CMake
DESCRIPTION: Specifies the minimum required version of CMake to build the project. Ensures compatibility with necessary features and commands used in the script.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/react/performance/timeline/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
```

----------------------------------------

TITLE: Commenting on Cross-Origin Security Issue in React Native
DESCRIPTION: This comment highlights a security concern where the getUserInfo() function is being called from a different origin than the config URL. This could potentially lead to unauthorized access or data leakage if not properly handled.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/federatedAuthUserInfoRequestNotSameOrigin.md#2025-04-22_snippet_0

LANGUAGE: Markdown
CODE:
```
# getUserInfo() caller is not same origin as the config URL.
```

----------------------------------------

TITLE: Setting Up Include Directories for Yoga Core
DESCRIPTION: Configures the include directories for the Yoga Core library, both for build and install interfaces.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactCommon/yoga/yoga/CMakeLists.txt#2025-04-22_snippet_4

LANGUAGE: CMake
CODE:
```
target_include_directories(yogacore
    PUBLIC
    $<BUILD_INTERFACE:${YOGA_ROOT}>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include/yoga>)
```

----------------------------------------

TITLE: Adding componentControllerClass to CKComponent for RCTSurface in Objective-C
DESCRIPTION: Adds an explicit componentControllerClass to CKComponent for use with RCTSurface, likely to improve component handling.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_50

LANGUAGE: Objective-C
CODE:
```
ab972708a8dcc9b37c19843f2fe134928a7c7a3f
```

----------------------------------------

TITLE: Android Clang Isnan Definition
DESCRIPTION: Explicit definition of isnan for Android clang-5 to match gcc's default behavior.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_55

LANGUAGE: cpp
CODE:
```
#define isnan __builtin_isnan
```

----------------------------------------

TITLE: Linking to React Native Feature Flags Documentation in Markdown
DESCRIPTION: This code snippet demonstrates how to create a link to the main React Native documentation page using Markdown syntax. It provides a quick way for developers to navigate back to the project's home page.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/featureflags/__docs__/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
[🏠 Home](../../../../../__docs__/README.md)
```

----------------------------------------

TITLE: Updating Yoga Logical Operator in C++
DESCRIPTION: Uses logical operator instead of bit operation in Yoga layout engine.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-070.md#2025-04-22_snippet_1

LANGUAGE: C++
CODE:
```
Use logical operator instead of bit operation in Yoga
```

----------------------------------------

TITLE: Optimizing RCTShadowView for RCTSurface performance in Objective-C
DESCRIPTION: Makes changes to RCTShadowView to increase the performance of RCTSurface, improving rendering efficiency.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_51

LANGUAGE: Objective-C
CODE:
```
f96f9c5fd692000f561e87cba68642ef7daf43e7
```

----------------------------------------

TITLE: Adding methods to control dirty propagation in Objective-C
DESCRIPTION: Introduces designated methods to control dirty propagation in the React Native rendering process.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_52

LANGUAGE: Objective-C
CODE:
```
af226ef949f3a21ef68a6e6b9fbd4cc06fa05152
```

----------------------------------------

TITLE: Configuring Double-Conversion Library for React Native with CMake
DESCRIPTION: Sets up the CMake build configuration for the double-conversion library. It creates a static library from multiple source files, configures include directories, and applies specific compiler options including React Native flags and warning suppressions.
SOURCE: https://github.com/facebook/react-native/blob/main/packages/react-native/ReactAndroid/src/main/jni/third-party/double-conversion/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(double-conversion
        STATIC
        double-conversion/bignum.cc
        double-conversion/bignum-dtoa.cc
        double-conversion/cached-powers.cc
        double-conversion/diy-fp.cc
        double-conversion/double-conversion.cc
        double-conversion/fast-dtoa.cc
        double-conversion/fixed-dtoa.cc
        double-conversion/strtod.cc)

target_include_directories(double-conversion PUBLIC .)

target_compile_reactnative_options(double-conversion PRIVATE)
target_compile_options(double-conversion PRIVATE -Wno-unused-variable -Wno-unused-local-typedefs)
```

----------------------------------------

TITLE: Commit Reference in Markdown
DESCRIPTION: Example of how commit references are formatted in the changelog, showing links to specific commits and contributors.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
[@Kudo](https://github.com/Kudo) for his work on fixing this via [557989a86f](https://github.com/facebook/react-native/commit/557989a86f8730113393ed229927d607a478e524)
```

----------------------------------------

TITLE: Executing Publish NPM Script in Node.js
DESCRIPTION: This command prepares release artifacts and publishes the react-native package to npm. It is part of the automated release process for React Native.
SOURCE: https://github.com/facebook/react-native/blob/main/scripts/releases-ci/README.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
### `publish-npm`

Prepares release artifacts and publishes the `react-native` package to npm.
```

----------------------------------------

TITLE: Changelog Version Headers in Markdown
DESCRIPTION: Version headers for React Native changelogs showing markdown formatting for major version sections.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Changelog (pre 0.60)

## v0.59.10

## v0.59.9

## v0.59.8

## v0.59.7

## v0.59.6

## v0.59.5

## v0.59.4
```

----------------------------------------

TITLE: Adding Back Deprecated getParent Methods in Yoga for Android
DESCRIPTION: This Android-specific addition reintroduces deprecated getParent methods in Yoga to maintain API compatibility.
SOURCE: https://github.com/facebook/react-native/blob/main/CHANGELOG-pre-060.md#2025-04-22_snippet_39

LANGUAGE: Java
CODE:
```
// Yoga: Add back deprecated getParent methods for non-breaking API change
// Commit: c3c5c3cbce24a31f73ae6339e377ee76ca6401ad
```