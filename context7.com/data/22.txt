TITLE: General youtube-dl Command Syntax
DESCRIPTION: This snippet shows the basic command-line structure for using youtube-dl. You invoke the program followed by any desired options and one or more video URLs.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
youtube-dl [OPTIONS] URL [URL...]
```

----------------------------------------

TITLE: Initializing YoutubeDL Instance - Python
DESCRIPTION: This snippet demonstrates how to create an instance of the `YoutubeDL` class and add the default information extractors, which are necessary for processing various URLs. This is typically the first step before attempting to extract information or download videos.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/docs/module_guide.rst#_snippet_0

LANGUAGE: python
CODE:
```
from youtube_dl import YoutubeDL
ydl = YoutubeDL()
ydl.add_default_info_extractors()
```

----------------------------------------

TITLE: Extracting Single Video Info - Python
DESCRIPTION: This snippet demonstrates calling the `extract_info` method with a video URL and `download=False` to retrieve video metadata as a dictionary. It then shows examples of accessing common fields like 'title', 'height', and 'width' from the resulting `info` dictionary.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/docs/module_guide.rst#_snippet_1

LANGUAGE: python
CODE:
```
info = ydl.extract_info('http://www.youtube.com/watch?v=BaW_jenozKc', download=False)
```

LANGUAGE: python
CODE:
```
info['title']
```

LANGUAGE: python
CODE:
```
info['height'], info['width']
```

----------------------------------------

TITLE: Safely Extracting JSON Value with traverse_obj
DESCRIPTION: Shows how to safely extract a potentially nested value (`summary`) from a parsed JSON structure (`response`) using the `traverse_obj` utility function. It specifies the path as a tuple and ensures the final extracted value is of type `compat_str` using `T(compat_str)`, returning `None` if any part of the path is missing or the type is incorrect.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_64

LANGUAGE: python
CODE:
```
description = traverse_obj(response, ('result', 'video', 0, 'summary', T(compat_str)))
```

----------------------------------------

TITLE: Embedding youtube-dl in Python (Audio Extraction with Hooks)
DESCRIPTION: A more complete example showing how to configure youtube-dl embedding with custom options. It includes a custom logger to handle output (only printing errors) and a progress hook to notify upon download completion. The options are set to extract audio as an MP3. Requires `youtube-dl` and `ffmpeg`.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_69

LANGUAGE: python
CODE:
```
from __future__ import unicode_literals
import youtube_dl


class MyLogger(object):
    def debug(self, msg):
        pass

    def warning(self, msg):
        pass

    def error(self, msg):
        print(msg)


def my_hook(d):
    if d['status'] == 'finished':
        print('Done downloading, now converting ...')


ydl_opts = {
    'format': 'bestaudio/best',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
    'logger': MyLogger(),
    'progress_hooks': [my_hook],
}
with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    ydl.download(['https://www.youtube.com/watch?v=BaW_jenozKc'])
```

----------------------------------------

TITLE: Accessing Optional Dictionary Key (Correct) | Python
DESCRIPTION: Demonstrates the correct method for accessing an optional key ('summary') from a dictionary ('meta') using the .get() method. This prevents a KeyError if the key is missing, returning None or a specified default instead.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_11

LANGUAGE: Python
CODE:
```
description = meta.get('summary')  # correct
```

----------------------------------------

TITLE: Download YouTube Playlist to Directory Bash
DESCRIPTION: Downloads videos from a YouTube playlist into a directory named after the playlist. Files are named using the playlist index and video title.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_12

LANGUAGE: bash
CODE:
```
$ youtube-dl -o '%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re
```

----------------------------------------

TITLE: Embedding youtube-dl in Python (Basic Download)
DESCRIPTION: Shows the minimal code required to use youtube-dl as a Python library. It imports the library, creates a YoutubeDL instance with default options, and downloads a video using its URL. Requires the `youtube-dl` library installed.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_68

LANGUAGE: python
CODE:
```
from __future__ import unicode_literals
import youtube_dl

ydl_opts = {}
with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    ydl.download(['https://www.youtube.com/watch?v=BaW_jenozKc'])
```

----------------------------------------

TITLE: Install or Update youtube-dl with pip
DESCRIPTION: Use the pip package manager to install or update youtube-dl. The `-H` flag is often used with `sudo` to maintain the user's home directory environment variables, and `--upgrade` ensures the latest version is installed if it's already present.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
sudo -H pip install --upgrade youtube-dl
```

----------------------------------------

TITLE: Providing Fallback for Mandatory Field | Python
DESCRIPTION: Shows how to add resilience for a mandatory field like 'title' by attempting to extract it from multiple sources. It first tries 'meta.get(\'title\')' and falls back to '_og_search_title' if the first attempt fails.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_16

LANGUAGE: Python
CODE:
```
title = meta.get('title') or self._og_search_title(webpage)
```

----------------------------------------

TITLE: Example youtube-dl Configuration File
DESCRIPTION: This snippet shows an example of a youtube-dl configuration file, demonstrating how to place command-line options on separate lines. Lines starting with '#' are treated as comments. This allows setting default behaviors for youtube-dl runs.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_6

LANGUAGE: youtube-dl config
CODE:
```
# Lines starting with # are comments

# Always extract audio
-x

# Do not copy the mtime
--no-mtime

# Use this proxy
--proxy 127.0.0.1:3128

# Save all videos under Movies directory in your home directory
-o ~/Movies/%(title)s.%(ext)s
```

----------------------------------------

TITLE: Template for New Information Extractor (Python)
DESCRIPTION: Provides a basic Python class template extending `InfoExtractor` for creating a new site-specific extractor. It includes placeholders for the URL matching regex (`_VALID_URL`), a test case (`_TEST`) structure, and the core extraction logic within the `_real_extract` method, demonstrating the use of helper functions like `_match_id`, `_download_webpage`, and regex searches.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_41

LANGUAGE: python
CODE:
```
# coding: utf-8
from __future__ import unicode_literals

from .common import InfoExtractor


class YourExtractorIE(InfoExtractor):
    _VALID_URL = r'https?://(?:www\.)?yourextractor\.com/watch/(?P<id>[0-9]+)'
    _TEST = {
        'url': 'https://yourextractor.com/watch/42',
        'md5': 'TODO: md5 sum of the first 10241 bytes of the video file (use --test)',
        'info_dict': {
            'id': '42',
            'ext': 'mp4',
            'title': 'Video title goes here',
            'thumbnail': r're:^https?://.*\.jpg$',
            # TODO more properties, either as:
            # * A value
            # * MD5 checksum; start the string with md5:
            # * A regular expression; start the string with re:
            # * Any Python type (for example int or float)
        }
    }

    def _real_extract(self, url):
        video_id = self._match_id(url)
        webpage = self._download_webpage(url, video_id)

        # TODO more code goes here, for example ...
        title = self._html_search_regex(r'<h1>(.+?)</h1>', webpage, 'title')

        return {
            'id': video_id,
            'title': title,
            'description': self._og_search_description(webpage),
            'uploader': self._search_regex(r'<div[^>]+id="uploader"[^>]*>([^<]+)<', webpage, 'uploader', fatal=False),
            # TODO more properties (see youtube_dl/extractor/common.py)
        }
    
```

----------------------------------------

TITLE: New Site Extractor Template | Python
DESCRIPTION: Provides a basic template structure for a new youtube-dl information extractor class. It includes placeholders for the URL regex (_VALID_URL), a test case (_TEST), and the main extraction logic (_real_extract). Implement the _real_extract method to parse the webpage and return video information.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_5

LANGUAGE: Python
CODE:
```
# coding: utf-8
from __future__ import unicode_literals

from .common import InfoExtractor


class YourExtractorIE(InfoExtractor):
    _VALID_URL = r'https?://(?:www\.)?yourextractor\.com/watch/(?P<id>[0-9]+)'
    _TEST = {
        'url': 'https://yourextractor.com/watch/42',
        'md5': 'TODO: md5 sum of the first 10241 bytes of the video file (use --test)',
        'info_dict': {
            'id': '42',
            'ext': 'mp4',
            'title': 'Video title goes here',
            'thumbnail': r're:^https?://.*\.jpg$',
            # TODO more properties, either as:
            # * A value
            # * MD5 checksum; start the string with md5:
            # * A regular expression; start the string with re:
            # * Any Python type (for example int or float)
        }
    }

    def _real_extract(self, url):
        video_id = self._match_id(url)
        webpage = self._download_webpage(url, video_id)

        # TODO more code goes here, for example ...
        title = self._html_search_regex(r'<h1>(.+?)</h1>', webpage, 'title')

        return {
            'id': video_id,
            'title': title,
            'description': self._og_search_description(webpage),
            'uploader': self._search_regex(r'<div[^>]+id="uploader"[^>]*>([^<]+)<', webpage, 'uploader', fatal=False),
            # TODO more properties (see youtube_dl/extractor/common.py)
        }
    
```

----------------------------------------

TITLE: Safely Extracting and Processing JSON Lists with traverse_obj
DESCRIPTION: Shows advanced usage of `traverse_obj` to iterate through a nested list (`media`) in a JSON structure, safely extracting dictionaries (`fmt`) from each item using a path with `Ellipsis` and a dict projection. It then processes each extracted item, appending formatted data or using specific extractor methods (`_extract_m3u8_formats`), ensuring data types and handling missing values gracefully.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_67

LANGUAGE: python
CODE:
```
...+from ..utils import (
    determine_ext,
    int_or_none,
    T,
    traverse_obj,
    txt_or_none,
    url_or_none,
)+...
        ...
        info_dict = {}
        # extract title and description if valid and not empty
        info_dict.update(traverse_obj(media_json, {
            'title': ('title', T(txt_or_none)),
            'description': ('comment', T(txt_or_none)),
        }))

        # extract any recognisable media formats
        fmts = []
        # traverse into "media" list, extract `dict`s with desired keys
        for fmt in traverse_obj(media_json, ('media', Ellipsis, {
                'format_id': ('type', T(txt_or_none)),
                'url': ('url', T(url_or_none)),
                'width': ('size', T(int_or_none)), })):
            # bad `fmt` values were `None` and removed
            if 'url' not in fmt:
                continue
            fmt_url = fmt['url']  # known to be valid URL
            ext = determine_ext(fmt_url)
            if ext == 'm3u8':
                fmts.extend(self._extract_m3u8_formats(fmt_url, video_id, 'mp4', fatal=False))
            else:
                fmt['ext'] = ext
                fmts.append(fmt)

        # sort, raise if no formats
        self._sort_formats(fmts)

        info_dict['formats'] = fmts
        ...
```

----------------------------------------

TITLE: Handling URL Ampersands with Double Quotes (Windows)
DESCRIPTION: Illustrates how to correctly pass URLs containing special characters like ampersands to `youtube-dl` on Windows by enclosing the entire URL in double quotes. This is the standard way to handle special characters in the Windows command prompt and ensures the URL is passed as a single argument.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_32

LANGUAGE: Windows Command Prompt
CODE:
```
youtube-dl "https://www.youtube.com/watch?t=4&v=BaW_jenozKc"
```

----------------------------------------

TITLE: Downloading and Parsing JSON Data (Python)
DESCRIPTION: Demonstrates fetching content from a URL and parsing it as JSON using the `_download_json` helper method available in `InfoExtractor`. The parsed JSON is assigned to the `meta` variable.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_44

LANGUAGE: python
CODE:
```
meta = self._download_json(url, video_id)
```

----------------------------------------

TITLE: Generating youtube-dl Verbose Output (Shell)
DESCRIPTION: Shows how to run youtube-dl with the `-v` (verbose) flag to generate detailed debugging output required for bug reports. The snippet includes an example of the command and a sample of the expected output format.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ youtube-dl -v <your command line>
[debug] System config: []
[debug] User config: []
[debug] Command-line args: [u'-v', u'https://www.youtube.com/watch?v=BaW_jenozKcj']
[debug] Encodings: locale cp1251, fs mbcs, out cp866, pref cp1251
[debug] youtube-dl version 2015.12.06
[debug] Git HEAD: 135392e
[debug] Python version 2.6.6 - Windows-2003Server-5.2.3790-SP2
[debug] exe versions: ffmpeg N-75573-g1d0487f, ffprobe N-75573-g1d0487f, rtmpdump 2.4
[debug] Proxy map: {}
...
```

----------------------------------------

TITLE: Silently Extracting Optional Data with Regex (Python)
DESCRIPTION: Shows how to use `_search_regex` with the `default` parameter set to `None`. If the regular expression pattern is not found in the webpage, it returns the default value (`None`) without emitting a warning.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_48

LANGUAGE: python
CODE:
```
description = self._search_regex(
    r'<span[^>]+id="title"[^>]*>([^<]+)<',
    webpage, 'description', default=None)
```

----------------------------------------

TITLE: Displaying Verbose Debug Output (youtube-dl CLI)
DESCRIPTION: Illustrates the detailed output generated by the `youtube-dl` command-line tool when the `-v` (verbose) flag is used. This output includes system information, configuration, command-line arguments, version details, and other debugging data, crucial for reporting issues. It shows how to invoke the command and the typical format of the output.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_70

LANGUAGE: shell
CODE:
```
$ youtube-dl -v <your command line>
[debug] System config: []
[debug] User config: []
[debug] Command-line args: [u'-v', u'https://www.youtube.com/watch?v=BaW_jenozKcj']
[debug] Encodings: locale cp1251, fs mbcs, out cp866, pref cp1251
[debug] youtube-dl version 2015.12.06
[debug] Git HEAD: 135392e
[debug] Python version 2.6.6 - Windows-2003Server-5.2.3790-SP2
[debug] exe versions: ffmpeg N-75573-g1d0487f, ffprobe N-75573-g1d0487f, rtmpdump 2.4
[debug] Proxy map: {}
...
```

----------------------------------------

TITLE: Safely Accessing Optional Dictionary Key (Python)
DESCRIPTION: Illustrates the correct method for accessing a potentially optional key (`'summary'`) in a Python dictionary (`meta`) using the `.get()` method. If the key does not exist, `.get()` returns `None` instead of raising a `KeyError`, preventing extraction failure for non-critical data.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_45

LANGUAGE: python
CODE:
```
description = meta.get('summary')  # correct
```

----------------------------------------

TITLE: Collapsing Multiple Fallbacks into a List (Good)
DESCRIPTION: Shows the preferred method for handling multiple fallback values when searching for metadata using `_html_search_meta`. A list of potential keys (`og:description`, `description`, `twitter:description`) is provided to the function, which handles the fallback logic internally.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_60

LANGUAGE: python
CODE:
```
description = self._html_search_meta(
    ['og:description', 'description', 'twitter:description'],
    webpage, 'description', default=None)
```

----------------------------------------

TITLE: Downloading youtube-dl Playlists with Download Archive - Shell
DESCRIPTION: These commands illustrate the use of the `--download-archive` option to manage playlist downloads. The first run downloads the entire playlist and records video IDs in `archive.txt`. Subsequent runs using the same archive file will skip videos already recorded, downloading only new ones.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_36

LANGUAGE: Shell
CODE:
```
youtube-dl --download-archive archive.txt "https://www.youtube.com/playlist?list=PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re"
```

----------------------------------------

TITLE: Iterating Through Playlist Entries - Python
DESCRIPTION: This snippet shows how to access the list of videos contained within a playlist by accessing the 'entries' key in the extracted playlist dictionary. It iterates through the list and demonstrates accessing fields like 'playlist_index' and 'title' for each video entry.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/docs/module_guide.rst#_snippet_4

LANGUAGE: python
CODE:
```
for video in playlist['entries']:
    print('Video #%d: %s' % (video['playlist_index'], video['title']))
```

----------------------------------------

TITLE: Safely Extracting Multiple JSON Metadata Fields
DESCRIPTION: Illustrates using `traverse_obj` to safely access a nested object (`video`) within a JSON structure and then extracting multiple optional fields (`summary`, `durationMs`, `views`) using dictionary `.get()` and utility functions (`float_or_none`, `int_or_none`) for type conversion, providing default values or `None` on failure.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_66

LANGUAGE: python
CODE:
```
video = traverse_obj(response, ('result', 'video', 0, T(dict))) or {}
# formerly:
# video = try_get(response, lambda x: x['result']['video'][0], dict) or {}
description = video.get('summary')
duration = float_or_none(video.get('durationMs'), scale=1000)
view_count = int_or_none(video.get('views'))
```

----------------------------------------

TITLE: Download Channel Playlists to Directory Structure Bash
DESCRIPTION: Downloads all playlists from a YouTube channel/user, organizing them into a directory structure based on the uploader and playlist names.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_13

LANGUAGE: bash
CODE:
```
$ youtube-dl -o '%(uploader)s/%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' https://www.youtube.com/user/TheLinuxFoundation/playlists
```

----------------------------------------

TITLE: Selecting Preferred Formats Youtube-dl Bash
DESCRIPTION: Downloads the best quality video-only in MP4 and best audio-only in M4A, and merges them. If not available, it falls back to the best single file MP4, then the absolute best single file format available.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_17

LANGUAGE: bash
CODE:
```
$ youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'
```

----------------------------------------

TITLE: Cloning the youtube-dl Repository (bash)
DESCRIPTION: This bash command clones the forked youtube-dl repository from GitHub using the SSH protocol. Developers should replace `YOUR_GITHUB_USERNAME` with their actual GitHub username to clone their personal fork.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_39

LANGUAGE: bash
CODE:
```
git clone git@github.com:YOUR_GITHUB_USERNAME/youtube-dl.git
```

----------------------------------------

TITLE: Extracting Optional Data with Regex (Non-Fatal) | Python
DESCRIPTION: Extracts data from a webpage using a regular expression, but specifies fatal=False. If the pattern is not found, it will log a warning and continue execution instead of raising an error.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_13

LANGUAGE: Python
CODE:
```
description = self._search_regex(
    r'<span[^>]+id="title"[^>]*>([^<]+)<',
    webpage, 'description', fatal=False)
```

----------------------------------------

TITLE: Handling URL Ampersands with Single Quotes (Shell)
DESCRIPTION: Demonstrates how to protect URLs containing special shell characters like ampersands by enclosing the entire URL in single quotes when using `youtube-dl` in a shell environment. This prevents the shell from misinterpreting the characters and ensures the full URL is passed correctly to the program.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_30

LANGUAGE: Shell
CODE:
```
youtube-dl 'https://www.youtube.com/watch?t=4&v=BaW_jenozKc'
```

----------------------------------------

TITLE: Safely Extracting Optional Data with Regex (Python)
DESCRIPTION: Demonstrates using `_search_regex` with the `fatal=False` parameter to extract optional data from a webpage based on a regular expression. If the pattern is not found, it emits a warning and returns `None`, allowing the extraction to continue.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_47

LANGUAGE: python
CODE:
```
description = self._search_regex(
    r'<span[^>]+id="title"[^>]*>([^<]+)<',
    webpage, 'description', fatal=False)
```

----------------------------------------

TITLE: Download Series Season Episodes Bash
DESCRIPTION: Downloads episodes of a series season into a directory structure organized by series, season, and episode number/title. Uses double quotes, which is recommended for Windows batch files.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_15

LANGUAGE: bash
CODE:
```
$ youtube-dl -o "C:/MyVideos/%(series)s/%(season_number)s - %(season)s/%(episode_number)s - %(episode)s.%(ext)s" https://videomore.ru/kino_v_detalayah/5_sezon/367617
```

----------------------------------------

TITLE: Selecting Formats by Height Limit Youtube-dl Bash
DESCRIPTION: Downloads the best video format under or equal to 480p resolution and best audio, merging them. If suitable separate formats are not available, it falls back to the best single file format also under or equal to 480p.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_18

LANGUAGE: bash
CODE:
```
$ youtube-dl -f 'bestvideo[height<=480]+bestaudio/best[height<=480]'
```

----------------------------------------

TITLE: Extracting Playlist Info - Python
DESCRIPTION: This snippet demonstrates using `extract_info` to retrieve metadata for a playlist URL without downloading. It shows accessing the overall playlist title from the returned dictionary. Playlist information differs slightly from single video info.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/docs/module_guide.rst#_snippet_3

LANGUAGE: python
CODE:
```
playlist = ydl.extract_info('http://www.ted.com/playlists/13/open_source_open_world', download=False)
```

LANGUAGE: python
CODE:
```
playlist['title']
```

----------------------------------------

TITLE: Handling URL Ampersands with Backslash Escaping (Shell)
DESCRIPTION: Shows an alternative method for passing URLs with special shell characters like ampersands to `youtube-dl` by escaping the ampersand with a backslash. This prevents the shell from interpreting the special character and allows the URL to be processed correctly by youtube-dl.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_31

LANGUAGE: Shell
CODE:
```
youtube-dl https://www.youtube.com/watch?t=4\&v=BaW_jenozKc
```

----------------------------------------

TITLE: Providing Fallback for Mandatory Field (Python)
DESCRIPTION: Demonstrates providing a fallback mechanism when extracting a mandatory field (`'title'`). It first attempts to get the value using `meta.get('title')` and, if that returns `None`, it falls back to extracting the title using `_og_search_title` from the webpage.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_50

LANGUAGE: python
CODE:
```
title = meta.get('title') or self._og_search_title(webpage)
```

----------------------------------------

TITLE: Install youtube-dl with wget (UNIX/Linux/macOS)
DESCRIPTION: This snippet shows how to download and install the latest youtube-dl executable using the `wget` command, offering an alternative to curl. It requires superuser privileges (`sudo`) for installation and then sets the execute permissions.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
sudo wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl
sudo chmod a+rx /usr/local/bin/youtube-dl
```

----------------------------------------

TITLE: Install youtube-dl with curl (UNIX/Linux/macOS)
DESCRIPTION: This snippet demonstrates how to download and install the latest youtube-dl executable directly using the `curl` command. It requires superuser privileges (`sudo`) to write to `/usr/local/bin` and then makes the file executable.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
sudo chmod a+rx /usr/local/bin/youtube-dl
```

----------------------------------------

TITLE: Manually Installing Youtube-dl Bash
DESCRIPTION: Downloads the latest youtube-dl executable from the official source, saves it to `/usr/local/bin`, makes the file executable for all users, and updates the shell's command hash to recognize the new command path immediately. Requires root privileges (`sudo`).
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_26

LANGUAGE: bash
CODE:
```
sudo wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl
sudo chmod a+rx /usr/local/bin/youtube-dl
hash -r
```

----------------------------------------

TITLE: Downloading JSON Data | Python
DESCRIPTION: Fetch JSON data from a specified URL using the _download_json helper method, which handles the network request and JSON parsing.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_9

LANGUAGE: Python
CODE:
```
meta = self._download_json(url, video_id)
```

----------------------------------------

TITLE: Updating Youtube-dl Manually Sudo Bash
DESCRIPTION: Updates a manually installed version of youtube-dl using `sudo` to grant necessary root privileges, typically required to write the new executable to system directories like `/usr/local/bin`. This command is used on Linux/macOS systems where manual installation was done into a system path.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_28

LANGUAGE: bash
CODE:
```
sudo youtube-dl -U
```

----------------------------------------

TITLE: Downloading Separate Video and Audio Youtube-dl Bash
DESCRIPTION: Downloads the best video-only format and the best audio-only format as separate files without merging them. An output template is used to ensure unique filenames based on format ID.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_21

LANGUAGE: bash
CODE:
```
$ youtube-dl -f 'bestvideo,bestaudio' -o '%(title)s.f%(format_id)s.%(ext)s'
```

----------------------------------------

TITLE: Staging, Committing, and Pushing Changes | Shell
DESCRIPTION: Stage the modified extractor registration file and your new extractor file, create a Git commit with a descriptive message, and push the new branch to your remote GitHub repository.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_8

LANGUAGE: Shell
CODE:
```
$ git add youtube_dl/extractor/extractors.py
$ git add youtube_dl/extractor/yourextractor.py
$ git commit -m '[yourextractor] Add new extractor'
$ git push origin yourextractor
```

----------------------------------------

TITLE: Download Udemy Course with Chapters Bash
DESCRIPTION: Downloads a Udemy course into a specified directory (~/MyVideos), organizing videos by playlist (course) and chapter. Requires user login credentials.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_14

LANGUAGE: bash
CODE:
```
$ youtube-dl -u user -p password -o '~/MyVideos/%(playlist)s/%(chapter_number)s - %(chapter)s/%(title)s.%(ext)s' https://www.udemy.com/java-tutorial/
```

----------------------------------------

TITLE: Staging, Committing, and Pushing Changes (bash)
DESCRIPTION: These bash commands are used to stage the modified `extractors.py` and the new extractor file, create a git commit with a standardized message format, and push the local development branch to the remote GitHub repository.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_43

LANGUAGE: bash
CODE:
```
$ git add youtube_dl/extractor/extractors.py
$ git add youtube_dl/extractor/yourextractor.py
$ git commit -m '[yourextractor] Add new extractor'
$ git push origin yourextractor
```

----------------------------------------

TITLE: Running youtube-dl Tests - Python/Shell
DESCRIPTION: These commands demonstrate different ways to execute the test suite for the youtube-dl project. Developers can run all tests using `unittest discover`, run a specific test file, or use `nosetests` (or pynose for newer Python versions) to run tests.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_38

LANGUAGE: Shell
CODE:
```
python -m unittest discover
```

LANGUAGE: Shell
CODE:
```
python test/test_download.py
```

LANGUAGE: Shell
CODE:
```
nosetests
```

----------------------------------------

TITLE: Get Filename with Restricted Template Bash
DESCRIPTION: Shows the effect of the --restrict-filenames flag on the output filename when using a basic template, resulting in a simpler name with special characters replaced.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_11

LANGUAGE: bash
CODE:
```
$ youtube-dl --get-filename -o '%(title)s.%(ext)s' BaW_jenozKc --restrict-filenames
```

----------------------------------------

TITLE: Changing Directory and Creating New Branch (bash)
DESCRIPTION: These bash commands navigate into the cloned repository directory and create a new git branch specifically for developing the new extractor. The branch name `yourextractor` should be replaced with a descriptive name related to the site being added.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_40

LANGUAGE: bash
CODE:
```
cd youtube-dl
git checkout -b yourextractor
```

----------------------------------------

TITLE: Get Filename with Basic Template Bash
DESCRIPTION: Demonstrates using the --get-filename option with a basic output template '%(title)s.%(ext)s' to see the resulting filename, highlighting how special characters are handled by default.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_10

LANGUAGE: bash
CODE:
```
$ youtube-dl --get-filename -o '%(title)s.%(ext)s' BaW_jenozKc
```

----------------------------------------

TITLE: Extracting Optional Data with Regex (Default) | Python
DESCRIPTION: Extracts data from a webpage using a regular expression, providing a default value (None). If the pattern is not found, extraction fails silently, and the variable is set to the default value.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_14

LANGUAGE: Python
CODE:
```
description = self._search_regex(
    r'<span[^>]+id="title"[^>]*>([^<]+)<',
    webpage, 'description', default=None)
```

----------------------------------------

TITLE: Streaming youtube-dl Output to VLC Player - Shell
DESCRIPTION: This command demonstrates how to pipe the video stream directly from youtube-dl's standard output (`-o -`) to the VLC media player's standard input (`vlc -`), allowing you to watch the video as it downloads without saving it to a file. This requires VLC to be capable of reading from stdin.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_35

LANGUAGE: Shell
CODE:
```
youtube-dl -o - "https://www.youtube.com/watch?v=BaW_jenozKcj" | vlc -
```

----------------------------------------

TITLE: Running youtube-dl from Source as a Developer - Python/Shell
DESCRIPTION: This command shows how to execute the youtube-dl script directly using the Python interpreter's module execution capability. This method is suitable for developers who want to run the latest code without building or installing it globally.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_37

LANGUAGE: Shell
CODE:
```
python -m youtube_dl
```

----------------------------------------

TITLE: Accessing Optional Dictionary Key (Incorrect) | Python
DESCRIPTION: Illustrates the incorrect method for accessing an optional key ('summary') using direct dictionary access. This code will raise a KeyError and crash the extractor if the key is not present in the 'meta' dictionary.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_12

LANGUAGE: Python
CODE:
```
description = meta['summary']  # incorrect
```

----------------------------------------

TITLE: Unsafely Accessing Optional Dictionary Key (Python)
DESCRIPTION: Shows the incorrect way to access a potentially optional key (`'summary'`) in a Python dictionary using direct key access (`[]`). This approach will raise a `KeyError` if the key is missing, which can break the entire extraction process.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_46

LANGUAGE: python
CODE:
```
description = meta['summary']  # incorrect
```

----------------------------------------

TITLE: Downloading Video ID Starting with Hyphen (Using --)
DESCRIPTION: Explains how to download a video whose ID begins with a hyphen (-) by using the `--` argument separator before the ID. This tells `youtube-dl` to treat subsequent arguments as positional arguments (like the video ID) rather than options, resolving ambiguity.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_33

LANGUAGE: Shell
CODE:
```
youtube-dl -- -wNyEUrxzFU
```

----------------------------------------

TITLE: Running youtube-dl from Python Module (Shell)
DESCRIPTION: Instructs developers on how to execute youtube-dl directly from the Python source directory using the `-m` flag, eliminating the need for a separate build step.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_1

LANGUAGE: Shell
CODE:
```
python -m youtube_dl
```

----------------------------------------

TITLE: .netrc File Content Format for Authentication
DESCRIPTION: This snippet illustrates the format for adding credentials for specific extractors in the .netrc file. Each line starts with 'machine' followed by the extractor name, 'login', the username, 'password', and the password. This allows youtube-dl to authenticate automatically using the --netrc option.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_8

LANGUAGE: netrc
CODE:
```
machine youtube login myaccount@gmail.com password my_youtube_password
machine twitch login my_twitch_account_name password my_twitch_password
```

----------------------------------------

TITLE: Accessing Mandatory Dictionary Key | Python
DESCRIPTION: Demonstrates accessing a key ('title') that is considered mandatory for the extraction process. If this key is missing, it's acceptable for the extraction to fail as the required data is unavailable.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_15

LANGUAGE: Python
CODE:
```
title = meta['title']
```

----------------------------------------

TITLE: Create and Secure .netrc File (Linux/macOS)
DESCRIPTION: These shell commands demonstrate how to create a .netrc file in the user's home directory on Linux or macOS and set restrictive permissions so only the owner can read and write to it. This is crucial for securely storing login credentials.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_7

LANGUAGE: Shell
CODE:
```
touch $HOME/.netrc
chmod a-rwx,u+rw $HOME/.netrc
```

----------------------------------------

TITLE: Downloading Video ID Starting with Hyphen (Using Full URL)
DESCRIPTION: Provides an alternative method for downloading a video with an ID starting with a hyphen by providing the full YouTube URL enclosed in quotes. This avoids potential conflicts with option parsing as the ID is part of the standard URL format and the quotes protect special characters.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_34

LANGUAGE: Shell
CODE:
```
youtube-dl "https://www.youtube.com/watch?v=-wNyEUrxzFU"
```

----------------------------------------

TITLE: Running youtube-dl Test Suite (Shell)
DESCRIPTION: Provides common command-line examples for executing the youtube-dl test suite using standard Python testing frameworks like unittest or nosetests.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_2

LANGUAGE: Shell
CODE:
```
python -m unittest discover
python test/test_download.py
nosetests
```

----------------------------------------

TITLE: Running Specific Extractor Test | Shell
DESCRIPTION: Execute the test case defined within your new extractor class to verify its functionality. This command targets a specific test method within the test suite.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_6

LANGUAGE: Shell
CODE:
```
python test/test_download.py TestDownload.test_YourExtractor
```

----------------------------------------

TITLE: Stream Video to Stdout Bash
DESCRIPTION: Demonstrates using -o - to pipe the downloaded video content directly to standard output instead of saving it to a file.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_16

LANGUAGE: bash
CODE:
```
$ youtube-dl -o - BaW_jenozKc
```

----------------------------------------

TITLE: Extracting Data with Flexible Python Regex (Handles Quotes)
DESCRIPTION: Presents a more flexible regex for extracting text from an HTML `<span>` tag with `class="title"` using `_search_regex`. It uses backreferences (`\1`) to match either single or double quotes around the `title` class name, making it tolerant to quote style variations in the HTML.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_54

LANGUAGE: python
CODE:
```
title = self._search_regex(
    r'<span[^>]+class=(["\'])title\1[^>]*>(?P<title>[^<]+)',
    webpage, 'title', group='title')
```

----------------------------------------

TITLE: Checking Code with Flake8 | Shell
DESCRIPTION: Run the Flake8 linter against your new extractor file to ensure it complies with youtube-dl's coding conventions and style guidelines.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_7

LANGUAGE: Shell
CODE:
```
$ flake8 youtube_dl/extractor/yourextractor.py
```

----------------------------------------

TITLE: Extracting Data with Relaxed Python Regex (Basic)
DESCRIPTION: Shows how to extract text from an HTML `<span>` tag with `class="title"` using `_search_regex`. The regex is relaxed by using `[^>]+` to match any attributes between the tag name and the class, and `[^>]*` after the class, avoiding reliance on specific attribute values like `style`.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_53

LANGUAGE: python
CODE:
```
title = self._search_regex(
    r'<span[^>]+class="title"[^>]*>([^<]+)', webpage, 'title')
```

----------------------------------------

TITLE: Updating Youtube-dl Manually Bash
DESCRIPTION: Updates a manually installed version of youtube-dl by downloading the latest executable from the official server and replacing the existing one. This command is used after the manual installation method.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_27

LANGUAGE: bash
CODE:
```
youtube-dl -U
```

----------------------------------------

TITLE: Accessing Mandatory Dictionary Key (Python)
DESCRIPTION: Illustrates accessing a mandatory metadata field (`'title'`) from a dictionary (`meta`) using direct key access (`[]`). For mandatory fields, failure to find the key signifies a critical error, and allowing a `KeyError` is expected.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_49

LANGUAGE: python
CODE:
```
title = meta['title']
```

----------------------------------------

TITLE: Selecting Formats by File Size Limit Youtube-dl Bash
DESCRIPTION: Downloads the best single file format available, but only if its known filesize is less than 50 Megabytes. Formats without a known filesize may be excluded depending on the operator.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_19

LANGUAGE: bash
CODE:
```
$ youtube-dl -f 'best[filesize<50M]'
```

----------------------------------------

TITLE: Filtering Videos by Relative Date Youtube-dl Bash
DESCRIPTION: Filters the list of videos to download, including only those that were uploaded within the last 6 months relative to the current date (`now`).
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_22

LANGUAGE: bash
CODE:
```
$ youtube-dl --dateafter now-6months
```

----------------------------------------

TITLE: Filtering Videos by Date Range Youtube-dl Bash
DESCRIPTION: Filters the list of videos to download, including only those that were uploaded within the specified date range, inclusive of the start date (20000101) and end date (20091231).
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_24

LANGUAGE: bash
CODE:
```
$ youtube-dl --dateafter 20000101 --datebefore 20091231
```

----------------------------------------

TITLE: Using Non-Capturing Groups in Python Regex
DESCRIPTION: Demonstrates the correct use of a non-capturing group (?:...) in a Python regular expression. The outer group around `id|ID` is marked as non-capturing because its value is not needed, while the inner group capturing the ID is named `id` (P<id>) for later use.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_51

LANGUAGE: python
CODE:
```
r'(?:id|ID)=(?P<id>\d+)'
```

----------------------------------------

TITLE: Selecting Formats by Protocol Youtube-dl Bash
DESCRIPTION: Downloads the best video/audio (merged) or the best single file format, but only if the protocol used for the download starts with "http", which typically includes HTTP and HTTPS.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_20

LANGUAGE: bash
CODE:
```
$ youtube-dl -f '(bestvideo+bestaudio/best)[protocol^=http]'
```

----------------------------------------

TITLE: Uninstalling Youtube-dl Apt-Get Bash
DESCRIPTION: Removes the `youtube-dl` package that was installed using the `apt-get` package manager, commonly found on Debian/Ubuntu based Linux distributions. The `-y` flag automatically confirms removal.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_25

LANGUAGE: bash
CODE:
```
sudo apt-get remove -y youtube-dl
```

----------------------------------------

TITLE: Set HOME Environment Variable (Windows)
DESCRIPTION: This command shows how to set the HOME environment variable on Windows to the user's profile directory. This is often necessary for youtube-dl and other tools to locate configuration files like .netrc when running on Windows.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_9

LANGUAGE: Batch
CODE:
```
set HOME=%USERPROFILE%
```

----------------------------------------

TITLE: Changing Directory and Creating New Branch | Shell
DESCRIPTION: Navigate into the cloned repository directory and create a new Git branch specifically for your new extractor. Replace 'yourextractor' with a descriptive name for your site.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_4

LANGUAGE: Shell
CODE:
```
cd youtube-dl
git checkout -b yourextractor
```

----------------------------------------

TITLE: Cloning youtube-dl Repository | Shell
DESCRIPTION: Clone your forked youtube-dl repository to your local machine using the Git command. Replace YOUR_GITHUB_USERNAME with your actual GitHub username.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_3

LANGUAGE: Shell
CODE:
```
git clone git@github.com:YOUR_GITHUB_USERNAME/youtube-dl.git
```

----------------------------------------

TITLE: Filtering Videos by Absolute Date Youtube-dl Bash
DESCRIPTION: Filters the list of videos to download, including only those that were uploaded on the specific absolute date January 1, 1970, provided in the `YYYYMMDD` format.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_23

LANGUAGE: bash
CODE:
```
$ youtube-dl --date 19700101
```

----------------------------------------

TITLE: Maintaining Long String Literals (Correct)
DESCRIPTION: Shows the correct way to handle a long string literal, such as a URL, in Python code. The entire string is kept on a single line even if it exceeds the soft line length limit, prioritizing readability and ease of copying.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_56

LANGUAGE: python
CODE:
```
'https://www.youtube.com/watch?v=FqZTN594JQw&list=PLMYEtVRpaqY00V9W81Cwmzp6N6vZqfUKD4'
```

----------------------------------------

TITLE: Misplacing Trailing Parentheses
DESCRIPTION: Illustrates incorrect formatting where the trailing closing parenthesis `)` is placed on a new line after the last argument and a comma. This violates the style guide's preference for compact formatting.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_63

LANGUAGE: python
CODE:
```
    lambda x: x['ResultSet']['Result'][0]['VideoUrlSet']['VideoUrl'],
    list,
)
```

----------------------------------------

TITLE: Placing Trailing Parentheses Correctly
DESCRIPTION: Demonstrates the correct formatting for function calls or expressions that span multiple lines. The closing parenthesis `)` is placed on the same line as the last argument.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_62

LANGUAGE: python
CODE:
```
    lambda x: x['ResultSet']['Result'][0]['VideoUrlSet']['VideoUrl'],
    list)
```

----------------------------------------

TITLE: Accessing Video URL from Info - Python
DESCRIPTION: After extracting video information using `extract_info`, this snippet shows how to access the direct video stream URL by accessing the 'url' key in the returned info dictionary. This URL can be used for playing or downloading the video.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/docs/module_guide.rst#_snippet_2

LANGUAGE: python
CODE:
```
info['url']
```

----------------------------------------

TITLE: Updating Youtube-dl Pip Bash
DESCRIPTION: Updates the `youtube-dl` package to its latest version when it was installed using the Python package manager `pip`. `sudo` may be required depending on the pip installation method and location.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_29

LANGUAGE: bash
CODE:
```
sudo pip install -U youtube-dl
```

----------------------------------------

TITLE: Install youtube-dl with Homebrew (macOS)
DESCRIPTION: This command uses the Homebrew package manager, popular on macOS, to install youtube-dl. It simplifies the installation process on macOS by handling dependencies and system paths automatically.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_3

LANGUAGE: Bash
CODE:
```
brew install youtube-dl
```

----------------------------------------

TITLE: Example JSON Data Structure | JSON
DESCRIPTION: Illustrates a hypothetical JSON object structure containing a 'summary' field, often retrieved from an API or embedded data source.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/CONTRIBUTING.md#_snippet_10

LANGUAGE: JSON
CODE:
```
{
    ...
    "summary": "some fancy summary text",
    ...
}
```

----------------------------------------

TITLE: Install youtube-dl with MacPorts (macOS)
DESCRIPTION: For macOS users who prefer MacPorts, this command installs youtube-dl via the MacPorts package management system. It typically requires superuser privileges (`sudo`) for installation into system directories.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
sudo port install youtube-dl
```

----------------------------------------

TITLE: Checking Code Style with flake8 (bash)
DESCRIPTION: This bash command executes the flake8 linter against the newly created Python extractor file to check for style guide violations and potential code errors, ensuring compliance with project conventions.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_42

LANGUAGE: bash
CODE:
```
$ flake8 youtube_dl/extractor/yourextractor.py
```

----------------------------------------

TITLE: Avoiding Brittle Regex Matching Specific Attributes
DESCRIPTION: Demonstrates an incorrect and brittle approach to extracting data using `_search_regex`. The regex hardcodes the exact value of the `style` attribute, making it prone to breaking if the HTML structure or attribute values change.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_55

LANGUAGE: python
CODE:
```
title = self._search_regex(
    r'<span style="position: absolute; left: 910px; width: 90px; float: right; z-index: 9999;" class="title">(.*?)</span>',
    webpage, 'title', group='title')
```

----------------------------------------

TITLE: Avoiding Unnecessary Capturing Groups in Python Regex
DESCRIPTION: Illustrates an incorrect use of a regular expression in Python where the outer group `(id|ID)` is a capturing group. This group captures the literal 'id' or 'ID' but is not used later, making the capturing unnecessary and potentially less efficient.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_52

LANGUAGE: python
CODE:
```
r'(id|ID)=(?P<id>\d+)'
```

----------------------------------------

TITLE: Extracting Variables Used Once (Incorrect)
DESCRIPTION: Illustrates an incorrect approach where a variable (`TITLE_RE`) holding a regex pattern is defined far from where it is used. This separation makes the code flow less clear, as the reader has to search for the variable's definition.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_59

LANGUAGE: python
CODE:
```
TITLE_RE = r'<title>([^<]+)</title>'
# ...some lines of code...
title = self._html_search_regex(TITLE_RE, webpage, 'title')
```

----------------------------------------

TITLE: Splitting Long String Literals (Incorrect)
DESCRIPTION: Illustrates an incorrect way to handle a long string literal in Python code. The string is split across multiple lines using implicit string concatenation to fit within a line limit, which makes the code harder to read and copy.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_57

LANGUAGE: python
CODE:
```
'https://www.youtube.com/watch?v=FqZTN594JQw&list='
'PLMYEtVRpaqY00V9W81Cwmzp6N6vZqfUKD4'
```

----------------------------------------

TITLE: Handling Multiple Fallbacks with 'or' (Unwieldy)
DESCRIPTION: Illustrates an unwieldy way to handle multiple fallback values by chaining function calls with `or`. This approach becomes verbose and harder to read as the number of fallbacks increases.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_61

LANGUAGE: python
CODE:
```
description = (
    self._og_search_description(webpage, default=None)
    or self._html_search_meta('description', webpage, default=None)
    or self._html_search_meta('twitter:description', webpage, default=None))
```

----------------------------------------

TITLE: Using Inline Variables for Single Use (Correct)
DESCRIPTION: Demonstrates the correct approach to using a variable (a regex pattern) that is only used once. The variable is defined and used immediately within the function call (`_html_search_regex`), maintaining the linear flow of code execution.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_58

LANGUAGE: python
CODE:
```
title = self._html_search_regex(r'<title>([^<]+)</title>', webpage, 'title')
```

----------------------------------------

TITLE: Safely Extracting JSON Value with try_get (Older)
DESCRIPTION: Demonstrates the older `try_get` utility function for safely extracting a nested value (`summary`) from a parsed JSON structure (`response`). It uses a lambda function to specify the path and requires a type or transformation as the last argument, returning `None` on failure.
SOURCE: https://github.com/ytdl-org/youtube-dl/blob/master/README.md#_snippet_65

LANGUAGE: python
CODE:
```
description = try_get(response, lambda x: x['result']['video'][0]['summary'], compat_str)
```