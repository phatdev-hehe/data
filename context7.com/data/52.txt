TITLE: Installing Puppeteer via npm
DESCRIPTION: Installs the main `puppeteer` package using npm. This package is a product for browser automation and automatically downloads a compatible browser binary (Chrome for Testing) by default upon installation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/installation.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npm i puppeteer
```

----------------------------------------

TITLE: Installing Puppeteer via NPM
DESCRIPTION: Command to install Puppeteer in a project. This will automatically download Chrome for Testing and chrome-headless-shell binary.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/installation.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm i puppeteer
```

----------------------------------------

TITLE: Launching Puppeteer Browser and Creating Page (TypeScript)
DESCRIPTION: This snippet demonstrates how to launch a new browser instance using Puppeteer, create a new page within that browser, navigate to a URL, and then close the browser. It shows a basic workflow for using the Browser and Page objects.
Dependencies: puppeteer library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://example.com');
await browser.close();
```

----------------------------------------

TITLE: Installing Puppeteer npm Package (Bash)
DESCRIPTION: Provides commands to install the Puppeteer library using npm or yarn. The first command installs the full package including a compatible browser, while the second installs the core library without the browser dependency. This is the first step to using Puppeteer in a project and requires npm or yarn to be installed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm i puppeteer # Downloads compatible Chrome during installation.
npm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.
```

----------------------------------------

TITLE: Using ElementHandle to interact with a DOM element in Puppeteer
DESCRIPTION: Demonstrates how to launch a Puppeteer browser, navigate to a page, select an element using `page.$()`, and interact with it (e.g., click). Shows the basic usage of an `ElementHandle` obtained from a selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/index.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  const hrefElement = await page.$('a');
  await hrefElement.click();
  // ...
})();
```

----------------------------------------

TITLE: Launching Browser Instance with Puppeteer in TypeScript
DESCRIPTION: Function signature for launching a new browser instance using Puppeteer. It accepts optional launch options and returns a Promise that resolves to a Browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.launch.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
launch: (options?: PuppeteerCore.LaunchOptions) => Promise<PuppeteerCore.Browser>;
```

----------------------------------------

TITLE: Automating Web Search and Content Extraction with Puppeteer in TypeScript
DESCRIPTION: This code snippet demonstrates how to use Puppeteer to automate a web search on developer.chrome.com, click on the first result, and extract the title of the blog post. It showcases browser launching, page navigation, element interaction, and text extraction.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/getting-started.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  // Launch the browser and open a new blank page
  const browser = await puppeteer.launch();
  const page = await browser.newPage();

  // Navigate the page to a URL
  await page.goto('https://developer.chrome.com/');

  // Set screen size
  await page.setViewport({width: 1080, height: 1024});

  // Type into search box
  await page.type('.devsite-search-field', 'automate beyond recorder');

  // Wait and click on first result
  const searchResultSelector = '.devsite-result-item-link';
  await page.waitForSelector(searchResultSelector);
  await page.click(searchResultSelector);

  // Locate the full title with a unique string
  const textSelector = await page.waitForSelector(
    'text/Customize and automate',
  );
  const fullTitle = await textSelector?.evaluate(el => el.textContent);

  // Print the full title
  console.log('The title of this blog post is "%s".', fullTitle);

  await browser.close();
})();
```

----------------------------------------

TITLE: Searching and Extracting Text with Puppeteer in TypeScript
DESCRIPTION: This snippet demonstrates how to use Puppeteer to automate a browser task. It launches a browser, navigates to a website, types into a search field, clicks the first search result, waits for a specific element to appear, extracts its text content, and prints it to the console. It requires the 'puppeteer' library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/getting-started.md#_snippet_0

LANGUAGE: ts
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  // Launch the browser and open a new blank page
  const browser = await puppeteer.launch();
  const page = await browser.newPage();

  // Navigate the page to a URL
  await page.goto('https://developer.chrome.com/');

  // Set screen size
  await page.setViewport({width: 1080, height: 1024});

  // Type into search box
  await page.type('.devsite-search-field', 'automate beyond recorder');

  // Wait and click on first result
  const searchResultSelector = '.devsite-result-item-link';
  await page.waitForSelector(searchResultSelector);
  await page.click(searchResultSelector);

  // Locate the full title with a unique string
  const textSelector = await page.waitForSelector(
    'text/Customize and automate',
  );
  const fullTitle = await textSelector?.evaluate(el => el.textContent);

  // Print the full title
  console.log('The title of this blog post is "%s".', fullTitle);

  await browser.close();
})();
```

----------------------------------------

TITLE: Launching Browser and Navigating with PuppeteerNode
DESCRIPTION: Provides a typical asynchronous example of using PuppeteerNode to launch a browser, create a new page, navigate to a URL, and close the browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteernode.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();
```

----------------------------------------

TITLE: Clicking Element and Waiting for Navigation (TypeScript)
DESCRIPTION: Illustrates the correct pattern using Promise.all to simultaneously click an element within a frame and wait for a navigation event to complete, preventing potential race conditions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  frame.click(selector, clickOptions),
]);
```

----------------------------------------

TITLE: Launching a Browser with Puppeteer in TypeScript
DESCRIPTION: This snippet demonstrates how to launch a browser instance using Puppeteer and create a new page. It's the typical starting point for Puppeteer automation scripts.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/browser-management.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

// ...
```

----------------------------------------

TITLE: Creating Page, Navigating, and Screenshotting with Puppeteer (Node.js)
DESCRIPTION: This example demonstrates the basic workflow of using Puppeteer. It launches a browser instance, creates a new page, navigates to a specified URL, takes a screenshot, and then closes the browser. This is a common pattern for web scraping or testing.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.md#_snippet_0

LANGUAGE: ts
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  await page.screenshot({path: 'screenshot.png'});
  await browser.close();
})();
```

----------------------------------------

TITLE: Launching Browser and Creating Page (TypeScript)
DESCRIPTION: Demonstrates how to launch a new browser instance using Puppeteer, create a new page within that browser, navigate to a URL, and then close the browser. This is a basic workflow for automating web interactions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://example.com');
await browser.close();
```

----------------------------------------

TITLE: Performing Basic Web Automation with Puppeteer (TypeScript)
DESCRIPTION: This script demonstrates fundamental Puppeteer operations: launching a browser, opening a new page, navigating to a URL, setting viewport size, interacting with page elements using locators (typing, clicking), extracting text, and closing the browser. It requires the Puppeteer library to be installed and assumes an asynchronous context (`await`). The script implicitly depends on the structure of the target website for its selectors.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/index.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';
// Or import puppeteer from 'puppeteer-core';

// Launch the browser and open a new blank page
const browser = await puppeteer.launch();
const page = await browser.newPage();

// Navigate the page to a URL.
await page.goto('https://developer.chrome.com/');

// Set screen size.
await page.setViewport({width: 1080, height: 1024});

// Type into search box using accessible input name.
await page.locator('aria/Search').fill('automate beyond recorder');

// Wait and click on first result.
await page.locator('.devsite-result-item-link').click();

// Locate the full title with a unique string.
const textSelector = await page
  .locator('text/Customize and automate')
  .waitHandle();
const fullTitle = await textSelector?.evaluate(el => el.textContent);

// Print the full title.
console.log('The title of this blog post is "%s".', fullTitle);

await browser.close();
```

----------------------------------------

TITLE: ElementHandle.click Method Signature in TypeScript for Puppeteer
DESCRIPTION: Defines the signature of the click method for the ElementHandle class in Puppeteer. This method scrolls the element into view if needed and uses Page.mouse to click in the center of the element. It throws an error if the element is detached from DOM.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.click.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  click(
    this: ElementHandle<Element>,
    options?: Readonly<ClickOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Basic Page Interaction Example - Puppeteer/TypeScript
DESCRIPTION: Demonstrates a basic Puppeteer script in TypeScript. It launches a browser, navigates to a URL, uses locators to fill a search input and click a search result, waits for an element, extracts its text content, prints the text, and finally closes the browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';
// Or import puppeteer from 'puppeteer-core';

// Launch the browser and open a new blank page
const browser = await puppeteer.launch();
const page = await browser.newPage();

// Navigate the page to a URL.
await page.goto('https://developer.chrome.com/');

// Set screen size.
await page.setViewport({width: 1080, height: 1024});

// Type into search box using accessible input name.
await page.locator('aria/Search').fill('automate beyond recorder');

// Wait and click on first result.
await page.locator('.devsite-result-item-link').click();

// Locate the full title with a unique string.
const textSelector = await page
  .locator('text/Customize and automate')
  .waitHandle();
const fullTitle = await textSelector?.evaluate(el => el.textContent);

// Print the full title.
console.log('The title of this blog post is "%s".', fullTitle);

await browser.close();
```

----------------------------------------

TITLE: Returning DOM Node from Puppeteer Evaluate (TypeScript)
DESCRIPTION: Illustrates the behavior when attempting to return a DOM node directly from `page.evaluate`. Due to JSON serialization, the returned value in the Node.js context is an empty object, not a usable reference to the DOM element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/javascript-execution.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
const body = await page.evaluate(() => {
  return document.body;
});
console.log(body); // {}, unexpected!
```

----------------------------------------

TITLE: Launching a Puppeteer Browser - TypeScript
DESCRIPTION: Launches a new instance of the Puppeteer browser. This is the typical starting point for automating tasks. It also shows how to create a new page within the launched browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/browser-management.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

// ...
```

----------------------------------------

TITLE: Basic Puppeteer Navigation and Interaction (TypeScript)
DESCRIPTION: Demonstrates a basic script using Puppeteer to launch a browser, navigate to a URL, set the viewport, interact with page elements using locators (fill a search box, click a link), extract text content, and close the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/index.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';
// Or import puppeteer from 'puppeteer-core';

// Launch the browser and open a new blank page
const browser = await puppeteer.launch();
const page = await browser.newPage();

// Navigate the page to a URL.
await page.goto('https://developer.chrome.com/');

// Set screen size.
await page.setViewport({width: 1080, height: 1024});

// Type into search box using accessible input name.
await page.locator('aria/Search').fill('automate beyond recorder');

// Wait and click on first result.
await page.locator('.devsite-result-item-link').click();

// Locate the full title with a unique string.
const textSelector = await page
  .locator('text/Customize and automate')
  .waitHandle();
const fullTitle = await textSelector?.evaluate(el => el.textContent);

// Print the full title.
console.log('The title of this blog post is "%s".', fullTitle);

await browser.close();
```

----------------------------------------

TITLE: Migrated Puppeteer E2E Test Example
DESCRIPTION: TypeScript code demonstrating a complete E2E test migrated from Protractor to Puppeteer, including page navigation, element interaction, and assertions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
import {setupBrowserHooks, getBrowserState} from './utils';

describe('Puppeteer Demo', function () {
  setupBrowserHooks();
  it('should add one and two', function () {
    const {page} = getBrowserState();
    await page.goto('https://juliemr.github.io/protractor-demo/');

    await page.locator('.form-inline > input:nth-child(1)').fill('1');
    await page.locator('.form-inline > input:nth-child(2)').fill('2');
    await page.locator('#gobutton').fill('2');

    const result = await page
      .locator('.table tbody td:last-of-type')
      .map(header => header.innerText)
      .wait();

    expect(result).toEqual('3');
  });
});
```

----------------------------------------

TITLE: Creating New Page in Puppeteer Browser (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `newPage` method of the Puppeteer `Browser` class. It demonstrates that calling `newPage()` asynchronously returns a Promise that resolves to a `Page` object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.newpage.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract newPage(): Promise<Page>;
}
```

----------------------------------------

TITLE: Filling an Input Element Using Locators in Puppeteer (TypeScript)
DESCRIPTION: Selects an element matching the CSS selector 'input' using `page.locator()` and fills it with the specified 'value'. Puppeteer automatically detects the input type (e.g., `<input>`, `<select>`) and waits for the element to be ready (in viewport, visible, enabled, stable bounding box) before filling. Requires a Puppeteer `Page` instance (`page`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// 'input' is a CSS selector.
await page.locator('input').fill('value');
```

----------------------------------------

TITLE: Launching Puppeteer in Headful Mode
DESCRIPTION: Launches a visible browser window instead of running in headless mode. This is useful for debugging or tasks requiring a graphical interface.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/headless-modes.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
const browser = await puppeteer.launch({headless: false});
```

----------------------------------------

TITLE: Defining Locator.click() Method in TypeScript
DESCRIPTION: This code snippet defines the click() method for the Locator class in Puppeteer. It allows clicking on a located element with optional click options.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.click.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  click<ElementType extends Element>(
    this: Locator<ElementType>,
    options?: Readonly<LocatorClickOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Clicking Element with Puppeteer Locator (TypeScript)
DESCRIPTION: Demonstrates how to click an element using the Puppeteer Locator API. The locator automatically waits for the element to be visible, enabled, and stable before performing the click action.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
await page.locator('button').click();
```

----------------------------------------

TITLE: Launching Default Headless Browser in Puppeteer
DESCRIPTION: Demonstrates the default browser launch which uses the new headless mode. Shows both explicit and implicit headless configuration.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/headless-modes.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch();
// Equivalent to
const browser = await puppeteer.launch({headless: true});
```

----------------------------------------

TITLE: Generating PDF from Web Page using Puppeteer in TypeScript
DESCRIPTION: Example of using Puppeteer to navigate to Hacker News and generate a PDF of the page. The code launches a browser, creates a new page, waits for network activity to settle, and saves the page content as a PDF file named 'hn.pdf'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/pdf-generation.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://news.ycombinator.com', {
  waitUntil: 'networkidle2',
});
// Saves the PDF to hn.pdf.
await page.pdf({
  path: 'hn.pdf',
});

await browser.close();
```

----------------------------------------

TITLE: Launching Headful Chrome in Puppeteer
DESCRIPTION: Demonstrates how to launch Chrome in headful mode (with GUI) by setting headless option to false.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/headless-modes.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({headless: false});
```

----------------------------------------

TITLE: Launch Browser Function Signature - TypeScript
DESCRIPTION: The TypeScript signature for the `launch` function, showing its parameters and return type. It accepts `LaunchOptions` and returns a `Process` object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.launch.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare function launch(opts: LaunchOptions): Process;
```

----------------------------------------

TITLE: Puppeteer Migrated Example Test (TypeScript)
DESCRIPTION: A sample Puppeteer test suite demonstrating navigation (page.goto), element interaction using the locator API (locator().fill, locator().map, locator().wait), and assertion. Shows how to migrate a Protractor test to Puppeteer. Requires Puppeteer setup and potentially helper functions (setupBrowserHooks, getBrowserState).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
import {setupBrowserHooks, getBrowserState} from './utils';

describe('Puppeteer Demo', function () {
  setupBrowserHooks();
  it('should add one and two', function () {
    const {page} = getBrowserState();
    await page.goto('https://juliemr.github.io/protractor-demo/');

    await page.locator('.form-inline > input:nth-child(1)').fill('1');
    await page.locator('.form-inline > input:nth-child(2)').fill('2');
    await page.locator('#gobutton').fill('2');

    const result = await page
      .locator('.table tbody td:last-of-type')
      .map(header => header.innerText)
      .wait();

    expect(result).toEqual('3');
  });
});
```

----------------------------------------

TITLE: Generating PDF from URL using Puppeteer (TypeScript)
DESCRIPTION: This snippet demonstrates launching a Puppeteer browser instance, navigating to a specified URL, waiting for the page to load, generating a PDF of the page content, and saving it to a file. It requires the 'puppeteer' library to be installed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/pdf-generation.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://news.ycombinator.com', {
  waitUntil: 'networkidle2',
});
// Saves the PDF to hn.pdf.
await page.pdf({
  path: 'hn.pdf',
});

await browser.close();
```

----------------------------------------

TITLE: Creating and Using an ElementHandle in TypeScript
DESCRIPTION: This snippet demonstrates how to create an ElementHandle using Page.$() and interact with it. It shows launching a browser, creating a page, navigating to a URL, selecting an element, and clicking it.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/index.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  const hrefElement = await page.$('a');
  await hrefElement.click();
  // ...
})();
```

----------------------------------------

TITLE: Disconnecting and Reconnecting to Puppeteer Browser (TypeScript)
DESCRIPTION: This example illustrates how to launch a browser, get its WebSocket endpoint for future connections, disconnect Puppeteer from the running browser process, and then reconnect using the stored endpoint. This pattern is useful for managing persistent browser instances.
Dependencies: puppeteer library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
// Store the endpoint to be able to reconnect to the browser.
const browserWSEndpoint = browser.wsEndpoint();
// Disconnect puppeteer from the browser.
await browser.disconnect();

// Use the endpoint to reestablish a connection
const browser2 = await puppeteer.connect({browserWSEndpoint});
// Close the browser.
await browser2.close();
```

----------------------------------------

TITLE: Signature for Frame.waitForNavigation
DESCRIPTION: This is the TypeScript signature for the waitForNavigation method within the Frame class. It shows the method is abstract, takes an optional WaitForOptions object, and returns a Promise that resolves to an HTTPResponse or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.waitfornavigation.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  abstract waitForNavigation(
    options?: WaitForOptions,
  ): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Passing Arguments to Puppeteer Evaluate Function (TypeScript)
DESCRIPTION: Shows how to pass arguments to the function executed by `page.evaluate`. Arguments can be primitive values or `JSHandle` instances, allowing dynamic data to be used within the evaluated script.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/javascript-execution.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
const three = await page.evaluate(
  (a, b) => {
    return a + b; // 1 + 2
  },
  1,
  2,
);
```

----------------------------------------

TITLE: Creating and Using ElementHandle in Puppeteer
DESCRIPTION: Example demonstrating how to create an ElementHandle using Page.$() method, and interact with it by clicking on a link element. The example shows the complete workflow from launching the browser to interacting with page elements.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  const hrefElement = await page.$('a');
  await hrefElement.click();
  // ...
})();
```

----------------------------------------

TITLE: Mapping Locator Element to a Value in Puppeteer (TypeScript)
DESCRIPTION: Selects an element matching the CSS selector 'button' using `page.locator()`. It then uses the `.map()` function to execute a JavaScript function in the browser context on the element, returning the negated value of its `disabled` property (true if enabled). The `.wait()` call resolves with this resulting boolean value. Requires a Puppeteer `Page` instance (`page`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
const enabled = await page
  .locator('button')
  .map(button => !button.disabled)
  .wait();
```

----------------------------------------

TITLE: Using Frame.waitForNavigation with Page Navigation in TypeScript
DESCRIPTION: This example demonstrates how to use the waitForNavigation method in conjunction with a click action that triggers navigation. It uses Promise.all to wait for both the navigation and the click action to complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitfornavigation.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const [response] = await Promise.all([
  // The navigation promise resolves after navigation has finished
  frame.waitForNavigation(),
  // Clicking the link will indirectly cause a navigation
  frame.click('a.my-link'),
]);
```

----------------------------------------

TITLE: Handling Click Navigation in Puppeteer
DESCRIPTION: Pattern for handling click events that trigger navigation, using Promise.all to avoid race conditions between click and navigation events.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_4

LANGUAGE: TypeScript
CODE:
```
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  page.click(selector, clickOptions),
]);
```

----------------------------------------

TITLE: Implementing Device Emulation with KnownDevices in Puppeteer
DESCRIPTION: Demonstrates how to use the KnownDevices variable to emulate an iPhone 15 Pro device in a Puppeteer session. The example imports KnownDevices, selects a specific device profile, and uses it with the page.emulate() method.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.knowndevices.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import {KnownDevices} from 'puppeteer';
const iPhone = KnownDevices['iPhone 15 Pro'];

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulate(iPhone);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();
```

----------------------------------------

TITLE: Configure Puppeteer Cache Directory for Cloud Functions
DESCRIPTION: Configuration file (.puppeteerrc.cjs) to override the default Puppeteer cache directory. This is necessary for Google Cloud Functions to ensure Puppeteer can find the browser executable when node_modules are cached between builds, mitigating issues where the install process doesn't run when the cache is hit.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_25

LANGUAGE: ts
CODE:
```
const {join} = require('path');

/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  cacheDirectory: join(__dirname, 'node_modules', '.puppeteer_cache'),
};
```

----------------------------------------

TITLE: Using KnownDevices with page.emulate (TypeScript)
DESCRIPTION: Demonstrates how to import KnownDevices, select a specific device configuration like 'iPhone 15 Pro', and apply it to a Puppeteer page using the page.emulate() method.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.knowndevices.md#_snippet_1

LANGUAGE: ts
CODE:
```
import {KnownDevices} from 'puppeteer';
const iPhone = KnownDevices['iPhone 15 Pro'];

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulate(iPhone);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();
```

----------------------------------------

TITLE: DOM Element Evaluation with ElementHandle
DESCRIPTION: Shows the correct way to handle DOM elements using evaluateHandle, returning an ElementHandle instance that can be properly manipulated.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const body = await page.evaluateHandle(() => {
  return document.body;
});
console.log(body instanceof ElementHandle); // true
```

----------------------------------------

TITLE: Capturing Console Output in Puppeteer (TypeScript)
DESCRIPTION: Illustrates how to capture and log console output from the browser to Node.js. This is useful for debugging client-side code running in the browser context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
page.on('console', msg => console.log('PAGE LOG:', msg.text()));

await page.evaluate(() => console.log(`url is ${location.href}`));
```

----------------------------------------

TITLE: Typing and Submitting Form with Puppeteer ElementHandle (TypeScript)
DESCRIPTION: Shows how to locate an input element, type text into it using ElementHandle.type, and then simulate pressing the 'Enter' key using ElementHandle.press to submit a form.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.type.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const elementHandle = await page.$('input');
await elementHandle.type('some text');
await elementHandle.press('Enter');
```

----------------------------------------

TITLE: Launching Puppeteer in Non-Headless Mode (TypeScript)
DESCRIPTION: Demonstrates how to launch Puppeteer with headless mode disabled for visual debugging. This allows you to see what the browser is displaying during test execution.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({headless: false});
```

----------------------------------------

TITLE: Finding a Target for a Page Opened with window.open in Puppeteer
DESCRIPTION: An example demonstrating how to use the waitForTarget method to find a target for a page opened via window.open. The code opens a new window and then waits for a target matching the specific URL.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.waitfortarget.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.evaluate(() => window.open('https://www.example.com/'));
const newWindowTarget = await browserContext.waitForTarget(
  target => target.url() === 'https://www.example.com/',
);
```

----------------------------------------

TITLE: Puppeteer Page.$eval Method Signature (TypeScript)
DESCRIPTION: The TypeScript signature defining the Page.$eval method, including its generic types for selector, parameters, and the evaluation function, and specifying the return type as a Promise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page._eval.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  $eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
      NodeFor<Selector>,
      Params
    >,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Using Page.waitForRequest Method in TypeScript
DESCRIPTION: This example demonstrates how to use the Page.waitForRequest method in TypeScript. It shows waiting for a specific URL and using a predicate function to match a request, then checking if the response was successful.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforrequest.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const firstRequest = await page.waitForRequest('https://example.com/resource');
const finalRequest = await page.waitForRequest(
  request => request.url() === 'https://example.com',
);
return finalRequest.response()?.ok();
```

----------------------------------------

TITLE: Executing JavaScript in Page Context with Puppeteer (TypeScript)
DESCRIPTION: Demonstrates the basic flow of launching a browser, creating a page, navigating to a URL, and executing a simple JavaScript function within the page's context using `page.evaluate`. The result is returned to the Node.js environment.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/javascript-execution.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Import puppeteer
import puppeteer from 'puppeteer';

(async () => {
  // Launch the browser
  const browser = await puppeteer.launch();

  // Create a page
  const page = await browser.newPage();

  // Go to your site
  await page.goto('YOUR_SITE');

  // Evaluate JavaScript
  const three = await page.evaluate(() => {
    return 1 + 2;
  });

  console.log(three);

  // Close browser.
  await browser.close();
})();
```

----------------------------------------

TITLE: Using Page.waitForSelector Across Page Navigations in Puppeteer
DESCRIPTION: Example demonstrating how to use the waitForSelector method to wait for an image element to appear across multiple page navigations. The method returns a promise that resolves when the selector is found.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforselector.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  let currentURL;
  page
    .waitForSelector('img')
    .then(() => console.log('First URL with image: ' + currentURL));
  for (currentURL of [
    'https://example.com',
    'https://google.com',
    'https://bbc.com',
  ]) {
    await page.goto(currentURL);
  }
  await browser.close();
})();
```

----------------------------------------

TITLE: Get Page Title - Puppeteer TypeScript
DESCRIPTION: Retrieves the title of the current page. This method returns a Promise that resolves with a string containing the page's title. It is a convenient shortcut for accessing the title of the page's main frame.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.title.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  title(): Promise<string>;
}
```

----------------------------------------

TITLE: Basic Usage of Page.$eval in Puppeteer
DESCRIPTION: Examples of basic Page.$eval usage to extract values from elements on a page. This example shows how to get the value of a search input, the href of a preload link, and the HTML content of a container element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page._eval.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const searchValue = await page.$eval('#search', el => el.value);
const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
const html = await page.$eval('.main-container', el => el.outerHTML);
```

----------------------------------------

TITLE: Waiting for Selector Across Navigations in Puppeteer (TypeScript/JavaScript)
DESCRIPTION: This example demonstrates how to use `page.waitForSelector()` to wait for an element (an 'img' tag in this case) across multiple page navigations. The `waitForSelector` call is initiated before the navigations, and its promise resolves as soon as the selector is found on any of the visited pages.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforselector.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  let currentURL;
  page
    .waitForSelector('img')
    .then(() => console.log('First URL with image: ' + currentURL));
  for (currentURL of [
    'https://example.com',
    'https://google.com',
    'https://bbc.com',
  ]) {
    await page.goto(currentURL);
  }
  await browser.close();
})();
```

----------------------------------------

TITLE: Implementing Request Interception to Block Image Requests (TypeScript)
DESCRIPTION: This example demonstrates how to use setRequestInterception to create a naive request interceptor that aborts all image requests ending with .png or .jpg. It shows the setup of Puppeteer, enabling request interception, and handling intercepted requests.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setrequestinterception.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setRequestInterception(true);
  page.on('request', interceptedRequest => {
    if (
      interceptedRequest.url().endsWith('.png') ||
      interceptedRequest.url().endsWith('.jpg')
    )
      interceptedRequest.abort();
    else interceptedRequest.continue();
  });
  await page.goto('https://example.com');
  await browser.close();
})();
```

----------------------------------------

TITLE: Example: Setting Viewport Before Navigation (TypeScript)
DESCRIPTION: Demonstrates how to create a new page, set its viewport dimensions and device scale factor, and then navigate to a URL using Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setviewport.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const page = await browser.newPage();
await page.setViewport({
  width: 640,
  height: 480,
  deviceScaleFactor: 1,
});
await page.goto('https://example.com');
```

----------------------------------------

TITLE: Example using Page.emulate with KnownDevices (TypeScript)
DESCRIPTION: Demonstrates how to use `Page.emulate` to simulate an iPhone 15 Pro device before navigating to a URL. It shows importing `KnownDevices`, launching a browser, creating a new page, applying the emulation, navigating, and closing the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulate.md#_snippet_1

LANGUAGE: ts
CODE:
```
import {KnownDevices} from 'puppeteer';
const iPhone = KnownDevices['iPhone 15 Pro'];

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulate(iPhone);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();
```

----------------------------------------

TITLE: Using Frame.$eval to Retrieve Input Value in TypeScript
DESCRIPTION: This example demonstrates how to use the Frame.$eval method to retrieve the value of a search input element. It selects the element with the ID 'search' and returns its value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame._eval.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const searchValue = await frame.$eval('#search', el => el.value);
```

----------------------------------------

TITLE: Dockerfile for Installing Puppeteer Dependencies
DESCRIPTION: A Dockerfile example based on `node:14-slim` that installs necessary dependencies and Google Chrome stable to support the bundled Chrome for Testing used by Puppeteer. It includes fonts and libraries required for various character sets and functionalities.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_14

LANGUAGE: Dockerfile
CODE:
```
FROM node:14-slim

# Install latest chrome dev package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others)
# Note: this installs the necessary libs to make the bundled version of Chrome for Testing that Puppeteer
# installs, work.
RUN apt-get update \
    && apt-get install -y wget gnupg \
    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
    && apt-get update \
    && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \
      --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

# If running Docker >= 1.13.0 use docker run's --init arg to reap zombie processes, otherwise
# uncomment the following lines to have \`dumb-init\` as PID 1
```

----------------------------------------

TITLE: Waiting for Specific URL with Puppeteer Page.waitForResponse (TypeScript)
DESCRIPTION: Demonstrates waiting for a network response with a specific URL string using the page.waitForResponse method. The promise resolves when a response matching the provided URL is received.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforresponse.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const firstResponse = await page.waitForResponse(
  'https://example.com/resource'
);
```

----------------------------------------

TITLE: Creating and Using a Page in Puppeteer
DESCRIPTION: Example demonstrating how to create a new page, navigate to a URL, and take a screenshot using Puppeteer's Page class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  await page.screenshot({path: 'screenshot.png'});
  await browser.close();
})();
```

----------------------------------------

TITLE: Launch Puppeteer in Non-Headless Mode (TS/JS)
DESCRIPTION: Launches the Puppeteer browser instance with the `headless` option set to `false`. This allows the user to visually see the browser actions, which is useful for debugging.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const browser = await puppeteer.launch({headless: false});
```

----------------------------------------

TITLE: Capturing Screenshot in Puppeteer
DESCRIPTION: The screenshot method captures a screenshot of the page. It automatically waits for completion to prevent interference with other operations like creating new pages or closing the current page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_8

LANGUAGE: JavaScript
CODE:
```
page.screenshot(options)
```

----------------------------------------

TITLE: Using Puppeteer for Browser Automation in TypeScript
DESCRIPTION: Example of using Puppeteer to launch a browser, create a new page, navigate to a URL, and perform actions. This demonstrates the typical usage of PuppeteerNode in a Node.js environment.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();
```

----------------------------------------

TITLE: Closing a Browser with Puppeteer in TypeScript
DESCRIPTION: This code shows how to gracefully close a browser instance after launching it and creating a new page. It's important for properly ending Puppeteer sessions and freeing resources.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/browser-management.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

await browser.close();
```

----------------------------------------

TITLE: Pattern for Click and Wait for Navigation in Puppeteer
DESCRIPTION: The correct pattern for handling a click that triggers navigation, using Promise.all to avoid race conditions between the click and navigation events.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  frame.click(selector, clickOptions),
]);
```

----------------------------------------

TITLE: Click Element and Wait for Navigation (TypeScript)
DESCRIPTION: Demonstrates the recommended pattern to click an element that triggers a page navigation while avoiding race conditions. It uses Promise.all to wait for both the click action and the navigation event concurrently.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  page.click(selector, clickOptions),
]);
```

----------------------------------------

TITLE: Fulfilling Requests with 404 Responses Example in TypeScript
DESCRIPTION: A practical example showing how to enable request interception and fulfill all requests with custom 404 responses. This demonstrates setting status, contentType, and body properties in the response object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.respond.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.setRequestInterception(true);
page.on('request', request => {
  request.respond({
    status: 404,
    contentType: 'text/plain',
    body: 'Not Found!',
  });
});
```

----------------------------------------

TITLE: Using Frame.type() Method in Puppeteer
DESCRIPTION: This example demonstrates how to use the Frame.type() method to type text into a textarea element. It shows two cases: typing instantly and typing with a delay to simulate user input.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.type.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await frame.type('#mytextarea', 'Hello'); // Types instantly
await frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user
```

----------------------------------------

TITLE: Puppeteer Cooperative Intercept Mode - Continue Wins (TS)
DESCRIPTION: This example demonstrates Puppeteer's Cooperative Intercept Mode. All handlers specify a priority. The handler voting to continue at priority 5 wins over the handler voting to abort at priority 0, as higher priorities take precedence in Cooperative Mode.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
// Final outcome: cooperative continue() @ 5
page.setRequestInterception(true);
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to abort at priority 10
  request.abort('failed', 0);
});
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to continue at priority 5
  request.continue(request.continueRequestOverrides(), 5);
});
page.on('request', request => {
  // { action: InterceptResolutionAction.Continue, priority: 5 }, because continue @ 5 > abort @ 0
  console.log(request.interceptResolutionState());
});
```

----------------------------------------

TITLE: Logging Network Requests and Responses with Puppeteer in TypeScript
DESCRIPTION: This code snippet shows how to set up event listeners for network requests and responses in Puppeteer. It logs the URL of each request and response to the console.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-logging.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const page = await browser.newPage();
page.on('request', request => {
  console.log(request.url());
});

page.on('response', response => {
  console.log(response.url());
});
```

----------------------------------------

TITLE: Example of Using JavaScript and CSS Coverage in Puppeteer
DESCRIPTION: A complete example demonstrating how to enable JS and CSS coverage, navigate to a page, gather coverage data, and calculate the percentage of executed code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Enable both JavaScript and CSS coverage
await Promise.all([
  page.coverage.startJSCoverage(),
  page.coverage.startCSSCoverage(),
]);
// Navigate to page
await page.goto('https://example.com');
// Disable both JavaScript and CSS coverage
const [jsCoverage, cssCoverage] = await Promise.all([
  page.coverage.stopJSCoverage(),
  page.coverage.stopCSSCoverage(),
]);
let totalBytes = 0;
let usedBytes = 0;
const coverage = [...jsCoverage, ...cssCoverage];
for (const entry of coverage) {
  totalBytes += entry.text.length;
  for (const range of entry.ranges) usedBytes += range.end - range.start - 1;
}
console.log(`Bytes used: ${(usedBytes / totalBytes) * 100}%`);
```

----------------------------------------

TITLE: Capturing Full Page Screenshot with Puppeteer (TypeScript)
DESCRIPTION: This snippet launches a Puppeteer browser, opens a new page, navigates to a URL, waits for the network to be idle, takes a screenshot of the entire page saving it to 'hn.png', and then closes the browser. It demonstrates the basic workflow for page navigation and full-page screenshot capture.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/screenshots.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://news.ycombinator.com', {
  waitUntil: 'networkidle2',
});
await page.screenshot({
  path: 'hn.png',
});

await browser.close();
```

----------------------------------------

TITLE: Using ARIA Selectors in Puppeteer
DESCRIPTION: Shows how to use ARIA selectors in Puppeteer via the '-p-aria' syntax to find elements using their computed accessible name and role, which is useful for accessibility-focused testing.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_15

LANGUAGE: typescript
CODE:
```
await page.locator('::-p-aria(Submit)').click();
await page.locator('::-p-aria([name="Click me"][role="button"])').click();
```

----------------------------------------

TITLE: Example: Waiting for Navigation After Click
DESCRIPTION: This example demonstrates how to use frame.waitForNavigation() in conjunction with frame.click() to ensure that the code waits for the navigation triggered by the click to complete before proceeding. It uses Promise.all to concurrently initiate the click and start waiting for the navigation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.waitfornavigation.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const [response] = await Promise.all([
  // The navigation promise resolves after navigation has finished
  frame.waitForNavigation(),
  // Clicking the link will indirectly cause a navigation
  frame.click('a.my-link'),
]);
```

----------------------------------------

TITLE: Evaluating Promise in Page Context (TypeScript)
DESCRIPTION: Shows how to use `page.evaluate` with an asynchronous function (returning a Promise) inside the page context. Puppeteer automatically waits for the promise to resolve and returns the final value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.evaluate.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const result = await frame.evaluate(() => {
  return Promise.resolve(8 * 7);
});
console.log(result); // prints "56"
```

----------------------------------------

TITLE: Passing arguments to Page.waitForFunction in Puppeteer
DESCRIPTION: This example shows how to pass arguments from Node.js to the pageFunction. It waits for an element with the specified selector to appear in the page by checking if document.querySelector returns a non-null value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const selector = '.foo';
await page.waitForFunction(
  selector => !!document.querySelector(selector),
  {},
  selector,
);
```

----------------------------------------

TITLE: Puppeteer Waiting for and Accepting File Chooser (TypeScript)
DESCRIPTION: This example demonstrates how to use `page.waitForFileChooser` in conjunction with a click action that triggers a file chooser. It waits for both events concurrently using `Promise.all`, captures the resulting `FileChooser` object, and then uses `fileChooser.accept` to programmatically select a file path.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforfilechooser.md#_snippet_1

LANGUAGE: ts
CODE:
```
const [fileChooser] = await Promise.all([
  page.waitForFileChooser(),
  page.click('#upload-file-button'),
  // some button that triggers file selection
]);
await fileChooser.accept(['/tmp/myfile.pdf']);
```

----------------------------------------

TITLE: Launching Browser with Ignored Default Args (Puppeteer, TypeScript)
DESCRIPTION: Demonstrates how to use the puppeteer.launch method with the ignoreDefaultArgs option to prevent specific default arguments, like '--mute-audio', from being applied when launching the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteernode.launch.md#_snippet_0

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({
  ignoreDefaultArgs: ['--mute-audio'],
});
```

----------------------------------------

TITLE: Implementing Dialog.accept Method in Puppeteer's Dialog Class
DESCRIPTION: Method signature for accepting browser dialogs in Puppeteer. The method returns a Promise that resolves when the dialog has been accepted. An optional promptText parameter can be provided which will be entered in the dialog prompt, but only has an effect when the dialog type is 'prompt'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.accept.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Dialog {
  accept(promptText?: string): Promise<void>;
}
```

----------------------------------------

TITLE: Handling Navigation Events with Page.click in TypeScript
DESCRIPTION: Example demonstrating the proper pattern for using click() when it triggers navigation, avoiding race conditions by using Promise.all to wait for both the navigation and click operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.click.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  page.click(selector, clickOptions),
]);
```

----------------------------------------

TITLE: Listening for Network Events in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows how to attach event listeners to a Puppeteer page object to log the URLs of outgoing requests and incoming responses. It uses the 'request' and 'response' events provided by the page object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-logging.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const page = await browser.newPage();
page.on('request', request => {
  console.log(request.url());
});

page.on('response', response => {
  console.log(response.url());
});
```

----------------------------------------

TITLE: Basic Image Request Interception in Puppeteer
DESCRIPTION: Demonstrates a basic request interceptor that blocks all PNG and JPG image requests while allowing other requests to continue. Shows initialization of Puppeteer, enabling request interception, and handling intercepted requests.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setRequestInterception(true);
  page.on('request', interceptedRequest => {
    if (interceptedRequest.isInterceptResolutionHandled()) return;
    if (
      interceptedRequest.url().endsWith('.png') ||
      interceptedRequest.url().endsWith('.jpg')
    )
      interceptedRequest.abort();
    else interceptedRequest.continue();
  });
  await page.goto('https://example.com');
  await browser.close();
})();
```

----------------------------------------

TITLE: Intercepting and Aborting Image Requests with Puppeteer (TypeScript)
DESCRIPTION: This snippet demonstrates how to enable request interception in Puppeteer, listen for the 'request' event, and conditionally abort requests for image files (.png, .jpg) while allowing others to continue. It requires the 'puppeteer' library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setRequestInterception(true);
  page.on('request', interceptedRequest => {
    if (interceptedRequest.isInterceptResolutionHandled()) return;
    if (
      interceptedRequest.url().endsWith('.png') ||
      interceptedRequest.url().endsWith('.jpg')
    )
      interceptedRequest.abort();
    else interceptedRequest.continue();
  });
  await page.goto('https://example.com');
  await browser.close();
})();
```

----------------------------------------

TITLE: Using PredefinedNetworkConditions with Puppeteer in TypeScript
DESCRIPTION: This example demonstrates how to use PredefinedNetworkConditions with Puppeteer. It shows launching a browser, creating a new page, and applying different network conditions before navigating to a website. The script cycles through all four predefined network conditions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.predefinednetworkconditions.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import {PredefinedNetworkConditions} from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 3G']);
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 3G']);
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 4G']); // alias to Fast 3G.
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 4G']);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();
```

----------------------------------------

TITLE: Pulling Puppeteer Docker Images
DESCRIPTION: Commands to pull Puppeteer Docker images from the GitHub Container Registry. Shows how to pull the latest version and a specific version.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/docker.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
docker pull ghcr.io/puppeteer/puppeteer:latest # pulls the latest
docker pull ghcr.io/puppeteer/puppeteer:16.1.0 # pulls the image that contains Puppeteer v16.1.0
```

----------------------------------------

TITLE: Disabling HttpsFirst Feature in Puppeteer Launch (TypeScript)
DESCRIPTION: Provides a code snippet to disable the Chrome HttpsFirstBalancedModeAutoEnable feature when launching the browser with Puppeteer. This prevents the net::ERR_BLOCKED_BY_CLIENT error that can occur when navigating to HTTP URLs in newer Chrome versions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_2

LANGUAGE: ts
CODE:
```
const browser = await puppeteer.launch({
  args: ['--disable-features=HttpsFirstBalancedModeAutoEnable'],
});
```

----------------------------------------

TITLE: Example: Waiting for specific requests
DESCRIPTION: Demonstrates how to use `page.waitForRequest` to wait for a request matching a specific URL string and another request matching a predicate function, then checks the response status of the final request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforrequest.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const firstRequest = await page.waitForRequest('https://example.com/resource');
const finalRequest = await page.waitForRequest(
  request => request.url() === 'https://example.com',
);
return finalRequest.response()?.ok();
```

----------------------------------------

TITLE: Signature of Page.setViewport Method (TypeScript)
DESCRIPTION: Defines the abstract signature for the `setViewport` method within the `Page` class in Puppeteer. It accepts a `Viewport` object or `null` and returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setviewport.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract setViewport(viewport: Viewport | null): Promise<void>;
}
```

----------------------------------------

TITLE: Demonstrating Cooperative Intercept Mode with Priority-Based Continue Decision
DESCRIPTION: Example showing Cooperative Intercept Mode where all handlers specify a priority. The continue() call wins because it has a higher priority (5) than the abort() call (0).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
// Final outcome: cooperative continue() @ 5
page.setRequestInterception(true);
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to abort at priority 10
  request.abort('failed', 0);
});
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to continue at priority 5
  request.continue(request.continueRequestOverrides(), 5);
});
page.on('request', request => {
  // { action: InterceptResolutionAction.Continue, priority: 5 }, because continue @ 5 > abort @ 0
  console.log(request.interceptResolutionState());
});
```

----------------------------------------

TITLE: Retrieving Element Properties with Puppeteer
DESCRIPTION: TypeScript code showing how to retrieve properties of elements using Puppeteer in E2E tests.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
// Testing framework specific imports

import {setupBrowserHooks, getBrowserState} from './utils';

describe('<Test Name>', function () {
  setupBrowserHooks();
  it('is running', async function () {
    const {page} = getBrowserState();
    // Query elements
    const elementText = await page
      .locator('.my-component')
      .map(button => button.innerText)
      // Wait for element to show up
      .wait();

    // Assert via assertion library
  });
});
```

----------------------------------------

TITLE: Signature for ElementHandle.waitForSelector in Puppeteer (TypeScript)
DESCRIPTION: This is the TypeScript signature for the ElementHandle.waitForSelector method. It shows the method name, generic type parameter, input parameters (selector and optional options), and the returned Promise type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.waitforselector.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  waitForSelector<Selector extends string>(
    selector: Selector,
    options?: WaitForSelectorOptions,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}
```

----------------------------------------

TITLE: Clicking Element and Waiting for Navigation with Puppeteer Frame (TypeScript)
DESCRIPTION: This example demonstrates the recommended pattern for clicking an element within a frame that might trigger a navigation event. It uses Promise.all to concurrently initiate the click and wait for navigation, preventing potential race conditions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.click.md#_snippet_1

LANGUAGE: ts
CODE:
```
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  frame.click(selector, clickOptions),
]);
```

----------------------------------------

TITLE: Hovering Over an Element Using Locators in Puppeteer (TypeScript)
DESCRIPTION: Selects an element matching the CSS selector 'div' using `page.locator()` and simulates hovering the mouse cursor over it. Puppeteer automatically waits for the element to be in the viewport, visible, and have a stable bounding box before hovering. Requires a Puppeteer `Page` instance (`page`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
await page.locator('div').hover();
```

----------------------------------------

TITLE: Signature for Frame.waitForSelector in TypeScript
DESCRIPTION: Defines the type signature for the Frame.waitForSelector method, showing its parameters, return type, and generic constraints.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.waitforselector.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  waitForSelector<Selector extends string>(
    selector: Selector,
    options?: WaitForSelectorOptions,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}
```

----------------------------------------

TITLE: Install Chromium on Amazon Linux
DESCRIPTION: Installs the Chromium browser package on an Amazon Linux EC2 instance using `yum`. This requires the EPEL repository to be enabled first.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_27

LANGUAGE: bash
CODE:
```
sudo yum install -y chromium
```

----------------------------------------

TITLE: ElementHandle.hover Method Signature (TypeScript)
DESCRIPTION: This TypeScript signature defines the `hover` method available on an `ElementHandle` instance in Puppeteer. The method scrolls the element into view if needed and simulates a mouse hover action over its center. It returns a Promise that resolves when the action is complete and throws an error if the element is detached from the DOM.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.hover.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  hover(this: ElementHandle<Element>): Promise<void>;
}
```

----------------------------------------

TITLE: Using waitForResponse in Puppeteer
DESCRIPTION: Examples of using the waitForResponse method in different scenarios: waiting for a specific URL, waiting for a response with specific URL and status code, and waiting for a response containing specific text content.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforresponse.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const firstResponse = await page.waitForResponse(
  'https://example.com/resource',
);
const finalResponse = await page.waitForResponse(
  response =>
    response.url() === 'https://example.com' && response.status() === 200,
);
const finalResponse = await page.waitForResponse(async response => {
  return (await response.text()).includes('<html>');
});
return finalResponse.ok();
```

----------------------------------------

TITLE: Using ARIA Selectors with Puppeteer
DESCRIPTION: Illustrates how to use the `-p-aria` pseudo-element with `page.locator` to find elements based on their accessible name and role, leveraging the browser's accessibility tree. Useful for selecting elements without relying on specific DOM structure. Requires a Puppeteer `page` instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
await page.locator('::-p-aria(Submit)').click();
await page.locator('::-p-aria([name="Click me"][role="button"])').click();
```

----------------------------------------

TITLE: Example: Waiting for a New Window Target - TypeScript
DESCRIPTION: This example demonstrates how to use `browserContext.waitForTarget` to find a new target (representing a new page) that was opened using `window.open` within the browser context. It waits for a target whose URL matches 'https://www.example.com/'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.waitfortarget.md#_snippet_1

LANGUAGE: ts
CODE:
```
await page.evaluate(() => window.open('https://www.example.com/'));
const newWindowTarget = await browserContext.waitForTarget(
  target => target.url() === 'https://www.example.com/',
);
```

----------------------------------------

TITLE: Puppeteer Browser.waitForTarget Example - Finding New Window (TypeScript)
DESCRIPTION: This example demonstrates using browser.waitForTarget to find a new browser target created by window.open. It waits for a target whose URL matches 'https://www.example.com/'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.waitfortarget.md#_snippet_1

LANGUAGE: typescript
CODE:
```
await page.evaluate(() => window.open('https://www.example.com/'));
const newWindowTarget = await browser.waitForTarget(
  target => target.url() === 'https://www.example.com/',
);
```

----------------------------------------

TITLE: Testing Chrome Extension Service Worker with Puppeteer
DESCRIPTION: This code shows how to test a Chrome Manifest V3 extension's background service worker using Puppeteer. It launches Chrome with the extension, waits for the service worker to be available, and demonstrates how to open and test the extension's popup.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/chrome-extensions.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';
import path from 'path';

const pathToExtension = path.join(process.cwd(), 'my-extension');
const browser = await puppeteer.launch({
  args: [
    `--disable-extensions-except=${pathToExtension}`,
    `--load-extension=${pathToExtension}`,
  ],
});

const workerTarget = await browser.waitForTarget(
  // Assumes that there is only one service worker created by the extension and its URL ends with background.js.
  target =>
    target.type() === 'service_worker' &&
    target.url().endsWith('background.js'),
);

const worker = await workerTarget.worker();

// Open a popup (available for Canary channels).
await worker.evaluate('chrome.action.openPopup();');

const popupTarget = await browser.waitForTarget(
  // Assumes that there is only one page with the URL ending with popup.html and that is the popup created by the extension.
  target => target.type() === 'page' && target.url().endsWith('popup.html'),
);

const popupPage = popupTarget.asPage();

// Test the popup page as you would any other page.

await browser.close();
```

----------------------------------------

TITLE: Using emulateVisionDeficiency with Puppeteer to Capture Simulated Vision Screenshots
DESCRIPTION: A complete example that demonstrates how to use the emulateVisionDeficiency method to simulate different vision deficiencies and capture screenshots. The example simulates achromatopsia, deuteranopia, blurred vision, and reduced contrast.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatevisiondeficiency.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://v8.dev/blog/10-years');

  await page.emulateVisionDeficiency('achromatopsia');
  await page.screenshot({path: 'achromatopsia.png'});

  await page.emulateVisionDeficiency('deuteranopia');
  await page.screenshot({path: 'deuteranopia.png'});

  await page.emulateVisionDeficiency('blurredVision');
  await page.screenshot({path: 'blurred-vision.png'});

  await page.emulateVisionDeficiency('reducedContrast');
  await page.screenshot({path: 'reduced-contrast.png'});

  await browser.close();
})();
```

----------------------------------------

TITLE: Building Puppeteer Docker Image (Alpine)
DESCRIPTION: Defines a Docker image based on Alpine Linux for running Puppeteer, installing necessary dependencies including Chromium and Node.js via apk, setting the PUPPETEER_EXECUTABLE_PATH, installing a specific version of Puppeteer via yarn, and creating a non-privileged user.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_18

LANGUAGE: Dockerfile
CODE:
```
FROM alpine

# Installs Chromium (100) package.
RUN apk add --no-cache \
      chromium \
      nss \
      freetype \
      harfbuzz \
      ca-certificates \
      ttf-freefont \
      nodejs \
      yarn

...

# Tell Puppeteer to skip installing Chrome. We'll be using the installed package.
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# Puppeteer v13.5.0 works with Chromium 100.
RUN yarn add puppeteer@13.5.0

# Add user so we don't need --no-sandbox.
RUN addgroup -S pptruser && adduser -S -G pptruser pptruser \
    && mkdir -p /home/pptruser/Downloads /app \
    && chown -R pptruser:pptruser /home/pptruser \
    && chown -R pptruser:pptruser /app

# Run everything after as non-privileged user.
USER pptruser

...
```

----------------------------------------

TITLE: Getting Cookies with Puppeteer in TypeScript
DESCRIPTION: This snippet demonstrates how to retrieve cookies from the browser's default context. It launches a browser, creates a new page, navigates to a website, sets a cookie using script evaluation, and then prints all available cookies.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/cookies.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

await page.goto('https://example.com');

// In this example, we set a cookie using script evaluation.
// Cookies can be set by the page/server in various ways.
await page.evaluate(() => {
  document.cookie = 'myCookie = MyCookieValue';
});

console.log(await browser.cookies()); // print available cookies.
```

----------------------------------------

TITLE: Using ElementHandle.$eval to Extract Text Content from Elements
DESCRIPTION: Example demonstrating how to use ElementHandle.$eval to extract text content from nested elements within a tweet element. The example queries for elements with .like and .retweets classes and retrieves their innerText values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle._eval.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const tweetHandle = await page.$('.tweet');
expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');
expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');
```

----------------------------------------

TITLE: Defining ElementHandle.select() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.select() method. It takes variable number of string arguments and returns a Promise resolving to an array of strings.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.select.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  select(...values: string[]): Promise<string[]>;
}
```

----------------------------------------

TITLE: Responding to Requests with Puppeteer
DESCRIPTION: This example demonstrates how to enable request interception using `page.setRequestInterception(true)` and then use `page.on('request', ...)` to listen for requests. Inside the listener, `request.respond()` is called to fulfill each request with a custom response, in this case, a 404 Not Found status.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.respond.md#_snippet_0

LANGUAGE: typescript
CODE:
```
await page.setRequestInterception(true);
page.on('request', request => {
  request.respond({
    status: 404,
    contentType: 'text/plain',
    body: 'Not Found!',
  });
});
```

----------------------------------------

TITLE: Scrolling an Element Using Locators in Puppeteer (TypeScript)
DESCRIPTION: Selects an element matching the CSS selector 'div' using `page.locator()` and scrolls it using simulated mouse wheel events. The `scrollLeft` (10px) and `scrollTop` (20px) options specify the horizontal and vertical scroll amounts. Puppeteer waits for the element to be ready (in viewport, visible, stable bounding box) before scrolling. Requires a Puppeteer `Page` instance (`page`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// Scroll the div element by 10px horizontally
// and by 20 px vertically.
await page.locator('div').scroll({
  scrollLeft: 10,
  scrollTop: 20,
});
```

----------------------------------------

TITLE: Using Browser Contexts in Puppeteer - TypeScript
DESCRIPTION: Shows how to create and use isolated browser contexts in Puppeteer. Browser contexts do not share cookies or local storage, useful for independent automation tasks. The example also shows how to close the context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/browser-management.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const context = await browser.createBrowserContext();

const page1 = await context.newPage();
const page2 = await context.newPage();

await context.close();
```

----------------------------------------

TITLE: Subscribing and Unsubscribing to Page Events with Puppeteer (Node.js)
DESCRIPTION: This example demonstrates how to subscribe to a page event ('request') using `page.on()` and later unsubscribe using `page.off()`. It defines a handler function `logRequest` that logs the URL of intercepted requests and attaches/detaches it from the event listener.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.md#_snippet_2

LANGUAGE: ts
CODE:
```
function logRequest(interceptedRequest) {
  console.log('A request was made:', interceptedRequest.url());
}
page.on('request', logRequest);
// Sometime later...
page.off('request', logRequest);
```

----------------------------------------

TITLE: Pressing 'A' with Shift using Puppeteer Keyboard (TypeScript)
DESCRIPTION: This snippet shows how to simulate pressing the 'A' key while the Shift key is held down, resulting in an uppercase 'A'. It utilizes the `keyboard.down`, `keyboard.press`, and `keyboard.up` methods to control the state of the Shift key.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keyboard.md#_snippet_1

LANGUAGE: typescript
CODE:
```
await page.keyboard.down('Shift');
await page.keyboard.press('KeyA');
await page.keyboard.up('Shift');
```

----------------------------------------

TITLE: Creating and Using BrowserContext in TypeScript
DESCRIPTION: Demonstrates how to create a new browser context, open a page, navigate to a URL, and close the context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Create a new browser context
const context = await browser.createBrowserContext();
// Create a new page inside context.
const page = await context.newPage();
// ... do stuff with page ...
await page.goto('https://example.com');
// Dispose context once it's no longer needed.
await context.close();
```

----------------------------------------

TITLE: Passing ElementHandle to Page Evaluation (TypeScript)
DESCRIPTION: Explains how to pass Puppeteer `ElementHandle` or `JSHandle` instances from the Node.js environment into the function executed within the page context. The handle is available as a DOM element or JS object inside the function.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.evaluate.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const bodyHandle = await page.$('body');
const html = await page.evaluate(body => body.innerHTML, bodyHandle);
await bodyHandle.dispose();
```

----------------------------------------

TITLE: Synchronous Request Interception Handlers
DESCRIPTION: Shows how multiple synchronous request handlers can work together safely by checking the interception resolution status before attempting to handle the request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
page.on('request', interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.continue();
});

page.on('request', interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.abort();
});
```

----------------------------------------

TITLE: ElementHandle.tap Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the ElementHandle.tap() method, which returns a Promise that resolves to void. This method taps an element by scrolling it into view if needed and then using Touchscreen.tap() to tap in the center of the element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.tap.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  tap(this: ElementHandle<Element>): Promise<void>;
}
```

----------------------------------------

TITLE: Check Element Visibility - Puppeteer - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `ElementHandle.isVisible()` method. This method checks if an element is visible according to specific criteria (computed styles, bounding rect, and visibility CSS property) and returns a Promise that resolves to a boolean indicating visibility.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.isvisible.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  isVisible(): Promise<boolean>;
}
```

----------------------------------------

TITLE: Form Input and Submission with ElementHandle
DESCRIPTION: An example demonstrating how to type text into an input field and then submit the form by pressing Enter. This combines ElementHandle.type() with ElementHandle.press() methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.type.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const elementHandle = await page.$('input');
await elementHandle.type('some text');
await elementHandle.press('Enter');
```

----------------------------------------

TITLE: Setting Timeout for Locator Actions in Puppeteer (TypeScript)
DESCRIPTION: Selects an element matching the CSS selector 'button' using `page.locator()` and sets a specific timeout of 3000 milliseconds (3 seconds) for the subsequent `.click()` action using `.setTimeout()`. If the element is not found or preconditions are not met within this time, a `TimeoutError` will be thrown, overriding any default page timeout. Requires a Puppeteer `Page` instance (`page`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
// Time out after 3 sec.
await page.locator('button').setTimeout(3000).click();
```

----------------------------------------

TITLE: Setting Viewport in Puppeteer
DESCRIPTION: Example of setting a custom viewport for a page in Puppeteer. This code creates a new page, sets its viewport to 640x480 pixels with a device scale factor of 1, and then navigates to a website.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setviewport.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const page = await browser.newPage();
await page.setViewport({
  width: 640,
  height: 480,
  deviceScaleFactor: 1,
});
await page.goto('https://example.com');
```

----------------------------------------

TITLE: Performing Actions with Puppeteer Locators (TypeScript)
DESCRIPTION: Demonstrates common web element interactions (clicking, typing, clearing, getting attributes) using Puppeteer's locator API, comparing them to Protractor's element actions. Requires a locator object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_9

LANGUAGE: TypeScript
CODE:
```
// Click on the element.
element(locator).click();
// Puppeteer equivalent
await page.locator(locator).click();

// Send keys to the element (usually an input).
element(locator).sendKeys('my text');
// Puppeteer equivalent
await page.locator(locator).fill('my text');

// Clear the text in an element (usually an input).
element(locator).clear();
// Puppeteer equivalent
await page.locator(locator).fill('');

// Get the value of an attribute, for example, get the value of an input.
element(locator).getAttribute('value');
// Puppeteer equivalent
const element = await page.locator(locator).waitHandle();
const value = await element.getProperty('value');
```

----------------------------------------

TITLE: Installing Puppeteer with npm (Bash)
DESCRIPTION: Provides commands to install the Puppeteer library using npm. Users can choose between the full package, which downloads a compatible version of Chrome, or the core library, which does not include the browser download.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/index.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npm i puppeteer # Downloads compatible Chrome during installation.
npm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.
```

----------------------------------------

TITLE: Getting Request Headers in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Returns an object containing the HTTP headers associated with the request. All header names are lower-case.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_12

LANGUAGE: javascript
CODE:
```
headers()
```

----------------------------------------

TITLE: Page.type Method Definition in TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the Page.type method. The method takes a selector string, text to type, and optional keyboard type options.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.type.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  type(
    selector: string,
    text: string,
    options?: Readonly<KeyboardTypeOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Configuring Custom Port for E2E Tests in Angular JSON
DESCRIPTION: JSON configuration to specify a custom port for running E2E tests, avoiding conflicts with the development server.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{
  "e2e": {
    "builder": "@puppeteer/ng-schematics:puppeteer",
    "options": {
      "commands": [...],
      "devServerTarget": "sandbox:serve",
      "testRunner": "<TestRunner>",
      "port": 8080
    },
    ...
}
```

----------------------------------------

TITLE: Clicking an Element Using Locators in Puppeteer (TypeScript)
DESCRIPTION: Selects an element matching the CSS selector 'button' using `page.locator()` and performs a click action. Puppeteer automatically waits for the element to be present in the viewport, visible, enabled, and have a stable bounding box before clicking. Requires a Puppeteer `Page` instance (`page`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// 'button' is a CSS selector.
await page.locator('button').click();
```

----------------------------------------

TITLE: Filtering Locators by Element Properties in Puppeteer (TypeScript)
DESCRIPTION: Selects elements matching the CSS selector 'button' using `page.locator()`, then applies a filter using a JavaScript function (`.filter()`) to find the specific button whose `innerText` property is exactly 'My button'. Finally, it clicks the filtered element. Requires a Puppeteer `Page` instance (`page`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_6

LANGUAGE: typescript
CODE:
```
await page
  .locator('button')
  .filter(button => button.innerText === 'My button')
  .click();
```

----------------------------------------

TITLE: Retrieving ElementHandle from Locator in Puppeteer (TypeScript)
DESCRIPTION: Selects an element matching the CSS selector 'button' using `page.locator()` and retrieves its corresponding `ElementHandle` using `.waitHandle()`. This handle (`buttonHandle`) can then be used with lower-level ElementHandle APIs, such as `.click()`, bypassing further locator checks. Requires a Puppeteer `Page` instance (`page`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
const buttonHandle = await page.locator('button').waitHandle();
await buttonHandle.click();
```

----------------------------------------

TITLE: Get HTTPResponse Text Body (TypeScript)
DESCRIPTION: This method of the `HTTPResponse` class returns a Promise that resolves to the response body as a UTF-8 encoded string. It is used to retrieve the content of the HTTP response.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.text.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPResponse {
  text(): Promise<string>;
}
```

----------------------------------------

TITLE: Setting HTTP Headers in Puppeteer
DESCRIPTION: Method to set extra HTTP headers that will be sent with every request the page initiates. Headers are case-insensitive and their order is not guaranteed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
setExtraHTTPHeaders(headers)
```

----------------------------------------

TITLE: Using Frame.select for Single and Multiple Selections
DESCRIPTION: Examples demonstrating how to use Frame.select() for both single and multiple selections in a <select> element. Shows syntax for selecting one value and multiple values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.select.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
frame.select('select#colors', 'blue'); // single selection
frame.select('select#colors', 'red', 'green', 'blue'); // multiple selections
```

----------------------------------------

TITLE: Waiting for Synchronous Predicate with Puppeteer Page.waitForResponse (TypeScript)
DESCRIPTION: Illustrates waiting for a network response that satisfies a synchronous predicate function using page.waitForResponse. The predicate checks both the response URL and status code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforresponse.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const finalResponse = await page.waitForResponse(
  response =>
    response.url() === 'https://example.com' && response.status() === 200
);
```

----------------------------------------

TITLE: Typing Text with Puppeteer ElementHandle.type (TypeScript)
DESCRIPTION: Demonstrates typing text into an element using ElementHandle.type, showing both instant typing and typing with a delay option to simulate user input speed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.type.md#_snippet_0

LANGUAGE: typescript
CODE:
```
await elementHandle.type('Hello'); // Types instantly
await elementHandle.type('World', {delay: 100}); // Types slower, like a user
```

----------------------------------------

TITLE: Evaluating String Expression in Page Context (TypeScript)
DESCRIPTION: Illustrates using `page.evaluate` by passing a string containing a JavaScript expression. The expression is evaluated in the page's context, and the result is returned.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.evaluate.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const aHandle = await page.evaluate('1 + 2');
```

----------------------------------------

TITLE: Uploading Files Using Puppeteer ElementHandle
DESCRIPTION: Demonstrates how to upload files in Puppeteer by locating a file input element and using the uploadFile method. The code waits for a file input element to be present on the page and then triggers a file upload with a local file path.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/files.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const fileElement = await page.waitForSelector('input[type=file]');
await fileElement.uploadFile(['./path-to-local-file']);
```

----------------------------------------

TITLE: Using Page.waitForNavigation with Page Interactions in TypeScript
DESCRIPTION: An example showing how to use Page.waitForNavigation with Promise.all to handle navigation triggered by clicking a link. This pattern ensures the code waits for navigation to complete before continuing execution.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitfornavigation.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const [response] = await Promise.all([
  page.waitForNavigation(), // The promise resolves after navigation has finished
  page.click('a.my-link'), // Clicking the link will indirectly cause a navigation
]);
```

----------------------------------------

TITLE: Launch Puppeteer with SHM usage flag - TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to launch Puppeteer with the `--disable-dev-shm-usage` argument. This flag is recommended to prevent Chrome from crashing due to insufficient shared memory in environments like Docker containers with a small `/dev/shm`. It causes shared memory files to be written to `/tmp` instead. Requires the `puppeteer` library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_18

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({
  args: ['--disable-dev-shm-usage'],
});
```

----------------------------------------

TITLE: Launching Puppeteer with Custom Arguments in TypeScript
DESCRIPTION: This example demonstrates how to use the launch() method with custom options. It shows how to filter out the '--mute-audio' argument from the default launch arguments using the ignoreDefaultArgs option.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.launch.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({
  ignoreDefaultArgs: ['--mute-audio'],
});
```

----------------------------------------

TITLE: Selecting Text Between Nodes with Puppeteer and DOM API (TypeScript)
DESCRIPTION: Shows how to select content between two specified DOM nodes by executing JavaScript code within the page context using `page.evaluate`. It utilizes the `DocumentOrShadowRoot.getSelection()` and `document.createRange()` APIs to define and apply the text selection.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
await page.evaluate(
  (from, to) => {
    const selection = from.getRootNode().getSelection();
    const range = document.createRange();
    range.setStartBefore(from);
    range.setEndAfter(to);
    selection.removeAllRanges();
    selection.addRange(range);
  },
  fromJSHandle,
  toJSHandle,
);
```

----------------------------------------

TITLE: Configuring Locator Preconditions in Puppeteer (TypeScript)
DESCRIPTION: Selects an element using `page.locator('button')` and configures its behavior before clicking. It disables checks for the element being in the viewport, visibility (`setVisibility(null)`), enabled state, and stable bounding box by chaining methods like `.setEnsureElementIsInTheViewport(false)`. This allows clicking the element without waiting for these standard preconditions. Requires a Puppeteer `Page` instance (`page`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
// Clicks on a button without waiting for any preconditions.
await page
  .locator('button')
  .setEnsureElementIsInTheViewport(false)
  .setVisibility(null)
  .setWaitForEnabled(false)
  .setWaitForStableBoundingBox(false)
  .click();
```

----------------------------------------

TITLE: Demonstrating Cooperative Intercept Mode with Priority Ties and Action Precedence
DESCRIPTION: Example showing Cooperative Intercept Mode with multiple handlers at different priorities. When respond() and continue() have the same priority (15), respond() wins due to the tiebreaker rule where respond() has precedence over continue().
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
// Final outcome: cooperative respond() @ 15
page.setRequestInterception(true);
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to abort at priority 10
  request.abort('failed', 10);
});
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to continue at priority 15
  request.continue(request.continueRequestOverrides(), 15);
});
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to respond at priority 15
  request.respond(request.responseForRequest(), 15);
});
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to respond at priority 12
  request.respond(request.responseForRequest(), 12);
});
page.on('request', request => {
  // { action: InterceptResolutionAction.Respond, priority: 15 }, because respond @ 15 > continue @ 15 > respond @ 12 > abort @ 10
  console.log(request.interceptResolutionState());
});
```

----------------------------------------

TITLE: Typing Text Input Using ElementHandle in Puppeteer
DESCRIPTION: Sends keyboard events to type text into an element. Generates keydown, keypress/input, and keyup events for each character. The element must be focused first.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
elementHandle.type(text, options)
```

----------------------------------------

TITLE: Defining Page.close() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the close() method for the Page class in Puppeteer. It accepts an optional options parameter with a runBeforeUnload property and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.close.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract close(options?: {runBeforeUnload?: boolean}): Promise<void>;
}
```

----------------------------------------

TITLE: Using ElementHandle.toElement Method Example (TypeScript)
DESCRIPTION: This example demonstrates how to use the `toElement` method in Puppeteer. It first selects an element using `page.$` and then converts the resulting `ElementHandle` to a specific type (`HTMLAnchorElement` for an 'a' tag) using `toElement`, noting that the original handle should not be disposed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.toelement.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const element: ElementHandle<Element> = await page.$('.class-name-of-anchor');
// DO NOT DISPOSE `element`, this will be always be the same handle.
const anchor: ElementHandle<HTMLAnchorElement> = await element.toElement('a');
```

----------------------------------------

TITLE: Puppeteer Page.$eval Basic Usage (TypeScript)
DESCRIPTION: Examples demonstrating the basic use of Page.$eval to retrieve properties like value, href, or outerHTML from elements matching CSS selectors.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page._eval.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const searchValue = await page.$eval('#search', el => el.value);
const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
const html = await page.$eval('.main-container', el => el.outerHTML);
```

----------------------------------------

TITLE: Creating and Using Puppeteer BrowserContext (TypeScript)
DESCRIPTION: This example demonstrates how to create a new isolated browser context using `browser.createBrowserContext()`, create a new page within that context, perform actions like navigating to a URL, and finally close the context to clean up resources.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Create a new browser context
const context = await browser.createBrowserContext();
// Create a new page inside context.
const page = await context.newPage();
// ... do stuff with page ...
await page.goto('https://example.com');
// Dispose context once it's no longer needed.
await context.close();
```

----------------------------------------

TITLE: Argument Passing in Evaluate Function
DESCRIPTION: Shows how to pass arguments to the evaluate function, supporting both primitive values and JSHandle instances.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
const three = await page.evaluate(
  (a, b) => {
    return a + b; // 1 + 2
  },
  1,
  2
);
```

----------------------------------------

TITLE: Setting Default Timeout for Puppeteer Page
DESCRIPTION: Sets the default maximum time in milliseconds for operations on the Puppeteer Page. This timeout applies to navigation, element finding, and other actions unless overridden by a specific timeout option. It takes a single 'timeout' parameter representing the duration in milliseconds.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setdefaulttimeout.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract setDefaultTimeout(timeout: number): void;
}
```

----------------------------------------

TITLE: Mapping Input Element Values with Puppeteer Page.$$eval (TypeScript)
DESCRIPTION: This example uses `page.$$eval` to select all `input` elements and map their `value` property. It highlights how the TypeScript compiler can often infer the type of the elements array passed to the `pageFunction`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.__eval.md#_snippet_1

LANGUAGE: typescript
CODE:
```
await page.$$eval('input', elements => {
  return elements.map(e => e.value);
});
```

----------------------------------------

TITLE: Capturing Element-Specific Screenshot with Puppeteer in TypeScript
DESCRIPTION: This snippet shows how to capture a screenshot of a specific element on a webpage using Puppeteer. It uses the ElementHandle.screenshot() method to save the screenshot of a div element as a PNG file.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/screenshots.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const fileElement = await page.waitForSelector('div');
await fileElement.screenshot({
  path: 'div.png',
});
```

----------------------------------------

TITLE: Applying Filters to Puppeteer Locators
DESCRIPTION: Shows how to use the filter() method on a Puppeteer locator to add extra conditions based on a JavaScript function. The action (click in this case) will only be performed if the element also satisfies the filter condition.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_2

LANGUAGE: javascript
CODE:
```
await page
  .locator('button')
  .filter(button => button.innerText === 'My button')
  .click();
```

----------------------------------------

TITLE: Navigating to URL in Puppeteer
DESCRIPTION: The goto method navigates the page to a given URL. It handles various scenarios like navigation to about:blank or same URL with different hash. In headless mode, it doesn't throw errors for valid HTTP status codes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_6

LANGUAGE: JavaScript
CODE:
```
page.goto(url, options)
```

----------------------------------------

TITLE: Changing Puppeteer's Default Cache Directory in JavaScript
DESCRIPTION: This configuration file example shows how to change Puppeteer's default cache directory. It uses the path module to join the current directory with a custom cache path, solving issues related to packaging and relocation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/configuration.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
const {join} = require('path');

/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  // Changes the cache location for Puppeteer.
  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),
};
```

----------------------------------------

TITLE: Using Page.waitForFileChooser in Puppeteer
DESCRIPTION: This example demonstrates how to use the waitForFileChooser method in conjunction with a click event to handle a file upload. It waits for the file chooser, clicks a button to trigger it, and then accepts a specific file.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfilechooser.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const [fileChooser] = await Promise.all([
  page.waitForFileChooser(),
  page.click('#upload-file-button'),
  // some button that triggers file selection
]);
await fileChooser.accept(['/tmp/myfile.pdf']);
```

----------------------------------------

TITLE: Handling Navigation with Frame Click in TypeScript
DESCRIPTION: Example showing the correct pattern for handling navigation events triggered by frame.click() using Promise.all to avoid race conditions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.click.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  frame.click(selector, clickOptions),
]);
```

----------------------------------------

TITLE: Running Puppeteer Script with Node.js Debugger (Bash)
DESCRIPTION: Demonstrates how to run a Puppeteer script with the Node.js debugger enabled. This allows for debugging server-side code in conjunction with the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
node --inspect-brk path/to/script.js
```

----------------------------------------

TITLE: Using Frame.type Method in Puppeteer TypeScript
DESCRIPTION: This example demonstrates how to use the `frame.type()` method to type text into an element. It shows typing instantly and typing with a delay using the `options` parameter.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.type.md#_snippet_1

LANGUAGE: ts
CODE:
```
await frame.type('#mytextarea', 'Hello'); // Types instantly
await frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user
```

----------------------------------------

TITLE: Page.waitForResponse Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the waitForResponse method in the Page class. It accepts a URL string or predicate function and optional timeout options, returning a Promise that resolves to an HTTPResponse.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforresponse.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  waitForResponse(
    urlOrPredicate: string | AwaitablePredicate<HTTPResponse>,
    options?: WaitTimeoutOptions,
  ): Promise<HTTPResponse>;
}
```

----------------------------------------

TITLE: Passing Arguments to waitForFunction in Puppeteer
DESCRIPTION: Example showing how to pass arguments from Node.js to the predicate function of waitForFunction. This demonstrates waiting for a specific selector to appear in the DOM by passing the selector as an argument.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitforfunction.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const selector = '.foo';
await frame.waitForFunction(
  selector => !!document.querySelector(selector),
  {}, // empty options object
  selector,
);
```

----------------------------------------

TITLE: Uploading Files Using ElementHandle in Puppeteer
DESCRIPTION: Sets file paths as values for input elements. Works with file input elements. Paths can be relative (resolved against CWD) or absolute (required for remote Chrome).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
elementHandle.uploadFile(paths)
```

----------------------------------------

TITLE: Basic JavaScript Evaluation in Puppeteer
DESCRIPTION: Demonstrates the basic setup and execution of JavaScript in a Puppeteer-controlled page context. Shows how to launch browser, create page, and evaluate simple JavaScript expressions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// Import puppeteer
import puppeteer from 'puppeteer';

(async () => {
  // Launch the browser
  const browser = await puppeteer.launch();

  // Create a page
  const page = await browser.newPage();

  // Go to your site
  await page.goto('YOUR_SITE');

  // Evaluate JavaScript
  const three = await page.evaluate(() => {
    return 1 + 2;
  });

  console.log(three);

  // Close browser.
  await browser.close();
})();
```

----------------------------------------

TITLE: Define Page.$$ method signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.$$() method, detailing its generic type parameter, required selector argument, optional options parameter, and the Promise resolving to an array of ElementHandle objects it returns.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.__.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  $$<Selector extends string>(
    selector: Selector,
    options?: QueryOptions,
  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
}
```

----------------------------------------

TITLE: Using Puppeteer Page.$$eval to Count Elements and Map Properties (TypeScript)
DESCRIPTION: This snippet shows two examples of using `page.$$eval`. The first gets the total count of `div` elements on the page. The second retrieves the `textContent` property from all elements matching the selector `div > span.options` and returns them as an array.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.__eval.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// get the amount of divs on the page
const divCount = await page.$$eval('div', divs => divs.length);

// get the text content of all the `.options` elements:
const options = await page.$$eval('div > span.options', options => {
  return options.map(option => option.textContent);
});
```

----------------------------------------

TITLE: Waiting for Asynchronous Predicate with Puppeteer Page.waitForResponse (TypeScript)
DESCRIPTION: Shows how to wait for a network response using an asynchronous predicate function with page.waitForResponse. The predicate reads the response body and checks if it contains specific content. It also demonstrates checking the final response status.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforresponse.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
const finalResponse = await page.waitForResponse(async response => {
  return (await response.text()).includes('<html>');
});
return finalResponse.ok();
```

----------------------------------------

TITLE: Handling Failed Requests with Puppeteer
DESCRIPTION: Example showing how to listen for failed requests and log the URL along with the error message using the requestfailed event.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.failure.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
page.on('requestfailed', request => {
  console.log(request.url() + ' ' + request.failure().errorText);
});
```

----------------------------------------

TITLE: Waiting for and Accepting File Chooser (TypeScript)
DESCRIPTION: This snippet demonstrates how to wait for a file chooser to appear after triggering an action (like clicking a button) and then accept the file chooser request with a specified list of file paths.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.filechooser.md#_snippet_0

LANGUAGE: ts
CODE:
```
const [fileChooser] = await Promise.all([
  page.waitForFileChooser(),
  page.click('#upload-file-button'), // some button that triggers file selection
]);
await fileChooser.accept(['/tmp/myfile.pdf']);
```

----------------------------------------

TITLE: Capture Browser Console Output (TS/JS)
DESCRIPTION: Sets up an event listener on the `page` object to capture `console` events from the browser's client-side code. It then logs the text content of the console message to the Node.js console. The second line demonstrates using `page.evaluate` to execute client-side code that generates a console log.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
page.on('console', msg => console.log('PAGE LOG:', msg.text()));

await page.evaluate(() => console.log(`url is ${location.href}`));
```

----------------------------------------

TITLE: Creating a JSHandle for the Window Object using evaluateHandle
DESCRIPTION: This example demonstrates how to use page.evaluateHandle() to obtain a JSHandle reference to the global 'window' object within the page's JavaScript context. The returned handle can then be used to interact with the window object from Node.js.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const windowHandle = await page.evaluateHandle(() => window);
```

----------------------------------------

TITLE: Example Usage of JSHandle in Puppeteer
DESCRIPTION: This example demonstrates how to create a JSHandle that references the window object in the browser using page.evaluateHandle().
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const windowHandle = await page.evaluateHandle(() => window);
```

----------------------------------------

TITLE: Copying Setuid Sandbox to Shared Location Bash
DESCRIPTION: This bash command copies the `chrome_sandbox` executable from the Puppeteer cache directory to a standard system location like `/usr/local/sbin`. This makes the sandbox executable accessible system-wide and independent of the specific Chrome version downloaded by Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_13

LANGUAGE: bash
CODE:
```
sudo cp -p chrome_sandbox /usr/local/sbin/chrome-devel-sandbox
```

----------------------------------------

TITLE: Puppeteer Page.select Multiple Options Example (TypeScript)
DESCRIPTION: Example demonstrating how to use `page.select` to select multiple options ('red', 'green', 'blue') in a `<select>` element identified by the CSS selector `'select#colors'`. This works for `<select>` elements with the `multiple` attribute.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.select.md#_snippet_2

LANGUAGE: ts
CODE:
```
page.select('select#colors', 'red', 'green', 'blue'); // multiple selections
```

----------------------------------------

TITLE: Using Keyboard.type Method in Puppeteer
DESCRIPTION: This example demonstrates how to use the Keyboard.type method in Puppeteer. It shows typing text instantly and with a delay to simulate user input.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.type.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.keyboard.type('Hello'); // Types instantly
await page.keyboard.type('World', {delay: 100}); // Types slower, like a user
```

----------------------------------------

TITLE: Launch Puppeteer with DevTools Open (TS/JS)
DESCRIPTION: Launches the Puppeteer browser instance with the `devtools` option set to `true`. This opens the browser's developer tools window alongside the browser, allowing for interactive debugging of client-side code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const browser = await puppeteer.launch({devtools: true});
```

----------------------------------------

TITLE: Press Key on Element - Puppeteer ElementHandle - TypeScript
DESCRIPTION: Simulates pressing a key on the focused element. This method calls Keyboard.down() and Keyboard.up() internally. It takes the key name as a string and optional key press options. A keypress/input event might be generated depending on the key and modifier keys.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.press.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  press(key: KeyInput, options?: Readonly<KeyPressOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Closing Browser Context - Puppeteer - TypeScript
DESCRIPTION: This method closes the current browser context and all associated pages. It returns a Promise that resolves when the context is closed. Note that the default browser context cannot be closed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.close.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class BrowserContext {
  abstract close(): Promise<void>;
}
```

----------------------------------------

TITLE: Define Page.click Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the Page.click method. It is part of the Page class and takes a selector string and optional ClickOptions, returning a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.click.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Uploading Files with Puppeteer (TypeScript)
DESCRIPTION: This snippet demonstrates how to upload a file using Puppeteer. It first waits for the file input element (`<input type="file">`) to appear on the page using `page.waitForSelector`. Once the element is found, it calls the `uploadFile` method on the element handle, providing an array containing the path to the local file to be uploaded. This method simulates selecting a file in a browser's file dialog.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/files.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const fileElement = await page.waitForSelector('input[type=file]');
await fileElement.uploadFile(['./path-to-local-file']);
```

----------------------------------------

TITLE: Defining Puppeteer ElementHandle.$$eval Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `ElementHandle.$$eval` method, detailing its generic types, parameters (`selector`, `pageFunction`, `...args`), and return type (`Promise<Awaited<ReturnType<Func>>>`). It defines how the method is called and what types it expects and returns.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.__eval.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  $$eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<
      Array<NodeFor<Selector>>,
      Params
    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Implementing the hover method in Puppeteer's Locator class
DESCRIPTION: Defines the hover method for the Locator class in Puppeteer. This method allows hovering over a located element with optional action options. It returns a Promise that resolves when the hover action completes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.hover.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  hover<ElementType extends Element>(
    this: Locator<ElementType>,
    options?: Readonly<ActionOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Overriding Navigator Properties Using evaluateOnNewDocument in Puppeteer
DESCRIPTION: Example showing how to use evaluateOnNewDocument to override the navigator.languages property before a page loads. It demonstrates creating a preload script and injecting it into the page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluateonnewdocument.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// preload.js

// overwrite the `languages` property to use a custom getter
Object.defineProperty(navigator, 'languages', {
  get: function () {
    return ['en-US', 'en', 'bn'];
  },
});

// In your puppeteer script, assuming the preload.js file is
// in same folder of our script.
const preloadFile = fs.readFileSync('./preload.js', 'utf8');
await page.evaluateOnNewDocument(preloadFile);
```

----------------------------------------

TITLE: Using Page.setCookie() Method Example
DESCRIPTION: Example demonstrating how to use the Page.setCookie() method to set multiple cookies for a page, passing cookie objects as parameters.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setcookie.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.setCookie(cookieObject1, cookieObject2);
```

----------------------------------------

TITLE: Capturing Base64 Screenshot with Puppeteer
DESCRIPTION: This signature of the `screenshot` method captures a screenshot and returns it as a base64 encoded string. It requires the `encoding: 'base64'` option.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.screenshot.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  screenshot(
    options: Readonly<ScreenshotOptions> & {
      encoding: 'base64';
    },
  ): Promise<string>;
}
```

----------------------------------------

TITLE: Continuing Puppeteer Request with Header Overrides (TypeScript)
DESCRIPTION: This example demonstrates how to enable request interception using page.setRequestInterception(true) and then listen for the 'request' event. Inside the event handler, it shows how to modify request headers by creating a new headers object and passing it to request.continue({headers}). It specifically shows setting a new header 'foo' and removing the 'origin' header.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.continue.md#_snippet_0

LANGUAGE: typescript
CODE:
```
await page.setRequestInterception(true);
page.on('request', request => {
  // Override headers
  const headers = Object.assign({}, request.headers(), {
    foo: 'bar', // set "foo" header
    origin: undefined, // remove "origin" header
  });
  request.continue({headers});
});
```

----------------------------------------

TITLE: Using Page.screenshot() with base64 encoding in TypeScript
DESCRIPTION: Signature for Page.screenshot() method that returns a base64-encoded string. This version requires the 'encoding' option to be set to 'base64' and accepts various screenshot configuration options.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.screenshot.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  screenshot(
    options: Readonly<ScreenshotOptions> & {
      encoding: 'base64';
    },
  ): Promise<string>;
}
```

----------------------------------------

TITLE: Method Signature - PuppeteerNode.connect - TypeScript
DESCRIPTION: Defines the TypeScript signature for the PuppeteerNode.connect method, showing it accepts an options object of type ConnectOptions and returns a Promise resolving to a Browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteernode.connect.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  connect(options: ConnectOptions): Promise<Browser>;
}
```

----------------------------------------

TITLE: Defining Page.title() Method in Puppeteer TypeScript
DESCRIPTION: This code snippet defines the title() method for the Page class in Puppeteer. It returns a Promise that resolves to a string containing the page's title. This method is a shortcut for accessing the title of the main frame of the page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.title.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  title(): Promise<string>;
}
```

----------------------------------------

TITLE: Listen for 'request' Event on Page (JavaScript/TypeScript)
DESCRIPTION: Demonstrates how to attach an event listener to the Puppeteer `page` object to capture the `request` event. This event is emitted whenever the page initiates an HTTP request, providing an `HTTPRequest` instance that can be inspected.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
page.on('request', request => ...)
```

----------------------------------------

TITLE: Capturing Full-Page Screenshot with Puppeteer in TypeScript
DESCRIPTION: This snippet demonstrates how to launch a browser, navigate to a webpage, and capture a full-page screenshot using Puppeteer. It uses the Page.screenshot() method to save the screenshot as a PNG file.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/screenshots.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://news.ycombinator.com', {
  waitUntil: 'networkidle2',
});
await page.screenshot({
  path: 'hn.png',
});

await browser.close();
```

----------------------------------------

TITLE: Basic Page.$$eval Usage Examples
DESCRIPTION: Examples showing how to use Page.$$eval to count div elements and extract text content from multiple elements matching a selector. These demonstrate the typical use cases for this method.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.__eval.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// get the amount of divs on the page
const divCount = await page.$$eval('div', divs => divs.length);

// get the text content of all the `.options` elements:
const options = await page.$$eval('div > span.options', options => {
  return options.map(option => option.textContent);
});
```

----------------------------------------

TITLE: Using Page.screenshot() with binary output in TypeScript
DESCRIPTION: Signature for Page.screenshot() method that returns a Uint8Array containing the binary image data. This overload makes the options parameter optional, allowing for simple screenshot capturing without configuration.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.screenshot.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class Page {
  screenshot(options?: Readonly<ScreenshotOptions>): Promise<Uint8Array>;
}
```

----------------------------------------

TITLE: Insert Debugger in Client Code (TS/JS)
DESCRIPTION: Executes a function within the browser context using `page.evaluate`. The `debugger` statement inside this function will cause execution to pause if the browser's developer tools are open (launched with `devtools: true`), allowing for step-by-step debugging of the client-side code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
await page.evaluate(() => {
  debugger;
});
```

----------------------------------------

TITLE: Using Page.type Method in TypeScript/JavaScript
DESCRIPTION: This example demonstrates how to use the `page.type` method to type text into an element identified by a CSS selector (`#mytextarea`). The first call types 'Hello' instantly, while the second call types 'World' with a 100ms delay between characters, simulating user typing.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.type.md#_snippet_1

LANGUAGE: typescript
CODE:
```
await page.type('#mytextarea', 'Hello');
// Types instantly
await page.type('#mytextarea', 'World', {delay: 100});
// Types slower, like a user
```

----------------------------------------

TITLE: Checking Linux Shared Dependencies Bash
DESCRIPTION: This command lists the dynamic libraries required by the `chrome` executable and filters the output to show only libraries that are marked as 'not found'. This helps identify missing system dependencies necessary for Chrome to launch on Linux.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_6

LANGUAGE: bash
CODE:
```
ldd chrome | grep not
```

----------------------------------------

TITLE: Capturing Element Screenshot with Puppeteer (TypeScript)
DESCRIPTION: This snippet waits for a specific element (a 'div') to appear on the page using page.waitForSelector(), then takes a screenshot of only that element using elementHandle.screenshot(), saving it to 'div.png'. It shows how to target a specific part of the page for capture.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/screenshots.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const fileElement = await page.waitForSelector('div');
await fileElement.screenshot({
  path: 'div.png',
});
```

----------------------------------------

TITLE: Example using ElementHandle.waitForSelector in Puppeteer (TypeScript/JavaScript)
DESCRIPTION: This example demonstrates how to use ElementHandle.waitForSelector. It launches a browser, creates a new page, navigates through a list of URLs, and uses waitForSelector on the main frame to wait for an 'img' element to appear on the first page that contains one, logging a message when found.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.waitforselector.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  let currentURL;
  page
    .mainFrame()
    .waitForSelector('img')
    .then(() => console.log('First URL with image: ' + currentURL));

  for (currentURL of [
    'https://example.com',
    'https://google.com',
    'https://bbc.com',
  ]) {
    await page.goto(currentURL);
  }
  await browser.close();
})();
```

----------------------------------------

TITLE: Asynchronous Request Interception Handlers
DESCRIPTION: Demonstrates how to safely implement asynchronous request handlers with proper resolution status checking before and after async operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
page.on('request', interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;

  return new Promise(resolve => {
    setTimeout(() => {
      if (interceptedRequest.isInterceptResolutionHandled()) {
        resolve();
        return;
      }
      interceptedRequest.continue();
      resolve();
    }, 500);
  });
});
page.on('request', async interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;

  await someLongAsyncOperation();
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.continue();
});
```

----------------------------------------

TITLE: Basic Puppeteer E2E Test Structure
DESCRIPTION: TypeScript code demonstrating the basic structure of a Puppeteer E2E test, including setup and element interaction.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
// Testing framework specific imports

import {setupBrowserHooks, getBrowserState} from './utils';

describe('<Test Name>', function () {
  setupBrowserHooks();
  it('is running', async function () {
    const {page} = getBrowserState();
    // Query elements
    await page
      .locator('my-component')
      // Click on the element once found
      .click();
  });
});
```

----------------------------------------

TITLE: Launching Browsers with WebDriver BiDi in Puppeteer (TypeScript)
DESCRIPTION: This snippet demonstrates how to launch Firefox and Chrome using Puppeteer with the WebDriver BiDi protocol. Firefox uses BiDi by default, while Chrome requires the 'protocol' option to be set to 'webDriverBiDi'. It shows launching the browser, creating a new page, and closing the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/webdriver-bidi.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';

const firefoxBrowser = await puppeteer.launch({
  browser: 'firefox', // WebDriver BiDi is used by default.
});
const page = await firefoxBrowser.newPage();
...
await firefoxBrowser.close();

const chromeBrowser = await puppeteer.launch({
  browser: 'chrome',
  protocol: 'webDriverBiDi', // CDP would be used by default for Chrome.
});
const page = await chromeBrowser.newPage();
...
await chromeBrowser.close();
```

----------------------------------------

TITLE: Defining Viewport Interface in TypeScript
DESCRIPTION: TypeScript interface definition for Viewport configuration in Puppeteer. Includes properties for controlling viewport dimensions, device scale factor, touch support, mobile emulation, and orientation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.viewport.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Viewport
```

----------------------------------------

TITLE: Retrieving Open Pages in Puppeteer Browser Instance
DESCRIPTION: TypeScript signature for the Browser.pages() method which returns a Promise that resolves to an array of Page objects. This method gets all open pages across all browser contexts.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.pages.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  pages(): Promise<Page[]>;
}
```

----------------------------------------

TITLE: Configuring Puppeteer to Download Multiple Browsers in JavaScript
DESCRIPTION: This configuration file example shows how to set up Puppeteer to download both Chrome and Firefox browsers. It uses the Configuration interface to specify download options for each browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/configuration.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  // Download Chrome (default `skipDownload: false`).
  chrome: {
    skipDownload: false,
  },
  // Download Firefox (default `skipDownload: true`).
  firefox: {
    skipDownload: false,
  },
};
```

----------------------------------------

TITLE: Defining ElementHandle.waitForSelector Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.waitForSelector method. It waits for an element matching the given selector to appear in the current element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.waitforselector.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  waitForSelector<Selector extends string>(
    selector: Selector,
    options?: WaitForSelectorOptions,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}
```

----------------------------------------

TITLE: Respond to Request with Priority 15 in Puppeteer
DESCRIPTION: This snippet demonstrates a Puppeteer request handler that votes to respond to the request with a priority of 15 in Cooperative Intercept Mode, provided the resolution hasn't already been handled.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to respond at priority 15
  request.respond(request.responseForRequest(), 15);
});
```

----------------------------------------

TITLE: Example of Using HTTPRequest.continue to Modify Headers
DESCRIPTION: Demonstrates how to use request interception to modify HTTP headers before continuing the request. This example enables request interception, listens for request events, and modifies the headers by adding a new header and removing an existing one.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.continue.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.setRequestInterception(true);
page.on('request', request => {
  // Override headers
  const headers = Object.assign({}, request.headers(), {
    foo: 'bar', // set "foo" header
    origin: undefined, // remove "origin" header
  });
  request.continue({headers});
});
```

----------------------------------------

TITLE: Using Debugger in Client-Side Code with Puppeteer (TypeScript)
DESCRIPTION: Shows how to add a debugger statement in client-side code evaluated by Puppeteer. This causes the browser to stop at the debugger statement when in debug mode.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
await page.evaluate(() => {
  debugger;
});
```

----------------------------------------

TITLE: Autofilling Credit Card Form Input using Puppeteer ElementHandle (TypeScript)
DESCRIPTION: This snippet demonstrates how to select a form input element using `page.waitForSelector` and then use the `autofill` method on the resulting `ElementHandle` to populate credit card details. It requires a page object and a selector for the target input.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// Select an input on the credit card form.
const name = await page.waitForSelector('form #name');
// Trigger autofill with the desired data.
await name.autofill({
  creditCard: {
    number: '4444444444444444',
    name: 'John Smith',
    expiryMonth: '01',
    expiryYear: '2030',
    cvc: '123'
  }
});
```

----------------------------------------

TITLE: Event Handling for HTTP Requests in Puppeteer
DESCRIPTION: Example showing how to listen for the 'request' event emitted by a Puppeteer page object. This pattern can be used to intercept and process HTTP requests made by the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/index.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
page.on('request', request => ...)
```

----------------------------------------

TITLE: Getting Cookies with Puppeteer (TypeScript)
DESCRIPTION: Demonstrates how to retrieve cookies from the browser's default context using `browser.cookies()`. It includes launching a browser, navigating to a page, setting a cookie via script evaluation, and then logging the available cookies. Requires Puppeteer dependency.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/cookies.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

await page.goto('https://example.com');

// In this example, we set a cookie using script evaluation.
// Cookies can be set by the page/server in various ways.
await page.evaluate(() => {
  document.cookie = 'myCookie = MyCookieValue';
});

console.log(await browser.cookies()); // print available cookies.
```

----------------------------------------

TITLE: Launching Puppeteer with Custom Executable Path - TS/JS
DESCRIPTION: Shows how to launch Puppeteer using a browser executable located at a specific path instead of the default downloaded one. Pass the path to the 'executablePath' option when calling 'puppeteer.launch'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/configuration.md#_snippet_0

LANGUAGE: ts
CODE:
```
const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});
```

----------------------------------------

TITLE: Recording a Page Screencast with Puppeteer (JavaScript)
DESCRIPTION: This example demonstrates how to use the Page.screencast method in JavaScript. It shows the steps to launch a browser, create a page, navigate to a URL, start recording with an output path, perform actions, stop the recording, and close the browser. Note that ffmpeg must be installed on the system for this to work.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.screencast.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import puppeteer from 'puppeteer';

// Launch a browser
const browser = await puppeteer.launch();

// Create a new page
const page = await browser.newPage();

// Go to your site.
await page.goto("https://www.example.com");

// Start recording.
const recorder = await page.screencast({path: 'recording.webm'});

// Do something.

// Stop recording.
await recorder.stop();

browser.close();
```

----------------------------------------

TITLE: Capturing Binary Screenshot with Puppeteer
DESCRIPTION: This signature of the `screenshot` method captures a screenshot and returns it as a `Uint8Array`. The `options` parameter is optional.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.screenshot.md#_snippet_1

LANGUAGE: typescript
CODE:
```
class Page {
  screenshot(options?: Readonly<ScreenshotOptions>): Promise<Uint8Array>;
}
```

----------------------------------------

TITLE: Evaluate Function on JSHandle - TypeScript
DESCRIPTION: Defines the signature for the evaluate method on the JSHandle class. This method executes a given function or string expression in the context of the handle, passing the handle itself as the first argument along with any additional parameters. It returns a Promise that resolves with the result of the executed function.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.evaluate.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class JSHandle {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Adding Debugger to Server-Side Code in Puppeteer (TypeScript)
DESCRIPTION: Illustrates how to add a debugger statement to server-side code in Puppeteer for debugging. This example shows a debugger statement before a page.click() action.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
debugger;
await page.click('a[target=_blank]');
```

----------------------------------------

TITLE: Defining Puppeteer LaunchOptions Interface (TypeScript)
DESCRIPTION: This snippet defines the TypeScript interface `LaunchOptions`. It specifies that `LaunchOptions` extends the `ConnectOptions` interface, inheriting its properties and methods. This interface is used to configure various settings when launching a browser instance with Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.launchoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface LaunchOptions extends ConnectOptions
```

----------------------------------------

TITLE: Importing puppeteer-core in TypeScript
DESCRIPTION: Demonstrates how to import the `puppeteer-core` library using ES module syntax in TypeScript or JavaScript. This library is used when you are connecting to a remote browser or managing browser binaries yourself, and it does not download a browser upon installation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/installation.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer-core';
```

----------------------------------------

TITLE: Example of using Page.waitForFrame with a predicate function
DESCRIPTION: Example showing how to use the waitForFrame method with a predicate function that checks for a frame with a specific name attribute. The example demonstrates how to access the frame element and evaluate its attributes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforframe.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const frame = await page.waitForFrame(async frame => {
  const frameElement = await frame.frameElement();
  if (!frameElement) {
    return false;
  }
  const name = await frameElement.evaluate(el => el.getAttribute('name'));
  return name === 'test';
});
```

----------------------------------------

TITLE: Passing JSHandle as Arguments with Page.evaluateHandle
DESCRIPTION: Example showing how to pass JSHandle instances as arguments to page.evaluateHandle, retrieve inner HTML content, and properly dispose of handles.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const aHandle = await page.evaluateHandle(() => document.body);
const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);
console.log(await resultHandle.jsonValue());
await resultHandle.dispose();
```

----------------------------------------

TITLE: Setting Cookies with Puppeteer (TypeScript)
DESCRIPTION: Shows how to set multiple cookies directly in the browser's storage using `browser.setCookie()`. It launches a browser and then sets two specific cookies for the 'localhost' domain with various properties. Requires Puppeteer dependency.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/cookies.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

// Sets two cookies for the localhost domain.
await browser.setCookie(
  {
    name: 'cookie1',
    value: '1',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
  {
    name: 'cookie2',
    value: '2',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
);

console.log(await browser.cookies()); // print available cookies.
```

----------------------------------------

TITLE: Basic Puppeteer Test Structure
DESCRIPTION: Example showing basic structure of a Puppeteer test including browser setup and element interaction
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
// Testing framework specific imports

import {setupBrowserHooks, getBrowserState} from './utils';

describe('<Test Name>', function () {
  setupBrowserHooks();
  it('is running', async function () {
    const {page} = getBrowserState();
    // Query elements
    await page
      .locator('my-component')
      // Click on the element once found
      .click();
  });
});
```

----------------------------------------

TITLE: Page.$eval with Explicit TypeScript Return Type
DESCRIPTION: Example demonstrating how to explicitly specify the return type of Page.$eval using TypeScript generics. This is useful when the compiler cannot infer the return type or when you want to be more explicit about what is being returned.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page._eval.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// The compiler can infer the return type in this case, but if it can't
// or if you want to be more explicit, provide it as the generic type.
const searchValue = await page.$eval<string>(
  '#search',
  (el: HTMLInputElement) => el.value,
);
```

----------------------------------------

TITLE: Getting Response Body Buffer - Puppeteer - TypeScript
DESCRIPTION: Retrieves the raw response body as a Uint8Array buffer. This method returns a Promise that resolves once the content is available. Note that the browser might re-encode the buffer based on headers or heuristics, which could lead to incorrect encoding if detection fails.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.content.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPResponse {
  abstract content(): Promise<Uint8Array>;
}
```

----------------------------------------

TITLE: Handling Events on Puppeteer Locators
DESCRIPTION: Illustrates how to subscribe to events emitted by a Puppeteer locator using the on() method. The example shows listening for the LocatorEvent.Action event, which fires just before the locator performs its action, indicating preconditions have been met.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_7

LANGUAGE: javascript
CODE:
```
let willClick = false;
await page
  .locator('button')
  .on(LocatorEvent.Action, () => {
    willClick = true;
  })
  .click();
```

----------------------------------------

TITLE: Implementing HTTPResponse Content Retrieval in TypeScript
DESCRIPTION: Abstract method definition for retrieving HTTP response body content as a Uint8Array buffer. The method is asynchronous and returns a Promise. Note that the returned buffer may be subject to browser re-encoding based on HTTP headers or other heuristics.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.content.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract content(): Promise<Uint8Array>;
}
```

----------------------------------------

TITLE: Installing Puppeteer Browsers via CLI
DESCRIPTION: This bash command demonstrates how to use the Puppeteer CLI to install browsers based on the current configuration. It's useful after updating the configuration file to download new browsers.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/configuration.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx puppeteer browsers install
```

----------------------------------------

TITLE: Using Frame.waitForSelector with Multiple Page Navigations in Puppeteer
DESCRIPTION: Example demonstrating how to use Frame.waitForSelector to wait for an image element across multiple page navigations. The method works asynchronously while the script navigates through different URLs.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitforselector.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  let currentURL;
  page
    .mainFrame()
    .waitForSelector('img')
    .then(() => console.log('First URL with image: ' + currentURL));

  for (currentURL of [
    'https://example.com',
    'https://google.com',
    'https://bbc.com',
  ]) {
    await page.goto(currentURL);
  }
  await browser.close();
})();
```

----------------------------------------

TITLE: Adding Style Tag (HTMLLinkElement) - Puppeteer Frame - TypeScript
DESCRIPTION: Adds a `<link>` element into the frame. This signature accepts options including 'url', used for linking to an external CSS file. It returns a promise that resolves to an element handle for the created `<link>` element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.addstyletag.md#_snippet_1

LANGUAGE: typescript
CODE:
```
class Frame {
  addStyleTag(
    options: FrameAddStyleTagOptions,
  ): Promise<ElementHandle<HTMLLinkElement>>; 
}
```

----------------------------------------

TITLE: Using Puppeteer waitForSelector API
DESCRIPTION: Provides an example of using the lower-level waitForSelector API to wait for an element to appear in the DOM. It includes launching a browser, creating a page, navigating, waiting for the selector, interacting with the resulting ElementHandle, disposing the handle, and closing the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_8

LANGUAGE: javascript
CODE:
```
// Import puppeteer
import puppeteer from 'puppeteer';

// Launch the browser.
const browser = await puppeteer.launch();

// Create a page.
const page = await browser.newPage();

// Go to your site.
await page.goto('YOUR_SITE');

// Query for an element handle.
const element = await page.waitForSelector('div > .class-name');

// Do something with element...
await element.click(); // Just an example.

// Dispose of handle.
await element.dispose();

// Close browser.
await browser.close();
```

----------------------------------------

TITLE: ElementHandle.screenshot() Method Returning Uint8Array in TypeScript
DESCRIPTION: Defines the signature for the ElementHandle.screenshot() method that returns a Uint8Array. This version accepts an optional options parameter without requiring the encoding property to be set.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.screenshot.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  screenshot(options?: Readonly<ScreenshotOptions>): Promise<Uint8Array>;
}
```

----------------------------------------

TITLE: Configurable Cooperative Intercept Handler in Puppeteer
DESCRIPTION: More robust implementation with a configuration function that allows users to explicitly enable Cooperative Intercept Mode and specify a custom priority. Maintains backward compatibility with Legacy Mode.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
// Defaults to undefined which preserves Legacy Mode behavior
let _priority = undefined;

// Export a module configuration function
export const setInterceptResolutionConfig = (priority = 0) =>
  (_priority = priority);

/**
 * Note that this handler uses `DEFAULT_INTERCEPT_RESOLUTION_PRIORITY` to "pass" on this request. It is important to use
 * the default priority when your handler has no opinion on the request and the intent is to continue() by default.
 */
page.on('request', interceptedRequest => {
  if (request.isInterceptResolutionHandled()) return;
  if (
    interceptedRequest.url().endsWith('.png') ||
    interceptedRequest.url().endsWith('.jpg')
  )
    interceptedRequest.abort('failed', _priority);
  else
    interceptedRequest.continue(
      interceptedRequest.continueRequestOverrides(),
      DEFAULT_INTERCEPT_RESOLUTION_PRIORITY, // Unopinionated continuation
    );
});
```

----------------------------------------

TITLE: Using ElementHandle.select() Method for Single and Multiple Selections
DESCRIPTION: This example demonstrates how to use the ElementHandle.select() method for both single and multiple selections. It shows selecting a single option 'blue' and multiple options 'red', 'green', and 'blue'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.select.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
handle.select('blue'); // single selection
handle.select('red', 'green', 'blue'); // multiple selections
```

----------------------------------------

TITLE: Handling HTTP Request Event in Puppeteer
DESCRIPTION: This snippet demonstrates how to listen for the 'request' event on a Puppeteer page object. This event is emitted whenever the page initiates an HTTP request, providing an instance of the HTTPRequest class for inspection or modification.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/index.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
page.on('request', request => ...)
```

----------------------------------------

TITLE: Demonstrating Legacy Mode Request Interception with Immediate Abort
DESCRIPTION: Example showing how Legacy Mode prevails when a handler omits the priority parameter, causing the request to be aborted immediately without reaching subsequent handlers.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
// Final outcome: immediate abort()
page.setRequestInterception(true);
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Legacy Mode: interception is aborted immediately.
  request.abort('failed');
});
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;
  // Control will never reach this point because the request was already aborted in Legacy Mode

  // Cooperative Intercept Mode: votes for continue at priority 0.
  request.continue({}, 0);
});
```

----------------------------------------

TITLE: Connecting to a Running Browser with Puppeteer in TypeScript
DESCRIPTION: This snippet shows how to connect to an already running browser instance using its WebSocket endpoint URL. It also demonstrates how to create a new page and disconnect from the browser without closing it.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/browser-management.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.connect({
  browserWSEndpoint: 'ws://127.0.0.1:9222/...',
});

const page = await browser.newPage();

browser.disconnect();
```

----------------------------------------

TITLE: Defining CookieParam Interface in TypeScript
DESCRIPTION: TypeScript interface definition for cookie parameters used in Puppeteer's page-level cookies API. Specifies required and optional properties for setting cookies, including domain, expiration, security flags, and other cookie attributes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookieparam.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CookieParam
```

----------------------------------------

TITLE: Using Page.emulate() Method with Puppeteer in TypeScript
DESCRIPTION: This example demonstrates how to use the Page.emulate() method to emulate an iPhone 15 Pro. It imports the KnownDevices from Puppeteer, launches a browser, creates a new page, emulates the device, navigates to Google, and then closes the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulate.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import {KnownDevices} from 'puppeteer';
const iPhone = KnownDevices['iPhone 15 Pro'];

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulate(iPhone);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();
```

----------------------------------------

TITLE: Using BrowserContext.overridePermissions Method in TypeScript
DESCRIPTION: This example demonstrates how to use the overridePermissions method in the default browser context. It overrides the 'geolocation' permission for the 'https://html5demos.com' origin.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.overridepermissions.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const context = browser.defaultBrowserContext();
await context.overridePermissions('https://html5demos.com', ['geolocation']);
```

----------------------------------------

TITLE: Using Puppeteer ElementHandle.$$eval to Extract Text (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `ElementHandle.$$eval` in JavaScript (or TypeScript) to select multiple elements (`.tweet`) within a parent element (`feedHandle`) and apply a function (`nodes => nodes.map(n => n.innerText)`) to the resulting array of nodes. It shows how to retrieve text content from multiple child elements and assert the result.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.__eval.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const feedHandle = await page.$('.feed');
expect(
  await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText)),
).toEqual(['Hello!', 'Hi!']);
```

----------------------------------------

TITLE: Using ElementHandle.$eval to Extract Text (TypeScript)
DESCRIPTION: Demonstrates how to use ElementHandle.$eval to find nested elements within a '.tweet' handle and extract their innerText property using a simple arrow function, asserting the results.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle._eval.md#_snippet_1

LANGUAGE: ts
CODE:
```
const tweetHandle = await page.$('.tweet');
expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');
expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');
```

----------------------------------------

TITLE: Defining ElementHandle.$eval Method Signature (TypeScript)
DESCRIPTION: Defines the TypeScript signature for the ElementHandle.$eval method, showing its generic types for selector, parameters, and the evaluation function, and specifying that it returns a Promise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle._eval.md#_snippet_0

LANGUAGE: ts
CODE:
```
class ElementHandle {
  $eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
      NodeFor<Selector>,
      Params
    >,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Emulating Network Conditions with Predefined Settings - TypeScript
DESCRIPTION: This example demonstrates how to use `Page.emulateNetworkConditions` to apply predefined network conditions, specifically 'Slow 3G'. It shows importing `PredefinedNetworkConditions`, launching a browser, creating a page, applying the conditions, navigating to a URL, and closing the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulatenetworkconditions.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import {PredefinedNetworkConditions} from 'puppeteer';
const slow3G = PredefinedNetworkConditions['Slow 3G'];

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulateNetworkConditions(slow3G);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();
```

----------------------------------------

TITLE: Puppeteer Page.select Single Option Example (TypeScript)
DESCRIPTION: Example demonstrating how to use `page.select` to select a single option ('blue') in a `<select>` element identified by the CSS selector `'select#colors'`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.select.md#_snippet_1

LANGUAGE: ts
CODE:
```
page.select('select#colors', 'blue'); // single selection
```

----------------------------------------

TITLE: Text Selection Example Using Keyboard API
DESCRIPTION: Demonstrates how to use keyboard APIs to type text, hold down Shift key for selection, and delete text. Shows combination of type(), press(), down() and up() methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.keyboard.type('Hello World!');
await page.keyboard.press('ArrowLeft');

await page.keyboard.down('Shift');
for (let i = 0; i < ' World'.length; i++)
  await page.keyboard.press('ArrowLeft');
await page.keyboard.up('Shift');

await page.keyboard.press('Backspace');
// Result text will end up saying 'Hello!'
```

----------------------------------------

TITLE: Using Text Selectors in Puppeteer
DESCRIPTION: Demonstrates how to use text selectors in Puppeteer via the '-p-text' syntax to select elements containing specific text, including handling special characters and text within shadow DOM.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_14

LANGUAGE: typescript
CODE:
```
// Click a button inside a div element that has Checkout as the inner text.
await page.locator('div ::-p-text(Checkout)').click();
// You need to escape CSS selector syntax such '(', ')' if it is part of the your search text ('Checkout (2 items)').
await page.locator(':scope >>> ::-p-text(Checkout \\(2 items\\))').click();
// or use quotes escaping any quotes that are part of the search text ('He said: "Hello"').
await page.locator(':scope >>> ::-p-text("He said: \\"Hello\\"")').click();
```

----------------------------------------

TITLE: Exposing Node.js Crypto Function (md5) in Puppeteer Page - TypeScript
DESCRIPTION: This snippet demonstrates how to use `page.exposeFunction` to make a Node.js function (`crypto.createHash`) available in the browser context as `window.md5`. It then uses `page.evaluate` to call this exposed function from within the page's context and log the result to the console. It requires the `puppeteer` and `crypto` modules.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.exposefunction.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';
import crypto from 'crypto';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('console', msg => console.log(msg.text()));
  await page.exposeFunction('md5', text =>
    crypto.createHash('md5').update(text).digest('hex'),
  );
  await page.evaluate(async () => {
    // use window.md5 to compute hashes
    const myString = 'PUPPETEER';
    const myHash = await window.md5(myString);
    console.log(`md5 of ${myString} is ${myHash}`);
  });
  await browser.close();
})();
```

----------------------------------------

TITLE: Using ElementHandle.$$eval Method in TypeScript
DESCRIPTION: This TypeScript example shows how to use the ElementHandle.$$eval method to select elements within a feed and extract their text content. It demonstrates selecting the feed, then querying for tweets within it.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.__eval.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const feedHandle = await page.$('.feed');
expect(
  await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText)),
).toEqual(['Hello!', 'Hi!']);
```

----------------------------------------

TITLE: Starting and Stopping Puppeteer Tracing (TypeScript)
DESCRIPTION: Demonstrates how to start a trace, navigate to a page, and stop the trace, saving the output to a specified file path.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.tracing.md#_snippet_1

LANGUAGE: typescript
CODE:
```
await page.tracing.start({path: 'trace.json'});
await page.goto('https://www.google.com');
await page.tracing.stop();
```

----------------------------------------

TITLE: Promise Evaluation in Puppeteer
DESCRIPTION: Demonstrates how Puppeteer automatically handles promises returned from evaluate calls, waiting for their resolution before continuing execution.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
await page.evaluate(() => {
  // wait for 100ms.
  return new Promise(resolve => setTimeout(resolve, 100));
});
// Execution continues here once the Promise created in the page context resolves.
```

----------------------------------------

TITLE: Legacy Intercept Handler in Puppeteer
DESCRIPTION: Example of a legacy request interception handler that aborts image requests and continues other requests without using Cooperative Intercept Mode.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
page.on('request', interceptedRequest => {
  if (request.isInterceptResolutionHandled()) return;
  if (
    interceptedRequest.url().endsWith('.png') ||
    interceptedRequest.url().endsWith('.jpg')
  )
    interceptedRequest.abort();
  else interceptedRequest.continue();
});
```

----------------------------------------

TITLE: Getting HTTP Request Headers (TypeScript)
DESCRIPTION: Retrieves the HTTP headers associated with the request. This method is part of the `HTTPRequest` class in Puppeteer. It returns a `Record<string, string>` where header names are guaranteed to be in lower-case.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.headers.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPRequest {
  abstract headers(): Record<string, string>;
}
```

----------------------------------------

TITLE: Getting Request POST Data in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Returns the request's post body, if any. Note that HTTPRequest.postData() might still be undefined when this flag is true when the data is too long or not readily available in the decoded form. In that case, use HTTPRequest.fetchPostData().
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_18

LANGUAGE: javascript
CODE:
```
postData()
```

----------------------------------------

TITLE: Fetching POST Data - Puppeteer HTTPRequest - TypeScript
DESCRIPTION: This method, part of the Puppeteer `HTTPRequest` class, asynchronously fetches the POST data associated with the request from the browser. It returns a Promise that resolves to the POST data as a string, or `undefined` if there is no POST data.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.fetchpostdata.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract fetchPostData(): Promise<string | undefined>;
}
```

----------------------------------------

TITLE: Get Frame Name or ID using frameElement - TypeScript
DESCRIPTION: This snippet provides the recommended alternative to the obsolete Frame.name() method. It first gets the frame's element using frame.frameElement() and then evaluates the element to retrieve either the name or id attribute of the underlying frame element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.name.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const element = await frame.frameElement();
const nameOrId = await element.evaluate(frame => frame.name ?? frame.id);
```

----------------------------------------

TITLE: Running Puppeteer Script with Custom Cache Directory Bash
DESCRIPTION: This command executes a Node.js script that uses Puppeteer, ensuring that the PUPPETEER_CACHE_DIR environment variable is set to the current working directory. This tells Puppeteer where to look for the downloaded browser executable during runtime.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_1

LANGUAGE: bash
CODE:
```
PUPPETEER_CACHE_DIR=$(pwd) node <script-path>
```

----------------------------------------

TITLE: Enable Basic Puppeteer Debug Logging (Bash)
DESCRIPTION: Sets the `DEBUG` environment variable to `puppeteer:*` before running the Node.js script. This activates the `debug` library for all components within the `puppeteer` namespace, logging internal information, including DevTools protocol traffic, to the console.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_7

LANGUAGE: Bash
CODE:
```
env DEBUG="puppeteer:*" node script.js
```

----------------------------------------

TITLE: Waiting for viewport size change with Puppeteer's waitForFunction
DESCRIPTION: This example demonstrates how Page.waitForFunction can be used to observe a viewport size change. It creates a watchdog that resolves when the window inner width becomes less than 100 pixels.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  const watchDog = page.waitForFunction('window.innerWidth < 100');
  await page.setViewport({width: 50, height: 50});
  await watchDog;
  await browser.close();
})();
```

----------------------------------------

TITLE: Launching Chrome Enabling Extensions TS
DESCRIPTION: This TypeScript snippet configures Puppeteer to launch Chrome with extensions enabled by setting the `enableExtensions` option to `true`. This is a workaround for scenarios where system policies enforce running Chrome/Chromium with certain extensions, which would otherwise cause Puppeteer to fail when `--disable-extensions` is passed by default.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_4

LANGUAGE: ts
CODE:
```
const browser = await puppeteer.launch({
  enableExtensions: true,
});
```

----------------------------------------

TITLE: Connecting Puppeteer in Chrome Extension (TypeScript)
DESCRIPTION: Demonstrates how to import the browser-specific Puppeteer core, create or find a tab using `chrome.tabs`, connect Puppeteer to the tab using `ExtensionTransport.connectTab`, access the single page, and perform a basic operation like evaluating document title.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/running-puppeteer-in-extensions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import {
  connect,
  ExtensionTransport,
} from 'puppeteer-core/lib/esm/puppeteer/puppeteer-core-browser.js';

// Create a tab or find a tab to attach to.
const tab = await chrome.tabs.create({
  url,
});
// Connect Puppeteer using the ExtensionTransport.connectTab.
const browser = await connect({
  transport: await ExtensionTransport.connectTab(tab.id),
});
// You will have a single page on the browser object, which corresponds
// to the tab you connected the transport to.
const [page] = await browser.pages();
// Perform the usual operations with Puppeteer page.
console.log(await page.evaluate('document.title'));
browser.disconnect();
```

----------------------------------------

TITLE: Dumping the Entire Accessibility Tree in TypeScript
DESCRIPTION: Example showing how to capture and log the entire accessibility tree of a page using the accessibility.snapshot() method in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.accessibility.snapshot.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const snapshot = await page.accessibility.snapshot();
console.log(snapshot);
```

----------------------------------------

TITLE: Enabling Browser Process Logs in Puppeteer (TypeScript)
DESCRIPTION: Shows how to enable logging of browser process output in Puppeteer by setting the dumpio option to true. This is useful for debugging browser crashes or launch issues.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({
  dumpio: true,
});
```

----------------------------------------

TITLE: Using waitForSelector for Element Handling in Puppeteer (TypeScript)
DESCRIPTION: Demonstrates the basic workflow using the lower-level `page.waitForSelector()` API in Puppeteer. It launches a browser, creates a page, navigates, waits for an element matching 'div > .class-name' to appear, retrieves its `ElementHandle`, performs a click, explicitly disposes of the handle using `element.dispose()` to prevent memory leaks, and closes the browser. This method requires manual handling and disposal compared to locators. Requires the `puppeteer` library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_12

LANGUAGE: typescript
CODE:
```
// Import puppeteer
import puppeteer from 'puppeteer';

// Launch the browser.
const browser = await puppeteer.launch();

// Create a page.
const page = await browser.newPage();

// Go to your site.
await page.goto('YOUR_SITE');

// Query for an element handle.
const element = await page.waitForSelector('div > .class-name');

// Do something with element...
await element.click(); // Just an example.

// Dispose of handle.
await element.dispose();

// Close browser.
await browser.close();
```

----------------------------------------

TITLE: Viewport Management in Puppeteer
DESCRIPTION: Sets the viewport size of the page. Should be called before page navigation as many websites don't handle viewport changes well. Each page can have its own viewport size.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_13

LANGUAGE: javascript
CODE:
```
setViewport(viewport)
```

----------------------------------------

TITLE: Launch Puppeteer with Slow Motion (TS/JS)
DESCRIPTION: Launches the Puppeteer browser instance with the `slowMo` option set to a value in milliseconds. This slows down Puppeteer operations, making it easier to observe the browser's behavior during debugging.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const browser = await puppeteer.launch({
  headless: false,
  slowMo: 250, // slow down by 250ms
});
```

----------------------------------------

TITLE: Configuring Puppeteer Cache Directory via Config File (JavaScript)
DESCRIPTION: Shows how to configure the Puppeteer cache directory using a .puppeteerrc.cjs or puppeteer.config.cjs file. This provides a persistent way to set the cache location for a project without relying on environment variables for every command.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_1

LANGUAGE: js
CODE:
```
const {join} = require('path');

/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),
};
```

----------------------------------------

TITLE: Handling Multiple Synchronous Puppeteer Request Interceptors (TypeScript)
DESCRIPTION: Demonstrates how two synchronous request intercept handlers can cooperate by having subsequent handlers check if the request has already been handled by a preceding handler using `isInterceptResolutionHandled()` before attempting to resolve it.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
/*
This first handler will succeed in calling request.continue because the request interception has never been resolved.
*/
page.on('request', interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.continue();
});
```

LANGUAGE: TypeScript
CODE:
```
/*
This second handler will return before calling request.abort because request.continue was already
called by the first handler.
*/
page.on('request', interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.abort();
});
```

----------------------------------------

TITLE: Frame.$$ Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Frame.$$() method. It takes a selector string and optional QueryOptions, returning a Promise that resolves to an array of ElementHandle objects representing the matched elements within the frame.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.__.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  $$<Selector extends string>(
    selector: Selector,
    options?: QueryOptions,
  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
}
```

----------------------------------------

TITLE: Creating and Using ElementHandle with Puppeteer (TypeScript)
DESCRIPTION: Demonstrates how to launch a Puppeteer browser, navigate to a page, select an element using `page.$()`, and interact with the resulting `ElementHandle` by clicking it.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  const hrefElement = await page.$('a');
  await hrefElement.click();
  // ...
})();
```

----------------------------------------

TITLE: Emulating CSS Media Features with Puppeteer
DESCRIPTION: This example demonstrates how to use `page.emulateMediaFeatures` to simulate various CSS media features such as `prefers-color-scheme`, `prefers-reduced-motion`, and `color-gamut`. It includes checks using `page.evaluate` and `matchMedia` to verify the emulation is effective.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulatemediafeatures.md#_snippet_1

LANGUAGE: typescript
CODE:
```
await page.emulateMediaFeatures([
  {name: 'prefers-color-scheme', value: 'dark'},
]);
await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);
// → true
await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);
// → false

await page.emulateMediaFeatures([
  {name: 'prefers-reduced-motion', value: 'reduce'},
]);
await page.evaluate(
  () => matchMedia('(prefers-reduced-motion: reduce)').matches,
);
// → true
await page.evaluate(
  () => matchMedia('(prefers-reduced-motion: no-preference)').matches,
);
// → false

await page.emulateMediaFeatures([
  {name: 'prefers-color-scheme', value: 'dark'},
  {name: 'prefers-reduced-motion', value: 'reduce'},
]);
await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);
// → true
await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);
// → false
await page.evaluate(
  () => matchMedia('(prefers-reduced-motion: reduce)').matches,
);
// → true
await page.evaluate(
  () => matchMedia('(prefers-reduced-motion: no-preference)').matches,
);
// → false

await page.emulateMediaFeatures([{name: 'color-gamut', value: 'p3'}]);
await page.evaluate(() => matchMedia('(color-gamut: srgb)').matches);
// → true
await page.evaluate(() => matchMedia('(color-gamut: p3)').matches);
// → true
await page.evaluate(() => matchMedia('(color-gamut: rec2020)').matches);
// → false
```

----------------------------------------

TITLE: Defining PuppeteerNode.launch Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the launch() method of the PuppeteerNode class. It takes an optional LaunchOptions parameter and returns a Promise resolving to a Browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.launch.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  launch(options?: LaunchOptions): Promise<Browser>;
}
```

----------------------------------------

TITLE: DOM Element Evaluation with Regular Evaluate
DESCRIPTION: Demonstrates the limitations of returning DOM elements using regular evaluate method, showing how object serialization can lead to unexpected results.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const body = await page.evaluate(() => {
  return document.body;
});
console.log(body); // {}, unexpected!
```

----------------------------------------

TITLE: Implementing Fine-Grained Puppeteer Request Priority Control
DESCRIPTION: Illustrates a more advanced configuration pattern allowing separate priorities for different resolution types (abort vs. continue). It uses an interface and a configuration object to manage these priorities, providing more granular control.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_16

LANGUAGE: TypeScript
CODE:
```
interface InterceptResolutionConfig {
  abortPriority?: number;
  continuePriority?: number;
}

// This approach supports multiple priorities based on situational
// differences. You could, for example, create a config that
// allowed separate priorities for PNG vs JPG.
const DEFAULT_CONFIG: InterceptResolutionConfig = {
  abortPriority: undefined, // Default to Legacy Mode
  continuePriority: undefined, // Default to Legacy Mode
};

// Defaults to undefined which preserves Legacy Mode behavior
let _config: Partial<InterceptResolutionConfig> = {};

export const setInterceptResolutionConfig = (
  config: InterceptResolutionConfig,
) => (_config = {...DEFAULT_CONFIG, ...config});

page.on('request', interceptedRequest => {
  if (request.isInterceptResolutionHandled()) return;
  if (
    interceptedRequest.url().endsWith('.png') ||
    interceptedRequest.url().endsWith('.jpg')
  ) {
    interceptedRequest.abort('failed', _config.abortPriority);
  } else {
    // Here we use a custom-configured priority to allow for Opinionated
    // continuation.
    // We would only want to allow this if we had a very clear reason why
    // some use cases required Opinionated continuation.
    interceptedRequest.continue(
      interceptedRequest.continueRequestOverrides(),
      _config.continuePriority, // Why would we ever want priority!==0 here?
    );
  }
});
```

----------------------------------------

TITLE: Handling Page Request Events in Puppeteer
DESCRIPTION: Example of registering an event handler for page requests in Puppeteer. When a request occurs, the handler receives an HTTPRequest instance representing the request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
page.on('request', request => ...)
```

----------------------------------------

TITLE: Granting Clipboard Permissions in Puppeteer (TypeScript)
DESCRIPTION: Explains how to grant necessary permissions, specifically 'clipboard-read' and 'clipboard-write', to a specific origin within the browser context using `browser.defaultBrowserContext().overridePermissions()`. This is required for accessing the Clipboard API.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
await browser
  .defaultBrowserContext()
  .overridePermissions('<your origin>', ['clipboard-read', 'clipboard-write']);
```

----------------------------------------

TITLE: Unsubscribing from Page Events
DESCRIPTION: Demonstrates how to subscribe and unsubscribe from page request events using EventEmitter methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
function logRequest(interceptedRequest) {
  console.log('A request was made:', interceptedRequest.url());
}
page.on('request', logRequest);
// Sometime later...
page.off('request', logRequest);
```

----------------------------------------

TITLE: Optimizing TypeScript Experience with Page.evaluate()
DESCRIPTION: This example illustrates how to get the best TypeScript experience by passing the type of pageFunction as a generic to Page.evaluate().
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluate.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const aHandle = await page.evaluate(() => 2);
```

----------------------------------------

TITLE: Example: Using CDPSession to Interact with CDP (TypeScript)
DESCRIPTION: This example demonstrates how to create a CDPSession, send CDP commands like 'Animation.enable', 'Animation.getPlaybackRate', and 'Animation.setPlaybackRate', and subscribe to CDP events like 'Animation.animationCreated'. It shows how to get a response from a command and use it in a subsequent command.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cdpsession.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const client = await page.createCDPSession();
await client.send('Animation.enable');
client.on('Animation.animationCreated', () =>
  console.log('Animation created!')
);
const response = await client.send('Animation.getPlaybackRate');
console.log('playback rate is ' + response.playbackRate);
await client.send('Animation.setPlaybackRate', {
  playbackRate: response.playbackRate / 2,
});
```

----------------------------------------

TITLE: Basic ElementHandle.type Usage Example
DESCRIPTION: Shows two examples of using ElementHandle.type(): one types text instantly, while the second uses a delay parameter to simulate slower typing like a real user would do.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.type.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await elementHandle.type('Hello'); // Types instantly
await elementHandle.type('World', {delay: 100}); // Types slower, like a user
```

----------------------------------------

TITLE: Using Browser.waitForTarget to Find a New Window Target in TypeScript
DESCRIPTION: This example demonstrates how to use the Browser.waitForTarget method to find a target for a page opened via window.open. It waits for a target with a specific URL to appear.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.waitfortarget.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.evaluate(() => window.open('https://www.example.com/'));
const newWindowTarget = await browser.waitForTarget(
  target => target.url() === 'https://www.example.com/',
);
```

----------------------------------------

TITLE: Getting Request Method in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Returns the method used (`GET`, `POST`, etc.)
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_17

LANGUAGE: javascript
CODE:
```
method()
```

----------------------------------------

TITLE: Building Docker Image for Puppeteer Chrome Linux
DESCRIPTION: Command to build a Docker image for running Puppeteer with Chrome on Linux. The image is tagged as 'puppeteer-chrome-linux'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docker/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
docker build -t puppeteer-chrome-linux .
```

----------------------------------------

TITLE: Launching Puppeteer with Sandbox Disabled
DESCRIPTION: Example JavaScript code showing how to launch Puppeteer with the --no-sandbox and --disable-setuid-sandbox arguments, which are often required when running in restricted environments like Docker or GitLab CI.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_20

LANGUAGE: javascript
CODE:
```
puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });
```

----------------------------------------

TITLE: Enabling Slow-Mo in Puppeteer (TypeScript)
DESCRIPTION: Shows how to use the slowMo option to slow down Puppeteer operations, making it easier to observe what's happening during test execution. This example slows down operations by 250ms.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({
  headless: false,
  slowMo: 250, // slow down by 250ms
});
```

----------------------------------------

TITLE: Using Page.emulateNetworkConditions with Predefined Network Conditions in TypeScript
DESCRIPTION: This example demonstrates how to use the Page.emulateNetworkConditions method with predefined network conditions. It imports PredefinedNetworkConditions, launches a browser, creates a new page, applies 'Slow 3G' network conditions, and navigates to a website.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatenetworkconditions.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import {PredefinedNetworkConditions} from 'puppeteer';
const slow3G = PredefinedNetworkConditions['Slow 3G'];

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulateNetworkConditions(slow3G);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();
```

----------------------------------------

TITLE: Handling Multiple Asynchronous Puppeteer Request Interceptors (TypeScript)
DESCRIPTION: Illustrates the challenge of asynchronous handlers where a request might be handled by another listener while one handler is awaiting an operation. It shows how to use `isInterceptResolutionHandled()` synchronously just before calling a resolution method (`continue`, `abort`, `respond`) to ensure the request hasn't been handled in the meantime.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
/*
This first handler will succeed in calling request.continue because the request interception has never been resolved.
*/
page.on('request', interceptedRequest => {
  // The interception has not been handled yet. Control will pass through this guard.
  if (interceptedRequest.isInterceptResolutionHandled()) return;

  // It is not strictly necessary to return a promise, but doing so will allow Puppeteer to await this handler.
  return new Promise(resolve => {
    // Continue after 500ms
    setTimeout(() => {
      // Inside, check synchronously to verify that the intercept wasn't handled already.
      // It might have been handled during the 500ms while the other handler awaited an async op of its own.
      if (interceptedRequest.isInterceptResolutionHandled()) {
        resolve();
        return;
      }
      interceptedRequest.continue();
      resolve();
    }, 500);
  });
});
```

LANGUAGE: TypeScript
CODE:
```
page.on('request', async interceptedRequest => {
  // The interception has not been handled yet. Control will pass through this guard.
  if (interceptedRequest.isInterceptResolutionHandled()) return;

  await someLongAsyncOperation();
  // The interception *MIGHT* have been handled by the first handler, we can't be sure.
  // Therefore, we must check again before calling continue() or we risk Puppeteer raising an exception.
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.continue();
});
```

----------------------------------------

TITLE: Waiting for Viewport Size Change (Puppeteer, Node.js)
DESCRIPTION: Example demonstrating how to use `page.mainFrame().waitForFunction` to pause execution until a condition inside the browser frame is met, specifically waiting for the `window.innerWidth` to be less than 100. Requires Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.waitforfunction.md#_snippet_1

LANGUAGE: ts
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');
  page.setViewport({width: 50, height: 50});
  await watchDog;
  await browser.close();
})();
```

----------------------------------------

TITLE: Exposing Node.js File System Function (readFile) in Puppeteer Page - TypeScript
DESCRIPTION: This example illustrates exposing a Node.js asynchronous function (`fs.readFile`) to the browser context as `window.readfile`. It uses `page.exposeFunction` with an async callback that returns a Promise, which is awaited by Puppeteer. The snippet then calls `window.readfile` from `page.evaluate` to read a file and log its content. It requires the `puppeteer` and `node:fs` modules.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.exposefunction.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';
import fs from 'node:fs';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('console', msg => console.log(msg.text()));
  await page.exposeFunction('readfile', async filePath => {
    return new Promise((resolve, reject) => {
      fs.readFile(filePath, 'utf8', (err, text) => {
        if (err) reject(err);
        else resolve(text);
      });
    });
  });
  await page.evaluate(async () => {
    // use window.readfile to read contents of a file
    const content = await window.readfile('/etc/hosts');
    console.log(content);
  });
  await browser.close();
})();
```

----------------------------------------

TITLE: Enabling Extensions in Puppeteer Launch on Windows (TypeScript)
DESCRIPTION: Shows how to enable extensions when launching Chrome with Puppeteer on Windows. This is a workaround for issues where Chrome policies enforce running with certain extensions, which conflicts with Puppeteer's default --disable-extensions flag.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_3

LANGUAGE: ts
CODE:
```
const browser = await puppeteer.launch({
  enableExtensions: true,
});
```

----------------------------------------

TITLE: Returning Object by Reference with Puppeteer evaluateHandle (TypeScript)
DESCRIPTION: Demonstrates using `page.evaluateHandle` to return a reference to an object (like a DOM node) from the page context. This returns a `JSHandle` or `ElementHandle` in the Node.js environment, allowing further interaction with the object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/javascript-execution.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const body = await page.evaluateHandle(() => {
  return document.body;
});
console.log(body instanceof ElementHandle); // true
```

----------------------------------------

TITLE: Installing Dependencies in GitLab CI
DESCRIPTION: A before_script block for a .gitlab-ci.yml file that updates package lists and installs necessary libraries required to run headless Chrome in a Docker environment on GitLab CI.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_19

LANGUAGE: bash
CODE:
```
before_script:
  - apt-get update
  - apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2
    libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libgconf-2-4
    libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0
    libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1
    libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1
    libxss1 libxtst6 ca-certificates fonts-liberation libnss3 lsb-release
    xdg-utils wget
```

----------------------------------------

TITLE: Closing a Puppeteer Browser - TypeScript
DESCRIPTION: Demonstrates how to gracefully close a Puppeteer browser instance using the `browser.close()` method. This releases resources and shuts down the browser process.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/browser-management.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

await browser.close();
```

----------------------------------------

TITLE: Launching Firefox and Chrome with WebDriver BiDi in Puppeteer
DESCRIPTION: This code snippet demonstrates how to launch Firefox and Chrome browsers using Puppeteer with WebDriver BiDi protocol. Firefox uses WebDriver BiDi by default, while Chrome requires explicit configuration.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/webdriver-bidi.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const firefoxBrowser = await puppeteer.launch({
  browser: 'firefox', // WebDriver BiDi is used by default.
});
const page = await firefoxBrowser.newPage();
...
await firefoxBrowser.close();

const chromeBrowser = await puppeteer.launch({
  browser: 'chrome',
  protocol: 'webDriverBiDi', // CDP would be used by default for Chrome.
});
const page = await chromeBrowser.newPage();
...
await chromeBrowser.close();
```

----------------------------------------

TITLE: Upgrading Puppeteer Request Handling to Cooperative Mode
DESCRIPTION: Demonstrates a simple upgrade from Legacy Mode to Cooperative Intercept Mode by adding a priority (0) to `abort()` and `continue()`. This allows other handlers to potentially resolve the request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
page.on('request', interceptedRequest => {
  if (request.isInterceptResolutionHandled()) return;
  if (
    interceptedRequest.url().endsWith('.png') ||
    interceptedRequest.url().endsWith('.jpg')
  )
    interceptedRequest.abort('failed', 0);
  else
    interceptedRequest.continue(
      interceptedRequest.continueRequestOverrides(),
      0,
    );
});
```

----------------------------------------

TITLE: Example Usage of Keyboard.sendCharacter (TypeScript)
DESCRIPTION: Demonstrates how to use the `sendCharacter` method on a Puppeteer `page.keyboard` instance to dispatch events for a single character, in this case, a Chinese character.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keyboard.sendcharacter.md#_snippet_1

LANGUAGE: typescript
CODE:
```
page.keyboard.sendCharacter('嗨');
```

----------------------------------------

TITLE: Converting ElementHandle to Specific Element Type in Puppeteer
DESCRIPTION: Example showing how to convert a general ElementHandle to a specific element type (HTMLAnchorElement) using the toElement method. The original handle should not be disposed as it will be the same underlying handle.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.toelement.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const element: ElementHandle<Element> = await page.$('.class-name-of-anchor');
// DO NOT DISPOSE `element`, this will be always be the same handle.
const anchor: ElementHandle<HTMLAnchorElement> = await element.toElement('a');
```

----------------------------------------

TITLE: Handle Puppeteer Intercepted Request State - JavaScript
DESCRIPTION: Checks the resolution state of a Puppeteer intercepted request. If the request has already been handled (e.g., by another handler), the current handler returns early. Otherwise, it calls `continue()` to allow the request to proceed. Requires a `interceptedRequest` object and the `InterceptResolutionAction` enum.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
interceptedRequest.interceptResolutionState().action ===
    InterceptResolutionAction.AlreadyHandled
  )
    return;
  interceptedRequest.continue();
});
```

----------------------------------------

TITLE: Using XPath Selectors with Puppeteer
DESCRIPTION: Demonstrates how to use the `-p-xpath` pseudo-element with `page.waitForSelector` to find an element using an XPath expression. Requires a Puppeteer `page` instance. The example waits for an `<h2>` element identified by its XPath.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_9

LANGUAGE: TypeScript
CODE:
```
// Runs the `//h2` as the XPath expression.
const element = await page.waitForSelector('::-p-xpath(//h2)');
```

----------------------------------------

TITLE: Using Asynchronous Page.waitForFunction in Puppeteer (TypeScript)
DESCRIPTION: This example shows that the `pageFunction` can be an asynchronous function. It fetches data from the GitHub API, creates an image element, waits for a few seconds using a Promise, and then removes the image.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforfunction.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
const username = 'github-username';
await page.waitForFunction(
  async username => {
    const githubResponse = await fetch(
      `https://api.github.com/users/${username}`,
    );
    const githubUser = await githubResponse.json();
    // show the avatar
    const img = document.createElement('img');
    img.src = githubUser.avatar_url;
    // wait 3 seconds
    await new Promise((resolve, reject) => setTimeout(resolve, 3000));
    img.remove();
  },
  {},
  username,
);
```

----------------------------------------

TITLE: Example Usage of Frame.$$eval (TypeScript)
DESCRIPTION: Demonstrates a simple use case of the $$eval method to count the number of 'div' elements present within the frame. It passes the CSS selector 'div' and an arrow function that receives the array of matched elements and returns its length.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.__eval.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const divsCounts = await frame.$$eval('div', divs => divs.length);
```

----------------------------------------

TITLE: Using Puppeteer PredefinedNetworkConditions in TypeScript
DESCRIPTION: This example demonstrates how to use the `PredefinedNetworkConditions` variable with `page.emulateNetworkConditions()` in Puppeteer. It launches a browser, creates a page, and applies different predefined network conditions ('Slow 3G', 'Fast 3G', 'Slow 4G', 'Fast 4G') before navigating to a URL, showcasing how to simulate various network speeds.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.predefinednetworkconditions.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import {PredefinedNetworkConditions} from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 3G']);
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 3G']);
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 4G']); // alias to Fast 3G.
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 4G']);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();
```

----------------------------------------

TITLE: Credit Card Autofill Example in Puppeteer
DESCRIPTION: A code example demonstrating how to use the autofill method to populate credit card information in a form. The example selects an input element and then triggers autofill with sample credit card data.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.autofill.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Select an input on the credit card form.
const name = await page.waitForSelector('form #name');
// Trigger autofill with the desired data.
await name.autofill({
  creditCard: {
    number: '4444444444444444',
    name: 'John Smith',
    expiryMonth: '01',
    expiryYear: '2030',
    cvc: '123',
  },
});
```

----------------------------------------

TITLE: Declaring Mouse.dragAndDrop Method in TypeScript
DESCRIPTION: This code snippet defines the dragAndDrop method in the Mouse class. It performs a drag, dragenter, dragover, and drop sequence. The method takes start and target points, and an optional options object with a delay parameter.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.draganddrop.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract dragAndDrop(
    start: Point,
    target: Point,
    options?: {
      delay?: number;
    },
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Launching Puppeteer with --disable-dev-shm-usage
DESCRIPTION: Launches a Puppeteer browser instance with the '--disable-dev-shm-usage' argument. This flag is recommended when running Chrome in environments with limited shared memory, such as Docker containers, to prevent crashes by writing shared memory files to /tmp instead of /dev/shm.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_23

LANGUAGE: ts
CODE:
```
const browser = await puppeteer.launch({
  args: ['--disable-dev-shm-usage'],
});
```

----------------------------------------

TITLE: Example Usage of Browser.createBrowserContext - TypeScript
DESCRIPTION: Demonstrates how to launch a Puppeteer browser, create a new isolated browser context using `createBrowserContext`, create a new page within that context, and navigate to a URL.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.createbrowsercontext.md#_snippet_1

LANGUAGE: ts
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
// Create a new browser context.
const context = await browser.createBrowserContext();
// Create a new page in a pristine context.
const page = await context.newPage();
// Do stuff
await page.goto('https://example.com');
```

----------------------------------------

TITLE: Creating an MD5 Hash Function in Browser using Puppeteer
DESCRIPTION: Example of using page.exposeFunction to add an MD5 hashing function to the browser context. The function uses Node.js crypto module to calculate MD5 hashes that can be called from the browser's JavaScript.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.exposefunction.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';
import crypto from 'crypto';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('console', msg => console.log(msg.text()));
  await page.exposeFunction('md5', text =>
    crypto.createHash('md5').update(text).digest('hex'),
  );
  await page.evaluate(async () => {
    // use window.md5 to compute hashes
    const myString = 'PUPPETEER';
    const myHash = await window.md5(myString);
    console.log(`md5 of ${myString} is ${myHash}`);
  });
  await browser.close();
})();
```

----------------------------------------

TITLE: Defining Puppeteer Mouse.move Method Signature (TypeScript)
DESCRIPTION: This snippet shows the abstract signature of the 'move' method within the Puppeteer Mouse class. It defines the required parameters for horizontal (x) and vertical (y) coordinates, an optional options object, and indicates that the method returns a Promise that resolves when the action is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.move.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract move(
    x: number,
    y: number,
    options?: Readonly<MouseMoveOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Get Pages in BrowserContext - TypeScript
DESCRIPTION: Retrieves an array of visible Page objects currently open within the BrowserContext. This method returns a Promise that resolves with the list of pages. Note that non-visible pages are not included.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.pages.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class BrowserContext {
  abstract pages(): Promise<Page[]>;
}
```

----------------------------------------

TITLE: Dumping Frame Tree using Puppeteer and TypeScript
DESCRIPTION: This example demonstrates how to recursively traverse and print the URLs of all frames within a Puppeteer page's frame tree, starting from the main frame. It launches a browser, navigates to a URL, and then calls a helper function to dump the tree.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://www.google.com/chrome/browser/canary.html');
  dumpFrameTree(page.mainFrame(), '');
  await browser.close();

  function dumpFrameTree(frame, indent) {
    console.log(indent + frame.url());
    for (const child of frame.childFrames()) {
      dumpFrameTree(child, indent + '  ');
    }
  }
})();
```

----------------------------------------

TITLE: Using Page.select() for Single and Multiple Selections in Puppeteer
DESCRIPTION: This example demonstrates how to use the Page.select() method for both single and multiple selections in a <select> element. It shows selecting a single option 'blue' and multiple options 'red', 'green', and 'blue'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.select.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
page.select('select#colors', 'blue'); // single selection
page.select('select#colors', 'red', 'green', 'blue'); // multiple selections
```

----------------------------------------

TITLE: File Selection Example with FileChooser
DESCRIPTION: Example showing how to wait for a file chooser dialog and select a file. Uses Promise.all to handle both waiting for the file chooser and triggering the file selection dialog.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.filechooser.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const [fileChooser] = await Promise.all([
  page.waitForFileChooser(),
  page.click('#upload-file-button'), // some button that triggers file selection
]);
await fileChooser.accept(['/tmp/myfile.pdf']);
```

----------------------------------------

TITLE: Defining BrowserLauncher.launch Method Signature - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `launch` method of the `BrowserLauncher` class. It indicates the method accepts an optional `LaunchOptions` object and returns a Promise that resolves with a `Browser` instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browserlauncher.launch.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserLauncher {
  launch(options?: LaunchOptions): Promise<Browser>;
}
```

----------------------------------------

TITLE: Defining the Page.cookies() Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Page.cookies() method in Puppeteer. It is defined as an abstract method in the Page class that accepts variable URL parameters and returns a Promise of Cookie arrays.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.cookies.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract cookies(...urls: string[]): Promise<Cookie[]>;
}
```

----------------------------------------

TITLE: Example Usage of JSHandle.getProperties (TypeScript)
DESCRIPTION: Demonstrates how to use JSHandle.getProperties to retrieve properties of a JSHandle representing document.body.children. It iterates through the properties, converts them to ElementHandles if possible, and collects them into an array.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.getproperties.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const listHandle = await page.evaluateHandle(() => document.body.children);
const properties = await listHandle.getProperties();
const children = [];
for (const property of properties.values()) {
  const element = property.asElement();
  if (element) {
    children.push(element);
  }
}
children; // holds elementHandles to all children of document.body
```

----------------------------------------

TITLE: Using CDPSession for Animation Control
DESCRIPTION: Example demonstrating how to create a CDP session, enable animation tracking, listen for animation events, and modify animation playback rate.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const client = await page.createCDPSession();
await client.send('Animation.enable');
client.on('Animation.animationCreated', () =>
  console.log('Animation created!'),
);
const response = await client.send('Animation.getPlaybackRate');
console.log('playback rate is ' + response.playbackRate);
await client.send('Animation.setPlaybackRate', {
  playbackRate: response.playbackRate / 2,
});
```

----------------------------------------

TITLE: Aborting HTTPRequest in Puppeteer (JavaScript)
DESCRIPTION: Aborts a request. Requires request interception to be enabled with Page.setRequestInterception(). Throws an exception if interception is not enabled.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_2

LANGUAGE: javascript
CODE:
```
abort(errorCode, priority)
```

----------------------------------------

TITLE: Example Clearing Permission Overrides in Puppeteer (TypeScript)
DESCRIPTION: Demonstrates how to get the default browser context, override permissions for a specific origin, perform actions, and then clear all previously set permission overrides using `clearPermissionOverrides`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.clearpermissionoverrides.md#_snippet_1

LANGUAGE: ts
CODE:
```
const context = browser.defaultBrowserContext();
context.overridePermissions('https://example.com', ['clipboard-read']);
// do stuff ..
context.clearPermissionOverrides();
```

----------------------------------------

TITLE: Evaluate code with string template workaround - TypeScript
DESCRIPTION: This TypeScript snippet demonstrates a workaround for potential issues when using `page.evaluate()` with async functions after code transpilation (like Babel or TypeScript). By passing the function code as a string template, it prevents the transpiler from altering the function structure in a way that is incompatible with Puppeteer's serialization. Requires the `puppeteer` library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_21

LANGUAGE: typescript
CODE:
```
await page.evaluate(`(async() => {
   console.log('1');
})()`);
```

----------------------------------------

TITLE: Waiting for Element Visibility Using Locators in Puppeteer (TypeScript)
DESCRIPTION: Selects an element matching the CSS selector '.loading' using `page.locator()` and waits for it to become visible or hidden in the DOM using `.wait()`. This is useful when needing to ensure an element's state without performing an interaction. Requires a Puppeteer `Page` instance (`page`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
// '.loading' is a CSS selector.
await page.locator('.loading').wait();
```

----------------------------------------

TITLE: Using ElementHandle.waitForSelector in Puppeteer
DESCRIPTION: This example demonstrates how to use the ElementHandle.waitForSelector method in a Puppeteer script. It waits for an 'img' element to appear on different web pages and logs the URL when found.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.waitforselector.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  let currentURL;
  page
    .mainFrame()
    .waitForSelector('img')
    .then(() => console.log('First URL with image: ' + currentURL));

  for (currentURL of [
    'https://example.com',
    'https://google.com',
    'https://bbc.com',
  ]) {
    await page.goto(currentURL);
  }
  await browser.close();
})();
```

----------------------------------------

TITLE: Using Alternative to Frame.name in Puppeteer (TypeScript)
DESCRIPTION: The recommended alternative approach to the obsolete Frame.name() method. This code retrieves a frame's name or id attribute by first accessing the frame element and then evaluating its properties.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.name.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const element = await frame.frameElement();
const nameOrId = await element.evaluate(frame => frame.name ?? frame.id);
```

----------------------------------------

TITLE: Using Text Selectors with Puppeteer
DESCRIPTION: Shows how to use the `-p-text` pseudo-element with `page.locator` to find elements based on their contained text, even within shadow roots. Includes examples of escaping special characters and quotes within the search text. Requires a Puppeteer `page` instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
// Click a button inside a div element that has Checkout as the inner text.
await page.locator('div ::-p-text(Checkout)').click();
// You need to escape CSS selector syntax such '(', ')' if it is part of the your search text ('Checkout (2 items)').
await page.locator(':scope >>> ::-p-text(Checkout \(2 items\))').click();
// or use quotes escaping any quotes that are part of the search text ('He said: "Hello"').
await page.locator(':scope >>> ::-p-text("He said: \"Hello\"")').click();
```

----------------------------------------

TITLE: Geolocation Control in Puppeteer
DESCRIPTION: Sets the page's geolocation. Requires appropriate permissions to be set using BrowserContext.overridePermissions().
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
setGeolocation(options)
```

----------------------------------------

TITLE: Defining JSHandle.jsonValue Method in TypeScript
DESCRIPTION: Abstract method definition for JSHandle class that returns a Promise containing the serialized representation of a JavaScript object. The method throws an error if the object contains circular references and notably does not invoke any toJSON methods on the object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.jsonvalue.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  abstract jsonValue(): Promise<T>;
}
```

----------------------------------------

TITLE: Setting Cookies with BrowserContext in TypeScript
DESCRIPTION: Defines the abstract signature for the setCookie method within the BrowserContext class. This method is used to set multiple cookies by accepting a rest parameter of CookieData objects and returns a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.setcookie.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class BrowserContext {
  abstract setCookie(...cookies: CookieData[]): Promise<void>;
}
```

----------------------------------------

TITLE: Installing Project Dependencies - npm/Bash
DESCRIPTION: Installs or updates project dependencies based on package.json and package-lock.json. Necessary after modifying package.json or for a clean setup.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_16

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Method Signature for Page.evaluateHandle in Puppeteer TypeScript
DESCRIPTION: The TypeScript signature for the Page.evaluateHandle method, which allows executing JavaScript in the page context and returns handles to page objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}
```

----------------------------------------

TITLE: Defining BrowserContext.close Method in TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the close() method on the BrowserContext abstract class. The method returns a Promise that resolves to void and is used to close a browser context and all associated pages.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.close.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract close(): Promise<void>;
}
```

----------------------------------------

TITLE: Page Event Handling Example
DESCRIPTION: Shows how to subscribe to page load events using the Page class's event emitter functionality.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
page.once('load', () => console.log('Page loaded!'));
```

----------------------------------------

TITLE: Overriding Geolocation Permission in Default Browser Context (TypeScript)
DESCRIPTION: This example demonstrates how to use the `overridePermissions` method on the default browser context (`browser.defaultBrowserContext()`) to grant the 'geolocation' permission specifically for the origin 'https://html5demos.com'. Permissions not listed are automatically denied.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.overridepermissions.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const context = browser.defaultBrowserContext();
await context.overridePermissions('https://html5demos.com', ['geolocation']);
```

----------------------------------------

TITLE: Using Custom React Component Selectors in Puppeteer
DESCRIPTION: Demonstrates how to use custom React component selectors that have been registered with Puppeteer, both standalone and in combination with other selectors.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_18

LANGUAGE: typescript
CODE:
```
await page.locator('::-p-react-component(MyComponent)').click();
// OR used in conjunction with other selectors.
await page.locator('.side-bar ::-p-react-component(MyComponent)').click();
```

----------------------------------------

TITLE: Installing Puppeteer with Custom Cache Directory Bash
DESCRIPTION: This command installs Puppeteer using npm while setting the PUPPETEER_CACHE_DIR environment variable to the current working directory. This overrides the default cache location (~/.cache/puppeteer) and forces the browser download into the specified directory.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_0

LANGUAGE: bash
CODE:
```
PUPPETEER_CACHE_DIR=$(pwd) npm install puppeteer
```

----------------------------------------

TITLE: Passing Arguments to Page.waitForFunction in Puppeteer (TypeScript)
DESCRIPTION: This snippet illustrates how to pass variables from the Node.js context into the `pageFunction` evaluated in the browser. It waits until an element matching the provided CSS selector exists in the document.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforfunction.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const selector = '.foo';
await page.waitForFunction(
  selector => !!document.querySelector(selector),
  {},
  selector,
);
```

----------------------------------------

TITLE: Copying and Reading Clipboard Content with Puppeteer and Clipboard API (TypeScript)
DESCRIPTION: Illustrates how to interact with the browser's clipboard using the Clipboard API via `page.evaluate`. It requires bringing the page to the front for clipboard operations and demonstrates copying selected content using `document.execCommand('copy')` and reading it using `navigator.clipboard.readText()`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// The clipboard api does not allow you to copy, unless the tab is focused.
await page.bringToFront();
await page.evaluate(() => {
  // Copy the selected content to the clipboard
  document.execCommand('copy');
  // Obtain the content of the clipboard as a string
  return navigator.clipboard.readText();
});
```

----------------------------------------

TITLE: Defining WaitTimeoutOptions Interface - TypeScript
DESCRIPTION: This snippet shows the basic TypeScript signature for the `WaitTimeoutOptions` interface, which is used to configure timeout and cancellation behavior for Puppeteer wait functions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.waittimeoutoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface WaitTimeoutOptions
```

----------------------------------------

TITLE: Running @puppeteer/browsers CLI with npx
DESCRIPTION: Demonstrates how to use npx to run the @puppeteer/browsers CLI, including accessing help documentation for various commands.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/browsers/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx @puppeteer/browsers --help
npx @puppeteer/browsers install --help
npx @puppeteer/browsers launch --help
npx @puppeteer/browsers clear --help
npx @puppeteer/browsers list --help
```

----------------------------------------

TITLE: Evaluate Async Function String in Puppeteer
DESCRIPTION: Demonstrates how to use a string template with an immediately invoked async function when calling `page.evaluate()` in Puppeteer. This can be a workaround for issues with transpiled async functions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_28

LANGUAGE: TypeScript
CODE:
```
await page.evaluate(`(async() => {\n   console.log('1');\n})()`);
```

----------------------------------------

TITLE: Defining Frame.hover() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the hover() method for the Frame class in Puppeteer. It takes a selector string as a parameter and returns a Promise that resolves to void. The method hovers the pointer over the center of the first element matching the provided selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.hover.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  hover(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: Network Request Interception in Puppeteer
DESCRIPTION: Enables request interception for modifying network requests. When enabled, requests will stall until they are continued, responded to, or aborted.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_12

LANGUAGE: javascript
CODE:
```
setRequestInterception(value)
```

----------------------------------------

TITLE: Defining LaunchOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the LaunchOptions interface in TypeScript. It specifies the structure for configuring browser launch options in Puppeteer, including various optional and required properties.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.launchoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface LaunchOptions
```

----------------------------------------

TITLE: Defining ScreenshotOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for ScreenshotOptions that specifies all possible configuration parameters for taking screenshots in Puppeteer. It includes options for viewport capture, image encoding, quality settings, and file output configuration.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.screenshotoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ScreenshotOptions
```

----------------------------------------

TITLE: Logging Failed Requests using HTTPRequest.failure
DESCRIPTION: Demonstrates how to listen for the 'requestfailed' event on a Puppeteer page and log the URL and the failure error text for each failed request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.failure.md#_snippet_1

LANGUAGE: typescript
CODE:
```
page.on('requestfailed', request => {
  console.log(request.url() + ' ' + request.failure().errorText);
});
```

----------------------------------------

TITLE: Emulating Media Features with Puppeteer in TypeScript
DESCRIPTION: This comprehensive example demonstrates how to use Page.emulateMediaFeatures() to emulate various CSS media features such as color scheme, reduced motion, and color gamut. It includes multiple scenarios and verification using matchMedia.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatemediafeatures.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.emulateMediaFeatures([
  {name: 'prefers-color-scheme', value: 'dark'},
]);
await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);
// → true
await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);
// → false

await page.emulateMediaFeatures([
  {name: 'prefers-reduced-motion', value: 'reduce'},
]);
await page.evaluate(
  () => matchMedia('(prefers-reduced-motion: reduce)').matches,
);
// → true
await page.evaluate(
  () => matchMedia('(prefers-reduced-motion: no-preference)').matches,
);
// → false

await page.emulateMediaFeatures([
  {name: 'prefers-color-scheme', value: 'dark'},
  {name: 'prefers-reduced-motion', value: 'reduce'},
]);
await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);
// → true
await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);
// → false
await page.evaluate(
  () => matchMedia('(prefers-reduced-motion: reduce)').matches,
);
// → true
await page.evaluate(
  () => matchMedia('(prefers-reduced-motion: no-preference)').matches,
);
// → false

await page.emulateMediaFeatures([{name: 'color-gamut', value: 'p3'}]);
await page.evaluate(() => matchMedia('(color-gamut: srgb)').matches);
// → true
await page.evaluate(() => matchMedia('(color-gamut: p3)').matches);
// → true
await page.evaluate(() => matchMedia('(color-gamut: rec2020)').matches);
// → false
```

----------------------------------------

TITLE: Defining Locator.wait() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Locator.wait() method. It takes an optional parameter of type Readonly<ActionOptions> and returns a Promise of type T.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.wait.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  wait(options?: Readonly<ActionOptions>): Promise<T>;
}
```

----------------------------------------

TITLE: Dialog Usage Example in Puppeteer
DESCRIPTION: Demonstrates how to handle dialog events in Puppeteer, including launching a browser, creating a new page, setting up a dialog event listener, and handling an alert dialog.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('dialog', async dialog => {
    console.log(dialog.message());
    await dialog.dismiss();
    await browser.close();
  });
  page.evaluate(() => alert('1'));
})();
```

----------------------------------------

TITLE: Enabling DevTools for Debugging in Puppeteer (TypeScript)
DESCRIPTION: Demonstrates how to enable DevTools for debugging by setting the devtools option to true when launching Puppeteer. This allows for interactive debugging in the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({devtools: true});
```

----------------------------------------

TITLE: Find First Element by Selector - Puppeteer Page - TypeScript
DESCRIPTION: Finds the first element on the page that matches the provided selector. This method is a shortcut for `Page.mainFrame().$(selector)`. It returns a Promise that resolves to an `ElementHandle` representing the found element, or `null` if no element matches the selector. The `selector` parameter can be a CSS selector or a Puppeteer-specific selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page._.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  $<Selector extends string>(
    selector: Selector,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}
```

----------------------------------------

TITLE: Configuring Preconditions for Puppeteer Locators
DESCRIPTION: Demonstrates how to configure various preconditions for a Puppeteer locator using methods like setEnsureElementIsInTheViewport(), setVisibility(), setWaitForEnabled(), and setWaitForStableBoundingBox(). This allows fine-tuning the waiting behavior before an action is performed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_5

LANGUAGE: javascript
CODE:
```
// Clicks on a button without waiting for any preconditions.
await page
  .locator('button')
  .setEnsureElementIsInTheViewport(false)
  .setVisibility(null)
  .setWaitForEnabled(false)
  .setWaitForStableBoundingBox(false)
  .click();
```

----------------------------------------

TITLE: Example Usage of Page.emulateIdleState in TypeScript
DESCRIPTION: Demonstrates how to use the `emulateIdleState` method to set a specific idle state with overrides and how to clear the emulation by calling the method without arguments.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulateidlestate.md#_snippet_1

LANGUAGE: ts
CODE:
```
// set idle emulation
await page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});

// do some checks here
...

// clear idle emulation
await page.emulateIdleState();
```

----------------------------------------

TITLE: Navigate back in page history (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `goBack` method of the Puppeteer `Page` class. It allows navigating to the previous page in the browser's history, optionally accepting `WaitForOptions` and returning a Promise resolving to the main resource's `HTTPResponse` or `null`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.goback.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract goBack(options?: WaitForOptions): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Getting Cookies in Puppeteer BrowserContext (TypeScript)
DESCRIPTION: This snippet shows the signature for the `cookies()` method of the `BrowserContext` class in Puppeteer. It is an abstract method that returns a Promise resolving to an array of `Cookie` objects, representing all cookies available in the current browser context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.cookies.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class BrowserContext {
  abstract cookies(): Promise<Cookie[]>;
}
```

----------------------------------------

TITLE: Using Custom React Component Selector (TypeScript)
DESCRIPTION: Shows examples of how to use the previously registered 'react-component' custom selector with `page.locator`. It demonstrates selecting an element by its React component name using the `::-p-` prefix and also combining the custom selector with standard CSS selectors.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
await page.locator('::-p-react-component(MyComponent)').click();
// OR used in conjunction with other selectors.
await page.locator('.side-bar ::-p-react-component(MyComponent)').click();
```

----------------------------------------

TITLE: Waiting for a Function Condition with Puppeteer Locator
DESCRIPTION: Demonstrates how to use a JavaScript function as a locator to wait for a specific condition, such as the appearance of an HTMLCanvasElement detected by a MutationObserver. The wait() function will resolve when the condition is met.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_1

LANGUAGE: typescript
CODE:
```
await page
  .locator(() => {
    let resolve!: (node: HTMLCanvasElement) => void;
    const promise = new Promise(res => {
      return (resolve = res);
    });
    const observer = new MutationObserver(records => {
      for (const record of records) {
        if (record.target instanceof HTMLCanvasElement) {
          resolve(record.target);
        }
      }
    });
    observer.observe(document);
    return promise;
  })
  .wait();
```

----------------------------------------

TITLE: Deleting Cookies with Puppeteer in TypeScript
DESCRIPTION: This snippet illustrates how to delete specific cookies from the browser's storage using Puppeteer. It launches a browser and deletes two cookies for the localhost domain with specified attributes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/cookies.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

// Deletes two cookies for the localhost domain.
await browser.deleteCookie(
  {
    name: 'cookie1',
    value: '1',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
  {
    name: 'cookie2',
    value: '2',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
);

console.log(await browser.cookies()); // print available cookies.
```

----------------------------------------

TITLE: Using Vue Component Selectors in Puppeteer
DESCRIPTION: Demonstrates how to use a custom Vue component selector after registering a Vue-specific query handler.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_20

LANGUAGE: typescript
CODE:
```
const element = await page.$('::-p-vue(MyComponent)');
```

----------------------------------------

TITLE: Mapping Input Element Text Content with Puppeteer Page.$$eval (TypeScript)
DESCRIPTION: This snippet uses `page.$$eval` to select all `input` elements and map their `textContent` property. It serves as an example where you might need to provide an explicit return type to `$$eval` if the compiler cannot infer it from the `pageFunction`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.__eval.md#_snippet_2

LANGUAGE: typescript
CODE:
```
const allInputValues = await page.$$eval('input', elements =>
  elements.map(e => e.textContent),
);
```

----------------------------------------

TITLE: Page.setDefaultNavigationTimeout Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `setDefaultNavigationTimeout` method on the `Page` class. It takes a single numeric parameter `timeout` representing the maximum navigation time in milliseconds and returns void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setdefaultnavigationtimeout.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract setDefaultNavigationTimeout(timeout: number): void;
}
```

----------------------------------------

TITLE: Express App with Fast Puppeteer Launch on Cloud Run
DESCRIPTION: This Express route shows the correct approach for launching Puppeteer on Google Cloud Run when CPU is not always enabled. By launching Puppeteer and waiting for it to finish before sending the HTTP response, the operation completes quickly as the CPU remains active during the request processing.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_22

LANGUAGE: js
CODE:
```
app.post('/test-puppeteer', (req, res) => {
  puppeteer.launch().then(browser => {
    // A second later...
    res.json({
      jobId: 123,
      acknowledged: true,
    });
  });
});
```

----------------------------------------

TITLE: Pulling Puppeteer Docker Images
DESCRIPTION: Commands to pull the latest or a specific version of the Puppeteer Docker image from the GitHub Container Registry.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/docker.md#_snippet_0

LANGUAGE: Bash
CODE:
```
docker pull ghcr.io/puppeteer/puppeteer:latest # pulls the latest
docker pull ghcr.io/puppeteer/puppeteer:16.1.0 # pulls the image that contains Puppeteer v16.1.0
```

----------------------------------------

TITLE: Setting Cookies with Puppeteer in TypeScript
DESCRIPTION: This example shows how to directly set cookies in the browser's storage using Puppeteer. It launches a browser and sets two cookies for the localhost domain with specific attributes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/cookies.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

// Sets two cookies for the localhost domain.
await browser.setCookie(
  {
    name: 'cookie1',
    value: '1',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
  {
    name: 'cookie2',
    value: '2',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
);

console.log(await browser.cookies()); // print available cookies.
```

----------------------------------------

TITLE: Using Page.emulateMediaType to Change CSS Media Type (TypeScript)
DESCRIPTION: This example demonstrates how to use page.emulateMediaType to switch the page's CSS media type between 'screen', 'print', and null, and verifies the change using page.evaluate with matchMedia.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulatemediatype.md#_snippet_1

LANGUAGE: typescript
CODE:
```
await page.evaluate(() => matchMedia('screen').matches);
// → true
await page.evaluate(() => matchMedia('print').matches);
// → false

await page.emulateMediaType('print');
await page.evaluate(() => matchMedia('screen').matches);
// → false
await page.evaluate(() => matchMedia('print').matches);
// → true

await page.emulateMediaType(null);
await page.evaluate(() => matchMedia('screen').matches);
// → true
await page.evaluate(() => matchMedia('print').matches);
// → false
```

----------------------------------------

TITLE: Checking Missing Dependencies on Linux
DESCRIPTION: Use this command on a Linux machine to identify missing shared libraries required by the Chrome executable. It pipes the output of `ldd chrome` to `grep not` to filter for lines indicating missing dependencies.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_5

LANGUAGE: bash
CODE:
```
ldd chrome | grep not
```

----------------------------------------

TITLE: Using asynchronous pageFunction with Puppeteer's waitForFunction
DESCRIPTION: This example demonstrates how to use an asynchronous pageFunction with waitForFunction. It fetches data from the GitHub API, displays an avatar image, waits for 3 seconds, and then removes the image.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const username = 'github-username';
await page.waitForFunction(
  async username => {
    const githubResponse = await fetch(
      `https://api.github.com/users/${username}`,
    );
    const githubUser = await githubResponse.json();
    // show the avatar
    const img = document.createElement('img');
    img.src = githubUser.avatar_url;
    // wait 3 seconds
    await new Promise((resolve, reject) => setTimeout(resolve, 3000));
    img.remove();
  },
  {},
  username,
);
```

----------------------------------------

TITLE: JSHandle jsonValue Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `jsonValue()` method of the `JSHandle` class. It indicates that the method is abstract and returns a Promise that resolves to a value of type `T`, representing the serializable JSON value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.jsonvalue.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class JSHandle {
  abstract jsonValue(): Promise<T>;
}
```

----------------------------------------

TITLE: Travis CI Configuration for Puppeteer
DESCRIPTION: Example `.travis.yml` configuration for running Puppeteer tests on Travis CI. It specifies the Node.js language, uses the `xvfb` service for running Chrome in non-headless mode, and runs the `npm test` script.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_12

LANGUAGE: yaml
CODE:
```
language: node_js
node_js: node
services: xvfb
script:
  - npm test
```

----------------------------------------

TITLE: Launching Chrome Headless Shell with GPU Acceleration TS
DESCRIPTION: This TypeScript snippet launches Chrome in 'shell' headless mode using Puppeteer. It passes the `--enable-gpu` argument to activate GPU acceleration, which is disabled by default in this specific headless mode (`chrome-headless-shell`) but can improve performance for certain tasks.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_8

LANGUAGE: ts
CODE:
```
const browser = await puppeteer.launch({
  headless: 'shell',
  args: ['--enable-gpu'],
});
```

----------------------------------------

TITLE: Enable Puppeteer Debug Logging Without Truncation (Bash)
DESCRIPTION: Sets the `DEBUG` environment variable to `puppeteer:*` and `DEBUG_MAX_STRING_LENGTH` to `null` before running the Node.js script. This enables verbose logging for Puppeteer and prevents the truncation of long log messages, which is useful for inspecting full protocol messages.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_8

LANGUAGE: Bash
CODE:
```
env DEBUG="puppeteer:*" env DEBUG_MAX_STRING_LENGTH=null node script.js
```

----------------------------------------

TITLE: Basic String Evaluation Example with Page.evaluateHandle
DESCRIPTION: A simple example showing how to evaluate a string expression with page.evaluateHandle to get a handle to the document object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const aHandle = await page.evaluateHandle('document');
```

----------------------------------------

TITLE: Emitting Events with EventEmitter in TypeScript
DESCRIPTION: The `emit` method on the `EventEmitter` class is used to trigger a specific event type and notify any registered listeners. It takes the event `type` and the associated `event` data as parameters. It returns `true` if there were listeners for the event, and `false` otherwise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.eventemitter.emit.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class EventEmitter {
  emit<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    event: EventsWithWildcard<Events>[Key],
  ): boolean;
}
```

----------------------------------------

TITLE: ElementHandle.$eval Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the ElementHandle.$eval method, which runs a function on the first element matching a selector within the current element. This method supports generic typing for selector matching, function parameters, and return values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle._eval.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  $eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
      NodeFor<Selector>,
      Params
    >,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Registering Custom Query Handler for Vue Components (TypeScript)
DESCRIPTION: Illustrates registering a custom query handler named 'vue' to locate elements based on their associated Vue component. The `queryOne` implementation uses a `TreeWalker` to traverse the DOM and checks for a `__vnode` property to identify Vue components by name, highlighting the ability to use framework-specific internal properties (with a caution note).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_15

LANGUAGE: TypeScript
CODE:
```
Puppeteer.registerCustomQueryHandler('vue', {
  queryOne: (element, name) => {
    const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT);
    do {
      const currentNode = walker.currentNode;
      if (
        currentNode.__vnode?.ctx?.type?.name.toLowerCase() ===
        name.toLocaleLowerCase()
      ) {
        return currentNode;
      }
    } while (walker.nextNode());

    return null;
  }
});
```

----------------------------------------

TITLE: Implementing Page.$$ Method in Puppeteer TypeScript
DESCRIPTION: Method signature for Page.$$ which finds multiple elements on a page using selectors. Returns a Promise resolving to an array of ElementHandle objects. If no elements match the selector, returns an empty array. This is a shortcut for Page.mainFrame().$$(selector).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.__.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  $$<Selector extends string>(
    selector: Selector,
    options?: QueryOptions,
  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
}
```

----------------------------------------

TITLE: Handling WebWorker Lifecycle Events and Listing Workers
DESCRIPTION: This snippet demonstrates how to listen for 'workercreated' and 'workerdestroyed' events on a Puppeteer page object and how to retrieve a list of currently active workers using the page.workers() method.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.webworker.md#_snippet_0

LANGUAGE: typescript
CODE:
```
page.on('workercreated', worker =>
  console.log('Worker created: ' + worker.url()),
);
page.on('workerdestroyed', worker =>
  console.log('Worker destroyed: ' + worker.url()),
);

console.log('Current workers:');
for (const worker of page.workers()) {
  console.log('  ' + worker.url());
}
```

----------------------------------------

TITLE: Getting Text from an Iframe Element in Puppeteer
DESCRIPTION: This snippet shows how to iterate through all frames on a page, find a specific iframe by its 'name' attribute using `frameElement()` and `evaluate()`, and then use `$eval()` within that frame to extract text content from an element matching a CSS selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const frames = page.frames();
let frame = null;
for (const currentFrame of frames) {
  const frameElement = await currentFrame.frameElement();
  const name = await frameElement.evaluate(el => el.getAttribute('name'));
  if (name === 'myframe') {
    frame = currentFrame;
    break;
  }
}
if (frame) {
  const text = await frame.$eval('.selector', element => element.textContent);
  console.log(text);
} else {
  console.error('Frame with name "myframe" not found.');
}
```

----------------------------------------

TITLE: Express App with Slow Puppeteer Launch on Cloud Run
DESCRIPTION: This Express route demonstrates a common issue on Google Cloud Run where launching Puppeteer after sending the HTTP response results in significant delays because the CPU is disabled by default. The Puppeteer launch happens in the background after the client receives the response.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_21

LANGUAGE: js
CODE:
```
import express from 'express';

const app = express();

app.post('/test-puppeteer', (req, res) => {
  res.json({
    jobId: 123,
    acknowledged: true,
  });

  puppeteer.launch().then(browser => {
    // 2 minutes later...
  });
});

app.listen(3000);
```

----------------------------------------

TITLE: Defining Frame.type Method Signature in Puppeteer TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `Frame.type` method. It takes a CSS `selector`, the `text` to type, and optional `options` (specifically `delay`) and returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.type.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  type(
    selector: string,
    text: string,
    options?: Readonly<KeyboardTypeOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Getting Redirect Chain with Redirects (Puppeteer, TypeScript)
DESCRIPTION: Demonstrates navigating to a URL that involves a redirect, retrieving the request's redirect chain, and inspecting its length and the URL of the initial request in the chain.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_20

LANGUAGE: ts
CODE:
```
const response = await page.goto('http://example.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 1
console.log(chain[0].url()); // 'http://example.com'
```

----------------------------------------

TITLE: Waiting for Viewport Change with Puppeteer Page.waitForFunction (TypeScript)
DESCRIPTION: This example shows how to use `page.waitForFunction` to wait for a condition based on the browser's `window.innerWidth`. It launches a browser, sets the viewport size, and waits until the width is less than 100 pixels before closing the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforfunction.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  const watchDog = page.waitForFunction('window.innerWidth < 100');
  await page.setViewport({width: 50, height: 50});
  await watchDog;
  await browser.close();
})();
```

----------------------------------------

TITLE: Log Request Intercept Resolution State in Puppeteer
DESCRIPTION: This snippet demonstrates how to retrieve and log the final resolution state of a request in Puppeteer's Cooperative Intercept Mode. It shows the action and priority that ultimately won the resolution process.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
page.on('request', request => {
  // { action: InterceptResolutionAction.Respond, priority: 15 }, because respond @ 15 > continue @ 15 > respond @ 12 > abort @ 10
  console.log(request.interceptResolutionState());
});
```

----------------------------------------

TITLE: Binding Event Listener with EventEmitter.on (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the EventEmitter.on method. It is used to register a handler function that will be called whenever a specific event type occurs. The method takes the event type (string or symbol) and the handler function as parameters and returns the EventEmitter instance itself, allowing for method chaining.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.eventemitter.on.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class EventEmitter {
  on<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}
```

----------------------------------------

TITLE: Installing Various Chrome and ChromeDriver Versions
DESCRIPTION: Provides examples of installing different versions of Chrome for Testing and ChromeDriver, including specific versions, latest versions for channels, and installing with system dependencies.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/browsers/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npx @puppeteer/browsers install chrome@stable
npx @puppeteer/browsers install chrome@116.0.5793.0
npx @puppeteer/browsers install chrome@117
npx @puppeteer/browsers install chromedriver@canary
npx @puppeteer/browsers install chromedriver@116.0.5793.0
npx puppeteer browsers install chrome --install-deps
```

----------------------------------------

TITLE: Defining Page.$$eval Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the Page.$$eval method that accepts a selector, a function to run in the page context, and optional arguments. The method is generic, allowing for type-safe operations on elements matching the selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.__eval.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  $$eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<
      Array<NodeFor<Selector>>,
      Params
    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Request Interception with Resolution State Checking
DESCRIPTION: Advanced example showing how to use interceptResolutionState for more detailed control over request interception handling.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
page.on('request', interceptedRequest => {
  const {action} = interceptedRequest.interceptResolutionState();
  if (action === InterceptResolutionAction.AlreadyHandled) return;

  return new Promise(resolve => {
    setTimeout(() => {
      const {action} = interceptedRequest.interceptResolutionState();
      if (action === InterceptResolutionAction.AlreadyHandled) {
        resolve();
        return;
      }
      interceptedRequest.continue();
      resolve();
    }, 500);
  });
});
page.on('request', async interceptedRequest => {
  if (
    interceptedRequest.interceptResolutionState().action ===
    InterceptResolutionAction.AlreadyHandled
  )
    return;

  await someLongAsyncOperation();
  if (
    interceptedRequest.interceptResolutionState().action ===
    InterceptResolutionAction.AlreadyHandled
  )
    return;
  interceptedRequest.continue();
});
```

----------------------------------------

TITLE: Defining ProtocolLifeCycleEvent Type in TypeScript for Puppeteer
DESCRIPTION: Defines the ProtocolLifeCycleEvent type which represents the various lifecycle events that can be monitored in Puppeteer. It includes page load completion, DOM content loaded, network idle (no activity), and network almost idle states.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.protocollifecycleevent.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type ProtocolLifeCycleEvent =
  | 'load'
  | 'DOMContentLoaded'
  | 'networkIdle'
  | 'networkAlmostIdle';
```

----------------------------------------

TITLE: Defining BrowserContext.newPage Method Signature in TypeScript
DESCRIPTION: This code snippet shows the abstract signature for the `newPage` method within the `BrowserContext` class in TypeScript. It indicates that the method is abstract and returns a Promise that resolves to a `Page` object. This signature is part of the Puppeteer library's API definition.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.newpage.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract newPage(): Promise<Page>;
}
```

----------------------------------------

TITLE: Checking Element Viewport Intersection in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.isIntersectingViewport method. It checks if the element is visible in the current viewport, optionally taking a threshold value between 0 and 1 (defaulting to 1) for the required intersection amount. The method returns a Promise that resolves to a boolean indicating visibility.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.isintersectingviewport.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  isIntersectingViewport(
    this: ElementHandle<Element>,
    options?: {
      threshold?: number;
    },
  ): Promise<boolean>;
}
```

----------------------------------------

TITLE: Dispatching dragover event in Puppeteer (TypeScript)
DESCRIPTION: Dispatches a `dragover` event at the specified target point with the given drag data. This method is part of the Puppeteer `Mouse` class and is used to simulate drag-and-drop interactions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.dragover.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Mouse {
  abstract dragOver(
    target: Point,
    data: Protocol.Input.DragData,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Example Usage of Page.waitForFrame in Puppeteer
DESCRIPTION: Demonstrates how to use page.waitForFrame with a predicate function to wait for a frame whose frame element has a specific 'name' attribute.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforframe.md#_snippet_1

LANGUAGE: ts
CODE:
```
const frame = await page.waitForFrame(async frame => {
  const frameElement = await frame.frameElement();
  if (!frameElement) {
    return false;
  }
  const name = await frameElement.evaluate(el => el.getAttribute('name'));
  return name === 'test';
});
```

----------------------------------------

TITLE: Using Pierce Selectors in Puppeteer
DESCRIPTION: Demonstrates how to use pierce selectors in Puppeteer to match elements across all shadow roots in a document, including the equivalent deep combinator approach.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_16

LANGUAGE: typescript
CODE:
```
await page.locator('pierce/div').click();
// Same query as the pierce/ one using deep combinators.
await page.locator('& >>> div').click();
```

----------------------------------------

TITLE: Launching Chrome Disabling HttpsFirstBalancedModeAutoEnable TS
DESCRIPTION: This TypeScript snippet shows how to launch Chrome via Puppeteer with a specific command-line argument. The `--disable-features=HttpsFirstBalancedModeAutoEnable` argument is passed to disable a Chrome feature that blocks navigation to HTTP URLs by default, resolving `net::ERR_BLOCKED_BY_CLIENT` errors.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_3

LANGUAGE: ts
CODE:
```
const browser = await puppeteer.launch({
  args: ['--disable-features=HttpsFirstBalancedModeAutoEnable'],
});
```

----------------------------------------

TITLE: Getting Post Data from HTTPRequest in TypeScript
DESCRIPTION: Retrieves the post body data associated with an HTTP request. Returns the post data as a string if present, otherwise returns undefined.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.postdata.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract postData(): string | undefined;
}
```

----------------------------------------

TITLE: Puppeteer Page.select Method Signature (TypeScript)
DESCRIPTION: Provides the TypeScript type signature for the `Page.select` method, detailing its parameters (`selector`, `values`) and return type (`Promise<string[]>`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.select.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  select(selector: string, ...values: string[]): Promise<string[]>;
}
```

----------------------------------------

TITLE: Observing Viewport Size Change with waitForFunction in Puppeteer
DESCRIPTION: Example demonstrating how to use waitForFunction to observe viewport size changes. It creates a watchdog that resolves when the window's inner width becomes less than 100 pixels, then changes the viewport to trigger this condition.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitforfunction.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');
  page.setViewport({width: 50, height: 50});
  await watchDog;
  await browser.close();
})();
```

----------------------------------------

TITLE: Example of Clearing Permission Overrides in Default Browser Context
DESCRIPTION: An example demonstrating how to clear permission overrides in the default browser context. It first gets the default browser context, overrides the clipboard-read permission for example.com, and then clears all permission overrides.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.clearpermissionoverrides.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const context = browser.defaultBrowserContext();
context.overridePermissions('https://example.com', ['clipboard-read']);
// do stuff ..
context.clearPermissionOverrides();
```

----------------------------------------

TITLE: Defining Puppeteer ScreenshotOptions Interface - TypeScript
DESCRIPTION: Defines the TypeScript interface for `ScreenshotOptions` used in Puppeteer to configure screenshot capture settings. This interface outlines the available properties that can be passed to screenshot methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.screenshotoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface ScreenshotOptions
```

----------------------------------------

TITLE: Element Property Access Example
DESCRIPTION: Example showing how to access element properties using Puppeteer
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
// Testing framework specific imports

import {setupBrowserHooks, getBrowserState} from './utils';

describe('<Test Name>', function () {
  setupBrowserHooks();
  it('is running', async function () {
    const {page} = getBrowserState();
    // Query elements
    const elementText = await page
      .locator('.my-component')
      .map(button => button.innerText)
      // Wait for element to show up
      .wait();

    // Assert via assertion library
  });
});
```

----------------------------------------

TITLE: Using Keyboard.sendCharacter Method in Puppeteer
DESCRIPTION: This example demonstrates how to use the sendCharacter method to input a Chinese character into a page using Puppeteer. It sends the character '嗨' (hello) to the page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.sendcharacter.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
page.keyboard.sendCharacter('嗨');
```

----------------------------------------

TITLE: Puppeteer Keyboard.type Usage Examples (TypeScript)
DESCRIPTION: Illustrates how to use the `page.keyboard.type` method in Puppeteer. The examples show typing text instantly and typing text with a specified delay using the `delay` option.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keyboard.type.md#_snippet_1

LANGUAGE: typescript
CODE:
```
await page.keyboard.type('Hello'); // Types instantly
await page.keyboard.type('World', {delay: 100}); // Types slower, like a user
```

----------------------------------------

TITLE: Using Browser.createBrowserContext() in Puppeteer
DESCRIPTION: This example demonstrates how to use the createBrowserContext() method in Puppeteer. It launches a browser, creates a new browser context, opens a new page in that context, and navigates to a website.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.createbrowsercontext.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
// Create a new browser context.
const context = await browser.createBrowserContext();
// Create a new page in a pristine context.
const page = await context.newPage();
// Do stuff
await page.goto('https://example.com');
```

----------------------------------------

TITLE: Registering Custom Query Handlers in Puppeteer
DESCRIPTION: Shows how to create and register custom selector handlers in Puppeteer, allowing for application-specific selector logic like finding React components by ID.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_17

LANGUAGE: typescript
CODE:
```
Puppeteer.registerCustomQueryHandler('react-component', {
  queryOne: (elementOrDocument, selector) => {
    // Dummy example just delegates to querySelector but you can find your
    // React component because this callback runs in the page context.
    return elementOrDocument.querySelector(`[id="${CSS.escape(selector)}"]`);
  },
  queryAll: (elementOrDocument, selector) => {
    // Dummy example just delegates to querySelector but you can find your
    // React component because this callback runs in the page context.
    return elementOrDocument.querySelectorAll(`[id="${CSS.escape(selector)}"]`);
  },
});
```

----------------------------------------

TITLE: Add Script Tag to Frame - Puppeteer TypeScript
DESCRIPTION: Defines the signature for the Frame.addScriptTag method in Puppeteer. This method takes options of type FrameAddScriptTagOptions and returns a Promise that resolves to an ElementHandle for the injected HTMLScriptElement.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.addscripttag.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  addScriptTag(
    options: FrameAddScriptTagOptions,
  ): Promise<ElementHandle<HTMLScriptElement>>; 
}
```

----------------------------------------

TITLE: Creating Locator with Function in Puppeteer Frame (TypeScript)
DESCRIPTION: This signature shows how to use the Frame.locator method with a function. It creates a Locator object based on the result of executing the provided asynchronous function within the frame's context. The function should return the element or value the locator should represent.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.locator.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
class Frame {
  locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;
}
```

----------------------------------------

TITLE: Disposing JSHandle Object - TypeScript
DESCRIPTION: This method releases the JavaScript object referenced by the JSHandle instance, allowing it to be garbage collected. It is an asynchronous operation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.dispose.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  abstract dispose(): Promise<void>;
}
```

----------------------------------------

TITLE: Example using Frame.waitForSelector in TypeScript
DESCRIPTION: Demonstrates how to use Frame.waitForSelector to wait for an image element on different pages, logging the URL when the first image is found. It launches a browser, creates a page, sets up the wait, navigates through URLs, and closes the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.waitforselector.md#_snippet_1

LANGUAGE: ts
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  let currentURL;
  page
    .mainFrame()
    .waitForSelector('img')
    .then(() => console.log('First URL with image: ' + currentURL));

  for (currentURL of [
    'https://example.com',
    'https://google.com',
    'https://bbc.com',
  ]) {
    await page.goto(currentURL);
  }
  await browser.close();
})();
```

----------------------------------------

TITLE: Check if HTTP Response is OK (Puppeteer, TypeScript)
DESCRIPTION: Checks if the HTTP response status code falls within the successful range (200-299). Returns true if successful, false otherwise. This method is part of the Puppeteer HTTPResponse class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.ok.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  ok(): boolean;
}
```

----------------------------------------

TITLE: Using Pierce Selectors with Puppeteer
DESCRIPTION: Demonstrates the `pierce/` selector prefix with `page.locator` to find elements matching a CSS selector across all shadow roots in the document. Also shows an equivalent query using the `>>>` deep combinator. Requires a Puppeteer `page` instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
await page.locator('pierce/div').click();
// Same query as the pierce/ one using deep combinators.
await page.locator('& >>> div').click();
```

----------------------------------------

TITLE: Setting Default Navigation Timeout in Puppeteer TypeScript
DESCRIPTION: Abstract class method definition for setting the default navigation timeout for page operations in Puppeteer. The method takes a timeout parameter in milliseconds and applies it to all navigation-related operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setdefaultnavigationtimeout.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setDefaultNavigationTimeout(timeout: number): void;
}
```

----------------------------------------

TITLE: Define EvaluateFunc Type (TypeScript)
DESCRIPTION: This TypeScript type definition specifies the signature for functions that can be evaluated in the browser context. It takes parameters defined by `InnerParams` and returns a value wrapped in `Awaitable`, indicating it might be a Promise. It is used by Puppeteer's evaluation methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.evaluatefunc.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type EvaluateFunc<T extends unknown[]> = (
  ...params: InnerParams<T>
) => Awaitable<unknown>;
```

----------------------------------------

TITLE: Using DeviceRequestPrompt with Bluetooth Device Selection
DESCRIPTION: Example showing how to wait for a device prompt, handle device selection, and filter devices by name using the DeviceRequestPrompt class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestprompt.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const [devicePrompt] = Promise.all([
  page.waitForDevicePrompt(),
  page.click('#connect-bluetooth'),
]);
await devicePrompt.select(
  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),
);
```

----------------------------------------

TITLE: Enable Puppeteer Debug Logging Excluding Protocol (Bash)
DESCRIPTION: Sets the `DEBUG` environment variable to `puppeteer:*,-puppeteer:protocol:*`. This enables logging for all `puppeteer` namespaces (`puppeteer:*`) but specifically excludes the `puppeteer:protocol:*` namespace, allowing other internal logs to be seen without the noise of the DevTools protocol traffic.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_10

LANGUAGE: Bash
CODE:
```
env DEBUG="puppeteer:*,-puppeteer:protocol:*" node script.js
```

----------------------------------------

TITLE: Example Emulating Vision Deficiencies with Puppeteer in TypeScript
DESCRIPTION: Demonstrates how to use `page.emulateVisionDeficiency` to simulate different vision deficiencies (achromatopsia, deuteranopia, blurredVision, reducedContrast) on a loaded web page and capture screenshots for each simulated state before closing the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulatevisiondeficiency.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://v8.dev/blog/10-years');

  await page.emulateVisionDeficiency('achromatopsia');
  await page.screenshot({path: 'achromatopsia.png'});

  await page.emulateVisionDeficiency('deuteranopia');
  await page.screenshot({path: 'deuteranopia.png'});

  await page.emulateVisionDeficiency('blurredVision');
  await page.screenshot({path: 'blurred-vision.png'});

  await page.emulateVisionDeficiency('reducedContrast');
  await page.screenshot({path: 'reduced-contrast.png'});

  await browser.close();
})();
```

----------------------------------------

TITLE: Testing Chrome Extension Background Page with Puppeteer
DESCRIPTION: This code demonstrates how to launch a browser with a specific Chrome extension loaded and get a handle to its background page for testing. It uses Puppeteer to launch Chrome with the extension and waits for the background page to be available.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/chrome-extensions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';
import path from 'path';

const pathToExtension = path.join(process.cwd(), 'my-extension');
const browser = await puppeteer.launch({
  args: [
    `--disable-extensions-except=${pathToExtension}`,
    `--load-extension=${pathToExtension}`,
  ],
});
const backgroundPageTarget = await browser.waitForTarget(
  target => target.type() === 'background_page',
);
const backgroundPage = await backgroundPageTarget.page();
// Test the background page as you would any other page.
await browser.close();
```

----------------------------------------

TITLE: Defining KeyInput Type in Puppeteer
DESCRIPTION: This TypeScript type alias, `KeyInput`, lists all the specific string values recognized by Puppeteer's keyboard input methods, such as `keyboard.press`. It includes standard alphanumeric keys, function keys, modifier keys, numpad keys, and special characters, ensuring type safety and clarity when simulating keyboard events.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keyinput.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type KeyInput =
  | '0'
  | '1'
  | '2'
  | '3'
  | '4'
  | '5'
  | '6'
  | '7'
  | '8'
  | '9'
  | 'Power'
  | 'Eject'
  | 'Abort'
  | 'Help'
  | 'Backspace'
  | 'Tab'
  | 'Numpad5'
  | 'NumpadEnter'
  | 'Enter'
  | '\r'
  | '\n'
  | 'ShiftLeft'
  | 'ShiftRight'
  | 'ControlLeft'
  | 'ControlRight'
  | 'AltLeft'
  | 'AltRight'
  | 'Pause'
  | 'CapsLock'
  | 'Escape'
  | 'Convert'
  | 'NonConvert'
  | 'Space'
  | 'Numpad9'
  | 'PageUp'
  | 'Numpad3'
  | 'PageDown'
  | 'End'
  | 'Numpad1'
  | 'Home'
  | 'Numpad7'
  | 'ArrowLeft'
  | 'Numpad4'
  | 'Numpad8'
  | 'ArrowUp'
  | 'ArrowRight'
  | 'Numpad6'
  | 'Numpad2'
  | 'ArrowDown'
  |
```

----------------------------------------

TITLE: Defining Page.url Method in TypeScript
DESCRIPTION: TypeScript class definition showing the Page.url() method signature. The method returns a string containing the page's current URL. This is implemented as a shortcut to access the URL of the page's main frame.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.url.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  url(): string;
}
```

----------------------------------------

TITLE: Getting Intercept Resolution State in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Returns an InterceptResolutionState object describing the current resolution action and priority. InterceptResolutionState contains: action: InterceptResolutionAction priority?: number. InterceptResolutionAction is one of: `abort`, `respond`, `continue`, `disabled`, `none`, or `already-handled`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_14

LANGUAGE: javascript
CODE:
```
interceptResolutionState()
```

----------------------------------------

TITLE: Uninstalling Puppeteer Browsers - TypeScript
DESCRIPTION: The uninstall function asynchronously removes browser binaries. It takes an options object of type UninstallOptions and returns a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.uninstall.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function uninstall(options: UninstallOptions): Promise<void>;
```

----------------------------------------

TITLE: Defining ActionOptions Interface in TypeScript
DESCRIPTION: Interface definition for ActionOptions that specifies configuration options for Puppeteer actions. Currently includes an optional signal property of type AbortSignal that can be used to abort locator actions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.actionoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ActionOptions
```

----------------------------------------

TITLE: Reading Files from Node.js in Browser Context with Puppeteer
DESCRIPTION: Example showing how to expose a file reading function to the browser using Puppeteer's exposeFunction. The function uses Node.js fs module to read files that can then be accessed from browser JavaScript.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.exposefunction.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';
import fs from 'node:fs';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('console', msg => console.log(msg.text()));
  await page.exposeFunction('readfile', async filePath => {
    return new Promise((resolve, reject) => {
      fs.readFile(filePath, 'utf8', (err, text) => {
        if (err) reject(err);
        else resolve(text);
      });
    });
  });
  await page.evaluate(async () => {
    // use window.readfile to read contents of a file
    const content = await window.readfile('/etc/hosts');
    console.log(content);
  });
  await browser.close();
})();
```

----------------------------------------

TITLE: Accessing Redirect Chain for a Single Redirect in TypeScript
DESCRIPTION: This example demonstrates how to use the redirectChain() method when a website has a single redirect. It shows how to access the length of the chain and the URL of the first request in the chain.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.redirectchain.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const response = await page.goto('http://example.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 1
console.log(chain[0].url()); // 'http://example.com'
```

----------------------------------------

TITLE: Launching Chrome Headless Shell in Puppeteer
DESCRIPTION: Shows how to launch the chrome-headless-shell version which offers better performance for automation tasks but with limited Chrome features.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/headless-modes.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({headless: 'shell'});
```

----------------------------------------

TITLE: Puppeteer Migration Example
DESCRIPTION: Equivalent test converted from Protractor to Puppeteer
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
import {setupBrowserHooks, getBrowserState} from './utils';

describe('Puppeteer Demo', function () {
  setupBrowserHooks();
  it('should add one and two', function () {
    const {page} = getBrowserState();
    await page.goto('https://juliemr.github.io/protractor-demo/');

    await page.locator('.form-inline > input:nth-child(1)').fill('1');
    await page.locator('.form-inline > input:nth-child(2)').fill('2');
    await page.locator('#gobutton').fill('2');

    const result = await page
      .locator('.table tbody td:last-of-type')
      .map(header => header.innerText)
      .wait();

    expect(result).toEqual('3');
  });
});
```

----------------------------------------

TITLE: ElementHandle.type Method Signature in TypeScript
DESCRIPTION: The TypeScript class signature for the ElementHandle.type() method in Puppeteer. This method types text into an element after focusing it, sending appropriate keyboard events for each character.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.type.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  type(text: string, options?: Readonly<KeyboardTypeOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Focusing ElementHandle in Puppeteer (TypeScript)
DESCRIPTION: Calls the native HTMLElement.focus() method on the element represented by this ElementHandle. This method returns a Promise that resolves when the focus operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.focus.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  focus(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Page.deleteCookie() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.deleteCookie() method. It takes an array of DeleteCookiesRequest objects as parameters and returns a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.deletecookie.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract deleteCookie(...cookies: DeleteCookiesRequest[]): Promise<void>;
}
```

----------------------------------------

TITLE: Page.$eval with Explicit TypeScript Element Type
DESCRIPTION: Example showing how to provide an explicit type for the element parameter in the evaluation function when using TypeScript. This is necessary when accessing properties that are not available on the base Element type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page._eval.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// if you don't provide HTMLInputElement here, TS will error
// as `value` is not on `Element`
const searchValue = await page.$eval(
  '#search',
  (el: HTMLInputElement) => el.value,
);
```

----------------------------------------

TITLE: Defining BrowserContext.deleteCookie Method in TypeScript
DESCRIPTION: TypeScript class definition for the BrowserContext.deleteCookie method which removes specified cookies from the browser context. It accepts one or more Cookie objects as parameters and returns a Promise that resolves when the cookies are deleted.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.deletecookie.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  deleteCookie(...cookies: Cookie[]): Promise<void>;
}
```

----------------------------------------

TITLE: Getting Request Frame in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Returns the frame that initiated the request, or null if navigating to error pages.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_10

LANGUAGE: javascript
CODE:
```
frame()
```

----------------------------------------

TITLE: Configure Puppeteer Cache Directory for App Engine
DESCRIPTION: Configuration file (.puppeteerrc.cjs) to override the default Puppeteer cache directory. This is necessary for Google App Engine standard environment to ensure Puppeteer can find the browser executable when node_modules are cached between builds, preventing issues with the postinstall script.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_24

LANGUAGE: ts
CODE:
```
const {join} = require('path');

/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  cacheDirectory: join(__dirname, 'node_modules', '.puppeteer_cache'),
};
```

----------------------------------------

TITLE: ElementHandle.select Method Usage Examples (TypeScript)
DESCRIPTION: Illustrates how to call the `ElementHandle.select` method with examples for selecting a single option and selecting multiple options, demonstrating its use with an `ElementHandle` instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.select.md#_snippet_1

LANGUAGE: typescript
CODE:
```
handle.select('blue'); // single selection
handle.select('red', 'green', 'blue'); // multiple selections
```

----------------------------------------

TITLE: Installing Puppeteer with npm - Bash
DESCRIPTION: Provides two options for installing the Puppeteer library using npm. The first command installs the main puppeteer package which includes a compatible browser download, while the second installs `puppeteer-core`, requiring you to manage the browser executable yourself.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npm i puppeteer # Downloads compatible Chrome during installation.
npm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.
```

----------------------------------------

TITLE: Typing Elements in Page.$$eval with TypeScript
DESCRIPTION: Example showing how to provide explicit typing for the elements parameter when using Page.$$eval with TypeScript. This demonstrates how to handle type inference when working with input elements.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.__eval.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
await page.$$eval('input', elements => {
  return elements.map(e => e.value);
});
```

----------------------------------------

TITLE: TypeScript ElementHandle contentFrame Method for IFrames
DESCRIPTION: Method signature for getting the frame associated with an HTMLIFrameElement. Returns a Promise that resolves to a Frame object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.contentframe.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  abstract contentFrame(this: ElementHandle<HTMLIFrameElement>): Promise<Frame>;
}
```

----------------------------------------

TITLE: Deleting Cookies with Puppeteer (TypeScript)
DESCRIPTION: Illustrates how to remove cookies from the browser's storage using `browser.deleteCookie()`. It launches a browser and then deletes two specific cookies for the 'localhost' domain by providing their name, domain, and path. Requires Puppeteer dependency.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/cookies.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

// Deletes two cookies for the localhost domain.
await browser.deleteCookie(
  {
    name: 'cookie1',
    value: '1',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
  {
    name: 'cookie2',
    value: '2',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
);

console.log(await browser.cookies()); // print available cookies.
```

----------------------------------------

TITLE: Get HTTPResponse from HTTPRequest (TypeScript)
DESCRIPTION: Retrieves the associated HTTPResponse object for the HTTPRequest. Returns null if the response has not yet been received. The return type is either an HTTPResponse object or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.response.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPRequest {
  abstract response(): HTTPResponse | null;
}
```

----------------------------------------

TITLE: Closing Puppeteer Browser - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the abstract Browser.close() method. It indicates that the method is asynchronous and returns a Promise that resolves when the browser and all its pages are closed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.close.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract close(): Promise<void>;
}
```

----------------------------------------

TITLE: Using Mouse.wheel for Zooming into an Element in Puppeteer
DESCRIPTION: An example that demonstrates using the mouse.wheel method to zoom into an element on a webpage. The code first navigates to a page, finds an element, moves the mouse to the center of the element, and then simulates a wheel event to zoom in.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.wheel.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.goto(
  'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366',
);

const elem = await page.$('div');
const boundingBox = await elem.boundingBox();
await page.mouse.move(
  boundingBox.x + boundingBox.width / 2,
  boundingBox.y + boundingBox.height / 2,
);

await page.mouse.wheel({deltaY: -100});
```

----------------------------------------

TITLE: Tracing a Square with Puppeteer Mouse (TypeScript)
DESCRIPTION: Demonstrates how to simulate mouse movements and clicks using the `page.mouse` object in Puppeteer to draw a square shape on the page. It involves moving to coordinates, pressing the mouse button down, moving to subsequent corners, and finally releasing the button.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Using ‘page.mouse’ to trace a 100x100 square.
await page.mouse.move(0, 0);
await page.mouse.down();
await page.mouse.move(0, 100);
await page.mouse.move(100, 100);
await page.mouse.move(100, 0);
await page.mouse.move(0, 0);
await page.mouse.up();
```

----------------------------------------

TITLE: Using XPath Selectors in Puppeteer
DESCRIPTION: Demonstrates how to use XPath selectors in Puppeteer via the '-p-xpath' syntax to query elements using the browser's native Document.evaluate functionality.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
// Runs the `//h2` as the XPath expression.
const element = await page.waitForSelector('::-p-xpath(//h2)');
```

----------------------------------------

TITLE: Signature for Page.waitForNetworkIdle in TypeScript
DESCRIPTION: Defines the signature for the waitForNetworkIdle method within the Puppeteer Page class. It shows that the method accepts an optional WaitForNetworkIdleOptions object and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitfornetworkidle.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  waitForNetworkIdle(options?: WaitForNetworkIdleOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Frame.evaluate() Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Frame.evaluate() method. It uses generic types to allow flexible parameter and return types, and accepts a function or string to be evaluated in the frame's context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.evaluate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Defining Page.focus() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.focus() method. It takes a selector string as a parameter and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.focus.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  focus(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: HTTPRequest.continue Method Signature in TypeScript
DESCRIPTION: The method signature for HTTPRequest.continue() method, which allows continuing intercepted network requests with optional overrides and priority parameters.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.continue.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  continue(
    overrides?: ContinueRequestOverrides,
    priority?: number,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Evaluating Simple Function with TypeScript Generic (TypeScript)
DESCRIPTION: Shows evaluating a basic function expression using `page.evaluate`. This example specifically highlights how to use the TypeScript generic parameter for better type inference.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.evaluate.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
const aHandle = await page.evaluate(() => 2);
```

----------------------------------------

TITLE: Get Element Properties with Puppeteer (Migration)
DESCRIPTION: Shows how to retrieve properties like `innerText` from an element located by Puppeteer's `locator`. It uses the `.map()` method to transform the element handle and `.wait()` to ensure the element is present before retrieving the property.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_8

LANGUAGE: typescript
CODE:
```
// Testing framework specific imports

import {setupBrowserHooks, getBrowserState} from './utils';

describe('<Test Name>', function () {
  setupBrowserHooks();
  it('is running', async function () {
    const {page} = getBrowserState();
    // Query elements
    const elementText = await page
      .locator('.my-component')
      .map(button => button.innerText)
      // Wait for element to show up
      .wait();

    // Assert via assertion library
  });
});
```

----------------------------------------

TITLE: Defining Page.waitForSelector Method Signature in TypeScript
DESCRIPTION: TypeScript class definition for the Page.waitForSelector method. This method waits for a selector to appear in the page and returns a Promise that resolves to an ElementHandle or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforselector.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  waitForSelector<Selector extends string>(
    selector: Selector,
    options?: WaitForSelectorOptions,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}
```

----------------------------------------

TITLE: ElementHandle.$$ Method Signature in TypeScript
DESCRIPTION: This code defines the signature of the $$ method in the ElementHandle class. The method queries the current element for all elements matching the given selector and returns an array of ElementHandle objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.__.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  $$<Selector extends string>(
    selector: Selector,
    options?: QueryOptions,
  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
}
```

----------------------------------------

TITLE: GeolocationOptions Interface Definition in TypeScript
DESCRIPTION: TypeScript interface definition for GeolocationOptions used in Puppeteer to set browser geolocation coordinates. It includes properties for latitude, longitude, and an optional accuracy value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.geolocationoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface GeolocationOptions
```

----------------------------------------

TITLE: Accessing Redirect Chain with Single Redirect - Puppeteer/TypeScript
DESCRIPTION: This example navigates to a URL that redirects, retrieves the response, accesses the request's redirect chain, and logs its length and the URL of the first request in the chain.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.redirectchain.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const response = await page.goto('http://example.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 1
console.log(chain[0].url()); // 'http://example.com'
```

----------------------------------------

TITLE: Dumping Accessibility Tree using Puppeteer TypeScript
DESCRIPTION: Captures the current accessibility tree state using `page.accessibility.snapshot()` and logs the resulting `SerializedAXNode` object to the console.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.accessibility.snapshot.md#_snippet_0

LANGUAGE: typescript
CODE:
```
const snapshot = await page.accessibility.snapshot();
console.log(snapshot);
```

----------------------------------------

TITLE: Install Chromium on Amazon Linux 2 EC2 - Bash
DESCRIPTION: This bash script provides the commands necessary to install Chromium and its required dependencies on an Amazon Linux 2 EC2 instance for use with Puppeteer. It first enables the EPEL repository and then uses `yum` to install the `chromium` package, addressing common dependency issues. Requires `sudo` privileges on the EC2 instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_20

LANGUAGE: bash
CODE:
```
sudo amazon-linux-extras install epel -y
```

LANGUAGE: bash
CODE:
```
sudo yum install -y chromium
```

----------------------------------------

TITLE: Handling Multiple Asynchronous Puppeteer Request Interceptors with State Check (TypeScript)
DESCRIPTION: Presents an alternative approach for asynchronous handlers using `interceptResolutionState()` to get more detailed information about the request's handling status. Similar to `isInterceptResolutionHandled()`, this check must be performed synchronously just before resolving the request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
/*
This first handler will succeed in calling request.continue because the request interception has never been resolved.
*/
page.on('request', interceptedRequest => {
  // The interception has not been handled yet. Control will pass through this guard.
  const {action} = interceptedRequest.interceptResolutionState();
  if (action === InterceptResolutionAction.AlreadyHandled) return;

  // It is not strictly necessary to return a promise, but doing so will allow Puppeteer to await this handler.
  return new Promise(resolve => {
    // Continue after 500ms
    setTimeout(() => {
      // Inside, check synchronously to verify that the intercept wasn't handled already.
      // It might have been handled during the 500ms while the other handler awaited an async op of its own.
      const {action} = interceptedRequest.interceptResolutionState();
      if (action === InterceptResolutionAction.AlreadyHandled) {
        resolve();
        return;
      }
      interceptedRequest.continue();
      resolve();
    }, 500);
  });
});
```

LANGUAGE: TypeScript
CODE:
```
page.on('request', async interceptedRequest => {
  // The interception has not been handled yet. Control will pass through this guard.
  if (
    interceptedRequest.interceptResolutionState().action ===
    InterceptResolutionAction.AlreadyHandled
  )
    return;

  await someLongAsyncOperation();
  // The interception *MIGHT* have been handled by the first handler, we can't be sure.
  // Therefore, we must check again before calling continue() or we risk Puppeteer raising an exception.
  if (
```

----------------------------------------

TITLE: Implementing Browser.newPage() Method in TypeScript
DESCRIPTION: TypeScript signature for the Browser.newPage() method which creates a new page in the default browser context. The method returns a Promise that resolves to a Page object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.newpage.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract newPage(): Promise<Page>;
}
```

----------------------------------------

TITLE: Implementing Event Emission in TypeScript EventEmitter
DESCRIPTION: Method signature for emitting events in an EventEmitter class. Takes an event type and event data as parameters, returns a boolean indicating if there were any listeners. Uses generic types for type-safe event handling.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.emit.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class EventEmitter {
  emit<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    event: EventsWithWildcard<Events>[Key],
  ): boolean;
}
```

----------------------------------------

TITLE: Filtering Locator results using a Predicate (TypeScript)
DESCRIPTION: The `filter` method on a Puppeteer `Locator` takes a `Predicate<T, S>` function. This predicate is applied to the values located by the original locator. If the predicate returns false, the locator will retry until it finds a value that satisfies the predicate or times out. It returns a new `Locator<S>` where `S` is the refined type based on the predicate.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.filter.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  filter<S extends T>(predicate: Predicate<T, S>): Locator<S>;
}
```

----------------------------------------

TITLE: Explicitly Typing evaluateHandle Return as ElementHandle (TypeScript)
DESCRIPTION: Explains how to use TypeScript generics with `page.evaluateHandle` to explicitly declare that the function is expected to return an `ElementHandle`. This provides better type safety and enables specific `ElementHandle` methods on the returned handle.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.evaluatehandle.md#_snippet_0

LANGUAGE: typescript
CODE:
```
const button = await page.evaluateHandle<ElementHandle>(...);
```

----------------------------------------

TITLE: Checking if Request is Navigation Request in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Returns True if the request is the driver of the current frame's navigation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_16

LANGUAGE: javascript
CODE:
```
isNavigationRequest()
```

----------------------------------------

TITLE: Zooming into Element using Puppeteer Mouse.wheel - TypeScript
DESCRIPTION: Demonstrates how to navigate to a page, find an element, calculate its center, move the mouse cursor to the center, and then dispatch a `mousewheel` event with `deltaY` to simulate zooming. Requires a Puppeteer `page` instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.wheel.md#_snippet_1

LANGUAGE: typescript
CODE:
```
await page.goto(
  'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366',
);

const elem = await page.$('div');
const boundingBox = await elem.boundingBox();
await page.mouse.move(
  boundingBox.x + boundingBox.width / 2,
  boundingBox.y + boundingBox.height / 2,
);

await page.mouse.wheel({deltaY: -100});
```

----------------------------------------

TITLE: Puppeteer Cooperative Intercept Mode - Respond Wins (TS)
DESCRIPTION: This example demonstrates Puppeteer's Cooperative Intercept Mode. All handlers specify a priority. The handler voting to respond at priority 15 wins over the handler voting to abort at priority 10, as higher priorities take precedence in Cooperative Mode.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_8

LANGUAGE: TypeScript
CODE:
```
// Final outcome: cooperative respond() @ 15
page.setRequestInterception(true);
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to abort at priority 10
  request.abort('failed', 10);
});
page.on('request', request => {
```

----------------------------------------

TITLE: Defining Puppeteer LaunchOptions Interface
DESCRIPTION: This code snippet shows the TypeScript signature for the LaunchOptions interface, which defines the structure for configuring how Puppeteer launches a browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.launchoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface LaunchOptions
```

----------------------------------------

TITLE: Connecting to Browser Instance with Puppeteer in TypeScript
DESCRIPTION: Function signature for Puppeteer's connect method that takes ConnectOptions and returns a Promise resolving to a Browser instance. Used to establish connections to existing browser instances.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connect.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
connect: (options: PuppeteerCore.ConnectOptions) => Promise<PuppeteerCore.Browser>;
```

----------------------------------------

TITLE: Retrieving Frame HTML Content with Puppeteer in TypeScript
DESCRIPTION: This code snippet defines the signature of the content() method in the Frame class. It returns a Promise that resolves to a string containing the full HTML contents of the frame, including the DOCTYPE declaration.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.content.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  content(): Promise<string>;
}
```

----------------------------------------

TITLE: Creating Locator with Selector in Puppeteer Frame (TypeScript)
DESCRIPTION: This signature shows how to use the Frame.locator method with a selector string. It creates a Locator object that can be used to query for elements matching the provided selector within the frame. The selector can be a CSS selector, text selector, a11y selector, xpath selector, or a prefixed selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.locator.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  locator<Selector extends string>(
    selector: Selector,
  ): Locator<NodeFor<Selector>>; 
}
```

----------------------------------------

TITLE: Installing Browsers via CLI
DESCRIPTION: Examples demonstrating how to use the `install` command of the @puppeteer/browsers CLI to download specific browser types, versions, or channels (like stable, canary). Includes an example for installing system dependencies on Debian/Ubuntu.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/index.md#_snippet_5

LANGUAGE: sh
CODE:
```
# Download the latest available Chrome for Testing binary corresponding to the Stable channel.
npx @puppeteer/browsers install chrome@stable

# Download a specific Chrome for Testing version.
npx @puppeteer/browsers install chrome@116.0.5793.0

# Download the latest Chrome for Testing version for the given milestone.
npx @puppeteer/browsers install chrome@117

# Download the latest available ChromeDriver version corresponding to the Canary channel.
npx @puppeteer/browsers install chromedriver@canary

# Download a specific ChromeDriver version.
npx @puppeteer/browsers install chromedriver@116.0.5793.0

# On Ubuntu/Debian and only for Chrome, install the browser and required system dependencies.
# If the browser version has already been installed, the command
# will still attempt to install system dependencies.
# Requires root privileges.
npx puppeteer browsers install chrome --install-deps
```

----------------------------------------

TITLE: Removing Cookies in Puppeteer BrowserContext (TypeScript)
DESCRIPTION: This method signature shows how to call the `deleteCookie` method on a `BrowserContext` instance. It accepts an array of `Cookie` objects to be removed and returns a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.deletecookie.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class BrowserContext {
  deleteCookie(...cookies: Cookie[]): Promise<void>;
}
```

----------------------------------------

TITLE: Enqueueing Intercept Action in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Adds an async request handler to the processing queue. Deferred handlers are not guaranteed to execute in any particular order but are guaranteed to resolve before the request interception is finalized.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_6

LANGUAGE: javascript
CODE:
```
enqueueInterceptAction(pendingHandler)
```

----------------------------------------

TITLE: Method Signature - Browser.defaultBrowserContext - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the defaultBrowserContext method within the Browser class, indicating it's an abstract method that returns a BrowserContext object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.defaultbrowsercontext.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Browser {
  abstract defaultBrowserContext(): BrowserContext;
}
```

----------------------------------------

TITLE: Changing Default Cache Directory - JS (.puppeteerrc.cjs)
DESCRIPTION: Illustrates how to configure Puppeteer using a CommonJS file to change the default directory where downloaded browsers are cached. This example uses 'path.join' and '__dirname' to set the cache location relative to the configuration file.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/configuration.md#_snippet_4

LANGUAGE: js
CODE:
```
const {join} = require('path');

/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  // Changes the cache location for Puppeteer.
  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),
};
```

----------------------------------------

TITLE: Connecting to Browser Instance with Puppeteer (Browser) - TS/JS
DESCRIPTION: This snippet shows how to import the browser-specific Puppeteer build and connect to an existing browser instance via a WebSocket endpoint. It then retrieves the number of open pages and disconnects. Requires a running browser instance with a valid WebSocket URL (`wsUrl`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/running-puppeteer-in-the-browser.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer-core/lib/esm/puppeteer/puppeteer-core-browser.js';

const browser = await puppeteer.connect({
  browserWSEndpoint: wsUrl,
});

alert('Browser has ' + (await browser.pages()).length + ' pages');

browser.disconnect();
```

----------------------------------------

TITLE: Signature of Browser.createBrowserContext Method - TypeScript
DESCRIPTION: Shows the abstract signature of the `createBrowserContext` method within the `Browser` class, indicating it takes optional `BrowserContextOptions` and returns a `Promise` resolving to a `BrowserContext`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.createbrowsercontext.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract createBrowserContext(
    options?: BrowserContextOptions,
  ): Promise<BrowserContext>;
}
```

----------------------------------------

TITLE: Defining Page.waitForFrame method signature in TypeScript
DESCRIPTION: TypeScript class definition showing the waitForFrame method signature in the Page class. This method waits for a frame matching given conditions and returns a Promise resolving to the Frame object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforframe.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  waitForFrame(
    urlOrPredicate: string | ((frame: Frame) => Awaitable<boolean>),
    options?: WaitTimeoutOptions,
  ): Promise<Frame>;
}
```

----------------------------------------

TITLE: Implementing Locator.fill() Method in Puppeteer
DESCRIPTION: This code snippet shows the TypeScript signature for the Locator.fill() method in Puppeteer. The method accepts a value string to fill into the element and optional action options. It works with contenteditable elements, select dropdowns, textareas, and input fields.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.fill.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  fill<ElementType extends Element>(
    this: Locator<ElementType>,
    value: string,
    options?: Readonly<ActionOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Signature of Frame.$eval Method in Puppeteer (TypeScript)
DESCRIPTION: Defines the signature for the Frame.$eval method. It takes a CSS or Puppeteer-specific selector, a function to evaluate in the frame's context, and optional arguments. It returns a Promise that resolves with the result of the evaluated function.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame._eval.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  $eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
      NodeFor<Selector>,
      Params
    >,
  >(
    selector: Selector,
    pageFunction: string | Func,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Using Specific @puppeteer/browsers Versions with npx
DESCRIPTION: Demonstrates how to use npx to execute a specific version of the @puppeteer/browsers package or force the latest version. Includes an example of automatically confirming the installation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/index.md#_snippet_2

LANGUAGE: bash
CODE:
```
# Always install and use the latest version from the registry.
npx @puppeteer/browsers@latest --help
# Always use a specifc version.
npx @puppeteer/browsers@2.4.1 --help
# Always install the latest version and automatically confirm the installation.
npx --yes @puppeteer/browsers@latest --help
```

----------------------------------------

TITLE: Connecting to an Existing Puppeteer Browser - TypeScript
DESCRIPTION: Demonstrates how to connect to a Puppeteer browser instance that was launched externally, using its WebSocket endpoint. It also shows how to disconnect from the browser without closing it.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/browser-management.md#_snippet_4

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.connect({
  browserWSEndpoint: 'ws://127.0.0.1:9222/...',
});

const page = await browser.newPage();

browser.disconnect();
```

----------------------------------------

TITLE: ElementHandle.uploadFile Method Signature in TypeScript
DESCRIPTION: Defines the method signature for uploadFile() in the ElementHandle class. This method accepts file paths as parameters and sets them as the value of an HTML input element. It requires that the ElementHandle references an HTMLInputElement.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.uploadfile.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  abstract uploadFile(
    this: ElementHandle<HTMLInputElement>,
    ...paths: string[]
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Setting Up Setuid Sandbox Executable
DESCRIPTION: A sequence of bash commands to configure the setuid sandbox executable provided with Chrome. This involves changing directory to the Chrome installation path, setting root ownership and appropriate permissions (setuid bit), and optionally copying it to a shared system location.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_9

LANGUAGE: bash
CODE:
```
cd ~/.cache/puppeteer/chrome/linux-<version>/chrome-linux64/
sudo chown root:root chrome_sandbox
sudo chmod 4755 chrome_sandbox
sudo cp -p chrome_sandbox /usr/local/sbin/chrome-devel-sandbox
```

----------------------------------------

TITLE: Retrieving Cookies from Default Browser Context in Puppeteer using TypeScript
DESCRIPTION: Method signature for Browser.cookies() which returns a Promise resolving to an array of Cookie objects from the default browser context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.cookies.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  cookies(): Promise<Cookie[]>;
}
```

----------------------------------------

TITLE: Exposing Functions to Browser Context in Puppeteer
DESCRIPTION: The exposeFunction method adds a function to the page's window object, allowing it to be called from the browser context. The function executes in Node.js and returns a Promise resolving to its return value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_5

LANGUAGE: JavaScript
CODE:
```
page.exposeFunction(name, puppeteerFunction)
```

----------------------------------------

TITLE: Running Puppeteer Docker Container
DESCRIPTION: Command to run a Puppeteer Docker container with necessary capabilities and execute a Node.js script. Requires SYS_ADMIN capability for sandbox mode.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/docker.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
docker run -i --init --cap-add=SYS_ADMIN --rm ghcr.io/puppeteer/puppeteer:latest node -e "$(cat path/to/script.js)"
```

----------------------------------------

TITLE: Defining Page.waitForFileChooser Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.waitForFileChooser method. It takes an optional WaitTimeoutOptions parameter and returns a Promise resolving to a FileChooser object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfilechooser.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract waitForFileChooser(
    options?: WaitTimeoutOptions,
  ): Promise<FileChooser>;
}
```

----------------------------------------

TITLE: Getting Frame Name or ID in Puppeteer
DESCRIPTION: Provides an alternative way to get the name or ID of a frame element, replacing the deprecated frame.name() method. It retrieves the frame element and evaluates a JavaScript expression to access its name or id property.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
const element = await frame.frameElement();
const nameOrId = await element.evaluate(frame => frame.name ?? frame.id);
```

----------------------------------------

TITLE: Generating PDF of Page in Puppeteer
DESCRIPTION: The pdf method generates a PDF of the page using the 'print' CSS media type. It allows customization through options and can be modified to use 'screen' media type by calling page.emulateMediaType('screen') before pdf generation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_7

LANGUAGE: JavaScript
CODE:
```
page.pdf(options)
```

----------------------------------------

TITLE: Defining Page.setContent Method (TypeScript)
DESCRIPTION: Defines the signature for the `setContent` method within the Puppeteer `Page` class. This method is used to set the HTML content of the page. It accepts the HTML markup as a string and optional `WaitForOptions`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setcontent.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  setContent(html: string, options?: WaitForOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Querying Element in Frame (TypeScript)
DESCRIPTION: Queries the frame for the first element matching the provided selector. It accepts a selector string and returns a Promise resolving to an ElementHandle for the found element or null if no element is found. The selector can be a standard CSS selector or a Puppeteer-specific selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame._.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  $<Selector extends string>(
    selector: Selector,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}
```

----------------------------------------

TITLE: Generate Untrusted Click Event using page.evaluate (TypeScript)
DESCRIPTION: This snippet demonstrates how to generate an untrusted click event using Puppeteer's page.evaluate method. It executes JavaScript code directly within the browser's page context to find a submit button and trigger its native click() method, bypassing Puppeteer's default trusted event generation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/faq.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
await page.evaluate(() => {
  document.querySelector('button[type=submit]').click();
});
```

----------------------------------------

TITLE: Log Pending Protocol Calls (TypeScript)
DESCRIPTION: Logs a list of pending protocol errors from the browser instance's debug information. This helps identify async Puppeteer calls that are not resolving and provides stacktraces to pinpoint the originating code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_11

LANGUAGE: TypeScript
CODE:
```
console.log(browser.debugInfo.pendingProtocolErrors);
```

----------------------------------------

TITLE: Configuring Multiple Browser Downloads - JS (.puppeteerrc.cjs)
DESCRIPTION: Provides a configuration file example using CommonJS syntax to instruct Puppeteer to download both Chrome and Firefox during installation by setting 'skipDownload' to false for each browser type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/configuration.md#_snippet_2

LANGUAGE: js
CODE:
```
/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  // Download Chrome (default `skipDownload: false`).
  chrome: {
    skipDownload: false,
  },
  // Download Firefox (default `skipDownload: true`).
  firefox: {
    skipDownload: false,
  },
};
```

----------------------------------------

TITLE: Setting Timeout for Puppeteer Locators
DESCRIPTION: Shows how to set a specific timeout duration for a Puppeteer locator using the setTimeout() method. If the element is not found or preconditions are not met within this time, a TimeoutError will be thrown.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_6

LANGUAGE: javascript
CODE:
```
// Time out after 3 sec.
await page.locator('button').setTimeout(3000).click();
```

----------------------------------------

TITLE: Dumping Frame Tree Example in TypeScript
DESCRIPTION: A complete example showing how to navigate to a page and recursively dump its frame tree structure. This demonstrates traversing frame hierarchies using mainFrame() and childFrames() methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://www.google.com/chrome/browser/canary.html');
  dumpFrameTree(page.mainFrame(), '');
  await browser.close();

  function dumpFrameTree(frame, indent) {
    console.log(indent + frame.url());
    for (const child of frame.childFrames()) {
      dumpFrameTree(child, indent + '  ');
    }
  }
})();
```

----------------------------------------

TITLE: ElementHandle.boundingBox Method Signature in TypeScript
DESCRIPTION: Defines the signature of the boundingBox() method in the ElementHandle class. This method returns a Promise that resolves to either a BoundingBox object containing the element's position and dimensions relative to the main frame, or null if the element is not part of the layout.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.boundingbox.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  boundingBox(): Promise<BoundingBox | null>;
}
```

----------------------------------------

TITLE: Defining the focus() method in the Frame class (TypeScript)
DESCRIPTION: TypeScript signature for the focus() method in Puppeteer's Frame class. This method focuses the first element matching a selector and returns a Promise that resolves when complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.focus.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  focus(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: Retrieving HTML Content with Page.content() in Puppeteer (TypeScript)
DESCRIPTION: Definition of the content() method in the Page class, which returns a Promise that resolves to a string containing the full HTML content of the page, including the DOCTYPE declaration.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.content.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  content(): Promise<string>;
}
```

----------------------------------------

TITLE: Setting User Agent in Puppeteer Page (TypeScript)
DESCRIPTION: Defines the signature for the `setUserAgent` method within the abstract `Page` class in Puppeteer. This method is used to set the user agent string and optional metadata for a page, returning a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setuseragent.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setUserAgent(
    userAgent: string,
    userAgentMetadata?: Protocol.Emulation.UserAgentMetadata,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Checking if HTTP Request is Navigation Request (TypeScript)
DESCRIPTION: Checks if the current HTTP request is the primary request that initiated the navigation of the current frame. This method is part of the `HTTPRequest` class in Puppeteer and returns a boolean indicating the result.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.isnavigationrequest.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPRequest {
  abstract isNavigationRequest(): boolean;
}
```

----------------------------------------

TITLE: Get URL of HTTP Response (TypeScript)
DESCRIPTION: Retrieves the URL associated with the HTTP response. This method is part of the HTTPResponse class and returns the URL as a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.url.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract url(): string;
}
```

----------------------------------------

TITLE: Example Usage of Frame.$eval Method in Puppeteer (TypeScript)
DESCRIPTION: Demonstrates how to use the Frame.$eval method to retrieve the value property of the first element matching the CSS selector '#search' within a frame. The result is awaited and stored in the 'searchValue' variable.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame._eval.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const searchValue = await frame.$eval('#search', el => el.value);
```

----------------------------------------

TITLE: Advanced Configurable Cooperative Intercept Handler in Puppeteer
DESCRIPTION: Fine-grained control implementation that allows separate configuration of abort and continue priorities through a typed configuration interface. Provides maximum flexibility while maintaining backward compatibility.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
interface InterceptResolutionConfig {
  abortPriority?: number;
  continuePriority?: number;
}

// This approach supports multiple priorities based on situational
// differences. You could, for example, create a config that
// allowed separate priorities for PNG vs JPG.
const DEFAULT_CONFIG: InterceptResolutionConfig = {
  abortPriority: undefined, // Default to Legacy Mode
  continuePriority: undefined, // Default to Legacy Mode
};

// Defaults to undefined which preserves Legacy Mode behavior
let _config: Partial<InterceptResolutionConfig> = {};

export const setInterceptResolutionConfig = (
  config: InterceptResolutionConfig,
) => (_config = {...DEFAULT_CONFIG, ...config});

page.on('request', interceptedRequest => {
  if (request.isInterceptResolutionHandled()) return;
  if (
    interceptedRequest.url().endsWith('.png') ||
    interceptedRequest.url().endsWith('.jpg')
  ) {
    interceptedRequest.abort('failed', _config.abortPriority);
  } else {
    // Here we use a custom-configured priority to allow for Opinionated
    // continuation.
    // We would only want to allow this if we had a very clear reason why
    // some use cases required Opinionated continuation.
    interceptedRequest.continue(
      interceptedRequest.continueRequestOverrides(),
      _config.continuePriority, // Why would we ever want priority!==0 here?
    );
  }
});
```

----------------------------------------

TITLE: Clipboard Operations in Puppeteer
DESCRIPTION: Example showing how to interact with the clipboard API to copy selected content.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
// The clipboard api does not allow you to copy, unless the tab is focused.
await page.bringToFront();
await page.evaluate(() => {
  // Copy the selected content to the clipboard
  document.execCommand('copy');
  // Obtain the content of the clipboard as a string
  return navigator.clipboard.readText();
});
```

----------------------------------------

TITLE: Get All Pages - Puppeteer Browser - TypeScript
DESCRIPTION: This TypeScript signature shows the definition of the `pages()` method within the `Browser` class. It indicates that calling `pages()` returns a Promise that resolves to an array of `Page` objects, representing all visible pages managed by the browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.pages.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Browser {
  pages(): Promise<Page[]>;
}
```

----------------------------------------

TITLE: Frame.goto Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the Frame.goto() method which navigates a frame to a URL. It accepts a URL string and optional configuration for waiting behavior, returning a Promise that resolves to an HTTPResponse object or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.goto.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  abstract goto(
    url: string,
    options?: GoToOptions,
  ): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Defining the setDefaultTimeout method in Puppeteer's Page class
DESCRIPTION: TypeScript signature for the setDefaultTimeout method that allows setting a default timeout for all operations on a page. The method takes a timeout parameter specified in milliseconds and returns void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setdefaulttimeout.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setDefaultTimeout(timeout: number): void;
}
```

----------------------------------------

TITLE: BrowserContext.waitForTarget Method Signature - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `waitForTarget` method within the `BrowserContext` class, detailing its parameters and return type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.waitfortarget.md#_snippet_0

LANGUAGE: ts
CODE:
```
class BrowserContext {
  waitForTarget(
    predicate: (x: Target) => boolean | Promise<boolean>,
    options?: WaitForTargetOptions,
  ): Promise<Target>;
}
```

----------------------------------------

TITLE: Defining PuppeteerLifeCycleEvent Type (TypeScript)
DESCRIPTION: This TypeScript code defines the `PuppeteerLifeCycleEvent` type as a union of string literals. These literals represent specific page lifecycle events that Puppeteer methods, such as `page.goto()` or `page.waitForNavigation()`, can wait for before considering navigation complete. The events include standard DOM events ('load', 'domcontentloaded') and custom network idle states ('networkidle0', 'networkidle2').
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteerlifecycleevent.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type PuppeteerLifeCycleEvent =
  /**
   * Waits for the 'load' event.
   */
  | 'load'
  /**
   * Waits for the 'DOMContentLoaded' event.
   */
  | 'domcontentloaded'
  /**
   * Waits till there are no more than 0 network connections for at least `500`
   * ms.
   */
  | 'networkidle0'
  /**
   * Waits till there are no more than 2 network connections for at least `500`
   * ms.
   */
  | 'networkidle2';
```

----------------------------------------

TITLE: Cancel FileChooser - Puppeteer - TypeScript
DESCRIPTION: Closes the file chooser dialog without selecting any files. This method is part of the Puppeteer FileChooser class and returns a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.filechooser.cancel.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class FileChooser {
  cancel(): Promise<void>;
}
```

----------------------------------------

TITLE: Setting Puppeteer Cache Directory via Environment Variable (Bash)
DESCRIPTION: Demonstrates how to set the PUPPETEER_CACHE_DIR environment variable to specify a custom location for Puppeteer to download and cache browsers. This is useful when the default home directory is not accessible or for better control over cache location.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_0

LANGUAGE: bash
CODE:
```
PUPPETEER_CACHE_DIR=$(pwd) npm install puppeteer
PUPPETEER_CACHE_DIR=$(pwd) node <script-path>
```

----------------------------------------

TITLE: Launching Browser Process with Puppeteer in TypeScript
DESCRIPTION: Function signature for launching a browser process. Takes LaunchOptions as parameter and returns a Process object. This is the core function for initializing a new browser instance in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.launch.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function launch(opts: LaunchOptions): Process;
```

----------------------------------------

TITLE: Logging Pending Protocol Calls in Puppeteer (TypeScript)
DESCRIPTION: Demonstrates how to log pending protocol calls in Puppeteer using the debugInfo interface. This is useful for identifying unresolved async calls.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
console.log(browser.debugInfo.pendingProtocolErrors);
```

----------------------------------------

TITLE: Adding style content using Page.addStyleTag in Puppeteer
DESCRIPTION: This signature allows adding a <style> tag with CSS content directly to the page. It returns a Promise that resolves to an ElementHandle for the created HTMLStyleElement.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.addstyletag.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  addStyleTag(
    options: Omit<FrameAddStyleTagOptions, 'url'>,
  ): Promise<ElementHandle<HTMLStyleElement>>;
}
```

----------------------------------------

TITLE: Defining setRequestInterception Method in Page Class (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the setRequestInterception method in the Page class. It takes a boolean parameter to enable or disable request interception and returns a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setrequestinterception.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setRequestInterception(value: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Calculating JS/CSS Coverage Percentage with Puppeteer TS
DESCRIPTION: This snippet demonstrates how to use the Puppeteer Coverage class to measure the percentage of JavaScript and CSS code executed on a page. It enables coverage tracking, navigates to a URL, stops tracking, and then processes the coverage reports to calculate the ratio of used bytes to total bytes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.coverage.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// Enable both JavaScript and CSS coverage
await Promise.all([
  page.coverage.startJSCoverage(),
  page.coverage.startCSSCoverage()
]);
// Navigate to page
await page.goto('https://example.com');
// Disable both JavaScript and CSS coverage
const [jsCoverage, cssCoverage] = await Promise.all([
  page.coverage.stopJSCoverage(),
  page.coverage.stopCSSCoverage()
]);
let totalBytes = 0;
let usedBytes = 0;
const coverage = [...jsCoverage, ...cssCoverage];
for (const entry of coverage) {
  totalBytes += entry.text.length;
  for (const range of entry.ranges) usedBytes += range.end - range.start - 1;
}
console.log(`Bytes used: ${(usedBytes / totalBytes) * 100}%`);
```

----------------------------------------

TITLE: Type Definition for Frame.waitForFunction Method in TypeScript
DESCRIPTION: TypeScript class definition for the Frame.waitForFunction method, which allows waiting for a function to evaluate to a truthy value in the frame context. The method accepts a function or string to evaluate, optional configuration, and additional arguments.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitforfunction.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  waitForFunction<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    options?: FrameWaitForFunctionOptions,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}
```

----------------------------------------

TITLE: Setting Geolocation in Puppeteer Example
DESCRIPTION: A code example demonstrating how to set a page's geolocation using the setGeolocation method. The example sets the location to Saint Petersburg, Russia by providing latitude and longitude coordinates.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setgeolocation.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.setGeolocation({latitude: 59.95, longitude: 30.31667});
```

----------------------------------------

TITLE: Creating Locators with Selectors in Puppeteer (TypeScript)
DESCRIPTION: This code snippet shows the signature for creating a locator with a selector in Puppeteer's Frame class. It accepts a selector string and returns a Locator object typed with NodeFor<Selector>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.locator.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  locator<Selector extends string>(
    selector: Selector,
  ): Locator<NodeFor<Selector>>;
}
```

----------------------------------------

TITLE: Hovering Element in Frame - Puppeteer TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `Frame.hover` method in Puppeteer. It takes a CSS `selector` string as input and returns a `Promise<void>`, indicating the asynchronous nature of the operation and that it doesn't return a specific value upon completion. It is used to simulate hovering the mouse over an element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.hover.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  hover(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: Get Browser Instance from Page (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `browser()` method on the Puppeteer `Page` class. This method is used to retrieve the `Browser` instance that the current page belongs to.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.browser.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract browser(): Browser;
}
```

----------------------------------------

TITLE: Defining KeyInput Type for Keyboard Operations in Puppeteer
DESCRIPTION: This TypeScript code defines the KeyInput type, which is a union of string literals representing all valid keys that can be used in Puppeteer's keyboard functions. It includes standard keyboard keys, function keys, numpad keys, and special characters.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyinput.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type KeyInput =
  | '0'
  | '1'
  | '2'
  | '3'
  | '4'
  | '5'
  | '6'
  | '7'
  | '8'
  | '9'
  | 'Power'
  | 'Eject'
  | 'Abort'
  | 'Help'
  | 'Backspace'
  | 'Tab'
  | 'Numpad5'
  | 'NumpadEnter'
  | 'Enter'
  | '\r'
  | '\n'
  | 'ShiftLeft'
  | 'ShiftRight'
  | 'ControlLeft'
  | 'ControlRight'
  | 'AltLeft'
  | 'AltRight'
  | 'Pause'
  | 'CapsLock'
  | 'Escape'
  | 'Convert'
  | 'NonConvert'
  | 'Space'
  | 'Numpad9'
  | 'PageUp'
  | 'Numpad3'
  | 'PageDown'
  | 'End'
  | 'Numpad1'
  | 'Home'
  | 'Numpad7'
  | 'ArrowLeft'
  | 'Numpad4'
  | 'Numpad8'
  | 'ArrowUp'
  | 'ArrowRight'
  | 'Numpad6'
  | 'Numpad2'
  | 'ArrowDown'
  | 'Select'
  | 'Open'
  | 'PrintScreen'
  | 'Insert'
  | 'Numpad0'
  | 'Delete'
  | 'NumpadDecimal'
  | 'Digit0'
  | 'Digit1'
  | 'Digit2'
  | 'Digit3'
  | 'Digit4'
  | 'Digit5'
  | 'Digit6'
  | 'Digit7'
  | 'Digit8'
  | 'Digit9'
  | 'KeyA'
  | 'KeyB'
  | 'KeyC'
  | 'KeyD'
  | 'KeyE'
  | 'KeyF'
  | 'KeyG'
  | 'KeyH'
  | 'KeyI'
  | 'KeyJ'
  | 'KeyK'
  | 'KeyL'
  | 'KeyM'
  | 'KeyN'
  | 'KeyO'
  | 'KeyP'
  | 'KeyQ'
  | 'KeyR'
  | 'KeyS'
  | 'KeyT'
  | 'KeyU'
  | 'KeyV'
  | 'KeyW'
  | 'KeyX'
  | 'KeyY'
  | 'KeyZ'
  | 'MetaLeft'
  | 'MetaRight'
  | 'ContextMenu'
  | 'NumpadMultiply'
  | 'NumpadAdd'
  | 'NumpadSubtract'
  | 'NumpadDivide'
  | 'F1'
  | 'F2'
  | 'F3'
  | 'F4'
  | 'F5'
  | 'F6'
  | 'F7'
  | 'F8'
  | 'F9'
  | 'F10'
  | 'F11'
  | 'F12'
  | 'F13'
  | 'F14'
  | 'F15'
  | 'F16'
  | 'F17'
  | 'F18'
  | 'F19'
  | 'F20'
  | 'F21'
  | 'F22'
  | 'F23'
  | 'F24'
  | 'NumLock'
  | 'ScrollLock'
  | 'AudioVolumeMute'
  | 'AudioVolumeDown'
  | 'AudioVolumeUp'
  | 'MediaTrackNext'
  | 'MediaTrackPrevious'
  | 'MediaStop'
  | 'MediaPlayPause'
  | 'Semicolon'
  | 'Equal'
  | 'NumpadEqual'
  | 'Comma'
  | 'Minus'
  | 'Period'
  | 'Slash'
  | 'Backquote'
  | 'BracketLeft'
  | 'Backslash'
  | 'BracketRight'
  | 'Quote'
  | 'AltGraph'
  | 'Props'
  | 'Cancel'
  | 'Clear'
  | 'Shift'
  | 'Control'
  | 'Alt'
  | 'Accept'
  | 'ModeChange'
  | ' '
  | 'Print'
  | 'Execute'
  | '\u0000'
  | 'a'
  | 'b'
  | 'c'
  | 'd'
  | 'e'
  | 'f'
  | 'g'
  | 'h'
  | 'i'
  | 'j'
  | 'k'
  | 'l'
  | 'm'
  | 'n'
  | 'o'
  | 'p'
  | 'q'
  | 'r'
  | 's'
  | 't'
  | 'u'
  | 'v'
  | 'w'
  | 'x'
  | 'y'
  | 'z'
  | 'Meta'
  | '*'
  | '+'
  | '-'
  | '/'
  | ';'
  | '='
  | ','
  | '.'
  | '`'
  | '['
  | '\\'
  | ']'
  | "'"
  | 'Attn'
  | 'CrSel'
  | 'ExSel'
  | 'EraseEof'
  | 'Play'
  | 'ZoomOut'
  | ')'
  | '!'
  | '@'
  | '#'
  | '$'
  | '%'
  | '^'
  | '&'
  | '('
  | 'A'
  | 'B'
  | 'C'
  | 'D'
  | 'E'
  | 'F'
  | 'G'
  | 'H'
  | 'I'
  | 'J'
  | 'K'
  | 'L'
  | 'M'
  | 'N'
  | 'O'
  | 'P'
  | 'Q'
  | 'R'
  | 'S'
  | 'T'
  | 'U'
  | 'V'
  | 'W'
  | 'X'
  | 'Y'
  | 'Z'
  | ':'
  | '<'
  | '_'
  | '>'
  | '?'
  | '~'
  | '{'
  | '|'
  | '}'
  | '"'
  | 'SoftLeft'
  | 'SoftRight'
  | 'Camera'
  | 'Call'
  | 'EndCall'
  | 'VolumeDown'
  | 'VolumeUp';
```

----------------------------------------

TITLE: Defining the WaitForTargetOptions Interface (TypeScript)
DESCRIPTION: Defines the structure of the WaitForTargetOptions interface in TypeScript. This interface is used to specify options when waiting for a target in Puppeteer, such as cancellation signals or timeout durations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.waitfortargetoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface WaitForTargetOptions
```

----------------------------------------

TITLE: Dispatching Keydown Event with Puppeteer Keyboard.down() (TypeScript)
DESCRIPTION: Dispatches a `keydown` event for a specified key. It accepts the key name and optional options like text or commands. If the key is a single character and no modifiers other than Shift are held, a keypress/input event may also be generated. Modifier keys like Shift, Meta, Control, or Alt will remain active for subsequent key presses until released with `Keyboard.up()`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keyboard.down.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Keyboard {
  abstract down(
    key: KeyInput,
    options?: Readonly<KeyDownOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Implementing the setEnsureElementIsInTheViewport Method in Puppeteer's Locator Class
DESCRIPTION: Method signature for setEnsureElementIsInTheViewport, which creates a new locator instance by cloning the current one and specifying whether the element should be scrolled into viewport if not already visible. The default value is true.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.setensureelementisintheviewport.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  setEnsureElementIsInTheViewport<ElementType extends Element>(
    this: Locator<ElementType>,
    value: boolean,
  ): Locator<ElementType>;
}
```

----------------------------------------

TITLE: Defining Page.goBack() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.goBack() method. It takes an optional WaitForOptions parameter and returns a Promise that resolves to an HTTPResponse or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.goback.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract goBack(options?: WaitForOptions): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Method Signature - Page.setGeolocation - TypeScript
DESCRIPTION: Defines the abstract signature for the `setGeolocation` method within the `Page` class, showing it accepts `GeolocationOptions` and returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setgeolocation.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setGeolocation(options: GeolocationOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Configure Puppeteer cache directory - TypeScript/CJS
DESCRIPTION: This TypeScript/CJS configuration file snippet shows how to set the `cacheDirectory` for Puppeteer using a `.puppeteerrc.cjs` file. Placing the cache inside the `node_modules` directory helps cloud environments like Google App Engine and Cloud Functions correctly find the browser executable when leveraging build caching. Requires the `puppeteer` library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_19

LANGUAGE: typescript
CODE:
```
const {join} = require('path');

/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  cacheDirectory: join(__dirname, 'node_modules', '.puppeteer_cache'),
};
```

----------------------------------------

TITLE: Default cacheDirectory Path - JavaScript
DESCRIPTION: Shows the default path used for Puppeteer's cache directory, which is located in the user's home directory under '.cache/puppeteer'. This can be overridden by the PUPPETEER_CACHE_DIR environment variable.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.configuration.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
path.join(os.homedir(), '.cache', 'puppeteer')
```

----------------------------------------

TITLE: ElementHandle.uploadFile Method Signature in TypeScript
DESCRIPTION: This TypeScript snippet shows the abstract signature for the uploadFile method within the ElementHandle class. It specifies that the method requires the 'this' context to be an ElementHandle of an HTMLInputElement, accepts a variable number of string paths, and returns a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.uploadfile.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  abstract uploadFile(
    this: ElementHandle<HTMLInputElement>,
    ...paths: string[]
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Get WebSocket Endpoint - Puppeteer Browser - TypeScript
DESCRIPTION: Retrieves the WebSocket URL endpoint for the browser instance. This URL is used by Puppeteer.connect() to attach to an existing browser session. The format is typically ws://HOST:PORT/devtools/browser/<id>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.wsendpoint.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract wsEndpoint(): string;
}
```

----------------------------------------

TITLE: Dropping Elements in Puppeteer using ElementHandle.drop
DESCRIPTION: This method allows dropping one element onto another in Puppeteer. It takes an ElementHandle as a parameter and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.drop.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  drop(
    this: ElementHandle<Element>,
    element: ElementHandle<Element>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Running Puppeteer Docker Container
DESCRIPTION: Command to run the Puppeteer Docker container with necessary system capabilities. Uses --cap-add=SYS_ADMIN for Chrome sandbox security and executes a smoke test script.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docker/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
docker run -i --init --rm --cap-add=SYS_ADMIN --name puppeteer-chrome puppeteer-chrome-linux node -e "`cat test/smoke-test.js`"
```

----------------------------------------

TITLE: Defining VisibilityOption Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the VisibilityOption type used in Puppeteer. It can be set to 'hidden' to wait for an element to be hidden, 'visible' to wait for an element to be visible, or null to disable visibility checks.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.visibilityoption.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type VisibilityOption = 'hidden' | 'visible' | null;
```

----------------------------------------

TITLE: TypeScript interface signature for WaitForSelectorOptions
DESCRIPTION: This snippet shows the TypeScript definition for the WaitForSelectorOptions interface, outlining its structure and indicating that it is exported for use in other modules.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.waitforselectoroptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface WaitForSelectorOptions
```

----------------------------------------

TITLE: Example Usage of Puppeteer.registerCustomQueryHandler
DESCRIPTION: A basic example showing how to import Puppeteer, register a custom query handler named 'text', and then use it to select an element on a page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.registercustomqueryhandler.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import {Puppeteer}, puppeteer from 'puppeteer';

Puppeteer.registerCustomQueryHandler('text', { … });
const aHandle = await page.$('text/…');
```

----------------------------------------

TITLE: Puppeteer Basic Test Structure (Migration)
DESCRIPTION: Demonstrates a basic Puppeteer test structure similar to Protractor, using `setupBrowserHooks` and `getBrowserState` from `utils.ts` to access the `page` object and interact with elements using `locator` and `click`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_7

LANGUAGE: typescript
CODE:
```
// Testing framework specific imports

import {setupBrowserHooks, getBrowserState} from './utils';

describe('<Test Name>', function () {
  setupBrowserHooks();
  it('is running', async function () {
    const {page} = getBrowserState();
    // Query elements
    await page
      .locator('my-component')
      // Click on the element once found
      .click();
  });
});
```

----------------------------------------

TITLE: Handling Dialog Events with Puppeteer (TypeScript/JavaScript)
DESCRIPTION: This snippet demonstrates how to listen for the 'dialog' event on a Puppeteer Page, retrieve the dialog message, dismiss the dialog, and then close the browser. It requires the 'puppeteer' library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.dialog.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('dialog', async dialog => {
    console.log(dialog.message());
    await dialog.dismiss();
    await browser.close();
  });
  page.evaluate(() => alert('1'));
})();
```

----------------------------------------

TITLE: Importing Puppeteer-core in TypeScript
DESCRIPTION: Example of importing the puppeteer-core package when working with remote browsers or managing browsers manually.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/installation.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer-core';
```

----------------------------------------

TITLE: Installing Browsers via Puppeteer CLI - Bash
DESCRIPTION: Demonstrates how to use the Puppeteer CLI command 'npx puppeteer browsers install' to install browsers based on the current configuration file settings. This command is useful after changing download options in the configuration.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/configuration.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx puppeteer browsers install
```

----------------------------------------

TITLE: Using Puppeteer Tracing API
DESCRIPTION: Example showing how to start and stop a trace recording while navigating to a webpage. The trace is saved to a JSON file that can be opened in Chrome DevTools or timeline viewer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.tracing.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.tracing.start({path: 'trace.json'});
await page.goto('https://www.google.com');
await page.tracing.stop();
```

----------------------------------------

TITLE: TypeScript signature of Page.waitForFunction method in Puppeteer
DESCRIPTION: The method signature defines how to use the waitForFunction method of the Page class. It waits for the provided function to return a truthy value when evaluated in the page's context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforfunction.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  waitForFunction<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    options?: FrameWaitForFunctionOptions,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}
```

----------------------------------------

TITLE: Defining Frame.waitForNavigation Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the waitForNavigation method in the Frame class. It takes an optional WaitForOptions parameter and returns a Promise that resolves to an HTTPResponse or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitfornavigation.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  abstract waitForNavigation(
    options?: WaitForOptions,
  ): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Defining BrowserContext.newPage Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the newPage method within the BrowserContext class. The method creates a new Page instance within the current browser context and returns a Promise resolving to that Page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.newpage.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract newPage(): Promise<Page>;
}
```

----------------------------------------

TITLE: Starting dbus Service in Docker Container
DESCRIPTION: Command to start the dbus service within a Docker container. This can be useful to avoid warnings in the browser console when running in headless mode.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/docker.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
sudo service dbus start
```

----------------------------------------

TITLE: Get Manifest V3 Service Worker and Popup Handles (TypeScript)
DESCRIPTION: Launches Puppeteer with a Chrome Extension loaded, waits for the background service worker target, gets a worker handle, opens a popup, waits for the popup page target, and gets a page handle for testing.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/chrome-extensions.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';
import path from 'path';

const pathToExtension = path.join(process.cwd(), 'my-extension');
const browser = await puppeteer.launch({
  args: [
    `--disable-extensions-except=${pathToExtension}`,
    `--load-extension=${pathToExtension}`,
  ],
});

const workerTarget = await browser.waitForTarget(
  // Assumes that there is only one service worker created by the extension and its URL ends with background.js.
  target =>
    target.type() === 'service_worker' &&
    target.url().endsWith('background.js'),
);

const worker = await workerTarget.worker();

// Open a popup (available for Canary channels).
await worker.evaluate('chrome.action.openPopup();');

const popupTarget = await browser.waitForTarget(
  // Assumes that there is only one page with the URL ending with popup.html and that is the popup created by the extension.
  target => target.type() === 'page' && target.url().endsWith('popup.html'),
);

const popupPage = popupTarget.asPage();

// Test the popup page as you would any other page.

await browser.close();
```

----------------------------------------

TITLE: Define Locator.setVisibility Method Signature - TypeScript
DESCRIPTION: Defines the signature for the `setVisibility` method within the `Locator` class. This method is used to create a new locator instance with a specified visibility option. It takes the current `Locator` instance and a `VisibilityOption` as parameters and returns a new `Locator` instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.setvisibility.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Locator {
  setVisibility<NodeType extends Node>(
    this: Locator<NodeType>,
    visibility: VisibilityOption,
  ): Locator<NodeType>;
}
```

----------------------------------------

TITLE: Finding Focused Node in Accessibility Tree using Puppeteer TypeScript
DESCRIPTION: Captures the accessibility tree snapshot, then uses a recursive helper function `findFocusedNode` to traverse the tree and find the node with the `focused` property set to true. It then logs the `name` property of the found node, if any.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.accessibility.snapshot.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const snapshot = await page.accessibility.snapshot();
const node = findFocusedNode(snapshot);
console.log(node && node.name);

function findFocusedNode(node) {
  if (node.focused) return node;
  for (const child of node.children || []) {
    const foundNode = findFocusedNode(child);
    return foundNode;
  }
  return null;
}
```

----------------------------------------

TITLE: Express app launch Puppeteer before response on GCR - JS
DESCRIPTION: This JavaScript snippet shows the recommended pattern for launching Puppeteer within an Express route on Google Cloud Run. Puppeteer is launched *before* the HTTP response is sent, ensuring the CPU remains active during the launch process and significantly improving perceived performance. Requires the `express` and `puppeteer` libraries.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_17

LANGUAGE: javascript
CODE:
```
app.post('/test-puppeteer', (req, res) => {
  puppeteer.launch().then(browser => {
    // A second later...
    res.json({
      jobId: 123,
      acknowledged: true,
    });
  });
});
```

----------------------------------------

TITLE: Defining the childFrames() Method in the Frame Class in TypeScript
DESCRIPTION: This code snippet shows the method signature for childFrames() in the Frame abstract class. The method returns an array of Frame objects, representing all child frames of the current frame.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.childframes.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  abstract childFrames(): Frame[];
}
```

----------------------------------------

TITLE: Finding and Interacting with a Specific Frame in TypeScript
DESCRIPTION: An example showing how to find a specific iframe by its name attribute and then select elements within it using the frame's $eval method. This demonstrates how to target elements in nested frames.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const frames = page.frames();
let frame = null;
for (const currentFrame of frames) {
  const frameElement = await currentFrame.frameElement();
  const name = await frameElement.evaluate(el => el.getAttribute('name'));
  if (name === 'myframe') {
    frame = currentFrame;
    break;
  }
}
if (frame) {
  const text = await frame.$eval('.selector', element => element.textContent);
  console.log(text);
} else {
  console.error('Frame with name "myframe" not found.');
}
```

----------------------------------------

TITLE: Defining the BrowserEvents Interface (TypeScript)
DESCRIPTION: Defines the BrowserEvents interface, which extends Record<EventType, unknown>. This interface represents the events emitted by a Puppeteer Browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browserevents.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface BrowserEvents extends Record<EventType, unknown>
```

----------------------------------------

TITLE: Defining CommonEventEmitter Interface in TypeScript
DESCRIPTION: This snippet defines the generic CommonEventEmitter interface. It is parameterized by a type `Events` which is a record mapping event types (`EventType`) to their corresponding event data (`unknown`). This interface serves as a base for event emitters within Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.commoneventemitter.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface CommonEventEmitter<Events extends Record<EventType, unknown>>
```

----------------------------------------

TITLE: Get Installed Browsers Metadata - TypeScript
DESCRIPTION: This function retrieves metadata for browsers installed in the Puppeteer cache directory. It takes an options object and returns a Promise resolving to an array of InstalledBrowser objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.getinstalledbrowsers.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare function getInstalledBrowsers(
  options: GetInstalledBrowsersOptions,
): Promise<InstalledBrowser[]>;
```

----------------------------------------

TITLE: Defining ElementHandle.drag Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.drag() method. It takes a target parameter which can be either a Point or another ElementHandle, and returns a Promise that resolves to either DragData or void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.drag.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  drag(
    this: ElementHandle<Element>,
    target: Point | ElementHandle<Element>,
  ): Promise<Protocol.Input.DragData | void>;
}
```

----------------------------------------

TITLE: Defining Frame.type() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Frame.type() method. It takes a selector, text, and optional typing options as parameters and returns a Promise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.type.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  type(
    selector: string,
    text: string,
    options?: Readonly<KeyboardTypeOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Tap Method Signature - TypeScript
DESCRIPTION: Defines the signature for the `tap` method within the `Touchscreen` class in Puppeteer. It takes horizontal (x) and vertical (y) coordinates as numbers and returns a Promise that resolves when the tap simulation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.touchscreen.tap.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Touchscreen {
  tap(x: number, y: number): Promise<void>;
}
```

----------------------------------------

TITLE: Overriding Browser Context Permissions - TypeScript
DESCRIPTION: Illustrates how to override specific permissions for a browser context, such as granting 'geolocation' access for a given origin. This allows controlling browser behavior for specific sites within a context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/browser-management.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
const context = browser.defaultBrowserContext();

await context.overridePermissions('https://html5demos.com', ['geolocation']);
```

----------------------------------------

TITLE: Get all frames attached to a Page (TypeScript)
DESCRIPTION: Retrieves an array of all Frame objects currently attached to the Page instance. This method is abstract and part of the Page class definition.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.frames.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract frames(): Frame[];
}
```

----------------------------------------

TITLE: Connecting to Existing Puppeteer Browser Instance (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `connect` function in Puppeteer. It accepts `ConnectOptions` and returns a Promise that resolves to a `Browser` instance, allowing connection to an already running browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connect.md#_snippet_0

LANGUAGE: typescript
CODE:
```
connect: (options: PuppeteerCore.ConnectOptions) =>
  Promise<PuppeteerCore.Browser>;
```

----------------------------------------

TITLE: Configuring Puppeteer Cache Directory JS
DESCRIPTION: This JavaScript snippet defines a Puppeteer configuration object within a `.puppeteerrc.cjs` or `puppeteer.config.cjs` file. It specifies a custom cache directory using the `cacheDirectory` property, relative to the configuration file's location.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_2

LANGUAGE: js
CODE:
```
const {join} = require('path');

/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),
};
```

----------------------------------------

TITLE: Defining HTTPRequest.initiator() Method in TypeScript
DESCRIPTION: This code snippet defines the initiator() method in the HTTPRequest class. The method returns the initiator of the request, which is of type Protocol.Network.Initiator or undefined.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.initiator.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract initiator(): Protocol.Network.Initiator | undefined;
}
```

----------------------------------------

TITLE: DeviceRequestPrompt.select TypeScript Method Signature
DESCRIPTION: The TypeScript signature for the DeviceRequestPrompt.select method, which takes a DeviceRequestPromptDevice parameter and returns a Promise that resolves to void after selecting the device in the prompt.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestprompt.select.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class DeviceRequestPrompt {
  select(device: DeviceRequestPromptDevice): Promise<void>;
}
```

----------------------------------------

TITLE: Defining HTTPRequest.method Type Signature in TypeScript
DESCRIPTION: Abstract class definition for HTTPRequest that declares the method() function which returns the HTTP method (GET, POST, etc.) used in a request as a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.method.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract method(): string;
}
```

----------------------------------------

TITLE: Defining ConsoleMessage.location() Method in TypeScript
DESCRIPTION: This code snippet defines the location() method for the ConsoleMessage class in Puppeteer. The method returns a ConsoleMessageLocation object, which represents the location of the console message.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.location.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ConsoleMessage {
  location(): ConsoleMessageLocation;
}
```

----------------------------------------

TITLE: Defining InterceptResolutionAction Enum - TypeScript
DESCRIPTION: Defines the `InterceptResolutionAction` enum, which specifies the possible actions to take when a network request is intercepted by Puppeteer's request interception mechanism.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.interceptresolutionaction.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare enum InterceptResolutionAction
```

----------------------------------------

TITLE: Basic CLI Usage with npx
DESCRIPTION: Shows how to run the CLI using npx to access help documentation and basic commands.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/index.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx @puppeteer/browsers --help
```

----------------------------------------

TITLE: Accessing Request Failure Information in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Provides access to information about the request's failure.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_7

LANGUAGE: javascript
CODE:
```
failure()
```

----------------------------------------

TITLE: Defining the Predicate Type in TypeScript
DESCRIPTION: This snippet defines the `Predicate` type using TypeScript. It's a generic type taking `From` and optionally `To` (which extends `From`). A `Predicate` can be a function that acts as a type guard (`value is To`) or an asynchronous function that returns a boolean (`Awaitable<boolean>`). It is used for testing values, often in filtering or finding operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.predicate.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type Predicate<From, To extends From = From> =
  | ((value: From) => value is To)
  | ((value: From) => Awaitable<boolean>);
```

----------------------------------------

TITLE: Defining Frame.parentFrame() Method in TypeScript
DESCRIPTION: This code snippet defines the parentFrame() method in the Frame class. The method returns the parent frame of the current frame, or null for detached and main frames.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.parentframe.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  abstract parentFrame(): Frame | null;
}
```

----------------------------------------

TITLE: Defining ChromeReleaseChannel Type in TypeScript
DESCRIPTION: This TypeScript type defines the valid string literals representing different Chrome release channels that Puppeteer supports for browser interaction. It includes standard 'chrome', 'chrome-beta', 'chrome-canary', and 'chrome-dev'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.chromereleasechannel.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type ChromeReleaseChannel =
  | 'chrome'
  | 'chrome-beta'
  | 'chrome-canary'
  | 'chrome-dev';
```

----------------------------------------

TITLE: Configuring Browser Context Permissions with Puppeteer in TypeScript
DESCRIPTION: This code demonstrates how to override permissions for a specific domain in the default browser context. It's useful for testing scenarios that require specific browser permissions, such as geolocation access.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/browser-management.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
const context = browser.defaultBrowserContext();

await context.overridePermissions('https://html5demos.com', ['geolocation']);
```

----------------------------------------

TITLE: Evaluating JavaScript as String in Puppeteer (TypeScript)
DESCRIPTION: Shows an alternative method to `page.evaluate` where the JavaScript code is provided as a string instead of a function body. This approach works but lacks type safety and context awareness compared to passing a function.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/javascript-execution.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
// Evaluate JavaScript
const three = await page.evaluate(`
    1 + 2
`);
```

----------------------------------------

TITLE: Logging DevTools Protocol Traffic in Puppeteer (Bash)
DESCRIPTION: Shows various ways to log DevTools protocol traffic for debugging Puppeteer. These commands enable verbose logging, prevent truncation of long messages, filter network messages, and exclude protocol messages.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/debugging.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
# Basic verbose logging
env DEBUG="puppeteer:*" node script.js

# Prevent truncating of long messages
env DEBUG="puppeteer:*" env DEBUG_MAX_STRING_LENGTH=null node script.js

# Protocol traffic can be rather noisy. This example filters out all Network domain messages
env DEBUG="puppeteer:*" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '"Network'

# Filter out all protocol messages but keep all other logging
env DEBUG="puppeteer:*,-puppeteer:protocol:*" node script.js
```

----------------------------------------

TITLE: Creating Vue Component Custom Query Handler in Puppeteer
DESCRIPTION: Shows how to implement a custom query handler for Vue components that traverses the DOM to find elements based on Vue's internal component naming.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_19

LANGUAGE: typescript
CODE:
```
Puppeteer.registerCustomQueryHandler('vue', {
  queryOne: (element, name) => {
    const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT);
    do {
      const currentNode = walker.currentNode;
      if (
        currentNode.__vnode?.ctx?.type?.name.toLowerCase() ===
        name.toLocaleLowerCase()
      ) {
        return currentNode;
      }
    } while (walker.nextNode());

    return null;
  },
});
```

----------------------------------------

TITLE: Get HTTP Response Headers (TypeScript)
DESCRIPTION: Retrieves the HTTP headers associated with the response. The method returns an object where keys are lower-case header names and values are the corresponding header values. The return type is a Record mapping strings to strings.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.headers.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract headers(): Record<string, string>;
}
```

----------------------------------------

TITLE: Signature for Pressing Mouse in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `down` method of the `Mouse` class in Puppeteer. It is used to simulate pressing the mouse button. It accepts an optional `options` object of type `Readonly<MouseOptions>` and returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.down.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract down(options?: Readonly<MouseOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Mapping a Puppeteer Locator using TypeScript
DESCRIPTION: The `map` method of the `Locator` class transforms the locator's value using a provided mapper function. It takes a `Mapper<T, To>` instance as input and returns a new `Locator<To>` instance with the transformed value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.map.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  map<To>(mapper: Mapper<T, To>): Locator<To>;
}
```

----------------------------------------

TITLE: Scroll Element using Puppeteer Locator (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `scroll` method of the `Locator` class in Puppeteer. It allows scrolling the element located by the Locator, optionally taking `LocatorScrollOptions`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.scroll.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  scroll<ElementType extends Element>(
    this: Locator<ElementType>,
    options?: Readonly<LocatorScrollOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Respond to Request with Priority 12 in Puppeteer
DESCRIPTION: This snippet shows a Puppeteer request handler that votes to respond to the request with a priority of 12 in Cooperative Intercept Mode, executing only if the resolution hasn't been handled by a higher or equal priority handler.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to respond at priority 12
  request.respond(request.responseForRequest(), 12);
});
```

----------------------------------------

TITLE: Defining Frame.page Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the Frame.page() method signature. This method returns the Page object associated with the frame and is defined as an abstract method in the Frame class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.page.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  abstract page(): Page;
}
```

----------------------------------------

TITLE: Defining QueryOptions Interface - TypeScript
DESCRIPTION: This snippet shows the basic signature for the `QueryOptions` interface in TypeScript, which is used to configure various aspects of element queries within Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.queryoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface QueryOptions
```

----------------------------------------

TITLE: Implementing Tracing.stop Method in TypeScript
DESCRIPTION: Defines the stop() method signature for the Tracing class that ends a trace session. Returns a Promise that resolves to a Uint8Array containing the trace data, or undefined if no trace data is available.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.tracing.stop.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Tracing {
  stop(): Promise<Uint8Array | undefined>;
}
```

----------------------------------------

TITLE: Retrieving Response Body as Text in Puppeteer TypeScript
DESCRIPTION: Method signature for the text() method of the HTTPResponse class. This method retrieves the response body and returns it as a UTF-8 text representation. It returns a Promise that resolves to a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.text.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  text(): Promise<string>;
}
```

----------------------------------------

TITLE: Run Node.js Script with Debugger (Bash)
DESCRIPTION: Executes a Node.js script using the `node` command. The `--inspect-brk` flag enables the Node.js inspector and pauses execution on the first line of the script, waiting for a debugger client (like Chrome DevTools) to connect.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_6

LANGUAGE: Bash
CODE:
```
node --inspect-brk path/to/script.js
```

----------------------------------------

TITLE: Setting JavaScript Enabled State - Puppeteer TypeScript
DESCRIPTION: Sets whether JavaScript is enabled on the page. Note that this change only takes full effect on the next navigation and does not affect scripts that have already run.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setjavascriptenabled.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract setJavaScriptEnabled(enabled: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Waiting for and Selecting a Device Prompt
DESCRIPTION: Demonstrates how to wait for a device request prompt triggered by a page action (like clicking a button) and then select a specific device from the prompt's list based on a filter.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.devicerequestprompt.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const [devicePrompt] = Promise.all([
  page.waitForDevicePrompt(),
  page.click('#connect-bluetooth'),
]);
await devicePrompt.select(
  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),
);
```

----------------------------------------

TITLE: Returning ElementHandles from Puppeteer Locator
DESCRIPTION: Explains how to use the waitHandle() function with a Puppeteer locator to obtain an ElementHandle for the located element. This is useful for performing actions on the element that are not directly available through the locator API.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const buttonHandle = await page.locator('button').waitHandle();
await buttonHandle.click();
```

----------------------------------------

TITLE: Defining the Page.evaluateOnNewDocument Method Signature in TypeScript
DESCRIPTION: TypeScript signature for the evaluateOnNewDocument method in the Page class. The method accepts a function or string to be evaluated in the browser context along with optional parameters.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluateonnewdocument.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract evaluateOnNewDocument<
    Params extends unknown[],
    Func extends (...args: Params) => unknown = (...args: Params) => unknown,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<NewDocumentScriptEvaluation>;
}
```

----------------------------------------

TITLE: Define Frame.evaluateHandle Method Signature (TypeScript)
DESCRIPTION: Defines the TypeScript signature for the `Frame.evaluateHandle` method, showing its generic types, parameters (`pageFunction`, `args`), and return type (`Promise<HandleFor<Awaited<ReturnType<Func>>>>`). This method executes a function within the context of the specific frame and returns a handle to the result.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.evaluatehandle.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}
```

----------------------------------------

TITLE: Waiting for Dynamic Element Appearance Using Function Locator in Puppeteer (TypeScript)
DESCRIPTION: Defines a Puppeteer locator using a JavaScript function that sets up a `MutationObserver`. The locator waits until the observer detects an `HTMLCanvasElement` being added to the document. The `.wait()` call resolves once the promise within the function locator resolves with the target element. Requires a Puppeteer `Page` instance (`page`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
await page
  .locator(() => {
    let resolve!: (node: HTMLCanvasElement) => void;
    const promise = new Promise(res => {
      return (resolve = res);
    });
    const observer = new MutationObserver(records => {
      for (const record of records) {
        if (record.target instanceof HTMLCanvasElement) {
          resolve(record.target);
        }
      }
    });
    observer.observe(document);
    return promise;
  })
  .wait();
```

----------------------------------------

TITLE: Waiting for Device Prompt and Selecting Device - TypeScript
DESCRIPTION: Demonstrates how to use `page.waitForDevicePrompt` concurrently with an action that triggers a device prompt (like clicking a button) and then selecting a specific device from the prompt based on its name.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitfordeviceprompt.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const [devicePrompt] = Promise.all([
  page.waitForDevicePrompt(),
  page.click('#connect-bluetooth'),
]);
await devicePrompt.select(
  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),
);
```

----------------------------------------

TITLE: Getting ElementHandle from Page.evaluateHandle
DESCRIPTION: Example demonstrating that page.evaluateHandle can return an ElementHandle when the function returns a reference to a DOM element, allowing direct interaction with the element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const button = await page.evaluateHandle(() =>
  document.querySelector('button'),
);
// can call `click` because `button` is an `ElementHandle`
await button.click();
```

----------------------------------------

TITLE: Defining SystemOptions Interface in TypeScript
DESCRIPTION: Declares a TypeScript interface for system-level browser configuration options. It includes properties for specifying the browser type, Chrome release channel, and optional platform settings.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.systemoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface SystemOptions
```

----------------------------------------

TITLE: Get Box Model - Puppeteer ElementHandle - TypeScript
DESCRIPTION: Retrieves the box model for the ElementHandle. Returns a Promise that resolves to a BoxModel object or null if the element has no layout box (e.g., display: none). The BoxModel contains points representing the element's borders, padding, and content boxes, sorted clockwise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.boxmodel.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  boxModel(): Promise<BoxModel | null>;
}
```

----------------------------------------

TITLE: Define Puppeteer Device Interface - TypeScript
DESCRIPTION: Defines the structure of the `Device` interface in Puppeteer, which represents a device configuration including user agent and viewport settings.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.device.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface Device
```

----------------------------------------

TITLE: Configuring Rollup for Puppeteer Extension Build (JavaScript)
DESCRIPTION: Provides a sample Rollup configuration for bundling a Chrome extension that uses Puppeteer. It shows how to use `@rollup/plugin-node-resolve` with browser targeting, resolve only `puppeteer-core`, and optionally exclude `chromium-bidi/*` to reduce bundle size.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/running-puppeteer-in-extensions.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import {nodeResolve} from '@rollup/plugin-node-resolve';

export default {
  input: 'main.mjs',
  output: {
    format: 'esm',
    dir: 'out',
  },
  // If you do not need to use WebDriver BiDi protocol,
  // exclude chromium-bidi/lib/* to minimize the bundle size.
  external: ['chromium-bidi/*'],
  plugins: [
    nodeResolve({
      // Indicate that we target a browser environment.
      browser: true,
      // Exclude any dependencies except for puppeteer-core.
      // `npm install puppeteer-core` # To install puppeteer-core if needed.
      resolveOnly: ['puppeteer-core'],
    }),
  ],
};
```

----------------------------------------

TITLE: Setting Page Content in Puppeteer
DESCRIPTION: The setContent method sets the HTML content of the page. It allows specifying options for the operation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_9

LANGUAGE: JavaScript
CODE:
```
page.setContent(html, options)
```

----------------------------------------

TITLE: Starting CSS Coverage in Puppeteer (TypeScript)
DESCRIPTION: Initiates the collection of CSS coverage information. It accepts an optional `options` object which can include `resetOnNavigation` to control whether coverage data is cleared upon navigation. The method returns a Promise that resolves when coverage collection has started.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.csscoverage.start.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class CSSCoverage {
  start(options?: {resetOnNavigation?: boolean}): Promise<void>;
}
```

----------------------------------------

TITLE: Frame.$$eval Usage Example in TypeScript
DESCRIPTION: Simple example showing how to use Frame.$$eval to count the number of div elements in a frame. The method queries all div elements and returns their count.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.__eval.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const divsCounts = await frame.$$eval('div', divs => divs.length);
```

----------------------------------------

TITLE: Defining ElementHandle Class Signature in TypeScript
DESCRIPTION: Declaration of the ElementHandle class that extends JSHandle to represent DOM elements in a page. The class is parameterized with a generic type that defaults to Element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class ElementHandle<ElementType extends Node = Element> extends JSHandle<ElementType>
```

----------------------------------------

TITLE: Set Offline Mode - Puppeteer Page - TypeScript
DESCRIPTION: Defines the signature for the setOfflineMode method on the Puppeteer Page class. This method is used to toggle the page's network connection between online and offline states based on the boolean 'enabled' parameter. It returns a Promise that resolves upon completion.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setofflinemode.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setOfflineMode(enabled: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Get Executable Path with Launch Options
DESCRIPTION: Method to get the default executable path based on provided launch options. Takes LaunchOptions parameter and returns a string path.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.executablepath.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  executablePath(options: LaunchOptions): string;
}
```

----------------------------------------

TITLE: Getting Parent Frame - Puppeteer - TypeScript
DESCRIPTION: This method signature shows how to retrieve the parent frame of a Puppeteer Frame object. It returns a Frame object if a parent exists, or null for the main frame or detached frames.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.parentframe.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  abstract parentFrame(): Frame | null;
}
```

----------------------------------------

TITLE: Defining BrowserContext.pages Method in TypeScript
DESCRIPTION: Abstract method definition for retrieving all open pages within a browser context. Returns a Promise resolving to an array of Page objects. Non-visible pages like background_page are not included in the results.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.pages.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract pages(): Promise<Page[]>;
}
```

----------------------------------------

TITLE: Registering and Using Custom Query Handler - Puppeteer - JavaScript Example
DESCRIPTION: This example demonstrates how to import Puppeteer, register a custom query handler named 'text', and then use it to select an element on a page by prepending the selector string with 'text/'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteer.registercustomqueryhandler.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import {Puppeteer}, puppeteer from 'puppeteer';

Puppeteer.registerCustomQueryHandler('text', { … });
const aHandle = await page.$('text/…');
```

----------------------------------------

TITLE: Installing Dependencies for Puppeteer Examples
DESCRIPTION: This command installs the necessary package dependencies for running Puppeteer examples.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/examples/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Using Custom Vue Component Selector (TypeScript)
DESCRIPTION: Provides an example of how to use the 'vue' custom selector registered previously. It shows how to select a single element corresponding to a Vue component named 'MyComponent' using the `page.$` method and the `::-p-` prefixed custom selector syntax.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_16

LANGUAGE: TypeScript
CODE:
```
const element = await page.$('::-p-vue(MyComponent)');
```

----------------------------------------

TITLE: Defining Browser.disconnect Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `disconnect()` method of the `Browser` class. It indicates that the method is abstract, takes no arguments, and returns a Promise that resolves to void when the disconnection is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.disconnect.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract disconnect(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Page.bringToFront Method in TypeScript
DESCRIPTION: This code snippet defines the bringToFront method for the Page class in Puppeteer. The method is asynchronous and returns a Promise that resolves to void. It is used to bring a page to the front, effectively activating its tab in the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.bringtofront.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract bringToFront(): Promise<void>;
}
```

----------------------------------------

TITLE: Connecting Puppeteer in a Chrome Extension - TypeScript
DESCRIPTION: Demonstrates how to connect Puppeteer within a Chrome extension environment. It shows importing the browser-specific entrypoint, creating or finding a tab using `chrome.tabs`, connecting using `ExtensionTransport.connectTab`, getting the associated page, and performing a basic operation like evaluating JavaScript. Requires `puppeteer-core` and a browser bundler setup.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/running-puppeteer-in-extensions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import {
  connect,
  ExtensionTransport,
} from 'puppeteer-core/lib/esm/puppeteer/puppeteer-core-browser.js';

// Create a tab or find a tab to attach to.
const tab = await chrome.tabs.create({
  url,
});
// Connect Puppeteer using the ExtensionTransport.connectTab.
const browser = await connect({
  transport: await ExtensionTransport.connectTab(tab.id),
});
// You will have a single page on the browser object, which corresponds
// to the tab you connected the transport to.
const [page] = await browser.pages();
// Perform the usual operations with Puppeteer page.
console.log(await page.evaluate('document.title'));
browser.disconnect();
```

----------------------------------------

TITLE: Implementing Mouse.drag method in Puppeteer's Mouse class
DESCRIPTION: Abstract method declaration for the drag functionality in Puppeteer's Mouse class. It takes starting and target points as parameters and returns a Promise containing drag data from the browser's input protocol.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.drag.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract drag(start: Point, target: Point): Promise<Protocol.Input.DragData>;
}
```

----------------------------------------

TITLE: Browser Installation Examples
DESCRIPTION: Demonstrates various commands for installing different browser versions and drivers using the CLI.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/index.md#2025-04-22_snippet_3

LANGUAGE: sh
CODE:
```
# Download the latest available Chrome for Testing binary corresponding to the Stable channel.
npx @puppeteer/browsers install chrome@stable

# Download a specific Chrome for Testing version.
npx @puppeteer/browsers install chrome@116.0.5793.0

# Download the latest Chrome for Testing version for the given milestone.
npx @puppeteer/browsers install chrome@117

# Download the latest available ChromeDriver version corresponding to the Canary channel.
npx @puppeteer/browsers install chromedriver@canary

# Download a specific ChromeDriver version.
npx @puppeteer/browsers install chromedriver@116.0.5793.0

# On Ubuntu/Debian and only for Chrome, install the browser and required system dependencies.
# If the browser version has already been installed, the command
# will still attempt to install system dependencies.
# Requires root privileges.
npx puppeteer browsers install chrome --install-deps
```

----------------------------------------

TITLE: Exporting CHROME_DEVEL_SANDBOX in Bash
DESCRIPTION: Sets the `CHROME_DEVEL_SANDBOX` environment variable, which is required for running Chrome in a sandboxed environment, often necessary for security or specific configurations. This can be added to shell configuration files like `~/.bashrc` or `.zshenv`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_10

LANGUAGE: bash
CODE:
```
export CHROME_DEVEL_SANDBOX=/usr/local/sbin/chrome-devel-sandbox
```

----------------------------------------

TITLE: Retrieving Request URL in Puppeteer using HTTPRequest.url()
DESCRIPTION: This code snippet shows the signature of the url() method in the HTTPRequest class. The method is defined as abstract and returns a string representing the URL of the HTTP request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.url.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract url(): string;
}
```

----------------------------------------

TITLE: Fetching Typed Property from JSHandle in TypeScript
DESCRIPTION: This signature allows for type-safe property access from a JSHandle object. It accepts a property name and returns a Promise that resolves to a HandleFor wrapper containing the property value with proper type inference.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.getproperty.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  getProperty<K extends keyof T>(
    propertyName: HandleOr<K>,
  ): Promise<HandleFor<T[K]>>;
}
```

----------------------------------------

TITLE: Accessing the Main Frame in Puppeteer with TypeScript
DESCRIPTION: This code snippet shows the signature of the mainFrame() method in the Page class. The method provides access to the primary frame of a page and returns a Frame object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.mainframe.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract mainFrame(): Frame;
}
```

----------------------------------------

TITLE: Defining Locator.setVisibility() Method in TypeScript
DESCRIPTION: TypeScript implementation of the setVisibility() method in the Locator class. This method clones the current locator with the visibility property changed to the specified value and returns a new locator instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.setvisibility.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  setVisibility<NodeType extends Node>(
    this: Locator<NodeType>,
    visibility: VisibilityOption,
  ): Locator<NodeType>;
}
```

----------------------------------------

TITLE: Signature for Page.waitForNavigation - TypeScript
DESCRIPTION: Defines the method signature for Page.waitForNavigation, showing it accepts optional WaitForOptions and returns a Promise resolving to an HTTPResponse or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitfornavigation.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  waitForNavigation(options?: WaitForOptions): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Using ElementHandle.autofill for Credit Card Data - TypeScript
DESCRIPTION: This example demonstrates how to use `ElementHandle.autofill` to populate a form input, specifically for credit card information. It selects an input element and calls `autofill` with an `AutofillData` object containing the credit card details. Note that currently, Puppeteer primarily supports credit card autofill in Chrome's new headless/headful modes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.autofill.md#_snippet_1

LANGUAGE: ts
CODE:
```
// Select an input on the credit card form.
const name = await page.waitForSelector('form #name');
// Trigger autofill with the desired data.
await name.autofill({
  creditCard: {
    number: '4444444444444444',
    name: 'John Smith',
    expiryMonth: '01',
    expiryYear: '2030',
    cvc: '123',
  },
});
```

----------------------------------------

TITLE: Using JSHandle.getProperties to Extract Element Handles
DESCRIPTION: Example demonstrating how to use getProperties() to retrieve child elements from document.body. It evaluates a handle to document.body.children, gets all its properties, and filters for element handles.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.getproperties.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const listHandle = await page.evaluateHandle(() => document.body.children);
const properties = await listHandle.getProperties();
const children = [];
for (const property of properties.values()) {
  const element = property.asElement();
  if (element) {
    children.push(element);
  }
}
children; // holds elementHandles to all children of document.body
```

----------------------------------------

TITLE: Using redirectChain with Single Redirect Example
DESCRIPTION: Example demonstrating how to use the redirectChain method to inspect redirects for a request. This example shows a page with a single redirect and how to access the original URL.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const response = await page.goto('http://example.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 1
console.log(chain[0].url()); // 'http://example.com'
```

----------------------------------------

TITLE: Implementing the Page.$() Method in Puppeteer with TypeScript
DESCRIPTION: TypeScript signature for the Page.$() method in Puppeteer. This method returns a Promise that resolves to an ElementHandle of the found element or null if no element is found matching the selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page._.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  $<Selector extends string>(
    selector: Selector,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}
```

----------------------------------------

TITLE: Launching Puppeteer Without Sandbox (Discouraged)
DESCRIPTION: Launches a Puppeteer browser instance with the sandbox disabled using the `--no-sandbox` and `--disable-setuid-sandbox` arguments. This is strongly discouraged due to security risks and should only be used if you absolutely trust the content being opened.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_8

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({
  args: ['--no-sandbox', '--disable-setuid-sandbox'],
});
```

----------------------------------------

TITLE: Example Usage of Page.emulateMediaType in Puppeteer
DESCRIPTION: Demonstrates how to use the emulateMediaType method to change the CSS media type between 'screen', 'print' and null (disabled). The example shows how to verify the changes using matchMedia evaluations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatemediatype.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.evaluate(() => matchMedia('screen').matches);
// → true
await page.evaluate(() => matchMedia('print').matches);
// → false

await page.emulateMediaType('print');
await page.evaluate(() => matchMedia('screen').matches);
// → false
await page.evaluate(() => matchMedia('print').matches);
// → true

await page.emulateMediaType(null);
await page.evaluate(() => matchMedia('screen').matches);
// → true
await page.evaluate(() => matchMedia('print').matches);
// → false
```

----------------------------------------

TITLE: Defining Browser.installExtension Method Signature (TypeScript)
DESCRIPTION: This TypeScript snippet defines the abstract signature for the `installExtension` method within the `Browser` class. It shows that the method takes a single string argument `path` (presumably the path to the extension) and returns a `Promise` that resolves to a string (presumably the extension ID).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.installextension.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Browser {
  abstract installExtension(path: string): Promise<string>;
}
```

----------------------------------------

TITLE: Define Locator.race method signature - TypeScript
DESCRIPTION: Defines the static 'race' method within the 'Locator' class. This method takes an array of 'locators' and returns a 'Locator' instance that represents the result of the race. It uses TypeScript generics to handle various locator types.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.race.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  static race<Locators extends readonly unknown[] | []>(
    locators: Locators,
  ): Locator<AwaitedLocator<Locators[number]>>;
}
```

----------------------------------------

TITLE: Sending CDP Command with CDPSession.send (TypeScript)
DESCRIPTION: Defines the abstract signature for the `send` method within the `CDPSession` class. This method is used to send a specific command (`method`) to the connected Chrome DevTools Protocol session, optionally including parameters (`params`) and command options (`options`). It returns a Promise that resolves with the result of the command.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cdpsession.send.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class CDPSession {
  abstract send<T extends keyof ProtocolMapping.Commands>(
    method: T,
    params?: ProtocolMapping.Commands[T]['paramsType'][0],
    options?: CommandOptions,
  ): Promise<ProtocolMapping.Commands[T]['returnType']>;
}
```

----------------------------------------

TITLE: Defining JSCoverage.stop Method in TypeScript
DESCRIPTION: Declaration of the stop() method in the JSCoverage class that ends JavaScript coverage collection. When called, it returns a Promise that resolves to an array of JSCoverageEntry objects containing collected coverage information.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jscoverage.stop.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class JSCoverage {
  stop(): Promise<JSCoverageEntry[]>;
}
```

----------------------------------------

TITLE: Creating a Locator by Function in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `Page.locator` method overload that accepts a function. It creates a `Locator` instance based on the result of the provided asynchronous function.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.locator.md#_snippet_1

LANGUAGE: typescript
CODE:
```
class Page {
  locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;
}
```

----------------------------------------

TITLE: Puppeteer Page.$eval with Return Type Hint (TypeScript)
DESCRIPTION: Shows how to use the generic type parameter of Page.$eval to explicitly specify the expected return type, which can be helpful when the compiler cannot infer it or for clarity.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page._eval.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
// The compiler can infer the return type in this case, but if it can't
// or if you want to be more explicit, provide it as the generic type.
const searchValue = await page.$eval<string>(
  '#search',
  (el: HTMLInputElement) => el.value,
);
```

----------------------------------------

TITLE: Implementing touchEnd Method in ElementHandle Class in TypeScript
DESCRIPTION: Method signature for touchEnd in the ElementHandle class, which simulates ending a touch event on an element. The method is bound to the ElementHandle instance and returns a Promise that resolves when the touch end event is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.touchend.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  touchEnd(this: ElementHandle<Element>): Promise<void>;
}
```

----------------------------------------

TITLE: Reloading a Puppeteer Page (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `Page.reload()` method. It reloads the current page and returns a Promise that resolves to the main resource's HTTP response. An optional `WaitForOptions` object can be provided to configure waiting behavior after the reload.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.reload.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract reload(options?: WaitForOptions): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Implementing Target Type Method in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for Target.type() that returns the type of target being interacted with in Puppeteer. This method is part of the Target class and returns a TargetType enum value that identifies what kind of target is being handled.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.type.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract type(): TargetType;
}
```

----------------------------------------

TITLE: Setting Windows File Permissions for Chrome Powershell
DESCRIPTION: This Powershell command uses `icacls` to grant specific permissions to the Chrome executable directory downloaded by Puppeteer. The command allows the SID *S-1-15-2-1 to read and execute files (RX) recursively (OI)(CI), which is necessary for the Chrome sandbox to function correctly on Windows.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_5

LANGUAGE: powershell
CODE:
```
icacls "%USERPROFILE%/.cache/puppeteer/chrome" /grant *S-1-15-2-1:(OI)(CI)(RX)
```

----------------------------------------

TITLE: Defining Browser.setCookie() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Browser.setCookie() method. It sets cookies in the default BrowserContext and accepts an array of CookieData objects as parameters, returning a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.setcookie.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  setCookie(...cookies: CookieData[]): Promise<void>;
}
```

----------------------------------------

TITLE: Connect to Existing Browser Instance (TypeScript)
DESCRIPTION: Shows the TypeScript signature for the Puppeteer.connect method, illustrating that it takes ConnectOptions and returns a Promise resolving to a Browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteer.connect.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Puppeteer {
  connect(options: ConnectOptions): Promise<Browser>;
}
```

----------------------------------------

TITLE: Connecting to an Existing Browser Instance with Puppeteer in TypeScript
DESCRIPTION: This method attaches Puppeteer to an existing browser instance. It accepts ConnectOptions as a parameter and returns a Promise that resolves to a Browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.connect.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Puppeteer {
  connect(options: ConnectOptions): Promise<Browser>;
}
```

----------------------------------------

TITLE: Implementing Page Screencast Recording in Puppeteer
DESCRIPTION: Complete example demonstrating how to launch a browser, create a page, start recording, and stop the recording. The recording is saved in WebM format using VP9 codec
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.screencast.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import puppeteer from 'puppeteer';

// Launch a browser
const browser = await puppeteer.launch();

// Create a new page
const page = await browser.newPage();

// Go to your site.
await page.goto("https://www.example.com");

// Start recording.
const recorder = await page.screencast({path: 'recording.webm'});

// Do something.

// Stop recording.
await recorder.stop();

browser.close();
```

----------------------------------------

TITLE: Installing Browsers After Config Change - Bash
DESCRIPTION: Shows the command to run after updating the configuration file to download browsers according to the new settings. This ensures the changes made in the configuration file, such as specifying multiple browsers, are applied.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/configuration.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx puppeteer browsers install
```

----------------------------------------

TITLE: Implementing Event Listener Binding in TypeScript with EventEmitter.on
DESCRIPTION: This code snippet shows the TypeScript definition of the EventEmitter.on method. It binds an event listener function to fire when a specific event occurs, supporting event types that can be either strings or symbols.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.on.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class EventEmitter {
  on<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}
```

----------------------------------------

TITLE: Demonstrating Legacy Mode Request Interception with Immediate Continue
DESCRIPTION: Example showing how Legacy Mode prevails when any handler omits priority, even if earlier handlers use Cooperative Mode. The request is continued immediately when a handler calls continue() without a priority.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
// Final outcome: immediate continue()
page.setRequestInterception(true);
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to abort at priority 0.
  request.abort('failed', 0);
});
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Control reaches this point because the request was cooperatively aborted which postpones resolution.

  // { action: InterceptResolutionAction.Abort, priority: 0 }, because abort @ 0 is the current winning resolution
  console.log(request.interceptResolutionState());

  // Legacy Mode: intercept continues immediately.
  request.continue({});
});
page.on('request', request => {
  // { action: InterceptResolutionAction.AlreadyHandled }, because continue in Legacy Mode was called
  console.log(request.interceptResolutionState());
});
```

----------------------------------------

TITLE: Creating HTTP and HTTPS Test Servers with Puppeteer TestServer in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to initialize both an HTTP and an HTTPS test server using the `@pptr/testserver` package. It utilizes `TestServer.create` and `TestServer.createHTTPS` respectively, specifying the root directory (`__dirname`) and ports (8000, 8001). A basic route `/hello` is set for the HTTP server to respond with 'Hello, world!'. The code uses an async IIFE (Immediately Invoked Function Expression) pattern.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/testserver/README.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
```ts
const {TestServer} = require('@pptr/testserver');

(async(() => {
  const httpServer = await TestServer.create(__dirname, 8000),
  const httpsServer = await TestServer.createHTTPS(__dirname, 8001)
  httpServer.setRoute('/hello', (req, res) => {
    res.end('Hello, world!');
  });
  console.log('HTTP and HTTPS servers are running!');
})();
```
```

----------------------------------------

TITLE: Listening to Locator Action Events in Puppeteer (TypeScript)
DESCRIPTION: Selects an element using `page.locator('button')` and attaches an event listener using `.on(LocatorEvent.Action, ...)`. The provided callback function (`() => { willClick = true; }`) will be executed just before the `.click()` action is performed, indicating preconditions have been met and the action is about to occur. Requires a Puppeteer `Page` instance (`page`) and `LocatorEvent` enum/object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
let willClick = false;
await page
  .locator('button')
  .on(LocatorEvent.Action, () => {
    willClick = true;
  })
  .click();
```

----------------------------------------

TITLE: Defining Puppeteer WaitForOptions Interface (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the WaitForOptions interface used in Puppeteer. It outlines the structure for options passed to wait functions, allowing configuration of cancellation signals, timeout durations, and conditions for considering the wait successful.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.waitforoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface WaitForOptions
```

----------------------------------------

TITLE: Default Browser Setting - String
DESCRIPTION: Specifies the default browser used by Puppeteer when launching, which is 'chrome'. This setting can be overridden by the PUPPETEER_BROWSER environment variable.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.configuration.md#_snippet_2

LANGUAGE: String
CODE:
```
chrome
```

----------------------------------------

TITLE: Defining Puppeteer Configuration Interface - TypeScript
DESCRIPTION: Defines the structure of the Configuration object used to customize Puppeteer's behavior.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.configuration.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface Configuration
```

----------------------------------------

TITLE: Querying ElementHandle - Puppeteer - TypeScript
DESCRIPTION: Defines the signature for the ElementHandle.$() method in Puppeteer. This method queries the current element handle for the first descendant element matching the provided selector string. It returns a Promise that resolves to an ElementHandle for the found element or null if no element is found.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle._.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  $<Selector extends string>(
    selector: Selector,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}
```

----------------------------------------

TITLE: Getting Custom Query Handler Names (TypeScript)
DESCRIPTION: Retrieves an array of strings representing the names of all currently registered custom query handlers within the Puppeteer environment. This static method is called directly on the `Puppeteer` class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteer.customqueryhandlernames.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Puppeteer {
  static customQueryHandlerNames(): string[];
}
```

----------------------------------------

TITLE: Get HTTP Response Body Buffer (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `buffer()` method of the `HTTPResponse` class. This method returns a Promise that resolves to a Buffer containing the body of the HTTP response. Note that the buffer's encoding might be affected by browser heuristics.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.buffer.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPResponse {
  buffer(): Promise<Buffer>;
}
```

----------------------------------------

TITLE: Defining CommonEventEmitter.on Method Signature in TypeScript
DESCRIPTION: This TypeScript interface definition shows the on() method signature for the CommonEventEmitter interface. The method registers an event handler for a specific event type and returns the event emitter instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.on.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface CommonEventEmitter {
  on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): this;
}
```

----------------------------------------

TITLE: Defining HTTPRequest resourceType Method - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `resourceType` method within the `HTTPRequest` class. It indicates that the method is abstract and returns a value of type `ResourceType`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.resourcetype.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPRequest {
  abstract resourceType(): ResourceType;
}
```

----------------------------------------

TITLE: Puppeteer Page.$eval with Element Type Hint (TypeScript)
DESCRIPTION: Demonstrates how to provide an explicit TypeScript type (e.g., HTMLInputElement) for the element parameter in the pageFunction to ensure correct type checking for element-specific properties like 'value'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page._eval.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// if you don't provide HTMLInputElement here, TS will error
// as `value` is not on `Element`
const searchValue = await page.$eval(
  '#search',
  (el: HTMLInputElement) => el.value,
);
```

----------------------------------------

TITLE: Generating Untrusted Click Events in Puppeteer
DESCRIPTION: Demonstrates how to generate an untrusted click event by evaluating JavaScript code directly in the page context. This approach bypasses Puppeteer's trusted event generation to manually trigger a button click.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/faq.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
await page.evaluate(() => {
  document.querySelector('button[type=submit]').click();
});
```

----------------------------------------

TITLE: Running Puppeteer Script in Docker Container
DESCRIPTION: Command to run the built Docker image, initializing with dumb-init, removing the container on exit, adding SYS_ADMIN capability, naming the container, and executing a Node.js script passed as a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_17

LANGUAGE: bash
CODE:
```
docker run -i --init --rm --cap-add=SYS_ADMIN \
   --name puppeteer-chrome puppeteer-chrome-linux \
   node -e "`cat yourscript.js`"
```

----------------------------------------

TITLE: Getting Default Navigation Timeout in Puppeteer Page (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the abstract method getDefaultNavigationTimeout() within the Puppeteer Page class. It indicates that the method returns a number representing the maximum navigation timeout in milliseconds.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.getdefaultnavigationtimeout.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract getDefaultNavigationTimeout(): number;
}
```

----------------------------------------

TITLE: Example: Modifying navigator.languages with evaluateOnNewDocument (TypeScript)
DESCRIPTION: Provides a TypeScript example demonstrating how to use `page.evaluateOnNewDocument` to inject code that overrides the `navigator.languages` property. It shows defining the override logic in a separate file (`preload.js`) and then reading and evaluating its content using `fs.readFileSync` and `page.evaluateOnNewDocument`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.evaluateonnewdocument.md#_snippet_1

LANGUAGE: ts
CODE:
```
// preload.js

// overwrite the `languages` property to use a custom getter
Object.defineProperty(navigator, 'languages', {
  get: function () {
    return ['en-US', 'en', 'bn'];
  },
});

// In your puppeteer script, assuming the preload.js file is
// in same folder of our script.
const preloadFile = fs.readFileSync('./preload.js', 'utf8');
await page.evaluateOnNewDocument(preloadFile);
```

----------------------------------------

TITLE: Get Console Message Type (TypeScript)
DESCRIPTION: Retrieves the type of the console message. This method is part of the `ConsoleMessage` class in Puppeteer and returns a value from the `ConsoleMessageType` enum.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.consolemessage.type.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ConsoleMessage {
  type(): ConsoleMessageType;
}
```

----------------------------------------

TITLE: Defining Browser.wsEndpoint() Method in TypeScript
DESCRIPTION: This code snippet defines the wsEndpoint() method in the Browser class. The method returns a string representing the WebSocket URL to connect to the browser. This URL is typically used with Puppeteer.connect() for remote browser connections.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.wsendpoint.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract wsEndpoint(): string;
}
```

----------------------------------------

TITLE: Fetching POST Data in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Fetches the POST data for the request from the browser. Use this when hasPostData() is true but postData() is undefined because the data is too long or not readily available in the decoded form.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_8

LANGUAGE: javascript
CODE:
```
fetchPostData()
```

----------------------------------------

TITLE: Defining Locator.filter() Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the filter() method of the Locator class. The method creates an expectation that is evaluated against located values and retries if expectations don't match.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.filter.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  filter<S extends T>(predicate: Predicate<T, S>): Locator<S>;
}
```

----------------------------------------

TITLE: Locator.waitHandle Method Definition in TypeScript
DESCRIPTION: The signature of the waitHandle method in the Locator class that waits for the locator to get a handle from the page. It accepts optional ActionOptions and returns a Promise resolving to HandleFor<T>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.waithandle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  waitHandle(options?: Readonly<ActionOptions>): Promise<HandleFor<T>>;
}
```

----------------------------------------

TITLE: Toggle CSP Bypass - Puppeteer - TypeScript
DESCRIPTION: Toggles bypassing the page's Content-Security-Policy (CSP). This method should typically be called before navigating to the domain, as the bypass is applied during CSP initialization. It takes a boolean parameter to enable or disable the bypass.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setbypasscsp.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setBypassCSP(enabled: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Implementing HTTPResponse.status Method in TypeScript
DESCRIPTION: This code snippet defines the status method in the HTTPResponse class which returns the numerical HTTP status code of a response (e.g., 200 for success). The method is abstract and must be implemented by subclasses.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.status.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract status(): number;
}
```

----------------------------------------

TITLE: Getting Property with String Key Puppeteer Typescript
DESCRIPTION: Fetches a single property from the referenced object using a simple string key. It takes a `propertyName` of type `string` and returns a `Promise` resolving to a `JSHandle<unknown>`, as the specific type is not known at compile time.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.getproperty.md#_snippet_1

LANGUAGE: typescript
CODE:
```
class JSHandle {
  getProperty(propertyName: string): Promise<JSHandle<unknown>>;
}
```

----------------------------------------

TITLE: Using Page.emulateIdleState in Puppeteer
DESCRIPTION: Example demonstrating how to set and clear idle state emulation in Puppeteer. First sets specific idle state values, then clears the emulation by calling the method with no arguments.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulateidlestate.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// set idle emulation
await page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});

// do some checks here
...

// clear idle emulation
await page.emulateIdleState();
```

----------------------------------------

TITLE: Defining Browser.process() Method in TypeScript
DESCRIPTION: Abstract method declaration for Browser.process() that returns the associated Node.js ChildProcess instance or null when connected to an existing browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.process.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract process(): ChildProcess | null;
}
```

----------------------------------------

TITLE: Checking Redirect Chain for a Non-Redirecting Website in TypeScript
DESCRIPTION: This example shows how to use the redirectChain() method for a website without any redirects. It demonstrates that the chain length will be zero in such cases.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.redirectchain.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const response = await page.goto('https://google.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 0
```

----------------------------------------

TITLE: Signature for Keyboard.sendCharacter Method (TypeScript)
DESCRIPTION: Defines the abstract signature for the `sendCharacter` method within the `Keyboard` class in Puppeteer, showing it accepts a string character and returns a Promise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keyboard.sendcharacter.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Keyboard {
  abstract sendCharacter(char: string): Promise<void>;
}
```

----------------------------------------

TITLE: Defining the executablePath Function Signature in TypeScript for Puppeteer
DESCRIPTION: The TypeScript signature for executablePath, which provides three overloaded function signatures to retrieve Chrome executable paths. It can accept a Chrome release channel, launch options, or no parameters to return the path as a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.executablepath.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
executablePath: {
    (channel: PuppeteerCore.ChromeReleaseChannel): string;
    (options: PuppeteerCore.LaunchOptions): string;
    (): string;
}
```

----------------------------------------

TITLE: Querying and Counting Map Objects Using Page.queryObjects in Puppeteer
DESCRIPTION: This example demonstrates how to use Page.queryObjects to find all Map instances in the JavaScript heap. It creates a Map object, gets a handle to the Map prototype, queries all Map instances, and counts them.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.queryobjects.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Create a Map object
await page.evaluate(() => (window.map = new Map()));
// Get a handle to the Map object prototype
const mapPrototype = await page.evaluateHandle(() => Map.prototype);
// Query all map instances into an array
const mapInstances = await page.queryObjects(mapPrototype);
// Count amount of map objects in heap
const count = await page.evaluate(maps => maps.length, mapInstances);
await mapInstances.dispose();
await mapPrototype.dispose();
```

----------------------------------------

TITLE: JSCoverage.start Method Signature - TypeScript
DESCRIPTION: The TypeScript signature for the JSCoverage.start method, showing it accepts an optional options object and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jscoverage.start.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class JSCoverage {
  start(options?: {
    resetOnNavigation?: boolean;
    reportAnonymousScripts?: boolean;
    includeRawScriptCoverage?: boolean;
    useBlockCoverage?: boolean;
  }): Promise<void>;
}
```

----------------------------------------

TITLE: Method Signature - ElementHandle.clickablePoint - TypeScript
DESCRIPTION: Defines the signature for the `clickablePoint` method of the `ElementHandle` class, showing it accepts an optional `offset` parameter and returns a `Promise` resolving to a `Point`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.clickablepoint.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  clickablePoint(offset?: Offset): Promise<Point>;
}
```

----------------------------------------

TITLE: Defining emulateCPUThrottling Method in Puppeteer's Page Class (TypeScript)
DESCRIPTION: This code snippet defines the emulateCPUThrottling method in the Page class. It takes a number or null as a parameter to set the CPU throttling factor and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatecputhrottling.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateCPUThrottling(factor: number | null): Promise<void>;
}
```

----------------------------------------

TITLE: Declaring Page.setContent Method in TypeScript
DESCRIPTION: TypeScript method signature for Page.setContent that sets HTML content of a page. Takes HTML string as required parameter and optional WaitForOptions. Returns a Promise that resolves when content is set.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setcontent.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  setContent(html: string, options?: WaitForOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Page.emulate() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.emulate() method. It takes a Device object as a parameter and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  emulate(device: Device): Promise<void>;
}
```

----------------------------------------

TITLE: Pressing Uppercase A Using Keyboard API
DESCRIPTION: Shows how to simulate pressing an uppercase 'A' by using the Shift modifier key with keyboard down(), press(), and up() methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
await page.keyboard.down('Shift');
await page.keyboard.press('KeyA');
await page.keyboard.up('Shift');
```

----------------------------------------

TITLE: Get Manifest V2 Background Page Handle (TypeScript)
DESCRIPTION: Launches Puppeteer with a Chrome Extension loaded using command-line arguments and waits for the background page target to get a page handle for testing.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/chrome-extensions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer';
import path from 'path';

const pathToExtension = path.join(process.cwd(), 'my-extension');
const browser = await puppeteer.launch({
  args: [
    `--disable-extensions-except=${pathToExtension}`,
    `--load-extension=${pathToExtension}`,
  ],
});
const backgroundPageTarget = await browser.waitForTarget(
  target => target.type() === 'background_page',
);
const backgroundPage = await backgroundPageTarget.page();
// Test the background page as you would any other page.
await browser.close();
```

----------------------------------------

TITLE: Implementing CDPSession.send Method in TypeScript
DESCRIPTION: Abstract method signature for sending Chrome DevTools Protocol commands. Takes a method name, optional parameters specific to the command, and optional command options, and returns a promise with the command result.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.send.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class CDPSession {
  abstract send<T extends keyof ProtocolMapping.Commands>(
    method: T,
    params?: ProtocolMapping.Commands[T]['paramsType'][0],
    options?: CommandOptions,
  ): Promise<ProtocolMapping.Commands[T]['returnType']>;
}
```

----------------------------------------

TITLE: Method Signature - Page.isJavaScriptEnabled - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `isJavaScriptEnabled()` method of the Pupp Puppeteer `Page` class. It indicates that the method is abstract and returns a boolean value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.isjavascriptenabled.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract isJavaScriptEnabled(): boolean;
}
```

----------------------------------------

TITLE: Defining trimCache Function Signature in TypeScript
DESCRIPTION: TypeScript function signature for trimCache, an asynchronous function that handles cache trimming operations and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.trimcache.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
trimCache: () => Promise<void>;
```

----------------------------------------

TITLE: Defining the NewDocumentScriptEvaluation interface in TypeScript
DESCRIPTION: This snippet shows the basic definition of the NewDocumentScriptEvaluation interface.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.newdocumentscriptevaluation.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface NewDocumentScriptEvaluation
```

----------------------------------------

TITLE: Page.url() Method Signature (TypeScript)
DESCRIPTION: The TypeScript signature for the Page.url() method, showing it is a method of the Page class that returns a string representing the page's URL. This method is a shortcut for accessing the URL of the page's main frame.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.url.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  url(): string;
}
```

----------------------------------------

TITLE: Signature for Page.setRequestInterception in TypeScript
DESCRIPTION: Defines the method signature for setRequestInterception within the Puppeteer Page class, showing it accepts a boolean value to enable/disable interception and returns a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setrequestinterception.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setRequestInterception(value: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Signature of HTTPRequest.abort Method - TypeScript
DESCRIPTION: Shows the TypeScript signature for the HTTPRequest.abort method. It takes optional `errorCode` and `priority` parameters and returns a `Promise<void>`. This method can only be used when request interception is enabled.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.abort.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abort(errorCode?: ErrorCode, priority?: number): Promise<void>;
}
```

----------------------------------------

TITLE: Getting Specific Command Help
DESCRIPTION: Provides detailed help documentation for individual commands within the @puppeteer/browsers CLI, such as `install`, `launch`, `clear`, and `list`. Useful for understanding command-specific options.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/index.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx @puppeteer/browsers --help # help for all commands
npx @puppeteer/browsers install --help # help for the install command
npx @puppeteer/browsers launch --help # help for the launch command
npx @puppeteer/browsers clear --help # help for the clear command
npx @puppeteer/browsers list --help # help for the list command
```

----------------------------------------

TITLE: Defining Console Message Types in TypeScript for Puppeteer
DESCRIPTION: A TypeScript type definition that enumerates all possible console message types supported by Puppeteer. Includes standard logging levels (log, debug, info, error, warn) and special console operations like grouping, profiling, and timing.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessagetype.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type ConsoleMessageType =
  | 'log'
  | 'debug'
  | 'info'
  | 'error'
  | 'warn'
  | 'dir'
  | 'dirxml'
  | 'table'
  | 'trace'
  | 'clear'
  | 'startGroup'
  | 'startGroupCollapsed'
  | 'endGroup'
  | 'assert'
  | 'profile'
  | 'profileEnd'
  | 'count'
  | 'timeEnd'
  | 'verbose';
```

----------------------------------------

TITLE: Setting Service Worker Bypass in Puppeteer (TypeScript)
DESCRIPTION: Toggles whether the page should bypass the service worker for all subsequent requests, forcing them to load directly from the network. This is useful for debugging or ensuring content is always fetched fresh.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setbypassserviceworker.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setBypassServiceWorker(bypass: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Keyboard.type Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Keyboard.type method. It takes a text string and optional KeyboardTypeOptions, returning a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.type.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Keyboard {
  abstract type(
    text: string,
    options?: Readonly<KeyboardTypeOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Launching Puppeteer in Old Headless Mode (chrome-headless-shell)
DESCRIPTION: Configures Puppeteer to launch the older 'chrome-headless-shell' binary. This mode might offer better performance for tasks not requiring the full Chrome feature set.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/headless-modes.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
const browser = await puppeteer.launch({headless: 'shell'});
```

----------------------------------------

TITLE: Defining Page.viewport Method - Puppeteer TypeScript
DESCRIPTION: Abstract class definition for the Page.viewport() method that returns the current viewport settings. The method returns either the viewport configured through Page.setViewport() or the default viewport specified in ConnectOptions.defaultViewport.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.viewport.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract viewport(): Viewport | null;
}
```

----------------------------------------

TITLE: Defining Puppeteer Permission Type (TypeScript)
DESCRIPTION: This TypeScript code defines the 'Permission' type as a union of string literals, representing various browser permissions that can be managed or checked within a Puppeteer context. It lists common permissions like 'camera', 'geolocation', 'notifications', etc.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.permission.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type Permission =
  | 'accelerometer'
  | 'ambient-light-sensor'
  | 'background-sync'
  | 'camera'
  | 'clipboard-read'
  | 'clipboard-sanitized-write'
  | 'clipboard-write'
  | 'geolocation'
  | 'gyroscope'
  | 'idle-detection'
  | 'keyboard-lock'
  | 'magnetometer'
  | 'microphone'
  | 'midi-sysex'
  | 'midi'
  | 'notifications'
  | 'payment-handler'
  | 'persistent-storage'
  | 'pointer-lock';
```

----------------------------------------

TITLE: Evaluating a Promise-Returning Function with Page.evaluate()
DESCRIPTION: This example demonstrates how to use Page.evaluate() with a function that returns a Promise. The method waits for the promise to resolve and returns its value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluate.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const result = await frame.evaluate(() => {
  return Promise.resolve(8 * 7);
});
console.log(result); // prints "56"
```

----------------------------------------

TITLE: Getting Page Content in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows the signature for the Puppeteer Page.content() method. It is called on a Page object and returns a Promise that resolves with the full HTML content of the page as a string, including the DOCTYPE.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.content.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  content(): Promise<string>;
}
```

----------------------------------------

TITLE: Defining Frame.$eval Method Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the Frame.$eval method in TypeScript. It specifies the method's generic types, parameters, and return type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame._eval.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  $eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
      NodeFor<Selector>,
      Params
    >,
  >(
    selector: Selector,
    pageFunction: string | Func,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Check for POST data in HTTPRequest (TypeScript)
DESCRIPTION: This method signature shows the `hasPostData` method within the `HTTPRequest` class. It returns a boolean indicating if the request has POST data. Note that even if true, the actual data via `postData()` might be unavailable, requiring `fetchPostData()`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.haspostdata.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract hasPostData(): boolean;
}
```

----------------------------------------

TITLE: Disconnecting and Reconnecting to Browser (TypeScript)
DESCRIPTION: Illustrates how to launch a browser, retrieve its WebSocket endpoint for future connections, disconnect the current Puppeteer instance, and then reconnect using the stored endpoint. Finally, it shows how to close the browser via the reconnected instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
// Store the endpoint to be able to reconnect to the browser.
const browserWSEndpoint = browser.wsEndpoint();
// Disconnect puppeteer from the browser.
await browser.disconnect();

// Use the endpoint to reestablish a connection
const browser2 = await puppeteer.connect({browserWSEndpoint});
// Close the browser.
await browser2.close();
```

----------------------------------------

TITLE: Getting Intercept Resolution State in Puppeteer HTTPRequest (TypeScript)
DESCRIPTION: Retrieves an object detailing the current resolution action and priority for an intercepted HTTP request. The returned InterceptResolutionState object includes the action taken (e.g., abort, respond, continue) and an optional priority.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.interceptresolutionstate.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  interceptResolutionState(): InterceptResolutionState;
}
```

----------------------------------------

TITLE: Define PuppeteerNode.trimCache Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the trimCache method within the PuppeteerNode class, indicating it is an asynchronous method that returns a Promise resolving to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteernode.trimcache.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  trimCache(): Promise<void>;
}
```

----------------------------------------

TITLE: Example of Aborting Image Requests with Puppeteer Request Interception
DESCRIPTION: Demonstrates how to enable request interception and use a request event listener to abort requests for image files (.png, .jpg) while allowing all other requests to continue. This is a basic example of filtering requests.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setrequestinterception.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setRequestInterception(true);
  page.on('request', interceptedRequest => {
    if (
      interceptedRequest.url().endsWith('.png') ||
      interceptedRequest.url().endsWith('.jpg')
    )
      interceptedRequest.abort();
    else interceptedRequest.continue();
  });
  await page.goto('https://example.com');
  await browser.close();
})();
```

----------------------------------------

TITLE: String-based JavaScript Evaluation
DESCRIPTION: Shows how to evaluate JavaScript by providing the function body as a string. Important for understanding type limitations in string-based evaluation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/javascript-execution.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Evaluate JavaScript
const three = await page.evaluate(`
    1 + 2
`);
```

----------------------------------------

TITLE: Text Selection Implementation in Puppeteer
DESCRIPTION: Example demonstrating how to select content between nodes using document.getSelection() and range functionality.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
await page.evaluate(
  (from, to) => {
    const selection = from.getRootNode().getSelection();
    const range = document.createRange();
    range.setStartBefore(from);
    range.setEndAfter(to);
    selection.removeAllRanges();
    selection.addRange(range);
  },
  fromJSHandle,
  toJSHandle
);
```

----------------------------------------

TITLE: TypeScript Generic Usage with Page.evaluateHandle
DESCRIPTION: Example showing how to use TypeScript generics with page.evaluateHandle to correctly type the return value as an ElementHandle when you know that's what will be returned.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluatehandle.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const button = await page.evaluateHandle<ElementHandle>(...);
```

----------------------------------------

TITLE: Holding Shift to Select and Delete Text with Puppeteer Keyboard (TypeScript)
DESCRIPTION: This example demonstrates simulating holding down the Shift key while pressing the ArrowLeft key repeatedly to select text, followed by pressing Backspace to delete the selected portion. It uses the `keyboard.down`, `keyboard.press`, and `keyboard.up` methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keyboard.md#_snippet_0

LANGUAGE: typescript
CODE:
```
await page.keyboard.type('Hello World!');
await page.keyboard.press('ArrowLeft');

await page.keyboard.down('Shift');
for (let i = 0; i < ' World'.length; i++)
  await page.keyboard.press('ArrowLeft');
await page.keyboard.up('Shift');

await page.keyboard.press('Backspace');
// Result text will end up saying 'Hello!'
```

----------------------------------------

TITLE: Locator.scroll Method Definition in TypeScript
DESCRIPTION: Defines the scroll method on the Locator class that enables scrolling of located DOM elements. The method takes optional scroll options and returns a Promise that resolves when the scroll operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.scroll.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  scroll<ElementType extends Element>(
    this: Locator<ElementType>,
    options?: Readonly<LocatorScrollOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Setting CHROME_DEVEL_SANDBOX in Dockerfile
DESCRIPTION: Sets the `CHROME_DEVEL_SANDBOX` environment variable within a Docker container using the `ENV` instruction. This is equivalent to the bash export but applied during the Docker image build process.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_11

LANGUAGE: Dockerfile
CODE:
```
ENV CHROME_DEVEL_SANDBOX /usr/local/sbin/chrome-devel-sandbox
```

----------------------------------------

TITLE: Configuration Interface Definition in TypeScript
DESCRIPTION: The TypeScript interface definition for Puppeteer's Configuration object. This interface encapsulates all configuration options used to customize Puppeteer's behavior during installation and runtime.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.configuration.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Configuration
```

----------------------------------------

TITLE: Registering a one-time event listener with CommonEventEmitter in TypeScript
DESCRIPTION: Defines the signature for the `once` method on the `CommonEventEmitter` interface. This method registers a handler that will be invoked only the first time the specified event `type` occurs. It takes the event type and the handler function as parameters and returns the emitter instance for chaining.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.commoneventemitter.once.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface CommonEventEmitter {
  once<Key extends keyof Events>(
    type: Key,
    handler: Handler<Events[Key]>,
  ): this;
}
```

----------------------------------------

TITLE: Defining Puppeteer Credentials Interface - TypeScript
DESCRIPTION: Defines the TypeScript interface `Credentials` used within Puppeteer. This interface specifies the structure for providing authentication credentials, consisting of a username and a password.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.credentials.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface Credentials
```

----------------------------------------

TITLE: Target.page() Method Signature - TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the `Target.page()` method. It is a method of the `Target` class that returns a Promise resolving to a `Page` object or `null`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.target.page.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Target {
  page(): Promise<Page | null>;
}
```

----------------------------------------

TITLE: Install EPEL on Amazon Linux
DESCRIPTION: Installs the Extra Packages for Enterprise Linux (EPEL) repository on an Amazon Linux EC2 instance using `amazon-linux-extras`. This is a prerequisite for installing Chromium.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_26

LANGUAGE: bash
CODE:
```
sudo amazon-linux-extras install epel -y
```

----------------------------------------

TITLE: CircleCI Docker Image Configuration for Puppeteer
DESCRIPTION: Configures the Docker image for a CircleCI job running Puppeteer. It specifies a Node.js image and sets the `NODE_ENV` environment variable, which might be needed if Puppeteer is in `devDependencies`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_13

LANGUAGE: yaml
CODE:
```
docker:
  - image: circleci/node:14 # Use your desired version
    environment:
      NODE_ENV: development # Only needed if puppeteer is in \`devDependencies\`
```

----------------------------------------

TITLE: Building Puppeteer Docker Image (Debian)
DESCRIPTION: Defines a Docker image for running Puppeteer based on a Debian/Ubuntu base, including installing dumb-init, optionally skipping the default Chrome download, installing Puppeteer via npm, creating a non-privileged user, and setting the entrypoint and command.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_15

LANGUAGE: Dockerfile
CODE:
```
# ADD https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_x86_64 /usr/local/bin/dumb-init
# RUN chmod +x /usr/local/bin/dumb-init
# ENTRYPOINT ["dumb-init", "--"]

# Uncomment to skip the Chrome for Testing download when installing puppeteer. If you do,
# you'll need to launch puppeteer with:
#     browser.launch({executablePath: 'google-chrome-stable'})
# ENV PUPPETEER_SKIP_DOWNLOAD true

# Install puppeteer so it's available in the container.
RUN npm init -y &&  \
    npm i puppeteer \
    # Add user so we don't need --no-sandbox.
    # same layer as npm install to keep re-chowned files from using up several hundred MBs more space
    && groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \
    && mkdir -p /home/pptruser/Downloads \
    && chown -R pptruser:pptruser /home/pptruser \
    && chown -R pptruser:pptruser /node_modules \
    && chown -R pptruser:pptruser /package.json \
    && chown -R pptruser:pptruser /package-lock.json

# Run everything after as non-privileged user.
USER pptruser

CMD ["google-chrome-stable"]
```

----------------------------------------

TITLE: Defining computeSystemExecutablePath Function in TypeScript
DESCRIPTION: This function takes SystemOptions as a parameter and returns a string representing the path to the Chrome executable. It checks known installation locations and throws an error if Chrome is not found at the expected path.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.computesystemexecutablepath.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function computeSystemExecutablePath(
  options: SystemOptions,
): string;
```

----------------------------------------

TITLE: Browser User Agent Method Signature - Puppeteer - TypeScript
DESCRIPTION: This snippet shows the abstract TypeScript signature for the `userAgent` method within the `Browser` class in Puppeteer. It indicates that the method is asynchronous and returns a Promise that resolves to a string, representing the browser's original user agent.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.useragent.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract userAgent(): Promise<string>;
}
```

----------------------------------------

TITLE: Defining Target.asPage() Method in TypeScript
DESCRIPTION: This code snippet defines the asPage() method in the Target class. It returns a Promise that resolves to a Page object. This method is useful for forcefully creating a page for any type of target, especially when dealing with CDP targets of type 'other'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.aspage.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract asPage(): Promise<Page>;
}
```

----------------------------------------

TITLE: Define Page.addScriptTag Method Signature (TypeScript)
DESCRIPTION: This TypeScript snippet shows the signature for the Page.addScriptTag method. It takes an options object of type FrameAddScriptTagOptions and returns a Promise that resolves to an ElementHandle representing the injected script element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.addscripttag.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  addScriptTag(
    options: FrameAddScriptTagOptions,
  ): Promise<ElementHandle<HTMLScriptElement>>;}
```

----------------------------------------

TITLE: Defining Page.addScriptTag Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.addScriptTag method. It takes FrameAddScriptTagOptions as a parameter and returns a Promise resolving to an ElementHandle of an HTMLScriptElement.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.addscripttag.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  addScriptTag(
    options: FrameAddScriptTagOptions,
  ): Promise<ElementHandle<HTMLScriptElement>>;
}
```

----------------------------------------

TITLE: Finding and Logging the Focused Node in TypeScript
DESCRIPTION: Example demonstrating how to capture the accessibility tree, find the focused node using a recursive function, and log its name. This shows how to traverse the accessibility tree returned by snapshot().
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.accessibility.snapshot.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const snapshot = await page.accessibility.snapshot();
const node = findFocusedNode(snapshot);
console.log(node && node.name);

function findFocusedNode(node) {
  if (node.focused) return node;
  for (const child of node.children || []) {
    const foundNode = findFocusedNode(child);
    return foundNode;
  }
  return null;
}
```

----------------------------------------

TITLE: Implementing Element Visibility Check in Puppeteer TypeScript
DESCRIPTION: TypeScript class method definition for checking if an element is visible in the DOM. Returns a Promise that resolves to a boolean indicating whether the element meets all visibility criteria including computed styles, non-empty bounding client rect, and appropriate visibility property value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.isvisible.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  isVisible(): Promise<boolean>;
}
```

----------------------------------------

TITLE: Defining PDFOptions Interface in TypeScript for Puppeteer
DESCRIPTION: TypeScript interface declaration for PDFOptions which defines all configurable options for PDF generation in Puppeteer. This interface is used with the Page.pdf() method to customize PDF output.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.pdfoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface PDFOptions
```

----------------------------------------

TITLE: Retrieving Browser Instance for Page in Puppeteer (TypeScript)
DESCRIPTION: This code snippet defines the Page.browser() method in the Page class. It returns a Browser instance, allowing access to the browser that the page belongs to. This method is abstract, indicating it must be implemented by concrete subclasses.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.browser.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract browser(): Browser;
}
```

----------------------------------------

TITLE: Implementing Locator.map Method in TypeScript
DESCRIPTION: TypeScript class definition showing the map() method signature in the Locator class. The method takes a mapper function that transforms elements from type T to type To and returns a new Locator instance of the target type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.map.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  map<To>(mapper: Mapper<T, To>): Locator<To>;
}
```

----------------------------------------

TITLE: Configuring Rollup for Puppeteer Browser Build - JS
DESCRIPTION: This Rollup configuration demonstrates how to bundle a Puppeteer application for the browser environment. It uses `@rollup/plugin-node-resolve` to handle module resolution, targets ESM format, and specifically resolves only `puppeteer-core` while excluding other dependencies like `chromium-bidi` to minimize bundle size. Requires `@rollup/plugin-node-resolve` and `puppeteer-core`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/running-puppeteer-in-the-browser.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import {nodeResolve} from '@rollup/plugin-node-resolve';

export default {
  input: 'main.mjs',
  output: {
    format: 'esm',
    dir: 'out',
  },
  // If you do not need to use WebDriver BiDi protocol,
  // exclude chromium-bidi/lib/* to minimize the bundle size.
  external: ['chromium-bidi/*'],
  plugins: [
    nodeResolve({
      // Indicate that we target a browser environment.
      browser: true,
      // Exclude any dependencies except for puppeteer-core.
      // `npm install puppeteer-core` # To install puppeteer-core if needed.
      resolveOnly: ['puppeteer-core'],
    }),
  ],
};
```

----------------------------------------

TITLE: Checking Intercept Resolution Handled State in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Returns `true` if the intercept resolution has already been handled, `false` otherwise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_15

LANGUAGE: javascript
CODE:
```
isInterceptResolutionHandled()
```

----------------------------------------

TITLE: Taking Base64 Screenshot of Element (TypeScript)
DESCRIPTION: This signature of the screenshot method takes a screenshot of the element and returns the result as a base64 encoded string. It requires the 'encoding' option to be set to 'base64'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.screenshot.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  screenshot(
    options: Readonly<ScreenshotOptions> & {
      encoding: 'base64';
    },
  ): Promise<string>;
}
```

----------------------------------------

TITLE: GeolocationOptions Interface Definition - TypeScript
DESCRIPTION: Defines the structure of the GeolocationOptions interface used in Puppeteer to configure browser geolocation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.geolocationoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface GeolocationOptions
```

----------------------------------------

TITLE: Defining Page.goto Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.goto() method in Puppeteer. It takes a URL string and optional GoToOptions, returning a Promise that resolves to an HTTPResponse or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.goto.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  goto(url: string, options?: GoToOptions): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Parsing HTTP Response to JSON in Puppeteer TypeScript
DESCRIPTION: Method signature for converting HTTP response body to JSON format. Returns a Promise that resolves to the JSON representation of the response body. Will throw an error if the response body cannot be parsed using JSON.parse.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.json.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  json(): Promise<any>;
}
```

----------------------------------------

TITLE: Signature: Page.waitForRequest method
DESCRIPTION: Defines the signature for the `Page.waitForRequest` method, showing its parameters (`urlOrPredicate`, `options`) and its return type (`Promise<HTTPRequest>`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforrequest.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  waitForRequest(
    urlOrPredicate: string | AwaitablePredicate<HTTPRequest>,
    options?: WaitTimeoutOptions,
  ): Promise<HTTPRequest>;
}
```

----------------------------------------

TITLE: Finalizing HTTP Request Interceptions (TypeScript)
DESCRIPTION: This method, part of the Puppeteer `HTTPRequest` class, is used to process pending interception handlers. It determines the final action for the intercepted request after all handlers have run. It returns a Promise that resolves when the process is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.finalizeinterceptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  finalizeInterceptions(): Promise<void>;
}
```

----------------------------------------

TITLE: Define Puppeteer Mouse drag method signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `Mouse.drag` method in Puppeteer. It indicates that the method is abstract within the Mouse class, takes two `Point` objects for the start and target coordinates, and returns a Promise that resolves to `Protocol.Input.DragData`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.drag.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Mouse {
  abstract drag(start: Point, target: Point): Promise<Protocol.Input.DragData>;
}
```

----------------------------------------

TITLE: Defining BrowserContextEvents Interface in TypeScript
DESCRIPTION: This snippet defines the BrowserContextEvents interface, which extends Record<EventType, unknown>. It includes properties for targetchanged, targetcreated, and targetdestroyed events, all of type Target.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontextevents.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface BrowserContextEvents extends Record<EventType, unknown> {
  targetchanged: Target;
  targetcreated: Target;
  targetdestroyed: Target;
}
```

----------------------------------------

TITLE: Running Puppeteer Tests with a Custom Browser Executable via npm
DESCRIPTION: Executes Puppeteer tests using a specified browser executable path provided via the `BINARY` environment variable. This example targets the `test:chrome:headless` npm script, but the comment indicates it can also be used with `test:firefox` or similar scripts.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
BINARY=<path-to-executable> npm run test:chrome:headless # Or npm run test:firefox
```

----------------------------------------

TITLE: Closing ExtensionTransport in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the close method of the ExtensionTransport class. This method is used to close the transport instance. It takes no arguments and returns void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.extensiontransport.close.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ExtensionTransport {
  close(): void;
}
```

----------------------------------------

TITLE: Defining Cookie Interface TypeScript
DESCRIPTION: This code snippet defines the `Cookie` interface in TypeScript. It shows that the `Cookie` interface extends the `CookieData` interface, inheriting its properties and structure.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cookie.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Cookie extends CookieData
```

----------------------------------------

TITLE: Get Default Executable Path
DESCRIPTION: Method to retrieve the default executable path without any parameters. Returns a string representing the path.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.executablepath.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  executablePath(): string;
}
```

----------------------------------------

TITLE: Defining ConsoleMessageLocation Interface in TypeScript for Puppeteer
DESCRIPTION: TypeScript interface declaration for ConsoleMessageLocation, which represents the location information of console messages in Puppeteer. It includes optional properties for column number, line number, and URL of the resource.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessagelocation.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ConsoleMessageLocation
```

----------------------------------------

TITLE: Get Executable Path by Chrome Release Channel
DESCRIPTION: Method to retrieve the default executable path for a specified Chrome release channel. Takes a ChromeReleaseChannel parameter and returns a string path.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.executablepath.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  executablePath(channel: ChromeReleaseChannel): string;
}
```

----------------------------------------

TITLE: Waiting for Elements Using ElementHandle in Puppeteer
DESCRIPTION: Waits for an element matching the given selector to appear within the current element's subtree. Does not work across page navigations or if parent element is detached.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
elementHandle.waitForSelector(selector, options)
```

----------------------------------------

TITLE: Defining Frame.goto Method Signature - TypeScript
DESCRIPTION: This code snippet shows the abstract signature of the `goto` method within the `Frame` class in TypeScript. It defines the method's name, its required `url` parameter (string), its optional `options` parameter (`GoToOptions`), and its return type (`Promise<HTTPResponse | null>`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.goto.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  abstract goto(
    url: string,
    options?: GoToOptions,
  ): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Defining Frame Click Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the Frame.click() method signature which accepts a selector string and optional click options.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.click.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: JSON Structure for CSS Coverage in Puppeteer
DESCRIPTION: A JSON structure representing CSS coverage data collected by Puppeteer. It includes the URL of the page being analyzed, ranges of CSS that were used (with start and end indices), and the full CSS text content that was analyzed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/golden-chrome/csscoverage-involved.txt#2025-04-22_snippet_0

LANGUAGE: json
CODE:
```
[
  {
    "url": "http://localhost:<PORT>/csscoverage/involved.html",
    "ranges": [
      {
        "start": 149,
        "end": 297
      },
      {
        "start": 306,
        "end": 323
      },
      {
        "start": 327,
        "end": 433
      }
    ],
    "text": "\n@charset \"utf-8\";\n@namespace svg url(http://www.w3.org/2000/svg);\n@font-face {\n  font-family: \"Example Font\";\n  src: url(\"./Dosis-Regular.ttf\");\n}\n\n#fluffy {\n  border: 1px solid black;\n  z-index: 1;\n  /* -webkit-disabled-property: rgb(1, 2, 3) */\n  -lol-cats: \"dogs\" /* non-existing property */\n}\n\n@media (min-width: 1px) {\n  span {\n    -webkit-border-radius: 10px;\n    font-family: \"Example Font\";\n    animation: 1s identifier;\n  }\n}\n"
  }
]
```

----------------------------------------

TITLE: Getting HTTP Response Status Text (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `statusText()` method of the `HTTPResponse` class. This method returns a string representing the status text associated with the HTTP response's status code, such as 'OK' or 'Not Found'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.statustext.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract statusText(): string;
}
```

----------------------------------------

TITLE: Defining Frame.setContent() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition of the setContent() method in the Frame class. It takes an HTML string and optional WaitForOptions, and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.setcontent.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  abstract setContent(html: string, options?: WaitForOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Target Class with createCDPSession Method in TypeScript
DESCRIPTION: Abstract class definition for Target that includes the createCDPSession method. This method creates and returns a Promise that resolves to a Chrome DevTools Protocol session (CDPSession) attached to the target.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.createcdpsession.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract createCDPSession(): Promise<CDPSession>;
}
```

----------------------------------------

TITLE: Listing Installed Browsers
DESCRIPTION: Executes the `list` command of the @puppeteer/browsers CLI via npx. This command displays a list of all browsers currently installed by the tool.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/index.md#_snippet_4

LANGUAGE: bash
CODE:
```
npx @puppeteer/browsers list
```

----------------------------------------

TITLE: Implementing Browser.defaultBrowserContext Method in TypeScript
DESCRIPTION: Abstract method definition for getting the default browser context in Puppeteer's Browser class. This method returns a BrowserContext instance that cannot be closed as noted in the remarks.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.defaultbrowsercontext.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract defaultBrowserContext(): BrowserContext;
}
```

----------------------------------------

TITLE: Defining Page.setJavaScriptEnabled Method Signature in TypeScript
DESCRIPTION: TypeScript signature of the setJavaScriptEnabled method in the Page class. This method enables or disables JavaScript execution on a page and returns a Promise that resolves when the operation completes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setjavascriptenabled.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setJavaScriptEnabled(enabled: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Touchscreen.touchMove Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the touchMove method of the Touchscreen class. The method takes x and y coordinates as parameters and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchscreen.touchmove.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Touchscreen {
  touchMove(x: number, y: number): Promise<void>;
}
```

----------------------------------------

TITLE: Defining setUserAgent Method for Page Class in TypeScript
DESCRIPTION: This code snippet defines the setUserAgent method for the Page class in Puppeteer. It allows setting a specific user agent for the page, with an optional user agent metadata parameter. The method returns a Promise that resolves when the user agent is set.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setuseragent.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setUserAgent(
    userAgent: string,
    userAgentMetadata?: Protocol.Emulation.UserAgentMetadata,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Hovering over Element with Locator - TypeScript
DESCRIPTION: Defines the signature for the `hover` method within the `Locator` class. This method is used to simulate hovering the mouse cursor over the element located by the `Locator` instance. It accepts an optional `options` object and returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.hover.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  hover<ElementType extends Element>(
    this: Locator<ElementType>,
    options?: Readonly<ActionOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Implementing Function-based Page.locator in TypeScript
DESCRIPTION: Method signature for creating a locator using a function. The method accepts a function that returns an Awaitable value and returns a Locator instance typed with the function's return type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.locator.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class Page {
  locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;
}
```

----------------------------------------

TITLE: Mouse Movement Pattern Example in Puppeteer
DESCRIPTION: Example showing how to use page.mouse to trace a square pattern by moving the mouse cursor and simulating button presses.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// Using 'page.mouse' to trace a 100x100 square.
await page.mouse.move(0, 0);
await page.mouse.down();
await page.mouse.move(0, 100);
await page.mouse.move(100, 100);
await page.mouse.move(100, 0);
await page.mouse.move(0, 0);
await page.mouse.up();
```

----------------------------------------

TITLE: Get Executable Path by Options (TypeScript)
DESCRIPTION: Retrieves the default executable path based on provided launch options. This method is part of the PuppeteerNode class and accepts a LaunchOptions object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteernode.executablepath.md#_snippet_1

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  executablePath(options: LaunchOptions): string;
}
```

----------------------------------------

TITLE: Mouse.drop Method Signature in Puppeteer
DESCRIPTION: The abstract method signature for the Mouse.drop method in Puppeteer. It takes a target point and drag data as parameters and returns a Promise that resolves to void. This method performs dragenter, dragover, and drop operations in sequence.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.drop.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract drop(target: Point, data: Protocol.Input.DragData): Promise<void>;
}
```

----------------------------------------

TITLE: Using redirectChain with No Redirects Example
DESCRIPTION: Example showing how to use the redirectChain method for a page with no redirects. The chain array will be empty in this case.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const response = await page.goto('https://google.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 0
```

----------------------------------------

TITLE: CLI Help Commands
DESCRIPTION: Demonstrates various help command options for different CLI functionalities.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/index.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx @puppeteer/browsers --help # help for all commands
npx @puppeteer/browsers install --help # help for the install command
npx @puppeteer/browsers launch --help # help for the launch command
npx @puppeteer/browsers clear --help # help for the clear command
npx @puppeteer/browsers list --help # help for the list command
```

----------------------------------------

TITLE: Get Default Executable Path (TypeScript)
DESCRIPTION: Retrieves the default executable path without specifying a channel or options. This is the basic signature of the executablePath method in the PuppeteerNode class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteernode.executablepath.md#_snippet_2

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  executablePath(): string;
}
```

----------------------------------------

TITLE: Exporting CHROME_DEVEL_SANDBOX Environment Variable Bash
DESCRIPTION: This bash command sets the `CHROME_DEVEL_SANDBOX` environment variable to the path of the setuid sandbox executable. Setting this variable tells Chrome (and Puppeteer) where to find the sandbox binary to use when launching, enabling sandboxed execution.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_14

LANGUAGE: bash
CODE:
```
export CHROME_DEVEL_SANDBOX=/usr/local/sbin/chrome-devel-sandbox
```

----------------------------------------

TITLE: Defining Page.createPDFStream() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the createPDFStream() method in the Page class. It generates a PDF of the page with the 'print' CSS media type and returns a Promise that resolves to a ReadableStream of Uint8Array.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.createpdfstream.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract createPDFStream(
    options?: PDFOptions,
  ): Promise<ReadableStream<Uint8Array>>;
}
```

----------------------------------------

TITLE: Creating and Managing Browser Contexts with Puppeteer in TypeScript
DESCRIPTION: This snippet illustrates how to create a new browser context, open multiple pages within it, and then close the entire context. Browser contexts are useful for isolating automation tasks and managing resources efficiently.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/browser-management.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const context = await browser.createBrowserContext();

const page1 = await context.newPage();
const page2 = await context.newPage();

await context.close();
```

----------------------------------------

TITLE: Define Browser.uninstallExtension Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `uninstallExtension` method within the `Browser` class. It takes a single string parameter `id` and returns a Promise that resolves to void. Note that in Chrome, this method has specific prerequisites related to browser creation flags.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.uninstallextension.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract uninstallExtension(id: string): Promise<void>;
}
```

----------------------------------------

TITLE: Launching Puppeteer with GPU Acceleration (Headless Shell)
DESCRIPTION: Launches a Puppeteer browser instance using the 'shell' headless mode and enables GPU acceleration by passing the `--enable-gpu` argument. This is necessary for GPU compositing in the headless shell.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_7

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({
  headless: 'shell',
  args: ['--enable-gpu'],
});
```

----------------------------------------

TITLE: Fill Input with Locator (TypeScript)
DESCRIPTION: Defines the signature for the `fill` method within the `Locator` class. This method is used to populate an input element identified by the locator with the provided string value. It supports an optional `ActionOptions` object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.fill.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  fill<ElementType extends Element>(
    this: Locator<ElementType>,
    value: string,
    options?: Readonly<ActionOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Page.goto method in TypeScript
DESCRIPTION: Defines the signature for the Page.goto method in TypeScript. It takes a required 'url' string and an optional 'options' object, returning a Promise that resolves to an HTTPResponse or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.goto.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  goto(url: string, options?: GoToOptions): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Define Puppeteer Mouse.dragAndDrop Method Signature (TypeScript)
DESCRIPTION: Defines the signature for the `dragAndDrop` method within the Puppeteer `Mouse` class. This method performs a sequence of drag, dragenter, dragover, and drop actions. It takes start and target points, and an optional options object with a delay.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.draganddrop.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Mouse {
  abstract dragAndDrop(
    start: Point,
    target: Point,
    options?: {
      delay?: number;
    },
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Signature of Frame.$$eval Method (TypeScript)
DESCRIPTION: Provides the TypeScript signature for the $$eval method, detailing its generic parameters, the 'selector', 'pageFunction', and 'args' parameters, and its return type, which is a Promise resolving to the result of the evaluated function.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.__eval.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  $$eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<
      Array<NodeFor<Selector>>,
      Params
    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
  >(
    selector: Selector,
    pageFunction: string | Func,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Handling Page Load Event Once with Puppeteer (Node.js)
DESCRIPTION: This snippet shows how to listen for the 'load' event on a Puppeteer Page instance using the `once` method. The provided callback function will execute only the first time the 'load' event is emitted, logging a message to the console.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.md#_snippet_1

LANGUAGE: ts
CODE:
```
page.once('load', () => console.log('Page loaded!'));
```

----------------------------------------

TITLE: Puppeteer Browser Class Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript declaration signature for the Browser class. It indicates that Browser is an abstract class exported from the module and extends EventEmitter, inheriting event handling capabilities. This provides insight into the class's type hierarchy and basic structure.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare abstract class Browser extends EventEmitter<BrowserEvents>
```

----------------------------------------

TITLE: Defining JSCoverage.start Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition of the JSCoverage.start method, which initiates JavaScript coverage analysis. The method accepts optional configuration parameters to control how coverage is collected and reported.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jscoverage.start.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class JSCoverage {
  start(options?: {
    resetOnNavigation?: boolean;
    reportAnonymousScripts?: boolean;
    includeRawScriptCoverage?: boolean;
    useBlockCoverage?: boolean;
  }): Promise<void>;
}
```

----------------------------------------

TITLE: Coverage.startCSSCoverage Method Signature (TypeScript)
DESCRIPTION: Defines the signature for the `startCSSCoverage` method within the `Coverage` class. This method is used to begin collecting CSS coverage data. It accepts an optional `CSSCoverageOptions` object to configure the coverage behavior and returns a Promise that resolves when coverage has started.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.coverage.startcsscoverage.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Coverage {
  startCSSCoverage(options?: CSSCoverageOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Frame.$$eval Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the Frame.$$eval method signature. The method is generic and accepts a selector, page function, and optional arguments to evaluate elements matching the selector within a frame.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.__eval.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  $$eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<
      Array<NodeFor<Selector>>,
      Params
    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
  >(
    selector: Selector,
    pageFunction: string | Func,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Click Element and Wait for Navigation (Puppeteer/TypeScript)
DESCRIPTION: This snippet demonstrates the recommended pattern in TypeScript for clicking an element that triggers a navigation event and waiting for the navigation to complete. It uses Promise.all to execute the click and the navigation wait concurrently, preventing potential race conditions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.click.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  page.click(selector, clickOptions),
]);
```

----------------------------------------

TITLE: Defining the SnapshotOptions Interface (TypeScript)
DESCRIPTION: The `SnapshotOptions` interface in TypeScript defines the structure for configuration options used when generating an accessibility tree snapshot in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.snapshotoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface SnapshotOptions
```

----------------------------------------

TITLE: Defining ResponseForRequest Interface in TypeScript
DESCRIPTION: This code snippet defines the ResponseForRequest interface in TypeScript. It includes properties for body, contentType, headers, and status, which are used to construct a response for a request in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.responseforrequest.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ResponseForRequest
```

----------------------------------------

TITLE: Creating a Locator by Selector in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `Page.locator` method overload that accepts a selector string. It creates a `Locator` instance bound to elements matching the provided selector, supporting CSS, text, a11y, xpath, and prefixed selector syntaxes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.locator.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  locator<Selector extends string>(
    selector: Selector,
  ): Locator<NodeFor<Selector>>;
}
```

----------------------------------------

TITLE: Defining MouseButton Enum in TypeScript
DESCRIPTION: Defines the `MouseButton` variable as a `Readonly` object containing valid mouse button string values. This enum is used to specify which mouse button is pressed in various Puppeteer actions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mousebutton.md#_snippet_0

LANGUAGE: typescript
CODE:
```
MouseButton: Readonly<{
  Left: 'left';
  Right: 'right';
  Middle: 'middle';
  Back: 'back';
  Forward: 'forward';
}>;
```

----------------------------------------

TITLE: Defining Puppeteer DownloadBehavior Interface - TypeScript
DESCRIPTION: This code snippet defines the basic structure of the `DownloadBehavior` interface in TypeScript, which is used to configure download settings in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.downloadbehavior.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface DownloadBehavior
```

----------------------------------------

TITLE: Using ElementHandle with Page.evaluate()
DESCRIPTION: This snippet demonstrates how to pass ElementHandle instances (including JSHandles) as arguments to the pageFunction in Page.evaluate(). It shows how to evaluate a function that uses the passed handle and then dispose of it.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluate.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const bodyHandle = await page.$('body');
const html = await page.evaluate(body => body.innerHTML, bodyHandle);
await bodyHandle.dispose();
```

----------------------------------------

TITLE: Print Browser Logs on Launch (TypeScript)
DESCRIPTION: Launches a Puppeteer browser instance with the `dumpio` option set to `true`. This forwards the browser process's standard output and standard error streams to the Node.js process's stdio, which is useful for debugging browser crashes or launch issues.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_12

LANGUAGE: TypeScript
CODE:
```
const browser = await puppeteer.launch({
  dumpio: true,
});
```

----------------------------------------

TITLE: Defining Page.createPDFStream Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `createPDFStream` method within the `Page` class. It indicates that the method is abstract, accepts an optional `PDFOptions` object, and returns a Promise that resolves to a `ReadableStream` of `Uint8Array`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.createpdfstream.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract createPDFStream(
    options?: PDFOptions,
  ): Promise<ReadableStream<Uint8Array>>;
}
```

----------------------------------------

TITLE: Get Browser Executable Path (TypeScript)
DESCRIPTION: The `executablePath()` method is an abstract method within the `BrowserLauncher` class that returns the file path to the browser executable. It can optionally take a `channel` parameter to specify a Chrome release channel and a `validatePath` boolean to control path validation. It returns a string representing the executable path.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browserlauncher.executablepath.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserLauncher {
  abstract executablePath(
    channel?: ChromeReleaseChannel,
    validatePath?: boolean,
  ): string;
}
```

----------------------------------------

TITLE: Enable Puppeteer Debug Logging with Filtering (Bash)
DESCRIPTION: Sets `DEBUG` to `puppeteer:*` and `DEBUG_COLORS` to `true`, then runs the script. It redirects standard error to standard output (`2>&1`) and pipes the output to `grep -v '"Network'`, which filters out lines containing `"Network"`, effectively removing Network domain protocol messages from the log.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_9

LANGUAGE: Bash
CODE:
```
env DEBUG="puppeteer:*" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '"Network'
```

----------------------------------------

TITLE: Signature of Page.emulateIdleState method in TypeScript
DESCRIPTION: Defines the abstract signature for the `emulateIdleState` method within the `Page` class, showing its optional `overrides` parameter and `Promise<void>` return type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulateidlestate.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateIdleState(overrides?: {
    isUserActive: boolean;
    isScreenUnlocked: boolean;
  }): Promise<void>;
}
```

----------------------------------------

TITLE: Signature for Page.setExtraHTTPHeaders in Puppeteer
DESCRIPTION: Defines the abstract signature for the `setExtraHTTPHeaders` method within the Puppeteer `Page` class. This method accepts an object of string key-value pairs representing HTTP headers and returns a Promise that resolves when the headers are set.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setextrahttpheaders.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setExtraHTTPHeaders(headers: Record<string, string>): Promise<void>;
}
```

----------------------------------------

TITLE: Define FlattenHandle Type (TypeScript)
DESCRIPTION: Defines the `FlattenHandle` TypeScript type. This is a utility type that uses conditional types and type inference (`infer U`) to extract the underlying type `U` from a type `T` if `T` extends `HandleOr<U>`. Otherwise, it resolves to `never`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.flattenhandle.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type FlattenHandle<T> = T extends HandleOr<infer U> ? U : never;
```

----------------------------------------

TITLE: Passing Arguments to waitForFunction Predicate (Puppeteer, Node.js)
DESCRIPTION: Shows how to pass variables from the Node.js environment into the function executed within the browser context by `frame.waitForFunction`. The arguments are passed after the options object. Requires Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.waitforfunction.md#_snippet_2

LANGUAGE: ts
CODE:
```
const selector = '.foo';
await frame.waitForFunction(
  selector => !!document.querySelector(selector),
  {}, // empty options object
  selector,
);
```

----------------------------------------

TITLE: Awaiting Promise Returned from Puppeteer Evaluate (TypeScript)
DESCRIPTION: Explains that Puppeteer automatically awaits promises returned by the JavaScript function executed via `page.evaluate`. The Node.js execution will pause until the promise in the page context resolves.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/javascript-execution.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
await page.evaluate(() => {
  // wait for 100ms.
  return new Promise(resolve => setTimeout(resolve, 100));
});
// Execution continues here once the Promise created in the page context resolves.
```

----------------------------------------

TITLE: Updating NSS Library on CentOS Bash
DESCRIPTION: This command uses the `yum` package manager with the `-y` flag to update the `nss` (Network Security Services) library on a CentOS system. An up-to-date `nss` library is often required for Chrome to function correctly.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_7

LANGUAGE: bash
CODE:
```
yum update nss -y
```

----------------------------------------

TITLE: Basic Cooperative Intercept Mode Implementation in Puppeteer
DESCRIPTION: Simple upgrade to use Cooperative Intercept Mode by adding priority parameters to the abort() and continue() methods with a default priority of 0.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/network-interception.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
page.on('request', interceptedRequest => {
  if (request.isInterceptResolutionHandled()) return;
  if (
    interceptedRequest.url().endsWith('.png') ||
    interceptedRequest.url().endsWith('.jpg')
  )
    interceptedRequest.abort('failed', 0);
  else
    interceptedRequest.continue(
      interceptedRequest.continueRequestOverrides(),
      0,
    );
});
```

----------------------------------------

TITLE: Signature of Page.pdf() Method (TypeScript)
DESCRIPTION: This TypeScript snippet shows the abstract signature of the 'pdf' method within the 'Page' class. It indicates the method accepts an optional 'PDFOptions' object and returns a Promise resolving to a 'Uint8Array', representing the generated PDF data.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.pdf.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract pdf(options?: PDFOptions): Promise<Uint8Array>;
}
```

----------------------------------------

TITLE: Stopping Tracing in Puppeteer (TypeScript)
DESCRIPTION: Stops the tracing session initiated by `Tracing.start()`. It returns a Promise that resolves with a `Uint8Array` containing the trace data, or `undefined` if no trace was active.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.tracing.stop.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Tracing {
  stop(): Promise<Uint8Array | undefined>;
}
```

----------------------------------------

TITLE: Retrieving Browser User Agent - TypeScript Implementation
DESCRIPTION: Abstract class method declaration for retrieving the browser's original user agent string. Returns a Promise that resolves to a string containing the user agent value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.useragent.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract userAgent(): Promise<string>;
}
```

----------------------------------------

TITLE: Download Browser Archive (TypeScript)
DESCRIPTION: Downloads the browser archive according to the provided InstallOptions without unpacking it. This signature is used when the `unpack` option is explicitly set to false. It returns a Promise that resolves with the absolute path to the downloaded archive file.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.install.md#_snippet_1

LANGUAGE: typescript
CODE:
```
export declare function install(
  options: InstallOptions & {
    unpack: false;
  },
): Promise<string>;
```

----------------------------------------

TITLE: Declaring SecurityDetails Class in TypeScript
DESCRIPTION: Type declaration for the SecurityDetails class that represents security details of secure responses. This class provides methods to access certificate information and security protocols.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class SecurityDetails
```

----------------------------------------

TITLE: Method Signature: Frame.evaluate (TypeScript)
DESCRIPTION: Defines the signature for the Frame.evaluate method within the Puppeteer Frame class. It accepts a function or string to be evaluated in the frame's context and optional arguments, returning a Promise resolving to the result of the evaluation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.evaluate.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Defining Mouse.click Method in Puppeteer TypeScript API
DESCRIPTION: TypeScript signature for the Mouse.click() method which allows simulating mouse clicks at specific coordinates. The method takes x and y coordinates along with optional configuration options and returns a Promise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.click.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract click(
    x: number,
    y: number,
    options?: Readonly<MouseClickOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Page.click Method Signature in TypeScript
DESCRIPTION: Definition of the click method in the Page class, showing its parameters and return type. It accepts a selector string and optional click options and returns a Promise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.click.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Interface Definition for FrameAddStyleTagOptions in TypeScript
DESCRIPTION: Defines the FrameAddStyleTagOptions interface which specifies the options for adding a style tag to a frame in Puppeteer. It provides different ways to inject CSS: through raw content, a file path, or a URL.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frameaddstyletagoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface FrameAddStyleTagOptions
```

----------------------------------------

TITLE: Get All Active Targets - Puppeteer Browser - TypeScript
DESCRIPTION: Retrieves all active targets managed by the browser instance, including those in different browser contexts. The method returns an array of Target objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.targets.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract targets(): Target[];
}
```

----------------------------------------

TITLE: Defining Target.browserContext Method in TypeScript
DESCRIPTION: Abstract method definition for retrieving the browser context associated with a target. The method returns a BrowserContext instance that represents the context in which the target operates.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.browsercontext.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract browserContext(): BrowserContext;
}
```

----------------------------------------

TITLE: TypeScript Signature for Page.evaluateOnNewDocument
DESCRIPTION: Displays the TypeScript signature of the `Page.evaluateOnNewDocument` method, detailing its generic parameters (`Params`, `Func`), the types for the `pageFunction` and `args` parameters, and the `Promise<NewDocumentScriptEvaluation>` return type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.evaluateonnewdocument.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract evaluateOnNewDocument<
    Params extends unknown[],
    Func extends (...args: Params) => unknown = (...args: Params) => unknown,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<NewDocumentScriptEvaluation>;
}
```

----------------------------------------

TITLE: Defining the Page.setExtraHTTPHeaders method signature in TypeScript
DESCRIPTION: The TypeScript signature of the setExtraHTTPHeaders method in the Page class. It takes a record of string key-value pairs representing HTTP headers and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setextrahttpheaders.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setExtraHTTPHeaders(headers: Record<string, string>): Promise<void>;
}
```

----------------------------------------

TITLE: Connecting to Browser Instance Puppeteer-Core Browser TypeScript
DESCRIPTION: This snippet demonstrates how to import the browser-specific Puppeteer build (`puppeteer-core-browser.js`) and connect to an existing browser instance using a WebSocket endpoint (`wsUrl`). It then retrieves and displays the number of open pages before disconnecting. Requires `puppeteer-core` and an active browser instance with a WebSocket endpoint.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/running-puppeteer-in-the-browser.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import puppeteer from 'puppeteer-core/lib/esm/puppeteer/puppeteer-core-browser.js';

const browser = await puppeteer.connect({
  browserWSEndpoint: wsUrl,
});

alert('Browser has ' + (await browser.pages()).length + ' pages');

browser.disconnect();
```

----------------------------------------

TITLE: Updating NSS Library on CentOS
DESCRIPTION: After installing dependencies on CentOS, run this command with root privileges to update the Network Security Services (NSS) library, which is sometimes required for Chrome to function correctly.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_6

LANGUAGE: bash
CODE:
```
yum update nss -y
```

----------------------------------------

TITLE: Puppeteer Page.$eval Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the Page.$eval method, showing its generic type parameters and function arguments. It accepts a selector, a function to evaluate, and optional additional arguments.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page._eval.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  $eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
      NodeFor<Selector>,
      Params
    >,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Stop JavaScript Coverage - Puppeteer Coverage (TypeScript)
DESCRIPTION: Stops JavaScript coverage collection and resolves with an array of coverage reports for all scripts. Note that anonymous scripts are not included by default, but scripts with sourceURLs are reported.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.coverage.stopjscoverage.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Coverage {
  stopJSCoverage(): Promise<JSCoverageEntry[]>;
}
```

----------------------------------------

TITLE: ElementHandle.select Method Signature (TypeScript)
DESCRIPTION: Provides the TypeScript signature for the `ElementHandle.select` method, indicating it accepts a variable number of string arguments (`values`) representing option values to select and returns a `Promise` that resolves to an array of strings.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.select.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  select(...values: string[]): Promise<string[]>;
}
```

----------------------------------------

TITLE: Checking JavaScript Status with Page.isJavaScriptEnabled in TypeScript
DESCRIPTION: Method signature for isJavaScriptEnabled in the Page class which returns a boolean value indicating whether JavaScript is enabled on the current page. Returns true if JavaScript is enabled, false otherwise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.isjavascriptenabled.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract isJavaScriptEnabled(): boolean;
}
```

----------------------------------------

TITLE: Defining TargetType Enum in TypeScript - Puppeteer
DESCRIPTION: TypeScript enumeration that defines the various types of targets that can be controlled via Puppeteer. Includes target types such as background pages, browser instances, service workers, shared workers, webviews, and other general targets.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.targettype.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare enum TargetType
```

----------------------------------------

TITLE: Puppeteer Browser.waitForTarget Method Signature (TypeScript)
DESCRIPTION: Defines the signature for the waitForTarget method on the Browser class in Puppeteer. It takes a predicate function to match targets and optional options, returning a Promise resolving to the matched Target.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.waitfortarget.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  waitForTarget(
    predicate: (x: Target) => boolean | Promise<boolean>,
    options?: WaitForTargetOptions,
  ): Promise<Target>;
}
```

----------------------------------------

TITLE: Returning Mapped Values from Puppeteer Locator
DESCRIPTION: Illustrates using the map() function with a Puppeteer locator to transform the located element into a JavaScript value. Calling wait() on the mapped locator returns the deserialized value instead of the element itself.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const enabled = await page
  .locator('button')
  .map(button => !button.disabled)
  .wait();
```

----------------------------------------

TITLE: Defining Page.waitForNetworkIdle Method in TypeScript
DESCRIPTION: TypeScript method signature for the Page.waitForNetworkIdle method, which waits for the network to be idle. The method accepts optional WaitForNetworkIdleOptions parameters to configure waiting behavior and returns a Promise that resolves once the network is idle.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitfornetworkidle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  waitForNetworkIdle(options?: WaitForNetworkIdleOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Getting Page Viewport Settings - Puppeteer - TypeScript
DESCRIPTION: Retrieves the current viewport settings for a Puppeteer Page instance. This method returns the settings previously configured via `Page.setViewport()` or the default viewport specified in `ConnectOptions.defaultViewport`, without querying the actual browser page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.viewport.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract viewport(): Viewport | null;
}
```

----------------------------------------

TITLE: Signature for WebWorker.evaluateHandle Method (TypeScript)
DESCRIPTION: Defines the TypeScript signature for the evaluateHandle method within the WebWorker class, showing its generic types, parameters (function or string and arguments), and the promise-wrapped HandleFor return type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.webworker.evaluatehandle.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class WebWorker {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    func: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}
```

----------------------------------------

TITLE: Setting WaitForEnabled Option on Puppeteer Locator (TypeScript)
DESCRIPTION: This method signature shows how to call setWaitForEnabled on a Puppeteer Locator instance. It takes a boolean value to determine if actions should wait for the element to be enabled and returns a new Locator instance with the updated setting.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.setwaitforenabled.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Locator {
  setWaitForEnabled<NodeType extends Node>(
    this: Locator<NodeType>,
    value: boolean,
  ): Locator<NodeType>;
}
```

----------------------------------------

TITLE: Specifying Return Type for Page.$$eval in TypeScript
DESCRIPTION: Example showing how the compiler infers the return type from the provided page function. This demonstrates extracting text content from all input elements on a page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.__eval.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
const allInputValues = await page.$$eval('input', elements =>
  elements.map(e => e.textContent),
);
```

----------------------------------------

TITLE: Bundling Puppeteer-in-Browser App Rollup JavaScript
DESCRIPTION: This Rollup configuration example shows how to set up a build process for a Puppeteer application intended to run in the browser. It utilizes `@rollup/plugin-node-resolve` to correctly handle dependencies, targets an ES Module output format, and is configured to include only `puppeteer-core` while excluding dependencies like `chromium-bidi` to minimize the bundle size. Requires Rollup and the `@rollup/plugin-node-resolve` plugin.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/running-puppeteer-in-the-browser.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import {nodeResolve} from '@rollup/plugin-node-resolve';

export default {
  input: 'main.mjs',
  output: {
    format: 'esm',
    dir: 'out',
  },
  // If you do not need to use WebDriver BiDi protocol,
  // exclude chromium-bidi/lib/* to minimize the bundle size.
  external: ['chromium-bidi/*'],
  plugins: [
    nodeResolve({
      // Indicate that we target a browser environment.
      browser: true,
      // Exclude any dependencies except for puppeteer-core.
      // `npm install puppeteer-core` # To install puppeteer-core if needed.
      resolveOnly: ['puppeteer-core'],
    }),
  ],
};
```

----------------------------------------

TITLE: Declaring the ConsoleMessage Class in TypeScript
DESCRIPTION: This snippet shows the TypeScript declaration signature for the ConsoleMessage class in Puppeteer. It indicates that the class is exported and declared, but its constructor is internal and should not be called directly by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.consolemessage.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare class ConsoleMessage
```

----------------------------------------

TITLE: Page.type Usage Examples in TypeScript
DESCRIPTION: Examples showing how to use Page.type() method with and without delay options. Demonstrates both instant typing and slower typing that simulates user behavior.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.type.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
await page.type('#mytextarea', 'Hello');
// Types instantly
await page.type('#mytextarea', 'World', {delay: 100});
// Types slower, like a user
```

----------------------------------------

TITLE: Example Usage of Page.waitForNavigation - TypeScript
DESCRIPTION: Demonstrates how to use Promise.all to wait for both an action (clicking a link) and the subsequent page navigation to complete using page.waitForNavigation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitfornavigation.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const [response] = await Promise.all([
  page.waitForNavigation(), // The promise resolves after navigation has finished
  page.click('a.my-link'), // Clicking the link will indirectly cause a navigation
]);
```

----------------------------------------

TITLE: ChromeHeadlessShellSettings Interface Definition in TypeScript
DESCRIPTION: Defines the TypeScript interface for ChromeHeadlessShellSettings used to configure Chrome Headless Shell in Puppeteer. This interface includes optional properties for controlling download behavior, browser version selection, and download source URLs.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.chromeheadlessshellsettings.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ChromeHeadlessShellSettings
```

----------------------------------------

TITLE: Defining ChromeReleaseChannel Type in TypeScript
DESCRIPTION: TypeScript type definition specifying the valid Chrome release channels that can be used in Puppeteer. Includes 'chrome' (stable), 'chrome-beta', 'chrome-canary', and 'chrome-dev' as possible values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.chromereleasechannel.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type ChromeReleaseChannel =
  | 'chrome'
  | 'chrome-beta'
  | 'chrome-canary'
  | 'chrome-dev';
```

----------------------------------------

TITLE: Defining HTTPResponse.json Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `json()` method of the `HTTPResponse` class in Puppeteer. It indicates that the method returns a Promise that resolves to a value of type `any`, representing the parsed JSON body.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.json.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  json(): Promise<any>;
}
```

----------------------------------------

TITLE: Defining WaitForNetworkIdleOptions Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition for the `WaitForNetworkIdleOptions` interface. It extends the `WaitTimeoutOptions` interface, inheriting its properties, and is used to configure parameters for waiting until the network is idle.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.waitfornetworkidleoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface WaitForNetworkIdleOptions extends WaitTimeoutOptions
```

----------------------------------------

TITLE: Defining AutofillData Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for AutofillData that contains credit card information structure. The interface is used for automating form filling with credit card details including card number, name, expiry date, and CVC.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.autofilldata.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface AutofillData
```

----------------------------------------

TITLE: ElementHandle.press Method Signature in TypeScript
DESCRIPTION: Defines the ElementHandle.press method signature which takes a key input and optional press options. This method focuses an element and then simulates pressing and releasing a specified keyboard key.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.press.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  press(key: KeyInput, options?: Readonly<KeyPressOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Getting Property with Generic Key Puppeteer Typescript
DESCRIPTION: Fetches a single property from the referenced object using a generic key type `K` which extends `keyof T` for type safety. It takes a `propertyName` of type `HandleOr<K>` and returns a `Promise` resolving to a `HandleFor<T[K]>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.getproperty.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  getProperty<K extends keyof T>(
    propertyName: HandleOr<K>,
  ): Promise<HandleFor<T[K]>>;
}
```

----------------------------------------

TITLE: Defining ActionResult Type in TypeScript for Puppeteer
DESCRIPTION: Defines the ActionResult type as a string union type with three possible values that control how intercepted network requests are handled: 'continue' allows the request to proceed normally, 'abort' cancels the request, and 'respond' provides a custom response.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.actionresult.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type ActionResult = 'continue' | 'abort' | 'respond';
```

----------------------------------------

TITLE: Declaring DeviceRequestPrompt Class in TypeScript
DESCRIPTION: TypeScript class declaration for DeviceRequestPrompt, which is used to handle device request prompts in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestprompt.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class DeviceRequestPrompt
```

----------------------------------------

TITLE: Method Signature for Browser.deleteCookie in TypeScript
DESCRIPTION: The TypeScript signature for the deleteCookie method in the Browser class. It takes one or more Cookie objects as arguments and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.deletecookie.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  deleteCookie(...cookies: Cookie[]): Promise<void>;
}
```

----------------------------------------

TITLE: Example usage of Frame.select (TypeScript)
DESCRIPTION: Demonstrates how to use the `Frame.select` method for both single and multiple value selections on a <select> element identified by a CSS selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.select.md#_snippet_1

LANGUAGE: typescript
CODE:
```
frame.select('select#colors', 'blue'); // single selection
frame.select('select#colors', 'red', 'green', 'blue'); // multiple selections
```

----------------------------------------

TITLE: Getting BrowserContext from Target (TypeScript)
DESCRIPTION: Retrieves the BrowserContext instance associated with the current Target. This method is part of the Puppeteer Target class and returns a BrowserContext object, allowing access to context-specific operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.target.browsercontext.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract browserContext(): BrowserContext;
}
```

----------------------------------------

TITLE: Launching Puppeteer with Custom Chrome Path in TypeScript
DESCRIPTION: This snippet demonstrates how to launch Puppeteer with a custom Chrome executable path. It's useful when you want to use a different version of Chrome or Chromium with Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/configuration.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});
```

----------------------------------------

TITLE: Defining Page.setCacheEnabled() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.setCacheEnabled() method. It is an abstract method in the Page class that takes an optional boolean parameter and returns a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setcacheenabled.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setCacheEnabled(enabled?: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Defining KeyDownOptions Interface (TypeScript)
DESCRIPTION: This snippet defines the structure of the `KeyDownOptions` interface in TypeScript, which is part of the Puppeteer library. It specifies the contract for options used when simulating a key down event.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keydownoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface KeyDownOptions
```

----------------------------------------

TITLE: Defining WebWorker.close() Method in TypeScript
DESCRIPTION: This code snippet defines the close() method for the WebWorker class. The method returns a Promise that resolves to void, indicating the asynchronous nature of closing a web worker.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.close.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class WebWorker {
  close(): Promise<void>;
}
```

----------------------------------------

TITLE: Implementing hasPostData Method in TypeScript
DESCRIPTION: Abstract method definition for checking if an HTTP request contains POST data. Returns a boolean indicating whether the request has POST data, though the actual data might need to be accessed through postData() or fetchPostData() methods if it's too long or not readily available in decoded form.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.haspostdata.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract hasPostData(): boolean;
}
```

----------------------------------------

TITLE: Defining Browser.disconnect Method in TypeScript
DESCRIPTION: The TypeScript signature for the Browser.disconnect() method which disconnects Puppeteer from a browser while leaving the process running. The method returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.disconnect.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract disconnect(): Promise<void>;
}
```

----------------------------------------

TITLE: Adding HTMLStyleElement to a Frame in Puppeteer (TypeScript)
DESCRIPTION: Method signature for adding an inline style element to a frame. This overload takes options without a URL property and returns a Promise that resolves to an ElementHandle for the created HTMLStyleElement.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.addstyletag.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  addStyleTag(
    options: Omit<FrameAddStyleTagOptions, 'url'>,
  ): Promise<ElementHandle<HTMLStyleElement>>;
}
```

----------------------------------------

TITLE: HTTPRequest.responseForRequest() Method Signature (TypeScript)
DESCRIPTION: Provides the TypeScript signature for the `responseForRequest` method of the `HTTPRequest` class. This method returns a `Partial<ResponseForRequest>` object or null, indicating the response that would be used if the request interception is not aborted.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.responseforrequest.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  responseForRequest(): Partial<ResponseForRequest> | null;
}
```

----------------------------------------

TITLE: Implementing HTTPRequest.headers method in TypeScript for Puppeteer
DESCRIPTION: Abstract method definition for retrieving HTTP headers associated with a request. This method returns all header names in lowercase as a Record<string, string> object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.headers.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract headers(): Record<string, string>;
}
```

----------------------------------------

TITLE: Insert Debugger in Server Code (TS/JS)
DESCRIPTION: Inserts a `debugger` statement directly into the Node.js script. When the script is run with the `--inspect-brk` flag and connected via Chrome DevTools, execution will pause at this point, allowing for debugging of the server-side logic.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/debugging.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
debugger;
await page.click('a[target=_blank]');
```

----------------------------------------

TITLE: Retrieving Stack Trace Information from Console Messages in Puppeteer (TypeScript)
DESCRIPTION: This method allows access to the stack trace information of console messages in Puppeteer. It returns an array of ConsoleMessageLocation objects that represent the locations on the stack when the console message was generated.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.stacktrace.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ConsoleMessage {
  stackTrace(): ConsoleMessageLocation[];
}
```

----------------------------------------

TITLE: Building Puppeteer Docker Image
DESCRIPTION: Command to build the Docker image defined by the Dockerfile in the current directory, tagging it as 'puppeteer-chrome-linux'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_16

LANGUAGE: bash
CODE:
```
docker build -t puppeteer-chrome-linux .
```

----------------------------------------

TITLE: Puppeteer Legacy Intercept Mode - Immediate Continue (TS)
DESCRIPTION: This example illustrates Puppeteer's Legacy Intercept Mode. Despite one handler voting to abort with priority, another handler resolving without priority triggers Legacy Mode. The second handler's continue resolution takes effect immediately, overriding the cooperative abort vote.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
// Final outcome: immediate continue()
page.setRequestInterception(true);
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to abort at priority 0.
  request.abort('failed', 0);
});
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Control reaches this point because the request was cooperatively aborted which postpones resolution.

  // { action: InterceptResolutionAction.Abort, priority: 0 }, because abort @ 0 is the current winning resolution
  console.log(request.interceptResolutionState());

  // Legacy Mode: intercept continues immediately.
  request.continue({});
});
page.on('request', request => {
  // { action: InterceptResolutionAction.AlreadyHandled }, because continue in Legacy Mode was called
  console.log(request.interceptResolutionState());
});
```

----------------------------------------

TITLE: Signature of Page.authenticate Method (TypeScript)
DESCRIPTION: Defines the abstract signature for the `authenticate` method within the `Page` class in TypeScript. It accepts either `Credentials` or `null` as a parameter and returns a `Promise<void>`. Passing `null` disables authentication.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.authenticate.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract authenticate(credentials: Credentials | null): Promise<void>;
}
```

----------------------------------------

TITLE: Defining TimeoutError Class in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the TimeoutError class, which extends PuppeteerError. It is used to represent timeout errors in Puppeteer operations such as page.waitForSelector or puppeteer.launch.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.timeouterror.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class TimeoutError extends PuppeteerError
```

----------------------------------------

TITLE: Defining Target.browser() Method in TypeScript
DESCRIPTION: This code snippet defines the browser() method in the Target class. The method returns a Browser object, allowing access to the browser instance associated with the target.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.browser.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract browser(): Browser;
}
```

----------------------------------------

TITLE: Get Browser from BrowserContext (TypeScript)
DESCRIPTION: This snippet shows the signature of the `browser()` method within the `BrowserContext` class. This method is used to retrieve the `Browser` instance that created or is associated with the current `BrowserContext`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.browser.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract browser(): Browser;
}
```

----------------------------------------

TITLE: Defining defaultArgs Function Signature in TypeScript
DESCRIPTION: The function signature for defaultArgs which takes optional LaunchOptions and returns an array of strings representing command line arguments for Chrome/Chromium.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.defaultargs.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
defaultArgs: (options?: PuppeteerCore.LaunchOptions) => string[]
```

----------------------------------------

TITLE: Define Page.emulateCPUThrottling Method Signature - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `emulateCPUThrottling` method within the `Page` class. It defines the method as abstract, taking a single parameter `factor` of type `number | null` and returning a `Promise<void>`. The `factor` parameter controls the slowdown multiplier for CPU throttling.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulatecputhrottling.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateCPUThrottling(factor: number | null): Promise<void>;
}
```

----------------------------------------

TITLE: Defining ErrorCode Type Enum in TypeScript for Puppeteer
DESCRIPTION: This TypeScript declaration defines the ErrorCode type as a union of string literals representing various network and connection error states that can occur during Puppeteer operations. It includes common errors like timeouts, connection failures, and access restrictions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.errorcode.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type ErrorCode =
  | 'aborted'
  | 'accessdenied'
  | 'addressunreachable'
  | 'blockedbyclient'
  | 'blockedbyresponse'
  | 'connectionaborted'
  | 'connectionclosed'
  | 'connectionfailed'
  | 'connectionrefused'
  | 'connectionreset'
  | 'internetdisconnected'
  | 'namenotresolved'
  | 'timedout'
  | 'failed';
```

----------------------------------------

TITLE: Checking if a Puppeteer Page is Closed (TypeScript)
DESCRIPTION: This method indicates whether a Puppeteer `Page` instance has been closed. It returns a boolean value: `true` if the page is closed, `false` otherwise. This is useful for checking the state of a page before attempting further operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.isclosed.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract isClosed(): boolean;
}
```

----------------------------------------

TITLE: Example Usage of Page.waitForDevicePrompt in TypeScript
DESCRIPTION: An example demonstrating how to use the waitForDevicePrompt method to handle device selection. It shows waiting for a device prompt while clicking a button, then selecting a specific device based on its name.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitfordeviceprompt.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
const [devicePrompt] = Promise.all([
  page.waitForDevicePrompt(),
  page.click('#connect-bluetooth'),
]);
await devicePrompt.select(
  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),
);
```

----------------------------------------

TITLE: Setting Page Geolocation Method Signature in TypeScript
DESCRIPTION: The TypeScript signature of the Page.setGeolocation method, which defines how to set a page's geolocation in Puppeteer. It accepts a GeolocationOptions object and returns a Promise that resolves when the operation completes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setgeolocation.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setGeolocation(options: GeolocationOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Signature of Puppeteer launch function - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `launch()` function in Puppeteer. It indicates that the function is asynchronous, takes an optional `LaunchOptions` object, and returns a Promise that resolves to a `Browser` instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.launch.md#_snippet_0

LANGUAGE: typescript
CODE:
```
launch: (options?: PuppeteerCore.LaunchOptions) =>
  Promise<PuppeteerCore.Browser>;
```

----------------------------------------

TITLE: Dismissing a Puppeteer Dialog (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the Dialog.dismiss() method in Puppeteer. It indicates that the method is part of the Dialog class and returns a Promise<void> that resolves when the dialog is successfully dismissed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.dialog.dismiss.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Dialog {
  dismiss(): Promise<void>;
}
```

----------------------------------------

TITLE: Frame page() Method Signature (TypeScript)
DESCRIPTION: Defines the abstract signature for the `page()` method within the `Frame` class. This method is intended to return the `Page` object associated with the frame instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.page.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  abstract page(): Page;
}
```

----------------------------------------

TITLE: Skipping a Specific Puppeteer Test using Mocha in TypeScript
DESCRIPTION: Shows how to use Mocha's `it.skip` function to prevent a specific test case from running. The test logic remains but will be ignored by the test runner. This example structure mirrors a typical test using `getTestState` and performing a page navigation and assertion.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
  ...
  it.skip('should work', async function({server, page}) {
    const {server, page} = await getTestState();
    const response = await page.goto(server.EMPTY_PAGE);
    expect(response.ok).toBe(true);
  });
```

----------------------------------------

TITLE: Downloading Browser Archive Without Unpacking in Puppeteer (TypeScript)
DESCRIPTION: This function downloads a browser archive according to the provided InstallOptions without unpacking it. It returns a Promise that resolves to a string representing the absolute path to the downloaded archive.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.install.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
export declare function install(
  options: InstallOptions & {
    unpack: false;
  },
): Promise<string>;
```

----------------------------------------

TITLE: Focusing a Specific Puppeteer Test using Mocha in TypeScript
DESCRIPTION: Illustrates how to use Mocha's `it.only` function to exclusively run a single test case within a suite. This example shows an asynchronous test function that uses `getTestState` to access the test server and Puppeteer page, navigates to an empty page, and asserts that the response is successful using the `expect` library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
  ...
  it.only('should work', async function() {
    const {server, page} = await getTestState();
    const response = await page.goto(server.EMPTY_PAGE);
    expect(response.ok).toBe(true);
  });
```

----------------------------------------

TITLE: Implementing Keyboard.up Method in TypeScript
DESCRIPTION: Abstract method definition for handling keyboard key release events in Puppeteer. Takes a KeyInput parameter representing the key to release and returns a Promise that resolves when the key up event is dispatched.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.up.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Keyboard {
  abstract up(key: KeyInput): Promise<void>;
}
```

----------------------------------------

TITLE: CustomQueryHandler Interface Definition - TypeScript
DESCRIPTION: Defines the `CustomQueryHandler` interface in Puppeteer, which is used to register custom query handlers for element selection. Implementations must provide either `queryOne` or `queryAll` or both.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.customqueryhandler.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface CustomQueryHandler
```

----------------------------------------

TITLE: Page.authenticate Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the authenticate() method in Puppeteer's Page class. This method accepts credentials for HTTP authentication or null to disable authentication.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.authenticate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract authenticate(credentials: Credentials | null): Promise<void>;
}
```

----------------------------------------

TITLE: Defining ElementHandle.scrollIntoView Method in TypeScript
DESCRIPTION: This code snippet defines the scrollIntoView method for the ElementHandle class. The method scrolls the element into view using either the automation protocol client or by calling element.scrollIntoView. It takes no parameters and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.scrollintoview.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  scrollIntoView(this: ElementHandle<Element>): Promise<void>;
}
```

----------------------------------------

TITLE: Defining the Puppeteer.registerCustomQueryHandler Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the static method that registers a custom query handler with a name and handler implementation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.registercustomqueryhandler.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Puppeteer {
  static registerCustomQueryHandler(
    name: string,
    queryHandler: CustomQueryHandler,
  ): void;
}
```

----------------------------------------

TITLE: Defining WebWorker evaluate method in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the `evaluate` method within the `WebWorker` class. It defines the method's generic types for parameters and return value, indicating it accepts a function or string and variable arguments, returning a Promise that resolves to the awaited result of the function.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.webworker.evaluate.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class WebWorker {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(func: Func | string, ...args: Params): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: JSHandle.evaluate TypeScript Method Signature
DESCRIPTION: The TypeScript signature for the evaluate method in the JSHandle class. This method runs a function with the current handle as its first argument and returns a promise with the result of the function.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.evaluate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Implementing ElementHandle.isHidden Method in Typescript
DESCRIPTION: This code shows the signature of the isHidden method in the ElementHandle class. The method returns a Promise resolving to a boolean indicating whether the element is hidden based on computed styles, bounding client rect, and visibility properties.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.ishidden.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  isHidden(): Promise<boolean>;
}
```

----------------------------------------

TITLE: Installing Puppeteer Angular Schematic via Angular CLI
DESCRIPTION: Command to add Puppeteer-based e2e tests to an Angular project using the Angular CLI. This will add the schematic as a dependency to the project.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
ng add @puppeteer/ng-schematics
```

----------------------------------------

TITLE: Express app launch Puppeteer after response on GCR - JS
DESCRIPTION: This JavaScript snippet shows an Express application route where Puppeteer is launched *after* the HTTP response is sent. This pattern causes significant delays on Google Cloud Run because the CPU is disabled by default after the response, making the Puppeteer launch very slow. Requires the `express` and `puppeteer` libraries.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_16

LANGUAGE: javascript
CODE:
```
import express from 'express';

const app = express();

app.post('/test-puppeteer', (req, res) => {
  res.json({
    jobId: 123,
    acknowledged: true,
  });

  puppeteer.launch().then(browser => {
    // 2 minutes later...
  });
});

app.listen(3000);
```

----------------------------------------

TITLE: Setting Frame Content in Puppeteer (Typescript)
DESCRIPTION: Documents the setContent method of the Frame class in Puppeteer. It takes an HTML string and optional WaitForOptions to set the content of the frame. It returns a Promise that resolves when the content is set.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.setcontent.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  abstract setContent(html: string, options?: WaitForOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Continue Request with Priority 15 in Puppeteer
DESCRIPTION: This snippet shows a Puppeteer request handler that votes to continue the request with a priority of 15 in Cooperative Intercept Mode, but only if the resolution hasn't been handled yet. This represents an 'Opinionated continuation'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Cooperative Intercept Mode: votes to continue at priority 15
  request.continue(request.continueRequestOverrides(), 15);
});
```

----------------------------------------

TITLE: Defining BrowserLauncher.defaultArgs Method Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the abstract defaultArgs method in the BrowserLauncher class. It takes a LaunchOptions object as parameter and returns an array of strings representing command-line arguments.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserlauncher.defaultargs.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserLauncher {
  abstract defaultArgs(object: LaunchOptions): string[];
}
```

----------------------------------------

TITLE: Building Puppeteer Tests (VSCode Debugging)
DESCRIPTION: Provides the command necessary to build the Puppeteer test workspace. This step is required before launching the tests using the VSCode integrated debugger, as mentioned in the debugging tips section.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_13

LANGUAGE: bash
CODE:
```
npm run build --workspace @puppeteer-test/test
```

----------------------------------------

TITLE: Changing Directory to Puppeteer Cache Bash
DESCRIPTION: This bash command changes the current working directory to where Puppeteer caches Chrome, typically found in the user's home directory. This is a prerequisite step before interacting with files within the cached browser installation, such as the `chrome_sandbox` executable.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_10

LANGUAGE: bash
CODE:
```
cd ~/.cache/puppeteer/chrome/linux-<version>/chrome-linux64/
```

----------------------------------------

TITLE: Building a Single Package in Watch Mode - npm/Bash
DESCRIPTION: Starts a continuous build process for a specified package. It watches for file changes and automatically rebuilds the package and its dependencies.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm run build --watch --workspace <package> # e.g. puppeteer
```

----------------------------------------

TITLE: Defining Page.setCookie() Method in TypeScript
DESCRIPTION: TypeScript class definition for the Page.setCookie() method which accepts cookie parameters and returns a Promise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setcookie.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setCookie(...cookies: CookieParam[]): Promise<void>;
}
```

----------------------------------------

TITLE: Defining WaitTimeoutOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for WaitTimeoutOptions that specifies configuration options for wait operations in Puppeteer. Includes optional properties for abort signal and timeout duration.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.waittimeoutoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface WaitTimeoutOptions
```

----------------------------------------

TITLE: Get Content Frame (General) (TypeScript)
DESCRIPTION: This general signature of the contentFrame method attempts to resolve the frame associated with any ElementHandle. It returns a Promise that resolves to a Frame object if a frame exists, or null otherwise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.contentframe.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  abstract contentFrame(): Promise<Frame | null>;
}
```

----------------------------------------

TITLE: Closing a Process - Puppeteer - TypeScript
DESCRIPTION: The `close()` method on a Puppeteer `Process` instance is used to terminate the associated process. It returns a Promise that resolves when the process has been successfully closed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.process.close.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Process {
  close(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Page.setBypassCSP Method Signature in TypeScript
DESCRIPTION: TypeScript signature for the Page.setBypassCSP method which toggles bypassing of a page's Content-Security-Policy. The method takes a boolean parameter to enable or disable CSP bypassing and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setbypasscsp.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setBypassCSP(enabled: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Declaring Browser Enum in Puppeteer
DESCRIPTION: Defines the `Browser` enumeration in TypeScript, used within the Puppeteer library to specify supported browser types. This declaration indicates the enum is exported and globally available.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.browser.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare enum Browser
```

----------------------------------------

TITLE: Defining Target Class Signature in TypeScript
DESCRIPTION: This snippet defines the abstract Target class in TypeScript. It represents a CDP target that can be debugged, such as a frame, page, or worker.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Target
```

----------------------------------------

TITLE: Defining the Offset Interface in TypeScript for Puppeteer
DESCRIPTION: TypeScript interface definition for Offset in Puppeteer. It contains x and y number properties that represent coordinates relative to the top-left corner of an element's border box for clickable point positioning.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.offset.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Offset
```

----------------------------------------

TITLE: Defining Point Interface in TypeScript
DESCRIPTION: TypeScript interface definition for a Point type that contains x and y coordinate properties as numbers. Used in Puppeteer for representing 2D coordinates.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.point.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Point
```

----------------------------------------

TITLE: Implementing WebWorker.evaluate Method in TypeScript
DESCRIPTION: TypeScript class definition showing the evaluate method signature for WebWorker class. The method accepts a function or string to evaluate and variable parameters, returning a promise of the function's result. It uses generic types for type safety of parameters and return values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.evaluate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class WebWorker {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(func: Func | string, ...args: Params): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Mouse.wheel Method Signature in Puppeteer TypeScript API
DESCRIPTION: The TypeScript signature for the Mouse.wheel method in Puppeteer. This method dispatches a mousewheel event and takes an optional MouseWheelOptions parameter.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.wheel.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract wheel(options?: Readonly<MouseWheelOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Starting JavaScript Coverage - Puppeteer TypeScript
DESCRIPTION: Initiates the collection of JavaScript code coverage data. This method is asynchronous and returns a Promise that resolves when coverage collection has started. It accepts an optional `JSCoverageOptions` object to configure settings like resetting on navigation, reporting anonymous scripts, including raw coverage, and using block coverage.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.coverage.startjscoverage.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Coverage {
  startJSCoverage(options?: JSCoverageOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Defining HandleOr type in TypeScript
DESCRIPTION: Defines the HandleOr type as a union of HandleFor<T>, JSHandle<T>, or the raw type T. This type is used in Puppeteer functions that can accept either a handle to an object or the object itself.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.handleor.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type HandleOr<T> = HandleFor<T> | JSHandle<T> | T;
```

----------------------------------------

TITLE: Signature Definition for Page.emulateMediaType Method in TypeScript
DESCRIPTION: Defines the method signature for the Page.emulateMediaType method in the Page class. The method allows changing the CSS media type with an optional string parameter.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatemediatype.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateMediaType(type?: string): Promise<void>;
}
```

----------------------------------------

TITLE: Setting Base URL in TypeScript
DESCRIPTION: TypeScript code to set the base URL for E2E tests
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const baseUrl = 'http://localhost:8080';
```

----------------------------------------

TITLE: Adding stylesheet link using Page.addStyleTag in Puppeteer
DESCRIPTION: This signature allows adding a <link> tag that references an external stylesheet. It returns a Promise that resolves to an ElementHandle for the created HTMLLinkElement.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.addstyletag.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class Page {
  addStyleTag(
    options: FrameAddStyleTagOptions,
  ): Promise<ElementHandle<HTMLLinkElement>>;
}
```

----------------------------------------

TITLE: Clipboard Permission Configuration in Puppeteer
DESCRIPTION: Example showing how to configure clipboard API permissions in the browser context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
await browser
  .defaultBrowserContext()
  .overridePermissions('<your origin>', ['clipboard-read', 'clipboard-write']);
```

----------------------------------------

TITLE: Signature of executablePath variable (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `executablePath` variable. It indicates that `executablePath` can be called as a function with different overloads: accepting a `ChromeReleaseChannel`, `LaunchOptions`, or no arguments. In all cases, it returns a string representing the path to the executable.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.executablepath.md#_snippet_0

LANGUAGE: typescript
CODE:
```
executablePath: {
    (channel: PuppeteerCore.ChromeReleaseChannel): string;
    (options: PuppeteerCore.LaunchOptions): string;
    (): string;
}
```

----------------------------------------

TITLE: Removing Event Listener from Puppeteer EventEmitter in TypeScript
DESCRIPTION: The `off()` method on the Puppeteer `EventEmitter` class is used to remove a previously added event listener. It takes the event `type` as the first parameter and an optional `handler` function as the second. If the `handler` is provided, only that specific handler for the given type is removed; otherwise, all handlers for that type might be affected depending on the implementation details not shown here. The method returns `this` to allow for method chaining.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.eventemitter.off.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class EventEmitter {
  off<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler?: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}
```

----------------------------------------

TITLE: Configuring Rollup for Puppeteer Extension Build - JavaScript
DESCRIPTION: Provides an example Rollup configuration for bundling a Chrome extension that uses Puppeteer-core. It sets up input and output, specifies external dependencies, and configures the `nodeResolve` plugin to target a browser environment and resolve only `puppeteer-core`. This config helps create a browser-compatible bundle.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/running-puppeteer-in-extensions.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import {nodeResolve} from '@rollup/plugin-node-resolve';

export default {
  input: 'main.mjs',
  output: {
    format: 'esm',
    dir: 'out',
  },
  // If you do not need to use WebDriver BiDi protocol,
  // exclude chromium-bidi/lib/* to minimize the bundle size.
  external: ['chromium-bidi/*'],
  plugins: [
    nodeResolve({
      // Indicate that we target a browser environment.
      browser: true,
      // Exclude any dependencies except for puppeteer-core.
      // `npm install puppeteer-core` # To install puppeteer-core if needed.
      resolveOnly: ['puppeteer-core'],
    }),
  ],
};
```

----------------------------------------

TITLE: Initializing CDP Session Method in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for creating a Chrome DevTools Protocol session attached to a page. Returns a Promise that resolves to a CDPSession object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.createcdpsession.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract createCDPSession(): Promise<CDPSession>;
}
```

----------------------------------------

TITLE: Defining Page.createCDPSession Signature (Typescript)
DESCRIPTION: This Typescript code snippet shows the abstract signature for the createCDPSession method within the Page class. It indicates that calling this method returns a Promise that resolves to a CDPSession object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.createcdpsession.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract createCDPSession(): Promise<CDPSession>;
}
```

----------------------------------------

TITLE: Defining FileChooser.isMultiple Method in TypeScript
DESCRIPTION: TypeScript class definition showing the isMultiple() method signature in the FileChooser class. The method returns a boolean indicating whether multiple file selection is allowed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.filechooser.ismultiple.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class FileChooser {
  isMultiple(): boolean;
}
```

----------------------------------------

TITLE: Page.tap() Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the tap() method in the Page class. It takes a selector string as input and returns a Promise that resolves when the tap action is completed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.tap.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  tap(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: JSHandle toString Method Signature - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the JSHandle.toString() method within the JSHandle class definition. It is an abstract method that returns a string and is primarily used for debugging purposes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.tostring.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  abstract toString(): string;
}
```

----------------------------------------

TITLE: Defining Quad Type in TypeScript
DESCRIPTION: This snippet defines the Quad type as a tuple of four Point objects. It is used to represent a quadrilateral or a bounding box with four distinct points. This type depends on the definition of the Point type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.quad.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type Quad = [Point, Point, Point, Point];
```

----------------------------------------

TITLE: TimeoutError Class Signature (TypeScript)
DESCRIPTION: Defines the signature of the TimeoutError class in TypeScript. It extends the standard JavaScript Error class. Note that the constructor is internal and should not be called directly by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.timeouterror.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class TimeoutError extends Error
```

----------------------------------------

TITLE: Defining CSSCoverageOptions Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for CSS coverage configuration options. Includes an optional resetOnNavigation property that determines if coverage data should be reset when navigating between pages.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.csscoverageoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CSSCoverageOptions
```

----------------------------------------

TITLE: ConsoleMessage.text() Signature (TypeScript)
DESCRIPTION: Signature for the `text()` method of the `ConsoleMessage` class in Puppeteer, indicating it returns a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.consolemessage.text.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ConsoleMessage {
  text(): string;
}
```

----------------------------------------

TITLE: Defining ElementScreenshotOptions Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition for the ElementScreenshotOptions interface, which extends the base ScreenshotOptions interface to add specific options for element screenshots.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementscreenshotoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ElementScreenshotOptions extends ScreenshotOptions
```

----------------------------------------

TITLE: Frame.content() Method Signature - Puppeteer - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `content()` method of the Puppeteer `Frame` class. The method returns a Promise that resolves to a string containing the full HTML content of the frame.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.content.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  content(): Promise<string>;
}
```

----------------------------------------

TITLE: Default temporaryDirectory Path - JavaScript
DESCRIPTION: Shows the default path used by Puppeteer for creating temporary files, which is the system's standard temporary directory. This can be overridden by the PUPPETEER_TMP_DIR environment variable.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.configuration.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
os.tmpdir()
```

----------------------------------------

TITLE: Process.hasClosed Method Signature (TypeScript)
DESCRIPTION: Provides the TypeScript signature for the `hasClosed()` method of the `Process` class. This method returns a Promise that resolves when the process associated with the object has closed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.process.hasclosed.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Process {
  hasClosed(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Connection.url() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the url() method for the Connection class in Puppeteer. The method takes no parameters and returns a string representing the URL of the connection.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.url.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Connection {
  url(): string;
}
```

----------------------------------------

TITLE: Defining AwaitableIterable Type in TypeScript
DESCRIPTION: Type definition that creates a union type between Iterable<T> and AsyncIterable<T>, allowing for both synchronous and asynchronous iteration patterns to be used interchangeably.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.awaitableiterable.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type AwaitableIterable<T> = Iterable<T> | AsyncIterable<T>;
```

----------------------------------------

TITLE: HTTPResponse remoteAddress Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `remoteAddress` method within the `HTTPResponse` class. It indicates that the method is abstract and returns a `RemoteAddress` object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.remoteaddress.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract remoteAddress(): RemoteAddress;
}
```

----------------------------------------

TITLE: Dialog message() Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `message()` method of the `Dialog` class in Puppeteer. It indicates that the method takes no arguments and returns a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.dialog.message.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Dialog {
  message(): string;
}
```

----------------------------------------

TITLE: Default Intercept Resolution Priority Variable Signature (TypeScript)
DESCRIPTION: This snippet shows the declaration and default value of the DEFAULT_INTERCEPT_RESOLUTION_PRIORITY variable, indicating its initial priority level for request interception.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.default_intercept_resolution_priority.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
DEFAULT_INTERCEPT_RESOLUTION_PRIORITY = 0;
```

----------------------------------------

TITLE: Defining InterceptResolutionState Interface - TypeScript
DESCRIPTION: Defines the TypeScript interface `InterceptResolutionState` used within Puppeteer. This interface specifies the structure for objects that determine how a intercepted request should be handled.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.interceptresolutionstate.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface InterceptResolutionState
```

----------------------------------------

TITLE: SecurityDetails.validTo() Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `validTo()` method of the `SecurityDetails` class. The method takes no arguments and returns a number, which represents a Unix timestamp.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.securitydetails.validto.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class SecurityDetails {
  validTo(): number;
}
```

----------------------------------------

TITLE: Defining SupportedWebDriverCapabilities Interface - TypeScript
DESCRIPTION: This snippet shows the basic TypeScript definition for the SupportedWebDriverCapabilities interface. It serves as a container for WebDriver BiDi capabilities that are not managed directly by Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.supportedwebdrivercapabilities.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface SupportedWebDriverCapabilities
```

----------------------------------------

TITLE: Defining Puppeteer UnsupportedOperation Class (TypeScript)
DESCRIPTION: Defines the UnsupportedOperation class in Puppeteer. This error is thrown when a method is not supported by the current protocol. It extends the base PuppeteerError class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.unsupportedoperation.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare class UnsupportedOperation extends PuppeteerError
```

----------------------------------------

TITLE: Launching Puppeteer in Default Headless Mode (New)
DESCRIPTION: Launches Puppeteer using the new default headless mode. This is the behavior when no 'headless' option is provided or when explicitly set to 'true'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/headless-modes.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
const browser = await puppeteer.launch();
```

LANGUAGE: TypeScript
CODE:
```
const browser = await puppeteer.launch({headless: true});
```

----------------------------------------

TITLE: Defining Puppeteer DeleteCookiesRequest Interface (TypeScript)
DESCRIPTION: This snippet shows the TypeScript interface definition for the DeleteCookiesRequest object in Puppeteer. This interface specifies the properties available for filtering cookies when performing a deletion operation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.deletecookiesrequest.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface DeleteCookiesRequest
```

----------------------------------------

TITLE: Retrieving Dialog Message in Puppeteer TypeScript
DESCRIPTION: Method signature for the Dialog.message() function that returns the text message displayed in a browser dialog. This is a getter method that returns the message as a string value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.message.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Dialog {
  message(): string;
}
```

----------------------------------------

TITLE: Retrieving Dialog Type in Puppeteer with TypeScript
DESCRIPTION: This method returns the type of a dialog in Puppeteer. It's a member of the Dialog class and returns a Protocol.Page.DialogType value, which represents the specific type of browser dialog (such as alert, confirm, prompt, etc.).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.type.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Dialog {
  type(): Protocol.Page.DialogType;
}
```

----------------------------------------

TITLE: Creating CDPSession with Target.createCDPSession (TypeScript)
DESCRIPTION: This snippet shows the signature of the `createCDPSession` method within the `Target` class. This method is asynchronous and returns a Promise that resolves to a `CDPSession` instance, which is used for direct communication with the Chrome DevTools Protocol for the associated target.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.target.createcdpsession.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract createCDPSession(): Promise<CDPSession>;
}
```

----------------------------------------

TITLE: Defining SnapshotOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for SnapshotOptions that specifies configuration parameters for accessibility snapshots. It includes options for iframe inclusion, node filtering, and root element selection.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.snapshotoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface SnapshotOptions
```

----------------------------------------

TITLE: Defining SecurityDetails subjectAlternativeNames Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `subjectAlternativeNames()` method within the `SecurityDetails` class, indicating it is a method that returns an array of strings.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.securitydetails.subjectalternativenames.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class SecurityDetails {
  subjectAlternativeNames(): string[];
}
```

----------------------------------------

TITLE: Signature for Page.waitForFrame Method in Puppeteer
DESCRIPTION: Shows the method signature for Page.waitForFrame, detailing its parameters (urlOrPredicate, options) and its return type (Promise<Frame>).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforframe.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  waitForFrame(
    urlOrPredicate: string | ((frame: Frame) => Awaitable<boolean>),
    options?: WaitTimeoutOptions,
  ): Promise<Frame>;
}
```

----------------------------------------

TITLE: Defining KeyDownOptions Interface in TypeScript
DESCRIPTION: Interface definition for KeyDownOptions containing deprecated properties 'commands' and 'text'. Both properties are automatically handled by the system and should not be used.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keydownoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface KeyDownOptions
```

----------------------------------------

TITLE: Signature of Page.emulate method (TypeScript)
DESCRIPTION: Defines the signature for the `emulate` method within the `Page` class, showing it accepts a `Device` object and returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulate.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  emulate(device: Device): Promise<void>;
}
```

----------------------------------------

TITLE: Defining CLI Class in TypeScript
DESCRIPTION: This snippet shows the basic declaration of the CLI class using TypeScript's 'declare' keyword, indicating it's likely defined elsewhere or represents a type definition.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.cli.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare class CLI
```

----------------------------------------

TITLE: Defining BrowserEvents Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the BrowserEvents interface, which extends Record<EventType, unknown>. It includes four properties related to browser events: disconnected, targetchanged, targetcreated, and targetdestroyed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserevents.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface BrowserEvents extends Record<EventType, unknown> {
  disconnected: undefined;
  targetchanged: Target;
  targetcreated: Target;
  targetdestroyed: Target;
}
```

----------------------------------------

TITLE: Defining MouseMoveOptions Interface (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `MouseMoveOptions` interface, which is used to configure options for mouse movement operations in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mousemoveoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface MouseMoveOptions
```

----------------------------------------

TITLE: Debugging Test Patterns with Environment Variables in Bash
DESCRIPTION: Command to debug all tests matching a pattern using environment variables.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
PUPPETEER_DEFLAKE_TESTS="[navigation.spec] *" npm run test:chrome:headless
```

----------------------------------------

TITLE: Defining the TouchError class in TypeScript
DESCRIPTION: Defines the TouchError class, which extends PuppeteerError. This error is specifically thrown when attempting to interact with a non-existent touch event.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.toucherror.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class TouchError extends PuppeteerError
```

----------------------------------------

TITLE: Taking Binary Screenshot of Element (TypeScript)
DESCRIPTION: This signature of the screenshot method takes a screenshot of the element and returns the result as a Uint8Array. It accepts optional ScreenshotOptions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.screenshot.md#_snippet_1

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  screenshot(options?: Readonly<ScreenshotOptions>): Promise<Uint8Array>;
}
```

----------------------------------------

TITLE: Starting dbus Service in Docker
DESCRIPTION: Command to start the dbus service inside the container, which might be necessary for Chrome even in headless mode to prevent warnings.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/docker.md#_snippet_2

LANGUAGE: Bash
CODE:
```
sudo service dbus start
```

----------------------------------------

TITLE: Continuing HTTPRequest in Puppeteer (JavaScript)
DESCRIPTION: Continues the request with optional overrides. Requires request interception to be enabled with Page.setRequestInterception(). Throws an exception if interception is not enabled.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_4

LANGUAGE: javascript
CODE:
```
continue(overrides, priority)
```

----------------------------------------

TITLE: Connection Class Signature Definition in TypeScript
DESCRIPTION: Defines the TypeScript signature for the Connection class, showing that it extends EventEmitter with CDPSessionEvents as the generic parameter type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class Connection extends EventEmitter<CDPSessionEvents>
```

----------------------------------------

TITLE: Method Signature for BrowserContext.targets in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `targets()` method of the `BrowserContext` class. It indicates that the method is abstract and returns an array of `Target` objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.targets.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract targets(): Target[];
}
```

----------------------------------------

TITLE: Define Page.addStyleTag Signature (URL)
DESCRIPTION: Defines the TypeScript signature for the `Page.addStyleTag` method when adding a `<link>` tag with a URL. It accepts `FrameAddStyleTagOptions` including the 'url' property and returns a Promise resolving to an ElementHandle for the injected `<link>` element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.addstyletag.md#_snippet_1

LANGUAGE: typescript
CODE:
```
class Page {
  addStyleTag(
    options: FrameAddStyleTagOptions,
  ): Promise<ElementHandle<HTMLLinkElement>>;
}
```

----------------------------------------

TITLE: Defining NetworkConditions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for NetworkConditions that allows configuring network simulation parameters. Includes properties for download speed (bytes/s), upload speed (bytes/s), and latency (ms).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.networkconditions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface NetworkConditions
```

----------------------------------------

TITLE: Defining the HTTPRequest.fetchPostData Method in TypeScript
DESCRIPTION: Abstract method signature for fetchPostData() in the HTTPRequest class. This method retrieves the POST data for an HTTP request from the browser and returns a Promise that resolves to either a string containing the POST data or undefined.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.fetchpostdata.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract fetchPostData(): Promise<string | undefined>;
}
```

----------------------------------------

TITLE: Initializing Page Tracing in Puppeteer TypeScript
DESCRIPTION: Method signature for starting a trace in Puppeteer. Takes optional TracingOptions parameter and returns a Promise. Only one trace can be active at a time per browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.tracing.start.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Tracing {
  start(options?: TracingOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Subscribing to Events with CommonEventEmitter.on (TypeScript)
DESCRIPTION: Attaches an event listener function (`handler`) to a specific event type (`type`) on the `CommonEventEmitter` instance. This method is part of the event emitter pattern, allowing code to react to events as they occur. It returns the `this` object for chaining.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.commoneventemitter.on.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface CommonEventEmitter {
  on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): this;
}
```

----------------------------------------

TITLE: CustomQueryHandler queryAll Signature - TypeScript
DESCRIPTION: Signature for the optional `queryAll` method of the `CustomQueryHandler` interface. This method searches for all nodes matching the given selector starting from a specified node. It returns an iterable collection of matching nodes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.customqueryhandler.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
(node: Node, selector: string) => Iterable<Node>
```

----------------------------------------

TITLE: Get Request Initiating Frame (TypeScript)
DESCRIPTION: Retrieves the Frame object that initiated this HTTP request. Returns null if the request is for an error page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.frame.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract frame(): Frame | null;
}
```

----------------------------------------

TITLE: Defining ProfileOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the ProfileOptions interface used in Puppeteer. It contains two properties: path (a string) and preferences (a Record of string keys and unknown values).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.profileoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ProfileOptions {
  path: string;
  preferences: Record<string, unknown>;
}
```

----------------------------------------

TITLE: Implementing Browser Context Retrieval in Puppeteer TypeScript
DESCRIPTION: Abstract class definition for the Browser class showing the browserContexts() method signature. This method returns an array of BrowserContext objects representing all open browser contexts in the browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.browsercontexts.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract browserContexts(): BrowserContext[];
}
```

----------------------------------------

TITLE: Defining ChromeReleaseChannel Enum in TypeScript
DESCRIPTION: Enumeration that defines the available Chrome release channels including beta, canary, dev, and stable versions. This enum is used in Puppeteer to specify which Chrome release channel to use when launching the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.chromereleasechannel.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare enum ChromeReleaseChannel
```

----------------------------------------

TITLE: Defining Process.kill() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the kill() method for the Process class in Puppeteer. The method is used to terminate a process and doesn't take any parameters or return any value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process.kill.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Process {
  kill(): void;
}
```

----------------------------------------

TITLE: Defining getInstalledBrowsers Function Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the getInstalledBrowsers function. It takes a GetInstalledBrowsersOptions object as a parameter and returns a Promise that resolves to an array of InstalledBrowser objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.getinstalledbrowsers.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function getInstalledBrowsers(
  options: GetInstalledBrowsersOptions,
): Promise<InstalledBrowser[]>;
```

----------------------------------------

TITLE: Get request overrides for continuation - TypeScript
DESCRIPTION: Retrieves the `ContinueRequestOverrides` object that contains the modifications applied to the request if it is allowed to continue. This object is used during request interception to specify changes like headers, method, or post data before the request proceeds.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.continuerequestoverrides.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPRequest {
  continueRequestOverrides(): ContinueRequestOverrides;
}
```

----------------------------------------

TITLE: Accept FileChooser Request - Puppeteer - TypeScript
DESCRIPTION: Represents the TypeScript signature for the `FileChooser.accept` method. This method is used to accept a file chooser prompt by providing an array of file paths. It returns a Promise that resolves when the operation is complete. Note that this method does not validate file existence, and relative paths are resolved against the current working directory. For remote Chrome environments, paths must be absolute.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.filechooser.accept.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class FileChooser {
  accept(paths: string[]): Promise<void>;
}
```

----------------------------------------

TITLE: Implementing Frame.evaluateHandle Method in TypeScript
DESCRIPTION: TypeScript signature for the Frame.evaluateHandle method that evaluates JavaScript within a frame context and returns a JSHandle. This method accepts a function or string to be evaluated and additional arguments to pass to the function.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.evaluatehandle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}
```

----------------------------------------

TITLE: Clearing and Listing Installed Browsers
DESCRIPTION: Demonstrates how to clear all installed browsers and list all currently installed browsers using the @puppeteer/browsers CLI.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/browsers/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npx @puppeteer/browsers clear
npx @puppeteer/browsers list
```

----------------------------------------

TITLE: ElementHandle.screenshot() Method Returning Base64 String in TypeScript
DESCRIPTION: Defines the signature for the ElementHandle.screenshot() method that returns a base64 encoded string. This version requires the options parameter with encoding explicitly set to 'base64'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.screenshot.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  screenshot(
    options: Readonly<ScreenshotOptions> & {
      encoding: 'base64';
    },
  ): Promise<string>;
}
```

----------------------------------------

TITLE: Get Associated HTTPRequest - Puppeteer TypeScript
DESCRIPTION: Retrieves the HTTPRequest object that initiated this HTTPResponse. This method is part of the HTTPResponse class and returns the corresponding request object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.request.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract request(): HTTPRequest;
}
```

----------------------------------------

TITLE: Querying Frame Elements with Puppeteer in TypeScript
DESCRIPTION: TypeScript class definition showing the Frame.$$ method signature. The method accepts a selector string and optional query options, returning a Promise that resolves to an array of ElementHandle objects matching the selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.__.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  $$<Selector extends string>(
    selector: Selector,
    options?: QueryOptions,
  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
}
```

----------------------------------------

TITLE: Defining JSHandle.dispose Method in TypeScript
DESCRIPTION: This code snippet defines the dispose() method in the JSHandle class. The method is abstract and returns a Promise<void>. It is used to release the object referenced by the handle for garbage collection.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.dispose.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  abstract dispose(): Promise<void>;
}
```

----------------------------------------

TITLE: Define EventEmitter.once Method Signature (TypeScript)
DESCRIPTION: Defines the signature for the `once` method within the `EventEmitter` class. This method registers a handler that is executed only once when the specified event `type` occurs, and is then automatically removed. It accepts the event type and the handler function, returning the `EventEmitter` instance for method chaining.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.eventemitter.once.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class EventEmitter {
  once<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}
```

----------------------------------------

TITLE: Connection Session Method Definition in TypeScript
DESCRIPTION: Defines the session() method signature within the Connection class. It takes a sessionId parameter and returns either a CDPSession object or null. Used to retrieve an existing CDP session by its identifier.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.session.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Connection {
  session(sessionId: string): CDPSession | null;
}
```

----------------------------------------

TITLE: Defining Accessibility.snapshot Method in TypeScript
DESCRIPTION: TypeScript class definition for the Accessibility.snapshot method, which captures the current state of the accessibility tree and returns a representation of the root accessible node.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.accessibility.snapshot.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Accessibility {
  snapshot(options?: SnapshotOptions): Promise<SerializedAXNode | null>;
}
```

----------------------------------------

TITLE: Resetting Mouse State in Puppeteer (TypeScript)
DESCRIPTION: This code snippet shows the TypeScript signature for the `Mouse.reset()` method in Puppeteer. It is an abstract method that, when called, resets the mouse state to its default configuration: no buttons pressed and the cursor positioned at coordinates (0,0). The method returns a Promise that resolves when the reset operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.reset.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Mouse {
  abstract reset(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining CSSCoverage.start() Method in TypeScript
DESCRIPTION: This code snippet defines the start() method for the CSSCoverage class in Puppeteer. It takes an optional options parameter with a resetOnNavigation property and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.csscoverage.start.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class CSSCoverage {
  start(options?: {resetOnNavigation?: boolean}): Promise<void>;
}
```

----------------------------------------

TITLE: Declaring Browser.targets() Method in TypeScript
DESCRIPTION: Abstract method declaration for the targets() method in the Browser class, which returns an array of Target objects representing all active targets across all browser contexts.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.targets.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract targets(): Target[];
}
```

----------------------------------------

TITLE: Defining the CookieData Interface in Puppeteer
DESCRIPTION: This snippet defines the TypeScript interface `CookieData` used in Puppeteer. It specifies the structure required for objects passed to the browser-level cookies API to set cookies, including mandatory properties like `name`, `value`, and `domain`, and various optional properties like `expires`, `httpOnly`, `secure`, `path`, `sameSite`, `partitionKey`, `priority`, and `sourceScheme`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cookiedata.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CookieData
```

----------------------------------------

TITLE: Defining the InstallOptions Interface (TypeScript)
DESCRIPTION: This snippet shows the basic TypeScript definition for the `InstallOptions` interface, which outlines the structure for providing configuration options during browser installation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.installoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface InstallOptions
```

----------------------------------------

TITLE: Defining CookieData Interface in TypeScript
DESCRIPTION: This snippet defines the CookieData interface with its properties. It includes various fields for setting cookie attributes such as domain, expiration, HTTP-only flag, name, partition key, path, priority, and more.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookiedata.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CookieData
```

----------------------------------------

TITLE: Implementing Frame.addScriptTag Method in TypeScript
DESCRIPTION: Defines the addScriptTag method signature in the Frame class. The method accepts FrameAddScriptTagOptions and returns a Promise resolving to an ElementHandle of the injected script element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.addscripttag.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  addScriptTag(
    options: FrameAddScriptTagOptions,
  ): Promise<ElementHandle<HTMLScriptElement>>;
}
```

----------------------------------------

TITLE: Get Page Metrics - Puppeteer - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `Page.metrics()` method of the Puppeteer `Page` class. It indicates that the method is abstract and returns a Promise that resolves to a `Metrics` object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.metrics.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract metrics(): Promise<Metrics>;
}
```

----------------------------------------

TITLE: Target Opener Method Signature (TypeScript)
DESCRIPTION: This code snippet shows the TypeScript signature for the abstract opener() method within the Target class. It indicates that the method returns a Target object or undefined, signifying that top-level targets do not have an opener.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.target.opener.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract opener(): Target | undefined;
}
```

----------------------------------------

TITLE: Define removeScriptToEvaluateOnNewDocument Method - Puppeteer TypeScript
DESCRIPTION: Defines the signature for the Puppeteer Page method used to remove a script previously added with `evaluateOnNewDocument`. It requires a string `identifier` matching the one used during injection and returns a Promise that resolves when the removal is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.removescripttoevaluateonnewdocument.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract removeScriptToEvaluateOnNewDocument(
    identifier: string,
  ):
 Promise<void>;
}
```

----------------------------------------

TITLE: Declaring Puppeteer PageEvent Enum (TypeScript)
DESCRIPTION: This snippet declares the PageEvent enum in TypeScript, which enumerates the various events that can be emitted by a Puppeteer Page instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.pageevent.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare const enum PageEvent
```

----------------------------------------

TITLE: Defining BrowserLauncher Abstract Class - TypeScript
DESCRIPTION: This snippet shows the TypeScript declaration for the abstract BrowserLauncher class, which is the base class for objects capable of launching browser instances in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browserlauncher.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class BrowserLauncher
```

----------------------------------------

TITLE: Defining NetworkConditions Interface - TypeScript
DESCRIPTION: Defines the structure for simulating network conditions, including properties for download speed (bytes/s), latency (ms), and upload speed (bytes/s). This interface is used to specify network throttling parameters.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.networkconditions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface NetworkConditions
```

----------------------------------------

TITLE: Creating a Browser Profile with Puppeteer (TypeScript)
DESCRIPTION: This function signature shows how to create a new browser profile using the provided Browser instance and ProfileOptions. It returns a Promise that resolves when the profile is created.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.createprofile.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function createProfile(
  browser: Browser,
  opts: ProfileOptions,
): Promise<void>;
```

----------------------------------------

TITLE: Running Individual Puppeteer Example
DESCRIPTION: This command demonstrates how to run a specific Puppeteer example (search.js) with the correct Node.js path configuration.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/examples/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
NODE_PATH=../ node examples/search.js
```

----------------------------------------

TITLE: Example Usage - Page.setGeolocation - TypeScript
DESCRIPTION: Demonstrates how to call the `setGeolocation` method on a `Page` instance with specific latitude and longitude values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setgeolocation.md#_snippet_1

LANGUAGE: typescript
CODE:
```
await page.setGeolocation({latitude: 59.95, longitude: 30.31667});
```

----------------------------------------

TITLE: Get Frame URL in Puppeteer (TypeScript)
DESCRIPTION: Retrieves the URL of the frame. This method is part of the `Frame` class and returns the current URL as a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.url.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  abstract url(): string;
}
```

----------------------------------------

TITLE: Defining CommandOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for CommandOptions which specifies configuration options for commands in Puppeteer. It contains a single property 'timeout' of type number.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commandoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CommandOptions
```

----------------------------------------

TITLE: Defining Target.url Abstract Method in TypeScript
DESCRIPTION: Abstract method signature for retrieving the URL of a Target instance. Returns a string representing the target's URL.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.url.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract url(): string;
}
```

----------------------------------------

TITLE: Defining ScreencastOptions Interface in TypeScript
DESCRIPTION: This snippet shows the basic definition of the ScreencastOptions interface in TypeScript, which is used to configure the screencasting feature in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.screencastoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ScreencastOptions
```

----------------------------------------

TITLE: HTTPRequest.respond Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the HTTPRequest.respond method, which takes a partial ResponseForRequest object and an optional priority parameter to fulfill an intercepted HTTP request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.respond.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  respond(
    response: Partial<ResponseForRequest>,
    priority?: number,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining DownloadPolicy Type in TypeScript
DESCRIPTION: Defines the `DownloadPolicy` type as a union of specific string literals. These values are used to configure the behavior of file downloads, such as denying, allowing, or allowing and renaming files.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.downloadpolicy.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type DownloadPolicy = 'deny' | 'allow' | 'allowAndName' | 'default';
```

----------------------------------------

TITLE: Defining InterceptResolutionState Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for InterceptResolutionState which contains an action property of type InterceptResolutionAction and an optional priority property of type number.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.interceptresolutionstate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface InterceptResolutionState
```

----------------------------------------

TITLE: Declaring BrowserTag Enum (TypeScript)
DESCRIPTION: This snippet declares the `BrowserTag` enum in TypeScript. The enum represents different release channels for a browser and is intended for use with functions like `resolveBuildId()` to determine a specific browser build ID based on its channel.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.browsertag.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare enum BrowserTag
```

----------------------------------------

TITLE: Puppeteer Page.waitForFileChooser Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature of the `waitForFileChooser` method within the `Page` class, indicating it's an abstract method that accepts optional `WaitTimeoutOptions` and returns a `Promise` resolving to a `FileChooser` object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitforfilechooser.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract waitForFileChooser(
    options?: WaitTimeoutOptions,
  ): Promise<FileChooser>;
}
```

----------------------------------------

TITLE: Page.goForward Method Signature (TypeScript)
DESCRIPTION: Defines the signature for the goForward method within the Puppeteer Page class. This method allows navigating to the next page in the browsing history, optionally accepting WaitForOptions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.goforward.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract goForward(options?: WaitForOptions): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Implementing the HTTPResponse.request Method in TypeScript
DESCRIPTION: This code defines the abstract request() method in the HTTPResponse class that returns the matching HTTPRequest object associated with the response.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.request.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract request(): HTTPRequest;
}
```

----------------------------------------

TITLE: Defining HTTPResponse.securityDetails Method in TypeScript
DESCRIPTION: This code snippet defines the securityDetails method for the HTTPResponse class. The method returns either a SecurityDetails object or null, depending on whether the response was received over a secure connection.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.securitydetails.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract securityDetails(): SecurityDetails | null;
}
```

----------------------------------------

TITLE: Defining TouchHandle.end() Method Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the end() method for the TouchHandle interface. The method returns a Promise that resolves to void, indicating the completion of the touchend event dispatch.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchhandle.end.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface TouchHandle {
  end(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining WaitForTargetOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the WaitForTargetOptions interface in TypeScript. It includes two optional properties: 'signal' of type AbortSignal for cancelling a waitFor call, and 'timeout' of type number for setting the maximum wait time in milliseconds.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.waitfortargetoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface WaitForTargetOptions
```

----------------------------------------

TITLE: Defining Puppeteer Point Interface in TypeScript
DESCRIPTION: Defines the `Point` interface in TypeScript, which is used throughout Puppeteer to represent a coordinate with `x` and `y` properties.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.point.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Point
```

----------------------------------------

TITLE: Running Mocha Runner Self-Tests in Bash
DESCRIPTION: Command to run tests for the Mocha Runner itself using npm.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm test
```

----------------------------------------

TITLE: Running E2E Tests with Puppeteer Angular Schematic
DESCRIPTION: Command to execute end-to-end tests after installing the Puppeteer Angular Schematic.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
ng e2e
```

----------------------------------------

TITLE: Defining Puppeteer BrowserContext Class (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the abstract BrowserContext class, indicating it extends EventEmitter and manages BrowserContextEvents. It defines the structure but is not meant for direct instantiation by users.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class BrowserContext extends EventEmitter<BrowserContextEvents>
```

----------------------------------------

TITLE: Defining Process.close Method in TypeScript
DESCRIPTION: TypeScript class definition showing the close() method signature within the Process class. The method returns a Promise that resolves to void, indicating an asynchronous operation that completes without returning a value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process.close.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Process {
  close(): Promise<void>;
}
```

----------------------------------------

TITLE: Tracing.start Method Signature in TypeScript
DESCRIPTION: Defines the signature for the `start` method within the `Tracing` class in Puppeteer. This method initiates a trace for the current page and optionally accepts `TracingOptions`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.tracing.start.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Tracing {
  start(options?: TracingOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Mouse.reset() Method in TypeScript
DESCRIPTION: This code snippet defines the abstract reset() method in the Mouse class. The method resets the mouse to its default state with no buttons pressed and position at (0,0). It returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.reset.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract reset(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining ElementHandle.isIntersectingViewport Method in TypeScript
DESCRIPTION: Method signature for checking if an element is intersecting the viewport. It accepts an optional threshold parameter that determines the degree of intersection required (from 0 to 1). For SVG elements, it checks if the parent SVG owner element is in the viewport, addressing a Chrome bug (crbug.com/963246).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.isintersectingviewport.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  isIntersectingViewport(
    this: ElementHandle<Element>,
    options?: {
      threshold?: number;
    },
  ): Promise<boolean>;
}
```

----------------------------------------

TITLE: Specifying @puppeteer/browsers Version with npx
DESCRIPTION: Shows how to use specific versions of @puppeteer/browsers when running with npx, including using the latest version and a specific version.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/browsers/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx @puppeteer/browsers@latest --help
npx @puppeteer/browsers@2.4.1 --help
npx --yes @puppeteer/browsers@latest --help
```

----------------------------------------

TITLE: Declaring PuppeteerError Base Class in TypeScript
DESCRIPTION: Defines the base error class that all Puppeteer-specific errors inherit from. The class extends the standard Error class and is marked as internal, meaning it should not be directly instantiated or extended by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteererror.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class PuppeteerError extends Error
```

----------------------------------------

TITLE: Implementing Frame Title Getter in TypeScript
DESCRIPTION: TypeScript class definition showing the Frame.title() method signature which retrieves the frame's title asynchronously. Returns a Promise that resolves to a string containing the frame's title.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.title.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  title(): Promise<string>;
}
```

----------------------------------------

TITLE: KnownDevices Variable Signature (TypeScript)
DESCRIPTION: Defines the type signature for the KnownDevices variable, showing it as a read-only record mapping device names (strings) to Device objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.knowndevices.md#_snippet_0

LANGUAGE: typescript
CODE:
```
KnownDevices: Readonly<
  Record<
    | 'Blackberry PlayBook'
    | 'Blackberry PlayBook landscape'
    | 'BlackBerry Z30'
    | 'BlackBerry Z30 landscape'
    | 'Galaxy Note 3'
    | 'Galaxy Note 3 landscape'
    | 'Galaxy Note II'
    | 'Galaxy Note II landscape'
    | 'Galaxy S III'
    | 'Galaxy S III landscape'
    | 'Galaxy S5'
    | 'Galaxy S5 landscape'
    | 'Galaxy S8'
    | 'Galaxy S8 landscape'
    | 'Galaxy S9+'
    | 'Galaxy S9+ landscape'
    | 'Galaxy Tab S4'
    | 'Galaxy Tab S4 landscape'
    | 'iPad'
    | 'iPad landscape'
    | 'iPad (gen 6)'
    | 'iPad (gen 6) landscape'
    | 'iPad (gen 7)'
    | 'iPad (gen 7) landscape'
    | 'iPad Mini'
    | 'iPad Mini landscape'
    | 'iPad Pro'
    | 'iPad Pro landscape'
    | 'iPad Pro 11'
    | 'iPad Pro 11 landscape'
    | 'iPhone 4'
    | 'iPhone 4 landscape'
    | 'iPhone 5'
    | 'iPhone 5 landscape'
    | 'iPhone 6'
    | 'iPhone 6 landscape'
    | 'iPhone 6 Plus'
    | 'iPhone 6 Plus landscape'
    | 'iPhone 7'
    | 'iPhone 7 landscape'
    | 'iPhone 7 Plus'
    | 'iPhone 7 Plus landscape'
    | 'iPhone 8'
    | 'iPhone 8 landscape'
    | 'iPhone 8 Plus'
    | 'iPhone 8 Plus landscape'
    | 'iPhone SE'
    | 'iPhone SE landscape'
    | 'iPhone X'
    | 'iPhone X landscape'
    | 'iPhone XR'
    | 'iPhone XR landscape'
    | 'iPhone 11'
    | 'iPhone 11 landscape'
    | 'iPhone 11 Pro'
    | 'iPhone 11 Pro landscape'
    | 'iPhone 11 Pro Max'
    | 'iPhone 11 Pro Max landscape'
    | 'iPhone 12'
    | 'iPhone 12 landscape'
    | 'iPhone 12 Pro'
    | 'iPhone 12 Pro landscape'
    | 'iPhone 12 Pro Max'
    | 'iPhone 12 Pro Max landscape'
    | 'iPhone 12 Mini'
    | 'iPhone 12 Mini landscape'
    | 'iPhone 13'
    | 'iPhone 13 landscape'
    | 'iPhone 13 Pro'
    | 'iPhone 13 Pro landscape'
    | 'iPhone 13 Pro Max'
    | 'iPhone 13 Pro Max landscape'
    | 'iPhone 13 Mini'
    | 'iPhone 13 Mini landscape'
    | 'iPhone 14'
    | 'iPhone 14 landscape'
    | 'iPhone 14 Plus'
    | 'iPhone 14 Plus landscape'
    | 'iPhone 14 Pro'
    | 'iPhone 14 Pro landscape'
    | 'iPhone 14 Pro Max'
    | 'iPhone 14 Pro Max landscape'
    | 'iPhone 15'
    | 'iPhone 15 landscape'
    | 'iPhone 15 Plus'
    | 'iPhone 15 Plus landscape'
    | 'iPhone 15 Pro'
    | 'iPhone 15 Pro landscape'
    | 'iPhone 15 Pro Max'
    | 'iPhone 15 Pro Max landscape'
    | 'JioPhone 2'
    | 'JioPhone 2 landscape'
    | 'Kindle Fire HDX'
    | 'Kindle Fire HDX landscape'
    | 'LG Optimus L70'
    | 'LG Optimus L70 landscape'
    | 'Microsoft Lumia 550'
    | 'Microsoft Lumia 950'
    | 'Microsoft Lumia 950 landscape'
    | 'Nexus 10'
    | 'Nexus 10 landscape'
    | 'Nexus 4'
    | 'Nexus 4 landscape'
    | 'Nexus 5'
    | 'Nexus 5 landscape'
    | 'Nexus 5X'
    | 'Nexus 5X landscape'
    | 'Nexus 6'
    | 'Nexus 6 landscape'
    | 'Nexus 6P'
    | 'Nexus 6P landscape'
    | 'Nexus 7'
    | 'Nexus 7 landscape'
    | 'Nokia Lumia 520'
    | 'Nokia Lumia 520 landscape'
    | 'Nokia N9'
    | 'Nokia N9 landscape'
    | 'Pixel 2'
    | 'Pixel 2 landscape'
    | 'Pixel 2 XL'
    | 'Pixel 2 XL landscape'
    | 'Pixel 3'
    | 'Pixel 3 landscape'
    | 'Pixel 4'
    | 'Pixel 4 landscape'
    | 'Pixel 4a (5G)'
    | 'Pixel 4a (5G) landscape'
    | 'Pixel 5'
    | 'Pixel 5 landscape'
    | 'Moto G4'
    | 'Moto G4 landscape',
    Device
  >
>;
```

----------------------------------------

TITLE: Defining PuppeteerNode.trimCache Method in TypeScript
DESCRIPTION: This code snippet defines the trimCache method for the PuppeteerNode class. The method removes non-current Firefox and Chrome binaries from the cache directory based on the Puppeteer configuration. It returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.trimcache.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  trimCache(): Promise<void>;
}
```

----------------------------------------

TITLE: Running E2E Tests
DESCRIPTION: Command to execute the E2E tests in an Angular project
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
ng e2e
```

----------------------------------------

TITLE: Manually Setting Puppeteer Sandbox Permissions on Windows (PowerShell)
DESCRIPTION: Provides a PowerShell command using icacls to manually set filesystem permissions for the Chrome sandbox directory on Windows. This can resolve 'Sandbox cannot access executable' errors if Puppeteer's automatic setup fails or for older Puppeteer versions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/troubleshooting.md#_snippet_4

LANGUAGE: powershell
CODE:
```
icacls "%USERPROFILE%/.cache/puppeteer/chrome" /grant *S-1-15-2-1:(OI)(CI)(RX)
```

----------------------------------------

TITLE: Using Legacy Prefixed Selector Syntax (TypeScript)
DESCRIPTION: Shows examples of the older, legacy prefixed selector syntax (`name/selector`) for built-in selectors like `text`, `xpath`, `aria`, and `pierce`. It notes that this syntax is supported but the `::-p-` syntax is recommended, and this legacy format does not allow combining selectors.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_17

LANGUAGE: TypeScript
CODE:
```
// Same as ::-p-text("My text").
await page.locator('text/My text').click();
// Same as ::-p-xpath(//h2).
await page.locator('xpath///h2').click();
// Same as ::-p-aria(My label).
await page.locator('aria/My label').click();

await page.locator('pierce/div').click();
```

----------------------------------------

TITLE: Install Browser with Unpacking (TypeScript)
DESCRIPTION: Downloads and unpacks the browser archive according to the provided InstallOptions, specifically when the `unpack` option is true or undefined. It returns a Promise that resolves with an `InstalledBrowser` instance upon successful installation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.install.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function install(
  options: InstallOptions & {
    unpack?: true;
  },
): Promise<InstalledBrowser>;
```

----------------------------------------

TITLE: Implementing Device Request Wait Filter in TypeScript
DESCRIPTION: Method signature for waitForDevice which resolves to the first device matching a provided filter function. Takes a filter function and optional timeout options as parameters and returns a Promise resolving to a DeviceRequestPromptDevice.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestprompt.waitfordevice.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class DeviceRequestPrompt {
  waitForDevice(
    filter: (device: DeviceRequestPromptDevice) => boolean,
    options?: WaitTimeoutOptions,
  ): Promise<DeviceRequestPromptDevice>;
}
```

----------------------------------------

TITLE: Defining ProtocolLifeCycleEvent Type in TypeScript
DESCRIPTION: This TypeScript snippet defines the union type `ProtocolLifeCycleEvent`. It enumerates the specific string values ('load', 'DOMContentLoaded', 'networkIdle', 'networkAlmostIdle') that are recognized as lifecycle events within the Puppeteer protocol, indicating different stages of page loading and network activity.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.protocollifecycleevent.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type ProtocolLifeCycleEvent =
  | 'load'
  | 'DOMContentLoaded'
  | 'networkIdle'
  | 'networkAlmostIdle';
```

----------------------------------------

TITLE: Defining the ContinueRequestOverrides Interface in TypeScript
DESCRIPTION: Defines the structure of the `ContinueRequestOverrides` interface in TypeScript, outlining the properties available for modifying a network request before it continues.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.continuerequestoverrides.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ContinueRequestOverrides
```

----------------------------------------

TITLE: Defining KeyPressOptions Type in TypeScript for Puppeteer
DESCRIPTION: This code defines the KeyPressOptions type as an intersection of KeyDownOptions and KeyboardTypeOptions, combining properties from both interfaces for use in keyboard press operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keypressoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type KeyPressOptions = KeyDownOptions & KeyboardTypeOptions;
```

----------------------------------------

TITLE: Using Coverage.stopCSSCoverage method in Puppeteer with TypeScript
DESCRIPTION: Method signature for Coverage.stopCSSCoverage() which returns a Promise resolving to an array of CSS coverage reports. This method is used to stop CSS coverage measurement and retrieve coverage data.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.stopcsscoverage.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Coverage {
  stopCSSCoverage(): Promise<CoverageEntry[]>;
}
```

----------------------------------------

TITLE: Defining stopJSCoverage Method in Coverage Class (TypeScript)
DESCRIPTION: This code snippet defines the stopJSCoverage() method in the Coverage class. It returns a Promise that resolves to an array of JSCoverageEntry objects. The method is used to stop JavaScript coverage and retrieve coverage reports for all scripts.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.stopjscoverage.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Coverage {
  stopJSCoverage(): Promise<JSCoverageEntry[]>;
}
```

----------------------------------------

TITLE: Getting Redirect Chain without Redirects (Puppeteer, TypeScript)
DESCRIPTION: Shows how to navigate to a URL that does not involve redirects and retrieve the request's redirect chain, demonstrating that the chain will be empty in such cases.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_21

LANGUAGE: ts
CODE:
```
const response = await page.goto('https://google.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 0
```

----------------------------------------

TITLE: Method Signature - Puppeteer Frame.focus - TypeScript
DESCRIPTION: Defines the signature for the Frame.focus() method in TypeScript. It accepts a string selector and returns a Promise that resolves when the focus operation is complete or rejects if no element matches the selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.focus.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  focus(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: Method Signature - Locator.wait - TypeScript
DESCRIPTION: This snippet shows the signature of the `wait` method within the `Locator` class. It indicates that the method accepts an optional `options` parameter of type `Readonly<ActionOptions>` and returns a `Promise` that resolves to a value of type `T`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.wait.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  wait(options?: Readonly<ActionOptions>): Promise<T>;
}
```

----------------------------------------

TITLE: Defining BrowserContextOptions Interface in TypeScript
DESCRIPTION: The TypeScript interface definition for BrowserContextOptions, which specifies configuration options for Puppeteer browser contexts. It includes optional properties for controlling download behavior and proxy settings.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontextoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface BrowserContextOptions
```

----------------------------------------

TITLE: Page.emulateIdleState Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the Page.emulateIdleState method, which accepts an optional overrides object with isUserActive and isScreenUnlocked boolean properties.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulateidlestate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateIdleState(overrides?: {
    isUserActive: boolean;
    isScreenUnlocked: boolean;
  }): Promise<void>;
}
```

----------------------------------------

TITLE: Connection.createSession Method Signature in Typescript
DESCRIPTION: Defines the method signature for createSession in the Connection class. This method creates a CDP (Chrome DevTools Protocol) session for a given target and returns a Promise that resolves to a CDPSession object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.createsession.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Connection {
  createSession(targetInfo: Protocol.Target.TargetInfo): Promise<CDPSession>;
}
```

----------------------------------------

TITLE: JSHandle asElement Method Signature - TypeScript
DESCRIPTION: Defines the abstract signature for the asElement method within the JSHandle class, indicating it returns an ElementHandle<Node> or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.aselement.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class JSHandle {
  abstract asElement(): ElementHandle<Node> | null;
}
```

----------------------------------------

TITLE: Defining EvaluateFuncWith Type in TypeScript
DESCRIPTION: This snippet defines the `EvaluateFuncWith` TypeScript type. It's a generic type that represents a function taking a value `V` and a spread of parameters derived from `T` using `InnerParams`. The function is expected to return an `Awaitable` value of type `unknown`. It references `InnerParams` and `Awaitable` types.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.evaluatefuncwith.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type EvaluateFuncWith<V, T extends unknown[]> = (
  ...params: [V, ...InnerParams<T>]
) => Awaitable<unknown>;
```

----------------------------------------

TITLE: Defining ElementHandle.hover Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition of the hover() method in the ElementHandle class. The method scrolls the element into view if needed, then uses Page.mouse to hover over the center of the element. It throws an error if the element is detached from the DOM.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.hover.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  hover(this: ElementHandle<Element>): Promise<void>;
}
```

----------------------------------------

TITLE: Defining CoverageEntry Interface - TypeScript
DESCRIPTION: This snippet defines the basic structure of the CoverageEntry interface, which is used to represent individual entries in a code coverage report within Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.coverageentry.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CoverageEntry
```

----------------------------------------

TITLE: Getting Metadata for Installed Browser (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `readMetadata()` method of the `InstalledBrowser` class. It indicates that the method takes no arguments and returns an object of type `Metadata`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.installedbrowser.readmetadata.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class InstalledBrowser {
  readMetadata(): Metadata;
}
```

----------------------------------------

TITLE: Defining Puppeteer Metrics Interface - TypeScript
DESCRIPTION: This snippet shows the basic TypeScript definition for the `Metrics` interface in Puppeteer. This interface is used to structure performance data obtained from a page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.metrics.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Metrics
```

----------------------------------------

TITLE: Frame Class Signature in TypeScript
DESCRIPTION: The TypeScript declaration of the Frame class, showing it extends EventEmitter with FrameEvents type parameter.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Frame extends EventEmitter<FrameEvents>
```

----------------------------------------

TITLE: HTTPRequest.responseForRequest Method Signature in TypeScript
DESCRIPTION: The signature of the responseForRequest() method in the HTTPRequest class. This method returns the ResponseForRequest object that would be used if interception is allowed to respond and abort() is not called.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.responseforrequest.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  responseForRequest(): Partial<ResponseForRequest> | null;
}
```

----------------------------------------

TITLE: Implementing Dialog.dismiss Method in Puppeteer TypeScript
DESCRIPTION: The Dialog.dismiss() method implementation in the Dialog class. It returns a Promise that resolves once the dialog has been dismissed, allowing automated handling of browser dialogs during Puppeteer automation scripts.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.dismiss.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Dialog {
  dismiss(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining PuppeteerNode.defaultArgs() Method in TypeScript
DESCRIPTION: This code snippet defines the defaultArgs() method for the PuppeteerNode class. It accepts an optional LaunchOptions parameter and returns an array of strings representing the default arguments for launching a browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.defaultargs.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  defaultArgs(options?: LaunchOptions): string[];
}
```

----------------------------------------

TITLE: Defining Page.emulateNetworkConditions Method - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `emulateNetworkConditions` method on the `Page` class in Puppeteer. It takes a `NetworkConditions` object or `null` as input and returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulatenetworkconditions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateNetworkConditions(
    networkConditions: NetworkConditions | null,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Getting Abort Error Reason in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Retrieves the most recent reason for aborting the request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_3

LANGUAGE: javascript
CODE:
```
abortErrorReason()
```

----------------------------------------

TITLE: Defining JSHandle.evaluateHandle Method Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the evaluateHandle method for the JSHandle class. It uses generic types to handle various function parameters and return types.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.evaluatehandle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}
```

----------------------------------------

TITLE: Configuring Puppeteer Request Priority with setInterceptResolutionConfig
DESCRIPTION: Presents a recommended pattern for package maintainers to allow users to configure the intercept resolution priority. It exports a function `setInterceptResolutionConfig` and uses the configured priority for `abort` and `DEFAULT_INTERCEPT_RESOLUTION_PRIORITY` for unopinionated `continue`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_15

LANGUAGE: TypeScript
CODE:
```
// Defaults to undefined which preserves Legacy Mode behavior
let _priority = undefined;

// Export a module configuration function
export const setInterceptResolutionConfig = (priority = 0) =>
  (_priority = priority);

/**
 * Note that this handler uses `DEFAULT_INTERCEPT_RESOLUTION_PRIORITY` to "pass" on this request. It is important to use
 * the default priority when your handler has no opinion on the request and the intent is to continue() by default.
 */
page.on('request', interceptedRequest => {
  if (request.isInterceptResolutionHandled()) return;
  if (
    interceptedRequest.url().endsWith('.png') ||
    interceptedRequest.url().endsWith('.jpg')
  )
    interceptedRequest.abort('failed', _priority);
  else
    interceptedRequest.continue(
      interceptedRequest.continueRequestOverrides(),
      DEFAULT_INTERCEPT_RESOLUTION_PRIORITY, // Unopinionated continuation
    );
});
```

----------------------------------------

TITLE: Defining WaitForOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the WaitForOptions interface used in Puppeteer. It includes properties for configuring wait operations such as timeout, abort signal, and lifecycle events to wait for.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.waitforoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface WaitForOptions
```

----------------------------------------

TITLE: Declaring PuppeteerNode Class in TypeScript
DESCRIPTION: Defines the TypeScript signature for the PuppeteerNode class, indicating it extends the base Puppeteer class and is exported.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteernode.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class PuppeteerNode extends Puppeteer
```

----------------------------------------

TITLE: Cleaning Artifacts
DESCRIPTION: Commands for removing stale generated artifacts from the project.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
npm run clean
# or specify the package
npm run clean --workspace <package>
```

----------------------------------------

TITLE: Implementing Browser Close Method in TypeScript
DESCRIPTION: Abstract method definition for closing a browser instance in Puppeteer. The method returns a Promise that resolves when the browser and all its associated pages have been closed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.close.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract close(): Promise<void>;
}
```

----------------------------------------

TITLE: Define Mouse.click Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `Mouse.click` method in Puppeteer. It takes horizontal (x) and vertical (y) coordinates and optional `MouseClickOptions` to perform a click action. The method returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.click.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract click(
    x: number,
    y: number,
    options?: Readonly<MouseClickOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Page.emulateMediaFeatures Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.emulateMediaFeatures method. It takes an optional array of MediaFeature objects and returns a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatemediafeatures.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateMediaFeatures(features?: MediaFeature[]): Promise<void>;
}
```

----------------------------------------

TITLE: Frame.title() Method Signature - Puppeteer TypeScript
DESCRIPTION: Defines the signature for the Frame.title() method in Puppeteer, showing it is a method of the Frame class that returns a Promise resolving to a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.title.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  title(): Promise<string>;
}
```

----------------------------------------

TITLE: Defining ElementHandle.scrollIntoView Method Signature - TypeScript
DESCRIPTION: Defines the signature for the `scrollIntoView` method within the `ElementHandle` class. This method is an asynchronous operation that scrolls the element represented by the handle into the viewport and returns a Promise that resolves when the action is complete. It takes no explicit parameters other than the `this` context, which must be an `ElementHandle<Element>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.scrollintoview.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  scrollIntoView(this: ElementHandle<Element>): Promise<void>;
}
```

----------------------------------------

TITLE: Dispatching touchstart event with Puppeteer Touchscreen (TypeScript)
DESCRIPTION: Documents the signature of the `touchStart` method within the `Touchscreen` class. This method is used to dispatch a `touchstart` event at the specified horizontal (x) and vertical (y) coordinates. It returns a Promise that resolves to a `TouchHandle` representing the started touch.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.touchscreen.touchstart.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Touchscreen {
  abstract touchStart(x: number, y: number): Promise<TouchHandle>;
}
```

----------------------------------------

TITLE: Defining ElementHandle.$() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.$() method. It takes a selector string and returns a Promise that resolves to an ElementHandle of the matching element or null if no match is found.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle._.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  $<Selector extends string>(
    selector: Selector,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}
```

----------------------------------------

TITLE: SerializedAXNode Interface Declaration in TypeScript
DESCRIPTION: TypeScript interface definition for SerializedAXNode that represents accessibility properties of a DOM node. This interface contains properties for handling various accessibility attributes like role, name, description, and state information.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.serializedaxnode.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface SerializedAXNode
```

----------------------------------------

TITLE: Defining Keyboard.down() Method in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Keyboard.down() method. It takes a key input and optional key down options, and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.down.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Keyboard {
  abstract down(
    key: KeyInput,
    options?: Readonly<KeyDownOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Page.select() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.select() method in the Page class. It takes a selector string and variable number of string values, returning a Promise of selected string values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.select.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  select(selector: string, ...values: string[]): Promise<string[]>;
}
```

----------------------------------------

TITLE: Defining Frame.url Method in TypeScript
DESCRIPTION: The abstract method definition for retrieving a frame's URL in the Frame class. This method returns the current URL of the frame as a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.url.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  abstract url(): string;
}
```

----------------------------------------

TITLE: Defining HTTPRequest.enqueueInterceptAction Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `HTTPRequest.enqueueInterceptAction` method. It accepts a `pendingHandler` function (which can be synchronous or return a Promise) and returns `void`. The method adds this handler to a queue for processing before request interception is finalized.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.enqueueinterceptaction.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  enqueueInterceptAction(
    pendingHandler: () => void | PromiseLike<unknown>,
  ): void;
}
```

----------------------------------------

TITLE: Checking for POST Data in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Returns true when the request has POST data. Note that HTTPRequest.postData() might still be undefined when this flag is true when the data is too long or not readily available in the decoded form. In that case, use HTTPRequest.fetchPostData().
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_11

LANGUAGE: javascript
CODE:
```
hasPostData()
```

----------------------------------------

TITLE: Getting Redirect Chain in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Returns a `redirectChain` which is a chain of requests initiated to fetch a resource. `redirectChain` is shared between all the requests of the same chain.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_19

LANGUAGE: javascript
CODE:
```
redirectChain()
```

----------------------------------------

TITLE: Implementing Target.page Method in TypeScript
DESCRIPTION: Defines the page() method on the Target class that returns a Promise resolving to either a Page object or null. This method is used to access the Page instance associated with a target, but will return null for targets that are not of type page, webview, or background_page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.page.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  page(): Promise<Page | null>;
}
```

----------------------------------------

TITLE: Getting Continue Request Overrides in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Retrieves the ContinueRequestOverrides that will be used if the interception is allowed to continue (i.e., abort() and respond() aren't called).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_5

LANGUAGE: javascript
CODE:
```
continueRequestOverrides()
```

----------------------------------------

TITLE: Getting Response Timing Information in Puppeteer TypeScript
DESCRIPTION: Retrieves detailed timing information for an HTTP response. This method is part of the `HTTPResponse` class and returns a `Protocol.Network.ResourceTiming` object or null if timing information is unavailable.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.timing.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract timing(): Protocol.Network.ResourceTiming | null;
}
```

----------------------------------------

TITLE: Getting Request Initiator in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Returns the initiator of the request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_13

LANGUAGE: javascript
CODE:
```
initiator()
```

----------------------------------------

TITLE: TypeScript Definition of BrowserContextEvents Interface
DESCRIPTION: This snippet shows the TypeScript definition for the BrowserContextEvents interface. It extends the generic Record type, mapping event types to unknown payload types, and serves as the basis for handling specific browser context events like target changes, creations, and destructions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontextevents.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface BrowserContextEvents extends Record<EventType, unknown>
```

----------------------------------------

TITLE: Defining HTTPRequest.response() Method in TypeScript
DESCRIPTION: This code snippet defines the response() method for the HTTPRequest class in TypeScript. The method returns either an HTTPResponse object or null if the response has not been received yet.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.response.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract response(): HTTPResponse | null;
}
```

----------------------------------------

TITLE: Defining PredefinedNetworkConditions in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the PredefinedNetworkConditions variable. It defines a readonly object with four network condition presets: Slow 3G, Fast 3G, Slow 4G, and Fast 4G.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.predefinednetworkconditions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
PredefinedNetworkConditions: Readonly<{
  'Slow 3G': NetworkConditions;
  'Fast 3G': NetworkConditions;
  'Slow 4G': NetworkConditions;
  'Fast 4G': NetworkConditions;
}>;
```

----------------------------------------

TITLE: Implementing Page.goForward Method in Puppeteer TypeScript
DESCRIPTION: This code snippet defines the signature of the goForward() method in the Page class of Puppeteer. The method navigates to the next page in history and accepts optional WaitForOptions parameters.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.goforward.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract goForward(options?: WaitForOptions): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Installing Puppeteer Angular Schematic
DESCRIPTION: Command to add Puppeteer-based e2e tests to an Angular project using ng add
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
ng add @puppeteer/ng-schematics
```

----------------------------------------

TITLE: Defining HTTPResponse.headers() Method in TypeScript
DESCRIPTION: This code snippet defines the abstract headers() method in the HTTPResponse class. The method returns an object containing HTTP headers associated with the response, where all header names are in lower-case.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.headers.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract headers(): Record<string, string>;
}
```

----------------------------------------

TITLE: Finalizing Interceptions in Puppeteer HTTPRequest (JavaScript)
DESCRIPTION: Awaits pending interception handlers and then decides how to fulfill the request interception.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_9

LANGUAGE: javascript
CODE:
```
finalizeInterceptions()
```

----------------------------------------

TITLE: Define InstalledBrowser.writeMetadata Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `writeMetadata` method of the `InstalledBrowser` class. It takes a single parameter, `metadata`, of type `Metadata`, and returns `void`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.installedbrowser.writemetadata.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class InstalledBrowser {
  writeMetadata(metadata: Metadata): void;
}
```

----------------------------------------

TITLE: Defining WaitForNetworkIdleOptions Interface in TypeScript
DESCRIPTION: Interface definition for configuring network idle wait behavior in Puppeteer. Extends WaitTimeoutOptions and includes properties for controlling concurrent connections and idle time thresholds.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.waitfornetworkidleoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface WaitForNetworkIdleOptions extends WaitTimeoutOptions
```

----------------------------------------

TITLE: Defining BrowserContext.targets Method - TypeScript
DESCRIPTION: Abstract method definition for retrieving all active targets within a browser context. Returns an array of Target objects representing active pages, service workers, or other targetable entities.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.targets.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract targets(): Target[];
}
```

----------------------------------------

TITLE: Implementing ElementHandle.touchStart Method in TypeScript for Puppeteer
DESCRIPTION: Method signature for the touchStart functionality in the ElementHandle class. This method scrolls the element into view if needed and initiates a touch event in the center of the element, returning a Promise that resolves to a TouchHandle object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.touchstart.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  touchStart(this: ElementHandle<Element>): Promise<TouchHandle>;
}
```

----------------------------------------

TITLE: Get Executable Path by Channel (TypeScript)
DESCRIPTION: Retrieves the default executable path for a specific Chrome release channel. This method is part of the PuppeteerNode class and takes a ChromeReleaseChannel enum value as input.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteernode.executablepath.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  executablePath(channel: ChromeReleaseChannel): string;
}
```

----------------------------------------

TITLE: Generating Single E2E Test File with Puppeteer Angular Schematic
DESCRIPTION: Command to create a single end-to-end test file using the Puppeteer Angular Schematic.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
ng generate @puppeteer/ng-schematics:e2e "<TestName>"
```

----------------------------------------

TITLE: Defining HTTPRequest Failure Method in TypeScript
DESCRIPTION: Abstract class definition showing the failure() method signature that returns either an error object with errorText or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.failure.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract failure(): {
    errorText: string;
  } | null;
}
```

----------------------------------------

TITLE: Defining Mouse.move Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the Mouse.move method, which moves the mouse cursor to specified x and y coordinates. It accepts optional configuration options and returns a Promise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.move.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract move(
    x: number,
    y: number,
    options?: Readonly<MouseMoveOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: TypeScript ElementHandle Generic contentFrame Method
DESCRIPTION: Generic method signature for getting a frame associated with any element. Returns a Promise that resolves to either a Frame object or null if no frame is associated.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.contentframe.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  abstract contentFrame(): Promise<Frame | null>;
}
```

----------------------------------------

TITLE: Accessing Redirect Chain with No Redirects - Puppeteer/TypeScript
DESCRIPTION: This example navigates to a URL that does not redirect, retrieves the response, accesses the request's redirect chain, and logs its length, showing it is empty.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.redirectchain.md#_snippet_2

LANGUAGE: typescript
CODE:
```
const response = await page.goto('https://google.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 0
```

----------------------------------------

TITLE: Implementing Page.removeExposedFunction in TypeScript
DESCRIPTION: Abstract class method definition for removing an exposed function from a page's window object. Takes a name parameter to identify which function to remove and returns a Promise that resolves when the function is removed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.removeexposedfunction.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract removeExposedFunction(name: string): Promise<void>;
}
```

----------------------------------------

TITLE: Defining MouseClickOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for MouseClickOptions that extends MouseOptions, providing configuration options for mouse click operations in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouseclickoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface MouseClickOptions extends MouseOptions
```

----------------------------------------

TITLE: Declaring detectBrowserPlatform Function in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the signature of the detectBrowserPlatform function. It takes no parameters and returns either a BrowserPlatform object or undefined. This function is likely used to determine the current browser platform in a Puppeteer automation context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.detectbrowserplatform.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function detectBrowserPlatform(): BrowserPlatform | undefined;
```

----------------------------------------

TITLE: Defining the fromSession Static Method in Connection Class - TypeScript
DESCRIPTION: TypeScript signature for the static fromSession method in the Connection class. This method takes a CDPSession object as input and returns either a Connection instance or undefined if no connection is associated with the session.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.fromsession.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Connection {
  static fromSession(session: CDPSession): Connection | undefined;
}
```

----------------------------------------

TITLE: Signature for Frame.select method (TypeScript)
DESCRIPTION: Provides the type signature for the `Frame.select` method, showing its parameters (`selector` and `values`) and return type (`Promise<string[]>`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.select.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  select(selector: string, ...values: string[]): Promise<string[]>;
}
```

----------------------------------------

TITLE: Implementing Touchscreen.touchEnd in TypeScript
DESCRIPTION: Method signature for touchEnd() that dispatches a touchend event on the first active touch. Returns a Promise that resolves when the event has been dispatched.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchscreen.touchend.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Touchscreen {
  touchEnd(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining HTTPResponse securityDetails Method (TypeScript)
DESCRIPTION: Defines the abstract securityDetails() method within the HTTPResponse class. This method is intended to return a SecurityDetails object if the HTTP response was received over a secure connection, or null if not.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.securitydetails.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPResponse {
  abstract securityDetails(): SecurityDetails | null;
}
```

----------------------------------------

TITLE: JSHandle.getProperties Method Signature (TypeScript)
DESCRIPTION: Defines the signature for the getProperties method of the JSHandle class in Puppeteer. It returns a Promise that resolves to a Map where keys are property names (string) and values are JSHandle instances.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.getproperties.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  getProperties(): Promise<Map<string, JSHandle>>;
}
```

----------------------------------------

TITLE: Defining TouchHandle.move Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the TouchHandle.move() method that dispatches touchMove events. The method takes x and y coordinates as parameters and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchhandle.move.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface TouchHandle {
  move(x: number, y: number): Promise<void>;
}
```

----------------------------------------

TITLE: Getting Frame Name or ID in Puppeteer
DESCRIPTION: Alternative approach to getting a frame's name or ID attribute by accessing the frame element and evaluating its properties.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const element = await frame.frameElement();
const nameOrId = await element.evaluate(frame => frame.name ?? frame.id);
```

----------------------------------------

TITLE: Page.exposeFunction Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the Page.exposeFunction method, which defines how to expose a Node.js function to the browser context. It takes a name parameter and a function to be executed in the Node.js context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.exposefunction.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract exposeFunction(
    name: string,
    pptrFunction:
      | Function
      | {
          default: Function;
        },
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining HTTPRequest.redirectChain Method Signature - TypeScript
DESCRIPTION: This snippet shows the abstract method signature for `redirectChain()` within the `HTTPRequest` class in TypeScript, indicating it returns an array of `HTTPRequest` objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.redirectchain.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract redirectChain(): HTTPRequest[];
}
```

----------------------------------------

TITLE: Stopping CSS Coverage in Puppeteer (TypeScript)
DESCRIPTION: This TypeScript snippet shows the signature of the `stopCSSCoverage` method within the `Coverage` class in Puppeteer. This method is asynchronous and returns a Promise that resolves to an array of `CoverageEntry` objects, representing the coverage reports for all stylesheets. Note that dynamically injected style tags without sourceURLs are not included in the report.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.coverage.stopcsscoverage.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Coverage {
  stopCSSCoverage(): Promise<CoverageEntry[]>;
}
```

----------------------------------------

TITLE: Stopping CSS Coverage Collection (TypeScript)
DESCRIPTION: This method stops the collection of CSS coverage information that was previously started. It returns a Promise that resolves with an array of `CoverageEntry` objects, detailing the collected coverage data.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.csscoverage.stop.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class CSSCoverage {
  stop(): Promise<CoverageEntry[]>;
}
```

----------------------------------------

TITLE: Fetching Untyped Property from JSHandle in TypeScript
DESCRIPTION: This simpler signature fetches a property by name without type constraints. It accepts a string property name and returns a Promise that resolves to a JSHandle containing the property value with an unknown type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.getproperty.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class JSHandle {
  getProperty(propertyName: string): Promise<JSHandle<unknown>>;
}
```

----------------------------------------

TITLE: Defining CookieSameSite Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the CookieSameSite type as a union of three string literals: 'Strict', 'Lax', and 'None'. It represents the possible values for a cookie's 'SameSite' attribute as described in the IETF draft for first-party cookies.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookiesamesite.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type CookieSameSite = 'Strict' | 'Lax' | 'None';
```

----------------------------------------

TITLE: Defining FrameAddScriptTagOptions Interface in TypeScript
DESCRIPTION: This snippet shows the basic signature for the FrameAddScriptTagOptions interface in TypeScript, which is used to configure how a script tag is added to a frame in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frameaddscripttagoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface FrameAddScriptTagOptions
```

----------------------------------------

TITLE: Delete Cookie Method Signature - Puppeteer Browser - TypeScript
DESCRIPTION: Defines the signature for the `deleteCookie` method within the `Browser` class in Puppeteer. This method accepts an array of `Cookie` objects and returns a Promise that resolves when the cookies are removed from the default browser context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.deletecookie.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  deleteCookie(...cookies: Cookie[]): Promise<void>;
}
```

----------------------------------------

TITLE: Stopping Screen Recording in Puppeteer using TypeScript
DESCRIPTION: This code snippet defines the stop() method for the ScreenRecorder class in Puppeteer. The method is asynchronous and returns a Promise that resolves to void, indicating the completion of stopping the screen recording.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.screenrecorder.stop.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ScreenRecorder {
  stop(): Promise<void>;
}
```

----------------------------------------

TITLE: Starting a touch on ElementHandle - TypeScript
DESCRIPTION: This TypeScript snippet shows the signature for the `touchStart` method of the `ElementHandle` class in Puppeteer. It indicates that the method is called on an `ElementHandle` instance and returns a `Promise` that resolves to a `TouchHandle`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.touchstart.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  touchStart(this: ElementHandle<Element>): Promise<TouchHandle>;
}
```

----------------------------------------

TITLE: HTTPRequest.abort Method Signature in TypeScript
DESCRIPTION: The method signature for the abort() method in the HTTPRequest class. It allows aborting requests with an optional error code and priority parameter for cooperative handling.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.abort.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abort(errorCode?: ErrorCode, priority?: number): Promise<void>;
}
```

----------------------------------------

TITLE: Defining TargetFilterCallback Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the TargetFilterCallback type as a function that takes a Target object as input and returns a boolean. It is used for filtering targets in Puppeteer operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.targetfiltercallback.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type TargetFilterCallback = (target: Target) => boolean;
```

----------------------------------------

TITLE: Retrieving Subject Alternative Names in Puppeteer (TypeScript)
DESCRIPTION: This method is part of the SecurityDetails class and returns an array of strings representing the subject alternative names (SANs) of a certificate. SANs are additional hostnames that the certificate is valid for, beyond the primary domain name.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.subjectalternativenames.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class SecurityDetails {
  subjectAlternativeNames(): string[];
}
```

----------------------------------------

TITLE: Defining SecurityDetails.issuer() Method in TypeScript
DESCRIPTION: This code snippet defines the issuer() method in the SecurityDetails class. The method returns a string representing the name of the issuer of the certificate.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.issuer.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class SecurityDetails {
  issuer(): string;
}
```

----------------------------------------

TITLE: Defining CommonEventEmitter.once() Method Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the CommonEventEmitter.once() method. It registers a handler that will be invoked only once when the specified event type is emitted. The method is generic, allowing type-safe event handling based on the Events type parameter.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.once.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface CommonEventEmitter {
  once<Key extends keyof Events>(
    type: Key,
    handler: Handler<Events[Key]>,
  ): this;
}
```

----------------------------------------

TITLE: Removing Event Listener - CommonEventEmitter (TypeScript)
DESCRIPTION: Defines the signature for the `off` method within the `CommonEventEmitter` interface. This method is used to remove a listener for a specific event `type`. An optional `handler` can be provided to remove only that specific handler for the event type; otherwise, all handlers for the type might be removed depending on the implementation. It returns the emitter instance (`this`) for chaining.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.commoneventemitter.off.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface CommonEventEmitter {
  off<Key extends keyof Events>(
    type: Key,
    handler?: Handler<Events[Key]>,
  ): this;
}
```

----------------------------------------

TITLE: Signature of BrowserContext.clearPermissionOverrides in TypeScript
DESCRIPTION: Defines the abstract signature of the `clearPermissionOverrides` method within the `BrowserContext` class, indicating it's an asynchronous method that returns a Promise resolving to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.clearpermissionoverrides.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract clearPermissionOverrides(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Puppeteer Mouse.wheel Method Signature - TypeScript
DESCRIPTION: Shows the abstract signature of the `wheel` method within the `Mouse` class in Puppeteer, indicating it dispatches a mousewheel event and accepts optional `MouseWheelOptions`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.wheel.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract wheel(options?: Readonly<MouseWheelOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Get Bounding Box - Puppeteer ElementHandle - TypeScript
DESCRIPTION: This method returns the bounding box of the element relative to the main frame. It returns null if the element is not part of the layout (e.g., display: none). The method returns a Promise that resolves to a BoundingBox object or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.boundingbox.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  boundingBox(): Promise<BoundingBox | null>;
}
```

----------------------------------------

TITLE: Get Frame Element Handle - Puppeteer TypeScript
DESCRIPTION: Retrieves the HandleFor the HTMLIFrameElement associated with the current frame, if one exists. Returns a Promise that resolves to the handle or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.frameelement.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  frameElement(): Promise<HandleFor<HTMLIFrameElement> | null>;
}
```

----------------------------------------

TITLE: Defining ElementHandle.boxModel() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the boxModel() method of the ElementHandle class. The method returns a Promise that resolves to either a BoxModel object or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.boxmodel.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  boxModel(): Promise<BoxModel | null>;
}
```

----------------------------------------

TITLE: Signature for emulateMediaFeatures method
DESCRIPTION: This snippet shows the TypeScript signature for the `Page.emulateMediaFeatures` method, indicating it accepts an optional array of `MediaFeature` objects and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulatemediafeatures.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateMediaFeatures(features?: MediaFeature[]): Promise<void>;
}
```

----------------------------------------

TITLE: Defining FileChooser.cancel Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript class definition for the FileChooser class with the cancel method. The cancel method is asynchronous and returns a Promise that resolves to void. It is used to close a file chooser without selecting any files.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.filechooser.cancel.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class FileChooser {
  cancel(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining ElementHandle.touchMove Method in TypeScript
DESCRIPTION: Method signature for touchMove() that handles touch movement on an element. The method scrolls the element into view if needed and moves the touch point to the element's center. It accepts an optional TouchHandle parameter and returns a Promise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.touchmove.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  touchMove(this: ElementHandle<Element>, touch?: TouchHandle): Promise<void>;
}
```

----------------------------------------

TITLE: Defining the ElementHandle.clickablePoint() Method in TypeScript
DESCRIPTION: The method signature for ElementHandle.clickablePoint() which returns a Promise resolving to the clickable Point of an element. It optionally accepts an Offset parameter to adjust the point location from the element's center.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.clickablepoint.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  clickablePoint(offset?: Offset): Promise<Point>;
}
```

----------------------------------------

TITLE: Declaring BrowserContextEvent Enum in TypeScript
DESCRIPTION: This snippet shows the TypeScript declaration signature for the `BrowserContextEvent` enum. The `declare const enum` syntax indicates that this enum is declared elsewhere and its members will be inlined at compile time.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontextevent.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare const enum BrowserContextEvent
```

----------------------------------------

TITLE: Check if Intercept Resolution Handled (TypeScript)
DESCRIPTION: This method checks if the intercept resolution for the HTTP request has already been processed. It is part of the `HTTPRequest` class in Puppeteer and returns a boolean value indicating the status.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.isinterceptresolutionhandled.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPRequest {
  isInterceptResolutionHandled(): boolean;
}
```

----------------------------------------

TITLE: Coverage.startJSCoverage Method Signature in TypeScript
DESCRIPTION: Defines the TypeScript method signature for the startJSCoverage method that initiates JavaScript coverage tracking. The method accepts optional JSCoverageOptions and returns a Promise that resolves when coverage starts.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.startjscoverage.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Coverage {
  startJSCoverage(options?: JSCoverageOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Handling WebWorker Lifecycle Events in Puppeteer
DESCRIPTION: This example demonstrates how to listen for WebWorker creation and destruction events, and how to log current workers on a page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
page.on('workercreated', worker =>
  console.log('Worker created: ' + worker.url()),
);
page.on('workerdestroyed', worker =>
  console.log('Worker destroyed: ' + worker.url()),
);

console.log('Current workers:');
for (const worker of page.workers()) {
  console.log('  ' + worker.url());
}
```

----------------------------------------

TITLE: Defining CookiePriority Type in TypeScript
DESCRIPTION: Defines a TypeScript type representing cookie priority levels following the IETF draft specification at https://tools.ietf.org/html/draft-west-cookie-priority-00. The type allows for three possible string values: 'Low', 'Medium', or 'High'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookiepriority.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type CookiePriority = 'Low' | 'Medium' | 'High';
```

----------------------------------------

TITLE: Stopping JSCoverage Collection (TypeScript)
DESCRIPTION: Stops the JavaScript coverage collection process. This method is asynchronous and returns a Promise that resolves with an array of JSCoverageEntry objects, representing the collected coverage data.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jscoverage.stop.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class JSCoverage {
  stop(): Promise<JSCoverageEntry[]>;
}
```

----------------------------------------

TITLE: Signature for Touchscreen.touchMove in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `touchMove` method of the `Touchscreen` class, indicating it takes two number parameters (`x`, `y`) representing the horizontal and vertical positions and returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.touchscreen.touchmove.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Touchscreen {
  touchMove(x: number, y: number): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Puppeteer PageEvents Interface - TypeScript
DESCRIPTION: This snippet defines the `PageEvents` TypeScript interface. It extends `Record<EventType, unknown>`, indicating that it maps event types (represented by `EventType`) to their corresponding data types (represented by the property types listed in the interface). This interface is used to type the event payloads received by event listeners attached to a Puppeteer `Page` object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.pageevents.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface PageEvents extends Record<EventType, unknown>
```

----------------------------------------

TITLE: Declaring PageEvent Enum in TypeScript
DESCRIPTION: Declaration of the PageEvent enum which contains all possible events a Puppeteer page instance can emit. This enum is used to type-safely reference page events in Puppeteer code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.pageevent.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare const enum PageEvent
```

----------------------------------------

TITLE: Dispatching touchend event with Puppeteer Touchscreen.touchEnd (TypeScript)
DESCRIPTION: The `touchEnd` method of the Puppeteer `Touchscreen` class is used to dispatch a `touchend` event. It operates on the first active touch and returns a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.touchscreen.touchend.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Touchscreen {
  touchEnd(): Promise<void>;
}
```

----------------------------------------

TITLE: Function Signature - computeExecutablePath - TypeScript
DESCRIPTION: Defines the signature for the computeExecutablePath function, showing its parameters and return type. It takes an options object and returns a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.computeexecutablepath.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare function computeExecutablePath(
  options: ComputeExecutablePathOptions,
): string;
```

----------------------------------------

TITLE: Get System Chrome Executable Path (TypeScript)
DESCRIPTION: This function signature shows how to call computeSystemExecutablePath. It takes an options object specifying the release channel and returns the string path to the executable if found, otherwise it throws an error.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.computesystemexecutablepath.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function computeSystemExecutablePath(
  options: SystemOptions,
): string;
```

----------------------------------------

TITLE: Implementing Selector-based Page.locator in TypeScript
DESCRIPTION: Method signature for creating a locator using a selector string. The method accepts a selector parameter and returns a Locator instance typed with NodeFor<Selector>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.locator.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  locator<Selector extends string>(
    selector: Selector,
  ): Locator<NodeFor<Selector>>;
}
```

----------------------------------------

TITLE: Setting Cookies in Puppeteer Browser (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the Browser.setCookie method in Puppeteer. It indicates that the method is part of the Browser class and accepts a variable number of CookieData objects as parameters, returning a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.setcookie.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  setCookie(...cookies: CookieData[]): Promise<void>;
}
```

----------------------------------------

TITLE: ElementHandle.drop(element) Signature - Puppeteer TypeScript
DESCRIPTION: Defines the signature for the ElementHandle.drop method that accepts another ElementHandle as the element to be dropped onto the current handle. This method performs a drop action.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.drop.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  drop(
    this: ElementHandle<Element>,
    element: ElementHandle<Element>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Coverage Class Signature Definition in TypeScript
DESCRIPTION: The TypeScript declaration for the Coverage class in Puppeteer, which provides methods to gather information about JS and CSS usage.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class Coverage
```

----------------------------------------

TITLE: Get Dialog Default Value - TypeScript
DESCRIPTION: Retrieves the default value associated with a dialog. This method is specifically relevant for 'prompt' type dialogs; for other types, it returns an empty string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.dialog.defaultvalue.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Dialog {
  defaultValue(): string;
}
```

----------------------------------------

TITLE: Cancel Device Request Prompt - TypeScript
DESCRIPTION: Cancels the device request prompt. This method returns a Promise that resolves when the prompt is successfully cancelled.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.devicerequestprompt.cancel.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class DeviceRequestPrompt {
  cancel(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Puppeteer PDFMargin Interface - TypeScript
DESCRIPTION: This snippet shows the TypeScript definition for the PDFMargin interface, which specifies the structure for defining margins (bottom, left, right, top) when generating a PDF using Puppeteer. Each margin property is optional and can be a string or a number.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.pdfmargin.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface PDFMargin
```

----------------------------------------

TITLE: Setting Timeout for Locator in TypeScript
DESCRIPTION: This snippet shows the signature of the `setTimeout` method on the `Locator` class in Puppeteer. It takes a `timeout` parameter (number) and returns a new `Locator` instance. The timeout value determines the maximum time allowed for actions performed with this locator.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.settimeout.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  setTimeout(timeout: number): Locator<T>;
}
```

----------------------------------------

TITLE: Defining the FrameEvents interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition for the FrameEvents interface. It extends a Record type mapping EventType to unknown, indicating it represents a collection of events where the specific payload type for each event is not strictly defined at this level.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frameevents.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface FrameEvents extends Record<EventType, unknown>
```

----------------------------------------

TITLE: Defining WebWorker Class in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the WebWorker class, which extends EventEmitter.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class WebWorker extends EventEmitter<Record<EventType, unknown>>
```

----------------------------------------

TITLE: Signature of Connection.dispose method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `dispose()` method, which is part of the `Connection` class. It indicates that the method takes no arguments and returns `void`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connection.dispose.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Connection {
  dispose(): void;
}
```

----------------------------------------

TITLE: Initializing Process Class in Puppeteer (TypeScript)
DESCRIPTION: This code snippet defines the constructor for the Process class in Puppeteer. It takes LaunchOptions as a parameter to initialize a new Process instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process._constructor_.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Process {
  constructor(opts: LaunchOptions);
}
```

----------------------------------------

TITLE: Defining SerializedAXNode.elementHandle() Method in TypeScript
DESCRIPTION: This code snippet defines the elementHandle() method for the SerializedAXNode interface. The method returns a Promise that resolves to an ElementHandle or null. It's used to get an ElementHandle for the AXNode if available, with a note that it might return an error if the underlying DOM element has been disposed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.serializedaxnode.elementhandle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface SerializedAXNode {
  elementHandle(): Promise<ElementHandle | null>;
}
```

----------------------------------------

TITLE: Defining getDownloadUrl Function in Typescript
DESCRIPTION: This Typescript code snippet defines the signature for the `getDownloadUrl` function. It takes the browser type, platform, build ID, and an optional base URL as input and returns a URL object for downloading the browser binary.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.getdownloadurl.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function getDownloadUrl(
  browser: Browser,
  platform: BrowserPlatform,
  buildId: string,
  baseUrl?: string
): URL;
```

----------------------------------------

TITLE: Get Content Frame for HTMLIFrameElement (TypeScript)
DESCRIPTION: This signature of the contentFrame method is used specifically for ElementHandle instances representing HTMLIFrameElements. It is guaranteed to resolve to a Frame object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.contentframe.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  abstract contentFrame(this: ElementHandle<HTMLIFrameElement>): Promise<Frame>;
}
```

----------------------------------------

TITLE: Retrieving Cookies in BrowserContext with Puppeteer in TypeScript
DESCRIPTION: This code defines the abstract cookies() method in the BrowserContext class that retrieves all cookies from the browser context. The method returns a Promise that resolves to an array of Cookie objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.cookies.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract cookies(): Promise<Cookie[]>;
}
```

----------------------------------------

TITLE: Defining HTTPRequest.enqueueInterceptAction Method in TypeScript
DESCRIPTION: This code snippet shows the signature of the enqueueInterceptAction method in the HTTPRequest class. The method takes a pendingHandler parameter that can be a function returning void or a Promise-like object. This method is used to add async request handlers to the processing queue for request interception.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.enqueueinterceptaction.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  enqueueInterceptAction(
    pendingHandler: () => void | PromiseLike<unknown>,
  ): void;
}
```

----------------------------------------

TITLE: Mouse.dragEnter Method Signature in TypeScript
DESCRIPTION: Defines the signature of the dragEnter method in the Mouse class that dispatches a dragenter event. The method takes a target point and drag data as parameters and returns a Promise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.dragenter.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract dragEnter(
    target: Point,
    data: Protocol.Input.DragData,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Keyboard.sendCharacter Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the sendCharacter method in the Keyboard class. It takes a single string parameter and returns a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.sendcharacter.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Keyboard {
  abstract sendCharacter(char: string): Promise<void>;
}
```

----------------------------------------

TITLE: Implementing FileChooser Accept Method in TypeScript - Puppeteer
DESCRIPTION: TypeScript class definition for the FileChooser.accept() method that handles file selection. The method takes an array of file paths as input and returns a Promise<void>. Files paths can be absolute or relative to the current working directory, though absolute paths are required for remote Chrome environments.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.filechooser.accept.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class FileChooser {
  accept(paths: string[]): Promise<void>;
}
```

----------------------------------------

TITLE: Defining WebWorker.evaluateHandle() Method Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the evaluateHandle() method for the WebWorker class. It uses generic types to handle various function parameters and return types.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.evaluatehandle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class WebWorker {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    func: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}
```

----------------------------------------

TITLE: Update E2E Test baseUrl in utils.ts
DESCRIPTION: Updates the `baseUrl` constant in the E2E test utility file (`utils.ts`) to match the custom port configured in `angular.json`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_4

LANGUAGE: typescript
CODE:
```
const baseUrl = 'http://localhost:8080';
```

----------------------------------------

TITLE: Define ExperimentsConfiguration Type (TypeScript)
DESCRIPTION: Defines the `ExperimentsConfiguration` type in Puppeteer. This type is used to configure experimental features and is currently defined as an empty record (`Record<string, never>`), indicating no experimental options are available or configured via this type yet.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.experimentsconfiguration.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type ExperimentsConfiguration = Record<string, never>;
```

----------------------------------------

TITLE: Implementing Extension Transport Closing Method in TypeScript for Puppeteer
DESCRIPTION: This code defines the close() method signature in the ExtensionTransport class. The method closes the extension transport connection and doesn't return any value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.extensiontransport.close.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ExtensionTransport {
  close(): void;
}
```

----------------------------------------

TITLE: Declaring HTTPRequest ResourceType Method in TypeScript
DESCRIPTION: Abstract class definition showing the resourceType method signature which returns a ResourceType enum value indicating how the rendering engine perceives the requested resource.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.resourcetype.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract resourceType(): ResourceType;
}
```

----------------------------------------

TITLE: ScreenRecorder stop Method Signature - TypeScript
DESCRIPTION: Defines the signature for the asynchronous stop method within the ScreenRecorder class. This method is used to halt the recording process and returns a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.screenrecorder.stop.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ScreenRecorder {
  stop(): Promise<void>;
}
```

----------------------------------------

TITLE: Signature for TouchHandle.move in TypeScript
DESCRIPTION: Defines the signature of the `move` method within the `TouchHandle` interface, showing it accepts two numbers (x, y) and returns a Promise resolving to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.touchhandle.move.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface TouchHandle {
  move(x: number, y: number): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Puppeteer Offset Interface (TypeScript)
DESCRIPTION: This snippet shows the TypeScript definition for the `Offset` interface in Puppeteer. It specifies the structure required for objects representing coordinate offsets, consisting of numerical x and y properties.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.offset.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Offset
```

----------------------------------------

TITLE: Retrieving Security Protocol with SecurityDetails Class - TypeScript
DESCRIPTION: Method definition for getting the security protocol (e.g. 'TLS 1.2') from a SecurityDetails instance. Returns a string representing the protocol version being used for the secure connection.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.protocol.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class SecurityDetails {
  protocol(): string;
}
```

----------------------------------------

TITLE: Declaring Frame.frameElement() Method in TypeScript
DESCRIPTION: TypeScript class method signature for retrieving the HTMLIFrameElement handle associated with a Puppeteer Frame. Returns a Promise that resolves to either a HandleFor<HTMLIFrameElement> or null if no frame element exists.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.frameelement.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  frameElement(): Promise<HandleFor<HTMLIFrameElement> | null>;
}
```

----------------------------------------

TITLE: Defining Connection.createSession Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the createSession method on the Connection class. It accepts target information and returns a Promise resolving to a CDPSession, representing a new Chrome DevTools Protocol session.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connection.createsession.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Connection {
  createSession(targetInfo: Protocol.Target.TargetInfo): Promise<CDPSession>;
}
```

----------------------------------------

TITLE: Retrieving Default Timeout in Puppeteer Page Class
DESCRIPTION: The abstract method signature for getDefaultTimeout() in the Page class. This method returns the maximum time in milliseconds configured as the default timeout for the page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.getdefaulttimeout.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract getDefaultTimeout(): number;
}
```

----------------------------------------

TITLE: Autofilling Credit Card Form Example - Puppeteer TypeScript
DESCRIPTION: Demonstrates how to use ElementHandle.autofill() to populate credit card form fields automatically. This functionality is currently limited to Chrome browser in new headless and headful modes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// Select an input on the credit card form.
const name = await page.waitForSelector('form #name');
// Trigger autofill with the desired data.
await name.autofill({
  creditCard: {
    number: '4444444444444444',
    name: 'John Smith',
    expiryMonth: '01',
    expiryYear: '2030',
    cvc: '123',
  },
});
```

----------------------------------------

TITLE: Signature of puppeteer variable (TypeScript)
DESCRIPTION: This snippet shows the TypeScript type signature for the main `puppeteer` variable, indicating it is of type `PuppeteerCore.PuppeteerNode`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteer.md#_snippet_0

LANGUAGE: typescript
CODE:
```
puppeteer: PuppeteerCore.PuppeteerNode;
```

----------------------------------------

TITLE: Defining ClickOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the ClickOptions interface, which extends MouseClickOptions. It includes an optional 'offset' property of type Offset, representing the clickable point offset relative to the top-left corner of the border box.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.clickoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ClickOptions extends MouseClickOptions
```

----------------------------------------

TITLE: Implementing EventEmitter.once Method in TypeScript
DESCRIPTION: Class method signature for EventEmitter.once() which registers a one-time event listener. The listener automatically removes itself after being triggered once, unlike the 'on' method which remains active until explicitly removed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.once.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class EventEmitter {
  once<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}
```

----------------------------------------

TITLE: Retrieving Page Metrics in Puppeteer using TypeScript
DESCRIPTION: Definition of the Page.metrics() method that returns a Promise resolving to a Metrics object. This method allows accessing various browser performance metrics like heap usage, document count, and execution durations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.metrics.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract metrics(): Promise<Metrics>;
}
```

----------------------------------------

TITLE: Defining ProtocolType Union Type in TypeScript for Puppeteer
DESCRIPTION: This code defines the ProtocolType type as a union of two string literals that specify the available protocols for browser automation in Puppeteer: 'cdp' (Chrome DevTools Protocol) and 'webDriverBiDi' (WebDriver BiDirectional Protocol).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.protocoltype.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type ProtocolType = 'cdp' | 'webDriverBiDi';
```

----------------------------------------

TITLE: Retrieving Console Arguments with ConsoleMessage.args() in TypeScript
DESCRIPTION: Method signature for the ConsoleMessage.args() method that returns an array of JSHandle objects representing arguments passed to a console message. This allows access to console arguments when capturing browser console output in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.args.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ConsoleMessage {
  args(): JSHandle[];
}
```

----------------------------------------

TITLE: Check Download Capability - TypeScript
DESCRIPTION: Checks if a download is possible based on the provided installation options. This function is asynchronous and returns a Promise resolving to a boolean.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.candownload.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function canDownload(options: InstallOptions): Promise<boolean>;
```

----------------------------------------

TITLE: Defining Browser Enum in TypeScript for Puppeteer
DESCRIPTION: TypeScript enumeration that defines the supported browser types in Puppeteer. This enum includes values for Chrome, ChromeDriver, Chrome Headless Shell, Chromium, and Firefox browsers, allowing type-safe browser selection in Puppeteer automation scripts.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.browser.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare enum Browser
```

----------------------------------------

TITLE: Page Class Definition in TypeScript
DESCRIPTION: Abstract class definition for the Page class that extends EventEmitter with PageEvents type parameter.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Page extends EventEmitter<PageEvents>
```

----------------------------------------

TITLE: Getting HTTPRequest Initiator (TypeScript)
DESCRIPTION: Defines the signature for the `initiator()` method within the `HTTPRequest` class, indicating it returns the request's initiator or undefined.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.initiator.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPRequest {
  abstract initiator(): Protocol.Network.Initiator | undefined;
}
```

----------------------------------------

TITLE: Defining the HTTPResponse.remoteAddress Method in TypeScript
DESCRIPTION: Abstract method definition within the HTTPResponse class that returns connection information for the remote server. The method returns a RemoteAddress object containing IP address and port information.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.remoteaddress.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract remoteAddress(): RemoteAddress;
}
```

----------------------------------------

TITLE: Defining CLI.run Method in TypeScript
DESCRIPTION: Method signature for the CLI.run() method that takes an array of string arguments and returns a Promise resolving to void. This is likely used for processing command line arguments in Puppeteer's CLI interface.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cli.run.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class CLI {
  run(argv: string[]): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Puppeteer PaperFormat Type (TypeScript)
DESCRIPTION: This TypeScript type definition specifies the valid string formats for paper sizes used in Puppeteer's PDF printing functionality. It allows for uppercase, capitalized, or lowercase variations of the underlying `LowerCasePaperFormat` type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.paperformat.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type PaperFormat =
  | Uppercase<LowerCasePaperFormat>
  | Capitalize<LowerCasePaperFormat>
  | LowerCasePaperFormat;
```

----------------------------------------

TITLE: Retrieving Response Buffer in Puppeteer TypeScript
DESCRIPTION: Method signature for HTTPResponse.buffer() that returns a Promise resolving to a Buffer containing the response body. Note that the returned buffer may be re-encoded by the browser based on HTTP headers or heuristics, potentially leading to incorrect encoding if browser detection fails.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.buffer.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  buffer(): Promise<Buffer>;
}
```

----------------------------------------

TITLE: Example Usage of Page.queryObjects in Puppeteer (TypeScript)
DESCRIPTION: Demonstrates how to use `page.queryObjects` to find all instances of the `Map` prototype on the page's JavaScript heap. It involves creating a Map, getting a handle to its prototype, querying for instances, counting them, and finally disposing of the handles.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.queryobjects.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
// Create a Map object
await page.evaluate(() => (window.map = new Map()));
// Get a handle to the Map object prototype
const mapPrototype = await page.evaluateHandle(() => Map.prototype);
// Query all map instances into an array
const mapInstances = await page.queryObjects(mapPrototype);
// Count amount of map objects in heap
const count = await page.evaluate(maps => maps.length, mapInstances);
await mapInstances.dispose();
await mapPrototype.dispose();
```

----------------------------------------

TITLE: Getting Target URL Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `Target.url()` method in Puppeteer. It indicates that the method is abstract and returns a string, representing the URL of the target.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.target.url.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract url(): string;
}
```

----------------------------------------

TITLE: Declaring CSSCoverage class (TypeScript)
DESCRIPTION: Declares the CSSCoverage class, which is part of the Puppeteer library and is used for collecting CSS coverage information.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.csscoverage.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class CSSCoverage
```

----------------------------------------

TITLE: Initializing CSSCoverage Class in Puppeteer (TypeScript)
DESCRIPTION: The constructor for the CSSCoverage class in Puppeteer. It takes a CDPSession object as a parameter. This class is likely used for measuring CSS coverage in web pages during Puppeteer automation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.csscoverage._constructor_.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class CSSCoverage {
  constructor(client: CDPSession);
}
```

----------------------------------------

TITLE: Defining Mouse.up Method Signature in TypeScript for Puppeteer
DESCRIPTION: TypeScript definition for the Mouse.up() method in Puppeteer's Mouse class. This method releases the mouse button and accepts an optional MouseOptions parameter. It returns a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.up.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract up(options?: Readonly<MouseOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Get Initiating Frame - Puppeteer HTTPResponse - TypeScript
DESCRIPTION: Retrieves the Frame object that initiated this HTTP response. Returns null if the response corresponds to navigating to an error page. The return type is either a Frame object or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.frame.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPResponse {
  abstract frame(): Frame | null;
}
```

----------------------------------------

TITLE: Get Version Comparator Function Signature - TypeScript
DESCRIPTION: This TypeScript signature defines the `getVersionComparator` function. It accepts a `Browser` enum value and returns a function that takes two strings (representing versions) and returns a number, suitable for use in sorting algorithms.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.getversioncomparator.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare function getVersionComparator(
  browser: Browser,
): (a: string, b: string) => number;
```

----------------------------------------

TITLE: Initializing Progress Callback Function in Puppeteer TypeScript
DESCRIPTION: Function signature for creating a progress callback that monitors download progress. Takes a Browser instance and buildId string as parameters and returns a callback function that receives downloadedBytes and totalBytes as numbers.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.makeprogresscallback.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function makeProgressCallback(
  browser: Browser,
  buildId: string,
): (downloadedBytes: number, totalBytes: number) => void;
```

----------------------------------------

TITLE: Implementing HTTPRequest.interceptResolutionState Method in TypeScript
DESCRIPTION: Method signature for interceptResolutionState() that returns an InterceptResolutionState object containing the current resolution action (abort, respond, continue, disabled, none, or already-handled) and optional priority number.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.interceptresolutionstate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  interceptResolutionState(): InterceptResolutionState;
}
```

----------------------------------------

TITLE: Setting Stable Bounding Box Wait - Puppeteer Locator - TypeScript
DESCRIPTION: This method creates a new Locator instance with the specified setting for waiting for a stable bounding box. It takes a boolean `value` to enable or disable this wait and returns the new Locator instance. The default value for `value` is `true`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.setwaitforstableboundingbox.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  setWaitForStableBoundingBox<ElementType extends Element>(
    this: Locator<ElementType>,
    value: boolean,
  ): Locator<ElementType>;
}
```

----------------------------------------

TITLE: Defining SupportedWebDriverCapabilities Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for WebDriver BiDi capabilities configuration. The interface includes optional properties for alwaysMatch and firstMatch capabilities that extend the SupportedWebDriverCapability type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.supportedwebdrivercapabilities.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface SupportedWebDriverCapabilities
```

----------------------------------------

TITLE: Signature for Page.waitForDevicePrompt - TypeScript
DESCRIPTION: Defines the abstract method signature for `waitForDevicePrompt` within the `Page` class, showing it accepts optional `WaitTimeoutOptions` and returns a Promise resolving to a `DeviceRequestPrompt`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.waitfordeviceprompt.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract waitForDevicePrompt(
    options?: WaitTimeoutOptions,
  ): Promise<DeviceRequestPrompt>;
}
```

----------------------------------------

TITLE: Method Signature for Page.waitForDevicePrompt in TypeScript
DESCRIPTION: The TypeScript signature for the waitForDevicePrompt method in the Page class. This method accepts optional timeout options and returns a Promise that resolves to a DeviceRequestPrompt object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitfordeviceprompt.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract waitForDevicePrompt(
    options?: WaitTimeoutOptions,
  ): Promise<DeviceRequestPrompt>;
}
```

----------------------------------------

TITLE: Defining the AwaitedLocator Type (TypeScript)
DESCRIPTION: This snippet defines the AwaitedLocator type. It's a conditional type that takes a type T and, if T is a Locator type with an inferred type S, it returns S; otherwise, it returns never. This is used to get the type of the element that the Locator resolves to.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.awaitedlocator.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type AwaitedLocator<T> = T extends Locator<infer S> ? S : never;
```

----------------------------------------

TITLE: Accessing RemoteObject with JSHandle in TypeScript
DESCRIPTION: This snippet shows the signature of the `remoteObject()` method on the `JSHandle` class. It returns a `Protocol.Runtime.RemoteObject`, providing direct access to the underlying DevTools Protocol object representation of the handle's value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.remoteobject.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  abstract remoteObject(): Protocol.Runtime.RemoteObject;
}
```

----------------------------------------

TITLE: Defining GetInstalledBrowsersOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition that specifies the structure for browser installation options. Contains a single property 'cacheDir' of type string that defines the root path of the cache directory.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.getinstalledbrowsersoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface GetInstalledBrowsersOptions
```

----------------------------------------

TITLE: Implementing Locator.setWaitForEnabled Method in TypeScript
DESCRIPTION: TypeScript implementation of the setWaitForEnabled method in the Locator class. This method creates a new locator instance by cloning the current one and configures whether to wait for input elements to become enabled before performing actions like click and fill.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.setwaitforenabled.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  setWaitForEnabled<NodeType extends Node>(
    this: Locator<NodeType>,
    value: boolean,
  ): Locator<NodeType>;
}
```

----------------------------------------

TITLE: Getting Target Type in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows the signature of the `Target.type()` method in the Puppeteer `Target` class. The method is abstract and returns a `TargetType` value, indicating the kind of target (e.g., page, background page).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.target.type.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract type(): TargetType;
}
```

----------------------------------------

TITLE: Defining Page.waitForRequest Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.waitForRequest method. It takes a URL or predicate function and optional timeout options, returning a Promise that resolves to an HTTPRequest object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitforrequest.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  waitForRequest(
    urlOrPredicate: string | AwaitablePredicate<HTTPRequest>,
    options?: WaitTimeoutOptions,
  ): Promise<HTTPRequest>;
}
```

----------------------------------------

TITLE: ElementHandle.toElement Method Signature in TypeScript
DESCRIPTION: The TypeScript signature of the toElement method in the ElementHandle class. This method converts the current element handle to a handle for a specific HTML or SVG element type based on the provided tag name.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.toelement.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  toElement<K extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap>(
    tagName: K,
  ): Promise<HandleFor<ElementFor<K>>>;
}
```

----------------------------------------

TITLE: Get Default Timeout - Puppeteer Page - TypeScript
DESCRIPTION: Defines the signature for the abstract getDefaultTimeout method within the Puppeteer Page class, indicating it returns a number representing the maximum time in milliseconds.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.getdefaulttimeout.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract getDefaultTimeout(): number;
}
```

----------------------------------------

TITLE: Defining CookiePriority Type in TypeScript
DESCRIPTION: This snippet defines the `CookiePriority` type as a union of string literals representing the three possible priority levels for a cookie: 'Low', 'Medium', and 'High'. This type is used within Puppeteer to specify or retrieve the priority of a cookie.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cookiepriority.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type CookiePriority = 'Low' | 'Medium' | 'High';
```

----------------------------------------

TITLE: ScreenRecorder Class Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript declaration for the ScreenRecorder class, indicating that it extends the Node.js PassThrough stream class. This highlights its role in processing data streams, likely related to the screen recording output.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.screenrecorder.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class ScreenRecorder extends PassThrough
```

----------------------------------------

TITLE: Defining setWaitForStableBoundingBox Method for Locator Class in TypeScript
DESCRIPTION: This code snippet defines the setWaitForStableBoundingBox method for the Locator class. It creates a new locator instance by cloning the current one and specifies whether to wait for the element's bounding box to stabilize between animation frames.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.setwaitforstableboundingbox.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  setWaitForStableBoundingBox<ElementType extends Element>(
    this: Locator<ElementType>,
    value: boolean,
  ): Locator<ElementType>;
}
```

----------------------------------------

TITLE: Constructing CLI Instance - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `CLI` class constructor. It accepts an optional `opts` parameter which can be a string or a complex object for configuration, and an optional `rl` parameter which is a `readline.Interface` instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cli._constructor_.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class CLI {
  constructor(
    opts?:
      | string
      | {
          cachePath?: string;
          scriptName?: string;
          version?: string;
          prefixCommand?: {
            cmd: string;
            description: string;
          };
          allowCachePathOverride?: boolean;
          pinnedBrowsers?: Partial<
            Record<
              Browser,
              {
                buildId: string;
                skipDownload: boolean;
              }
            >
          >;
        },
    rl?: readline.Interface,
  );
}
```

----------------------------------------

TITLE: Defining CoverageEntry Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for CoverageEntry, which represents one entry of a coverage report in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverageentry.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CoverageEntry
```

----------------------------------------

TITLE: Defining Frame.tap() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the tap() method for the Frame class in Puppeteer. It takes a selector string as a parameter and returns a Promise that resolves to void. The method taps the first element that matches the provided selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.tap.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  tap(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: Signature of trimCache() function in TypeScript
DESCRIPTION: Provides the TypeScript signature for the `trimCache` function. This function is asynchronous and returns a Promise that resolves to void, indicating it performs an action without returning a specific value upon completion. It likely clears an internal cache within the Puppeteer context.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.trimcache.md#_snippet_0

LANGUAGE: typescript
CODE:
```
trimCache: () => Promise<void>;
```

----------------------------------------

TITLE: Signature for Page.screencast Method in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the Page.screencast method, indicating it accepts an optional ScreencastOptions object and returns a Promise resolving to a ScreenRecorder instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.screencast.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  screencast(options?: Readonly<ScreencastOptions>): Promise<ScreenRecorder>;
}
```

----------------------------------------

TITLE: Declaring ElementHandle.backendNodeId Method in TypeScript
DESCRIPTION: This code snippet defines the backendNodeId() method in the ElementHandle class. The method is asynchronous and returns a Promise that resolves to a number representing the DOM.BackendNodeId for the element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.backendnodeid.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  abstract backendNodeId(): Promise<number>;
}
```

----------------------------------------

TITLE: Define Page.emulateTimezone Method Signature - TypeScript
DESCRIPTION: Defines the abstract signature for the emulateTimezone method within the Puppeteer Page class. This method allows changing the timezone of the page by providing a timezone ID string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulatetimezone.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateTimezone(timezoneId?: string): Promise<void>;
}
```

----------------------------------------

TITLE: Registering Custom Query Handler for React Components (TypeScript)
DESCRIPTION: Demonstrates how to register a custom query handler named 'react-component' using `Puppeteer.registerCustomQueryHandler`. It provides dummy `queryOne` and `queryAll` implementations that delegate to `querySelector` and `querySelectorAll`, illustrating how to access the page context to find elements based on custom logic, such as React component properties.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/page-interactions.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
Puppeteer.registerCustomQueryHandler('react-component', {
  queryOne: (elementOrDocument, selector) => {
    // Dummy example just delegates to querySelector but you can find your
    // React component because this callback runs in the page context.
    return elementOrDocument.querySelector(`[id="${CSS.escape(selector)}"]`);
  },
  queryAll: (elementOrDocument, selector) => {
    // Dummy example just delegates to querySelector but you can find your
    // React component because this callback runs in the page context.
    return elementOrDocument.querySelectorAll(`[id="${CSS.escape(selector)}"]`);
  }
});
```

----------------------------------------

TITLE: Declaring LocatorEvent Enum in TypeScript
DESCRIPTION: This snippet declares the `LocatorEvent` enum, which enumerates the types of events that a Puppeteer locator instance can emit, such as before performing an action.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locatorevent.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare enum LocatorEvent
```

----------------------------------------

TITLE: Unregistering Custom Query Handler in Puppeteer (TypeScript)
DESCRIPTION: This code snippet shows the signature of the unregisterCustomQueryHandler static method in the Puppeteer class. It takes a string parameter 'name' and returns void, used to unregister a custom query handler for a given name.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.unregistercustomqueryhandler.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Puppeteer {
  static unregisterCustomQueryHandler(name: string): void;
}
```

----------------------------------------

TITLE: Defining Page.hover Method in TypeScript
DESCRIPTION: TypeScript class definition showing the hover method signature that takes a selector string parameter and returns a Promise. The method hovers over the first element matching the provided selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.hover.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  hover(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: Keyboard.press Method Signature - TypeScript
DESCRIPTION: Defines the abstract signature for the 'press' method within the 'Keyboard' class, showing its required 'key' parameter of type KeyInput, an optional 'options' parameter of type Readonly<KeyPressOptions>, and its return type of Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keyboard.press.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Keyboard {
  abstract press(
    key: KeyInput,
    options?: Readonly<KeyPressOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Getting Certificate Issuer (TypeScript)
DESCRIPTION: Retrieves the name of the certificate issuer from the SecurityDetails object. This method returns a string representing the issuer's name.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.securitydetails.issuer.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class SecurityDetails {
  issuer(): string;
}
```

----------------------------------------

TITLE: Clearing Custom Query Handlers in Puppeteer (TypeScript)
DESCRIPTION: Unregisters all custom query handlers that were previously registered using `Puppeteer.registerCustomQueryHandler`. This method takes no arguments and returns void. It is a static method of the Puppeteer class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteer.clearcustomqueryhandlers.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Puppeteer {
  static clearCustomQueryHandlers(): void;
}
```

----------------------------------------

TITLE: Defining Device Interface in TypeScript for Puppeteer
DESCRIPTION: TypeScript interface definition for Device in Puppeteer. This interface includes properties for setting the userAgent string and viewport configurations needed for device emulation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.device.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Device
```

----------------------------------------

TITLE: Connection.url Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `url()` method of the `Connection` class. This method is used to retrieve the URL associated with the connection. It takes no arguments and returns a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connection.url.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Connection {
  url(): string;
}
```

----------------------------------------

TITLE: Defining ContinueRequestOverrides Interface in TypeScript for Puppeteer
DESCRIPTION: TypeScript interface definition for ContinueRequestOverrides, which is used to modify properties of intercepted HTTP requests in Puppeteer. It contains optional properties for customizing headers, method, postData, and URL.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.continuerequestoverrides.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ContinueRequestOverrides
```

----------------------------------------

TITLE: Defining Puppeteer MouseClickOptions Interface (TypeScript)
DESCRIPTION: This snippet shows the TypeScript definition for the `MouseClickOptions` interface in Puppeteer. It specifies that this interface extends the `MouseOptions` interface, inheriting its properties and adding click-specific options.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouseclickoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface MouseClickOptions extends MouseOptions
```

----------------------------------------

TITLE: Defining WaitForSelectorOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the WaitForSelectorOptions interface used in Puppeteer for configuring selector waiting behavior. It includes optional properties for controlling visibility, timeout, and cancellation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.waitforselectoroptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface WaitForSelectorOptions
```

----------------------------------------

TITLE: Defining InterceptResolutionAction Enum in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the InterceptResolutionAction enum used in Puppeteer for specifying how to handle intercepted network requests. It includes actions such as abort, continue, respond, and others.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.interceptresolutionaction.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare enum InterceptResolutionAction
```

----------------------------------------

TITLE: Sending Commands Puppeteer TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the `send` method on the `Connection` class. It is a generic method used to send commands over the connection, taking the command method name, optional parameters, and optional options, and returning a Promise that resolves with the command's result.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connection.send.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Connection {
  send<T extends keyof ProtocolMapping.Commands>(
    method: T,
    params?: ProtocolMapping.Commands[T]['paramsType'][0],
    options?: CommandOptions,
  ): Promise<ProtocolMapping.Commands[T]['returnType']>;
}
```

----------------------------------------

TITLE: Declaring DeviceRequestPrompt Class
DESCRIPTION: Declares the DeviceRequestPrompt class in TypeScript, indicating its availability for use within the Puppeteer library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.devicerequestprompt.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class DeviceRequestPrompt
```

----------------------------------------

TITLE: Signature of Page.emulateMediaType Method (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the abstract emulateMediaType method within the Puppeteer Page class, indicating it accepts an optional string type and returns a Promise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulatemediatype.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateMediaType(type?: string): Promise<void>;
}
```

----------------------------------------

TITLE: Cloning a Puppeteer Locator (TypeScript)
DESCRIPTION: Defines the signature for the clone method within the Puppeteer Locator class. This method creates and returns a new instance of the Locator that is a copy of the original.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.clone.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  clone(): Locator<T>;
}
```

----------------------------------------

TITLE: ExtensionTransport.connectTab Method Signature in TypeScript
DESCRIPTION: The method signature for the static connectTab method of the ExtensionTransport class, which establishes a connection to a specific browser tab identified by its tab ID.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.extensiontransport.connecttab.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ExtensionTransport {
  static connectTab(tabId: number): Promise<ExtensionTransport>;
}
```

----------------------------------------

TITLE: Defining GetInstalledBrowsersOptions Interface (TypeScript)
DESCRIPTION: This code snippet shows the TypeScript definition for the `GetInstalledBrowsersOptions` interface. This interface is used to provide configuration options, such as the cache directory path, when retrieving information about installed browsers.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.getinstalledbrowsersoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface GetInstalledBrowsersOptions
```

----------------------------------------

TITLE: Defining Puppeteer AutofillData Interface (TypeScript)
DESCRIPTION: This snippet defines the basic structure of the `AutofillData` interface in TypeScript, used within Puppeteer for specifying data to be autofilled into forms or input fields. It serves as a type definition for the data structure expected by autofill-related methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.autofilldata.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface AutofillData
```

----------------------------------------

TITLE: Defining Page.removeExposedFunction Method Signature (TypeScript)
DESCRIPTION: This snippet shows the abstract method signature for `removeExposedFunction` within the `Page` class. It indicates the method accepts a single string parameter `name` and returns a `Promise<void>`, signifying an asynchronous operation that completes without returning a specific value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.removeexposedfunction.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract removeExposedFunction(name: string): Promise<void>;
}
```

----------------------------------------

TITLE: Defining ElementHandle.dragAndDrop Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the dragAndDrop method within the ElementHandle class. This method takes a target ElementHandle and optional options object with a delay parameter. The method is used to perform drag and drop operations from one element to another.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.draganddrop.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  dragAndDrop(
    this: ElementHandle<Element>,
    target: ElementHandle<Node>,
    options?: {
      delay: number;
    },
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining HTTPRequest.redirectChain Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the redirectChain() method in the HTTPRequest class. It returns an array of HTTPRequest objects representing the chain of redirects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.redirectchain.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract redirectChain(): HTTPRequest[];
}
```

----------------------------------------

TITLE: Setting Timeout for Puppeteer Locator in TypeScript
DESCRIPTION: Method signature for setTimeout in the Locator class. This method clones the current locator and sets a new timeout value for locator actions. A timeout value of 0 disables the timeout completely. If not specified, uses Page.getDefaultTimeout() as the default value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.settimeout.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  setTimeout(timeout: number): Locator<T>;
}
```

----------------------------------------

TITLE: Frame.$() Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the Frame.$() method which queries a frame for an element matching a given selector. It returns a Promise that resolves to either an ElementHandle of the matching element or null if no element is found.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame._.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  $<Selector extends string>(
    selector: Selector,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}
```

----------------------------------------

TITLE: Initializing Default Intercept Resolution Priority in Typescript
DESCRIPTION: Defines a constant that sets the baseline priority level (0) for cooperative request interception in Puppeteer. This value serves as the default resolution priority when handling intercepted network requests.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.default_intercept_resolution_priority.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
DEFAULT_INTERCEPT_RESOLUTION_PRIORITY = 0;
```

----------------------------------------

TITLE: Defining ConsoleMessage Class Signature in TypeScript
DESCRIPTION: TypeScript declaration for the ConsoleMessage class in Puppeteer. This class is used to represent console messages dispatched by a page through the 'console' event.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class ConsoleMessage
```

----------------------------------------

TITLE: Declaring TimeoutError Class (TypeScript)
DESCRIPTION: Defines the signature for the TimeoutError class in TypeScript, showing it extends the base PuppeteerError class. This class is used to represent errors that occur when an operation exceeds its allocated time limit.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.timeouterror.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare class TimeoutError extends PuppeteerError
```

----------------------------------------

TITLE: Defining HandleFor Generic Type in TypeScript
DESCRIPTION: Defines a conditional type that returns ElementHandle<T> if T extends Node, otherwise returns JSHandle<T>. This type is used to properly type handle instances based on whether they represent DOM elements or other JavaScript objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.handlefor.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type HandleFor<T> = T extends Node ? ElementHandle<T> : JSHandle<T>;
```

----------------------------------------

TITLE: CDPSessionEvent.SessionAttached Variable (TypeScript)
DESCRIPTION: Defines a constant variable holding the string literal 'sessionattached'. This variable is used to represent the name of the event emitted when a new CDPSession is attached.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cdpsessionevent.sessionattached.md#_snippet_0

LANGUAGE: typescript
CODE:
```
SessionAttached: 'sessionattached';
```

----------------------------------------

TITLE: Get Backend Node ID - Puppeteer ElementHandle - TypeScript
DESCRIPTION: Defines the signature for the `backendNodeId` method on the `ElementHandle` class. This abstract method is expected to return a Promise that resolves with a number representing the DOM.BackendNodeId when connected using the Chrome DevTools Protocol.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.backendnodeid.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  abstract backendNodeId(): Promise<number>;
}
```

----------------------------------------

TITLE: Frame.waitForSelector Method Signature in TypeScript
DESCRIPTION: TypeScript method signature for the Frame.waitForSelector method. This defines the method that waits for an element matching the given selector to appear in a frame, returning a Promise that resolves to an ElementHandle or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.waitforselector.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  waitForSelector<Selector extends string>(
    selector: Selector,
    options?: WaitForSelectorOptions,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}
```

----------------------------------------

TITLE: Defining DownloadBehavior Interface in TypeScript
DESCRIPTION: This snippet defines the DownloadBehavior interface, which is used to configure download settings in Puppeteer. It includes two properties: downloadPath for specifying the default save location, and policy for controlling download behavior.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.downloadbehavior.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface DownloadBehavior
```

----------------------------------------

TITLE: Retrieving BrowserContext from Page in Puppeteer
DESCRIPTION: Abstract method definition in the Page class that returns the browser context the page belongs to. This method allows accessing the parent BrowserContext object from any Page instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.browsercontext.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract browserContext(): BrowserContext;
}
```

----------------------------------------

TITLE: Defining BrowserContextOptions Interface (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the BrowserContextOptions interface, which is used to configure options when creating a new browser context in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontextoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface BrowserContextOptions
```

----------------------------------------

TITLE: Checking if HTTP Request Intercept Resolution is Handled in Puppeteer
DESCRIPTION: This method determines whether the intercept resolution for an HTTP request has already been handled. It returns true if the resolution is already handled, and false otherwise. This is useful when implementing request interception logic.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.isinterceptresolutionhandled.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  isInterceptResolutionHandled(): boolean;
}
```

----------------------------------------

TITLE: Define defaultArgs method signature in BrowserLauncher (TypeScript)
DESCRIPTION: This snippet shows the abstract signature of the `defaultArgs` method within the `BrowserLauncher` class. It is designed to accept a `LaunchOptions` object and return an array of strings, likely representing default command-line arguments for launching a browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browserlauncher.defaultargs.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class BrowserLauncher {
  abstract defaultArgs(object: LaunchOptions): string[];
}
```

----------------------------------------

TITLE: Defining the HTTPRequest.frame() Method Signature in TypeScript
DESCRIPTION: Abstract method signature for HTTPRequest.frame() that returns the Frame that initiated the request or null for error pages. This is part of Puppeteer's HTTP request handling API.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.frame.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract frame(): Frame | null;
}
```

----------------------------------------

TITLE: Implementing the statusText method in HTTPResponse class in TypeScript
DESCRIPTION: This code snippet defines the signature of the statusText method which returns the status text of an HTTP response (e.g., 'OK' for a success). The method is declared as abstract in the HTTPResponse class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.statustext.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract statusText(): string;
}
```

----------------------------------------

TITLE: Defining BrowserContextEvent Enum in TypeScript
DESCRIPTION: This snippet declares the BrowserContextEvent enum, which contains event types for browser context changes in Puppeteer. It includes events for target changes, creation, and destruction.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontextevent.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare const enum BrowserContextEvent
```

----------------------------------------

TITLE: Declaring BrowserPlatform Enum in TypeScript
DESCRIPTION: This snippet declares the BrowserPlatform enum in TypeScript. It is used within Puppeteer to represent different operating system and architecture combinations for downloading browser binaries. The specific members (LINUX, MAC, WIN32, etc.) define the supported platforms.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.browserplatform.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare enum BrowserPlatform
```

----------------------------------------

TITLE: Declaring the BrowserEvent enum in Typescript
DESCRIPTION: Defines the BrowserEvent enum, which lists all possible events emitted by a Puppeteer browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browserevent.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare const enum BrowserEvent
```

----------------------------------------

TITLE: CustomQueryHandler queryOne Signature - TypeScript
DESCRIPTION: Signature for the optional `queryOne` method of the `CustomQueryHandler` interface. This method searches for the first node matching the given selector starting from a specified node. It returns the first matching node or null if none is found.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.customqueryhandler.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
(node: Node, selector: string) => Node | null
```

----------------------------------------

TITLE: Defining ComputeExecutablePathOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the ComputeExecutablePathOptions interface used in Puppeteer to specify options for computing the executable path of a browser. It includes properties for the browser type, build ID, cache directory, and platform.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.options.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ComputeExecutablePathOptions
```

----------------------------------------

TITLE: Defining InstallOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the InstallOptions interface, which is used to specify various options for installing browsers in Puppeteer. It includes properties for controlling the download source, browser type, build identification, caching, and platform-specific settings.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.installoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface InstallOptions
```

----------------------------------------

TITLE: Defining BoxModel Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the BoxModel interface in TypeScript for Puppeteer. It includes properties for border, content, margin, padding, width, and height, which represent different aspects of an element's box model.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.boxmodel.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface BoxModel {
  border: Quad;
  content: Quad;
  height: number;
  margin: Quad;
  padding: Quad;
  width: number;
}
```

----------------------------------------

TITLE: Get Worker Instance from Target (TypeScript)
DESCRIPTION: This TypeScript signature shows the `worker()` method of the `Target` class. It is an asynchronous method that returns a Promise resolving to a `WebWorker` instance if the target is a service worker or shared worker, or `null` otherwise.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.target.worker.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  worker(): Promise<WebWorker | null>;
}
```

----------------------------------------

TITLE: Keyboard.up() Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `Keyboard.up()` method, which is used to simulate releasing a key. It takes a `KeyInput` string representing the key name and returns a Promise that resolves when the keyup event is dispatched.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keyboard.up.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Keyboard {
  abstract up(key: KeyInput): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Mouse.down() Method in TypeScript
DESCRIPTION: The method signature for the Mouse.down() method in Puppeteer's Mouse class. It accepts an optional MouseOptions object parameter and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.down.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract down(options?: Readonly<MouseOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Signature for Connection.fromSession in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the static 'fromSession' method of the 'Connection' class. It indicates that the method accepts a 'CDPSession' object and returns either a 'Connection' object or 'undefined'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connection.fromsession.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Connection {
  static fromSession(session: CDPSession): Connection | undefined;
}
```

----------------------------------------

TITLE: Defining LocatorScrollOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the LocatorScrollOptions interface, which extends ActionOptions. It includes optional properties for scrollLeft and scrollTop to control scroll positioning.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locatorscrolloptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface LocatorScrollOptions extends ActionOptions
{
    scrollLeft?: number;
    scrollTop?: number;
}
```

----------------------------------------

TITLE: Define Page.emulateVisionDeficiency Method Signature in TypeScript
DESCRIPTION: Defines the abstract signature for the `emulateVisionDeficiency` method within the Puppeteer `Page` class, showing its optional parameter type (`Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type']`) and its return type (`Promise<void>`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.emulatevisiondeficiency.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateVisionDeficiency(
    type?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type'],
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining ExtensionTransport.send Method in TypeScript
DESCRIPTION: Definition of the send method within the ExtensionTransport class. The method accepts a string message parameter and returns void, used for sending messages in extension transport functionality.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.extensiontransport.send.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ExtensionTransport {
  send(message: string): void;
}
```

----------------------------------------

TITLE: Perform Drop Operation - Puppeteer Mouse - TypeScript
DESCRIPTION: Defines the signature for the abstract drop method within the Puppeteer Mouse class. This method simulates a dragenter, dragover, and drop sequence on a specified target point using provided drag data. It is an asynchronous operation that returns a Promise which resolves when the action is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.drop.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract drop(target: Point, data: Protocol.Input.DragData): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Puppeteer BoxModel Interface (TypeScript)
DESCRIPTION: This snippet shows the basic definition of the `BoxModel` interface in TypeScript. It serves as the blueprint for objects that hold the dimensions and box model properties (content, padding, border, margin, width, height) of a DOM element in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.boxmodel.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface BoxModel
```

----------------------------------------

TITLE: Get Subject Name - Puppeteer SecurityDetails - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `subjectName` method of the `SecurityDetails` class in Puppeteer. It indicates that the method takes no arguments and returns a string representing the subject name of the certificate.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.securitydetails.subjectname.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class SecurityDetails {
  subjectName(): string;
}
```

----------------------------------------

TITLE: Defining ComputeExecutablePathOptions Interface (TypeScript)
DESCRIPTION: Defines the `ComputeExecutablePathOptions` interface in TypeScript, which specifies the structure for options used when computing the path to a browser executable. It serves as a type definition for configuration objects passed to related functions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.options.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface ComputeExecutablePathOptions
```

----------------------------------------

TITLE: Defining FirefoxSettings Interface in TypeScript
DESCRIPTION: TypeScript interface definition for FirefoxSettings which provides configuration options for Firefox browser instances in Puppeteer. This interface includes optional properties for controlling download behavior and browser version selection.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.firefoxsettings.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface FirefoxSettings
```

----------------------------------------

TITLE: Defining DownloadPolicy Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the DownloadPolicy type as a union of string literals. It specifies four possible values for download policies: 'deny', 'allow', 'allowAndName', and 'default'. This type is likely used to configure how Puppeteer handles file downloads during automation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.downloadpolicy.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type DownloadPolicy = 'deny' | 'allow' | 'allowAndName' | 'default';
```

----------------------------------------

TITLE: Defining CSSCoverage.stop Method in TypeScript
DESCRIPTION: TypeScript class method definition for stopping CSS coverage analysis and returning an array of coverage entries. The method is asynchronous and returns a Promise containing an array of CoverageEntry objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.csscoverage.stop.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class CSSCoverage {
  stop(): Promise<CoverageEntry[]>;
}
```

----------------------------------------

TITLE: Set Element Viewport Scroll - Puppeteer Locator - TypeScript
DESCRIPTION: Creates a new Locator instance by cloning the current one and setting whether the element should be scrolled into the viewport if it's not already visible. The method takes a boolean `value` parameter (defaulting to `true`) and returns a new Locator instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.setensureelementisintheviewport.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  setEnsureElementIsInTheViewport<ElementType extends Element>(
    this: Locator<ElementType>,
    value: boolean,
  ): Locator<ElementType>;
}
```

----------------------------------------

TITLE: Browser.target() method signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the Browser.target() method in Puppeteer. It is an abstract method within the Browser class that returns a Target object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.target.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract target(): Target;
}
```

----------------------------------------

TITLE: Defining HTTPResponse.timing Method in TypeScript
DESCRIPTION: Abstract method definition for retrieving timing information related to network responses. Returns a Protocol.Network.ResourceTiming object or null, providing detailed timing metrics for network requests.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.timing.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract timing(): Protocol.Network.ResourceTiming | null;
}
```

----------------------------------------

TITLE: Defining PuppeteerNode.connect Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature of the PuppeteerNode.connect method. It takes ConnectOptions as a parameter and returns a Promise that resolves to a Browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.connect.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class PuppeteerNode {
  connect(options: ConnectOptions): Promise<Browser>;
}
```

----------------------------------------

TITLE: Defining BrowserTag Enum in TypeScript for Puppeteer
DESCRIPTION: This code snippet declares the BrowserTag enum, which contains various release channels for browsers. It includes options like beta, canary, dev, stable, and others. This enum is exported for use in other parts of the Puppeteer library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.browsertag.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare enum BrowserTag
```

----------------------------------------

TITLE: Defining ConsoleMessageType Type in TypeScript
DESCRIPTION: This snippet defines the `ConsoleMessageType` type in TypeScript as a union of string literals. It enumerates all the supported types of console messages that can be emitted or processed within the Puppeteer library, such as 'log', 'error', 'warn', 'debug', and others.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.consolemessagetype.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type ConsoleMessageType =
  | 'log'
  | 'debug'
  | 'info'
  | 'error'
  | 'warn'
  | 'dir'
  | 'dirxml'
  | 'table'
  | 'trace'
  | 'clear'
  | 'startGroup'
  | 'startGroupCollapsed'
  | 'endGroup'
  | 'assert'
  | 'profile'
  | 'profileEnd'
  | 'count'
  | 'timeEnd'
  | 'verbose';
```

----------------------------------------

TITLE: Defining ActionResult Type in TypeScript
DESCRIPTION: This snippet defines the TypeScript type `ActionResult` as a union of three string literal values: 'continue', 'abort', and 'respond'. This type is used to represent the possible results or outcomes of an action.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.actionresult.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type ActionResult = 'continue' | 'abort' | 'respond';
```

----------------------------------------

TITLE: Defining the ChromeSettings Interface in TypeScript
DESCRIPTION: This snippet shows the basic signature for the ChromeSettings interface in TypeScript. This interface is used within Puppeteer to configure settings related to the browser executable, such as download location and version.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.chromesettings.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ChromeSettings
```

----------------------------------------

TITLE: Defining PuppeteerLifeCycleEvent Type in TypeScript
DESCRIPTION: Defines a TypeScript type that specifies four possible lifecycle events for Puppeteer page navigation: 'load' for window load event, 'domcontentloaded' for DOM ready state, 'networkidle0' for complete network idle, and 'networkidle2' for near-network idle state with up to 2 connections.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteerlifecycleevent.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type PuppeteerLifeCycleEvent =
  /**
   * Waits for the 'load' event.
   */
  | 'load'
  /**
   * Waits for the 'DOMContentLoaded' event.
   */
  | 'domcontentloaded'
  /**
   * Waits till there are no more than 0 network connections for at least `500`
   * ms.
   */
  | 'networkidle0'
  /**
   * Waits till there are no more than 2 network connections for at least `500`
   * ms.
   */
  | 'networkidle2';
```

----------------------------------------

TITLE: Checking Service Worker Bypass Status in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for checking whether service workers are being bypassed on a page. Returns a boolean value indicating if service workers are currently being bypassed (true) or not (false).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.isserviceworkerbypassed.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract isServiceWorkerBypassed(): boolean;
}
```

----------------------------------------

TITLE: Defining Credentials Interface in TypeScript
DESCRIPTION: TypeScript interface that defines the structure for credential objects containing username and password properties. Used for authentication purposes in Puppeteer operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.credentials.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Credentials
```

----------------------------------------

TITLE: CommonEventEmitter.removeAllListeners Method Signature
DESCRIPTION: Defines the signature for the `removeAllListeners` method within the `CommonEventEmitter` interface. This method optionally takes an `event` key to remove listeners for a specific event, or removes all listeners if no event is specified. It returns `this` for chaining.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.commoneventemitter.removealllisteners.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface CommonEventEmitter {
  removeAllListeners(event?: keyof Events): this;
}
```

----------------------------------------

TITLE: Defining Browser.waitForTarget Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Browser.waitForTarget method. It takes a predicate function and optional options, returning a Promise that resolves to a Target.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.waitfortarget.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  waitForTarget(
    predicate: (x: Target) => boolean | Promise<boolean>,
    options?: WaitForTargetOptions,
  ): Promise<Target>;
}
```

----------------------------------------

TITLE: Frame.waitForFunction Method Signature (TypeScript)
DESCRIPTION: Provides the TypeScript signature for the `Frame.waitForFunction` method, showing its generic parameters, function signature, options parameter, and return type. It resolves with a `HandleFor` when the evaluated function returns a truthy value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.waitforfunction.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  waitForFunction<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    options?: FrameWaitForFunctionOptions,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}
```

----------------------------------------

TITLE: Getting CLI Help with npx
DESCRIPTION: Shows the main help documentation for the @puppeteer/browsers CLI tool when executed via npx. This command provides an overview of all available commands and options.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx @puppeteer/browsers --help
```

----------------------------------------

TITLE: Defining Page.setOfflineMode Method in TypeScript
DESCRIPTION: This code snippet defines the setOfflineMode method in the Page class. It takes a boolean parameter to enable or disable offline mode and returns a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setofflinemode.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setOfflineMode(enabled: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Defining LowerCasePaperFormat Type in TypeScript
DESCRIPTION: This TypeScript type alias, `LowerCasePaperFormat`, enumerates the valid string values for standard paper sizes that can be used when configuring PDF output options in Puppeteer. It lists common formats like 'letter', 'legal', 'a4', etc., all in lowercase.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.lowercasepaperformat.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type LowerCasePaperFormat =
  | 'letter'
  | 'legal'
  | 'tabloid'
  | 'ledger'
  | 'a0'
  | 'a1'
  | 'a2'
  | 'a3'
  | 'a4'
  | 'a5'
  | 'a6';
```

----------------------------------------

TITLE: Defining ScreenshotClip Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition for the ScreenshotClip interface, indicating that it extends the BoundingBox interface.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.screenshotclip.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface ScreenshotClip extends BoundingBox
```

----------------------------------------

TITLE: Defining the TouchHandle Interface in TypeScript
DESCRIPTION: This snippet defines the TypeScript interface for `TouchHandle` in Puppeteer. This interface represents a handle to a touch event that has been started and exposes methods to interact with that specific touch.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.touchhandle.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface TouchHandle
```

----------------------------------------

TITLE: Defining FileFormat Type in TypeScript for Puppeteer
DESCRIPTION: TypeScript type definition that specifies the supported file formats in Puppeteer. This type allows only three string literal values: 'gif', 'webm', and 'mp4', which are commonly used for video recording and media exports.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.fileformat.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type FileFormat = 'gif' | 'webm' | 'mp4';
```

----------------------------------------

TITLE: Define Puppeteer ProtocolType Type (TypeScript)
DESCRIPTION: This TypeScript type definition specifies the valid string literal values for the communication protocol used by Puppeteer. The allowed values are 'cdp' for the Chrome DevTools Protocol and 'webDriverBiDi' for the WebDriver BiDi protocol.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.protocoltype.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type ProtocolType = 'cdp' | 'webDriverBiDi';
```

----------------------------------------

TITLE: Defining KeyPressOptions Type (TypeScript)
DESCRIPTION: This snippet defines the KeyPressOptions type in TypeScript. It is an intersection type combining KeyDownOptions and KeyboardTypeOptions, allowing users to specify options relevant to both key down events and general keyboard typing actions when interacting with elements in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keypressoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type KeyPressOptions = KeyDownOptions & KeyboardTypeOptions;
```

----------------------------------------

TITLE: Defining MouseWheelOptions Interface in TypeScript
DESCRIPTION: This snippet defines the `MouseWheelOptions` interface, which specifies the structure for options used when simulating mouse wheel events in Puppeteer. It includes optional properties for horizontal (`deltaX`) and vertical (`deltaY`) scroll amounts.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mousewheeloptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface MouseWheelOptions
```

----------------------------------------

TITLE: Defining CookieSourceScheme Type in TypeScript for Puppeteer
DESCRIPTION: Defines a TypeScript type that represents the source scheme of the origin that originally set a cookie. The type includes 'Unset' (for emulating legacy cookie scope), 'NonSecure', and 'Secure' as possible values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookiesourcescheme.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type CookieSourceScheme = 'Unset' | 'NonSecure' | 'Secure';
```

----------------------------------------

TITLE: Defining LocatorScrollOptions Interface in TypeScript
DESCRIPTION: This TypeScript snippet shows the definition of the `LocatorScrollOptions` interface. It extends `ActionOptions`, indicating it's used to configure actions performed on elements found by a Locator, specifically related to scrolling.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locatorscrolloptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface LocatorScrollOptions extends ActionOptions
```

----------------------------------------

TITLE: Defining Puppeteer Viewport Interface (TypeScript)
DESCRIPTION: This code snippet shows the basic TypeScript definition for the `Viewport` interface used in Puppeteer. This interface specifies the structure for configuring the browser's viewport settings, such as dimensions and device characteristics.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.viewport.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Viewport
```

----------------------------------------

TITLE: Get Page from Target (any type) - Puppeteer - TypeScript
DESCRIPTION: Defines the signature for the Target.asPage() method in Puppeteer. This method forcefully creates a Page object from any Target type, which is useful for handling CDP targets of type 'other' as pages. It returns a Promise that resolves to a Page object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.target.aspage.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Target {
  abstract asPage(): Promise<Page>;
}
```

----------------------------------------

TITLE: Uninstall Function Signature in TypeScript
DESCRIPTION: Function signature for uninstalling browser instances in Puppeteer. Takes UninstallOptions as a parameter and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.uninstall.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function uninstall(options: UninstallOptions): Promise<void>;
```

----------------------------------------

TITLE: Defining LocatorClickOptions Type in TypeScript for Puppeteer
DESCRIPTION: This code defines the LocatorClickOptions type which combines ClickOptions and ActionOptions through a union type. This type is used to configure click operations on elements selected by Locators in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locatorclickoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type LocatorClickOptions = ClickOptions & ActionOptions;
```

----------------------------------------

TITLE: Define ConsoleMessage stackTrace Method (TypeScript)
DESCRIPTION: Defines the signature for the stackTrace method within the ConsoleMessage class. This method is used to retrieve the call stack locations associated with a console message.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.consolemessage.stacktrace.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ConsoleMessage {
  stackTrace(): ConsoleMessageLocation[];
}
```

----------------------------------------

TITLE: Getting Console Message Location (TypeScript)
DESCRIPTION: Retrieves the source location details for a `ConsoleMessage` instance. This method returns a `ConsoleMessageLocation` object containing information like the URL and line/column numbers where the console message originated.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.consolemessage.location.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ConsoleMessage {
  location(): ConsoleMessageLocation;
}
```

----------------------------------------

TITLE: Defining Moveable Interface in TypeScript
DESCRIPTION: Defines the Moveable interface which provides functionality for moving resources. The interface includes a move() method that can be used when 'using' the resource.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.moveable.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Moveable
```

----------------------------------------

TITLE: Get Listener Count - CommonEventEmitter - TypeScript
DESCRIPTION: Defines the TypeScript signature for the `listenerCount` method within the `CommonEventEmitter` interface. This method is used to determine the number of listeners currently attached to a specific event.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.commoneventemitter.listenercount.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface CommonEventEmitter {
  listenerCount(event: keyof Events): number;
}
```

----------------------------------------

TITLE: Defining the Mapper Type Alias (TypeScript)
DESCRIPTION: This snippet defines the `Mapper` type alias. It's a generic type that represents a function taking a single argument of type `From` and returning a value of type `To`. The return type is wrapped in `Awaitable`, indicating the transformation might be asynchronous.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mapper.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type Mapper<From, To> = (value: From) => Awaitable<To>;
```

----------------------------------------

TITLE: Defining ConsoleMessageLocation Interface in TypeScript
DESCRIPTION: Defines the `ConsoleMessageLocation` interface in TypeScript, which represents the location (URL, line, column) where a console message originated. This interface is used within Puppeteer to provide detailed source information for console messages.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.consolemessagelocation.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ConsoleMessageLocation
```

----------------------------------------

TITLE: Defining the CookieSameSite Type (TypeScript)
DESCRIPTION: Defines the possible string literal values ('Strict', 'Lax', 'None') for the CookieSameSite type, representing the cookie's 'SameSite' attribute as per RFC draft-west-first-party-cookies.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cookiesamesite.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type CookieSameSite = 'Strict' | 'Lax' | 'None';
```

----------------------------------------

TITLE: Defining HTTPResponse fromCache Method Signature (TypeScript)
DESCRIPTION: Defines the abstract signature for the `fromCache` method within the `HTTPResponse` class in TypeScript. This method is intended to return a boolean indicating whether the HTTP response was served from the browser's cache.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.fromcache.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract fromCache(): boolean;
}
```

----------------------------------------

TITLE: Defining ResourceType type in TypeScript
DESCRIPTION: Defines the ResourceType type in TypeScript, representing the type of a network resource as perceived by the rendering engine. It is defined as a lowercase version of the Protocol.Network.ResourceType enum.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.resourcetype.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type ResourceType = Lowercase<Protocol.Network.ResourceType>;
```

----------------------------------------

TITLE: Using Page.evaluate() with a String Argument
DESCRIPTION: This snippet shows how to pass a string instead of a function to Page.evaluate(). While functions are recommended for better debugging and TypeScript support, strings can be used for simple evaluations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluate.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
const aHandle = await page.evaluate('1 + 2');
```

----------------------------------------

TITLE: Defining GoToOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for GoToOptions that extends WaitForOptions. It includes optional properties for controlling referrer and referrer policy during page navigation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.gotooptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface GoToOptions extends WaitForOptions
```

----------------------------------------

TITLE: Defining Mouse.dragOver Method in Puppeteer TypeScript API
DESCRIPTION: Abstract method definition for dragOver in the Mouse class. It takes a target point and drag data as parameters and returns a Promise that resolves to void. This method is used to simulate dragging over elements in browser automation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.dragover.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract dragOver(
    target: Point,
    data: Protocol.Input.DragData,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Running Puppeteer Docker Image
DESCRIPTION: Example command to run the Puppeteer Docker image directly, executing a Node.js script. Note the requirement for --init and --cap-add=SYS_ADMIN.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/docker.md#_snippet_1

LANGUAGE: Bash
CODE:
```
docker run -i --init --cap-add=SYS_ADMIN --rm ghcr.io/puppeteer/puppeteer:latest node -e "$(cat path/to/script.js)"
```

----------------------------------------

TITLE: Signature for Browser.installExtension in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `installExtension` method of the `Browser` class. It indicates that the method is abstract, takes a single string parameter `path`, and returns a Promise resolving to a string (the extension ID).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.installextension.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Browser {
  abstract installExtension(path: string): Promise<string>;
}
```

----------------------------------------

TITLE: Signature for Page.close() in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.close() method, indicating it is an abstract method within the Page class that returns a Promise<void> and accepts an optional options object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.close.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract close(options?: {runBeforeUnload?: boolean}): Promise<void>;
}
```

----------------------------------------

TITLE: BrowserContext.waitForTarget Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the waitForTarget method in the BrowserContext class. It accepts a predicate function that evaluates targets and optional configuration options, returning a Promise that resolves to the matching Target.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.waitfortarget.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  waitForTarget(
    predicate: (x: Target) => boolean | Promise<boolean>,
    options?: WaitForTargetOptions,
  ): Promise<Target>;
}
```

----------------------------------------

TITLE: Page.cookies Method Signature
DESCRIPTION: This snippet shows the TypeScript signature for the deprecated Page.cookies method, indicating it accepts an optional array of strings (URLs) and returns a Promise resolving to an array of Cookie objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.cookies.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract cookies(...urls: string[]): Promise<Cookie[]>;
}
```

----------------------------------------

TITLE: Declaring Page.frames() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the frames() method within the Page class. It returns an array of Frame objects, representing all frames attached to the page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.frames.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract frames(): Frame[];
}
```

----------------------------------------

TITLE: Installing and Unpacking Browser Archive in Puppeteer (TypeScript)
DESCRIPTION: This function downloads and unpacks a browser archive according to the provided InstallOptions. It returns a Promise that resolves to an InstalledBrowser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.install.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function install(
  options: InstallOptions & {
    unpack?: true;
  },
): Promise<InstalledBrowser>;
```

----------------------------------------

TITLE: Debugging Flaky Tests with Environment Variables in Bash
DESCRIPTION: Command to debug flaky tests using environment variables, allowing tests matching a specific pattern to be wrapped with debugging utilities.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
PUPPETEER_DEFLAKE_TESTS="[navigation.spec] navigation Page.goto should navigate to empty page with networkidle0" npm run test:chrome:headless
```

----------------------------------------

TITLE: Defining getDownloadUrl Function Signature in TypeScript
DESCRIPTION: This code snippet defines the TypeScript signature for the getDownloadUrl function. It takes parameters for browser, platform, buildId, and an optional baseUrl, returning a URL object for downloading the browser binary archive.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.getdownloadurl.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function getDownloadUrl(
  browser: Browser,
  platform: BrowserPlatform,
  buildId: string,
  baseUrl?: string,
): URL;
```

----------------------------------------

TITLE: Defining TouchError Class in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the TouchError class, which extends PuppeteerError. It is thrown when an attempt is made to move or end a touch that does not exist in Puppeteer operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.toucherror.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class TouchError extends PuppeteerError
```

----------------------------------------

TITLE: Defining ProfileOptions Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition for the `ProfileOptions` interface, which is used to specify configuration options when working with browser profiles in Puppeteer. It includes properties for the profile's file system path and a record of preferences.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.profileoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface ProfileOptions
```

----------------------------------------

TITLE: Accepting Dialog with Puppeteer (TypeScript)
DESCRIPTION: Defines the signature for the `accept` method of the Puppeteer `Dialog` class. This method accepts a dialog, optionally providing text for a prompt dialog. It returns a Promise that resolves when the dialog is accepted.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.dialog.accept.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Dialog {
  accept(promptText?: string): Promise<void>;
}
```

----------------------------------------

TITLE: Clearing Installed Browsers
DESCRIPTION: Executes the `clear` command of the @puppeteer/browsers CLI via npx. This command removes all previously installed browsers managed by the tool.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/index.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx @puppeteer/browsers clear
```

----------------------------------------

TITLE: Defining Connection.send Method in TypeScript
DESCRIPTION: TypeScript class method definition for Connection.send that handles protocol command sending in Puppeteer. The method is generic and accepts a command method, optional parameters, and command options, returning a Promise of the command's return type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.send.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Connection {
  send<T extends keyof ProtocolMapping.Commands>(
    method: T,
    params?: ProtocolMapping.Commands[T]['paramsType'][0],
    options?: CommandOptions,
  ): Promise<ProtocolMapping.Commands[T]['returnType']>;
}
```

----------------------------------------

TITLE: Defining Puppeteer LaunchOptions Interface - TypeScript
DESCRIPTION: This TypeScript snippet defines the `LaunchOptions` interface, which specifies the configuration options for launching a browser instance in Puppeteer. It extends the `ConnectOptions` interface, inheriting its properties related to connecting to an existing browser instance. It serves as the base definition for the detailed properties listed in the documentation table.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.launchoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface LaunchOptions extends ConnectOptions
```

----------------------------------------

TITLE: Registering Custom Query Handler - Puppeteer - TypeScript Signature
DESCRIPTION: This snippet shows the TypeScript signature for the static method `Puppeteer.registerCustomQueryHandler`. It takes a string `name` for the handler and a `CustomQueryHandler` object, returning void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteer.registercustomqueryhandler.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Puppeteer {
  static registerCustomQueryHandler(
    name: string,
    queryHandler: CustomQueryHandler,
  ): void;
}
```

----------------------------------------

TITLE: EventEmitter.listenerCount Method Implementation in TypeScript
DESCRIPTION: Method signature for the EventEmitter.listenerCount() method that gets the number of listeners for a given event type. It accepts an event name and returns the count of listeners for that event as a number.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.listenercount.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class EventEmitter {
  listenerCount(type: keyof EventsWithWildcard<Events>): number;
}
```

----------------------------------------

TITLE: Defining QueryOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the QueryOptions interface used in Puppeteer for configuring element queries. It includes a single property 'isolate' which determines whether the query should run in isolation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.queryoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface QueryOptions
```

----------------------------------------

TITLE: Retrieving ContinueRequestOverrides from HTTPRequest in Puppeteer
DESCRIPTION: Method signature for continueRequestOverrides() in the HTTPRequest class. This method returns a ContinueRequestOverrides object that contains modifications to be applied when a request interception is allowed to continue without being aborted or responded to.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.continuerequestoverrides.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  continueRequestOverrides(): ContinueRequestOverrides;
}
```

----------------------------------------

TITLE: Implementing Touch Events in TypeScript with Puppeteer
DESCRIPTION: TypeScript class method definition for simulating touch events at specified coordinates. The method takes x and y coordinates as numbers and returns a Promise that resolves when the touch events have been dispatched.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchscreen.tap.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Touchscreen {
  tap(x: number, y: number): Promise<void>;
}
```

----------------------------------------

TITLE: Defining BrowserLauncher.executablePath abstract method in TypeScript
DESCRIPTION: Declaration of the abstract executablePath method in the BrowserLauncher class. This method returns the path to a browser executable based on an optional Chrome release channel and validation flag.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserlauncher.executablepath.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserLauncher {
  abstract executablePath(
    channel?: ChromeReleaseChannel,
    validatePath?: boolean,
  ): string;
}
```

----------------------------------------

TITLE: Defining createProfile Function in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the createProfile function in TypeScript for Puppeteer. It takes a Browser instance and ProfileOptions as parameters and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.createprofile.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function createProfile(
  browser: Browser,
  opts: ProfileOptions,
): Promise<void>;
```

----------------------------------------

TITLE: Defining clearCustomQueryHandlers Static Method in Puppeteer Class
DESCRIPTION: This snippet shows the TypeScript definition of the clearCustomQueryHandlers static method in the Puppeteer class. The method takes no parameters and returns void, indicating it performs the action of unregistering all custom query handlers without returning any value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.clearcustomqueryhandlers.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Puppeteer {
  static clearCustomQueryHandlers(): void;
}
```

----------------------------------------

TITLE: HTTPRequest.abortErrorReason Method Signature in TypeScript
DESCRIPTION: Defines the signature of the abortErrorReason method in the HTTPRequest class that returns the most recent reason for aborting a network request. The method returns a Protocol.Network.ErrorReason value or null if no abort reason exists.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.aborterrorreason.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abortErrorReason(): Protocol.Network.ErrorReason | null;
}
```

----------------------------------------

TITLE: Closing a WebWorker (TypeScript)
DESCRIPTION: Provides the TypeScript signature for the `close()` method of the `WebWorker` class. This method is asynchronous and returns a Promise that resolves when the worker is closed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.webworker.close.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class WebWorker {
  close(): Promise<void>;
}
```

----------------------------------------

TITLE: Declaring the Target class in TypeScript
DESCRIPTION: This snippet shows the abstract class declaration for the Puppeteer Target class. Note that the constructor is internal and should not be called directly by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.target.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Target
```

----------------------------------------

TITLE: Defining FrameWaitForFunctionOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the FrameWaitForFunctionOptions interface in TypeScript. It specifies the structure for options that can be passed to the waitForFunction method in Puppeteer's Frame class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.framewaitforfunctionoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface FrameWaitForFunctionOptions
```

----------------------------------------

TITLE: Defining EvaluateFuncWith Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the EvaluateFuncWith type, which is a generic function type used for evaluation in Puppeteer. It takes two type parameters V and T, and returns an Awaitable<unknown>. The function parameters include V and the spread of InnerParams<T>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.evaluatefuncwith.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type EvaluateFuncWith<V, T extends unknown[]> = (
  ...params: [V, ...InnerParams<T>]
) => Awaitable<unknown>;
```

----------------------------------------

TITLE: Defining CDPSessionEvents Interface in TypeScript for Puppeteer
DESCRIPTION: This code defines the CDPSessionEvents interface that extends both CDPEvents and Record<EventType, unknown>. It is used to type events related to CDP sessions in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsessionevents.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CDPSessionEvents extends CDPEvents, Record<EventType, unknown>
```

----------------------------------------

TITLE: Defining DeleteCookiesRequest Interface in TypeScript
DESCRIPTION: TypeScript interface definition for DeleteCookiesRequest, which specifies the structure of cookie deletion requests in Puppeteer. It includes required and optional properties for targeting specific cookies based on name, domain, path, URL, and partition key.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.deletecookiesrequest.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface DeleteCookiesRequest
```

----------------------------------------

TITLE: Defining AwaitedLocator Generic Type in TypeScript
DESCRIPTION: A TypeScript type definition that extracts the element type S from a Locator<S>. This utility type uses conditional type inference to get the type parameter from the Locator generic type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.awaitedlocator.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type AwaitedLocator<T> = T extends Locator<infer S> ? S : never;
```

----------------------------------------

TITLE: Defining the CookieParam Interface in TypeScript
DESCRIPTION: This snippet shows the basic TypeScript definition for the CookieParam interface. It represents the structure of an object used to specify cookie details when setting cookies in a Puppeteer page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cookieparam.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface CookieParam
```

----------------------------------------

TITLE: Declaring ProtocolError Class in TypeScript
DESCRIPTION: Defines the ProtocolError class that extends PuppeteerError. The class includes readonly properties for error codes and original error messages to handle protocol-level errors in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.protocolerror.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class ProtocolError extends PuppeteerError
```

----------------------------------------

TITLE: Getting HTTPRequest Abort Reason in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the `HTTPRequest.abortErrorReason()` method. It returns a `Protocol.Network.ErrorReason` enum value indicating the reason the request was aborted, or `null` if the request was not aborted or the reason is unavailable.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.aborterrorreason.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPRequest {
  abortErrorReason(): Protocol.Network.ErrorReason | null;
}
```

----------------------------------------

TITLE: Defining KeyboardTypeOptions Interface (TypeScript)
DESCRIPTION: This snippet shows the TypeScript definition for the `KeyboardTypeOptions` interface, which is used to specify options when simulating keyboard typing in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keyboardtypeoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface KeyboardTypeOptions
```

----------------------------------------

TITLE: Defining NewDocumentScriptEvaluation Interface in TypeScript
DESCRIPTION: This code snippet defines the NewDocumentScriptEvaluation interface in TypeScript. It includes a single property 'identifier' of type string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.newdocumentscriptevaluation.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface NewDocumentScriptEvaluation
{
    identifier: string;
}
```

----------------------------------------

TITLE: Defining MouseWheelOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the MouseWheelOptions interface used in Puppeteer. It includes two optional properties: deltaX and deltaY, both of type number, which represent the horizontal and vertical scroll amounts respectively.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mousewheeloptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface MouseWheelOptions {
  deltaX?: number;
  deltaY?: number;
}
```

----------------------------------------

TITLE: Running Puppeteer Tests in Headful Chrome via npm
DESCRIPTION: Executes Puppeteer tests specifically using the Chrome browser in headful (non-headless) mode via a predefined npm script (`test:chrome:headful`). This is useful for debugging tests visually.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
npm run test:chrome:headful
```

----------------------------------------

TITLE: Running Browser Revision Update Script - Bash
DESCRIPTION: Executes the local script to update the browser revision. The --experimental-fetch flag is required because the script relies on the fetch API.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_14

LANGUAGE: bash
CODE:
```
node --experimental-fetch tools/update_browser_revision.mjs
```

----------------------------------------

TITLE: Defining ConnectOptions Interface in TypeScript
DESCRIPTION: This snippet defines the ConnectOptions interface, which includes various optional properties for configuring browser connections in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connectoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ConnectOptions
```

----------------------------------------

TITLE: Defining FrameAddScriptTagOptions Interface in TypeScript
DESCRIPTION: TypeScript interface that specifies the available options when adding a script tag to a frame in Puppeteer. Provides options for injecting JavaScript through direct content, file path, or URL, along with configuration for script ID and type attributes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frameaddscripttagoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface FrameAddScriptTagOptions
```

----------------------------------------

TITLE: Adding Style Tag (HTMLStyleElement) - Puppeteer Frame - TypeScript
DESCRIPTION: Adds a `<style>` element into the frame. This signature accepts options excluding 'url', typically used for injecting CSS content or linking to a local file path. It returns a promise that resolves to an element handle for the created `<style>` element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.addstyletag.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  addStyleTag(
    options: Omit<FrameAddStyleTagOptions, 'url'>,
  ): Promise<ElementHandle<HTMLStyleElement>>; 
}
```

----------------------------------------

TITLE: Defining the MouseButton Enum in Typescript for Puppeteer
DESCRIPTION: This TypeScript snippet defines a readonly MouseButton enum that contains string constants for the five standard mouse buttons: Left, Right, Middle, Back, and Forward. These values can be used in Puppeteer's mouse interaction methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mousebutton.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
MouseButton: Readonly<{
  Left: 'left';
  Right: 'right';
  Middle: 'middle';
  Back: 'back';
  Forward: 'forward';
}>;
```

----------------------------------------

TITLE: Declaring PuppeteerError Class (TypeScript)
DESCRIPTION: This snippet shows the TypeScript declaration for the PuppeteerError class. It is exported and declared, indicating it's part of a type definition file, and it extends the standard JavaScript Error class, establishing it as a type of error.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteererror.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class PuppeteerError extends Error
```

----------------------------------------

TITLE: Defining CommonEventEmitter Interface in TypeScript
DESCRIPTION: TypeScript interface definition for an event emitter that handles generic event types. The interface uses a generic parameter Events that extends Record<EventType, unknown> to allow type-safe event handling.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CommonEventEmitter<Events extends Record<EventType, unknown>>
```

----------------------------------------

TITLE: Defining CDPEvents Type in TypeScript for Puppeteer
DESCRIPTION: This type definition creates a mapping of Chrome DevTools Protocol event names to their corresponding payload types. It uses a mapped type to iterate over all properties in ProtocolMapping.Events and extracts the first element of each event's tuple type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpevents.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type CDPEvents = {
  [Property in keyof ProtocolMapping.Events]: ProtocolMapping.Events[Property][0];
};
```

----------------------------------------

TITLE: Defining the SystemOptions Interface
DESCRIPTION: This snippet shows the basic TypeScript definition for the `SystemOptions` interface. It outlines the structure used to configure various aspects of the browser to be launched by Puppeteer, such as the browser type, release channel, and target platform.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.systemoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface SystemOptions
```

----------------------------------------

TITLE: Defining TracingOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the TracingOptions interface used in Puppeteer. It includes optional properties for categories, path, and screenshots.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.tracingoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface TracingOptions
```

----------------------------------------

TITLE: Defining Awaitable Type in TypeScript
DESCRIPTION: The Awaitable<T> type is a TypeScript utility type that signifies a value or return type can be either the type T itself or a PromiseLike<T>. This is useful for functions or variables that can accept or return both synchronous and asynchronous values, allowing consumers to use 'await' regardless of whether the underlying operation is truly asynchronous.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.awaitable.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type Awaitable<T> = T | PromiseLike<T>;
```

----------------------------------------

TITLE: Cloning Puppeteer Repository
DESCRIPTION: Instructions for cloning the Puppeteer repository from GitHub to begin development.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/puppeteer/puppeteer
cd puppeteer
```

----------------------------------------

TITLE: Defining ChromeSettings Interface in TypeScript
DESCRIPTION: Defines the interface for Chrome browser settings in Puppeteer. It includes optional properties for controlling browser downloads, specifying versions, and configuring download URLs.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.chromesettings.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ChromeSettings
```

----------------------------------------

TITLE: Defining the LocatorEvents interface in TypeScript
DESCRIPTION: Defines the LocatorEvents interface in TypeScript, specifying its structure and indicating that it extends the standard Record type to map event types to unknown values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locatorevents.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface LocatorEvents extends Record<EventType, unknown>
```

----------------------------------------

TITLE: Defining Metrics Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the Metrics interface in TypeScript for Puppeteer. It includes optional numeric properties for various performance metrics such as document count, frame count, heap sizes, layout information, and timing data.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.metrics.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Metrics {
  Documents?: number;
  Frames?: number;
  JSEventListeners?: number;
  JSHeapTotalSize?: number;
  JSHeapUsedSize?: number;
  LayoutCount?: number;
  LayoutDuration?: number;
  Nodes?: number;
  RecalcStyleCount?: number;
  RecalcStyleDuration?: number;
  ScriptDuration?: number;
  TaskDuration?: number;
  Timestamp?: number;
}
```

----------------------------------------

TITLE: LogLevel Union Type - TypeScript
DESCRIPTION: Defines the possible string values for the logLevel configuration option: 'silent', 'error', or 'warn'. This controls the verbosity of Puppeteer's logging.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.configuration.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
'silent' | 'error' | 'warn'
```

----------------------------------------

TITLE: Test Expectation Configuration in JSON
DESCRIPTION: Example of a test expectation configuration in TestExpectations.json that defines which tests to skip based on test ID patterns, platforms, and parameters.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{
  "testIdPattern": "[accessibility.spec]",
  "platforms": ["darwin", "win32", "linux"],
  "parameters": ["firefox"],
  "expectations": ["SKIP"]
}
```

----------------------------------------

TITLE: ElementHandle.tap() Method Signature - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `tap()` method of the `ElementHandle` class. It indicates that the method is called on an `ElementHandle` instance and returns a `Promise` that resolves when the tap action is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.tap.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  tap(this: ElementHandle<Element>): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Page.emulateTimezone Method in TypeScript
DESCRIPTION: Abstract method signature for the emulateTimezone method in the Page class, which allows changing the timezone of a page. It accepts an optional timezone ID parameter and returns a Promise that resolves when the timezone has been emulated.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatetimezone.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateTimezone(timezoneId?: string): Promise<void>;
}
```

----------------------------------------

TITLE: Defining BrowserContext.overridePermissions Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature of the overridePermissions method in the BrowserContext class. It takes an origin string and an array of Permission objects as parameters, and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.overridepermissions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract overridePermissions(
    origin: string,
    permissions: Permission[],
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Browser.target() Method in TypeScript
DESCRIPTION: The abstract method signature for Browser.target() that returns the target associated with the default browser context. This method is part of the Browser class and returns a Target object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.target.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract target(): Target;
}
```

----------------------------------------

TITLE: Defining AwaitablePredicate Type in TypeScript
DESCRIPTION: Defines the AwaitablePredicate generic type that represents a function accepting a value of type T and returning an Awaitable boolean. This type is used for condition checking in Puppeteer's waiting operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.awaitablepredicate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type AwaitablePredicate<T> = (value: T) => Awaitable<boolean>;
```

----------------------------------------

TITLE: Defining JSCoverageEntry Interface in TypeScript
DESCRIPTION: TypeScript interface definition for JSCoverageEntry that extends CoverageEntry and includes an optional rawScriptCoverage property for V8 script coverage data.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jscoverageentry.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface JSCoverageEntry extends CoverageEntry
```

----------------------------------------

TITLE: Declaring InstalledBrowser Class Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript declaration signature for the InstalledBrowser class. Note that the constructor for this class is marked as internal and is not intended for direct use by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.installedbrowser.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class InstalledBrowser
```

----------------------------------------

TITLE: Defining Generic Mapper Type in TypeScript
DESCRIPTION: Defines a generic type Mapper that takes two type parameters 'From' and 'To', representing a function that transforms a value from one type to another. The function can return either the target type directly or a Promise of the target type through the Awaitable wrapper.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mapper.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type Mapper<From, To> = (value: From) => Awaitable<To>;
```

----------------------------------------

TITLE: Page.waitForNavigation Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the Page.waitForNavigation method, which returns a Promise that resolves to an HTTPResponse object or null after navigation completes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.waitfornavigation.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  waitForNavigation(options?: WaitForOptions): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Implementing HTTPResponse.ok Method in TypeScript
DESCRIPTION: Method signature for the ok() function in the HTTPResponse class that returns a boolean indicating if the HTTP response status code is in the successful range (200-299).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.ok.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  ok(): boolean;
}
```

----------------------------------------

TITLE: ElementHandle.autofill Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the ElementHandle.autofill method, which takes AutofillData as a parameter and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.autofill.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  abstract autofill(data: AutofillData): Promise<void>;
}
```

----------------------------------------

TITLE: Defining startCSSCoverage Method in Coverage Class (TypeScript)
DESCRIPTION: This snippet shows the signature of the startCSSCoverage method in the Coverage class. It takes an optional CSSCoverageOptions parameter and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.coverage.startcsscoverage.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Coverage {
  startCSSCoverage(options?: CSSCoverageOptions): Promise<void>;
}
```

----------------------------------------

TITLE: Defining the VisibilityOption Type in TypeScript
DESCRIPTION: This snippet defines the TypeScript type `VisibilityOption` used in Puppeteer. It specifies the possible values ('hidden', 'visible', or null) that control whether an operation waits for an element to be visible or hidden.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.visibilityoption.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type VisibilityOption = 'hidden' | 'visible' | null;
```

----------------------------------------

TITLE: Defining FrameEvents Interface in TypeScript
DESCRIPTION: Defines the FrameEvents interface which extends Record<EventType, unknown>. This interface is used to type frame-related events in the Puppeteer framework.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frameevents.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface FrameEvents extends Record<EventType, unknown>
```

----------------------------------------

TITLE: Implementing JSHandle.toString method in TypeScript
DESCRIPTION: The abstract toString method declared in the JSHandle class returns a string representation of the JSHandle object. This method is useful during debugging as it helps visualize the state of JSHandle objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.tostring.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  abstract toString(): string;
}
```

----------------------------------------

TITLE: Defining the MediaFeature Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition for the `MediaFeature` interface. This interface specifies the structure required to represent a CSS media feature that can be emulated, consisting of a `name` (e.g., 'prefers-reduced-motion') and a corresponding `value` (e.g., 'reduce').
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mediafeature.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface MediaFeature
```

----------------------------------------

TITLE: Defining CSSCoverageOptions Interface (TypeScript)
DESCRIPTION: This snippet shows the basic definition of the `CSSCoverageOptions` interface in TypeScript, which is used to configure settings for collecting CSS coverage data in Puppeteer. It serves as a type definition for the options object passed to coverage methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.csscoverageoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface CSSCoverageOptions
```

----------------------------------------

TITLE: Generate Single E2E Test File
DESCRIPTION: Uses the schematic's generator to create a new, single end-to-end test file with a specified name within your project.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_2

LANGUAGE: bash
CODE:
```
ng generate @puppeteer/ng-schematics:e2e "<TestName>"
```

----------------------------------------

TITLE: Declaring TargetType enum - TypeScript
DESCRIPTION: This snippet shows the TypeScript declaration signature for the TargetType enum. It indicates that the enum is exported and available for use within the Puppeteer library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.targettype.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare enum TargetType
```

----------------------------------------

TITLE: Declaring ProtocolError Class in TypeScript
DESCRIPTION: This snippet shows the declaration of the ProtocolError class in TypeScript, indicating that it is exported and extends the base PuppeteerError class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.protocolerror.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class ProtocolError extends PuppeteerError
```

----------------------------------------

TITLE: Defining Puppeteer PDFOptions Interface
DESCRIPTION: This code snippet shows the TypeScript signature for the PDFOptions interface, which outlines the structure and types of the options available for configuring PDF generation in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.pdfoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface PDFOptions
```

----------------------------------------

TITLE: Defining LocatorEvent Enum in TypeScript
DESCRIPTION: Declaration of the LocatorEvent enum in TypeScript which defines all events that a locator instance may emit. Currently contains only the 'Action' event that signals when a locator is about to perform an action on located elements.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locatorevent.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare enum LocatorEvent
```

----------------------------------------

TITLE: Get Console Message Arguments (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `args()` method of the `ConsoleMessage` class in Puppeteer. The method returns an array of `JSHandle` objects, where each `JSHandle` represents an argument passed to the console message.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.consolemessage.args.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ConsoleMessage {
  args(): JSHandle[];
}
```

----------------------------------------

TITLE: Running Unit Tests
DESCRIPTION: Command for executing unit tests using Node test runner (requires Node 20+).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
npm run unit
```

----------------------------------------

TITLE: Check Element Visibility with ElementHandle.isHidden (TypeScript)
DESCRIPTION: Provides the TypeScript signature for the ElementHandle.isHidden() method, which returns a Promise resolving to a boolean indicating whether the element is considered hidden based on its computed styles, bounding client rect, or visibility CSS property.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.ishidden.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  isHidden(): Promise<boolean>;
}
```

----------------------------------------

TITLE: Defining MouseMoveOptions Interface in TypeScript for Puppeteer
DESCRIPTION: TypeScript interface declaration for MouseMoveOptions in Puppeteer. This interface allows configuration of mouse movement behavior, particularly the number of intermediate steps when moving the mouse from one position to another.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mousemoveoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface MouseMoveOptions
```

----------------------------------------

TITLE: TypeScript Declaration of JSCoverage Class in Puppeteer
DESCRIPTION: The TypeScript signature for the JSCoverage class in Puppeteer. This class is used for JavaScript code coverage functionality but is marked as internal, meaning third-party code should not instantiate it directly.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jscoverage.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class JSCoverage
```

----------------------------------------

TITLE: Defining BoundingBox Interface in TypeScript
DESCRIPTION: TypeScript interface definition for BoundingBox that extends Point interface and includes width and height properties for representing element dimensions in pixels.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.boundingbox.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface BoundingBox extends Point
```

----------------------------------------

TITLE: Defining HTTPRequest Class in TypeScript
DESCRIPTION: Abstract class declaration for HTTPRequest in Puppeteer. This represents HTTP requests sent by a page and provides methods to interact with these requests.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class HTTPRequest
```

----------------------------------------

TITLE: Defining MouseOptions Interface in TypeScript
DESCRIPTION: Defines the structure of the MouseOptions interface in Puppeteer. This interface is used to specify options for mouse actions, including the button to press and the click count (deprecated).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouseoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface MouseOptions
```

----------------------------------------

TITLE: TypeScript Signature for Browser.version
DESCRIPTION: This snippet shows the TypeScript signature for the `Browser.version()` method, indicating it is an abstract method within the `Browser` class that returns a Promise resolving to a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.version.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Browser {
  abstract version(): Promise<string>;
}
```

----------------------------------------

TITLE: Running Project Tests - npm/Bash
DESCRIPTION: Executes the project's test suite. All tests must pass before committing changes, especially after updating dependencies or browser revisions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_19

LANGUAGE: bash
CODE:
```
npm test
```

----------------------------------------

TITLE: Building a Single Package - npm/Bash
DESCRIPTION: Builds a specific package within the monorepo structure. The command automatically handles building any dependent packages as well.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm run build --workspace <package> # e.g. puppeteer
```

----------------------------------------

TITLE: Defining CDPSession detach method signature in TypeScript
DESCRIPTION: Defines the abstract signature for the `detach` method within the `CDPSession` class. This method is asynchronous and returns a Promise that resolves to void upon completion, indicating the session has been successfully detached.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cdpsession.detach.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class CDPSession {
  abstract detach(): Promise<void>;
}
```

----------------------------------------

TITLE: Cleaning Stale Artifacts for Package - npm/Bash
DESCRIPTION: Removes generated artifacts specifically for a designated package within the monorepo structure.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_8

LANGUAGE: bash
CODE:
```
npm run clean --workspace <package>
```

----------------------------------------

TITLE: Code Linting and Formatting
DESCRIPTION: Commands for checking and formatting code according to project style guidelines.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_7

LANGUAGE: bash
CODE:
```
npm run lint
npm run format
```

----------------------------------------

TITLE: ChromeHeadlessShellSettings Interface Signature (TypeScript)
DESCRIPTION: Defines the TypeScript signature for the `ChromeHeadlessShellSettings` interface, outlining its structure for configuring Chrome Headless Shell settings within Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.chromeheadlessshellsettings.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ChromeHeadlessShellSettings
```

----------------------------------------

TITLE: Defining CommonEventEmitter.listenerCount Method Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the listenerCount method that returns the number of listeners for a specified event. The method takes an event parameter of type keyof Events and returns a number.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.listenercount.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface CommonEventEmitter {
  listenerCount(event: keyof Events): number;
}
```

----------------------------------------

TITLE: Cloning Puppeteer Repository - Git/Bash
DESCRIPTION: Clones the Puppeteer GitHub repository to your local machine and navigates into the project directory. This is the first step to setting up the development environment.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/puppeteer/puppeteer
cd puppeteer
```

----------------------------------------

TITLE: Installing Dependencies - npm/Bash
DESCRIPTION: Installs the necessary project dependencies using npm. This command sets up the development environment after cloning the repository.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Killing Process using TypeScript
DESCRIPTION: Defines the signature for the `kill()` method within the `Process` class. This method is used to terminate the process instance and does not return any value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.process.kill.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Process {
  kill(): void;
}
```

----------------------------------------

TITLE: Defining LowerCasePaperFormat Type in TypeScript for Puppeteer
DESCRIPTION: TypeScript type definition that enumerates all supported paper formats in lowercase. This type is used when configuring page printing or PDF generation in Puppeteer, allowing developers to specify standard paper sizes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.lowercasepaperformat.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type LowerCasePaperFormat =
  | 'letter'
  | 'legal'
  | 'tabloid'
  | 'ledger'
  | 'a0'
  | 'a1'
  | 'a2'
  | 'a3'
  | 'a4'
  | 'a5'
  | 'a6';
```

----------------------------------------

TITLE: Defining CLI.run method signature in TypeScript
DESCRIPTION: Defines the signature for the `run` method within the `CLI` class. This method accepts an array of strings (`argv`) and is expected to perform an asynchronous operation, returning a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.cli.run.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class CLI {
  run(argv: string[]): Promise<void>;
}
```

----------------------------------------

TITLE: Building Single Package
DESCRIPTION: Commands for building individual packages and watching for changes during development.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
npm run build --workspace <package>
npm run build --watch --workspace <package>
```

----------------------------------------

TITLE: Defining the Handler Type Alias (TypeScript)
DESCRIPTION: Defines a generic type alias `Handler` that represents a function accepting a single argument of type `T` (defaulting to `unknown`) and returning `void`. This type is typically used for event handler functions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.handler.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type Handler<T = unknown> = (event: T) => void;
```

----------------------------------------

TITLE: Defining KeyboardTypeOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for KeyboardTypeOptions, which provides configuration options when typing with Puppeteer's keyboard API. It includes an optional 'delay' property of type number that can be used to control the typing speed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboardtypeoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface KeyboardTypeOptions
```

----------------------------------------

TITLE: Defining BoundingBox Interface - TypeScript
DESCRIPTION: This snippet defines the BoundingBox interface in TypeScript. It specifies that BoundingBox extends the Point interface, inheriting its properties (presumably x and y coordinates) and adding specific properties for width and height to represent a rectangular area.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.boundingbox.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface BoundingBox extends Point
```

----------------------------------------

TITLE: Defining SupportedWebDriverCapability Type (TypeScript)
DESCRIPTION: This snippet defines the TypeScript type alias `SupportedWebDriverCapability`. It is based on the `Session.CapabilityRequest` type but explicitly excludes the 'unhandledPromptBehavior' and 'acceptInsecureCerts' capabilities, providing a restricted set of supported WebDriver capabilities.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.supportedwebdrivercapability.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type SupportedWebDriverCapability = Exclude<
  Session.CapabilityRequest,
  'unhandledPromptBehavior' | 'acceptInsecureCerts'
>;
```

----------------------------------------

TITLE: Defining ElementHandle.touchMove Method Signature (TypeScript)
DESCRIPTION: Defines the signature for the touchMove method within the ElementHandle class. This method scrolls the element into view and moves a touch point to its center. It accepts an optional TouchHandle parameter to specify which touch to move and returns a Promise that resolves when the action is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.touchmove.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  touchMove(this: ElementHandle<Element>, touch?: TouchHandle): Promise<void>;
}
```

----------------------------------------

TITLE: Defining EventType Type in TypeScript for Puppeteer
DESCRIPTION: A TypeScript type definition that specifies EventType as either a string or symbol. This type is used throughout Puppeteer for event handling and dispatching.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventtype.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type EventType = string | symbol;
```

----------------------------------------

TITLE: JSCoverage Class Signature (TypeScript)
DESCRIPTION: Defines the structure of the JSCoverage class in TypeScript.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jscoverage.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class JSCoverage
```

----------------------------------------

TITLE: Defining Permission Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines a union type 'Permission' that includes various browser permissions. It's used in Puppeteer to specify which permissions to grant or deny when controlling a browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.permission.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type Permission =
  | 'accelerometer'
  | 'ambient-light-sensor'
  | 'background-sync'
  | 'camera'
  | 'clipboard-read'
  | 'clipboard-sanitized-write'
  | 'clipboard-write'
  | 'geolocation'
  | 'gyroscope'
  | 'idle-detection'
  | 'keyboard-lock'
  | 'magnetometer'
  | 'microphone'
  | 'midi-sysex'
  | 'midi'
  | 'notifications'
  | 'payment-handler'
  | 'persistent-storage'
  | 'pointer-lock';
```

----------------------------------------

TITLE: Defining ElementHandle Class Signature (TypeScript)
DESCRIPTION: Defines the abstract class signature for `ElementHandle`, extending `JSHandle` and accepting a generic type for the element it represents. This signature is marked as internal.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare abstract class ElementHandle<ElementType extends Node = Element> extends JSHandle<ElementType>
```

----------------------------------------

TITLE: Defining ElementHandle.autofill Method Signature - TypeScript
DESCRIPTION: This snippet shows the abstract method signature for `autofill` within the `ElementHandle` class. It indicates that the method accepts a single parameter of type `AutofillData` and returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.autofill.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  abstract autofill(data: AutofillData): Promise<void>;
}
```

----------------------------------------

TITLE: Defining removeScriptToEvaluateOnNewDocument Method in TypeScript
DESCRIPTION: This code snippet defines the removeScriptToEvaluateOnNewDocument method in the Page class. It takes a string identifier as a parameter and returns a Promise that resolves to void. The method is used to remove scripts that were previously injected into the page using Page.evaluateOnNewDocument.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.removescripttoevaluateonnewdocument.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract removeScriptToEvaluateOnNewDocument(
    identifier: string,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining ElementHandle.$$eval Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.$$eval method. It defines the method's generic types and parameters, allowing for type-safe evaluation of elements matching a selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.__eval.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  $$eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<
      Array<NodeFor<Selector>>,
      Params
    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Defining SupportedBrowser Type in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the SupportedBrowser type as a union of string literals 'chrome' and 'firefox'. It represents the browsers that are officially supported by Puppeteer for automation and testing purposes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.supportedbrowser.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type SupportedBrowser = 'chrome' | 'firefox';
```

----------------------------------------

TITLE: Running All Puppeteer Tests via npm
DESCRIPTION: Executes all relevant Puppeteer unit tests for the current platform using the npm script defined in the project's `package.json`. This command typically invokes the Mocha test runner configured for the project.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm test
```

----------------------------------------

TITLE: Setting Cookie in Browser Context - TypeScript
DESCRIPTION: Abstract method declaration for setting cookies in a browser context. Takes an array of CookieData objects as parameters and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.setcookie.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract setCookie(...cookies: CookieData[]): Promise<void>;
}
```

----------------------------------------

TITLE: ElementHandle.click Method Signature (TypeScript)
DESCRIPTION: Defines the signature for the ElementHandle.click method in TypeScript. It shows the 'this' context as ElementHandle<Element> and accepts an optional Readonly<ClickOptions> object. The method returns a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.click.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  click(
    this: ElementHandle<Element>,
    options?: Readonly<ClickOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Setting CHROME_DEVEL_SANDBOX Environment Variable Dockerfile
DESCRIPTION: This Dockerfile instruction sets the `CHROME_DEVEL_SANDBOX` environment variable within the Docker image. This configuration allows Chrome launched by Puppeteer inside the container to locate and use the setuid sandbox executable, assuming the sandbox has been copied into the image at the specified path.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_15

LANGUAGE: Dockerfile
CODE:
```
ENV CHROME_DEVEL_SANDBOX /usr/local/sbin/chrome-devel-sandbox
```

----------------------------------------

TITLE: Method Signature for Page.setViewport in Puppeteer
DESCRIPTION: TypeScript signature for the Page.setViewport method, which takes a Viewport object or null and returns a Promise that resolves when the viewport has been set.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setviewport.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setViewport(viewport: Viewport | null): Promise<void>;
}
```

----------------------------------------

TITLE: Implementing Locator Race Method in TypeScript
DESCRIPTION: Static method implementation for racing multiple locators to find elements in parallel. The method takes an array of locators and returns a new Locator that resolves to the first successful match while ensuring only one element receives the action.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.race.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  static race<Locators extends readonly unknown[] | []>(
    locators: Locators,
  ): Locator<AwaitedLocator<Locators[number]>>;
}
```

----------------------------------------

TITLE: Defining Page.screencast TypeScript Method Signature
DESCRIPTION: TypeScript class definition showing the screencast method signature that accepts optional ScreencastOptions and returns a Promise of ScreenRecorder
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.screencast.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  screencast(options?: Readonly<ScreencastOptions>): Promise<ScreenRecorder>;
}
```

----------------------------------------

TITLE: Get CDP Session by ID in Puppeteer Connection (TypeScript)
DESCRIPTION: Retrieves an existing CDP session associated with the provided session ID from the Connection instance. Returns the CDPSession object if found, otherwise returns null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connection.session.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Connection {
  session(sessionId: string): CDPSession | null;
}
```

----------------------------------------

TITLE: Signature of Locator.click() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Locator.click() method. It indicates that the method is part of the Locator class, accepts optional LocatorClickOptions, and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.click.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  click<ElementType extends Element>(
    this: Locator<ElementType>,
    options?: Readonly<LocatorClickOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Launching Chrome Disabling Sandboxing TS
DESCRIPTION: This TypeScript snippet launches Chrome with the `--no-sandbox` and `--disable-setuid-sandbox` arguments. This disables the browser's sandboxing features, which might be necessary in constrained environments like some Docker containers, but is strongly discouraged due to significant security risks.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_9

LANGUAGE: ts
CODE:
```
const browser = await puppeteer.launch({
  args: ['--no-sandbox', '--disable-setuid-sandbox'],
});
```

----------------------------------------

TITLE: Defining Puppeteer Browser Class (TypeScript)
DESCRIPTION: Defines the abstract Browser class in TypeScript, showing its inheritance from EventEmitter. This class serves as the base for browser instances managed by Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Browser extends EventEmitter<BrowserEvents>
```

----------------------------------------

TITLE: FileChooser Class Declaration
DESCRIPTION: TypeScript class declaration for the FileChooser class that handles file selection dialogs.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.filechooser.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class FileChooser
```

----------------------------------------

TITLE: Hover over Element using Selector - Puppeteer Page - TypeScript
DESCRIPTION: Defines the signature for the Puppeteer Page.hover method. This method takes a CSS or Puppeteer-specific selector string as input. It returns a Promise that resolves when the hover action is complete or rejects if no element matches the selector.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.hover.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  hover(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: FileChooser.isMultiple() Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the isMultiple() method of the FileChooser class. It indicates that the method takes no arguments and returns a boolean value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.filechooser.ismultiple.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class FileChooser {
  isMultiple(): boolean;
}
```

----------------------------------------

TITLE: Signature for ElementHandle.touchEnd in TypeScript
DESCRIPTION: The TypeScript signature for the `ElementHandle.touchEnd` method, showing it is an asynchronous method that takes no explicit parameters (only `this`) and returns a Promise resolving to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.touchend.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  touchEnd(this: ElementHandle<Element>): Promise<void>;
}
```

----------------------------------------

TITLE: Page.focus Method Signature - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `Page.focus` method. It indicates that the method is part of the `Page` class, accepts a single string parameter `selector`, and returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.focus.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  focus(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: Implementing ConsoleMessage.type Method in TypeScript
DESCRIPTION: Defines the type() method on the ConsoleMessage class that returns a ConsoleMessageType value indicating the type of console message. This method helps identify the category of console output (e.g., log, error, warning, etc.).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.type.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ConsoleMessage {
  type(): ConsoleMessageType;
}
```

----------------------------------------

TITLE: Defining Page.type Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `Page.type` method within the `Page` class. It defines the method's name, parameters (`selector`, `text`, `options`), and return type (`Promise<void>`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.type.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  type(
    selector: string,
    text: string,
    options?: Readonly<KeyboardTypeOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Page.tap Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.tap method within the Page class. It takes a string selector as input and returns a Promise that resolves when the tap action is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.tap.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  tap(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: Define Page.addStyleTag Signature (Content)
DESCRIPTION: Defines the TypeScript signature for the `Page.addStyleTag` method when adding a `<style>` tag with content. It accepts options excluding the 'url' property and returns a Promise resolving to an ElementHandle for the injected `<style>` element.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.addstyletag.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  addStyleTag(
    options: Omit<FrameAddStyleTagOptions, 'url'>,
  ): Promise<ElementHandle<HTMLStyleElement>>;
}
```

----------------------------------------

TITLE: Defining Mouse.dragEnter Method Signature in TypeScript
DESCRIPTION: This snippet shows the abstract signature of the `dragEnter` method within the `Mouse` class. It takes a target point and drag data as parameters and returns a Promise that resolves when the event is dispatched.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.dragenter.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Mouse {
  abstract dragEnter(
    target: Point,
    data: Protocol.Input.DragData,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: HTTPResponse fromServiceWorker Method Signature - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `fromServiceWorker` method of the `HTTPResponse` class. It is an abstract method that returns a boolean indicating whether the response was served by a service worker.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.fromserviceworker.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class HTTPResponse {
  abstract fromServiceWorker(): boolean;
}
```

----------------------------------------

TITLE: Get Security Protocol (TypeScript)
DESCRIPTION: Retrieves the security protocol used for the connection as a string. This method is part of the SecurityDetails class in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.securitydetails.protocol.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class SecurityDetails {
  protocol(): string;
}
```

----------------------------------------

TITLE: Defining PaperFormat Type in TypeScript
DESCRIPTION: TypeScript type definition for PaperFormat in Puppeteer, which represents all valid paper format types when printing a PDF. The type accepts uppercase, capitalized, or lowercase format names.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.paperformat.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type PaperFormat =
  | Uppercase<LowerCasePaperFormat>
  | Capitalize<LowerCasePaperFormat>
  | LowerCasePaperFormat;
```

----------------------------------------

TITLE: Defining Predicate Type in TypeScript for Puppeteer
DESCRIPTION: Defines the Predicate type which represents a function that tests a value of type 'From' and returns either a type predicate or a boolean (or Promise<boolean>). This type is used throughout Puppeteer for conditional logic and filtering operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.predicate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type Predicate<From, To extends From = From> =
  | ((value: From) => value is To)
  | ((value: From) => Awaitable<boolean>);
```

----------------------------------------

TITLE: Defining CommonEventEmitter.off Method Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the off() method of CommonEventEmitter. The method removes event listeners for specified event types, with an optional handler parameter. Returns the instance itself for method chaining.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.off.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface CommonEventEmitter {
  off<Key extends keyof Events>(
    type: Key,
    handler?: Handler<Events[Key]>,
  ): this;
}
```

----------------------------------------

TITLE: Defining the FileFormat type in TypeScript
DESCRIPTION: This TypeScript type alias defines the possible string values that represent supported file formats for operations like capturing video or animations. It is a union of 'gif', 'webm', and 'mp4'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.fileformat.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type FileFormat = 'gif' | 'webm' | 'mp4';
```

----------------------------------------

TITLE: Defining CDPSessionEvent namespace in TypeScript
DESCRIPTION: TypeScript declaration for the CDPSessionEvent namespace which contains event types for CDPSession class in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsessionevent.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare namespace CDPSessionEvent
```

----------------------------------------

TITLE: Running Tests
DESCRIPTION: Command for executing all test suites in the project.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npm test
```

----------------------------------------

TITLE: Puppeteer Legacy Intercept Mode - Immediate Abort (TS)
DESCRIPTION: This example shows Puppeteer's Legacy Intercept Mode. When at least one request handler resolves the intercept without specifying a priority, the first resolution (in this case, abort) takes effect immediately, preventing subsequent handlers from running their resolution logic.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
// Final outcome: immediate abort()
page.setRequestInterception(true);
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;

  // Legacy Mode: interception is aborted immediately.
  request.abort('failed');
});
page.on('request', request => {
  if (request.isInterceptResolutionHandled()) return;
  // Control will never reach this point because the request was already aborted in Legacy Mode

  // Cooperative Intercept Mode: votes for continue at priority 0.
  request.continue({}, 0);
});
```

----------------------------------------

TITLE: ConnectionTransport Interface close Method Signature - TypeScript
DESCRIPTION: This snippet shows the TypeScript interface definition for `ConnectionTransport` and the signature of its `close()` method, which takes no arguments and returns void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connectiontransport.close.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface ConnectionTransport {
  close(): void;
}
```

----------------------------------------

TITLE: Defining SessionAttached Event Constant in Typescript
DESCRIPTION: This constant defines the 'sessionattached' event name that's used for handling CDP session attachment events in Puppeteer. It's a string literal type that ensures type safety when working with CDP session events.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsessionevent.sessionattached.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
SessionAttached: 'sessionattached';
```

----------------------------------------

TITLE: Defining Generic Handler Type in TypeScript
DESCRIPTION: Defines a generic Handler type that represents an event handler function. The type accepts a generic parameter T (defaulting to unknown) and declares a function that takes an event of type T and returns void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.handler.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type Handler<T = unknown> = (event: T) => void;
```

----------------------------------------

TITLE: Running Unit Tests - npm/Bash
DESCRIPTION: Executes the project's unit tests. These tests focus on individual code units without requiring a running browser and need Node 20+.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_9

LANGUAGE: bash
CODE:
```
npm run unit
```

----------------------------------------

TITLE: Defining HTTPResponse Abstract Class - TypeScript
DESCRIPTION: TypeScript declaration for the abstract HTTPResponse class. This class is internal and should not be instantiated directly or extended by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class HTTPResponse
```

----------------------------------------

TITLE: Add Puppeteer Angular Schematic
DESCRIPTION: Installs the Puppeteer Angular Schematic into your Angular project using the Angular CLI's `ng add` command. This adds the schematic as a development dependency.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_0

LANGUAGE: bash
CODE:
```
ng add @puppeteer/ng-schematics
```

----------------------------------------

TITLE: Configure E2E Dev Server Port in angular.json
DESCRIPTION: Modifies the `angular.json` configuration for the E2E builder to specify a custom port for the development server, preventing conflicts with `ng start`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "e2e": {
    "builder": "@puppeteer/ng-schematics:puppeteer",
    "options": {
      "commands": [...],
      "devServerTarget": "sandbox:serve",
      "testRunner": "<TestRunner>",
      "port": 8080
    },
    ...
}
```

----------------------------------------

TITLE: Puppeteer Keyboard.type Method Signature (TypeScript)
DESCRIPTION: Defines the abstract signature for the `Keyboard.type` method within the `Keyboard` class in Puppeteer. It shows the required `text` parameter and an optional `options` parameter, indicating it returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.keyboard.type.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Keyboard {
  abstract type(
    text: string,
    options?: Readonly<KeyboardTypeOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Implementing HTTPResponse.fromCache Method in TypeScript
DESCRIPTION: This code snippet defines the fromCache method signature in the HTTPResponse class. The method returns a boolean indicating whether the response was served from the browser's disk or memory cache.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.fromcache.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract fromCache(): boolean;
}
```

----------------------------------------

TITLE: Defining Page.queryObjects Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.queryObjects method. It takes a JSHandle of a prototype and returns a Promise resolving to a JSHandle of an array of objects with that prototype.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.queryobjects.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract queryObjects<Prototype>(
    prototypeHandle: JSHandle<Prototype>,
  ): Promise<JSHandle<Prototype[]>>;
}
```

----------------------------------------

TITLE: Bring Page to Front Method Signature - Puppeteer TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.bringToFront() method in Puppeteer. This method is used to bring the current page's tab to the front, making it active. It is an asynchronous method that returns a Promise which resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.bringtofront.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract bringToFront(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining CookieSourceScheme Type in TypeScript
DESCRIPTION: This snippet defines the TypeScript type `CookieSourceScheme`. It represents the scheme of the origin that originally set a cookie. The possible string literal values are 'Unset', 'NonSecure', and 'Secure'. The 'Unset' value is noted as a temporary feature for emulating legacy cookie scope.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cookiesourcescheme.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type CookieSourceScheme = 'Unset' | 'NonSecure' | 'Secure';
```

----------------------------------------

TITLE: Defining the CookiePartitionKey Interface (TypeScript)
DESCRIPTION: Defines the structure of the CookiePartitionKey interface, which represents a cookie partition key used in Chrome. This interface outlines the properties available for describing the partitioning context of a cookie.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cookiepartitionkey.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CookiePartitionKey
```

----------------------------------------

TITLE: Defining JSCoverageOptions Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for JSCoverageOptions, which provides a set of configurable options for JavaScript coverage in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jscoverageoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface JSCoverageOptions
```

----------------------------------------

TITLE: Defining Puppeteer TracingOptions Interface - TypeScript
DESCRIPTION: This snippet shows the basic signature for the `TracingOptions` interface in TypeScript. It defines the structure used to configure tracing options within Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.tracingoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface TracingOptions
```

----------------------------------------

TITLE: Defining FrameAddStyleTagOptions Interface (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the FrameAddStyleTagOptions interface, which outlines the structure for providing options when adding a style tag to a Puppeteer frame. It indicates that this interface is exported for use in other modules.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frameaddstyletagoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface FrameAddStyleTagOptions
```

----------------------------------------

TITLE: Defining CommandOptions Interface (TypeScript)
DESCRIPTION: This snippet defines the basic structure of the CommandOptions interface in TypeScript, which is used to configure various command executions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.commandoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CommandOptions
```

----------------------------------------

TITLE: Checking Browser Connection Status (Deprecated) - Puppeteer - TypeScript
DESCRIPTION: This code snippet shows the signature for the deprecated `isConnected()` method of the Puppeteer `Browser` class. This method is used to determine if Puppeteer is currently connected to the browser instance. Users should transition to using the `Browser.connected` property for this purpose.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.isconnected.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  isConnected(): boolean;
}
```

----------------------------------------

TITLE: Creating Locators with Functions in Puppeteer (TypeScript)
DESCRIPTION: This code snippet shows the signature for creating a locator with a function in Puppeteer's Frame class. It accepts a function that returns an Awaitable value and returns a Locator object typed with the return type of the function.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.locator.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class Frame {
  locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;
}
```

----------------------------------------

TITLE: Defining HTTPRequest.postData() Method in TypeScript
DESCRIPTION: This code snippet defines the postData() method for the HTTPRequest class. The method returns the request's post body as a string if it exists, or undefined if there is no post body.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.postdata.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract postData(): string | undefined;
}
```

----------------------------------------

TITLE: Defining the HTTPResponse class signature (TypeScript)
DESCRIPTION: This snippet shows the abstract class signature for HTTPResponse in TypeScript. Note that the constructor is internal and this class is not intended for direct instantiation or subclassing by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare abstract class HTTPResponse
```

----------------------------------------

TITLE: Defining HandleOr Type in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the HandleOr type as a union of HandleFor<T>, JSHandle<T>, and T. It allows for flexible typing in Puppeteer's API, enabling functions to accept either handle types or direct values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.handleor.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type HandleOr<T> = HandleFor<T> | JSHandle<T> | T;
```

----------------------------------------

TITLE: Defining AwaitablePredicate Type in TypeScript
DESCRIPTION: This snippet defines the AwaitablePredicate type. It is a generic type that represents a function accepting a single argument of type T and returning a value that is Awaitable<boolean>. This is useful for asynchronous predicate functions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.awaitablepredicate.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type AwaitablePredicate<T> = (value: T) => Awaitable<boolean>;
```

----------------------------------------

TITLE: Defining InnerParams Generic Type in TypeScript
DESCRIPTION: Defines a TypeScript type called InnerParams that takes a generic array type T and applies the FlattenHandle type to each element in the array. This is used internally by Puppeteer for parameter handling.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.innerparams.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type InnerParams<T extends unknown[]> = {
  [K in keyof T]: FlattenHandle<T[K]>;
};
```

----------------------------------------

TITLE: Releasing Mouse Button - Puppeteer TypeScript
DESCRIPTION: Defines the signature for the `up` method within the `Mouse` class in Puppeteer. This method is used to release the mouse button. It optionally accepts `MouseOptions` and returns a Promise that resolves when the action is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.mouse.up.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Mouse {
  abstract up(options?: Readonly<MouseOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Puppeteer Frame.click Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the Frame.click method. It takes a selector string and optional ClickOptions, returning a Promise that resolves when the click action is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.click.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;
}
```

----------------------------------------

TITLE: Signature for Frame.tap - TypeScript
DESCRIPTION: The TypeScript signature for the Frame.tap method, showing it is a method of the Frame class that accepts a string selector and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.tap.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  tap(selector: string): Promise<void>;
}
```

----------------------------------------

TITLE: Defining ElementHandle.toElement Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `toElement` method within the `ElementHandle` class, indicating its generic type parameters, the `tagName` parameter, and the returned Promise type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.toelement.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  toElement<K extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap>(
    tagName: K,
  ): Promise<HandleFor<ElementFor<K>>>;
}
```

----------------------------------------

TITLE: Configuring Test Port in Angular JSON
DESCRIPTION: JSON configuration to specify a custom port for E2E tests in angular.json
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
{
  "e2e": {
    "builder": "@puppeteer/ng-schematics:puppeteer",
    "options": {
      "commands": [...],
      "devServerTarget": "sandbox:serve",
      "testRunner": "<TestRunner>",
      "port": 8080
    },
    ...
}
```

----------------------------------------

TITLE: Defining EventsWithWildcard Generic Type in TypeScript
DESCRIPTION: A TypeScript type definition that extends an Events record to include wildcard event handling. The type takes a generic parameter Events and adds a '*' key that can hold any of the event types from the original record.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventswithwildcard.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type EventsWithWildcard<Events extends Record<EventType, unknown>> =
  Events & {
    '*': Events[keyof Events];
  };
```

----------------------------------------

TITLE: Defining Quad Type in TypeScript for Puppeteer
DESCRIPTION: Declares the Quad type as an array of four Point objects. This type is used to represent quadrilateral shapes in Puppeteer, likely for tasks involving element positioning or layout calculations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.quad.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type Quad = [Point, Point, Point, Point];
```

----------------------------------------

TITLE: Defining SerializedAXNode Interface in TypeScript
DESCRIPTION: This code snippet defines the SerializedAXNode interface, which represents a DOM node with properties relevant to accessibility within the Puppeteer library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.serializedaxnode.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface SerializedAXNode
```

----------------------------------------

TITLE: Get Certificate Validity Start Time Puppeteer Typescript
DESCRIPTION: Retrieves the Unix timestamp indicating the start date of the certificate's validity. This method is part of the `SecurityDetails` class in Puppeteer. It returns a number representing the timestamp.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.securitydetails.validfrom.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class SecurityDetails {
  validFrom(): number;
}
```

----------------------------------------

TITLE: Defining CommonEventEmitter.emit() Method Signature in TypeScript
DESCRIPTION: This snippet defines the emit() method signature for the CommonEventEmitter interface. It takes a generic type parameter Key extending keyof Events, a type parameter of that key, and an event of the corresponding type from the Events object. The method returns a boolean value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.emit.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface CommonEventEmitter {
  emit<Key extends keyof Events>(type: Key, event: Events[Key]): boolean;
}
```

----------------------------------------

TITLE: Defining RemoteAddress Interface - TypeScript
DESCRIPTION: This snippet shows the TypeScript definition for the `RemoteAddress` interface, which is used to represent a remote network address, typically including an IP address and a port number.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.remoteaddress.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface RemoteAddress
```

----------------------------------------

TITLE: Defining CDP Session Detached Event Constant in TypeScript
DESCRIPTION: This constant defines the string value for the SessionDetached event in Puppeteer's CDP session. When a CDP session is detached, this event is emitted with the value 'sessiondetached'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsessionevent.sessiondetached.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
SessionDetached: 'sessiondetached';
```

----------------------------------------

TITLE: Constructing CSSCoverage Instance (TypeScript)
DESCRIPTION: Initializes a new instance of the `CSSCoverage` class. It requires a `CDPSession` instance to interact with the Chrome DevTools Protocol.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.csscoverage._constructor_.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class CSSCoverage {
  constructor(client: CDPSession);
}
```

----------------------------------------

TITLE: Retrieving WebWorkers in Puppeteer using Page.workers() method
DESCRIPTION: This snippet shows the signature of the Page.workers() method in Puppeteer. It returns an array of WebWorker objects associated with the page. The method is part of the Page class and does not include ServiceWorkers.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.workers.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract workers(): WebWorker[];
}
```

----------------------------------------

TITLE: Getting Listener Count for EventEmitter Event (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `listenerCount` method of the `EventEmitter` class. It takes an event `type` and returns the number of listeners currently bound to that event.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.eventemitter.listenercount.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class EventEmitter {
  listenerCount(type: keyof EventsWithWildcard<Events>): number;
}
```

----------------------------------------

TITLE: Defining ResponseForRequest Interface - TypeScript
DESCRIPTION: This snippet defines the basic structure of the `ResponseForRequest` interface in TypeScript, which outlines the properties needed to construct a response for a intercepted request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.responseforrequest.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface ResponseForRequest
```

----------------------------------------

TITLE: Building All Packages - npm/Bash
DESCRIPTION: Runs the build script defined in the package.json to build all packages within the Puppeteer project. This command compiles the source code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Defining SecurityDetails.validTo Method in TypeScript
DESCRIPTION: TypeScript class method definition that returns a Unix timestamp indicating when a security certificate's validity period ends. The method returns a number representing the expiration timestamp.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.validto.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class SecurityDetails {
  validTo(): number;
}
```

----------------------------------------

TITLE: Defining BrowserPlatform Enum in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the BrowserPlatform enum, which includes various platform-architecture combinations used for browser downloads. It includes options for Linux, macOS, and Windows systems, with both x86 and ARM architectures where applicable.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.browserplatform.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare enum BrowserPlatform
```

----------------------------------------

TITLE: Defining TargetFilterCallback Type in Puppeteer (TypeScript)
DESCRIPTION: This code defines the TypeScript type `TargetFilterCallback`. It represents a function that accepts a `Target` object as an argument and returns a boolean value. This function signature is used in Puppeteer APIs that allow filtering targets.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.targetfiltercallback.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type TargetFilterCallback = (target: Target) => boolean;
```

----------------------------------------

TITLE: Defining Puppeteer ErrorCode Type in TypeScript
DESCRIPTION: This TypeScript code defines the union type `ErrorCode` used in Puppeteer to represent various network or browser-related error conditions. It lists the possible string literal values that an `ErrorCode` can take, such as 'aborted', 'timedout', or 'failed'.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.errorcode.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type ErrorCode =
  | 'aborted'
  | 'accessdenied'
  | 'addressunreachable'
  | 'blockedbyclient'
  | 'blockedbyresponse'
  | 'connectionaborted'
  | 'connectionclosed'
  | 'connectionfailed'
  | 'connectionrefused'
  | 'connectionreset'
  | 'internetdisconnected'
  | 'namenotresolved'
  | 'timedout'
  | 'failed';
```

----------------------------------------

TITLE: Declaring Puppeteer SecurityDetails Class (TypeScript)
DESCRIPTION: Declares the `SecurityDetails` class in TypeScript. This class represents security details of a response received over a secure connection. The constructor is internal and should not be called directly by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.securitydetails.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class SecurityDetails
```

----------------------------------------

TITLE: Defining the ConnectionTransport Interface (TypeScript)
DESCRIPTION: This snippet shows the basic signature for the `ConnectionTransport` interface in TypeScript. This interface defines the structure required for objects that handle the transport layer of a connection, specifying the contract for message handling and transport lifecycle.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connectiontransport.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface ConnectionTransport
```

----------------------------------------

TITLE: BrowserContext.clearPermissionOverrides Method Signature in TypeScript
DESCRIPTION: The method signature for the clearPermissionOverrides method in the BrowserContext class. This abstract method returns a Promise that resolves to void when all permission overrides for the browser context have been cleared.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.clearpermissionoverrides.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract clearPermissionOverrides(): Promise<void>;
}
```

----------------------------------------

TITLE: Interface Signature - FrameWaitForFunctionOptions - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `FrameWaitForFunctionOptions` interface, indicating its structure and type definition within the Puppeteer library. It serves as the blueprint for creating an options object when using methods that wait for a function in a frame.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.framewaitforfunctionoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface FrameWaitForFunctionOptions
```

----------------------------------------

TITLE: Implementing the isClosed method in Puppeteer's Page class
DESCRIPTION: Abstract method signature for the isClosed() method in the Page class. This method returns a boolean value that indicates whether the page has been closed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.isclosed.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract isClosed(): boolean;
}
```

----------------------------------------

TITLE: Accessing RemoteObject in Puppeteer's JSHandle Class (TypeScript)
DESCRIPTION: This code snippet defines the remoteObject method in the JSHandle class. It returns a Protocol.Runtime.RemoteObject, which provides access to the underlying remote object backing the handle.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.remoteobject.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  abstract remoteObject(): Protocol.Runtime.RemoteObject;
}
```

----------------------------------------

TITLE: Defining WebDriver BiDi WebSocket Endpoint Regex Pattern in TypeScript
DESCRIPTION: Declaration of a constant regular expression pattern used to validate or match WebDriver BiDi websocket endpoint URLs. This is a TypeScript type definition showing the constant's signature.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.webdriver_bidi_websocket_endpoint_regex.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
WEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX: RegExp;
```

----------------------------------------

TITLE: Defining Page.setCacheEnabled Method in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the setCacheEnabled method within the Page class, indicating it's an abstract method that takes an optional boolean parameter and returns a Promise resolving to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setcacheenabled.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setCacheEnabled(enabled?: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Keyboard.press() Method in TypeScript
DESCRIPTION: Abstract TypeScript class definition for the Keyboard.press() method, which is a shortcut for Keyboard.down() and Keyboard.up(). The method accepts a key parameter and optional configuration for handling text input, delay, and keyboard commands.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.press.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Keyboard {
  abstract press(
    key: KeyInput,
    options?: Readonly<KeyPressOptions>,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Updating Base URL for E2E Tests
DESCRIPTION: TypeScript code to update the base URL in the E2E test utility file to match the custom port configuration.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
const baseUrl = 'http://localhost:8080';
```

----------------------------------------

TITLE: Defining ScreencastOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for configuring screencast recordings in Puppeteer. Includes options for video format, quality, dimensions, frame rate, and other recording parameters.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.screencastoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ScreencastOptions
```

----------------------------------------

TITLE: Page.getDefaultNavigationTimeout Method Signature in TypeScript
DESCRIPTION: The method signature for getDefaultNavigationTimeout in the Page abstract class. This method returns the current default navigation timeout value in milliseconds that will be used for navigation operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.getdefaultnavigationtimeout.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract getDefaultNavigationTimeout(): number;
}
```

----------------------------------------

TITLE: Implementing CDPSession.detach Method in TypeScript
DESCRIPTION: Defines the abstract detach method within the CDPSession class. This method detaches the CDP session from its target, after which the session object won't emit events and can't be used to send messages.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.detach.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class CDPSession {
  abstract detach(): Promise<void>;
}
```

----------------------------------------

TITLE: Method Signature for Process.waitForLineOutput
DESCRIPTION: This snippet shows the TypeScript signature for the `waitForLineOutput` method within the `Process` class. It takes a regular expression and an optional timeout, returning a Promise that resolves with a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.process.waitforlineoutput.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Process {
  waitForLineOutput(regex: RegExp, timeout?: number): Promise<string>;
}
```

----------------------------------------

TITLE: Implementing Browser.version() Method in TypeScript
DESCRIPTION: TypeScript class definition showing the abstract version() method in the Browser class that returns a Promise resolving to a string containing the browser name and version.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.version.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract version(): Promise<string>;
}
```

----------------------------------------

TITLE: Signature of HTTPRequest.failure method
DESCRIPTION: Defines the abstract signature for the `failure()` method within the `HTTPRequest` class, showing its return type which is either an object containing `errorText` or `null`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.failure.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract failure(): {
    errorText: string;
  } | null;
}
```

----------------------------------------

TITLE: Get Browser for Target (TypeScript)
DESCRIPTION: Retrieves the Browser instance that the current Target belongs to. This method is abstract and part of the Target class definition.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.target.browser.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract browser(): Browser;
}
```

----------------------------------------

TITLE: Implementing Page Reload Method in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for reloading a page in Puppeteer. The method accepts optional WaitForOptions and returns a Promise that resolves to either an HTTPResponse object or null. The response represents the main resource response, and in cases of multiple redirects, it provides the response of the last redirect.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.reload.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract reload(options?: WaitForOptions): Promise<HTTPResponse | null>;
}
```

----------------------------------------

TITLE: Get Main Frame - Puppeteer - TypeScript
DESCRIPTION: Retrieves the main frame associated with the page. This method provides access to the primary frame content, allowing interaction with the main document. It returns a Frame object representing the main frame.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.mainframe.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract mainFrame(): Frame;
}
```

----------------------------------------

TITLE: Defining SecurityDetails.validFrom() Method in TypeScript
DESCRIPTION: This code snippet defines the validFrom() method in the SecurityDetails class. The method returns a number representing the Unix timestamp marking the start of the certificate's validity.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.validfrom.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class SecurityDetails {
  validFrom(): number;
}
```

----------------------------------------

TITLE: Declaring DeviceRequestPromptDevice Class in TypeScript
DESCRIPTION: TypeScript class declaration for DeviceRequestPromptDevice, which represents a device in a request prompt. This class is intended for internal use as noted in the remarks.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestpromptdevice.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class DeviceRequestPromptDevice
```

----------------------------------------

TITLE: Defining the HTTPRequest.finalizeInterceptions Method in TypeScript
DESCRIPTION: The TypeScript signature for the finalizeInterceptions method in the HTTPRequest class. This method awaits pending interception handlers and then determines how to fulfill the request interception, returning a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.finalizeinterceptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  finalizeInterceptions(): Promise<void>;
}
```

----------------------------------------

TITLE: Running Smoke Tests
DESCRIPTION: Command to execute smoke tests for integration testing
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
node tools/smoke.mjs
```

----------------------------------------

TITLE: Example Commit Message (Conventional Commits)
DESCRIPTION: Demonstrates the Conventional Commits format for Puppeteer commit messages. It includes a type, scope, subject, body, issue references, and a "BREAKING CHANGE" footer explaining a breaking API change and how to adapt.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_12

LANGUAGE: text
CODE:
```
fix(page): fix page.pizza method

This patch fixes page.pizza so that it works with iframes.

Issues: #123, #234

BREAKING CHANGE: page.pizza now delivers pizza at home by default.
To deliver to a different location, use the "deliver" option:
  `page.pizza({deliver: 'work'})`.
```

----------------------------------------

TITLE: Unregistering Custom Query Handler in Puppeteer - TypeScript
DESCRIPTION: Unregisters a custom query handler previously registered with `Puppeteer.registerCustomQueryHandler` by its unique name.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteer.unregistercustomqueryhandler.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Puppeteer {
  static unregisterCustomQueryHandler(name: string): void;
}
```

----------------------------------------

TITLE: Cleaning Project Build Artifacts - npm/Bash
DESCRIPTION: Removes build directories and artifacts from the project. This is a standard step before performing a clean install and build.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_17

LANGUAGE: bash
CODE:
```
npm run clean
```

----------------------------------------

TITLE: Querying Elements with ElementHandle.$$ TypeScript Signature
DESCRIPTION: This snippet provides the TypeScript signature for the ElementHandle.$$() method. It shows that the method accepts a selector string and optional query options, returning a Promise that resolves to an array of ElementHandle instances representing the found elements.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.__.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  $$<Selector extends string>(
    selector: Selector,
    options?: QueryOptions,
  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
}
```

----------------------------------------

TITLE: Defining ElementHandle.focus() Method in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the focus() method of the ElementHandle class. The method returns a Promise that resolves to void, indicating it's an asynchronous operation that doesn't return a value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.focus.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  focus(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining setBypassServiceWorker Method in Page Class (TypeScript)
DESCRIPTION: This code snippet defines the setBypassServiceWorker method in the Page class. It takes a boolean parameter to determine whether to bypass the service worker and load from the network. The method returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setbypassserviceworker.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setBypassServiceWorker(bypass: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Defining HandleFor Type Alias in TypeScript
DESCRIPTION: Defines the HandleFor type alias using a conditional type. If the generic type T extends Node, it resolves to ElementHandle<T>; otherwise, it resolves to JSHandle<T>. This type is used to represent handles to values in the browser context, distinguishing between DOM elements and other JavaScript objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.handlefor.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type HandleFor<T> = T extends Node ? ElementHandle<T> : JSHandle<T>;
```

----------------------------------------

TITLE: Retrieving Browser Instance from BrowserContext in Puppeteer TypeScript
DESCRIPTION: Abstract method signature for retrieving the Browser instance associated with a BrowserContext. This method allows accessing the parent Browser object from a BrowserContext instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.browser.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserContext {
  abstract browser(): Browser;
}
```

----------------------------------------

TITLE: Defining BrowserContext Class in TypeScript
DESCRIPTION: Declares the abstract BrowserContext class that extends EventEmitter with BrowserContextEvents.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browsercontext.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class BrowserContext extends EventEmitter<BrowserContextEvents>
```

----------------------------------------

TITLE: Defining CSSCoverage Class in TypeScript
DESCRIPTION: This snippet defines the CSSCoverage class exported by Puppeteer. It includes the class signature, indicating that it's a TypeScript declaration.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.csscoverage.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class CSSCoverage
```

----------------------------------------

TITLE: Defining NodeFor Type Alias in TypeScript
DESCRIPTION: This snippet defines the `NodeFor` type alias in TypeScript. It is a generic type that takes a `ComplexSelector` string and is aliased to the `ParseSelector` type, likely used for type safety when working with DOM selectors in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.nodefor.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type NodeFor<ComplexSelector extends string> =
  ParseSelector<ComplexSelector>;
```

----------------------------------------

TITLE: Defining Browser.createBrowserContext() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the createBrowserContext() method in the Browser class. It creates a new browser context with optional BrowserContextOptions and returns a Promise resolving to a BrowserContext object.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.createbrowsercontext.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract createBrowserContext(
    options?: BrowserContextOptions,
  ): Promise<BrowserContext>;
}
```

----------------------------------------

TITLE: Retrieving CDPSession ID in TypeScript
DESCRIPTION: This snippet shows the signature of the `id()` method within the `CDPSession` class. The method returns a string representing the unique identifier of the CDP session.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cdpsession.id.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class CDPSession {
  abstract id(): string;
}
```

----------------------------------------

TITLE: Ending Touch Event in Puppeteer (TypeScript)
DESCRIPTION: Defines the signature for the `end()` method within the `TouchHandle` interface. This method is used to programmatically dispatch a `touchend` event for a touch handle. It returns a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.touchhandle.end.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface TouchHandle {
  end(): Promise<void>;
}
```

----------------------------------------

TITLE: Declaring ChromeReleaseChannel Enum - TypeScript
DESCRIPTION: This snippet shows the TypeScript declaration signature for the ChromeReleaseChannel enum, indicating it is exported and declared.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.chromereleasechannel.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare enum ChromeReleaseChannel
```

----------------------------------------

TITLE: Running Tests Using Mocha Runner in Bash
DESCRIPTION: Command to build and run all tests with the Mocha Runner.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm run build && npm run test
```

----------------------------------------

TITLE: Declaring CDPSessionEvent Namespace in TypeScript
DESCRIPTION: Declares the CDPSessionEvent namespace in TypeScript. This namespace is used to group and organize events emitted by the CDPSession class within the Puppeteer library.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cdpsessionevent.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare namespace CDPSessionEvent
```

----------------------------------------

TITLE: Defining close() Method in ConnectionTransport Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the close() method in the ConnectionTransport interface. This method is used to close a connection transport and doesn't return any value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connectiontransport.close.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface ConnectionTransport {
  close(): void;
}
```

----------------------------------------

TITLE: Getting Request URL Signature in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `url()` method of the `HTTPRequest` class in Puppeteer. This method is used to retrieve the URL of the HTTP request object and returns a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.url.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract url(): string;
}
```

----------------------------------------

TITLE: Retrieving Web Worker URL - TypeScript
DESCRIPTION: Method signature for getting the URL of a web worker instance. This method is part of the WebWorker class and returns the string URL associated with the web worker.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.webworker.url.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class WebWorker {
  url(): string;
}
```

----------------------------------------

TITLE: Defining Target.worker() Method in TypeScript
DESCRIPTION: Defines the worker() method on the Target class. This method returns a Promise that resolves to either a WebWorker object or null, depending on the target type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.worker.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  worker(): Promise<WebWorker | null>;
}
```

----------------------------------------

TITLE: Signature for Browser.cookies() method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Browser.cookies() method. It indicates that the method is part of the Browser class and returns a Promise that resolves to an array of Cookie objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.cookies.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  cookies(): Promise<Cookie[]>;
}
```

----------------------------------------

TITLE: Defining Frame.select Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the select() method in the Frame class. The method accepts a selector string and variable number of value strings to select.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.select.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  select(selector: string, ...values: string[]): Promise<string[]>;
}
```

----------------------------------------

TITLE: Adding HTMLLinkElement to a Frame in Puppeteer (TypeScript)
DESCRIPTION: Method signature for adding a link element pointing to an external stylesheet to a frame. This overload takes complete FrameAddStyleTagOptions including a URL and returns a Promise that resolves to an ElementHandle for the created HTMLLinkElement.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.addstyletag.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class Frame {
  addStyleTag(
    options: FrameAddStyleTagOptions,
  ): Promise<ElementHandle<HTMLLinkElement>>;
}
```

----------------------------------------

TITLE: Implementing Locator.clone Method in Puppeteer TypeScript
DESCRIPTION: The signature for the clone method in the Locator class. This method creates a copy of the current Locator instance and returns a new instance of the same type T.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.clone.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  clone(): Locator<T>;
}
```

----------------------------------------

TITLE: Implementing Service Worker Response Check in TypeScript
DESCRIPTION: Abstract method definition that returns a boolean indicating whether the HTTP response was served by a service worker. This method is part of the HTTPResponse class in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.fromserviceworker.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract fromServiceWorker(): boolean;
}
```

----------------------------------------

TITLE: Retrieving Console Message Text in Puppeteer with TypeScript
DESCRIPTION: The text() method belongs to the ConsoleMessage class in Puppeteer and returns the string content of a console message. This method takes no parameters and returns the full text of the console message as a string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.consolemessage.text.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ConsoleMessage {
  text(): string;
}
```

----------------------------------------

TITLE: Get CDPSession Connection (TypeScript)
DESCRIPTION: Retrieves the underlying connection associated with this CDPSession instance. Returns a Connection object if available, otherwise returns undefined.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cdpsession.connection.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class CDPSession {
  abstract connection(): Connection | undefined;
}
```

----------------------------------------

TITLE: Defining the makeProgressCallback function signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the makeProgressCallback function. It takes a Browser instance and a string build ID, and returns a function that can be used as a progress callback, accepting downloaded and total byte counts.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.makeprogresscallback.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function makeProgressCallback(
  browser: Browser,
  buildId: string,
): (downloadedBytes: number, totalBytes: number) => void;
```

----------------------------------------

TITLE: Run E2E Tests with Angular CLI
DESCRIPTION: Executes the end-to-end tests configured by the Puppeteer Angular Schematic using the standard Angular CLI `ng e2e` command.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_1

LANGUAGE: bash
CODE:
```
ng e2e
```

----------------------------------------

TITLE: Page.emulateVisionDeficiency Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the Page.emulateVisionDeficiency method which allows simulation of vision deficiencies on a page. The method takes an optional type parameter that specifies the vision deficiency to simulate.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatevisiondeficiency.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateVisionDeficiency(
    type?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type'],
  ): Promise<void>;
}
```

----------------------------------------

TITLE: TypeScript Signature for Page.isDragInterceptionEnabled
DESCRIPTION: This code snippet shows the TypeScript signature for the obsolete isDragInterceptionEnabled method within the Page class, indicating it is an abstract method that returns a boolean value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.isdraginterceptionenabled.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract isDragInterceptionEnabled(): boolean;
}
```

----------------------------------------

TITLE: Checking Navigation Requests in Puppeteer TypeScript
DESCRIPTION: Abstract method implementation that determines whether the current HTTP request is responsible for driving frame navigation. Returns a boolean indicating if the request is a navigation request.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httprequest.isnavigationrequest.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract isNavigationRequest(): boolean;
}
```

----------------------------------------

TITLE: Getting Child Frames (TypeScript)
DESCRIPTION: The childFrames() method is an abstract method within the Frame class that returns an array of Frame objects. Each object in the array represents a child frame of the current frame.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.childframes.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Frame {
  abstract childFrames(): Frame[];
}
```

----------------------------------------

TITLE: Defining ElementHandle.dragOver Method in TypeScript
DESCRIPTION: Class method signature for ElementHandle.dragOver, which takes an optional DragData parameter. This method is marked as obsolete as dragover events are now automatically performed during dragging operations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.dragover.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  dragOver(
    this: ElementHandle<Element>,
    data?: Protocol.Input.DragData,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Signature for JSHandle.evaluateHandle method
DESCRIPTION: Defines the signature of the `evaluateHandle` method on the `JSHandle` class, showing its generic types for parameters and return value, and accepting a function or string and additional arguments.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.evaluatehandle.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}
```

----------------------------------------

TITLE: Defining the frame() Method in HTTPResponse Class in TypeScript
DESCRIPTION: This code snippet defines the abstract frame() method within the HTTPResponse class. The method returns the Frame that initiated the HTTP response, or null when navigating to error pages.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.frame.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract frame(): Frame | null;
}
```

----------------------------------------

TITLE: Declaring Puppeteer EventEmitter Class Signature (TypeScript)
DESCRIPTION: Defines the signature for the EventEmitter class in Puppeteer. It's a generic class extending CommonEventEmitter and implementing the event handling interface with wildcard support.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.eventemitter.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class EventEmitter<Events extends Record<EventType, unknown>> implements CommonEventEmitter<EventsWithWildcard<Events>>
```

----------------------------------------

TITLE: Signature for Page.queryObjects in Puppeteer (TypeScript)
DESCRIPTION: Defines the signature for the `queryObjects` method on the `Page` class. It is an abstract method that takes a `JSHandle` to a prototype and returns a `Promise` resolving to a `JSHandle` containing an array of objects matching that prototype.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.queryobjects.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract queryObjects<Prototype>(
    prototypeHandle: JSHandle<Prototype>,
  ): Promise<JSHandle<Prototype[]>>;
}
```

----------------------------------------

TITLE: Retrieving Status Code HTTPResponse TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the status() method of the HTTPResponse class. This method is used to retrieve the numerical HTTP status code (e.g., 200, 404) associated with the response.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httpresponse.status.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract status(): number;
}
```

----------------------------------------

TITLE: Defining HTTPResponse.url() Method in TypeScript
DESCRIPTION: This code snippet defines the url() method in the HTTPResponse class. The method is declared as abstract and returns a string representing the URL of the response.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.httpresponse.url.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPResponse {
  abstract url(): string;
}
```

----------------------------------------

TITLE: Building Puppeteer for Examples
DESCRIPTION: This command builds a version of Puppeteer specifically for use with the provided examples.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/examples/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Implementing JSHandle.asElement Method in TypeScript with Puppeteer
DESCRIPTION: Declaration of the asElement() method in the JSHandle class. This method returns either null or the handle itself if the handle is an instance of ElementHandle, which represents a DOM element in the page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.aselement.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  abstract asElement(): ElementHandle<Node> | null;
}
```

----------------------------------------

TITLE: JSHandle.getProperties Method Signature in TypeScript
DESCRIPTION: The TypeScript signature for the JSHandle.getProperties() method which returns a Promise that resolves to a Map of string keys and JSHandle values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.getproperties.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class JSHandle {
  getProperties(): Promise<Map<string, JSHandle>>;
}
```

----------------------------------------

TITLE: Defining Puppeteer Core Variable Type in TypeScript
DESCRIPTION: Type signature defining the puppeteer variable as an instance of PuppeteerCore.PuppeteerNode, which provides the main interface for browser automation and control.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
puppeteer: PuppeteerCore.PuppeteerNode;
```

----------------------------------------

TITLE: Getting HTTP Request Method (TypeScript)
DESCRIPTION: The method() method of the HTTPRequest class returns the HTTP method used for the request as a string (e.g., 'GET', 'POST'). It is an abstract method defined within the class signature.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.method.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class HTTPRequest {
  abstract method(): string;
}
```

----------------------------------------

TITLE: defaultArgs Function Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the defaultArgs function. It takes an optional PuppeteerCore.LaunchOptions object and returns an array of strings.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.defaultargs.md#_snippet_0

LANGUAGE: typescript
CODE:
```
defaultArgs: (options?: PuppeteerCore.LaunchOptions) => string[]
```

----------------------------------------

TITLE: Defining JSCoverageOptions Interface in TypeScript
DESCRIPTION: Defines the `JSCoverageOptions` interface in TypeScript, which specifies the configurable options available for JavaScript code coverage collection in Puppeteer. It lists properties like `includeRawScriptCoverage`, `reportAnonymousScripts`, `resetOnNavigation`, and `useBlockCoverage`, all of which are optional boolean flags controlling different aspects of coverage reporting.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jscoverageoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface JSCoverageOptions
```

----------------------------------------

TITLE: Defining CookiePartitionKey Interface in TypeScript
DESCRIPTION: TypeScript interface definition for CookiePartitionKey in Puppeteer, which represents cookie partition information in Chrome. This interface includes properties for the source origin and cross-site ancestor status.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookiepartitionkey.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CookiePartitionKey
```

----------------------------------------

TITLE: Defining MouseOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the MouseOptions interface in TypeScript. It specifies the structure for mouse event options in Puppeteer, including the button to be pressed and the click count.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouseoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface MouseOptions
```

----------------------------------------

TITLE: Defining InternalNetworkConditions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for InternalNetworkConditions which extends the NetworkConditions interface in Puppeteer. It adds the offline boolean property to the base interface.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.internalnetworkconditions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface InternalNetworkConditions extends NetworkConditions
```

----------------------------------------

TITLE: Defining Cookie Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the Cookie object in Puppeteer. It extends the CookieData interface and represents a browser cookie with all its associated properties.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cookie.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Cookie extends CookieData
```

----------------------------------------

TITLE: Handling Requests in Puppeteer (Legacy Mode)
DESCRIPTION: Shows a basic Puppeteer request handler using the older Legacy Mode. It checks the request URL and aborts image requests while continuing others. Resolution is immediate upon handler completion.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/network-interception.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
page.on('request', interceptedRequest => {
  if (request.isInterceptResolutionHandled()) return;
  if (
    interceptedRequest.url().endsWith('.png') ||
    interceptedRequest.url().endsWith('.jpg')
  )
    interceptedRequest.abort();
  else interceptedRequest.continue();
});
```

----------------------------------------

TITLE: Defining LocatorClickOptions Type in TypeScript
DESCRIPTION: This TypeScript snippet defines the `LocatorClickOptions` type. It is a type alias that combines the properties of `ClickOptions` and `ActionOptions`, intended for use as configuration options when performing a click action on an element located by a Locator in Puppeteer. It depends on the definitions of `ClickOptions` and `ActionOptions`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locatorclickoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type LocatorClickOptions = ClickOptions & ActionOptions;
```

----------------------------------------

TITLE: Running Unit Tests
DESCRIPTION: Command to execute the schematic's unit test suite
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
npm run test
```

----------------------------------------

TITLE: Defining InternalNetworkConditions Interface (TypeScript)
DESCRIPTION: This snippet defines the `InternalNetworkConditions` interface. It extends the base `NetworkConditions` interface, adding specific properties for internal use in network simulation within Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.internalnetworkconditions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface InternalNetworkConditions extends NetworkConditions
```

----------------------------------------

TITLE: Defining ElementHandle.dragEnter Method Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the dragEnter method for the ElementHandle class. The method is asynchronous and takes an optional DragData parameter. It is marked as obsolete and should not be used.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.dragenter.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  dragEnter(
    this: ElementHandle<Element>,
    data?: Protocol.Input.DragData,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Constructing CLI Instance in TypeScript
DESCRIPTION: Signature for the CLI class constructor. It takes 'opts' and 'rl' as parameters, though their types are not specified in this snippet. This constructor initializes a new instance of the CLI class.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cli.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
(constructor)(opts, rl)
```

----------------------------------------

TITLE: Checking Project Dependencies - npm/Bash
DESCRIPTION: Runs the npm script to check project dependencies. This step is part of the manual browser revision update process, typically performed after updating package.json.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_15

LANGUAGE: bash
CODE:
```
npm run check
```

----------------------------------------

TITLE: Frame.name() Method Signature - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the obsolete Frame.name() method. It indicates that the method belongs to the Frame class and returns a string value representing the frame's name attribute.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.name.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
class Frame {
  name(): string;
}
```

----------------------------------------

TITLE: Define Page.setDragInterception Method Signature in TypeScript
DESCRIPTION: Defines the signature for the obsolete `setDragInterception` method within the `Page` class, showing it accepts a boolean parameter `enabled` and returns a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setdraginterception.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setDragInterception(enabled: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Puppeteer PredefinedNetworkConditions TypeScript Signature
DESCRIPTION: This snippet shows the TypeScript signature for the `PredefinedNetworkConditions` variable in Puppeteer. It defines the structure as a Readonly object containing keys for different network conditions ('Slow 3G', 'Fast 3G', 'Slow 4G', 'Fast 4G'), each mapping to a `NetworkConditions` type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.predefinednetworkconditions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
PredefinedNetworkConditions: Readonly<{
  'Slow 3G': NetworkConditions;
  'Fast 3G': NetworkConditions;
  'Slow 4G': NetworkConditions;
  'Fast 4G': NetworkConditions;
}>;
```

----------------------------------------

TITLE: Constructing CLI Instance (TypeScript)
DESCRIPTION: This snippet shows the signature for the constructor of the `CLI` class. It accepts an optional `opts` object for configuration, which can be a string or a detailed object specifying cache path, script name, version, prefix command, cache path override allowance, and pinned browsers. It also accepts an optional `rl` parameter, which is a readline interface.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.cli._constructor_.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class CLI {
  constructor(
    opts?:
      | string
      | {
          cachePath?: string;
          scriptName?: string;
          version?: string;
          prefixCommand?: {
            cmd: string;
            description: string;
          };
          allowCachePathOverride?: boolean;
          pinnedBrowsers?: Partial<
            Record<
              Browser,
              {
                buildId: string;
                skipDownload: boolean;
              }
            >
          >;
        },
    rl?: readline.Interface,
  );
}
```

----------------------------------------

TITLE: Locator Class Signature
DESCRIPTION: Defines the abstract class signature for the Puppeteer Locator, extending EventEmitter and used for typing.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Locator<T> extends EventEmitter<LocatorEvents>
```

----------------------------------------

TITLE: Installing Dependencies with Firefox - npm/Bash
DESCRIPTION: Installs project dependencies using npm, specifically configuring it to download Firefox as the default browser for testing instead of the default Chromium.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_2

LANGUAGE: bash
CODE:
```
PUPPETEER_BROWSER=firefox npm install
```

----------------------------------------

TITLE: Defining Puppeteer ClickOptions Interface (TypeScript)
DESCRIPTION: Defines the `ClickOptions` interface in TypeScript, showing that it extends the `MouseClickOptions` interface to inherit properties like button, count, and delay, while potentially adding specific click-related options.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.clickoptions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface ClickOptions extends MouseClickOptions
```

----------------------------------------

TITLE: Defining BrowserContext.overridePermissions Method Signature (TypeScript)
DESCRIPTION: This snippet shows the abstract method signature for `overridePermissions` within the `BrowserContext` class, outlining its required parameters: `origin` (a string URL) and `permissions` (an array of `Permission` enums), and its return type, a `Promise<void>`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browsercontext.overridepermissions.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class BrowserContext {
  abstract overridePermissions(
    origin: string,
    permissions: Permission[],
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining the UninstallOptions Interface (TypeScript)
DESCRIPTION: This snippet shows the basic signature for the `UninstallOptions` interface, which is used to configure the options for uninstalling a browser build in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.uninstalloptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface UninstallOptions
```

----------------------------------------

TITLE: Retrieving Default Value from Dialog in TypeScript
DESCRIPTION: This method returns the default value of a prompt dialog, or an empty string if the dialog is not a prompt. It's part of the Dialog class in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.defaultvalue.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Dialog {
  defaultValue(): string;
}
```

----------------------------------------

TITLE: Defining BrowserLauncher Abstract Class in TypeScript
DESCRIPTION: Declaration of the abstract BrowserLauncher class that serves as a base for browser instance creation and management. This class is marked as internal and should not be instantiated or extended by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserlauncher.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class BrowserLauncher
```

----------------------------------------

TITLE: Declaring Puppeteer Accessibility Class (TypeScript)
DESCRIPTION: This snippet shows the declaration of the Accessibility class in TypeScript. This class serves as the entry point for interacting with the browser's accessibility tree. Note that its constructor is internal and should not be called directly by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.accessibility.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class Accessibility
```

----------------------------------------

TITLE: Defining Puppeteer Touchscreen Class (TypeScript)
DESCRIPTION: This snippet shows the abstract class definition for the Touchscreen class in Puppeteer. It is marked as internal and should not be instantiated or subclassed directly by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.touchscreen.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Touchscreen
```

----------------------------------------

TITLE: Defining Page.emulateNetworkConditions Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Page.emulateNetworkConditions method. It takes a NetworkConditions object or null as a parameter and returns a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.emulatenetworkconditions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract emulateNetworkConditions(
    networkConditions: NetworkConditions | null,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Checking Service Worker Bypass Status in Puppeteer Page (TypeScript)
DESCRIPTION: This snippet shows the abstract signature for the `isServiceWorkerBypassed` method within the Puppeteer `Page` class. It indicates that the method returns a boolean value, signifying whether service workers are currently being bypassed for the page.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.isserviceworkerbypassed.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract isServiceWorkerBypassed(): boolean;
}
```

----------------------------------------

TITLE: Running Sandbox Smoke Tests for Puppeteer Angular Schematic
DESCRIPTION: Command to execute smoke tests for the Puppeteer Angular Schematic, creating fresh Angular installations and running initial e2e tests.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
node tools/smoke.mjs
```

----------------------------------------

TITLE: Declare detectBrowserPlatform Function (TypeScript)
DESCRIPTION: Declares the signature for the detectBrowserPlatform function. This function is intended to detect the current browser platform and return a BrowserPlatform enum value or undefined if detection fails.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.detectbrowserplatform.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare function detectBrowserPlatform(): BrowserPlatform | undefined;
```

----------------------------------------

TITLE: Defining DebugInfo Interface (TypeScript)
DESCRIPTION: Defines the DebugInfo interface, which is part of the Puppeteer library and is used to expose debugging information, such as pending protocol errors.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.debuginfo.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface DebugInfo
```

----------------------------------------

TITLE: Declaring Version Comparator Function in TypeScript
DESCRIPTION: TypeScript function declaration for getVersionComparator that returns a comparison function for browser versions. The function takes a browser parameter and returns a comparator function that accepts two version strings and returns a number indicating their relative order.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.getversioncomparator.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function getVersionComparator(
  browser: Browser,
): (a: string, b: string) => number;
```

----------------------------------------

TITLE: Dialog Class Definition in TypeScript
DESCRIPTION: Abstract class definition for Dialog in Puppeteer. This class is internal and should not be instantiated directly or extended by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.dialog.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Dialog
```

----------------------------------------

TITLE: Defining CDPSession Class in TypeScript
DESCRIPTION: Abstract class definition for CDPSession that extends EventEmitter to handle Chrome DevTools Protocol events and methods.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class CDPSession extends EventEmitter<CDPSessionEvents>
```

----------------------------------------

TITLE: Deleting Cookies with Page (Obsolete) - TypeScript
DESCRIPTION: Provides the TypeScript signature for the obsolete `Page.deleteCookie` method. This method is deprecated; use `Browser.deleteCookie` or `BrowserContext.deleteCookie` for current cookie management. It accepts an array of `DeleteCookiesRequest` objects and returns a Promise that resolves when the operation is complete.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.deletecookie.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Page {
  abstract deleteCookie(...cookies: DeleteCookiesRequest[]): Promise<void>;
}
```

----------------------------------------

TITLE: Defining EventEmitter removeAllListeners Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `removeAllListeners` method within the `EventEmitter` class. It indicates the method can optionally accept a `type` parameter (which is a key of `EventsWithWildcard<Events>`) and returns `this` for method chaining.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.eventemitter.removealllisteners.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class EventEmitter {
  removeAllListeners(type?: keyof EventsWithWildcard<Events>): this;
}
```

----------------------------------------

TITLE: Defining Touchscreen Abstract Class in TypeScript
DESCRIPTION: Abstract class declaration for the Touchscreen functionality in Puppeteer. This class is marked as internal and should not be instantiated directly or extended by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchscreen.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Touchscreen
```

----------------------------------------

TITLE: Getting Browser Context - Puppeteer - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `browserContext()` method of the Puppeteer `Page` class. It indicates that the method is abstract and returns a `BrowserContext` object, which represents the browser context the page is associated with.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.browsercontext.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract browserContext(): BrowserContext;
}
```

----------------------------------------

TITLE: Declaring Browser.uninstallExtension Method Signature (TypeScript)
DESCRIPTION: Defines the abstract signature for the `uninstallExtension` method within the `Browser` class in Puppeteer. It shows that the method takes an extension `id` (string) and returns a `Promise<void>`. This is the type definition for the method.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.uninstallextension.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract uninstallExtension(id: string): Promise<void>;
}
```

----------------------------------------

TITLE: Defining ScreenshotClip Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the ScreenshotClip interface, which extends the BoundingBox interface. It includes an optional 'scale' property of type number with a default value of 1.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.screenshotclip.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ScreenshotClip extends BoundingBox
```

----------------------------------------

TITLE: Defining FirefoxSettings Interface Signature (TypeScript)
DESCRIPTION: Defines the structure of the `FirefoxSettings` interface used in Puppeteer to configure Firefox-specific settings like download location, version, and whether to skip the automatic download during installation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.firefoxsettings.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface FirefoxSettings
```

----------------------------------------

TITLE: Defining InstalledBrowser Class in TypeScript
DESCRIPTION: This snippet defines the InstalledBrowser class exported by the module. It includes a remark that the constructor is marked as internal and should not be called directly by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.installedbrowser.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class InstalledBrowser
```

----------------------------------------

TITLE: Retrieving Custom Query Handler Names in Puppeteer TypeScript
DESCRIPTION: Static method that returns an array of strings containing the names of all registered custom query handlers in Puppeteer. The method requires no parameters and returns a string array.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteer.customqueryhandlernames.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Puppeteer {
  static customQueryHandlerNames(): string[];
}
```

----------------------------------------

TITLE: Defining Browser.browserContexts method signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Browser.browserContexts() method, indicating it is an abstract method within the Browser class that returns an array of BrowserContext objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.browsercontexts.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract browserContexts(): BrowserContext[];
}
```

----------------------------------------

TITLE: Using EventEmitter.removeAllListeners in TypeScript with Puppeteer
DESCRIPTION: Method signature for removing all listeners from an EventEmitter. When called without arguments, it removes all listeners for all events. When called with an event type argument, it removes only listeners for that specific event.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.removealllisteners.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class EventEmitter {
  removeAllListeners(type?: keyof EventsWithWildcard<Events>): this;
}
```

----------------------------------------

TITLE: Defining ConnectionTransport send method in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface definition for the `ConnectionTransport` and specifically the signature of its `send` method. The method accepts a single string parameter named `message` and returns `void`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connectiontransport.send.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface ConnectionTransport {
  send(message: string): void;
}
```

----------------------------------------

TITLE: Constructing a Connection Instance in Puppeteer (TypeScript)
DESCRIPTION: The constructor signature for creating a new Connection instance in Puppeteer. It takes a URL, transport object, and optional parameters for delay, timeout, and error handling preferences.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection._constructor_.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Connection {
  constructor(
    url: string,
    transport: ConnectionTransport,
    delay?: number,
    timeout?: number,
    rawErrors?: boolean,
  );
}
```

----------------------------------------

TITLE: Defining TouchHandle Interface in TypeScript
DESCRIPTION: This code snippet defines the TouchHandle interface in TypeScript. The interface exposes methods to manipulate touches that have been started.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchhandle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface TouchHandle
```

----------------------------------------

TITLE: Defining select Method in Puppeteer DeviceRequestPrompt (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `select` method within the `DeviceRequestPrompt` class. The method accepts a `DeviceRequestPromptDevice` object as input and returns a `Promise<void>`, indicating an asynchronous operation that completes without returning a specific value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.devicerequestprompt.select.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class DeviceRequestPrompt {
  select(device: DeviceRequestPromptDevice): Promise<void>;
}
```

----------------------------------------

TITLE: Cancelling Device Request Prompts in Puppeteer with TypeScript
DESCRIPTION: Method signature for cancelling a device request prompt in Puppeteer. The cancel method returns a Promise that resolves to void when the prompt is successfully cancelled.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.devicerequestprompt.cancel.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class DeviceRequestPrompt {
  cancel(): Promise<void>;
}
```

----------------------------------------

TITLE: Defining CDPSession.id Method in TypeScript
DESCRIPTION: Abstract class definition showing the id() method signature for CDPSession class. The method returns the unique identifier string for the current CDP session.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.id.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class CDPSession {
  abstract id(): string;
}
```

----------------------------------------

TITLE: Running All Tests - npm/Bash
DESCRIPTION: Executes the default test suite for the Puppeteer project. This typically runs headless tests on Chrome and Firefox to verify functionality.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm test
```

----------------------------------------

TITLE: Building Puppeteer Project - npm/Bash
DESCRIPTION: Compiles the Puppeteer project source code. This step follows cleaning and installing dependencies and precedes running tests.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_18

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Getting Dialog Type in Puppeteer (TypeScript)
DESCRIPTION: Retrieves the type of the dialog instance. This method is part of the `Dialog` class in Puppeteer and returns a value of type `Protocol.Page.DialogType`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.dialog.type.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Dialog {
  type(): Protocol.Page.DialogType;
}
```

----------------------------------------

TITLE: ElementScreenshotOptions Interface Definition in TypeScript
DESCRIPTION: Defines the ElementScreenshotOptions interface that extends ScreenshotOptions. This interface is used to configure element screenshot behavior in Puppeteer with an optional scrollIntoView property that defaults to true.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementscreenshotoptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ElementScreenshotOptions extends ScreenshotOptions
```

----------------------------------------

TITLE: Defining computeExecutablePath Function Signature in TypeScript
DESCRIPTION: This TypeScript code snippet declares the signature for the `computeExecutablePath` function. It takes an `options` object adhering to the `ComputeExecutablePathOptions` interface (defined elsewhere) and returns a string representing the path to the browser executable. This function is used internally by Puppeteer to locate the appropriate browser binary.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.computeexecutablepath.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function computeExecutablePath(\n  options: ComputeExecutablePathOptions,\n): string;
```

----------------------------------------

TITLE: Waiting for Locator Handle in Puppeteer (TypeScript)
DESCRIPTION: Waits for the Locator instance to successfully retrieve a handle from the page. This method returns a Promise that resolves with the handle once it is available. It accepts an optional `options` object for configuring the wait behavior.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.locator.waithandle.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Locator {
  waitHandle(options?: Readonly<ActionOptions>): Promise<HandleFor<T>>; 
}
```

----------------------------------------

TITLE: Defining PDFMargin Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the PDFMargin interface used in Puppeteer for specifying PDF margins. It includes optional properties for top, bottom, left, and right margins, each accepting either a string or number value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.pdfmargin.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface PDFMargin {
  bottom?: string | number;
  left?: string | number;
  right?: string | number;
  top?: string | number;
}
```

----------------------------------------

TITLE: Implementing Target Opener Method in TypeScript
DESCRIPTION: Abstract method definition for retrieving the opener (parent) target of a current target. Returns undefined for top-level targets and a Target instance for targets opened by another target.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.target.opener.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Target {
  abstract opener(): Target | undefined;
}
```

----------------------------------------

TITLE: Defining EventType Type in TypeScript
DESCRIPTION: This snippet defines the TypeScript type `EventType` as a union type, allowing it to hold either a string value or a symbol value. This is commonly used for event names or identifiers.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.eventtype.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type EventType = string | symbol;
```

----------------------------------------

TITLE: HTML Structure for ElementHandle.$$eval Example
DESCRIPTION: This HTML snippet demonstrates the structure used in the ElementHandle.$$eval example. It shows a feed container with two tweet elements, which will be targeted by the method.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.__eval.md#2025-04-22_snippet_1

LANGUAGE: html
CODE:
```
<div class="feed">
  <div class="tweet">Hello!</div>
  <div class="tweet">Hi!</div>
</div>
```

----------------------------------------

TITLE: Defining the ActionOptions Interface Signature in TypeScript
DESCRIPTION: This code snippet shows the basic TypeScript signature for the ActionOptions interface in Puppeteer. It defines the structure that options objects must adhere to when passed to certain actions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.actionoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ActionOptions
```

----------------------------------------

TITLE: Defining TimeoutError Class in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the TimeoutError class which extends the built-in Error class. It is used to represent timeout-related errors in the Puppeteer project. The class is exported for use in other parts of the project.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.timeouterror.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class TimeoutError extends Error
```

----------------------------------------

TITLE: Defining the CustomQueryHandler Interface in TypeScript for Puppeteer
DESCRIPTION: TypeScript interface definition for CustomQueryHandler in Puppeteer, which defines optional methods for querying DOM nodes. It includes queryAll for searching multiple matching nodes and queryOne for finding a single matching node using custom selectors.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.customqueryhandler.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CustomQueryHandler
```

----------------------------------------

TITLE: Defining PageEvents Interface in TypeScript for Puppeteer
DESCRIPTION: TypeScript interface definition for PageEvents that extends Record<EventType, unknown>, representing the objects received by callback functions for various page events in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.pageevents.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface PageEvents extends Record<EventType, unknown>
```

----------------------------------------

TITLE: Building Static Content for Puppeteer Website
DESCRIPTION: Command to generate static website content into the build directory, which can then be served using any static contents hosting service.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
$ npm run build
```

----------------------------------------

TITLE: Defining the JSCoverageEntry Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `JSCoverageEntry` interface, indicating that it extends the `CoverageEntry` interface.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jscoverageentry.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface JSCoverageEntry extends CoverageEntry
```

----------------------------------------

TITLE: Constructing Connection Instance - TypeScript
DESCRIPTION: Initializes a new instance of the `Connection` class. Requires a URL and a transport mechanism. Optional parameters allow specifying delay, timeout, and raw error handling. This constructor sets up the fundamental connection details.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connection._constructor_.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Connection {
  constructor(
    url: string,
    transport: ConnectionTransport,
    delay?: number,
    timeout?: number,
    rawErrors?: boolean,
  );
}
```

----------------------------------------

TITLE: Locator Class Signature in TypeScript
DESCRIPTION: The TypeScript signature for the Locator abstract class which extends EventEmitter with LocatorEvents generic type. It serves as the base class for all locator implementations in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locator.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Locator<T> extends EventEmitter<LocatorEvents>
```

----------------------------------------

TITLE: Defining Page.pdf() Method Signature in TypeScript
DESCRIPTION: Defines the signature of the pdf() method in the Page class. It accepts optional PDFOptions and returns a Promise resolving to a Uint8Array containing the PDF data.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.pdf.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract pdf(options?: PDFOptions): Promise<Uint8Array>;
}
```

----------------------------------------

TITLE: Setting Permissions for Setuid Sandbox Bash
DESCRIPTION: This bash command sets the permissions of the `chrome_sandbox` executable. The `4755` mode grants read, write, and execute permissions to the owner (`root`), read and execute to the group and others, and crucially sets the setuid bit (the leading `4`), allowing non-root users to execute the file with root privileges.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_12

LANGUAGE: bash
CODE:
```
sudo chmod 4755 chrome_sandbox
```

----------------------------------------

TITLE: Defining SupportedWebDriverCapability Type in TypeScript
DESCRIPTION: This code snippet defines the SupportedWebDriverCapability type as a subset of Session.CapabilityRequest, excluding 'unhandledPromptBehavior' and 'acceptInsecureCerts' properties. It uses TypeScript's Exclude utility type to create this new type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.supportedwebdrivercapability.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type SupportedWebDriverCapability = Exclude<
  Session.CapabilityRequest,
  'unhandledPromptBehavior' | 'acceptInsecureCerts'
>;
```

----------------------------------------

TITLE: Defining FlattenHandle Generic Type in TypeScript
DESCRIPTION: A TypeScript utility type that extracts the underlying type U from a HandleOr<U> type. If T extends HandleOr<U>, it returns U, otherwise never. This is used for type inference in Puppeteer's handle system.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.flattenhandle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type FlattenHandle<T> = T extends HandleOr<infer U> ? U : never;
```

----------------------------------------

TITLE: Declaring DebugInfo Interface in TypeScript
DESCRIPTION: TypeScript interface definition for DebugInfo in Puppeteer, which contains an array of pending protocol errors.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.debuginfo.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface DebugInfo
```

----------------------------------------

TITLE: CLI Version Selection
DESCRIPTION: Shows different ways to specify and run particular versions of the package using npx.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/index.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
# Always install and use the latest version from the registry.
npx @puppeteer/browsers@latest --help
# Always use a specifc version.
npx @puppeteer/browsers@2.4.1 --help
# Always install the latest version and automatically confirm the installation.
npx --yes @puppeteer/browsers@latest --help
```

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Commands for installing project dependencies, with an option to download Firefox browser by default.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm install
# Or to download Firefox by default
PUPPETEER_BROWSER=firefox npm install
```

----------------------------------------

TITLE: Defining CLI Class Signature in TypeScript
DESCRIPTION: Declares the CLI class export in TypeScript. This class likely handles command-line interface operations for the Puppeteer project.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cli.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class CLI
```

----------------------------------------

TITLE: Defining InstalledBrowser.readMetadata() Method in TypeScript
DESCRIPTION: This snippet defines the readMetadata() method for the InstalledBrowser class. The method returns a Metadata object and takes no parameters.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.installedbrowser.readmetadata.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class InstalledBrowser {
  readMetadata(): Metadata;
}
```

----------------------------------------

TITLE: TypeScript Signature for elementHandle
DESCRIPTION: This snippet shows the TypeScript interface definition for SerializedAXNode, specifically highlighting the signature of the elementHandle() method. It indicates the method returns a Promise resolving to an ElementHandle or null.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.serializedaxnode.elementhandle.md#_snippet_0

LANGUAGE: typescript
CODE:
```
interface SerializedAXNode {
  elementHandle(): Promise<ElementHandle | null>;
}
```

----------------------------------------

TITLE: CDPSession Class Definition (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the CDPSession abstract class, indicating it extends EventEmitter and is intended for raw Chrome DevTools Protocol communication.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cdpsession.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class CDPSession extends EventEmitter<CDPSessionEvents>
```

----------------------------------------

TITLE: TypeScript Function Declaration for Puppeteer canDownload
DESCRIPTION: Function signature that declares the canDownload method which takes InstallOptions as a parameter and returns a Promise resolving to a boolean value. This function likely checks if browser downloads are possible given the provided installation options.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.candownload.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function canDownload(options: InstallOptions): Promise<boolean>;
```

----------------------------------------

TITLE: Getting WebWorker URL (TypeScript)
DESCRIPTION: This snippet shows the signature for the `url()` method of the Puppeteer `WebWorker` class. This method is used to retrieve the URL associated with the web worker instance. It takes no arguments and returns a string representing the worker's URL.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.webworker.url.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class WebWorker {
  url(): string;
}
```

----------------------------------------

TITLE: JSHandle Class Signature in TypeScript
DESCRIPTION: The TypeScript signature for the JSHandle class, which is an abstract class that can represent any JavaScript object in the browser.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.jshandle.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class JSHandle<T = unknown>
```

----------------------------------------

TITLE: Implementing EventEmitter.off Method in TypeScript
DESCRIPTION: TypeScript class method definition for EventEmitter's off() method, which removes event listeners. The method takes an event type and an optional handler function, returning the EventEmitter instance to allow method chaining.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.off.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class EventEmitter {
  off<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler?: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}
```

----------------------------------------

TITLE: Declaring the Connection class in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Connection class. It indicates that Connection extends EventEmitter, inheriting its event handling capabilities, and specifies the types of events it emits via CDPSessionEvents.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connection.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class Connection extends EventEmitter<CDPSessionEvents>
```

----------------------------------------

TITLE: Defining ElementFor Type in TypeScript
DESCRIPTION: This TypeScript type definition creates a conditional type `ElementFor` that takes a tag name string (from `keyof HTMLElementTagNameMap` or `keyof SVGElementTagNameMap`) and returns the corresponding DOM element type (e.g., `HTMLDivElement` for 'div', `SVGSVGElement` for 'svg'). It uses conditional types and mapped types to achieve this mapping.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementfor.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type ElementFor<
  TagName extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap,
> = TagName extends keyof HTMLElementTagNameMap
  ? HTMLElementTagNameMap[TagName]
  : TagName extends keyof SVGElementTagNameMap
    ? SVGElementTagNameMap[TagName]
    : never;
```

----------------------------------------

TITLE: Constructing a Process instance (TypeScript)
DESCRIPTION: Initializes a new instance of the `Process` class. Requires `LaunchOptions` to configure the process.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.process._constructor_.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Process {
  constructor(opts: LaunchOptions);
}
```

----------------------------------------

TITLE: Defining UnsupportedOperation Error Class in TypeScript - Puppeteer
DESCRIPTION: TypeScript class declaration for UnsupportedOperation error that extends PuppeteerError. This class is thrown when attempting to execute operations not supported by the current protocol version or implementation.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.unsupportedoperation.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class UnsupportedOperation extends PuppeteerError
```

----------------------------------------

TITLE: Building and Running Puppeteer Tests via npm
DESCRIPTION: Builds the `@puppeteer-test/test` workspace and then runs all applicable Puppeteer unit tests. This command ensures that any local code changes are compiled before the test suite is executed. It's noted as important when testing local modifications.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm run build --workspace=@puppeteer-test/test && npm test
```

----------------------------------------

TITLE: Run Schematic Unit Tests
DESCRIPTION: Runs the unit test suite for the schematics, which utilizes `@angular-devkit/schematics/testing` to verify file creation and `package.json` updates.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm run test
```

----------------------------------------

TITLE: Defining Accessibility Class Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Accessibility class in Puppeteer. The class is exported and declared, indicating it's part of the public API.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.accessibility.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class Accessibility
```

----------------------------------------

TITLE: Defining the ConnectOptions Interface (TypeScript)
DESCRIPTION: Defines the TypeScript interface `ConnectOptions`, which specifies the configuration options available when connecting to or launching a browser instance with Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.connectoptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ConnectOptions
```

----------------------------------------

TITLE: Defining ConnectionTransport Interface with send Method in TypeScript
DESCRIPTION: TypeScript interface definition for ConnectionTransport with the send method that takes a message string parameter and returns void. This interface is part of Puppeteer's communication transport layer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connectiontransport.send.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface ConnectionTransport {
  send(message: string): void;
}
```

----------------------------------------

TITLE: Defining the LocatorEvents Interface in TypeScript
DESCRIPTION: Defines the LocatorEvents interface which extends Record<EventType, unknown>. This interface likely serves as a typing mechanism for events that can be triggered by Puppeteer locators.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.locatorevents.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface LocatorEvents extends Record<EventType, unknown>
```

----------------------------------------

TITLE: Defining BrowserLauncher.launch Method in TypeScript
DESCRIPTION: Method signature for the BrowserLauncher.launch method, which takes optional LaunchOptions and returns a Promise that resolves to a Browser instance.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserlauncher.launch.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class BrowserLauncher {
  launch(options?: LaunchOptions): Promise<Browser>;
}
```

----------------------------------------

TITLE: Cleaning Stale Artifacts - npm/Bash
DESCRIPTION: Removes generated artifacts that might become stale due to complex build conditions not fully tracked by the build system. Can be run for the whole project or a specific package.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_7

LANGUAGE: bash
CODE:
```
npm run clean
```

----------------------------------------

TITLE: Defining Tracing Class in TypeScript
DESCRIPTION: Class signature for the Tracing class that exposes the tracing audit interface in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.tracing.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class Tracing
```

----------------------------------------

TITLE: Defining BrowserEvent Enum in TypeScript for Puppeteer
DESCRIPTION: Declaration of the BrowserEvent enum which defines all events that a browser instance may emit, including disconnected, targetchanged, targetcreated, and targetdestroyed events.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browserevent.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare const enum BrowserEvent
```

----------------------------------------

TITLE: Process Class Declaration
DESCRIPTION: TypeScript declaration of the Process class export which is used to manage browser processes in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class Process
```

----------------------------------------

TITLE: Defining Process.hasClosed() Method in TypeScript
DESCRIPTION: This code snippet defines the hasClosed() method in the Process class. The method returns a Promise that resolves to void, indicating when the process has closed.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process.hasclosed.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Process {
  hasClosed(): Promise<void>;
}
```

----------------------------------------

TITLE: Declaring Puppeteer Tracing Class (TypeScript)
DESCRIPTION: Defines the structure and type of the Tracing class in TypeScript, indicating it is exported and declared.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.tracing.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class Tracing
```

----------------------------------------

TITLE: Get Browser ChildProcess (TypeScript)
DESCRIPTION: This snippet shows the signature for the `Browser.process()` method in Puppeteer. It returns the Node.js `ChildProcess` associated with the browser instance, or `null` if the browser was connected to remotely using `Puppeteer.connect()`.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.browser.process.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  abstract process(): ChildProcess | null;
}
```

----------------------------------------

TITLE: Defining CDP WebSocket Endpoint Regex in TypeScript
DESCRIPTION: This code snippet declares a constant variable named CDP_WEBSOCKET_ENDPOINT_REGEX of type RegExp. It is likely used for parsing or validating WebSocket URLs in the context of Chrome DevTools Protocol communication.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cdp_websocket_endpoint_regex.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
CDP_WEBSOCKET_ENDPOINT_REGEX: RegExp;
```

----------------------------------------

TITLE: Checking Code Style - npm/Bash
DESCRIPTION: Runs linters (ESLint) and formatters (Prettier) to check if the code adheres to the project's defined style guidelines.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_10

LANGUAGE: bash
CODE:
```
npm run lint
```

----------------------------------------

TITLE: Defining GoToOptions Interface Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `GoToOptions` interface, indicating it is exported and extends the `WaitForOptions` interface, inheriting its properties and behavior.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.gotooptions.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface GoToOptions extends WaitForOptions
```

----------------------------------------

TITLE: Moveable Interface move() Method Signature (TypeScript)
DESCRIPTION: Defines the signature for the `move()` method within the `Moveable` interface. This method is used to move a resource when it is in a 'using' state. It takes no arguments and returns the instance of the object itself (`this`).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.moveable.move.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Moveable {
  move(): this;
}
```

----------------------------------------

TITLE: Emit Method Signature - CommonEventEmitter - TypeScript
DESCRIPTION: This TypeScript interface signature defines the `emit` method for the `CommonEventEmitter`. It shows that the method is generic, taking a key type and an event type, and returns a boolean.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.commoneventemitter.emit.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface CommonEventEmitter {
  emit<Key extends keyof Events>(type: Key, event: Events[Key]): boolean;
}
```

----------------------------------------

TITLE: Defining ScreenRecorder Class in TypeScript
DESCRIPTION: Class declaration for ScreenRecorder that extends the PassThrough class. This class is marked as internal and should not be instantiated directly by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.screenrecorder.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class ScreenRecorder extends PassThrough
```

----------------------------------------

TITLE: Implementing Test Function with Coverage Analysis in JavaScript
DESCRIPTION: A JavaScript function 'foo' containing various execution paths including conditional statements, ternary operators, and unused code. The function is designed to test code coverage reporting by having both executed and unexecuted paths.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/golden-chrome/jscoverage-involved.txt#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```

function foo() {
  if (1 > 2)
    console.log(1);
  if (1 < 2)
    console.log(2);
  let x = 1 > 2 ? 'foo' : 'bar';
  let y = 1 < 2 ? 'foo' : 'bar';
  let p = {a:1 > 2?function(){console.log('unused');}:function(){console.log('unused');}};
  let z = () => {};
  let q = () => {};
  q();
}

foo();

```

----------------------------------------

TITLE: Implementing Moveable.move Method in TypeScript for Puppeteer
DESCRIPTION: The interface definition for the Moveable.move() method which moves a resource when it is being used. The method returns the instance itself, allowing for method chaining.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.moveable.move.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface Moveable {
  move(): this;
}
```

----------------------------------------

TITLE: Defining Page.evaluate() Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Page.evaluate() method in Puppeteer. It defines the method's parameters and return type, allowing for generic types to be used for function parameters and return values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.evaluate.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}
```

----------------------------------------

TITLE: Markdown Formatting for Puppeteer CHANGELOG
DESCRIPTION: Example markdown formatting for creating version headers in the Puppeteer package CHANGELOG, showing the required format with version numbers and comparison links.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_9

LANGUAGE: markdown
CODE:
```
## [{NEW_VERSION}](https://github.com/puppeteer/puppeteer/compare/v{PREVIOUS_VERSION}...v{NEW_VERSION}) ({CURRENT_DATE})`
```

----------------------------------------

TITLE: Declaring the JSHandle Class in TypeScript
DESCRIPTION: This is the abstract class declaration for JSHandle in TypeScript, showing its generic type parameter T. Note that the constructor is marked as internal, meaning it should not be called directly by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.jshandle.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare abstract class JSHandle<T = unknown>
```

----------------------------------------

TITLE: Building Packages
DESCRIPTION: Commands for building all packages in the Puppeteer project.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Generating Single Test File
DESCRIPTION: Command to create a single E2E test file using the Puppeteer schematic
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
ng generate @puppeteer/ng-schematics:e2e "<TestName>"
```

----------------------------------------

TITLE: Using Legacy Prefixed Selector Syntax in Puppeteer
DESCRIPTION: Shows the legacy prefixed selector syntax for various selector types in Puppeteer, which is maintained for backward compatibility but not recommended for new code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/page-interactions.md#2025-04-22_snippet_21

LANGUAGE: typescript
CODE:
```
// Same as ::-p-text("My text").
await page.locator('text/My text').click();
// Same as ::-p-xpath(//h2).
await page.locator('xpath///h2').click();
// Same as ::-p-aria(My label).
await page.locator('aria/My label').click();

await page.locator('pierce/div').click();
```

----------------------------------------

TITLE: Declare Abstract HTTPRequest Class (TypeScript)
DESCRIPTION: Declares the abstract `HTTPRequest` class in TypeScript, indicating it cannot be instantiated directly and is intended for inheritance by internal Puppeteer classes. This is the base class for representing HTTP requests.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.httprequest.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare abstract class HTTPRequest
```

----------------------------------------

TITLE: Declaring DeviceRequestPromptDevice Class in Puppeteer
DESCRIPTION: This snippet shows the declaration of the `DeviceRequestPromptDevice` class in TypeScript. It indicates that the class is exported and declared, likely as part of a type definition or interface within the Puppeteer library. The class represents a device presented in a request prompt.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.devicerequestpromptdevice.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class DeviceRequestPromptDevice
```

----------------------------------------

TITLE: Obsolete ElementHandle.drop Method in Puppeteer
DESCRIPTION: This is an obsolete version of the ElementHandle.drop method that is no longer supported. It optionally accepts a Protocol.Input.DragData parameter and returns a Promise that resolves to void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementhandle.drop.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  drop(
    this: ElementHandle<Element>,
    data?: Protocol.Input.DragData,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining Awaitable Type in TypeScript
DESCRIPTION: This snippet defines the Awaitable type, which is a union type that can be either of type T or a PromiseLike<T>. This allows for flexibility in handling both synchronous and asynchronous values.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.awaitable.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type Awaitable<T> = T | PromiseLike<T>;
```

----------------------------------------

TITLE: Markdown Formatting for Secondary Packages CHANGELOG
DESCRIPTION: Example markdown formatting for creating version headers in CHANGELOG files for secondary Puppeteer packages, showing the required format with package folder names and version numbers.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_10

LANGUAGE: markdown
CODE:
```
## [{NEW_VERSION}](https://github.com/puppeteer/puppeteer/compare/{PACKAGE_FOLDER_NAME}-v{PREVIOUS_VERSION}...{PACKAGE_FOLDER_NAME}-v{NEW_VERSION}) ({CURRENT_DATE})
```

----------------------------------------

TITLE: CSS Content Being Analyzed for Coverage in Puppeteer
DESCRIPTION: The CSS content that Puppeteer is analyzing for coverage. It includes various CSS features like charset declaration, namespace, font-face definition, element styling, and media queries.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/test/golden-chrome/csscoverage-involved.txt#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
@charset "utf-8";
@namespace svg url(http://www.w3.org/2000/svg);
@font-face {
  font-family: "Example Font";
  src: url("./Dosis-Regular.ttf");
}

#fluffy {
  border: 1px solid black;
  z-index: 1;
  /* -webkit-disabled-property: rgb(1, 2, 3) */
  -lol-cats: "dogs" /* non-existing property */
}

@media (min-width: 1px) {
  span {
    -webkit-border-radius: 10px;
    font-family: "Example Font";
    animation: 1s identifier;
  }
}
```

----------------------------------------

TITLE: Define Page.workers() Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the abstract `workers()` method within the `Page` class. It indicates the method returns an array of `WebWorker` objects.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.workers.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract workers(): WebWorker[];
}
```

----------------------------------------

TITLE: ElementHandle.dragOver Method Signature (Obsolete)
DESCRIPTION: Defines the signature for the ElementHandle.dragOver method. Note that this method is obsolete and should not be used. It takes an optional Protocol.Input.DragData object and returns a Promise<void>.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.dragover.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  dragOver(
    this: ElementHandle<Element>,
    data?: Protocol.Input.DragData,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: MediaFeature Interface Definition in TypeScript for Puppeteer
DESCRIPTION: The TypeScript interface definition for MediaFeature in Puppeteer. This interface is used to emulate media features in a browser environment, with properties for the feature name and value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mediafeature.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface MediaFeature
```

----------------------------------------

TITLE: Defining UninstallOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the UninstallOptions interface in TypeScript. It specifies the structure for options used when uninstalling a browser in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.uninstalloptions.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface UninstallOptions
```

----------------------------------------

TITLE: Declaring EventEmitter Class in TypeScript
DESCRIPTION: This snippet defines the EventEmitter class signature in TypeScript. It extends Record<EventType, unknown> and implements CommonEventEmitter with EventsWithWildcard.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.eventemitter.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class EventEmitter<Events extends Record<EventType, unknown>> implements CommonEventEmitter<EventsWithWildcard<Events>>
```

----------------------------------------

TITLE: Retrieving Certificate Subject Name - TypeScript
DESCRIPTION: Method signature for getting the name of the subject to which the certificate was issued. Returns a string containing the subject name from the certificate details.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.securitydetails.subjectname.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class SecurityDetails {
  subjectName(): string;
}
```

----------------------------------------

TITLE: Mouse Class Declaration in TypeScript
DESCRIPTION: Abstract class declaration for the Mouse class in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.mouse.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Mouse
```

----------------------------------------

TITLE: Defining EvaluateFunc Generic Type in TypeScript for Puppeteer
DESCRIPTION: Type definition for EvaluateFunc that represents functions which can be evaluated in the browser context. It accepts variable parameters via InnerParams generic type and returns an Awaitable unknown value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.evaluatefunc.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type EvaluateFunc<T extends unknown[]> = (
  ...params: InnerParams<T>
) => Awaitable<unknown>;
```

----------------------------------------

TITLE: Defining EventsWithWildcard Type in TypeScript
DESCRIPTION: This TypeScript type definition creates a new type based on an existing `Events` record. It includes all properties from the original `Events` type and adds a wildcard property `'*'` whose value type is a union of all possible value types within the `Events` record. It depends on the `EventType` type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.eventswithwildcard.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type EventsWithWildcard<Events extends Record<EventType, unknown>> =
  Events & {
    '*': Events[keyof Events];
  };
```

----------------------------------------

TITLE: Declaring the Process class in Puppeteer (TypeScript)
DESCRIPTION: Defines the basic structure and type declaration for the `Process` class within the Puppeteer library. This class likely manages browser processes.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.process.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare class Process
```

----------------------------------------

TITLE: Defining ResourceType Type in TypeScript
DESCRIPTION: Defines a TypeScript type alias that represents HTTP resource types. It uses the Protocol.Network.ResourceType type and converts it to lowercase for consistency.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.resourcetype.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type ResourceType = Lowercase<Protocol.Network.ResourceType>;
```

----------------------------------------

TITLE: Defining ElementFor Utility Type in TypeScript for Puppeteer
DESCRIPTION: A TypeScript utility type that maps HTML or SVG element tag names to their corresponding element types. It uses conditional types to check if the tag name belongs to HTMLElementTagNameMap or SVGElementTagNameMap and returns the appropriate element type.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.elementfor.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type ElementFor<
  TagName extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap,
> = TagName extends keyof HTMLElementTagNameMap
  ? HTMLElementTagNameMap[TagName]
  : TagName extends keyof SVGElementTagNameMap
    ? SVGElementTagNameMap[TagName]
    : never;
```

----------------------------------------

TITLE: Implementing Frame.isDetached Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet shows the signature for the Frame.isDetached() method which returns a boolean value indicating whether a frame has been detached from its parent. This method is marked as obsolete and users are recommended to use the `detached` getter property instead.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.isdetached.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  isDetached(): boolean;
}
```

----------------------------------------

TITLE: Defining the SessionDetached Event Name (TypeScript)
DESCRIPTION: This TypeScript snippet defines the `SessionDetached` variable as a string literal type with the value `'sessiondetached'`. This constant is used to represent the name of the event emitted when a CDP session is detached.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cdpsessionevent.sessiondetached.md#_snippet_0

LANGUAGE: typescript
CODE:
```
SessionDetached: 'sessiondetached';
```

----------------------------------------

TITLE: Defining WebDriver BiDi Websocket Endpoint Regex Variable - TypeScript
DESCRIPTION: Defines the variable `WEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX` with the type `RegExp`. This indicates that the variable is intended to hold a regular expression object, likely used for pattern matching related to WebDriver BiDi websocket endpoints.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.webdriver_bidi_websocket_endpoint_regex.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
WEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX: RegExp;
```

----------------------------------------

TITLE: Installing Dependencies for Puppeteer Website
DESCRIPTION: Command to install the necessary npm dependencies for the Puppeteer documentation website built with Docusaurus 3.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install
```

----------------------------------------

TITLE: Formatting Code Style - npm/Bash
DESCRIPTION: Automatically attempts to fix code style issues detected by linters and formatters, applying the project's defined style.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_11

LANGUAGE: bash
CODE:
```
npm run format
```

----------------------------------------

TITLE: Defining the InnerParams TypeScript Type
DESCRIPTION: This snippet defines the TypeScript type `InnerParams`. It's a mapped type that iterates over the keys of a tuple type `T`. For each element `T[K]` in the tuple, it applies the `FlattenHandle` type, effectively transforming the tuple's elements. This type is often used to handle arguments passed between Node.js and browser contexts in libraries like Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.innerparams.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export type InnerParams<T extends unknown[]> = {
  [K in keyof T]: FlattenHandle<T[K]>;
};
```

----------------------------------------

TITLE: Defining resolveBuildId Function in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the resolveBuildId function, which takes a Browser, BrowserPlatform, and a tag (string or BrowserTag) as parameters. It returns a Promise that resolves to a string, likely representing a build identifier.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.resolvebuildid.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function resolveBuildId(
  browser: Browser,
  platform: BrowserPlatform,
  tag: string | BrowserTag,
): Promise<string>;
```

----------------------------------------

TITLE: Defining ConnectionTransport Interface in TypeScript
DESCRIPTION: TypeScript interface definition for ConnectionTransport which serves as a communication transport layer in Puppeteer. It includes optional event handlers (onclose and onmessage) and methods for sending messages and closing the connection.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connectiontransport.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface ConnectionTransport
```

----------------------------------------

TITLE: Displaying Chrome System Package Requirements for openSUSE/Fedora Linux
DESCRIPTION: This URL points to a JSON file containing the required system packages for Chrome on openSUSE/Fedora Linux systems with x64 architecture.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/system-requirements.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
https://source.chromium.org/chromium/chromium/src/+/main:chrome/installer/linux/rpm/dist_package_provides.json
```

----------------------------------------

TITLE: Defining Page.setDragInterception Method in TypeScript
DESCRIPTION: Abstract class definition for the Page class showing the setDragInterception method signature. The method takes a boolean parameter to enable/disable drag interception and returns a Promise<void>. This API is now obsolete and should not be used.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.setdraginterception.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract setDragInterception(enabled: boolean): Promise<void>;
}
```

----------------------------------------

TITLE: Protractor Example Test
DESCRIPTION: Sample test written using Protractor for comparison purposes
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/ng-schematics.md#2025-04-22_snippet_9

LANGUAGE: typescript
CODE:
```
describe('Protractor Demo', function () {
  it('should add one and two', function () {
    browser.get('https://juliemr.github.io/protractor-demo/');
    element(by.model('first')).sendKeys(1);
    element(by.model('second')).sendKeys(2);

    element(by.id('gobutton')).click();

    expect(element(by.binding('latest')).getText()).toEqual('3');
  });
});
```

----------------------------------------

TITLE: Defining Touchscreen.touchStart Method in TypeScript
DESCRIPTION: This snippet defines the touchStart method for the Touchscreen class. The method takes x and y coordinates as parameters and returns a Promise resolving to a TouchHandle.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.touchscreen.touchstart.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Touchscreen {
  abstract touchStart(x: number, y: number): Promise<TouchHandle>;
}
```

----------------------------------------

TITLE: Connect Tab using ExtensionTransport (TypeScript)
DESCRIPTION: This static method on the `ExtensionTransport` class is used to establish a connection to a specific browser tab identified by its ID. It returns a Promise that resolves with an instance of `ExtensionTransport` upon successful connection.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.extensiontransport.connecttab.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ExtensionTransport {
  static connectTab(tabId: number): Promise<ExtensionTransport>;
}
```

----------------------------------------

TITLE: Implementing Browser.isConnected Method in TypeScript
DESCRIPTION: Definition of the isConnected() method in the Browser class, which returns a boolean value indicating whether Puppeteer is connected to the browser instance. This method is now deprecated and users should use the Browser.connected property instead.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.browser.isconnected.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Browser {
  isConnected(): boolean;
}
```

----------------------------------------

TITLE: Defining AwaitableIterable Type in TypeScript
DESCRIPTION: This type alias defines AwaitableIterable<T> as a union type that can be either a standard synchronous Iterable<T> or an asynchronous AsyncIterable<T>. This allows functions or variables using this type to accept both types of iterable data sources, providing flexibility.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.awaitableiterable.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type AwaitableIterable<T> = Iterable<T> | AsyncIterable<T>;
```

----------------------------------------

TITLE: Defining CDPEvents Type in TypeScript
DESCRIPTION: This TypeScript type alias, CDPEvents, is defined to map the keys of ProtocolMapping.Events (which represent CDP event names) to the first element of the corresponding value (which represents the event's payload type). It provides a strongly-typed way to refer to CDP event payloads based on the event name.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cdpevents.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type CDPEvents = {
  [Property in keyof ProtocolMapping.Events]: ProtocolMapping.Events[Property][0];
};
```

----------------------------------------

TITLE: Defining SupportedBrowser Type in Puppeteer (TypeScript)
DESCRIPTION: This TypeScript type defines the string literals ('chrome', 'firefox') that represent the browsers currently supported by the Puppeteer library. It is used to provide type safety when specifying which browser to launch or connect to.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.supportedbrowser.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export type SupportedBrowser = 'chrome' | 'firefox';
```

----------------------------------------

TITLE: Checking Drag Interception Status in Puppeteer (TypeScript)
DESCRIPTION: This method, now obsolete, returns a boolean indicating whether drag events are being intercepted. It is part of the Page class in Puppeteer. Users are advised to use new drag APIs on ElementHandle or Page.mouse instead.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.isdraginterceptionenabled.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract isDragInterceptionEnabled(): boolean;
}
```

----------------------------------------

TITLE: Defining CDPSessionEvents Interface (TypeScript)
DESCRIPTION: Defines the `CDPSessionEvents` interface, specifying the events that can be emitted by a CDP session. It extends `CDPEvents` and a generic `Record` type to include specific event types.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.cdpsessionevents.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface CDPSessionEvents extends CDPEvents, Record<EventType, unknown>
```

----------------------------------------

TITLE: Connection.dispose Method Signature in TypeScript
DESCRIPTION: The method signature for dispose in the Connection class, which is used to clean up resources. The method takes no parameters and returns void.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.connection.dispose.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Connection {
  dispose(): void;
}
```

----------------------------------------

TITLE: TypeScript Signature of KnownDevices in Puppeteer
DESCRIPTION: Defines the TypeScript signature for the KnownDevices variable, which is a readonly record of device names mapped to Device configuration objects. It includes an extensive list of mobile devices and their landscape orientations.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.knowndevices.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
KnownDevices: Readonly<
  Record<
    | 'Blackberry PlayBook'
    | 'Blackberry PlayBook landscape'
    | 'BlackBerry Z30'
    | 'BlackBerry Z30 landscape'
    | 'Galaxy Note 3'
    | 'Galaxy Note 3 landscape'
    | 'Galaxy Note II'
    | 'Galaxy Note II landscape'
    | 'Galaxy S III'
    | 'Galaxy S III landscape'
    | 'Galaxy S5'
    | 'Galaxy S5 landscape'
    | 'Galaxy S8'
    | 'Galaxy S8 landscape'
    | 'Galaxy S9+'
    | 'Galaxy S9+ landscape'
    | 'Galaxy Tab S4'
    | 'Galaxy Tab S4 landscape'
    | 'iPad'
    | 'iPad landscape'
    | 'iPad (gen 6)'
    | 'iPad (gen 6) landscape'
    | 'iPad (gen 7)'
    | 'iPad (gen 7) landscape'
    | 'iPad Mini'
    | 'iPad Mini landscape'
    | 'iPad Pro'
    | 'iPad Pro landscape'
    | 'iPad Pro 11'
    | 'iPad Pro 11 landscape'
    | 'iPhone 4'
    | 'iPhone 4 landscape'
    | 'iPhone 5'
    | 'iPhone 5 landscape'
    | 'iPhone 6'
    | 'iPhone 6 landscape'
    | 'iPhone 6 Plus'
    | 'iPhone 6 Plus landscape'
    | 'iPhone 7'
    | 'iPhone 7 landscape'
    | 'iPhone 7 Plus'
    | 'iPhone 7 Plus landscape'
    | 'iPhone 8'
    | 'iPhone 8 landscape'
    | 'iPhone 8 Plus'
    | 'iPhone 8 Plus landscape'
    | 'iPhone SE'
    | 'iPhone SE landscape'
    | 'iPhone X'
    | 'iPhone X landscape'
    | 'iPhone XR'
    | 'iPhone XR landscape'
    | 'iPhone 11'
    | 'iPhone 11 landscape'
    | 'iPhone 11 Pro'
    | 'iPhone 11 Pro landscape'
    | 'iPhone 11 Pro Max'
    | 'iPhone 11 Pro Max landscape'
    | 'iPhone 12'
    | 'iPhone 12 landscape'
    | 'iPhone 12 Pro'
    | 'iPhone 12 Pro landscape'
    | 'iPhone 12 Pro Max'
    | 'iPhone 12 Pro Max landscape'
    | 'iPhone 12 Mini'
    | 'iPhone 12 Mini landscape'
    | 'iPhone 13'
    | 'iPhone 13 landscape'
    | 'iPhone 13 Pro'
    | 'iPhone 13 Pro landscape'
    | 'iPhone 13 Pro Max'
    | 'iPhone 13 Pro Max landscape'
    | 'iPhone 13 Mini'
    | 'iPhone 13 Mini landscape'
    | 'iPhone 14'
    | 'iPhone 14 landscape'
    | 'iPhone 14 Plus'
    | 'iPhone 14 Plus landscape'
    | 'iPhone 14 Pro'
    | 'iPhone 14 Pro landscape'
    | 'iPhone 14 Pro Max'
    | 'iPhone 14 Pro Max landscape'
    | 'iPhone 15'
    | 'iPhone 15 landscape'
    | 'iPhone 15 Plus'
    | 'iPhone 15 Plus landscape'
    | 'iPhone 15 Pro'
    | 'iPhone 15 Pro landscape'
    | 'iPhone 15 Pro Max'
    | 'iPhone 15 Pro Max landscape'
    | 'JioPhone 2'
    | 'JioPhone 2 landscape'
    | 'Kindle Fire HDX'
    | 'Kindle Fire HDX landscape'
    | 'LG Optimus L70'
    | 'LG Optimus L70 landscape'
    | 'Microsoft Lumia 550'
    | 'Microsoft Lumia 950'
    | 'Microsoft Lumia 950 landscape'
    | 'Nexus 10'
    | 'Nexus 10 landscape'
    | 'Nexus 4'
    | 'Nexus 4 landscape'
    | 'Nexus 5'
    | 'Nexus 5 landscape'
    | 'Nexus 5X'
    | 'Nexus 5X landscape'
    | 'Nexus 6'
    | 'Nexus 6 landscape'
    | 'Nexus 6P'
    | 'Nexus 6P landscape'
    | 'Nexus 7'
    | 'Nexus 7 landscape'
    | 'Nokia Lumia 520'
    | 'Nokia Lumia 520 landscape'
    | 'Nokia N9'
    | 'Nokia N9 landscape'
    | 'Pixel 2'
    | 'Pixel 2 landscape'
    | 'Pixel 2 XL'
    | 'Pixel 2 XL landscape'
    | 'Pixel 3'
    | 'Pixel 3 landscape'
    | 'Pixel 4'
    | 'Pixel 4 landscape'
    | 'Pixel 4a (5G)'
    | 'Pixel 4a (5G) landscape'
    | 'Pixel 5'
    | 'Pixel 5 landscape'
    | 'Moto G4'
    | 'Moto G4 landscape',
    Device
  >
>;
```

----------------------------------------

TITLE: Process.waitForLineOutput Method Signature in TypeScript
DESCRIPTION: Method signature for waiting for line output that matches a regular expression pattern. Takes a required RegExp parameter and an optional timeout parameter, returning a Promise that resolves to the matched string.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.process.waitforlineoutput.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Process {
  waitForLineOutput(regex: RegExp, timeout?: number): Promise<string>;
}
```

----------------------------------------

TITLE: Defining writeMetadata Method Signature in InstalledBrowser Class - TypeScript
DESCRIPTION: Method signature for writing metadata to an installed browser instance. Takes a Metadata parameter and returns void. This method is part of the InstalledBrowser class in Puppeteer's API.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.installedbrowser.writemetadata.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class InstalledBrowser {
  writeMetadata(metadata: Metadata): void;
}
```

----------------------------------------

TITLE: Defining NodeFor Type in TypeScript for Selector Parsing
DESCRIPTION: Defines a TypeScript type alias called NodeFor that maps complex CSS selector strings to their parsed representation. It uses the ParseSelector generic type to convert selector strings into corresponding TypeScript types.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.nodefor.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type NodeFor<ComplexSelector extends string> =
  ParseSelector<ComplexSelector>;
```

----------------------------------------

TITLE: Default LogLevel Setting - String
DESCRIPTION: Specifies the default logging level for Puppeteer, which is 'warn'. This level indicates that warnings and errors will be logged.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.configuration.md#_snippet_4

LANGUAGE: String
CODE:
```
warn
```

----------------------------------------

TITLE: Defining CLI Run Method in TypeScript
DESCRIPTION: Signature for the 'run' method of the CLI class. It takes an 'argv' parameter, likely for processing command-line arguments. The return type and full implementation details are not provided in this snippet.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/browsers-api/browsers.cli.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
run(argv)
```

----------------------------------------

TITLE: Implementing Page.target Method in TypeScript for Puppeteer
DESCRIPTION: TypeScript class method signature for the Page.target() method that returns a Target object. This method is marked as obsolete and developers are recommended to use Page.createCDPSession() directly instead.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.page.target.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract target(): Target;
}
```

----------------------------------------

TITLE: Run Sandbox Smoke Tests
DESCRIPTION: Executes a script that performs smoke tests by creating fresh Angular projects, installing the schematic, and running initial E2E tests.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_5

LANGUAGE: bash
CODE:
```
node tools/smoke.mjs
```

----------------------------------------

TITLE: Frame.name Method Signature in Puppeteer (TypeScript)
DESCRIPTION: The class signature for the Frame.name() method in Puppeteer. This method returns the frame's name attribute as a string, as specified in the HTML tag.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.frame.name.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
class Frame {
  name(): string;
}
```

----------------------------------------

TITLE: Deploying Puppeteer Website Without SSH
DESCRIPTION: Command to build and deploy the website using GitHub username for authentication. This is useful for pushing to the gh-pages branch when using GitHub Pages for hosting.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/README.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
$ GIT_USER=<Your GitHub username> npm run deploy
```

----------------------------------------

TITLE: DeviceRequestPrompt.waitForDevice() Method Signature - TypeScript
DESCRIPTION: The signature for the waitForDevice method, which waits for a device matching a filter. It takes a filter function and optional timeout options, returning a Promise that resolves with the matching device.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.devicerequestprompt.waitfordevice.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class DeviceRequestPrompt {
  waitForDevice(
    filter: (device: DeviceRequestPromptDevice) => boolean,
    options?: WaitTimeoutOptions,
  ): Promise<DeviceRequestPromptDevice>;
}
```

----------------------------------------

TITLE: Example HTML Structure for Puppeteer ElementHandle.$$eval (HTML)
DESCRIPTION: This snippet provides a simple HTML structure with a parent `div` (`.feed`) containing multiple child `div` elements (`.tweet`). This structure is used in the subsequent JavaScript example to demonstrate how `ElementHandle.$$eval` can select and evaluate functions on multiple elements within a specific parent.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.__eval.md#_snippet_1

LANGUAGE: html
CODE:
```
<div class="feed">
  <div class="tweet">Hello!</div>
  <div class="tweet">Hi!</div>
</div>
```

----------------------------------------

TITLE: Starting Local Development Server for Puppeteer Website
DESCRIPTION: Command to start a local development server that opens a browser window and reflects changes live without server restarts.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
$ npm start
```

----------------------------------------

TITLE: Sending message using ExtensionTransport in TypeScript
DESCRIPTION: Provides the TypeScript signature for the send method of the ExtensionTransport class. This method takes a single string parameter named 'message' and returns void, indicating it performs an action without returning a value.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.extensiontransport.send.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ExtensionTransport {
  send(message: string): void;
}
```

----------------------------------------

TITLE: Convert Cookie Partition Key from Puppeteer to CDP - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the `convertCookiesPartitionKeyFromPuppeteerToCdp` function. It declares the function, its single parameter `partitionKey` which accepts a Puppeteer `CookiePartitionKey`, string, or undefined, and its return type which is a CDP `Protocol.Network.CookiePartitionKey` or undefined.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.convertcookiespartitionkeyfrompuppeteertocdp.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function convertCookiesPartitionKeyFromPuppeteerToCdp(
  partitionKey: CookiePartitionKey | string | undefined,
): Protocol.Network.CookiePartitionKey | undefined;
```

----------------------------------------

TITLE: Deploying Puppeteer Website Using SSH
DESCRIPTION: Command to build and deploy the website when using SSH for GitHub authentication.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
$ USE_SSH=true npm run deploy
```

----------------------------------------

TITLE: Defining CommonEventEmitter.removeAllListeners Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the removeAllListeners method that removes all listeners for either a specific event or all events. The method takes an optional event parameter and returns the instance itself.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.commoneventemitter.removealllisteners.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
interface CommonEventEmitter {
  removeAllListeners(event?: keyof Events): this;
}
```

----------------------------------------

TITLE: Frame.isDetached Method Signature (Obsolete)
DESCRIPTION: This snippet shows the TypeScript signature for the obsolete Frame.isDetached() method. The method returns a boolean value indicating whether the frame has been detached. Users should use the `detached` getter instead.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.frame.isdetached.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Frame {
  isDetached(): boolean;
}
```

----------------------------------------

TITLE: Defining the ElementHandle.drag() Method Signature (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the deprecated ElementHandle.drag() method. It takes a 'target' which can be a Point or another ElementHandle and returns a Promise resolving to Protocol.Input.DragData or void. It is marked as DEPRECATED.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.drag.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  drag(
    this: ElementHandle<Element>,
    target: Point | ElementHandle<Element>,
  ): Promise<Protocol.Input.DragData | void>;
}
```

----------------------------------------

TITLE: Defining CDP_WEBSOCKET_ENDPOINT_REGEX RegExp (TypeScript)
DESCRIPTION: This snippet declares the variable CDP_WEBSOCKET_ENDPOINT_REGEX and specifies its type as RegExp in TypeScript. It is used elsewhere in the codebase to handle CDP websocket endpoint strings.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.cdp_websocket_endpoint_regex.md#_snippet_0

LANGUAGE: typescript
CODE:
```
CDP_WEBSOCKET_ENDPOINT_REGEX: RegExp;
```

----------------------------------------

TITLE: Defining RemoteAddress Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the RemoteAddress interface, which represents a remote network address. It includes optional properties for IP address (string) and port number (number).
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.remoteaddress.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export interface RemoteAddress {
  ip?: string;
  port?: number;
}
```

----------------------------------------

TITLE: Declaring ExtensionTransport Class (TypeScript)
DESCRIPTION: This code snippet declares the experimental ExtensionTransport class in TypeScript. It is designed to serve as a connection transport layer for Puppeteer when operating within a Chrome extension, implementing the ConnectionTransport interface to provide the necessary communication methods via the chrome.debugger API. Note that its constructor is internal and not intended for direct use by third-party code.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.extensiontransport.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class ExtensionTransport implements ConnectionTransport
```

----------------------------------------

TITLE: Getting Page Target - Puppeteer - TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.target() method. It indicates that the method is abstract within the Page class and returns a Target object. Note that this method is marked as obsolete in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.target.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class Page {
  abstract target(): Target;
}
```

----------------------------------------

TITLE: Keyboard Class Declaration in TypeScript
DESCRIPTION: Abstract class declaration for Puppeteer's Keyboard implementation. This class is marked as internal and should not be instantiated directly.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.keyboard.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare abstract class Keyboard
```

----------------------------------------

TITLE: Signature for ElementHandle.dragAndDrop method (TypeScript)
DESCRIPTION: Defines the signature of the obsolete `dragAndDrop` method within the `ElementHandle` class. It takes a target `ElementHandle<Node>` and an optional options object with a `delay` property, returning a `Promise<void>`. This method is deprecated.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.draganddrop.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  dragAndDrop(
    this: ElementHandle<Element>,
    target: ElementHandle<Node>,
    options?: {
      delay: number;
    },
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Resolve Build ID Function Signature (TypeScript)
DESCRIPTION: Defines the signature for the `resolveBuildId` function, which asynchronously determines a build ID based on the provided browser instance, platform, and tag. It takes a Browser object, a BrowserPlatform enum value, and a string or BrowserTag as input, returning a Promise that resolves to a string representing the build ID.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/browsers-api/browsers.resolvebuildid.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function resolveBuildId(
  browser: Browser,
  platform: BrowserPlatform,
  tag: string | BrowserTag,
): Promise<string>;
```

----------------------------------------

TITLE: Formatting Other Packages CHANGELOG Header - Markdown
DESCRIPTION: Provides the markdown format for manually adding a new version header to the CHANGELOGs of packages other than the main 'puppeteer' package when the automated release process fails. Includes placeholders for the package folder name, version numbers, and the current date.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_21

LANGUAGE: markdown
CODE:
```
## [{NEW_VERSION}](https://github.com/puppeteer/puppeteer/compare/{PACKAGE_FOLDER_NAME}-v{PREVIOUS_VERSION}...{PACKAGE_FOLDER_NAME}-v{NEW_VERSION}) ({CURRENT_DATE})
```

----------------------------------------

TITLE: Running Specific Test Suite in Bash
DESCRIPTION: Command to run a specific test suite (chrome-headless) using the --test-suite argument.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm run build && npm run test -- --test-suite chrome-headless
```

----------------------------------------

TITLE: Converting Cookie Partition Keys from Puppeteer to CDP Format in TypeScript
DESCRIPTION: This function converts cookie partition keys from Puppeteer's format to Chrome DevTools Protocol (CDP) format. It accepts a partition key that can be a CookiePartitionKey object, a string, or undefined, and returns a Protocol.Network.CookiePartitionKey object or undefined.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.convertcookiespartitionkeyfrompuppeteertocdp.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare function convertCookiesPartitionKeyFromPuppeteerToCdp(
  partitionKey: CookiePartitionKey | string | undefined,
): Protocol.Network.CookiePartitionKey | undefined;
```

----------------------------------------

TITLE: Defining ExtensionTransport Class in TypeScript
DESCRIPTION: Class declaration for ExtensionTransport that implements the ConnectionTransport interface. The class provides functionality for establishing connections through chrome.debugger API in browser extensions.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.extensiontransport.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class ExtensionTransport implements ConnectionTransport
```

----------------------------------------

TITLE: Setting Ownership of Setuid Sandbox Bash
DESCRIPTION: This bash command changes the owner and group of the `chrome_sandbox` executable to `root`. This is a necessary step when configuring the setuid sandbox on Linux, allowing the sandbox process to gain elevated privileges temporarily.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#_snippet_11

LANGUAGE: bash
CODE:
```
sudo chown root:root chrome_sandbox
```

----------------------------------------

TITLE: Formatting Puppeteer Package CHANGELOG Header - Markdown
DESCRIPTION: Provides the markdown format for manually adding a new version header to the main 'puppeteer' package's CHANGELOG when the automated release process fails. Placeholders indicate where to insert version numbers and the current date.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/contributing.md#_snippet_20

LANGUAGE: markdown
CODE:
```
## [{NEW_VERSION}](https://github.com/puppeteer/puppeteer/compare/v{PREVIOUS_VERSION}...v{NEW_VERSION}) ({CURRENT_DATE})
```

----------------------------------------

TITLE: Running Unit Tests for Puppeteer Angular Schematic
DESCRIPTION: Command to execute the unit test suite for the Puppeteer Angular Schematic, which verifies correct file creation and package.json updates.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/ng-schematics/README.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
npm run test
```

----------------------------------------

TITLE: Get Default Launch Arguments (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `defaultArgs` method of the `PuppeteerNode` class. It indicates the method can optionally accept `LaunchOptions` and returns an array of strings representing the default browser arguments.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.puppeteernode.defaultargs.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class PuppeteerNode {
  defaultArgs(options?: LaunchOptions): string[];
}
```

----------------------------------------

TITLE: Defining PuppeteerNode Class in TypeScript
DESCRIPTION: Declaration of the PuppeteerNode class, which extends the Puppeteer class and is used for Node-specific browser management in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.puppeteernode.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class PuppeteerNode extends Puppeteer
```

----------------------------------------

TITLE: Running Browser Revision Update Script with Node.js
DESCRIPTION: Command for running the browser revision update script using Node.js with the experimental fetch flag enabled, as the script relies on the fetch API.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/contributing.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
node --experimental-fetch tools/update_browser_revision.mjs
```

----------------------------------------

TITLE: Moveable Interface Signature (TypeScript)
DESCRIPTION: This snippet shows the basic TypeScript signature for the Moveable interface. It defines the interface name and structure.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.moveable.md#_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Moveable
```

----------------------------------------

TITLE: Defining ExperimentsConfiguration Type in TypeScript
DESCRIPTION: Defines the ExperimentsConfiguration type as a Record with string keys and never values, effectively creating an empty object type. This is likely used as a placeholder for future experimental options in Puppeteer.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.experimentsconfiguration.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
export type ExperimentsConfiguration = Record<string, never>;
```

----------------------------------------

TITLE: Configuring Test Retry Count for Debugging in Bash
DESCRIPTION: Command to control the number of test retries when debugging flaky tests by setting multiple environment variables.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/tools/mocha-runner/README.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
PUPPETEER_DEFLAKE_RETRIES=1000 PUPPETEER_DEFLAKE_TESTS="[navigation.spec] *" npm run test:chrome:headless
```

----------------------------------------

TITLE: Protractor Example Test (TypeScript)
DESCRIPTION: A sample Protractor test suite demonstrating navigation (browser.get), element interaction (element().sendKeys, element().click), and assertion (expect().getText().toEqual). Requires Protractor setup.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/guides/ng-schematics.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
describe('Protractor Demo', function () {
  it('should add one and two', function () {
    browser.get('https://juliemr.github.io/protractor-demo/');
    element(by.model('first')).sendKeys(1);
    element(by.model('second')).sendKeys(2);

    element(by.id('gobutton')).click();

    expect(element(by.binding('latest')).getText()).toEqual('3');
  });
});
```

----------------------------------------

TITLE: Setting Cookies using Page.setCookie (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the now obsolete Page.setCookie method to set one or more cookies on a page. The method accepts an array of CookieParam objects. Note that this API is deprecated and should be replaced with Browser.setCookie or BrowserContext.setCookie.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.page.setcookie.md#_snippet_0

LANGUAGE: ts
CODE:
```
await page.setCookie(cookieObject1, cookieObject2);
```

----------------------------------------

TITLE: Obsolete ElementHandle.drop(data) Signature - Puppeteer TypeScript
DESCRIPTION: Defines the signature for an obsolete version of the ElementHandle.drop method that optionally accepts Protocol.Input.DragData. This method is no longer supported.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.drop.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
class ElementHandle {
  drop(
    this: ElementHandle<Element>,
    data?: Protocol.Input.DragData,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Defining CDPSession Connection Method in TypeScript
DESCRIPTION: Abstract method definition that returns the underlying connection for a CDP session. The method can return either a Connection object or undefined if no connection exists.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/api/puppeteer.cdpsession.connection.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
class CDPSession {
  abstract connection(): Connection | undefined;
}
```

----------------------------------------

TITLE: Creating Entrypoint for Vendored Package (TypeScript)
DESCRIPTION: This TypeScript code snippet serves as a template for an `index.ts` file within a specific vendored package's directory inside `third_party`. It re-exports all named exports (`export *`) and the default export (`export {default as default}`) from the actual package ('your-package'). This structure allows other parts of the Puppeteer codebase to import the dependency using a relative path to this entrypoint, thus avoiding reliance on Node.js module resolution mechanisms and facilitating use in non-Node environments.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/packages/puppeteer-core/third_party/README.md#2025-04-22_snippet_0

LANGUAGE: ts
CODE:
```
export * from 'your-package';
export {default as default} from 'your-package';
```

----------------------------------------

TITLE: Method Signature for dragEnter in Puppeteer ElementHandle (TypeScript)
DESCRIPTION: This snippet shows the TypeScript signature for the `dragEnter` method of the `ElementHandle` class in Puppeteer. It takes an optional `data` parameter of type `Protocol.Input.DragData` and returns a `Promise<void>`. The documentation explicitly states this method is obsolete and should not be used as `dragenter` is performed automatically during dragging.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/website/versioned_docs/version-24.8.0/api/puppeteer.elementhandle.dragenter.md#_snippet_0

LANGUAGE: typescript
CODE:
```
class ElementHandle {
  dragEnter(
    this: ElementHandle<Element>,
    data?: Protocol.Input.DragData,
  ): Promise<void>;
}
```

----------------------------------------

TITLE: Displaying Chrome System Package Requirements for Debian/Ubuntu Linux
DESCRIPTION: This URL points to a JSON file containing the required system packages for Chrome on Debian/Ubuntu Linux systems with x64 architecture.
SOURCE: https://github.com/puppeteer/puppeteer/blob/main/docs/guides/system-requirements.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
https://source.chromium.org/chromium/chromium/src/+/main:chrome/installer/linux/debian/dist_package_versions.json
```