TITLE: Setting PATH for Flutter on Windows
DESCRIPTION: Adding the Flutter binary directory to the PATH environment variable on Windows.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
set PATH="%PATH%;%CD%\bin\flutter"
```

----------------------------------------

TITLE: Adding Flutter bin directory to PATH
DESCRIPTION: This command adds the `bin` directory of the Flutter repository to the system's PATH environment variable. This allows the `flutter` command-line tool to be executed from any directory. The user needs to replace `<path to flutter repository>` with the actual path to the flutter repository.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
"export PATH=\"$PATH:$HOME/<path to flutter repository>/bin\""
```

----------------------------------------

TITLE: Flutter Run Command Basic Usage
DESCRIPTION: Basic command for running a Flutter app in debug mode with hot reload enabled.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
flutter run
```

----------------------------------------

TITLE: Running Flutter Doctor
DESCRIPTION: Executing the flutter doctor command to check the installation and ensure all dependencies are met.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
flutter doctor
```

----------------------------------------

TITLE: Running Basic Flutter Hello World Demo
DESCRIPTION: Command to execute the default Flutter Hello World demo application.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
flutter run
```

----------------------------------------

TITLE: Running Flutter Version Check
DESCRIPTION: Command to verify Dart SDK and other artifacts are available by checking Flutter version
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
flutter --version
```

----------------------------------------

TITLE: Importing Flutter Framework Libraries in Dart
DESCRIPTION: Demonstrates how to import core Flutter framework libraries using the package:flutter namespace. Shows importing material design and platform services libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/docs/README.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
```

----------------------------------------

TITLE: Running Flutter unit tests
DESCRIPTION: The `flutter test` command discovers and executes all files ending with `_test.dart` within the `test/` subdirectory of a Flutter package. It runs these tests inside a headless flutter shell.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
"flutter test"
```

----------------------------------------

TITLE: Updating Flutter to Latest Stable Version with Hotfixes
DESCRIPTION: Commands to switch to the stable channel and upgrade Flutter to the latest version with hotfixes. This ensures you have the most up-to-date stable release of Flutter.
SOURCE: https://github.com/flutter/flutter/blob/master/CHANGELOG.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ flutter channel stable
$ flutter upgrade
```

----------------------------------------

TITLE: Running Continuous Flutter Analysis with Watch Mode
DESCRIPTION: Command to continuously monitor and analyze Flutter code, automatically checking for issues whenever files are changed. This is useful during development for immediate feedback.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Using-the-Dart-analyzer.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
flutter analyze --flutter-repo --watch
```

----------------------------------------

TITLE: Committing Changes
DESCRIPTION: Commits all staged changes with a descriptive message.  The `-a` flag automatically stages all modified and deleted files. A well-written commit message should explain the problem and the solution.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_2

LANGUAGE: git
CODE:
```
git commit -a -m "<your informative commit message>"
```

----------------------------------------

TITLE: Configuring Dependencies in pubspec.yaml
DESCRIPTION: Package dependencies configuration for integration testing in Flutter
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
dev_dependencies:
  integration_test:
    sdk: flutter
  flutter_test:
    sdk: flutter
```

----------------------------------------

TITLE: Updating Flutter Packages
DESCRIPTION: Command to download all necessary pub package dependencies for Flutter projects.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
flutter update-packages
```

----------------------------------------

TITLE: Incorrect compileOptions and kotlinOptions Configuration (String Literal)
DESCRIPTION: This snippet illustrates an incorrect configuration where `compileOptions` use `JavaVersion` constants, but `kotlinOptions` uses a string literal for `jvmTarget`.  It is recommended that the `jvmTarget` use the `JavaVersion.VERSION_XX.toString()` format to avoid potential errors.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_11

LANGUAGE: Groovy
CODE:
```
// Not ok
compileOptions {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

kotlinOptions {
    jvmTarget = "17"
}
```

----------------------------------------

TITLE: Opening Xcode Project for Launch Screen Asset Customization
DESCRIPTION: Command to open the iOS portion of a Flutter project in Xcode to customize launch screen assets through the Xcode interface.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/module/ios/host_app_ephemeral/Runner.tmpl/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
open ios/Runner.xcworkspace
```

----------------------------------------

TITLE: Opening Xcode Project for Flutter iOS App
DESCRIPTION: Command to open the Xcode project for a Flutter iOS app. This allows access to the Assets.xcassets folder where launch screen images can be added or modified.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
open ios/Runner.xcworkspace
```

----------------------------------------

TITLE: Verifying Flutter Version
DESCRIPTION: This command displays the currently installed Flutter version, allowing developers to verify that they are using the correct beta build. It helps to confirm the successful switch to the beta channel and upgrade process.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Quality-Assurance.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
`flutter --version`
```

----------------------------------------

TITLE: Using Asserts for Contract Validation in Dart
DESCRIPTION: Demonstrates proper usage of assert statements to verify contracts and invariants in debug mode. Shows both simple and complex assertions within a RenderBox class method.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_9

LANGUAGE: dart
CODE:
```
abstract class RenderBox extends RenderObject {
  // ...

  double getDistanceToBaseline(TextBaseline baseline, {bool onlyReal: false}) {
    // simple asserts:
    assert(!needsLayout);
    assert(!_debugDoingBaseline);
    // more complicated asserts:
    assert(() {
      final RenderObject parent = this.parent;
      if (owner.debugDoingLayout) {
        return (RenderObject.debugActiveLayout == parent) && parent.debugDoingThisLayout;
      }
      if (owner.debugDoingPaint) {
        return ((RenderObject.debugActivePaint == parent) && parent.debugDoingThisPaint)
            || ((RenderObject.debugActivePaint == this)   && debugDoingThisPaint);
      }
      assert(parent == this.parent);
      return false;
    });
    // ...
    return 0.0;
  }

  // ...
}
```

----------------------------------------

TITLE: Setting compileSdk in Android Gradle
DESCRIPTION: This snippet demonstrates the correct way to set the `compileSdk` in the `android` block of a Gradle build file. It uses the `flutter.compileSdkVersion` variable, or a specific API level if the variable is not available.  Using a numeric literal directly is allowed when `flutter.compileSdkVersion` is not available, for example in 'add to app' scenarios.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_0

LANGUAGE: Groovy
CODE:
```
// OK
android {
  compileSdk = flutter.compileSdkVersion
}
```

----------------------------------------

TITLE: Creating Flutter Module
DESCRIPTION: These commands create a Flutter module named 'hello', navigate into the project directory, and build the module into an AAR (Android Archive) file. The resulting AAR file can then be embedded within a native Android application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/pure_android_host_apps/android_custom_host_app/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ flutter create -t module hello
$ cd hello
$ flutter build aar
```

----------------------------------------

TITLE: Setting PATH for Flutter on Other Platforms
DESCRIPTION: Adding the Flutter binary directory to the PATH environment variable on non-Windows platforms.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_2

LANGUAGE: plaintext
CODE:
```
export PATH="$PATH:$PWD/flutter"
```

----------------------------------------

TITLE: Defining Simple Getters with => Syntax in Dart
DESCRIPTION: This snippet shows how to use the '=>' syntax for defining simple getters that return literals or switch expressions. It's focused on enhancing code clarity and reducing verbosity.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_20

LANGUAGE: dart
CODE:
```
// GOOD:
List<Color> get favorites => <Color>[
  const Color(0xFF80FFFF),
  const Color(0xFF00FFF0),
  const Color(0xFF4000FF),
  _mysteryColor(),
];

// GOOD:
bool get isForwardOrCompleted => switch (status) {
  AnimationStatus.forward || AnimationStatus.completed => true,
  AnimationStatus.reverse || AnimationStatus.dismissed => false,
};
```

----------------------------------------

TITLE: Using Specialized Constructors in Flutter
DESCRIPTION: Illustrates the proper use of specialized constructors in Flutter, showing how to prefer more specific constructors over general-purpose ones for better code clarity.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_10

LANGUAGE: dart
CODE:
```
// BAD:
const EdgeInsets.TRBL(0.0, 8.0, 0.0, 8.0);

// GOOD:
const EdgeInsets.symmetric(horizontal: 8.0);
```

----------------------------------------

TITLE: Rebasing for PR Updates
DESCRIPTION: Updates the PR branch by rebasing it onto the upstream's main branch. This keeps the PR up-to-date and avoids merge conflicts. Replace `your_branch_name` with the name of your branch.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_4

LANGUAGE: git
CODE:
```
git fetch upstream; git rebase upstream/main; git push origin your_branch_name
```

----------------------------------------

TITLE: Implementing Material Circular Progress Indicator in Flutter
DESCRIPTION: This class implements a Material Design circular progress indicator. It handles both determinate and indeterminate progress modes, and manages animations for the indicator's rotation and arc sweep.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/core/lib/src/proto/license_header.txt#2025-04-21_snippet_1

LANGUAGE: Dart
CODE:
```
class _MaterialCircularProgressIndicator extends StatefulWidget {
  const _MaterialCircularProgressIndicator({
    super.key,
    required this.backgroundColor,
    required this.valueColor,
    required this.value,
    required this.animationDuration,
    required this.strokeWidth,
    this.semanticsLabel,
    this.semanticsValue,
  });

  final Color backgroundColor;
  final Animation<Color?> valueColor;
  final double? value;
  final Duration animationDuration;
  final double strokeWidth;
  final String? semanticsLabel;
  final String? semanticsValue;

  @override
  State<_MaterialCircularProgressIndicator> createState() => _MaterialCircularProgressIndicatorState();
}
```

----------------------------------------

TITLE: Registering Platform View in Plugin for iOS Flutter App
DESCRIPTION: This snippet demonstrates how to register the platform view in a Flutter plugin for iOS. It creates the view factory and registers it with the plugin registrar.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_10

LANGUAGE: objc
CODE:
```
#import "FLPlugin.h"
#import "FLNativeView.h"

@implementation FLPlugin

+ (void)registerWithRegistrar:(NSObject<FlutterPluginRegistrar>*)registrar {
  FLNativeViewFactory* factory =
      [[FLNativeViewFactory alloc] initWithMessenger:registrar.messenger];
  [registrar registerViewFactory:factory withId:@"<platform-view-type>"];
}

@end
```

----------------------------------------

TITLE: Android MainActivity Platform View Registration
DESCRIPTION: Register platform view in the main activity for app-level platform view configuration
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_4

LANGUAGE: java
CODE:
```
public class MainActivity extends FlutterActivity {
    @Override
    public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {
        flutterEngine
            .getPlatformViewsController()
            .getRegistry()
            .registerViewFactory("<platform-view-type>", new NativeViewFactory());
    }
}
```

----------------------------------------

TITLE: Starting DevTools with VM Service URI in Flutter
DESCRIPTION: This snippet shows how to use the 'dart devtools' command to start DevTools and automatically connect it to a provided VM service URI. It demonstrates how the command checks for an existing DDS instance and starts one if necessary.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-the-Dart-Development-Service-(DDS)-and-Flutter-DevTools-with-a-custom-Flutter-Engine-Embedding.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ dart devtools http://127.0.0.1:59251/2LS6f3Kb2JI=/
Started the Dart Development Service (DDS) at http://127.0.0.1:59260/38XeuQpIHRE=/
Serving DevTools at http://127.0.0.1:9101.

          Hit ctrl-c to terminate the server.
```

----------------------------------------

TITLE: Example Flutter Driver Test Execution
DESCRIPTION: Concrete example of running a specific Flutter driver test for keyboard resize functionality, demonstrating the precise syntax for test and driver file paths.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
flutter drive -t lib/keyboard_resize.dart --driver test_driver/keyboard_resize_test.dart
```

----------------------------------------

TITLE: Running individual Flutter unit tests
DESCRIPTION: To run a specific test file, provide the file path to the `flutter test` command. This allows you to focus on individual tests during development and debugging.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
"flutter test lib/my_app_test.dart"
```

----------------------------------------

TITLE: Using dart development-service Command for DDS in Flutter
DESCRIPTION: This snippet shows the usage of the 'dart development-service' command to start a Dart Development Service instance. It includes the command's interface and explains key options like '--vm-service-uri' and '--serve-devtools'.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-the-Dart-Development-Service-(DDS)-and-Flutter-DevTools-with-a-custom-Flutter-Engine-Embedding.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
Start Dart's development service.

Usage: dart [vm-options] development-service [arguments]
-h, --help                                 Print this usage information.
    --vm-service-uri=<uri> (mandatory)     The VM service URI DDS will connect to.
    --bind-address=<address>               The address DDS should bind to.
                                           (defaults to "localhost")
    --bind-port=<port>                     The port DDS should be served on.
                                           (defaults to "0")
    --[no-]disable-service-auth-codes      Disables authentication codes.
    --[no-]serve-devtools                  If provided, DDS will serve DevTools. If not specified, "--devtools-server-address" is ignored.
    --devtools-server-address              Redirect to an existing DevTools server. Ignored if "--serve-devtools" is not specified.
    --[no-]enable-service-port-fallback    Bind to a random port if DDS fails to bind to the provided port.
    --cached-user-tags                     A set of UserTag names used to determine which CPU samples are cached by DDS.
    --google3-workspace-root               Sets the Google3 workspace root used for google3:// URI resolution.

Run "dart help" to see global options.
```

----------------------------------------

TITLE: Android Platform View Factory
DESCRIPTION: Create a PlatformViewFactory to manage the creation of native Android views
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_3

LANGUAGE: java
CODE:
```
class NativeViewFactory extends PlatformViewFactory {
  @NonNull private final BinaryMessenger messenger;
  @NonNull private final View containerView;

  NativeViewFactory(@NonNull BinaryMessenger messenger, @NonNull View containerView) {
    super(StandardMessageCodec.INSTANCE);
    this.messenger = messenger;
    this.containerView = containerView;
  }

  @NonNull
  @Override
  public PlatformView create(@NonNull Context context, int id, @Nullable Object args) {
    final Map<String, Object> creationParams = (Map<String, Object>) args;
    return new NativeView(context, id, creationParams);
  }
}
```

----------------------------------------

TITLE: Parameterized Translation Example
DESCRIPTION: Example of a translation string containing a variable parameter that gets replaced at runtime.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/lib/src/l10n/README.md#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
"aboutListTileTitle": "About $applicationName"
```

----------------------------------------

TITLE: Fetching Updates from Upstream
DESCRIPTION: Fetches the latest changes from the upstream repository without merging them into the local branch. This is the first step in updating your local repository.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_0

LANGUAGE: git
CODE:
```
git fetch upstream
```

----------------------------------------

TITLE: Building Flutter in Debug Mode
DESCRIPTION: Commands for building Flutter in debug mode for Android and iOS. Debug mode enables assertions, debugging information, and debugger tools while optimizing for fast development cycles.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Flutter's-modes.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
sky/tools/gn --android
sky/tools/gn --ios
```

----------------------------------------

TITLE: Opening Xcode Project for Flutter iOS App
DESCRIPTION: Command to open the Xcode project for a Flutter iOS app. This allows access to the Assets.xcassets folder where launch screen images can be added or modified.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flavors/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
`open ios/Runner.xcworkspace`
```

----------------------------------------

TITLE: Creating Flutter Module for iOS Integration
DESCRIPTION: This command creates a new Flutter module named 'hello' that can be integrated into the iOS host app. The module should be placed in a sibling folder to the host app clone.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_host_app/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ flutter create -t module hello
```

----------------------------------------

TITLE: Flutter Run in Release Mode
DESCRIPTION: Command to run a Flutter app in release mode with full optimizations.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
flutter run --release
```

----------------------------------------

TITLE: iOS Dart Platform View Implementation
DESCRIPTION: Create a UIKitView for implementing platform views on iOS
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
Widget build(BuildContext context) {
  final String viewType = '<platform-view-type>';
  final Map<String, dynamic> creationParams = <String, dynamic>{};

  return UiKitView(
    viewType: viewType,
    layoutDirection: TextDirection.ltr,
    creationParams: creationParams,
    creationParamsCodec: const StandardMessageCodec(),
  );
}
```

----------------------------------------

TITLE: Validating and Building Migrated Project
DESCRIPTION: Ensures that the migrated project can be built for both Android and iOS. Executing `flutter build apk` and `flutter build ios` will compile the application for respective platforms, confirming successful migration.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-build-with-gradle.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
cd <appname>
flutter build apk
flutter build ios
```

----------------------------------------

TITLE: Enabling Trace in Git to Provide More Failure Information
DESCRIPTION: This snippet demonstrates how to enable tracing in Git to get more information about command failures. By setting the GIT_TRACE environment variable to 1, more detailed logs are produced when a Git command fails.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Signing-commits.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
GIT_TRACE=1 git commit -S -m 'some message'
```

----------------------------------------

TITLE: Opening Xcode Workspace for Launch Screen Asset Configuration
DESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for modifying launch screen assets through the Xcode interface.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/ios.tmpl/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
open ios/Runner.xcworkspace
```

----------------------------------------

TITLE: Defining Application Target and Linking Dependencies for Flutter Linux Application
DESCRIPTION: Creates the executable target with source files and links required libraries. This section defines the main application target and links it with Flutter and GTK libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: CMake
CODE:
```
# Define the application target. To change its name, change BINARY_NAME above,
# not the value here, or `flutter run` will no longer work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add dependency libraries. Add any application-specific dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: Gradle Distribution URL Configuration
DESCRIPTION: This snippet shows how to configure the Gradle distribution URL in the `gradle-wrapper.properties` file. This URL points to the specific Gradle version that the project should use.  The gradle wrapper version should be compatible with the target and compile SDK.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_8

LANGUAGE: Groovy
CODE:
```
// OK
distributionUrl=https\://services.gradle.org/distributions/gradle-8.12.1-bin.zip
```

----------------------------------------

TITLE: Importing Dart Core Libraries in Flutter
DESCRIPTION: Shows how to import built-in Dart libraries using the dart: namespace. Demonstrates importing async functionality and UI primitives.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/docs/README.md#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
import 'dart:async';
import 'dart:ui';
```

----------------------------------------

TITLE: Implementing Operator == and hashCode for Value Classes in Dart
DESCRIPTION: Standard implementation pattern for equality operator and hashCode in Dart value classes. This ensures consistent behavior for value comparison and hashing, which is essential for collections.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_13

LANGUAGE: dart
CODE:
```
  @override
  bool operator ==(Object other) {
    if (other.runtimeType != runtimeType) {
      return false;
    }
    return other is Foo
        && other.bar == bar
        && other.baz == baz
        && other.quux == quux;
  }

  @override
  int get hashCode => Object.hash(bar, baz, quux);
```

----------------------------------------

TITLE: Running Flutter Web Integration Test
DESCRIPTION: Example command for running a Flutter web integration test using flutter drive, specifying target file, web server, browser, and profile mode
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/web_e2e_tests/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
flutter drive --target=test_driver/text_editing_integration.dart \
  -d web-server \
  --browser-name=chrome \
  --profile
```

----------------------------------------

TITLE: Opening Xcode Project for Flutter iOS App
DESCRIPTION: Command to open the Xcode project associated with a Flutter iOS app. This allows for visual management of launch screen assets through the Xcode interface.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
`open ios/Runner.xcworkspace`
```

----------------------------------------

TITLE: Adding Flutter GPU Dependencies in pubspec.yaml
DESCRIPTION: This code snippet shows how to configure a Flutter project's pubspec.yaml file to include the Flutter GPU SDK dependency alongside the standard Flutter SDK dependency.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/impeller/Flutter-GPU.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
dependencies:
  flutter:
    sdk: flutter
  flutter_gpu:
    sdk: flutter
```

----------------------------------------

TITLE: Installing Android Platform Tools on macOS
DESCRIPTION: This command uses Homebrew to install the Android platform tools on macOS. These tools are required for interacting with Android devices and emulators during Flutter development.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
"brew install --cask android-platform-tools"
```

----------------------------------------

TITLE: Incorrect targetSdk setting
DESCRIPTION: This snippet shows an incorrect way to set `targetSdk`. Using `targetSdk` without an equals sign `=` is not allowed. This is a syntax error in Gradle. Also make sure the target SDK is compatible with the compile SDK. 
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_5

LANGUAGE: Groovy
CODE:
```
// NOT OK
defaultConfig {
  targetSdk 28
}
```

----------------------------------------

TITLE: Using Arrow Functions in Dart
DESCRIPTION: This snippet illustrates good and bad practices for using arrow functions (=>) in Dart, emphasizing single-line usage.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_19

LANGUAGE: dart
CODE:
```
// BAD:
String capitalize(String s) =>
  '${s[0].toUpperCase()}${s.substring(1)}';

// GOOD:
String capitalize(String s) => '${s[0].toUpperCase()}${s.substring(1)}';

String capitalize(String s) {
  return '${s[0].toUpperCase()}${s.substring(1)}';
}
```

----------------------------------------

TITLE: Running Flutter API Example on Android Device
DESCRIPTION: This command shows how to run a Flutter API example on a specific Android device from the command line.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
% flutter run -d MyAndroidDevice lib/services/system_chrome/system_chrome.set_system_u_i_overlay_style.1.dart
```

----------------------------------------

TITLE: Running Flutter Hello World Example
DESCRIPTION: Commands to navigate to the hello_world example directory and run the Flutter application. This assumes an emulator is running or a device is connected with USB debugging enabled.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/examples/Running-examples.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
cd examples/hello_world
```

LANGUAGE: bash
CODE:
```
flutter run
```

----------------------------------------

TITLE: Dart API Support Query Example
DESCRIPTION: This code snippet demonstrates how to provide an API to query for feature support at runtime, enabling plugin clients to avoid hard-coding platform checks.  This ensures that the app can detect and use features as they become available across different platforms or plugin versions. It enhances flexibility and avoids code changes when new features are added.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_2

LANGUAGE: Dart
CODE:
```
"if (somePluginInstance.supportsDoingThing) {\n  somePluginInstance.doThing();\n}"
```

----------------------------------------

TITLE: Including Irrelevant Details in Flutter Widget Test (Bad)
DESCRIPTION: This Flutter widget test example shows a case where a significant portion of the setup is unrelated to the behavior under test, which can confuse the reader.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
// Notice how much of the widget setup has nothing to do with the behavior-under-test...
testWidgets('Title Section is empty, Button section is not empty.', (WidgetTester tester) async {
  const double textScaleFactor = 1.0;
  final ScrollController scrollController = new ScrollController(keepScrollOffset: true);
  await tester.pumpWidget(
    new MaterialApp(home: new Material(
      child: new Center(
        child: new Builder(builder: (BuildContext context) {
          return new RaisedButton(
            onPressed: () {
              showDialog<Null>(
                context: context,
                builder: (BuildContext context) {
                  return new MediaQuery(
                    data: MediaQuery.of(context).copyWith(textScaleFactor: textScaleFactor),
                    child: new CupertinoAlertDialog(
                      actions: const <Widget>[
                        const CupertinoDialogAction(
                          child: const Text('One'),
                        ),
                        const CupertinoDialogAction(
                          child: const Text('Two'),
                        ),
                      ],
                      actionScrollController: scrollController,
                    ),
                  );
                },
              );
            },
            child: const Text('Go'),
          );
        }),
      ),
    )),
  );

  await tester.tap(find.text('Go'));

  await tester.pump();
  await tester.pump(const Duration(seconds: 1));

  // Check that the title/message section is not displayed
  expect(scrollController.offset, 0.0);
  expect(tester.getTopLeft(find.widgetWithText(CupertinoDialogAction, 'One')).dy, equals(283.5));

  // Check that the button's vertical size is the same.
  expect(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'One')).height,
    equals(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'Two')).height));
});
```

----------------------------------------

TITLE: Declaring Flutter Test Dependency in pubspec.yaml
DESCRIPTION: This code snippet demonstrates how to declare the 'flutter_test' package as a development dependency in the pubspec.yaml file.  This is a common requirement for Flutter projects that utilize testing frameworks.  The 'sdk: flutter' specifies that this dependency is provided by the Flutter SDK.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/missing_dependency_tests/trivial_expectation.txt#2025-04-21_snippet_0

LANGUAGE: YAML
CODE:
```
"dev_dependencies:\n  flutter_test:\n    sdk: flutter"
```

----------------------------------------

TITLE: Accessing Localized Text in Flutter Widget
DESCRIPTION: Example of accessing a localized button label using MaterialLocalizations in a widget build method. Shows how to retrieve the cancelButtonLabel translation for the current context.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/lib/src/l10n/README.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
Widget build(BuildContext context) {
  return TextButton(
    child: Text(
      MaterialLocalizations.of(context).cancelButtonLabel,
    ),
  );
}
```

----------------------------------------

TITLE: Creating a New Branch
DESCRIPTION: Creates a new local branch based on the upstream's main branch.  This ensures you're starting from the latest state and allows for isolated development. Replace `name_of_your_branch` with a descriptive name for your feature or bug fix.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_1

LANGUAGE: git
CODE:
```
git checkout upstream/main -b name_of_your_branch
```

----------------------------------------

TITLE: Defining Build Configuration Options with CMake
DESCRIPTION: This section defines the build configuration for both multi-config and single-config generators in CMake. It involves setting build types and linking flags, and requires the CMake toolset and policies to support conditional configuration. The function checks for multi-configuration and sets up build types accordingly, affecting how builds are optimized and executed.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# Define build configuration option.
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
# Define settings for the Profile build mode.
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")
```

----------------------------------------

TITLE: Creating Android Key Properties File
DESCRIPTION: This snippet shows the format for the key.properties file required for Android releases. It includes placeholders for the store password, key password, key alias, and keystore file path.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/README.md#2025-04-21_snippet_0

LANGUAGE: properties
CODE:
```
storePassword=<password>
keyPassword=<password>
keyAlias=upload
storeFile=<keystore path>
```

----------------------------------------

TITLE: Flutter Build Tool Backend Integration
DESCRIPTION: Sets up the custom build command to generate Flutter libraries and headers using the Flutter tool backend. Creates a phony target to ensure proper rebuilding.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
```

----------------------------------------

TITLE: Plural Translations Definition
DESCRIPTION: Example showing how plural translations are defined in the ARB file for different quantities (zero, one, and other cases).
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/lib/src/l10n/README.md#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
"selectedRowCountTitleZero": "No items selected",
"selectedRowCountTitleOne": "1 item selected",
"selectedRowCountTitleOther": "$selectedRowCount items selected"
```

----------------------------------------

TITLE: Drawing Redirection Method in Platform View Wrapper
DESCRIPTION: Method responsible for redirecting native view drawing to a Flutter Texture canvas, enabling seamless UI composition
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Texture-Layer-Hybrid-Composition.md#2025-04-21_snippet_1

LANGUAGE: java
CODE:
```
// Drawing redirection logic
private void redirectDrawing(Canvas canvas) {
    // Redirect native view drawing to Texture canvas
}
```

----------------------------------------

TITLE: Configuring Flutter Windows Application Build
DESCRIPTION: Defines the main executable target for a Flutter Windows application with necessary source files, build settings, and dependencies. Includes version definitions, Windows-specific configurations, and required library linkages.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)

add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)

apply_standard_settings(${BINARY_NAME})

target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\""
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")

target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")

target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: Implementing Setters with Dirty Checks in Dart
DESCRIPTION: Pattern for defining mutable properties that mark a class as dirty when set. This implementation includes null checking, value comparison to prevent unnecessary updates, and calling a method to mark the object as dirty when the value changes.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_12

LANGUAGE: dart
CODE:
```
/// Documentation here (don't wait for a later commit).
TheType get theProperty => _theProperty;
TheType _theProperty;
void set theProperty(TheType value) {
  assert(value != null);
  if (_theProperty == value) {
    return;
  }
  _theProperty = value;
  markNeedsWhatever(); // the method to mark the object dirty
}
```

----------------------------------------

TITLE: Screenshot Test Implementation
DESCRIPTION: Integration test implementation for taking screenshots on mobile and web platforms
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
void main() {
  final binding = IntegrationTestWidgetsFlutterBinding.ensureInitialized()
      as IntegrationTestWidgetsFlutterBinding;

  testWidgets('screenshot', (WidgetTester tester) async {
    // Build the app.
    app.main();

    // This is required prior to taking the screenshot (Android only).
    await binding.convertFlutterSurfaceToImage();

    // Trigger a frame.
    await tester.pumpAndSettle();
    await binding.takeScreenshot('screenshot-1');
  });
}
```

----------------------------------------

TITLE: Flutter Row Overflow Error Pattern
DESCRIPTION: Standard error message pattern shown when a Row widget overflows its container horizontally by a specific number of pixels. This includes the error header, assertion details, widget reference, and overflow axis information.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/flutter_test/print_correct_local_widget_expectation.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
══╡ EXCEPTION CAUGHT BY RENDERING LIBRARY ╞═════════════════════════════════════════════════════════
The following assertion was thrown during layout:
A RenderFlex overflowed by 2858 pixels on the right.

The relevant error-causing widget was:
  Row
  Row:file:////.+print_correct_local_widget_test.dart:[0-9]+:[0-9]+

The overflowing RenderFlex has an orientation of Axis.horizontal.
```

----------------------------------------

TITLE: Configuring Flutter Build Command in CMake
DESCRIPTION: Sets up a custom command to call the Flutter tool backend for generating necessary files. Uses a _phony_ output to ensure the command runs on every build, as there's no reliable way to track all inputs and outputs from the Flutter tool.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)
```

----------------------------------------

TITLE: Handling Golden File Test Failure Message
DESCRIPTION: This snippet provides the error message output when a golden file test fails due to an unapproved image in post-submit testing. The message guides users to approve the images or revert changes through the Flutter Gold dashboard. Dependencies include having access to the Flutter Gold dashboard and ensuring images are pre-approved. Expected output is an error message indicating the need for action on golden file images.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
  Skia Gold received an unapproved image in post-submit
  testing. Golden file images in flutter/flutter are triaged
  in pre-submit during code review for the given PR.

  Visit https://flutter-gold.skia.org/ to view and approve
  the image(s), or revert the associated change. For more
  information, visit the wiki:
  https://github.com/flutter/flutter/blob/main/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md
```

----------------------------------------

TITLE: Handling Build Types in CMake
DESCRIPTION: This section manages the build types for the Flutter project. It ensures that the appropriate configurations such as Debug, Profile, and Release are available. The snippet adjusts compiler flags accordingly, which affects the way the project is compiled and linked, particularly affecting features like optimizations and debugging features.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# Configure build options.
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()

set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")
```

----------------------------------------

TITLE: Configuring Flutter Windows Runner Executable in CMake
DESCRIPTION: This CMake script configures the build for the Flutter Windows runner executable. It sets up the project, defines the target, adds source files, applies build settings, sets version definitions, and links required libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the build version.
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")

# Disable Windows macros that collide with C++ standard library functions.
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")

# Add dependency libraries and include directories. Add any application-specific
# dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: Measuring Startup Time with Flutter
DESCRIPTION: This command runs a Flutter application in profile mode while tracing its startup time, providing logs with detailed startup performance metrics. Required prerequisites include Flutter installation and connectivity to the target device.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/platform_views_layout/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
flutter run --profile --trace-startup
```

----------------------------------------

TITLE: Switching to Flutter Beta Channel
DESCRIPTION: This command switches the Flutter channel to the beta channel and upgrades to the latest beta build. This allows developers to test the newest features and changes before they are released to the stable channel.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Quality-Assurance.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
`flutter channel beta && flutter upgrade`
```

----------------------------------------

TITLE: Creating Flutter Application, Package, and Plugin Templates
DESCRIPTION: Command to create a sample application, package, and plugin for Flutter, which populates the pub cache.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
flutter create --template=app app_sample
```

LANGUAGE: bash
CODE:
```
flutter create --template=package package_sample
```

LANGUAGE: bash
CODE:
```
flutter create --template=plugin plugin_sample
```

----------------------------------------

TITLE: Defining FLNativeViewFactory and FLNativeView Interfaces in Objective-C
DESCRIPTION: This snippet defines the header file for FLNativeViewFactory and FLNativeView, which are used to create and manage platform views in iOS for Flutter.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_7

LANGUAGE: objc
CODE:
```
#import <Flutter/Flutter.h>

@interface FLNativeViewFactory : NSObject <FlutterPlatformViewFactory>
- (instancetype)initWithMessenger:(NSObject<FlutterBinaryMessenger>*)messenger;
@end

@interface FLNativeView : NSObject <FlutterPlatformView>

- (instancetype)initWithFrame:(CGRect)frame
               viewIdentifier:(int64_t)viewId
                    arguments:(id _Nullable)args
              binaryMessenger:(NSObject<FlutterBinaryMessenger>*)messenger;

- (UIView*)view;
@end
```

----------------------------------------

TITLE: Configuring Flutter Windows Runner Executable
DESCRIPTION: Sets up the main executable target for the Flutter Windows runner application. Includes all necessary source files and manifests required for the Windows desktop application.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)
```

----------------------------------------

TITLE: Flutter Run in Profile Mode
DESCRIPTION: Command to run a Flutter app in profile mode for performance analysis.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
flutter run --profile
```

----------------------------------------

TITLE: Driver Script Implementation
DESCRIPTION: Basic driver script for running integration tests
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
import 'package:integration_test/integration_test_driver.dart';

Future<void> main() => integrationDriver();
```

----------------------------------------

TITLE: Defining CMake Project and Build Configurations
DESCRIPTION: This snippet initializes a CMake project with specified C++ language standards and defines build configurations for Debug, Profile, and Release modes. It sets the policy to modern CMake behaviors, and contains functions for applying standard settings to targets. The build configurations are necessary for managing application build modes effectively.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(flutter_view LANGUAGES CXX)

set(BINARY_NAME "flutter_view")

cmake_policy(VERSION 3.14...3.25)

get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")
```

----------------------------------------

TITLE: Flutter Run Without Hot Reload
DESCRIPTION: Command to run a Flutter app in debug mode without hot reload functionality.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
flutter run --no-hot
```

----------------------------------------

TITLE: Overriding toString Method in Dart
DESCRIPTION: Pattern for overriding toString in simple classes to aid debugging. This implementation uses objectRuntimeType which handles the runtime type correctly in both debug and release modes.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_15

LANGUAGE: dart
CODE:
```
  @override
  String toString() => '${objectRuntimeType(this, 'NameOfObject')}($bar, $baz, $quux)';
```

----------------------------------------

TITLE: Running Flutter Analyzer
DESCRIPTION: Command to run the analyzer on Flutter Tools codebase
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
flutter analyze
```

----------------------------------------

TITLE: Excluding Irrelevant Details in Flutter Widget Test (Good)
DESCRIPTION: This Flutter widget test shows how to refactor a test by extracting irrelevant setup details into separate, well-named methods for improved clarity and maintainability.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
// Now the unrelated details are factored out...
testWidgets('Title Section is empty, Button section is not empty.', (WidgetTester tester) async {
  final ScrollController scrollController = new ScrollController(keepScrollOffset: true);
  await _launchDialog(
    dialog: CupertinoAlertDialog(
      actions: const <Widget>[
        const CupertinoDialogAction(
          child: const Text('One'),
        ),
        const CupertinoDialogAction(
          child: const Text('Two'),
        ),
      ],
      actionScrollController: scrollController,
    ),
  );

  // Check that the title/message section is not displayed
  expect(scrollController.offset, 0.0);
  expect(tester.getTopLeft(find.widgetWithText(CupertinoDialogAction, 'One')).dy, equals(283.5));

  // Check that the button's vertical size is the same.
  expect(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'One')).height,
    equals(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'Two')).height));
});
```

----------------------------------------

TITLE: Clear Number Usage in Dart Tests
DESCRIPTION: Demonstrates how to write clear and understandable numeric values in tests by using explicit expressions instead of magic numbers.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
// BAD
expect(rect.left, 4.24264068712);

// GOOD
expect(rect.left, 3.0 * math.sqrt(2));
```

----------------------------------------

TITLE: Example Flutter Test Failure Output
DESCRIPTION: This snippet shows a typical output message from a failing Flutter test, including the exception caught, the expected vs. actual results, the stack trace, and the location of the failing expectation. This output is crucial for diagnosing the root cause of a test failure.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Fix-failing-checks.md#_snippet_0

LANGUAGE: Text
CODE:
```
══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════
The following TestFailure was thrown running a test:
Expected: exactly one matching candidate
  Actual: _TextWidgetFinder:<Found 0 widgets with text
"AsyncSnapshot<String>(ConnectionState.waiting, null, null, null)": []>
   Which: means none were found but one was expected

When the exception was thrown, this was the stack:
#4      main.<anonymous closure>.<anonymous closure> (…/packages/flutter/test/widgets/async_test.dart:115:7)
<asynchronous suspension>
#5      testWidgets.<anonymous closure>.<anonymous closure> (package:flutter_test/src/widget_tester.dart:189:15)
<asynchronous suspension>
#6      TestWidgetsFlutterBinding._runTestBody (package:flutter_test/src/binding.dart:1032:5)
<asynchronous suspension>
<asynchronous suspension>
(elided one frame from package:stack_trace)

This was caught by the test expectation on the following line:
  file:///b/s/w/ir/x/w/flutter/packages/flutter/test/widgets/async_test.dart line 115
The test description was:
  gracefully handles transition from null future
════════════════════════════════════════════════════════════════════════════════════════════════════
```

----------------------------------------

TITLE: Opening Xcode Workspace Command - Flutter iOS
DESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for modifying launch screen assets through the Xcode interface.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/image_list/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
open ios/Runner.xcworkspace
```

----------------------------------------

TITLE: Building AOT Flutter Engine Bash Command
DESCRIPTION: This Bash command is used to build a Flutter engine configured for AOT mode, targeting the specified architecture and configurations. It allows custom target, sysroot, and toolchain flags for customized builds. This process leverages Flutter's 'release' mode policy and can be adapted by third-party embedder authors.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./flutter/tools/gn --runtime-mode release <custom target flags as necessary>
```

----------------------------------------

TITLE: Configuring Flutter Linux Library Dependencies in CMake
DESCRIPTION: Sets up system-level dependencies required for Flutter Linux applications using PkgConfig to find GTK, GLIB, and GIO packages. These dependencies are necessary for proper integration with the Linux desktop environment.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)
```

----------------------------------------

TITLE: Running Integration Tests for Android and iOS in Flutter
DESCRIPTION: This command runs the integration test file 'example_test.dart' using Flutter's drive command for Android and iOS platforms. It specifies both the driver and target test files.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/example/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
flutter drive \
  --driver=test_driver/integration_test.dart \
  --target=integration_test/example_test.dart
```

----------------------------------------

TITLE: Android Native View Implementation
DESCRIPTION: Create a native Android view implementing PlatformView interface with a TextView
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_2

LANGUAGE: java
CODE:
```
class NativeView implements PlatformView {
   @NonNull private final TextView textView;

    NativeView(@NonNull Context context, int id, @Nullable Map<String, Object> creationParams) {
        textView = new TextView(context);
        textView.setTextSize(72);
        textView.setBackgroundColor(Color.rgb(255, 255, 255));
        textView.setText("Rendered on a native Android view (id: " + id + ")");
    }

    @NonNull
    @Override
    public View getView() {
        return textView;
    }

    @Override
    public void dispose() {}
}
```

----------------------------------------

TITLE: Applying Standard Build Settings for Flutter Windows Runner
DESCRIPTION: Applies standard build settings to the Flutter Windows runner target. This can be customized for applications requiring different build settings.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: CMake
CODE:
```
apply_standard_settings(${BINARY_NAME})
```

----------------------------------------

TITLE: Expecting a Golden File in a Dart Test
DESCRIPTION: This code snippet demonstrates how to add an expectation for a golden file in a Flutter test using Dart. The `expectLater` function checks that the widget tree, wrapped in a `RepaintBoundary`, matches the specified golden file. The filename pattern is crucial: it must match the test filename, include a unique subtest identifier, and specify a unique subfile identifier within the testWidgets entry. Dependencies include the `flutter_test` package, and the output is a comparison against the reference image stored as the golden file.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md#2025-04-21_snippet_2

LANGUAGE: Dart
CODE:
```
await expectLater(
  find.byType(RepaintBoundary),
  matchesGoldenFile('test_name.subtest.subfile.png'),
);
```

----------------------------------------

TITLE: Using Ignore Directives in Dart
DESCRIPTION: This snippet shows how to properly use and comment ignore directives in Dart code, for both temporary and permanent cases.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_17

LANGUAGE: dart
CODE:
```
  foo(); // ignore: lint_code, https://link.to.bug/goes/here

  foo(); // ignore: lint_code, sadly there is no choice but to do
  // this because we need to twiddle the quux and the bar is zorgle.
```

----------------------------------------

TITLE: Configuring CMake for Flutter Application Setup
DESCRIPTION: This snippet configures CMake with a minimum required version and initializes a project for a Flutter-based application. It sets application target names and defines modern CMake policies to avoid warnings with newer versions. The project requires CMake version 3.14 or higher.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(complex_layout LANGUAGES CXX)
set(BINARY_NAME "complex_layout")
cmake_policy(VERSION 3.14...3.25)
```

----------------------------------------

TITLE: Running Scrolling Benchmark with Flutter
DESCRIPTION: This command initiates a scrolling performance benchmark using Flutter's drive tool in profile mode. It generates a summary of scrolling performance in JSON format. Ensure Flutter is installed and properly set up on the device or simulator prior to running this command.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/platform_views_layout/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
flutter drive --profile test_driver/scroll_perf.dart
```

----------------------------------------

TITLE: Configuring a Custom Device for Flutter CLI
DESCRIPTION: This snippet demonstrates the interactive setup process to add a custom device to the Flutter CLI configuration. It requires Flutter CLI as a prerequisite and involves providing device details such as ID, label, SDK version, hostname, and SSH credentials. The setup prompts also include details on executing commands for app deployment and optionally taking device screenshots.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/Using-custom-embedders-with-the-Flutter-CLI.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
hannes@pop-os:~/devel$ flutter custom-devices add
Please enter the id you want to device to have. Must contain only alphanumeric
or underscore characters. (example: pi)
pi
Please enter the label of the device, which is a slightly more verbose name for
the device. (example: Raspberry Pi)
Raspberry Pi
SDK name and version (example: Raspberry Pi 4 Model B+)
Raspberry Pi 4 Model B+
Should the device be enabled? [Y/n] (empty for default)

Please enter the hostname or IPv4/v6 address of the device. (example:
raspberrypi)
hpi4
Please enter the username used for ssh-ing into the remote device. (example: pi,
empty for no username)

Please enter the command executed on the remote device for starting the app.
"/tmp/${appName}" is the path to the asset bundle. (example: flutter-pi
/tmp/${appName})
flutter-pi /tmp/${appName}
Should the device use port forwarding? Using port forwarding is the default
because it works in all cases, however if your remote device has a static IP
address and you have a way of specifying the "--observatory-host=<ip>" engine
option, you might prefer not using port forwarding. [Y/n] (empty for default)

Enter the command executed on the remote device for taking a screenshot.
(example: fbgrab /tmp/screenshot.png && cat /tmp/screenshot.png | base64 | tr -d
' \n\t', empty for no screenshotting support)

Would you like to add the custom device to the config now? [Y/n] (empty for
default)

Successfully added custom device to config file at
"/home/hannes/.config/flutter/custom_devices.json".
```

----------------------------------------

TITLE: Setting Up Basic CMake Project Configuration for Flutter Platform View
DESCRIPTION: Defines basic project configuration including minimum CMake version, project name, executable name, and build configuration options.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(platform_view LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "platform_view")

# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(VERSION 3.14...3.25)
```

----------------------------------------

TITLE: Running Flutter Driver Test Locally
DESCRIPTION: Command-line instruction for executing Flutter driver tests with specified test and driver files. Allows debugging and local test verification.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
flutter drive -t <test> --driver <driver>
```

----------------------------------------

TITLE: Setting up Flutter project configuration with CMake
DESCRIPTION: Initial configuration for a Flutter project build in CMake, setting minimum CMake version requirements and project language specification.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.10)
project(runner LANGUAGES CXX)
```

----------------------------------------

TITLE: Setting up iOS dependencies for Flutter-Platform View Example
DESCRIPTION: Command sequence for installing CocoaPods dependencies required for the iOS portion of the Flutter-Platform View example. This must be executed before running the Flutter application.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
pushd ios/ ; pod install ; popd
flutter run
```

----------------------------------------

TITLE: Implementing FLNativeViewFactory and FLNativeView in Objective-C
DESCRIPTION: This snippet provides the implementation for FLNativeViewFactory and FLNativeView classes, which create and manage the native UIView for the platform view.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_8

LANGUAGE: objc
CODE:
```
#import "FLNativeView.h"

@implementation FLNativeViewFactory {
  NSObject<FlutterBinaryMessenger>* _messenger;
}

- (instancetype)initWithMessenger:(NSObject<FlutterBinaryMessenger>*)messenger {
  self = [super init];
  if (self) {
    _messenger = messenger;
  }
  return self;
}

- (NSObject<FlutterPlatformView>*)createWithFrame:(CGRect)frame
                                   viewIdentifier:(int64_t)viewId
                                        arguments:(id _Nullable)args {
  return [[FLNativeView alloc] initWithFrame:frame
                              viewIdentifier:viewId
                                   arguments:args
                             binaryMessenger:_messenger];
}

@end

@implementation FLNativeView {
   UIView *_view;
}

- (instancetype)initWithFrame:(CGRect)frame
               viewIdentifier:(int64_t)viewId
                    arguments:(id _Nullable)args
              binaryMessenger:(NSObject<FlutterBinaryMessenger>*)messenger {
  if (self = [super init]) {
    _view = [[UIView alloc] init];
  }
  return self;
}

- (UIView*)view {
  return _view;
}

@end
```

----------------------------------------

TITLE: Verifying Git remotes
DESCRIPTION: This command lists the configured Git remotes with their URLs. It is used to verify that the 'upstream' and 'origin' remotes are correctly set up.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
"git remote -v"
```

----------------------------------------

TITLE: Defining Minimum CMake Version Requirement
DESCRIPTION: The snippet sets the minimum required version of CMake to 3.10. No dependencies are needed for this operation as it is intrinsic to CMake syntax. This defines the baseline CMake features available for use in the file.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.10)
```

----------------------------------------

TITLE: Running Dart Unit Tests in Flutter
DESCRIPTION: This snippet shows how to run Dart unit tests for Flutter plugins using the command line. It highlights the specific command to execute tests for web packages as well.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
dart run script/tool/bin/flutter_plugin_tools.dart drive-examples --packages=<name_of_plugin>
```

----------------------------------------

TITLE: Incorrect compileOptions and kotlinOptions Configuration (Mismatched Versions)
DESCRIPTION: This snippet shows an incorrect configuration where `compileOptions` and `kotlinOptions` have mismatched Java versions.  The `kotlinOptions.jvmTarget` should match the `compileOptions` versions for `sourceCompatibility` and `targetCompatibility` to ensure proper compatibility during compilation.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_12

LANGUAGE: Groovy
CODE:
```
// Not ok
compileOptions {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

kotlinOptions {
    jvmTarget = JavaVersion.VERSION_17.toString()
}
```

----------------------------------------

TITLE: Creating Flutter Module for Android Host App
DESCRIPTION: This snippet shows the command to create a Flutter module that will be used by an Android host application. It initializes a new Flutter module project in a sibling folder to the host app. Dependencies include Flutter SDK installed and available in the environment.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/pure_android_host_apps/android_host_app_v2_embedding/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ flutter create -t module hello
```

----------------------------------------

TITLE: Creating Flutter Module with CLI
DESCRIPTION: Command to generate a new Flutter module using Flutter's create command with module template
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/module_host_with_custom_build_v2_embedding/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
$ flutter create -t module hello
```

----------------------------------------

TITLE: Configuring Path-Based Dependency Overrides
DESCRIPTION: This command is used for creating path-based dependency overrides in Flutter packages when changing multiple federated plugins. The command targets the specified dependency packages that require modification. Tailored for use with the flutter_plugin_tools.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
$ dart run script/tool/bin/flutter_plugin_tools.dart make-deps-path-based --target-dependencies=video_player_platform_interface,video_player_android
```

----------------------------------------

TITLE: Defining Parameterized Message Function in Dart Localization Class
DESCRIPTION: Example of adding a new function with parameters to MaterialLocalizations class for localized strings.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/README.md#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
String aboutListTileTitle(String applicationName);
```

----------------------------------------

TITLE: Running Gradle to List Projects in Flutter Android Build
DESCRIPTION: This command displays the project structure of a Flutter app that uses Gradle for building. It shows the root project and its subprojects, which typically include the main app and any plugins. This requires executing the \'gradlew\' script from the Android directory in the Flutter project.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/How-Flutter-apps-are-compiled-with-Gradle-for-Android.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
$ ./gradlew projects

> Task :projects

------------------------------------------------------------
Root project
------------------------------------------------------------

Root project 'android'
+--- Project ':app'
+--- Project ':bar'
+--- Project ':baz'
\--- Project ':foo'
```

----------------------------------------

TITLE: Regenerating Mocks with Mockito
DESCRIPTION: This snippet outlines the command necessary to regenerate mocks for unit tests in Flutter packages using Mockito. The command utilizes the build_runner package and ensures any conflicting outputs are deleted in the process.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
$ dart run build_runner build --delete-conflicting-outputs
```

----------------------------------------

TITLE: Configuring Installation Rules for Flutter Windows
DESCRIPTION: Sets up installation rules for the Flutter application, including copying runtime dependencies, assets, and AOT library to the correct locations.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Running Custom Dart Analysis
DESCRIPTION: This snippet demonstrates how to run custom Dart analysis using Flutter plugin tools to identify deprecations in the codebase. It requires Dart SDK and Flutter plugin tools as dependencies. No parameters are needed, and it outputs a report of analysis results. Ensure `deprecated_member_use: ignore` is commented out in `analysis_options.yaml` before running.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Packages-Gardener-Rotation.md#2025-04-21_snippet_0

LANGUAGE: Dart
CODE:
```
dart run script/tool/bin/flutter_plugin_tools.dart analyze --custom-analysis=script/configs/custom_analysis.yaml
```

----------------------------------------

TITLE: Linking Dependencies and Including Directories for Flutter Windows Runner
DESCRIPTION: Links necessary libraries and includes directories for the Flutter Windows runner. This includes Flutter-specific dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_5

LANGUAGE: CMake
CODE:
```
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")
```

----------------------------------------

TITLE: Attaching with Specific Debug Port
DESCRIPTION: Command for attaching to a Flutter application when the VM Service port is known.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/attach.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ flutter attach --debug-port 12345
```

----------------------------------------

TITLE: Running Java Unit Tests with Robolectric and JUnit in Flutter
DESCRIPTION: A detailed guide for setting up unit tests for Java code using Robolectric 4.12.1 and JUnit 4 within the Flutter engine environment. The process involves creating test files, including them in the build, and running tests with specific commands. Dependencies include a properly set up Java environment and knowledge of both the Flutter engine structure and testing commands. The expected outcome is successfully executed tests with available console logs for debugging. Issues such as 'ClassNotFoundException' and import errors are addressed with references to additional resources.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/test/README.md#2025-04-21_snippet_0

LANGUAGE: Java
CODE:
```
# Unit testing Java code

All Java code in the engine should now be able to be tested with Robolectric 4.12.1
and JUnit 4. The test suite has been added after the bulk of the Java code was
first written, so most of these classes do not have existing tests. Ideally code
after this point should be tested, either with unit tests here or with
integration tests in other repos.

## Adding a new test

1. Create a file under `test/` matching the path and name of the class under
test. For example,
`shell/platform/android/io/flutter/util/Preconditions.java` ->
`shell/platform/android/**test**/io/flutter/util/Preconditions**Test**.java`.
2. Add your file to the `sources` of the `robolectric_tests` build target in
`/shell/platform/android/BUILD.gn`. This compiles the test class into the
test jar.
3. Import your test class and add it to the `@SuiteClasses` annotation in
`FlutterTestSuite.java`. This makes sure the test is actually executed at
run time.
4. Write your test.
5. Build and run with `testing/run_tests.py [--type=java] [--java-filter=<test_class_name>]`.

Example: from engine/src/flutter on a Mac
`et build -c android_debug_unopt_arm64`
`testing/run_tests.py --android-variant=android_debug_unopt_arm64 --type=java --java-filter=io.flutter.embedding.android.FlutterViewTest`

Note that `testing/run_tests.py` does not build the engine binaries; instead they
should be built prior to running this command and also when the source files
change. See [Compiling the engine](https://github.com/flutter/flutter/wiki/Compiling-the-engine)
for details on how to do so.

## Q&A

### My new test won't run. There's a "ClassNotFoundException".

See [Updating Embedding Dependencies](/tools/cipd/android_embedding_bundle).

### My new test won't compile. It can't find one of my imports.

See [Updating Embedding Dependencies](/tools/cipd/android_embedding_bundle).

### My test does not show log output in the console

Import `org.robolectric.shadows.ShadowLog;` then
Use `ShadowLog.stream = System.out;` in your test or setup method.

```

----------------------------------------

TITLE: Registering Platform View in AppDelegate for iOS Flutter App
DESCRIPTION: This snippet shows how to register the platform view in the AppDelegate of an iOS Flutter app. It initializes the view factory and registers it with the Flutter plugin registrar.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_9

LANGUAGE: objc
CODE:
```
#import "AppDelegate.h"
#import "FLNativeView.h"
#import "GeneratedPluginRegistrant.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application
    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
  [GeneratedPluginRegistrant registerWithRegistry:self];

   NSObject<FlutterPluginRegistrar>* registrar =
      [self registrarForPlugin:@"plugin-name"];

  FLNativeViewFactory* factory =
      [[FLNativeViewFactory alloc] initWithMessenger:registrar.messenger];
  [[self registrarForPlugin:@"<plugin-name>"] registerViewFactory:factory
                                                          withId:@"<platform-view-type>"];
  return [super application:application didFinishLaunchingWithOptions:launchOptions];
}

@end
```

----------------------------------------

TITLE: Installing Flutter Application Components for Windows
DESCRIPTION: Defines installation rules for the main application binary, ICU data file, Flutter library, and plugin libraries required for execution.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_7

LANGUAGE: CMake
CODE:
```
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

set(PLUGIN_BUNDLED_LIBRARIES)
if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Importing Supporting Flutter Packages
DESCRIPTION: Illustrates importing additional Flutter support libraries from separate packages. Shows importing testing utilities and file system access.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/docs/README.md#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
import 'package:flutter_test/flutter_test.dart';
import 'package:file/local.dart';
```

----------------------------------------

TITLE: Enabling XCTests or XCUITests in Flutter Plugin (Objective-C/Swift)
DESCRIPTION: This section provides step-by-step instructions to enable XCTests or XCUITests for a Flutter plugin, detailing necessary configurations and settings to ensure compatibility with Flutter. It includes setting up test bundles and configuring project settings.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_5

LANGUAGE: Markdown
CODE:
```
1. Open `<path_to_plugin>/example/ios/Runner.xcworkspace` using Xcode. (For macOS, replace `ios` with `macos`.)
1. Create a new "Unit Testing Bundle" or "UI Testing Bundle", depending on the type of test.
1. In the target options window, populate details as following, then click on "Finish".
    * In the "product name" field, type "RunnerTests" or "RunnerUITests", depending on the type of test.
    * In the "Team" field, select "None".
    * Set the Organization Identifier to "dev.flutter.plugins".
    * In the Language field, select "Objective-C" for iOS, or "Swift" for macOS.
    * In the Project field, select the xcodeproj "Runner" (blue color).
    * In the Target to be Tested, select xcworkspace "Runner" (white color).
    * In the Build Settings tab, remove most of the target-level overrides that are generated by the template. In particular:
        * `CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER` is currently incompatible with Flutter.
        * `IPHONEOS_DEPLOYMENT_TARGET` and `TARGETED_DEVICE_FAMILY` may cause issues running tests.
        * The compiler settings (`CLANG_*`, `GCC_*`, and `MTL_*`) shouldn't be needed.
1. Use of OCMock in new tests, especially Swift tests, is discouraged in favor of protocol-based programming and dependency injection. However, if your XCTests require OCMock, open the Package Dependencies section of the project in Xcode, and add the following dependency to the RunnerTests target:

   ```
   https://github.com/erikdoe/ocmock
   Commit fe1661a3efed11831a6452f4b1a0c5e6ddc08c3d
   ```
   OCMock must be set to Commit due to its use of unsafe build flags.
1. A RunnerTests/RunnerUITests folder should be created and you can start hacking in the added `.m`/`.swift` file.
```

----------------------------------------

TITLE: Linking Dependencies and Setting Include Directories - CMake
DESCRIPTION: This code snippet adds necessary dependencies and include directories for the Flutter application build. It ensures that the project can compile correctly by linking against the flutter and flutter_wrapper_app libraries, as well as any Windows-specific libraries like dwmapi.lib.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
# Add dependency libraries and include directories. Add any application-specific
# dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

```

----------------------------------------

TITLE: Setting Include Directories
DESCRIPTION: Configures the include directories for the target, ensuring that header files can be found during compilation. This adds the project source directory to the include path.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")
```

----------------------------------------

TITLE: Running Tests
DESCRIPTION: This command sequence runs tests for the project. It uses Dart's test runner to execute all `*_test.dart` files found in the directory structure.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
dart pub get
find -name "*_test.dart" | xargs -n 1 dart --enable-asserts
```

----------------------------------------

TITLE: Example Function Main for Dart
DESCRIPTION: This snippet illustrates how to structure a simple main function in Dart that calls functions with certain parameters, promoting clarity and independence from global state.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
// ... imports something that defines foo and bar ...

void main() {
  foo(1);
  bar(2);
}
```

----------------------------------------

TITLE: Gradle Settings Configuration for Flutter Plugin
DESCRIPTION: Standard Gradle settings file configuration for Flutter plugin examples, including flutter tooling import and artifact registry configuration
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/Plugins-and-Packages-repository-structure.md#2025-04-21_snippet_1

LANGUAGE: gradle
CODE:
```
// package/example/android/settings.gradle
// Imports flutter tooling and configures artifact registry
```

----------------------------------------

TITLE: Defining Build Configuration Options for Flutter Application
DESCRIPTION: Sets the default build type to 'Debug' if not otherwise specified. This section defines build configurations (Debug, Profile, Release) that control optimization levels.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
# Define build configuration options.
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()
```

----------------------------------------

TITLE: Using LocaleKeymap to get Logical Key in Dart
DESCRIPTION: This code snippet demonstrates how to use the `web_locale_keymap` package to get the logical key from a KeyboardEvent. It initializes a `LocaleKeymap` instance for Windows, Darwin, or Linux, and then uses its `getLogicalKey` method to retrieve the logical key based on the event's code, key, and keyCode properties. Fallback methods are included for dead keys, unprintable keys and numpad keys, and minting new logical keys.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_locale_keymap/README.md#_snippet_0

LANGUAGE: dart
CODE:
```
import 'package:web_locale_keymap/web_locale_keymap.dart' as locale_keymap;

final locale_keymap.LocaleKeymap mapping =
    locale_keymap.LocaleKeymap.win(); // Or .darwin() or .linux()

/* ... */

int getLogicalKey(html.KeyboardEvent event) {
  int? result = _convertToDeadKey(event)
             ?? _convertToUnprintableKey(event)
             ?? _convertToNumpadKey(event);
  if (result != null) {
    return result;
  }
  result = mapping.getLogicalKey(event.code, event.key, event.keyCode);
  if (result != null) {
    return result;
  }
  return _mintLogicalKey(event);
}
```

----------------------------------------

TITLE: Running Flutter Integration Test on iOS
DESCRIPTION: This shell script snippet initializes a Flutter application with the iOS platform and runs an integration test located at 'integration_test/app_test.dart'. The 'flutter create' command is used to set up the project while avoiding overwriting existing files. Following that, the 'flutter test' command executes the integration test to verify wide gamut color support functionality. This assumes that Flutter and necessary iOS development environments are pre-installed.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/wide_gamut_test/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
flutter create --platforms=\"ios\" --no-overwrite .\nflutter test integration_test/app_test.dart
```

----------------------------------------

TITLE: Optimizing Flutter Test for Comprehension - Improved Version
DESCRIPTION: This Flutter widget test shows the further optimized version that extracts the dialog declaration into its own statement to disambiguate the dialog being tested from the action of launching it.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
testWidgets('Title Section is empty, Button section is not empty.', (WidgetTester tester) async {
  final ScrollController scrollController = new ScrollController(keepScrollOffset: true);

  final Widget dialog = CupertinoAlertDialog(
    actions: const <Widget>[
      const CupertinoDialogAction(
        child: const Text('One'),
      ),
      const CupertinoDialogAction(
        child: const Text('Two'),
      ),
    ],
    actionScrollController: scrollController,
  );

  await _launchDialog(dialog);

  // Check that the title/message section is not displayed
  expect(scrollController.offset, 0.0);
  expect(tester.getTopLeft(find.widgetWithText(CupertinoDialogAction, 'One')).dy, equals(283.5));

  // Check that the button's vertical size is the same.
  expect(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'One')).height,
    equals(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'Two')).height));
});
```

----------------------------------------

TITLE: Updating all Flutter dependencies
DESCRIPTION: This command updates all dependencies in the `pubspec.yaml` file to the latest versions, overriding any existing constraints. The `--force-upgrade` flag ensures that all dependencies are updated, even if they are already at a compatible version.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Updating-dependencies-in-Flutter.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
`flutter update-packages --force-upgrade`
```

----------------------------------------

TITLE: AndroidManifest XML Configuration Update
DESCRIPTION: Shows changes to AndroidManifest.xml for the new Flutter embedding, including application name and metadata configurations
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_3

LANGUAGE: xml
CODE:
```
<!-- Previous Configuration -->
<application
  android:name="io.flutter.app.FlutterApplication"
  >
  <!-- code omitted -->
</application>

<!-- New Configuration -->
<application
  android:name="${applicationName}"
  >
  <!-- Add Flutter embedding metadata -->
  <meta-data
    android:name="flutterEmbedding"
    android:value="2" />
  <!-- code omitted -->
</application>
```

----------------------------------------

TITLE: Opening Flutter iOS Project in Xcode
DESCRIPTION: This command opens the Flutter project's Xcode workspace, allowing developers to access and modify the iOS-specific assets and configurations.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_app_with_extensions/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
`open ios/Runner.xcworkspace`
```

----------------------------------------

TITLE: Custom Android FrameLayout for Texture Layer Hybrid Composition
DESCRIPTION: A custom FrameLayout implementation that redirects drawing to a Flutter Texture for platform view rendering in Android
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Texture-Layer-Hybrid-Composition.md#2025-04-21_snippet_0

LANGUAGE: java
CODE:
```
public class PlatformViewWrapper extends FrameLayout {
    // Custom FrameLayout implementation
    // Redirects drawing to canvas backing Flutter Texture
}
```

----------------------------------------

TITLE: Example Assumptions Declaration in Dart
DESCRIPTION: Shows how to declare context and variables that can be assumed in code examples without displaying them in the documentation
SOURCE: https://github.com/flutter/flutter/blob/master/dev/snippets/README.md#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
// Examples can assume:
// final BuildContext context;
// final String userAvatarUrl;
```

----------------------------------------

TITLE: Demonstrating Comment Practices in Dart
DESCRIPTION: This snippet illustrates good and bad practices for writing comments in Dart code, particularly for TODOs and workarounds.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_16

LANGUAGE: dart
CODE:
```
// BAD:

// What should this be?

// This is a workaround.


// GOOD:

// According to this specification, this should be 2.0, but according to that
// specification, it should be 3.0. We split the difference and went with
// 2.5, because we didn't know what else to do.

// TODO(username): Converting color to RGB because class Color doesn't support
//                 hex yet. See http://link/to/a/bug/123
```

----------------------------------------

TITLE: Illustrating Bad Test Naming in Flutter
DESCRIPTION: These examples demonstrate poor test naming practices in Flutter, where tests are named after the object under test rather than the behavior, providing little to no value to the reader.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
// Bad test name
test('ListView', () {...});

// Bad test name
test('RenderViewport', () {...});

// etc.
```

----------------------------------------

TITLE: Cloning Flutter Repository
DESCRIPTION: Cloning the Flutter Git repository from the master branch into a local directory.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git clone -b master https://github.com/flutter/flutter.git
```

----------------------------------------

TITLE: Commenting Empty setState Closures in Dart
DESCRIPTION: This example demonstrates how to properly comment an empty setState closure in Dart, explaining the state change that occurred elsewhere.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_18

LANGUAGE: dart
CODE:
```
  setState(() {
    // The animation ticked. We use the animation's value in the build method.
  });
```

----------------------------------------

TITLE: Executing Integration Tests for Flutter Plugin
DESCRIPTION: Instructions to execute integration tests located in the example directory of a Flutter plugin. It includes an optional device selection flag for targeting a device during testing.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
cd example
flutter test integration_test
```

----------------------------------------

TITLE: Migrating MainActivity Java Code - Simple Case
DESCRIPTION: Updates MainActivity for the new Flutter Android embedding by removing manual plugin registration and updating import statements
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_0

LANGUAGE: java
CODE:
```
// MainActivity.java
-import android.os.Bundle;
-import io.flutter.app.FlutterActivity;
+import io.flutter.embedding.android.FlutterActivity;
-import io.flutter.plugins.GeneratedPluginRegistrant;

public class MainActivity extends FlutterActivity {
-  @Override
-  protected void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    GeneratedPluginRegistrant.registerWith(this);
-  }
}
```

----------------------------------------

TITLE: Migrating FlutterActivity in Java (New Embedding)
DESCRIPTION: Updated example of a FlutterActivity subclass using the new stable Android embedding. This code demonstrates the simplified structure, removing the need for explicit plugin registration.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_6

LANGUAGE: java
CODE:
```
package [your.package.name];

import io.flutter.embedding.android.FlutterActivity;

public class MainActivity extends FlutterActivity {
  // You do not need to override onCreate() in order to invoke
  // GeneratedPluginRegistrant. Flutter now does that on your behalf.

  // ...retain whatever custom code you had from before (if any).
}
```

----------------------------------------

TITLE: Disabling Windows Macros Conflicting with C++ Standard Library
DESCRIPTION: Disables Windows macros that may collide with C++ standard library functions by defining NOMINMAX.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_4

LANGUAGE: CMake
CODE:
```
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")
```

----------------------------------------

TITLE: Updating Flutter packages
DESCRIPTION: This command recursively fetches all the Dart packages that Flutter depends on. This ensures that the Flutter project has all the necessary dependencies for building and running applications.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_10

LANGUAGE: bash
CODE:
```
"flutter update-packages"
```

----------------------------------------

TITLE: Dart Parameter Referencing Example
DESCRIPTION: Demonstrates the correct way to reference parameters in Dart documentation. Uses backticks for regular parameters and square brackets for parameters that are also properties, addressing Dartdoc issue 1486.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_8

LANGUAGE: dart
CODE:
```
// GOOD

  /// Creates a foobar, which allows a baz to quux the bar.
  ///
  /// The [bar] argument must not be null.
  ///
  /// The `baz` argument must be greater than zero.
  Foo({ this.bar, int baz }) : assert(bar != null), assert(baz > 0);
```

----------------------------------------

TITLE: Setting Minimum CMake Version
DESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.10)
```

----------------------------------------

TITLE: Running iOS Integration Tests Locally
DESCRIPTION: This command demonstrates how to run the built iOS integration tests on a local device. It uses xcodebuild to execute the tests without rebuilding the app.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_10

LANGUAGE: sh
CODE:
```
xcodebuild test-without-building \
  -xctestrun "build/ios_integ/Build/Products/Runner_*.xctestrun" \
  -destination id=<YOUR_DEVICE_ID>
```

----------------------------------------

TITLE: Configuring Launch Screen Assets in Xcode
DESCRIPTION: Method to replace launch screen images by opening iOS Xcode project and modifying Assets.xcassets
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
open ios/Runner.xcworkspace
```

----------------------------------------

TITLE: Starting Chromedriver for Web Integration Tests in Flutter
DESCRIPTION: This command starts Chromedriver on port 8444, which is necessary for running integration tests on the web platform. Chromedriver needs to be downloaded separately and run before executing the tests.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/example/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
chromedriver --port 8444
```

----------------------------------------

TITLE: Flutter Linux System Dependencies Configuration
DESCRIPTION: Sets up required system-level package dependencies for GTK, GLIB, and GIO using pkg-config.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)
```

----------------------------------------

TITLE: Opening Xcode Workspace for Flutter iOS Project
DESCRIPTION: Command to open the Flutter project's Xcode workspace for configuring launch screen assets through the Xcode interface.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
open ios/Runner.xcworkspace
```

----------------------------------------

TITLE: Running Flutter API Example in Chrome
DESCRIPTION: This command demonstrates how to run a specific Flutter API example in Chrome from the command line.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
% flutter run -d chrome lib/animation/curves/curve2_d.0.dart
```

----------------------------------------

TITLE: Setting targetSdk with specific API level
DESCRIPTION: This snippet demonstrates setting the `targetSdk` to a specific API level (35) when `flutter.compileSdkVersion` is not available, such as in an 'add to app' scenario. This demonstrates an acceptable case.  Always make sure the target SDK is compatible with the compile SDK.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_4

LANGUAGE: Groovy
CODE:
```
// OK if flutter.compileSdkVersion is not available like in an add to app example.
defaultConfig {
  targetSdk = 35
}
```

----------------------------------------

TITLE: Flutter Tool Backend Integration in CMake
DESCRIPTION: Creates a custom command that runs the Flutter tool backend script to generate the necessary Flutter library and headers. Uses a phony output to ensure the command runs every time to handle dynamic Flutter tool outputs.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)
```

----------------------------------------

TITLE: Running Flutter Release Mode Tests via Command Line
DESCRIPTION: Command to execute the release-mode tests from the command line by using the dart.vm.product flag to simulate release mode conditions.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test_release/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
flutter test --dart-define=dart.vm.product=true test_release/
```

----------------------------------------

TITLE: Creating Flutter Wrapper Libraries
DESCRIPTION: Configures static libraries for Flutter wrapper sources, including core, plugin, and app-specific implementations
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)
add_library(flutter_wrapper_app STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_APP}
)
```

----------------------------------------

TITLE: Adding Flutter Assemble Dependency for Windows Runner
DESCRIPTION: Adds a dependency on the flutter_assemble target to ensure Flutter tool portions of the build are executed.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_6

LANGUAGE: CMake
CODE:
```
add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: iOS Podfile Configuration
DESCRIPTION: Ruby configuration for iOS test target in Podfile
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_8

LANGUAGE: ruby
CODE:
```
target 'Runner' do
  # Do not change existing lines.
  ...

  target 'RunnerTests' do
    inherit! :search_paths
  end
end
```

----------------------------------------

TITLE: Screenshot Driver Implementation
DESCRIPTION: Driver script for handling screenshots in integration tests
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
import 'dart:io';
import 'package:integration_test/integration_test_driver_extended.dart';

Future<void> main() async {
  await integrationDriver(
    onScreenshot: (String screenshotName, List<int> screenshotBytes, [Map<String, Object?>? args]) async {
      final File image = File('$screenshotName.png');
      image.writeAsBytesSync(screenshotBytes);
      // Return false if the screenshot is invalid.
      return true;
    },
  );
}
```

----------------------------------------

TITLE: Building Flutter iOS Integration Tests
DESCRIPTION: This snippet shows how to build iOS integration tests for a Flutter project. It includes steps for building the app and generating test artifacts using xcodebuild.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_9

LANGUAGE: sh
CODE:
```
# Pass --simulator if building for the simulator.
flutter build ios integration_test/foo_test.dart --release

pushd ios
xcodebuild build-for-testing \
  -workspace Runner.xcworkspace \
  -scheme Runner \
  -xcconfig Flutter/Release.xcconfig \
  -configuration Release \
  -derivedDataPath \
  $output -sdk iphoneos
popd

pushd $product
find . -name "Runner_*.xctestrun" -exec zip -r --must-match "ios_tests.zip" "Release-iphoneos" {} +
popd
```

----------------------------------------

TITLE: Deploying iOS Tests to Firebase Test Lab
DESCRIPTION: This command uploads the iOS integration test artifacts to Firebase Test Lab for cloud testing. It specifies the test package and device configuration for the test run.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_11

LANGUAGE: sh
CODE:
```
gcloud firebase test ios run \
  --test "build/ios_integ/Build/Products/ios_tests.zip" \
  --device model=iphone11pro,version=14.1,locale=fr_FR,orientation=portrait
```

----------------------------------------

TITLE: Creating Flutter Wrapper Libraries in CMake
DESCRIPTION: Defines and configures two static libraries: flutter_wrapper_plugin for plugins and flutter_wrapper_app for the runner. These libraries include core implementations and specific functionalities for plugins and the main app.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# Wrapper sources needed for a plugin.
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)
apply_standard_settings(flutter_wrapper_plugin)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  POSITION_INDEPENDENT_CODE ON)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  CXX_VISIBILITY_PRESET hidden)
target_link_libraries(flutter_wrapper_plugin PUBLIC flutter)
target_include_directories(flutter_wrapper_plugin PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_plugin flutter_assemble)

# Wrapper sources needed for the runner.
add_library(flutter_wrapper_app STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_APP}
)
apply_standard_settings(flutter_wrapper_app)
target_link_libraries(flutter_wrapper_app PUBLIC flutter)
target_include_directories(flutter_wrapper_app PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_app flutter_assemble)
```

----------------------------------------

TITLE: CMake Installation Process for Flutter Gallery
DESCRIPTION: Defines the installation process for the Flutter Gallery application. It specifies where binaries and resources are copied within the build system. The snippet also handles the separate installation of plugin libraries and asset directories to ensure all required components are included. This setup facilitates running the application directly from Visual Studio.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
# === Installation ===
# Support files are copied into place next to the executable, so that it can
# run in place. This is done instead of making a separate bundle (as on Linux)
# so that building and running from within Visual Studio will work.
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
# Make the "install" step default, as it's required to run.
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE "${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  CONFIGURATIONS Profile;Release
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Adding GPG Key Hash to Git Configuration
DESCRIPTION: This command sets the user signing key in the global Git configuration using the hash of the desired GPG key. It resolves signing errors by explicitly assigning the correct key hash for signing commits.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Signing-commits.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
git config --global user.signingkey XYZ
```

----------------------------------------

TITLE: Setting Default Build Type for Flutter Project in CMake
DESCRIPTION: Configures the default build type to 'Debug' if not specified, and sets available build types to Debug, Profile, and Release.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: CMake
CODE:
```
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()
```

----------------------------------------

TITLE: Including Flutter Libraries and Tools in CMake
DESCRIPTION: Sets up Flutter library paths and includes plugin build rules by adding Flutter managed directory and generated plugins configuration.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# Application build; see runner/CMakeLists.txt.
add_subdirectory("runner")

# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)
```

----------------------------------------

TITLE: Handling Varying Branches in GLSL Fragment Shader
DESCRIPTION: This GLSL snippet demonstrates how branching logic impacts performance in shaders on different GPU architectures. It shows a fragment shader that decides whether to perform an expensive operation based on the alpha component of a color vector. On SIMT architectures, branching costs are lower if the condition is true across all threads, whereas for VLIW/SIMD architectures, parallel instruction execution is hindered.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_2

LANGUAGE: GLSL
CODE:
```
in vec4 color;
out vec4 frag_color;

void main() {
  vec4 result;

  if (color.a == 0) {
    result = vec4(0);
  } else {
    result = DoExtremelyExpensiveThing(color);
  }

  frag_color = result;
}
```

----------------------------------------

TITLE: Enabling Impeller OpenGL Backend on Android
DESCRIPTION: XML configuration to enable Impeller with OpenGL backend on Android by adding a meta-data tag to the AndroidManifest.xml file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/README.md#2025-04-21_snippet_3

LANGUAGE: xml
CODE:
```
<meta-data
  android:name="io.flutter.embedding.android.ImpellerBackend"
  android:value="opengles" />
```

----------------------------------------

TITLE: Running Formatters on Changed Files
DESCRIPTION: This snippet shows how to run formatters on changed files in the source code to ensure code quality and consistency. The tool automatically determines which files need formatting.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
et format
```

----------------------------------------

TITLE: Project-Level Configuration with CMake
DESCRIPTION: This CMake configuration sets up the project 'a11y_assessments' with settings for different build modes like Debug, Profile, and Release. It declares the binary name and opts into modern CMake policies to minimize warnings. Key dependencies include CMake version 3.14 or higher, and the CMake toolset's compliance with these configurations. Inputs expected are varying build modes and outputs are configured build environments.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
# Project-level configuration.
cmake_minimum_required(VERSION 3.14)
project(a11y_assessments LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "a11y_assessments")

# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(VERSION 3.14...3.25)
```

----------------------------------------

TITLE: Configuring Flutter Dependencies and Include Directories
DESCRIPTION: Sets up the linkage with Flutter libraries and configures include directories for the application build.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/runner/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")
```

----------------------------------------

TITLE: Defining Unicode ALetter Properties for Various Scripts
DESCRIPTION: This code snippet defines Unicode code point ranges and their corresponding ALetter property assignments for multiple scripts. It includes definitions for Telugu, Kannada, Malayalam, Sinhala, Tibetan, Georgian, Hangul, Ethiopic, Cherokee, and other writing systems.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_8

LANGUAGE: Unicode
CODE:
```
0C05..0C0C    ; ALetter # Lo   [8] TELUGU LETTER A..TELUGU LETTER VOCALIC L
0C0E..0C10    ; ALetter # Lo   [3] TELUGU LETTER E..TELUGU LETTER AI
0C12..0C28    ; ALetter # Lo  [23] TELUGU LETTER O..TELUGU LETTER NA
0C2A..0C39    ; ALetter # Lo  [16] TELUGU LETTER PA..TELUGU LETTER HA
0C3D          ; ALetter # Lo       TELUGU SIGN AVAGRAHA
0C58..0C5A    ; ALetter # Lo   [3] TELUGU LETTER TSA..TELUGU LETTER RRRA
0C60..0C61    ; ALetter # Lo   [2] TELUGU LETTER VOCALIC RR..TELUGU LETTER VOCALIC LL
0C80          ; ALetter # Lo       KANNADA SIGN SPACING CANDRABINDU
0C85..0C8C    ; ALetter # Lo   [8] KANNADA LETTER A..KANNADA LETTER VOCALIC L
0C8E..0C90    ; ALetter # Lo   [3] KANNADA LETTER E..KANNADA LETTER AI
0C92..0CA8    ; ALetter # Lo  [23] KANNADA LETTER O..KANNADA LETTER NA
0CAA..0CB3    ; ALetter # Lo  [10] KANNADA LETTER PA..KANNADA LETTER LLA
0CB5..0CB9    ; ALetter # Lo   [5] KANNADA LETTER VA..KANNADA LETTER HA
0CBD          ; ALetter # Lo       KANNADA SIGN AVAGRAHA
0CDE          ; ALetter # Lo       KANNADA LETTER FA
0CE0..0CE1    ; ALetter # Lo   [2] KANNADA LETTER VOCALIC RR..KANNADA LETTER VOCALIC LL
0CF1..0CF2    ; ALetter # Lo   [2] KANNADA SIGN JIHVAMULIYA..KANNADA SIGN UPADHMANIYA
0D04..0D0C    ; ALetter # Lo   [9] MALAYALAM LETTER VEDIC ANUSVARA..MALAYALAM LETTER VOCALIC L
0D0E..0D10    ; ALetter # Lo   [3] MALAYALAM LETTER E..MALAYALAM LETTER AI
0D12..0D3A    ; ALetter # Lo  [41] MALAYALAM LETTER O..MALAYALAM LETTER TTTA
0D3D          ; ALetter # Lo       MALAYALAM SIGN AVAGRAHA
0D4E          ; ALetter # Lo       MALAYALAM LETTER DOT REPH
0D54..0D56    ; ALetter # Lo   [3] MALAYALAM LETTER CHILLU M..MALAYALAM LETTER CHILLU LLL
0D5F..0D61    ; ALetter # Lo   [3] MALAYALAM LETTER ARCHAIC II..MALAYALAM LETTER VOCALIC LL
0D7A..0D7F    ; ALetter # Lo   [6] MALAYALAM LETTER CHILLU NN..MALAYALAM LETTER CHILLU K
0D85..0D96    ; ALetter # Lo  [18] SINHALA LETTER AYANNA..SINHALA LETTER AUYANNA
0D9A..0DB1    ; ALetter # Lo  [24] SINHALA LETTER ALPAPRAANA KAYANNA..SINHALA LETTER DANTAJA NAYANNA
0DB3..0DBB    ; ALetter # Lo   [9] SINHALA LETTER SANYAKA DAYANNA..SINHALA LETTER RAYANNA
0DBD          ; ALetter # Lo       SINHALA LETTER DANTAJA LAYANNA
0DC0..0DC6    ; ALetter # Lo   [7] SINHALA LETTER VAYANNA..SINHALA LETTER FAYANNA
0F00          ; ALetter # Lo       TIBETAN SYLLABLE OM
0F40..0F47    ; ALetter # Lo   [8] TIBETAN LETTER KA..TIBETAN LETTER JA
0F49..0F6C    ; ALetter # Lo  [36] TIBETAN LETTER NYA..TIBETAN LETTER RRA
0F88..0F8C    ; ALetter # Lo   [5] TIBETAN SIGN LCE TSA CAN..TIBETAN SIGN INVERTED MCHU CAN
10A0..10C5    ; ALetter # L&  [38] GEORGIAN CAPITAL LETTER AN..GEORGIAN CAPITAL LETTER HOE
10C7          ; ALetter # L&       GEORGIAN CAPITAL LETTER YN
10CD          ; ALetter # L&       GEORGIAN CAPITAL LETTER AEN
10D0..10FA    ; ALetter # L&  [43] GEORGIAN LETTER AN..GEORGIAN LETTER AIN
10FC          ; ALetter # Lm       MODIFIER LETTER GEORGIAN NAR
10FD..10FF    ; ALetter # L&   [3] GEORGIAN LETTER AEN..GEORGIAN LETTER LABIAL SIGN
1100..1248    ; ALetter # Lo [329] HANGUL CHOSEONG KIYEOK..ETHIOPIC SYLLABLE QWA
124A..124D    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE QWI..ETHIOPIC SYLLABLE QWE
1250..1256    ; ALetter # Lo   [7] ETHIOPIC SYLLABLE QHA..ETHIOPIC SYLLABLE QHO
1258          ; ALetter # Lo       ETHIOPIC SYLLABLE QHWA
125A..125D    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE QHWI..ETHIOPIC SYLLABLE QHWE
1260..1288    ; ALetter # Lo  [41] ETHIOPIC SYLLABLE BA..ETHIOPIC SYLLABLE XWA
128A..128D    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE XWI..ETHIOPIC SYLLABLE XWE
1290..12B0    ; ALetter # Lo  [33] ETHIOPIC SYLLABLE NA..ETHIOPIC SYLLABLE KWA
12B2..12B5    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE KWI..ETHIOPIC SYLLABLE KWE
12B8..12BE    ; ALetter # Lo   [7] ETHIOPIC SYLLABLE KXA..ETHIOPIC SYLLABLE KXO
12C0          ; ALetter # Lo       ETHIOPIC SYLLABLE KXWA
12C2..12C5    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE KXWI..ETHIOPIC SYLLABLE KXWE
12C8..12D6    ; ALetter # Lo  [15] ETHIOPIC SYLLABLE WA..ETHIOPIC SYLLABLE PHARYNGEAL O
12D8..1310    ; ALetter # Lo  [57] ETHIOPIC SYLLABLE ZA..ETHIOPIC SYLLABLE GWA
1312..1315    ; ALetter # Lo   [4] ETHIOPIC SYLLABLE GWI..ETHIOPIC SYLLABLE GWE
1318..135A    ; ALetter # Lo  [67] ETHIOPIC SYLLABLE GGA..ETHIOPIC SYLLABLE FYA
1380..138F    ; ALetter # Lo  [16] ETHIOPIC SYLLABLE SEBATBEIT MWA..ETHIOPIC SYLLABLE PWE
13A0..13F5    ; ALetter # L&  [86] CHEROKEE LETTER A..CHEROKEE LETTER MV
13F8..13FD    ; ALetter # L&   [6] CHEROKEE SMALL LETTER YE..CHEROKEE SMALL LETTER MV
1401..166C    ; ALetter # Lo [620] CANADIAN SYLLABICS E..CANADIAN SYLLABICS CARRIER TTSA
166F..167F    ; ALetter # Lo  [17] CANADIAN SYLLABICS QAI..CANADIAN SYLLABICS BLACKFOOT W
1681..169A    ; ALetter # Lo  [26] OGHAM LETTER BEITH..OGHAM LETTER PEITH
16A0..16EA    ; ALetter # Lo  [75] RUNIC LETTER FEHU FEOH FE F..RUNIC LETTER X
16EE..16F0    ; ALetter # Nl   [3] RUNIC ARLAUG SYMBOL..RUNIC BELGTHOR SYMBOL
16F1..16F8    ; ALetter # Lo   [8] RUNIC LETTER K..RUNIC LETTER FRANKS CASKET AESC
1700..170C    ; ALetter # Lo  [13] TAGALOG LETTER A..TAGALOG LETTER YA
170E..1711    ; ALetter # Lo   [4] TAGALOG LETTER LA..TAGALOG LETTER HA
1720..1731    ; ALetter # Lo  [18] HANUNOO LETTER A..HANUNOO LETTER HA
1740..1751    ; ALetter # Lo  [18] BUHID LETTER A..BUHID LETTER HA
1760..176C    ; ALetter # Lo  [13] TAGBANWA LETTER A..TAGBANWA LETTER YA
176E..1770    ; ALetter # Lo   [3] TAGBANWA LETTER LA..TAGBANWA LETTER SA
1820..1842    ; ALetter # Lo  [35] MONGOLIAN LETTER A..MONGOLIAN LETTER CHI
1843          ; ALetter # Lm       MONGOLIAN LETTER TODO LONG VOWEL SIGN
1844..1878    ; ALetter # Lo  [53] MONGOLIAN LETTER TODO E..MONGOLIAN LETTER CHA WITH TWO DOTS
1880..1884    ; ALetter # Lo   [5] MONGOLIAN LETTER ALI GALI ANUSVARA ONE..MONGOLIAN LETTER ALI GALI INVERTED UBADAMA
1887..18A8    ; ALetter # Lo  [34] MONGOLIAN LETTER ALI GALI A..MONGOLIAN LETTER MANCHU ALI GALI BHA
18AA          ; ALetter # Lo       MONGOLIAN LETTER MANCHU ALI GALI LHA
18B0..18F5    ; ALetter # Lo  [70] CANADIAN SYLLABICS OY..CANADIAN SYLLABICS CARRIER DENTAL S
1900..191E    ; ALetter # Lo  [31] LIMBU VOWEL-CARRIER LETTER..LIMBU LETTER TRA
1A00..1A16    ; ALetter # Lo  [23] BUGINESE LETTER KA..BUGINESE LETTER HA
1B05..1B33    ; ALetter # Lo  [47] BALINESE LETTER AKARA..BALINESE LETTER HA
1B45..1B4B    ; ALetter # Lo   [7] BALINESE LETTER KAF SASAK..BALINESE LETTER ASYURA SASAK
1B83..1BA0    ; ALetter # Lo  [30] SUNDANESE LETTER A..SUNDANESE LETTER HA
1BAE..1BAF    ; ALetter # Lo   [2] SUNDANESE LETTER KHA..SUNDANESE LETTER SYA
1BBA..1BE5    ; ALetter # Lo  [44] SUNDANESE AVAGRAHA..BATAK LETTER U
1C00..1C23    ; ALetter # Lo  [36] LEPCHA LETTER KA..LEPCHA LETTER A
1C4D..1C4F    ; ALetter # Lo   [3] LEPCHA LETTER TTA..LEPCHA LETTER DDA
1C5A..1C77    ; ALetter # Lo  [30] OL CHIKI LETTER LA..OL CHIKI LETTER OH
1C78..1C7D    ; ALetter # Lm   [6] OL CHIKI MU TTUDDAG..OL CHIKI AHAD
1C80..1C88    ; ALetter # L&   [9] CYRILLIC SMALL LETTER ROUNDED VE..CYRILLIC SMALL LETTER UNBLENDED UK
1C90..1CBA    ; ALetter # L&  [43] GEORGIAN MTAVRULI CAPITAL LETTER AN..GEORGIAN MTAVRULI CAPITAL LETTER AIN
1CBD..1CBF    ; ALetter # L&   [3] GEORGIAN MTAVRULI CAPITAL LETTER AEN..GEORGIAN MTAVRULI CAPITAL LETTER LABIAL SIGN
1CE9..1CEC    ; ALetter # Lo   [4] VEDIC SIGN ANUSVARA ANTARGOMUKHA..VEDIC SIGN ANUSVARA VAMAGOMUKHA WITH TAIL
1CEE..1CF3    ; ALetter # Lo   [6] VEDIC SIGN HEXIFORM LONG ANUSVARA..VEDIC SIGN ROTATED ARDHAVISARGA
1CF5..1CF6    ; ALetter # Lo   [2] VEDIC SIGN JIHVAMULIYA..VEDIC SIGN UPADHMANIYA
1CFA          ; ALetter # Lo       VEDIC SIGN DOUBLE ANUSVARA ANTARGOMUKHA
1D00..1D2B    ; ALetter # L&  [44] LATIN LETTER SMALL CAPITAL A..CYRILLIC LETTER SMALL CAPITAL EL
1D2C..1D6A    ; ALetter # Lm  [63] MODIFIER LETTER CAPITAL A..GREEK SUBSCRIPT SMALL LETTER CHI
1D6B..1D77    ; ALetter # L&  [13] LATIN SMALL LETTER UE..LATIN SMALL LETTER TURNED G
1D78          ; ALetter # Lm       MODIFIER LETTER CYRILLIC EN
1D79..1D9A    ; ALetter # L&  [34] LATIN SMALL LETTER INSULAR G..LATIN SMALL LETTER EZH WITH RETROFLEX HOOK
1D9B..1DBF    ; ALetter # Lm  [37] MODIFIER LETTER SMALL TURNED ALPHA..MODIFIER LETTER SMALL THETA
1E00..1F15    ; ALetter # L& [278] LATIN CAPITAL LETTER A WITH RING BELOW..GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA
1F18..1F1D    ; ALetter # L&   [6] GREEK CAPITAL LETTER EPSILON WITH PSILI..GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA
1F20..1F45    ; ALetter # L&  [38] GREEK SMALL LETTER ETA WITH PSILI..GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA
1F48..1F4D    ; ALetter # L&   [6] GREEK CAPITAL LETTER OMICRON WITH PSILI..GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA
1F50..1F57    ; ALetter # L&   [8] GREEK SMALL LETTER UPSILON WITH PSILI..GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI
1F59          ; ALetter # L&       GREEK CAPITAL LETTER UPSILON WITH DASIA
1F5B          ; ALetter # L&       GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA
1F5D          ; ALetter # L&       GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA
1F5F..1F7D    ; ALetter # L&  [31] GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI..GREEK SMALL LETTER OMEGA WITH OXIA
1F80..1FB4    ; ALetter # L&  [53] GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI..GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI
1FB6..1FBC    ; ALetter # L&   [7] GREEK SMALL LETTER ALPHA WITH PERISPOMENI..GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI
1FBE          ; ALetter # L&       GREEK PROSGEGRAMMENI
1FC2..1FC4    ; ALetter # L&   [3] GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI..GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI
1FC6..1FCC    ; ALetter # L&   [7] GREEK SMALL LETTER ETA WITH PERISPOMENI..GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI
1FD0..1FD3    ; ALetter # L&   [4] GREEK SMALL LETTER IOTA WITH VRACHY..GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA
1FD6..1FDB    ; ALetter # L&   [6] GREEK SMALL LETTER IOTA WITH PERISPOMENI..GREEK CAPITAL LETTER IOTA WITH OXIA
```

----------------------------------------

TITLE: Build Configuration and Multi-Configuration Support
DESCRIPTION: Configures build types including Debug, Profile, and Release modes with support for multi-configuration generators
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
```

----------------------------------------

TITLE: Android Gradle Configuration
DESCRIPTION: Gradle configuration for Android instrumentation testing
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_6

LANGUAGE: gradle
CODE:
```
android {
  ...
  defaultConfig {
    ...
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }
}

dependencies {
    testImplementation 'junit:junit:4.12'

    // https://developer.android.com/jetpack/androidx/releases/test/#1.2.0
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
```

----------------------------------------

TITLE: Installing Rosetta 2 for Flutter Development on macOS
DESCRIPTION: This snippet demonstrates how to install Rosetta 2, which is necessary for running x86 applications on Apple Silicon Macs. The command should be run in the terminal and will agree to the license automatically.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/desktop/macos/Developing-with-Flutter-on-Apple-Silicon.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
"sudo softwareupdate --install-rosetta --agree-to-license"
```

----------------------------------------

TITLE: Defining Format Character Ranges in Unicode
DESCRIPTION: Lists the Unicode code points for Format category (Cf) characters. Includes various control characters like soft hyphen, directional marks, joiners, and separators. The list shows individual code points and ranges with descriptions and totals 62 code points.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_5

LANGUAGE: unicode
CODE:
```
00AD          ; Format # Cf       SOFT HYPHEN
0600..0605    ; Format # Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE
061C          ; Format # Cf       ARABIC LETTER MARK
06DD          ; Format # Cf       ARABIC END OF AYAH
070F          ; Format # Cf       SYRIAC ABBREVIATION MARK
08E2          ; Format # Cf       ARABIC DISPUTED END OF AYAH
180E          ; Format # Cf       MONGOLIAN VOWEL SEPARATOR
200E..200F    ; Format # Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK
202A..202E    ; Format # Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE
2060..2064    ; Format # Cf   [5] WORD JOINER..INVISIBLE PLUS
2066..206F    ; Format # Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES
FEFF          ; Format # Cf       ZERO WIDTH NO-BREAK SPACE
FFF9..FFFB    ; Format # Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR
110BD         ; Format # Cf       KAITHI NUMBER SIGN
110CD         ; Format # Cf       KAITHI NUMBER SIGN ABOVE
13430..13438  ; Format # Cf   [9] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END SEGMENT
1BCA0..1BCA3  ; Format # Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP
1D173..1D17A  ; Format # Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE
E0001         ; Format # Cf       LANGUAGE TAG

# Total code points: 62
```

----------------------------------------

TITLE: Installing Flutter Application Components in CMake
DESCRIPTION: Defines installation rules for the application binary and required Flutter files. This ensures the executable, ICU data file, and Flutter library are installed to the correct locations.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_10

LANGUAGE: CMake
CODE:
```
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Including Generated Plugin Build Rules for Flutter Linux
DESCRIPTION: Includes the automatically generated plugin build rules for the Flutter application. This ensures all plugins are properly built and added to the application.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_8

LANGUAGE: CMake
CODE:
```
# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)
```

----------------------------------------

TITLE: Cloning Flutter repository using HTTPS
DESCRIPTION: This command clones the flutter/flutter repository using HTTPS. This method can be used as an alternative if SSH is not configured or accessible.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
"git clone https://github.com/flutter/flutter.git"
```

----------------------------------------

TITLE: Linking Libraries and Adding Include Directories
DESCRIPTION: This snippet links the `flutter` and `flutter_wrapper_app` libraries to the executable, and adds the CMake source directory as an include directory.  This ensures that the necessary Flutter components are linked and that the compiler can find necessary header files.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: cmake
CODE:
```
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")
```

----------------------------------------

TITLE: Advanced MainActivity Java Method Channel Migration
DESCRIPTION: Demonstrates how to update custom platform channel handling to use the new Flutter embedding API with method channel registration
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_2

LANGUAGE: java
CODE:
```
-import io.flutter.app.FlutterActivity;
-import io.flutter.plugin.common.MethodCall;
+import androidx.annotation.NonNull;
+import io.flutter.embedding.android.FlutterActivity;
+import io.flutter.embedding.engine.FlutterEngine;
 import io.flutter.plugin.common.MethodChannel;
-import io.flutter.plugin.common.MethodChannel.MethodCallHandler;
-import io.flutter.plugin.common.MethodChannel.Result;
+import io.flutter.plugins.GeneratedPluginRegistrant;

public class MainActivity extends FlutterActivity {
    private static final String CHANNEL = "samples.flutter.dev/battery";

-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        GeneratedPluginRegistrant.registerWith(this);
-        new MethodChannel(getFlutterView(), CHANNEL).setMethodCallHandler(
-                new MethodCallHandler() {
-                    @Override
-                    public void onMethodCall(MethodCall call, Result result) {
-                        // Your existing code
-                    }
-                });
-    }
+    @Override
+    public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {
+        GeneratedPluginRegistrant.registerWith(flutterEngine);
+        new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)
+                .setMethodCallHandler(
+                    (call, result) -> {
+                        // Your existing code
+                }
+        );
+    }
}
```

----------------------------------------

TITLE: Running Custom Dart File in Flutter
DESCRIPTION: Command to run a specific Dart file (spinning_square.dart) in the Flutter layers example. This demonstrates how to use the -t option to specify a custom entry point for the Flutter application.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/examples/Running-examples.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
flutter run -t widgets/spinning_square.dart
```

----------------------------------------

TITLE: Android Instrumentation Test Setup
DESCRIPTION: Java test class setup for Android instrumentation testing
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_5

LANGUAGE: java
CODE:
```
package com.example.myapp;

import androidx.test.rule.ActivityTestRule;
import dev.flutter.plugins.integration_test.FlutterTestRunner;
import org.junit.Rule;
import org.junit.runner.RunWith;

@RunWith(FlutterTestRunner.class)
public class MainActivityTest {
  @Rule
  public ActivityTestRule<MainActivity> rule = new ActivityTestRule<>(MainActivity.class, true, false);
}
```

----------------------------------------

TITLE: Creating Custom Context Subclass for IMM Handling (Java)
DESCRIPTION: This code creates a subclass of Context that returns the same InputMethodManager as the Flutter View instead of the real IMM for the window when getSystemService is queried.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_4

LANGUAGE: Java
CODE:
```
getSystemService
```

----------------------------------------

TITLE: Optimizing Flutter Test for Comprehension - Initial Version
DESCRIPTION: This is the initial optimized test factored to remove unrelated details. It prepares for further refactoring to optimize for improved comprehension.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
testWidgets('Title Section is empty, Button section is not empty.', (WidgetTester tester) async {
  final ScrollController scrollController = new ScrollController(keepScrollOffset: true);
  await _launchDialog(
    dialog: CupertinoAlertDialog(
      actions: const <Widget>[
        const CupertinoDialogAction(
          child: const Text('One'),
        ),
        const CupertinoDialogAction(
          child: const Text('Two'),
        ),
      ],
      actionScrollController: scrollController,
    ),
  );

  // Check that the title/message section is not displayed
  expect(scrollController.offset, 0.0);
  expect(tester.getTopLeft(find.widgetWithText(CupertinoDialogAction, 'One')).dy, equals(283.5));

  // Check that the button's vertical size is the same.
  expect(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'One')).height,
    equals(tester.getSize(find.widgetWithText(CupertinoDialogAction, 'Two')).height));
});
```

----------------------------------------

TITLE: Flutter Run with Machine Mode
DESCRIPTION: Command modifier that enables JSON-based communication for IDE integration.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
--machine
```

----------------------------------------

TITLE: Android Styles XML - Launch and Normal Themes
DESCRIPTION: Defines launch and normal themes for managing splash screen and app background in the new Flutter Android embedding
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_4

LANGUAGE: xml
CODE:
```
<!-- Launch Theme -->
<style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
    <item name="android:windowBackground">@drawable/launch_background</item>
</style>

<!-- Normal Theme -->
<style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
    <item name="android:windowBackground">@drawable/normal_background</item>
</style>
```

----------------------------------------

TITLE: Pre-caching Flutter Binary Artifacts
DESCRIPTION: Command to ensure that the Flutter tool's cache of binary artifacts is up-to-date.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
flutter precache
```

----------------------------------------

TITLE: Configuring Flutter Plugin Wrapper Library
DESCRIPTION: Creates and configures the static library for Flutter plugin wrapper code. Sets up compilation settings and dependencies for plugin integration.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)
apply_standard_settings(flutter_wrapper_plugin)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  POSITION_INDEPENDENT_CODE ON)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  CXX_VISIBILITY_PRESET hidden)
target_link_libraries(flutter_wrapper_plugin PUBLIC flutter)
target_include_directories(flutter_wrapper_plugin PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_plugin flutter_assemble)
```

----------------------------------------

TITLE: Initializing Project Configuration in CMake
DESCRIPTION: Sets up basic project configuration including minimum CMake version, project name, and binary name. Defines the GTK application identifier and sets modern CMake behaviors.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.10)
project(runner LANGUAGES CXX)
set(BINARY_NAME "hello_world")
set(APPLICATION_ID "io.flutter.examples.hello_world")
cmake_policy(SET CMP0063 NEW)
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")
```

----------------------------------------

TITLE: Defining Installation Steps for CMake Builds
DESCRIPTION: This segment configures the installation steps post-build, specifying where binaries and support files are placed. It's crucial for ensuring executables are runnable directly from Visual Studio. The process depends on the build directory's structure and includes repeated asset copying to ensure current resources. Intended inputs include configuration parameters, and outputs include organized runtime directories.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
# === Installation ===
# Support files are copied into place next to the executable, so that it can
# run in place. This is done instead of making a separate bundle (as on Linux)
# so that building and running from within Visual Studio will work.
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
# Make the "install" step default, as it\'s required to run.
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  CONFIGURATIONS Profile;Release
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Install Executable
DESCRIPTION: Installs the executable to the install prefix. The `RUNTIME` keyword specifies that this is an executable, and `DESTINATION` specifies the directory to install it to.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_22

LANGUAGE: cmake
CODE:
```
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Setting Up Installation Rules
DESCRIPTION: Configures installation rules for the application bundle, including executable, ICU data, Flutter library, and bundled libraries. Handles asset directory management.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: cmake
CODE:
```
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)
install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)
install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Running Flutter Architecture Examples
DESCRIPTION: Commands to run different Flutter architecture examples including raw, rendering, and widgets implementations of spinning square demos.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
flutter run raw/spinning_square.dart
flutter run rendering/spinning_square.dart
flutter run widgets/spinning_square.dart
```

----------------------------------------

TITLE: Running Flutter Driver Tests
DESCRIPTION: Example command illustrating how to run Flutter Driver tests for web using a specified browser and web port.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-Flutter-Driver-tests-with-Web.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
flutter drive --target=test_driver/[driver_test].dart -d web-server --release --browser-name=chrome --web-port=8080
```

----------------------------------------

TITLE: Defining Flutter Interface Library
DESCRIPTION: Creates an interface library called 'flutter' and specifies the include directories and linked libraries to be used in the project.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
add_library(flutter INTERFACE)
```

----------------------------------------

TITLE: Dart Deprecation Syntax Example
DESCRIPTION: Demonstrates the required syntax for deprecating APIs in Dart within the Flutter framework. This includes a description of how to migrate, the motivation for breaking the API, and the beta version after which the feature was deprecated. This ensures that a script can detect all deprecated APIs and remove them.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_5

LANGUAGE: dart
CODE:
```
@Deprecated(
  'Call prepareFrame followed by owner.requestVisualUpdate() instead. '
  'This will enable an improvement to performance in a future version of Flutter. '
  'This feature was deprecated after v2.9.0-0.1.pre.'
)
```

----------------------------------------

TITLE: Initializing Project Configuration in CMake for Flutter Application
DESCRIPTION: Sets up the initial project configuration including minimum CMake version, project name, and C++ standard. It also defines the binary name and application ID for the Flutter project.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.10)
project(runner LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 17)

set(BINARY_NAME "texture")
set(APPLICATION_ID "io.flutter.examples.texture")
```

----------------------------------------

TITLE: Configuring CMake Behavior and Cross-Building Support
DESCRIPTION: Sets up modern CMake behaviors, RPATH settings for loading bundled libraries, and cross-building configurations when targeting a different system root.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(SET CMP0063 NEW)

# Load bundled libraries from the lib/ directory relative to the binary.
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")

# Root filesystem for cross-building.
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()
```

----------------------------------------

TITLE: Kotlin Version Declaration
DESCRIPTION: This snippet shows how to declare a Kotlin version variable and use it to define the Kotlin Gradle plugin dependency. Using a variable makes it easier to update the Kotlin version throughout the project.  Make sure the Kotlin version is compatible with AGP, Gradle, compile SDK and target SDK.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_9

LANGUAGE: Groovy
CODE:
```
// Ok
ext.kotlin_version = "1.7.10"
...
classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
```

----------------------------------------

TITLE: Configuring Installation Rules for Flutter Application in CMake
DESCRIPTION: Sets up installation rules for the Flutter application, including bundle creation, file copying, and AOT library installation for non-Debug builds.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

foreach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})
  install(FILES "${bundled_library}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endforeach(bundled_library)

set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Initializing Project Configuration in CMake for Flutter Windows
DESCRIPTION: Sets up initial project configuration including minimum CMake version, project name, and executable name.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(hello_world LANGUAGES CXX)
set(BINARY_NAME "hello_world")
```

----------------------------------------

TITLE: Testing Dart Packages
DESCRIPTION: This command loads Dart package dependencies and executes all test files found in the directory structure. It utilizes asserts during the test execution to ensure correctness.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/compare_goldens/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
dart pub get
find . -name "*_test.dart" | xargs -n 1 dart --enable-asserts
```

----------------------------------------

TITLE: Generating Architecture Specific gen_snapshot
DESCRIPTION: This Bash command is used to generate a 'gen_snapshot' binary configured for a specific architecture, such as 'armv7' or 'aarch64'. It allows developers to customize the target architecture and align calling conventions.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
./flutter/tools/gn --android --runtime-mode release
```

LANGUAGE: bash
CODE:
```
./flutter/tools/gn --android --runtime-mode release --android-cpu arm64
```

----------------------------------------

TITLE: Setting compileSdk with specific API level
DESCRIPTION: This snippet demonstrates setting the `compileSdk` to a specific API level (35) when `flutter.compileSdkVersion` is not available, such as in 'add to app' scenarios. This is an acceptable practice when the flutter SDK is not available. Always make sure this version is supported by Flutter. 
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_1

LANGUAGE: Groovy
CODE:
```
// OK if flutter.compileSdkVersion is not available like in an add to app example.
android {
  compileSdk = 35
}
```

----------------------------------------

TITLE: Initializing SkiaGoldClient in Dart
DESCRIPTION: This code snippet demonstrates how to import the skia_gold_client package, create a temporary directory, instantiate the SkiaGoldClient, authenticate it, and finally clean up the temporary directory. It highlights the basic setup for interacting with Skia Gold for screenshot testing.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/skia_gold_client/README.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
import 'dart:io' as io;

import 'package:skia_gold_client/skia_gold_client.dart';

void main() async {
  // Create a temporary working directory.
  final io.Directory tmpDirectory = io.Directory.systemTemp.createTempSync('skia_gold_wd');
  try {
    final SkiaGoldClient client = SkiaGoldClient(tmpDirectory);
    await client.auth();
    // ...
  } finally {
    tmpDirectory.deleteSync(recursive: true);
  }
}
```

----------------------------------------

TITLE: Enabling Impeller on macOS Desktop in Info.plist
DESCRIPTION: XML configuration to enable Impeller on macOS Desktop by adding a key-value pair to the Info.plist file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/README.md#2025-04-21_snippet_4

LANGUAGE: xml
CODE:
```
<key>FLTEnableImpeller</key>
<true/>
```

----------------------------------------

TITLE: Setting Up Installation Rules in CMake
DESCRIPTION: Configures installation rules for the application bundle, including copying of executable, ICU data, Flutter library, plugin libraries and assets to their respective directories.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)
install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)
install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Implementing CHANGELOG Entries in Flutter Packages
DESCRIPTION: This snippet shows an example of how to write CHANGELOG entries for Flutter packages. It uses version titles with a preceding blank line to separate them from the descriptions and marks entries with an asterisk for consistency. Breaking changes are explicitly labeled, and guidance or references should be provided for migration if required. This style ensures clarity and consistency in documenting package updates.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
## 2.0.0

* Adds the ability to fetch data from the future.
* **BREAKING CHANGES**:
  * Removes the deprecated `neverCallThis` method.
  * URLs parameters are now `Uri`s rather than `String`s.

## 1.0.3

* Fixes a crash when the device teleports during a network operation.

```

----------------------------------------

TITLE: Example running device lab tests with local engine
DESCRIPTION: This is an example command demonstrating how to run a device lab test with a local Flutter engine. It specifies the path to the engine source, the engine build for the device, the engine build for the host, and the name of the test task.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
"../../bin/dart bin/run.dart \
  --local-engine-src-path=/Users/myname/flutter/engine/src \
  --local-engine=android_debug_unopt_x86 \
  --local-engine-host=host_debug_unopt_x86 \
  -t external_ui_integration_test"
```

----------------------------------------

TITLE: Capturing Screenshots with _flutter.screenshot Protocol
DESCRIPTION: Captures a screenshot as PNG of a random Flutter view on the device. The returned image data is base64 encoded in the response. This extension takes no arguments and is useful for debugging and testing visual output.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "type": "Screenshot",
  "screenshot": "<base64_data>"
}
```

----------------------------------------

TITLE: Updating the Flutter Engine for Compilation
DESCRIPTION: Commands to fetch the latest upstream master changes, rebase the current branch, and synchronize dependencies before compiling the engine.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git fetch upstream master
git rebase upstream/master
gclient sync -D
```

----------------------------------------

TITLE: Defining Flutter Application Executable - CMake
DESCRIPTION: This code snippet defines the executable target for the Flutter application, specifying its source files and build settings. It also highlights the importance of changing the BINARY_NAME in the top-level CMakeLists.txt to ensure the build process works correctly. The application will be built with standard Windows settings and linked against necessary libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)

```

----------------------------------------

TITLE: Defining Build Configuration Options
DESCRIPTION: Sets default build type to Debug if not specified and defines available build mode options (Debug, Profile, Release).
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
# Define build configuration options.
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()
```

----------------------------------------

TITLE: Defining Unicode Character Ranges and Line Breaking Properties
DESCRIPTION: This snippet defines Unicode character ranges and assigns line breaking properties to them. It covers a wide range of characters from various scripts and symbol sets.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_17

LANGUAGE: Unicode
CODE:
```
1E8D0..1E8D6;CM   # Mn     [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS
1E900..1E943;AL   # L&    [68] ADLAM CAPITAL LETTER ALIF..ADLAM SMALL LETTER SHA
1E944..1E94A;CM   # Mn     [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA
1E94B;AL          # Lm         ADLAM NASALIZATION MARK
1E950..1E959;NU   # Nd    [10] ADLAM DIGIT ZERO..ADLAM DIGIT NINE
1E95E..1E95F;OP   # Po     [2] ADLAM INITIAL EXCLAMATION MARK..ADLAM INITIAL QUESTION MARK
1EC71..1ECAB;AL   # No    [59] INDIC SIYAQ NUMBER ONE..INDIC SIYAQ NUMBER PREFIXED NINE
1ECAC;PO          # So         INDIC SIYAQ PLACEHOLDER
1ECAD..1ECAF;AL   # No     [3] INDIC SIYAQ FRACTION ONE QUARTER..INDIC SIYAQ FRACTION THREE QUARTERS
1ECB0;PO          # Sc         INDIC SIYAQ RUPEE MARK
1ECB1..1ECB4;AL   # No     [4] INDIC SIYAQ NUMBER ALTERNATE ONE..INDIC SIYAQ ALTERNATE LAKH MARK
1ED01..1ED2D;AL   # No    [45] OTTOMAN SIYAQ NUMBER ONE..OTTOMAN SIYAQ NUMBER NINETY THOUSAND
1ED2E;AL          # So         OTTOMAN SIYAQ MARRATAN
1ED2F..1ED3D;AL   # No    [15] OTTOMAN SIYAQ ALTERNATE NUMBER TWO..OTTOMAN SIYAQ FRACTION ONE SIXTH
1EE00..1EE03;AL   # Lo     [4] ARABIC MATHEMATICAL ALEF..ARABIC MATHEMATICAL DAL
1EE05..1EE1F;AL   # Lo    [27] ARABIC MATHEMATICAL WAW..ARABIC MATHEMATICAL DOTLESS QAF
1EE21..1EE22;AL   # Lo     [2] ARABIC MATHEMATICAL INITIAL BEH..ARABIC MATHEMATICAL INITIAL JEEM
1EE24;AL          # Lo         ARABIC MATHEMATICAL INITIAL HEH
1EE27;AL          # Lo         ARABIC MATHEMATICAL INITIAL HAH
1EE29..1EE32;AL   # Lo    [10] ARABIC MATHEMATICAL INITIAL YEH..ARABIC MATHEMATICAL INITIAL QAF
1EE34..1EE37;AL   # Lo     [4] ARABIC MATHEMATICAL INITIAL SHEEN..ARABIC MATHEMATICAL INITIAL KHAH
1EE39;AL          # Lo         ARABIC MATHEMATICAL INITIAL DAD
1EE3B;AL          # Lo         ARABIC MATHEMATICAL INITIAL GHAIN
1EE42;AL          # Lo         ARABIC MATHEMATICAL TAILED JEEM
1EE47;AL          # Lo         ARABIC MATHEMATICAL TAILED HAH
1EE49;AL          # Lo         ARABIC MATHEMATICAL TAILED YEH
1EE4B;AL          # Lo         ARABIC MATHEMATICAL TAILED LAM
1EE4D..1EE4F;AL   # Lo     [3] ARABIC MATHEMATICAL TAILED NOON..ARABIC MATHEMATICAL TAILED AIN
1EE51..1EE52;AL   # Lo     [2] ARABIC MATHEMATICAL TAILED SAD..ARABIC MATHEMATICAL TAILED QAF
1EE54;AL          # Lo         ARABIC MATHEMATICAL TAILED SHEEN
1EE57;AL          # Lo         ARABIC MATHEMATICAL TAILED KHAH
1EE59;AL          # Lo         ARABIC MATHEMATICAL TAILED DAD
1EE5B;AL          # Lo         ARABIC MATHEMATICAL TAILED GHAIN
1EE5D;AL          # Lo         ARABIC MATHEMATICAL TAILED DOTLESS NOON
1EE5F;AL          # Lo         ARABIC MATHEMATICAL TAILED DOTLESS QAF
1EE61..1EE62;AL   # Lo     [2] ARABIC MATHEMATICAL STRETCHED BEH..ARABIC MATHEMATICAL STRETCHED JEEM
1EE64;AL          # Lo         ARABIC MATHEMATICAL STRETCHED HEH
1EE67..1EE6A;AL   # Lo     [4] ARABIC MATHEMATICAL STRETCHED HAH..ARABIC MATHEMATICAL STRETCHED KAF
1EE6C..1EE72;AL   # Lo     [7] ARABIC MATHEMATICAL STRETCHED MEEM..ARABIC MATHEMATICAL STRETCHED QAF
1EE74..1EE77;AL   # Lo     [4] ARABIC MATHEMATICAL STRETCHED SHEEN..ARABIC MATHEMATICAL STRETCHED KHAH
1EE79..1EE7C;AL   # Lo     [4] ARABIC MATHEMATICAL STRETCHED DAD..ARABIC MATHEMATICAL STRETCHED DOTLESS BEH
1EE7E;AL          # Lo         ARABIC MATHEMATICAL STRETCHED DOTLESS FEH
1EE80..1EE89;AL   # Lo    [10] ARABIC MATHEMATICAL LOOPED ALEF..ARABIC MATHEMATICAL LOOPED YEH
1EE8B..1EE9B;AL   # Lo    [17] ARABIC MATHEMATICAL LOOPED LAM..ARABIC MATHEMATICAL LOOPED GHAIN
1EEA1..1EEA3;AL   # Lo     [3] ARABIC MATHEMATICAL DOUBLE-STRUCK BEH..ARABIC MATHEMATICAL DOUBLE-STRUCK DAL
1EEA5..1EEA9;AL   # Lo     [5] ARABIC MATHEMATICAL DOUBLE-STRUCK WAW..ARABIC MATHEMATICAL DOUBLE-STRUCK YEH
1EEAB..1EEBB;AL   # Lo    [17] ARABIC MATHEMATICAL DOUBLE-STRUCK LAM..ARABIC MATHEMATICAL DOUBLE-STRUCK GHAIN
1EEF0..1EEF1;AL   # Sm     [2] ARABIC MATHEMATICAL OPERATOR MEEM WITH HAH WITH TATWEEL..ARABIC MATHEMATICAL OPERATOR HAH WITH DAL
1F000..1F02B;ID   # So    [44] MAHJONG TILE EAST WIND..MAHJONG TILE BACK
1F02C..1F02F;ID   # Cn     [4] <reserved-1F02C>..<reserved-1F02F>
1F030..1F093;ID   # So   [100] DOMINO TILE HORIZONTAL BACK..DOMINO TILE VERTICAL-06-06
1F094..1F09F;ID   # Cn    [12] <reserved-1F094>..<reserved-1F09F>
1F0A0..1F0AE;ID   # So    [15] PLAYING CARD BACK..PLAYING CARD KING OF SPADES
1F0AF..1F0B0;ID   # Cn     [2] <reserved-1F0AF>..<reserved-1F0B0>
1F0B1..1F0BF;ID   # So    [15] PLAYING CARD ACE OF HEARTS..PLAYING CARD RED JOKER
1F0C0;ID          # Cn         <reserved-1F0C0>
1F0C1..1F0CF;ID   # So    [15] PLAYING CARD ACE OF DIAMONDS..PLAYING CARD BLACK JOKER
1F0D0;ID          # Cn         <reserved-1F0D0>
1F0D1..1F0F5;ID   # So    [37] PLAYING CARD ACE OF CLUBS..PLAYING CARD TRUMP-21
1F0F6..1F0FF;ID   # Cn    [10] <reserved-1F0F6>..<reserved-1F0FF>
1F100..1F10C;AI   # No    [13] DIGIT ZERO FULL STOP..DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ZERO
1F10D..1F10F;ID   # So     [3] CIRCLED ZERO WITH SLASH..CIRCLED DOLLAR SIGN WITH OVERLAID BACKSLASH
1F110..1F12D;AI   # So    [30] PARENTHESIZED LATIN CAPITAL LETTER A..CIRCLED CD
1F12E..1F12F;AL   # So     [2] CIRCLED WZ..COPYLEFT SYMBOL
1F130..1F169;AI   # So    [58] SQUARED LATIN CAPITAL LETTER A..NEGATIVE CIRCLED LATIN CAPITAL LETTER Z
1F16A..1F16C;AL   # So     [3] RAISED MC SIGN..RAISED MR SIGN
1F16D..1F16F;ID   # So     [3] CIRCLED CC..CIRCLED HUMAN FIGURE
1F170..1F1AC;AI   # So    [61] NEGATIVE SQUARED LATIN CAPITAL LETTER A..SQUARED VOD
1F1AD;ID          # So         MASK WORK SYMBOL
1F1AE..1F1E5;ID   # Cn    [56] <reserved-1F1AE>..<reserved-1F1E5>
1F1E6..1F1FF;RI   # So    [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z
1F200..1F202;ID   # So     [3] SQUARE HIRAGANA HOKA..SQUARED KATAKANA SA
1F203..1F20F;ID   # Cn    [13] <reserved-1F203>..<reserved-1F20F>
1F210..1F23B;ID   # So    [44] SQUARED CJK UNIFIED IDEOGRAPH-624B..SQUARED CJK UNIFIED IDEOGRAPH-914D
1F23C..1F23F;ID   # Cn     [4] <reserved-1F23C>..<reserved-1F23F>
1F240..1F248;ID   # So     [9] TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-672C..TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6557
1F249..1F24F;ID   # Cn     [7] <reserved-1F249>..<reserved-1F24F>
1F250..1F251;ID   # So     [2] CIRCLED IDEOGRAPH ADVANTAGE..CIRCLED IDEOGRAPH ACCEPT
1F252..1F25F;ID   # Cn    [14] <reserved-1F252>..<reserved-1F25F>
1F260..1F265;ID   # So     [6] ROUNDED SYMBOL FOR FU..ROUNDED SYMBOL FOR CAI
1F266..1F2FF;ID   # Cn   [154] <reserved-1F266>..<reserved-1F2FF>
1F300..1F384;ID   # So   [133] CYCLONE..CHRISTMAS TREE
1F385;EB          # So         FATHER CHRISTMAS
1F386..1F39B;ID   # So    [22] FIREWORKS..CONTROL KNOBS
1F39C..1F39D;AL   # So     [2] BEAMED ASCENDING MUSICAL NOTES..BEAMED DESCENDING MUSICAL NOTES
1F39E..1F3B4;ID   # So    [23] FILM FRAMES..FLOWER PLAYING CARDS
1F3B5..1F3B6;AL   # So     [2] MUSICAL NOTE..MULTIPLE MUSICAL NOTES
1F3B7..1F3BB;ID   # So     [5] SAXOPHONE..VIOLIN
1F3BC;AL          # So         MUSICAL SCORE
1F3BD..1F3C1;ID   # So     [5] RUNNING SHIRT WITH SASH..CHEQUERED FLAG
1F3C2..1F3C4;EB   # So     [3] SNOWBOARDER..SURFER
1F3C5..1F3C6;ID   # So     [2] SPORTS MEDAL..TROPHY
1F3C7;EB          # So         HORSE RACING
1F3C8..1F3C9;ID   # So     [2] AMERICAN FOOTBALL..RUGBY FOOTBALL
1F3CA..1F3CC;EB   # So     [3] SWIMMER..GOLFER
1F3CD..1F3FA;ID   # So    [46] RACING MOTORCYCLE..AMPHORA
1F3FB..1F3FF;EM   # Sk     [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6
1F400..1F441;ID   # So    [66] RAT..EYE
1F442..1F443;EB   # So     [2] EAR..NOSE
1F444..1F445;ID   # So     [2] MOUTH..TONGUE
1F446..1F450;EB   # So    [11] WHITE UP POINTING BACKHAND INDEX..OPEN HANDS SIGN
1F451..1F465;ID   # So    [21] CROWN..BUSTS IN SILHOUETTE
1F466..1F478;EB   # So    [19] BOY..PRINCESS
1F479..1F47B;ID   # So     [3] JAPANESE OGRE..GHOST
1F47C;EB          # So         BABY ANGEL
1F47D..1F480;ID   # So     [4] EXTRATERRESTRIAL ALIEN..SKULL
1F481..1F483;EB   # So     [3] INFORMATION DESK PERSON..DANCER
1F484;ID          # So         LIPSTICK
1F485..1F487;EB   # So     [3] NAIL POLISH..HAIRCUT
1F488..1F48E;ID   # So     [7] BARBER POLE..GEM STONE
1F48F;EB          # So         KISS
1F490;ID          # So         BOUQUET
1F491;EB          # So         COUPLE WITH HEART
1F492..1F49F;ID   # So    [14] WEDDING..HEART DECORATION
1F4A0;AL          # So         DIAMOND SHAPE WITH A DOT INSIDE
1F4A1;ID          # So         ELECTRIC LIGHT BULB
1F4A2;AL          # So         ANGER SYMBOL
1F4A3;ID          # So         BOMB
1F4A4;AL          # So         SLEEPING SYMBOL
1F4A5..1F4A9;ID   # So     [5] COLLISION SYMBOL..PILE OF POO
1F4AA;EB          # So         FLEXED BICEPS
1F4AB..1F4AE;ID   # So     [4] DIZZY SYMBOL..WHITE FLOWER
1F4AF;AL          # So         HUNDRED POINTS SYMBOL
1F4B0;ID          # So         MONEY BAG
1F4B1..1F4B2;AL   # So     [2] CURRENCY EXCHANGE..HEAVY DOLLAR SIGN
1F4B3..1F4FF;ID   # So    [77] CREDIT CARD..PRAYER BEADS
1F500..1F506;AL   # So     [7] TWISTED RIGHTWARDS ARROWS..HIGH BRIGHTNESS SYMBOL
1F507..1F516;ID   # So    [16] SPEAKER WITH CANCELLATION STROKE..BOOKMARK
1F517..1F524;AL   # So    [14] LINK SYMBOL..INPUT SYMBOL FOR LATIN LETTERS
1F525..1F531;ID   # So    [13] FIRE..TRIDENT EMBLEM
1F532..1F549;AL   # So    [24] BLACK SQUARE BUTTON..OM SYMBOL
1F54A..1F573;ID   # So    [42] DOVE OF PEACE..HOLE
1F574..1F575;EB   # So     [2] MAN IN BUSINESS SUIT LEVITATING..SLEUTH OR SPY
1F576..1F579;ID   # So     [4] DARK SUNGLASSES..JOYSTICK
1F57A;EB          # So         MAN DANCING
1F57B..1F58F;ID   # So    [21] LEFT HAND TELEPHONE RECEIVER..TURNED OK HAND SIGN
1F590;EB          # So         RAISED HAND WITH FINGERS SPLAYED
1F591..1F594;ID   # So     [4] REVERSED RAISED HAND WITH FINGERS SPLAYED..REVERSED VICTORY HAND
1F595..1F596;EB   # So     [2] REVERSED HAND WITH MIDDLE FINGER EXTENDED..RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS
1F597..1F5D3;ID   # So    [61] WHITE DOWN POINTING LEFT HAND INDEX..SPIRAL CALENDAR PAD
```

----------------------------------------

TITLE: Installing Flutter Assets and AOT Library
DESCRIPTION: Handles installation of Flutter assets and the AOT library for non-Debug builds. This section ensures assets are cleanly copied and the AOT library is included for release builds.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_12

LANGUAGE: CMake
CODE:
```
# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Initializing CMake Project Configuration for Flutter Linux Application
DESCRIPTION: Sets up the basic project configuration including minimum CMake version, project name, and application identifiers. This establishes the foundation for the Flutter Linux build.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
# Project-level configuration.
cmake_minimum_required(VERSION 3.10)
project(runner LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "ui")
# The unique GTK application identifier for this application. See:
# https://wiki.gnome.org/HowDoI/ChooseApplicationID
set(APPLICATION_ID "io.flutter.ui")
```

----------------------------------------

TITLE: Setting targetSdk in Android Gradle
DESCRIPTION: This snippet demonstrates the correct way to set the `targetSdk` in the `defaultConfig` block of a Gradle build file. It uses the `flutter.targetSdkVersion` variable, or an integer literal if the variable is not available.  It is important to make sure the target SDK is compatible with the compile SDK. 
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_3

LANGUAGE: Groovy
CODE:
```
// OK
defaultConfig {
  targetSdk = flutter.targetSdkVersion
}
```

----------------------------------------

TITLE: Configuring Application Target and Dependencies
DESCRIPTION: Sets up the main application target, including source files and dependencies. Links against Flutter and GTK libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)
apply_standard_settings(${BINARY_NAME})
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)
```

----------------------------------------

TITLE: Flutter Interface Library Configuration in CMake
DESCRIPTION: Defines an interface library for Flutter that includes directories, links against the Flutter library, and specifies dependencies on GTK, GLIB, and GIO. This creates a linkable target for applications.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Capturing Skia Pictures with _flutter.screenshotSkp Protocol
DESCRIPTION: Retrieves the Skia SKP (Skia Picture) of a random Flutter view. The SKP data is base64 encoded in the response body. This extension takes no arguments and provides low-level graphics information for detailed rendering analysis.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "type": "ScreenshotSkp",
  "skp": "<base64_data>"
}
```

----------------------------------------

TITLE: Enabling Android UI tests in Flutter Plugin (Java)
DESCRIPTION: Instructions for setting up Android UI tests for a Flutter plugin. This includes copying test files, creating necessary directories, and adjusting Gradle configurations. Customization based on package identifiers is also discussed.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_6

LANGUAGE: Java
CODE:
```
1. Duplicate the `DartIntegrationTests.java` file from another plugin to `example/android/app/src/androidTest/java/io/flutter/plugins/DartIntegrationTest.java`
1. Create a file under `example/android/app/src/androidTest/java/` with a sub-path corresponding to the example app's package identifier from `example/android/app/src/main/AndroidManifest.xml`. The file should be called `FlutterActivityTest.java` (or if the example uses a custom MainActivity as its `android:name` in `AndroidManifest.xml`, `MainActivityTest.java`).
    * For example, if `AndroidManifest.xml` uses `io.flutter.plugins.fooexample` as the package identifier, and `io.flutter.embedding.android.FlutterActivity` as its `android:name`, the file should be `example/android/app/src/androidTest/java/io/flutter/plugins/fooexample/FlutterActivityTest.java`.

    The file should look like:
    ```
    package io.flutter.plugins.fooexample;

    import androidx.test.rule.ActivityTestRule;
    import dev.flutter.plugins.integration_test.FlutterTestRunner;
    import io.flutter.embedding.android.FlutterActivity;
    import io.flutter.plugins.DartIntegrationTest;
    import org.junit.Rule;
    import org.junit.runner.RunWith;

    @DartIntegrationTest
    @RunWith(FlutterTestRunner.class)
    public class FlutterActivityTest {
      @Rule
      public ActivityTestRule<FlutterActivity> rule = new ActivityTestRule<>(FlutterActivity.class);
    }
    ```

    Note:
      * Update the `package` to match the actual package.
      * If using a custom `MainActivity`, replace the `FlutterActivity` references with `MainActivity`.
1. Ensure that `example/android/app/build.gradle`'s `defaultConfig` section contains:
    ```
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    ```
```

----------------------------------------

TITLE: Defining Build Configurations for CMake
DESCRIPTION: This snippet defines build configuration options for different modes like 'Debug', 'Profile', and 'Release'. It specifies linker and compiler flags for the Profile build mode by mirroring Release settings and sets up Unicode definitions across all projects.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")
add_definitions(-DUNICODE -D_UNICODE)
```

----------------------------------------

TITLE: Running Scrolling Performance Test in Flutter
DESCRIPTION: This command executes a scrolling performance benchmark using `flutter drive`. The `--profile` flag enables profiling mode, and the test script is specified by `test_driver/scroll_perf.dart`. The output is a timeline summary and a more detailed timeline log, stored in the `build` directory.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/platform_views_layout_hybrid_composition/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
flutter drive --profile test_driver/scroll_perf.dart
```

----------------------------------------

TITLE: Setting Standard Compilation Settings for Flutter Windows
DESCRIPTION: Defines a function to apply standard compilation settings including C++17 support, warning levels, and exception handling configuration.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()
```

----------------------------------------

TITLE: Calculating Clamped Coordinates with Non-Sticky Arithmetic in C++
DESCRIPTION: The `ClampedNumeric` template provides performant, non-sticky saturating arithmetic operations useful for calculations like coordinate insetting. The example shows using `ClampSub` and `ClampAdd` with `ClampedNumeric` to calculate rectangle dimensions while preventing overflows.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_6

LANGUAGE: cpp
CODE:
```
// Use clamped arithmetic since inset calculations might overflow.
void Rect::Inset(int left, int top, int right, int bottom) {
  origin_ += Vector2d(left, top);
  set_width(ClampSub(width(), ClampAdd(left, right)));
  set_height(ClampSub(height(), ClampAdd(top, bottom)));
}
```

----------------------------------------

TITLE: Starting ChromeDriver
DESCRIPTION: Command to run ChromeDriver on a specified port. Ensure ChromeDriver version matches the browser version.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-Flutter-Driver-tests-with-Web.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
chromedriver --port=4444
```

----------------------------------------

TITLE: Setting Up Flutter Library and Tool Build Rules
DESCRIPTION: Sets up directory paths and project inclusions for building the Flutter application and its plugins. The managed directory for Flutter and plugin setup is necessary for integrating Flutter's build rules into the CMake project structure.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

add_subdirectory("runner")

include(flutter/generated_plugins.cmake)
```

----------------------------------------

TITLE: Installing Plugin Libraries for Flutter Linux Application
DESCRIPTION: Iterates through bundled plugin libraries and installs them to the lib directory. This ensures all required plugin libraries are included in the final application bundle.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_11

LANGUAGE: CMake
CODE:
```
foreach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})
  install(FILES "${bundled_library}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endforeach(bundled_library)
```

----------------------------------------

TITLE: Building iOS Engine Variants
DESCRIPTION: This snippet provides commands to build the Flutter engine for iOS devices and simulators. Essential for iOS development, it assumes the necessary iOS SDK components are installed.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
et build --config ios_debug
et build --config ios_debug_sim
```

----------------------------------------

TITLE: Testing Multiple Behaviors in a Single Flutter Test (Bad)
DESCRIPTION: This code snippet shows a test that validates multiple behaviors of `SliverGeometry`.  This is not recommended because it can make debugging difficult.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
// Single test that tests multiple behaviors
test('SliverGeometry', () {
  expect(const SliverGeometry().debugAssertIsValid(), isTrue);
  expect(() {
    const SliverGeometry(layoutExtent: 10.0, paintExtent: 9.0).debugAssertIsValid();
  }, throwsFlutterError);
  expect(() {
    const SliverGeometry(paintExtent: 9.0, maxPaintExtent: 8.0).debugAssertIsValid();
  }, throwsFlutterError);
});
```

----------------------------------------

TITLE: Configuring CMake for Flutter Project
DESCRIPTION: This CMake setup defines build modes and compilation settings for a Flutter application. Dependencies include the CMake toolchain and Flutter SDK. Key parameters include `CMAKE_BUILD_TYPE` for setting the build mode and `CMAKE_INSTALL_PREFIX` for specifying installation paths. The script manages Flutter library and plugin build rules, adjusting linker and compiler flags as needed. It primarily supports Debug, Profile, and Release configurations.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(dartpad_curve2_d_0 LANGUAGES CXX)

set(BINARY_NAME "dartpad_curve2_d_0")

cmake_policy(VERSION 3.14...3.25)

set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")

# Configure build options.
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()

set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")

# Use Unicode for all projects.
add_definitions(-DUNICODE -D_UNICODE)

# Compilation settings that should be applied to most targets.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()

set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")

# Flutter library and tool build rules.
add_subdirectory(${FLUTTER_MANAGED_DIR})

# Application build
add_subdirectory("runner")

# Generated plugin build rules, which manage building the plugins and adding
them to the application.
include(flutter/generated_plugins.cmake)


# === Installation ===
# Support files are copied into place next to the executable, so that it can
# run in place. This is done instead of making a separate bundle (as on Linux)
# so that building and running from within Visual Studio will work.
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
# Make the "install" step default, as it's required to run.
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  CONFIGURATIONS Profile;Release
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Setting Flutter Library Paths
DESCRIPTION: Configures CMake variables that define the paths for the Flutter library, ICU data file, build directory, and AOT library for use throughout the build process. These paths are provided to the parent scope for wider accessibility.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/libflutter_linux_gtk.so")
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/lib/libapp.so" PARENT_SCOPE)
```

----------------------------------------

TITLE: Configuring Installation Paths for Flutter Application
DESCRIPTION: Specifies file and component installation paths for a Flutter application, ensuring the runtime environment is set up correctly. The CMake installation settings cater to Visual Studio's needs while preventing stale file issues by fully copying necessary data on each build.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  CONFIGURATIONS Profile;Release
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Configuring Dependencies and Libraries
DESCRIPTION: Links required libraries and sets include directories for the Flutter Windows runner. Includes Flutter framework libraries and Windows-specific dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")
```

----------------------------------------

TITLE: Renaming Git origin remote to upstream
DESCRIPTION: This command renames the 'origin' remote to 'upstream' in the local Git repository.  This is a common practice when contributing to open-source projects, where 'upstream' refers to the main project repository, and 'origin' refers to the contributor's forked repository.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
"git remote rename origin upstream"
```

----------------------------------------

TITLE: Disabling Flutter Analytics via CLI Command
DESCRIPTION: Shell command to opt out of all Flutter data reporting including both analytics and crash reporting features.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/reporting/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
flutter config --no-analytics
```

----------------------------------------

TITLE: Creating Flutter Library Interface
DESCRIPTION: Defines a CMake interface library for Flutter, setting include directories and linking against Flutter library
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Tagging Tests with Reduced Test Set in Dart
DESCRIPTION: This Dart code snippet illustrates how to tag a test file in Flutter with `reduced-test-set` to ensure execution on all relevant platforms, even within conservative CI environments that aim to conserve resources. Adding this tag ensures that golden file images will be processed across necessary platforms like Mac and Windows, preventing overlooked tests in restrictive environments. The tag should be placed at the top of the Dart test file.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md#2025-04-21_snippet_3

LANGUAGE: Dart
CODE:
```
@Tags(<String>['reduced-test-set'])
```

----------------------------------------

TITLE: Handling Asynchronous Guarded Functions - Dart
DESCRIPTION: This code snippet pertains to the error thrown when a guarded function is called without utilizing 'await'. It emphasizes the importance of properly sequencing async calls in Flutter Widget Testing to avoid conflicts between multiple calls to Future-returning methods.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/flutter_test/test_async_utils_unguarded_expectation.txt#2025-04-21_snippet_0

LANGUAGE: Dart
CODE:
```
{"test_description":"TestAsyncUtils - handling unguarded async helper functions","error_message":"You must use \"await\" with all Future-returning test APIs.","guarded_method":"pump","tracked_methods":["first_call","second_call"]}
```

----------------------------------------

TITLE: Adding HTTPS origin remote to local clone
DESCRIPTION: This command adds the user's forked repository as the 'origin' remote to the local Git clone using HTTPS. Replace ████████ with the user's GitHub account name. This is an alternative to SSH.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
"git remote add origin https://github.com/████████/flutter.git"
```

----------------------------------------

TITLE: Adding Remote Tracking for Upstream Repository
DESCRIPTION: Adds a remote named 'upstream' that points to the main Flutter packages repository. This allows you to fetch the latest changes from the main repository without directly modifying your local copy.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/Setting-up-the-Packages-development-environment.md#2025-04-21_snippet_2

LANGUAGE: git
CODE:
```
`git remote add upstream git@github.com:flutter/packages.git`
```

----------------------------------------

TITLE: Configuring Installation Rules for Flutter Linux Application Bundle
DESCRIPTION: Sets up installation rules for creating a relocatable bundle with the application binary and all required assets. Handles data files, libraries, and configures proper directory structure for the installable package.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_6

LANGUAGE: CMake
CODE:
```
# === Installation ===
# By default, "installing" just makes a relocatable bundle in the build
# directory.
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

# Start with a clean build bundle directory every time.
install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

foreach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})
  install(FILES "${bundled_library}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endforeach(bundled_library)

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

# Install the AOT library on non-Debug builds only.
if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Enforcing Arithmetic Type Conversions at Compile-Time in C++
DESCRIPTION: The `strict_cast` template is analogous to `static_cast` but performs static checks to ensure the destination type can represent the full range of the source type. This prevents potential runtime errors during conversion. Additionally, `StrictNumeric` can be used to enforce compile-time restrictions on function parameters.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_3

LANGUAGE: cpp
CODE:
```
// Throw a compiler error if byte_value is changed to an out-of-range-type.
int int_value = strict_cast<int>(byte_value);

// Throw a compiler error if the size argument cannot be represented by a
// size_t (e.g. passing an int will fail to compile).
bool AllocateBuffer(void** buffer, StrictCast<size_t> size);
```

----------------------------------------

TITLE: Configuring Flutter and GTK Dependencies for Linux Application
DESCRIPTION: Sets up the Flutter managed directory, adds it as a subdirectory, and configures GTK dependencies using pkg-config. Defines the application ID as a preprocessor definition.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_4

LANGUAGE: CMake
CODE:
```
# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")
```

----------------------------------------

TITLE: Applying Standard Settings for CMake Targets
DESCRIPTION: The function defines standard compilation settings for CMake targets by setting C++ standard, compiler options, and processing definitions. It disables exceptions and sets debug-specific definitions, ensuring consistent builds.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()
```

----------------------------------------

TITLE: Using addr2line for Symbolication
DESCRIPTION: Demonstrates how to use the addr2line tool from the NDK to symbolicate stack traces on macOS by feeding stack addresses manually. Requires a downloaded .so file corresponding to the crash.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
% $ANDROID_HOME/ndk/20.0.5594570/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android-addr2line -e ~/Downloads/libflutter.so
```

----------------------------------------

TITLE: AGP Dependency Declaration
DESCRIPTION: This snippet shows how to declare the Android Gradle Plugin (AGP) dependency in the `dependencies` block of the project-level `build.gradle` file. It uses the `com.android.tools.build:gradle` artifact with a specific version number.  Make sure this version is compatible with the target and compile SDK.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_6

LANGUAGE: Groovy
CODE:
```
// OK
dependencies {
    classpath "com.android.tools.build:gradle:8.8.1"
}
```

----------------------------------------

TITLE: Pushing Changes to Origin
DESCRIPTION: Pushes the local branch to the remote origin repository.  This makes your changes available for review and integration. Replace `name_of_your_branch` with the name of your branch.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_3

LANGUAGE: git
CODE:
```
git push origin name_of_your_branch
```

----------------------------------------

TITLE: Measuring Startup Time in Flutter
DESCRIPTION: This command runs the Flutter application in profiling mode with trace-startup enabled to measure startup time. The results are output to the logs and also stored in `build/start_up_info.json`.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/platform_views_layout_hybrid_composition/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
flutter run --profile --trace-startup
```

----------------------------------------

TITLE: Flutter Library Configuration in CMake
DESCRIPTION: Sets up the Flutter Windows DLL and related header files. Configures include directories and links the Flutter library interface.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")

list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Configuring Build Types for Flutter Windows Application
DESCRIPTION: Sets up Debug, Profile, and Release build configurations for the Flutter application. Handles both multi-config and single-config CMake generators.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# Define build configuration option.
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
```

----------------------------------------

TITLE: Annotating Code for Documentation in Dart
DESCRIPTION: This snippet shows how to annotate a Dart code block with docregion comments, allowing for later referencing in documentation.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_6

LANGUAGE: Dart
CODE:
```
// #docregion purple
const Color purple = Color(0xFFE6E6FA);
// #enddocregion purple
```

----------------------------------------

TITLE: Configure Build Type
DESCRIPTION: Configures the build type if not already set.  It defaults to `Debug` and provides options for `Debug`, `Profile`, and `Release` builds. This affects compiler optimizations and debugging information.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: cmake
CODE:
```
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()
```

----------------------------------------

TITLE: Reinstalling ffi Ruby Gem with Special Flag
DESCRIPTION: This snippet shows how to uninstall the existing ffi gem and reinstall it with the --enable-libffi-alloc flag to resolve potential crashes in CocoaPods related to ffi.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/desktop/macos/Developing-with-Flutter-on-Apple-Silicon.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
"sudo gem uninstall ffi && sudo gem install ffi -- --enable-libffi-alloc"
```

----------------------------------------

TITLE: Dynamic Extension Loading - Flutter WebAssembly Example
DESCRIPTION: This example demonstrates dynamic extension loading in Flutter using the `rfw` package and WebAssembly. It involves a Flutter desktop application downloading an interface description and a Wasm program to perform calculations, showcasing a proof-of-concept for dynamically extending Flutter applications. This example highlights the potential of combining `rfw` with FFI or Wasm for dynamic functionality.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/issue_hygiene/Popular-issues.md#2025-04-21_snippet_0

LANGUAGE: Flutter
CODE:
```
N/A
```

----------------------------------------

TITLE: Dart Class with Deprecated Method and New Method
DESCRIPTION: This Dart code snippet demonstrates a class `C` with a deprecated method `oldName` and a new method `newName`. The `oldName` method simply calls the `newName` method, serving as a temporary bridge during the deprecation period.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
class C {
  @deprecated
  int oldName(String s) => newName(s);

  int newName(String s) { ... }
}
```

----------------------------------------

TITLE: Defining Vertex Shader for Triangle Rendering in GLSL
DESCRIPTION: This vertex shader takes a 2D position input and converts it to normalized device coordinates (NDC) for rendering a triangle.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_0

LANGUAGE: glsl
CODE:
```
in vec2 position;

void main() {
  gl_Position = vec4(position, 0.0, 1.0);
}
```

----------------------------------------

TITLE: Building and debugging Flutter Linux app with local engine
DESCRIPTION: Process to build a Flutter Linux app with a local engine and prepare it for debugging by replacing the stripped library with an unstripped version.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
flutter build linux --debug --local-engine=host_debug_unopt --local-engine-host=host_debug_unopt lib/main.dart
```

----------------------------------------

TITLE: Installing Executable Target
DESCRIPTION: Installs the executable target to the specified destination within the build bundle. This places the executable in the correct location for distribution.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_16

LANGUAGE: cmake
CODE:
```
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Configuring Flutter Library and Headers in CMake for Windows
DESCRIPTION: This snippet sets up the Flutter library path and header files for Windows. It defines the location of the Flutter DLL and creates an interface library target with the necessary include directories and linkage.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/windows/app.so" PARENT_SCOPE)

list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Visualizing Thread Interactions in Vulkan Backend Using Mermaid Diagram
DESCRIPTION: This Mermaid sequence diagram illustrates the interactions between various threads in the Vulkan backend, including the render thread, concurrent workers, fence waiter, resource manager, and GPU. It shows the flow of operations during application launch and a single frame rendering cycle.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/vulkan_threading.md#2025-04-21_snippet_0

LANGUAGE: mermaid
CODE:
```
sequenceDiagram
    participant rt as Render Thread
    participant worker1 as Concurrent Worker 1
    participant worker2 as Concurrent Worker 2
    participant fence_waiter as Fence Waiter
    participant resource_manager as Resource Manager
    participant gpu as GPU
    rt->>+worker1: Setup PSO 1
    rt->>+worker2: Setup PSO n
    worker1-->>-rt: Done
    worker2-->>-rt: Done
    Note over rt,resource_manager: Application launch
    loop One Frame
        activate rt
        rt->>+worker2: Frame Workload
        activate fence_waiter
        rt->>fence_waiter: Resource 1 owned by GPU
        worker2-->>-rt: Done
        rt->>fence_waiter: Resource 2 owned by GPU
        rt->>gpu: Submit GPU Commands
        deactivate rt
    end
    activate gpu
    gpu-->>fence_waiter: GPU Work Done
    fence_waiter->>resource_manager: Collect/Pool Resources
    deactivate fence_waiter
    activate resource_manager
    deactivate gpu
    deactivate resource_manager
```

----------------------------------------

TITLE: Adding Custom Command for Flutter Assembly
DESCRIPTION: Adds a custom command to assemble the Flutter library and headers. It uses the Flutter tool's backend script to generate these files. A phony file is used to force the command to run every time.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_13

LANGUAGE: cmake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
```

----------------------------------------

TITLE: Running Cull Opacity Benchmark - Flutter Shell
DESCRIPTION: This shell script runs the cull opacity performance benchmark on a device using `flutter drive` with specified test and driver scripts. It generates the results in JSON files located in the build directory. Requires Flutter to be installed.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
flutter drive --profile -t test_driver/run_app.dart --driver test_driver/cull_opacity_perf_test.dart
```

----------------------------------------

TITLE: Defining Flutter Application Executable Target
DESCRIPTION: Defines the main executable target for the Flutter application, including all necessary source files. The binary name is defined in the top-level CMakeLists.txt and referenced here.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)
```

----------------------------------------

TITLE: Estimating Raster Cache Memory Usage with _flutter.estimateRasterCacheMemory Protocol
DESCRIPTION: Estimates memory usage of both picture and layer raster cache. The estimation counts the memory used by rasterized SkImage objects that speed up future draws. This extension requires the viewId argument and returns the estimated memory usage in bytes for both layer and picture caches.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
{
    "type": "EstimateRasterCacheMemory",
    "layerBytes": 40000,
    "pictureBytes": 400
}
```

----------------------------------------

TITLE: Defining Standard Build Settings Function
DESCRIPTION: Creates a function to apply standard compilation settings including C++14 support, warning flags, and optimization options for different build types.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()
```

----------------------------------------

TITLE: Running Startup Benchmark using Flutter CLI
DESCRIPTION: This shell command measures startup time on a device in profile mode, outputting the trace of startup events. The main logs display the results, with additional details saved in a JSON file. Requires Flutter installed and a connected device.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
flutter run --profile --trace-startup
```

----------------------------------------

TITLE: Configuring Flutter Library and Headers
DESCRIPTION: Sets up the Flutter library paths and header files, configuring the main Flutter interface library with necessary include directories and dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")

list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Implementing Non-Parameterized Message in DefaultMaterialLocalizations
DESCRIPTION: Implementation of a simple localized string getter in the DefaultMaterialLocalizations class.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/README.md#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
@override
String get showMenuTooltip => 'Show menu';
```

----------------------------------------

TITLE: Running Clang Tidy on Flutter Engine
DESCRIPTION: This command executes the clang_tidy tool on the Flutter engine repository. It assumes that the command is run from the root of the engine repository. By default, it lints the modified files in the latest build.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
```shell
# Assuming you are in the `flutter` root of the engine repo.
dart ./tools/clang_tidy/bin/main.dart
```
```

----------------------------------------

TITLE: Configuring a FirebaseLab test target in .ci.yaml
DESCRIPTION: This YAML snippet demonstrates how to configure a FirebaseLab test target in a `.ci.yaml` file. It includes the target name, recipe, dependencies, task name, and device specifications. The `bringup: true` property is used for new tests to allow configuration propagation.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-FirebaseLab-Tests.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
```yaml
 - name: Linux firebase_oriol33_abstract_method_smoke_test
   # This is required for new tests to allow the
   # configuration to propagate.
   bringup: true
   recipe: firebaselab/firebaselab
   # The unit for timeout is minutes. 1 hour is enough
   # for most use cases unless the test is using a device
   # with low capacity and the queue is expected to be
   # longer than 30 minutes.
   timeout: 60
   Properties:
      # These top level dependencies are shared between firebaselab
      # tests. For the current values you can copy paste the
      # dependencies from another firebaselab target. Changing these
      # values are only necessary when upgrading to a new android sdk
      # version.
      dependencies: >-
          [
            {"dependency": "android_sdk", "version": "version:33v6"}
          ]
      # Use for metrics collection and to be able to filter tasks**
      # in swarming.
      tags: >
        ["firebaselab"]
      task_name: abstract_method_smoke_test
      physical_devices: >-
          ["--device", "model=oriole,version=33"]
      virtual_devices: >-
          []
```
```

----------------------------------------

TITLE: Defining Build Configuration and Standard Settings Function in CMake
DESCRIPTION: Sets the default build type to Debug if not specified and defines a function APPLY_STANDARD_SETTINGS to apply common compilation settings to targets.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()

function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()
```

----------------------------------------

TITLE: Installing ktlint Extension in Android Studio
DESCRIPTION: Provides steps to install the ktlint plugin for automatic code formatting and linting in Android Studio, specifically for Kotlin files in the Flutter repository
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Kotlin-android-studio-formatting.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
1. Install the `ktlint` extension for Android Studio

   a. On Mac, this is `Android Studio > Settings > Plugins > ` Search for `ktlint`.
```

----------------------------------------

TITLE: Engine Test Configuration in JSON
DESCRIPTION: This JSON snippet configures an engine test within Flutter's CI. It defines the test's name, recipe, drone dimensions, dependencies, and tasks. The configuration details how to run a clang_tidy test for Android debug ARM64, including specifying the variant, linting options, shard ID, and script to execute.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_13

LANGUAGE: json
CODE:
```
{
  "tests": [
    {
       "name": "test: clang_tidy android_debug_arm64",
       "recipe": "engine_v2/tester_engine",
       "drone_dimensions": [
         "device_type=none",
         "os=Linux"
       ],
       "dependencies": [
         "host_debug",
         "android_debug_arm64"
       ],
       "tasks": [
         {
            "name": "test: clang_tidy android_debug_arm64",
            "parameters": [
              "--variant",
              "android_debug_arm64",
              "--lint-all",
              "--shard-id=0",
              "--shard-variants=host_debug"
            ],
            "max_attempts": 1,
            "script": "flutter/ci/clang_tidy.sh",
            "test_timeout_secs": 600,
         }
       ]
    }
  ]
}
```

----------------------------------------

TITLE: Adding and Configuring Flutter Library Target
DESCRIPTION: Defines 'flutter' as an INTERFACE library target, specifies include directories, and links it against necessary system libraries. This is vital for ensuring the Flutter library integrates smoothly into the host application’s build.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_7

LANGUAGE: CMake
CODE:
```
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
```

----------------------------------------

TITLE: Setting Up Flutter Interface Library in CMake
DESCRIPTION: Creates an interface library for Flutter, sets include directories, and links required libraries including GTK, GLIB, and GIO.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Creating the Flutter Library Interface
DESCRIPTION: This snippet creates an interface library for Flutter and sets its include directories and linked libraries, ensuring it uses the system dependencies defined earlier.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Dart Platform View Link Implementation
DESCRIPTION: Create a PlatformViewLink for hybrid composition on Android, managing view registration and surface creation
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Widget build(BuildContext context) {
  final String viewType = 'hybrid-view-type';
  final Map<String, dynamic> creationParams = <String, dynamic>{};

  return PlatformViewLink(
    viewType: viewType,
    surfaceFactory:
        (BuildContext context, PlatformViewController controller) {
      return AndroidViewSurface(
        controller: controller,
        gestureRecognizers: const <Factory<OneSequenceGestureRecognizer>>{},
        hitTestBehavior: PlatformViewHitTestBehavior.opaque,
      );
    },
    onCreatePlatformView: (PlatformViewCreationParams params) {
      return PlatformViewsService.initSurfaceAndroidView(
        id: params.id,
        viewType: viewType,
        layoutDirection: TextDirection.ltr,
        creationParams: creationParams,
        creationParamsCodec: StandardMessageCodec(),
      )
        ..addOnPlatformViewCreatedListener(params.onPlatformViewCreated)
        ..create();
    },
  );
}
```

----------------------------------------

TITLE: Running Web Benchmark - Flutter Shell
DESCRIPTION: This shell command runs web benchmarks using `flutter run` in various modes and renderers like CanvasKit or Skwasm. Useful for performance profiling and executing in an environment similar to devicelab's setup.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
cd dev/benchmarks/macrobenchmarks

# Runs in profile mode
flutter run --profile -d web-server lib/web_benchmarks.dart
```

----------------------------------------

TITLE: Linking Flutter and GTK Dependencies
DESCRIPTION: Links the required libraries to the application target, including the Flutter engine and GTK (for Linux UI integration). These dependencies are essential for the runner to function properly.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)
```

----------------------------------------

TITLE: Building a Display List with C++ Impeller API
DESCRIPTION: This snippet demonstrates how to use the Impeller C++ API to create a display list for rendering various shapes. It involves setting paint properties, translating draw positions, and drawing rectangles, ovals, lines, and rounded rectangles.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/toolkit/interop/README.md#2025-04-21_snippet_0

LANGUAGE: c++
CODE:
```
#include <impeller/impeller.h>

DisplayListBuilder builder;

Paint red_paint;
red_paint.SetColor({1.0, 0.0, 0.0, 1.0});
red_paint.SetStrokeWidth(10.0);

builder.Translate(10, 10);
builder.DrawRect({0, 0, 100, 100}, red_paint);
builder.Translate(100, 100);
builder.DrawOval({0, 0, 100, 100}, red_paint);
builder.Translate(100, 100);
builder.DrawLine({0, 0}, {100, 100}, red_paint);

builder.Translate(100, 100);
ImpellerRoundingRadii radii = {};
radii.top_left = {10, 10};
radii.bottom_right = {10, 10};
builder.DrawRoundedRect({0, 0, 100, 100}, radii, red_paint);

builder.Translate(100, 100);
builder.DrawPath(hpp::PathBuilder{}.AddOval({0, 0, 100, 100}).Build(),
                 red_paint);

auto dl = builder.Build();

// Per frame
hpp::Surface window(surface);
window.Draw(dl);
```

----------------------------------------

TITLE: Creating Custom Target for Flutter Assemble
DESCRIPTION: This snippet defines a custom target that depends on the Flutter library and headers, which helps in orchestrating the build process.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_7

LANGUAGE: CMake
CODE:
```
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)
```

----------------------------------------

TITLE: Downloading and Compiling GSettings Desktop Schemas in Bash
DESCRIPTION: This Bash script details the steps for downloading the gsettings-desktop-schemas package, extracting schema sources, and compiling them for testing. Dependencies include GNU utilities like wget and tar, as well as glib-compile-schemas for compiling the schemas. The process requires specifying the correct paths for downloading and compiling. Key parameters include the desired package version and the target directory for compiled schemas.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/linux/testing/gschemas/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
# download gsettings-desktop-schemas package\nwget http://archive.ubuntu.com/ubuntu/pool/main/g/gsettings-desktop-schemas/gsettings-desktop-schemas_<version>.deb\n\n# extract schema sources (/usr/share/glib-2.0/schemas/*.gschema.xml & .override)\nar x gsettings-desktop-schemas_<version>.deb\ntar xf data.tar.zst\n\n# compile schemas (/usr/share/glib-2.0/schemas/gschemas.compiled)\nglib-compile-schemas --targetdir path/to/testing/gschemas usr/share/glib-2.0/schemas/
```

----------------------------------------

TITLE: Running Native Tests for Flutter Plugin
DESCRIPTION: Details the command to run native tests (unit and integration) across various platforms using Flutter repository tools, specifying how to filter tests by platform.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_2

LANGUAGE: Shell
CODE:
```
dart run script/tool/bin/flutter_plugin_tools.dart native-test --android --ios --packages=<some_plugin_name>
```

----------------------------------------

TITLE: Configuring Installation Rules
DESCRIPTION: Sets up installation rules for the Flutter application including executable, ICU data, libraries, and assets. Handles different configurations for Debug vs Profile/Release builds.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Configuring Installation Settings for Flutter Application Bundle
DESCRIPTION: Sets up installation rules to create a relocatable bundle in the build directory, cleaning previous builds and setting the install prefix.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: CMake
CODE:
```
# === Installation ===
# By default, "installing" just makes a relocatable bundle in the build
# directory.
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

# Start with a clean build bundle directory every time.
install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
```

----------------------------------------

TITLE: Configuring Installation Rules for Flutter Application in CMake
DESCRIPTION: Sets up installation rules for the Flutter application, including the executable, ICU data, Flutter library, bundled libraries, and assets.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_6

LANGUAGE: CMake
CODE:
```
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Finding System-level Dependencies
DESCRIPTION: This snippet uses PkgConfig to find and link system-level dependencies like GTK, GLIB, and GIO, which are necessary for the Flutter library.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
# === Flutter Library ===
# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)
```

----------------------------------------

TITLE: Throwing Uncaught Future Error in Flutter Test
DESCRIPTION: This snippet shows a test case where an uncaught Future error is thrown. The error message is 'Who lives, who dies, who tells your story?'. The test is labeled as 'Exception handling in test harness - uncaught Future error'.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/integration_test/exception_handling_expectation.txt#2025-04-21_snippet_2

LANGUAGE: Dart
CODE:
```
main.<anonymous closure> (.+[/\\]dev[/\\]automated_tests[/\\]integration_test[/\\]exception_handling_test.dart:18:5)
```

----------------------------------------

TITLE: Disabling Multidex Support in Flutter Build
DESCRIPTION: Command-line flag to temporarily disable multidex support during app compilation, useful for debugging or specific build scenarios
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Android-Multidex-support.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
flutter build --no-multidex
```

----------------------------------------

TITLE: Running Single Test Method
DESCRIPTION: Command to run a specific test method in a test class using fully qualified class name and method name
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
./gradlew test --tests "com.flutter.gradle.BaseApplicationNameHandlerTest.setBaseName respects Flutter tool property"
```

----------------------------------------

TITLE: Add custom target for Flutter assembly
DESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers.  This target is likely used to trigger the build of the Flutter library using the custom command defined earlier.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_10

LANGUAGE: cmake
CODE:
```
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)
```

----------------------------------------

TITLE: Running Flutter Integration Tests for External Textures
DESCRIPTION: This snippet provides the command to run Flutter integration tests that check how external textures render within a Flutter app. The command utilizes the `flutter drive` command, specifying the main app file and a test driver file. Ensure you have the Flutter SDK installed and properly configured to run this command.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/external_textures/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
flutter drive lib/frame_rate_main.dart --driver test_driver/frame_rate_test.dart
```

----------------------------------------

TITLE: Flutter Library Dependencies Configuration
DESCRIPTION: Sets up system-level dependencies using pkg-config for GTK, GLIB, and GIO libraries required by Flutter Linux.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)
```

----------------------------------------

TITLE: Resetting Input Connection on WebView Unfocus (Java)
DESCRIPTION: This code resets the input connection back to the Flutter thread when the WebView loses focus, preventing text input from being stuck inside the WebView.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_8

LANGUAGE: Java
CODE:
```
InputAwareWebView.java#L128
```

----------------------------------------

TITLE: Setting Up Vertex Buffer in C++
DESCRIPTION: This code creates a vertex buffer with three vertices defining a triangle in normalized device coordinates.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_4

LANGUAGE: c++
CODE:
```
VertexBufferBuilder<VS::PerVertexData> vertex_buffer_builder;
vertex_buffer_builder.AddVertices({
    {{-0.5, -0.5}},
    {{0.0, 0.5}},
    {{0.5, -0.5}},
});

auto vertex_buffer = vertex_buffer_builder.CreateVertexBuffer(
      *context->GetResourceAllocator());
```

----------------------------------------

TITLE: Publishing Files to PM
DESCRIPTION: This snippet utilizes the `ffx repository publish` command to publish various FAR (Fuchsia Archive) files to the package manager (PM). These files include the Dart AOT runner integration test, the OOT (Out-of-Tree) Dart AOT runner, and the Dart AOT echo server.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_aot_runner/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_profile_x64/dart-aot-runner-integration-test-0.far

$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_profile_x64/oot_dart_aot_runner-0.far

$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_profile_x64/gen/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_echo_server/dart_aot_echo_server/dart_aot_echo_server.far
```

----------------------------------------

TITLE: Configuring GLFW Dependencies for Flutter Embedder in CMake
DESCRIPTION: Sets GLFW build options, finds OpenGL package, adds GLFW subdirectory, and links libraries to the main target.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw_drm/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
option(GLFW_BUILD_EXAMPLES "" OFF)
option(GLFW_BUILD_TESTS "" OFF)
option(GLFW_BUILD_DOCS "" OFF)
option(GLFW_INSTALL "" OFF)
find_package(OpenGL REQUIRED COMPONENTS EGL)
include_directories(${OPENGL_INCLUDE_DIRS})
add_subdirectory(${CMAKE_SOURCE_DIR}/../../third_party/glfw glfw)
target_link_libraries(flutter_glfw glfw OpenGL::EGL)
include_directories(${CMAKE_SOURCE_DIR}/../../third_party/glfw/include)
```

----------------------------------------

TITLE: Mock GLES Test Example in C++
DESCRIPTION: This test demonstrates how to use the mock GLES implementation. It initializes the mock GLES environment, calls GLES functions through the proc table, and verifies that the calls are recorded. The `MockGLES::Init()` creates and sets the mock, while `GetCapturedCalls()` retrieves the recorded function calls for assertion.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/renderer/backend/gles/test/README.md#2025-04-21_snippet_0

LANGUAGE: cc
CODE:
```
TEST(MockGLES, Example) {
  // Creates a mock GLES implementation and sets it as the current one.
  auto mock_gles = MockGLES::Init();
  auto& gl = mock_gles->GetProcTable();

  // Call the proc table methods as usual, or pass the proc table to a class
  // that needs it.
  gl.PushDebugGroupKHR(GL_DEBUG_SOURCE_APPLICATION_KHR, 0, -1, "test");
  gl.PopDebugGroupKHR();

  // Method names are recorded and can be inspected.
  //
  // Note that many built-ins, like glGetString, are not recorded (otherwise the // logs would be much bigger and less useful).
  auto calls = mock_gles->GetCapturedCalls();
  EXPECT_EQ(calls, std::vector<std::string>(
                       {"PushDebugGroupKHR", "PopDebugGroupKHR"}));
}
```

----------------------------------------

TITLE: Defining Standard Compilation Settings Function in CMake
DESCRIPTION: Creates a reusable function to apply standard compilation settings to targets including C++17 support, warning levels, and exception handling configurations.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()
```

----------------------------------------

TITLE: Applying Standard Compilation Settings in CMake
DESCRIPTION: This function applies standard compilation settings to C++ targets, enabling advanced C++ features and setting compiler options. It's designed to avoid altering defaults that might affect plugins and requires CMake to support feature-specific compile options. The function primarily sets exception-handling flags and warnings, allowing builds to use C++ standards specified in parameters.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
# Use Unicode for all projects.
add_definitions(-DUNICODE -D_UNICODE)

# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()
```

----------------------------------------

TITLE: Setting Up Flutter Tool Backend
DESCRIPTION: Configures the Flutter tool backend with custom commands for generating necessary files and libraries. Creates a phony target to ensure proper rebuilding of Flutter components.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
  ${CPP_WRAPPER_SOURCES_APP}
)
```

----------------------------------------

TITLE: Creating a TextPainter with FlutterTest Font in Dart
DESCRIPTION: This snippet demonstrates how to create a TextPainter using the FlutterTest font, testing the line metrics such as height, ascent, descent, and width of the text. It is a unit test example meant to confirm expectations about text property calculations.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Flutter-Test-Fonts.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
final painter = TextPainter(
  text: const TextSpan(
    text: 'text',
    style: TextStyle(fontSize: 14.0, /* "fontFamily: 'FlutterTest'" is implied */),
  ),
  textDirection: TextDirection.ltr,
  textScaleFactor: 1.0,
);
final lineMetrics = painter.computeLineMetrics().first;

expect(lineMetrics.height, 14.0);
expect(lineMetrics.ascent, 10.5); // 0.75em * 14.0pt
expect(lineMetrics.descent, 3.5); // 0.25em * 14.0pt
// 'text' is 4 glyphs. Most glyphs are as wide as they are tall.
expect(lineMetrics.width, 14.0 * 4);
```

----------------------------------------

TITLE: Cold Reloading Flutter Apps with _flutter.runInView Protocol
DESCRIPTION: Performs a "cold reload" of a running application where the shell remains but the root isolate is restarted with new configuration. This is used in development workflow when the user requests a reload or presses the play button. The method requires viewId, mainScript, packagesFile, and assetDirectory arguments.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "type": "Success",
  "view": {
    "type": "FlutterView",
    "id": "_flutterView/0x104e0ab58",
    "isolate": {
      "type": "@Isolate",
      "fixedId": true,
      "id": "isolates/1056589762",
      "name": "main.dart$main-1056589762",
      "number": 1056589762
    }
  }
}
```

----------------------------------------

TITLE: Android Build Gradle Minimum SDK Configuration
DESCRIPTION: Set the minimum SDK version required for hybrid composition support
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_5

LANGUAGE: groovy
CODE:
```
android {
    defaultConfig {
        minSdkVersion 19
    }
}
```

----------------------------------------

TITLE: Configuring Flutter Windows Runner Executable in CMake
DESCRIPTION: Sets up the Windows executable target for a Flutter application with necessary source files including window management, main entry point, utilities, and generated plugin registrations. Includes resource files for Windows application manifests.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)
```

----------------------------------------

TITLE: Dart Deprecation Syntax Template
DESCRIPTION: Provides a template for the required syntax for deprecating APIs in Dart within the Flutter framework. This template includes placeholders for the description of how to migrate, the brief motivation for breaking the API, and the beta version at the time of deprecation. This standardized format allows for automated detection and removal of deprecated APIs.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_6

LANGUAGE: dart
CODE:
```
@Deprecated(
  '[description of how to migrate] '
  '[brief motivation for why we are breaking the API] '
  'This feature was deprecated after [beta version at time of deprecation].'
)
```

----------------------------------------

TITLE: Creating Impeller Renderer in C++
DESCRIPTION: Initializes an Impeller renderer using the created context.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_10

LANGUAGE: c++
CODE:
```
auto renderer = std::make_shared<Renderer>(context);
```

----------------------------------------

TITLE: Defining Standard Compilation Settings Function
DESCRIPTION: Creates a function to apply standard C++17 compilation settings and options to targets including warning levels and exception handling.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()
```

----------------------------------------

TITLE: Installing Android Platform Tools on Linux
DESCRIPTION: This command uses apt-get to install the Android platform tools on Linux. It provides the necessary components for connecting to Android devices for debugging and testing Flutter apps.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
"sudo apt-get install android-tools-adb"
```

----------------------------------------

TITLE: Adding Application ID Preprocessor Definition
DESCRIPTION: Adds a preprocessor definition for the application ID, which allows the C++ code to access the application identifier at compile time.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")
```

----------------------------------------

TITLE: Flutter Plugin Wrapper Configuration
DESCRIPTION: Configures the Flutter plugin wrapper library with core and plugin-specific source files. Sets up compilation flags and dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)
apply_standard_settings(flutter_wrapper_plugin)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  POSITION_INDEPENDENT_CODE ON)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  CXX_VISIBILITY_PRESET hidden)
target_link_libraries(flutter_wrapper_plugin PUBLIC flutter)
target_include_directories(flutter_wrapper_plugin PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_plugin flutter_assemble)
```

----------------------------------------

TITLE: Dart Skipped Test with Intended Tag
DESCRIPTION: Shows how to skip a test that doesn't make sense to run under specific conditions, such as a feature available only on a particular platform or environment. It requires the `[intended]` tag with a short description of why the skip is needed. It is used to mark tests that by design should not be tested under specific condition.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_8

LANGUAGE: dart
CODE:
```
skip: isBrowser, // [intended] There are no default transitions to test on the web.
```

----------------------------------------

TITLE: Running iOS Tests
DESCRIPTION: This snippet describes the use of a shell script to run tests for a Flutter app on an iOS simulator. It is essential for validating the functionality of the app in a controlled environment.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios_scenario_app/README.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
"#!/bin/bash\nset -e\n\n# Script to run iOS tests for the Flutter scenario app.\n# This should be executed from the root of the Flutter repository.\n\ncd ios\n\n# Run tests using xcodebuild\nxcodebuild -workspace Runner.xcworkspace -scheme Runner -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' test"
```

----------------------------------------

TITLE: Building Flutter in Profile Mode
DESCRIPTION: Commands for building Flutter in profile mode for Android and iOS. Profile mode is similar to release mode but enables performance profiling tools and tracing.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Flutter's-modes.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
sky/tools/gn --android --runtime-mode=profile
sky/tools/gn --ios --runtime-mode=profile
```

----------------------------------------

TITLE: Applying Standard Compilation Settings
DESCRIPTION: Defines a function to apply standard compilation settings to CMake targets, enforcing C++17 standards, warnings, and exception handling. These settings are critical for consistency across multiple targets, especially beneficial for plugin development.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()
```

----------------------------------------

TITLE: Generating AOT Snapshot with Size Information in Flutter
DESCRIPTION: This bash command demonstrates how to use gen_snapshot to generate an AOT snapshot with additional size information output to a JSON file. It includes various flags for configuration and specifies input and output paths.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/benchmarks/Comparing-AOT-Snapshot-Sizes.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$FLUTTER_ENGINE/out/host_debug_unopt/gen_snapshot                    \
  --print-instructions-sizes-to=$SUMMARY_LOCATION                    \
  --causal_async_stacks                                              \
  --packages=.packages                                               \
  --deterministic                                                    \
  --snapshot_kind=app-aot-blobs                                      \
  --vm_snapshot_data=build/aot/vm_snapshot_data                      \
  --isolate_snapshot_data=build/aot/isolate_snapshot_data            \
  --vm_snapshot_instructions=build/aot/vm_snapshot_instr             \
  --isolate_snapshot_instructions=build/aot/isolate_snapshot_instr   \
  build/aot/app.dill
```

----------------------------------------

TITLE: Setting Minimum CMake Version and Project Configuration
DESCRIPTION: Establishes the minimum required CMake version, sets the project name, and defines the language as C++
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(ui LANGUAGES CXX)
```

----------------------------------------

TITLE: Flutter Run Non-Resident Mode
DESCRIPTION: Command modifier that makes the flutter run command return immediately after app launch.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/The-flutter-run-variants.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
--no-resident
```

----------------------------------------

TITLE: Defining Standard Build Settings Function in CMake
DESCRIPTION: Creates a function to apply standard compilation settings to build targets, including C++14 support, wall warnings as errors, and optimization flags for non-debug builds.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()
```

----------------------------------------

TITLE: Configuring Windows Flutter Runner Executable in CMake
DESCRIPTION: Defines a CMake executable target for a Flutter Windows application. It includes all necessary source files, applies standard build settings, and adds version information. The configuration also handles Windows-specific dependencies and ensures proper linkage with Flutter libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the build version.
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")

# Disable Windows macros that collide with C++ standard library functions.
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")

# Add dependency libraries and include directories. Add any application-specific
# dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: Configuring Standard Compilation Settings Function in CMake for Flutter
DESCRIPTION: Defines a function to apply standard compilation settings to targets. This function sets C++14 standard, compiler warnings, optimization levels, and debug definitions.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()
```

----------------------------------------

TITLE: Configuring CMake for Flutter Gallery Project
DESCRIPTION: This code snippet sets up the basic configuration for the 'flutter_gallery' project using CMake. It defines the project name and languages, enforces specific CMake policies and handles multi-configuration setups. Dependencies include CMake version 3.14 or higher, and it requires setting up the appropriate build types for the Flutter project.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(flutter_gallery LANGUAGES CXX)

set(BINARY_NAME "flutter_gallery")

cmake_policy(VERSION 3.14...3.25)

set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")
```

----------------------------------------

TITLE: Dart Comment Example (Good)
DESCRIPTION: Illustrates the correct way to start a sentence in Dart documentation. The sentence begins with a capital letter, adhering to grammar rules. It also demonstrates the use of square brackets to reference a parameter that is also a property.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
// GOOD

/// The [foo] argument must not be null.
```

----------------------------------------

TITLE: Setting Up Flutter Library and Build Rules
DESCRIPTION: The snippet sets the path for Flutter-managed directories and includes Flutter-specific build scripts. It integrates Flutter libraries and tools necessary for compilation and plugin management.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})
add_subdirectory("runner")
include(flutter/generated_plugins.cmake)
```

----------------------------------------

TITLE: Obfuscated Stack Trace in Release Mode
DESCRIPTION: Example of a minified stack trace generated in release mode, showing obfuscated class and method names that are difficult to read and debug
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/web/Debugging-issues-on-the-Web.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
Uncaugh TypeError: Cannot read property 'c' of undefined js_helper.dart:1234
    at a3R.$0 (app.dart:123)
    at afG.b (util.dart:321)
```

----------------------------------------

TITLE: Retrieving InputConnection from Embedded Android View (Java)
DESCRIPTION: This code snippet shows how the Flutter Android embedding retrieves the InputConnection from the embedded Android View when it's the real target of the input.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_5

LANGUAGE: Java
CODE:
```
TextInputPlugin.java#L206
```

----------------------------------------

TITLE: Opening Generated Output Folder for Golden Files
DESCRIPTION: This snippet provides an example command for opening the generated output folder using the `open` command, which varies based on architecture and test suite. Ensure the specified directory exists and permissions allow opening.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/dart/README.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
open ../out/host_debug_unopt_arm64/gen/skia_gold_image_filter_test.dart_iplr
```

----------------------------------------

TITLE: Disabling Windows Macros that Conflict with C++ Standard Library
DESCRIPTION: Adds a compile definition to disable Windows MIN and MAX macros that would conflict with the C++ standard library functions through the NOMINMAX definition.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/runner/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")
```

----------------------------------------

TITLE: Apply Standard Compilation Settings
DESCRIPTION: Defines a function to apply standard compilation settings to a target. It sets the C++ standard to 14, adds compiler warnings and treats them as errors, and enables optimizations and disables debug asserts for non-Debug builds.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: cmake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "<$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "<$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()
```

----------------------------------------

TITLE: Starting ADB Server
DESCRIPTION: Command to start the Android Debug Bridge server for enabling communication with Android devices.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-Flutter-Driver-tests-with-Web.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
adb start-server
```

----------------------------------------

TITLE: Constructing Flutter Treemap URL
DESCRIPTION: Shows the URL pattern to access treemaps that visualize the component sizes within libflutter.so builds. The URL requires specifying the engine revision and build variant.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-disk-footprint.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
https://storage.googleapis.com/flutter_infra_release/flutter/<REVISION>/<VARIANT>/sizes/index.html
```

----------------------------------------

TITLE: Dartdoc Template Definition
DESCRIPTION: Illustrates how to define a reusable template in Dartdoc.  The template is defined using `{@template <id>}` and `{@endtemplate}` tags, where `<id>` is a unique identifier for the template.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
/// {@template <id>}
/// ...
/// {@endtemplate}
```

----------------------------------------

TITLE: Merging Flutter UI Code
DESCRIPTION: Copies existing app's UI code and assets into the new project structure. Requires source directories (`<existing-app-dir>/lib` and optionally `<existing-app-dir>/assets`) to exist. This step ensures the UI and assets are retained in the migration process.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-build-with-gradle.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
cp -r <existing-app-dir>/lib <appname>/

if [ -d "<existing-app-dir>/assets" ]; then
  cp -r <existing-app-dir>/assets <appname>/
fi
```

----------------------------------------

TITLE: Configuring Flutter Library and Headers
DESCRIPTION: Sets up the Flutter Windows library paths and header files, configuring them for building Flutter applications on Windows. Defines core Flutter library components and includes necessary header files.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")

list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Updating Mocks for Flutter Tests
DESCRIPTION: This snippet explains how to update mock files generated by Mockito for Flutter tests, ensuring they are in sync with the current API changes.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_4

LANGUAGE: Shell
CODE:
```
flutter pub run build_runner build
```

----------------------------------------

TITLE: Add e2e test for super_important_case (Dart)
DESCRIPTION: This code snippet defines an e2e test using the macroPerfTestE2E function to automatically navigate to the 'super_important_case' page and collect performance metrics. It includes optional parameters for page delay, duration, timeout, and custom body/setup functions to tailor the test to the specific scenario.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_1

LANGUAGE: Dart
CODE:
```
    // Copyright 2014 The Flutter Authors. All rights reserved.
    // Use of this source code is governed by a BSD-style license that can be
    // found in the LICENSE file.

    import 'package:flutter/gestures.dart';
    import 'package:flutter/widgets.dart';
    import 'package:flutter/foundation.dart';
    import 'package:flutter_test/flutter_test.dart';
    import 'package:macrobenchmarks/common.dart';

    import 'util.dart';

    void main() {
      macroPerfTestE2E(
        'super_important_case',
        kSuperImportantCaseRouteName,
        /* optional */ pageDelay: const Duration(seconds: 1),
        /* optional */ duration: const Duration(seconds: 3),
        /* optional */ timeout: const Duration(seconds: 30),
        /* optional */ body: (WidgetController controller) async {
            ...
        },
        /* optional */ setup: (WidgetController controller) async {
            ...
        },
      );
    }
```

----------------------------------------

TITLE: Fragment Shader for Animated Shading
DESCRIPTION: Fragment shader code that uses the `frag_info.time` uniform to mix between two colors, creating an animated shading effect. The `fract` value is adjusted based on whether the floor of the time is even or odd.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_15

LANGUAGE: glsl
CODE:
```
void main() {
  float floor = floor(frag_info.time);
  float fract = frag_info.time - floor;
  if (mod(int(floor), 2) == 0) {
    fract = 1.0 - fract;
  }
  frag_color = mix(v_color, v_color2, fract);
}
```

----------------------------------------

TITLE: Sample Output of AOT Snapshot Size Comparison in Flutter
DESCRIPTION: This plaintext snippet shows an example of the tabulated output produced by the compare_size.dart tool. It displays the differences in method sizes between two AOT snapshots, organized by library and method name.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/benchmarks/Comparing-AOT-Snapshot-Sizes.md#2025-04-21_snippet_2

LANGUAGE: plaintext
CODE:
```
+------------+----------------------------------------------------------+--------------+
| Library    | Method                                                   | Diff (Bytes) |
+------------+----------------------------------------------------------+--------------+
| dart:async | new ZoneSpecification.from                               |        +2136 |
| dart:async | runZoned                                                 |        +1488 |
| dart:async | new _CustomZone                                          |         +927 |
| dart:async | runZoned.<anonymous closure>                             |         +881 |
| dart:async | _rootFork                                                |         +504 |
| dart:async | _rootCreatePeriodicTimer                                 |         +500 |
| dart:async | _rootCreateTimer                                         |         +498 |
| dart:async | _rootRegisterUnaryCallback                               |         +485 |
| dart:async | _rootRegisterBinaryCallback                              |         +485 |
| dart:async | _rootRegisterCallback                                    |         +485 |
| dart:async | _rootPrint                                               |         +453 |
| dart:async | _CustomZone.fork                                         |         +396 |
| dart:async | _rootErrorCallback                                       |         +389 |
| dart:async | _CustomZone.bindUnaryCallbackGuarded                     |         +368 |
| dart:async | _rootHandleUncaughtError                                 |         +342 |
| dart:async | _CustomZone.runBinary                                    |         +296 |
| dart:async | _CustomZone.runUnary                                     |         +293 |
| dart:async | _CustomZone.[]                                           |         +291 |
| dart:async | _CustomZone.registerCallback                             |         +290 |
| dart:async | _CustomZone.run                                          |         +290 |
| dart:async | _CustomZone.registerUnaryCallback                        |         +290 |
| dart:async | _CustomZone.registerBinaryCallback                       |         +290 |
| dart:async | _CustomZone.runBinaryGuarded                             |         +289 |
| dart:async | _CustomZone.runUnaryGuarded                              |         +286 |
| dart:async | _RootZone.fork                                           |         +283 |
| dart:async | _CustomZone.bindCallback                                 |         +259 |
| dart:async | _CustomZone.bindUnaryCallback                            |         +259 |
| dart:async | _CustomZone.bindUnaryCallback.<anonymous closure>        |         +248 |
| dart:async | _RootZone.bindUnaryCallback.<anonymous closure>          |         +248 |
| dart:async | _CustomZone.bindUnaryCallbackGuarded.<anonymous closure> |         +248 |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
|            | [Stub] Type Test Type: class 'PopupMenuEntry'            |         -128 |
|            | [Stub] Type Test Type: class '_SyncIterator@0150898'     |         -128 |
|            | [Stub] Type Test Type: class 'PopupMenuItem'             |         -128 |
|            | [Stub] Type Test Type: class 'FormFieldState'            |         -128 |
|            | [Stub] Type Test Type: class 'PopupMenuButton'           |         -128 |
|            | [Stub] Type Test Type: class '_SyncIterator@0150898'     |         -131 |
|            | [Stub] Type Test Type: class '_SplayTreeMapNode@3220832' |         -139 |
|            | [Stub] Type Test Type: class '_SplayTreeMapNode@3220832' |         -165 |
| dart:io    | new Directory                                            |         -211 |
| dart:io    | new Link                                                 |         -211 |
+------------+----------------------------------------------------------+--------------+
Total change +24036 bytes.
```

----------------------------------------

TITLE: Include Generated Configuration
DESCRIPTION: Includes the generated CMake configuration from the ephemeral directory into the current build script. This assumes that 'generated_config.cmake' already exists and provides necessary build parameters.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
include(${EPHEMERAL_DIR}/generated_config.cmake)
```

----------------------------------------

TITLE: Optimized Color Burn Function with Simple Varying Branches in GLSL
DESCRIPTION: Illustrates an efficient implementation of a color burn function using simple varying branches. This approach is preferred over flattened branches for better performance across different GPU architectures, especially on modern SIMT devices.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_1

LANGUAGE: GLSL
CODE:
```
vec3 ColorBurn(vec3 dst, vec3 src) {
  vec3 color = 1 - min(vec3(1), (1 - dst) / src);
  if (1 - dst.r < kEhCloseEnough) {
    color.r = 1;
  }
  if (1 - dst.g < kEhCloseEnough) {
    color.g = 1;
  }
  if (1 - dst.b < kEhCloseEnough) {
    color.b = 1;
  }
  if (src.r < kEhCloseEnough) {
    color.r = 0;
  }
  if (src.g < kEhCloseEnough) {
    color.g = 0;
  }
  if (src.b < kEhCloseEnough) {
    color.b = 0;
  }
  return color;
}
```

----------------------------------------

TITLE: Configuring Build Settings for Flutter Runner in CMake
DESCRIPTION: This CMake snippet sets up the build environment for a Flutter Runner application. It specifies the minimum CMake version, defines the executable target, and configures build settings specific to the Flutter environment. Key parameters include `BINARY_NAME` for the target name, and `FLUTTER_VERSION` for versioning preprocessor definitions. Dependencies include Flutter libraries and application-specific dependencies defined in CMake variables.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the build version.
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")

# Disable Windows macros that collide with C++ standard library functions.
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")

# Add dependency libraries and include directories. Add any application-specific
# dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)

```

----------------------------------------

TITLE: Building Android Engine with Symbols for Profiling
DESCRIPTION: Configuration command to build the Android engine with symbols enabled using the --no-stripped flag for better profiling data. This sets up a profile mode build for arm64 architecture.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_cpu_profile.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
gn --no-lto --runtime-mode=profile --android --android-cpu=arm64 --no-stripped
```

----------------------------------------

TITLE: Defining ReactorGLES Worker Class in C++
DESCRIPTION: Creates a custom ReactorGLES::Worker subclass to handle OpenGL ES threading concerns.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_8

LANGUAGE: c++
CODE:
```
class ReactorWorker final : public impeller::ReactorGLES::Worker {
 public:
  ReactorWorker() = default;

  // |ReactorGLES::Worker|
  ~ReactorWorker() override = default;

  ReactorWorker(const ReactorWorker&) = delete;

  ReactorWorker& operator=(const ReactorWorker&) = delete;

  // |ReactorGLES::Worker|
  bool CanReactorReactOnCurrentThreadNow(
      const ReactorGLES& reactor) const override {
    return true;
  }
};
```

----------------------------------------

TITLE: Defining Flutter Linux Headers List in CMake
DESCRIPTION: Creates a list of Flutter Linux header files needed for the build process. These headers provide the interface for Flutter's integration with Linux platform functionality.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
```

----------------------------------------

TITLE: Device Information Structure in Dart
DESCRIPTION: Data structure returned by device.getDevices and device.added events containing device identification and capability information.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
{
  "id": "device_id",
  "name": "device_name",
  "platform": "platform_name",
  "category": "mobile|web|desktop",
  "platformType": "android|ios|linux|macos|fuchsia|windows|web",
  "ephemeral": true|false,
  "emulator": true|false,
  "emulatorId": "emulator_id"
}
```

----------------------------------------

TITLE: Setting Up Flutter Tool Backend Build Commands
DESCRIPTION: Configures custom commands for Flutter tool backend to generate necessary files. Uses a _phony_ non-existent file to force the command to run on each build, and sets up a flutter_assemble target that depends on the Flutter library and headers.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
# === Flutter tool backend ===
# _phony_ is a non-existent file to force this command to run every time,
# since currently there's no way to get a full input/output list from the
# flutter tool.
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)
```

----------------------------------------

TITLE: Using => Syntax in Flutter Widget Build Methods
DESCRIPTION: The snippet demonstrates how to apply the '=>' syntax in widget build methods for a more concise syntax while maintaining readability.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_22

LANGUAGE: dart
CODE:
```
    // GOOD, but slightly more verbose than necessary since it doesn't use =>
    @override
    Widget build(BuildContext context) {
      return PopupMenuButton<String>(
        onSelected: (String value) { print('Selected: $value'); },
        itemBuilder: (BuildContext context) {
          return <PopupMenuItem<String>>[
            PopupMenuItem<String>(
              value: 'Friends',
              child: MenuItemWithIcon(Icons.people, 'Friends', '5 new'),
            ),
            PopupMenuItem<String>(
              value: 'Events',
              child: MenuItemWithIcon(Icons.event, 'Events', '12 upcoming'),
            ),
          ];
        }
      );
    }

    // GOOD, does use =>, slightly briefer
    @override
    Widget build(BuildContext context) {
      return PopupMenuButton<String>(
        onSelected: (String value) { print('Selected: $value'); },
        itemBuilder: (BuildContext context) => <PopupMenuItem<String>>[
          PopupMenuItem<String>(
            value: 'Friends',
            child: MenuItemWithIcon(Icons.people, 'Friends', '5 new'),
          ),
          PopupMenuItem<String>(
            value: 'Events',
            child: MenuItemWithIcon(Icons.event, 'Events', '12 upcoming'),
          ),
        ]
      );
    }
```

----------------------------------------

TITLE: Running Flutter App with Locally Built Engine for Profiling
DESCRIPTION: Command to run a Flutter app using a locally built engine, specifying engine paths and enabling profile mode with Impeller. This connects the app to the custom engine build with profiling capabilities.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_cpu_profile.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
flutter --local-engine android_profile_arm64 --local-engine-host host_profile_arm64 run --enable-impeller --profile
```

----------------------------------------

TITLE: Running Flutter Tools from Source
DESCRIPTION: Command to run Flutter Tools directly from source code using dart command
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
dart bin/flutter_tools.dart
```

----------------------------------------

TITLE: Building Flutter Engine for Android
DESCRIPTION: This command builds an up-to-date Flutter engine for Android. It assumes you are in the `$ENGINE/src` directory. You can specify different arguments and build variants as needed.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
ninja -j1000 -C ../out/android_debug_unopt_arm64 android_jar
```

----------------------------------------

TITLE: Setting Preprocessor Definitions for Flutter Version
DESCRIPTION: This snippet sets various preprocessor definitions for the Flutter version being built. These definitions include version number components such as major, minor, patch, and build, which can be used in the application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")
```

----------------------------------------

TITLE: Adding Dependency on Flutter Assembly
DESCRIPTION: Adds a dependency on the `flutter_assemble` custom target to the `flutter` interface library. This ensures that `flutter_assemble` is built before any target that depends on the `flutter` library.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_12

LANGUAGE: cmake
CODE:
```
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Starting DDS with VM Service URI in Flutter
DESCRIPTION: This snippet demonstrates how to start a Dart Development Service instance using the 'dart development-service' command with a specific VM service URI. It shows the command execution and the resulting JSON-encoded connection information output.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-the-Dart-Development-Service-(DDS)-and-Flutter-DevTools-with-a-custom-Flutter-Engine-Embedding.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ dart development-service --vm-service-uri=http://127.0.0.1:59113/BBPoXnZUWFU=/ --serve-devtools
{"state":"started","ddsUri":"http://127.0.0.1:59123/tbrR0DzW2j8=/","devToolsUri":"http://127.0.0.1:59123/tbrR0DzW2j8=/devtools?uri=ws://127.0.0.1:59123/tbrR0DzW2j8=/ws","dtd":{"uri":"ws://127.0.0.1:59122/R1LbdlhtkUygRWNA"}}
```

----------------------------------------

TITLE: Enabling Unicode Support in CMake
DESCRIPTION: Adds Unicode support for all project targets through preprocessor definitions.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
# Use Unicode for all projects.
add_definitions(-DUNICODE -D_UNICODE)
```

----------------------------------------

TITLE: Updating Repositories in Gradle Build Files - Flutter
DESCRIPTION: This snippet modifies the `repositories` section in `android/build.gradle` to use Google’s Maven repository instead of a direct URL, necessary for newer plugin updates in Flutter projects.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_1

LANGUAGE: Gradle
CODE:
```
repositories {
    google()
    jcenter()
}
```

----------------------------------------

TITLE: Installing bundled plugin libraries for Flutter Linux
DESCRIPTION: Sets up installation rules for each bundled plugin library, placing them in the lib directory of the Flutter application bundle.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_13

LANGUAGE: CMake
CODE:
```
foreach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})
  install(FILES "${bundled_library}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endforeach(bundled_library)
```

----------------------------------------

TITLE: Gradle Dependency Refresh Command
DESCRIPTION: Command to force refresh dependencies in a Gradle project, useful for debugging and ensuring latest dependency versions are retrieved
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/Plugins-and-Packages-repository-structure.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./gradlew app:dependencies --configuration <SOME_TASK> --refresh-dependencies
```

----------------------------------------

TITLE: Configuring Flutter App Wrapper Library
DESCRIPTION: Sets up the Flutter application wrapper library for the runner with core and app-specific source files. Configures compilation settings and dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
add_library(flutter_wrapper_app STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_APP}
)
apply_standard_settings(flutter_wrapper_app)
target_link_libraries(flutter_wrapper_app PUBLIC flutter)
target_include_directories(flutter_wrapper_app PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_app flutter_assemble)
```

----------------------------------------

TITLE: Flutter Tool Backend Custom Command
DESCRIPTION: Defines a custom build command to generate Flutter libraries and wrapper sources using the Flutter tool backend
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/flutter/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: cmake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
```

----------------------------------------

TITLE: Configuring CMake for Flutter GLFW Embedder
DESCRIPTION: This CMake script sets up a build configuration for a Flutter embedder using GLFW. It requires CMake version 3.15 or higher and sets the C++ standard to C++11. The script includes directory paths for GLFW and the Flutter engine, configures build options for GLFW, and links the necessary libraries. Prerequisites include a local build of the Flutter engine and GLFW sources.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.15)
project(FlutterEmbedderGLFW)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )
set(FLUTTER_ENGINE_VARIANT "host_debug_unopt" CACHE STRING "")

add_executable(flutter_glfw FlutterEmbedderGLFW.cc)
```

LANGUAGE: CMake
CODE:
```
############################################################
# GLFW
############################################################
option(GLFW_BUILD_EXAMPLES "" OFF)
option(GLFW_BUILD_TESTS "" OFF)
option(GLFW_BUILD_DOCS "" OFF)
option(GLFW_INSTALL "" OFF)
add_subdirectory(${CMAKE_SOURCE_DIR}/../../third_party/glfw glfw)
target_link_libraries(flutter_glfw glfw)
include_directories(${CMAKE_SOURCE_DIR}/../../third_party/glfw/include)
```

LANGUAGE: CMake
CODE:
```
############################################################
# Flutter Engine
############################################################
# This is assuming you\'ve built a local version of the Flutter Engine.  If you
downloaded yours is from the internet you\'ll have to change this.
include_directories(${CMAKE_SOURCE_DIR}/../../shell/platform/embedder)
find_library(FLUTTER_LIB flutter_engine PATHS ${CMAKE_SOURCE_DIR}/../../../out/${FLUTTER_ENGINE_VARIANT})
target_link_libraries(flutter_glfw ${FLUTTER_LIB})

# Copy the flutter library here since the shared library
# name is `./libflutter_engine.dylib`.
add_custom_command(
        TARGET flutter_glfw POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
                ${FLUTTER_LIB}
                ${CMAKE_CURRENT_BINARY_DIR})
```

----------------------------------------

TITLE: Build Configuration and Mode Selection
DESCRIPTION: Handles multi-configuration and single-configuration build scenarios, setting default build types and configurations for Debug, Profile, and Release modes
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
```

----------------------------------------

TITLE: Configuring ktlint Ruleset and Baseline
DESCRIPTION: Details how to set the ktlint ruleset version and baseline configuration in Android Studio to match the Flutter repository's standards
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Kotlin-android-studio-formatting.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
2. Set the ruleset to be the same as the version used in [`.ci.yaml`](../../../.ci.yaml) (as of writing this is 1.5), and the baseline to be `dev/bots/test/analyze-test-input/ktlint-baseline.xml`.

   a. Both of these options should be available under `Android Studio > Settings > Tools > ktlint`.
```

----------------------------------------

TITLE: Add RaisedButton to HomePage's ListView (Dart)
DESCRIPTION: This code snippet adds a RaisedButton to the HomePage's ListView in the macrobenchmarks app, enabling manual testers and the Flutter driver to navigate to the new 'super_important_case' page. It uses the kSuperImportantCaseRouteName constant for navigation and provides a user-friendly text label.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_0

LANGUAGE: Dart
CODE:
```
       RaisedButton(
         key: const Key(kSuperImportantCaseRouteName),
         child: const Text('Super Important Case'),
         onPressed: () {
           Navigator.pushNamed(context, kSuperImportantCaseRouteName);
         },
       ),
```

----------------------------------------

TITLE: Flowchart Diagram of Android Backend Selection Logic
DESCRIPTION: A mermaid flowchart showing the decision process for selecting between Vulkan and OpenGL ES backends based on device capabilities, Android API level, Vulkan version, and extension support.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android.md#2025-04-21_snippet_0

LANGUAGE: mermaid
CODE:
```
flowchart TD
    start[Start]
    android_api{Check Android API}
    device_support{Device Supports Vulkan}
    vulkan_version{Vulkan Version Check}
    vulkan_exts{Vulkan Supports Extensions}
    vulkan[Use Vulkan Backend]
    opengl[Use OpenGL Backend]
    
    start-->device_support
    
    device_support-->|Yes|android_api
    device_support-->|No|opengl
    
    android_api-->|>= Android 29|vulkan_version
    android_api-->|< Android 29|opengl

    vulkan_version-->|>= Vulkan 1.1|vulkan_exts
    vulkan_version-->|< Vulkan 1.1|opengl

    vulkan_exts-->|Supports Extensions|vulkan
    vulkan_exts-->|Doesn't Support Extensions|opengl
```

----------------------------------------

TITLE: Configuring Installation Paths in CMake
DESCRIPTION: Sets up installation directory paths for the application bundle, ensuring the executable can run in place which is required for Visual Studio integration.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: CMake
CODE:
```
# === Installation ===
# Support files are copied into place next to the executable, so that it can
# run in place. This is done instead of making a separate bundle (as on Linux)
# so that building and running from within Visual Studio will work.
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
# Make the "install" step default, as it's required to run.
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")
```

----------------------------------------

TITLE: Create PerfTest for super_important_case (Dart)
DESCRIPTION: This code snippet defines a function `createSuperImportantCasePerfE2ETest` that returns a `TaskFunction`. This TaskFunction uses `PerfTest.e2e` to define the performance test. It specifies the location of macrobenchmarks and the path to the e2e test.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_4

LANGUAGE: Dart
CODE:
```
   TaskFunction createSuperImportantCasePerfE2ETest() {
     return PerfTest.e2e(
       '${flutterDirectory.path}/dev/benchmarks/macrobenchmarks',
       'test/super_important_case_e2e.dart',
     ).run;
   }
```

----------------------------------------

TITLE: Starting SafariDriver
DESCRIPTION: Command to begin SafariDriver on a designated port on macOS devices. Ensure SafariDriver is enabled.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-Flutter-Driver-tests-with-Web.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
./usr/bin/safaridriver --port=4444
```

----------------------------------------

TITLE: Running Single Test Class
DESCRIPTION: Command to run all tests in a specific test class using fully qualified class name
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
./gradlew test --tests com.flutter.gradle.BaseApplicationNameHandlerTest
```

----------------------------------------

TITLE: Flutter Device List Response - JSON-RPC
DESCRIPTION: Example JSON-RPC response containing list of available devices with their properties
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
[{"id":2,"result":[{"id":"702ABC1F-5EA5-4F83-84AB-6380CA91D39A","name":"iPhone 6","platform":"ios_x64","available":true}]}]
```

----------------------------------------

TITLE: Enabling Vulkan Validation in AndroidManifest.xml
DESCRIPTION: This XML snippet shows how to enable Vulkan Validation Layers in an Android application by adding a meta-data tag to the AndroidManifest.xml file. It should be placed under the <application> tag to take effect.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_validation_layers.md#2025-04-21_snippet_1

LANGUAGE: xml
CODE:
```
<meta-data
    android:name="io.flutter.embedding.android.EnableVulkanValidation"
    android:value="true" />
```

----------------------------------------

TITLE: Comparing Values Between Arbitrary Arithmetic Types in C++
DESCRIPTION: `StrictNumeric` and `ClampedNumeric` types provide well-defined comparisons between arbitrary arithmetic types. This snippet shows how to use `MakeStrictNum` to allow a correct comparison between an unsigned value and a signed upper bound, which might otherwise trigger compiler warnings or errors.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_4

LANGUAGE: cpp
CODE:
```
bool foo(unsigned value, int upper_bound) {
  // Converting to StrictNumeric allows this comparison to work correctly.
  if (MakeStrictNum(value) >= upper_bound)
    return false;
```

----------------------------------------

TITLE: Creating a New iOS Memory Test in Flutter
DESCRIPTION: Steps to create a new iOS memory test case and add it to Flutter's device lab. This involves writing a Flutter driver test, adding an entry to the manifest, and creating a task file with memory measurement enabled.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-memory-test-for-Flutter.md#2025-04-22_snippet_2

LANGUAGE: Dart
CODE:
```
1. Write (or reuse) a normal Flutter driver test for the app in files named like `test_driver/some_memory_perf.dart` and `test_driver/some_memory_perf_test.dart`.
2. Add a `some_memory_perf` entry to [manifest.yaml][manifest]
3. Add a `some_memory_perf.dart` file to [dev/devicelab/bin/tasks][tasks] folder that specifies `measureMemory: true`.
```

----------------------------------------

TITLE: Configuring Flutter Wrapper Libraries
DESCRIPTION: Creates static libraries for Flutter wrapper sources, including core, plugin, and app components
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)

add_library(flutter_wrapper_app STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_APP}
)
```

----------------------------------------

TITLE: Applying Standard Target Settings
DESCRIPTION: Defines a function to apply standard compiler features, options, and definitions to a target. This function sets the C++ standard, enables warnings, and adds optimization/debugging flags based on the configuration.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_7

LANGUAGE: cmake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "<$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "<$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()
```

----------------------------------------

TITLE: Calculating a Buffer Size with Checked Arithmetic in C++
DESCRIPTION: The `CheckedNumeric` template detects overflows and boundary conditions during arithmetic operations. The `AssignIfValid` method will cause a compile error if the result is ignored. This code demonstrates using `CheckAdd` and `CheckMul` with `CheckedNumeric` to calculate a buffer size and handle potential overflow errors.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_5

LANGUAGE: cpp
CODE:
```
// Calculate the buffer size and detect if an overflow occurs.
size_t size;
if (!CheckAdd(kHeaderSize, CheckMul(count, kItemSize)).AssignIfValid(&size)) {
  // Handle an overflow error...
}
```

----------------------------------------

TITLE: Retrieving Skia SkSL Shader Artifacts with _flutter.getSkSLs Protocol
DESCRIPTION: Retrieves Skia SkSL shader artifacts for warming up shader compilations to avoid jank. Requires prior preparation using 'flutter run --cache-sksl' or 'flutter drive --cache-sksl' and triggering animations. The response contains Base32 encoded keys and Base64 encoded shader content.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
{
  "type": "GetSkSLs",
  "SkSLs": {
    "CAZAAAACAAAAAAAAAAABGAABAAOAAFAADQAAGAAQABSQAAAAAAAAAAAAAABAAAAAEAAGGAA": "eQ=="
  }
}
```

----------------------------------------

TITLE: Correct compileOptions and kotlinOptions Configuration
DESCRIPTION: This snippet demonstrates the correct way to configure `compileOptions` and `kotlinOptions` in an Android Gradle build file.  It sets the `sourceCompatibility`, `targetCompatibility`, and `jvmTarget` to the same Java version using `JavaVersion.*` constants. The `jvmTarget` should be the same version as the compile SDK to avoid potential issues.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_10

LANGUAGE: Groovy
CODE:
```
// Ok
compileOptions {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11.toString()
}
```

----------------------------------------

TITLE: Updating Dependency Classpath in Flutter-Android Project
DESCRIPTION: This change updates Android build tools classpath version from 2.3.3 to 3.0.1, ensuring compatibility with the newer Gradle version used by Flutter tooling.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_2

LANGUAGE: Gradle
CODE:
```
dependencies {
    classpath 'com.android.tools.build:gradle:3.0.1'
}
```

----------------------------------------

TITLE: Publishing Files to Package Manager
DESCRIPTION: These commands publish the generated package files to the Fuchsia package manager (PM), making them accessible for integration testing.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_jit_runner/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_debug_x64/dart-jit-runner-integration-test-0.far

$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_debug_x64/oot_dart_jit_runner-0.far

$FUCHSIA_DIR/.jiri_root/bin/ffx repository publish $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files --package-archive $ENGINE_DIR/out/fuchsia_debug_x64/gen/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_echo_server/dart_jit_echo_server/dart_jit_echo_server.far
```

----------------------------------------

TITLE: Installing Plugin Bundled Libraries
DESCRIPTION: Installs any bundled libraries from plugins to the lib directory within the build bundle. This ensures that any native dependencies of plugins are included in the final application bundle.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_19

LANGUAGE: cmake
CODE:
```
if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Configuring Cross-Build Root Filesystem Settings
DESCRIPTION: Configures system root settings for cross-building, including root path modes for programs, packages, libraries, and includes.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()
```

----------------------------------------

TITLE: Setting Up Flutter Library Paths
DESCRIPTION: The snippet sets up various paths that are essential for the Flutter library, such as the library file, ICU data file, and project build directory.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/libflutter_linux_gtk.so")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/lib/libapp.so" PARENT_SCOPE)
```

----------------------------------------

TITLE: Defining Native Activity APK Configuration in GNI
DESCRIPTION: This snippet sets up a native activity APK configuration in GNI. It specifies the name of the APK, marks it as test-only, lists the source files, and includes dependencies necessary for building the APK. This is a crucial step for integrating unit tests into the native activity framework.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/android/native_activity/README.md#2025-04-21_snippet_0

LANGUAGE: gni
CODE:
```
native_activity_apk("apk_unittests") {
  apk_name = "toolkit_unittests"

  testonly = true

  sources = [ "toolkit_android_unittests.cc" ]

  deps = [
    ":unittests_lib",
    "//flutter/testing/android/native_activity:gtest_activity",
  ]
}
```

----------------------------------------

TITLE: Updating Gradle Build Configuration - Groovy
DESCRIPTION: These Gradle configuration updates involve changing the compile SDK version, target SDK version, and other references in build.gradle files to ensure compatibility with the new Android API version.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Engine's-Android-API-version.md#2025-04-21_snippet_2

LANGUAGE: groovy
CODE:
```
    // Update references in the specified files
* `DEPS`: Change the version parameter under `flutter/android/sdk/all/${{platform}}` to the newly uploaded CIPD version tag, e.g. `'version': 'version:30r2'`
* `tools/javadoc/gen_javadoc.py`: Bump the reference to `android-XX` in `classpath` to the latest version.
* `tools/cipd/android_embedding_bundle/build.gradle`: Bump `compileSdkVersion XX` to the latest version.
* `shell/platform/android/test_runner/build.gradle`: Bump `compileSdkVersion XX` to the latest version.
* `shell/platform/android/AndroidManifest.xml`: Bump `android:targetSdkVersion=XX` to the latest version.
* `testing/android/native_activity/native_activity.gni`: Bump the reference to `build-tools/XX` in `android_buildtools` to the latest **build-tools** version and the reference to `android-XX` in `android_jar` to the latest version.
```

----------------------------------------

TITLE: Defining Application Target in CMake
DESCRIPTION: This snippet defines the executable target for the Flutter runner application. It specifies the binary name and lists all source files that will be compiled into the application. Changes to BINARY_NAME should be made in the top-level CMakeLists.txt to avoid issues with running the Flutter application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)
```

----------------------------------------

TITLE: AGP Dependency Declaration with Comment
DESCRIPTION: This snippet shows a declaration of the Android Gradle Plugin (AGP) dependency. This includes a comment explaining why a specific, potentially older, version is being used (e.g., testing backwards compatibility).  Make sure this version is compatible with the target and compile SDK.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_7

LANGUAGE: Groovy
CODE:
```
// OK
dependencies {
    // Testing backwards compatability of feature XYZ
    classpath "com.android.tools.build:gradle:7.5.2"
}
```

----------------------------------------

TITLE: Clangd Configuration for C++ Code Completion
DESCRIPTION: This JSONC snippet shows the configuration for `clangd` to enable C++ code completion in VS Code. It requires pointing `--compile-commands-dir` to an Android build output directory, like `out/android_debug_unopt_arm64`. Remember to adjust this path when working with other parts of the engine.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_8

LANGUAGE: JSON
CODE:
```
{
  /* ... */
  "clangd.path": "buildtools/mac-arm64/clang/bin/clangd",
  "clangd.arguments": ["--compile-commands-dir=out/android_debug_unopt_arm64"]
  /* ... */
}
```

----------------------------------------

TITLE: Configuring Flutter Wrapper Libraries
DESCRIPTION: Creates static libraries for Flutter plugin and app wrappers with core, plugin, and app sources
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)
apply_standard_settings(flutter_wrapper_plugin)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  POSITION_INDEPENDENT_CODE ON
  CXX_VISIBILITY_PRESET hidden
)
target_link_libraries(flutter_wrapper_plugin PUBLIC flutter)
target_include_directories(flutter_wrapper_plugin PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_plugin flutter_assemble)
```

----------------------------------------

TITLE: Configuring Cross-Building Support in CMake for Flutter Linux
DESCRIPTION: Setup for cross-building environment when a target platform sysroot is specified. This configures the root filesystem and find behavior when cross-compiling the Flutter application.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
# Root filesystem for cross-building.
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()
```

----------------------------------------

TITLE: Updating Android Gradle Properties for Flutter
DESCRIPTION: This snippet updates the Gradle wrapper version in the `gradle-wrapper.properties` file from 3.3 to 4.1, aligning with new Flutter projects after the specified update.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_0

LANGUAGE: Gradle
CODE:
```
In `android/gradle/wrapper/gradle-wrapper.properties`, replace `3.3` with `4.1` in the last line.
```

----------------------------------------

TITLE: Configuring Windows Flutter Executable Target
DESCRIPTION: Defines the main executable target for a Windows Flutter application with necessary source files. Includes core application files and Flutter-generated resources.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)
```

----------------------------------------

TITLE: Configuring Flutter Plugin Wrapper Library
DESCRIPTION: Creates and configures the Flutter wrapper library for plugins, including core implementations and plugin registrar sources with appropriate compilation settings.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)
apply_standard_settings(flutter_wrapper_plugin)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  POSITION_INDEPENDENT_CODE ON)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  CXX_VISIBILITY_PRESET hidden)
target_link_libraries(flutter_wrapper_plugin PUBLIC flutter)
target_include_directories(flutter_wrapper_plugin PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_plugin flutter_assemble)
```

----------------------------------------

TITLE: Running prepare_package.dart locally in Dart
DESCRIPTION: This snippet demonstrates how to run the `prepare_package.dart` script locally for packaging Flutter releases. It requires depot_tools in the PATH and authentication with Google Cloud Storage via gsutil. It also requires specifying the temp directory, revision, branch, and publish flags.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/README.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
"dart [path to your normal Flutter repo]/dev/bots/prepare_package.dart\n  --temp_dir=. --revision=[revision to package] --branch=[branch to deploy to]\n  --publish"
```

----------------------------------------

TITLE: Full Autosubmit Configuration Example - YAML
DESCRIPTION: This snippet provides a complete configuration example for the Autosubmit bot, showcasing all available configuration keys and their default values. It helps users understand how to set up the bot for optimal operation.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Autosubmit-bot.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
default_branch: main
allow_config_override: false
auto_approval_accounts:
  - skia-flutter-autoroll
  - engine-flutter-autoroll
  - dependabot[bot]
  - dependabot
  - DartDevtoolWorkflowBot
approving_reviews: 2
approval_group: flutter-hackers
run_ci: true
support_no_review_revert: true
required_checkruns_on_revert:
  - ci.yaml validation
```

----------------------------------------

TITLE: Dry Run Unpublish Package (Dart/Shell)
DESCRIPTION: This snippet demonstrates the command to perform a dry run of the `unpublish_package.dart` script. It's used to preview the actions that will be taken when unpublishing a Flutter package before actually executing the changes. It requires specifying a temporary directory and the revision to unpublish.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/README.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
"dart ./unpublish_package.dart --temp_dir=/tmp/foo --revision d444a455de87a2e40b7f576dc12ffd9ab82fd491"
```

----------------------------------------

TITLE: Initializing CMake and Project
DESCRIPTION: This snippet initializes CMake with a minimum required version and defines the project named 'runner' using CXX languages.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)
```

----------------------------------------

TITLE: Adding goldctl Dependency in CI Tasks
DESCRIPTION: This YAML snippet shows how to configure a CI task by adding the goldctl dependency, which is necessary for interfacing with Skia Gold during golden file testing. The task is defined in a top-level .ci.yaml file and requires specifying the correct git revision of goldctl. It is critical to ensure that the configuration matches existing tasks to maintain consistency in testing environments.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-a-golden-file-test-for-package-flutter.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
- name: Linux framework_tests_widgets
  properties:
    dependencies: >-
      [
        {"dependency": "goldctl", "version": "git_revision:2387d6fff449587eecbb7e45b2692ca0710b63b9"}
      ]
```

LANGUAGE: yaml
CODE:
```
+  properties:
+    dependencies: >-
+      [
+        {"dependency": "goldctl", "version": "git_revision:2387d6fff449587eecbb7e45b2692ca0710b63b9"}
+      ]
```

----------------------------------------

TITLE: Setting Flutter Version Compile Definitions
DESCRIPTION: Adds preprocessor definitions for Flutter version information to the build configuration. Includes major, minor, patch, and build version numbers.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/runner/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\""))
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")
```

----------------------------------------

TITLE: Generating IntelliJ configuration files
DESCRIPTION: This command generates IntelliJ configuration files, allowing the main flutter directory to be opened as a project and examples to be run from within the IDE. The `--overwrite` flag ensures that any existing configuration files are overwritten.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
"flutter ide-config --overwrite"
```

----------------------------------------

TITLE: Enabling Metal Performance HUD
DESCRIPTION: Activates the Metal performance heads-up display (HUD) for real-time graphics performance monitoring in command-line applications. Useful for debugging and performance analysis.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/metal_validation.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
export MTL_HUD_ENABLED=1
```

----------------------------------------

TITLE: Implementing Material Linear Progress Indicator in Flutter
DESCRIPTION: This class implements a Material Design linear progress indicator. It handles both determinate and indeterminate progress modes, and manages animations for the indicator's appearance.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/core/lib/src/proto/license_header.txt#2025-04-21_snippet_0

LANGUAGE: Dart
CODE:
```
class _MaterialLinearProgressIndicator extends StatefulWidget {
  const _MaterialLinearProgressIndicator({
    super.key,
    required this.backgroundColor,
    required this.valueColor,
    required this.value,
    required this.animationDuration,
    required this.textDirection,
    this.minHeight,
    this.clip = Clip.none,
    this.roundedCorners = false,
  });

  final Color backgroundColor;
  final Animation<Color?> valueColor;
  final double? value;
  final Duration animationDuration;
  final TextDirection textDirection;
  final double? minHeight;
  final Clip clip;
  final bool roundedCorners;

  @override
  State<_MaterialLinearProgressIndicator> createState() => _MaterialLinearProgressIndicatorState();
}
```

----------------------------------------

TITLE: Setting Up Dependencies for Flutter Windows Runner
DESCRIPTION: Links the required Flutter libraries and Windows system libraries to the executable and sets up the include directories. Dependencies include the Flutter engine, wrapper app, and Windows Desktop Window Manager API.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/runner/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")
```

----------------------------------------

TITLE: Retrieving Display Refresh Rate with _flutter.getDisplayRefreshRate Protocol
DESCRIPTION: Gets the display refresh rate (in fps) of the device running the Flutter view. This extension requires the viewId argument and returns the refresh rate as a floating-point value, which varies between different devices (e.g., 60fps for most devices, 120fps for iPad Pro).
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
{
  "type": "DisplayRefreshRate",
  "fps": 60.0
}
```

----------------------------------------

TITLE: Configuring Impeller on Android in AndroidManifest.xml
DESCRIPTION: XML configuration to explicitly opt out of using Impeller on Android by adding a meta-data tag to the AndroidManifest.xml file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/README.md#2025-04-21_snippet_2

LANGUAGE: xml
CODE:
```
<meta-data
  android:name="io.flutter.embedding.android.EnableImpeller"
  android:value="false" />
```

----------------------------------------

TITLE: Including Generated Plugin Rules
DESCRIPTION: Includes the generated plugin build rules, which manage building the plugins and adding them to the application. This is essential for integrating Flutter plugins into the application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_13

LANGUAGE: cmake
CODE:
```
include(flutter/generated_plugins.cmake)
```

----------------------------------------

TITLE: Configuring Flutter Library and Headers
DESCRIPTION: Sets up the Flutter library paths and header files for Windows builds. Configures the main Flutter interface library with necessary include directories and linkage.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")

list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Configuring Flutter Library Headers and Interface
DESCRIPTION: Defines the list of Flutter Linux header files, prepends their paths with the ephemeral directory path, and sets up the Flutter interface library with appropriate dependencies and include directories.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Command Line Tools Installation
DESCRIPTION: Installs the latest version of Android command line tools for SDK management
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_1

LANGUAGE: android-sdk
CODE:
```
cmdline-tools;latest:cmdline-tools
```

----------------------------------------

TITLE: Dart Skipped Test with Issue Link
DESCRIPTION: Illustrates how to temporarily skip a flaky test in Dart, providing a link to a tracking issue for its resolution.  This is used to keep the test tree green while the fix is in development. The associated issue should be tagged with the `skip-test` label.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Tree-hygiene.md#_snippet_7

LANGUAGE: dart
CODE:
```
skip: true, // https://github.com/flutter/flutter/issues/XXXXX
```

----------------------------------------

TITLE: Creating Flutter Interface Library in CMake
DESCRIPTION: Defines a Flutter interface library in CMake and configures its include directories and dependencies. This sets up the necessary linking for applications to use the Flutter engine on Linux.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Configuring CMake Policies and Installation Settings for Flutter
DESCRIPTION: Configures CMake policies, sets installation path, and defines cross-building settings if a target platform sysroot is specified.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
cmake_policy(SET CMP0063 NEW)

set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")

if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()
```

----------------------------------------

TITLE: Profile Configuration Flags
DESCRIPTION: Sets linker and compilation flags for the Profile configuration to match Release configuration settings
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")
```

----------------------------------------

TITLE: Configuring iOS Extensions Test in YAML
DESCRIPTION: This YAML configuration specifies the setup for an iOS extensions integration test. It defines the project name, target devices, and the required Xcode project and workspace files for building and testing the iOS app with a watchOS extension.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_app_with_extensions/README.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
name: ios_extensions

ios:
  # The device that the integration test runs on.
  device:
    # Don't use the simulator because building extensions is not supported.
    file: ios/ios_extensions.devices

  # The scheme to use.
  scheme: ios_extensions

  # The Xcode project to use.
  project:
    # Use ios/Runner.xcworkspace for watchOS.
    path: ios/Runner.xcodeproj

  # The Xcode workspace to use.
  workspace:
    path: ios/Runner.xcworkspace
```

----------------------------------------

TITLE: Building Flutter in Test Mode
DESCRIPTION: Command for building Flutter in headless test mode for desktop platforms. Test mode is similar to debug mode but runs headless on desktop.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Flutter's-modes.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
sky/tools/gn
```

----------------------------------------

TITLE: Setting Up Flutter and GTK Dependencies in CMake
DESCRIPTION: Adds the Flutter managed directory, sets up system-level dependencies including GTK, and defines the application target with its source files.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")

add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "my_texture.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)

apply_standard_settings(${BINARY_NAME})

target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)
```

----------------------------------------

TITLE: Configuring AOT Library Installation in CMake
DESCRIPTION: Sets up the installation of the Ahead-of-Time (AOT) compiled library for Profile and Release builds only, skipping Debug builds.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_9

LANGUAGE: CMake
CODE:
```
# Install the AOT library on non-Debug builds only.
install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  CONFIGURATIONS Profile;Release
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Branching Logic in GLSL Function
DESCRIPTION: This GLSL function snippet shows how return statements in branching logic affect shader performance. The function, which returns a computed color based on an alpha check, behaves similarly at the assembly level to a version using an intermediate result vari
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_4

LANGUAGE: GLSL
CODE:
```
vec4 FrobnicateColor(vec4 color) {
  if (color.a == 0) {
    return vec4(0);
  }

  return DoExtremelyExpensiveThing(color);
}
```

----------------------------------------

TITLE: Updating Flutter Package Dependencies
DESCRIPTION: Command to update all package dependencies in the Flutter repository. This should be run after updating the source tree to ensure the analyzer has access to all necessary dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Using-the-Dart-analyzer.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
flutter update-packages
```

----------------------------------------

TITLE: Setting Up Flutter Tool Backend Build Commands
DESCRIPTION: Configures custom build commands for the Flutter tool backend, ensuring proper generation of libraries and headers through the Flutter tools command line interface.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
  ${CPP_WRAPPER_SOURCES_APP}
)
```

----------------------------------------

TITLE: Setting Custom Engine Version in Bash
DESCRIPTION: This snippet demonstrates how to set a custom engine version using an environment variable in Bash. It's useful for advanced use-cases or CI platforms where a specific prebuilt engine version is required.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/Engine-artifacts.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ FLUTTER_PREBUILT_ENGINE_VERSION=abc123 flutter --version
..
Engine • revision abc123 ..
..
```

----------------------------------------

TITLE: Manual Cherry-pick Git Commands
DESCRIPTION: Step-by-step Git commands for performing a manual cherry-pick across release branches. These commands help developers create a cherry-pick branch, select a specific commit, and push changes.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Flutter-Cherrypick-Process.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git checkout <master/main>
```

LANGUAGE: bash
CODE:
```
git fetch
```

LANGUAGE: bash
CODE:
```
git pull
```

LANGUAGE: bash
CODE:
```
git checkout <candidate branch you want to cherry-pick to>
```

LANGUAGE: bash
CODE:
```
git checkout -b <your local branch name for cherry-picking>
```

LANGUAGE: bash
CODE:
```
git cherry-pick <your commit hash>
```

LANGUAGE: bash
CODE:
```
git push --set-upstream origin <your branch name>
```

----------------------------------------

TITLE: Updating CI for New Android API Support - YAML Configuration
DESCRIPTION: This snippet demonstrates how to modify the CI configuration in a .ci.yaml file to support a new Android API version. It specifically shows the properties and dependencies needed for the Android Virtual Device.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/New-Android-version.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
"  linux_android_emu:\n    properties:\n      contexts: >-\n        [\n          \"android_virtual_device\"\n        ]\n      dependencies: >-\n        [\n          ...\n          {\"dependency\": \"android_virtual_device\", \"version\": \"android_<API#>_google_apis_x64.textpb\"},\n          {\"dependency\": \"avd_cipd_version\", \"version\": \"build_id:<Instance ID>\"},\n        ]\n      ...\n"
```

----------------------------------------

TITLE: Overriding checkInputConnectionProxy in PlatformViewsController (Java)
DESCRIPTION: This code snippet overrides the checkInputConnectionProxy method to make Android treat the Flutter View as a proxy for the Input Method Editor when communicating with embedded Android Views.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_3

LANGUAGE: Java
CODE:
```
checkInputConnectionProxy
```

----------------------------------------

TITLE: Configuring Git for Enhanced Image Diffs using ImageMagick
DESCRIPTION: Provides a series of shell commands to install ImageMagick, create a custom git diff script for images, and configure git to use this script for image comparisons.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/build_bucket_golden_scraper/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# On MacOS.
$ brew install imagemagick

# Create a comparison script.
$ cat > ~/bin/git-imgdiff <<EOF
#!/bin/sh
echo "Comparing $2 and $5"

# Find a temporary directory to store the diff.
if [ -z "$TMPDIR" ]; then
  TMPDIR=/tmp
fi

compare \
  "$2" "$5" \
  /tmp/git-imgdiff-diff.png

# Display the diff.
open /tmp/git-imgdiff-diff.png
EOF

# Setup git.
git config --global core.attributesfile '~/.gitattributes'

# Add the following to ~/.gitattributes.
cat >> ~/.gitattributes <<EOF
*.png diff=imgdiff
*.jpg diff=imgdiff
*.gif diff=imgdiff
EOF

git config --global diff.imgdiff.command '~/bin/git-imgdiff'
```

----------------------------------------

TITLE: Configuring CMake for Flutter C++ Project
DESCRIPTION: The CMake script configures the build process for a C++ application, specifying the minimum CMake version, project specifics, and source files. It defines standard build settings, including preprocessor definitions related to Flutter versioning and dependencies on necessary libraries and plugins. The script ensures that the application can be built correctly with Flutter-related tools.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the build version.
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")

# Disable Windows macros that collide with C++ standard library functions.
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")

# Add dependency libraries and include directories. Add any application-specific
# dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: Using Pigeon to Regenerate Interface Definitions
DESCRIPTION: This snippet demonstrates how to regenerate Pigeon interface definitions in Flutter packages after making changes. Dependencies include the Pigeon package, and the command should be run from the terminal. Replace [changed file] with the specific Pigeon interface file that was modified.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
$ dart run pigeon --input pigeons/[changed file]
```

----------------------------------------

TITLE: Configuring CMake Policies and Build Types
DESCRIPTION: Opts into modern CMake behaviors and defines build configurations (Debug, Profile, Release) based on generator type.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(VERSION 3.14...3.25)

# Define build configuration option.
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
```

----------------------------------------

TITLE: Defining Standard Compilation Settings Function
DESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++14 support, warning flags, and optimization options for non-Debug builds.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()
```

----------------------------------------

TITLE: Collecting Data Keys for Code Signing in GN
DESCRIPTION: This snippet demonstrates how to create a generated_file rule in GN to collect data keys for code signing. It specifies the output file, data keys to collect, and dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/release/Code-signing-metadata.md#2025-04-21_snippet_1

LANGUAGE: gn
CODE:
```
generated_file("artifacts_entitlement_config") {
    outputs = [ "$target_gen_dir/entitlements.txt" ]

    data_keys = [ "entitlement_file_path" ]

    deps = [ "//flutter/lib/snapshot:generate_snapshot_bin" ]
    if (flutter_runtime_mode == "debug") {
        deps += [
        "//flutter/impeller/compiler:impellerc",
        "//flutter/impeller/tessellator:tessellator_shared",
        "//flutter/shell/testing:testing",
        "//flutter/tools/path_ops:path_ops",
        ]
    }
}
```

----------------------------------------

TITLE: Generating Kernel Snapshot
DESCRIPTION: This command creates a kernel snapshot 'kernel_snapshot.dill' file for a Flutter application. It requires the 'flutter packages get' command beforehand to ensure all dependencies are fetched.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
$FLUTTER_ENGINE_OUT_DIR/dart \
    $FLUTTER_ENGINE_OUT_DIR/frontend_server.dart.snapshot \
    --sdk-root $FLUTTER_ENGINE_OUT_DIR/flutter_patched_sdk/ \
    --strong \
    --target=flutter \
    --aot \
    --tfa \
    -Ddart.vm.product=true \
    --packages .packages \
    --output-dill build/kernel_snapshot.dill \
    package:flutter_gallery/main.dart
```

----------------------------------------

TITLE: Setting Up C++ Wrapper Sources
DESCRIPTION: Defines and configures the C++ wrapper source files for core functionality, plugins, and application components. Groups source files into logical components for building.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
list(APPEND CPP_WRAPPER_SOURCES_CORE
  "core_implementations.cc"
  "standard_codec.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND "${WRAPPER_ROOT}/")
list(APPEND CPP_WRAPPER_SOURCES_PLUGIN
  "plugin_registrar.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND "${WRAPPER_ROOT}/")
list(APPEND CPP_WRAPPER_SOURCES_APP
  "flutter_engine.cc"
  "flutter_view_controller.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND "${WRAPPER_ROOT}/")
```

----------------------------------------

TITLE: Configuring Flutter Library and Headers
DESCRIPTION: Sets up the Flutter library paths and header files for Windows builds. Configures the main Flutter interface library with necessary include directories and dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")

list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Executing device lab tests
DESCRIPTION: To run a device lab test locally, navigate to the `dev/devicelab` directory and execute `bin/run.dart` with the `-t` flag, specifying the task name defined in `.ci.yaml`. Ensure a physical device, simulator, or emulator is connected and the current locale is en_US.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
"../../bin/dart bin/run.dart -t [task_name]"
```

----------------------------------------

TITLE: Configuring Flutter Library and Headers
DESCRIPTION: Sets up the Flutter library paths and header files for Windows builds. Configures the main Flutter interface library with necessary include directories and dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")

list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Including generated plugin build rules for Flutter Linux
DESCRIPTION: Includes the generated plugins configuration file which manages building Flutter plugins and adding them to the application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_10

LANGUAGE: CMake
CODE:
```
# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)
```

----------------------------------------

TITLE: Adding Custom Command for Flutter Tool Backend
DESCRIPTION: This custom command runs a shell script related to the Flutter tool backend, ensuring it is executed every time the build is performed, even without a real input file.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: CMake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
```

----------------------------------------

TITLE: Configuring Additional Kotlin Formatting Rules
DESCRIPTION: Explains how to use an .editorconfig file to apply additional Kotlin formatting rules specific to the Flutter repository
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Kotlin-android-studio-formatting.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
3. Additionally, Kotlin code in the Flutter repository currently uses some additional rules for compatibility with older versions of Kotlin.
These rules can only be configured by an `.editorconfig` file in the directory from which Android Studio was opened. To configure these rules, create a copy of the [`.editorconfig`](../../../dev/bots/test/analyze-test-input/.editorconfig) that is used by tests in the root directory you intend to open with Android Studio.
```

----------------------------------------

TITLE: Disabling Conflicting Windows Macros in CMake
DESCRIPTION: This snippet disables certain Windows macros that may conflict with standard C++ library functions, specifically the NOMINMAX macro which can interfere with maximum and minimum definitions.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")
```

----------------------------------------

TITLE: Finding Vulkan Package
DESCRIPTION: Finds the Vulkan package and sets include directories and link libraries. It utilizes the `find_package` command to locate the Vulkan SDK, then configures include directories and link libraries for the executable target.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
find_package(Vulkan REQUIRED)
target_include_directories(${EXE_NAME} PRIVATE ${Vulkan_INCLUDE_DIRS})
target_link_libraries(${EXE_NAME} PRIVATE Vulkan::Vulkan)
```

----------------------------------------

TITLE: Configuring System Dependencies for Flutter Linux in CMake
DESCRIPTION: Sets up system-level dependencies required for Flutter Linux, including GTK, GLIB, and GIO using pkg-config.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)
```

----------------------------------------

TITLE: Custom Function to Prepend List Elements
DESCRIPTION: Defines a function 'list_prepend' to prepend a prefix to elements of a given list since some list manipulation functions aren't available in CMake 3.10. It expects a list name and a prefix string, and modifies the list in place.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Testing Single Behaviors in Separate Flutter Tests (Good)
DESCRIPTION: This code snippet shows how to separate tests to validate single behaviors of `SliverGeometry`.  This is a recommended practice to simplify debugging.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
test('SliverGeometry with no arguments is valid', () {
  expect(const SliverGeometry().debugAssertIsValid(), isTrue);
});

test('SliverGeometry throws error when layoutExtent exceeds paintExtent', () {
  expect(() {
    const SliverGeometry(layoutExtent: 10.0, paintExtent: 9.0).debugAssertIsValid();
  }, throwsFlutterError);
});

test('SliverGeometry throws error when maxPaintExtent is less than paintExtent', () {
  expect(() {
    const SliverGeometry(paintExtent: 9.0, maxPaintExtent: 8.0).debugAssertIsValid();
  }, throwsFlutterError);
});
```

----------------------------------------

TITLE: Running C++ Unit Tests for Android Embedder
DESCRIPTION: This command executes C++ unit tests for the Android embedder. It assumes you are at the root of the engine repository where `run_tests.py` is located.  The script uses the `--type android` option, which is, perhaps confusingly, for C++ tests.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
./testing/run_tests.py --type android
```

----------------------------------------

TITLE: Add custom command for Flutter assembly
DESCRIPTION: Adds a custom command to assemble the Flutter library. It uses the Flutter toolchain to build the library, specifying the target platform and build type.  The output is the Flutter library and headers.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_9

LANGUAGE: cmake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
```

----------------------------------------

TITLE: Building Flutter Web Engine Locally
DESCRIPTION: Command to build the Flutter Web Engine using the felt tool
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
felt build
```

----------------------------------------

TITLE: Creating a New MemoryTest Case in Flutter
DESCRIPTION: Steps to create a new MemoryTest case and add it to Flutter's device lab for CI measurement. This involves creating a main function, adding an entry to the manifest, and creating a task file.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-memory-test-for-Flutter.md#2025-04-22_snippet_0

LANGUAGE: Dart
CODE:
```
1. Create a `main` function for the test app in a file named like `test_memory/some_memory_perf.dart`.
2. Add a `some_memory_perf` entry to [manifest.yaml][manifest]
3. Add a `some_memory_perf.dart` file to [dev/devicelab/bin/tasks][tasks] folder.
```

----------------------------------------

TITLE: Merging Flutter Engine into Flutter Framework Repository
DESCRIPTION: Clones the Flutter framework repository, adds the engine repository as a remote, and merges them while allowing unrelated histories.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/history_strategy.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
git clone git@github.com:flutter/flutter.git flutter_merge
cd flutter_merge

# add the other tree as remote
git remote add -f engine-upstream ~/src/engine_prep

# --no-commit is important because we want to look around
git merge --no-commit --allow-unrelated-histories engine-upstream/main

# You're a wizard, Harry
git commit -m "Merge flutter/engine into framework"

# Garbage collect!
# Now at 234MB .git
git reflog expire --expire=now --all && git gc --prune=now --aggressive
```

----------------------------------------

TITLE: Running Integration Test
DESCRIPTION: This snippet shows how to execute a specific integration test with the 'run_integration_test.sh' script, specifying the name of the integration test folder and disabling link-time optimization. The script is located in the Flutter engine directory specified by the environment variable 'ENGINE_DIR'.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_integration_test.sh <integration_test_folder_name> --no-lto
```

----------------------------------------

TITLE: Running API Consistency Check Tool in Shell
DESCRIPTION: This shell command runs a Dart script to verify the consistency of platform-specific embedders and their APIs with the dart:ui API. It requires the path to the Flutter engine repository as an argument. The expected output of the script is a report on API consistency.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/api_check/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
../../../out/host_debug_unopt/dart-sdk/bin/dart \
  test/apicheck_test.dart                       \
  "$(dirname $(dirname $PWD))"
```

----------------------------------------

TITLE: Pie Chart of Vulkan Version Distribution
DESCRIPTION: A mermaid pie chart showing the distribution of Vulkan support across Android devices as of January 06, 2023, with 77% supporting Vulkan 1.1, 8% supporting Vulkan 1.0.3, and 15% having no Vulkan support.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android.md#2025-04-21_snippet_1

LANGUAGE: mermaid
CODE:
```
pie title Vulkan version
	"No Vulkan Support" : 15
	"Vulkan 1.0.3" : 8
	"Vulkan 1.1" : 77
```

----------------------------------------

TITLE: Running Unicode Sync Script in Check Mode in Dart
DESCRIPTION: This command executes the Dart script `unicode_sync_script.dart` in check mode.  This mode validates the synchronization between the Unicode property files and the generated code without overwriting existing files. A non-zero exit code indicates discrepancies.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/README.md#2025-04-21_snippet_1

LANGUAGE: Dart
CODE:
```
dart tool/unicode_sync_script.dart --check
```

----------------------------------------

TITLE: Configuring Project Settings for Flutter Linux Application
DESCRIPTION: Initializes the CMake project with C++ language and sets up basic application parameters including the binary name and application ID for a Flutter platform_channel example.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
# Project-level configuration.
cmake_minimum_required(VERSION 3.10)
project(runner LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "platform_channel")
# The unique GTK application identifier for this application. See:
# https://wiki.gnome.org/HowDoI/ChooseApplicationID
set(APPLICATION_ID "io.flutter.examples.platform_channel")
```

----------------------------------------

TITLE: Creating New Flutter Project Template
DESCRIPTION: Initializes a new Flutter project with the updated template and renames the lib directory for easier merging. Requires Flutter SDK installed and accessible via terminal. `<appname>` should be replaced with the desired project name.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-build-with-gradle.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
flutter create <appname>
mv <appname>/lib <appname>/lib.template
```

----------------------------------------

TITLE: Configuring Project and Application Properties in CMake for Flutter Linux Application
DESCRIPTION: Initial project setup with minimum CMake version, project name, executable name, and application ID configuration. These settings define the basic properties of the Flutter Linux application.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
# Project-level configuration.
cmake_minimum_required(VERSION 3.10)
project(runner LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "layers")
# The unique GTK application identifier for this application. See:
# https://wiki.gnome.org/HowDoI/ChooseApplicationID
set(APPLICATION_ID "io.flutter.examples.layers")
```

----------------------------------------

TITLE: Adding Dependencies for Flutter Assembly
DESCRIPTION: This snippet adds a dependency on `flutter_assemble`, ensuring that the Flutter tool's assembly step is executed before building the executable target.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: cmake
CODE:
```
add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: Installing AOT Library for Release Builds of Flutter Windows App
DESCRIPTION: Installs the Ahead-Of-Time (AOT) compilation library only for Profile and Release builds, which optimizes performance in non-debug configurations.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_9

LANGUAGE: CMake
CODE:
```
# Install the AOT library on non-Debug builds only.
install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  CONFIGURATIONS Profile;Release
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Checking Out Branch in Flutter Channel Command
DESCRIPTION: This code snippet shows the location where the channel command checks out the branch without fetching updated refs from GitHub first. This led to users having outdated branch heads.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/postmortems/Postmortem-Beta-1-Release.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[checking out the branch](https://github.com/flutter/flutter/blob/eaa9b47a4ac278a9439468911d2c361a472b114b/packages/flutter_tools/lib/src/commands/channel.dart#L103)
```

----------------------------------------

TITLE: Adding Flutter Version Definitions to Windows Runner in CMake
DESCRIPTION: Adds preprocessor definitions for the Flutter version information to the compiled Windows executable. These definitions include full version string, major, minor, patch, and build numbers.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/runner/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")
```

----------------------------------------

TITLE: Defining Custom Build Commands for Flutter
DESCRIPTION: Sets up a custom build command that executes every time, regardless of file changes, leveraging the custom target 'flutter_assemble'. This ensures the Flutter tool is invoked correctly, crucial for reliable custom build steps.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_8

LANGUAGE: CMake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)
```

----------------------------------------

TITLE: Rendering to Surface with Impeller in C++
DESCRIPTION: Uses the Impeller renderer to render to the created surface, providing a callback for custom rendering logic.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_13

LANGUAGE: c++
CODE:
```
renderer_->Render(std::move(surface),
                 [&](RenderTarget& render_target) -> bool {
                    // Do things that render into the render target.
                    return true;
                 });
```

----------------------------------------

TITLE: Finding and Linking GTK Dependency
DESCRIPTION: Finds the GTK (GIMP Toolkit) library using PkgConfig and links it to the target. This enables the application to use GTK for its graphical user interface.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_9

LANGUAGE: cmake
CODE:
```
# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
```

----------------------------------------

TITLE: Install Flutter Library
DESCRIPTION: Installs the Flutter library to the library directory within the installation bundle.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_24

LANGUAGE: cmake
CODE:
```
install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Setting up Flutter library and system dependencies for Linux build
DESCRIPTION: Adds the Flutter managed directory as a subdirectory and configures system-level dependencies like GTK3 for the Linux build of the Flutter application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: CMake
CODE:
```
# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")
```

----------------------------------------

TITLE: Adding SSH origin remote to local clone
DESCRIPTION: This command adds the user's forked repository as the 'origin' remote to the local Git clone using SSH. Replace ████████ with the user's GitHub account name. This allows pushing changes to the user's fork.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
"git remote add origin git@github.com:████████/flutter.git"
```

----------------------------------------

TITLE: Defining generators tasks in JSON
DESCRIPTION: This snippet showcases the structure of a JSON configuration for generators, highlighting the `tasks` property. Generators are scripts used to combine outputs from multiple sub-builds, such as creating universal binaries.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
"generators": {
    "tasks": []
 }

```

----------------------------------------

TITLE: Building Host Binaries for macOS
DESCRIPTION: These commands use `gn` to generate build files and `ninja` to compile the host binaries required for the Flutter tool to build applications targeting macOS. The `--unopt` flag specifies an unoptimized build.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/darwin/macos/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```

# Perform the host build.
./tools/gn --unopt
ninja -C ../out/host_debug_unopt

```

----------------------------------------

TITLE: Publishing mouse-input-view
DESCRIPTION: This shell command publishes the `mouse-input-view` package to the Fuchsia package repository. It utilizes `fx pm publish` with appropriate parameters to specify the package location and repository.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
$FUCHSIA_DIR/.jiri_root/bin/fx pm publish -a -repo $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files -f $ENGINE_DIR/out/fuchsia_debug_x64/gen/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/mouse-input-view/mouse-input-view/mouse-input-view.far
```

----------------------------------------

TITLE: Adding Devicelab Task - Dart
DESCRIPTION: This Dart code defines the main function for a devicelab task. It sets the device operating system and then executes the performance test defined by `createSuperImportantCasePerfTest`. This script resides within the devicelab tasks directory and is executed as part of the automated testing process.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_5

LANGUAGE: Dart
CODE:
```
```Dart
import 'dart:async';

import 'package:flutter_devicelab/tasks/perf_tests.dart';
import 'package:flutter_devicelab/framework/adb.dart';
import 'package:flutter_devicelab/framework/framework.dart';

Future<void> main() async {
  deviceOperatingSystem = DeviceOperatingSystem.android;  // or ios
  await task(createSuperImportantCasePerfTest());
}
```
```

----------------------------------------

TITLE: List Prepend Function Definition in CMake
DESCRIPTION: A custom CMake function that prepends a prefix to each element in a list, serving as a replacement for list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Adding Executable Target
DESCRIPTION: Adds an executable target with the specified binary name, source files, and dependencies. This creates the final executable file for the application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_11

LANGUAGE: cmake
CODE:
```
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)
apply_standard_settings(${BINARY_NAME})
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)
add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: Configuring .gclient File for RBE in Flutter Engine
DESCRIPTION: This snippet shows how to add the 'use_rbe' entry to the .gclient file to enable Remote Build Execution for the Flutter engine project.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
solutions = [
  {
    "managed": False,
    "name": "src/flutter",
    "url": "git@github.com:zanderso/engine.git",
    "custom_deps": {},
    "custom_vars": {
      "use_rbe": True,
    },
    "deps_file": "DEPS",
    "safesync_url": "",
  },
]
```

----------------------------------------

TITLE: Defining Build Configuration Options for Flutter Linux Application
DESCRIPTION: Sets up build configuration options with Debug as the default build type when not explicitly specified. Defines debug, profile, and release as available build types.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_2

LANGUAGE: CMake
CODE:
```
# Define build configuration options.
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()
```

----------------------------------------

TITLE: Uploading Java Version to CIPD - Shell
DESCRIPTION: This command uploads the new Java version package to CIPD. It specifies the package path, name, and tag, ensuring that the structure and naming conventions are correct before executing the command.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Uploading-New-Java-Version-to-CIPD.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
cipd create -in <path_to_new_java_version_package>  -name flutter/java/openjdk/<platform-architecture> -tag version:<java_version>
```

----------------------------------------

TITLE: Setting Proxy View for WebView Input Connections (Java)
DESCRIPTION: This code sets up a proxy view that listens for input connections on the same thread as WebView, necessary for handling text input in WebViews on Android versions pre-N.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_6

LANGUAGE: Java
CODE:
```
InputAwareWebView.java#L113
```

----------------------------------------

TITLE: Flutter App Wrapper Configuration
DESCRIPTION: Sets up the Flutter application wrapper library with core and app-specific source files. Configures compilation settings and dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/flutter_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
add_library(flutter_wrapper_app STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_APP}
)
apply_standard_settings(flutter_wrapper_app)
target_link_libraries(flutter_wrapper_app PUBLIC flutter)
target_include_directories(flutter_wrapper_app PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_app flutter_assemble)
```

----------------------------------------

TITLE: Installing AOT Library for Release Builds
DESCRIPTION: Installs the AOT (Ahead-of-Time) compiled library only for non-Debug build configurations (Profile or Release) to optimize performance.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_8

LANGUAGE: CMake
CODE:
```
# Install the AOT library on non-Debug builds only.
if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Applying Automatic Fixes
DESCRIPTION: This command executes the header guard check tool with the `--fix` flag. This enables the tool to automatically correct header files that do not conform to the required header guard pattern. It uses Dart to run the tool.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/header_guard_check/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
"dart ./tools/header_guard_check/bin/main.dart --fix"
```

----------------------------------------

TITLE: Linking Libraries and Including Directories in CMake
DESCRIPTION: This snippet links the required libraries and includes directories for the Flutter application runner. It adds the Flutter dependencies and any application-specific libraries to the build.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")
```

----------------------------------------

TITLE: Add dependency on flutter_assemble target
DESCRIPTION: Adds a dependency on the `flutter_assemble` target.  This ensures that the `flutter_assemble` target (which likely builds the Flutter library) is built before any target that depends on the `flutter` interface library.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_8

LANGUAGE: cmake
CODE:
```
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Set Install RPATH
DESCRIPTION: Sets the runtime path for the installed executable to `$ORIGIN/lib`. This allows the executable to find its shared libraries at runtime relative to its location.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: cmake
CODE:
```
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")
```

----------------------------------------

TITLE: Creating EGL Context and Window Surface in C++
DESCRIPTION: Creates an EGL context and window surface using the chosen configuration and native window handle.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_2

LANGUAGE: c++
CODE:
```
auto context = display.CreateContext(*config, /* sharegroup= */ nullptr );
auto surface = display.CreateWindowSurface(*config, native_window_handle);
```

----------------------------------------

TITLE: Defining build configuration options for Flutter Linux build
DESCRIPTION: Sets the default build type to Debug if not otherwise specified and defines available build configurations for the Flutter application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
# Define build configuration options.
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()
```

----------------------------------------

TITLE: Configuring Build Modes in CMake for Flutter
DESCRIPTION: Defines build configuration options for Debug, Profile, and Release modes with appropriate compiler flags.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/windows/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
```

----------------------------------------

TITLE: Configuring Gradle to Preserve Native Libraries for Profiling
DESCRIPTION: Gradle configuration to prevent stripping of native libraries (*.so files) which preserves debug symbols for profiling. This should be added to the android block in build.gradle.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_cpu_profile.md#2025-04-21_snippet_1

LANGUAGE: gradle
CODE:
```
 packagingOptions{
     doNotStrip "**/*.so"
 }
```

----------------------------------------

TITLE: Setting Compile Definitions for Flutter Version - CMake
DESCRIPTION: This code defines preprocessor definitions for the Flutter version used in the build. It incorporates version details like major, minor, patch, and build numbers which are crucial for version management.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
# Add preprocessor definitions for the build version.
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")

```

----------------------------------------

TITLE: Flutter Library Package Dependencies Configuration in CMake
DESCRIPTION: Configures system-level dependencies for the Flutter Linux library using PkgConfig to find GTK, GLIB, and GIO packages which are required for Linux desktop integration.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)
```

----------------------------------------

TITLE: Running Release Tests for Flutter Deferred Components
DESCRIPTION: Command to run release mode tests for the Flutter app. It requires the path to bundletool.jar as an argument. This script builds and installs a release version of the app and validates the loading of deferred components.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/deferred_components_test/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
run_release_test.sh <bundletool.jar path>
```

----------------------------------------

TITLE: Adding Custom Target for Flutter Assembly
DESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target is responsible for assembling these files using the custom command defined earlier.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_14

LANGUAGE: cmake
CODE:
```
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)
```

----------------------------------------

TITLE: Rebuilding the Keycode Database - Shell
DESCRIPTION: This shell command runs the keycode generator by collecting data anew from online sources, allowing for an updated database of physical and logical keys before generating the relevant files.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/tools/gen_keycodes/README.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
"/PATH/TO/ROOT/bin/gen_keycodes --collect"
```

----------------------------------------

TITLE: Building and Running Thread Sanitizer Tests
DESCRIPTION: This set of commands demonstrates how to build Flutter Engine with Thread Sanitizer enabled to catch data races, and run the embedder unit tests.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
$ ./flutter/tools/gn --runtime-mode debug --tsan --unoptimized --no-goma
$ autoninja -C out/host_debug_unopt
$ source ./flutter/testing/sanitizer_suppressions.sh
$ ./out/host_debug_unopt/embedder_unittests
```

----------------------------------------

TITLE: C++ Header Guard Pattern
DESCRIPTION: This code snippet illustrates the expected header guard pattern for C++ header files. It ensures that header files are included only once by defining a unique macro based on the file path.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/header_guard_check/README.md#2025-04-21_snippet_1

LANGUAGE: h
CODE:
```
"// path/to/file.h\n\n#ifndef PATH_TO_FILE_H_\n#define PATH_TO_FILE_H_\n...\n#endif  // PATH_TO_FILE_H_"
```

----------------------------------------

TITLE: Adding Dependencies for Flutter Tool Build - CMake
DESCRIPTION: This snippet runs the Flutter tool's build portions, maintaining the necessary dependencies for proper Flutter application assembly. It is critical that this step is not removed to ensure the application builds correctly.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)

```

----------------------------------------

TITLE: Running a Flutter App with Local Engine
DESCRIPTION: This snippet is used to run a Flutter application with a locally built engine, enabling developers to test and iterate without relying on pre-built engines. It can perform builds automatically if needed.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_8

LANGUAGE: shell
CODE:
```
cd to/project/dir
et run
```

----------------------------------------

TITLE: List Prepend Function Definition in CMake
DESCRIPTION: Helper function that prepends a prefix to each element in a list, providing functionality similar to list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Starting Fuchsia Package Server
DESCRIPTION: This snippet demonstrates how to start the Fuchsia package server which is necessary before running Flutter integration tests. The 'cd' command is used to navigate to the Fuchsia directory specified by the environment variable 'FUCHSIA_DIR'.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
cd "$FUCHSIA_DIR"
fx serve
```

----------------------------------------

TITLE: Verify libflutter.so Build ID
DESCRIPTION: This snippet allows you to verify the build ID of a libflutter.so file to ensure it matches the build ID from crash reports. It is important for successful symbolication.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
% file ~/Downloads/libflutter.so
/Users/user/Downloads/libflutter.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[xxHash]=34ad5bdf0830d77a, with debug_info, not stripped
```

----------------------------------------

TITLE: Configuring Flutter Build with Vulkan Support on macOS
DESCRIPTION: Command to generate Flutter build configuration with Vulkan support enabled for Impeller on macOS arm64 architecture. The command enables the Vulkan backend for Impeller, builds in unoptimized mode, and targets arm64 CPU architecture.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/impeller/Setting-up-MoltenVK-on-macOS-for-Impeller.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./flutter/tools/gn --impeller-enable-vulkan --unopt --mac-cpu arm64
```

----------------------------------------

TITLE: Debugging Linux Flutter app with GDB
DESCRIPTION: Series of commands to build and debug a Flutter Linux app using GDB with an unoptimized local engine, allowing for engine-level debugging.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
flutter/tools/gn --runtime-mode=debug --unoptimized
ninja -C out/host_debug_unopt
gdb out/host_debug_unopt/exe.unstripped/flutter_linux_unittests
```

----------------------------------------

TITLE: Defining Test Suites for Flutter Web Tests
DESCRIPTION: Provides complete specification for running a group of unit tests, including test bundle, run configuration, and required build artifacts
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/test/README.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
test-suites:
  * `name` - Name of the test suite.
  * `test-bundle` - Compiled test bundle to use.
  * `run-config` - Configuration for running tests.
  * `artifact-deps` - Required gn/ninja build artifacts.
```

----------------------------------------

TITLE: Set ephemeral directory
DESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and the Flutter library. This directory is typically used for files that are generated during the build process.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")
```

----------------------------------------

TITLE: Illustrating Better Test Naming in Flutter
DESCRIPTION: These examples demonstrate better test naming practices in Flutter, where the tests describe the behavior under test, improving the readability and understandability of the tests.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Writing-Effective-Tests.md#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
// Better test name
test('Shrink-wrapped ListView resizes to match its content height', () {...});

// Better test name
test('RenderViewport applies its offset to all child Slivers', () {...});

// etc.
```

----------------------------------------

TITLE: Running Integration Tests for Web in Flutter
DESCRIPTION: This command runs the integration test file 'example_test.dart' for the web platform using Flutter's drive command. It specifies the driver, target test files, and the web-server device.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/example/README.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
flutter drive \
  --driver=test_driver/integration_test.dart \
  --target=integration_test/example_test.dart \
  -d web-server
```

----------------------------------------

TITLE: Configuring Installation Settings for Flutter Linux Application Bundle
DESCRIPTION: Sets up installation directories and ensures clean installation. This section configures the bundle directory and sets the install prefix if not already defined.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_9

LANGUAGE: CMake
CODE:
```
# === Installation ===
# By default, "installing" just makes a relocatable bundle in the build
# directory.
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

# Start with a clean build bundle directory every time.
install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
```

----------------------------------------

TITLE: Configuring Flutter Library Paths
DESCRIPTION: Sets up ephemeral directory and Flutter library paths for Windows platform. Defines critical library and configuration locations for the Flutter build.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")
set(FLUTTER_TARGET_PLATFORM "windows-x64")
```

----------------------------------------

TITLE: Standard Compilation Settings Function
DESCRIPTION: Defines a reusable function to apply standard compilation settings across targets, including C++17 standard, compiler warnings, and exception handling
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()
```

----------------------------------------

TITLE: Flutter Library Headers Configuration
DESCRIPTION: Defines the list of Flutter Linux header files and configures them with the interface library target including dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
```

----------------------------------------

TITLE: Configuring Flutter Tool Backend in CMake
DESCRIPTION: Sets up a custom command to run the Flutter tool backend, which generates necessary files for the build process. It also creates a custom target 'flutter_assemble' that depends on these generated files.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: CMake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)
```

----------------------------------------

TITLE: Defining Flutter Library and Header Files
DESCRIPTION: Creates a list of Flutter library header files and sets up an interface library for linking Flutter dependencies
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Running Flutter Tests in Profile Mode
DESCRIPTION: Command to run Flutter unit tests with kProfileMode set to true, allowing tests of code that has different behavior in profile mode. Tests are executed in the VM without precompilation.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test_profile/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
flutter test --dart-define=dart.vm.profile=true test_release/
```

----------------------------------------

TITLE: Checking Flutter Channel Status Using CLI
DESCRIPTION: Command to display the current Flutter channel and list available channels. The output shows all available channels with an asterisk (*) indicating the currently active channel.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Flutter-build-release-channels.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ flutter channel
Flutter channels:
* stable
  beta
  master
```

----------------------------------------

TITLE: Implementing Raw Message Getter in GlobalMaterialLocalizations
DESCRIPTION: Implementation of a protected raw getter and parameter replacement function for localized strings with parameters.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/README.md#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
/// The raw version of [aboutListTileTitle], with `$applicationName` verbatim
/// in the string.
@protected
String get aboutListTileTitleRaw;

@override
String aboutListTileTitle(String applicationName) {
  final String text = aboutListTileTitleRaw;
  return text.replaceFirst(r'$applicationName', applicationName);
}
```

----------------------------------------

TITLE: Set Default Install Prefix
DESCRIPTION: Sets the default install prefix to the build bundle directory if it's initialized to the default value. This ensures that the installation process creates a relocatable bundle in the build directory.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_19

LANGUAGE: cmake
CODE:
```
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()
```

----------------------------------------

TITLE: NDK Installation
DESCRIPTION: Configures Native Development Kit (NDK) version 26.3.11579264 for native code compilation
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_5

LANGUAGE: android-sdk
CODE:
```
ndk;26.3.11579264:ndk
```

----------------------------------------

TITLE: Creating a New Git Hook
DESCRIPTION: This section explains the steps required to create a new Git hook by copying an existing example and setting it up with the appropriate command implementation in the Dart codebase. Users must ensure the script is executable and that the new command is registered within the `CommandRunner`.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/githooks/README.md#2025-04-21_snippet_1

LANGUAGE: Markdown
CODE:
```
1. Check the `git` documentation, and copy `pre-push` into a script with the right name.
1. Make sure the script has the executable bit set
   (`chmod +x <script>`).
1. Add a new `Command` implementation under `lib/src`. Give the new `Command` the same name as the new hook.
1. Add the new `Command` to the `CommandRunner` in `lib/githooks.dart`.
1. Make sure the script from step (1) is passing the new command to the Dart program.

```

----------------------------------------

TITLE: Setting Up Flutter and System Dependencies
DESCRIPTION: Configures the Flutter managed directory, adds it as a subdirectory, and sets up system-level dependencies using pkg-config, including GTK and upower-glib.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0 upower-glib)

add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")
```

----------------------------------------

TITLE: Running iOS Tests on ARM Macs
DESCRIPTION: This shell command runs iOS tests for the Flutter Scenario app on ARM Macs, using the `ios_debug_sim_unopt_arm64` configuration. The engine must be built with this specific configuration beforehand.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios_scenario_app/ios/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
# From the root of the engine repository
$ ./testing/ios_scenario_app/run_ios_tests.sh ios_debug_sim_unopt_arm64
```

----------------------------------------

TITLE: Setting Uniform Data in C++
DESCRIPTION: Creates an instance of the `FragInfo` struct and sets its `time` member to the current time in seconds, obtained using `fml::TimePoint`.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_13

LANGUAGE: c++
CODE:
```
FS::FragInfo frag_info;
frag_info.time = fml::TimePoint::Now().ToEpochDelta().ToSecondsF();
```

----------------------------------------

TITLE: Describing Template Xcode Project for Flutter iOS Debugging
DESCRIPTION: This markdown snippet explains the purpose and usage of a template Xcode project. It's designed for debugging Flutter apps on iOS 17+ devices using Xcode 15+ with a custom application bundle path in the xcscheme, specifically when the '--use-application-binary' flag is used.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/xcode/ios/custom_application_bundle/README.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# Template Xcode project with a custom application bundle

This template is an empty Xcode project with a settable application bundle path
within the `xcscheme`. It is used when debugging a project on a physical iOS 17+
device via Xcode 15+ when `--use-application-binary` is used.
```

----------------------------------------

TITLE: Building Flutter in Release Mode
DESCRIPTION: Commands for building Flutter in release mode for Android and iOS. Release mode disables assertions and debugging tools while optimizing for performance and package size.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Flutter's-modes.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
sky/tools/gn --android --runtime-mode=release
sky/tools/gn --ios --runtime-mode=release
```

----------------------------------------

TITLE: Adding Identical Check for Operator == in Dart
DESCRIPTION: Performance optimization for equality operator implementation in classes with many properties. This check short-circuits the comparison when comparing an object to itself.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_14

LANGUAGE: dart
CODE:
```
    if (identical(other, this)) {
      return true;
    }
```

----------------------------------------

TITLE: Running Cubic Bezier Benchmark - Flutter Shell
DESCRIPTION: This shell script runs the cubic bezier performance benchmark on a device using `flutter drive` with specified test and driver scripts. It generates results in JSON files in the build directory. Requires Flutter.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
flutter drive --profile -t test_driver/run_app.dart --driver test_driver/cubic_bezier_perf_test.dart
```

----------------------------------------

TITLE: Running Flutter Integration Tests
DESCRIPTION: This command runs Flutter integration tests. It requires a Flutter checkout and a working Android emulator or device. It uses the `flutter drive` command with `--local-engine-host` and `--local-engine` flags to specify the engine build.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
cd $FLUTTER/dev/integration_tests/external_textures
flutter drive \
  --local-engine-host=$ENGINE/out/host_debug_unopt_arm64 \
  --local-engine=$ENGINE/out/android_debug_unopt_arm64
```

----------------------------------------

TITLE: Disabling Impeller on iOS in Info.plist
DESCRIPTION: XML configuration to disable Impeller on iOS by adding a key-value pair to the Info.plist file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/README.md#2025-04-21_snippet_1

LANGUAGE: xml
CODE:
```
<key>FLTEnableImpeller</key>
<false/>
```

----------------------------------------

TITLE: Setting Up Flutter Build and Plugin Rules
DESCRIPTION: These CMake directives handle the integration of Flutter's build rules and plugin management within the project. The configuration utilizes a directory for Flutter-specific rules and includes generated plugin setups. Dependencies are the presence of Flutter-managed instructions and plugins intended for C++ integration within the build process.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# Application build; see runner/CMakeLists.txt.
add_subdirectory("runner")
```

----------------------------------------

TITLE: Configuring CMake Policies and RPATH Settings for Flutter Linux Build
DESCRIPTION: Sets CMake policies and RPATH configuration for loading bundled libraries correctly. This ensures proper library resolution during runtime and handles cross-building scenarios.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: CMake
CODE:
```
# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(SET CMP0063 NEW)

# Load bundled libraries from the lib/ directory relative to the binary.
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")

# Root filesystem for cross-building.
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()
```

----------------------------------------

TITLE: Setting Flutter Version Definitions
DESCRIPTION: Adds preprocessor definitions for Flutter version information. Defines version number components including major, minor, patch, and build numbers.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")
```

----------------------------------------

TITLE: Initializing Project Configuration in CMake
DESCRIPTION: Sets up the basic project configuration including minimum CMake version and project name with C++ language support.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(platform_channel LANGUAGES CXX)

# The name of the executable created for the application. Change this to change
# the on-disk name of your application.
set(BINARY_NAME "platform_channel")
```

----------------------------------------

TITLE: ARB Resource Definition with Metadata
DESCRIPTION: Example of defining a resource ID in an ARB file, including the translation value and metadata describing its usage and type.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/lib/src/l10n/README.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
"cancelButtonLabel": "CANCEL",
"@cancelButtonLabel": {
  "description": "The label for cancel buttons and menu items.",
  "type": "text"
}
```

----------------------------------------

TITLE: Managing Flutter Assets Installation for Windows
DESCRIPTION: Ensures clean asset installation by removing any stale files before copying the latest assets. This maintains consistency between builds.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_8

LANGUAGE: CMake
CODE:
```
# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)
```

----------------------------------------

TITLE: Finding System-Level Dependencies
DESCRIPTION: Uses pkg-config to locate required system packages (GTK, GLIB, and GIO) for building Flutter applications. Marks these as required, ensuring the CMake build process stops if they are missing.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)
```

----------------------------------------

TITLE: Running Scrolling Benchmark using Flutter CLI
DESCRIPTION: This shell command is used to run a scrolling benchmark on a device in profile mode using Flutter's drive command. The results will be saved in a timeline summary JSON file, while more detailed logs will be in another JSON file. Ensure Flutter is installed and the device is connected.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
flutter drive --profile test_driver/scroll_perf.dart
```

----------------------------------------

TITLE: Executing Web Integration Tests for Flutter Plugin
DESCRIPTION: Describes the process for running web integration tests, including setting up ChromeDriver and executing the tests from the command line.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#2025-04-21_snippet_3

LANGUAGE: Shell
CODE:
```
chromedriver --port=4444
```

LANGUAGE: Shell
CODE:
```
dart run script/tool/bin/flutter_plugin_tools.dart drive-examples --packages=<plugin_name>/<plugin_name_web> --web
```

----------------------------------------

TITLE: Setting Up Flutter Tool Backend in CMake
DESCRIPTION: Configures a custom command to run the Flutter tool backend for generating necessary files. It creates a phony target to ensure the command runs every time, and sets up dependencies for the flutter_assemble target.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
  ${CPP_WRAPPER_SOURCES_APP}
)
```

----------------------------------------

TITLE: Listing Key Test Cases for iOS Add2App Integration
DESCRIPTION: This markdown snippet outlines the main test cases implemented in the integration tests (IntegrationTests.m) for the iOS Add2App demo. It covers engine pre-warming, platform channel communication, multiple engine instances, and memory management for Flutter components.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_add2app_life_cycle/README.md#2025-04-21_snippet_1

LANGUAGE: Markdown
CODE:
```
1. The ability to pre-warm the engine and attach/detach a ViewController from
   it.
1. The ability to use platform channels to communicate between views.
1. The ability to simultaneously run two instances of the engine.
1. That a FlutterViewController can be freed when no longer in use (also tested
   from FlutterViewControllerTests.m).
1. That a FlutterEngine can be freed when no longer in use.
```

----------------------------------------

TITLE: Configuring cross-building sysroot for Flutter Linux build
DESCRIPTION: Sets up the root filesystem and path configurations for cross-building the Flutter application if a target platform sysroot is specified.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
# Root filesystem for cross-building.
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()
```

----------------------------------------

TITLE: Compilation Standard Settings Function
DESCRIPTION: Defines a function to apply standard compilation settings across targets, including C++17 standard, warning levels, exception handling, and debug definitions
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()
```

----------------------------------------

TITLE: Running Tests with run_tests.py
DESCRIPTION: Describes the process for configuring and running C++ tests for the Flutter engine using the run_tests.py script. It includes an example command for setting up and compiling a debug build for macOS arm64 and executing all applicable tests. The script is essential for ensuring that all changes behave as expected across supported platforms.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/CONTRIBUTING.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
# Configure host build for macOS arm64 debug.
$ flutter/tools/gn --runtime-mode=debug --unoptimized --no-lto --mac-cpu=arm64
# Compile default targets (should cover all applicable run_tests.py requirements).
$ ninja -j100 -C out/host_debug_unopt_arm64
# Run all cross-platform C++ tests for the debug build arm64 variant.
$ cd flutter/testing
$ ./run_tests.py --variant=host_debug_unopt_arm64 --type=engine
```

----------------------------------------

TITLE: Setting Github Token Environment Variable
DESCRIPTION: Demonstrates how to set a Github access token in the shell configuration file for authentication and quota control
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/gen_web_locale_keymap/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
export GITHUB_TOKEN=<YOUR_TOKEN>
```

----------------------------------------

TITLE: Copying Flutter Engine Library in CMake Post-Build Step
DESCRIPTION: Adds a post-build command to copy the Flutter engine library to the build directory. This ensures the correct library name is used.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw_drm/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
add_custom_command(
        TARGET flutter_glfw POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
                ${FLUTTER_LIB}
                ${CMAKE_CURRENT_BINARY_DIR})
```

----------------------------------------

TITLE: Setting CMake Minimum Version and Project Name
DESCRIPTION: Sets the minimum required CMake version and the project name. This is the standard starting point for a CMake project, defining the CMake version required to process the file and establishing the project's name.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.15)
project(FlutterEmbedderVulkanGLFW)
```

----------------------------------------

TITLE: Running iOS Unit Tests with run_tests Script
DESCRIPTION: Run iOS unit tests using the `run_tests` script located in the Flutter testing directory. It requires Python and can be executed with specific arguments to target different iOS architectures, especially important for Apple Silicon users. This script handles cleaning up the `.xcresult` files, but an environment variable can redirect outputs to a specified directory.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios/IosUnitTests/README.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
flutter/testing/run_tests.py --type=objc
```

LANGUAGE: Shell
CODE:
```
./flutter/testing/run_tests.py \
  --type=objc \
  --ios-variant ios_debug_sim_unopt_arm64
```

LANGUAGE: Shell
CODE:
```
export FLUTTER_TEST_OUTPUTS_DIR=~/Desktop
```

LANGUAGE: Shell
CODE:
```
flutter/testing/run_tests.py --help
```

----------------------------------------

TITLE: Installation Configuration for Flutter Application
DESCRIPTION: Configures installation rules for the Flutter application, including copying runtime components, assets, and libraries to the installation directory
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Finding Flutter Engine Library
DESCRIPTION: Locates the Flutter Engine library and links it to the executable.  The path to the Flutter Engine is configured using `EMBEDDER_H_DIR` and `FLUTTER_OUT_DIR`.  The engine is then linked and the include directories are added to the target.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
set(EMBEDDER_H_DIR ${CMAKE_SOURCE_DIR}/../../shell/platform/embedder)
set(FLUTTER_OUT_DIR ${CMAKE_SOURCE_DIR}/../../../out/host_debug_unopt)

find_library(FLUTTER_LIB flutter_engine PATHS ${FLUTTER_OUT_DIR})

target_link_libraries(${EXE_NAME} PRIVATE ${FLUTTER_LIB})
target_include_directories(${EXE_NAME} PRIVATE ${EMBEDDER_H_DIR})
```

----------------------------------------

TITLE: Install AOT Library (Non-Debug)
DESCRIPTION: Installs the Ahead-Of-Time (AOT) compiled library to the library directory, but only for non-Debug builds. AOT compilation optimizes performance in Release and Profile builds.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_28

LANGUAGE: cmake
CODE:
```
if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Cloning a Git Repository
DESCRIPTION: Clones the forked repository from GitHub to your local machine. Replace `<your_name_here>` with your GitHub username.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/Setting-up-the-Packages-development-environment.md#2025-04-21_snippet_0

LANGUAGE: git
CODE:
```
`git clone git@github.com:<your_name_here>/packages.git`
```

----------------------------------------

TITLE: Configuring Post-Submit Test in YAML
DESCRIPTION: Example of configuring a post-submit test named 'Mac mac_clang_tidy' in the CI YAML file. The test is set to run after merging (post-submit) rather than before merging (pre-submit).
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/ci/Engine-pre-submits-and-post-submits.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
  - name: Mac mac_clang_tidy
    recipe: engine_v2/engine_v2
    presubmit: false
```

----------------------------------------

TITLE: Handling Uniform Branches in GLSL Shaders
DESCRIPTION: Demonstrates the use of uniform branches in a vertex shader. This example shows how to conditionally invert the y-coordinate based on a uniform boolean value, which is efficient across different GPU architectures.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_0

LANGUAGE: GLSL
CODE:
```
uniform struct FrameInfo {
  mat4 mvp;
  bool invert_y;
} frame_info;

in vec2 position;

void main() {
  gl_Position = frame_info.mvp * vec4(position, 0, 1)

  if (frame_info.invert_y) {
    gl_Position *= vec4(1, -1, 1, 1);
  }
}
```

----------------------------------------

TITLE: Setting Profile Build Mode Flags in CMake
DESCRIPTION: Configures Profile build mode settings by inheriting from Release configuration for linker and compiler flags.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
# Define settings for the Profile build mode.
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")
```

----------------------------------------

TITLE: Referencing Dart intl Package in Markdown
DESCRIPTION: This snippet demonstrates how to include a link to the Dart 'intl' package in Markdown format. It's used to provide additional resources for internationalization in Flutter projects.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/test_apps/stocks/lib/i18n/regenerate.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
[Dart `intl` package](https://github.com/dart-lang/intl)
```

----------------------------------------

TITLE: Running Platform View Tap Color Change App and Test
DESCRIPTION: Commands to run the platform_view_tap_color_change app and its corresponding test using Flutter CLI.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_7

LANGUAGE: Shell
CODE:
```
# Run the app
$ flutter run lib/platform_view_tap_color_change_main.dart

# Run the test
$ flutter drive lib/platform_view_tap_color_change_main_test.dart
```

----------------------------------------

TITLE: Building and Installing Flutter Stocks Demo App
DESCRIPTION: Commands to navigate to the project directory, fetch dependencies, and build/install the app in release mode. These steps assume Flutter is properly set up on the system.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/test_apps/stocks/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cd $FLUTTER_ROOT/examples/stocks
flutter pub get
flutter run --release
```

----------------------------------------

TITLE: Configuring Build Modes in CMake
DESCRIPTION: Defines build configuration types (Debug/Profile/Release) and handles multi-config generators.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()
```

----------------------------------------

TITLE: Creating Dartpad API Example Documentation
DESCRIPTION: This Dart code snippet demonstrates how to create a documentation block for a Dartpad API example in the Flutter framework source code.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/README.md#2025-04-22_snippet_2

LANGUAGE: dart
CODE:
```
/// {@tool dartpad}
/// Write a description of the example here. This description will appear in the
/// API web documentation to introduce the example.
///
/// ** See code in examples/api/lib/animation/curves/curve2_d.0.dart **
/// {@end-tool}
```

----------------------------------------

TITLE: Applying Patch File Locally
DESCRIPTION: This command applies a patch file to update license files. It strips two path components from the file paths in the diff. The patch file must be adjusted as necessary.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
patch -p2 < my/patch/file
```

----------------------------------------

TITLE: VS Code Debug Configuration for Flutter Tools
DESCRIPTION: VS Code launch.json configuration for debugging the Flutter command-line tool.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/README.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "flutter_tools",
      "request": "launch",
      "type": "dart",
      "program": "${workspaceFolder}/bin/flutter_tools.dart",
      "env": {
        "FLUTTER_ROOT": "${workspaceFolder}/../../"
      },
      "args": ["doctor", "-v"]
    }
  ]
}
```

----------------------------------------

TITLE: Running Dart Tests with run_tests.py Script
DESCRIPTION: This snippet demonstrates how to use the `run_tests.py` script to execute all Dart tests in the directory. It requires Python to run the script and assumes access to the testing environment set up by Flutter.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/dart/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
./testing/run_tests.py --type=dart
```

----------------------------------------

TITLE: Running Flutter Rendered Blue Rectangle App and Test
DESCRIPTION: Commands to run the flutter_rendered_blue_rectangle app and its corresponding test using Flutter CLI.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
# Run the app
$ flutter run lib/flutter_rendered_blue_rectangle_main.dart

# Run the test
$ flutter drive lib/flutter_rendered_blue_rectangle_main.dart
```

----------------------------------------

TITLE: CIPD Authentication Command - Shell
DESCRIPTION: This command is used to authenticate the user to CIPD before performing any uploads. It ensures that the user has the required permissions.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Uploading-New-Java-Version-to-CIPD.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
cipd auth-login
```

----------------------------------------

TITLE: Applying Standard Compilation Settings with CMake
DESCRIPTION: This function defines standard compilation settings for targets, including C++ standard version, warning level adjustments, and exception handling settings. It also applies specific compile definitions for Debug configuration. This is used to ensure consistent build settings across targets and is intended for internal plugin and application building.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()

```

----------------------------------------

TITLE: Applying build settings and linking dependencies for Flutter Linux application
DESCRIPTION: Applies standard build settings to the application target and links necessary dependencies including Flutter and GTK libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_8

LANGUAGE: CMake
CODE:
```
# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add dependency libraries. Add any application-specific dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: Analyzing Flutter Test Exception Stack Trace in Dart
DESCRIPTION: This snippet shows a portion of a stack trace from a Flutter test execution. It indicates the location of the main function call in the test file that led to the exception.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/flutter_test/ticker_expectation.txt#2025-04-21_snippet_0

LANGUAGE: Dart
CODE:
```
#[0-9]+      main.+ \(.+/dev/automated_tests/flutter_test/ticker_test\.dart:[0-9]+:[0-9]+\)
```

----------------------------------------

TITLE: Setting up CMake Project for Flutter Linux Runner
DESCRIPTION: Configures the CMake project with minimum version requirements and C++ language specification. This establishes the basic project setup needed for the Linux runner build.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
project(runner LANGUAGES CXX)
```

----------------------------------------

TITLE: Running Mobile Benchmark - Flutter Shell
DESCRIPTION: This shell command runs various mobile benchmarks using `flutter drive`, depending on the `[test_name]` provided. It expects test and driver script paths, generating output in JSON files in the build directory. Flutter must be installed.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
flutter drive --profile -t test_driver/run_app.dart --driver test_driver/[test_name]_test.dart
```

----------------------------------------

TITLE: List Prepend Function Implementation in CMake
DESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. Functions as a replacement for list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Flutter Tool Backend Build Command
DESCRIPTION: Custom build command that runs the Flutter tool backend script to generate necessary build artifacts.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
```

----------------------------------------

TITLE: Preventing Automatic Symbol Stripping in Gradle
DESCRIPTION: Gradle script configuration to prevent automatic stripping of .so files during builds. Useful for maintaining symbol visibility during debugging.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_5

LANGUAGE: gradle
CODE:
```
packagingOptions{
    doNotStrip "**/*.so"
}
```

----------------------------------------

TITLE: Applying Patch from Clipboard on Mac
DESCRIPTION: This command allows applying a patch from the clipboard, specifically useful for Mac users. The patch will strip two path components as configured.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
pbpaste | patch -p2
```

----------------------------------------

TITLE: Flutter Library Interface Configuration
DESCRIPTION: Configures the Flutter library interface target with necessary include directories and library dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
```

----------------------------------------

TITLE: Creating Default gcloud Credentials
DESCRIPTION: This command creates default gcloud credentials if the 'bootstrap' process encounters an error about missing Application Default Credentials.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
gcloud auth application-default login
```

----------------------------------------

TITLE: Defining Fragment Shader for Triangle Rendering in GLSL
DESCRIPTION: This fragment shader sets a solid red color for each pixel covered by the triangle.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_1

LANGUAGE: glsl
CODE:
```
out vec4 frag_color;

void main() {
  frag_color = vec4(1.0, 0.0, 0.0, 1.0);
}
```

----------------------------------------

TITLE: Creating Impeller Context for OpenGL ES in C++
DESCRIPTION: Initializes an Impeller context for OpenGL ES using the proc table and shader mappings.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_7

LANGUAGE: c++
CODE:
```
auto context = ContextGLES::Create(
    std::move(gl),        // proc table
    std::move(mappings),  // shader libraries
    false                 // enable tracing
);
```

----------------------------------------

TITLE: Stopping ADB Server
DESCRIPTION: Command to stop the Android Debug Bridge server, terminating any ongoing device connections.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-Flutter-Driver-tests-with-Web.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
adb kill-server
```

----------------------------------------

TITLE: Setting up LLDB for Flutter Engine source mapping
DESCRIPTION: LLDB initialization command to map Flutter Engine source files, useful for Googlers using RBE (Remote Build Execution).
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
settings set target.source-map "flutter/" "/path/to/engine/src/flutter/"
```

----------------------------------------

TITLE: Running Linters Globally on Engine Codebase
DESCRIPTION: This snippet provides the command to run linters across the entire engine repository to maintain coding standards. It emphasizes comprehensive quality checks by applying to all files.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_7

LANGUAGE: shell
CODE:
```
et lint
```

----------------------------------------

TITLE: Attaching to Fuchsia Module
DESCRIPTION: Command for attaching to a Flutter application running on Fuchsia platform by specifying the module name.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/attach.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ flutter attach --module=mod_name
```

----------------------------------------

TITLE: Adding Docregion Comments in YAML
DESCRIPTION: This snippet shows how to employ docregion annotations within a YAML file for documentation.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_10

LANGUAGE: YAML
CODE:
```
# #docregion sectionname
# #enddocregion sectionname
```

----------------------------------------

TITLE: Running an RBE Build with 'et' Tool
DESCRIPTION: This command demonstrates how to run an RBE build using the 'et' tool with the host_debug configuration.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
et build -c host_debug
```

----------------------------------------

TITLE: Updating Vertex Shader with Color Varying in GLSL
DESCRIPTION: This updated vertex shader includes a color input and passes it to the fragment shader as a varying.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_6

LANGUAGE: glsl
CODE:
```
in vec4 color;
out vec4 v_color;

void main() {
  v_color = color;
}
```

----------------------------------------

TITLE: Configuring Flutter and GTK Dependencies in CMake
DESCRIPTION: Adds the Flutter managed directory, includes Flutter build rules, and finds system-level dependencies like GTK3 using pkg-config.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_4

LANGUAGE: CMake
CODE:
```
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")

add_subdirectory(${FLUTTER_MANAGED_DIR})

find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")
```

----------------------------------------

TITLE: Adding Executable Target
DESCRIPTION: This snippet defines the executable target with the name `${BINARY_NAME}` for a WIN32 application. It lists the source files that will be compiled into the executable, including Flutter-generated and application-specific source files.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)
```

----------------------------------------

TITLE: CI Configuration in YAML
DESCRIPTION: Configuration of test shards using .ci.yaml file, including shard, subshard properties and bringup status
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Adding-a-new-Test-Shard.md#2025-04-21_snippet_1

LANGUAGE: YAML
CODE:
```
# Example .ci.yaml entry for a new test shard
shard: new_framework_test
subshard: specific_subshard
bringup: true
```

----------------------------------------

TITLE: Rewriting PR Links in Commit Messages
DESCRIPTION: Updates the PR links in commit messages to reflect the new repository structure.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/history_strategy.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
git filter-repo --force --message-callback '
    return re.sub(br"^(.*)\((#\d+)\)\n(.*)", br"\1(flutter/engine\2)\n\3", message, 1)
    '
```

----------------------------------------

TITLE: Disabling Windows Macros for C++ Standard Library - CMake
DESCRIPTION: This snippet disables specific Windows macros that may conflict with C++ Standard Library functions to ensure correct function usage and foster better compatibility with standard C++.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
# Disable Windows macros that collide with C++ standard library functions.
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")

```

----------------------------------------

TITLE: Publishing Variables to Parent Scope
DESCRIPTION: Publishes key variables, including `FLUTTER_LIBRARY`, `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY`, to the parent scope. This allows other CMake files to access these variables.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: cmake
CODE:
```
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/lib/libapp.so" PARENT_SCOPE)
```

----------------------------------------

TITLE: DevTools Server Response Structure in Dart
DESCRIPTION: Response structure from devtools.serve command containing server status and connection details.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_8

LANGUAGE: dart
CODE:
```
{
  "success": true|false,
  "host": "server_host",
  "port": port_number
}
```

----------------------------------------

TITLE: Configuring List Prepend Function for CMake 3.10 Compatibility
DESCRIPTION: Defines a custom function list_prepend that adds a prefix to each element in a list. This serves the same purpose as list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Linking Flutter Library
DESCRIPTION: Links the Flutter library (`FLUTTER_LIBRARY`) and other dependencies (GTK, GLIB, GIO) to the `flutter` interface library. This ensures that targets that link to `flutter` also link to these dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_11

LANGUAGE: cmake
CODE:
```
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
```

----------------------------------------

TITLE: Configuring Flutter App Wrapper Library
DESCRIPTION: Creates and configures the static library for Flutter application wrapper code. Sets up compilation settings and dependencies for the main application runner.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
add_library(flutter_wrapper_app STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_APP}
)
apply_standard_settings(flutter_wrapper_app)
target_link_libraries(flutter_wrapper_app PUBLIC flutter)
target_include_directories(flutter_wrapper_app PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_app flutter_assemble)
```

----------------------------------------

TITLE: Android Studio Command-line Options Configuration
DESCRIPTION: These are the command-line options that need to be configured in Android Studio to build the Android embedder.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_9

LANGUAGE: Text
CODE:
```
-Pbuild_dir="/tmp/build_dir" -Pflutter_jar="$ENGINE/src/out/android_debug_unopt_arm64/flutter.jar"
```

----------------------------------------

TITLE: Defining Application Target and Building Executable
DESCRIPTION: Defines the application target executable with necessary source files and configures its build settings and dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
# Define the application target. To change its name, change BINARY_NAME above,
# not the value here, or `flutter run` will no longer work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add dependency libraries. Add any application-specific dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)

# Only the install-generated bundle's copy of the executable will launch
# correctly, since the resources must in the right relative locations. To avoid
# people trying to run the unbundled copy, put it in a subdirectory instead of
# the default top-level location.
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)

# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)
```

----------------------------------------

TITLE: Running Arabic Flutter Hello World Demo
DESCRIPTION: Command to execute the Arabic language version of the Flutter Hello World demo by specifying the Arabic implementation file.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/hello_world/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
flutter run lib/arabic.dart
```

----------------------------------------

TITLE: Installation Script for Flutter Application on Windows
DESCRIPTION: This snippet sets up the installation process for a Flutter Windows application, including copying support files to the correct locations, ensuring the application can run within Visual Studio, and setting the default install directory. It handles assets directory management and conditions for AOT library installation based on build configurations.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")

install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  CONFIGURATIONS Profile;Release
  COMPONENT Runtime)

```

----------------------------------------

TITLE: Adding Preprocessor Definitions
DESCRIPTION: This snippet adds preprocessor definitions related to the Flutter version information. These definitions are used during compilation to embed the version details into the application.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")
```

----------------------------------------

TITLE: Running Flutter Web with Local Engine
DESCRIPTION: Flutter commands to run and test a Flutter web application using a locally built Web engine.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
flutter run --local-web-sdk=wasm_release -d chrome
flutter test --local-web-sdk=wasm_release test/path/to/your_test.dart
```

----------------------------------------

TITLE: Making Release Android App Debuggable for Profiling
DESCRIPTION: XML configuration to mark an Android app as debuggable in the AndroidManifest.xml file. Required when profiling release mode applications.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_cpu_profile.md#2025-04-21_snippet_2

LANGUAGE: xml
CODE:
```
android:debuggable="true"
```

----------------------------------------

TITLE: Flutter Device Added Event - JSON-RPC
DESCRIPTION: Example JSON-RPC event notification when a new device is added
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
[{"event":"device.added","params":{"id":"1DD6786B-37D4-4355-AA15-B818A87A18B4","name":"iPhone XS Max","platform":"ios","emulator":true,"ephemeral":false,"platformType":"ios","category":"mobile"}}]
```

----------------------------------------

TITLE: Android Studio Gradle Distribution Configuration
DESCRIPTION: These are the Gradle configurations that need to be configured in Android Studio to build the Android embedder.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_10

LANGUAGE: Text
CODE:
```
$ENGINE/src/third_party/gradle
```

----------------------------------------

TITLE: Basic Integration Test Example
DESCRIPTION: Simple integration test example showing test setup and assertion
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  testWidgets("failing test example", (WidgetTester tester) async {
    expect(2 + 2, equals(5));
  });
}
```

----------------------------------------

TITLE: Custom LTO Build Configuration
DESCRIPTION: Example of building with link-time optimization (LTO) using an existing host release configuration template.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_12

LANGUAGE: sh
CODE:
```
et build --config host_release --lto
```

----------------------------------------

TITLE: Running Flutter dart fix Tests Locally with Shell Command
DESCRIPTION: This command executes the `dart fix` tool with the `--compare-to-golden` flag to test Flutter's data-driven fixes against golden master files in the test_fixes directory.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_driver/test_fixes/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
dart fix --compare-to-golden
```

----------------------------------------

TITLE: Installing FlameGraph via Mint
DESCRIPTION: Command to install the FlameGraph Swift command-line tool using Mint.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/ios_cpu_profile.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
mint install lennet/FlameGraph
```

----------------------------------------

TITLE: Building Flutter App Commands
DESCRIPTION: Common Flutter CLI commands for building and running the application across all platforms.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
flutter build
flutter run
```

----------------------------------------

TITLE: Configuring Installation Directories for Flutter Windows Application
DESCRIPTION: Sets up installation directories for the application, placing files next to the executable to support in-place execution, which is important for Visual Studio integration.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: CMake
CODE:
```
# === Installation ===
# Support files are copied into place next to the executable, so that it can
# run in place. This is done instead of making a separate bundle (as on Linux)
# so that building and running from within Visual Studio will work.
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
# Make the "install" step default, as it's required to run.
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")
```

----------------------------------------

TITLE: Installing AOT library for non-Debug Flutter builds
DESCRIPTION: Installs the Ahead-Of-Time (AOT) compiled library for the Flutter application when building in Profile or Release mode, but not for Debug builds.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_15

LANGUAGE: CMake
CODE:
```
# Install the AOT library on non-Debug builds only.
if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Defining Installation Directories
DESCRIPTION: Defines variables for the installation directories for data and libraries within the build bundle. These directories will contain assets, the Flutter ICU data file, and libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_15

LANGUAGE: cmake
CODE:
```
set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
```

----------------------------------------

TITLE: Configuring Flutter Windows Runner Executable in CMake
DESCRIPTION: This CMake snippet sets up the executable target for a Flutter Windows runner application. It specifies the source files, applies standard settings, adds preprocessor definitions for version information, and sets up dependencies and include directories.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/runner/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)

# Define the application target. To change its name, change BINARY_NAME in the
# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer
# work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add preprocessor definitions for the build version.
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")

# Disable Windows macros that collide with C++ standard library functions.
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")

# Add dependency libraries and include directories. Add any application-specific
# dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)
target_link_libraries(${BINARY_NAME} PRIVATE "dwmapi.lib")
target_include_directories(${BINARY_NAME} PRIVATE "${CMAKE_SOURCE_DIR}")

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: Adding Flutter Interface Library
DESCRIPTION: Adds an interface library named `flutter`. Interface libraries don't contain code themselves but provide include directories and link dependencies to other targets.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_9

LANGUAGE: cmake
CODE:
```
add_library(flutter INTERFACE)
```

----------------------------------------

TITLE: Dart Imports for Hybrid Composition
DESCRIPTION: Import necessary Flutter packages for platform view implementation on the Dart side
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/Hybrid-Composition.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
```

----------------------------------------

TITLE: Flutter Sample Creation Command
DESCRIPTION: Command-line instruction for creating a Flutter project from a sample using the flutter create command
SOURCE: https://github.com/flutter/flutter/blob/master/dev/snippets/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
flutter create --sample=[directory.File.sampleNumber] [name_of_project_directory]
```

----------------------------------------

TITLE: Making EGL Context Current in C++
DESCRIPTION: Makes the created EGL context current on the calling thread.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_3

LANGUAGE: c++
CODE:
```
context->MakeCurrent(*surface);
```

----------------------------------------

TITLE: Building Fuchsia for QEMU Testing
DESCRIPTION: Command to set up and build Fuchsia for QEMU x64 testing environment.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
fx set terminal.qemu-x64 && fx build
```

----------------------------------------

TITLE: Running Fuchsia Tests Locally
DESCRIPTION: Python command to run Fuchsia tests locally using the Flutter testing framework.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
python3 flutter/tools/fuchsia/with_envs.py flutter/testing/fuchsia/run_tests.py
```

----------------------------------------

TITLE: Implementing Parameterized Message in DefaultMaterialLocalizations
DESCRIPTION: Implementation of a parameterized localized string function in the DefaultMaterialLocalizations class.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/README.md#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
@override
String aboutListTileTitle(String applicationName) => 'About $applicationName';
```

----------------------------------------

TITLE: Removing Named Parameter in YAML
DESCRIPTION: Shows how to specify removing a named parameter by providing its parameter name in a YAML configuration
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_10

LANGUAGE: yaml
CODE:
```
kind: 'removeParameter'
name: 'p'
```

----------------------------------------

TITLE: Local Sample Code Analysis Command
DESCRIPTION: Bash command to run sample code analysis locally in the Flutter repository
SOURCE: https://github.com/flutter/flutter/blob/master/dev/snippets/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
TMPDIR=/tmp bin/cache/dart-sdk/bin/dart dev/bots/analyze_sample_code.dart --temp=samples
```

----------------------------------------

TITLE: Update Script Path Reference - Widget Preview Scaffold
DESCRIPTION: Reference to the Dart script path used to regenerate the widget preview scaffold project
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/test/widget_preview_scaffold.shard/README.md#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
dart test/widget_preview_scaffold.shard/update_widget_preview_scaffold.dart
```

----------------------------------------

TITLE: Setting up EGL Display Connection in C++
DESCRIPTION: Creates an EGL display connection using Impeller's EGL toolkit.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_0

LANGUAGE: c++
CODE:
```
egl::Display display;
```

----------------------------------------

TITLE: Including Flutter Libraries and Setting Up System Dependencies
DESCRIPTION: Adds Flutter libraries and configures GTK dependencies for the Linux application. This section includes the Flutter managed directory and sets up the required GTK3 package.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")
```

----------------------------------------

TITLE: Appending Flutter Library Headers
DESCRIPTION: Appends a list of header files for the Flutter library to a CMake list. These headers are crucial for compiling projects that link against the Flutter engine. The function 'list_prepend' is used to add a specific directory path prefix to each header file.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: CMake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
```

----------------------------------------

TITLE: Dart Youtube Link
DESCRIPTION: Shows how to embed a YouTube video within Dart documentation using the `{@youtube}` tag.  The tag requires the video's width and height as the first two arguments, followed by the video's URL.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
/// {@youtube 560 315 https://www.youtube.com/watch?v=<id>}
```

----------------------------------------

TITLE: Platform Tools Installation
DESCRIPTION: Installs Android platform tools for device interaction and debugging
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_3

LANGUAGE: android-sdk
CODE:
```
platform-tools:platform-tools
```

----------------------------------------

TITLE: Building and Running Leak Sanitizer Tests
DESCRIPTION: This set of commands demonstrates how to build Flutter Engine with Leak Sanitizer enabled, and run the embedder unit tests with the appropriate suppressions.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ ./flutter/tools/gn --runtime-mode debug --lsan --unoptimized --no-goma
$ autoninja -C out/host_debug_unopt
$ source ./flutter/testing/sanitizer_suppressions.sh
$ ./out/host_debug_unopt/embedder_unittests
```

----------------------------------------

TITLE: Defining Profile Build Mode Flags for Flutter Windows Application
DESCRIPTION: Configures linker and compiler flags specifically for the Profile build mode, which inherits settings from Release mode.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
# Define settings for the Profile build mode.
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")
```

----------------------------------------

TITLE: List GPG Keys to Find Key Hash
DESCRIPTION: This command lists all secret keys with their long format key IDs. It is used to locate the correct GPG key hash required when configuring Git for signing commits. The key hash is found in the line starting with 'sec'.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Signing-commits.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
gpg --list-secret-keys --keyid-format=long
```

----------------------------------------

TITLE: Adding Preprocessor Definitions for Flutter Version
DESCRIPTION: Adds preprocessor definitions for the Flutter version to the Windows runner target. This includes major, minor, patch, and build version numbers.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: CMake
CODE:
```
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION=\"${FLUTTER_VERSION}\"")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}")
target_compile_definitions(${BINARY_NAME} PRIVATE "FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}")
```

----------------------------------------

TITLE: Running Specific Test File
DESCRIPTION: Command to run tests from a specific test file
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
flutter test test/general.shard/utils_test.dart
```

----------------------------------------

TITLE: Downloading Assets for Flutter Deferred Components Test
DESCRIPTION: Command to download required assets before running the integration tests. This step is necessary to prepare the test environment.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/deferred_components_test/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./download_assets.sh
```

----------------------------------------

TITLE: Setting Up Flutter Assets Installation in CMake
DESCRIPTION: Configures the installation of Flutter assets, ensuring a clean copy by removing any existing assets directory before reinstalling.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_8

LANGUAGE: CMake
CODE:
```
# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)
```

----------------------------------------

TITLE: Configuring Basic Project Settings in CMake
DESCRIPTION: Initializes core project settings including minimum CMake version, project name, and C++ standard version. Sets the binary name and application identifier for the Flutter application.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.10)
project(runner LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 17)
set(BINARY_NAME "platform_view")
set(APPLICATION_ID "io.flutter.examples.platform_view")
```

----------------------------------------

TITLE: Defining the Flutter application executable target for Linux
DESCRIPTION: Creates the executable target for the Flutter application, specifying the source files to be compiled including the main application code and plugin registrant.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_7

LANGUAGE: CMake
CODE:
```
# Define the application target. To change its name, change BINARY_NAME above,
# not the value here, or `flutter run` will no longer work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)
```

----------------------------------------

TITLE: Setting Up Flutter Linux Library Dependencies
DESCRIPTION: Configures system-level dependencies for Flutter Linux using PkgConfig to find GTK, GLIB, and GIO packages. Sets the Flutter library path and publishes essential paths to parent scope for installation steps.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# === Flutter Library ===
# System-level dependencies.
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)

set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/libflutter_linux_gtk.so")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/lib/libapp.so" PARENT_SCOPE)
```

----------------------------------------

TITLE: Bootstrap gclient for Flutter Engine
DESCRIPTION: This snippet describes how to bootstrap the gclient dependency management tool for the Flutter engine. It includes steps for copying gclient configuration files based on user type (Googlers or others) and executing the sync command to set up dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/README.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
1. Copy one of the `engine/scripts/*.gclient` to the [root](../) folder as `.gclient`:
    1. Googlers: copy `rbe.gclient` to enable faster builds with [RBE](https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md)
    2. Everyone else: copy `standard.gclient`
2. run `gclient sync` from the [root](../) folder
```

----------------------------------------

TITLE: Configuring Flutter Plugin Wrapper Library
DESCRIPTION: Defines and configures the Flutter plugin wrapper library with core and plugin-specific source files. Sets up compilation flags and dependencies for plugin support.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/windows.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)
apply_standard_settings(flutter_wrapper_plugin)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  POSITION_INDEPENDENT_CODE ON)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  CXX_VISIBILITY_PRESET hidden)
target_link_libraries(flutter_wrapper_plugin PUBLIC flutter)
target_include_directories(flutter_wrapper_plugin PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_plugin flutter_assemble)
```

----------------------------------------

TITLE: Install Assets Directory
DESCRIPTION: Installs the assets directory (named `flutter_assets`) to the data directory within the installation bundle. This includes all Flutter assets like images, fonts, and configuration files.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_27

LANGUAGE: cmake
CODE:
```
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)
```

----------------------------------------

TITLE: Adding Image to Skia Gold in Dart
DESCRIPTION: This code shows how to use the `addImg` method of the `SkiaGoldClient` to upload a screenshot to Skia Gold. The method takes the test name, the file path to the screenshot, and the size of the screenshot as arguments, and it is assumed the client has been authenticated.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/skia_gold_client/README.md#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
await client.addImg(
  'my-screenshot',
  io.File('path/to/screenshot.png'),
  screenshotSize: 400, // i.e. a 20x20 image
);
```

----------------------------------------

TITLE: Generating Localizations Command
DESCRIPTION: Commands for generating and updating localization files using the gen_localizations script.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/lib/src/l10n/README.md#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
dart dev/tools/localization/bin/gen_localizations.dart

dart dev/tools/localization/bin/gen_localizations.dart --overwrite
```

----------------------------------------

TITLE: Symbolicating Android Local Engine Builds
DESCRIPTION: Shows how to invoke the ndk-stack tool on logcat outputs for symbolication of local engine builds. Presumes access to unoptimized (debug) engine build directories.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
adb logcat | ~/dev/engine/src/third_party/android_tools/ndk/prebuilt/linux-x86_64/bin/ndk-stack -sym ~/dev/engine/src/out/android_debug_unopt
```

----------------------------------------

TITLE: Querying Flutter Views with _flutter.listViews Protocol
DESCRIPTION: Retrieves a list of Flutter views including their associated isolates. This extension is typically requested early in the application lifecycle to get details of the root isolate. It takes no arguments and returns view information with isolate details.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "type": "FlutterViewList",
  "views": [
    {
      "type": "FlutterView",
      "id": "_flutterView/0x1066096d8",
      "isolate": {
        "type": "@Isolate",
        "fixedId": true,
        "id": "isolates/453229818",
        "name": "main.dart$main-453229818",
        "number": 453229818
      }
    }
  ]
}
```

----------------------------------------

TITLE: Setting Executable Output Directory
DESCRIPTION: Sets the output directory for the executable. This prevents users from running the unbundled executable. The executable will be placed in `intermediates_do_not_run`.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_12

LANGUAGE: cmake
CODE:
```
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)
```

----------------------------------------

TITLE: Adding Docregion Annotations in XML and HTML
DESCRIPTION: This snippet demonstrates how to use docregion comments within XML and HTML files for documentation purposes.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_8

LANGUAGE: XML/HTML
CODE:
```
<!--#docregion sectionname-->
<!--#enddocregion sectionname-->
```

----------------------------------------

TITLE: Iterating on Tests Efficiently
DESCRIPTION: This snippet explains how to speed up the testing process by skipping the build of Fuchsia and the starting of the Fuchsia emulator during subsequent test runs. The provided command line shows the use of '--skip-fuchsia-build' and '--skip-fuchsia-emu' flags.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/README.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_integration_test.sh embedder --no-lto --skip-fuchsia-build --skip-fuchsia-emu
```

----------------------------------------

TITLE: Installing AOT Library (Non-Debug)
DESCRIPTION: Installs the AOT (Ahead-Of-Time) compiled library only for non-Debug builds. This library is essential for optimized performance in Profile and Release builds.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_21

LANGUAGE: cmake
CODE:
```
if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Creating Executable Target
DESCRIPTION: Defines the executable target, specifies source files, and creates the executable. It uses GLOB_RECURSE to find all source files and then adds an executable target.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
set(EXE_NAME embedder_example_vulkan)

file(GLOB_RECURSE SOURCE_FILES "src/*.cc" "src/*.h")
add_executable(${EXE_NAME} ${SOURCE_FILES})
```

----------------------------------------

TITLE: Visualizing Impeller Shader Compilation Pipeline with Mermaid
DESCRIPTION: A flowchart diagram illustrating the offline shader compilation pipeline for Impeller, showing the process from GLSL ES 4.60 to various platform-specific shader formats and C++ libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/README.md#2025-04-21_snippet_0

LANGUAGE: mermaid
CODE:
```
flowchart TD
    glsl_460[GLSL ES 4.60] -- Stage 1 Compiler --> spirv[SPIRV]

    spirv -- SPIRV Optimizer --> optimized_spirv[Optimized SPIRV]

    optimized_spirv -- Metal Stage 2 Compiler --> metal_sources[Metal Shader Sources]
    metal_sources -- Metal Linker --> metal_library[Metal Library]

    optimized_spirv -- Vulkan Stage 2 Compiler --> vulkan_spirv[Vulkan SPIRV]
    vulkan_spirv -- Shader Archiver --> vulkan_shader_archive[Vulkan Shader Archive]

    optimized_spirv -- GLSL ES Stage 2 Compiler --> glsl_es_100[GLSL ES 1.00]
    glsl_es_100 -- Shader Archiver --> gles_shader_archive[OpenGL ES Shader Archive]

    spirv -- Reflector --> cxx_sources[C++ Sources]
    cxx_sources -- Ninja Build --> cxx_library[C++ Library]
```

----------------------------------------

TITLE: Installing Assets Directory
DESCRIPTION: Installs the assets directory, ensuring all resources are copied to the build bundle and removing any previously existing resources to prevent stale files.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_20

LANGUAGE: cmake
CODE:
```
# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)
```

----------------------------------------

TITLE: Installing Flutter assets for Linux bundle
DESCRIPTION: Sets up rules to copy the Flutter assets directory to the bundle, ensuring old files are removed first to avoid stale assets from previous installations.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_14

LANGUAGE: CMake
CODE:
```
# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)
```

----------------------------------------

TITLE: Installing Application Components
DESCRIPTION: Configures installation rules for the binary, ICU data file, Flutter library, bundled libraries, and asset files required by the application.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/CMakeLists.txt#2025-04-21_snippet_7

LANGUAGE: CMake
CODE:
```
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

foreach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})
  install(FILES "${bundled_library}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endforeach(bundled_library)

# Fully re-copy the assets directory on each build to avoid having stale files
# from a previous install.
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)
```

----------------------------------------

TITLE: Disabling Windows Macros
DESCRIPTION: This snippet disables Windows macros that can conflict with C++ standard library functions by defining `NOMINMAX` during compilation.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: cmake
CODE:
```
target_compile_definitions(${BINARY_NAME} PRIVATE "NOMINMAX")
```

----------------------------------------

TITLE: Standard Image Upload Command
DESCRIPTION: Primary command to upload golden test images from a specified directory using the golden tests harvester tool
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/golden_tests_harvester/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
dart \./tools/golden_tests_harvester/bin/golden_tests_harvester\.dart <path\/to\/digests>
```

----------------------------------------

TITLE: Enabling Unicode Support for Windows Flutter Application
DESCRIPTION: Adds Unicode definitions to ensure proper text handling in the Windows environment.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
# Use Unicode for all projects.
add_definitions(-DUNICODE -D_UNICODE)
```

----------------------------------------

TITLE: Installing Flutter ICU Data File
DESCRIPTION: Installs the Flutter ICU data file to the data directory within the build bundle. This file is required for Flutter to handle internationalization and localization.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_17

LANGUAGE: cmake
CODE:
```
install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Basic DeviceLab Test Implementation - Dart
DESCRIPTION: Example implementation of a basic DeviceLab test using the testing framework. Shows how to define a task and report success or failure results.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
import 'dart:async';

import 'package:flutter_devicelab/framework/framework.dart';

Future<void> main() async {
  await task(() async {
    ... do something interesting ...

    // Aggregate results into a JSONable Map structure.
    Map<String, dynamic> testResults = ...;

    // Report success.
    return new TaskResult.success(testResults);

    // Or you can also report a failure.
    return new TaskResult.failure('Something went wrong!');
  });
}
```

----------------------------------------

TITLE: Running Gradle Tests
DESCRIPTION: Command to run all Gradle tests in the project
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
./gradlew test
```

----------------------------------------

TITLE: iOS Integration Test Setup
DESCRIPTION: Objective-C test setup for iOS integration testing
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/README.md#2025-04-21_snippet_7

LANGUAGE: objective-c
CODE:
```
@import XCTest;
@import integration_test;

INTEGRATION_TEST_IOS_RUNNER(RunnerTests)
```

----------------------------------------

TITLE: Cloning Flutter repository using SSH
DESCRIPTION: This command clones the flutter/flutter repository using SSH. SSH is a secure method for accessing the repository. Ensure you have a working SSH key configured on your GitHub account.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
"git clone git@github.com:flutter/flutter.git"
```

----------------------------------------

TITLE: Set CMake minimum required version
DESCRIPTION: Specifies the minimum version of CMake required to build the project. This ensures that the CMake features used are supported.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.10)
```

----------------------------------------

TITLE: Project Configuration with CMake for Flutter Windows
DESCRIPTION: This code snippet sets the minimum required CMake version to 3.14, defines the project 'windows_startup_test', and specifies configurations for building a Flutter application on Windows. It includes settings for executable names, build types (Debug, Profile, Release), and Unicode usage. Dependencies include a modern version of CMake and correct setup of environment paths.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(windows_startup_test LANGUAGES CXX)

set(BINARY_NAME "windows_startup_test")

cmake_policy(VERSION 3.14...3.25)

get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release"
    CACHE STRING "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Debug" CACHE
      STRING "Flutter build mode" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
      "Debug" "Profile" "Release")
  endif()
endif()

set(CMAKE_EXE_LINKER_FLAGS_PROFILE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_PROFILE "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_PROFILE "${CMAKE_CXX_FLAGS_RELEASE}")

add_definitions(-DUNICODE -D_UNICODE)

```

----------------------------------------

TITLE: Building and Running Memory Sanitizer Tests
DESCRIPTION: This set of commands shows how to build Flutter Engine with Memory Sanitizer enabled to detect reads of uninitialized memory, and run the embedder unit tests. This sanitizer is only available on Linux.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
$ ./flutter/tools/gn --runtime-mode debug --msan --unoptimized --no-goma
$ autoninja -C out/host_debug_unopt
$ source ./flutter/testing/sanitizer_suppressions.sh
$ ./out/host_debug_unopt/embedder_unittests
```

----------------------------------------

TITLE: Applying Standard Build Settings
DESCRIPTION: Applies predefined standard build settings to the target. This helper function likely sets common compiler flags and build configurations for Flutter applications.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/runner/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
apply_standard_settings(${BINARY_NAME})
```

----------------------------------------

TITLE: Install Bundled Plugin Libraries
DESCRIPTION: Installs any bundled plugin libraries to the library directory. This is conditional on the `PLUGIN_BUNDLED_LIBRARIES` variable being set.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_25

LANGUAGE: cmake
CODE:
```
if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Adding Mint bin directory to PATH
DESCRIPTION: Commands to add the Mint bin directory to the user's PATH and reload the profile.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/ios_cpu_profile.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
echo 'export PATH="$PATH:$HOME/.mint/bin"' >> ~/.profile
source ~/.profile
```

----------------------------------------

TITLE: Defining Application Target and Source Files for Flutter Linux Application
DESCRIPTION: Defines the executable target for the application using the specified BINARY_NAME, includes source files, and links against Flutter and GTK dependencies. Configures the output directory for the binary.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_5

LANGUAGE: CMake
CODE:
```
# Define the application target. To change its name, change BINARY_NAME above,
# not the value here, or `flutter run` will no longer work.
#
# Any new source files that you add to the application should be added here.
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)

# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

# Add dependency libraries. Add any application-specific dependencies here.
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)

# Run the Flutter tool portions of the build. This must not be removed.
add_dependencies(${BINARY_NAME} flutter_assemble)

# Only the install-generated bundle's copy of the executable will launch
# correctly, since the resources must in the right relative locations. To avoid
# people trying to run the unbundled copy, put it in a subdirectory instead of
# the default top-level location.
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)

# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)
```

----------------------------------------

TITLE: Configuring Application Component Installation in CMake
DESCRIPTION: Defines installation rules for runtime components including the main binary, ICU data file, Flutter library, and plugin libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/CMakeLists.txt#2025-04-21_snippet_7

LANGUAGE: CMake
CODE:
```
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)

if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()
```

----------------------------------------

TITLE: Adding Goldctl Dependency in CI YAML (Diff)
DESCRIPTION: This diff snippet demonstrates how to add a dependency on `goldctl` in the `.ci.yaml` file of a Flutter project. It ensures that the `goldctl` tool is available during the CI process for screenshot testing.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/skia_gold_client/README.md#2025-04-21_snippet_2

LANGUAGE: diff
CODE:
```
   # This is just an example.
   targets:
     - name: Linux linux_android_emulator_tests
       properties:
         config_name: linux_android_emulator
   +       dependencies: >-
   +         [
   +           {"dependency": "goldctl", "version": "git_revision:720a542f6fe4f92922c3b8f0fdcc4d2ac6bb83cd"}
   +         ]
```

----------------------------------------

TITLE: Initializing CMake Project for Flutter API Samples in C++
DESCRIPTION: Sets up the CMake project with minimum version, project name, and language. Defines the binary name and application ID for the Flutter API samples project.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.10)
project(runner LANGUAGES CXX)

set(BINARY_NAME "flutter_api_samples")
set(APPLICATION_ID "dev.flutter.flutter_api_samples")

cmake_policy(SET CMP0063 NEW)

set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")
```

----------------------------------------

TITLE: Setting CMake policies and installation path for Flutter Linux build
DESCRIPTION: Configures CMake policies and sets up the installation path for bundled libraries relative to the binary.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(SET CMP0063 NEW)

# Load bundled libraries from the lib/ directory relative to the binary.
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")
```

----------------------------------------

TITLE: Building Using Host Debug Configuration
DESCRIPTION: This snippet outlines the command to build the Flutter engine using the default host debug configuration. It is useful for desktop platform development and requires a properly set up Flutter engine environment.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
et build
et build --config host_debug
```

----------------------------------------

TITLE: Setting Up Flutter Integration in CMake Build System
DESCRIPTION: Configures the Flutter library and tools by adding the Flutter subdirectory and plugin build rules, then links them to the application target.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
# Flutter library and tool build rules.
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

# Application build; see runner/CMakeLists.txt.
add_subdirectory("runner")

# Generated plugin build rules, which manage building the plugins and adding
# them to the application.
include(flutter/generated_plugins.cmake)

target_include_directories(${BINARY_NAME} INTERFACE
  "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
target_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_plugin)
```

----------------------------------------

TITLE: Append Flutter library headers
DESCRIPTION: Creates a list of Flutter library header files and prepends the path to the directory containing these headers using the previously defined `list_prepend` function.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: cmake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
```

----------------------------------------

TITLE: Creating Flutter Wrapper Libraries
DESCRIPTION: Defines static libraries for Flutter plugin and app wrappers, including core, plugin, and application-specific source files. Manages library dependencies and include paths.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)

add_library(flutter_wrapper_app STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_APP}
)
```

----------------------------------------

TITLE: Running Full Microbenchmark Collection
DESCRIPTION: Command to run all microbenchmarks on a specified device in profile mode using Flutter CLI
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/microbenchmarks/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
flutter run -d $DEVICE_ID --profile lib/benchmark_collection.dart
```

----------------------------------------

TITLE: Garbage Collection for Git Repository
DESCRIPTION: Performs aggressive garbage collection on the Git repository to reduce its size after filtering.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/history_strategy.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
git reflog expire --expire=now --all && git gc --prune=now --aggressive
```

----------------------------------------

TITLE: Running Objective-C XCTests with iOS Variant
DESCRIPTION: This script builds and runs XCTests for the iOS embedding of the Flutter engine. The `--ios-variant` argument specifies the iOS build variant to use, such as `ios_debug_sim_unopt_arm64` for arm64 Mac simulators.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
testing/run_tests.py --type=objc

```

----------------------------------------

TITLE: Running Virtual Display Platform View App and Test
DESCRIPTION: Commands to run the virtual_display_platform_view app and its corresponding test using Flutter CLI.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_6

LANGUAGE: Shell
CODE:
```
# Run the app
$ flutter run lib/platform_view/virtual_display_platform_view_main.dart

# Run the test
$ flutter drive lib/platform_view/virtual_display_platform_view_main.dart
```

----------------------------------------

TITLE: Flutter Library Headers Definition in CMake
DESCRIPTION: Creates a list of Flutter Linux library headers and prepends the ephemeral directory path to each header file. These headers define the API for Flutter Linux integration.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
```

----------------------------------------

TITLE: Applying Standard Build Settings - CMake
DESCRIPTION: This snippet applies a standard set of build settings to the defined application target. These settings can be modified or removed if the application has specific needs.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/runner/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# Apply the standard set of build settings. This can be removed for applications
# that need different build settings.
apply_standard_settings(${BINARY_NAME})

```

----------------------------------------

TITLE: Add Flutter Subdirectory
DESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build. This allows CMake to process the CMakeLists.txt file within that directory, building the Flutter engine and related components.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_8

LANGUAGE: cmake
CODE:
```
add_subdirectory(${FLUTTER_MANAGED_DIR})
```

----------------------------------------

TITLE: Setting RPATH for Executable
DESCRIPTION: Sets the RPATH (Run-Time Search Path) for the executable, specifying that libraries should be searched for in the 'lib' subdirectory relative to the executable's location. This helps the executable find its shared libraries at runtime.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: cmake
CODE:
```
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")
```

----------------------------------------

TITLE: Link Libraries to Executable
DESCRIPTION: Links the Flutter library and GTK library to the executable.  Libraries are linked privately, so they are not exposed for other targets to link to.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_14

LANGUAGE: cmake
CODE:
```
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)
```

----------------------------------------

TITLE: Configuring Flutter Library Paths
DESCRIPTION: Defines and sets various paths related to the Flutter library and considers fallback configurations for different platforms.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")
```

----------------------------------------

TITLE: Setting Ephemeral Directory Path
DESCRIPTION: This snippet assigns the path to the ephemeral directory, which contains auto-generated configuration files, to a CMake variable. It relies on the current source directory as a base path, indicating that the build setup uses relative paths to manage file locations.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")
```

----------------------------------------

TITLE: Configuring Application Target and Dependencies in CMake
DESCRIPTION: Defines the main application executable target with source files and links required dependencies including Flutter and GTK libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/linux/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)
```

----------------------------------------

TITLE: Regenerating Flutter Tools Snapshot
DESCRIPTION: Commands to force regeneration of Flutter Tools snapshot by removing cache files
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_7

LANGUAGE: shell
CODE:
```
rm ../../bin/cache/flutter_tools.stamp ../../bin/cache/flutter_tools.snapshot
```

----------------------------------------

TITLE: Configuring Flutter Wrapper Libraries in CMake for Windows
DESCRIPTION: This snippet sets up the Flutter wrapper libraries for plugins and the main app. It defines source files, creates static libraries, and sets their properties and dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# Wrapper sources needed for a plugin.
add_library(flutter_wrapper_plugin STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
)
apply_standard_settings(flutter_wrapper_plugin)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  POSITION_INDEPENDENT_CODE ON)
set_target_properties(flutter_wrapper_plugin PROPERTIES
  CXX_VISIBILITY_PRESET hidden)
target_link_libraries(flutter_wrapper_plugin PUBLIC flutter)
target_include_directories(flutter_wrapper_plugin PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_plugin flutter_assemble)

# Wrapper sources needed for the runner.
add_library(flutter_wrapper_app STATIC
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_APP}
)
apply_standard_settings(flutter_wrapper_app)
target_link_libraries(flutter_wrapper_app PUBLIC flutter)
target_include_directories(flutter_wrapper_app PUBLIC
  "${WRAPPER_ROOT}/include"
)
add_dependencies(flutter_wrapper_app flutter_assemble)
```

----------------------------------------

TITLE: Flutter SDK Path Configuration in Gradle Settings
DESCRIPTION: Gradle configuration code that loads Flutter SDK path from local.properties and applies plugin loader. This code should be removed when creating settings_aar.gradle file.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/manual_migration_settings.gradle.md#2025-04-21_snippet_0

LANGUAGE: groovy
CODE:
```
def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
def properties = new Properties()

assert localPropertiesFile.exists()
localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }

def flutterSdkPath = properties.getProperty("flutter.sdk")
assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
```

----------------------------------------

TITLE: Defining standard compilation settings function for Flutter Linux targets
DESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++14 standard, warning flags, and optimization options based on build type.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()
```

----------------------------------------

TITLE: Setting Up Flutter Tool Backend Build Commands
DESCRIPTION: Configures custom build commands for the Flutter tool backend. Sets up build dependencies and ensures proper generation of Flutter libraries and headers.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
  ${CPP_WRAPPER_SOURCES_APP}
)
```

----------------------------------------

TITLE: Defining Standard Compilation Settings for Flutter Project in CMake
DESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++14 standard, warning flags, and optimization options.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: CMake
CODE:
```
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()
```

----------------------------------------

TITLE: Set Flutter library path
DESCRIPTION: Defines the path to the Flutter library (`libflutter_linux_gtk.so`) and other related files (ICU data file, AOT library, project build directory) and publishes them to the parent scope for use in install steps.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: cmake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/libflutter_linux_gtk.so")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/lib/libapp.so" PARENT_SCOPE)
```

----------------------------------------

TITLE: Including Generated Configuration
DESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains settings specific to the Flutter project and build environment.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
include(${EPHEMERAL_DIR}/generated_config.cmake)
```

----------------------------------------

TITLE: Building Flutter Application Executable in CMake
DESCRIPTION: Configures the main executable for the Flutter application, applies standard settings, links necessary libraries, and sets output properties.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_5

LANGUAGE: CMake
CODE:
```
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)
apply_standard_settings(${BINARY_NAME})
target_link_libraries(${BINARY_NAME} PRIVATE flutter)
target_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)
add_dependencies(${BINARY_NAME} flutter_assemble)
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)
```

----------------------------------------

TITLE: Installation Configuration
DESCRIPTION: Configures the installation process, defining the build bundle directory and ensuring it's cleaned before each install. The CMAKE_INSTALL_PREFIX is also initialized if it has its default value.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_14

LANGUAGE: cmake
CODE:
```
# === Installation ===
# By default, "installing" just makes a relocatable bundle in the build
# directory.
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

# Start with a clean build bundle directory every time.
install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\"")
  " COMPONENT Runtime)
```

----------------------------------------

TITLE: Running Dart Fix Tests in Flutter Driver
DESCRIPTION: Command to execute tests that validate the fix rules in the flutter_driver package. This should be run in the flutter/packages/flutter_driver/test_fixes directory to compare the current fixes against golden files.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_driver/lib/fix_data/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
dart fix --compare-to-golden
```

----------------------------------------

TITLE: Adding Application ID Definition
DESCRIPTION: Adds a compiler definition for the APPLICATION_ID. This makes the application ID available to the C++ code during compilation.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_10

LANGUAGE: cmake
CODE:
```
add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")
```

----------------------------------------

TITLE: Applying Standard Settings
DESCRIPTION: This snippet applies a predefined set of standard build settings to the executable target, which can be customized if needed.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/runner/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
apply_standard_settings(${BINARY_NAME})
```

----------------------------------------

TITLE: Migrating MainActivity Kotlin Code - Simple Case
DESCRIPTION: Updates MainActivity in Kotlin for the new Flutter Android embedding by removing manual plugin registration and updating import statements
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_1

LANGUAGE: kotlin
CODE:
```
// MainActivity.kt
-import android.os.Bundle
-import io.flutter.app.FlutterActivity
+import io.flutter.embedding.android.FlutterActivity
-import io.flutter.plugins.GeneratedPluginRegistrant

class MainActivity: FlutterActivity() {
-  override fun onCreate(savedInstanceState: Bundle?) {
-    super.onCreate(savedInstanceState)
-    GeneratedPluginRegistrant.registerWith(this)
-  }
}
```

----------------------------------------

TITLE: Setting Ephemeral Directory
DESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and libraries. This directory is used to locate Flutter-specific files.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")
```

----------------------------------------

TITLE: Running Specific Dart Tests with Filter
DESCRIPTION: This snippet shows how to run a specific Dart test by providing the base file name with the `--dart-filter` argument. It requires the corresponding Dart test file to be present and accessible.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/dart/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
./testing/run_tests.py --type=dart --dart-filter=image_filter_test.dart
```

----------------------------------------

TITLE: Initializing Flutter Linux Build Configuration in CMake
DESCRIPTION: Sets up the initial CMake configuration for Flutter Linux builds, including minimum version requirements and inclusion of generated config.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.10)

set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")

# Configuration provided via flutter tool.
include(${EPHEMERAL_DIR}/generated_config.cmake)
```

----------------------------------------

TITLE: Using Type Inference in Dart
DESCRIPTION: Demonstrates appropriate use of type inference in Dart based on the Flutter engine style guide. Explicit types are sometimes necessary to enhance readability and maintainability, especially when the type is not evident from the context or when semantic implications exist. Type annotations can be added or removed as the code evolves.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/CONTRIBUTING.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
// Capitalized constructor name always returns a Foo.
var foo = Foo();

// Similar with factory constructors.
var bar = Bar.create();

// Literals (strings, numbers, lists, maps, etc) always return the same type.
var name = 'John Doe';
var flag = true;
var numbers = [1, 2, 3];
var map = {'one': 1, 'two': 2, 'three': 3};
```

LANGUAGE: dart
CODE:
```
// toString() always returns a String.
var string = foo().toString();

// It's reasonable to assume that length returns an int.
var length = string.length;
```

LANGUAGE: dart
CODE:
```
// When variables are in the same scope, reduce() clearly returns an int.
var list = [1, 2, 3];
var sum = list.reduce((a, b) => a + b);
```

LANGUAGE: dart
CODE:
```
// What does 'fetchLatest()' return?
ImageBuffer buffer = fetchLatest();

// What does this large chain of method calls return?
Iterable<int> numbers = foo().bar().map((b) => b.baz());
```

LANGUAGE: dart
CODE:
```
// Without 'num', the map would be inferred as 'Map<String, int>'.
const map = <String, num>{'one': 1, 'two': 2, 'three': 3};
```

----------------------------------------

TITLE: Defining Standard Compiler Settings Function for Flutter Windows Targets
DESCRIPTION: Creates a reusable function to apply consistent compiler settings to build targets. Configures C++17 standard, warning levels, exception handling, and debug definitions.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()
```

----------------------------------------

TITLE: Running iOS End-to-End Tests
DESCRIPTION: This shell script executes the end-to-end tests for the iOS embedding of the Flutter engine.  It is located in the `testing/ios_scenario_app` directory and is responsible for building and running the tests on a headless iOS simulator.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
"testing/ios_scenario_app/run_ios_tests.sh"
```

----------------------------------------

TITLE: Flutter Tool Backend Build Command
DESCRIPTION: Custom build command that runs the Flutter tool backend script to generate necessary build artifacts. Uses a _phony_ target to ensure the command runs on every build.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
)
```

----------------------------------------

TITLE: Moving Android Resources
DESCRIPTION: Transfers Android resources such as custom launcher icons to the new project structure. `<existing-app-dir>/android/res` should contain resources. This process is required for apps with custom resources to ensure they are included post-migration.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-build-with-gradle.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
cp -r <existing-app-dir>/android/res <appname>android/app/src/main/
```

----------------------------------------

TITLE: Updating Dependencies Syntax in Default Flutter Project Templates
DESCRIPTION: This snippet changes dependency syntax from `compile` to `api` or `implementation` and updates Android support test libraries to align with Android Studio's practices.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_6

LANGUAGE: Gradle
CODE:
```
dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
```

----------------------------------------

TITLE: Find Package PkgConfig
DESCRIPTION: Finds the PkgConfig package, which is used to locate system libraries. It is marked as `REQUIRED`, meaning the build will fail if PkgConfig is not found.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_9

LANGUAGE: cmake
CODE:
```
find_package(PkgConfig REQUIRED)
```

----------------------------------------

TITLE: Running Java Unit Tests for Android Embedder
DESCRIPTION: This command executes Java unit tests for the Android embedder. It assumes you are at the root of the engine repository where `run_tests.py` is located. This snippet shows how to run the tests using the `run_tests.py` script with the `--type java` option.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
./testing/run_tests.py --type java
```

----------------------------------------

TITLE: Running Dart Unit Tests
DESCRIPTION: This Python script executes the Dart unit tests for the Flutter engine. It utilizes the GN and Ninja build systems to compile and run `_test.dart` files under the `testing/dart` directory, leveraging a Dart SDK specified in the `DEPS` file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
"testing/run_tests.py --type=dart"
```

----------------------------------------

TITLE: Set Executable Output Directory
DESCRIPTION: Sets the runtime output directory for the executable. This prevents users from running the unbundled executable by placing it in a subdirectory.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_16

LANGUAGE: cmake
CODE:
```
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)
```

----------------------------------------

TITLE: Setting Minimum CMake Version
DESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the project can be built with the expected CMake features.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.10)
```

----------------------------------------

TITLE: Running Flutter Framework Tests
DESCRIPTION: This shell command executes Flutter framework tests within the `flutter/flutter` repository. It assumes that the `flutter` and `engine` directories are siblings and uses the `flutter test` command with the `--local-engine` and `--local-engine-host` flags to specify the engine build to use for testing.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
"(cd packages/flutter; ../../bin/flutter test --local-engine=host_debug_unopt --local-engine-host=host_debug_unopt)"
```

----------------------------------------

TITLE: Setting output directory properties for Flutter Linux build
DESCRIPTION: Configures the output directory for the executable to avoid users running the unbundled copy directly, placing it in an intermediates directory instead.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_9

LANGUAGE: CMake
CODE:
```
# Only the install-generated bundle's copy of the executable will launch
# correctly, since the resources must in the right relative locations. To avoid
# people trying to run the unbundled copy, put it in a subdirectory instead of
# the default top-level location.
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)
```

----------------------------------------

TITLE: Defining list_prepend Function
DESCRIPTION: Defines a function `list_prepend` that prepends a prefix to each element in a list. This function is used because `list(TRANSFORM ... PREPEND ...)` isn't available in CMake 3.10.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Building macOS Target Framework
DESCRIPTION: These commands build the macOS Flutter embedder framework. The `--mac` flag passed to `gn` configures the build for macOS.  The resulting framework exposes public APIs like `FlutterViewController`.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/darwin/macos/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```

# Perform the macOS target build.
./tools/gn --unopt --mac
ninja -C ../out/mac_debug_unopt

```

----------------------------------------

TITLE: Adding a NEXT Version Entry in ChangeLog
DESCRIPTION: This snippet illustrates how to add a new entry under the `NEXT` section in a CHANGELOG file. This is used when making updates that don't require an immediate version change but should still be tracked in the log. It ensures that even minor or version-exempt changes are documented, improving transparency and traceability for package consumers.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
## NEXT

* Description of your new change.
* Existing entry.

## 1.0.2
...
```

----------------------------------------

TITLE: Adding Flutter Dependencies in CMake
DESCRIPTION: This snippet sets up a dependency for the Flutter assemble command ensuring that the Flutter tool portions of the build process are executed. This is essential for the proper functioning of the Flutter application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: VSCode Settings for Flutter Engine Development
DESCRIPTION: VSCode settings configuration that sets up clangd and clang-format for Flutter engine development with proper paths and arguments.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
"settings": {
    "html.format.enable": false,
    "githubPullRequests.ignoredPullRequestBranches": [
        "master"
    ],
    "clangd.path": "engine/src/flutter/buildtools/mac-arm64/clang/bin/clangd",
    "clangd.arguments": [
        "--compile-commands-dir=engine/src/out/host_debug_unopt_arm64"
    ],
    "clang-format.executable": "engine/src/flutter/buildtools/mac-arm64/clang/bin/clang-format"
}
```

----------------------------------------

TITLE: Setting CMake Policy
DESCRIPTION: Sets a CMake policy to ensure consistent behavior across different CMake versions. CMP0063 relates to target_sources command.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
cmake_policy(SET CMP0063 NEW)
```

----------------------------------------

TITLE: Running Flutter Embedder GLFW Example with Shell Script
DESCRIPTION: This shell command is used to build and run the Flutter Embedder GLFW example. It should be executed from the directory containing the example files.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw_drm/README.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
./run.sh
```

----------------------------------------

TITLE: Applying Standard Compilation Settings
DESCRIPTION: This function applies standard compilation settings to ensure consistency across targets. It enforces C++17 standards, enables specific warning levels, sets exception handling configurations, and specifies preprocessor definitions based on the configuration. This setup is crucial for maintaining a uniform build environment.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
# Use Unicode for all projects.
add_definitions(-DUNICODE -D_UNICODE)

# Compilation settings that should be applied to most targets.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_17)
  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd"4100")
  target_compile_options(${TARGET} PRIVATE /EHsc)
  target_compile_definitions(${TARGET} PRIVATE "_HAS_EXCEPTIONS=0")
  target_compile_definitions(${TARGET} PRIVATE "$<$<CONFIG:Debug>:_DEBUG>")
endfunction()
```

----------------------------------------

TITLE: Running Flutter Analyzer for Repository Code
DESCRIPTION: Command to run the Flutter analyzer on the entire Flutter repository for a one-off analysis. This ensures proper analysis across all packages in the repository.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Using-the-Dart-analyzer.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
flutter analyze --flutter-repo
```

----------------------------------------

TITLE: Setting Minimum CMake Version
DESCRIPTION: Establishes the minimum required CMake version for the Flutter build configuration
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
```

----------------------------------------

TITLE: Defining Flutter Windows Runner Executable Target
DESCRIPTION: Defines the executable target for the Flutter Windows runner. It specifies the source files to be included in the build.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: CMake
CODE:
```
add_executable(${BINARY_NAME} WIN32
  "flutter_window.cpp"
  "main.cpp"
  "utils.cpp"
  "win32_window.cpp"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
  "Runner.rc"
  "runner.exe.manifest"
)
```

----------------------------------------

TITLE: Renaming Element in YAML
DESCRIPTION: Illustrates how to specify renaming an element to a new name using a YAML configuration
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_11

LANGUAGE: yaml
CODE:
```
kind: 'rename'
newName: 'B'
```

----------------------------------------

TITLE: Executing E2E Benchmarks - Flutter Shell
DESCRIPTION: Runs E2E-based benchmarks with `flutter drive`, focusing on independent execution from the host machine. Requires dependency on the `e2e` package and proper setup of tests and drivers.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
flutter drive --profile -t test/[test_name]_e2e.dart --driver test_driver/e2e_test.dart
```

----------------------------------------

TITLE: Wrapping Onscreen Surface for Rendering in C++
DESCRIPTION: Creates a SurfaceGLES object by wrapping the default framebuffer for rendering.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_11

LANGUAGE: c++
CODE:
```
auto surface =
    SurfaceGLES::WrapFBO(context,                         // context
                         swap_callback,                   // swap callback
                         0u,                              // fbo
                         PixelFormat::kR8G8B8A8UNormInt,  // pixel format
                         GetWindowSize()                  // surface size
    );
```

----------------------------------------

TITLE: Copy Updated License Files and Check Diffs
DESCRIPTION: This command copies the updated license files from the output directory to the golden directory and checks differences to determine any required changes.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
cp ../../../out/licenses/* ../../ci/licenses_golden
git diff
```

----------------------------------------

TITLE: Configuring installation settings for Flutter Linux bundle
DESCRIPTION: Sets up the installation directory and ensures it's cleaned before each installation to create a relocatable bundle in the build directory.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_11

LANGUAGE: CMake
CODE:
```
# === Installation ===
# By default, "installing" just makes a relocatable bundle in the build
# directory.
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

# Start with a clean build bundle directory every time.
install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")
  " COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
```

----------------------------------------

TITLE: Apply Standard Settings to Executable
DESCRIPTION: Applies the standard compilation settings defined in the `APPLY_STANDARD_SETTINGS` function to the executable target.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_13

LANGUAGE: cmake
CODE:
```
apply_standard_settings(${BINARY_NAME})
```

----------------------------------------

TITLE: Appending Flutter Library Headers
DESCRIPTION: This snippet appends standard Flutter library header files to the list of headers for the Flutter library interface.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
```

----------------------------------------

TITLE: Building and Running Undefined Behavior Sanitizer Tests
DESCRIPTION: This set of commands illustrates how to build Flutter Engine with Undefined Behavior Sanitizer enabled and run the embedder unit tests with appropriate suppressions.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
$ ./flutter/tools/gn --runtime-mode debug --ubsan --unoptimized --no-goma
$ autoninja -C out/host_debug_unopt
$ source ./flutter/testing/sanitizer_suppressions.sh
$ ./out/host_debug_unopt/embedder_unittests
```

----------------------------------------

TITLE: Checking gen_snapshot Target Architecture
DESCRIPTION: This command checks the target architecture of a 'gen_snapshot' binary. By using the '--version' flag, it verifies the host/target pair, ensuring the binary is configured for the desired architecture.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
Dart VM version: 2.1.1-dev.2.0.flutter-ac1bf656c4 (Thu Jan 17 16:55:19 2019 +0000) on "macos_x64"
```

----------------------------------------

TITLE: Running Flutter Integration Tests Command
DESCRIPTION: Shell command to execute Flutter integration tests from the flutter_tools directory. Requires downloaded Dart SDK in the Flutter clone.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/test/integration.shard/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
../../bin/cache/dart-sdk/bin/dart run test test/integration.shard
```

----------------------------------------

TITLE: Set Install Bundle Directories
DESCRIPTION: Sets the directories for data and libraries within the installation bundle. `INSTALL_BUNDLE_DATA_DIR` is where data files (e.g., assets) are placed, and `INSTALL_BUNDLE_LIB_DIR` is for shared libraries.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_21

LANGUAGE: cmake
CODE:
```
set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
```

----------------------------------------

TITLE: Managing Installation for CMake Builds
DESCRIPTION: The snippet configures CMake to manage target installations, copying necessary runtime files alongside the executable. It removes stale assets and only installs the AOT library in non-Debug builds.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()
set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)
install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)
install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)
if(PLUGIN_BUNDLED_LIBRARIES)
  install(FILES "${PLUGIN_BUNDLED_LIBRARIES}"
    DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
    COMPONENT Runtime)
endif()

set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)
install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  CONFIGURATIONS Profile;Release
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Referencing Update Packages File in Flutter Repository
DESCRIPTION: This code snippet shows the location of the update_packages.dart file in the Flutter repository, which is used to pin versions of third-party packages.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/README.md#2025-04-21_snippet_4

LANGUAGE: markdown
CODE:
```
[update_packages.dart](https://github.com/flutter/flutter/blob/main/packages/flutter_tools/lib/src/commands/update_packages.dart#L23)
```

----------------------------------------

TITLE: Setting Output Directory for Flutter Linux Application
DESCRIPTION: Configures the output directory for the executable to prevent running unbundled copies. This places the binary in an intermediates directory to ensure users run the properly bundled version.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_7

LANGUAGE: CMake
CODE:
```
# Only the install-generated bundle's copy of the executable will launch
# correctly, since the resources must in the right relative locations. To avoid
# people trying to run the unbundled copy, put it in a subdirectory instead of
# the default top-level location.
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)
```

----------------------------------------

TITLE: Setting CMake Policies and Installation Path for Flutter Linux Application
DESCRIPTION: Configuration of CMake policies and installation paths. This section opts into modern CMake behaviors and sets up the relative library path for the application.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
# Explicitly opt in to modern CMake behaviors to avoid warnings with recent
# versions of CMake.
cmake_policy(SET CMP0063 NEW)

# Load bundled libraries from the lib/ directory relative to the binary.
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")
```

----------------------------------------

TITLE: Remote Build Configuration in Flutter Engine Tool
DESCRIPTION: Command to enable remote build execution (RBE) strategy for Flutter engine builds. This reduces local machine load but requires fast internet.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_9

LANGUAGE: sh
CODE:
```
et build --build-strategy=remote
```

----------------------------------------

TITLE: Setting Max Parallel Forks for Debugging
DESCRIPTION: This diff shows how to temporarily reduce the number of parallel forks for running tests to help with debugging timeouts or hangs. Setting `maxParallelForks` to `1` forces tests to run sequentially.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_3

LANGUAGE: diff
CODE:
```
+ maxParallelForks availableProcessors // The CI bot has 8 CPUs.
- maxParallelForks 1
```

----------------------------------------

TITLE: Running GDB on a Flutter Linux application
DESCRIPTION: Command to launch GDB debugger on a built Flutter Linux application, enabling debugging of the engine code.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
gdb build/linux/x64/debug/bundle/your_app_name
```

----------------------------------------

TITLE: Running DeviceLab Tests Locally - Shell Commands
DESCRIPTION: Shell commands for executing specific DeviceLab tests locally. Shows how to run individual or multiple tests using the test runner script.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
../../bin/cache/dart-sdk/bin/dart bin/test_runner.dart test -t {NAME_OF_TEST}
```

LANGUAGE: sh
CODE:
```
../../bin/cache/dart-sdk/bin/dart bin/run.dart -t test1 -t test2 -t test3
```

----------------------------------------

TITLE: Running Objective-C XCTests
DESCRIPTION: This script builds and runs XCTests for the iOS embedding of the Flutter engine.  It compiles tests and dependencies into a .dylib and then uses Xcode to execute the tests.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
testing/run_tests.py --type=objc
```

----------------------------------------

TITLE: Flutter Tool Backend Custom Command
DESCRIPTION: Defines a custom build command to generate Flutter library and wrapper sources using Flutter tool backend
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/flutter/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
```

----------------------------------------

TITLE: Install ICU Data File
DESCRIPTION: Installs the ICU data file to the data directory within the installation bundle.  ICU provides Unicode and internationalization support.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_23

LANGUAGE: cmake
CODE:
```
install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Installation and Bundle Configuration
DESCRIPTION: Configures installation rules for executable, data files, libraries, and assets, supporting in-place execution and bundle generation
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: CMake
CODE:
```
set(BUILD_BUNDLE_DIR "$<TARGET_FILE_DIR:${BINARY_NAME}>")
set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR "${CMAKE_INSTALL_PREFIX}")

# Install targets, files, and assets
```

----------------------------------------

TITLE: Running Flutter unit tests with locally built engine
DESCRIPTION: To run tests against a locally built Flutter engine, use the `--local-engine` and `--local-engine-host` flags. Specify the engine build directory for both options.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
"flutter test \
  --local-engine=host_debug_unopt \
  --local-engine-host=host_debug_unopt"
```

----------------------------------------

TITLE: Running Specific Integration Test Example
DESCRIPTION: This excerpt illustrates how to run the 'embedder' integration test, using the same 'run_integration_test.sh' script. This serves as an example for users to follow when executing their own integration tests.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_integration_test.sh embedder --no-lto
```

----------------------------------------

TITLE: Configuring Flutter Library Headers
DESCRIPTION: Defines and configures Flutter library headers for compilation
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Configuring Flutter Library Paths
DESCRIPTION: Sets up paths for Flutter library, ICU data, and build directories with parent scope visibility
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/windows/app.so" PARENT_SCOPE)
```

----------------------------------------

TITLE: Running a Build Configuration with Dart
DESCRIPTION: This snippet provides the command-line usage for running a build from a configuration file locally using Dart. It requires the build configuration name and the specific build name as inputs. The command uses `bin/run.dart` to execute the build process without involving generators or tests.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/pkg/engine_build_configs/README.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
$ dart bin/run.dart [build config name] [build name]
```

----------------------------------------

TITLE: Adding Web Engine Support to .gclient Configuration
DESCRIPTION: Configuration to amend the .gclient file to enable web engine development by adding the download_emsdk variable set to True.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
solutions = [
  {
    # Same as above...
    "custom_vars": {
      "download_emsdk": True,
    },
  },
]
```

----------------------------------------

TITLE: GLSL Uniform Block Definition
DESCRIPTION: Defines a uniform block named `FragInfo` in GLSL, containing a single float variable `time`. This block will be used to pass the current time to the fragment shader.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_9

LANGUAGE: glsl
CODE:
```
uniform FragInfo {
  float time;
} frag_info;
```

----------------------------------------

TITLE: Running Global Generator with Python and Bash
DESCRIPTION: This bash script demonstrates how to execute a global generator locally using Python. It runs the `create_ios_framework.py` script with specific arguments to create iOS artifacts. This command replicates the global generator execution in the CI environment for local debugging and validation.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_17

LANGUAGE: bash
CODE:
```
python3 flutter/sky/tools/create_ios_framework.py   \
  --dst out/release                                 \
  --arm64-out-dir out/ios_release                   \
  --simulator-x64-out-dir out/ios_debug_sim         \
  --simulator-arm64-out-dir out/ios_debug_sim_arm64 \
  --dsym                                            \
  --strip
```

----------------------------------------

TITLE: Building Flutter Engine with Vulkan Validation Layers Enabled
DESCRIPTION: This command demonstrates how to build the Flutter engine with Vulkan Validation Layers enabled using the gn tool. It specifies debug mode, enables Vulkan validation layers, disables LTO, sets unoptimized build, targets Android platform, and specifies ARM64 architecture.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android_validation_layers.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
flutter/tools/gn \
  --runtime-mode=debug \
  --enable-vulkan-validation-layers \
  --no-lto \
  --unoptimized \
  --android \
  --android-cpu=arm64
```

----------------------------------------

TITLE: Running Tests Against Local Engine - Shell Command
DESCRIPTION: Command for running DeviceLab tests against a local engine build, specifying engine source path and architecture configurations.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
../../bin/cache/dart-sdk/bin/dart bin/run.dart --task=[some_task] \
  --local-engine-src-path=[path_to_local]/engine/src \
  --local-engine=[local_engine_architecture] \
  --local-engine-host=[local_engine_host_architecture]
```

----------------------------------------

TITLE: Clean Build Bundle Directory
DESCRIPTION: Removes the build bundle directory at the beginning of each installation. This ensures a clean build and avoids stale files from previous installations. The `file(REMOVE_RECURSE)` command with the `INSTALL` command cleans the directory during the install step.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_20

LANGUAGE: cmake
CODE:
```
install(CODE "
  file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\"
  " COMPONENT Runtime)
```

----------------------------------------

TITLE: Running Unit Tests with Options
DESCRIPTION: This snippet demonstrates how to run specific unit tests by passing options to the test script. It includes options to disable optimizations, specify count of test runs, and filter by package or test.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/unit_tests.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_unit_tests.sh --unopt
```

LANGUAGE: sh
CODE:
```
$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_unit_tests.sh --count N
```

LANGUAGE: sh
CODE:
```
$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_unit_tests.sh --package-filter flow_tests-0.far
```

LANGUAGE: sh
CODE:
```
$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_unit_tests.sh --package-filter flutter_runner_tests-0.far --gtest-filter "*FlatlandConnection*"
```

----------------------------------------

TITLE: Configuring Flutter Target Platform
DESCRIPTION: Sets a fallback configuration for Flutter target platform if not previously defined, defaulting to windows-x64 architecture
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
if (NOT DEFINED FLUTTER_TARGET_PLATFORM)
  set(FLUTTER_TARGET_PLATFORM "windows-x64")
endif()
```

----------------------------------------

TITLE: Navigating to the Package Directory
DESCRIPTION: Changes the current working directory to the cloned packages repository. This allows subsequent Git commands to operate within the repository.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/Setting-up-the-Packages-development-environment.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
`cd packages`
```

----------------------------------------

TITLE: Running Impeller Golden Tests with run_tests.py
DESCRIPTION: This command demonstrates how to execute Impeller golden tests using the `run_tests.py` script. The `--variant` flag specifies the build configuration (host_debug_unopt_arm64), and the `--type` flag indicates that these are Impeller golden tests. Running this locally will not upload results to Skia Gold.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/golden_tests/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
./run_tests.py --variant="host_debug_unopt_arm64" --type="impeller-golden"
```

----------------------------------------

TITLE: Setting Up Flutter Tool Backend
DESCRIPTION: Configures the Flutter tool backend build process, setting up custom commands and targets for assembling Flutter components. Creates a phony target to ensure proper rebuilding of Flutter assets.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
  ${CPP_WRAPPER_SOURCES_APP}
)
```

----------------------------------------

TITLE: Running C++ Engine Unit Tests
DESCRIPTION: This shell command is used to run the C++ unit tests for the Flutter engine. It specifies the test type as 'engine' and optionally allows specifying a build variant.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
testing/run_tests.py --type=engine
```

----------------------------------------

TITLE: Running the Private Test Runner in Flutter
DESCRIPTION: Command to execute the private test runner script for testing private interfaces in Flutter.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test_private/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
dart run bin/test_private.dart
```

----------------------------------------

TITLE: Include Generated Plugins
DESCRIPTION: Includes the generated plugins CMake file. This file manages building the plugins and adding them to the application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_17

LANGUAGE: cmake
CODE:
```
include(flutter/generated_plugins.cmake)
```

----------------------------------------

TITLE: Configuring Flutter Tool Backend
DESCRIPTION: Sets up the Flutter tool backend command and assembly target. Creates a custom command to generate necessary files and libraries using the Flutter tool backend.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
  ${CPP_WRAPPER_SOURCES_APP}
)
```

----------------------------------------

TITLE: Running Unicode Sync Script in Dart
DESCRIPTION: This command executes the Dart script `unicode_sync_script.dart` located in the `tool` directory. The script is responsible for generating code based on Unicode property files. Ensure that the working directory is `third_party/web_unicode` before running the script.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/README.md#2025-04-21_snippet_0

LANGUAGE: Dart
CODE:
```
dart tool/unicode_sync_script.dart
```

----------------------------------------

TITLE: Finding Package Dependencies
DESCRIPTION: Uses `find_package` and `pkg_check_modules` to locate and import system-level dependencies such as GTK, GLIB, and GIO. These are essential for the Flutter Linux GTK embedding.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: cmake
CODE:
```
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)
```

----------------------------------------

TITLE: Defining Standard Compilation Settings Function for Flutter Targets
DESCRIPTION: Creates a function that applies standard compilation settings to targets, including C++14 standard, warning flags, and optimization settings. This function centralizes common build configuration options.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/linux/CMakeLists.txt#2025-04-22_snippet_3

LANGUAGE: CMake
CODE:
```
# Compilation settings that should be applied to most targets.
#
# Be cautious about adding new options here, as plugins use this function by
# default. In most cases, you should add new options to specific targets instead
# of modifying this function.
function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()
```

----------------------------------------

TITLE: Configuring Flutter Engine Dependencies in CMake
DESCRIPTION: Includes Flutter engine headers, finds the Flutter library, and links it to the main target. Assumes a local build of the Flutter engine.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw_drm/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
include_directories(${CMAKE_SOURCE_DIR}/../../shell/platform/embedder)
find_library(FLUTTER_LIB flutter_engine PATHS ${CMAKE_SOURCE_DIR}/../../../out/host_debug_unopt)
target_link_libraries(flutter_glfw ${FLUTTER_LIB})
```

----------------------------------------

TITLE: Adding a New Scenario in Dart
DESCRIPTION: This snippet explains how to create a new scenario by subclassing the Scenario class in Dart. This is crucial for extending the functionality of the Flutter app by adding new visual components for testing.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios_scenario_app/README.md#2025-04-21_snippet_1

LANGUAGE: Dart
CODE:
```
"// Import the necessary package\nimport 'package:your_package/scenario.dart';\n\n// Create a subclass of Scenario to define a new visual scenario.\nclass MyNewScenario extends Scenario {\n  @override\n  void update(double deltaTime) {\n    // Logic for the new scenario goes here\n  }\n}\n\n// Add this scenario to the scenarios map in scenarios.dart"
```

----------------------------------------

TITLE: Viewing Engine Version Hash from Git Commit
DESCRIPTION: Demonstrates how to retrieve the current engine version hash that represents the Git commit hash used to produce engine binaries.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
cat bin/internal/engine.version
76b7abb5c853860cb5b488ab5b8e1ad8c41b603e
```

----------------------------------------

TITLE: Basic YAML Data File Structure
DESCRIPTION: This YAML snippet illustrates the basic structure of a data file used for data-driven fixes. It contains the required `version` and `transforms` keys. The `version` indicates the file format version, and `transforms` is a list of individual transform objects.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
version: 1
transforms:
  - ...
  - ...
```

----------------------------------------

TITLE: Using Docregion Comments in Kotlin
DESCRIPTION: This snippet shows how to annotate a Kotlin file for documentation with docregion comments.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_13

LANGUAGE: Kotlin
CODE:
```
// #docregion sectionname
// #enddocregion sectionname
```

----------------------------------------

TITLE: Updating Asset Bundle Path with _flutter.setAssetBundlePath Protocol
DESCRIPTION: Updates the asset bundle path during hot-reload to ensure the engine uses updated assets. This extension requires viewId and assetDirectory arguments, and returns information about the updated view and its isolate.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
  "type": "Success",
  "view": {
    "type": "FlutterView",
    "id": "_flutterView/0x104e0ab58",
    "isolate": {
      "type": "@Isolate",
      "fixedId": true,
      "id": "isolates/1056589762",
      "name": "main.dart$main-1056589762",
      "number": 1056589762
    }
  }
}
```

----------------------------------------

TITLE: Copying Flutter Library Post-Build
DESCRIPTION: Adds a custom command to copy the Flutter library to the build directory after the executable is built. This ensures that the Flutter Engine library is available at runtime.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: CMake
CODE:
```
add_custom_command(
        TARGET ${EXE_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
                ${FLUTTER_LIB}
                ${CMAKE_CURRENT_BINARY_DIR})
```

----------------------------------------

TITLE: Setting DYLD_LIBRARY_PATH for Testing
DESCRIPTION: This shell command sets the `DYLD_LIBRARY_PATH` environment variable, which is necessary for the `path_ops` library to find its dynamic library during testing.  The `BUILD_DIR` variable should be replaced with the actual path to the directory containing the compiled dynamic library. This is especially important when running tests directly from the command line or an IDE.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/path_ops/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
export DYLD_LIBRARY_PATH=BUILD_DIR
```

----------------------------------------

TITLE: Set Build Bundle Directory
DESCRIPTION: Sets the directory where the application bundle will be created. It's located within the project's binary directory.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_18

LANGUAGE: cmake
CODE:
```
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
```

----------------------------------------

TITLE: Defining Swap Callback for Surface Presentation in C++
DESCRIPTION: Sets up a swap callback to flush OpenGL operations and present the surface.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_12

LANGUAGE: c++
CODE:
```
SurfaceGLES::SwapCallback swap_callback =
    [surface, context]() -> bool {
  context->GetReactor()->React();
  return surface->Present();
};
```

----------------------------------------

TITLE: Set Flutter Managed Directory
DESCRIPTION: Sets the variable `FLUTTER_MANAGED_DIR` to point to the `flutter` subdirectory within the current source directory. This directory likely contains Flutter-related build files.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_7

LANGUAGE: cmake
CODE:
```
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
```

----------------------------------------

TITLE: Starting Flutter Daemon - Shell Command
DESCRIPTION: Command to start the Flutter daemon server in persistent JSON-RPC mode for IDE integration
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
flutter daemon
```

----------------------------------------

TITLE: Advanced Command-Line Options
DESCRIPTION: This section describes various command-line options that can be passed to the integration test script. It includes details on disabling optimizations, targeting specific architectures, and runtime modes.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/README.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
* Pass `--unoptimized` to disable C++ compiler optimizations.
* Add `--fuchsia-cpu x64` or `--fuchsia-cpu arm64` to target a particular architecture.
* Add `--runtime-mode debug` or `--runtime-mode profile` to switch between JIT and AOT builds.
```

----------------------------------------

TITLE: Running Display Cutout Test via DeviceLab Test Runner
DESCRIPTION: Command to run the Android display cutout test using the DeviceLab test runner. This method is executed from the flutter/dev/devicelab directory and uses a specific test target.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/display_cutout_rotation/README.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
`dart bin/test_runner.dart test -t android_display_cutout`
```

----------------------------------------

TITLE: Build Specific Android Targets Recursively
DESCRIPTION: This snippet demonstrates commands to build specific Android targets within the Flutter engine recursively. It allows for targeted building to save time and resources when only certain modules require updates.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
et build --config android_debug_unopt_arm64 //flutter/shell/platform/android:android_jar
et build --config android_debug_unopt_arm64 //flutter/shell/platform/...
```

----------------------------------------

TITLE: Setting Environment Variables for Windows Build
DESCRIPTION: Shell commands to set necessary environment variables for building the Flutter engine on Windows using Visual Studio.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
DEPOT_TOOLS_WIN_TOOLCHAIN=0
GYP_MSVS_OVERRIDE_PATH="C:\Program Files (x86)\Microsoft Visual Studio\2019\Community"
WINDOWSSDKDIR="C:\Program Files (x86)\Windows Kits\10"
```

----------------------------------------

TITLE: Defining the List Prepend Function
DESCRIPTION: This function prepends a specified prefix to each element in a given list, mimicking behavior not available in older CMake versions.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Clamped Arithmetic Functions Reference in C++
DESCRIPTION: A collection of helper functions that perform arithmetic operations with clamping behavior. These functions accept both standard arithmetic and ClampedNumeric types as input and return ClampedNumeric results. They provide safe arithmetic operations by preventing overflow and underflow through clamping.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_10

LANGUAGE: cpp
CODE:
```
ClampAdd()  // Addition with clamping
ClampSub()  // Subtraction with clamping
ClampMul()  // Multiplication with clamping
ClampDiv()  // Division with clamping
ClampMod()  // Modulus with clamping (integer only)
ClampLsh()  // Left shift with clamping (integer only)
ClampRsh()  // Right shift with clamping (integer only)
ClampAnd()  // Bitwise AND with clamping (integer only, unsigned result)
ClampOr()   // Bitwise OR with clamping (integer only, unsigned result)
ClampXor()  // Bitwise XOR with clamping (integer only, unsigned result)
ClampMax()  // Maximum value with clamping
ClampMin()  // Minimum value with clamping
MakeClampedNum()  // Creates new ClampedNumeric from arithmetic type
```

----------------------------------------

TITLE: Performing Checked Arithmetic Type Conversions in C++
DESCRIPTION: The `checked_cast` template is used to convert between arbitrary arithmetic types. If the conversion fails (e.g., overflow), the program terminates. This snippet demonstrates how to convert a signed value to a `size_t` and crash if the signed value is out of range.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_0

LANGUAGE: cpp
CODE:
```
// Crash if signed_value is out of range for buff_size.
size_t buff_size = checked_cast<size_t>(signed_value);
```

----------------------------------------

TITLE: Comparing AOT Snapshot Sizes Using Dart Tool in Flutter
DESCRIPTION: This bash command shows how to use a custom Dart tool (compare_size.dart) to compare two JSON files containing AOT snapshot size information. It uses the Dart SDK from the Flutter engine build.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/benchmarks/Comparing-AOT-Snapshot-Sizes.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$FLUTTER_ENGINE/out/host_debug_unopt/dart-sdk/bin/dart \
  before.json                                          \
  after.json
```

----------------------------------------

TITLE: Running Clang Tidy with a Specific Target Variant
DESCRIPTION: This command specifies the target variant for the clang_tidy run. This option is useful for running lints on specific builds of the engine, ensuring that rules applicable to those builds are enforced. `--target-variant` specifies the engine variant.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
```shell
dart ./tools/clang_tidy/bin/main.dart --target-variant <engine-variant>
```
```

LANGUAGE: shell
CODE:
```
```shell
dart ./tools/clang_tidy/bin/main.dart --target-variant android_debug_unopt
```
```

----------------------------------------

TITLE: Running dart_roll_helper.py Script in Python
DESCRIPTION: Automates the Dart SDK roll by updating revisions, syncing dependencies, building configurations, and running tests. It requires the 'FLUTTER_HOME', 'ENGINE_HOME', and 'DART_SDK_HOME' environment variables. The command should be run in a clean repository state.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Rolling-Dart.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
python $ENGINE_HOME/tools/dart/dart_roll_helper.py --create-commit $TARGET_SDK_HASH
```

----------------------------------------

TITLE: Running Flutter app with local engine via command line
DESCRIPTION: Command for running a Flutter application with a locally built engine, where XXXX represents the target engine variant and YYYY represents the host engine variant.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
flutter run --local-engine=XXXX --local-engine-host=YYYY
```

----------------------------------------

TITLE: Binding Uniforms using HostBuffer in C++
DESCRIPTION: Creates a `HostBuffer`, emplacing the `frag_info` struct into it as a uniform. Then binds this uniform to the render pass using the `BindFragInfo` function.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_14

LANGUAGE: c++
CODE:
```
auto host_buffer = HostBuffer::Create(context->GetResourceAllocator());
FS::BindFragInfo(pass, host_buffer->EmplaceUniform(frag_info));
```

----------------------------------------

TITLE: Running Display Cutout Test Locally with Flutter CLI
DESCRIPTION: Command to run the display cutout test locally using the Flutter CLI. This test specifically targets the display_cutout_test.dart file in the integration_test directory.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/display_cutout_rotation/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
`flutter test integration_test/display_cutout_test.dart`
```

----------------------------------------

TITLE: Fetching and Checking out Beta Branch with Git
DESCRIPTION: These commands are used to fetch the latest changes from the upstream repository and checkout the beta branch using Git. This is useful for contributors who have a local checkout of the Flutter repository.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Quality-Assurance.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
`git fetch upstream && git checkout upstream/beta`
```

----------------------------------------

TITLE: Restricting Files to Check
DESCRIPTION: This command restricts the header guard check tool to only check files within the specified directory. The `--include` flag is used to specify a relative path (to the `engine/src/flutter` root) for inclusion in the check. It uses Dart to run the tool.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/header_guard_check/README.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
"dart ./tools/header_guard_check/bin/main.dart --include impeller"
```

----------------------------------------

TITLE: Enabling Interactive Playgrounds and Disabling Timeout in Flutter
DESCRIPTION: Command-line arguments to enable interactive playground windows and disable the test timeout watchdog in Flutter development.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/opengles_development_setup.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
--enable_playground --timeout=0
```

----------------------------------------

TITLE: Adding Reactor Worker to Impeller Context in C++
DESCRIPTION: Adds the custom reactor worker to the Impeller context for OpenGL ES threading management.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_9

LANGUAGE: c++
CODE:
```
context->AddReactorWorker(worker);
```

----------------------------------------

TITLE: Defining a Build Configuration in JSON
DESCRIPTION: This JSON snippet illustrates a basic structure for a build configuration, which contains sections for builds, tests, generators, and archives. This is used as a template for creating more complex build configurations and integrates into the CI/CD pipeline.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
   "builds": [],
   "tests": [],
   "generators": {
       "tasks": []
   },
   "archives": [
   ]
}

```

----------------------------------------

TITLE: Referring to Flutter View for Input Creation in WebView Proxy (Java)
DESCRIPTION: This code snippet shows how the proxy thread refers back to the Flutter View for input creation when handling WebView input connections.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_7

LANGUAGE: Java
CODE:
```
ThreadedInputConnectionProxyAdapterView.java#L67
```

----------------------------------------

TITLE: Configuring Test Bundles for Flutter Web Tests
DESCRIPTION: Defines groups of tests with specific compile configurations, with output stored in flutter/lib/web_ui/build/test_bundles
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/test/README.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
test-bundles:
  * `name` - The name of the test bundle.
  * `test-set` - The name of the test set to compile.
  * `compile-config` - The compile configuration to use.
```

----------------------------------------

TITLE: Snippet Tool Code Example in Dart
DESCRIPTION: Demonstrates how to use the Flutter snippet tool for generating documentation code blocks with an example of CircleAvatar
SOURCE: https://github.com/flutter/flutter/blob/master/dev/snippets/README.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
/// {@tool snippet}
///
/// If the avatar is to have an image, the image should be specified in the
/// [backgroundImage] property:
///
/// ```dart
/// CircleAvatar(
///   backgroundImage: NetworkImage(userAvatarUrl),
/// )
/// ```
/// {@end-tool}
```

----------------------------------------

TITLE: Running Clang Tidy with Added Checks
DESCRIPTION: This command executes clang_tidy and includes additional checks specified by the `--checks` option. This allows developers to run checks not included in the default configuration, including using wildcards for multiple checks.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
```shell
dart ./tools/clang_tidy/bin/main.dart --checks="<check-name-to-run>"
```
```

LANGUAGE: shell
CODE:
```
```shell
dart ./tools/clang_tidy/bin/main.dart --checks="readability-*"
```
```

----------------------------------------

TITLE: Setting Sysroot for Cross-Compilation
DESCRIPTION: Configures the sysroot for cross-compilation if `FLUTTER_TARGET_PLATFORM_SYSROOT` is defined. This is essential for building applications that target a different platform than the host system by specifying the root directory for libraries and headers.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: cmake
CODE:
```
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()
```

----------------------------------------

TITLE: A/B Testing Engine Changes - Shell Command
DESCRIPTION: Command for running A/B performance comparison tests between default and local engine builds, with configurable iteration count.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
../../bin/cache/dart-sdk/bin/dart bin/run.dart --ab=10 \
  --local-engine=host_debug_unopt \
  --local-engine-host=host_debug_unopt \
  -t bin/tasks/web_benchmarks_canvaskit.dart
```

----------------------------------------

TITLE: Running CanvasKit Web Benchmarks - Flutter Shell
DESCRIPTION: Runs all web benchmarks using the CanvasKit renderer via Dart SDK as the devicelab executes them. Executes from the `devicelab` directory with a predefined task file.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/macrobenchmarks/README.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
cd dev/devicelab

# Runs using the CanvasKit renderer
../../bin/cache/dart-sdk/bin/dart bin/run.dart -t bin/tasks/web_benchmarks_canvaskit.dart
```

----------------------------------------

TITLE: Defining a New Test Target for Android Emulators in DeviceLab using YAML
DESCRIPTION: This snippet describes how to define a new test target for running Android emulators on the Linux platform within the DeviceLab. The configuration specifies that an emulator is being used, along with its associated properties.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/How-to-add-a-new-integration-test-to-Framework-CI.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
"- name: Linux_android_emu new_test_to_add\n"
```

----------------------------------------

TITLE: Updating Gradle Version in flutter.gradle
DESCRIPTION: This snippet shows how to comment out a line in `flutter.gradle` to reveal the root cause of build errors in older Flutter versions. This allows developers to see the underlying error message when `assembleDebug` or `assembleRelease` fails silently.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Resolving-common-build-failures.md#2025-04-21_snippet_0

LANGUAGE: gradle
CODE:
```
		"gradle.useLogger(new FlutterEventLogger())"
```

----------------------------------------

TITLE: Building Web Engine Targets with felt Command
DESCRIPTION: The 'felt build' command is utilized to build web engine GN/Ninja targets. It can build all targets or specific ones based on command line parameters, affecting how the Flutter app is run using the SDK. Common targets include 'sdk', 'canvaskit', and 'skwasm'.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
felt build
cd path/to/some/app
flutter --local-web-sdk=wasm_release run -d chrome
```

LANGUAGE: bash
CODE:
```
felt build sdk canvaskit
```

----------------------------------------

TITLE: Symbolicating with ndk-stack on Linux
DESCRIPTION: This snippet demonstrates how to use the ndk-stack tool from the Android NDK to symbolicate stack traces on a Linux system. Ensure that unzipped symbol files are available and the crash stack is saved in a file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
.../ndk/prebuilt/linux-x86_64/bin/ndk-stack -sym .../path/to/downloaded/symbols < stack.txt
```

----------------------------------------

TITLE: Setting Target Include Directories
DESCRIPTION: Sets the include directories for the `flutter` interface library, adding the ephemeral directory. This allows targets that link to `flutter` to find the necessary header files.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_10

LANGUAGE: cmake
CODE:
```
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
```

----------------------------------------

TITLE: Add Executable
DESCRIPTION: Adds the executable target. It specifies the source files (`main.cc`, `my_application.cc`, and `${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc`) that will be compiled into the executable named by `BINARY_NAME` which is `flutter_gallery`.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_12

LANGUAGE: cmake
CODE:
```
add_executable(${BINARY_NAME}
  "main.cc"
  "my_application.cc"
  "${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc"
)
```

----------------------------------------

TITLE: Running Flutter Unit Tests
DESCRIPTION: Command to run Flutter Tools unit tests with environment variable setup
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
export FLUTTER_ROOT=~/path/to/flutter-sdk
flutter test --concurrency 1
```

----------------------------------------

TITLE: Generating AOT Snapshot
DESCRIPTION: This command generates the final AOT snapshot blobs after obtaining the kernel snapshot file. It configures the 'gen_snapshot' with necessary flags specific to the target architecture.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
$FLUTTER_ENGINE_OUT_DIR/gen_snapshot \
    --causal_async_stacks \
    --packages=.packages \
    --deterministic \
    --snapshot_kind=app-aot-blobs \
    --vm_snapshot_data=build/vm_snapshot_data \
    --isolate_snapshot_data=build/isolate_snapshot_data \
    --vm_snapshot_instructions=build/vm_snapshot_instr \
    --isolate_snapshot_instructions=build/isolate_snapshot_instr \
    --no-sim-use-hardfp \
    --no-use-integer-division \
    build/kernel_snapshot.dill
```

----------------------------------------

TITLE: Running Clang Tidy with Removed Checks
DESCRIPTION: This command executes clang_tidy while excluding specific checks specified using the `--checks` option with a `-` prefix. This allows developers to temporarily disable certain checks or entire categories of checks.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
```shell
dart ./tools/clang_tidy/bin/main.dart --checks="-<check-name-to-remove>"
```
```

LANGUAGE: shell
CODE:
```
```shell
dart ./tools/clang_tidy/bin/main.dart --checks="-readability-*"
```
```

LANGUAGE: shell
CODE:
```
```shell
dart ./tools/clang_tidy/bin/main.dart --checks="-*,<only-check-to-run>"
```
```

----------------------------------------

TITLE: Running Flutter Example in Packages
DESCRIPTION: This command runs a Flutter example from the `flutter/packages` directory. It is useful for manual testing. It uses the `flutter run` command with `--local-engine-host` and `--local-engine` flags.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
cd $PACKAGES/packages/video_player/video_player_android/example
flutter run \
  --local-engine-host=$ENGINE/out/host_debug_unopt_arm64 \
  --local-engine=$ENGINE/out/android_debug_unopt_arm64
```

----------------------------------------

TITLE: Configuring Compile Configurations for Flutter Web Tests
DESCRIPTION: Defines how tests should be compiled with options for compiler and renderer. Supports compilation using dart2js and dart2wasm with renderers like html, canvaskit, and skwasm
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/test/README.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
compile-configs:
  * `name` - The name of the compile configuration.
  * `compiler` - What compiler is used to compile the tests.
  * `renderer` - Which renderer to use when compiling the tests.
```

----------------------------------------

TITLE: JSON Structure for hotReload Request in Flutter DAP
DESCRIPTION: JSON format for the hotReload custom request in Flutter's Debug Adapter Protocol. The request includes an optional reason parameter that indicates the trigger for the reload (e.g., "manual" or "save").
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/debug_adapters/README.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
	"reason": "manual"
}
```

----------------------------------------

TITLE: Unbranching Complex Paths in GLSL for Parallelism
DESCRIPTION: This GLSL shader snippet illustrates an unbranched approach to achieve maximum parallelism across architectures. The code performs expensive operations regardless of conditions, trading off execution efficiency on architectures like SIMT when the condition is false for all threads.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_3

LANGUAGE: GLSL
CODE:
```
in vec4 color;
out vec4 frag_color;

void main() {
  frag_color = DoExtremelyExpensiveThing(color);

  if (color.a == 0) {
    frag_color = vec4(0);
  }
}
```

----------------------------------------

TITLE: Filtering Git Repository Content for Flutter Engine
DESCRIPTION: Uses git filter-repo to remove specific file types and directories from the repository, significantly reducing its size from ~780MB to ~110MB.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/history_strategy.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
git filter-repo  --force --invert-paths \
--path-glob 'impeller/docs/assets/*.png' \
--path-glob 'impeller/docs/assets/*.gif' \
--path-glob '*/example/game/*' \
--path-glob 'benchmarks/parser/resources/html5.html' \
--path-glob '*.dll' \
--path-glob '*.jar' \
--path-glob '*/SourceHanSerifCN*' \
--path-glob 'third_party/txt/third_party/fonts/NotoSansCJK-Regular.ttc' \
--path-glob 'impeller/fixtures/flutter_logo_baked.*' \
--path-glob 'impeller/fixtures/image.png' \
--path-glob '*.golden' \
--path-glob '*.aac' \
--path-glob '*.S' \
--path-glob '*.so' \
--path-glob '*.idl' \
--path-glob '*.gpy' \
--path-glob '*.gypi' \
--path-glob '*.asm' \
--path-glob '*.m4' \
--path-glob '*.in' \
--path-glob '*.pxd' \
--path-glob '*.hh' \
--path 'ci/licenses_golden/licenses_third_party' \
--path 'testing/scenario_app/android/reports' \
--path 'impeller/third_party' \
--path 'mojo/public/third_party' \
--path 'tests/data' \
--path 'tests/fast' \
--path 'tests/framework' \
--path 'travis' \
--path 'mojo' \
--path 'sky/sdk' \
--path 'sky/engine' \
--path 'sky/tools/webkitpy' \
--path 'sky/shell' \
--path 'sky/packages/sky' \
--path 'sky/tests' \
--path 'sky/unit' \
--path 'sky/services' \
--path 'sky/compositor' \
--path 'sky/build' \
--path 'sky/specs' \
--path 'skysprites' \
--path 'examples/demo_launcher' \
--path 'examples/game' \
--path 'third_party/qcms' \
--path 'third_party/libevent' \
--path 'third_party/boringssl' \
--path 'third_party/tcmalloc' \
--path 'third_party/cython' \
--path 'third_party/protobuf' \
--path 'third_party/libpng' \
--path 'third_party/re2' \
--path 'third_party/harfbuzz-ng' \
--path 'third_party/jinja2' \
--path 'third_party/libjpeg' \
--path 'third_party/glfw' \
--path 'third_party/zlib' \
--path 'third_party/android_platform' \
--path 'third_party/expat' \
--path 'third_party/brotli' \
--path 'third_party/yasm' \
--path 'third_party/khronos' \
--path 'third_party/okhttp' \
--path 'third_party/libxml' \
--path 'third_party/ots' \
--path 'third_party/libXNVCtrl' \
--path 'lib/web_ui/test/golden_files' \
--path 'apk' \
--path 'flutter' \
--path 'base' \
--path 'sdk' \
--path 'gpu' \
--path 'engine' \
--path 'tools/webkitpy' \
--path 'tools/valgrind' \
--path 'tools/clang' \
--path 'tools/android' \
--path 'build/linux' \
--path 'build/win' \
--path 'build/mac' \
--path 'ui' \
--path 'examples/stocks' \
--path 'examples/stocks2' \
--path 'examples/stocks-fn' \
--path 'examples/data' \
--path 'examples/fitness' \
--path 'examples/city-list' \
--path 'examples/widgets' \
--path 'examples/raw' \
--path 'examples/color' \
--path 'examples/flights' \
--path 'examples/rendering' \
--path 'examples/fn' \
--path 'specs' \
--path 'url' \
--path 'services' \
--path 'framework' \
--path 'crypto' \
--path 'skia/ext' \
--path 'e2etests' \
--path 'tests/resources' \
--path 'viewer' \
--path 'lib/stub_ui' \
--path 'content_handler'
```

----------------------------------------

TITLE: Custom Engine Dependency Override Configuration
DESCRIPTION: YAML configuration for overriding sky_engine dependency when using a locally-built engine.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/README.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
dependency_overrides:
  sky_engine:
    path: /path/to/flutter/engine/src/out/host_debug/gen/dart-pkg/sky_engine
```

----------------------------------------

TITLE: Changing directory to Flutter repo
DESCRIPTION: This command changes the current directory to the cloned Flutter repository. This is required to perform subsequent Git operations within the repository.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Setting-up-the-Framework-development-environment.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
"cd flutter"
```

----------------------------------------

TITLE: Running gclient sync for Flutter Engine
DESCRIPTION: Command to synchronize dependencies for the Flutter engine after setting up the .gclient file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
gclient sync
```

----------------------------------------

TITLE: Using Block Syntax for Complex Getters in Dart
DESCRIPTION: This snippet illustrates the use of a block syntax for getters that require more complex logic, enhancing readability when conditions span multiple lines.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_21

LANGUAGE: dart
CODE:
```
// OKAY, but the code is more dense than it could be:
String? get validated => switch(input[_inputIndex]?.trim()) {
  final String value when value.isNotEmpty => value,
  _ => null,
};

// BETTER (more verbose, but also more readable):
String? get validated {
  final String? value = input[_inputIndex]?.trim();

  if (value != null && value.isNotEmpty) {
    return value;
  }
  return null;
}
```

----------------------------------------

TITLE: Defining ShaderStructMemberMetadata in C++ for Impeller Uniform Handling
DESCRIPTION: This struct defines metadata for shader uniform members, used by Impeller to infer the correct glUniform* calls in OpenGL ES 2.0. It includes information about the data type, name, offset, size, and array elements of each uniform.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/ubo_gles2.md#2025-04-21_snippet_0

LANGUAGE: C++
CODE:
```
struct ShaderStructMemberMetadata {
  ShaderType type; // the data type (bool, int, float, etc.)
  std::string name; // the uniform member name "frame_info.mvp"
  size_t offset;
  size_t size;
  size_t array_elements;
};
```

----------------------------------------

TITLE: Using Docregion Comments in JavaScript
DESCRIPTION: This snippet illustrates how to utilize docregion comments in JavaScript files to document code sections.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_12

LANGUAGE: JavaScript
CODE:
```
// #docregion sectionname
// #enddocregion sectionname
```

----------------------------------------

TITLE: Running Clang Tidy with Automatic Fixes
DESCRIPTION: This command executes the clang_tidy tool with the `--fix` flag. This will attempt to automatically fix the detected issues. It also assumes that the command is run from the root of the engine repository.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
```shell
dart ./tools/clang_tidy/bin/main.dart --fix
```
```

----------------------------------------

TITLE: Set Binary Name and Application ID
DESCRIPTION: Sets the name of the executable binary and the application identifier. `BINARY_NAME` sets the name of the executable file and `APPLICATION_ID` identifies the application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
set(BINARY_NAME "flutter_gallery")
set(APPLICATION_ID "io.flutter.demo.flutter_gallery")
```

----------------------------------------

TITLE: Configuring application name and identifier for Flutter Linux build
DESCRIPTION: Defines the binary name and GTK application identifier for the Flutter application on Linux platforms.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
set(BINARY_NAME "a11y_assessments")
# The unique GTK application identifier for this application. See:
# https://wiki.gnome.org/HowDoI/ChooseApplicationID
set(APPLICATION_ID "com.example.a11y_assessments")
```

----------------------------------------

TITLE: Add Application ID Definition
DESCRIPTION: Adds a preprocessor definition for `APPLICATION_ID`. This allows the application to access its identifier at compile time.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_11

LANGUAGE: cmake
CODE:
```
add_definitions(-DAPPLICATION_ID="${APPLICATION_ID}")
```

----------------------------------------

TITLE: Creating Inline Snippet API Example
DESCRIPTION: This Dart code snippet shows how to create an inline snippet API example in the Flutter framework source code using the snippet tool.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/README.md#2025-04-22_snippet_3

LANGUAGE: dart
CODE:
```
/// {@tool dartpad}
/// Write a description of the example here. This description will appear in the
/// API web documentation to introduce the example.
///
/// ```dart
/// // Sample code goes here, e.g.:
/// const Widget emptyBox = SizedBox();
/// ```
/// {@end-tool}
```

----------------------------------------

TITLE: Creating Perf Test Function - Dart
DESCRIPTION: This Dart code defines a function that creates and configures a performance test. It specifies the directory containing the benchmark, the script to run, the test name, and the test driver. This function returns a `TaskFunction` that can be executed by the devicelab.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_6

LANGUAGE: Dart
CODE:
```
```Dart
TaskFunction createSuperImportantCasePerfTest() {
  return PerfTest(
    '${flutterDirectory.path}/dev/benchmarks/macrobenchmarks',
    'test_driver/run_app.dart',
    'super_important_case_perf',
    testDriver: 'test_driver/super_important_case_perf_test.dart',
  ).run;
}
```
```

----------------------------------------

TITLE: Configuring Flutter Tool Backend in CMake for Windows
DESCRIPTION: This snippet sets up a custom command to run the Flutter tool backend for generating necessary files. It creates a phony target to ensure the command runs every time and defines the flutter_assemble target.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
  ${CPP_WRAPPER_SOURCES_APP}
)
```

----------------------------------------

TITLE: Defining Message Getter in Dart Localization Class
DESCRIPTION: Example of adding a new getter without parameters to MaterialLocalizations class for localized strings.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_localizations/README.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
String get showMenuTooltip;
```

----------------------------------------

TITLE: Configuring iPhone Simulator for Auto Rotation
DESCRIPTION: This bash command configures the iPhone Simulator to rotate automatically when signaled by a guest app. This is necessary to ensure proper execution of platform view rotation tests.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios_scenario_app/ios/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
defaults write com.apple.iphonesimulator RotateWindowWhenSignaledByGuest -int 1
```

----------------------------------------

TITLE: Running C++ Unittests with Engine Tool
DESCRIPTION: This snippet illustrates how to run C++ unit tests specifically targeting the impeller component within the Flutter engine. It supports rebuilding and test execution in one command.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
et test //flutter/impeller:impeller_unittests
```

----------------------------------------

TITLE: Setting C++ Standard
DESCRIPTION: Specifies the C++ standard to be used for compilation. This ensures that the code is compiled using the C++17 standard.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
set(CMAKE_CXX_STANDARD 17)
```

----------------------------------------

TITLE: Add devicelab task for super_important_case (Dart)
DESCRIPTION: This code snippet creates a devicelab task for the 'super_important_case' performance test using the createSuperImportantCasePerfE2ETest function. It sets the device operating system and then runs the task. This ensures automated performance testing for every Flutter commit.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_3

LANGUAGE: Dart
CODE:
```
   import 'dart:async';

   import 'package:flutter_devicelab/tasks/perf_tests.dart';
   import 'package:flutter_devicelab/framework/adb.dart';
   import 'package:flutter_devicelab/framework/framework.dart';

   Future<void> main() async {
     deviceOperatingSystem = DeviceOperatingSystem.android;  // or ios
     await task(createSuperImportantCasePerfE2ETest());
   }
```

----------------------------------------

TITLE: Adding Engine Tool to PATH in Shell
DESCRIPTION: This snippet demonstrates how to add the `et` command-line tool to the system PATH, allowing for global access to the tool's functionalities. Ensure that the path specified points to the correct location in your Flutter engine setup.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
PATH=$PATH:/path/to/engine/flutter/bin
```

----------------------------------------

TITLE: Installing Mint Package Manager via Homebrew
DESCRIPTION: Command to install Mint, a package manager for Swift, using Homebrew.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/ios_cpu_profile.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
brew install mint
```

----------------------------------------

TITLE: Updating GClient Configuration for Fuchsia
DESCRIPTION: GClient configuration snippet to enable Fuchsia-specific dependencies and emulator support.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
solutions = [
  {
    # ...
    "custom_vars": {
      "download_fuchsia_deps": True,
      "run_fuchsia_emu": True,
    },
  },
]
```

----------------------------------------

TITLE: Adding GLFW as Subdirectory
DESCRIPTION: Adds GLFW as a subdirectory and links it to the executable. It configures GLFW build options and adds it as a subdirectory to the project, then links the GLFW library and sets include directories.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/vulkan_glfw/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
set(GLFW_REPOSITORY ${CMAKE_SOURCE_DIR}/../../third_party/glfw)

set(BUILD_SHARED_LIBS OFF)
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(GLFW_VULKAN_STATIC OFF CACHE BOOL "" FORCE)
add_subdirectory(${GLFW_REPOSITORY} build_glfw)

target_link_libraries(${EXE_NAME} PRIVATE glfw)
target_include_directories(${EXE_NAME} PRIVATE ${GLFW_REPOSITORY}/include)
```

----------------------------------------

TITLE: Starting ChromeDriver for Web Testing
DESCRIPTION: Command to start ChromeDriver on port 4444, which is required for running web integration tests in Flutter
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/web_e2e_tests/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
chromedriver --port=4444
```

----------------------------------------

TITLE: Recommended Engine Hash Calculation Formula
DESCRIPTION: The recommended approach for calculating engine hash, using merge-base to ensure consistent results even when working on feature branches.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
git ls-tree -r $(git merge-base HEAD master) engine DEPS | git hash-object --stdin
```

----------------------------------------

TITLE: Filtering OpenGL ES Playground Tests in Flutter
DESCRIPTION: GTest filter to run only OpenGL ES backend playground tests with a specific name pattern in Flutter development.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/opengles_development_setup.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
--gtest_filter="Play/*Foo*/OpenGLES"
```

----------------------------------------

TITLE: Converting Profile to HTML FlameGraph
DESCRIPTION: Command to convert the copied profile data to an HTML FlameGraph using the FlameGraph tool.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/ios_cpu_profile.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
FlameGraph --html output.html
```

----------------------------------------

TITLE: Updating Build Tools Version in Android Gradle for Flutter App
DESCRIPTION: This snippet updates the Android SDK build tools and support libraries versions from 25 to 27 in the `android/app/build.gradle`, necessary for recent build environments in Flutter.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_4

LANGUAGE: Gradle
CODE:
```
In `android/app/build.gradle`, replace version `25` by `27` and `25.0.3` by `27.0.3` (three places total).
```

----------------------------------------

TITLE: Setting Minimum CMake Version and Configuration Directory
DESCRIPTION: This snippet sets the minimum required version of CMake and defines the directory for ephemeral configuration files needed by the Flutter tool.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.10)

set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")

# Configuration provided via flutter tool.
include(${EPHEMERAL_DIR}/generated_config.cmake)
```

----------------------------------------

TITLE: Adding Docregion Comments in CSS
DESCRIPTION: This snippet illustrates the use of docregion comments in a CSS file, allowing for sections of CSS to be documented.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_9

LANGUAGE: CSS
CODE:
```
/* #docregion sectionname */
/* #enddocregion sectionname */
```

----------------------------------------

TITLE: Open All GitHub Issue/PR Links - JavaScript
DESCRIPTION: This JavaScript script is designed to be run in a browser's developer console on a GitHub issues or pull requests listing page. It identifies all unique links to specific issues or PRs on the current page and opens each one in a new browser tab to facilitate quicker review during triage. Requires enabling popups in the browser.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/triage/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// This script is intended to be run in chrome devtools console
// during triage to open PRs and Issues faster.

// Before the script can be run you need to enable popups in Chrome
// 1. On your computer, open Chrome Chrome.
// 2. At the top right, click More More and then Settings.
// 3. Click Privacy and security and then Site Settings.
// 4. Click Pop-ups and redirects.
// 5. Choose the option you want as your default setting.
//
// https://support.google.com/chrome/answer/95472?hl=en&co=GENIE.Platform%3DDesktop

const plural = window.location.toString().split('?')[0];
const singular = plural.substring(0, plural.length-1);
const suffix = singular.includes("issue") ? "s" : "";
const re = new RegExp("^" + singular + suffix + "/\\d+$");

var urls = document.getElementsByTagName('a');

var targets = []
for (url in urls) {
    var link = urls[url].href;
    if(link == undefined) continue;
    if(link.match(re) == null) continue;
    if(targets.includes(link)) continue;
    targets.push(link);
}

targets.forEach((target) => window.open(target));
```

----------------------------------------

TITLE: Running Flutter Tests for Package Flutter
DESCRIPTION: Runs Flutter tests using the local engine build in debug mode to ensure hot-reload and hot-restart functionalities are operational.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Rolling-Dart.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
cd $FLUTTER_HOME/packages/flutter\nflutter test --local-engine=host_debug --local-engine-host=host_debug
```

----------------------------------------

TITLE: Configuration Override Example - YAML
DESCRIPTION: This snippet shows an example of how to override the Autosubmit configuration at the repository level through a local configuration file. The override allows for more flexible management of review requirements and approval accounts.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Autosubmit-bot.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
auto_approval_accounts:
  - dependabot[bot]
  - dependabot
  - DartDevtoolWorkflowBot
approving_reviews: 3
support_no_review_revert: false
```

----------------------------------------

TITLE: Running Vulkan Unit Tests for Impeller in Flutter
DESCRIPTION: Command to run Vulkan-specific unit tests for Impeller in Flutter. Uses gtest filtering to focus only on Vulkan-related tests from the build output directory for arm64 architecture.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/impeller/Setting-up-MoltenVK-on-macOS-for-Impeller.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
out/host_debug_unopt_arm64/impeller_unittests --gtest_filter="*Vulkan*"
```

----------------------------------------

TITLE: Configuring Google Test Filter for Specific Playground Test
DESCRIPTION: Command line arguments to pass to the test executable for running a specific Playground-enabled test and configuring additional debug settings.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/xcode_frame_capture.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
--gtest_filter=TestName --enable_playground --timeout=-1
```

----------------------------------------

TITLE: Running device lab tests with a local engine
DESCRIPTION: To run device lab tests with a locally built engine, use the `--local-engine-src-path`, `--local-engine`, and `--local-engine-host` flags. The `--local-engine-src-path` can be omitted if the local engine is in the same directory as the `flutter/` directory.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Running-and-writing-tests.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
"../../bin/dart bin/run.dart \
  --local-engine-src-path=[path_to_src] \
  --local-engine=[engine_build_for_your_device] \
  --local-engine-host=[host_engine_build_for_your_device] \
  -t [task_name]"
```

LANGUAGE: shell
CODE:
```
"../../bin/dart bin/run.dart \
  --local-engine=[engine_build_for_your_device] \
  --local-engine-host=[host_engine_build_for_your_device] \
  -t [task_name]"
```

----------------------------------------

TITLE: Running the Dart JIT Runner Integration Test
DESCRIPTION: This command initiates the execution of the Dart JIT runner integration test on the Fuchsia platform, specifying the appropriate package URL.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_jit_runner/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
ffx test run "fuchsia-pkg://fuchsia.com/dart-jit-runner-integration-test#meta/dart-jit-runner-integration-test.cm"
```

----------------------------------------

TITLE: Building AOT Snapshot for Android aarch64
DESCRIPTION: This Bash command generates the AOT snapshot blobs for Android aarch64 targets. By utilizing the Flutter tooling, it produces the necessary binary blobs used in AOT mode.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Custom-Flutter-Engine-Embedding-in-AOT-Mode.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
flutter --local-engine <local_engine_configuration> --local-engine-host <local_host_engine_configuration> build aot --target-platform android-arm64 --release
```

----------------------------------------

TITLE: Symbolicating with ndk-stack on macOS
DESCRIPTION: This snippet shows how to use the ndk-stack tool from the Android NDK to symbolicate stack traces on a macOS system. Ensure that unzipped symbol files are available and the crash stack is saved in a file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Crashes.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
.../ndk/prebuilt/darwin-x86_64/bin/ndk-stack -sym .../path/to/downloaded/symbols < stack.txt
```

----------------------------------------

TITLE: Local Task Validation Commands
DESCRIPTION: This snippet provides commands to validate the task locally using Dart. It includes commands for building and testing only, directing to the application binary path based on the artifacts created.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
// Validate the task locally
// build only: dart bin/test_runner.dart test -t {NAME_OR_PATH_OF_TEST} --task-args build --task-args application-binary-path={PATH_TO_ARTIFACT}
// test only: dart bin/test_runner.dart test -t {NAME_OR_PATH_OF_TEST} --task-args test --task-args application-binary-path={PATH_TO_ARTIFACT}
```

----------------------------------------

TITLE: Checking Validity of Build Configurations with Dart
DESCRIPTION: This snippet shows the command-line usage for checking the validity of engine build config JSON files in a Flutter project using Dart. The `bin/check.dart` script can optionally take a path to the Flutter engine source. It verifies the build configurations by ensuring they meet predefined criteria.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/pkg/engine_build_configs/README.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
$ dart bin/check.dart [/path/to/engine/src]
```

----------------------------------------

TITLE: Dartdoc Template Usage
DESCRIPTION: Shows how to use a previously defined template in Dartdoc. The template is inserted using the `{@macro <id>}` tag, where `<id>` is the unique identifier of the template.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
/// {@macro <id>}
```

----------------------------------------

TITLE: Defining a Fragment Value in YAML for Flutter Code Migration
DESCRIPTION: Shows how to define a fragment value in a YAML configuration file to copy specific code pieces during automated migrations. Fragments are identified by a dot-separated list of accessors that reference parts of the code structure.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_16

LANGUAGE: yaml
CODE:
```
kind: fragment
value: 'arguments[0]'
```

----------------------------------------

TITLE: Setting Up Local Engine Tests
DESCRIPTION: Commands to configure integration tests to use specific local engine variants
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
export FLUTTER_LOCAL_ENGINE=android_debug_unopt
export FLUTTER_LOCAL_ENGINE_HOST=host_debug_unopt
flutter test test/integration.shard/some_test_case
```

----------------------------------------

TITLE: Running C++ Engine Unit Tests with Variant
DESCRIPTION: This shell command executes C++ unit tests for the Flutter engine, specifically targeting a specified build variant. The `--variant` flag allows selecting different build configurations like `host_debug_unopt_arm64`.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
testing/run_tests.py --type=engine --variant=host_debug_unopt_arm64
```

----------------------------------------

TITLE: Forcing SurfaceTexture Usage for Testing
DESCRIPTION: This diff shows how to force the engine to use `SurfaceTextures` for external texture rendering. This is useful for testing the OpenGLES branch on devices with higher API levels.  It involves modifying `FlutterRenderer.java` and rebuilding the engine.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_7

LANGUAGE: diff
CODE:
```
// shell/platform/android/io/flutter/embedding/engine/renderer/FlutterRenderer.java
-  @VisibleForTesting static boolean debugForceSurfaceProducerGlTextures = false;
+  @VisibleForTesting static boolean debugForceSurfaceProducerGlTextures = true;
```

----------------------------------------

TITLE: Setting Flutter Minimum CMake Version
DESCRIPTION: Establishes the minimum required CMake version for Flutter build configuration
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
```

----------------------------------------

TITLE: Running Java JUnit Tests
DESCRIPTION: This script is used to build and run JUnit tests for the Android embedding of the Flutter engine. It builds a .jar file containing the tests and dependencies and executes it using the system's Java runtime, with JDK v8 required.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/testing/Testing-the-engine.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
testing/run_tests.py --type=java
```

----------------------------------------

TITLE: Verify Installation of Engine Tool
DESCRIPTION: This snippet shows how to verify the successful installation of the `et` tool by executing the help command. No additional dependencies are required, and it outputs the available commands and options.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
$ et help
```

----------------------------------------

TITLE: Building Flutter Engine for M1 Mac
DESCRIPTION: Command to build the Flutter engine for M1 Mac (ARM64) in host debug unoptimized mode using the engine tool (et).
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
# M1 Mac (host_debug_unopt_arm64)
et build -c host_debug_unopt_arm64
```

----------------------------------------

TITLE: Building Flutter Engine for Frame Capture with RenderDoc
DESCRIPTION: Commands to build the Flutter engine in debug mode for frame capture. This ensures tracing is enabled for RenderDoc analysis.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/renderdoc_frame_capture.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
# In your $ENGINE_SRC folder, do:

./flutter/tools/gn --unopt
ninja -C out/host_debug_unopt/
```

----------------------------------------

TITLE: Running Dart Tests for Flutter Engine
DESCRIPTION: Commands to build the Flutter engine and run Dart tests for native and web platforms.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_7

LANGUAGE: shell
CODE:
```
flutter/tools/gn --unoptimized
ninja -C out/host_debug_unopt/
python3 flutter/testing/run_tests.py --type dart
cd flutter/lib/web_ui
dev/felt test [test file]
```

----------------------------------------

TITLE: Setting Minimum CMake Version
DESCRIPTION: Sets the minimum required version of CMake to ensure compatibility during the build process.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
```

----------------------------------------

TITLE: Running Dart Analysis for Flutter Tools
DESCRIPTION: Commands to run Dart analysis on the Flutter tool codebase and verify CI analysis builds.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
cd flutter/packages/flutter_tools
dart analyze .
```

LANGUAGE: shell
CODE:
```
dart --enable-asserts dev/bots/analyze.dart
```

----------------------------------------

TITLE: ClampRound, ClampFloor, and ClampCeil usage in C++
DESCRIPTION: `ClampRound`, `ClampFloor`, and `ClampCeil` functions provide functionality similar to `std::round`, `std::floor`, and `std::ceil` but they saturate and return an integral type. The template parameter specifies the destination type, defaulting to int if unspecified. These are used for most floating-to-integral conversions.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_2

LANGUAGE: cpp
CODE:
```
// Basically saturated_cast<int>(std::round(floating_point_value)).
int int_value = ClampRound(floating_point_value);

// A destination type can be explicitly specified.
uint8_t byte_value = ClampFloor<uint8_t>(floating_point_value);
```

----------------------------------------

TITLE: Build Tools Configuration
DESCRIPTION: Specifies Android build tools version 35.0.0-rc4 for compilation and packaging
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_2

LANGUAGE: android-sdk
CODE:
```
build-tools;35.0.0-rc4:build-tools
```

----------------------------------------

TITLE: Viewing Git Tree Entries for Engine Files
DESCRIPTION: Demonstrates using git ls-tree to list all engine-related files with their blob hashes, which forms the basis for content-based engine hashing.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
100644 blob 5143313ce5826665309e8a086a281ad3ab1a9ce7    DEPS
100644 blob 205edfe43306c4dbf9a4a6f15e83cf5d49b9fc7d    engine/src/flutter/.ci.yaml
100644 blob 3c73f32a334086d9a0f4fd468dcdf9505d74e9c5    engine/src/flutter/.clang-format
100644 blob b74be267bc42f08ebf9afe8eec5cbbfe75c5a1c9    engine/src/flutter/.clang-tidy
100644 blob dd395bfd2104526d4f865313eab578f15ee5775b    engine/src/flutter/.engine-release.version
100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    engine/src/flutter/.git-blame-ignore-revs
100644 blob 915d1ed51d121f1986c9dfe71cf1745c1a11286d    engine/src/flutter/.gitattributes
100644 blob c1c1d3d05f37b0e09155b32aceb6d2ec62ee464b    engine/src/flutter/.github/PULL_REQUEST_TEMPLATE.md
100644 blob 9688ddae25af122d7c17d9c27d887b84888f3619    engine/src/flutter/.github/dependabot.yml
100644 blob ed7171a9638274d8f411b6bededec61feab15a7b    engine/src/flutter/.github/labeler.yml
100644 blob be245c915e7eb5377317cc6eb038442628071790    engine/src/flutter/.github/release.yml
# ... all files
```

----------------------------------------

TITLE: Sourcing Sanitizer Suppressions in Bash
DESCRIPTION: This command sources a shell script that enables relevant options for all known sanitizers and prints the files containing suppressions for each sanitizer.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
source ./flutter/testing/sanitizer_suppressions.sh
```

----------------------------------------

TITLE: Running Flutter Tools Tests
DESCRIPTION: Commands for running Flutter tool tests using either dart or flutter test commands.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
dart test test_file_or_directory_path
```

LANGUAGE: shell
CODE:
```
flutter test test_file_or_directory_path
```

----------------------------------------

TITLE: Using Docregion Comments in C++
DESCRIPTION: This snippet demonstrates the application of docregion comments for documentation purposes in C++ files.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_11

LANGUAGE: C++
CODE:
```
// #docregion sectionname
// #enddocregion sectionname
```

----------------------------------------

TITLE: Referencing Code Excerpts in Markdown Documentation
DESCRIPTION: This snippet illustrates how to reference a code excerpt in a README.md using the code-excerpt tag, which will link to previously annotated code.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_7

LANGUAGE: Markdown
CODE:
```
<?code-excerpt "main.dart (Foo)"?>
```dart
```
```

----------------------------------------

TITLE: Comprehensive Engine Build Script for Linux and Android
DESCRIPTION: A shell script that updates all necessary Flutter engine builds for development on Linux while testing on Android. It fetches upstream changes, syncs dependencies, and builds all relevant configurations.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
set -ex

cd ~/dev/flutter
git fetch upstream master
git rebase upstream/master
cd engine
gclient sync -D
cd src

flutter/tools/gn --unoptimized --runtime-mode=debug
flutter/tools/gn --android --unoptimized --runtime-mode=debug
flutter/tools/gn --android --runtime-mode=profile
flutter/tools/gn --android --runtime-mode=release

cd out
find . -mindepth 1 -maxdepth 1 -type d | xargs -n 1 sh -c 'ninja -C $0 || exit 255'
```

----------------------------------------

TITLE: Updating `.gitignore` for Third-Party Libraries
DESCRIPTION: This code snippet shows how to modify the `.gitignore` file to track specific third-party directories while ignoring others. It ensures that the necessary third-party dependencies are included in the version control system without cluttering it with irrelevant files.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/README.md#2025-04-21_snippet_0

LANGUAGE: diff
CODE:
```
# Ignores all third_party/ directories except for the ones we want to track.

+ !{folder_name}/
```

----------------------------------------

TITLE: Include generated config
DESCRIPTION: Includes the `generated_config.cmake` file from the ephemeral directory. This file likely contains configurations generated by the Flutter tool, such as platform-specific settings or build flags.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
include(${EPHEMERAL_DIR}/generated_config.cmake)
```

----------------------------------------

TITLE: Adding Flutter Library and Tool Build Rules
DESCRIPTION: Manages the inclusion of Flutter-related build rules and dependencies by adding subdirectory paths for the Flutter library and other tools. It ensures that the necessary Flutter components are integrated into the project build system.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")

# Flutter library and tool build rules.
add_subdirectory(${FLUTTER_MANAGED_DIR})
```

----------------------------------------

TITLE: Computing Hash for A/B Testing with Merge-Base
DESCRIPTION: Demonstrates how to calculate an engine hash relative to the merge-base with master, enabling accurate A/B testing when working on feature branches.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
git ls-tree -r $(git merge-base HEAD master) engine DEPS | git hash-object --stdin
```

----------------------------------------

TITLE: Running Subset of Microbenchmarks
DESCRIPTION: Executing specific microbenchmark tests by providing a comma-separated list of test files using Dart defines
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/microbenchmarks/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
flutter run -d $DEVICE_ID --profile lib/benchmark_collection.dart --dart-define=tests=foundation/change_notifier_bench.dart,language/sync_star_bench.dart
```

----------------------------------------

TITLE: Performing Saturated Arithmetic Type Conversions in C++
DESCRIPTION: The `saturated_cast` template converts between arithmetic types, saturating the result to the destination type's maximum or minimum value if the source is out of bounds. The example shows casting to a smaller type and converting from floating-point to integer with saturation to `INT_MAX`, `INT_MIN`, or 0 for NaN.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_1

LANGUAGE: cpp
CODE:
```
// Cast to a smaller type, saturating as needed.
int8_t eight_bit_value = saturated_cast<int8_t>(int_value);

// Convert from float with saturation to INT_MAX, INT_MIN, or 0 for NaN.
int int_value = saturated_cast<int>(floating_point_value);
```

----------------------------------------

TITLE: Running Flutter App in Debug Mode with Local Web SDK
DESCRIPTION: Commands to run a Flutter web app using a locally built Web Engine with Chrome or web server
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
flutter run --local-web-sdk=wasm_release --debug -d chrome
```

LANGUAGE: bash
CODE:
```
flutter run --local-web-sdk=wasm_release --debug -d web-server --web-port 8080
```

----------------------------------------

TITLE: Using Angle OpenGL ES Emulation Layer in Flutter
DESCRIPTION: Command-line argument to use the Angle OpenGL ES emulation layer instead of the default OpenGL ES driver in Flutter development.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/opengles_development_setup.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
--use_angle
```

----------------------------------------

TITLE: ClampedNumeric Saturation Example in C++
DESCRIPTION: This example demonstrates that `ClampedNumeric` saturation is not sticky. A value that saturates at `INT_MAX` can be decremented to `INT_MAX - 1` in a subsequent operation, losing the saturated state.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_7

LANGUAGE: cpp
CODE:
```
ClampedNumeric<int> value = INT_MAX;
++value;  // value is still INT_MAX, due to saturation.
--value;  // value is now (INT_MAX - 1), because saturation is not sticky.
```

----------------------------------------

TITLE: JSON Structure for flutter.serviceExtensionStateChanged Event in Flutter DAP
DESCRIPTION: JSON format for the flutter.serviceExtensionStateChanged custom event in Flutter's Debug Adapter Protocol. This event is emitted when a Flutter service extension value changes, with the extension name and its new value.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/debug_adapters/README.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
	"type": "event",
	"event": "flutter.serviceExtensionStateChanged",
	"body": {
		"extension": "ext.flutter.debugPaint",
		"value": "true",
	}
}
```

----------------------------------------

TITLE: Embedding Entitlements File in Zip Artifact in GN
DESCRIPTION: This snippet shows how to embed the file with collected data keys for code signing into a zip artifact in GN. It adds the entitlements.txt file as a dependency and specifies its destination in the zip file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/release/Code-signing-metadata.md#2025-04-21_snippet_2

LANGUAGE: gn
CODE:
```
if (host_os == "mac") {
    deps += [ ":artifacts_entitlement_config" ]
    files += [
        {
        source = "$target_gen_dir/entitlements.txt"
        destination = "entitlements.txt"
        },
    ]
}
```

----------------------------------------

TITLE: Running the Token Defaults Generator Script in Flutter
DESCRIPTION: This shell command runs the Dart script responsible for generating default component themes based on token data. Designed for execution from the root of the repository, it updates the 'generated/used_tokens.csv' and various theme files. The script requires Dart installed and access to the Flutter project's root directory.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/tools/gen_defaults/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
dart dev/tools/gen_defaults/bin/gen_defaults.dart [-v]
```

----------------------------------------

TITLE: Running Impeller Unit Tests with Playgrounds - Command Line
DESCRIPTION: This snippet describes how to run Impeller unit tests with playgrounds enabled, which are used for visual debugging. The `--enable_playground` flag activates the playgrounds.  The `--timeout=-1` flag disables the timeout, allowing tests to run indefinitely which prevents premature termination of potentially long running tests.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/faq.md#_snippet_0

LANGUAGE: shell
CODE:
```
impeller_unittests --enable_playground --timeout=-1
```

----------------------------------------

TITLE: SDK Tools Installation
DESCRIPTION: Installs core Android SDK development tools
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_4

LANGUAGE: android-sdk
CODE:
```
tools:tools
```

----------------------------------------

TITLE: Minimum Autosubmit Configuration Example - YAML
DESCRIPTION: This snippet depicts a minimal configuration file for the Autosubmit bot, where only the 'approval_group' key is provided. This is useful for users who want to get started quickly with the Autosubmit without extensive configuration.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Autosubmit-bot.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
approval_group: flutter-hackers
```

----------------------------------------

TITLE: Configuring VS Code launch settings for local engine debugging
DESCRIPTION: JSON configuration for Visual Studio Code's launch.json file to enable debugging Flutter applications with a locally built engine.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Launch (local engine)",
      "request": "launch",
      "type": "dart",
      "args": ["--local-engine", "XXX", "--local-engine-host", "YYY"]
    }

    // Other profiles below..
  ]
}
```

----------------------------------------

TITLE: Dry Run Image Upload Command
DESCRIPTION: Command to simulate golden test image upload without actually uploading, useful for local testing and validation
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/golden_tests_harvester/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
dart \./tools/golden_tests_harvester/bin/golden_tests_harvester\.dart --dry-run <path\/to\/digests>
```

----------------------------------------

TITLE: Configuring iOS build with local engine without compilation
DESCRIPTION: Command to set up Xcode build settings and plugins for iOS without compiling the app, used to speed up the debugging workflow.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
flutter build ios --local-engine ios_debug_unopt --local-engine-host host_debug_unopt --config-only
```

----------------------------------------

TITLE: Flutter Daemon Version Response - JSON-RPC
DESCRIPTION: Example JSON-RPC response containing the daemon protocol version
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
[{"id":0,"result":"0.1.0"}]
```

----------------------------------------

TITLE: Check for GTK Modules
DESCRIPTION: Checks for the GTK (Gimp Toolkit) library using PkgConfig. If found, it creates an imported target named `PkgConfig::GTK`. It is `REQUIRED`, so build will fail if GTK is not found.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_10

LANGUAGE: cmake
CODE:
```
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
```

----------------------------------------

TITLE: Configuring Flutter Library Paths
DESCRIPTION: Sets up essential paths and configurations for Flutter library, including ephemeral directory and target platform
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ui/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
set(EPHEMERAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ephemeral")

if (NOT DEFINED FLUTTER_TARGET_PLATFORM)
  set(FLUTTER_TARGET_PLATFORM "windows-x64")
endif()
```

----------------------------------------

TITLE: Project Initialization in CMake
DESCRIPTION: Initializes the CMake project, specifying the project name as 'runner' and enabling CXX language support. This is a fundamental step to define a CMake project.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
project(runner LANGUAGES CXX)
```

----------------------------------------

TITLE: VSCode Multi-Root Workspace Configuration for Flutter
DESCRIPTION: Sample VSCode workspace configuration file that includes the Flutter SDK path for a multi-root workspace setup.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
# flutter.code-workspace
{
	"folders": [
		{
			"path": "path/to/the/flutter/sdk"
		}
	],
	"settings": {}
}
```

----------------------------------------

TITLE: Running License Checking Script
DESCRIPTION: This sequence of commands updates the golden license files to reflect the current state of the repository. It requires the Dart SDK and any associated dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
dart pub get
gclient sync -D
rm -rf ../../../out/licenses
dart --enable-asserts lib/main.dart --src ../../.. --out ../../../out/licenses --golden ../../ci/licenses_golden
```

----------------------------------------

TITLE: Defining GN flags in JSON
DESCRIPTION: This snippet shows how to define a list of GN flags within a JSON configuration.  These flags are passed to the `tools/gn` script to configure the build.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
"gn": [
      "--runtime-mode",
      "debug",
      "--prebuilt-dart-sdk",
      "--build-embedder-examples"
],

```

----------------------------------------

TITLE: Creating a New DevTools Memory Test in Flutter
DESCRIPTION: Steps to create a new DevTools memory test case and add it to Flutter's device lab. This involves writing a Flutter driver test, adding an entry to the manifest, and creating a task file.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-memory-test-for-Flutter.md#2025-04-22_snippet_1

LANGUAGE: Dart
CODE:
```
1. Write (or reuse) a normal Flutter driver test for the app in files named like `test_driver/some_memory_perf.dart` and `test_driver/some_memory_perf_test.dart`.
2. Add a `some_memory_perf` entry to [manifest.yaml][manifest]
3. Add a `some_memory_perf.dart` file to [dev/devicelab/bin/tasks][tasks] folder.
```

----------------------------------------

TITLE: Setting Up Flutter Libraries and Plugins with CMake
DESCRIPTION: This snippet includes build rules for Flutter libraries and tools, specifically for plugins and the application itself. It adds necessary subdirectories and includes generated plugin rules to ensure that the application builds correctly with all required components.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: CMake
CODE:
```
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

add_subdirectory("runner")

include(flutter/generated_plugins.cmake)

```

----------------------------------------

TITLE: Specifying Seed for Test Shuffling
DESCRIPTION: Setting a custom seed value for randomizing microbenchmark test order
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/microbenchmarks/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
flutter run -d $DEVICE_ID --profile lib/benchmark_collection.dart --dart-define=seed=12345
```

----------------------------------------

TITLE: Preparing Build Files and Building Binary
DESCRIPTION: This snippet uses the `gn` tool to generate build files for Fuchsia, disabling link-time optimization (LTO) and setting the runtime mode to `profile`. It then uses `ninja` to build the Flutter shell, Fuchsia tests, and related components.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_aot_runner/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
$ENGINE_DIR/flutter/tools/gn --fuchsia --no-lto --runtime-mode=profile
ninja -C $ENGINE_DIR/out/fuchsia_profile_x64 flutter/shell/platform/fuchsia fuchsia_tests
```

----------------------------------------

TITLE: Running Dart Fix Tests in Flutter
DESCRIPTION: Command to execute tests that validate the fix rules defined in the YAML files. This should be run in the flutter/packages/flutter/test_fixes directory to compare the fixes against golden files.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/lib/fix_data/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
dart fix --compare-to-golden
```

----------------------------------------

TITLE: Migrating FlutterActivity in Java (Old Embedding)
DESCRIPTION: Example of a FlutterActivity subclass using the old Android embedding. This code shows the typical structure, including the onCreate method and plugin registration.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-pre-1.12-Android-projects.md#2025-04-21_snippet_5

LANGUAGE: java
CODE:
```
package [your.package.name];

import android.os.Bundle;
import io.flutter.app.FlutterActivity;
import io.flutter.plugins.GeneratedPluginRegistrant;

public class MainActivity extends FlutterActivity {
  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    GeneratedPluginRegistrant.registerWith(this);
  }

  // ...some amount of custom code for your app is here.
}
```

----------------------------------------

TITLE: Handling WM_GETOBJECT Message for UIA in C++
DESCRIPTION: This snippet shows how the Window class handles the WM_GETOBJECT message to provide the UIA root object. It checks if the lparam matches UiaRootObjectId and returns the UIA fragment root using UiaReturnRawElementProvider.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/desktop/windows/Accessibility-on-Windows.md#2025-04-22_snippet_0

LANGUAGE: C++
CODE:
```
Window::OnGetObject() {
  if (lparam == UiaRootObjectId) {
    return UiaReturnRawElementProvider(hwnd, wParam, lParam, fragment_root);
  }
}
```

----------------------------------------

TITLE: Defining Flutter Wrapper Plugin Library
DESCRIPTION: Creates a static library for the Flutter wrapper plugin, including core and plugin sources, and links it to the flutter interface library.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
add_library(flutter_wrapper_plugin STATIC ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN})
```

----------------------------------------

TITLE: Installing Flutter application components for Linux bundle
DESCRIPTION: Configures installation rules for the binary executable, ICU data file, and Flutter library, placing them in their appropriate directories within the bundle.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/CMakeLists.txt#2025-04-21_snippet_12

LANGUAGE: CMake
CODE:
```
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
  COMPONENT Runtime)

install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Migrating iOS Project Files
DESCRIPTION: Handles the migration of custom iOS code. The iOS template directory is renamed to segregate new template code, allowing easy integration of existing custom iOS code.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-build-with-gradle.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
mv <appname>/ios <appname>/ios.template
cp -r <existing-app-dir>/ios/ <appname>
```

----------------------------------------

TITLE: Executing Clangd Check Script with Default Paths
DESCRIPTION: This shell command runs the `clangd_check` tool using Dart, with paths inferred from existing artifacts. Its primary function is to execute clangd diagnostics on the codebase. It requires Dart and appropriate environment setup with access to the `clangd` and C++ codebase. On success, it exits with status 0.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clangd_check/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
dart ./tools/clangd_check/bin/main.dart
```

----------------------------------------

TITLE: Running Deflake Tool for Test Stability
DESCRIPTION: Command to run the deflake tool, which builds an APK, establishes baseline golden-files, and runs multiple tests to ensure consistency.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_8

LANGUAGE: Shell
CODE:
```
dart tool/deflake.dart lib/flutter_rendered_blue_rectangle_main.dart
```

----------------------------------------

TITLE: Add driver test for super_important_case (deprecated) (Dart)
DESCRIPTION: This code snippet adds a driver test using the macroPerfTest function to navigate to the 'super_important_case' page and collect performance metrics. It is deprecated in favor of e2e tests. It includes optional parameters for page delay, and custom driverOps/setupOps functions to customize the test.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/How-to-write-a-render-speed-test-for-Flutter.md#2025-04-21_snippet_2

LANGUAGE: Dart
CODE:
```
   import 'package:flutter_driver/flutter_driver.dart';
   import 'package:macrobenchmarks/common.dart';

   import 'util.dart';

   void main() {
     macroPerfTest(
       'super_important_case',
       kSuperImportantCaseRouteName,
       pageDelay: const Duration(seconds: 1),
       /* optional */ driverOps: (FlutterDriver driver) async {
           ...
       },
       /* optional */ setupOps: (FlutterDriver driver) async {
           ...
       },
     );
   }
```

----------------------------------------

TITLE: Setting Minimum CMake Version
DESCRIPTION: Establishes the minimum required CMake version for the Flutter build process. Ensures compatibility with Flutter's build requirements.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.14)
```

----------------------------------------

TITLE: Flutter Tool Backend Custom Command
DESCRIPTION: Implements a custom build command to generate Flutter libraries and wrapper sources using the Flutter tool backend script. Ensures dynamic generation of required build artifacts.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/complex_layout/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
```

----------------------------------------

TITLE: Set Minimum CMake Version
DESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the features and commands used in the CMakeLists.txt file.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.10)
```

----------------------------------------

TITLE: Initializing CMake Project for Flutter Embedder GLFW in C++
DESCRIPTION: Sets up the CMake project, specifies C++11 standard, and creates the main executable target.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/examples/glfw_drm/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.15)
project(FlutterEmbedderGLFW)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )

add_executable(flutter_glfw FlutterEmbedderGLFW.cc)
```

----------------------------------------

TITLE: Defining a Method Element in a Class - YAML
DESCRIPTION: This YAML snippet shows how to represent a method `m` in a class `C`, detailing its URI and the contextual relationship with the containing class. It emphasizes the importance of indicating class membership.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
uris: ['lib.dart']
method: 'm'
inClass: 'C'
```

----------------------------------------

TITLE: Leak Detection Test Failure Example
DESCRIPTION: An example output from a Flutter Framework widget test failure due to leaks detected by leak_tracker. The test output indicates that an object was not disposed of properly, illustrating the need for careful management of disposables in tests.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/testing/Leak-tracking.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
Expected: leak free
    Actual: <Instance of 'Leaks'>
     Which: contains leaks:
            # The text is generated by leak_tracker.
            # For leak troubleshooting tips open:
            # https://github.com/flutter/flutter/blob/main/docs/contributing/testing/Leak-tracking.md
            notDisposed:
              total: 1
              objects:
                FocusNode:
                  test: Align smoke test
                  identityHashCode: 82308154

```

----------------------------------------

TITLE: Flutter Daemon Version Request - JSON-RPC
DESCRIPTION: Example JSON-RPC request to get the daemon protocol version using the daemon.version method
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
[{"method":"daemon.version","id":0}]
```

----------------------------------------

TITLE: Specifying Run Configurations for Flutter Web Tests
DESCRIPTION: Defines test environment parameters including browser selection and optional CanvasKit variant
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/test/README.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
run-configs:
  * `name` - Name of the run configuration.
  * `browser` - Browser to run tests (chrome, firefox, safari, edge).
  * `canvaskit-variant` - Optional CanvasKit variant (full or chromium).
```

----------------------------------------

TITLE: Creating Pipeline Descriptor in C++
DESCRIPTION: This code creates a pipeline descriptor using the vertex and fragment shaders, initializing the fixed function state with default values.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_2

LANGUAGE: c++
CODE:
```
using VS = BabyVertexShader;
using FS = BabyFragmentShader;

auto desc = PipelineBuilder<VS, FS>::MakeDefaultPipelineDescriptor(*context);
```

----------------------------------------

TITLE: Adding Metadata Field in GN Target for Code Signing
DESCRIPTION: This snippet shows how to add a metadata field to a GN target for code signing a binary with entitlements. It demonstrates adding the binary name to the entitlement_file_path array.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/release/Code-signing-metadata.md#2025-04-21_snippet_0

LANGUAGE: gn
CODE:
```
metadata = {
    entitlement_file_path = [ "libtessellator.dylib" ]
}
```

----------------------------------------

TITLE: Updating Flutter Minimum SDK Version
DESCRIPTION: This Dart command updates the minimum Flutter SDK version for all packages in the repository. The command utilizes the `flutter_plugin_tools.dart` script to set a specified minimum version. Dependency: Make sure the repo tooling is available and the script path is correct. Input: Desired Flutter minimum version. Make sure to commit changes in a single PR to maintain CI consistency.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/release/Updating-Packages-repo-for-a-stable-release.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
dart run script/tool/bin/flutter_plugin_tools.dart update-min-sdk --flutter-min=3.7.0
```

----------------------------------------

TITLE: Configuring a Flutter Engine Build in YAML
DESCRIPTION: This snippet shows a YAML configuration for a Flutter Engine build, specifying the environment and properties such as the recipe and the Flutter OS X SDK version. It's used to set up builds on a CI system and specifies details like config names and timeouts.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
  - name: Mac mac_android_aot_engine
    recipe: engine_v2/engine_v2
    timeout: 60
    properties:
      config_name: mac_android_aot_engine
      $flutter/osx_sdk : >-
        { "sdk_version": "16c5032a" }

```

----------------------------------------

TITLE: Example of Build Definition in JSON
DESCRIPTION: This snippet provides a JSON structure for defining a build in the Flutter Engine Build Definition Language. It includes properties like archives, gn commands, ninja commands, and more, essential for setting up and running CI builds.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
           "archives": [],
           "drone_dimensions": [],
           "gclient_variables": {},
           "gn": [],
           "name": "host_debug",
           "generators": [],
           "ninja": {},
           "tests": []
           "postsubmit_overrides": {}
}

```

----------------------------------------

TITLE: Framework Test Configuration in JSON
DESCRIPTION: This JSON snippet defines a framework test configuration for Flutter's CI. It specifies the test name, shard, subshard, and test dependencies, including the chrome and driver version. This configuration is used to run flutter/flutter tests using engine artifacts.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_12

LANGUAGE: json
CODE:
```
{
   "tests": [
      {
        "name": "web-tests-1",
        "shard": "web_tests",
        "subshard": "1",
        "test_dependencies": [
          {
            "dependency": "chrome_and_driver",
            "version": "version:111.0a"
          }
        ]
      }
    ]
}
```

----------------------------------------

TITLE: Defining List Prepend Function in CMake for Flutter Linux
DESCRIPTION: Implements a custom function to prepend a prefix to each element in a list, replacing functionality that isn't available in CMake 3.10. This function is used to prepare header file paths with the appropriate directory prefix.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/templates/app/linux.tmpl/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Removing Positional Parameter in YAML
DESCRIPTION: Demonstrates how to specify removing a positional parameter using its zero-based index in a YAML configuration
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_9

LANGUAGE: yaml
CODE:
```
kind: 'removeParameter'
index: 1
```

----------------------------------------

TITLE: Setting Gclient Variables in JSON
DESCRIPTION: This JSON snippet is used to define gclient variables in the build configuration, such as disabling downloads of certain dependencies. These variables influence the behavior of gclient sync operations.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
"gclient_variables": {
   "download_android_deps": false
}

```

----------------------------------------

TITLE: Describing Impeller Unit-Test Setup in Markdown
DESCRIPTION: This markdown snippet explains the unique approach to Impeller unit-tests in the Flutter project. It highlights that all tests use a single fixture set and are invoked using the 'impeller_unittest' harness, contrary to other targets in the buildroot.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/fixtures/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# The Impeller Fixtures Set

Unlike other targets in the buildroot, all Impeller unit-tests use the same
fixture set and are invoked using a single test harness (`impeller_unittest`).
This is for convenience but also to make working with shader libraries easier.
```

----------------------------------------

TITLE: CMake Policy Setting
DESCRIPTION: Sets a CMake policy to NEW. This affects how CMake handles certain behaviors.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
cmake_policy(SET CMP0063 NEW)
```

----------------------------------------

TITLE: Running Flutter Test Fixes Locally with Dart
DESCRIPTION: Command to validate fix rules by comparing them to golden files. This should be executed in the flutter/packages/flutter_test/test_fixes directory to ensure that the fix rules work as expected.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_test/lib/fix_data/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
dart fix --compare-to-golden
```

----------------------------------------

TITLE: Dart Comment Example (Bad)
DESCRIPTION: Demonstrates an incorrect way to start a sentence in Dart documentation.  The sentence begins with a lowercase letter, violating grammar rules. This is used as a negative example to show what not to do.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
// BAD

/// [foo] must not be null.
```

----------------------------------------

TITLE: Adding mouse-input-view
DESCRIPTION: This shell command adds the `mouse-input-view` to the Fuchsia session. It uses `ffx session add` with the package URL to register the view.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
ffx session add fuchsia-pkg://fuchsia.com/mouse-input-view#meta/mouse-input-view.cm
```

----------------------------------------

TITLE: Flutter Library and Application Build Configuration
DESCRIPTION: Sets up subdirectories for Flutter library, application runner, and generated plugin build rules
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")

add_subdirectory(${FLUTTER_MANAGED_DIR})
add_subdirectory("runner")

include(flutter/generated_plugins.cmake)
```

----------------------------------------

TITLE: Installing Flutter Library
DESCRIPTION: Installs the Flutter library to the lib directory within the build bundle. The Flutter library contains the core Flutter runtime and rendering engine.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_18

LANGUAGE: cmake
CODE:
```
install(FILES "${FLUTTER_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  COMPONENT Runtime)
```

----------------------------------------

TITLE: Setting Up Custom Commands for Flutter Tool
DESCRIPTION: Adds a custom command to generate Flutter libraries and headers ensuring that it runs every time the build is executed.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/flutter/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
add_custom_command(OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS} ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN} ${CPP_WRAPPER_SOURCES_APP} ${PHONY_OUTPUT})
```

----------------------------------------

TITLE: Applying Standard Build Settings in CMake
DESCRIPTION: This snippet applies the standard set of build settings to the defined executable target. It can be removed if the application requires custom build settings.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/runner/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
apply_standard_settings(${BINARY_NAME})
```

----------------------------------------

TITLE: Configuring Metal API Validation Environment Variables
DESCRIPTION: Enables comprehensive Metal API and shader validation by setting environment variables. Provides runtime checks, error handling, and logging for Metal-based graphics development.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/metal_validation.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
# Metal Validation Defaults
export MTL_DEBUG_LAYER=1
export MTL_DEBUG_LAYER_ERROR_MODE=assert
# Set this to assert for stricter runtime checks. Set to "ignore" if too chatty.
export MTL_DEBUG_LAYER_WARNING_MODE=nslog
export MTL_SHADER_VALIDATION=1
```

----------------------------------------

TITLE: Defining an Element - YAML
DESCRIPTION: This YAML snippet illustrates how to specify an element within the API that has been changed, including its URIs and type information. It demonstrates how to represent classes and methods with the necessary structural keys.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_4

LANGUAGE: yaml
CODE:
```
uris: ['lib.dart']
class: 'C'
```

----------------------------------------

TITLE: Equivalent Branching in GLSL Function for Performance
DESCRIPTION: This GLSL code is an expanded equivalent of the previous function, illustrating the impact of branching on efficiency and drawing attention to how branching logic in shader code gets translated to assembly.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/shader_optimization.md#2025-04-21_snippet_5

LANGUAGE: GLSL
CODE:
```
vec4 FrobnicateColor(vec4 color) {
  vec4 result;

  if (color.a == 0) {
    result = vec4(0);
  } else {
    result = DoExtremelyExpensiveThing(color);
  }

  return result;
}
```

----------------------------------------

TITLE: Throwing String Exception in Flutter Test
DESCRIPTION: This snippet shows a test case where a string exception is thrown. The exception message is 'Who lives, who dies, who tells your story?'. The test is labeled as 'Exception handling in test harness - string'.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/integration_test/exception_handling_expectation.txt#2025-04-21_snippet_0

LANGUAGE: Dart
CODE:
```
main.<anonymous closure> (.+[/\\]dev[/\\]automated_tests[/\\]integration_test[/\\]exception_handling_test.dart:10:5)
```

----------------------------------------

TITLE: Building the Flutter Engine in Bash
DESCRIPTION: The script builds the Flutter engine in debug, profile, and release modes for both host and Android platforms, leveraging the Goma compiler. Requires the GN tool to configure the build options before using 'ninja' to perform the actual builds.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Rolling-Dart.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
#!/bin/bash -e\n\nset -ex\n\ncd ~/engine/src\nflutter/tools/gn --goma --runtime-mode=debug\nflutter/tools/gn --goma --runtime-mode=profile\nflutter/tools/gn --goma --runtime-mode=release\nflutter/tools/gn --goma --android --runtime-mode=debug\nflutter/tools/gn --goma --android --runtime-mode=profile\nflutter/tools/gn --goma --android --runtime-mode=release\ncd out\nfind . -mindepth 1 -maxdepth 1 -type d | xargs -n 1 sh -c 'ninja -C $0 -j1000 || exit 255'
```

----------------------------------------

TITLE: Find system dependencies
DESCRIPTION: Uses `find_package` and `pkg_check_modules` to locate and import GTK, GLIB, and GIO system libraries.  These libraries are essential for building a GTK-based Flutter application.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: cmake
CODE:
```
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)
pkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)
pkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)
```

----------------------------------------

TITLE: Running Texture Layer Hybrid Composition Platform View App and Test
DESCRIPTION: Commands to run the texture_layer_hybrid_composition_platform_view app and its corresponding test using Flutter CLI.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_5

LANGUAGE: Shell
CODE:
```
# Run the app
$ flutter run lib/platform_view/texture_layer_hybrid_composition_platform_view_main.dart

# Run the test
$ flutter drive lib/platform_view/texture_layer_hybrid_composition_platform_view_main.dart
```

----------------------------------------

TITLE: Building Fuchsia
DESCRIPTION: This shell command configures the Fuchsia build target and then initiates the build process. It sets the target device to `terminal.qemu-x64` and executes the build.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
fx set terminal.qemu-x64 && fx build
```

----------------------------------------

TITLE: Defining a Constructor Element in a Class - YAML
DESCRIPTION: This YAML snippet demonstrates how to specify an unnamed constructor in class `C`. It exemplifies the structured approach to documenting constructors within the API's transformation framework.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_6

LANGUAGE: yaml
CODE:
```
uris: ['lib.dart']
constructor: ''
inClass: 'C'
```

----------------------------------------

TITLE: Temporary Disabling Deprecated Member Use Warnings
DESCRIPTION: This YAML configuration snippet is used to temporarily disable warnings for deprecated member use in the codebase during analysis. This step is necessary before running Dart analysis to ensure all deprecations are captured.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Packages-Gardener-Rotation.md#2025-04-21_snippet_1

LANGUAGE: YAML
CODE:
```
deprecated_member_use: ignore
```

----------------------------------------

TITLE: Filtering All Backend Playground Tests in Flutter
DESCRIPTION: GTest filter to run playground tests across all backends with a specific name pattern in Flutter development.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/opengles_development_setup.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
--gtest_filter="Play/*Foo*/*"
```

----------------------------------------

TITLE: Creating Pipeline in C++
DESCRIPTION: This code creates a pipeline using the previously defined descriptor, waiting for its creation to complete.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_3

LANGUAGE: c++
CODE:
```
auto pipeline = context->GetPipelineLibrary()->GetPipeline(desc).Get();
```

----------------------------------------

TITLE: JSON Structure for hotRestart Request in Flutter DAP
DESCRIPTION: JSON format for the hotRestart custom request in Flutter's Debug Adapter Protocol. The request includes an optional reason parameter that indicates the trigger for the restart (e.g., "manual" or "save").
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/debug_adapters/README.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
	"reason": "manual"
}
```

----------------------------------------

TITLE: Updating Android NDK (Shell)
DESCRIPTION: This series of shell commands outlines the process for updating the Android NDK used by Flutter's infrastructure. It involves downloading a new NDK binary, removing the old directory, extracting the new NDK, renaming the extracted directory, and uploading the updated NDK to Google Cloud Storage.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
"$ cd dev/bots/android_tools"
```

LANGUAGE: shell
CODE:
```
"$ rm -rf ndk"
```

LANGUAGE: shell
CODE:
```
"$ ./android-ndk-r10e-linux-x86_64.bin"
```

LANGUAGE: shell
CODE:
```
"$ mv android-ndk-r10e ndk"
```

LANGUAGE: shell
CODE:
```
"$ cd ../.."
```

LANGUAGE: shell
CODE:
```
"$ dev/bots/upload_android_tools.py -t ndk"
```

----------------------------------------

TITLE: Using Docregion Comments in Swift
DESCRIPTION: This snippet demonstrates the use of docregion comments in Swift files for proper documentation.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/ecosystem/contributing/README.md#2025-04-21_snippet_14

LANGUAGE: Swift
CODE:
```
// #docregion sectionname
// #enddocregion sectionname
```

----------------------------------------

TITLE: Target Configuration for DeviceLab New Test
DESCRIPTION: This snippet defines the configuration properties for a new test target intended to run on the Linux platform in DeviceLab. It includes necessary test properties such as recipe, bring-up flag, task name, and timeout.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/How-to-add-a-new-integration-test-to-Framework-CI.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
" name: Linux_android_emu new_test_to_add\n    recipe: devicelab/devicelab_drone\n    bringup: true\n    properties:\n      tags: >\n        [\"framework\",\"hostonly\",\"linux\"]\n      task_name: android_views\n    timeout: 60\n"
```

----------------------------------------

TITLE: Archiving Build Artifacts in JSON
DESCRIPTION: This JSON snippet defines an archive configuration for handling build artifacts in a CI system, specifying their storage type, base path, and associated realm. It is crucial for uploading artifacts to specified storage services such as GCS or CAS.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "name": "host_debug",
  "base_path": "out/host_debug/zip_archives/",
  "type": "gcs",
  "include_paths": [
     "out/host_debug/zip_archives/linux-x64/artifacts.zip"
  ],
  "realm": "production"
}

```

----------------------------------------

TITLE: YAML Data File for Renaming a Method
DESCRIPTION: This YAML code snippet shows a data file configuration for renaming a method using data-driven fixes. It specifies the version, transform title, date, element details (URI, method name, class name), and the 'rename' change with the new method name. The tools use this data to update references to the old method.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
version: 1
transforms:
  - title: 'Rename to newName'
    date: 2020-11-20
    element:
      uris: ['c.dart']
      method: 'oldName'
      inClass: 'C'
    changes:
      - kind: 'rename'
        newName: 'newName'
```

----------------------------------------

TITLE: Running Gradle Wrapper Download Command
DESCRIPTION: Command to download the Gradle wrapper from the engine's third party directory
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
../../../engine/src/flutter/third_party/gradle/bin/gradle wrapper
```

----------------------------------------

TITLE: Flutter Tool Backend Build Command
DESCRIPTION: Generates custom build command for Flutter tool backend with phony output to ensure execution
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/windows_startup_test/windows/flutter/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}
    ${CPP_WRAPPER_SOURCES_APP}
    ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat"
      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>
  VERBATIM
)
add_custom_target(flutter_assemble DEPENDS
  "${FLUTTER_LIBRARY}"
  ${FLUTTER_LIBRARY_HEADERS}
  ${CPP_WRAPPER_SOURCES_CORE}
  ${CPP_WRAPPER_SOURCES_PLUGIN}
  ${CPP_WRAPPER_SOURCES_APP}
)
```

----------------------------------------

TITLE: Adding Flutter Managed Directory
DESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build process. This enables the inclusion of Flutter-specific build rules and targets.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_8

LANGUAGE: cmake
CODE:
```
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")

# Flutter library and tool build rules.
add_subdirectory(${FLUTTER_MANAGED_DIR})
```

----------------------------------------

TITLE: C++ Struct for GLSL Uniform
DESCRIPTION: Defines a C++ struct corresponding to the `FragInfo` uniform block in the GLSL code. This struct contains a `Scalar` member named `time` to hold the time value.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_10

LANGUAGE: c++
CODE:
```
struct FragInfo {
  Scalar time; // (offset 0, size 4)
}; // struct FragInfo (size 4)
```

----------------------------------------

TITLE: Updating Vertex Buffer with Color Data in C++
DESCRIPTION: This code updates the vertex buffer to include color data for each vertex, creating a triangle with interpolated colors.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_8

LANGUAGE: c++
CODE:
```
vertex_buffer_builder.AddVertices({
    {{-0.5, -0.5}, Color::Red()},
    {{0.0, 0.5}, Color::Green()},
    {{0.5, -0.5}, Color::Blue()},
});
```

----------------------------------------

TITLE: Defining Drone Dimensions in JSON
DESCRIPTION: This JSON code snippet specifies the drone dimensions required for task execution, such as operating system and device type. It is utilized for selecting appropriate bots within a CI pipeline to execute builds.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
"drone_dimensions": [
  "device_type=none",
  "os=Linux"
]

```

----------------------------------------

TITLE: Changing Parameter Type to Non-Nullable in YAML
DESCRIPTION: Shows how to specify making a parameter non-nullable with an optional default value in a YAML configuration
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_13

LANGUAGE: yaml
CODE:
```
kind: 'changeParameterType'
name: 'a'
nullability: 'non_null'
argumentValue:
  expression: "'newValue'"
```

----------------------------------------

TITLE: C++ Struct with Padding for GLSL Uniform
DESCRIPTION: Defines a C++ struct that matches the padded GLSL uniform block. The `Padding` member represents implicit padding added by the compiler for alignment purposes.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_12

LANGUAGE: c++
CODE:
```
struct FragInfo {
  Scalar time;               // (offset 0, size 4)
  Padding<4> _PADDING_bar_;  // (offset 4, size 4)
  Point bar;                 // (offset 8, size 8)
  Vector4 baz;               // (offset 16, size 16)
};                           // struct FragInfo (size 32)
```

----------------------------------------

TITLE: Running Flutter Fix Tests with Golden Comparison
DESCRIPTION: Command to execute the dart fix tests locally in the flutter/packages/flutter/test_fixes directory, comparing results against golden master files.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test_fixes/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
dart fix --compare-to-golden
```

----------------------------------------

TITLE: Archive Configuration in JSON
DESCRIPTION: This JSON snippet provides an archive configuration example for uploading generated artifacts. It specifies the source path relative to the checkout repository, the destination path within the storage bucket, and the realm (production or experimental) to determine the final destination. This defines how the artifacts are archived after global generator execution.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_15

LANGUAGE: json
CODE:
```
"archives": [
    {
        "source": "out/debug/artifacts.zip",
        "destination": "ios/artifacts.zip",
        "realm": "production"
    },
]
```

----------------------------------------

TITLE: Running Flutter Development Script
DESCRIPTION: Using the flutter-dev script for development, which doesn't use cached snapshots but runs slower
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
flutter-dev
```

----------------------------------------

TITLE: Create Flutter Interface Library
DESCRIPTION: Creates an interface library named `flutter` and sets its include directories and link libraries. This allows other parts of the project to link against the Flutter library and use its headers.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_7

LANGUAGE: cmake
CODE:
```
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")
target_link_libraries(flutter INTERFACE
  PkgConfig::GTK
  PkgConfig::GLIB
  PkgConfig::GIO
)
```

----------------------------------------

TITLE: Running Dart Tests with Engine Tool
DESCRIPTION: Command to run Dart unit tests for the engine tool package. Currently has limited support and doesn't require BUILD.gn targets.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_11

LANGUAGE: sh
CODE:
```
et test //flutter/tools/engine_tool/...
```

----------------------------------------

TITLE: Configuring Flutter Library Headers in CMake
DESCRIPTION: Defines a list of Flutter library headers and prepends the ephemeral directory path to each header file.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4

LANGUAGE: CMake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
```

----------------------------------------

TITLE: Updating Fragment Shader with Color Varying in GLSL
DESCRIPTION: This updated fragment shader uses the interpolated color varying from the vertex shader to set the fragment color.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_7

LANGUAGE: glsl
CODE:
```
in vec4 v_color;

void main() {
  frag_color = v_color;
}
```

----------------------------------------

TITLE: Add Dependency on Flutter Assembly
DESCRIPTION: Adds a dependency on the `flutter_assemble` target. This ensures that the Flutter assets are built before the executable is linked.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_15

LANGUAGE: cmake
CODE:
```
add_dependencies(${BINARY_NAME} flutter_assemble)
```

----------------------------------------

TITLE: Finding Latest Compiled Engine Artifacts in Dart
DESCRIPTION: This snippet demonstrates how to use the engine_repo_tools library to locate the most recent compiled engine artifacts in the out/ directory. It specifically looks for the compile_commands.json file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/pkg/engine_repo_tools/README.md#2025-04-22_snippet_0

LANGUAGE: dart
CODE:
```
import 'package:engine_repo_tools/engine_repo_tools.dart';

void main() {
  final engine = Engine.findWithin();
  final latest = engine.latestOutput();
  if (latest != null) {
    print('Latest compile_commands.json: ${latest.compileCommandsJson?.path}');
  }
}
```

----------------------------------------

TITLE: Enabling LTO for an RBE Build
DESCRIPTION: This command demonstrates how to enable Link Time Optimization (LTO) for an RBE build using the --lto flag with the 'et' tool.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
et build -c host_debug --lto
```

----------------------------------------

TITLE: Authenticating with CIPD for RBE Configuration Download
DESCRIPTION: This command authenticates the user with CIPD to allow downloading of RBE configurations from the flutter_internal CIPD bucket.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
cipd auth-login
```

----------------------------------------

TITLE: Updating a single Flutter dependency for cherrypicks
DESCRIPTION: This command updates a single dependency to a specific version, primarily used for cherry-picking changes to a release candidate branch. The `--cherry-pick-package` flag specifies the package name, and `--cherry-pick-version` specifies the desired version.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Updating-dependencies-in-Flutter.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
`flutter update-packages --cherry-pick-package=[pub package name] --cherry-pick-version='[pub package version]'`
```

----------------------------------------

TITLE: Remove Asset Directory Recursively
DESCRIPTION: Before installing assets, remove the existing assets directory recursively to ensure no stale files exist from previous installations.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_26

LANGUAGE: cmake
CODE:
```
set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "
  file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")
  " COMPONENT Runtime)
```

----------------------------------------

TITLE: Displaying CLI Help for Web Locale Keymap Generator
DESCRIPTION: Command to show help options for the keymap generation script with assertions enabled
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/gen_web_locale_keymap/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
dart --enable-asserts bin/gen_web_locale_keymap.dart -h
```

----------------------------------------

TITLE: Renaming Parameter in YAML
DESCRIPTION: Demonstrates how to specify renaming a parameter from an old name to a new name in a YAML configuration
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_12

LANGUAGE: yaml
CODE:
```
kind: 'renameParameter'
oldName: 'a'
newName: 'b'
```

----------------------------------------

TITLE: Configuring LUCI Builders in Starlark
DESCRIPTION: Framework test shard builders are defined in Starlark configuration files, requiring both pre-submit and post-submit builder specifications
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Adding-a-new-Test-Shard.md#2025-04-21_snippet_0

LANGUAGE: Starlark
CODE:
```
# Example configuration in framework_config.star
# Defines LUCI builders for Flutter test shards
```

----------------------------------------

TITLE: Running the Keycode Generator - Shell
DESCRIPTION: This shell command runs the keycode generator based on an existing database, facilitating keycode generation for Flutter's keyboard implementations.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/tools/gen_keycodes/README.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
"/PATH/TO/ROOT/bin/gen_keycodes"
```

----------------------------------------

TITLE: Defining List Prepend Function in CMake for Flutter
DESCRIPTION: Implements a custom function to prepend a prefix to each element of a list, mimicking the functionality of list(TRANSFORM ... PREPEND ...) for CMake versions below 3.12.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: CMake
CODE:
```
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Overriding GN flags for postsubmit builds in JSON
DESCRIPTION: This snippet shows how to override GN flags specifically for postsubmit builds within a JSON configuration. The `postsubmit_overrides` section allows for defining different GN flags to be used in postsubmit environments.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
{
   "name": "host_debug",
   "gn": [
      "--runtime-mode",
      "debug",
      "--prebuilt-dart-sdk",
      "--build-embedder-examples"
   ],
   "ninja": {},
   "postsubmit_overrides": {
     "gn": [
        "--runtime-mode",
        "release"
     ],
   }
}

```

----------------------------------------

TITLE: Defining a test configuration in JSON
DESCRIPTION: This snippet illustrates how to define a test configuration, including the language, script path, parameters, and contexts, within a JSON file. The configuration specifies the test script to execute and its associated settings.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
"tests": [
   {
       "language": "python3",
       "test_timeout_secs": 600,
       "name": "Host Tests for host_debug_impeller_vulkan",
       "parameters": [
           "--variant",
           "host_debug_impeller_vulkan",
           "--type",
           "impeller",
           "--engine-capture-core-dump"
       ],
       "script": "flutter/testing/run_tests.py",
       "contexts": ["android_virtual_device"]
   }
]

```

----------------------------------------

TITLE: Defining a Change - YAML
DESCRIPTION: This YAML snippet illustrates how to define a change with the kind of change specified, in this case, indicating the addition of a parameter to a function or method, including relevant details for implementation.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_7

LANGUAGE: yaml
CODE:
```
kind: 'addParameter'
index: 0
name: 'a'
style: optional_positional
argumentValue: ...
```

----------------------------------------

TITLE: Defining a generator task in JSON
DESCRIPTION: This snippet shows an example of how to define a task within a generator configuration. The task includes properties such as name, parameters, script path, and language, defining the script to be executed and its settings.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_11

LANGUAGE: json
CODE:
```
{
    "name": "Debug-FlutterMacOS.framework",
    "parameters": [
        "--dst",
        "out/debug",
        "--arm64-out-dir",
        "out/ios_debug",
        "--simulator-x64-out-dir",
        "out/ios_debug_sim",
        "--simulator-arm64-out-dir",
        "out/ios_debug_sim_arm64"
    ],
    "script": "flutter/sky/tools/create_ios_framework.py",
    "language": "python3"
}

```

----------------------------------------

TITLE: Creating a Manifest File for Flutter Private Tests
DESCRIPTION: JSON configuration for a private test showing the structure of a manifest file. It defines test files, pubspec file, and dependencies to be copied to the temporary test environment.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test_private/README.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "tests": [
    "my_private_test.dart"
  ],
  "pubspec": "my_private_test.pubspec.yaml",
  "deps": [
    "lib/src/subpackage/my_private_implementation.dart",
  ]
}
```

----------------------------------------

TITLE: Running Hybrid Composition Platform View App and Test
DESCRIPTION: Commands to run the hybrid_composition_platform_view app and its corresponding test using Flutter CLI.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_4

LANGUAGE: Shell
CODE:
```
# Run the app
$ flutter run lib/platform_view/hybrid_composition_platform_view_main.dart

# Run the test
$ flutter drive lib/platform_view/hybrid_composition_platform_view_main.dart
```

----------------------------------------

TITLE: Running External Texture Surface Producer Smiley Face App and Test
DESCRIPTION: Commands to run the surface_producer_smiley_face app and its corresponding test using Flutter CLI.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_2

LANGUAGE: Shell
CODE:
```
# Run the app
$ flutter run lib/external_texture/surface_producer_smiley_face_main.dart

# Run the test
$ flutter drive lib/external_texture/surface_producer_smiley_face_main.dart
```

----------------------------------------

TITLE: Running iOS Tests with Shell Script
DESCRIPTION: This shell command executes iOS tests using a specified configuration for the Flutter Scenario app. It requires building the engine with the correct configuration for either Intel or ARM Macs before running the tests.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/ios_scenario_app/ios/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
# From the root of the engine repository
$ ./testing/ios_scenario_app/run_ios_tests.sh ios_debug_sim_unopt
```

----------------------------------------

TITLE: GLSL Uniform Block with Padding
DESCRIPTION: Defines a more complex uniform block in GLSL, including `float`, `vec2`, and `vec4` types.  This demonstrates how the GLSL compiler handles padding for different data types.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_11

LANGUAGE: glsl
CODE:
```
uniform FragInfo {
  float time;
  vec2 bar;
  vec4 baz;
} frag_info;
```

----------------------------------------

TITLE: Running External Texture Surface Texture Smiley Face App and Test
DESCRIPTION: Commands to run the surface_texture_smiley_face app and its corresponding test using Flutter CLI.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_3

LANGUAGE: Shell
CODE:
```
# Run the app
$ flutter run lib/external_texture/surface_texture_smiley_face_main.dart

# Run the test
$ flutter drive lib/external_texture/surface_texture_smiley_face_main.dart
```

----------------------------------------

TITLE: Flutter Tool Backend Custom Command
DESCRIPTION: Defines a custom build command that runs the Flutter tool backend script to generate necessary build artifacts. Uses a phantom output to ensure the command runs on every build.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
add_custom_command(
  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/_phony_
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}
  VERBATIM
)
```

----------------------------------------

TITLE: Configuring Flutter Wrapper Libraries
DESCRIPTION: Defines and configures the Flutter wrapper libraries for plugins and applications. Sets up source files and build settings for both plugin and application wrappers.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_channel/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
list(APPEND CPP_WRAPPER_SOURCES_CORE
  "core_implementations.cc"
  "standard_codec.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND "${WRAPPER_ROOT}/")
list(APPEND CPP_WRAPPER_SOURCES_PLUGIN
  "plugin_registrar.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND "${WRAPPER_ROOT}/")
list(APPEND CPP_WRAPPER_SOURCES_APP
  "flutter_engine.cc"
  "flutter_view_controller.cc"
)
list(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND "${WRAPPER_ROOT}/")
```

----------------------------------------

TITLE: Flutter Library Headers Configuration
DESCRIPTION: Defines the list of Flutter library headers and configures the Flutter interface library with necessary include directories and dependencies.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
```

----------------------------------------

TITLE: Configuring Flutter Library and Headers in CMake
DESCRIPTION: Sets up the Flutter library and its headers for Windows builds. It defines the library path, includes necessary headers, and creates an interface library target.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/flutter_windows.dll")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/windows/app.so" PARENT_SCOPE)

list(APPEND FLUTTER_LIBRARY_HEADERS
  "flutter_export.h"
  "flutter_windows.h"
  "flutter_messenger.h"
  "flutter_plugin_registrar.h"
  "flutter_texture_registrar.h"
)
list(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND "${EPHEMERAL_DIR}/")
add_library(flutter INTERFACE)
target_include_directories(flutter INTERFACE
  "${EPHEMERAL_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}.lib")
add_dependencies(flutter flutter_assemble)
```

----------------------------------------

TITLE: Adding a New Android Emulator Test Target with YAML
DESCRIPTION: This YAML snippet defines a new Android Emulator test target for the Devicelab framework. It specifies the target's platform, recipe to use, timeout values, and essential properties required for running the test in the infrastructure. The 'dependencies' field allows for specifying the required Android virtual device version.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Testing-Android-Changes-in-the-Devicelab-on-an-Emulator.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
- name: Linux_android android_defines_test
  recipe: devicelab/devicelab_drone
  presubmit: true
  timeout: 60
  dimensions: {
    kvm: “1”,
    cores: “8”,
    Machine_name: “n1-standard-8”
  }
  properties:
    device_type: “none”
    task_name: android_defines_test
    use_emulator: “true”
    dependencies: >-
      [
        {"dependency": "android_virtual_device", "version": "31"}
      ]
    tags: >
      ["devicelab", “linux”]
    timeout: 300
```

----------------------------------------

TITLE: Check current status of the release
DESCRIPTION: This command retrieves the current status of the Flutter SDK release process. It can be run at any time to check on the progress of the release.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
conductor status
```

----------------------------------------

TITLE: Running Data-Driven Fix Tests with Dart CLI
DESCRIPTION: Command to run tests that compare dart files against their golden master files to verify data-driven fixes are working correctly.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_20

LANGUAGE: bash
CODE:
```
dart fix --compare-to-golden
```

----------------------------------------

TITLE: Running Customer Tests with Dart
DESCRIPTION: This snippet demonstrates how to run customer tests by navigating to the appropriate directory and executing the 'ci.dart' script with a specified commit SHA. This is essential for validating Flutter applications against specific versions.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/customer_testing/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
cd dev/customer_testing

```

LANGUAGE: dart
CODE:
```
dart ci.dart [sha]

```

----------------------------------------

TITLE: Safe Buffer Size Calculation Pattern with CheckedNumeric in C++
DESCRIPTION: Example pattern for safely calculating buffer sizes using CheckedNumeric. This pattern avoids direct comparisons with CheckedNumeric by using AssignIfValid to verify the calculation was valid before proceeding.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_9

LANGUAGE: cpp
CODE:
```
// Either input or padding (or both) may be arbitrary sizes.
size_t buff_size;
if (!CheckAdd(input, padding, kHeaderLength).AssignIfValid(&buff_size) ||
     buff_size >= kMaxBuffer) {
  // Handle an error...
} else {
  // Do stuff on success...
}
```

----------------------------------------

TITLE: Running Test Suites with felt Command
DESCRIPTION: The 'felt test' command compiles and runs web engine unit test suites with several configurable flags for customization. This command allows specifying test suites, browsers, compilers, and more to filter the tests that are executed.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
felt test
```

LANGUAGE: bash
CODE:
```
felt test test/engine/util_test.dart
```

LANGUAGE: bash
CODE:
```
felt test test/engine/util_test.dart test/engine/alarm_clock_test.dart
```

LANGUAGE: bash
CODE:
```
felt test --compiler dart2wasm
```

LANGUAGE: bash
CODE:
```
felt test --browser chrome --browser safari
```

----------------------------------------

TITLE: Running Android Engine Tests on CI (LUCI)
DESCRIPTION: Commands to run Android engine tests for Vulkan and OpenGL ES on the continuous integration system.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/android_engine_test/README.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
SHARD=android_engine_vulkan_tests bin/cache/dart-sdk/bin/dart dev/bots/test.dart
SHARD=android_engine_opengles_tests bin/cache/dart-sdk/bin/dart dev/bots/test.dart
```

----------------------------------------

TITLE: Initial Conditional Sampling GLSL Implementation
DESCRIPTION: Example of platform-specific conditional texture sampling using preprocessor directives and runtime checks
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/specialization_constants.md#2025-04-21_snippet_0

LANGUAGE: glsl
CODE:
```
// Decal sample if necessary.
vec4 Sample(sampler2D sampler, vec2 coord) {
#ifdef GLES
  if (supports_decal) {
    return texture(sampler, coord);
  }
  return IPSampleDecal(sampler, coord)
#else
  return texture(sampler, coord);
#endif
}
```

----------------------------------------

TITLE: Finding Changed Files using `git_repo_tools` in Flutter Engine
DESCRIPTION: This code snippet demonstrates how to use the `git_repo_tools` library to find and print the paths of all changed files within the current branch of a Flutter Engine Git repository. It utilizes the `Engine` class to locate the root directory of the engine and then uses the `GitRepo` class to retrieve the list of changed files. The script requires the `engine_repo_tools`, `git_repo_tools`, and `path` packages.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/pkg/git_repo_tools/README.md#2025-04-21_snippet_0

LANGUAGE: Dart
CODE:
```
import 'dart:io' as io show File, Platform;

import 'package:engine_repo_tools/engine_repo_tools.dart';
import 'package:git_repo_tools/git_repo_tools.dart';
import 'package:path/path.dart' as path;

void main() async {
  // Finds the root of the engine repository from the current script.
  final Engine engine = Engine.findWithin(path.dirname(path.fromUri(io.Platform.script)));
  final GitRepo gitRepo = GitRepo(engine.flutterDir);

  for (final io.File file in gitRepo.changedFiles) {
    print('Changed file: ${file.path}');
  }
}
```

----------------------------------------

TITLE: Preparing Build Files and Building Binaries
DESCRIPTION: This snippet executes build commands to configure and generate the necessary binaries for testing the Dart JIT runner on Fuchsia, using the GN and Ninja build systems.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_jit_runner/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ENGINE_DIR/flutter/tools/gn --fuchsia --no-lto
ninja -C $ENGINE_DIR/out/fuchsia_debug_x64 flutter/shell/platform/fuchsia fuchsia_tests
```

----------------------------------------

TITLE: Defining physical and virtual devices for FirebaseLab
DESCRIPTION: This JSON snippet shows how to define physical and virtual devices for FirebaseLab tests using the `physical_devices` and `virtual_device` properties. These properties specify the devices to use for running the tests, including their model and version.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-FirebaseLab-Tests.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
```json
physical_devices: >-
        [
           "--device", "model=oriole,version=33",
           "--device", "model=griffin,version=24"
        ],
virtual_device: >-
        [
          "--device", "model=Nexus5,version=21",
          "--device", "model=Nexus6P,version=27"
        ]
```
```

----------------------------------------

TITLE: Adding New Labels in GitHub Actions
DESCRIPTION: This YAML configuration snippet illustrates how to set up new labels for a Flutter repository using GitHub Actions' labeler. The configuration requires specifying file path patterns for automated label application. Key paths are defined using glob patterns to target platform-specific or feature-specific directories. Dependencies include a working GitHub Actions setup with labeler.yml configuration. The expected outcome is automatic labeling of pull requests matching specified patterns, improving workflow management.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Labeling-PRs.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
macos:
  # **/* recursively searches all subdirectories and files
  - shell/platform/darwin/macos/**/*

# For complex label names, it may need to be wrapped in quotes
'a: accessibility':
  - **/accessibility/*
```

----------------------------------------

TITLE: Configuring EGL for OpenGL ES 2.0 in C++
DESCRIPTION: Sets up an EGL configuration descriptor for OpenGL ES 2.0 and chooses a compatible config.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_1

LANGUAGE: c++
CODE:
```
egl::ConfigDescriptor egl_desc;
egl_desc.api = egl::API::kOpenGLES2;
egl_desc.samples = egl::Samples::kOne;
egl_desc.color_format = egl::ColorFormat::kRGBA8888;
egl_desc.stencil_bits = egl::StencilBits::kZero;
egl_desc.depth_bits = egl::DepthBits::kZero;
egl_desc.surface_type = egl::SurfaceType::kWindow;

auto config = display.ChooseConfig(egl_desc);
```

----------------------------------------

TITLE: Setting Minimum CMake Version and Project Configuration
DESCRIPTION: Defines the minimum required CMake version, sets the project name, and configures basic build parameters for manual tests
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(manual_tests LANGUAGES CXX)

set(BINARY_NAME "manual_tests")

cmake_policy(VERSION 3.14...3.25)
```

----------------------------------------

TITLE: Configuring Cross-Building Root Filesystem in CMake
DESCRIPTION: Sets up the root filesystem for cross-building if a Flutter target platform sysroot is specified. This configures the system root and find root paths for the build process.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/linux/CMakeLists.txt#2025-04-22_snippet_1

LANGUAGE: CMake
CODE:
```
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()
```

----------------------------------------

TITLE: Code Template in YAML
DESCRIPTION: Illustrates a code template with an expression and variables for generating code during transformations
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_15

LANGUAGE: yaml
CODE:
```
expression: '{% type %}({% arg %})'
variables:
  arg: ...
  type: ...
```

----------------------------------------

TITLE: Generating Fallback Fonts for Testing
DESCRIPTION: The command 'felt roll-fallback-fonts' fetches fonts from the Google Fonts API and generates fallback font data for use in engine unit tests. It requires a valid Google Fonts API key and operates only on Linux.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cipd auth-login
felt roll-fallback-fonts --key=<Google Fonts API key>
```

----------------------------------------

TITLE: Flutter Device List Request - JSON-RPC
DESCRIPTION: Example JSON-RPC request to get available devices using the device.getDevices method
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
[{"method":"device.getDevices","id":2}]
```

----------------------------------------

TITLE: Setting Default Build Type
DESCRIPTION: Sets the default build type to 'Debug' if no build type is specified. Allows the user to override via the CMAKE_BUILD_TYPE cache variable.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_6

LANGUAGE: cmake
CODE:
```
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE
    STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Profile" "Release")
endif()
```

----------------------------------------

TITLE: Defining a Type Parameter Change - YAML
DESCRIPTION: This YAML snippet shows how to describe an addition of a type parameter to an element, outlining keys like kind, index, and argument value while ensuring clarity in the type structure.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_8

LANGUAGE: yaml
CODE:
```
kind: 'addTypeParameter'
index: 0
name: 'T'
extends: ...
argumentValue: ...
```

----------------------------------------

TITLE: Running pre-push Hooks with Dart and Python
DESCRIPTION: This snippet details the process of executing various hooks when pushing commits to a remote branch using Dart commands and accompanying Python wrapper scripts. Specifically, it outlines the execution of scripts such as `ci/clang_tidy.sh`, `ci/pylint.sh`, and `ci/format.sh`, while noting the exclusion of heavier scripts for efficiency. The pre-push hook can be modified to include additional checks by altering the `run()` method of the `PrePushCommand` class.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/githooks/README.md#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
# This is a placeholder for Python wrapper script code that executes Dart commands

```

LANGUAGE: Dart
CODE:
```
// Dart code to run pre-push checks

```

----------------------------------------

TITLE: Suppressing KXml Dependency Warnings in ProGuard
DESCRIPTION: Configuration to prevent ProGuard from warning about missing KXml parser and serializer classes that are not properly marked by dependencies. This rule is needed due to an ongoing issue with Flutter's Android build process.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/android/lib-proguard-rules.txt#2025-04-21_snippet_0

LANGUAGE: proguard
CODE:
```
-dontwarn org.kxml2.io.KXmlParser**,org.kxml2.io.KXmlSerializer**
```

----------------------------------------

TITLE: Publishing Touch Input View Package
DESCRIPTION: Command to publish the touch-input-view package to the Fuchsia package repository.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_4

LANGUAGE: shell
CODE:
```
$FUCHSIA_DIR/.jiri_root/bin/fx pm publish -a -repo $FUCHSIA_DIR/$(cat $FUCHSIA_DIR/.fx-build-dir)/amber-files -f $ENGINE_DIR/out/
fuchsia_debug_x64/gen/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/touch-input-view/touch-input-view/touch-input-view.far
```

----------------------------------------

TITLE: Launching Fuchsia Emulator
DESCRIPTION: This shell command launches the Fuchsia emulator in a graphical environment. It uses `ffx emu start` to start the emulator.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
ffx emu start
```

----------------------------------------

TITLE: Dartdoc Template Identifier (Good)
DESCRIPTION: Illustrates a good example of a Dartdoc template identifier.  It follows the recommended format `flutter.library.Class.member[.optionalDescription]`, making it unique and easily identifiable.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
// GOOD:
/// {@template flutter.rendering.Layer.findAnnotations.aboutAnnotations}
/// Annotations are great!
/// {@endtemplate
```

----------------------------------------

TITLE: Building and Running Address Sanitizer Tests
DESCRIPTION: This set of commands shows how to build Flutter Engine with Address Sanitizer enabled, which also implicitly enables Leak Sanitizer, and run the embedder unit tests.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
$ ./flutter/tools/gn --runtime-mode debug --asan --unoptimized --no-goma
$ autoninja -C out/host_debug_unopt
$ source ./flutter/testing/sanitizer_suppressions.sh
$ ./out/host_debug_unopt/embedder_unittests
```

----------------------------------------

TITLE: Adding Touch Input View to Session
DESCRIPTION: Command to add the touch-input-view component to the Fuchsia session.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_6

LANGUAGE: shell
CODE:
```
ffx session add fuchsia-pkg://fuchsia.com/touch-input-view#meta/touch-input-view.cm
```

----------------------------------------

TITLE: Setting Up Emulator and Starting PM Serve
DESCRIPTION: This code snippet initializes the QEMU emulator and starts the package manager (PM) serve process, which are essential first steps in the integration test setup for the Dart JIT runner.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_jit_runner/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
fx set terminal.qemu-x64
ffx emu start --headless

fx serve
```

----------------------------------------

TITLE: Defining Flutter Build Flavors Integration Test
DESCRIPTION: This markdown snippet defines the purpose of the file, which is to set up integration tests for build flavors in Flutter. It mentions both Android product flavors and Xcode schemes as the targets for these tests.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flavors/README.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# flavors

Integration test of build flavors (Android product flavors, Xcode schemes).
```

----------------------------------------

TITLE: Starting Fuchsia Package Server
DESCRIPTION: Commands to initialize and start the Fuchsia package server.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_3

LANGUAGE: shell
CODE:
```
cd "$FUCHSIA_DIR"
fx serve
```

----------------------------------------

TITLE: Creating Shader Library Mappings in C++
DESCRIPTION: Sets up shader library mappings for Impeller context creation.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_6

LANGUAGE: c++
CODE:
```
#include "impeller/fixtures/gles/fixtures_shaders_gles.h"

static std::vector<std::shared_ptr<fml::Mapping>>
ShaderLibraryMappingsForApplication() {
  return {
      std::make_shared<fml::NonOwnedMapping>(
          impeller_fixtures_shaders_gles_data,
          impeller_fixtures_shaders_gles_length),
  };
}

// In the setup routine.

auto mappings = ShaderLibraryMappingsForApplication();
```

----------------------------------------

TITLE: Flushing UI Thread Tasks with _flutter.flushUIThreadTasks Protocol
DESCRIPTION: Waits for all pending tasks on the UI thread to complete before returning success. This extension takes no arguments and simply ensures all UI thread tasks are processed.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Engine-specific-Service-Protocol-extensions.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{"type": "Success"}
```

----------------------------------------

TITLE: Displaying Successful Flutter Test Results in Plain Text
DESCRIPTION: This snippet shows the output of a successful Flutter test run. It indicates that all tests have passed, with a timestamp prefix.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/integration_test/trivial_widget_expectation.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
[0-9]+:[0-9]+ [+]1: All tests passed!
```

----------------------------------------

TITLE: Downloading CAS Artifacts with Bash
DESCRIPTION: This bash script demonstrates how to download sub-build artifacts using the CAS utility. It iterates through a series of `cas download` commands, specifying the CAS instance, digest, and destination directory within the gclient checkout. These commands are used for triaging global generators locally.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_16

LANGUAGE: bash
CODE:
```
pushd <gclient checkout>/src/out
cas download -cas-instance projects/chromium-swarm/instances/default_instance -digest 39f15436deaed30f861bdd507ba6297f2f26a2ff13d45acfd8819dbcda346faa/88 -dir ./
cas download -cas-instance projects/chromium-swarm/instances/default_instance -digest bdec3208e70ba5e50ee7bbedaaff4588d3f58167ad3d8b1c46d29c6ac3a18c00/94 -dir ./
cas download -cas-instance projects/chromium-swarm/instances/default_instance -digest d19edb65072aa9d872872b55d3c270db40c6a626c8a851ffcb457a28974f3621/84 -dir ./
cas download -cas-instance projects/chromium-swarm/instances/default_instance -digest ac6f08662d18502cfcd844771bae736f4354cb3fe209552fcf2181771e139e0b/86 -dir ./
cas download -cas-instance projects/chromium-swarm/instances/default_instance -digest 1d4d1a3b93847451fe69c1939d7582c0d728b198a40abd06f43d845117ef3214/86 -dir ./
```

----------------------------------------

TITLE: Conductor Release Tool in Dart
DESCRIPTION: The Conductor tool, written in Dart, automates and drives Flutter releases. It manages git operations like pushes, cherry-picks, and tagging, and handles Flutter-specific complexities such as rolling and release infrastructure.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Release-process.md#_snippet_0

LANGUAGE: Dart
CODE:
```
N/A
```

----------------------------------------

TITLE: Displaying Successful Flutter Test Results
DESCRIPTION: This snippet shows the output format for successful Flutter tests. It includes a timestamp and a message indicating that all tests have passed.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/flutter_test/flutter_gold_expectation.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
[0-9]+:[0-9]+ [+]2: All tests passed! *
```

----------------------------------------

TITLE: Running Unit Tests Script
DESCRIPTION: This snippet runs the unit tests using the provided shell script located in the Engine directory. It includes options to control the test execution behavior.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/unit_tests.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
$ENGINE_DIR/flutter/tools/fuchsia/devshell/run_unit_tests.sh
```

----------------------------------------

TITLE: Rolling Browser Versions for Flutter
DESCRIPTION: Instructions for updating browser versions in the Flutter project, specifically for Chrome and Firefox. It involves editing configuration files and running the 'dart dev/package_roller.dart' script to upload the appropriate versions of browsers and drivers.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
      dependencies: >-
        [
          {"dependency": "chrome_and_driver", "version": "version:107.0"},
          {"dependency": "firefox", "version": "version:83.0"},
          {"dependency": "goldctl", "version": "git_revision:720a542f6fe4f92922c3b8f0fdcc4d2ac6bb83cd"}
        ]
```

LANGUAGE: bash
CODE:
```
dart dev/package_roller.dart --dry-run --verbose
```

----------------------------------------

TITLE: Refreshing VSCode Workspace Configuration - Shell Script
DESCRIPTION: This shell script (`refresh.sh`) is utilized to refresh the VSCode workspace configuration by processing the YAML file and updating the engine's configuration accordingly. It requires that specific tools such as json5 and yq are installed on the user's system.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/vscode_workspace/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
./refresh.sh
```

----------------------------------------

TITLE: Configuring gclient for Emscripten SDK
DESCRIPTION: Configuration for gclient to download and activate the Emscripten SDK for CanvasKit building
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_6

LANGUAGE: yaml
CODE:
```
solutions = [
  {
    "managed": False,
    "name": "src/flutter",
    "url": "git@github.com:<your_username_here>/engine.git",
    "custom_deps": {},
    "deps_file": "DEPS",
    "safesync_url": "",
    "custom_vars": {
      "download_emsdk": True,
    },
  },
]
```

----------------------------------------

TITLE: List Prepend Function Definition in CMake
DESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. This provides functionality similar to list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Android Platform Configuration
DESCRIPTION: Defines the Android platform version 35 for development and compilation
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/android_sdk/packages.txt#2025-04-21_snippet_0

LANGUAGE: android-sdk
CODE:
```
platforms;android-35:platforms
```

----------------------------------------

TITLE: Android Studio Gradle SDK Configuration
DESCRIPTION: These are the Gradle SDK configurations that need to be configured in Android Studio to build the Android embedder.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_11

LANGUAGE: Text
CODE:
```
/Applications/Android Studio.app/Contents/jbr/Contents/Home
```

----------------------------------------

TITLE: Initializing Project Configuration in CMake
DESCRIPTION: Sets up basic project configuration including minimum CMake version and project name with C++ language support.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/layers/windows/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(layers LANGUAGES CXX)
set(BINARY_NAME "layers")
```

----------------------------------------

TITLE: Setting Flutter Library Path
DESCRIPTION: Sets the path to the Flutter library (`libflutter_linux_gtk.so`). The path is stored in the `FLUTTER_LIBRARY` variable.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5

LANGUAGE: cmake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/libflutter_linux_gtk.so")
```

----------------------------------------

TITLE: Configuring VSCode Snippets for Header Files in JSON
DESCRIPTION: This JSON configuration creates snippets for header files in VSCode, allowing developers to use the 'hdr' keyboard macro to generate boilerplate header code. It also includes additional settings for improved development workflow.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
  "snippets": [
    {
      "name": "Header File",
      "prefix": "hdr",
      "body": [
        "// Copyright ${CURRENT_YEAR} The Flutter Authors. All rights reserved.",
        "// Use of this source code is governed by a BSD-style license that can be",
        "// found in the LICENSE file.",
        "",
        "#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_",
        "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_",
        "",
        "$0",
        "",
        "#endif  // ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_"
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Setting CMake Minimum Version for Flutter Build
DESCRIPTION: Establishes the minimum required CMake version for Flutter build configuration, ensuring compatibility with build tools
SOURCE: https://github.com/flutter/flutter/blob/master/examples/api/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.14)
```

----------------------------------------

TITLE: Enabling Long Path Support on Windows
DESCRIPTION: PowerShell command to enable long path support on Windows, which is necessary for building the Flutter engine.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#2025-04-21_snippet_2

LANGUAGE: powershell
CODE:
```
Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -Force
```

----------------------------------------

TITLE: Initializing CMake Project for Flutter Windows Runner
DESCRIPTION: Sets up the CMake project for a Flutter Windows runner application. It defines the minimum CMake version and project language.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/platform_view/windows/runner/CMakeLists.txt#2025-04-22_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.14)
project(runner LANGUAGES CXX)
```

----------------------------------------

TITLE: Creating OpenJDK CIPD Configuration - Shell
DESCRIPTION: This snippet illustrates how to create a configuration file for a new OpenJDK package in CIPD. It includes placeholder fields for package specifics like architecture and Java version. The resulting YAML file is used to define the package for upload.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Uploading-New-Java-Version-to-CIPD.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
package: flutter/java/openjdk/<platform-architecture>
    description: OpenJDK <java_version> for <platform>
    install_mode: copy
    data:
    # This directory contains Java <platform-architecture> to be used in automated tests.
    - dir: .
```

----------------------------------------

TITLE: Running Integration Test
DESCRIPTION: This snippet runs the Dart AOT runner integration test using the `ffx test run` command. It specifies the package URL of the test component.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_aot_runner/README.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
ffx test run "fuchsia-pkg://fuchsia.com/dart-aot-runner-integration-test#meta/dart-aot-runner-integration-test.cm"
```

----------------------------------------

TITLE: Executing Draw Call in C++
DESCRIPTION: This code sets the pipeline and vertex buffer, then executes a draw call to render the triangle.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/babys_first_triangle.md#2025-04-21_snippet_5

LANGUAGE: c++
CODE:
```
pass.SetPipeline(pipeline);
pass.SetVertexBuffer(vertex_buffer);
pass.Draw();
```

----------------------------------------

TITLE: Running C++ Unit Tests with Android Variant
DESCRIPTION: These commands execute C++ and Java unit tests for the Android embedder with a specific Android variant. This allows testing against different build configurations like `android_debug_unopt_arm64`. The script uses the `--type android` and `--android-variant` options.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/android/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
./testing/run_tests.py --type android --android-variant android_debug_unopt_arm64
```

LANGUAGE: Shell
CODE:
```
./testing/run_tests.py --type java --android-variant android_debug_unopt_arm64
```

----------------------------------------

TITLE: Project Declaration
DESCRIPTION: Declares the project name and specifies the programming languages used.  Here the project name is `runner` and it uses `CXX` for C++.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/CMakeLists.txt#2025-04-21_snippet_1

LANGUAGE: cmake
CODE:
```
project(runner LANGUAGES CXX)
```

----------------------------------------

TITLE: Appending Flutter Library Headers
DESCRIPTION: Appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are required for compiling against the Flutter library.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_7

LANGUAGE: cmake
CODE:
```
list(APPEND FLUTTER_LIBRARY_HEADERS
  "fl_basic_message_channel.h"
  "fl_binary_codec.h"
  "fl_binary_messenger.h"
  "fl_dart_project.h"
  "fl_engine.h"
  "fl_json_message_codec.h"
  "fl_json_method_codec.h"
  "fl_message_codec.h"
  "fl_method_call.h"
  "fl_method_channel.h"
  "fl_method_codec.h"
  "fl_method_response.h"
  "fl_plugin_registrar.h"
  "fl_plugin_registry.h"
  "fl_standard_message_codec.h"
  "fl_standard_method_codec.h"
  "fl_string_codec.h"
  "fl_value.h"
  "fl_view.h"
  "flutter_linux.h"
)
```

----------------------------------------

TITLE: Building CanvasKit Locally
DESCRIPTION: Command to build CanvasKit using felt tool after Emscripten SDK configuration
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/README.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
felt build --build-canvaskit
```

LANGUAGE: bash
CODE:
```
felt test
```

----------------------------------------

TITLE: Defining Unicode Code Points for Hangul Syllables
DESCRIPTION: A structured list of Unicode code point ranges for Hangul syllables with their corresponding format properties (H2 or H3) and descriptive comments. Each line follows the pattern of hexadecimal code point, property value, and syllable description.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_10

LANGUAGE: unicode-data
CODE:
```
C26D..C287;H3     # Lo    [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH
C288;H2           # Lo         HANGUL SYLLABLE SYU
C289..C2A3;H3     # Lo    [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH
C2A4;H2           # Lo         HANGUL SYLLABLE SEU
C2A5..C2BF;H3     # Lo    [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH
C2C0;H2           # Lo         HANGUL SYLLABLE SYI
C2C1..C2DB;H3     # Lo    [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH
C2DC;H2           # Lo         HANGUL SYLLABLE SI
C2DD..C2F7;H3     # Lo    [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH
C2F8;H2           # Lo         HANGUL SYLLABLE SSA
C2F9..C313;H3     # Lo    [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH
C314;H2           # Lo         HANGUL SYLLABLE SSAE
C315..C32F;H3     # Lo    [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH
C330;H2           # Lo         HANGUL SYLLABLE SSYA
C331..C34B;H3     # Lo    [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH
C34C;H2           # Lo         HANGUL SYLLABLE SSYAE
C34D..C367;H3     # Lo    [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH
C368;H2           # Lo         HANGUL SYLLABLE SSEO
C369..C383;H3     # Lo    [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH
C384;H2           # Lo         HANGUL SYLLABLE SSE
C385..C39F;H3     # Lo    [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH
C3A0;H2           # Lo         HANGUL SYLLABLE SSYEO
C3A1..C3BB;H3     # Lo    [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH
C3BC;H2           # Lo         HANGUL SYLLABLE SSYE
C3BD..C3D7;H3     # Lo    [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH
C3D8;H2           # Lo         HANGUL SYLLABLE SSO
C3D9..C3F3;H3     # Lo    [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH
C3F4;H2           # Lo         HANGUL SYLLABLE SSWA
C3F5..C40F;H3     # Lo    [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH
C410;H2           # Lo         HANGUL SYLLABLE SSWAE
C411..C42B;H3     # Lo    [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH
C42C;H2           # Lo         HANGUL SYLLABLE SSOE
C42D..C447;H3     # Lo    [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH
C448;H2           # Lo         HANGUL SYLLABLE SSYO
C449..C463;H3     # Lo    [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH
C464;H2           # Lo         HANGUL SYLLABLE SSU
C465..C47F;H3     # Lo    [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH
C480;H2           # Lo         HANGUL SYLLABLE SSWEO
C481..C49B;H3     # Lo    [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH
C49C;H2           # Lo         HANGUL SYLLABLE SSWE
C49D..C4B7;H3     # Lo    [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH
C4B8;H2           # Lo         HANGUL SYLLABLE SSWI
C4B9..C4D3;H3     # Lo    [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH
C4D4;H2           # Lo         HANGUL SYLLABLE SSYU
C4D5..C4EF;H3     # Lo    [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH
C4F0;H2           # Lo         HANGUL SYLLABLE SSEU
C4F1..C50B;H3     # Lo    [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH
C50C;H2           # Lo         HANGUL SYLLABLE SSYI
C50D..C527;H3     # Lo    [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH
C528;H2           # Lo         HANGUL SYLLABLE SSI
C529..C543;H3     # Lo    [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH
C544;H2           # Lo         HANGUL SYLLABLE A
C545..C55F;H3     # Lo    [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH
C560;H2           # Lo         HANGUL SYLLABLE AE
C561..C57B;H3     # Lo    [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH
C57C;H2           # Lo         HANGUL SYLLABLE YA
C57D..C597;H3     # Lo    [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH
C598;H2           # Lo         HANGUL SYLLABLE YAE
C599..C5B3;H3     # Lo    [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH
C5B4;H2           # Lo         HANGUL SYLLABLE EO
C5B5..C5CF;H3     # Lo    [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH
C5D0;H2           # Lo         HANGUL SYLLABLE E
C5D1..C5EB;H3     # Lo    [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH
C5EC;H2           # Lo         HANGUL SYLLABLE YEO
C5ED..C607;H3     # Lo    [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH
C608;H2           # Lo         HANGUL SYLLABLE YE
C609..C623;H3     # Lo    [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH
C624;H2           # Lo         HANGUL SYLLABLE O
C625..C63F;H3     # Lo    [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH
C640;H2           # Lo         HANGUL SYLLABLE WA
C641..C65B;H3     # Lo    [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH
C65C;H2           # Lo         HANGUL SYLLABLE WAE
C65D..C677;H3     # Lo    [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH
C678;H2           # Lo         HANGUL SYLLABLE OE
C679..C693;H3     # Lo    [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH
C694;H2           # Lo         HANGUL SYLLABLE YO
C695..C6AF;H3     # Lo    [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH
C6B0;H2           # Lo         HANGUL SYLLABLE U
C6B1..C6CB;H3     # Lo    [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH
C6CC;H2           # Lo         HANGUL SYLLABLE WEO
C6CD..C6E7;H3     # Lo    [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH
C6E8;H2           # Lo         HANGUL SYLLABLE WE
C6E9..C703;H3     # Lo    [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH
C704;H2           # Lo         HANGUL SYLLABLE WI
C705..C71F;H3     # Lo    [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH
C720;H2           # Lo         HANGUL SYLLABLE YU
C721..C73B;H3     # Lo    [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH
C73C;H2           # Lo         HANGUL SYLLABLE EU
C73D..C757;H3     # Lo    [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH
C758;H2           # Lo         HANGUL SYLLABLE YI
C759..C773;H3     # Lo    [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH
C774;H2           # Lo         HANGUL SYLLABLE I
C775..C78F;H3     # Lo    [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH
C790;H2           # Lo         HANGUL SYLLABLE JA
C791..C7AB;H3     # Lo    [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH
C7AC;H2           # Lo         HANGUL SYLLABLE JAE
C7AD..C7C7;H3     # Lo    [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH
C7C8;H2           # Lo         HANGUL SYLLABLE JYA
C7C9..C7E3;H3     # Lo    [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH
C7E4;H2           # Lo         HANGUL SYLLABLE JYAE
C7E5..C7FF;H3     # Lo    [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH
C800;H2           # Lo         HANGUL SYLLABLE JEO
C801..C81B;H3     # Lo    [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH
C81C;H2           # Lo         HANGUL SYLLABLE JE
C81D..C837;H3     # Lo    [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH
C838;H2           # Lo         HANGUL SYLLABLE JYEO
C839..C853;H3     # Lo    [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH
C854;H2           # Lo         HANGUL SYLLABLE JYE
C855..C86F;H3     # Lo    [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH
C870;H2           # Lo         HANGUL SYLLABLE JO
C871..C88B;H3     # Lo    [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH
C88C;H2           # Lo         HANGUL SYLLABLE JWA
C88D..C8A7;H3     # Lo    [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH
C8A8;H2           # Lo         HANGUL SYLLABLE JWAE
C8A9..C8C3;H3     # Lo    [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH
C8C4;H2           # Lo         HANGUL SYLLABLE JOE
C8C5..C8DF;H3     # Lo    [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH
C8E0;H2           # Lo         HANGUL SYLLABLE JYO
C8E1..C8FB;H3     # Lo    [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH
C8FC;H2           # Lo         HANGUL SYLLABLE JU
C8FD..C917;H3     # Lo    [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH
C918;H2           # Lo         HANGUL SYLLABLE JWEO
C919..C933;H3     # Lo    [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH
C934;H2           # Lo         HANGUL SYLLABLE JWE
C935..C94F;H3     # Lo    [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH
C950;H2           # Lo         HANGUL SYLLABLE JWI
C951..C96B;H3     # Lo    [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH
C96C;H2           # Lo         HANGUL SYLLABLE JYU
C96D..C987;H3     # Lo    [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH
C988;H2           # Lo         HANGUL SYLLABLE JEU
C989..C9A3;H3     # Lo    [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH
C9A4;H2           # Lo         HANGUL SYLLABLE JYI
C9A5..C9BF;H3     # Lo    [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH
C9C0;H2           # Lo         HANGUL SYLLABLE JI
C9C1..C9DB;H3     # Lo    [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH
C9DC;H2           # Lo         HANGUL SYLLABLE JJA
C9DD..C9F7;H3     # Lo    [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH
C9F8;H2           # Lo         HANGUL SYLLABLE JJAE
C9F9..CA13;H3     # Lo    [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH
CA14;H2           # Lo         HANGUL SYLLABLE JJYA
CA15..CA2F;H3     # Lo    [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH
CA30;H2           # Lo         HANGUL SYLLABLE JJYAE
CA31..CA4B;H3     # Lo    [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH
CA4C;H2           # Lo         HANGUL SYLLABLE JJEO
CA4D..CA67;H3     # Lo    [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH
CA68;H2           # Lo         HANGUL SYLLABLE JJE
CA69..CA83;H3     # Lo    [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH
CA84;H2           # Lo         HANGUL SYLLABLE JJYEO
CA85..CA9F;H3     # Lo    [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH
CAA0;H2           # Lo         HANGUL SYLLABLE JJYE
CAA1..CABB;H3     # Lo    [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH
CABC;H2           # Lo         HANGUL SYLLABLE JJO
CABD..CAD7;H3     # Lo    [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH
CAD8;H2           # Lo         HANGUL SYLLABLE JJWA
CAD9..CAF3;H3     # Lo    [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH
CAF4;H2           # Lo         HANGUL SYLLABLE JJWAE
CAF5..CB0F;H3     # Lo    [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH
CB10;H2           # Lo         HANGUL SYLLABLE JJOE
CB11..CB2B;H3     # Lo    [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH
```

----------------------------------------

TITLE: Using CheckedNumeric for Safe Integer Operations in C++
DESCRIPTION: Example of using CheckedNumeric to handle overflow and underflow conditions safely. The snippet demonstrates how CheckedNumeric detects underflow errors and can trigger breakpoints or configured handlers.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/accessibility/base/numerics/README.md#2025-04-21_snippet_8

LANGUAGE: cpp
CODE:
```
#include "base/numerics/checked_math.h"
...
CheckedNumeric<uint32_t> variable = 0;
variable++;
variable--;
if (variable.ValueOrDie() == 0)
  // Fine, |variable| still within valid range.

variable--;
variable++;
if (variable.ValueOrDie() == 0)  // Breakpoint or configured CheckHandler
  // Does not happen as variable underflowed.
```

----------------------------------------

TITLE: Throwing FlutterError in Flutter Test
DESCRIPTION: This snippet demonstrates a test case where a FlutterError is thrown. The assertion message is 'Who lives, who dies, who tells your story?'. The test is labeled as 'Exception handling in test harness - FlutterError'.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/integration_test/exception_handling_expectation.txt#2025-04-21_snippet_1

LANGUAGE: Dart
CODE:
```
main.<anonymous closure> (.+[/\\]dev[/\\]automated_tests[/\\]integration_test[/\\]exception_handling_test.dart:13:5)
```

----------------------------------------

TITLE: Running prepare_package.dart Script
DESCRIPTION: Invoking the prepare_package.dart script to create an installation bundle efficiently.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Flutter-Installation-Bundles.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
./bin/cache/dart-sdk/bin/dart ./dev/bots/prepare_package.dart --temp_dir $TMPDIR --revision $REVISION --branch master --output $PWD
```

----------------------------------------

TITLE: Testing Built Flutter Engine with Local Flutter Gallery App
DESCRIPTION: Demonstrates how to test the newly built Flutter engine against the Flutter Gallery app in different execution modes. The test checks if the changes work as expected in release, debug, and unoptimized versions.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Rolling-Dart.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cd $FLUTTER_HOME/examples/flutter_gallery\nflutter run --release --local-engine=android_release --local-engine-host=host_release\nflutter run --local-engine=android_debug_unopt --local-engine-host=host_debug_unopt\nflutter test --local-engine=host_debug --local-engine-host=host_debug
```

----------------------------------------

TITLE: Setting Binary Name and Application ID
DESCRIPTION: Defines variables to store the binary name and application ID. These variables are used later in the build process to name the executable and set the application identifier, respectively.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/CMakeLists.txt#2025-04-21_snippet_2

LANGUAGE: cmake
CODE:
```
set(BINARY_NAME "manual_tests")
set(APPLICATION_ID "dev.flutter.manual_tests")
```

----------------------------------------

TITLE: Defining Flutter Library and Related Files in CMake
DESCRIPTION: Sets up variables for the Flutter library, ICU data file, build directory, and AOT library. These are published to the parent scope for use in the install step.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/a11y_assessments/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: CMake
CODE:
```
set(FLUTTER_LIBRARY "${EPHEMERAL_DIR}/libflutter_linux_gtk.so")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE "${EPHEMERAL_DIR}/icudtl.dat" PARENT_SCOPE)
set(PROJECT_BUILD_DIR "${PROJECT_DIR}/build/" PARENT_SCOPE)
set(AOT_LIBRARY "${PROJECT_DIR}/build/lib/libapp.so" PARENT_SCOPE)
```

----------------------------------------

TITLE: Unicode ALetter Classification Data for Text Processing
DESCRIPTION: This code snippet defines Unicode code point ranges categorized as 'ALetter', which identifies characters that can be used in words or identifiers. Each line specifies a range of Unicode points followed by a comment indicating the character type (like Lo, L&, Nl) and the count of characters in that range, along with descriptive names of the first and last characters in the range.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_9

LANGUAGE: unicode-data
CODE:
```
FB50..FBB1    ; ALetter # Lo  [98] ARABIC LETTER ALEF WASLA ISOLATED FORM..ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM
FBD3..FD3D    ; ALetter # Lo [363] ARABIC LETTER NG ISOLATED FORM..ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM
FD50..FD8F    ; ALetter # Lo  [64] ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM..ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM
FD92..FDC7    ; ALetter # Lo  [54] ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM..ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM
FDF0..FDFB    ; ALetter # Lo  [12] ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM..ARABIC LIGATURE JALLAJALALOUHOU
FE70..FE74    ; ALetter # Lo   [5] ARABIC FATHATAN ISOLATED FORM..ARABIC KASRATAN ISOLATED FORM
FE76..FEFC    ; ALetter # Lo [135] ARABIC FATHA ISOLATED FORM..ARABIC LIGATURE LAM WITH ALEF FINAL FORM
FF21..FF3A    ; ALetter # L&  [26] FULLWIDTH LATIN CAPITAL LETTER A..FULLWIDTH LATIN CAPITAL LETTER Z
FF41..FF5A    ; ALetter # L&  [26] FULLWIDTH LATIN SMALL LETTER A..FULLWIDTH LATIN SMALL LETTER Z
FFA0..FFBE    ; ALetter # Lo  [31] HALFWIDTH HANGUL FILLER..HALFWIDTH HANGUL LETTER HIEUH
FFC2..FFC7    ; ALetter # Lo   [6] HALFWIDTH HANGUL LETTER A..HALFWIDTH HANGUL LETTER E
FFCA..FFCF    ; ALetter # Lo   [6] HALFWIDTH HANGUL LETTER YEO..HALFWIDTH HANGUL LETTER OE
FFD2..FFD7    ; ALetter # Lo   [6] HALFWIDTH HANGUL LETTER YO..HALFWIDTH HANGUL LETTER YU
FFDA..FFDC    ; ALetter # Lo   [3] HALFWIDTH HANGUL LETTER EU..HALFWIDTH HANGUL LETTER I
10000..1000B  ; ALetter # Lo  [12] LINEAR B SYLLABLE B008 A..LINEAR B SYLLABLE B046 JE
1000D..10026  ; ALetter # Lo  [26] LINEAR B SYLLABLE B036 JO..LINEAR B SYLLABLE B032 QO
10028..1003A  ; ALetter # Lo  [19] LINEAR B SYLLABLE B060 RA..LINEAR B SYLLABLE B042 WO
1003C..1003D  ; ALetter # Lo   [2] LINEAR B SYLLABLE B017 ZA..LINEAR B SYLLABLE B074 ZE
1003F..1004D  ; ALetter # Lo  [15] LINEAR B SYLLABLE B020 ZO..LINEAR B SYLLABLE B091 TWO
10050..1005D  ; ALetter # Lo  [14] LINEAR B SYMBOL B018..LINEAR B SYMBOL B089
10080..100FA  ; ALetter # Lo [123] LINEAR B IDEOGRAM B100 MAN..LINEAR B IDEOGRAM VESSEL B305
10140..10174  ; ALetter # Nl  [53] GREEK ACROPHONIC ATTIC ONE QUARTER..GREEK ACROPHONIC STRATIAN FIFTY MNAS
10280..1029C  ; ALetter # Lo  [29] LYCIAN LETTER A..LYCIAN LETTER X
10300..1031F  ; ALetter # Lo  [32] OLD ITALIC LETTER A..OLD ITALIC LETTER ESS
1032D..10340  ; ALetter # Lo  [20] OLD ITALIC LETTER YE..GOTHIC LETTER PAIRTHRA
10341         ; ALetter # Nl       GOTHIC LETTER NINETY
10342..10349  ; ALetter # Lo   [8] GOTHIC LETTER RAIDA..GOTHIC LETTER OTHAL
1034A         ; ALetter # Nl       GOTHIC LETTER NINE HUNDRED
10350..10375  ; ALetter # Lo  [38] OLD PERMIC LETTER AN..OLD PERMIC LETTER IA
10380..1039D  ; ALetter # Lo  [30] UGARITIC LETTER ALPA..UGARITIC LETTER SSU
103A0..103C3  ; ALetter # Lo  [36] OLD PERSIAN SIGN A..OLD PERSIAN SIGN HA
103C8..103CF  ; ALetter # Lo   [8] OLD PERSIAN SIGN AURAMAZDAA..OLD PERSIAN SIGN BUUMISH
103D1..103D5  ; ALetter # Nl   [5] OLD PERSIAN NUMBER ONE..OLD PERSIAN NUMBER HUNDRED
10400..1044F  ; ALetter # L&  [80] DESERET CAPITAL LETTER LONG I..DESERET SMALL LETTER EW
10450..1049D  ; ALetter # Lo  [78] SHAVIAN LETTER PEEP..OSMANYA LETTER OO
104B0..104D3  ; ALetter # L&  [36] OSAGE CAPITAL LETTER A..OSAGE CAPITAL LETTER ZHA
104D8..104FB  ; ALetter # L&  [36] OSAGE SMALL LETTER A..OSAGE SMALL LETTER ZHA
10500..10527  ; ALetter # Lo  [40] ELBASAN LETTER A..ELBASAN LETTER KHE
10530..10563  ; ALetter # Lo  [52] CAUCASIAN ALBANIAN LETTER ALT..CAUCASIAN ALBANIAN LETTER KIW
10600..10736  ; ALetter # Lo [311] LINEAR A SIGN AB001..LINEAR A SIGN A664
10740..10755  ; ALetter # Lo  [22] LINEAR A SIGN A701 A..LINEAR A SIGN A732 JE
10760..10767  ; ALetter # Lo   [8] LINEAR A SIGN A800..LINEAR A SIGN A807
10800..10805  ; ALetter # Lo   [6] CYPRIOT SYLLABLE A..CYPRIOT SYLLABLE JA
10808         ; ALetter # Lo       CYPRIOT SYLLABLE JO
1080A..10835  ; ALetter # Lo  [44] CYPRIOT SYLLABLE KA..CYPRIOT SYLLABLE WO
10837..10838  ; ALetter # Lo   [2] CYPRIOT SYLLABLE XA..CYPRIOT SYLLABLE XE
1083C         ; ALetter # Lo       CYPRIOT SYLLABLE ZA
1083F..10855  ; ALetter # Lo  [23] CYPRIOT SYLLABLE ZO..IMPERIAL ARAMAIC LETTER TAW
10860..10876  ; ALetter # Lo  [23] PALMYRENE LETTER ALEPH..PALMYRENE LETTER TAW
10880..1089E  ; ALetter # Lo  [31] NABATAEAN LETTER FINAL ALEPH..NABATAEAN LETTER TAW
108E0..108F2  ; ALetter # Lo  [19] HATRAN LETTER ALEPH..HATRAN LETTER QOPH
108F4..108F5  ; ALetter # Lo   [2] HATRAN LETTER SHIN..HATRAN LETTER TAW
10900..10915  ; ALetter # Lo  [22] PHOENICIAN LETTER ALF..PHOENICIAN LETTER TAU
10920..10939  ; ALetter # Lo  [26] LYDIAN LETTER A..LYDIAN LETTER C
10980..109B7  ; ALetter # Lo  [56] MEROITIC HIEROGLYPHIC LETTER A..MEROITIC CURSIVE LETTER DA
109BE..109BF  ; ALetter # Lo   [2] MEROITIC CURSIVE LOGOGRAM RMT..MEROITIC CURSIVE LOGOGRAM IMN
10A00         ; ALetter # Lo       KHAROSHTHI LETTER A
10A10..10A13  ; ALetter # Lo   [4] KHAROSHTHI LETTER KA..KHAROSHTHI LETTER GHA
10A15..10A17  ; ALetter # Lo   [3] KHAROSHTHI LETTER CA..KHAROSHTHI LETTER JA
10A19..10A35  ; ALetter # Lo  [29] KHAROSHTHI LETTER NYA..KHAROSHTHI LETTER VHA
10A60..10A7C  ; ALetter # Lo  [29] OLD SOUTH ARABIAN LETTER HE..OLD SOUTH ARABIAN LETTER THETH
10A80..10A9C  ; ALetter # Lo  [29] OLD NORTH ARABIAN LETTER HEH..OLD NORTH ARABIAN LETTER ZAH
10AC0..10AC7  ; ALetter # Lo   [8] MANICHAEAN LETTER ALEPH..MANICHAEAN LETTER WAW
10AC9..10AE4  ; ALetter # Lo  [28] MANICHAEAN LETTER ZAYIN..MANICHAEAN LETTER TAW
10B00..10B35  ; ALetter # Lo  [54] AVESTAN LETTER A..AVESTAN LETTER HE
10B40..10B55  ; ALetter # Lo  [22] INSCRIPTIONAL PARTHIAN LETTER ALEPH..INSCRIPTIONAL PARTHIAN LETTER TAW
10B60..10B72  ; ALetter # Lo  [19] INSCRIPTIONAL PAHLAVI LETTER ALEPH..INSCRIPTIONAL PAHLAVI LETTER TAW
10B80..10B91  ; ALetter # Lo  [18] PSALTER PAHLAVI LETTER ALEPH..PSALTER PAHLAVI LETTER TAW
10C00..10C48  ; ALetter # Lo  [73] OLD TURKIC LETTER ORKHON A..OLD TURKIC LETTER ORKHON BASH
10C80..10CB2  ; ALetter # L&  [51] OLD HUNGARIAN CAPITAL LETTER A..OLD HUNGARIAN CAPITAL LETTER US
10CC0..10CF2  ; ALetter # L&  [51] OLD HUNGARIAN SMALL LETTER A..OLD HUNGARIAN SMALL LETTER US
10D00..10D23  ; ALetter # Lo  [36] HANIFI ROHINGYA LETTER A..HANIFI ROHINGYA MARK NA KHONNA
10E80..10EA9  ; ALetter # Lo  [42] YEZIDI LETTER ELIF..YEZIDI LETTER ET
10EB0..10EB1  ; ALetter # Lo   [2] YEZIDI LETTER LAM WITH DOT ABOVE..YEZIDI LETTER YOT WITH CIRCUMFLEX ABOVE
10F00..10F1C  ; ALetter # Lo  [29] OLD SOGDIAN LETTER ALEPH..OLD SOGDIAN LETTER FINAL TAW WITH VERTICAL TAIL
10F27         ; ALetter # Lo       OLD SOGDIAN LIGATURE AYIN-DALETH
10F30..10F45  ; ALetter # Lo  [22] SOGDIAN LETTER ALEPH..SOGDIAN INDEPENDENT SHIN
10FB0..10FC4  ; ALetter # Lo  [21] CHORASMIAN LETTER ALEPH..CHORASMIAN LETTER TAW
10FE0..10FF6  ; ALetter # Lo  [23] ELYMAIC LETTER ALEPH..ELYMAIC LIGATURE ZAYIN-YODH
11003..11037  ; ALetter # Lo  [53] BRAHMI SIGN JIHVAMULIYA..BRAHMI LETTER OLD TAMIL NNNA
11083..110AF  ; ALetter # Lo  [45] KAITHI LETTER A..KAITHI LETTER HA
110D0..110E8  ; ALetter # Lo  [25] SORA SOMPENG LETTER SAH..SORA SOMPENG LETTER MAE
11103..11126  ; ALetter # Lo  [36] CHAKMA LETTER AA..CHAKMA LETTER HAA
11144         ; ALetter # Lo       CHAKMA LETTER LHAA
11147         ; ALetter # Lo       CHAKMA LETTER VAA
11150..11172  ; ALetter # Lo  [35] MAHAJANI LETTER A..MAHAJANI LETTER RRA
11176         ; ALetter # Lo       MAHAJANI LIGATURE SHRI
11183..111B2  ; ALetter # Lo  [48] SHARADA LETTER A..SHARADA LETTER HA
111C1..111C4  ; ALetter # Lo   [4] SHARADA SIGN AVAGRAHA..SHARADA OM
111DA         ; ALetter # Lo       SHARADA EKAM
111DC         ; ALetter # Lo       SHARADA HEADSTROKE
11200..11211  ; ALetter # Lo  [18] KHOJKI LETTER A..KHOJKI LETTER JJA
11213..1122B  ; ALetter # Lo  [25] KHOJKI LETTER NYA..KHOJKI LETTER LLA
11280..11286  ; ALetter # Lo   [7] MULTANI LETTER A..MULTANI LETTER GA
11288         ; ALetter # Lo       MULTANI LETTER GHA
1128A..1128D  ; ALetter # Lo   [4] MULTANI LETTER CA..MULTANI LETTER JJA
1128F..1129D  ; ALetter # Lo  [15] MULTANI LETTER NYA..MULTANI LETTER BA
1129F..112A8  ; ALetter # Lo  [10] MULTANI LETTER BHA..MULTANI LETTER RHA
112B0..112DE  ; ALetter # Lo  [47] KHUDAWADI LETTER A..KHUDAWADI LETTER HA
11305..1130C  ; ALetter # Lo   [8] GRANTHA LETTER A..GRANTHA LETTER VOCALIC L
1130F..11310  ; ALetter # Lo   [2] GRANTHA LETTER EE..GRANTHA LETTER AI
11313..11328  ; ALetter # Lo  [22] GRANTHA LETTER OO..GRANTHA LETTER NA
1132A..11330  ; ALetter # Lo   [7] GRANTHA LETTER PA..GRANTHA LETTER RA
11332..11333  ; ALetter # Lo   [2] GRANTHA LETTER LA..GRANTHA LETTER LLA
11335..11339  ; ALetter # Lo   [5] GRANTHA LETTER VA..GRANTHA LETTER HA
1133D         ; ALetter # Lo       GRANTHA SIGN AVAGRAHA
11350         ; ALetter # Lo       GRANTHA OM
1135D..11361  ; ALetter # Lo   [5] GRANTHA SIGN PLUTA..GRANTHA LETTER VOCALIC LL
11400..11434  ; ALetter # Lo  [53] NEWA LETTER A..NEWA LETTER HA
11447..1144A  ; ALetter # Lo   [4] NEWA SIGN AVAGRAHA..NEWA SIDDHI
1145F..11461  ; ALetter # Lo   [3] NEWA LETTER VEDIC ANUSVARA..NEWA SIGN UPADHMANIYA
11480..114AF  ; ALetter # Lo  [48] TIRHUTA ANJI..TIRHUTA LETTER HA
114C4..114C5  ; ALetter # Lo   [2] TIRHUTA SIGN AVAGRAHA..TIRHUTA GVANG
114C7         ; ALetter # Lo       TIRHUTA OM
11580..115AE  ; ALetter # Lo  [47] SIDDHAM LETTER A..SIDDHAM LETTER HA
115D8..115DB  ; ALetter # Lo   [4] SIDDHAM LETTER THREE-CIRCLE ALTERNATE I..SIDDHAM LETTER ALTERNATE U
11600..1162F  ; ALetter # Lo  [48] MODI LETTER A..MODI LETTER LLA
11644         ; ALetter # Lo       MODI SIGN HUVA
11680..116AA  ; ALetter # Lo  [43] TAKRI LETTER A..TAKRI LETTER RRA
116B8         ; ALetter # Lo       TAKRI LETTER ARCHAIC KHA
11800..1182B  ; ALetter # Lo  [44] DOGRA LETTER A..DOGRA LETTER RRA
118A0..118DF  ; ALetter # L&  [64] WARANG CITI CAPITAL LETTER NGAA..WARANG CITI SMALL LETTER VIYO
118FF..11906  ; ALetter # Lo   [8] WARANG CITI OM..DIVES AKURU LETTER E
```

----------------------------------------

TITLE: Updating Golden File Fixtures in Flutter Embedder Tests
DESCRIPTION: Shell commands demonstrating how to build the engine, run tests, and update the golden fixture files when they need to be regenerated.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/embedder/fixtures/README.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
# The examples below assume:
#   $ENGINE = /path/to/engine/src
#   $TARGET = /path/to/engine/src/out/{{host_you_want_to_build}}

# 1. Make sure you have built the engine:
$ ninja -j1000 -C $ENGINE/out/$TARGET

# 2. Run the test locally (assuming you have built the engine).
$ $ENGINE/out/$TARGET/embedder_unittests*

# Or, to run just a single test:
$ $ENGINE/out/$TARGET/embedder_unittests --gtest_filter="EmbedderTest.VerifyB143464703WithSoftwareBackend"

# Or, a suite of tests:
$ $ENGINE/out/$TARGET/embedder_unittests --gtest_filter="EmbedderTest.*"

# 3. Now, copy the output to the golden file (notice the "actual_" prefix):
$ cp \
  $ENGINE/out/$TARGET/gen/flutter/shell/platform/embedder/assets/actual_verifyb143464703_soft_noxform.png \
  $ENGINE/flutter/shell/platform/embedder/fixtures/verifyb143464703_soft_noxform.png
```

----------------------------------------

TITLE: Defining an Import Value in YAML for Flutter Code Migration
DESCRIPTION: Demonstrates how to specify an import value in YAML to reference top-level declarations from external libraries. The configuration includes the library URIs and the imported name.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_17

LANGUAGE: yaml
CODE:
```
kind: import
uris: [ 'package:flutter/material.dart' ]
name: 'Widget'
```

----------------------------------------

TITLE: Task Configuration in JSON
DESCRIPTION: This JSON snippet represents a task configuration used within an engine test. It includes the task's name, parameters passed to the script execution, maximum attempts in case of failure, and the script path relative to the checkout directory. The configuration also specifies a timeout for the step running the test.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_14

LANGUAGE: json
CODE:
```
{
    "name": "test: clang_tidy android_debug_arm64",
    "parameters": [
       "--variant",
       "android_debug_arm64",
       "--lint-all",
       "--shard-id=0",
       "--shard-variants=host_debug"
    ],
    "max_attempts": 1,
    "script": "flutter/ci/clang_tidy.sh"
}
```

----------------------------------------

TITLE: Unicode Property Definitions for Indian Scripts
DESCRIPTION: Defines Unicode character properties including combining marks (CM), alphabetic characters (AL), numbers (NU), and other categories for various Indian writing systems. Each line contains hex code point ranges and their property assignments.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_1

LANGUAGE: unicode
CODE:
```
0A47..0A48;CM     # Mn     [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI
0A4B..0A4D;CM     # Mn     [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA
0A51;CM           # Mn         GURMUKHI SIGN UDAAT
0A59..0A5C;AL     # Lo     [4] GURMUKHI LETTER KHHA..GURMUKHI LETTER RRA
```

----------------------------------------

TITLE: Configuring Goldctl Dependency in CI Builder (JSON)
DESCRIPTION: This JSON snippet shows how to configure the `goldctl` dependency in a CI builder configuration file (e.g., `linux_android_emulator.json`). This ensures that the builder environment has access to the `goldctl` tool for interacting with Skia Gold.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/skia_gold_client/README.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
   "dependencies": [
     {
       "dependency": "goldctl",
       "version": "git_revision:720a542f6fe4f92922c3b8f0fdcc4d2ac6bb83cd"
     }
   ]
```

----------------------------------------

TITLE: Running Web Integration Tests for Flutter SDK
DESCRIPTION: This command runs the web integration tests for the Flutter SDK. It uses the Dart SDK to execute the test suite located in the 'test/web.shard' directory. The command should be run from the 'flutter_tools' directory.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/test/web.shard/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
../../bin/cache/dart-sdk/bin/dart run test test/web.shard
```

----------------------------------------

TITLE: Copyright and License Header for Generated Flutter Localization Files
DESCRIPTION: This code snippet contains the copyright notice and license information for the generated localization files in a Flutter project. It also includes a comment indicating that the files were generated using the 'flutter gen-l10n' command.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/test_apps/stocks/lib/i18n/header.txt#2025-04-21_snippet_0

LANGUAGE: Dart
CODE:
```
// Copyright 2014 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// THE FOLLOWING FILES WERE GENERATED BY `flutter gen-l10n`.
```

----------------------------------------

TITLE: Building Flutter Engine
DESCRIPTION: This shell command builds the Flutter engine for Fuchsia. It utilizes `gn` to generate the build files and `ninja` to compile the engine with the specified target.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$ENGINE_DIR/flutter/tools/gn --fuchsia --no-lto && ninja -C $ENGINE_DIR/out/fuchsia_debug_x64 flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input:tests
```

----------------------------------------

TITLE: Emulator Information Structure in Dart
DESCRIPTION: Data structure returned by emulator.getEmulators containing emulator identification and platform information.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/doc/daemon.md#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
{
  "id": "emulator_id",
  "name": "emulator_name",
  "category": "mobile|web|desktop",
  "platformType": "android|ios|linux|macos|fuchsia|windows|web"
}
```

----------------------------------------

TITLE: Describing Flutter Widget Preview Scaffold in Markdown
DESCRIPTION: This Markdown snippet outlines the purpose of the Widget Preview Scaffold project. It explains that the project is automatically generated by the 'flutter widget-preview' command and serves as a host for widgets to be displayed in the Flutter widget previewer.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/test/widget_preview_scaffold.shard/widget_preview_scaffold/README.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# Widget Preview Scaffold

This project is generated by `flutter widget-preview` and is used to host Widgets
to be previewed in the widget previewer.
```

----------------------------------------

TITLE: Compiling Dart Tests with Ninja
DESCRIPTION: This snippet illustrates how to compile a Dart test using Ninja in a specific output directory. The command is necessary for building tests instead of running them directly from the source. Ensure Ninja is installed and configured in the environment.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/dart/README.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
ninja -C ../out/host_debug_unopt_arm64 compile_image_filter_test.dart
```

----------------------------------------

TITLE: Engine Output Directory Cleanup Commands
DESCRIPTION: Commands for managing engine output directories, including removing old directories and previewing cleanup operations.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_14

LANGUAGE: sh
CODE:
```
# Deletes all output directories older than 30 days.
et cleanup

# Shows what output directories would be deleted by the above command.
et cleanup --dry-run

# Deletes all output directories accessed last in 2023.
et cleanup --untouched-since=2024-01-01
```

----------------------------------------

TITLE: Sample Output of Sanitizer Suppressions Script
DESCRIPTION: This snippet shows the expected output when sourcing the sanitizer suppressions script, indicating which suppression files are being used for different sanitizers.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
Using Thread Sanitizer suppressions in ./flutter/testing/tsan_suppressions.txt
Using Leak Sanitizer suppressions in ./flutter/testing/lsan_suppressions.txt
```

----------------------------------------

TITLE: Referencing ARB Specification in Markdown
DESCRIPTION: This snippet shows how to include a link to the ARB (Application Resource Bundle) specification in Markdown format. It provides developers with a reference for the ARB file format used in Flutter internationalization.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/benchmarks/test_apps/stocks/lib/i18n/regenerate.md#2025-04-21_snippet_1

LANGUAGE: Markdown
CODE:
```
[ARB specification](https://github.com/google/app-resource-bundle/wiki/ApplicationResourceBundleSpecification)
```

----------------------------------------

TITLE: Defining Unicode Line Break Classes for Various Scripts
DESCRIPTION: This snippet shows the format used to define line break classes for ranges of Unicode code points. Each line specifies a range or single code point, followed by a line break class abbreviation and a comment describing the characters.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_3

LANGUAGE: Plain Text
CODE:
```
10D0..10FA;AL     # Ll    [43] GEORGIAN LETTER AN..GEORGIAN LETTER AIN
10FB;AL           # Po         GEORGIAN PARAGRAPH SEPARATOR
10FC;AL           # Lm         MODIFIER LETTER GEORGIAN NAR
10FD..10FF;AL     # Ll     [3] GEORGIAN LETTER AEN..GEORGIAN LETTER LABIAL SIGN
1100..115F;JL     # Lo    [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER
1160..11A7;JV     # Lo    [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE
11A8..11FF;JT     # Lo    [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN
```

----------------------------------------

TITLE: Defining Katakana Character Ranges in Unicode
DESCRIPTION: Lists the Unicode code points for Katakana characters across different categories. Includes various Katakana letters, marks, and symbols categorized by their Unicode properties (Lm, Sk, Pd, Lo, So) and totals 314 code points.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_6

LANGUAGE: unicode
CODE:
```
3031..3035    ; Katakana # Lm   [5] VERTICAL KANA REPEAT MARK..VERTICAL KANA REPEAT MARK LOWER HALF
309B..309C    ; Katakana # Sk   [2] KATAKANA-HIRAGANA VOICED SOUND MARK..KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
30A0          ; Katakana # Pd       KATAKANA-HIRAGANA DOUBLE HYPHEN
30A1..30FA    ; Katakana # Lo  [90] KATAKANA LETTER SMALL A..KATAKANA LETTER VO
30FC..30FE    ; Katakana # Lm   [3] KATAKANA-HIRAGANA PROLONGED SOUND MARK..KATAKANA VOICED ITERATION MARK
30FF          ; Katakana # Lo       KATAKANA DIGRAPH KOTO
31F0..31FF    ; Katakana # Lo  [16] KATAKANA LETTER SMALL KU..KATAKANA LETTER SMALL RO
32D0..32FE    ; Katakana # So  [47] CIRCLED KATAKANA A..CIRCLED KATAKANA WO
3300..3357    ; Katakana # So  [88] SQUARE APAATO..SQUARE WATTO
FF66..FF6F    ; Katakana # Lo  [10] HALFWIDTH KATAKANA LETTER WO..HALFWIDTH KATAKANA LETTER SMALL TU
FF70          ; Katakana # Lm       HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK
FF71..FF9D    ; Katakana # Lo  [45] HALFWIDTH KATAKANA LETTER A..HALFWIDTH KATAKANA LETTER N
1B000         ; Katakana # Lo       KATAKANA LETTER ARCHAIC E
1B164..1B167  ; Katakana # Lo   [4] KATAKANA LETTER SMALL WI..KATAKANA LETTER SMALL N

# Total code points: 314
```

----------------------------------------

TITLE: Querying RBE Proxy Status
DESCRIPTION: This command shows how to query the status of the local RBE proxy using the reproxystatus tool.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_7

LANGUAGE: sh
CODE:
```
buildtools/mac-arm64/reclient/reproxystatus
```

----------------------------------------

TITLE: Identifying Extra Blank Line in Flutter
DESCRIPTION: This snippet shows how an extra blank line is represented in the code. It's important for maintaining clean and consistent code formatting.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/test/analyze-test-input/root/packages/foo/spaces.txt#2025-04-21_snippet_1

LANGUAGE: Dart
CODE:
```
Extra blank line:



```

----------------------------------------

TITLE: Defining Unicode Character Properties
DESCRIPTION: This snippet defines Unicode character properties for a range of characters, including their General Category and script classification. It uses a semicolon-separated format where each line represents a character or range of characters followed by their properties.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_4

LANGUAGE: Unicode
CODE:
```
1ABE;CM           # Me         COMBINING PARENTHESES OVERLAY
1ABF..1AC0;CM     # Mn     [2] COMBINING LATIN SMALL LETTER W BELOW..COMBINING LATIN SMALL LETTER TURNED W BELOW
1B00..1B03;CM     # Mn     [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG
1B04;CM           # Mc         BALINESE SIGN BISAH
1B05..1B33;AL     # Lo    [47] BALINESE LETTER AKARA..BALINESE LETTER HA
1B34;CM           # Mn         BALINESE SIGN REREKAN
1B35;CM           # Mc         BALINESE VOWEL SIGN TEDUNG
1B36..1B3A;CM     # Mn     [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA
1B3B;CM           # Mc         BALINESE VOWEL SIGN RA REPA TEDUNG
1B3C;CM           # Mn         BALINESE VOWEL SIGN LA LENGA
1B3D..1B41;CM     # Mc     [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG
1B42;CM           # Mn         BALINESE VOWEL SIGN PEPET
1B43..1B44;CM     # Mc     [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG
1B45..1B4B;AL     # Lo     [7] BALINESE LETTER KAF SASAK..BALINESE LETTER ASYURA SASAK
1B50..1B59;NU     # Nd    [10] BALINESE DIGIT ZERO..BALINESE DIGIT NINE
1B5A..1B5B;BA     # Po     [2] BALINESE PANTI..BALINESE PAMADA
1B5C;AL           # Po         BALINESE WINDU
1B5D..1B60;BA     # Po     [4] BALINESE CARIK PAMUNGKAH..BALINESE PAMENENG
1B61..1B6A;AL     # So    [10] BALINESE MUSICAL SYMBOL DONG..BALINESE MUSICAL SYMBOL DANG GEDE
1B6B..1B73;CM     # Mn     [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG
1B74..1B7C;AL     # So     [9] BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG..BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING
```

----------------------------------------

TITLE: Setting Version Tag for AMD64 Package - Shell Script
DESCRIPTION: This snippet details the command for setting a version tag for the AMD64 mobile provisioning package. It helps in managing the versions aligned with the ARM64 package updates.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/cipd/mobileprovision/README.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
cipd set-tag flutter_internal/mac/mobileprovision/mac-amd64 -tag "version:to_2025" -version AMD64_INSTANCE_ID
```

----------------------------------------

TITLE: Unicode ALetter Category Code Point Ranges
DESCRIPTION: Defines ranges of Unicode code points that are classified as ALetter category characters. Each line specifies either a single code point or a range of code points, along with the general category (Lo, L&, Lm, Nl) and a description of the character or range.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_10

LANGUAGE: unicode
CODE:
```
11909         ; ALetter # Lo       DIVES AKURU LETTER O
1190C..11913  ; ALetter # Lo   [8] DIVES AKURU LETTER KA..DIVES AKURU LETTER JA
11915..11916  ; ALetter # Lo   [2] DIVES AKURU LETTER NYA..DIVES AKURU LETTER TTA
11918..1192F  ; ALetter # Lo  [24] DIVES AKURU LETTER DDA..DIVES AKURU LETTER ZA
```

----------------------------------------

TITLE: Running Android DisplayList Benchmarks with ADB
DESCRIPTION: These commands push the compiled display_list_benchmarks binary to the /data/local/tmp directory on an Android device using adb. Then, it executes the binary via adb shell, specifying the JSON benchmark format, and pipes the output to a file named android-results.json. This file contains the benchmark results that can be processed later.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/benchmark/README_displaylist.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
$ adb push out/android_profile_arm64/display_list_benchmarks /data/local/tmp/display_list_benchmarks
$ adb shell /data/local/tmp/display_list_benchmarks --benchmark_format=json | tee android-results.json
```

----------------------------------------

TITLE: Incorrect compileSdk setting
DESCRIPTION: This snippet shows an incorrect way to set `compileSdk`.  Specifically using the `compileSdk` without an equals sign `=` is not allowed. 
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Android-API-And-Related-Versions.md#2025-04-21_snippet_2

LANGUAGE: Groovy
CODE:
```
// NOT OK
android {
  compileSdk 28
}
```

----------------------------------------

TITLE: Building iOS DisplayList Benchmarks with Ninja
DESCRIPTION: This command builds the iOS DisplayList benchmark dylib using Ninja. The dylib contains the benchmarking code that is later linked to a skeleton test app in Xcode for execution on iOS devices. The target name `ios_display_list_benchmarks` must be specified during the Ninja build process.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/testing/benchmark/README_displaylist.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
$ ninja -C out/ios_profile ios_display_list_benchmarks
```

----------------------------------------

TITLE: Expected Result After Data-Driven Fix
DESCRIPTION: Golden master file showing the expected code after a data-driven fix is applied. Used for comparison testing to verify the fix works correctly.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_19

LANGUAGE: dart
CODE:
```
// test_fixes/C.dart.expect
import 'package:<package-name>/C.dart';

C.newName('Fix me'); // expected usage after the change.
```

----------------------------------------

TITLE: Dartdoc Template Identifier (Bad)
DESCRIPTION: Shows an example of a poorly formatted Dartdoc template identifier. It does not follow the recommended naming convention, making it difficult to understand and maintain.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
// BAD:
/// {@template the_stuff!}
/// This is some great stuff!
/// {@endtemplate}
```

----------------------------------------

TITLE: Setting Environment Variables for Fuchsia and Engine Directories
DESCRIPTION: This snippet sets the environment variables required for the Fuchsia and Engine directories. It prepares the shell environment for running Fuchsia tests.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/unit_tests.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
export FUCHSIA_DIR=~/fuchsia
export ENGINE_DIR=~/engine/src
```

----------------------------------------

TITLE: Running Header Guard Check Tool
DESCRIPTION: This command executes the header guard check tool using Dart. It assumes the user is in the 'flutter' root directory of the engine repository and runs the `main.dart` script located in the `tools/header_guard_check/bin` directory.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/header_guard_check/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
"# Assuming you are in the `flutter` root of the engine repo.\ndart ./tools/header_guard_check/bin/main.dart"
```

----------------------------------------

TITLE: Running Web Locale Keymap Generator Script
DESCRIPTION: Command to execute the Dart script for generating web locale keymap with assertions enabled
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/gen_web_locale_keymap/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
dart --enable-asserts bin/gen_web_locale_keymap.dart
```

----------------------------------------

TITLE: Conditional UIA Usage in Flutter Engine C++
DESCRIPTION: This code snippet demonstrates how the Flutter engine conditionally uses UI Automation based on the FLUTTER_ENGINE_USE_UIA macro. It's implemented in the Window::OnGetObject method.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/desktop/windows/Accessibility-on-Windows.md#2025-04-22_snippet_1

LANGUAGE: C++
CODE:
```
#ifdef FLUTTER_ENGINE_USE_UIA
  // UIA response code
#endif
```

----------------------------------------

TITLE: Starting Fuchsia Emulator
DESCRIPTION: Command to launch the Fuchsia emulator in a graphical environment.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_5

LANGUAGE: shell
CODE:
```
ffx emu start
```

----------------------------------------

TITLE: Testing Data-Driven Fixes with Dart Files
DESCRIPTION: Example of test files used to verify data-driven fixes. Shows a test case file containing code before the fix is applied.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_18

LANGUAGE: dart
CODE:
```
// test_fixes/C.dart
import 'package:<package-name>/C.dart';

C.oldName('Fix me'); // usage before the change.
```

----------------------------------------

TITLE: Sample Suppressions Output
DESCRIPTION: This snippet demonstrates the output format of used suppressions, showing the count and bytes for different suppression templates.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Using-Sanitizers-with-the-Flutter-Engine.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
-----------------------------------------------------
Suppressions used:
  count      bytes template
      1        120 class_createInstance
      5         80 MakeSkSurfaceFromBackingStore
      3        128 _dispatch_once_callout
-----------------------------------------------------
```

----------------------------------------

TITLE: Setting Playground Timeout in Flutter
DESCRIPTION: Command-line argument to specify how long each playground window will remain open before moving to the next one in Flutter development.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/opengles_development_setup.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
--playground_timeout_ms=1000
```

----------------------------------------

TITLE: Defining Simple Struct in C++ Header
DESCRIPTION: Example of defining a simple struct 'A' in a C++ header file. This illustrates how changes to header files can affect other files that import them, potentially causing issues with Clang Tidy checks.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/ci/Engine-pre-submits-and-post-submits.md#2025-04-21_snippet_1

LANGUAGE: h
CODE:
```
// impeller/a.h
struct A {}
```

----------------------------------------

TITLE: Setting Version Tag for ARM64 Package - Shell Script
DESCRIPTION: In this snippet, the command used to set a version tag for the ARM64 mobile provisioning package is shown. The command tags the latest upload with a specified year, aiding in version control.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/cipd/mobileprovision/README.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
cipd set-tag flutter_internal/mac/mobileprovision/mac-arm64 -tag "version:to_2025" -version ARM64_INSTANCE_ID
```

----------------------------------------

TITLE: Unicode Character Property Definitions
DESCRIPTION: Defines the properties of Unicode characters including their categories (Lo, Po, Ps, Pe, etc.), scripts (Arabic, Linear B, Gothic, etc.), and display characteristics. Each line maps a code point or range to its properties and includes a descriptive comment.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_12

LANGUAGE: unicode
CODE:
```
FE51;ID           # Po         SMALL IDEOGRAPHIC COMMA
FE52;CL           # Po         SMALL FULL STOP
FE54..FE55;NS     # Po     [2] SMALL SEMICOLON..SMALL COLON
FE56..FE57;EX     # Po     [2] SMALL QUESTION MARK..SMALL EXCLAMATION MARK
```

----------------------------------------

TITLE: Defining Flutter Module Project Name in Markdown
DESCRIPTION: This snippet defines the name of the Flutter module project using a Markdown header. It's a crucial identifier for the project.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_add2app_life_cycle/flutterapp/README.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# ios_add2app_life_cycle_flutter
```

----------------------------------------

TITLE: Hotfix Message Template for Flutter Issues
DESCRIPTION: A recommended formula for describing hotfix scenarios that provides clear, succinct information about the problem, affected platforms, and potential impact
SOURCE: https://github.com/flutter/flutter/blob/master/docs/releases/Hotfix-Documentation-Best-Practices.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
"When $scenario [on $platform], $problem_description"
```

----------------------------------------

TITLE: Disable Remote Build Execution in Flutter Engine
DESCRIPTION: Command to disable remote build execution. Note that this invalidates build context and previously built artifacts won't be reused.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_10

LANGUAGE: sh
CODE:
```
et build --no-rbe
```

----------------------------------------

TITLE: Initializing gcloud for Flutter RBE Project
DESCRIPTION: This command initializes gcloud and sets the project to flutter-rbe-prod for authentication with the Google cloud project that owns the RBE worker pool.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
gcloud init --project flutter-rbe-prod
```

----------------------------------------

TITLE: Creating and Setting Ref for ARM64 Package - Shell Script
DESCRIPTION: This snippet demonstrates how to set the latest reference for the ARM64 mobile provisioning package using the cipd command-line tool. It requires the instance ID from the latest upload as a parameter.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/cipd/mobileprovision/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
cipd set-ref flutter_internal/mac/mobileprovision/mac-arm64 -ref latest -version ARM64_INSTANCE_ID
```

----------------------------------------

TITLE: Updating BuildTestTask for Custom Task
DESCRIPTION: This snippet suggests updating the task class to extend the BuildTestTask and override necessary functions to facilitate a new build and test model. The required functions to override include getBuildArgs, getTestArgs, parseTaskResult, and getApplicationBinaryPath.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/devicelab/README.md#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
// Update the task class to extend BuildTestTask
// Override function getBuildArgs
// Override function getTestArgs
// Override function parseTaskResult
// Override function getApplicationBinaryPath
```

----------------------------------------

TITLE: Defining Ninja targets in JSON
DESCRIPTION: This snippet demonstrates how to define Ninja build targets and their associated GN configurations within a JSON file. The `config` key specifies the GN configuration, and `targets` lists the Ninja targets to build.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/ci/builders/README.md#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
"ninja": {
    "config": "host_debug",
    "targets": [
        "flutter/build/archives:artifacts",
        "flutter/build/archives:embedder",
    ]
},

```

----------------------------------------

TITLE: Defining Line Break Properties for Unicode Character Ranges
DESCRIPTION: This code snippet defines line break properties for various Unicode character ranges. It uses a compact format where each line represents a character or range of characters, followed by a semicolon and the corresponding line break property code.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_2

LANGUAGE: Unicode
CODE:
```
0D70..0D78;AL     # No     [9] MALAYALAM NUMBER TEN..MALAYALAM FRACTION THREE SIXTEENTHS
0D79;PO           # So         MALAYALAM DATE MARK
0D7A..0D7F;AL     # Lo     [6] MALAYALAM LETTER CHILLU NN..MALAYALAM LETTER CHILLU K
0D81;CM           # Mn         SINHALA SIGN CANDRABINDU
0D82..0D83;CM     # Mc     [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA
0D85..0D96;AL     # Lo    [18] SINHALA LETTER AYANNA..SINHALA LETTER AUYANNA
0D9A..0DB1;AL     # Lo    [24] SINHALA LETTER ALPAPRAANA KAYANNA..SINHALA LETTER DANTAJA NAYANNA
0DB3..0DBB;AL     # Lo     [9] SINHALA LETTER SANYAKA DAYANNA..SINHALA LETTER RAYANNA
0DBD;AL           # Lo         SINHALA LETTER DANTAJA LAYANNA
0DC0..0DC6;AL     # Lo     [7] SINHALA LETTER VAYANNA..SINHALA LETTER FAYANNA
```

----------------------------------------

TITLE: Updating LICENSE File for Release
DESCRIPTION: This command updates the LICENSE file included in product releases. It ensures that any changes in golden files are reflected in the actual LICENSE file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
dart pub get
gclient sync -D
dart --enable-asserts lib/main.dart --release --src ../../.. > ../../sky/packages/sky_engine/LICENSE
```

----------------------------------------

TITLE: Disabling RBE for a Build
DESCRIPTION: This command shows how to disable RBE for a specific build using the --no-rbe flag with the 'et' tool.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/rbe/rbe.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
et build -c host_debug --no-rbe
```

----------------------------------------

TITLE: Defining OpenGL ES Function Resolver in C++
DESCRIPTION: Creates a lambda function to resolve OpenGL ES function pointers using eglGetProcAddress.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_4

LANGUAGE: c++
CODE:
```
auto resolver = [](const char* name) -> void* {
  return reinterpret_cast<void*>(::eglGetProcAddress(name));
};
```

----------------------------------------

TITLE: Running Dart Fix Tests for Integration Test
DESCRIPTION: Command to execute tests that validate the fix rules in the flutter/packages/integration_test/test_fixes directory. This compares the current fixes to the golden files.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/lib/fix_data/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
dart fix --compare-to-golden
```

----------------------------------------

TITLE: Defining Test Sets for Flutter Web Tests
DESCRIPTION: Specifies groups of unit test files with a name and directory location under the flutter/lib/web_ui/test directory
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/lib/web_ui/test/README.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
test-sets:
  * `name` - The name of the test set.
  * `directory` - The directory containing test files.
```

----------------------------------------

TITLE: MidLetter Unicode Properties Definition
DESCRIPTION: Defines Unicode code points for punctuation marks that can appear between letters, including colons and dots
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_12

LANGUAGE: unicode-data
CODE:
```
003A          ; MidLetter # Po       COLON
00B7          ; MidLetter # Po       MIDDLE DOT
0387          ; MidLetter # Po       GREEK ANO TELEIA
055F          ; MidLetter # Po       ARMENIAN ABBREVIATION MARK
05F4          ; MidLetter # Po       HEBREW PUNCTUATION GERSHAYIM
2027          ; MidLetter # Po       HYPHENATION POINT
FE13          ; MidLetter # Po       PRESENTATION FORM FOR VERTICAL COLON
FE55          ; MidLetter # Po       SMALL COLON
FF1A          ; MidLetter # Po       FULLWIDTH COLON
```

----------------------------------------

TITLE: Specialization Constant Shader Sampling Implementation
DESCRIPTION: Optimized shader sampling using specialization constants to eliminate runtime branching and backend-specific code
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/specialization_constants.md#2025-04-21_snippet_1

LANGUAGE: glsl
CODE:
```
layout(constant_id = 0) const float supports_decal = 1.0;

vec4 Sample(sampler2D sampler, vec2 coord) {
  if (supports_decal) {
    return texture(sampler, coord);
  }
  return IPSampleDecal(sampler, coord)
}
```

----------------------------------------

TITLE: Running Golden Images Comparison Script in Shell
DESCRIPTION: This shell command executes the Dart script that compares golden images located in two specified directories. It takes two directory paths as parameters and generates diff images in the current working directory.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/compare_goldens/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
dart run compare_goldens <dir path> <dir path>
```

----------------------------------------

TITLE: Executing Clangd Check Script with Specified Paths
DESCRIPTION: This shell command runs the `clangd_check` tool using Dart, with specified paths to the `clangd` binary and the `--compile-commands-dir`. It is used when default path inference is inadequate, requiring manual path inputs. Ensure that the specified paths are correct and accessible.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clangd_check/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
dart ./tools/clangd_check/bin/main.dart \
  --clangd ../buildtools/mac-arm64/clang/bin/clangd \
  --compile-commands-dir ../out/host_Debug_unopt_arm64
```

----------------------------------------

TITLE: Creating CIPD Package Manually - Bash Command
DESCRIPTION: This Bash command allows for manual creation and upload of Android SDK packages to CIPD. It specifies the package name and version tag for the uploaded package.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Engine's-Android-API-version.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ cipd create -in <your-android-dir>/Android/sdk/<some_package> -name flutter/android/sdk/<some_package> -tag version:<new-version-tag>
```

----------------------------------------

TITLE: Unicode Property Mappings
DESCRIPTION: Defines character properties using the format codepoint;property. Maps Unicode code points to properties like AL (Alphabetic), CM (Combining Mark), BA (Break After), etc. for various scripts.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_13

LANGUAGE: data
CODE:
```
108E0..108F2;AL   # Lo    [19] HATRAN LETTER ALEPH..HATRAN LETTER QOPH
108F4..108F5;AL   # Lo     [2] HATRAN LETTER SHIN..HATRAN LETTER TAW
108FB..108FF;AL   # No     [5] HATRAN NUMBER ONE..HATRAN NUMBER ONE HUNDRED
```

----------------------------------------

TITLE: Running Golden File Scraper in Dart
DESCRIPTION: Demonstrates how to use the Dart script to extract and apply golden file changes from a log file. It shows both the normal execution and the dry-run mode.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/build_bucket_golden_scraper/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
$ dart bin/main.dart <path to log file, which can be http or a file>

Wrote 3 golden file changes:
  testing/resources/performance_overlay_gold_60fps.png
  testing/resources/performance_overlay_gold_90fps.png
  testing/resources/performance_overlay_gold_120fps.png
```

LANGUAGE: shell
CODE:
```
$ dart bin/main.dart --dry-run <path to log file, which can be http or a file>

Found 3 golden file changes:
  testing/resources/performance_overlay_gold_60fps.png
  testing/resources/performance_overlay_gold_90fps.png
  testing/resources/performance_overlay_gold_120fps.png

Run again without --dry-run to apply these changes.
```

----------------------------------------

TITLE: ALetter Unicode Properties Definition
DESCRIPTION: Defines Unicode code points for letter characters including Arabic mathematical symbols and Latin capital letters
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_11

LANGUAGE: unicode-data
CODE:
```
1EE7E         ; ALetter # Lo       ARABIC MATHEMATICAL STRETCHED DOTLESS FEH
1EE80..1EE89  ; ALetter # Lo  [10] ARABIC MATHEMATICAL LOOPED ALEF..ARABIC MATHEMATICAL LOOPED YEH
1EE8B..1EE9B  ; ALetter # Lo  [17] ARABIC MATHEMATICAL LOOPED LAM..ARABIC MATHEMATICAL LOOPED GHAIN
1EEA1..1EEA3  ; ALetter # Lo   [3] ARABIC MATHEMATICAL DOUBLE-STRUCK BEH..ARABIC MATHEMATICAL DOUBLE-STRUCK DAL
1EEA5..1EEA9  ; ALetter # Lo   [5] ARABIC MATHEMATICAL DOUBLE-STRUCK WAW..ARABIC MATHEMATICAL DOUBLE-STRUCK YEH
1EEAB..1EEBB  ; ALetter # Lo  [17] ARABIC MATHEMATICAL DOUBLE-STRUCK LAM..ARABIC MATHEMATICAL DOUBLE-STRUCK GHAIN
1F130..1F149  ; ALetter # So  [26] SQUARED LATIN CAPITAL LETTER A..SQUARED LATIN CAPITAL LETTER Z
1F150..1F169  ; ALetter # So  [26] NEGATIVE CIRCLED LATIN CAPITAL LETTER A..NEGATIVE CIRCLED LATIN CAPITAL LETTER Z
1F170..1F189  ; ALetter # So  [26] NEGATIVE SQUARED LATIN CAPITAL LETTER A..NEGATIVE SQUARED LATIN CAPITAL LETTER Z
```

----------------------------------------

TITLE: Engine Version Selection Process Flowchart
DESCRIPTION: This Mermaid diagram illustrates the decision flow for selecting the Flutter engine version. It shows the priority order of checking environment variables, release files, and using git merge-base commands.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/tool/Engine-artifacts.md#2025-04-21_snippet_1

LANGUAGE: mermaid
CODE:
```
stateDiagram-v2
    [*] --> CheckEnvVar
    CheckEnvVar: <code>FLUTTER_PREBUILT_ENGINE_VERSION</code> set?
    UseEnvVar: Use <code>FLUTTER_PREBUILT_ENGINE_VERSION</code>
    CheckReleaseFile: <code>bin/internal/engine.version</code> exists?
    UseReleaseFile: Use <code>bin/internal/engine.version</code>
    UseMergeBase: <code>git merge-base HEAD upstream/master</code>

    CheckEnvVar --> UseEnvVar: Yes
    CheckEnvVar --> CheckReleaseFile: No
    UseEnvVar --> [*]: Done
    CheckReleaseFile --> UseReleaseFile: Yes
    CheckReleaseFile --> UseMergeBase: No
    UseReleaseFile --> [*]: Done
    UseMergeBase --> [*]: Done
```

----------------------------------------

TITLE: Enabling Clang-tidy fix output in CI for Flutter Engine
DESCRIPTION: This code snippet shows how to modify the ci/clang_tidy.sh file to enable printing of Clang-tidy fix suggestions in CI runs. This is useful for applying large-scale lint fixes across the project.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/ci/Engine-Clang-Tidy-Linter.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
# To run on CI, just uncomment the following line:
-# FLUTTER_LINT_PRINT_FIX=1
+FLUTTER_LINT_PRINT_FIX=1
```

----------------------------------------

TITLE: Implementing Fuchsia Component Runner for Dart
DESCRIPTION: Provides the core implementation for launching and managing Dart applications as Fuchsia components, supporting non-Flutter Dart applications
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/README.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
# Dart Application Runner

Implements the `fuchsia::component::runner::ComponentRunner` FIDL interface to
launch and run Dart applications that don't use Flutter.
```

----------------------------------------

TITLE: Defining Unicode ALetter Category Code Points
DESCRIPTION: This snippet defines Unicode code points for the ALetter category, which includes letters and letter-like characters. It specifies ranges and individual code points along with their descriptions, covering multiple scripts and languages.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_7

LANGUAGE: Unicode
CODE:
```
0041..005A    ; ALetter # L&  [26] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER Z
0061..007A    ; ALetter # L&  [26] LATIN SMALL LETTER A..LATIN SMALL LETTER Z
00AA          ; ALetter # Lo       FEMININE ORDINAL INDICATOR
00B5          ; ALetter # L&       MICRO SIGN
00BA          ; ALetter # Lo       MASCULINE ORDINAL INDICATOR
00C0..00D6    ; ALetter # L&  [23] LATIN CAPITAL LETTER A WITH GRAVE..LATIN CAPITAL LETTER O WITH DIAERESIS
00D8..00F6    ; ALetter # L&  [31] LATIN CAPITAL LETTER O WITH STROKE..LATIN SMALL LETTER O WITH DIAERESIS
00F8..01BA    ; ALetter # L& [195] LATIN SMALL LETTER O WITH STROKE..LATIN SMALL LETTER EZH WITH TAIL
01BB          ; ALetter # Lo       LATIN LETTER TWO WITH STROKE
01BC..01BF    ; ALetter # L&   [4] LATIN CAPITAL LETTER TONE FIVE..LATIN LETTER WYNN
01C0..01C3    ; ALetter # Lo   [4] LATIN LETTER DENTAL CLICK..LATIN LETTER RETROFLEX CLICK
01C4..0293    ; ALetter # L& [208] LATIN CAPITAL LETTER DZ WITH CARON..LATIN SMALL LETTER EZH WITH CURL
0294          ; ALetter # Lo       LATIN LETTER GLOTTAL STOP
0295..02AF    ; ALetter # L&  [27] LATIN LETTER PHARYNGEAL VOICED FRICATIVE..LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL
02B0..02C1    ; ALetter # Lm  [18] MODIFIER LETTER SMALL H..MODIFIER LETTER REVERSED GLOTTAL STOP
02C2..02C5    ; ALetter # Sk   [4] MODIFIER LETTER LEFT ARROWHEAD..MODIFIER LETTER DOWN ARROWHEAD
02C6..02D1    ; ALetter # Lm  [12] MODIFIER LETTER CIRCUMFLEX ACCENT..MODIFIER LETTER HALF TRIANGULAR COLON
02D2..02D7    ; ALetter # Sk   [6] MODIFIER LETTER CENTRED RIGHT HALF RING..MODIFIER LETTER MINUS SIGN
02DE..02DF    ; ALetter # Sk   [2] MODIFIER LETTER RHOTIC HOOK..MODIFIER LETTER CROSS ACCENT
02E0..02E4    ; ALetter # Lm   [5] MODIFIER LETTER SMALL GAMMA..MODIFIER LETTER SMALL REVERSED GLOTTAL STOP
02E5..02EB    ; ALetter # Sk   [7] MODIFIER LETTER EXTRA-HIGH TONE BAR..MODIFIER LETTER YANG DEPARTING TONE MARK
02EC          ; ALetter # Lm       MODIFIER LETTER VOICING
02ED          ; ALetter # Sk       MODIFIER LETTER UNASPIRATED
02EE          ; ALetter # Lm       MODIFIER LETTER DOUBLE APOSTROPHE
02EF..02FF    ; ALetter # Sk  [17] MODIFIER LETTER LOW DOWN ARROWHEAD..MODIFIER LETTER LOW LEFT ARROW
0370..0373    ; ALetter # L&   [4] GREEK CAPITAL LETTER HETA..GREEK SMALL LETTER ARCHAIC SAMPI
0374          ; ALetter # Lm       GREEK NUMERAL SIGN
0376..0377    ; ALetter # L&   [2] GREEK CAPITAL LETTER PAMPHYLIAN DIGAMMA..GREEK SMALL LETTER PAMPHYLIAN DIGAMMA
037A          ; ALetter # Lm       GREEK YPOGEGRAMMENI
037B..037D    ; ALetter # L&   [3] GREEK SMALL REVERSED LUNATE SIGMA SYMBOL..GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL
037F          ; ALetter # L&       GREEK CAPITAL LETTER YOT
0386          ; ALetter # L&       GREEK CAPITAL LETTER ALPHA WITH TONOS
0388..038A    ; ALetter # L&   [3] GREEK CAPITAL LETTER EPSILON WITH TONOS..GREEK CAPITAL LETTER IOTA WITH TONOS
038C          ; ALetter # L&       GREEK CAPITAL LETTER OMICRON WITH TONOS
038E..03A1    ; ALetter # L&  [20] GREEK CAPITAL LETTER UPSILON WITH TONOS..GREEK CAPITAL LETTER RHO
03A3..03F5    ; ALetter # L&  [83] GREEK CAPITAL LETTER SIGMA..GREEK LUNATE EPSILON SYMBOL
03F7..0481    ; ALetter # L& [139] GREEK CAPITAL LETTER SHO..CYRILLIC SMALL LETTER KOPPA
048A..052F    ; ALetter # L& [166] CYRILLIC CAPITAL LETTER SHORT I WITH TAIL..CYRILLIC SMALL LETTER EL WITH DESCENDER
0531..0556    ; ALetter # L&  [38] ARMENIAN CAPITAL LETTER AYB..ARMENIAN CAPITAL LETTER FEH
0559          ; ALetter # Lm       ARMENIAN MODIFIER LETTER LEFT HALF RING
055A..055C    ; ALetter # Po   [3] ARMENIAN APOSTROPHE..ARMENIAN EXCLAMATION MARK
055E          ; ALetter # Po       ARMENIAN QUESTION MARK
0560..0588    ; ALetter # L&  [41] ARMENIAN SMALL LETTER TURNED AYB..ARMENIAN SMALL LETTER YI WITH STROKE
058A          ; ALetter # Pd       ARMENIAN HYPHEN
05F3          ; ALetter # Po       HEBREW PUNCTUATION GERESH
0620..063F    ; ALetter # Lo  [32] ARABIC LETTER KASHMIRI YEH..ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE
0640          ; ALetter # Lm       ARABIC TATWEEL
0641..064A    ; ALetter # Lo  [10] ARABIC LETTER FEH..ARABIC LETTER YEH
066E..066F    ; ALetter # Lo   [2] ARABIC LETTER DOTLESS BEH..ARABIC LETTER DOTLESS QAF
0671..06D3    ; ALetter # Lo  [99] ARABIC LETTER ALEF WASLA..ARABIC LETTER YEH BARREE WITH HAMZA ABOVE
06D5          ; ALetter # Lo       ARABIC LETTER AE
06E5..06E6    ; ALetter # Lm   [2] ARABIC SMALL WAW..ARABIC SMALL YEH
06EE..06EF    ; ALetter # Lo   [2] ARABIC LETTER DAL WITH INVERTED V..ARABIC LETTER REH WITH INVERTED V
06FA..06FC    ; ALetter # Lo   [3] ARABIC LETTER SHEEN WITH DOT BELOW..ARABIC LETTER GHAIN WITH DOT BELOW
06FF          ; ALetter # Lo       ARABIC LETTER HEH WITH INVERTED V
0710          ; ALetter # Lo       SYRIAC LETTER ALAPH
0712..072F    ; ALetter # Lo  [30] SYRIAC LETTER BETH..SYRIAC LETTER PERSIAN DHALATH
074D..07A5    ; ALetter # Lo  [89] SYRIAC LETTER SOGDIAN ZHAIN..THAANA LETTER WAAVU
07B1          ; ALetter # Lo       THAANA LETTER NAA
07CA..07EA    ; ALetter # Lo  [33] NKO LETTER A..NKO LETTER JONA RA
07F4..07F5    ; ALetter # Lm   [2] NKO HIGH TONE APOSTROPHE..NKO LOW TONE APOSTROPHE
07FA          ; ALetter # Lm       NKO LAJANYALAN
0800..0815    ; ALetter # Lo  [22] SAMARITAN LETTER ALAF..SAMARITAN LETTER TAAF
081A          ; ALetter # Lm       SAMARITAN MODIFIER LETTER EPENTHETIC YUT
0824          ; ALetter # Lm       SAMARITAN MODIFIER LETTER SHORT A
0828          ; ALetter # Lm       SAMARITAN MODIFIER LETTER I
0840..0858    ; ALetter # Lo  [25] MANDAIC LETTER HALQA..MANDAIC LETTER AIN
0860..086A    ; ALetter # Lo  [11] SYRIAC LETTER MALAYALAM NGA..SYRIAC LETTER MALAYALAM SSA
08A0..08B4    ; ALetter # Lo  [21] ARABIC LETTER BEH WITH SMALL V BELOW..ARABIC LETTER KAF WITH DOT BELOW
08B6..08C7    ; ALetter # Lo  [18] ARABIC LETTER BEH WITH SMALL MEEM ABOVE..ARABIC LETTER LAM WITH SMALL ARABIC LETTER TAH ABOVE
0904..0939    ; ALetter # Lo  [54] DEVANAGARI LETTER SHORT A..DEVANAGARI LETTER HA
093D          ; ALetter # Lo       DEVANAGARI SIGN AVAGRAHA
0950          ; ALetter # Lo       DEVANAGARI OM
0958..0961    ; ALetter # Lo  [10] DEVANAGARI LETTER QA..DEVANAGARI LETTER VOCALIC LL
0971          ; ALetter # Lm       DEVANAGARI SIGN HIGH SPACING DOT
0972..0980    ; ALetter # Lo  [15] DEVANAGARI LETTER CANDRA A..BENGALI ANJI
0985..098C    ; ALetter # Lo   [8] BENGALI LETTER A..BENGALI LETTER VOCALIC L
098F..0990    ; ALetter # Lo   [2] BENGALI LETTER E..BENGALI LETTER AI
0993..09A8    ; ALetter # Lo  [22] BENGALI LETTER O..BENGALI LETTER NA
09AA..09B0    ; ALetter # Lo   [7] BENGALI LETTER PA..BENGALI LETTER RA
09B2          ; ALetter # Lo       BENGALI LETTER LA
09B6..09B9    ; ALetter # Lo   [4] BENGALI LETTER SHA..BENGALI LETTER HA
09BD          ; ALetter # Lo       BENGALI SIGN AVAGRAHA
09CE          ; ALetter # Lo       BENGALI LETTER KHANDA TA
09DC..09DD    ; ALetter # Lo   [2] BENGALI LETTER RRA..BENGALI LETTER RHA
09DF..09E1    ; ALetter # Lo   [3] BENGALI LETTER YYA..BENGALI LETTER VOCALIC LL
09F0..09F1    ; ALetter # Lo   [2] BENGALI LETTER RA WITH MIDDLE DIAGONAL..BENGALI LETTER RA WITH LOWER DIAGONAL
09FC          ; ALetter # Lo       BENGALI LETTER VEDIC ANUSVARA
0A05..0A0A    ; ALetter # Lo   [6] GURMUKHI LETTER A..GURMUKHI LETTER UU
0A0F..0A10    ; ALetter # Lo   [2] GURMUKHI LETTER EE..GURMUKHI LETTER AI
0A13..0A28    ; ALetter # Lo  [22] GURMUKHI LETTER OO..GURMUKHI LETTER NA
0A2A..0A30    ; ALetter # Lo   [7] GURMUKHI LETTER PA..GURMUKHI LETTER RA
0A32..0A33    ; ALetter # Lo   [2] GURMUKHI LETTER LA..GURMUKHI LETTER LLA
0A35..0A36    ; ALetter # Lo   [2] GURMUKHI LETTER VA..GURMUKHI LETTER SHA
0A38..0A39    ; ALetter # Lo   [2] GURMUKHI LETTER SA..GURMUKHI LETTER HA
0A59..0A5C    ; ALetter # Lo   [4] GURMUKHI LETTER KHHA..GURMUKHI LETTER RRA
0A5E          ; ALetter # Lo       GURMUKHI LETTER FA
0A72..0A74    ; ALetter # Lo   [3] GURMUKHI IRI..GURMUKHI EK ONKAR
0A85..0A8D    ; ALetter # Lo   [9] GUJARATI LETTER A..GUJARATI VOWEL CANDRA E
0A8F..0A91    ; ALetter # Lo   [3] GUJARATI LETTER E..GUJARATI VOWEL CANDRA O
0A93..0AA8    ; ALetter # Lo  [22] GUJARATI LETTER O..GUJARATI LETTER NA
0AAA..0AB0    ; ALetter # Lo   [7] GUJARATI LETTER PA..GUJARATI LETTER RA
0AB2..0AB3    ; ALetter # Lo   [2] GUJARATI LETTER LA..GUJARATI LETTER LLA
0AB5..0AB9    ; ALetter # Lo   [5] GUJARATI LETTER VA..GUJARATI LETTER HA
0ABD          ; ALetter # Lo       GUJARATI SIGN AVAGRAHA
0AD0          ; ALetter # Lo       GUJARATI OM
0AE0..0AE1    ; ALetter # Lo   [2] GUJARATI LETTER VOCALIC RR..GUJARATI LETTER VOCALIC LL
0AF9          ; ALetter # Lo       GUJARATI LETTER ZHA
0B05..0B0C    ; ALetter # Lo   [8] ORIYA LETTER A..ORIYA LETTER VOCALIC L
0B0F..0B10    ; ALetter # Lo   [2] ORIYA LETTER E..ORIYA LETTER AI
0B13..0B28    ; ALetter # Lo  [22] ORIYA LETTER O..ORIYA LETTER NA
0B2A..0B30    ; ALetter # Lo   [7] ORIYA LETTER PA..ORIYA LETTER RA
0B32..0B33    ; ALetter # Lo   [2] ORIYA LETTER LA..ORIYA LETTER LLA
0B35..0B39    ; ALetter # Lo   [5] ORIYA LETTER VA..ORIYA LETTER HA
0B3D          ; ALetter # Lo       ORIYA SIGN AVAGRAHA
0B5C..0B5D    ; ALetter # Lo   [2] ORIYA LETTER RRA..ORIYA LETTER RHA
0B5F..0B61    ; ALetter # Lo   [3] ORIYA LETTER YYA..ORIYA LETTER VOCALIC LL
0B71          ; ALetter # Lo       ORIYA LETTER WA
0B83          ; ALetter # Lo       TAMIL SIGN VISARGA
0B85..0B8A    ; ALetter # Lo   [6] TAMIL LETTER A..TAMIL LETTER UU
0B8E..0B90    ; ALetter # Lo   [3] TAMIL LETTER E..TAMIL LETTER AI
0B92..0B95    ; ALetter # Lo   [4] TAMIL LETTER O..TAMIL LETTER KA
0B99..0B9A    ; ALetter # Lo   [2] TAMIL LETTER NGA..TAMIL LETTER CA
0B9C          ; ALetter # Lo       TAMIL LETTER JA
0B9E..0B9F    ; ALetter # Lo   [2] TAMIL LETTER NYA..TAMIL LETTER TTA
0BA3..0BA4    ; ALetter # Lo   [2] TAMIL LETTER NNA..TAMIL LETTER TA
0BA8..0BAA    ; ALetter # Lo   [3] TAMIL LETTER NA..TAMIL LETTER PA
0BAE..0BB9    ; ALetter # Lo  [12] TAMIL LETTER MA..TAMIL LETTER HA
0BD0          ; ALetter # Lo       TAMIL OM
```

----------------------------------------

TITLE: Prepending Path to Flutter Library Headers
DESCRIPTION: Prepends the `EPHEMERAL_DIR/flutter_linux/` path to each header file in the `FLUTTER_LIBRARY_HEADERS` list using the custom `list_prepend` function. This ensures that the compiler can find the header files.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/manual_tests/linux/flutter/CMakeLists.txt#2025-04-21_snippet_8

LANGUAGE: cmake
CODE:
```
list_prepend(FLUTTER_LIBRARY_HEADERS "${EPHEMERAL_DIR}/flutter_linux/")
```

----------------------------------------

TITLE: Running Clang Tidy on Entire Repository
DESCRIPTION: This command runs clang_tidy on the entire repository, or on files matching a specified regular expression. `--lint-all` lints all files, while `--lint-regex` filters files based on a regex.  Be cautious as linting the entire repository may take significant time.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/clang_tidy/README.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
```shell
dart ./tools/clang_tidy/bin/main.dart --lint-all
```
```

LANGUAGE: shell
CODE:
```
```shell
dart ./tools/clang_tidy/bin/main.dart --lint-regex=".*test.*\.cc"
```
```

----------------------------------------

TITLE: Creating OpenGL ES Proc Table in C++
DESCRIPTION: Initializes an OpenGL ES proc table using the defined resolver function.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/standalone_gles.md#2025-04-21_snippet_5

LANGUAGE: c++
CODE:
```
auto gl = std::make_unique<ProcTableGLES>(resolver);
```

----------------------------------------

TITLE: Markdown Links and References
DESCRIPTION: Link references for Flutter infrastructure team issues and documentation URLs
SOURCE: https://github.com/flutter/flutter/blob/master/docs/triage/Infra-Triage.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[`team-infra`]: https://github.com/flutter/flutter/issues?q=is%3Aissue%20state%3Aopen%20label%3Ateam-infra
```

----------------------------------------

TITLE: Link References in Markdown
DESCRIPTION: Markdown links referencing related documentation and issues about Virtual Display mode implementation
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[Android Platform Views](Android-Platform-Views.md)
[`vd-only` label](https://github.com/flutter/flutter/labels/vd-only)
[flutter/flutter#19418](https://github.com/flutter/flutter/issues/19418)
[Android SDK issue](https://issuetracker.google.com/issues/138442751)
```

----------------------------------------

TITLE: Pie Chart of Android Version Distribution
DESCRIPTION: A mermaid pie chart showing the distribution of Android versions as of June 04, 2024, with 84.5% of devices running Android 10 or higher, which is required for Vulkan support in Impeller.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/docs/android.md#2025-04-21_snippet_2

LANGUAGE: mermaid
CODE:
```
pie title Vulkan version
	"Android 10 or higher" : 84.5
	"Android 9 and lower" : 15.5
```

----------------------------------------

TITLE: Test File References for Gradle Utils
DESCRIPTION: File paths referenced for test files that verify gradle compatibility and configuration settings.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/android/README.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
gradle_utils_test.dart
create_test.dart
```

----------------------------------------

TITLE: Custom Dart SDK Build Configuration
DESCRIPTION: Example of building with a from-source Dart SDK instead of prebuilt SDK, commonly used by Dart SDK and VM developers.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_13

LANGUAGE: sh
CODE:
```
et build --config host_debug --gn-args="--no-prebuilt-dart-sdk"
```

----------------------------------------

TITLE: Defining Line Breaking Properties for Unicode Character Ranges
DESCRIPTION: This code snippet defines line breaking properties for various Unicode character ranges using a compact notation. Each line specifies a character or range, followed by a semicolon and the corresponding line breaking property code.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_14

LANGUAGE: Unicode
CODE:
```
11235;CM          # Mc         KHOJKI SIGN VIRAMA
11236..11237;CM   # Mn     [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA
11238..11239;BA   # Po     [2] KHOJKI DANDA..KHOJKI DOUBLE DANDA
1123A;AL          # Po         KHOJKI WORD SEPARATOR
1123B..1123C;BA   # Po     [2] KHOJKI SECTION MARK..KHOJKI DOUBLE SECTION MARK
1123D;AL          # Po         KHOJKI ABBREVIATION SIGN
1123E;CM          # Mn         KHOJKI SIGN SUKUN
```

----------------------------------------

TITLE: Injecting Mouse Input (Log Example)
DESCRIPTION: This snippet shows log output when injecting mouse input into the application. It demonstrates the sequence of events, including the injection, event reception by the view, and successful response.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_0

LANGUAGE: none
CODE:
```

Injecting the mouse input
[mouse-input-test.cm] INFO: [portable_ui_test.cc(227)] Injecting mouse input

View receives the event
[flutter_jit_runner] INFO: mouse-input-view.cm(flutter): mouse-input-view received input: PointerData(embedderId: 0, timeStamp: 23:18:05.031003, change: PointerChange.add, kind: PointerDeviceKind.mouse, signalKind: PointerSignalKind.none, device: 4294967295, pointerIdentifier: 0, physicalX: 641.4656372070312, physicalY: 402.9313049316406, physicalDeltaX: 0.0, physicalDeltaY: 0.0, buttons: 0, synthesized: true, pressure: 0.0, pressureMin: 0.0, pressureMax: 0.0, distance: 0.0, distanceMax: 0.0, size: 0.0, radiusMajor: 0.0, radiusMinor: 0.0, radiusMin: 0.0, radiusMax: 0.0, orientation: 0.0, tilt: 0.0, platformData: 0, scrollDeltaX: 0.0, scrollDeltaY: 0.0, panX: 0.0, panY: 0.0, panDeltaX: 0.0, panDeltaY: 0.0, scale: 0.0, rotation: 0.0)

Successfully received response from view
[mouse-input-test.cm] INFO: [mouse-input-test.cc(120)] Received MouseInput event
[mouse-input-test.cm] INFO: [mouse-input-test.cc(207)] Client received mouse change at (641.466, 402.931) with buttons 0.
[mouse-input-test.cm] INFO: [mouse-input-test.cc(211)] Expected mouse change is at approximately (641, 402) with buttons 0.

```

----------------------------------------

TITLE: Defining Unicode Ranges for Hangul Syllables
DESCRIPTION: This snippet defines Unicode ranges for various Hangul syllables, specifying their code points and properties. Each line represents a range or individual character, with the format: code point(s); property; character description.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_8

LANGUAGE: Unicode
CODE:
```
B124;H2           # Lo         HANGUL SYLLABLE NE
B125..B13F;H3     # Lo    [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH
B140;H2           # Lo         HANGUL SYLLABLE NYEO
B141..B15B;H3     # Lo    [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH
B15C;H2           # Lo         HANGUL SYLLABLE NYE
B15D..B177;H3     # Lo    [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH
B178;H2           # Lo         HANGUL SYLLABLE NO
B179..B193;H3     # Lo    [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH
B194;H2           # Lo         HANGUL SYLLABLE NWA
B195..B1AF;H3     # Lo    [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH
B1B0;H2           # Lo         HANGUL SYLLABLE NWAE
B1B1..B1CB;H3     # Lo    [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH
B1CC;H2           # Lo         HANGUL SYLLABLE NOE
B1CD..B1E7;H3     # Lo    [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH
B1E8;H2           # Lo         HANGUL SYLLABLE NYO
B1E9..B203;H3     # Lo    [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH
B204;H2           # Lo         HANGUL SYLLABLE NU
B205..B21F;H3     # Lo    [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH
B220;H2           # Lo         HANGUL SYLLABLE NWEO
B221..B23B;H3     # Lo    [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH
B23C;H2           # Lo         HANGUL SYLLABLE NWE
B23D..B257;H3     # Lo    [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH
B258;H2           # Lo         HANGUL SYLLABLE NWI
B259..B273;H3     # Lo    [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH
B274;H2           # Lo         HANGUL SYLLABLE NYU
B275..B28F;H3     # Lo    [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH
B290;H2           # Lo         HANGUL SYLLABLE NEU
B291..B2AB;H3     # Lo    [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH
B2AC;H2           # Lo         HANGUL SYLLABLE NYI
B2AD..B2C7;H3     # Lo    [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH
B2C8;H2           # Lo         HANGUL SYLLABLE NI
B2C9..B2E3;H3     # Lo    [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH
B2E4;H2           # Lo         HANGUL SYLLABLE DA
B2E5..B2FF;H3     # Lo    [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH
B300;H2           # Lo         HANGUL SYLLABLE DAE
B301..B31B;H3     # Lo    [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH
B31C;H2           # Lo         HANGUL SYLLABLE DYA
B31D..B337;H3     # Lo    [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH
B338;H2           # Lo         HANGUL SYLLABLE DYAE
B339..B353;H3     # Lo    [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH
B354;H2           # Lo         HANGUL SYLLABLE DEO
B355..B36F;H3     # Lo    [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH
B370;H2           # Lo         HANGUL SYLLABLE DE
B371..B38B;H3     # Lo    [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH
B38C;H2           # Lo         HANGUL SYLLABLE DYEO
B38D..B3A7;H3     # Lo    [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH
B3A8;H2           # Lo         HANGUL SYLLABLE DYE
B3A9..B3C3;H3     # Lo    [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH
B3C4;H2           # Lo         HANGUL SYLLABLE DO
B3C5..B3DF;H3     # Lo    [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH
B3E0;H2           # Lo         HANGUL SYLLABLE DWA
B3E1..B3FB;H3     # Lo    [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH
B3FC;H2           # Lo         HANGUL SYLLABLE DWAE
B3FD..B417;H3     # Lo    [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH
B418;H2           # Lo         HANGUL SYLLABLE DOE
B419..B433;H3     # Lo    [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH
B434;H2           # Lo         HANGUL SYLLABLE DYO
B435..B44F;H3     # Lo    [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH
B450;H2           # Lo         HANGUL SYLLABLE DU
B451..B46B;H3     # Lo    [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH
B46C;H2           # Lo         HANGUL SYLLABLE DWEO
B46D..B487;H3     # Lo    [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH
B488;H2           # Lo         HANGUL SYLLABLE DWE
B489..B4A3;H3     # Lo    [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH
B4A4;H2           # Lo         HANGUL SYLLABLE DWI
B4A5..B4BF;H3     # Lo    [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH
B4C0;H2           # Lo         HANGUL SYLLABLE DYU
B4C1..B4DB;H3     # Lo    [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH
B4DC;H2           # Lo         HANGUL SYLLABLE DEU
B4DD..B4F7;H3     # Lo    [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH
B4F8;H2           # Lo         HANGUL SYLLABLE DYI
B4F9..B513;H3     # Lo    [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH
B514;H2           # Lo         HANGUL SYLLABLE DI
B515..B52F;H3     # Lo    [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH
B530;H2           # Lo         HANGUL SYLLABLE DDA
B531..B54B;H3     # Lo    [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH
B54C;H2           # Lo         HANGUL SYLLABLE DDAE
B54D..B567;H3     # Lo    [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH
B568;H2           # Lo         HANGUL SYLLABLE DDYA
B569..B583;H3     # Lo    [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH
B584;H2           # Lo         HANGUL SYLLABLE DDYAE
B585..B59F;H3     # Lo    [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH
B5A0;H2           # Lo         HANGUL SYLLABLE DDEO
B5A1..B5BB;H3     # Lo    [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH
B5BC;H2           # Lo         HANGUL SYLLABLE DDE
B5BD..B5D7;H3     # Lo    [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH
B5D8;H2           # Lo         HANGUL SYLLABLE DDYEO
B5D9..B5F3;H3     # Lo    [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH
B5F4;H2           # Lo         HANGUL SYLLABLE DDYE
B5F5..B60F;H3     # Lo    [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH
B610;H2           # Lo         HANGUL SYLLABLE DDO
B611..B62B;H3     # Lo    [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH
B62C;H2           # Lo         HANGUL SYLLABLE DDWA
B62D..B647;H3     # Lo    [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH
B648;H2           # Lo         HANGUL SYLLABLE DDWAE
B649..B663;H3     # Lo    [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH
B664;H2           # Lo         HANGUL SYLLABLE DDOE
B665..B67F;H3     # Lo    [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH
B680;H2           # Lo         HANGUL SYLLABLE DDYO
B681..B69B;H3     # Lo    [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH
B69C;H2           # Lo         HANGUL SYLLABLE DDU
B69D..B6B7;H3     # Lo    [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH
B6B8;H2           # Lo         HANGUL SYLLABLE DDWEO
B6B9..B6D3;H3     # Lo    [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH
B6D4;H2           # Lo         HANGUL SYLLABLE DDWE
B6D5..B6EF;H3     # Lo    [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH
B6F0;H2           # Lo         HANGUL SYLLABLE DDWI
B6F1..B70B;H3     # Lo    [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH
B70C;H2           # Lo         HANGUL SYLLABLE DDYU
B70D..B727;H3     # Lo    [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH
B728;H2           # Lo         HANGUL SYLLABLE DDEU
B729..B743;H3     # Lo    [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH
B744;H2           # Lo         HANGUL SYLLABLE DDYI
B745..B75F;H3     # Lo    [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH
B760;H2           # Lo         HANGUL SYLLABLE DDI
B761..B77B;H3     # Lo    [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH
B77C;H2           # Lo         HANGUL SYLLABLE RA
B77D..B797;H3     # Lo    [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH
B798;H2           # Lo         HANGUL SYLLABLE RAE
B799..B7B3;H3     # Lo    [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH
B7B4;H2           # Lo         HANGUL SYLLABLE RYA
B7B5..B7CF;H3     # Lo    [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH
B7D0;H2           # Lo         HANGUL SYLLABLE RYAE
B7D1..B7EB;H3     # Lo    [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH
B7EC;H2           # Lo         HANGUL SYLLABLE REO
B7ED..B807;H3     # Lo    [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH
B808;H2           # Lo         HANGUL SYLLABLE RE
B809..B823;H3     # Lo    [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH
B824;H2           # Lo         HANGUL SYLLABLE RYEO
B825..B83F;H3     # Lo    [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH
B840;H2           # Lo         HANGUL SYLLABLE RYE
B841..B85B;H3     # Lo    [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH
B85C;H2           # Lo         HANGUL SYLLABLE RO
B85D..B877;H3     # Lo    [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH
B878;H2           # Lo         HANGUL SYLLABLE RWA
B879..B893;H3     # Lo    [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH
B894;H2           # Lo         HANGUL SYLLABLE RWAE
B895..B8AF;H3     # Lo    [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH
B8B0;H2           # Lo         HANGUL SYLLABLE ROE
B8B1..B8CB;H3     # Lo    [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH
B8CC;H2           # Lo         HANGUL SYLLABLE RYO
B8CD..B8E7;H3     # Lo    [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH
B8E8;H2           # Lo         HANGUL SYLLABLE RU
B8E9..B903;H3     # Lo    [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH
B904;H2           # Lo         HANGUL SYLLABLE RWEO
B905..B91F;H3     # Lo    [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH
B920;H2           # Lo         HANGUL SYLLABLE RWE
B921..B93B;H3     # Lo    [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH
B93C;H2           # Lo         HANGUL SYLLABLE RWI
B93D..B957;H3     # Lo    [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH
B958;H2           # Lo         HANGUL SYLLABLE RYU
B959..B973;H3     # Lo    [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH
B974;H2           # Lo         HANGUL SYLLABLE REU
B975..B98F;H3     # Lo    [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH
B990;H2           # Lo         HANGUL SYLLABLE RYI
B991..B9AB;H3     # Lo    [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH
B9AC;H2           # Lo         HANGUL SYLLABLE RI
B9AD..B9C7;H3     # Lo    [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH
B9C8;H2           # Lo         HANGUL SYLLABLE MA
```

----------------------------------------

TITLE: Generating Content-Based Hash for Engine Files
DESCRIPTION: Shows how to generate a consistent hash for all engine files by combining git ls-tree with git hash-object, creating a reproducible identifier for engine versions.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
git ls-tree -r HEAD engine DEPS | git hash-object --stdin
3b9abe00dec28902a589c982b5b460b0f9f38e93
```

----------------------------------------

TITLE: MidNum Unicode Properties Definition
DESCRIPTION: Defines Unicode code points for punctuation marks that can appear between numbers, including commas and semicolons
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_13

LANGUAGE: unicode-data
CODE:
```
002C          ; MidNum # Po       COMMA
003B          ; MidNum # Po       SEMICOLON
037E          ; MidNum # Po       GREEK QUESTION MARK
0589          ; MidNum # Po       ARMENIAN FULL STOP
060C..060D    ; MidNum # Po   [2] ARABIC COMMA..ARABIC DATE SEPARATOR
066C          ; MidNum # Po       ARABIC THOUSANDS SEPARATOR
07F8          ; MidNum # Po       NKO COMMA
2044          ; MidNum # Sm       FRACTION SLASH
FE10          ; MidNum # Po       PRESENTATION FORM FOR VERTICAL COMMA
FE14          ; MidNum # Po       PRESENTATION FORM FOR VERTICAL SEMICOLON
FE50          ; MidNum # Po       SMALL COMMA
FE54          ; MidNum # Po       SMALL SEMICOLON
FF0C          ; MidNum # Po       FULLWIDTH COMMA
FF1B          ; MidNum # Po       FULLWIDTH SEMICOLON
```

----------------------------------------

TITLE: Rewriting Directory Structure for Flutter Engine
DESCRIPTION: Moves files to engine/src/flutter, updates tags, and moves DEPS back to root using git filter-repo.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/history_strategy.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
git filter-repo  --to-subdirectory-filter engine/src/flutter --tag-rename '':'engine-' --force
git filter-repo --path-rename engine/src/flutter/DEPS:DEPS
```

----------------------------------------

TITLE: Comparing Git Blob Hashing Methods
DESCRIPTION: Shows how to manually regenerate a Git blob hash and verify it matches the hash from git ls-tree, demonstrating the relationship between file content and Git's internal representation.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
# Regenerate a "blob" hash
file_name="engine/src/flutter/vulkan/vulkan_window.h";  (printf "blob $(wc -c < "$file_name" | awk '{print $1}')\0"; cat "$file_name") | sha1sum
11a5a03d15ae21bde366e41291a7899eec44e5ae  -

git ls-tree -r HEAD  engine/src/flutter/vulkan/vulkan_window.h
100644 blob 11a5a03d15ae21bde366e41291a7899eec44e5ae	engine/src/flutter/vulkan/vulkan_window.h
```

----------------------------------------

TITLE: Unicode Character Properties Data
DESCRIPTION: A structured data file defining Unicode character properties. Each line contains hex code points, line break property codes (AL, AI, etc.), and character descriptions. The data covers mathematical symbols, geometric shapes, and other special characters with their corresponding properties.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_6

LANGUAGE: unicode-data
CODE:
```
2224;AL           # Sm         DOES NOT DIVIDE
2225;AI           # Sm         PARALLEL TO
2226;AL           # Sm         NOT PARALLEL TO
2227..222C;AI     # Sm     [6] LOGICAL AND..DOUBLE INTEGRAL
2228..222C;AI     # Sm     [6] LOGICAL AND..DOUBLE INTEGRAL
```

----------------------------------------

TITLE: JSON Redirect Entry Format for Firebase Configuration
DESCRIPTION: Standard format for creating a tooling redirect in the Firebase configuration file, specifying the source path, destination URL, and redirect type
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/use-reliable-links.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{ "source": "/to/<redirect-name>", "destination": "<url>", "type": 301 }
```

----------------------------------------

TITLE: Mapping Unicode Ranges for Hangul Syllables
DESCRIPTION: This snippet contains the Unicode code point mappings for Hangul syllables. Each line follows the format of code point (or range), property (H2 or H3), and description. The H2 property represents single characters while H3 represents ranges of 27 characters.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_11

LANGUAGE: unicode-mapping
CODE:
```
CB2C;H2           # Lo         HANGUL SYLLABLE JJYO
CB2D..CB47;H3     # Lo    [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH
CB48;H2           # Lo         HANGUL SYLLABLE JJU
CB49..CB63;H3     # Lo    [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH
CB64;H2           # Lo         HANGUL SYLLABLE JJWEO
CB65..CB7F;H3     # Lo    [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH
CB80;H2           # Lo         HANGUL SYLLABLE JJWE
CB81..CB9B;H3     # Lo    [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH
CB9C;H2           # Lo         HANGUL SYLLABLE JJWI
CB9D..CBB7;H3     # Lo    [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH
CBB8;H2           # Lo         HANGUL SYLLABLE JJYU
CBB9..CBD3;H3     # Lo    [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH
CBD4;H2           # Lo         HANGUL SYLLABLE JJEU
CBD5..CBEF;H3     # Lo    [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH
CBF0;H2           # Lo         HANGUL SYLLABLE JJYI
CBF1..CC0B;H3     # Lo    [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH
CC0C;H2           # Lo         HANGUL SYLLABLE JJI
CC0D..CC27;H3     # Lo    [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH
CC28;H2           # Lo         HANGUL SYLLABLE CA
CC29..CC43;H3     # Lo    [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH
CC44;H2           # Lo         HANGUL SYLLABLE CAE
CC45..CC5F;H3     # Lo    [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH
CC60;H2           # Lo         HANGUL SYLLABLE CYA
CC61..CC7B;H3     # Lo    [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH
CC7C;H2           # Lo         HANGUL SYLLABLE CYAE
CC7D..CC97;H3     # Lo    [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH
CC98;H2           # Lo         HANGUL SYLLABLE CEO
CC99..CCB3;H3     # Lo    [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH
CCB4;H2           # Lo         HANGUL SYLLABLE CE
CCB5..CCCF;H3     # Lo    [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH
CCD0;H2           # Lo         HANGUL SYLLABLE CYEO
CCD1..CCEB;H3     # Lo    [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH
CCEC;H2           # Lo         HANGUL SYLLABLE CYE
CCED..CD07;H3     # Lo    [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH
CD08;H2           # Lo         HANGUL SYLLABLE CO
CD09..CD23;H3     # Lo    [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH
CD24;H2           # Lo         HANGUL SYLLABLE CWA
CD25..CD3F;H3     # Lo    [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH
CD40;H2           # Lo         HANGUL SYLLABLE CWAE
CD41..CD5B;H3     # Lo    [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH
CD5C;H2           # Lo         HANGUL SYLLABLE COE
CD5D..CD77;H3     # Lo    [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH
CD78;H2           # Lo         HANGUL SYLLABLE CYO
CD79..CD93;H3     # Lo    [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH
CD94;H2           # Lo         HANGUL SYLLABLE CU
CD95..CDAF;H3     # Lo    [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH
CDB0;H2           # Lo         HANGUL SYLLABLE CWEO
CDB1..CDCB;H3     # Lo    [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH
CDCC;H2           # Lo         HANGUL SYLLABLE CWE
CDCD..CDE7;H3     # Lo    [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH
CDE8;H2           # Lo         HANGUL SYLLABLE CWI
CDE9..CE03;H3     # Lo    [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH
CE04;H2           # Lo         HANGUL SYLLABLE CYU
CE05..CE1F;H3     # Lo    [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH
CE20;H2           # Lo         HANGUL SYLLABLE CEU
CE21..CE3B;H3     # Lo    [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH
CE3C;H2           # Lo         HANGUL SYLLABLE CYI
CE3D..CE57;H3     # Lo    [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH
CE58;H2           # Lo         HANGUL SYLLABLE CI
CE59..CE73;H3     # Lo    [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH
CE74;H2           # Lo         HANGUL SYLLABLE KA
CE75..CE8F;H3     # Lo    [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH
CE90;H2           # Lo         HANGUL SYLLABLE KAE
CE91..CEAB;H3     # Lo    [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH
CEAC;H2           # Lo         HANGUL SYLLABLE KYA
CEAD..CEC7;H3     # Lo    [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH
CEC8;H2           # Lo         HANGUL SYLLABLE KYAE
CEC9..CEE3;H3     # Lo    [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH
CEE4;H2           # Lo         HANGUL SYLLABLE KEO
CEE5..CEFF;H3     # Lo    [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH
CF00;H2           # Lo         HANGUL SYLLABLE KE
CF01..CF1B;H3     # Lo    [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH
CF1C;H2           # Lo         HANGUL SYLLABLE KYEO
CF1D..CF37;H3     # Lo    [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH
CF38;H2           # Lo         HANGUL SYLLABLE KYE
CF39..CF53;H3     # Lo    [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH
CF54;H2           # Lo         HANGUL SYLLABLE KO
CF55..CF6F;H3     # Lo    [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH
CF70;H2           # Lo         HANGUL SYLLABLE KWA
CF71..CF8B;H3     # Lo    [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH
CF8C;H2           # Lo         HANGUL SYLLABLE KWAE
CF8D..CFA7;H3     # Lo    [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH
CFA8;H2           # Lo         HANGUL SYLLABLE KOE
CFA9..CFC3;H3     # Lo    [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH
CFC4;H2           # Lo         HANGUL SYLLABLE KYO
CFC5..CFDF;H3     # Lo    [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH
CFE0;H2           # Lo         HANGUL SYLLABLE KU
CFE1..CFFB;H3     # Lo    [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH
CFFC;H2           # Lo         HANGUL SYLLABLE KWEO
CFFD..D017;H3     # Lo    [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH
D018;H2           # Lo         HANGUL SYLLABLE KWE
D019..D033;H3     # Lo    [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH
D034;H2           # Lo         HANGUL SYLLABLE KWI
D035..D04F;H3     # Lo    [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH
D050;H2           # Lo         HANGUL SYLLABLE KYU
D051..D06B;H3     # Lo    [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH
D06C;H2           # Lo         HANGUL SYLLABLE KEU
D06D..D087;H3     # Lo    [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH
D088;H2           # Lo         HANGUL SYLLABLE KYI
D089..D0A3;H3     # Lo    [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH
D0A4;H2           # Lo         HANGUL SYLLABLE KI
D0A5..D0BF;H3     # Lo    [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH
D0C0;H2           # Lo         HANGUL SYLLABLE TA
D0C1..D0DB;H3     # Lo    [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH
D0DC;H2           # Lo         HANGUL SYLLABLE TAE
D0DD..D0F7;H3     # Lo    [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH
D0F8;H2           # Lo         HANGUL SYLLABLE TYA
D0F9..D113;H3     # Lo    [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH
D114;H2           # Lo         HANGUL SYLLABLE TYAE
D115..D12F;H3     # Lo    [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH
D130;H2           # Lo         HANGUL SYLLABLE TEO
D131..D14B;H3     # Lo    [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH
D14C;H2           # Lo         HANGUL SYLLABLE TE
D14D..D167;H3     # Lo    [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH
D168;H2           # Lo         HANGUL SYLLABLE TYEO
D169..D183;H3     # Lo    [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH
D184;H2           # Lo         HANGUL SYLLABLE TYE
D185..D19F;H3     # Lo    [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH
D1A0;H2           # Lo         HANGUL SYLLABLE TO
D1A1..D1BB;H3     # Lo    [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH
D1BC;H2           # Lo         HANGUL SYLLABLE TWA
D1BD..D1D7;H3     # Lo    [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH
D1D8;H2           # Lo         HANGUL SYLLABLE TWAE
D1D9..D1F3;H3     # Lo    [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH
D1F4;H2           # Lo         HANGUL SYLLABLE TOE
D1F5..D20F;H3     # Lo    [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH
D210;H2           # Lo         HANGUL SYLLABLE TYO
D211..D22B;H3     # Lo    [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH
D22C;H2           # Lo         HANGUL SYLLABLE TU
D22D..D247;H3     # Lo    [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH
D248;H2           # Lo         HANGUL SYLLABLE TWEO
D249..D263;H3     # Lo    [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH
D264;H2           # Lo         HANGUL SYLLABLE TWE
D265..D27F;H3     # Lo    [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH
D280;H2           # Lo         HANGUL SYLLABLE TWI
D281..D29B;H3     # Lo    [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH
D29C;H2           # Lo         HANGUL SYLLABLE TYU
D29D..D2B7;H3     # Lo    [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH
D2B8;H2           # Lo         HANGUL SYLLABLE TEU
D2B9..D2D3;H3     # Lo    [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH
D2D4;H2           # Lo         HANGUL SYLLABLE TYI
D2D5..D2EF;H3     # Lo    [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH
D2F0;H2           # Lo         HANGUL SYLLABLE TI
D2F1..D30B;H3     # Lo    [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH
D30C;H2           # Lo         HANGUL SYLLABLE PA
D30D..D327;H3     # Lo    [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH
D328;H2           # Lo         HANGUL SYLLABLE PAE
D329..D343;H3     # Lo    [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH
D344;H2           # Lo         HANGUL SYLLABLE PYA
D345..D35F;H3     # Lo    [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH
D360;H2           # Lo         HANGUL SYLLABLE PYAE
D361..D37B;H3     # Lo    [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH
D37C;H2           # Lo         HANGUL SYLLABLE PEO
D37D..D397;H3     # Lo    [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH
D398;H2           # Lo         HANGUL SYLLABLE PE
D399..D3B3;H3     # Lo    [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH
D3B4;H2           # Lo         HANGUL SYLLABLE PYEO
D3B5..D3CF;H3     # Lo    [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH
D3D0;H2           # Lo         HANGUL SYLLABLE PYE
```

----------------------------------------

TITLE: Defining Unicode Regional Indicator Property Range
DESCRIPTION: Defines the range of Unicode code points for Regional Indicator symbols, covering letters A through Z used in flag emoji sequences.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_4

LANGUAGE: unicode
CODE:
```
1F1E6..1F1FF  ; Regional_Indicator # So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z
```

----------------------------------------

TITLE: Define list prepend function
DESCRIPTION: Defines a CMake function `list_prepend` that prepends a specified prefix to each element of a given list.  This function mimics the behavior of `list(TRANSFORM ... PREPEND ...)` which isn't available in CMake 3.10.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/flutter_gallery/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
function(list_prepend LIST_NAME PREFIX)
    set(NEW_LIST "")
    foreach(element ${${LIST_NAME}})
        list(APPEND NEW_LIST "${PREFIX}${element}")
    endforeach(element)
    set(${LIST_NAME} "${NEW_LIST}" PARENT_SCOPE)
endfunction()
```

----------------------------------------

TITLE: Detecting Trailing Space in Flutter
DESCRIPTION: This snippet demonstrates the detection of trailing spaces in code. It uses a caret (^) to indicate the position of the trailing space.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/test/analyze-test-input/root/packages/foo/spaces.txt#2025-04-21_snippet_0

LANGUAGE: Dart
CODE:
```
Trailing space: 
               ^
```

----------------------------------------

TITLE: Verifying MacOS SDK Path with find_sdk.py
DESCRIPTION: This command checks if the MacOS SDK path is correctly detected for building Flutter engine. It uses the find_sdk.py script to validate that version 10.13 will be used instead of the default Xcode 10 SDK.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Supporting-legacy-platforms.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
python your-flutter-engine-path/engine/src/build/mac/find_sdk.py 10.12
```

----------------------------------------

TITLE: Running Engine Tool Tests
DESCRIPTION: Command for running tests for the engine tool itself during development.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/engine_tool/README.md#2025-04-21_snippet_15

LANGUAGE: sh
CODE:
```
et test //flutter/tools/engine_tool/...
```

----------------------------------------

TITLE: Sample Flutter CI Log Output for Golden File Mismatch
DESCRIPTION: Displays an example of the log output that the scraper tool looks for to identify golden file changes. It includes the file paths and base64 encoded image data.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/build_bucket_golden_scraper/README.md#2025-04-22_snippet_2

LANGUAGE: txt
CODE:
```
Golden file mismatch. Please check the difference between /b/s/w/ir/cache/builder/src/flutter/testing/resources/performance_overlay_gold_90fps.png and /b/s/w/ir/cache/builder/src/flutter/testing/resources/performance_overlay_gold_90fps_new.png, and  replace the former with the latter if the difference looks good.
S
See also the base64 encoded /b/s/w/ir/cache/builder/src/flutter/testing/resources/performance_overlay_gold_90fps_new.png:
iVBORw0KGgoAAAANSUhEUgAAA+gAAAPoCAYAAABNo9TkAAAABHNCSVQICAgIfAhkiAAAIABJREFUeJzs3elzFWeeJ/rnHB3tSEILktgEBrPvYBbbUF4K24X3t (...omitted)
```

----------------------------------------

TITLE: Creating and Setting Ref for AMD64 Package - Shell Script
DESCRIPTION: This snippet illustrates the procedure to set the latest reference for the AMD64 mobile provisioning package. Similar to the ARM64 snippet, it requires the instance ID from the latest upload.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/cipd/mobileprovision/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
cipd set-ref flutter_internal/mac/mobileprovision/mac-amd64 -ref latest -version AMD64_INSTANCE_ID
```

----------------------------------------

TITLE: Clean up persistent state file after release
DESCRIPTION: This command deletes the persistent state file created by the conductor, either because the release was successfully completed or abandoned.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
conductor clean
```

----------------------------------------

TITLE: Listing Key Functionality in iOS Add2App Demo
DESCRIPTION: This markdown snippet outlines the main components and functionalities implemented in the iOS Add2App demo project. It includes native iOS views, Flutter views in different configurations, and hybrid views demonstrating interaction between native and Flutter components.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_add2app_life_cycle/README.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
1. A regular iOS view controller (UIViewController), similar to the default
   `flutter create` template (NativeViewController.m).
1. A FlutterViewController subclass that takes over the full screen. Demos showing
   this both from a cold/fresh engine state and a warm engine state
   (FullScreenViewController.m).
1. A demo of pushing a FlutterViewController on as a child view.
1. A demo of showing both the native and the Flutter views using a platform
   channel to interact with each other (HybridViewController.m).
1. A demo of showing two FlutterViewControllers simultaneously
   (DualViewController.m).
```

----------------------------------------

TITLE: Uploading Android SDK to CIPD - Bash Script
DESCRIPTION: This Bash script is used to create and upload Android SDK packages to CIPD. It automates the download and packaging process, ensuring that the Flutter engine has a stable version to depend on.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Engine's-Android-API-version.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ cd tools/android-sdk && ./create_cipd_packages.sh <new_version_tag> <path_to_your_local_android_sdk>
```

----------------------------------------

TITLE: Starting Fuchsia Package Server
DESCRIPTION: This shell command starts a Fuchsia package server. It changes the current directory to the Fuchsia directory and then runs the `fx serve` command.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/mouse-input/README.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
cd "$FUCHSIA_DIR"
fx serve
```

----------------------------------------

TITLE: Referencing Gradle Files in Flutter Android Tools
DESCRIPTION: File paths referenced in the documentation for key configuration files that control Android build settings and dependency versions.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/lib/src/android/README.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
gradle_utils.dart
flutter.groovy
dependency_version_checker.gradle.kts
build.gradle.kts
```

----------------------------------------

TITLE: Starting Fuchsia Package Server
DESCRIPTION: This snippet navigates to the Fuchsia directory and starts the package server, which is necessary for running unit tests locally.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/unit_tests.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
cd "$FUCHSIA_DIR"
fx serve
```

----------------------------------------

TITLE: Defining a Transform with Changes - YAML
DESCRIPTION: This YAML snippet represents a sample transform that includes a title, date, and changes to be applied to an API element. The format follows the prescribed structure for defining transformations within the Flutter project.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
title: 'Descriptive title'
date: 2020-09-14
element: ...
changes:
  - ...
  - ...
```

----------------------------------------

TITLE: Building Flutter Engine for Fuchsia
DESCRIPTION: Commands to build Flutter engine components for Fuchsia debugging and testing.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
$ENGINE_DIR/flutter/tools/gn --fuchsia --no-lto && ninja -C $ENGINE_DIR/out/fuchsia_debug_x64 flutter/shell/platform/fuchsia/flutter/tests/
integration/touch_input:tests
```

----------------------------------------

TITLE: Test Package Description in Markdown
DESCRIPTION: README file describing the purpose of the test package for Flutter widget interactions between Material and Cupertino design systems.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter/test/cupertino/material/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Tests for the Cupertino+Material mixed usages

In this package, we test for interactions between Material and Cupertino
widgets.
```

----------------------------------------

TITLE: Demonstrating Rename Resilience with Git Blob Hashes
DESCRIPTION: Shows how Git blob hashes remain unchanged when files are renamed, illustrating how content-based hashing could be made resilient to file renames.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/monorepo/engine_binary_hashing.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
#
# Not using --object-only for demonstration. We would use --blob-only to get just the hash
#
$ git ls-tree -r HEAD README.md
100644 blob 38daa079e3693e4940f0e9bc0201b7f5fda627e2	README.md

$ git mv README.md DONTREADME.md
$ git commit -a -m "test"

$ git ls-tree -r HEAD README.md
#nothing to see here, its not in the tree

$ git ls-tree -r HEAD DONTREADME.md
100644 blob 38daa079e3693e4940f0e9bc0201b7f5fda627e2	DONTREADME.md
```

----------------------------------------

TITLE: Markdown Project Description
DESCRIPTION: This snippet provides a basic description of a Flutter project intended for testing the spell check functionality of the EditableText widget. It uses markdown to describe the project's purpose.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/spell_check/README.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# spell_check

A Flutter project for testing spell check for [EditableText].
```

----------------------------------------

TITLE: Proceed to the next step in the release process
DESCRIPTION: This command allows the user to advance to the next step after completing the necessary manual tasks outlined by the conductor during the release process.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/README.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
conductor next
```

----------------------------------------

TITLE: Displaying Flutter Logo in HTML/Markdown
DESCRIPTION: This snippet shows how to display the Flutter logo using HTML within a Markdown file. It includes a responsive image that changes based on the user's color scheme preference.
SOURCE: https://github.com/flutter/flutter/blob/master/README.md#2025-04-21_snippet_0

LANGUAGE: HTML
CODE:
```
<a href="https://flutter.dev/">
  <h1 align="center">
    <picture>
      <source media="(prefers-color-scheme: dark)" srcset="https://storage.googleapis.com/cms-storage-bucket/6e19fee6b47b36ca613f.png">
      <img alt="Flutter" src="https://storage.googleapis.com/cms-storage-bucket/c823e53b3a1a7b0d36a9.png">
    </picture>
  </h1>
</a>
```

----------------------------------------

TITLE: Adding Profile Fallbacks in Flutter Android Build Types
DESCRIPTION: This YAML snippet adds fallback configurations for build types, aiding Flutter projects created with older tools when they use the profile configuration.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_5

LANGUAGE: YAML
CODE:
```
profile {
    matchingFallbacks = ['debug', 'release']
}
```

----------------------------------------

TITLE: Displaying Successful Flutter Test Results
DESCRIPTION: This snippet shows the output of a successful Flutter test run. It indicates that all tests have passed, with a timestamp prefix.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/automated_tests/flutter_test/package_assets_expectation.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
[0-9]+:[0-9]+ [+]1: All tests passed!
```

----------------------------------------

TITLE: Executing Touch Input Test Log Example
DESCRIPTION: Example log output showing the injection of a tap event and the view's response, demonstrating coordinate translation and event handling.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/flutter/tests/integration/touch-input/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
Injecting the tap event
[touch-input-test.cm] INFO: [portable_ui_test.cc(193)] Injecting tap at (-500, -500)

View receives the event
[flutter_jit_runner] INFO: touch-input-view.cm(flutter): touch-input-view received tap: PointerData(embedderId: 0, timeStamp: 0:01:03.623259,
change: PointerChange.add, kind: PointerDeviceKind.touch, signalKind: PointerSignalKind.none, device: -4294967295, pointerIdentifier: 0,
physicalX: 319.99998331069946, physicalY: 199.99999284744263, physicalDeltaX: 0.0, physicalDeltaY: 0.0, buttons: 0, synthesized: false,
pressure: 0.0, pressureMin: 0.0, pressureMax: 0.0, distance: 0.0, distanceMax: 0.0, size: 0.0, radiusMajor: 0.0, radiusMinor: 0.0,
radiusMin: 0.0, radiusMax: 0.0, orientation: 0.0, tilt: 0.0, platformData: 0, scrollDeltaX: 0.0, scrollDeltaY: 0.0, panX: 0.0, panY: 0.0,
panDeltaX: 0.0, panDeltaY: 0.0, scale: 0.0, rotation: 0.0)

Successfully received response from view
[touch-input-test.cm] INFO: [touch-input-test.cc(162)] Received ReportTouchInput event
[touch-input-test.cm] INFO: [touch-input-test.cc(255)] Expecting event for component touch-input-view at (320, 200)
[touch-input-test.cm] INFO: [touch-input-test.cc(257)] Received event for component touch-input-view at (320, 200), accounting for pixel scale of 1
```

----------------------------------------

TITLE: Viewing a Failed Embedder Test Output in CI
DESCRIPTION: Shows the typical error output when an embedder test fails because the actual image output doesn't match the expected golden image file.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/embedder/fixtures/README.md#2025-04-22_snippet_0

LANGUAGE: txt
CODE:
```
[0;32m[ RUN      ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend
[ERROR:flutter/shell/platform/embedder/tests/embedder_unittests_util.cc(199)] Image did not match expectation.
Expected:/b/s/w/ir/cache/builder/src/out/host_debug_unopt/gen/flutter/shell/platform/embedder/assets/expectation_verifyb143464703_soft_noxform.png
Got:/b/s/w/ir/cache/builder/src/out/host_debug_unopt/gen/flutter/shell/platform/embedder/assets/actual_verifyb143464703_soft_noxform.png

../../flutter/shell/platform/embedder/tests/embedder_unittests.cc:1335: Failure
Value of: ImageMatchesFixture("verifyb143464703_soft_noxform.png", rendered_scene)
  Actual: false
Expected: true
[0;31m[  FAILED  ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend (8077 ms)
[0;32m[----------] [m1 test from EmbedderTest (8080 ms total)

[0;32m[----------] [mGlobal test environment tear-down
[0;32m[==========] [m1 test from 1 test suite ran. (8080 ms total)
[0;32m[  PASSED  ] [m0 tests.
[0;31m[  FAILED  ] [m1 test, listed below:
[0;31m[  FAILED  ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend

 1 FAILED TEST
[13/296] EmbedderTest.VerifyB143464703WithSoftwareBackend returned/aborted with exit code 1 (8226 ms)
[14/296] EmbedderTest.VerifyB143464703WithSoftwareBackend (8484 ms)
[INFO:test_timeout_listener.cc(76)] Test timeout of 300 seconds per test case will be enforced.
[0;33mNote: Google Test filter = EmbedderTest.VerifyB143464703WithSoftwareBackend
[m[0;32m[==========] [mRunning 1 test from 1 test suite.
[0;32m[----------] [mGlobal test environment set-up.
[0;32m[----------] [m1 test from EmbedderTest
[0;33m[ DISABLED ] [mEmbedderTest.DISABLED_CanLaunchAndShutdownMultipleTimes
[0;32m[ RUN      ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend
[ERROR:flutter/shell/platform/embedder/tests/embedder_unittests_util.cc(199)] Image did not match expectation.
Expected:/b/s/w/ir/cache/builder/src/out/host_debug_unopt/gen/flutter/shell/platform/embedder/assets/expectation_verifyb143464703_soft_noxform.png
Got:/b/s/w/ir/cache/builder/src/out/host_debug_unopt/gen/flutter/shell/platform/embedder/assets/actual_verifyb143464703_soft_noxform.png

../../flutter/shell/platform/embedder/tests/embedder_unittests.cc:1335: Failure
Value of: ImageMatchesFixture("verifyb143464703_soft_noxform.png", rendered_scene)
  Actual: false
Expected: true
[0;31m[  FAILED  ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend (8348 ms)
[0;32m[----------] [m1 test from EmbedderTest (8350 ms total)

[0;32m[----------] [mGlobal test environment tear-down
[0;32m[==========] [m1 test from 1 test suite ran. (8350 ms total)
[0;32m[  PASSED  ] [m0 tests.
[0;31m[  FAILED  ] [m1 test, listed below:
[0;31m[  FAILED  ] [mEmbedderTest.VerifyB143464703WithSoftwareBackend
```

----------------------------------------

TITLE: Unicode Line Breaking Properties Definition (U+201D-U+2223)
DESCRIPTION: Defines line breaking properties for Unicode code points using two-letter codes. Each line contains the code point (or range), breaking property code, general category, and character name.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_5

LANGUAGE: unicode
CODE:
```
201D;QU           # Pf         RIGHT DOUBLE QUOTATION MARK
201E;OP           # Ps         DOUBLE LOW-9 QUOTATION MARK
201F;QU           # Pi         DOUBLE HIGH-REVERSED-9 QUOTATION MARK
2020..2021;AI     # Po     [2] DAGGER..DOUBLE DAGGER
2022..2023;AL     # Po     [2] BULLET..TRIANGULAR BULLET
```

----------------------------------------

TITLE: Starting a Flutter release process using Conductor
DESCRIPTION: This command initializes the release process by specifying essential parameters such as candidate branch, release channel, GitHub username, and Dart revision. It helps in determining the proper version increment or allows overriding it if necessary.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
conductor start \
  --candidate-branch=flutter-2.2-candidate.10 \
  --release-channel=beta \
  --github-username=kingOfDevelopers \
  --dart-revision=4511eb2a779a612d9d6b2012123575013e0aef12 \

```

----------------------------------------

TITLE: Modifying kMockResolver in C++
DESCRIPTION: This diff shows how to update the `kMockResolver` to include the newly added mock GLES function. It adds an `else if` clause to check for the function name and return a pointer to the function if it matches. If the function name doesn't match, it defaults to `glDoNothing`.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/renderer/backend/gles/test/README.md#2025-04-21_snippet_2

LANGUAGE: cc
CODE:
```
+ else if (strcmp(name, "glFooBar") == 0) {
+  return reinterpret_cast<void*>(&glFooBar);
  } else {
   return reinterpret_cast<void*>(&glDoNothing);
  }
```

----------------------------------------

TITLE: Defining Unicode 'Extend' Category Code Points
DESCRIPTION: This snippet defines Unicode code points and ranges that belong to the 'Extend' category. It includes characters from various scripts and writing systems, primarily consisting of combining marks, vowel signs, and other modifiers that extend the base character they're associated with.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_2

LANGUAGE: Unicode
CODE:
```
0EB1          ; Extend # Mn       LAO VOWEL SIGN MAI KAN
0EB4..0EBC    ; Extend # Mn   [9] LAO VOWEL SIGN I..LAO SEMIVOWEL SIGN LO
0EC8..0ECD    ; Extend # Mn   [6] LAO TONE MAI EK..LAO NIGGAHITA
0F18..0F19    ; Extend # Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS
0F35          ; Extend # Mn       TIBETAN MARK NGAS BZUNG NYI ZLA
0F37          ; Extend # Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS
0F39          ; Extend # Mn       TIBETAN MARK TSA -PHRU
0F3E..0F3F    ; Extend # Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES
0F71..0F7E    ; Extend # Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO
0F7F          ; Extend # Mc       TIBETAN SIGN RNAM BCAD
0F80..0F84    ; Extend # Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA
0F86..0F87    ; Extend # Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS
0F8D..0F97    ; Extend # Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA
0F99..0FBC    ; Extend # Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA
0FC6          ; Extend # Mn       TIBETAN SYMBOL PADMA GDAN
102B..102C    ; Extend # Mc   [2] MYANMAR VOWEL SIGN TALL AA..MYANMAR VOWEL SIGN AA
102D..1030    ; Extend # Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU
1031          ; Extend # Mc       MYANMAR VOWEL SIGN E
1032..1037    ; Extend # Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW
1038          ; Extend # Mc       MYANMAR SIGN VISARGA
1039..103A    ; Extend # Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT
103B..103C    ; Extend # Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA
103D..103E    ; Extend # Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA
1056..1057    ; Extend # Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR
1058..1059    ; Extend # Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL
105E..1060    ; Extend # Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA
1062..1064    ; Extend # Mc   [3] MYANMAR VOWEL SIGN SGAW KAREN EU..MYANMAR TONE MARK SGAW KAREN KE PHO
1067..106D    ; Extend # Mc   [7] MYANMAR VOWEL SIGN WESTERN PWO KAREN EU..MYANMAR SIGN WESTERN PWO KAREN TONE-5
1071..1074    ; Extend # Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE
1082          ; Extend # Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA
1083..1084    ; Extend # Mc   [2] MYANMAR VOWEL SIGN SHAN AA..MYANMAR VOWEL SIGN SHAN E
1085..1086    ; Extend # Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y
1087..108C    ; Extend # Mc   [6] MYANMAR SIGN SHAN TONE-2..MYANMAR SIGN SHAN COUNCIL TONE-3
108D          ; Extend # Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE
108F          ; Extend # Mc       MYANMAR SIGN RUMAI PALAUNG TONE-5
109A..109C    ; Extend # Mc   [3] MYANMAR SIGN KHAMTI TONE-1..MYANMAR VOWEL SIGN AITON A
109D          ; Extend # Mn       MYANMAR VOWEL SIGN AITON AI
135D..135F    ; Extend # Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK
1712..1714    ; Extend # Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA
1732..1734    ; Extend # Mn   [3] HANUNOO VOWEL SIGN I..HANUNOO SIGN PAMUDPOD
1752..1753    ; Extend # Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U
1772..1773    ; Extend # Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U
17B4..17B5    ; Extend # Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA
17B6          ; Extend # Mc       KHMER VOWEL SIGN AA
17B7..17BD    ; Extend # Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA
17BE..17C5    ; Extend # Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU
17C6          ; Extend # Mn       KHMER SIGN NIKAHIT
17C7..17C8    ; Extend # Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU
17C9..17D3    ; Extend # Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT
17DD          ; Extend # Mn       KHMER SIGN ATTHACAN
180B..180D    ; Extend # Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE
1885..1886    ; Extend # Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA
18A9          ; Extend # Mn       MONGOLIAN LETTER ALI GALI DAGALGA
1920..1922    ; Extend # Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U
1923..1926    ; Extend # Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU
1927..1928    ; Extend # Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O
1929..192B    ; Extend # Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA
1930..1931    ; Extend # Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA
1932          ; Extend # Mn       LIMBU SMALL LETTER ANUSVARA
1933..1938    ; Extend # Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA
1939..193B    ; Extend # Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I
1A17..1A18    ; Extend # Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U
1A19..1A1A    ; Extend # Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O
1A1B          ; Extend # Mn       BUGINESE VOWEL SIGN AE
1A55          ; Extend # Mc       TAI THAM CONSONANT SIGN MEDIAL RA
1A56          ; Extend # Mn       TAI THAM CONSONANT SIGN MEDIAL LA
1A57          ; Extend # Mc       TAI THAM CONSONANT SIGN LA TANG LAI
1A58..1A5E    ; Extend # Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA
1A60          ; Extend # Mn       TAI THAM SIGN SAKOT
1A61          ; Extend # Mc       TAI THAM VOWEL SIGN A
1A62          ; Extend # Mn       TAI THAM VOWEL SIGN MAI SAT
1A63..1A64    ; Extend # Mc   [2] TAI THAM VOWEL SIGN AA..TAI THAM VOWEL SIGN TALL AA
1A65..1A6C    ; Extend # Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW
1A6D..1A72    ; Extend # Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI
1A73..1A7C    ; Extend # Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN
1A7F          ; Extend # Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT
1AB0..1ABD    ; Extend # Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW
1ABE          ; Extend # Me       COMBINING PARENTHESES OVERLAY
1ABF..1AC0    ; Extend # Mn   [2] COMBINING LATIN SMALL LETTER W BELOW..COMBINING LATIN SMALL LETTER TURNED W BELOW
1B00..1B03    ; Extend # Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG
1B04          ; Extend # Mc       BALINESE SIGN BISAH
1B34          ; Extend # Mn       BALINESE SIGN REREKAN
1B35          ; Extend # Mc       BALINESE VOWEL SIGN TEDUNG
1B36..1B3A    ; Extend # Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA
1B3B          ; Extend # Mc       BALINESE VOWEL SIGN RA REPA TEDUNG
1B3C          ; Extend # Mn       BALINESE VOWEL SIGN LA LENGA
1B3D..1B41    ; Extend # Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG
1B42          ; Extend # Mn       BALINESE VOWEL SIGN PEPET
1B43..1B44    ; Extend # Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG
1B6B..1B73    ; Extend # Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG
1B80..1B81    ; Extend # Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR
1B82          ; Extend # Mc       SUNDANESE SIGN PANGWISAD
1BA1          ; Extend # Mc       SUNDANESE CONSONANT SIGN PAMINGKAL
1BA2..1BA5    ; Extend # Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU
1BA6..1BA7    ; Extend # Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG
1BA8..1BA9    ; Extend # Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG
1BAA          ; Extend # Mc       SUNDANESE SIGN PAMAAEH
1BAB..1BAD    ; Extend # Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA
1BE6          ; Extend # Mn       BATAK SIGN TOMPI
1BE7          ; Extend # Mc       BATAK VOWEL SIGN E
1BE8..1BE9    ; Extend # Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE
1BEA..1BEC    ; Extend # Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O
1BED          ; Extend # Mn       BATAK VOWEL SIGN KARO O
1BEE          ; Extend # Mc       BATAK VOWEL SIGN U
1BEF..1BF1    ; Extend # Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H
1BF2..1BF3    ; Extend # Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN
1C24..1C2B    ; Extend # Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU
1C2C..1C33    ; Extend # Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T
1C34..1C35    ; Extend # Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG
1C36..1C37    ; Extend # Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA
1CD0..1CD2    ; Extend # Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA
1CD4..1CE0    ; Extend # Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA
1CE1          ; Extend # Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA
1CE2..1CE8    ; Extend # Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL
1CED          ; Extend # Mn       VEDIC SIGN TIRYAK
1CF4          ; Extend # Mn       VEDIC TONE CANDRA ABOVE
1CF7          ; Extend # Mc       VEDIC SIGN ATIKRAMA
1CF8..1CF9    ; Extend # Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE
1DC0..1DF9    ; Extend # Mn  [58] COMBINING DOTTED GRAVE ACCENT..COMBINING WIDE INVERTED BRIDGE BELOW
1DFB..1DFF    ; Extend # Mn   [5] COMBINING DELETION MARK..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW
200C          ; Extend # Cf       ZERO WIDTH NON-JOINER
20D0..20DC    ; Extend # Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE
20DD..20E0    ; Extend # Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH
20E1          ; Extend # Mn       COMBINING LEFT RIGHT ARROW ABOVE
20E2..20E4    ; Extend # Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE
20E5..20F0    ; Extend # Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE
```

----------------------------------------

TITLE: Pull Request Title Template for Tooling Redirect
DESCRIPTION: Recommended format for creating a pull request title when adding a new tooling redirect to the Flutter website repository
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/use-reliable-links.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
Add a `/to/<redirect-name>` tooling redirect
```

----------------------------------------

TITLE: Incident Response Log Snippet
DESCRIPTION: This Discord log snippet captures a real-time conversation among Flutter developers and infrastructure engineers regarding a potential false positive malware detection.  The discussion includes steps to reproduce the issue, verify file integrity, and investigate the build process.  Key aspects include coordinating responses, identifying affected files, and checking for compromised build environments.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/postmortems/Postmortem-Windows-Defender-alert-on-2023-03-26.md#2025-04-21_snippet_0

LANGUAGE: discord
CODE:
```
"[1:04 PM]Hixie: @Drewroen @Greg Spencer (gspencergoog) @timsneath let's coordinate here so we're not all speaking in different venues\n[1:04 PM]Hixie: current issue is https://github.com/flutter/flutter/issues/123519\n[1:05 PM]Hixie: greg and/or drew are you able to upload the affected file to the site tim gave?\n[1:21 PM]Greg Spencer (gspencergoog): I would, but I'm not sure how to sign in. Am I an \"enterprise customer\", or a \"software developer\"? Apparently you have to sign in to a Microsoft account before submitting it, and I'm not sure what account is the correct one to use (Is it OK to associate my @google.com account with my GitHub account for MS login?, Should I use a personal GitHub account?, etc.)\n[1:37 PM]Greg Spencer (gspencergoog): Okay, I figured out how to log in.\n[1:43 PM]Greg Spencer (gspencergoog): I've submitted it, but it's unclear when we'll get a response. I submitted it at \"normal\" priority because I didn't have the necessary ID numbers to submit it with Google enterprise credentials to get a higher priority.\n[1:44 PM]Hixie: sounds good, can you update the issue as well?\n[1:44 PM]Hixie: and thanks for your help here\n[1:44 PM]Greg Spencer (gspencergoog): Yes.\n[1:44 PM]Greg Spencer (gspencergoog): No problem.\n[1:45 PM]Drewroen: (Catching up now, had a meeting) Thank you for submitting, @Greg Spencer (gspencergoog)!\n[1:48 PM]Hixie: @Greg Spencer (gspencergoog) do you get anything useful if you upload the file to https://www.virustotal.com/gui/home/upload ?\n[2:18 PM]Greg Spencer (gspencergoog): No, it doesn't detect any threats.\n[2:19 PM]Greg Spencer (gspencergoog): I'm trying to figure out how to download previous versions of the gen_snapshot tool and see if they too trigger the quarantine.\n[2:20 PM]Greg Spencer (gspencergoog): Anyone know how to find out the hash on the flutter_infra_release gcs instance for a previous release?\n[2:23 PM]Greg Spencer (gspencergoog): Is it just the full github hash for the release? (You'd think I'd know this: I think I wrote it originally! I just can't remember)\n[2:33 PM]Greg Spencer (gspencergoog): What is the \"windows-x64.zip\" file from?  Is that from a Dart distro?\n[2:33 PM]Drewroen: Maybe there's a simpler way, but I found the release commit for flutter/flutter for 3.7.7, then got the engine version from https://github.com/flutter/flutter/blob/2ad6cd72c040113b47ee9055e722606a490ef0da/bin/internal/engine.version and used that hash in the storage.googleapis url\n\nLong story short, this should be the engine artifact for the 3.7.7 windows stable: https://storage.googleapis.com/flutter_infra_release/flutter/1837b5be5f0f1376a1ccf383950e83a80177fb4e/android-x64-release/windows-x64.zip\n[2:33 PM]Greg Spencer (gspencergoog): The Flutter version seems to be windows-x64-flutter.zip, and doesn't appear to have the problem (at least in the latest master build)\n[2:34 PM]Greg Spencer (gspencergoog): Ahh, so it's in an Engine build.\n[2:36 PM]Greg Spencer (gspencergoog): OK, so that 3.7.7 binary doesn't seem to trigger the quarantine.\n[2:40 PM]Hixie: do we have any way to check if the machine on which we did the builds is compromised?\n[2:40 PM]Hixie: cc @Godofredo Contreras (godofredoc)\n[2:45 PM]Greg Spencer (gspencergoog): Actually, I just tried unpacking the original windows-x64.zip file that triggered the quarantine before, and it no longer flags the file.  As far as I know, it's the same file I unpacked before, and the same zip file I uploaded to MS for analysis.\n[2:45 PM]Greg Spencer (gspencergoog): Perhaps they've updated their cloud definitions and corrected an incorrect definition?\n[2:46 PM]Greg Spencer (gspencergoog): I haven't updated my local definitions, so it would have to be something online.\n[3:05 PM]Godofredo Contreras (godofredoc): @Hixie those are ephemeral VMs recycled every 24 hours. There is no way to access it.\n[3:06 PM]Godofredo Contreras (godofredoc): Let me get the builder that file was generated on, if the machine was compromised I'd expect all the other artifacts from the same build to also be infected\n[3:08 PM]Godofredo Contreras (godofredoc): @Greg Spencer (gspencergoog) that's correct only prod service accounts and release engineers have access to update artifacts. I would not expect the file to be updated but we can check our trail logs just in case\n[3:09 PM]Greg Spencer (gspencergoog): I completely agree. Also, the same file I originally downloaded earlier today no longer triggers it, and it is identical to the one I just downloaded now (same sha256sum).\n[3:10 PM]Greg Spencer (gspencergoog): So I think we can rule out someone replacing the file with an innocuous one.\n[3:11 PM]Greg Spencer (gspencergoog): The submission to MS is still \"pending\".\n[3:13 PM]Greg Spencer (gspencergoog): My money is on MS Defender just falsely flagging the file, and them updating their definitions.\n[3:15 PM]Hixie: that does seem most likely, but i would hate for us to assume that is the case and then later find it isn't :-)\n[3:15 PM]Greg Spencer (gspencergoog): Oh, definitely!\n[3:15 PM]Greg Spencer (gspencergoog): I haven't closed the issue yet. :-)\n[3:16 PM]Hixie: @Godofredo Contreras (godofredoc)  if we rerun the build, do we get the same bits? it'd be a good test of our reproducible builds logic if we have it yet :-)\n[3:18 PM]Godofredo Contreras (godofredoc): not sure, but let me give it a try\n[4:40 PM]Hixie: @Godofredo Contreras (godofredoc) any luck?\n[4:56 PM]Godofredo Contreras (godofredoc): The build has not finished yet, I'm using https://ci.chromium.org/p/flutter/builders/prod/Windows%20Host%20Engine/21257\n[4:58 PM]Godofredo Contreras (godofredoc): I'll validate using this artifact https://storage.cloud.google.com/flutter_infra_release/flutter/8cb080365fb189a1e5d1e33a991518f2422e319b/dart-sdk-windows-x64.zip\n[4:59 PM]Greg Spencer (gspencergoog): Can anyone else with a Windows machine reproduce the quarantine that used to happen if you download and unpack https://storage.googleapis.com/flutter_infra_release/flutter/685fbc6f4d9db8026c56ee1a177bb10cc09f884b/android-x64-release/windows-x64.zip ?\n[5:00 PM]Greg Spencer (gspencergoog): It's not happening for me anymore.\n[5:00 PM]Godofredo Contreras (godofredoc): let me check on my windows pc\n[5:00 PM]Godofredo Contreras (godofredoc): @Greg Spencer (gspencergoog) which win OS are you using?\n[5:00 PM]Greg Spencer (gspencergoog): Windows 11\n[5:01 PM]Godofredo Contreras (godofredoc): ok, my computer is windows 10\n[5:01 PM]Greg Spencer (gspencergoog): But I think the build servers are running Windows 10, right? And they saw the same issue.\n[5:02 PM]Godofredo Contreras (godofredoc): yes, they are using win 10\n[5:07 PM]Godofredo Contreras (godofredoc): were you getting the error when downloading? or when extracting?\n[5:08 PM]Greg Spencer (gspencergoog): After extracting the zip file.\n[5:08 PM]Greg Spencer (gspencergoog): It quarantined the gen_snapshot.exe file.\n[5:10 PM]Godofredo Contreras (godofredoc): new behavior with downloads?\n[5:11 PM]Godofredo Contreras (godofredoc): after downloading and extracting I get a blue window with message \"Microsoft defender smartscreen prevented an unrecognized app from starting\"\n[5:12 PM]Godofredo Contreras (godofredoc): more info -> App: gen_snapshot.exe publisher: unknown publisher\n[5:12 PM]Godofredo Contreras (godofredoc): with the option run anyway and don't run\n[5:13 PM]Godofredo Contreras (godofredoc): I wonder if they started forcing | will start enforcing app signing\n[5:15 PM]Godofredo Contreras (godofredoc): do you know how the flutter tool downloads binaries in win?\n[5:16 PM]Godofredo Contreras (godofredoc): @Hixie https://luci-milo.appspot.com/raw/build/logs.chromium.org/flutter/led/godofredoc_google.com/9d161b36a3996876610f0a49660b9e0fd37f7e43881c33f17aa9fa0f5ec277f8/+/build.proto, I'll validate hashes once the build is complete\n[5:31 PM]Greg Spencer (gspencergoog): It also might vary according to the system configuration. Mine is a stock Windows 11 install, not a corp machine.\n[5:34 PM]Godofredo Contreras (godofredoc): mine is a win 10 with stock windows\n[5:40 PM]Godofredo Contreras (godofredoc): Confirmed our builds are not replicable, sha for the test file in GCS 873d80acf1855733ce11a5b569859b6bc803ee38035cfb3491c0e3748544a48e and the one generated from a rebuild using the same build configs 57573123fff2713032b31cd8d99e30e79c0452516a54388c7aa237b8da1890b4\n[5:41 PM]Hixie: that could mean the first one was bad or, more likely, that we just haven't managed to get replicable builds yet, right?\n[5:45 PM]Godofredo Contreras (godofredoc): I used a build from a couple of hours ago for the validation, the two builds are correct\n[5:46 PM]Godofredo Contreras (godofredoc): is just that we may use some compilation/linker flags that impacts replicability or maybe we are using timestamps somewhere in the build system\n[5:46 PM]Godofredo Contreras (godofredoc): I haven't validate it yet the logs for the artifact, but let me do that\n[5:49 PM]Hixie: does the new version also trigger windows defender?\n[5:51 PM]Godofredo Contreras (godofredoc): In my windows machine it consistently blocks the execution on any binaries downloaded from the internet, until I explicitly allow them to run\n[6:09 PM]Godofredo Contreras (godofredoc): AI: document how to audit GCS logs\n[6:21 PM]Godofredo Contreras (godofredoc): There is a single log: event=storage.objects.create\n[6:21 PM]Godofredo Contreras (godofredoc): timestamp: \"2023-03-24T22:19:48.210794479Z\"\n[6:22 PM]Godofredo Contreras (godofredoc): auth: \"flutter-prod-builder@chops-service-accounts.iam.gserviceaccount.com\"\n[6:31 PM]Godofredo Contreras (godofredoc): ok, rewinding everything to use the right data\n[6:32 PM]Godofredo Contreras (godofredoc): Stable - 3.7.7 was https://github.com/flutter/flutter/commit/2ad6cd72c040113b47ee9055e722606a490ef0da\n[6:32 PM]Godofredo Contreras (godofredoc): which is using engine 1837b5be5f0f1376a1ccf383950e83a80177fb4e"
```

----------------------------------------

TITLE: Unicode Extend Category Code Point Ranges
DESCRIPTION: Defines ranges of Unicode code points that belong to the 'Extend' category. Each line specifies a range or single code point and includes a description of the character(s), along with their general category (Mn for non-spacing mark, Mc for spacing combining mark, or Me for enclosing mark).
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_1

LANGUAGE: unicode
CODE:
```
0300..036F    ; Extend # Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X
0483..0487    ; Extend # Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE
0488..0489    ; Extend # Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN
[...additional ranges omitted for brevity...]
0E34..0E3A    ; Extend # Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU
0E47..0E4E    ; Extend # Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN
```

----------------------------------------

TITLE: Replacing Element in YAML
DESCRIPTION: Demonstrates how to specify replacing a top-level variable with a static field in another class using a YAML configuration
SOURCE: https://github.com/flutter/flutter/blob/master/docs/contributing/Data-driven-Fixes.md#2025-04-21_snippet_14

LANGUAGE: yaml
CODE:
```
kind: 'replacedBy'
newElement:
  uris: ['lib.dart']
  field: 'f'
  inClass: 'C'
```

----------------------------------------

TITLE: Android API References in Markdown
DESCRIPTION: Markdown links to relevant Android API documentation referenced in the technical explanation
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
[VirtualDisplays](https://developer.android.com/reference/android/hardware/display/VirtualDisplay#summary)
[`getSurface()`](https://developer.android.com/reference/android/hardware/display/VirtualDisplay#getSurface())
[Display](https://developer.android.com/reference/android/view/Display.html)
[AccessibilityNodeProvider](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeProvider)
```

----------------------------------------

TITLE: Subprojects Build Directory Configuration in Flutter
DESCRIPTION: This snippet configures subprojects' build directories and evaluations, preventing errors related to lexicographic order dependencies when building Flutter apps.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Upgrading-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1.md#2025-04-21_snippet_3

LANGUAGE: Gradle
CODE:
```
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(':app')
}
```

----------------------------------------

TITLE: Markdown Documentation for Flutter Textures
DESCRIPTION: Basic markdown documentation explaining the purpose of the example repository for implementing custom Flutter textures.
SOURCE: https://github.com/flutter/flutter/blob/master/examples/texture/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Flutter Texture

An example to show how to use custom Flutter textures.
```

----------------------------------------

TITLE: Test File Path Reference - Widget Preview Template Test
DESCRIPTION: Reference to the test file path that detects template changes in the widget preview scaffold
SOURCE: https://github.com/flutter/flutter/blob/master/packages/flutter_tools/test/widget_preview_scaffold.shard/README.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
widget_preview_scaffold/test/template_change_detection_smoke_test.dart
```

----------------------------------------

TITLE: Unicode Properties Mapping
DESCRIPTION: Defines bidirectional category codes and Unicode properties for character ranges in various scripts including Arabic, Syriac, Devanagari, Bengali, and Gurmukhi. Each line maps a code point or range to properties like script type, character category, and count.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_0

LANGUAGE: Unicode
CODE:
```
0600..0605;AL     # Cf     [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE
0606..0608;AL     # Sm     [3] ARABIC-INDIC CUBE ROOT..ARABIC RAY
0609..060A;PO     # Po     [2] ARABIC-INDIC PER MILLE SIGN..ARABIC-INDIC PER TEN THOUSAND SIGN
0610..061A;CM     # Mn    [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA
```

----------------------------------------

TITLE: Unicode Character Property Mapping Block
DESCRIPTION: Maps Unicode code points to their associated character properties for various scripts and symbols. Each line contains a code point or range, followed by the character property and description.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_15

LANGUAGE: Unicode
CODE:
```
119E1;AL          # Lo         NANDINAGARI SIGN AVAGRAHA
119E2;BB          # Po         NANDINAGARI SIGN SIDDHAM
119E3;AL          # Lo         NANDINAGARI HEADSTROKE
119E4;CM          # Mc         NANDINAGARI VOWEL SIGN PRISHTHAMATRA E
```

----------------------------------------

TITLE: Defining Word Break Properties - Unicode
DESCRIPTION: This snippet defines the Unicode properties for word breaking, including total code points and categorizations for various characters such as quotations and Hebrew letters. It serves as a reference for applications dealing with text processing and internationalization.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
# Property: Word_Break

#  All code points not explicitly listed for Word_Break
#  have the value Other (XX).

# @missing: 0000..10FFFF; Other

0022          ; Double_Quote # Po       QUOTATION MARK

# Total code points: 1

0027          ; Single_Quote # Po       APOSTROPHE

# Total code points: 1

05D0..05EA    ; Hebrew_Letter # Lo  [27] HEBREW LETTER ALEF..HEBREW LETTER TAV
05EF..05F2    ; Hebrew_Letter # Lo   [4] HEBREW YOD TRIANGLE..HEBREW LIGATURE YIDDISH DOUBLE YOD
FB1D          ; Hebrew_Letter # Lo       HEBREW LETTER YOD WITH HIRIQ
FB1F..FB28    ; Hebrew_Letter # Lo  [10] HEBREW LIGATURE YIDDISH YOD YOD PATAH..HEBREW LETTER WIDE TAV
FB2A..FB36    ; Hebrew_Letter # Lo  [13] HEBREW LETTER SHIN WITH SHIN DOT..HEBREW LETTER ZAYIN WITH DAGESH
FB38..FB3C    ; Hebrew_Letter # Lo   [5] HEBREW LETTER TET WITH DAGESH..HEBREW LETTER LAMED WITH DAGESH
FB3E          ; Hebrew_Letter # Lo       HEBREW LETTER MEM WITH DAGESH
FB40..FB41    ; Hebrew_Letter # Lo   [2] HEBREW LETTER NUN WITH DAGESH..HEBREW LETTER SAMEKH WITH DAGESH
FB43..FB44    ; Hebrew_Letter # Lo   [2] HEBREW LETTER FINAL PE WITH DAGESH..HEBREW LETTER PE WITH DAGESH
FB46..FB4F    ; Hebrew_Letter # Lo  [10] HEBREW LETTER TSADI WITH DAGESH..HEBREW LIGATURE ALEF LAMED

# Total code points: 75

000D          ; CR # Cc       <control-000D>

# Total code points: 1

000A          ; LF # Cc       <control-000A>

# Total code points: 1

000B..000C    ; Newline # Cc   [2] <control-000B>..<control-000C>
0085          ; Newline # Cc       <control-0085>
2028          ; Newline # Zl       LINE SEPARATOR
2029          ; Newline # Zp       PARAGRAPH SEPARATOR

# Total code points: 5

```

----------------------------------------

TITLE: Flutter Framework References in Markdown
DESCRIPTION: Markdown links to Flutter framework code and API documentation
SOURCE: https://github.com/flutter/flutter/blob/master/docs/platforms/android/Virtual-Display.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
[hit testing logic within the Flutter Framework](https://github.com/flutter/flutter/blob/068fa84/packages/flutter/lib/src/rendering/platform_view.dart#L774)
[dispatch a message to the Android engine embedding](https://github.com/flutter/flutter/blob/068fa84/packages/flutter/lib/src/rendering/platform_view.dart#L595)
[`Semantics`](https://api.flutter.dev/flutter/widgets/Semantics-class.html)
```

----------------------------------------

TITLE: Merging VSCode Workspace Configuration - Shell Script
DESCRIPTION: This shell script (`merge.sh`) is executed to merge changes into the VSCode workspace when modifications are made without direct editing of the YAML configuration file. This script addresses potential conflicts arising from the absence of anchors in JSON. Like the previous script, it also requires certain tools to function properly.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/vscode_workspace/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
./merge.sh
```

----------------------------------------

TITLE: Unpublish Package (Dart/Shell)
DESCRIPTION: This snippet shows the command to unpublish a Flutter package using the `unpublish_package.dart` script.  It requires confirmation and the necessary cloud storage access and gsutil setup. The script removes the package from the channels in which it was published.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/README.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
"dart ./unpublish_package.dart --confirm --temp_dir=/tmp/foo --revision d444a455de87a2e40b7f576dc12ffd9ab82fd491"
```

----------------------------------------

TITLE: Adding a New Mock GLES Function in C++
DESCRIPTION: This code demonstrates how to add a new function to the mock GLES implementation.  It involves defining a new function (e.g., `glFooBar`) in `mock_gles.cc` that records the call. The `recordCall` function is assumed to handle the recording of the function name.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/impeller/renderer/backend/gles/test/README.md#2025-04-21_snippet_1

LANGUAGE: cc
CODE:
```
void glFooBar() {
  recordCall("glFooBar");
}
```

----------------------------------------

TITLE: Updating Android SDK using Android SDK Manager (Shell)
DESCRIPTION: This set of shell commands demonstrates how to update the Android SDK used by Flutter's Chrome infrastructure bots. It utilizes the Android SDK Manager to update packages and accept licenses, ensuring the latest SDK components are installed. The updated SDK is then uploaded to Google Cloud Storage.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/bots/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
"$ dev/bots/android_tools/sdk/tools/android update sdk"
```

LANGUAGE: shell
CODE:
```
"$ dev/bots/android_tools/sdk/tools/bin/sdkmanager --update"
```

LANGUAGE: shell
CODE:
```
"$ dev/bots/android_tools/sdk/tools/bin/sdkmanager --licenses"
```

LANGUAGE: shell
CODE:
```
"$ dev/bots/upload_android_tools.py -t sdk"
```

----------------------------------------

TITLE: Navigating to Licenses Directory
DESCRIPTION: This command navigates to the directory where license-related operations are performed. It is essential to be in this directory to correctly apply patches or run scripts.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/tools/licenses/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
cd flutter/ci/licenses_golden
```

----------------------------------------

TITLE: Setting up Emulator and PM Serve
DESCRIPTION: This snippet configures the Fuchsia emulator for x64 architecture and starts it in headless mode. It then initiates the Fuchsia service manager.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/shell/platform/fuchsia/dart_runner/tests/startup_integration_test/dart_aot_runner/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
fx set terminal.qemu-x64
ffx emu start --headless

fx serve
```

----------------------------------------

TITLE: Compiling Protocol Buffers for Flutter Conductor State
DESCRIPTION: This script recompiles the Dart files from the conductor_state.proto file, formats them, and adds a license header. It should be run after any changes to the proto file.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/core/lib/src/proto/README.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
./compile_proto.sh
```

----------------------------------------

TITLE: Flutter Incident Postmortem Markdown Template
DESCRIPTION: Markdown template for documenting comprehensive incident postmortems in the Flutter project. Includes sections for incident summary, timeline, impact analysis, root cause analysis, lessons learned, and action items.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/postmortems/postmortem-template.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
# Flutter postmortem: {Incident Title}

Status: {draft|final}<br>
Owners: {who drove the incident resolution}

## Summary

Description: {brief description of symptoms and root cause}<br>
Component: {affected area}<br>
Date/time: {YYYY-MM-DD HH:MM}<br>
Duration: {time from initial breakage to final resolution}<br>
User impact: {who was affected by the incident}

## Timeline (all times in PST/PDT)

### 1900-01-01

14:44 - something happened<br>
14:45 - next thing happened **&lt;START OF OUTAGE&gt;**

### 1900-01-02

09:12 - another thing happened **&lt;END OF OUTAGE&gt;**

## Impact

{summarize the problems that the outage caused}

## Root causes

{without blame, describe the root cause of the outage}

## Lessons learned

### What worked

{list things where things worked as expected in a positive manner}

### Where we got lucky

{list things that mitigated this incident but not because of our foresight}

### What didn't work

{list things that failed, with github issues from the action items section}

## Action items

{each item here should have an owner}

### Prevention

{link to github issues for things that would have prevented this failure from happening in the first place, such as input validation, pinning dependencies, etc}

### Detection

{link to github issues for things that would have detected this failure before it became An Incident, such as better testing, monitoring, etc}

### Mitigation

{link to github issues for things that would have made this failure less serious, such as graceful degradation, better exception handling, etc}

### Process

{link to github issues for things that would have helped us resolve this failure faster, such as documented processes and protocols, etc}

### Fixes

{link to github issues or PRs/commits for the actual fixes that were necessary to resolve this incident}

## Appendix

{any other useful information, such as relevant chat logs}
```

----------------------------------------

TITLE: Installing tool-proxy-client on glinux for Flutter Release Engineering
DESCRIPTION: This command installs the tool-proxy-client on a glinux machine. The tool enables and enforces 2 party authorization for controlled builds in the Flutter release process.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/conductor/RELEASE_ONBOARDING.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
sudo apt install tool-proxy-client
```

----------------------------------------

TITLE: Unicode Character Mapping for Various Scripts
DESCRIPTION: This code snippet defines Unicode character ranges and their corresponding categories for multiple scripts. It includes mappings for punctuation, letters, modifiers, and syllables across different writing systems.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_7

LANGUAGE: Unicode
CODE:
```
AA5C;AL           # Po         CHAM PUNCTUATION SPIRAL
AA5D..AA5F;BA     # Po     [3] CHAM PUNCTUATION DANDA..CHAM PUNCTUATION TRIPLE DANDA
AA60..AA6F;SA     # Lo    [16] MYANMAR LETTER KHAMTI GA..MYANMAR LETTER KHAMTI FA
AA70;SA           # Lm         MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION
AA71..AA76;SA     # Lo     [6] MYANMAR LETTER KHAMTI XA..MYANMAR LOGOGRAM KHAMTI HM
AA77..AA79;SA     # So     [3] MYANMAR SYMBOL AITON EXCLAMATION..MYANMAR SYMBOL AITON TWO
AA7A;SA           # Lo         MYANMAR LETTER AITON RA
AA7B;SA           # Mc         MYANMAR SIGN PAO KAREN TONE
AA7C;SA           # Mn         MYANMAR SIGN TAI LAING TONE-2
AA7D;SA           # Mc         MYANMAR SIGN TAI LAING TONE-5
AA7E..AA7F;SA     # Lo     [2] MYANMAR LETTER SHWE PALAUNG CHA..MYANMAR LETTER SHWE PALAUNG SHA
AA80..AAAF;SA     # Lo    [48] TAI VIET LETTER LOW KO..TAI VIET LETTER HIGH O
AAB0;SA           # Mn         TAI VIET MAI KANG
AAB1;SA           # Lo         TAI VIET VOWEL AA
AAB2..AAB4;SA     # Mn     [3] TAI VIET VOWEL I..TAI VIET VOWEL U
AAB5..AAB6;SA     # Lo     [2] TAI VIET VOWEL E..TAI VIET VOWEL O
AAB7..AAB8;SA     # Mn     [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA
AAB9..AABD;SA     # Lo     [5] TAI VIET VOWEL UEA..TAI VIET VOWEL AN
AABE..AABF;SA     # Mn     [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK
AAC0;SA           # Lo         TAI VIET TONE MAI NUENG
AAC1;SA           # Mn         TAI VIET TONE MAI THO
AAC2;SA           # Lo         TAI VIET TONE MAI SONG
AADB..AADC;SA     # Lo     [2] TAI VIET SYMBOL KON..TAI VIET SYMBOL NUENG
AADD;SA           # Lm         TAI VIET SYMBOL SAM
AADE..AADF;SA     # Po     [2] TAI VIET SYMBOL HO HOI..TAI VIET SYMBOL KOI KOI
AAE0..AAEA;AL     # Lo    [11] MEETEI MAYEK LETTER E..MEETEI MAYEK LETTER SSA
AAEB;CM           # Mc         MEETEI MAYEK VOWEL SIGN II
AAEC..AAED;CM     # Mn     [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI
AAEE..AAEF;CM     # Mc     [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU
AAF0..AAF1;BA     # Po     [2] MEETEI MAYEK CHEIKHAN..MEETEI MAYEK AHANG KHUDAM
AAF2;AL           # Lo         MEETEI MAYEK ANJI
AAF3..AAF4;AL     # Lm     [2] MEETEI MAYEK SYLLABLE REPETITION MARK..MEETEI MAYEK WORD REPETITION MARK
AAF5;CM           # Mc         MEETEI MAYEK VOWEL SIGN VISARGA
AAF6;CM           # Mn         MEETEI MAYEK VIRAMA
AB01..AB06;AL     # Lo     [6] ETHIOPIC SYLLABLE TTHU..ETHIOPIC SYLLABLE TTHO
AB09..AB0E;AL     # Lo     [6] ETHIOPIC SYLLABLE DDHU..ETHIOPIC SYLLABLE DDHO
AB11..AB16;AL     # Lo     [6] ETHIOPIC SYLLABLE DZU..ETHIOPIC SYLLABLE DZO
AB20..AB26;AL     # Lo     [7] ETHIOPIC SYLLABLE CCHHA..ETHIOPIC SYLLABLE CCHHO
AB28..AB2E;AL     # Lo     [7] ETHIOPIC SYLLABLE BBA..ETHIOPIC SYLLABLE BBO
AB30..AB5A;AL     # Ll    [43] LATIN SMALL LETTER BARRED ALPHA..LATIN SMALL LETTER Y WITH SHORT RIGHT LEG
AB5B;AL           # Sk         MODIFIER BREVE WITH INVERTED BREVE
AB5C..AB5F;AL     # Lm     [4] MODIFIER LETTER SMALL HENG..MODIFIER LETTER SMALL U WITH LEFT HOOK
AB60..AB68;AL     # Ll     [9] LATIN SMALL LETTER SAKHA YAT..LATIN SMALL LETTER TURNED R WITH MIDDLE TILDE
AB69;AL           # Lm         MODIFIER LETTER SMALL TURNED W
AB6A..AB6B;AL     # Sk     [2] MODIFIER LETTER LEFT TACK..MODIFIER LETTER RIGHT TACK
AB70..ABBF;AL     # Ll    [80] CHEROKEE SMALL LETTER A..CHEROKEE SMALL LETTER YA
ABC0..ABE2;AL     # Lo    [35] MEETEI MAYEK LETTER KOK..MEETEI MAYEK LETTER I LONSUM
ABE3..ABE4;CM     # Mc     [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP
ABE5;CM           # Mn         MEETEI MAYEK VOWEL SIGN ANAP
ABE6..ABE7;CM     # Mc     [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP
ABE8;CM           # Mn         MEETEI MAYEK VOWEL SIGN UNAP
ABE9..ABEA;CM     # Mc     [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG
ABEB;BA           # Po         MEETEI MAYEK CHEIKHEI
ABEC;CM           # Mc         MEETEI MAYEK LUM IYEK
ABED;CM           # Mn         MEETEI MAYEK APUN IYEK
ABF0..ABF9;NU     # Nd    [10] MEETEI MAYEK DIGIT ZERO..MEETEI MAYEK DIGIT NINE
AC00;H2           # Lo         HANGUL SYLLABLE GA
AC01..AC1B;H3     # Lo    [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH
AC1C;H2           # Lo         HANGUL SYLLABLE GAE
AC1D..AC37;H3     # Lo    [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH
AC38;H2           # Lo         HANGUL SYLLABLE GYA
AC39..AC53;H3     # Lo    [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH
AC54;H2           # Lo         HANGUL SYLLABLE GYAE
AC55..AC6F;H3     # Lo    [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH
AC70;H2           # Lo         HANGUL SYLLABLE GEO
AC71..AC8B;H3     # Lo    [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH
AC8C;H2           # Lo         HANGUL SYLLABLE GE
AC8D..ACA7;H3     # Lo    [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH
ACA8;H2           # Lo         HANGUL SYLLABLE GYEO
ACA9..ACC3;H3     # Lo    [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH
ACC4;H2           # Lo         HANGUL SYLLABLE GYE
ACC5..ACDF;H3     # Lo    [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH
ACE0;H2           # Lo         HANGUL SYLLABLE GO
ACE1..ACFB;H3     # Lo    [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH
ACFC;H2           # Lo         HANGUL SYLLABLE GWA
ACFD..AD17;H3     # Lo    [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH
AD18;H2           # Lo         HANGUL SYLLABLE GWAE
AD19..AD33;H3     # Lo    [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH
AD34;H2           # Lo         HANGUL SYLLABLE GOE
AD35..AD4F;H3     # Lo    [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH
AD50;H2           # Lo         HANGUL SYLLABLE GYO
AD51..AD6B;H3     # Lo    [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH
AD6C;H2           # Lo         HANGUL SYLLABLE GU
AD6D..AD87;H3     # Lo    [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH
AD88;H2           # Lo         HANGUL SYLLABLE GWEO
AD89..ADA3;H3     # Lo    [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH
ADA4;H2           # Lo         HANGUL SYLLABLE GWE
ADA5..ADBF;H3     # Lo    [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH
ADC0;H2           # Lo         HANGUL SYLLABLE GWI
ADC1..ADDB;H3     # Lo    [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH
ADDC;H2           # Lo         HANGUL SYLLABLE GYU
ADDD..ADF7;H3     # Lo    [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH
ADF8;H2           # Lo         HANGUL SYLLABLE GEU
ADF9..AE13;H3     # Lo    [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH
AE14;H2           # Lo         HANGUL SYLLABLE GYI
AE15..AE2F;H3     # Lo    [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH
AE30;H2           # Lo         HANGUL SYLLABLE GI
AE31..AE4B;H3     # Lo    [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH
AE4C;H2           # Lo         HANGUL SYLLABLE GGA
AE4D..AE67;H3     # Lo    [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH
AE68;H2           # Lo         HANGUL SYLLABLE GGAE
AE69..AE83;H3     # Lo    [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH
AE84;H2           # Lo         HANGUL SYLLABLE GGYA
AE85..AE9F;H3     # Lo    [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH
AEA0;H2           # Lo         HANGUL SYLLABLE GGYAE
AEA1..AEBB;H3     # Lo    [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH
AEBC;H2           # Lo         HANGUL SYLLABLE GGEO
AEBD..AED7;H3     # Lo    [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH
AED8;H2           # Lo         HANGUL SYLLABLE GGE
AED9..AEF3;H3     # Lo    [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH
AEF4;H2           # Lo         HANGUL SYLLABLE GGYEO
AEF5..AF0F;H3     # Lo    [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH
AF10;H2           # Lo         HANGUL SYLLABLE GGYE
AF11..AF2B;H3     # Lo    [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH
AF2C;H2           # Lo         HANGUL SYLLABLE GGO
AF2D..AF47;H3     # Lo    [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH
AF48;H2           # Lo         HANGUL SYLLABLE GGWA
AF49..AF63;H3     # Lo    [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH
AF64;H2           # Lo         HANGUL SYLLABLE GGWAE
AF65..AF7F;H3     # Lo    [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH
AF80;H2           # Lo         HANGUL SYLLABLE GGOE
AF81..AF9B;H3     # Lo    [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH
AF9C;H2           # Lo         HANGUL SYLLABLE GGYO
AF9D..AFB7;H3     # Lo    [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH
AFB8;H2           # Lo         HANGUL SYLLABLE GGU
AFB9..AFD3;H3     # Lo    [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH
AFD4;H2           # Lo         HANGUL SYLLABLE GGWEO
AFD5..AFEF;H3     # Lo    [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH
AFF0;H2           # Lo         HANGUL SYLLABLE GGWE
AFF1..B00B;H3     # Lo    [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH
B00C;H2           # Lo         HANGUL SYLLABLE GGWI
B00D..B027;H3     # Lo    [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH
B028;H2           # Lo         HANGUL SYLLABLE GGYU
B029..B043;H3     # Lo    [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH
B044;H2           # Lo         HANGUL SYLLABLE GGEU
B045..B05F;H3     # Lo    [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH
B060;H2           # Lo         HANGUL SYLLABLE GGYI
B061..B07B;H3     # Lo    [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH
B07C;H2           # Lo         HANGUL SYLLABLE GGI
B07D..B097;H3     # Lo    [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH
B098;H2           # Lo         HANGUL SYLLABLE NA
B099..B0B3;H3     # Lo    [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH
B0B4;H2           # Lo         HANGUL SYLLABLE NAE
B0B5..B0CF;H3     # Lo    [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH
B0D0;H2           # Lo         HANGUL SYLLABLE NYA
B0D1..B0EB;H3     # Lo    [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH
B0EC;H2           # Lo         HANGUL SYLLABLE NYAE
B0ED..B107;H3     # Lo    [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH
B108;H2           # Lo         HANGUL SYLLABLE NEO
B109..B123;H3     # Lo    [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH
```

----------------------------------------

TITLE: Changelog Entries in Markdown
DESCRIPTION: Markdown formatted changelog entries detailing version changes, feature updates, breaking changes and bug fixes for the Flutter integration test package.
SOURCE: https://github.com/flutter/flutter/blob/master/packages/integration_test/CHANGELOG.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# CHANGELOG

This changelog was discontinued after version 0.9.2+2, when the package started
to vend from the Flutter SDK rather than pub.

It is maintained here for historical purposes only.

## 0.9.2+2

* Broaden the constraint on vm_service.

## 0.9.2+1

* Update android compileSdkVersion to 29.

## 0.9.2

* Add `watchPerformance` for performance test.

## 0.9.1

* Keep handling deprecated Android v1 classes for backward compatibility.

## 0.9.0

* Add screenshot capability to web tests.
```

----------------------------------------

TITLE: Unicode Property Mapping
DESCRIPTION: Defines character ranges and their corresponding Unicode properties using a format of codepoint;property # type [count] description. Includes properties like CM (Combining Mark), AL (Alphabetic), NS (Non-spacing), and others for various scripts including Miao, Tangut, Katakana, and mathematical symbols.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_16

LANGUAGE: unicode
CODE:
```
16F8F..16F92;CM   # Mn     [4] MIAO TONE RIGHT..MIAO TONE BELOW
16F93..16F9F;AL   # Lm    [13] MIAO LETTER TONE-2..MIAO LETTER REFORMED TONE-8
16FE0..16FE1;NS   # Lm     [2] TANGUT ITERATION MARK..NUSHU ITERATION MARK
```

----------------------------------------

TITLE: Defining Unicode Extend Property Ranges
DESCRIPTION: Defines extensive ranges of Unicode code points that have the 'Extend' property. Includes combining marks, vowel signs, and other extending characters from various scripts.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/WordBreakProperty.txt#2025-04-21_snippet_3

LANGUAGE: unicode
CODE:
```
114B0..114B2  ; Extend # Mc   [3] TIRHUTA VOWEL SIGN AA..TIRHUTA VOWEL SIGN II
114B3..114B8  ; Extend # Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL
[...additional ranges...]
E0100..E01EF  ; Extend # Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256
```

----------------------------------------

TITLE: Final Merged Configuration Example - YAML
DESCRIPTION: This snippet shows the final configuration after merging repository level overrides with the organization level configuration, providing a consolidated view of the effective settings for the Autosubmit bot.
SOURCE: https://github.com/flutter/flutter/blob/master/docs/infra/Autosubmit-bot.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
auto_approval_accounts:
  - skia-flutter-autoroll
  - engine-flutter-autoroll
  - dependabot[bot]
  - dependabot
  - DartDevtoolWorkflowBot
approving_reviews: 3
approval_group: flutter-hackers
run_ci: true
support_no_review_revert: false
required_checkruns_on_revert:
  - ci.yaml validation
```

----------------------------------------

TITLE: Hangul Syllable Unicode Ranges with H2/H3 Designations
DESCRIPTION: This code snippet defines Unicode code points for Hangul syllables with H2 and H3 designations. Each entry specifies a Unicode code point (or range), followed by a designation (H2 or H3), Unicode category (Lo), and the name of the Hangul syllable.
SOURCE: https://github.com/flutter/flutter/blob/master/engine/src/flutter/third_party/web_unicode/properties/LineBreak.txt#2025-04-21_snippet_9

LANGUAGE: unicode-data
CODE:
```
B9C9..B9E3;H3     # Lo    [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH
B9E4;H2           # Lo         HANGUL SYLLABLE MAE
B9E5..B9FF;H3     # Lo    [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH
BA00;H2           # Lo         HANGUL SYLLABLE MYA
BA01..BA1B;H3     # Lo    [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH
BA1C;H2           # Lo         HANGUL SYLLABLE MYAE
BA1D..BA37;H3     # Lo    [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH
BA38;H2           # Lo         HANGUL SYLLABLE MEO
BA39..BA53;H3     # Lo    [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH
BA54;H2           # Lo         HANGUL SYLLABLE ME
BA55..BA6F;H3     # Lo    [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH
BA70;H2           # Lo         HANGUL SYLLABLE MYEO
BA71..BA8B;H3     # Lo    [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH
BA8C;H2           # Lo         HANGUL SYLLABLE MYE
BA8D..BAA7;H3     # Lo    [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH
BAA8;H2           # Lo         HANGUL SYLLABLE MO
BAA9..BAC3;H3     # Lo    [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH
BAC4;H2           # Lo         HANGUL SYLLABLE MWA
BAC5..BADF;H3     # Lo    [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH
BAE0;H2           # Lo         HANGUL SYLLABLE MWAE
BAE1..BAFB;H3     # Lo    [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH
BAFC;H2           # Lo         HANGUL SYLLABLE MOE
BAFD..BB17;H3     # Lo    [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH
BB18;H2           # Lo         HANGUL SYLLABLE MYO
BB19..BB33;H3     # Lo    [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH
BB34;H2           # Lo         HANGUL SYLLABLE MU
BB35..BB4F;H3     # Lo    [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH
BB50;H2           # Lo         HANGUL SYLLABLE MWEO
BB51..BB6B;H3     # Lo    [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH
BB6C;H2           # Lo         HANGUL SYLLABLE MWE
BB6D..BB87;H3     # Lo    [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH
BB88;H2           # Lo         HANGUL SYLLABLE MWI
BB89..BBA3;H3     # Lo    [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH
BBA4;H2           # Lo         HANGUL SYLLABLE MYU
BBA5..BBBF;H3     # Lo    [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH
BBC0;H2           # Lo         HANGUL SYLLABLE MEU
BBC1..BBDB;H3     # Lo    [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH
BBDC;H2           # Lo         HANGUL SYLLABLE MYI
BBDD..BBF7;H3     # Lo    [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH
BBF8;H2           # Lo         HANGUL SYLLABLE MI
BBF9..BC13;H3     # Lo    [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH
BC14;H2           # Lo         HANGUL SYLLABLE BA
BC15..BC2F;H3     # Lo    [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH
BC30;H2           # Lo         HANGUL SYLLABLE BAE
BC31..BC4B;H3     # Lo    [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH
BC4C;H2           # Lo         HANGUL SYLLABLE BYA
BC4D..BC67;H3     # Lo    [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH
BC68;H2           # Lo         HANGUL SYLLABLE BYAE
BC69..BC83;H3     # Lo    [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH
BC84;H2           # Lo         HANGUL SYLLABLE BEO
BC85..BC9F;H3     # Lo    [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH
BCA0;H2           # Lo         HANGUL SYLLABLE BE
BCA1..BCBB;H3     # Lo    [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH
BCBC;H2           # Lo         HANGUL SYLLABLE BYEO
BCBD..BCD7;H3     # Lo    [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH
BCD8;H2           # Lo         HANGUL SYLLABLE BYE
BCD9..BCF3;H3     # Lo    [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH
BCF4;H2           # Lo         HANGUL SYLLABLE BO
BCF5..BD0F;H3     # Lo    [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH
BD10;H2           # Lo         HANGUL SYLLABLE BWA
BD11..BD2B;H3     # Lo    [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH
BD2C;H2           # Lo         HANGUL SYLLABLE BWAE
BD2D..BD47;H3     # Lo    [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH
BD48;H2           # Lo         HANGUL SYLLABLE BOE
BD49..BD63;H3     # Lo    [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH
BD64;H2           # Lo         HANGUL SYLLABLE BYO
BD65..BD7F;H3     # Lo    [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH
BD80;H2           # Lo         HANGUL SYLLABLE BU
BD81..BD9B;H3     # Lo    [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH
BD9C;H2           # Lo         HANGUL SYLLABLE BWEO
BD9D..BDB7;H3     # Lo    [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH
BDB8;H2           # Lo         HANGUL SYLLABLE BWE
BDB9..BDD3;H3     # Lo    [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH
BDD4;H2           # Lo         HANGUL SYLLABLE BWI
BDD5..BDEF;H3     # Lo    [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH
BDF0;H2           # Lo         HANGUL SYLLABLE BYU
BDF1..BE0B;H3     # Lo    [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH
BE0C;H2           # Lo         HANGUL SYLLABLE BEU
BE0D..BE27;H3     # Lo    [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH
BE28;H2           # Lo         HANGUL SYLLABLE BYI
BE29..BE43;H3     # Lo    [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH
BE44;H2           # Lo         HANGUL SYLLABLE BI
BE45..BE5F;H3     # Lo    [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH
BE60;H2           # Lo         HANGUL SYLLABLE BBA
BE61..BE7B;H3     # Lo    [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH
BE7C;H2           # Lo         HANGUL SYLLABLE BBAE
BE7D..BE97;H3     # Lo    [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH
BE98;H2           # Lo         HANGUL SYLLABLE BBYA
BE99..BEB3;H3     # Lo    [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH
BEB4;H2           # Lo         HANGUL SYLLABLE BBYAE
BEB5..BECF;H3     # Lo    [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH
BED0;H2           # Lo         HANGUL SYLLABLE BBEO
BED1..BEEB;H3     # Lo    [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH
BEEC;H2           # Lo         HANGUL SYLLABLE BBE
BEED..BF07;H3     # Lo    [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH
BF08;H2           # Lo         HANGUL SYLLABLE BBYEO
BF09..BF23;H3     # Lo    [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH
BF24;H2           # Lo         HANGUL SYLLABLE BBYE
BF25..BF3F;H3     # Lo    [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH
BF40;H2           # Lo         HANGUL SYLLABLE BBO
BF41..BF5B;H3     # Lo    [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH
BF5C;H2           # Lo         HANGUL SYLLABLE BBWA
BF5D..BF77;H3     # Lo    [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH
BF78;H2           # Lo         HANGUL SYLLABLE BBWAE
BF79..BF93;H3     # Lo    [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH
BF94;H2           # Lo         HANGUL SYLLABLE BBOE
BF95..BFAF;H3     # Lo    [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH
BFB0;H2           # Lo         HANGUL SYLLABLE BBYO
BFB1..BFCB;H3     # Lo    [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH
BFCC;H2           # Lo         HANGUL SYLLABLE BBU
BFCD..BFE7;H3     # Lo    [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH
BFE8;H2           # Lo         HANGUL SYLLABLE BBWEO
BFE9..C003;H3     # Lo    [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH
C004;H2           # Lo         HANGUL SYLLABLE BBWE
C005..C01F;H3     # Lo    [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH
C020;H2           # Lo         HANGUL SYLLABLE BBWI
C021..C03B;H3     # Lo    [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH
C03C;H2           # Lo         HANGUL SYLLABLE BBYU
C03D..C057;H3     # Lo    [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH
C058;H2           # Lo         HANGUL SYLLABLE BBEU
C059..C073;H3     # Lo    [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH
C074;H2           # Lo         HANGUL SYLLABLE BBYI
C075..C08F;H3     # Lo    [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH
C090;H2           # Lo         HANGUL SYLLABLE BBI
C091..C0AB;H3     # Lo    [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH
C0AC;H2           # Lo         HANGUL SYLLABLE SA
C0AD..C0C7;H3     # Lo    [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH
C0C8;H2           # Lo         HANGUL SYLLABLE SAE
C0C9..C0E3;H3     # Lo    [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH
C0E4;H2           # Lo         HANGUL SYLLABLE SYA
C0E5..C0FF;H3     # Lo    [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH
C100;H2           # Lo         HANGUL SYLLABLE SYAE
C101..C11B;H3     # Lo    [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH
C11C;H2           # Lo         HANGUL SYLLABLE SEO
C11D..C137;H3     # Lo    [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH
C138;H2           # Lo         HANGUL SYLLABLE SE
C139..C153;H3     # Lo    [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH
C154;H2           # Lo         HANGUL SYLLABLE SYEO
C155..C16F;H3     # Lo    [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH
C170;H2           # Lo         HANGUL SYLLABLE SYE
C171..C18B;H3     # Lo    [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH
C18C;H2           # Lo         HANGUL SYLLABLE SO
C18D..C1A7;H3     # Lo    [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH
C1A8;H2           # Lo         HANGUL SYLLABLE SWA
C1A9..C1C3;H3     # Lo    [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH
C1C4;H2           # Lo         HANGUL SYLLABLE SWAE
C1C5..C1DF;H3     # Lo    [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH
C1E0;H2           # Lo         HANGUL SYLLABLE SOE
C1E1..C1FB;H3     # Lo    [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH
C1FC;H2           # Lo         HANGUL SYLLABLE SYO
C1FD..C217;H3     # Lo    [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH
C218;H2           # Lo         HANGUL SYLLABLE SU
C219..C233;H3     # Lo    [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH
C234;H2           # Lo         HANGUL SYLLABLE SWEO
C235..C24F;H3     # Lo    [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH
C250;H2           # Lo         HANGUL SYLLABLE SWE
C251..C26B;H3     # Lo    [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH
C26C;H2           # Lo         HANGUL SYLLABLE SWI
```

----------------------------------------

TITLE: Providing Flutter Documentation Link in Markdown
DESCRIPTION: This snippet includes a Markdown link to the official Flutter documentation. It's essential for developers who need guidance on getting started with Flutter.
SOURCE: https://github.com/flutter/flutter/blob/master/dev/integration_tests/ios_add2app_life_cycle/flutterapp/README.md#2025-04-21_snippet_1

LANGUAGE: Markdown
CODE:
```
[documentation](https://flutter.dev/)
```