TITLE: Initializing New SvelteKit Project with NPM
DESCRIPTION: Commands to create, install dependencies, and start a new SvelteKit project. This sets up a development environment using the official Svelte application framework.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/01-introduction/02-getting-started.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx sv create myapp
cd myapp
npm install
npm run dev
```

----------------------------------------

TITLE: Creating Basic Svelte Component with Button and Styles
DESCRIPTION: A simple Svelte component example that demonstrates the basic structure including script logic, markup, and styling. Shows how to create a button with a click handler and custom styling.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/01-introduction/01-overview.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->
<script>
	function greet() {
		alert('Welcome to Svelte!');
	}
</script>

<button onclick={greet}>click me</button>

<style>
	button {
		font-size: 2em;
	}
</style>
```

----------------------------------------

TITLE: Setting up a new SvelteKit project
DESCRIPTION: Commands to create, set up, and start a new SvelteKit application. This includes creating the project structure, installing dependencies, and launching the development server.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/README.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx sv create my-app
cd my-app
npm install
npm run dev
```

----------------------------------------

TITLE: Creating Basic Reactive State in Svelte
DESCRIPTION: This snippet demonstrates how to create a simple reactive state using the $state rune in a Svelte component. It shows a button that increments a count when clicked.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	let count = $state(0);
</script>

<button onclick={() => count++}>
	clicks: {count}
</button>
```

----------------------------------------

TITLE: Basic Store Usage in Svelte Component
DESCRIPTION: Demonstrates basic store operations including creation, subscription, and value updates using the $ prefix syntax.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	import { writable } from 'svelte/store';

	const count = writable(0);
	console.log($count); // logs 0

	count.set(1);
	console.log($count); // logs 1

	$count = 2;
	console.log($count); // logs 2
</script>
```

----------------------------------------

TITLE: Importing and Using Components in Svelte
DESCRIPTION: Demonstrates how to import a component and use it within a Svelte template. Shows the difference between regular HTML elements and component tags.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	import Widget from './Widget.svelte';
</script>

<div>
	<Widget />
</div>
```

----------------------------------------

TITLE: Passing Props to a Svelte Component
DESCRIPTION: Demonstrates how a parent component (`App.svelte`) imports and renders a child component (`MyComponent`), passing a property named `adjective` with the value "cool". This is analogous to passing attributes to HTML elements.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->
<script>
	import MyComponent from './MyComponent.svelte';
</script>

<MyComponent adjective="cool" />
```

----------------------------------------

TITLE: Basic Svelte Component Structure
DESCRIPTION: Shows the basic structure of a .svelte component file with all optional sections: module script, instance script, markup, and style sections. This template demonstrates the standard organization of a Svelte component file.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/01-introduction/03-svelte-files.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script module>
	// module-level logic goes here
	// (you will rarely use this)
</script>

<script>
	// instance-level logic goes here
</script>

<!-- markup (zero or more items) goes here -->

<style>
	/* styles go here */
</style>
```

----------------------------------------

TITLE: Recommended Approach: Using $derived for Computed Values
DESCRIPTION: Shows the recommended approach for creating computed values using $derived instead of effects. This is cleaner and less error-prone than using effects for state synchronization.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_9

LANGUAGE: svelte
CODE:
```
<script>
	let count = $state(0);
	let doubled = $derived(count * 2);
</script>
```

----------------------------------------

TITLE: Demonstrating Rune Usage in Svelte
DESCRIPTION: This snippet shows how to use a rune in Svelte. The $state rune is used to declare a reactive state variable 'message' with an initial value of 'hello'. Runes are prefixed with $ and look like functions, but have special compiler-level meaning.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/01-what-are-runes.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
let message = $state('hello');
```

----------------------------------------

TITLE: Typing and Using Props in Svelte Components with TypeScript - Svelte - svelte
DESCRIPTION: Demonstrates how to add TypeScript support to Svelte component scripts by specifying lang=\"ts\" on the script tag. Shows variable typing, function typing, and event handling in a Svelte template using type annotations. Requires Svelte and TypeScript setup; lang=\"ts\" enables type-only features and static typing within Svelte files. Inputs are inferred from Svelte props and event handlers, outputs depend on the function and UI logic.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script lang=\"ts\">
	let name: string = 'world';

	function greet(name: string) {
		alert(`Hello, ${name}!`);
	}
</script>

<button onclick={(e: Event) => greet(e.target.innerText)}>
	{name as string}
</button>
```

----------------------------------------

TITLE: Creating Deep Reactive State with Arrays in Svelte
DESCRIPTION: This example shows how to create deeply reactive state using an array of objects. It demonstrates that modifying properties of nested objects will trigger UI updates.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
let todos = $state([
	{
		done: false,
		text: 'add more todos'
	}
]);
```

LANGUAGE: javascript
CODE:
```
todos[0].done = !todos[0].done;
```

LANGUAGE: javascript
CODE:
```
todos.push({
	done: false,
	text: 'eat lunch'
});
```

----------------------------------------

TITLE: Declaring Derived State in Svelte
DESCRIPTION: This snippet demonstrates creating derived state variables using the `$derived` rune in a Svelte component. The `doubled` variable is derived from `count`, showcasing reactive value updates. Key parameters include the derived expression `count * 2`, with expected outputs reflecting changes in `count`. Dependencies involve the `$state` function. The expression must be side-effect-free.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/03-$derived.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	let count = $state(0);
	let doubled = $derived(count * 2);
</script>

<button onclick={() => count++}>
	{doubled}
</button>

<p>{count} doubled is {doubled}</p>
```

----------------------------------------

TITLE: Typing $props Object in Svelte Components - svelte - svelte
DESCRIPTION: Demonstrates how to define and destructure a Props interface with TypeScript and apply it to $props within a Svelte component. Includes typing regular, optional, and generic callback properties, plus proper event handling and dynamic rendering. Dependencies are Svelte and TypeScript, especially for the Snippet type. Inputs are expected as component props; the output is type-safe usage within the Svelte component.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<script lang=\"ts\">
	import type { Snippet } from 'svelte';

	interface Props {
		requiredProperty: number;
		optionalProperty?: boolean;
		snippetWithStringArgument: Snippet<[string]>;
		eventHandler: (arg: string) => void;
		[key: string]: unknown;
	}

	let {
		requiredProperty,
		optionalProperty,
		snippetWithStringArgument,
		eventHandler,
		...everythingElse
	}: Props = $props();
</script>

<button onclick={() => eventHandler('clicked button')}>
	{@render snippetWithStringArgument('hello')}
</button>
```

----------------------------------------

TITLE: Binding Component Properties (Props) - Svelte - Svelte
DESCRIPTION: This snippet demonstrates binding the value property of a Keypad component to the pin variable using Svelte's bind:value={pin} syntax. This two-way binding allows changes inside Keypad to update the parent pin variable and vice versa. The Keypad component must support the value property for this binding to function correctly.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_10

LANGUAGE: svelte
CODE:
```
<Keypad bind:value={pin} />
```

----------------------------------------

TITLE: Multiple Conditions in Svelte #if Block
DESCRIPTION: Shows how to use multiple conditions in a Svelte #if block, including else if and else clauses. This example checks the temperature of porridge.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/02-if.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
{#if porridge.temperature > 100}
	<p>too hot!</p>
{:else if 80 > porridge.temperature}
	<p>too cold!</p>
{:else}
	<p>just right!</p>
{/if}
```

----------------------------------------

TITLE: Component Props in Svelte
DESCRIPTION: Demonstrates how to pass properties (props) to components in Svelte, including the shorthand syntax.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_7

LANGUAGE: svelte
CODE:
```
<Widget foo={bar} answer={42} text="hello" />
```

----------------------------------------

TITLE: Defining Scoped CSS Styles in Svelte Components - Svelte
DESCRIPTION: This snippet demonstrates how to include a \u003cstyle\u003e block within a Svelte component to scope CSS to elements defined in that component. The component-level CSS is automatically isolated by Svelte, which hashes the style and adds a scoping class (e.g., .svelte-123xyz) to relevant elements. Developers can define styles targeting component-local elements, ensuring no leakage to the global scope. No external dependencies required. The example targets all \u003cp\u003e elements within the component, making them burlywood in color. Input: Svelte component markup. Output: CSS styles scoped only to this component's elements.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/01-scoped-styles.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<style>\n\tp {\n\t\t/* this will only affect <p> elements in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n
```

----------------------------------------

TITLE: Keyed Each Blocks - Svelte
DESCRIPTION: Shows how to implement keyed iteration in 'each' blocks. Keys must uniquely identify each element, optimizing DOM diffing. Recommended keys are strings or numbers.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```

{#each items as item (item.id)}
	<li>{item.name} x {item.qty}</li>
{/each}

<!-- or with additional index value -->
{#each items as item, i (item.id)}
	<li>{i + 1}: {item.name} x {item.qty}</li>
{/each}

```

----------------------------------------

TITLE: Managing Intervals with $effect and Teardown Functions in Svelte
DESCRIPTION: Demonstrates creating an effect that sets up a JavaScript `setInterval`. The effect returns a teardown function using `clearInterval` to clean up the interval when the effect's dependencies (`milliseconds`) change or when the component is destroyed, preventing memory leaks. The interval itself updates a `$state` variable (`count`).
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script>
	let count = $state(0);
	let milliseconds = $state(1000);

	$effect(() => {
		// This will be recreated whenever `milliseconds` changes
		const interval = setInterval(() => {
			count += 1;
		}, milliseconds);

		return () => {
			// if a teardown function is provided, it will run
			// a) immediately before the effect re-runs
			// b) when the component is destroyed
			clearInterval(interval);
		};
	});
</script>

<h1>{count}</h1>

<button onclick={() => (milliseconds *= 2)}>slower</button>
<button onclick={() => (milliseconds /= 2)}>faster</button>
```

----------------------------------------

TITLE: Text Expressions in Svelte
DESCRIPTION: Shows how to include JavaScript expressions as text in Svelte templates using curly braces.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_10

LANGUAGE: svelte
CODE:
```
<h1>Hello {name}!</h1>
<p>{a} + {b} = {a + b}.</p>

<div>{(/^[A-Za-z ]+$/).test(value) ? x : y}</div>
```

----------------------------------------

TITLE: Basic Value Binding in Svelte
DESCRIPTION: Demonstrates the basic syntax of bind:value directive with input elements, showing both explicit and shorthand formats.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<input bind:value={value} />
<input bind:value />
```

----------------------------------------

TITLE: Passing Reactive State to Functions in Svelte
DESCRIPTION: This example demonstrates how to pass reactive state to functions in Svelte. It shows that functions need to use getter functions to access the current state values.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
function add(getA, getB) {
	return () => getA() + getB();
}

let a = $state(1);
let b = $state(2);
let total = add(() => a, () => b);
console.log(total()); // 3

a = 3;
b = 4;
console.log(total()); // 7
```

----------------------------------------

TITLE: Converting $: to $derived in Svelte 5
DESCRIPTION: Demonstrates how to migrate a reactive declaration from Svelte 4's $: syntax to Svelte 5's $derived rune.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_1

LANGUAGE: svelte
CODE:
```
<script>
	let count = $state(0);
	const double = $derived(count * 2);
</script>
```

----------------------------------------

TITLE: Event Handling in Svelte
DESCRIPTION: Demonstrates how to add event listeners to elements in Svelte using on:event syntax.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_9

LANGUAGE: svelte
CODE:
```
<button onclick={() => console.log('clicked')}>click me</button>
```

----------------------------------------

TITLE: Iterating Over Arrays with Each Block - Svelte
DESCRIPTION: Demonstrates basic usage of the 'each' block in Svelte for iterating over arrays of items. No dependencies are required, and it shows how to access individual item properties within the loop.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```

<h1>Shopping list</h1>
<ul>
	{#each items as item}
		<li>{item.name} x {item.qty}</li>
	{/each}
</ul>

```

----------------------------------------

TITLE: Using the Implicit Children Snippet in Svelte
DESCRIPTION: Shows how content inside component tags that is not a snippet declaration implicitly becomes part of the 'children' snippet, which can be accessed in the component.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_7

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->
<Button>click me</Button>
```

LANGUAGE: svelte
CODE:
```
<!--- file: Button.svelte --->
<script>
	let { children } = $props();
</script>

<!-- result will be <button>click me</button> -->
<button>{@render children()}</button>
```

----------------------------------------

TITLE: Creating a Bindable Prop in Svelte
DESCRIPTION: This snippet shows how to create a bindable prop 'value' in a Svelte component using the $bindable rune. It also demonstrates how to use the bind directive with an input element.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/06-$bindable.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	let { value = $bindable(), ...props } = $props();
</script>

<input bind:value={value} {...props} />

<style>
	input {
		font-family: 'Comic Sans MS';
		color: deeppink;
	}
</style>
```

----------------------------------------

TITLE: State Management with Runes
DESCRIPTION: Shows how to manage shared state using Svelte 5's runes feature as an alternative to stores.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
/// file: state.svelte.js
export const userState = $state({
	name: 'name',
	/* ... */
});
```

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->
<script>
	import { userState } from './state.svelte.js';
</script>

<p>User name: {userState.name}</p>
<button onclick={() => {
	userState.name = 'new name';
}>
	change name
</button>
```

----------------------------------------

TITLE: Destructuring Props in a Svelte Component using $props
DESCRIPTION: Illustrates the common practice of destructuring the object returned by `$props()` directly into local variables within the component's script. This provides more concise access to individual prop values like `adjective`.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<!--- file: MyComponent.svelte --->
<script>
	let { adjective } = $props();
</script>

<p>this component is {adjective}</p>
```

----------------------------------------

TITLE: Dynamic Attribute Values in Svelte
DESCRIPTION: Shows how to use JavaScript expressions within attribute values for dynamic content.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<a href="page/{p}">page {p}</a>
```

----------------------------------------

TITLE: Low-Level Component Testing with Vitest
DESCRIPTION: Provides an example of low-level component testing using Vitest, illustrating how to instantiate a component, perform UI interactions, and assert outcomes using jsdom to simulate a browser environment.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_10

LANGUAGE: js
CODE:
```
import { flushSync, mount, unmount } from 'svelte';
import { expect, test } from 'vitest';
import Component from './Component.svelte';

test('Component', () => {
	const component = mount(Component, {
		target: document.body,
		props: { initial: 0 }
	});

	expect(document.body.innerHTML).toBe('<button>0</button>');

	document.body.querySelector('button').click();
	flushSync();

	expect(document.body.innerHTML).toBe('<button>1</button>');

	unmount(component);
});
```

----------------------------------------

TITLE: Svelte #if Block with Else
DESCRIPTION: Illustrates the complete structure of a Svelte #if block including an else clause.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/02-if.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
{#if expression}...{:else}...{/if}
```

----------------------------------------

TITLE: Svelte #if Block with Else If
DESCRIPTION: Shows the structure of a Svelte #if block including an else if condition.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/02-if.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
{#if expression}...{:else if expression}...{/if}
```

----------------------------------------

TITLE: Testing Components with @testing-library/svelte
DESCRIPTION: Demonstrates a modern approach to component testing using @testing-library/svelte. This example shows how to render components, simulate user events, and assert UI changes with better readability and maintainability.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_11

LANGUAGE: js
CODE:
```
import { render, screen } from '@testing-library/svelte';
import userEvent from '@testing-library/user-event';
import { expect, test } from 'vitest';
import Component from './Component.svelte';

test('Component', async () => {
	const user = userEvent.setup();
	render(Component);

	const button = screen.getByRole('button');
	expect(button).toHaveTextContent(0);

	await user.click(button);
	expect(button).toHaveTextContent(1);
});
```

----------------------------------------

TITLE: Displaying Reactive Window Dimensions Using Svelte (Svelte, Svelte)
DESCRIPTION: This code demonstrates importing the reactive window properties 'innerWidth' and 'innerHeight' from the 'svelte/reactivity/window' module and displaying their current values in a Svelte component. No additional dependencies are required beyond Svelte itself. The properties automatically update in response to window size changes, and can be used in templates and reactive expressions. Inputs are the reactive window properties; output is a rendered paragraph displaying the dynamic window dimensions. This approach eliminates the need for manual event listeners or window bindings.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/98-reference/21-svelte-reactivity-window.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>\n\timport { innerWidth, innerHeight } from 'svelte/reactivity/window';\n</script>\n\n<p>{innerWidth.current}x{innerHeight.current}</p>
```

----------------------------------------

TITLE: Demonstrating Non-Reactive Updates in Svelte
DESCRIPTION: Example showing the difference between reactive ($state) and non-reactive variable updates in Svelte components.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/script.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	let reactive = $state('reactive');
	let stale = 'stale';
</script>

<p>This value updates: {reactive}</p>
<p>This value does not update: {stale}</p>

<button onclick={() => {
	stale = 'updated';
	reactive = 'updated';
}}>update</button>
```

----------------------------------------

TITLE: Using Svelte Snippets for Repeated Content
DESCRIPTION: Demonstrates how to use snippets to reduce duplicative code in an image gallery. The example creates a reusable figure snippet that can be rendered in different contexts.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
{#each images as image}
	{#if image.href}
		<a href={image.href}>
			<figure>
				<img src={image.src} alt={image.caption} width={image.width} height={image.height} />
				<figcaption>{image.caption}</figcaption>
			</figure>
		</a>
	{:else}
		<figure>
			<img src={image.src} alt={image.caption} width={image.width} height={image.height} />
			<figcaption>{image.caption}</figcaption>
		</figure>
	{/if}
{/each}
```

LANGUAGE: svelte
CODE:
```
{#snippet figure(image)}
	<figure>
		<img src={image.src} alt={image.caption} width={image.width} height={image.height} />
		<figcaption>{image.caption}</figcaption>
	</figure>
{/snippet}

{#each images as image}
	{#if image.href}
		<a href={image.href}>
			{@render figure(image)}
		</a>
	{:else}
		{@render figure(image)}
	{/if}
{/each}
```

----------------------------------------

TITLE: Using $effect for Canvas Drawing in Svelte
DESCRIPTION: Shows how to use the `$effect` rune to interact with a canvas element. The effect function accesses `$state` variables (`size`, `color`) and re-runs whenever they change, updating the canvas drawing accordingly. It depends on a bound `canvas` element and runs only in the browser after mount and subsequent state updates.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	let size = $state(50);
	let color = $state('#ff3e00');

	let canvas;

	$effect(() => {
		const context = canvas.getContext('2d');
		context.clearRect(0, 0, canvas.width, canvas.height);

		// this will re-run whenever `color` or `size` change
		context.fillStyle = color;
		context.fillRect(0, 0, size, size);
	});
</script>

<canvas bind:this={canvas} width="100" height="100"></canvas>
```

----------------------------------------

TITLE: Window Scroll Position Binding in Svelte
DESCRIPTION: Demonstrates how to bind the window's scroll position (scrollY) to a component variable.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/02-svelte-window.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<svelte:window bind:scrollY={y} />
```

----------------------------------------

TITLE: Typing $state Variables in Svelte Components - typescript
DESCRIPTION: Demonstrates typing usage for Svelte's $state helper in TypeScript code. Shows both initializing with a value for correct typing and a scenario where omitting the value leads to the type including undefined, triggering a type error. Inputs are intended to be the initial values (or lack thereof) passed into $state calls; output is a strongly-typed or type-error-producing variable depending on initialization.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_7

LANGUAGE: typescript
CODE:
```
let count: number = $state(0);
```

LANGUAGE: typescript
CODE:
```
// @noErrors
// Error: Type 'number | undefined' is not assignable to type 'number'
let count: number = $state();
```

----------------------------------------

TITLE: Using Context with Reactive State in Svelte
DESCRIPTION: Demonstrates how to use context with reactive state in a Svelte component, including incrementing a counter.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<script>
	import { setContext } from 'svelte';
	import Child from './Child.svelte';

	let counter = $state({
		count: 0
	});

	setContext('counter', counter);
</script>

<button onclick={() => counter.count += 1}>
	increment
</button>

<Child />
<Child />
<Child />
```

----------------------------------------

TITLE: Recommended Approach: Using Function Bindings and Callbacks
DESCRIPTION: Shows the recommended approach for linking inputs using function bindings or callbacks instead of effects. This is more explicit and avoids potential infinite loops.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_11

LANGUAGE: svelte
CODE:
```
<script>
	let total = 100;
	let spent = $state(0);
	let left = $state(total);

	function updateSpent(value) {
		spent = value;
		left = total - spent;
	}

	function updateLeft(value) {
		left = value;
		spent = total - left;
	}
</script>

<label>
	<input type="range" bind:value={() => spent, updateSpent} max={total} />
	{spent}/{total} spent
</label>

<label>
	<input type="range" bind:value={() => left, updateLeft} max={total} />
	{left}/{total} left
</label>
```

----------------------------------------

TITLE: Chat Window with Autoscroll using $effect.pre in Svelte 5
DESCRIPTION: Demonstrates upgrading from Svelte 4's beforeUpdate to Svelte 5's $effect.pre for implementing an autoscrolling chat window. The example shows how runes provide more granular control over reactivity compared to the deprecated lifecycle hooks.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<script>
	import { tick } from 'svelte';

	let theme = $state('dark');
	let messages = $state([]);

	let viewport;

	$effect.pre(() => {
		messages;
		const autoscroll = viewport && viewport.offsetHeight + viewport.scrollTop > viewport.scrollHeight - 50;

		if (autoscroll) {
			tick().then(() => {
				viewport.scrollTo(0, viewport.scrollHeight);
			});
		}

	});

	function handleKeydown(event) {
		if (event.key === 'Enter') {
			const text = event.target.value;
			if (!text) return;

			messages = [...messages, text];
			event.target.value = '';
		}
	}

	function toggle() {
		theme = theme === 'dark' ? 'light' : 'dark';
	}
</script>

<div class:dark={theme === 'dark'}>
	<div bind:this={viewport}>
		{#each messages as message}
			<p>{message}</p>
		{/each}
	</div>

	<input onkeydown={handleKeydown} />

	<button onclick={toggle}> Toggle dark mode </button>
</div>
```

----------------------------------------

TITLE: Declaring Bindable Properties with $bindable Rune - Svelte - Svelte
DESCRIPTION: This script demonstrates two ways to declare a bindable component property using Svelte's experimental $bindable rune. The first uses $bindable() for a property bindableProperty, signalling that it can be bound by a parent component. The second assigns a fallback value with $bindable('fallback value'), which serves only if the property is not bound. If bound without a value, a runtime error is thrown. This technique enables controlled two-way prop binding.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
<script>
	let { readonlyProperty, bindableProperty = $bindable() } = $props();
</script>
```

LANGUAGE: javascript
CODE:
```
<script>
	let { bindableProperty = $bindable('fallback value') } = $props();
</script>
```

----------------------------------------

TITLE: Exporting Reactive State Across Modules in Svelte
DESCRIPTION: This snippet shows how to correctly export reactive state across modules in Svelte. It demonstrates that directly reassigned state cannot be exported, and provides two alternative approaches.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
// Option 1: Don't reassign the exported state
export const counter = $state({
	count: 0
});

export function increment() {
	counter.count += 1;
}
```

LANGUAGE: javascript
CODE:
```
// Option 2: Don't directly export the state
let count = $state(0);

export function getCount() {
	return count;
}

export function increment() {
	count += 1;
}
```

----------------------------------------

TITLE: Using onMount with Cleanup Function in Svelte 5
DESCRIPTION: Shows how to use the onMount hook with a return function that acts as cleanup when the component is unmounted. This pattern is useful for clearing intervals, event listeners, or other resources.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script>
	import { onMount } from 'svelte';

	onMount(() => {
		const interval = setInterval(() => {
			console.log('beep');
		}, 1000);

		return () => clearInterval(interval);
	});
</script>
```

----------------------------------------

TITLE: Basic Input Value Binding Example
DESCRIPTION: Demonstrates binding an input's value to a state variable with live updates.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<script>
	let message = $state('hello');
</script>

<input bind:value={message} />
<p>{message}</p>
```

----------------------------------------

TITLE: Correcting State Updates with Derived Values in Svelte 5
DESCRIPTION: This snippet demonstrates the correct way to handle derived values in Svelte 5, avoiding the 'state_unsafe_mutation' error. It uses $derived for both 'even' and 'odd' values based on the 'count' state.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-errors/errors.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
let count = 0;
// ---cut---
let even = $derived(count % 2 === 0);
let odd = $derived(!even);
```

----------------------------------------

TITLE: Installing Vitest in Vite Projects
DESCRIPTION: Installs the Vitest testing framework, which is recommended for Svelte projects using Vite. This installation is necessary for running unit and integration tests.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npm install -D vitest
```

----------------------------------------

TITLE: Updating server-side rendering in Svelte 5
DESCRIPTION: This example demonstrates how to update server-side rendering code for Svelte 5. It replaces the static render method with the new render function imported from svelte/server.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
+++import { render } from 'svelte/server';+++
import App from './App.svelte';

---const { html, head } = App.render({ props: { message: 'hello' }});---
+++const { html, head } = render(App, { props: { message: 'hello' }});+++
```

----------------------------------------

TITLE: Adding TypeScript Preprocessing to Svelte Project Configuration - Vite/SvelteKit - typescript
DESCRIPTION: Configures preprocessing for Svelte to use TypeScript features outside of type-only syntax by using vitePreprocess within svelte.config.js. Dependencies include '@sveltejs/vite-plugin-svelte' and a supporting build tool (e.g. Vite or SvelteKit). The key parameter is the preprocess setting which enables comprehensive TypeScript support including transpilation. No direct input/output, but this config is required for correct project behavior.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
/// file: svelte.config.js
// @noErrors
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

const config = {
	// Note the additional `{ script: true }`
	preprocess: vitePreprocess({ script: true })
};

export default config;
```

----------------------------------------

TITLE: Basic Svelte #if Block Structure
DESCRIPTION: Demonstrates the basic structure of a Svelte #if block for conditional rendering.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/02-if.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
{#if expression}...{/if}
```

----------------------------------------

TITLE: Handling Errors with a 'failed' Snippet
DESCRIPTION: Demonstrates the use of a 'failed' snippet within a Svelte boundary to handle and recover from component errors. It includes a reset function to restore the component state. This feature requires Svelte version 5.3.0 or later.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/01-svelte-boundary.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<svelte:boundary>
	<FlakyComponent />

	{#snippet failed(error, reset)}
		<button onclick={reset}>oops! try again</button>
	{/snippet}
</svelte:boundary>
```

----------------------------------------

TITLE: Using the class: Directive in Svelte
DESCRIPTION: Demonstrates using the `class:` directive to conditionally add classes based on boolean variables. The directive simplifies the syntax for adding classes when condition matches class name.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<!-- These are equivalent -->\n<div class={{ cool, lame: !cool }}>...</div>\n<div class:cool={cool} class:lame={!cool}>...</div>
```

LANGUAGE: svelte
CODE:
```
<div class:cool class:lame={!cool}>...</div>
```

----------------------------------------

TITLE: Boolean and Nullish Attribute Handling in Svelte
DESCRIPTION: Demonstrates how Svelte handles boolean attributes and nullish values for attributes.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<input required={false} placeholder="This input field is not required" />
<div title={null}>This div has no title attribute</div>
```

----------------------------------------

TITLE: Handling Svelte State Proxies in Console Logging
DESCRIPTION: Suggests using $inspect or $state.snapshot for logging Svelte state proxies to avoid confusion with browser devtools displaying the proxy itself rather than its value.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-warnings/warnings.md#2025-04-22_snippet_1



----------------------------------------

TITLE: Using Mixed Classes in Svelte Component
DESCRIPTION: Demonstrates composing multiple class types in a component. Combines embedded styles with prop-based styles using objects and arrays, demonstrating flexibility with props.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<!--- file: Button.svelte --->\n<script>\n\tlet props = $props();\n</script>\n\n<button {...props} class={['cool-button', props.class]}>\n\t{@render props.children?.()}\n</button>
```

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->\n<script>\n\timport Button from './Button.svelte';\n\tlet useTailwind = $state(false);\n</script>\n\n<Button\n\tonclick={() => useTailwind = true}\n\tclass={{ 'bg-blue-700 sm:w-1/2': useTailwind }}\n>\n\tAccept the inevitability of Tailwind\n</Button>
```

----------------------------------------

TITLE: Documenting Svelte Components with Comments
DESCRIPTION: This Svelte code demonstrates how to add documentation to components using comment syntax recognized by the Svelte Language Server. JSDoc comments (`/** ... */`) are used within the `<script>` tag to document exported props like `name`. A special HTML comment (`<!-- @component ... -->`) provides component-level documentation, supporting markdown and code blocks, which is surfaced by tools like VS Code hover information. The `@component` directive is required for the component-level HTML comment documentation.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/99-faq.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
```svelte
<script>
	/** What should we call the user? */
	export let name = 'world';
</script>

<!--
@component
Here's some documentation for this component.
It will show up on hover.

- You can use markdown here.
- You can also use code blocks here.
- Usage:
  ```svelte
  <main name="Arethra">
  ```
-->
<main>
	<h1>
		Hello, {name}
	</h1>
</main>
```
```

----------------------------------------

TITLE: Migrating Default Slot Content to Children Props
DESCRIPTION: Shows how to migrate from using default slots in Svelte 4 to using the children prop with render tags in Svelte 5.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_11

LANGUAGE: svelte
CODE:
```
<script>
	+++let { children } = $props();+++
</script>

---<slot />---
+++{@render children?.()}+++
```

----------------------------------------

TITLE: Writable Store Implementation
DESCRIPTION: Example of creating and using a writable store with subscription handling and value updates.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
/// file: store.js
import { writable } from 'svelte/store';

const count = writable(0);

count.subscribe((value) => {
	console.log(value);
}); // logs '0'

count.set(1); // logs '1'

count.update((n) => n + 1); // logs '2'
```

----------------------------------------

TITLE: Parent Passing a Reactive Object Prop (Svelte)
DESCRIPTION: Parent component (`App.svelte`) using `$state` to create a reactive object which is passed as a prop to the `Child` component.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_10

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->
<script>
	import Child from './Child.svelte';

	let object = $state({count: 0});
</script>

<Child {object} />
```

----------------------------------------

TITLE: Using onMount Hook in Svelte 5
DESCRIPTION: Demonstrates how to use the onMount lifecycle hook to run code after a component is mounted to the DOM. This hook is called during component initialization and doesn't run during server-side rendering.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	import { onMount } from 'svelte';

	onMount(() => {
		console.log('the component has mounted');
	});
</script>
```

----------------------------------------

TITLE: Complex Derivations with $derived.by in Svelte
DESCRIPTION: This code snippet explains using `$derived.by` for complex derivations in Svelte components, allowing more elaborate logic in derived states. The `total` variable calculates the sum of an array `numbers`, reacting to additions in the array. Dependencies are managed automatically, marking the derived value as dirty when `numbers` change.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/03-$derived.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script>
	let numbers = $state([1, 2, 3]);
	let total = $derived.by(() => {
		let total = 0;
		for (const n of numbers) {
			total += n;
		}
		return total;
	});
</script>

<button onclick={() => numbers.push(numbers.length + 1)}>
	{numbers.join(' + ')} = {total}
</button>
```

----------------------------------------

TITLE: Tracking Object vs. Property Dependencies in $effect (Svelte)
DESCRIPTION: Explains the nuance of dependency tracking with `$effect`. Accessing the `$state` object (`state`) directly only triggers the effect if the object reference changes (rarely), while accessing a property like `state.value` tracks changes to that property. Accessing a `$derived` value (`derived`) always triggers re-runs on source changes because it creates a new object reference.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<script>
	let state = $state({ value: 0 });
	let derived = $derived({ value: state.value * 2 });

	// this will run once, because `state` is never reassigned (only mutated)
	$effect(() => {
		state;
	});

	// this will run whenever `state.value` changes...
	$effect(() => {
		state.value;
	});

	// ...and so will this, because `derived` is a new object each time
	$effect(() => {
		derived;
	});
</script>

<button onclick={() => (state.value += 1)}>
	{state.value}
</button>

<p>{state.value} doubled is {derived.value}</p>
```

----------------------------------------

TITLE: Server-Side Rendering with Svelte
DESCRIPTION: Renders a component on the server, returning an object with HTML content for both body and head sections. This function is only available when compiling with the server option.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/04-imperative-component-api.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// @errors: 2724 2305 2307
import { render } from 'svelte/server';
import App from './App.svelte';

const result = render(App, {
	props: { some: 'property' }
});
result.body; // HTML for somewhere in this <body> tag
result.head; // HTML for somewhere in this <head> tag
```

----------------------------------------

TITLE: Using Object for Class Attribute in Svelte
DESCRIPTION: This example demonstrates setting class attributes using an object, where truthy object keys determine the applied classes. It leverages the `clsx` library in Svelte 5.16. This requires the `props` object to include a `cool` key.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script>\n\tlet { cool } = $props();\n</script>\n\n<!-- results in `class=\"cool\"` if `cool` is truthy,\n     `class=\"lame\"` otherwise -->\n<div class={{ cool, lame: !cool }}>...</div>
```

----------------------------------------

TITLE: Using Array for Class Attribute in Svelte
DESCRIPTION: In this snippet, an array is used to dynamically compose class attributes. Composed classes depend on truthy evaluations of conditions and flattening using `clsx`. Requires `faded` and `large` state variables.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<!-- if `faded` and `large` are both truthy, results in\n     `class=\"saturate-0 opacity-50 scale-200\"` -->\n<div class={[faded && 'saturate-0 opacity-50', large && 'scale-200']}>...</div>
```

----------------------------------------

TITLE: Basic Await Block Structure in Svelte
DESCRIPTION: Demonstrates the full syntax of an await block in Svelte, including pending, fulfilled, and rejected states.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
{#await expression}...{:then name}...{:catch name}...{/await}
```

----------------------------------------

TITLE: Typing Svelte Props with a TypeScript Interface
DESCRIPTION: Illustrates defining a separate TypeScript `interface` (named `Props`) to describe the shape of the component's props and then using that interface to type the destructured `$props()` result. This improves organization for components with multiple props.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_15

LANGUAGE: svelte
CODE:
```
<script lang="ts">
	interface Props {
		adjective: string;
	}

	let { adjective }: Props = $props();
</script>
```

----------------------------------------

TITLE: Full Await Block Example in Svelte
DESCRIPTION: Provides a complete example of an await block handling all three states of a Promise: pending, fulfilled, and rejected.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
{#await promise}
	<!-- promise is pending -->
	<p>waiting for the promise to resolve...</p>
{:then value}
	<!-- promise was fulfilled or not a Promise -->
	<p>The value is {value}</p>
{:catch error}
	<!-- promise was rejected -->
	<p>Something went wrong: {error.message}</p>
{/await}
```

----------------------------------------

TITLE: Converting export let to $props in Svelte 5
DESCRIPTION: Demonstrates how to migrate component props from Svelte 4's export let syntax to Svelte 5's $props rune with destructuring.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_3

LANGUAGE: svelte
CODE:
```
<script>
	let { optional = 'unset', required } = $props();
</script>
```

----------------------------------------

TITLE: Comparing Event Modifiers in Svelte 4 vs 5
DESCRIPTION: Shows how Svelte 4's event modifiers are replaced with explicit function wrappers in Svelte 5. The example demonstrates how to implement 'once' and 'preventDefault' modifiers as wrapper functions.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_6

LANGUAGE: svelte
CODE:
```
<button on:click|once|preventDefault={handler}>...</button>
```

LANGUAGE: svelte
CODE:
```
<script>
	function once(fn) {
		return function (event) {
			if (fn) fn.call(this, event);
			fn = null;
		};
	}

	function preventDefault(fn) {
		return function (event) {
			event.preventDefault();
			fn.call(this, event);
		};
	}
</script>

<button onclick={once(preventDefault(handler))}>...</button>
```

----------------------------------------

TITLE: Replacing event modifiers with inline event handling in Svelte 5
DESCRIPTION: This example shows how to replace the preventDefault event modifier from svelte/legacy with inline event handling in Svelte 5. The new approach calls event.preventDefault() directly in the event handler.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_15

LANGUAGE: svelte
CODE:
```
<script>
	---import { preventDefault } from 'svelte/legacy';---
</script>

<button
	onclick={---preventDefault---((event) => {
		+++event.preventDefault();+++
		// ...
	})}
>
	click me
</button>
```

----------------------------------------

TITLE: Obtaining DOM Node References via bind:this - Svelte - Svelte
DESCRIPTION: This snippet illustrates the use of bind:this to acquire a reference to a DOM node—in this case, a canvas element. The script block declares a variable canvas of type HTMLCanvasElement and sets up a Svelte effect ($effect) to access the canvas context and invoke a drawing function. This pattern requires the component to be mounted before the DOM node reference is available.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
<script>
	/** @type {HTMLCanvasElement} */
	let canvas;

	$effect(() => {
		const ctx = canvas.getContext('2d');
		drawStuff(ctx);
	});
</script>
```

LANGUAGE: svelte
CODE:
```
<canvas bind:this={canvas}></canvas>
```

----------------------------------------

TITLE: Event Handler Updates in Svelte 5
DESCRIPTION: Demonstrates the new way of handling events in Svelte 5 without the on: directive.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_5

LANGUAGE: svelte
CODE:
```
<script>
	let count = $state(0);

	function onclick() {
		count++;
	}
</script>

<button {onclick}>
	clicks: {count}
</button>
```

----------------------------------------

TITLE: Reactive Dimension Bindings with Chart Component - Svelte - Svelte
DESCRIPTION: This snippet binds the offsetWidth and offsetHeight properties of a div to Svelte variables width and height, which are then passed as props to a nested Chart component. It utilizes Svelte's readonly bindings, internally relying on a ResizeObserver to update the bound variables. The width and height parameters represent the current dimensions of the container, dynamically adjusting the child Chart’s rendering.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_6

LANGUAGE: svelte
CODE:
```
<div bind:offsetWidth={width} bind:offsetHeight={height}>
	<Chart {width} {height} />
</div>
```

----------------------------------------

TITLE: Simple Conditional Rendering in Svelte
DESCRIPTION: Demonstrates a basic example of conditional rendering using a Svelte #if block. It checks if the 'answer' variable is equal to 42.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/02-if.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
{#if answer === 42}
	<p>what was the question?</p>
{/if}
```

----------------------------------------

TITLE: Scoped Style Example
DESCRIPTION: Shows how CSS styles in a Svelte component are scoped to that component only. The styling will only affect elements within this component and not elsewhere in the application.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/01-introduction/03-svelte-files.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<style>
	p {
		/* this will only affect <p> elements in this component */
		color: burlywood;
	}
</style>
```

----------------------------------------

TITLE: JavaScript Expressions as Attribute Values in Svelte
DESCRIPTION: Illustrates how to use JavaScript expressions directly as attribute values in Svelte.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<button disabled={!clickable}>...</button>
```

----------------------------------------

TITLE: Renaming Svelte Props During Destructuring
DESCRIPTION: Shows how to rename a prop during destructuring using the `:` syntax. This is useful if the incoming prop name is a JavaScript reserved keyword (like `super`) or an invalid identifier. It also demonstrates combining renaming with setting a fallback value.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
let { super: trouper = 'lights are gonna find me' } = $props();
```

----------------------------------------

TITLE: Defining Svelte Snippets with Basic Syntax
DESCRIPTION: Shows the syntax for creating snippets in Svelte with and without parameters. Snippets are a way to create reusable chunks of markup inside components.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
{#snippet name()}...{/snippet}
```

LANGUAGE: svelte
CODE:
```
{#snippet name(param1, param2, paramN)}...{/snippet}
```

----------------------------------------

TITLE: Exporting Imperative Methods from a Svelte Component - Svelte - Svelte
DESCRIPTION: This code from ShoppingCart.svelte showcases the export of an imperative method (empty) from a Svelte component. By using the export function syntax, the method becomes accessible on the component's instance for parent components via bind:this. This enables declarative-to-imperative communication between components.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
<script>
	// All instance exports are available on the instance object
	export function empty() {
		// ...
	}
</script>
```

----------------------------------------

TITLE: Understanding Asynchronous Dependency Tracking in $effect (TypeScript)
DESCRIPTION: Illustrates that `$effect` only tracks dependencies read synchronously within its function body. In this example, `color` is read immediately and becomes a dependency, while `size` is read inside a `setTimeout` callback (asynchronously) and thus changes to `size` will not cause the effect to re-run. Requires `canvas`, `color`, and `size` to be declared.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
// @filename: index.ts
declare let canvas: {
	width: number;
	height: number;
	getContext(type: '2d', options?: CanvasRenderingContext2DSettings): CanvasRenderingContext2D;
};
declare let color: string;
declare let size: number;

// ---cut---
$effect(() => {
	const context = canvas.getContext('2d');
	context.clearRect(0, 0, canvas.width, canvas.height);

	// this will re-run whenever `color` changes...
	context.fillStyle = color;

	setTimeout(() => {
		// ...but not when `size` changes
		context.fillRect(0, 0, size, size);
	}, 0);
});
```

----------------------------------------

TITLE: Anti-pattern: Linking Values with Effects
DESCRIPTION: Example of an anti-pattern where effects are used to link two inputs together. This approach can cause infinite loops and is unnecessarily complex.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_10

LANGUAGE: svelte
CODE:
```
<script>
	let total = 100;
	let spent = $state(0);
	let left = $state(total);

	$effect(() => {
		left = total - spent;
	});

	$effect(() => {
		spent = total - left;
	});
</script>

<label>
	<input type="range" bind:value={spent} max={total} />
	{spent}/{total} spent
</label>

<label>
	<input type="range" bind:value={left} max={total} />
	{left}/{total} left
</label>
```

----------------------------------------

TITLE: Defining an Error Boundary in Svelte
DESCRIPTION: This snippet demonstrates how to create a Svelte boundary using the 'onerror' attribute to handle errors. It is designed to prevent errors occurring within a component from affecting the entire app. The snippet requires a Svelte application with version 5.3.0 or later.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/01-svelte-boundary.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<svelte:boundary onerror={handler}>...</svelte:boundary>
```

----------------------------------------

TITLE: Using onDestroy Hook in Svelte 5
DESCRIPTION: Demonstrates the onDestroy lifecycle hook which runs immediately before a component is unmounted. This is the only lifecycle hook that runs inside server-side components.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<script>
	import { onDestroy } from 'svelte';

	onDestroy(() => {
		console.log('the component is being destroyed');
	});
</script>
```

----------------------------------------

TITLE: Accessing Variables in Snippet Scope
DESCRIPTION: Shows how snippets can reference values declared outside themselves, such as in script tags or parent blocks. Snippets have access to their surrounding lexical scope.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<script>
	let { message = `it's great to see you!` } = $props();
</script>

{#snippet hello(name)}
	<p>hello {name}! {message}!</p>
{/snippet}

{@render hello('alice')}
{@render hello('bob')}
```

----------------------------------------

TITLE: Logger Function with Effects in Svelte
DESCRIPTION: Implements a logger function that uses $effect to log updates as changes occur, facilitating tracking of state transformations in Svelte apps. Uses the $state API for reactive state management.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_7

LANGUAGE: js
CODE:
```
/**
 * @param {() => any} getValue
 */
export function logger(getValue) {
	/** @type {any[]} */
	let log = $state([]);

	$effect(() => {
		log.push(getValue());
	});

	return {
		get value() {
			return log;
		}
	};
}
```

----------------------------------------

TITLE: Creating Type-Safe Context Helpers in JavaScript
DESCRIPTION: Defines helper functions for setting and getting context with TypeScript type annotations for improved type safety.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_5

LANGUAGE: javascript
CODE:
```
import { getContext, setContext } from 'svelte';

const key = {};

/** @param {User} user */
export function setUserContext(user) {
	setContext(key, user);
}

export function getUserContext() {
	return /** @type {User} */ (getContext(key));
}
```

----------------------------------------

TITLE: Typing Svelte Props Inline with TypeScript
DESCRIPTION: Demonstrates adding type safety to Svelte component props using TypeScript. The type annotation `{ adjective: string }` is applied directly during the destructuring assignment of `$props()`.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_13

LANGUAGE: svelte
CODE:
```
<script lang="ts">
	let { adjective }: { adjective: string } = $props();
</script>
```

----------------------------------------

TITLE: Updating state management for component instances in Svelte 5
DESCRIPTION: This snippet shows how to replace the $set method with $state for managing reactive properties in Svelte 5. It demonstrates creating a reactive property object and manipulating it directly.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
+++import { mount } from 'svelte';+++
import App from './App.svelte'

---const app = new App({ target: document.getElementById("app"), props: { foo: 'bar' } });
app.$set({ foo: 'baz' });---
+++const props = $state({ foo: 'bar' });
const app = mount(App, { target: document.getElementById("app"), props });
props.foo = 'baz';+++
```

----------------------------------------

TITLE: Basic <svelte:head> Structure in Svelte
DESCRIPTION: Demonstrates the basic structure of the <svelte:head> element in Svelte. This element is used to insert content into the document's head section.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/05-svelte-head.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<svelte:head>...</svelte:head>
```

----------------------------------------

TITLE: Migrating Named Slots to Component Props with Render Tags
DESCRIPTION: Demonstrates how to replace named slots in Svelte 4 with component props and render tags in Svelte 5 for multiple content placeholders.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_12

LANGUAGE: svelte
CODE:
```
<script>
	+++let { header, main, footer } = $props();+++
</script>

<header>
	---<slot name="header" />---
	+++{@render header()}+++
</header>

<main>
	---<slot name="main" />---
	+++{@render main()}+++
</main>

<footer>
	---<slot name="footer" />---
	+++{@render footer()}+++
</footer>
```

----------------------------------------

TITLE: Generic TypeScript Typing for Svelte Snippets
DESCRIPTION: Demonstrates using TypeScript generics to create more strongly-typed snippet props, ensuring that data and snippet parameters are of the same type.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_10

LANGUAGE: svelte
CODE:
```
<script lang="ts" generics="T">
	import type { Snippet } from 'svelte';

	let {
		data,
		children,
		row
	}: {
		data: T[];
		children: Snippet;
		row: Snippet<[T]>;
	} = $props();
</script>
```

----------------------------------------

TITLE: Reactive Propagation with $derived in Svelte
DESCRIPTION: This code demonstrates reactive state propagation in Svelte using `$derived`. It highlights how derived values, such as `large`, react to changes in dependencies like `count`. The snippet emphasizes Svelte's push-pull reactivity model, where derived expressions are recalculated on read, provided their dependencies change.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/03-$derived.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<script>
	let count = $state(0);
	let large = $derived(count > 10);
</script>

<button onclick={() => count++}>
	{large}
</button>
```

----------------------------------------

TITLE: Capturing Rest Props in Svelte
DESCRIPTION: Illustrates how to use the rest property syntax (`...others`) during destructuring with `$props()` to capture all remaining props (those not explicitly destructured) into a separate object.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
let { a, b, c, ...others } = $props();
```

----------------------------------------

TITLE: Indexed Iteration - Svelte
DESCRIPTION: Illustrates how to include an index within an 'each' block in Svelte, allowing access to item indices during iteration similar to an index in 'array.map(...)'.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```

{#each items as item, i}
	<li>{i + 1}: {item.name} x {item.qty}</li>
{/each}

```

----------------------------------------

TITLE: Animating Keyed List Reordering with Built-In flip Animation - Svelte - Svelte
DESCRIPTION: Demonstrates how to use the built-in flip animation by applying the animate:flip directive to list items inside a keyed {#each} block in Svelte. No external dependencies are required, but the directive must target an immediate child of a keyed {#each} block. When the order of the data changes, Svelte triggers an animation for affected items. Expects a list variable in the component's state; input is the reordered list of items and output is an animated reordering of elements. Animations only run for reorders, not for creation/removal.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/15-animate.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<!-- When `list` is reordered the animation will run -->\n{#each list as item, index (item)}\n\t<li animate:flip>{item}</li>\n{/each}\n
```

----------------------------------------

TITLE: Shorthand Attribute Syntax in Svelte
DESCRIPTION: Shows the shorthand syntax for attributes where the name and value are the same.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_6

LANGUAGE: svelte
CODE:
```
<button {disabled}>...</button>
<!-- equivalent to
<button disabled={disabled}>...</button>
-->
```

----------------------------------------

TITLE: Window Property Binding in Svelte
DESCRIPTION: Shows how to bind window properties to component variables using the <svelte:window> element.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/02-svelte-window.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<svelte:window bind:prop={value} />
```

----------------------------------------

TITLE: Parent Component Updating a Prop Passed to Child (Svelte)
DESCRIPTION: Parent component (`App.svelte`) using `$state` to create reactive state (`count`) which is passed as a prop to the `Child` component. Clicking the button in the parent updates the state, which causes the prop value in the child to update.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_6

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->
<script>
	import Child from './Child.svelte';

	let count = $state(0);
</script>

<button onclick={() => (count += 1)}>
	clicks (parent): {count}
</button>

<Child {count} />
```

----------------------------------------

TITLE: Applying Separate In and Out Transitions in Svelte
DESCRIPTION: This Svelte code demonstrates using the `in:` and `out:` directives to apply distinct transitions. The `div` element uses the `fly` transition when it enters the DOM (`in:fly={{ y: 200 }}`) and the `fade` transition when it leaves (`out:fade`). Visibility is controlled by a checkbox bound to the reactive `$state` variable `visible`. Requires importing `fade` and `fly` from `svelte/transition`.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/14-in-and-out.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
  import { fade, fly } from 'svelte/transition';
  
  let visible = $state(false);
</script>

<label>
  <input type="checkbox" bind:checked={visible}>
  visible
</label>

{#if visible}
	<div in:fly={{ y: 200 }} out:fade>flies in, fades out</div>
{/if}
```

----------------------------------------

TITLE: Passing Data with Slots vs Snippets Across Components
DESCRIPTION: Shows how to migrate from Svelte 4's slot binding with 'let:' to Svelte 5's snippet approach for passing data between parent and child components.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_13

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->
<script>
	import List from './List.svelte';
</script>

<List items={['one', 'two', 'three']} ---let:item--->
	+++{#snippet item(text)}+++
		<span>{text}</span>
	+++{/snippet}+++
	---<span slot="empty">No items yet</span>---
	+++{#snippet empty()}
		<span>No items yet</span>
	{/snippet}+++
</List>
```

LANGUAGE: svelte
CODE:
```
<!--- file: List.svelte --->
<script>
	let { items, +++item, empty+++ } = $props();
</script>

{#if items.length}
	<ul>
		{#each items as entry}
			<li>
				---<slot item={entry} />---
				+++{@render item(entry)}+++
			</li>
		{/each}
	</ul>
{:else}
	---<slot name="empty" />---
	+++{@render empty?.()}+++
{/if}
```

----------------------------------------

TITLE: Lifecycle Method Usage in Svelte Components
DESCRIPTION: Illustrates the correct and incorrect use of lifecycle methods in Svelte components. Lifecycle methods like onMount can only be called during component initialization at the top level of the instance script.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/shared-errors/errors.md#2025-04-23_snippet_1

LANGUAGE: svelte
CODE:
```
<script>
    import { onMount } from 'svelte';

    function handleClick() {
        // This is wrong
        onMount(() => {})
    }

    // This is correct
    onMount(() => {})
</script>

<button onclick={handleClick}>click me</button>
```

----------------------------------------

TITLE: Spread Attributes in Svelte
DESCRIPTION: Shows how to use spread attributes to pass multiple properties to a component at once.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_8

LANGUAGE: svelte
CODE:
```
<Widget {...things} />
```

----------------------------------------

TITLE: Else Blocks in Each - Svelte
DESCRIPTION: An 'each' block can utilize an 'else' clause to provide alternative rendering when the list is empty. This example shows rendering a fallback message when no items are present.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```

{#each todos as todo}
	<p>{todo.text}</p>
{:else}
	<p>No tasks today!</p>
{/each}

```

----------------------------------------

TITLE: Updating Svelte 4 Component Instantiation to Svelte 5
DESCRIPTION: Demonstrates how to update Svelte 4 component instantiation code to work with Svelte 5's runes mode in JavaScript files.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_25

LANGUAGE: javascript
CODE:
```
import { mount } from 'svelte';
import App from './App.svelte'

const props = $state({ foo: 'bar' });
const app = mount(App, { target: document.getElementById("app"), props });
props.foo = 'baz';
```

----------------------------------------

TITLE: Defining Global State in Svelte Module
DESCRIPTION: Shows how to define global state in a separate Svelte module, which can be imported and used across components.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
export const myGlobalState = $state({
	user: {
		// ...
	}
	// ...
});
```

----------------------------------------

TITLE: Getting Context in Svelte Child Component
DESCRIPTION: Shows how to retrieve context in a child Svelte component using getContext function and display it.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script>
	import { getContext } from 'svelte';

	const message = getContext('my-context');
</script>

<h1>{message}, inside Child.svelte</h1>
```

----------------------------------------

TITLE: Adding SEO Elements with <svelte:head> in Svelte
DESCRIPTION: Shows how to use <svelte:head> to add SEO-related elements like title and meta description to the document head. This is crucial for improving a site's search engine optimization.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/05-svelte-head.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<svelte:head>
	<title>Hello world!</title>
	<meta name="description" content="This is where the description goes for SEO" />
</svelte:head>
```

----------------------------------------

TITLE: Using tick Function in Svelte 5
DESCRIPTION: Shows how to use the tick function to ensure UI updates complete before continuing execution. The tick function returns a promise that resolves when pending state changes have been applied.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<script>
	import { tick } from 'svelte';

	$effect.pre(() => {
		console.log('the component is about to update');
		tick().then(() => {
				console.log('the component just updated');
		});
	});
</script>
```

----------------------------------------

TITLE: Passing Snippets as Explicit Props
DESCRIPTION: Shows how to pass snippets as props to components, providing custom content for different parts of the component's structure. Here, table header and row snippets are passed.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<script>
	import Table from './Table.svelte';

	const fruits = [
		{ name: 'apples', qty: 5, price: 2 },
		{ name: 'bananas', qty: 10, price: 1 },
		{ name: 'cherries', qty: 20, price: 0.5 }
	];
</script>

{#snippet header()}
	<th>fruit</th>
	<th>qty</th>
	<th>price</th>
	<th>total</th>
{/snippet}

{#snippet row(d)}
	<td>{d.name}</td>
	<td>{d.qty}</td>
	<td>{d.price}</td>
	<td>{d.qty * d.price}</td>
{/snippet}

<Table data={fruits} {header} {row} />
```

----------------------------------------

TITLE: Applying Local and Global Transitions in Svelte
DESCRIPTION: This snippet illustrates the difference between local and global transitions in Svelte. Local transitions are scoped to their block, while global transitions respond to state changes in parent blocks. It uses Svelte's transition directive.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
{#if x}\n\t{#if y}\n\t\t<p transition:fade>fades in and out only when y changes</p>\n\n\t\t<p transition:fade|global>fades in and out when x or y change</p>\n\t{/if}\n{/if}
```

----------------------------------------

TITLE: Destructuring and Rest Patterns in Each Blocks - Svelte
DESCRIPTION: Demonstrates the use of JavaScript destructuring and rest patterns within Svelte's 'each' blocks to extract and pass properties more flexibly.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```

{#each items as { id, name, qty }, i (id)}
	<li>{i + 1}: {name} x {qty}</li>
{/each}

{#each objects as { id, ...rest }}
	<li><span>{id}</span><MyComponent {...rest} /></li>
{/each}

{#each items as [id, ...rest]}
	<li><span>{id}</span><MyComponent values={rest} /></li>
{/each}

```

----------------------------------------

TITLE: Setting Context in Svelte Parent Component
DESCRIPTION: Demonstrates how to set context in a parent Svelte component using setContext function.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	import { setContext } from 'svelte';

	setContext('my-context', 'hello from Parent.svelte');
</script>
```

----------------------------------------

TITLE: Migrating $: statements to $effect in Svelte 5
DESCRIPTION: This snippet demonstrates how to convert a $: statement using run() from svelte/legacy to $effect() in Svelte 5. The $effect() function is preferred for side effects in the new version.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_14

LANGUAGE: svelte
CODE:
```
<script>
	---import { run } from 'svelte/legacy';---
	---run(() => {---
	+++$effect(() => {+++
		// some side effect code
	})
</script>
```

----------------------------------------

TITLE: Converting $: to $effect in Svelte 5
DESCRIPTION: Shows how to migrate side effects from Svelte 4's $: syntax to Svelte 5's $effect rune.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_2

LANGUAGE: svelte
CODE:
```
<script>
	let count = $state(0);

	$effect(() => {
		if (count > 5) {
			alert('Count is too high!');
		}
	});
</script>
```

----------------------------------------

TITLE: Typing Wrapper Components Using HTMLButtonAttributes - svelte - svelte
DESCRIPTION: Illustrates how to forward all DOM attributes and children to a native element by destructuring HTMLButtonAttributes from $props. Utilizes Svelte's type definitions for DOM elements, ensuring type safety when exposing native props in wrapper components. Inputs are the props object passed to the component; the output is a native button with forwarded props and optional children rendering.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<script lang=\"ts\">
	import type { HTMLButtonAttributes } from 'svelte/elements';

	let { children, ...rest }: HTMLButtonAttributes = $props();
</script>

<button {...rest}>
	{@render children?.()}
</button>
```

----------------------------------------

TITLE: TypeScript Typing for Svelte Snippets
DESCRIPTION: Shows how to use TypeScript to type Svelte snippets using the Snippet interface imported from 'svelte'. Demonstrates defining parameter types for snippets.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_9

LANGUAGE: svelte
CODE:
```
<script lang="ts">
	import type { Snippet } from 'svelte';

	interface Props {
		data: any[];
		children: Snippet;
		row: Snippet<[any]>;
	}

	let { data, children, row }: Props = $props();
</script>
```

----------------------------------------

TITLE: Referencing a Component Instance with bind:this - Svelte - Svelte
DESCRIPTION: This highlights how to use bind:this to obtain a reference to a Svelte component instance. The ShoppingCart component exposes an empty() method, which is invoked programmatically on a button click through the bound cart variable. This enables imperative interaction with child component instances. The component must export relevant methods (such as empty) for them to be accessible via the instance.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_8

LANGUAGE: svelte
CODE:
```
<ShoppingCart bind:this={cart} />

<button onclick={() => cart.empty()}> Empty shopping cart </button>
```

----------------------------------------

TITLE: Svelte Component Migration Example
DESCRIPTION: Demonstrates the migration from svelte:component to direct component usage in Svelte 5 with conditional rendering.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/template.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
{#each items as item}
	---<svelte:component this={item.condition ? Y : Z} />---
	+++{@const Component = item.condition ? Y : Z}+++
	+++<Component />+++
{/each}
```

LANGUAGE: svelte
CODE:
```
<script>
	// ...
	let condition = $state(false);
	+++const Component = $derived(condition ? Y : Z);+++
</script>

---<svelte:component this={condition ? Y : Z} />---
+++<Component />+++
```

----------------------------------------

TITLE: Correctly Resetting Counter in Svelte Context
DESCRIPTION: Shows the correct way to reset a counter stored in context to maintain reactivity.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<button onclick={() => counter.count = 0}>
	reset
</button>
```

----------------------------------------

TITLE: Child Component with Reactive Context
DESCRIPTION: Fixed example showing a child component correctly accessing reactive state from context.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/script.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<!--- file: Child.svelte --->
<script>
	import { getContext } from 'svelte';

	const count = getContext('count');
</script>

<!-- This will update -->
<p>The count is {count()}</p>
```

----------------------------------------

TITLE: Using :global Block for Multiple Global Selectors in Svelte
DESCRIPTION: Demonstrates how to apply global styles to multiple selectors using a :global {...} block, including examples of both root-level and nested global styles.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/02-global-styles.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<style>
	:global {
		/* applies to every <div> in your application */
		div { ... }

		/* applies to every <p> in your application */
		p { ... }
	}

	.a :global {
		/* applies to every `.b .c .d` element, in any component,
		   that is inside an `.a` element in this component */
		.b .c .d {...}
	}
</style>
```

----------------------------------------

TITLE: Basic HTML Element Attributes in Svelte
DESCRIPTION: Shows how standard HTML attributes work in Svelte components, including disabled buttons and class attributes.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<div class="foo">
	<button disabled>can't touch this</button>
</div>
```

----------------------------------------

TITLE: Basic Syntax for the {#key} Block in Svelte
DESCRIPTION: This snippet illustrates the fundamental syntax of the Svelte `{#key}` block. It takes an `expression` as its key; when the value of this expression changes, the content enclosed within the block is destroyed and recreated.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/04-key.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
{#key expression}...{/key}
```

----------------------------------------

TITLE: Derived Store Examples
DESCRIPTION: Various examples of creating derived stores from single and multiple source stores.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
import { derived } from 'svelte/store';

const doubled = derived(a, ($a) => $a * 2);
```

LANGUAGE: typescript
CODE:
```
import { derived } from 'svelte/store';

const delayed = derived(
	a,
	($a, set) => {
		setTimeout(() => set($a), 1000);
	},
	2000
);

const delayedIncrement = derived(a, ($a, set, update) => {
	set($a);
	setTimeout(() => update((x) => x + 1), 1000);
});
```

----------------------------------------

TITLE: Using :global(...) Modifier for Individual Selectors in Svelte
DESCRIPTION: Demonstrates how to apply global styles to specific selectors using the :global(...) modifier. Shows examples for targeting body elements, nested elements, and class-based selectors.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/02-global-styles.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<style>
	:global(body) {
		/* applies to <body> */
		margin: 0;
	}

	div :global(strong) {
		/* applies to all <strong> elements, in any component,
		   that are inside <div> elements belonging
		   to this component */
		color: goldenrod;
	}

	p:global(.big.red) {
		/* applies to all <p> elements belonging to this component
		   with `class="big red"`, even if it is applied
		   programmatically (for example by a library) */
	}
</style>
```

----------------------------------------

TITLE: Readable Store Implementation
DESCRIPTION: Examples of creating readable stores with time-based updates and alternating values.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
import { readable } from 'svelte/store';

const time = readable(new Date(), (set) => {
	set(new Date());

	const interval = setInterval(() => {
		set(new Date());
	}, 1000);

	return () => clearInterval(interval);
});

const ticktock = readable('tick', (set, update) => {
	const interval = setInterval(() => {
		update((sound) => (sound === 'tick' ? 'tock' : 'tick'));
	}, 1000);

	return () => clearInterval(interval);
});
```

----------------------------------------

TITLE: Basic Style Directive Usage in Svelte
DESCRIPTION: Demonstrates the equivalence between using the style: directive and the traditional style attribute for setting a single style property.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<!-- These are equivalent -->
<div style:color="red">...</div>
<div style="color: red;">...</div>
```

----------------------------------------

TITLE: Basic Svelte Action Implementation
DESCRIPTION: Demonstrates the basic structure of a Svelte action using $effect for setup and cleanup. The action is called when an element is mounted and can perform setup and teardown operations.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/12-use.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	/** @type {import('svelte/action').Action} */
	function myaction(node) {
		// the node has been mounted in the DOM

		$effect(() => {
			// setup goes here

			return () => {
				// teardown goes here
			};
		});
	}
</script>

<div use:myaction>...</div>
```

----------------------------------------

TITLE: Using Expressions with Style Directive in Svelte
DESCRIPTION: Shows how to use JavaScript expressions within the style: directive to dynamically set style values.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<div style:color={myColor}>...</div>
```

----------------------------------------

TITLE: Installing jsdom for Component Testing
DESCRIPTION: Illustrates how to install jsdom for simulating browser environments in component tests, a common requirement when using Vitest with client-side components.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
npm install -D jsdom
```

----------------------------------------

TITLE: Implementing Typewriter Transition Effect in Svelte
DESCRIPTION: This Svelte snippet implements a typewriter transition effect, animating the text content display progressively. It validates node content and calculates duration based on text length and speed.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->\n<script>\n\texport let visible = false;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ speed?: number }} params\n\t */\n\tfunction typewriter(node, { speed = 1 }) {\n\t\tconst valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;\n\n\t\tif (!valid) {\n\t\t\tthrow new Error(`This transition only works on elements with a single text node child`);\n\t\t}\n\n\t\tconst text = node.textContent;\n\t\tconst duration = text.length / (speed * 0.01);\n\n\t\treturn {\n\t\t\tduration,\n\t\t\ttick: (t) => {\n\t\t\t\tconst i = ~~(text.length * t);\n\t\t\t\tnode.textContent = text.slice(0, i);\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>\n{/if}
```

----------------------------------------

TITLE: Typing Svelte Props with JSDoc
DESCRIPTION: Shows how to add type safety to Svelte component props using JSDoc comments within a standard JavaScript `<script>` tag. The `@type` annotation specifies the expected shape of the destructured props.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_14

LANGUAGE: svelte
CODE:
```
<script>
	/** @type {{ adjective: string }} */
	let { adjective } = $props();
</script>
```

----------------------------------------

TITLE: Playwright Configuration for E2E Testing
DESCRIPTION: Sets up the configuration file for Playwright, specifying the web server command, port, test directory, and file patterns. This setup is essential for running end-to-end tests using Playwright.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_12

LANGUAGE: js
CODE:
```
const config = {
	webServer: {
		command: 'npm run build && npm run preview',
		port: 4173
	},
	testDir: 'tests',
	testMatch: /(.+\.)?(test|spec)\.[jt]s/
};

export default config;
```

----------------------------------------

TITLE: Using a Bindable Prop in a Parent Component
DESCRIPTION: This snippet demonstrates how to use a bindable prop in a parent component. It imports the FancyInput component and binds its 'value' prop to a local state variable.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/06-$bindable.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script>
	import FancyInput from './FancyInput.svelte';

	let message = $state('hello');
</script>

<FancyInput bind:value={message} />
<p>{message}</p>
```

----------------------------------------

TITLE: Passing Custom Properties to Svelte Component
DESCRIPTION: Example showing how to pass both static and dynamic CSS custom properties to a Slider component. Demonstrates binding value and setting min/max properties along with custom CSS variables.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/03-custom-properties.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<Slider
	bind:value
	min={0}
	max={100}
	--track-color="black"
	--thumb-color="rgb({r} {g} {b})"
/>
```

----------------------------------------

TITLE: Fallback Content for Optional Snippets
DESCRIPTION: Shows how to handle undefined snippets using an if-else block to provide fallback content when the snippet is not available.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/07-@render.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
{#if children}
	{@render children()}
{:else}
	<p>fallback content</p>
{/if}
```

----------------------------------------

TITLE: Correct State Reference in Parent Component
DESCRIPTION: Fixed example showing proper way to pass reactive state to context using a function wrapper.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/script.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<!--- file: Parent.svelte --->
<script>
	import { setContext } from 'svelte';

	let count = $state(0);
	setContext('count', () => count);
</script>

<button onclick={() => count++}>
	increment
</button>
```

----------------------------------------

TITLE: Multiple Event Handlers in Svelte 4 vs 5
DESCRIPTION: Shows how to migrate from Svelte 4's multiple event handlers on a single element to Svelte 5's approach using a single handler that calls multiple functions.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_8

LANGUAGE: svelte
CODE:
```
<button on:click={one} on:click={two}>...</button>
```

LANGUAGE: svelte
CODE:
```
<button
	onclick={(e) => {
		one(e);
		two(e);
	}}
>
	...
</button>
```

----------------------------------------

TITLE: Writable Store with Subscription Handling
DESCRIPTION: Demonstrates writable store creation with subscription lifecycle management.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
/// file: store.js
import { writable } from 'svelte/store';

const count = writable(0, () => {
	console.log('got a subscriber');
	return () => console.log('no more subscribers');
});

count.set(1); // does nothing

const unsubscribe = count.subscribe((value) => {
	console.log(value);
}); // logs 'got a subscriber', then '1'

unsubscribe(); // logs 'no more subscribers'
```

----------------------------------------

TITLE: Converting let to $state in Svelte 5
DESCRIPTION: Shows how to migrate a reactive variable declaration from Svelte 4's implicit let syntax to Svelte 5's explicit $state rune.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	let count = $state(0);
</script>
```

----------------------------------------

TITLE: Restricting Dynamic Component Types and Props with Svelte's Component Type - svelte - svelte
DESCRIPTION: This snippet uses Svelte's Component type to restrict a property to only components with certain prop requirements. It demonstrates how to type the DynamicComponent prop and its expected props, as well as proper usage within the Svelte template. Inputs are component constructors and their typed props; output is a type-safe interface for rendering dynamic components.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_9

LANGUAGE: svelte
CODE:
```
<script lang=\"ts\">
	import type { Component } from 'svelte';

	interface Props {
		// only components that have at most the \"prop\"
		// property required can be passed
		DynamicComponent: Component<{ prop: string }>;
	}

	let { DynamicComponent }: Props = $props();
</script>

<DynamicComponent prop=\"foo\" />
```

----------------------------------------

TITLE: Typed Svelte Action with Custom Events
DESCRIPTION: Illustrates how to implement a typed Svelte action with custom event handlers. Includes type definitions for the node, parameters, and custom events.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/12-use.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<script>
	/**
	 * @type {import('svelte/action').Action<
	 * 	HTMLDivElement,
	 * 	undefined,
	 * 	{
	 * 		onswiperight: (e: CustomEvent) => void;
	 * 		onswipeleft: (e: CustomEvent) => void;
	 * 		// ...
	 * 	}
	 * >}
	 */
	function gestures(node) {
		$effect(() => {
			// ...
			node.dispatchEvent(new CustomEvent('swipeleft'));

			// ...
			node.dispatchEvent(new CustomEvent('swiperight'));
		});
	}
</script>

<div
	use:gestures
	onswipeleft={next}
	onswiperight={prev}
>...</div>
```

----------------------------------------

TITLE: Default TypeScript Preprocessing for SvelteKit/Vite Projects - typescript
DESCRIPTION: Showcases the typical svelte.config.js setup as generated by SvelteKit or Vite projects with TypeScript. vitePreprocess is used without extra options. This file ensures that the build system recognizes and processes TypeScript in Svelte files. Requires '@sveltejs/vite-plugin-svelte', input is the default config file, and output is TypeScript-enabled build processing.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
/// file: svelte.config.js
// @noErrors
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

const config = {
	preprocess: vitePreprocess()
};

export default config;
```

----------------------------------------

TITLE: Updating event handling for component instances in Svelte 5
DESCRIPTION: This example demonstrates how to update event handling when instantiating a component in Svelte 5. Instead of using the $on method, events are now passed via the events property in the options argument of the mount function.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_17

LANGUAGE: javascript
CODE:
```
+++import { mount } from 'svelte';+++
import App from './App.svelte'

---const app = new App({ target: document.getElementById("app") });
app.$on('event', callback);---
+++const app = mount(App, { target: document.getElementById("app"), events: { event: callback } });+++
```

----------------------------------------

TITLE: Incorrect State Reference in Parent Component
DESCRIPTION: Example showing incorrect way of passing state to context in Svelte, where state updates won't be reflected.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/script.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<!--- file: Parent.svelte --->
<script>
	import { setContext } from 'svelte';

	let count = $state(0);

	// warning: state_referenced_locally
	setContext('count', count);
</script>

<button onclick={() => count++}>
	increment
</button>
```

----------------------------------------

TITLE: Conditional Snippet Rendering in Svelte
DESCRIPTION: Shows how to conditionally render snippets using a ternary expression to choose between two different snippets based on a condition.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/07-@render.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
{@render (cool ? coolSnippet : lameSnippet)()}
```

----------------------------------------

TITLE: Expecting Component Constructor or Instance Types in Svelte with TypeScript - svelte - svelte
DESCRIPTION: Shows how to specify types for both Svelte component constructor and instance variables in a Svelte+TypeScript context. Utilizes typeof for the constructor and the imported SvelteComponent class for the instance. Inputs are assignments of Svelte components; outputs are strongly-typed variables for runtime and template use.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_11

LANGUAGE: svelte
CODE:
```
<script lang=\"ts\">
	import MyComponent from './MyComponent.svelte';

	let componentConstructor: typeof MyComponent = MyComponent;
	let componentInstance: MyComponent;
</script>

<MyComponent bind:this={componentInstance} />
```

----------------------------------------

TITLE: Updating component unmounting in Svelte 5
DESCRIPTION: This example demonstrates how to replace the $destroy method with the new unmount function in Svelte 5 for removing a component from the DOM.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
+++import { mount, unmount } from 'svelte';+++
import App from './App.svelte'

---const app = new App({ target: document.getElementById("app"), props: { foo: 'bar' } });
app.$destroy();---
+++const app = mount(App, { target: document.getElementById("app") });
unmount(app);+++
```

----------------------------------------

TITLE: Writing Unit Tests Using Vitest
DESCRIPTION: Demonstrates how to write unit tests for a Svelte module with Vitest. It includes dependency imports and a test case verifying the functionality of a multiplier function.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
import { flushSync } from 'svelte';
import { expect, test } from 'vitest';
import { multiplier } from './multiplier.svelte.js';

test('Multiplier', () => {
	let double = multiplier(0, 2);

	expect(double.value).toEqual(0);

	double.set(5);

	expect(double.value).toEqual(10);
});
```

----------------------------------------

TITLE: Handling src and @html Hydration Mismatches
DESCRIPTION: A pattern for handling hydration mismatches with src attributes and @html content in Svelte 5. This approach temporarily unsets and then resets values to force an update after mounting, which is necessary since Svelte 5 no longer automatically repairs these mismatches.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_31

LANGUAGE: svelte
CODE:
```
<script>
	let { markup, src } = $props();

	if (typeof window !== 'undefined') {
		// stash the values...
		const initial = { markup, src };

		// unset them...
		markup = src = undefined;

		$effect(() => {
			// ...and reset after we've mounted
			markup = initial.markup;
			src = initial.src;
		});
	}
</script>

{@html markup}
<img {src} />
```

----------------------------------------

TITLE: Anti-pattern: Using $effect for State Synchronization
DESCRIPTION: Example of an anti-pattern where $effect is used to synchronize state. This approach should be avoided in favor of using $derived for computed values.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_8

LANGUAGE: svelte
CODE:
```
<script>
	let count = $state(0);
	let doubled = $state();

	// don't do this!
	$effect(() => {
		doubled = count * 2;
	});
</script>
```

----------------------------------------

TITLE: Style Directive Precedence in Svelte
DESCRIPTION: Shows how style: directives take precedence over traditional style attributes when both are used on the same element.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<div style="color: blue;" style:color="red">This will be red</div>
```

----------------------------------------

TITLE: Styling Raw HTML in Svelte Using Global Styles
DESCRIPTION: This snippet shows how to apply global styles to raw HTML content in a Svelte component using the `:global` CSS modifier, given that scoped styles won't automatically apply to raw HTML.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/08-@html.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<style>
	article :global {
		a { color: hotpink }
		img { width: 100% }
	}
</style>
```

----------------------------------------

TITLE: Using $effect.pre for Pre-DOM Update Logic in Svelte
DESCRIPTION: Demonstrates the `$effect.pre` rune, which runs an effect *before* Svelte applies DOM updates. This example implements an autoscroll feature for a message list. It checks the scroll position of a bound `div` pre-update (triggered by changes in `messages.length`) and schedules the actual scroll using `tick()` to occur post-update, ensuring the scroll happens after new messages are rendered.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<script>
	import { tick } from 'svelte';

	let div = $state();
	let messages = $state([]);

	// ...

	$effect.pre(() => {
		if (!div) return; // not yet mounted

		// reference `messages` array length so that this code re-runs whenever it changes
		messages.length;

		// autoscroll when new messages are added
		if (div.offsetHeight + div.scrollTop > div.scrollHeight - 20) {
			tick().then(() => {
				div.scrollTo(0, div.scrollHeight);
			});
		}
	});
</script>

<div bind:this={div}>
	{#each messages as message}
		<p>{message}</p>
	{/each}
</div>
```

----------------------------------------

TITLE: Typing Wrapper Components with SvelteHTMLElements Interface - svelte - svelte
DESCRIPTION: Provides a method for typing props for native elements that do not have dedicated interfaces in Svelte. Demonstrates the use of SvelteHTMLElements for generic type-safe prop forwarding in wrapper components. Inputs are derived from $props and cast to the relevant SvelteHTMLElements shape; outputs are fully-typed props for the inner div.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_6

LANGUAGE: svelte
CODE:
```
<script lang=\"ts\">
	import type { SvelteHTMLElements } from 'svelte/elements';

	let { children, ...rest }: SvelteHTMLElements['div'] = $props();
</script>

<div {...rest}>
	{@render children?.()}
</div>
```

----------------------------------------

TITLE: Setting Fallback Values for Svelte Props
DESCRIPTION: Demonstrates how to provide a default (fallback) value for a prop using JavaScript destructuring syntax. If the parent component doesn't pass the `adjective` prop or passes `undefined`, the value 'happy' will be used instead. Note that fallback values are not reactive state proxies.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
let { adjective = 'happy' } = $props();
```

----------------------------------------

TITLE: Svelte Action with Parameters
DESCRIPTION: Shows how to pass and receive parameters in a Svelte action. The action receives both the DOM node and custom data as arguments.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/12-use.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script>
	/** @type {import('svelte/action').Action} */
	function myaction(node, data) {
		// ...
	}
</script>

<div use:myaction={data}>...</div>
```

----------------------------------------

TITLE: Implementing Fade Transition with Svelte
DESCRIPTION: This Svelte code demonstrates how to use the `fade` transition from the `svelte/transition` module. The code toggles the visibility of a div element with a fade effect. Dependencies include Svelte and the `fade` transition.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>\n\timport { fade } from 'svelte/transition';\n\n\tlet visible = $state(false);\n</script>\n\n<button onclick={() => visible = !visible}>toggle</button>\n\n{#if visible}\n\t<div transition:fade>fades in and out</div>\n{/if}
```

----------------------------------------

TITLE: Customized Fade Transition with Parameters in Svelte
DESCRIPTION: This example shows how to use transition parameters to customize the fade effect's duration. It demonstrates the use of object parameters within the transition directive.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
{#if visible}\n\t<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>\n{/if}
```

----------------------------------------

TITLE: Converting Class Props and Rest Props in Svelte 5
DESCRIPTION: Shows how to handle class renaming and rest props using the new $props syntax in Svelte 5.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_4

LANGUAGE: svelte
CODE:
```
<script>
	let { class: klass, ...rest } = $props();
</script>
<button class={klass} {...rest}>click me</button>
```

----------------------------------------

TITLE: Using Runes in Vitest Test Files
DESCRIPTION: Illustrates the use of runes in test files handled by Vitest, leveraging the state management and testing capabilities within Svelte applications.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_4

LANGUAGE: js
CODE:
```
import { flushSync } from 'svelte';
import { expect, test } from 'vitest';
import { multiplier } from './multiplier.svelte.js';

test('Multiplier', () => {
	let count = $state(0);
	let double = multiplier(() => count, 2);

	expect(double.value).toEqual(0);

	count = 5;

	expect(double.value).toEqual(10);
});
```

----------------------------------------

TITLE: Using Implicit Snippet Props in Svelte Components
DESCRIPTION: Demonstrates how snippets declared inside a component's tags implicitly become props on the component, providing a more concise authoring experience.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_6

LANGUAGE: svelte
CODE:
```
<!-- this is semantically the same as the above -->
<Table data={fruits}>
	{#snippet header()}
		<th>fruit</th>
		<th>qty</th>
		<th>price</th>
		<th>total</th>
	{/snippet}

	{#snippet row(d)}
		<td>{d.name}</td>
		<td>{d.qty}</td>
		<td>{d.price}</td>
		<td>{d.qty * d.price}</td>
	{/snippet}
</Table>
```

----------------------------------------

TITLE: Lazy Component Loading with Await in Svelte
DESCRIPTION: Demonstrates using an await block with dynamic import for lazy loading of components in Svelte.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_8

LANGUAGE: svelte
CODE:
```
{#await import('./Component.svelte') then { default: Component }}
	<Component />
{/await}
```

----------------------------------------

TITLE: Handling Transition Events in Svelte
DESCRIPTION: This example demonstrates how to handle transition events with Svelte elements. The code listens and responds to introductory and outroductory transition events with custom behavior.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_6

LANGUAGE: svelte
CODE:
```
{#if visible}\n\t<p\n\t\ttransition:fly={{ y: 200, duration: 2000 }}\n\t\tonintrostart={() => (status = 'intro started')}\n\t\tonoutrostart={() => (status = 'outro started')}\n\t\tonintroend={() => (status = 'intro ended')}\n\t\tonoutroend={() => (status = 'outro ended')}\n\t>\n\t\tFlies in and out\n\t</p>\n{/if}
```

----------------------------------------

TITLE: Implementing Each Block Reassignment and Binding in Svelte Runes Mode
DESCRIPTION: This snippet demonstrates the correct way to reassign and bind to array elements in Svelte's runes mode, using the index to modify the array directly.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/script.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script>
	let array = $state([1, 2, 3]);
</script>

{#each array as entry, i}
	<!-- reassignment -->
	<button onclick={() => array[i] = 4}>change</button>

	<!-- binding -->
	<input bind:value={array[i]}>
{/each}
```

----------------------------------------

TITLE: Type Assertion for $state Variables in Svelte Classes - typescript
DESCRIPTION: Shows the recommended way to assert types for $state in class properties where the initial value is assigned after instance creation. Uses 'as' type assertion to override the possibly-undefined type before assignment in the constructor. Inputs are class initializers and constructors; output is a strongly-typed $state-bound property inside the class.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_8

LANGUAGE: typescript
CODE:
```
class Counter {
	count = $state() as number;
	constructor(initial: number) {
		this.count = initial;
	}
}
```

----------------------------------------

TITLE: Redundant alt text for images in Svelte
DESCRIPTION: Shows examples of correct and incorrect alt text for images, avoiding redundant words like 'image', 'photo', or 'picture'.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_8

LANGUAGE: svelte
CODE:
```
<img src="foo" alt="Foo eating a sandwich." />

<!-- aria-hidden, won't be announced by screen reader -->
<img src="bar" aria-hidden="true" alt="Picture of me taking a photo of an image" />

<!-- A11y: Screen readers already announce <img> elements as an image. -->
<img src="foo" alt="Photo of foo being weird." />

<!-- A11y: Screen readers already announce <img> elements as an image. -->
<img src="bar" alt="Image of me at a bar!" />

<!-- A11y: Screen readers already announce <img> elements as an image. -->
<img src="foo" alt="Picture of baz fixing a bug." />
```

----------------------------------------

TITLE: Testing with Effects in Vitest
DESCRIPTION: Describes how to test Svelte functions that entail side effects using Vitest. The example involves utilizing $effect.root to manage effect-driven state changes.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_6

LANGUAGE: js
CODE:
```
import { flushSync } from 'svelte';
import { expect, test } from 'vitest';
import { logger } from './logger.svelte.js';

test('Effect', () => {
	const cleanup = $effect.root(() => {
		let count = $state(0);
		let log = logger(() => count);

		flushSync();
		expect(log.value).toEqual([0]);

		count = 1;
		flushSync();

		expect(log.value).toEqual([0, 1]);
	});

	cleanup();
});
```

----------------------------------------

TITLE: Unassociated form label in Svelte
DESCRIPTION: Shows examples of correct and incorrect ways to associate a label with a form control for accessibility.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_12

LANGUAGE: svelte
CODE:
```
<label for="id">B</label>

<label>C <input type="text" /></label>

<!-- A11y: A form label must be associated with a control. -->
<label>A</label>
```

----------------------------------------

TITLE: Specifying a Fallback Value for a Bindable Prop
DESCRIPTION: This snippet shows how to specify a fallback value for a bindable prop when no value is passed from the parent component.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/06-$bindable.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
let { value = $bindable('fallback'), ...props } = $props();
```

----------------------------------------

TITLE: Generating Unique Component Instance IDs using $props.id() (Svelte)
DESCRIPTION: Demonstrates using the `$props.id()` rune (added in Svelte 5.20.0) to generate a unique ID specific to the current component instance. This ID is stable across server-side rendering and client-side hydration, making it useful for linking HTML elements using attributes like `for` and `aria-labelledby`.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_16

LANGUAGE: svelte
CODE:
```
<script>
	const uid = $props.id();
</script>

<form>
	<label for="{uid}-firstname">First Name: </label>
	<input id="{uid}-firstname" type="text" />

	<label for="{uid}-lastname">Last Name: </label>
	<input id="{uid}-lastname" type="text" />
</form>
```

----------------------------------------

TITLE: Await Block Without Catch in Svelte
DESCRIPTION: Shows the syntax for an await block without a catch clause, useful when error handling is not needed.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
{#await expression}...{:then name}...{/await}
```

----------------------------------------

TITLE: Form Reset with Default Value
DESCRIPTION: Demonstrates input binding with defaultValue and form reset functionality.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<script>
	let value = $state('');
</script>

<form>
	<input bind:value defaultValue="not the empty string">
	<input type="reset" value="Reset">
</form>
```

----------------------------------------

TITLE: Passive Touch and Wheel Events in Svelte 5
DESCRIPTION: Explains how touch and wheel events are now passive by default in Svelte 5, improving responsiveness.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_26

LANGUAGE: svelte
CODE:
```
<Component prop="this{is}valid" />
```

----------------------------------------

TITLE: Nesting Child Component in Parent Component
DESCRIPTION: Illustrates how to nest a Child component within a Parent component in Svelte.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<Parent>
	<Child />
</Parent>
```

----------------------------------------

TITLE: Configuring Vite for jsdom Environment
DESCRIPTION: Details the addition of jsdom configuration in vite.config.js for simulating DOM environments necessary for component testing with Vitest.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_9

LANGUAGE: js
CODE:
```
import { defineConfig } from 'vitest/config';

export default defineConfig({
	plugins: [
		/* ... */
	],
	test: {
		environment: 'jsdom'
	},
	resolve: process.env.VITEST
		? {
				conditions: ['browser']
			}
		: undefined
});
```

----------------------------------------

TITLE: Triggering Svelte Transitions with {#key}
DESCRIPTION: This snippet demonstrates how the `{#key}` block can be used to trigger a Svelte transition (`transition:fade`) on an element whenever the `value` variable changes. The `<div>` is destroyed and recreated, causing the fade transition to run each time, providing visual feedback for the data change.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/04-key.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
{#key value}
	<div transition:fade>{value}</div>
{/key}
```

----------------------------------------

TITLE: Re-initializing Svelte Components with {#key}
DESCRIPTION: This example shows how to use the `{#key}` block to force a Svelte `<Component />` to be destroyed and recreated whenever the `value` variable changes. This ensures the component is re-initialized from scratch, useful when internal state needs resetting based on an external value.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/04-key.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
{#key value}
	<Component />
{/key}
```

----------------------------------------

TITLE: Missing keyboard event handler for click events in Svelte
DESCRIPTION: Shows a div element with an onclick event but no accompanying keyboard event handler, which is necessary for accessibility.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<!-- A11y: visible, non-interactive elements with an onclick event must be accompanied by a keyboard event handler. -->
<div onclick={() => {}}></div>
```

----------------------------------------

TITLE: Refactored Multiplier Function Using Runes
DESCRIPTION: Refactors the multiplier function to leverage a getter function for dynamic state access. This approach simplifies state interaction within Svelte applications.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_5

LANGUAGE: js
CODE:
```
/**
 * @param {() => number} getCount
 * @param {number} k
 */
export function multiplier(getCount, k) {
	return {
		get value() {
			return getCount() * k;
		}
	};
}
```

----------------------------------------

TITLE: Declaring Generic Props in Svelte Component Scripts - svelte - svelte
DESCRIPTION: Shows how to declare a generic relationship on component props using the generics attribute in Svelte with TypeScript. The example demonstrates a list component exposing props and callback functions that share a generic type. Inputs include generic parameterized props; output is a typed component where generics enforce relationships between properties.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<script lang=\"ts\" generics=\"Item extends { text: string }\">
	interface Props {
		items: Item[];
		select(item: Item): void;
	}

	let { items, select }: Props = $props();
</script>

{#each items as item}
	<button onclick={() => select(item)}>
		{item.text}
	</button>
{/each}
```

----------------------------------------

TITLE: Hiding important heading elements in Svelte
DESCRIPTION: Demonstrates the incorrect use of aria-hidden on a heading element, which should not be hidden from screen readers.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_7

LANGUAGE: svelte
CODE:
```
<!-- A11y: <h2> element should not be hidden -->
<h2 aria-hidden="true">invisible header</h2>
```

----------------------------------------

TITLE: Creating Custom Whoosh Transition with Svelte
DESCRIPTION: This Svelte code defines a custom `whoosh` transition function that scales an element in. It adjusts the scale transformation based on easing and parameters to provide a custom effect.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->\n<script>\n\timport { elasticOut } from 'svelte/easing';\n\n\t/** @type {boolean} */\n\texport let visible;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params\n\t */\n\tfunction whoosh(node, params) {\n\t\tconst existingTransform = getComputedStyle(node).transform.replace('none', '');\n\n\t\treturn {\n\t\t\tdelay: params.delay || 0,\n\t\t\tduration: params.duration || 400,\n\t\t\teasing: params.easing || elasticOut,\n\t\t\tcss: (t, u) => `transform: ${existingTransform} scale(${t})`\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<div in:whoosh>whooshes in</div>\n{/if}
```

----------------------------------------

TITLE: Conditionally Setting Classes in Svelte
DESCRIPTION: This snippet shows how to conditionally set a class on an HTML element in Svelte using a ternary expression. Dependencies include a boolean condition (`large`). The output will change the class between 'large' and 'small' depending on the condition.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<div class={large ? 'large' : 'small'}>...</div>
```

----------------------------------------

TITLE: Numeric Input Bindings
DESCRIPTION: Shows how to bind numeric inputs (number and range) with min/max constraints and real-time calculation.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<script>
	let a = $state(1);
	let b = $state(2);
</script>

<label>
	<input type="number" bind:value={a} min="0" max="10" />
	<input type="range" bind:value={a} min="0" max="10" />
</label>

<label>
	<input type="number" bind:value={b} min="0" max="10" />
	<input type="range" bind:value={b} min="0" max="10" />
</label>

<p>{a} + {b} = {a + b}</p>
```

----------------------------------------

TITLE: Optional Snippet Rendering with Optional Chaining
DESCRIPTION: Demonstrates using optional chaining to safely render snippets that might be undefined, particularly useful when working with prop-based snippets.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/07-@render.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
{@render children?.()}
```

----------------------------------------

TITLE: Missing captions for video elements in Svelte
DESCRIPTION: Illustrates the correct and incorrect ways to provide captions for video elements, which are essential for accessibility.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_13

LANGUAGE: svelte
CODE:
```
<video><track kind="captions" /></video>

<audio muted></audio>

<!-- A11y: Media elements must have a <track kind="captions"> -->
<video></video>

<!-- A11y: Media elements must have a <track kind="captions"> -->
<video><track /></video>
```

----------------------------------------

TITLE: Configuring flip Animation Parameters with animate:flip - Svelte - Svelte
DESCRIPTION: Shows how to specify configuration parameters for the animate:flip directive, such as delay, using an object literal inside an expression tag. To customize animations, pass a parameters object to animate:flip on a keyed {#each} child. The snippet expects a list input and parameters like delay, which controls when the animation starts. Output is a delayed animation during reordered list transitions.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/15-animate.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
{#each list as item, index (item)}\n\t<li animate:flip={{ delay: 500 }}>{item}</li>\n{/each}\n
```

----------------------------------------

TITLE: Using Custom Properties in Component Styles
DESCRIPTION: Shows how to use the custom properties within a component's style block, including fallback values using the var() function.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/03-custom-properties.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<style>
	.track {
		background: var(--track-color, #aaa);
	}

	.thumb {
		background: var(--thumb-color, blue);
	}
</style>
```

----------------------------------------

TITLE: Binding contenteditable innerHTML - Svelte - Svelte
DESCRIPTION: This snippet demonstrates how to bind the innerHTML property of a contenteditable div to a Svelte variable named html. This enables real-time synchronization of the element's HTML contents with the component's state, leveraging Svelte's bind: syntax. No extra dependencies are required, and the html variable acts as both input and output for the editable content.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<div contenteditable=\"true\" bind:innerHTML={html}></div>
```

----------------------------------------

TITLE: Type-Safe Prop Extraction and Component Use in TypeScript - typescript
DESCRIPTION: Demonstrates how to use the Component and ComponentProps types in TypeScript to type functions that operate on Svelte components and their props. This pattern is crucial for writing helpers that accept generic Svelte components and safely extract their prop types. Inputs are a component and a prop object; if the prop types do not match, a compile-time error occurs.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_10

LANGUAGE: typescript
CODE:
```
import type { Component, ComponentProps } from 'svelte';
import MyComponent from './MyComponent.svelte';

function withProps<TComponent extends Component<any>>(
	component: TComponent,
	props: ComponentProps<TComponent>
) {}

// Errors if the second argument is not the correct props expected
// by the component in the first argument.
withProps(MyComponent, { foo: 'bar' });
```

----------------------------------------

TITLE: Understanding Snippet Scope Rules in Svelte
DESCRIPTION: Illustrates the lexical scoping rules for snippets. Snippets are visible to siblings and children of siblings in the same scope, but not accessible outside their declaring scope.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<div>
	{#snippet x()}
		{#snippet y()}...{/snippet}

		<!-- this is fine -->
		{@render y()}
	{/snippet}

	<!-- this will error, as `y` is not in scope -->
	{@render y()}
</div>

<!-- this will also error, as `x` is not in scope -->
{@render x()}
```

----------------------------------------

TITLE: Configuring Vitest for Vite
DESCRIPTION: Adjusts the Vite configuration to accommodate Vitest by specifying the 'browser' entry points in package.json files. This ensures compatibility for running browser-oriented tests on node environments.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
import { defineConfig } from 'vitest/config';

export default defineConfig({
	// ...
	resolve: process.env.VITEST
		? {
				conditions: ['browser']
			}
		: undefined
});
```

----------------------------------------

TITLE: Resolving Hydration Mismatch for HTML Blocks in Svelte
DESCRIPTION: Demonstrates how to handle {@html ...} block value changes between server and client renders, ensuring proper hydration and updates.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-warnings/warnings.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<script>
	let { markup } = $props();

	if (typeof window !== 'undefined') {
		// stash the value...
		const initial = markup;

		// unset it...
		markup = undefined;

		$effect(() => {
			// ...and reset after we've mounted
			markup = initial;
		});
	}
</script>

{@html markup}
```

----------------------------------------

TITLE: Mounting a Svelte Component to the DOM
DESCRIPTION: Creates a component instance and mounts it to a specified DOM element with optional props. Unlike Svelte 4, effects and onMount callbacks don't run automatically during mounting.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/04-imperative-component-api.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
// @errors: 2322
import { mount } from 'svelte';
import App from './App.svelte';

const app = mount(App, {
	target: document.querySelector('#app'),
	props: { some: 'property' }
});
```

----------------------------------------

TITLE: Using $state in Svelte Class Fields
DESCRIPTION: This snippet illustrates how to use $state in class fields, both public and private. It shows a Todo class with reactive properties and methods to manipulate the state.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
class Todo {
	done = $state(false);
	text = $state();

	constructor(text) {
		this.text = text;
	}

	reset() {
		this.text = '';
		this.done = false;
	}
}
```

----------------------------------------

TITLE: Basic Window Event Handling in Svelte
DESCRIPTION: Demonstrates the basic syntax for adding event handlers to the window object using the <svelte:window> element.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/02-svelte-window.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<svelte:window onevent={handler} />
```

----------------------------------------

TITLE: Readonly Store Usage
DESCRIPTION: Demonstrates creating a readonly store from a writable store.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_6

LANGUAGE: javascript
CODE:
```
import { readonly, writable } from 'svelte/store';

const writableStore = writable(1);
const readableStore = readonly(writableStore);

readableStore.subscribe(console.log);

writableStore.set(2); // console: 2
// @errors: 2339
readableStore.set(2); // ERROR
```

----------------------------------------

TITLE: Implementing a Custom Animation Function Using tick for Imperative Effects - Svelte - Svelte/JS
DESCRIPTION: Creates a custom Svelte animation (whizz) that uses the tick callback to imperatively change the color of animated elements during a reorder in a keyed each block. The tick function, invoked with time parameters, sets the node's style color based on progress. This approach is useful for non-CSS-based effects but may be less performant than css-based animations. Depends on Svelte, cubicOut from svelte/easing, and DOMRect. Input is a reordered list; output is animated color transitions on nodes.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/15-animate.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\ttick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\n
```

----------------------------------------

TITLE: Simplified Await Block with Catch in Svelte
DESCRIPTION: Shows a simplified await block syntax focusing only on the rejected state of a Promise.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
{#await expression catch name}...{/await}
```

----------------------------------------

TITLE: Simplified Await Block with Then in Svelte
DESCRIPTION: Shows a simplified await block that only handles the fulfilled state, omitting the pending state handling.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_6

LANGUAGE: svelte
CODE:
```
{#await promise then value}
	<p>The value is {value}</p>
{/await}
```

----------------------------------------

TITLE: Using a Svelte Custom Element with Event Listeners
DESCRIPTION: This snippet shows how to import and use a custom element in a Svelte component. It demonstrates setting up event listeners for the custom events dispatched by the my-stepper element and maintaining a count state that updates in response to these events.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/08-$host.md#2025-04-23_snippet_1

LANGUAGE: svelte
CODE:
```
<script>
	import './Stepper.svelte';

	let count = $state(0);
</script>

<my-stepper
	ondecrement={() => count -= 1}
	onincrement={() => count += 1}
></my-stepper>

<p>count: {count}</p>
```

----------------------------------------

TITLE: Using createClassComponent for backwards compatibility in Svelte 5
DESCRIPTION: This snippet shows how to use the createClassComponent function from svelte/legacy to maintain the Svelte 4 class-based component API in Svelte 5 as a stopgap solution.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
+++import { createClassComponent } from 'svelte/legacy';+++
import App from './App.svelte'

---const app = new App({ target: document.getElementById("app") });---
+++const app = createClassComponent({ component: App, target: document.getElementById("app") });+++

export default app;
```

----------------------------------------

TITLE: Child Component with Stale Context
DESCRIPTION: Example showing a child component receiving a stale value from context that won't update.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/script.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<!--- file: Child.svelte --->
<script>
	import { getContext } from 'svelte';

	const count = getContext('count');
</script>

<!-- This will never update -->
<p>The count is {count}</p>
```

----------------------------------------

TITLE: Conditional Dependency Tracking within $effect (TypeScript)
DESCRIPTION: Illustrates how conditional logic affects `$effect` dependencies using an example with `canvas-confetti`. If the `if (condition)` block runs, both `$state` variables `condition` and `color` (read inside the block) become dependencies. If the `else` block runs, only `condition` is tracked as a dependency for that run, as `color` isn't accessed. Dependencies are determined by the values read during the *last* execution.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
// @filename: ambient.d.ts
declare module 'canvas-confetti' {
	interface ConfettiOptions {
		colors: string[];
	}

	function confetti(opts?: ConfettiOptions): void;
	export default confetti;
}

// @filename: index.js
// ---cut---
import confetti from 'canvas-confetti';

let condition = $state(true);
let color = $state('#ff3e00');

$effect(() => {
	if (condition) {
		confetti({ colors: [color] });
	} else {
		confetti();
	}
});
```

----------------------------------------

TITLE: Dispatching Custom Events from a Svelte Custom Element
DESCRIPTION: This snippet demonstrates how to create a Svelte custom element with buttons that dispatch custom events. The $host rune is used to access the host element and trigger custom events when buttons are clicked.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/08-$host.md#2025-04-23_snippet_0

LANGUAGE: svelte
CODE:
```
<svelte:options customElement="my-stepper" />

<script>
	function dispatch(type) {
		$host().dispatchEvent(new CustomEvent(type));
	}
</script>

<button onclick={() => dispatch('decrement')}>decrement</button>
<button onclick={() => dispatch('increment')}>increment</button>
```

----------------------------------------

TITLE: Registering a Svelte Custom Element with customElements.define - JavaScript
DESCRIPTION: Imports a Svelte component that was compiled as a custom element, then registers it with the browser using customElements.define. Uses the static 'element' property provided when the component is compiled with the customElement option. Required dependencies: compiled Svelte custom element module, access to DOM Custom Elements API. Input: Svelte component module. Output: Defines a new tag usable in the DOM. Must be called before using custom tag in HTML.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/04-custom-elements.md#2025-04-22_snippet_1

LANGUAGE: js
CODE:
```
// @noErrors\nimport MyElement from './MyElement.svelte';\n\ncustomElements.define('my-element', MyElement.element);
```

----------------------------------------

TITLE: Scoping CSS Keyframes and Animations in Svelte Components - Svelte
DESCRIPTION: This snippet shows how to declare and use CSS keyframes and animation rules within a Svelte component's \u003cstyle\u003e block. Svelte automatically scopes the keyframe name and adjusts related animation rules to prevent naming collisions with other components or global CSS. The .bouncy class applies a component-local animation, and the @keyframes definition is unique to the component. No external dependencies are needed. Input: Svelte component style code. Output: Keyframes and animations that affect only this component.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/01-scoped-styles.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<style>\n\t.bouncy {\n\t\tanimation: bounce 10s;\n\t}\n\n\t/* these keyframes are only accessible inside this component */\n\t@keyframes bounce {\n\t\t/* ... */\n\t}\n</style>\n
```

----------------------------------------

TITLE: Overriding Derived State Values in Svelte
DESCRIPTION: This snippet illustrates overriding derived state values temporarily in a Svelte component. The `likes` variable is derived from `post.likes`, displaying reactive UI updates during asynchronous operations. Key functionality includes incrementing and rolling back `likes`, with dependencies on server communication via the `like()` function.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/03-$derived.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<script>
	let { post, like } = $props();

	let likes = $derived(post.likes);

	async function onclick() {
		// increment the `likes` count immediately...
		likes += 1;

		// and tell the server, which will eventually update `post`
		try {
			await like();
		} catch {
			// failed! roll back the change
			likes -= 1;
		}
	}
</script>

<button {onclick}>🧡 {likes}</button>
```

----------------------------------------

TITLE: Advanced Usage of <svelte:body> Component with Multiple Events and Actions in Svelte
DESCRIPTION: Shows how to use the <svelte:body> component with multiple event listeners (mouseenter and mouseleave) and an action. This component must be used at the top level of the component and not inside blocks or elements.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/04-svelte-body.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<svelte:body onmouseenter={handleMouseenter} onmouseleave={handleMouseleave} use:someAction />
```

----------------------------------------

TITLE: Simplified Await Block with Then in Svelte
DESCRIPTION: Illustrates a simplified await block syntax focusing only on the fulfilled state of a Promise.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
{#await expression then name}...{/await}
```

----------------------------------------

TITLE: Event Handlers with Spread Props in Svelte 5
DESCRIPTION: Demonstrates how to handle event spreading in Svelte 5, ensuring local event handlers aren't overwritten by spread properties.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_9

LANGUAGE: svelte
CODE:
```
<button
	{...props}
	onclick={(e) => {
		doStuff(e);
		props.onclick?.(e);
	}}
>
	...
</button>
```

----------------------------------------

TITLE: Using a Svelte Custom Element in the DOM - JavaScript
DESCRIPTION: Shows how to instantiate a custom element as regular HTML by setting document.body.innerHTML. Includes custom content within the element using slotting. No dependencies other than the custom element registered as 'my-element'. Expected input: HTML markup with the custom tag used in the DOM. Output: The element gets rendered with slotted content. Limitations: assumes the element class is already defined with customElements.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/04-custom-elements.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
document.body.innerHTML = `\n\t<my-element>\n\t\t<p>This is some slotted content</p>\n\t</my-element>\n`;
```

----------------------------------------

TITLE: Using Capture Event Modifier in Svelte 5
DESCRIPTION: Demonstrates how to use the 'capture' event modifier in Svelte 5 by adding it directly to the event name attribute.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_7

LANGUAGE: svelte
CODE:
```
<button onclickcapture={...}>...</button>
```

----------------------------------------

TITLE: Defining Custom Transition Function in JavaScript
DESCRIPTION: This JavaScript code sets a template for a custom transition function in Svelte. It describes the structure of a transition function, including parameters and options for customizing the transition behavior.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/13-transition.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
transition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}
```

----------------------------------------

TITLE: Using Actions and Event Listeners on Document in Svelte
DESCRIPTION: This snippet illustrates how to use actions and add specific event listeners (like visibilitychange) to the document object using the <svelte:document> element in Svelte.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/03-svelte-document.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<svelte:document onvisibilitychange={handleVisibilityChange} use:someAction />
```

----------------------------------------

TITLE: Resolving Hydration Attribute Mismatch in Svelte
DESCRIPTION: Provides a solution for handling attribute value changes between server and client renders, specifically for attributes like 'src' on <img> elements that may cause refetching.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-warnings/warnings.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<script>
	let { src } = $props();

	if (typeof window !== 'undefined') {
		// stash the value...
		const initial = src;

		// unset it...
		src = undefined;

		$effect(() => {
			// ...and reset after we've mounted
			src = initial;
		});
	}
</script>

<img {src} />
```

----------------------------------------

TITLE: Function Bindings in Svelte
DESCRIPTION: Shows how to use function bindings for validation and transformation of values, including both writable and readonly bindings.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/11-bind.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<input bind:value={
	() => value,
	(v) => value = v.toLowerCase()}
/>
```

----------------------------------------

TITLE: Configuring Component Compiler Options - Svelte - Svelte
DESCRIPTION: This snippet shows how to use the <svelte:options> block in a Svelte component to specify component-specific compiler options. The 'option' attribute is a placeholder, and should be replaced by a specific option such as 'runes', 'namespace', 'customElement', or 'css'. Dependencies include the Svelte compiler, and usage is supported in component files (.svelte). Inputs are boolean values, strings, or objects for their respective options; no outputs are produced directly, but the compiled component behavior is affected. Options like 'immutable' and 'accessors' are deprecated in recent Svelte versions.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/07-svelte-options.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<svelte:options option={value} />
```

----------------------------------------

TITLE: Script Module Usage Example
DESCRIPTION: Demonstrates using a module script to track component instantiations across the application. The module script runs once when the module first evaluates, while the regular script runs for each component instance.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/01-introduction/03-svelte-files.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script module>
	let total = 0;
</script>

<script>
	total += 1;
	console.log(`instantiated ${total} times`);
</script>
```

----------------------------------------

TITLE: Missing @render Tag for Snippets in Svelte
DESCRIPTION: Shows examples of attempting to render snippets without the required {@render} block, which causes the snippet code to be stringified instead of being rendered to the DOM.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/shared-errors/errors.md#2025-04-23_snippet_2

LANGUAGE: svelte
CODE:
```
<script>
    let { children } = $props();
</script>

{children}
```

LANGUAGE: svelte
CODE:
```
<!--- file: Parent.svelte --->
<ChildComponent>
  {#snippet label()}
    <span>Hi!</span>
  {/snippet}
</ChildComponent>
```

LANGUAGE: svelte
CODE:
```
<!--- file: Child.svelte --->
<script>
  let { label } = $props();
</script>

<!-- This component doesn't expect a snippet, but the parent provided one -->
<p>{label}</p>
```

----------------------------------------

TITLE: Managing Errors Outside Svelte Boundary
DESCRIPTION: This snippet provides an example of error and reset management outside of a Svelte boundary using a 'onerror' function. The code requires a Svelte environment and involves conditional rendering based on the error state.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/01-svelte-boundary.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<script>
	let error = $state(null);
	let reset = $state(() => {});

	function onerror(e, r) {
		error = e;
		reset = r;
	}
</script>

<svelte:boundary {onerror}>
	<FlakyComponent />
</svelte:boundary>

{#if error}
	<button onclick={() => {
		error = null;
		reset();
	}}>
		oops! try again
	</button>
{/if}
```

----------------------------------------

TITLE: Hydrating Server-Rendered Svelte Content
DESCRIPTION: Reuses existing server-rendered HTML to create an interactive component. Like mount, effects don't run automatically during hydration and may require flushSync() to execute immediately.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/04-imperative-component-api.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
// @errors: 2322
import { hydrate } from 'svelte';
import App from './App.svelte';

const app = hydrate(App, {
	target: document.querySelector('#app'),
	props: { some: 'property' }
});
```

----------------------------------------

TITLE: Updating component type declarations in Svelte 5
DESCRIPTION: This snippet shows how to update component type declarations in TypeScript for Svelte 5. It replaces the SvelteComponent type with the new Component type for defining component shapes and props.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_22

LANGUAGE: typescript
CODE:
```
import { ComponentA, ComponentB } from 'component-library';
---import type { SvelteComponent } from 'svelte';---
+++import type { Component } from 'svelte';+++

---let C: typeof SvelteComponent<{ foo: string }> = $state(---
+++let C: Component<{ foo: string }> = $state(+++
	Math.random() ? ComponentA : ComponentB
);
```

----------------------------------------

TITLE: Unmounting a Svelte Component from the DOM
DESCRIPTION: Removes a previously mounted component from the DOM. The outro option allows transitions to play before removal, and the function returns a Promise that resolves after transitions complete.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/04-imperative-component-api.md#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
import { mount, unmount } from 'svelte';
import App from './App.svelte';

const app = mount(App, { target: document.body });

// later
unmount(app, { outro: true });
```

----------------------------------------

TITLE: Keydown Event Handler Example in Svelte
DESCRIPTION: Complete example showing how to handle keyboard events using <svelte:window> with a keydown event handler.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/02-svelte-window.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<script>
	function handleKeydown(event) {
		alert(`pressed the ${event.key} key`);
	}
</script>

<svelte:window onkeydown={handleKeydown} />
```

----------------------------------------

TITLE: Basic Usage of <svelte:body> Component in Svelte
DESCRIPTION: Demonstrates the basic syntax for using the <svelte:body> component to add an event listener to the document body.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/04-svelte-body.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<svelte:body onevent={handler} />
```

----------------------------------------

TITLE: Exposing Component Properties in Svelte 5 Runes Mode
DESCRIPTION: Shows how to expose component properties using exports in Svelte 5 runes mode, as an alternative to the 'accessors' option.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_24

LANGUAGE: svelte
CODE:
```
<script>
	let { name } = $props();
	// available via componentInstance.getName()
	export const getName = () => name;
</script>
```

----------------------------------------

TITLE: Adding Event Listener to Document in Svelte
DESCRIPTION: This snippet demonstrates how to add an event listener to the document object using the <svelte:document> element in Svelte.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/03-svelte-document.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<svelte:document onevent={handler} />
```

----------------------------------------

TITLE: Implementing a Custom Animation Function Using css for Transform Effects - Svelte - Svelte/JS
DESCRIPTION: Implements a custom Svelte animation (whizz) that animates elements by translating and rotating them based on reordering position changes in a keyed list. Animation parameters (dx, dy, d) are computed based on changes in position; the returned object sets delay, duration, easing (using the imported cubicOut), and a css function for transforms. Requires Svelte, Svelte's cubicOut easing, and a DOMRect-enabled browser. Expects the animate:whizz directive attached to immediate children of a keyed {#each} block; input is the reordered list, output is an animated transform and rotation.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/15-animate.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\tcss: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\n
```

----------------------------------------

TITLE: Specifying Namespace with svelte:element (Svelte)
DESCRIPTION: This example demonstrates explicitly setting an XML namespace when rendering an element dynamically with <svelte:element> in Svelte, ensuring the correct namespace (such as for SVG) is used. The tag for the dynamic element is supplied via a 'tag' variable, and the 'xmlns' attribute is set to the SVG namespace URI. This is necessary when Svelte cannot infer the correct namespace from context. No external dependencies required.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/06-svelte-element.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<svelte:element this={tag} xmlns="http://www.w3.org/2000/svg" />
```

----------------------------------------

TITLE: Preserving CSS Selectors with :global in Svelte
DESCRIPTION: This snippet shows how to use the :global modifier in Svelte to preserve CSS selectors that might be flagged as unused. It's particularly useful for styling elements within {@html ...} tags or when overriding styles in child components.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/style.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<div class="post">{@html content}</div>

<style>
  .post :global {
    p {...}
  }
</style>
```

----------------------------------------

TITLE: Attempting to Mutate a Prop's Fallback Object Value (Svelte)
DESCRIPTION: Child component (`Child.svelte`) defining a fallback value for an object prop. If the parent doesn't provide the `object` prop, the fallback `{ count: 0 }` is used. Attempting to mutate this fallback object has no effect because fallback values are not converted into reactive state proxies unless declared with `$bindable`.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_12

LANGUAGE: svelte
CODE:
```
<!--- file: Child.svelte --->
<script>
	let { object = { count: 0 } } = $props();
</script>

<button onclick={() => {
	// has no effect if the fallback value is used
	object.count += 1
}}>
	clicks: {object.count}
</button>
```

----------------------------------------

TITLE: Attempting to Mutate a Non-Reactive Object Prop (Svelte)
DESCRIPTION: Child component (`Child.svelte`) receiving a non-reactive object prop. Attempting to mutate a property (`object.count`) within the child component has no effect on reactivity, as the prop itself is not a reactive state proxy.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_9

LANGUAGE: svelte
CODE:
```
<!--- file: Child.svelte --->
<script>
	let { object } = $props();
</script>

<button onclick={() => {
	// has no effect
	object.count += 1
}}>
	clicks: {object.count}
</button>
```

----------------------------------------

TITLE: Multiple Style Directives on a Single Element in Svelte
DESCRIPTION: Shows how to apply multiple style: directives on a single element, including using static values and dynamic expressions.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<div style:color style:width="12rem" style:background-color={darkMode ? 'black' : 'white'}>...</div>
```

----------------------------------------

TITLE: Updating component instantiation in Svelte 5
DESCRIPTION: This snippet shows how to update the main.js file to use the new mount function from Svelte 5 instead of the class-based instantiation used in Svelte 4. It demonstrates the new way to create and mount a Svelte component.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
+++import { mount } from 'svelte';+++
import App from './App.svelte'

---const app = new App({ target: document.getElementById("app") });---
+++const app = mount(App, { target: document.getElementById("app") });+++

export default app;
```

----------------------------------------

TITLE: Binding to Document Properties in Svelte
DESCRIPTION: This example shows how to bind to properties of the document object using the <svelte:document> element in Svelte.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/03-svelte-document.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<svelte:document bind:prop={value} />
```

----------------------------------------

TITLE: Using 'onerror' for Error Reporting
DESCRIPTION: Illustrates how to use the 'onerror' attribute in a Svelte boundary to report errors using an external service. It showcases the passing of error and reset functions for error tracking and handling.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/01-svelte-boundary.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<svelte:boundary onerror={(e) => report(e)}>
	...
</svelte:boundary>
```

----------------------------------------

TITLE: Accessing and Updating Svelte Custom Element Props - JavaScript
DESCRIPTION: Demonstrates direct interaction with a custom Svelte web component via the DOM. Selects the custom element and reads or updates a prop (property) attached to the element, which triggers reactive updates (e.g., shadow DOM rerender). Requires a registered custom element instance present in the DOM and accessible via querySelector. Inputs: setting/getting props on the element. Output: reflects changes to the internal component. Limitation: only works for props explicitly listed in Svelte options.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/04-custom-elements.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
// @noErrors\nconst el = document.querySelector('my-element');\n\n// get the current value of the 'name' prop\nconsole.log(el.name);\n\n// set a new value, updating the shadow DOM\nel.name = 'everybody';
```

----------------------------------------

TITLE: Defining the Svelte Store Interface in TypeScript
DESCRIPTION: This TypeScript snippet illustrates the interface contract for a Svelte store. It requires a `subscribe` method that accepts a callback function (to receive value updates) and returns an unsubscribe function. An optional `set` method can be included for writable stores, which accepts a new value for the store. This contract allows developers to create custom store implementations compatible with Svelte's reactivity.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/01-stores.md#2025-04-22_snippet_7

LANGUAGE: ts
CODE:
```
// @noErrors
store = { subscribe: (subscription: (value: any) => void) => (() => void), set?: (value: any) => void }
```

----------------------------------------

TITLE: Handling Optional Snippet Props in Svelte
DESCRIPTION: Demonstrates techniques for handling optional snippet props in Svelte components, including using optional chaining or conditional rendering with fallback content.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_8

LANGUAGE: svelte
CODE:
```
<script>
    let { children } = $props();
</script>

{@render children?.()}
```

LANGUAGE: svelte
CODE:
```
<script>
    let { children } = $props();
</script>

{#if children}
    {@render children()}
{:else}
    fallback content
{/if}
```

----------------------------------------

TITLE: Await Block Without Catch Clause in Svelte
DESCRIPTION: Demonstrates an await block without a catch clause, useful when error handling is not needed or no error is possible.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
{#await promise}
	<!-- promise is pending -->
	<p>waiting for the promise to resolve...</p>
{:then value}
	<!-- promise was fulfilled -->
	<p>The value is {value}</p>
{/await}
```

----------------------------------------

TITLE: Creating Recursive Snippets in Svelte
DESCRIPTION: Demonstrates how snippets can reference themselves and other snippets to create recursive structures, such as a countdown display with a final blastoff animation.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
{#snippet blastoff()}
	<span>🚀</span>
{/snippet}

{#snippet countdown(n)}
	{#if n > 0}
		<span>{n}...</span>
		{@render countdown(n - 1)}
	{:else}
		{@render blastoff()}
	{/if}
{/snippet}

{@render countdown(10)}
```

----------------------------------------

TITLE: Rendering Dynamic Elements with svelte:element (Svelte)
DESCRIPTION: This snippet demonstrates rendering a dynamic element in Svelte using the <svelte:element> special tag, where the 'this' property determines the resulting DOM element at runtime. The only supported binding is bind:this, and properties or listeners will be applied to the dynamic tag. Inputs include the 'expression' variable specifying the element type; if this is nullish, nothing will be rendered. Outputs a corresponding DOM node, or nothing for invalid tag values. No external dependencies are required.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/06-svelte-element.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<svelte:element this={expression} />
```

----------------------------------------

TITLE: Basic E2E Test using Playwright
DESCRIPTION: Illustrates an E2E test using Playwright, validating that a home page has the expected h1 text visible. This approach emphasizes UI-driven testing without dependencies on Svelte specifics.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_13

LANGUAGE: js
CODE:
```
import { expect, test } from '@playwright/test';

test('home page has expected h1', async ({ page }) => {
	await page.goto('/');
	await expect(page.locator('h1')).toBeVisible();
});
```

----------------------------------------

TITLE: Injecting Raw HTML with Svelte
DESCRIPTION: This code snippet demonstrates how to use the `{@html ...}` tag to inject raw HTML into a Svelte component. The snippet warns about the necessity to escape the content to prevent XSS attacks.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/08-@html.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<article>
	{@html content}
</article>
```

----------------------------------------

TITLE: Misusing aria attributes on meta tags in Svelte
DESCRIPTION: Illustrates the incorrect use of aria attributes on a meta tag, which is not visible and should not have such attributes.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<!-- A11y: <meta> should not have aria-* attributes -->
<meta aria-hidden="false" />
```

----------------------------------------

TITLE: Simplified Await Block with Catch in Svelte
DESCRIPTION: Illustrates a simplified await block that only handles the rejected state, useful for error-only scenarios.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/05-await.md#2025-04-22_snippet_7

LANGUAGE: svelte
CODE:
```
{#await promise catch error}
	<p>The error is {error}</p>
{/await}
```

----------------------------------------

TITLE: Rendering HTML Content in Svelte
DESCRIPTION: Demonstrates how to render HTML content safely using the @html tag in Svelte.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_11

LANGUAGE: svelte
CODE:
```
{@html potentiallyUnsafeHtmlString}
```

----------------------------------------

TITLE: Handling Void Element Errors with svelte:element (Svelte)
DESCRIPTION: This snippet shows an attempt to render children inside a void element, such as an hr tag, using the <svelte:element> in Svelte. It defines a reactive 'tag' variable, then dynamically creates the element while providing children. In development mode, Svelte will throw a runtime error if a void element receives children. Requires no external dependencies and demonstrates a limitation of svelte:element regarding void tags and valid HTML structure.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/06-svelte-element.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<script>
	let tag = $state('hr');
</script>

<svelte:element this={tag}>
	This text cannot appear inside an hr element
</svelte:element>
```

----------------------------------------

TITLE: Exporting Snippets in Svelte
DESCRIPTION: This snippet demonstrates how to declare and export snippets at the top level of a `.svelte` file using a `<script module>`. This functionality is available in Svelte version 5.5.0 and newer. It allows the reuse of snippet code across different components as long as there are no dependencies on non-module script declarations.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/06-snippet.md#2025-04-22_snippet_11

LANGUAGE: svelte
CODE:
```
<script module>\n\texport { add };\n<\/script>\n\n{#snippet add(a, b)}\n\t{a} + {b} = {a + b}\n{\/snippet}
```

----------------------------------------

TITLE: Demonstrating Elements with Positive TabIndex Values in Svelte
DESCRIPTION: Example showing an element with a positive tabindex value, triggering the a11y_positive_tabindex rule, which warns against breaking normal tab order and creating confusing keyboard navigation.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_25

LANGUAGE: svelte
CODE:
```
<!-- A11y: avoid tabindex values above zero -->
<div tabindex="1"></div>
```

----------------------------------------

TITLE: Defining Local Constants with {@const} in Svelte Templates - Svelte
DESCRIPTION: This example demonstrates the use of the {@const} statement within a {#each} block to compute and reference a local constant, 'area', for each item in the 'boxes' array. Requires a Svelte environment with a declared 'boxes' array of objects containing 'width' and 'height' properties. Inside each iteration, the area is calculated and displayed together with component values. Input: an array of boxes; Output: text lines showing the calculation and result for each box. The {@const} tag must only be a direct child of allowed blocks (e.g., {#each}, {#if}) and cannot be used arbitrarily in the template.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/09-@const.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
{#each boxes as box}
	{@const area = box.width * box.height}
	{box.width} * {box.height} = {area}
{/each}
```

----------------------------------------

TITLE: Fixing Stale Assignment in Svelte State Management
DESCRIPTION: Demonstrates how to correctly update a state proxy array to avoid discarding pushed values. The fix involves separating the null coalescing assignment and array push into two statements.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-warnings/warnings.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	let object = $state({ array: null });

	function add() {
		(object.array ??= []).push(object.array.length);
	}
</script>

<button onclick={add}>add</button>
<p>items: {JSON.stringify(object.items)}</p>
```

LANGUAGE: javascript
CODE:
```
let object = { array: [0] };
// ---cut---
function add() {
	object.array ??= [];
	object.array.push(object.array.length);
}
```

----------------------------------------

TITLE: Updating Event Dispatcher Typing in Svelte 4 (TypeScript)
DESCRIPTION: Illustrates the stricter type checking for `createEventDispatcher` in Svelte 4. Payloads must now be explicitly defined as optional, required, or non-existent (using `null`), and TypeScript will enforce these types at the dispatch call site, preventing omissions or unexpected arguments that were allowed in Svelte 3.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
// @errors: 2554 2345
import { createEventDispatcher } from 'svelte';

const dispatch = createEventDispatcher<{
	optional: number | null;
	required: string;
	noArgument: null;
}>();

// Svelte version 3:
dispatch('optional');
dispatch('required'); // I can still omit the detail argument
dispatch('noArgument', 'surprise'); // I can still add a detail argument

// Svelte version 4 using TypeScript strict mode:
dispatch('optional');
dispatch('required'); // error, missing argument
dispatch('noArgument', 'surprise'); // error, cannot pass an argument
```

----------------------------------------

TITLE: Declaring Svelte Custom Elements with <svelte:options> - Svelte
DESCRIPTION: Defines a Svelte component as a custom element (web component) by using the <svelte:options> element with the customElement attribute set to a string (the desired custom tag name). The script section initializes props from $props with a fallback for 'name'. The component outputs a greeting that can be slotted with additional content. Requires Svelte with compiler set to customElement mode, and consumers need to use the defined tag name in HTML or JS. 'name' can be set as attribute or property. Expected input: 'name' prop set via DOM property or attribute. Output: custom HTML element rendering slotted and dynamic content.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/04-custom-elements.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<svelte:options customElement=\"my-element\" />\n\n<script>\n\tlet { name = 'world' } = $props();\n</script>\n\n<h1>Hello {name}!</h1>\n<slot />
```

----------------------------------------

TITLE: Configuring Custom Element Options and Extending Lifecycle - Svelte
DESCRIPTION: Shows configuration of advanced custom element options for a Svelte component. Uses the customElement object in <svelte:options> to specify tag name, disables shadow DOM, configures prop reflection, type coercion and attribute name, and uses the 'extend' function to augment lifecycle with ElementInternals for form association. Dependencies: Svelte v4+, DOM support for customElements and ElementInternals API. Inputs: custom options object. Outputs: HTML element with special behavior for forms, exposed props and functions. Limitations: custom features only work in supporting browsers.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/04-custom-elements.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<svelte:options\n\tcustomElement={{\n\t	tag: 'custom-element',\n\t	shadow: 'none',\n\t	props: {\n\t\t\tname: { reflect: true, type: 'Number', attribute: 'element-index' }\n\t\t},\n\t\textend: (customElementConstructor) => {\n\t\t\t// Extend the class so we can let it participate in HTML forms\n\t\t\treturn class extends customElementConstructor {\n\t\t\t\tstatic formAssociated = true;\n\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper();\n\t\t\t\t\tthis.attachedInternals = this.attachInternals();\n\t\t\t\t}\n\n\t\t\t\t// Add the function here, not below in the component so that\n\t\t\t\t// it's always available, not just when the inner Svelte component\n\t\t\t\t// is mounted\n\t\t\t\trandomIndex() {\n\t\t\t\t\tthis.elementIndex = Math.random();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}}\n/>\n\n<script>\n\tlet { elementIndex, attachedInternals } = $props();\n\t// ...\n\tfunction check() {\n\t\tattachedInternals.checkValidity();\n\t}\n</script>\n\n...
```

----------------------------------------

TITLE: Extending Svelte HTML DOM Typings in TypeScript
DESCRIPTION: Enhances Svelte's built-in DOM typings by declaring new custom elements, attributes, and events within the global svelteHTML namespace. Requires placing the declaration in a .d.ts file referenced in tsconfig.json. Key parameters include custom element tag names and attribute names. Inputs are new custom elements or events; outputs are extended editor type support and fewer TypeScript errors. No outside dependencies are needed beyond TypeScript support in the project.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_12

LANGUAGE: TypeScript
CODE:
```
/// file: additional-svelte-typings.d.ts\ndeclare namespace svelteHTML {\n\t// enhance elements\n\tinterface IntrinsicElements {\n\t\t'my-custom-element': { someattribute: string; 'on:event': (e: CustomEvent<any>) => void };\n\t}\n\t// enhance attributes\n\tinterface HTMLAttributes<T> {\n\t\t// If you want to use the beforeinstallprompt event\n\t\tonbeforeinstallprompt?: (event: any) => any;\n\t\t// If you want to use myCustomAttribute={..} (note: all lowercase)\n\t\tmycustomattribute?: any; // You can replace any with something more specific if you like\n\t}\n}
```

----------------------------------------

TITLE: Parent Passing a Non-Reactive Object Prop (Svelte)
DESCRIPTION: Parent component (`App.svelte`) passing a regular (non-reactive) JavaScript object as a prop to the `Child` component.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_8

LANGUAGE: svelte
CODE:
```
<!--- file: App.svelte --->
<script>
	import Child from './Child.svelte';
</script>

<Child object={{ count: 0 }} />
```

----------------------------------------

TITLE: Using Important Modifier with Style Directive in Svelte
DESCRIPTION: Demonstrates how to mark a style as important using the |important modifier with the style: directive.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<div style:color|important="red">...</div>
```

----------------------------------------

TITLE: Type-Safe Class Attribute Usage in Svelte
DESCRIPTION: This snippet shows how to use the `ClassValue` type for type-safe class names in Svelte with TypeScript. It relies on importing the `ClassValue` type and setting props with dynamic class values.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/18-class.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
<script lang=\"ts\">\n\timport type { ClassValue } from 'svelte/elements';\n\n\tconst props: { class: ClassValue } = $props();\n</script>\n\n<div class={['original', props.class]}>...</div>
```

----------------------------------------

TITLE: Creating Global @keyframes in Svelte
DESCRIPTION: Shows how to create globally accessible keyframe animations by prefixing the animation name with -global-. The prefix is removed during compilation.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/02-global-styles.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<style>
	@keyframes -global-my-animation-name {
		/* code goes here */
	}
</style>
```

----------------------------------------

TITLE: Each Blocks Without an Item - Svelte
DESCRIPTION: Explains rendering elements a specific number of times using 'each' blocks without defining an item variable. Useful for fixed iterations.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/03-each.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```

<div class="chess-board">
	{#each { length: 8 }, rank}
		{#each { length: 8 }, file}
			<div class:black={(rank + file) % 2 === 1}></div>
		{/each}
	{/each}
</div>

```

----------------------------------------

TITLE: Const Tag Usage
DESCRIPTION: Example of using the @const tag within if blocks
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
{@const}
```

----------------------------------------

TITLE: Component Documentation Comments in Svelte
DESCRIPTION: Illustrates how to add special @component comments for component documentation that appears on hover.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_13

LANGUAGE: svelte
CODE:
```
<!--
@component
- You can use markdown here.
- You can also use code blocks here.
- Usage:
  ```html
  <Main name="Arethra">
  ```
-->
<script>
	let { name } = $props();
</script>

<main>
	<h1>
		Hello, {name}
	</h1>
</main>
```

----------------------------------------

TITLE: Passing Snippets to Components with Slots
DESCRIPTION: Shows compatibility between Svelte 5 snippets and Svelte 4 slots, where a parent component using snippets can pass content to a child component using slots.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_10

LANGUAGE: svelte
CODE:
```
<!--- file: Child.svelte --->
<slot />
<hr />
<slot name="foo" message="hello" />
```

LANGUAGE: svelte
CODE:
```
<!--- file: Parent.svelte --->
<script>
	import Child from './Child.svelte';
</script>

<Child>
	default child content

	{#snippet foo({ message })}
		message from child: {message}
	{/snippet}
</Child>
```

----------------------------------------

TITLE: Augmenting Svelte Elements Module in TypeScript
DESCRIPTION: Augments the type definitions of the Svelte 'svelte/elements' module to add support for specific custom HTML elements and experimental attributes. The snippet shows how to import existing attribute interfaces, extend them for custom elements, and export an empty object to prevent undesired module augmentation. Inputs are additional element or attribute definitions; outputs are refined types for Svelte component elements. Dependencies include TypeScript and the 'svelte/elements' package.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/03-typescript.md#2025-04-22_snippet_13

LANGUAGE: TypeScript
CODE:
```
/// file: additional-svelte-typings.d.ts\nimport { HTMLButtonAttributes } from 'svelte/elements';\n\ndeclare module 'svelte/elements' {\n\texport interface SvelteHTMLElements {\n\t\t'custom-button': HTMLButtonAttributes;\n\t}\n\n\t// allows for more granular control over what element to add the typings to\n\texport interface HTMLButtonAttributes {\n\t\tveryexperimentalattribute?: string;\n\t}\n}\n\nexport {}; // ensure this is not an ambient module, else types will be overridden instead of augmented
```

----------------------------------------

TITLE: Understanding Local Transitions in Svelte 4
DESCRIPTION: Explains that Svelte 4 transitions are local by default. This means a transition (like `in:slide`) inside a nested block (`#if success`) will only play when its immediate parent block is toggled, not when a higher-level parent block (`#if show`) is toggled. To revert to the Svelte 3 behavior (global transitions), use the `|global` modifier. The migration script adds this modifier automatically.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_6

LANGUAGE: svelte
CODE:
```
{#if show}
	...
	{#if success}
		<p in:slide>Success</p>
	{/each}
{/if}
```

----------------------------------------

TITLE: Defining Custom Element Tag for Svelte Component - Svelte - Svelte
DESCRIPTION: This snippet demonstrates assigning a custom HTML tag name to a Svelte component when compiling it as a custom element by setting the 'customElement' attribute in the <svelte:options> directive. No external dependencies are required besides Svelte itself. The main parameter is a string specifying the custom element's tag name (e.g., 'my-custom-element'). This configuration directs the compiler to expose the component as a Web Component using the given tag, without producing direct output in the file.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/05-special-elements/07-svelte-options.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<svelte:options customElement="my-custom-element" />
```

----------------------------------------

TITLE: Script Context Migration Example
DESCRIPTION: Shows the migration from deprecated context="module" to the new module attribute syntax in Svelte components.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/template.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<script ---context="module"--- +++module+++>
	let foo = 'bar';
</script>
```

----------------------------------------

TITLE: Correct Global and Scoped Selector Implementation
DESCRIPTION: Shows the correct way to separate :global and scoped selectors into distinct rules, fixing the invalid implementation from the previous example.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/style.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
:global {
    y {
        color: red;
    }
}

x y {
    color: red;
}
```

----------------------------------------

TITLE: Using Literal Element Names with svelte:element
DESCRIPTION: Example of how to use a literal element name with svelte:element in Svelte 5. While Svelte 4 allowed string literals directly, Svelte 5 requires the string to be wrapped in an expression.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_30

LANGUAGE: svelte
CODE:
```
<svelte:element this={"div"}>
```

----------------------------------------

TITLE: Child Component Receiving and Reassigning Prop (Svelte)
DESCRIPTION: Child component (`Child.svelte`) receiving the `count` prop via `$props()` destructuring. It displays the prop value and allows locally reassigning the `count` variable upon button click. This local reassignment is temporary and doesn't affect the parent's state; the prop value will reset if the parent passes an updated value.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_7

LANGUAGE: svelte
CODE:
```
<!--- file: Child.svelte --->
<script>
	let { count } = $props();
</script>

<button onclick={() => (count += 1)}>
	clicks (child): {count}
</button>
```

----------------------------------------

TITLE: Creating Non-tracked Scopes with $effect.root in JavaScript
DESCRIPTION: Shows how to use $effect.root to create a non-tracked scope that doesn't auto-cleanup. This is useful for nested effects that you want to manually control and for creating effects outside component initialization.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_7

LANGUAGE: javascript
CODE:
```
const destroy = $effect.root(() => {
	$effect(() => {
		// setup
	});

	return () => {
		// cleanup
	};
});

// later...
destroy();
```

----------------------------------------

TITLE: Using $state.raw for Non-Deeply Reactive State in Svelte
DESCRIPTION: This example demonstrates the use of $state.raw to create state that is not deeply reactive. It shows that direct property mutations don't work, and the entire object must be reassigned to update the state.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_3

LANGUAGE: javascript
CODE:
```
let person = $state.raw({
	name: 'Heraclitus',
	age: 49
});

// this will have no effect
person.age += 1;

// this will work, because we're creating a new person
person = {
	name: 'Heraclitus',
	age: 50
};
```

----------------------------------------

TITLE: Defining a Custom Animation Function Signature - Svelte Animations - JavaScript
DESCRIPTION: Defines the expected signature and return type for a custom Svelte animation function. The function receives a DOM node, state objects containing from and to DOMRects, and an optional params object. It can return properties controlling delay, duration, easing, and must provide at least one of css or tick for animation. This snippet is for authors implementing custom animate: directives and describes required interface details—no executable logic. Dependencies: DOMRect from the DOM API.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/15-animate.md#2025-04-22_snippet_2

LANGUAGE: js
CODE:
```
/// copy: false\n// @noErrors\nanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\n
```

----------------------------------------

TITLE: Missing tabindex for interactive role in Svelte
DESCRIPTION: Shows an element with an interactive role (button) that lacks a tabindex value, which is necessary for keyboard navigation.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_10

LANGUAGE: svelte
CODE:
```
<!-- A11y: Elements with the 'button' interactive role must have a tabindex value. -->
<div role="button" onkeypress={() => {}} />
```

----------------------------------------

TITLE: Documenting Missing 'customElement' Option in Svelte
DESCRIPTION: This snippet reminds users that the 'customElement' option is required when generating a custom element, suggesting they might have forgotten to include 'customElement: true' in their compile options.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
## options_missing_custom_element

> The `customElement` option is used when generating a custom element. Did you forget the `customElement: true` compile option?
```

----------------------------------------

TITLE: Using $state.snapshot in Svelte
DESCRIPTION: This snippet shows how to use $state.snapshot to take a static snapshot of a deeply reactive $state proxy. It's useful when passing state to external libraries that don't expect a proxy.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/02-$state.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<script>
	let counter = $state({ count: 0 });

	function onclick() {
		// Will log `{ count: ... }` rather than `Proxy { ... }`
		console.log($state.snapshot(counter));
	}
</script>
```

----------------------------------------

TITLE: Demonstrating Elements with Unsupported ARIA Attributes for Roles in Svelte
DESCRIPTION: Examples showing elements with ARIA attributes not supported by their roles, triggering the a11y_role_supports_aria_props and a11y_role_supports_aria_props_implicit rules.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_27

LANGUAGE: svelte
CODE:
```
<!-- A11y: The attribute 'aria-multiline' is not supported by the role 'link'. -->
<div role="link" aria-multiline></div>

<!-- A11y: The attribute 'aria-required' is not supported by the role 'listitem'. This role is implicit on the element <li>. -->
<li aria-required></li>
```

----------------------------------------

TITLE: Demonstrating Elements with Unknown ARIA Roles in Svelte
DESCRIPTION: Example showing an element with an unknown or misspelled ARIA role, triggering the a11y_unknown_role rule that suggests the correct role name.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_29

LANGUAGE: svelte
CODE:
```
<!-- A11y: Unknown role 'toooltip' (did you mean 'tooltip'?) -->
<div role="toooltip"></div>
```

----------------------------------------

TITLE: Demonstrating Missing Keyboard Events for Mouse Events in Svelte
DESCRIPTION: Examples showing mouse events without corresponding keyboard events, triggering the a11y_mouse_events_have_key_events rule. These examples lack the required focus/blur events to complement mouseover/mouseout.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_18

LANGUAGE: svelte
CODE:
```
<!-- A11y: onmouseover must be accompanied by onfocus -->
<div onmouseover={handleMouseover} />

<!-- A11y: onmouseout must be accompanied by onblur -->
<div onmouseout={handleMouseout} />
```

----------------------------------------

TITLE: Demonstrating Non-interactive Elements with Event Listeners in Svelte
DESCRIPTION: Examples of non-interactive elements with mouse or keyboard event listeners, triggering the a11y_no_noninteractive_element_interactions rule, including list items and div elements with onclick handlers.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_20

LANGUAGE: svelte
CODE:
```
<!-- `A11y: Non-interactive element <li> should not be assigned mouse or keyboard event listeners.` -->
<li onclick={() => {}}></li>

<!-- `A11y: Non-interactive element <div> should not be assigned mouse or keyboard event listeners.` -->
<div role="listitem" onclick={() => {}}></div>
```

----------------------------------------

TITLE: Demonstrating Interactive Elements with Non-interactive Roles in Svelte
DESCRIPTION: Example showing an interactive element (textarea) incorrectly assigned a non-interactive ARIA role (listitem), triggering the a11y_no_interactive_element_to_noninteractive_role rule.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_19

LANGUAGE: svelte
CODE:
```
<!-- A11y: <textarea> cannot have role 'listitem' -->
<textarea role="listitem"></textarea>
```

----------------------------------------

TITLE: SVG Implementation with Custom Properties
DESCRIPTION: Demonstrates how custom properties are handled within SVG elements, using a g element instead of the standard wrapper.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/03-custom-properties.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<g style="--track-color: black; --thumb-color: rgb({r} {g} {b})">
	<Slider
		bind:value
		min={0}
		max={100}
	/>
</g>
```

----------------------------------------

TITLE: Shorthand Form for Style Directive in Svelte
DESCRIPTION: Demonstrates the shorthand form of the style: directive where the property name is used without an explicit value.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/17-style.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<div style:color>...</div>
```

----------------------------------------

TITLE: Ignoring Multiple Svelte Warnings with Explanation
DESCRIPTION: Illustrates suppressing multiple Svelte compiler warnings (`a11y_click_events_have_key_events`, `a11y_no_static_element_interactions`) for an element using a single comma-separated `<!-- svelte-ignore ... -->` comment. It also shows how to include an optional explanatory note in parentheses within the comment for documentation purposes.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/98-reference/30-compiler-warnings.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<!-- svelte-ignore a11y_click_events_have_key_events, a11y_no_static_element_interactions (because of reasons) -->
<div onclick>...</div>
```

----------------------------------------

TITLE: Receiving Props in a Svelte Component using $props
DESCRIPTION: Shows the basic usage of the `$props()` rune within a child component (`MyComponent.svelte`) to receive all passed props as a single object. The received `props` object can then be used to access individual property values, like `props.adjective`.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<!--- file: MyComponent.svelte --->
<script>
	let props = $props();
</script>

<p>this component is {props.adjective}</p>
```

----------------------------------------

TITLE: Avoiding accesskey attribute in Svelte
DESCRIPTION: Demonstrates the incorrect usage of the accesskey attribute, which should be avoided to prevent accessibility complications.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<!-- A11y: Avoid using accesskey -->
<div accesskey="z"></div>
```

----------------------------------------

TITLE: Misplaced role attribute on meta tag in Svelte
DESCRIPTION: Shows the incorrect use of a role attribute on a meta tag, which should not have ARIA roles.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_14

LANGUAGE: svelte
CODE:
```
<!-- A11y: <meta> should not have role attribute -->
<meta role="tooltip" />
```

----------------------------------------

TITLE: Ignoring a Single Svelte Warning
DESCRIPTION: Demonstrates how to ignore a specific Svelte compiler warning (`a11y_autofocus`) for a single element using a `<!-- svelte-ignore <code> -->` comment placed directly above the element. This is useful for bypassing warnings that are considered false positives in a specific context.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/98-reference/30-compiler-warnings.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<!-- svelte-ignore a11y_autofocus -->
<input autofocus />
```

----------------------------------------

TITLE: Incorrect aria-hidden value in Svelte
DESCRIPTION: Illustrates the incorrect use of a non-boolean value for the aria-hidden attribute, which should only be 'true' or 'false'.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_9

LANGUAGE: svelte
CODE:
```
<!-- A11y: The value of 'aria-hidden' must be exactly one of true or false -->
<div aria-hidden="yes"></div>
```

----------------------------------------

TITLE: Updating Custom Element Definition in Svelte 4
DESCRIPTION: Demonstrates the deprecation of the `tag` option in `<svelte:options>` for defining custom elements. It should be replaced with the new `customElement` option, which offers more configurability. The migration script handles this replacement automatically.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
---<svelte:options tag="my-component" />---
+++<svelte:options customElement="my-component" />+++
```

----------------------------------------

TITLE: Basic Snippet Rendering in Svelte
DESCRIPTION: Demonstrates how to define and render a reusable snippet multiple times with different parameters. The example shows a sum calculation snippet being rendered with different number pairs.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/07-@render.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
{#snippet sum(a, b)}
	<p>{a} + {b} = {a + b}</p>
{/snippet}

{@render sum(1, 2)}
{@render sum(3, 4)}
{@render sum(5, 6)}
```

----------------------------------------

TITLE: Demonstrating Static Elements with Interactions Missing ARIA Roles in Svelte
DESCRIPTION: Example showing a div element with a click handler but without an ARIA role, triggering the a11y_no_static_element_interactions rule, which requires roles for interactive behavior.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_24

LANGUAGE: svelte
CODE:
```
<!-- A11y: <div> with click handler must have an ARIA role -->
<div onclick={() => ''}></div>
```

----------------------------------------

TITLE: Avoiding autofocus in Svelte
DESCRIPTION: Demonstrates the incorrect use of the autofocus attribute, which should be avoided to prevent usability issues for both sighted and non-sighted users.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_3

LANGUAGE: svelte
CODE:
```
<!-- A11y: Avoid using autofocus -->
<input autofocus />
```

----------------------------------------

TITLE: Incorrect placement of figcaption in Svelte
DESCRIPTION: Shows the incorrect placement of a figcaption element, which should be an immediate child of a figure element for proper accessibility.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_6

LANGUAGE: svelte
CODE:
```
<!-- A11y: <figcaption> must be an immediate child of <figure> -->
<div>
	<figcaption>Image caption</figcaption>
</div>
```

----------------------------------------

TITLE: Dynamic Element Component
DESCRIPTION: Syntax for using dynamic elements with svelte:element
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<svelte:element>
```

----------------------------------------

TITLE: Using String Event Handlers (No Longer Supported)
DESCRIPTION: Example of using string event handlers in Svelte 4, which is no longer supported in Svelte 5. Instead, Svelte 5 uses oneventname properties as the mechanism for adding event handlers.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_29

LANGUAGE: svelte
CODE:
```
<button onclick="alert('hello')">...</button>
```

----------------------------------------

TITLE: Demonstrating Missing Accessibility Attributes in Svelte
DESCRIPTION: Examples of elements missing required accessibility attributes that would trigger the a11y_missing_attribute rule, including input elements without alt text, html without lang attribute, and anchor tags without href.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_16

LANGUAGE: svelte
CODE:
```
<!-- A11y: <input type=\"image\"> element should have an alt, aria-label or aria-labelledby attribute -->
<input type="image" />

<!-- A11y: <html> element should have a lang attribute -->
<html></html>

<!-- A11y: <a> element should have an href attribute -->
<a>text</a>
```

----------------------------------------

TITLE: Valid and Invalid {@debug} Syntax Examples in Svelte
DESCRIPTION: Shows correct and incorrect ways to use the {@debug} tag. Demonstrates that it accepts comma-separated variable names but not expressions or complex object properties.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/10-@debug.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<!-- Compiles -->
{@debug user}
{@debug user1, user2, user3}

<!-- WON'T compile -->
{@debug user.firstname}
{@debug myArray[0]}
{@debug !isReady}
{@debug typeof user === 'object'}
```

----------------------------------------

TITLE: Scoping :is() and :where() Selectors in Svelte 5 CSS
DESCRIPTION: Shows how to use :global() to scope :is() and :where() selectors in Svelte 5 CSS, particularly when using Tailwind's @apply directive.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_27

LANGUAGE: css
CODE:
```
main :global {
	@apply bg-blue-100 dark:bg-blue-900;
}
```

----------------------------------------

TITLE: Understanding Preprocessor Execution Order Change in Svelte 4 (JavaScript)
DESCRIPTION: Illustrates the change in the execution order of Svelte preprocessors. In Svelte 3, all markup preprocessors ran first, then all script, then all style. In Svelte 4, preprocessors run sequentially, and within each preprocessor object, the order is markup -> script -> style. This difference is shown via console log outputs.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
// @errors: 2304
import { preprocess } from 'svelte/compiler';

const { code } = await preprocess(
	source,
	[
		{
			markup: () => {
				console.log('markup-1');
			},
			script: () => {
				console.log('script-1');
			},
			style: () => {
				console.log('style-1');
			}
		},
		{
			markup: () => {
				console.log('markup-2');
			},
			script: () => {
				console.log('script-2');
			},
			style: () => {
				console.log('style-2');
			}
		}
	],
	{
		filename: 'App.svelte'
	}
);

// Svelte 3 logs:
// markup-1
// markup-2
// script-1
// script-2
// style-1
// style-2

// Svelte 4 logs:
// markup-1
// script-1
// style-1
// markup-2
// script-2
// style-2
```

----------------------------------------

TITLE: Basic {@debug} Usage with Object in Svelte
DESCRIPTION: Demonstrates basic usage of the {@debug} tag with a user object, showing how to debug specific variable changes. The example creates a user object with firstname and lastname properties and debugs the entire object.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/10-@debug.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	let user = {
		firstname: 'Ada',
		lastname: 'Lovelace'
	};
</script>

{@debug user}

<h1>Hello {user.firstname}!</h1>
```

----------------------------------------

TITLE: Accessing Component Properties in Svelte 4
DESCRIPTION: Demonstrates how to make component properties accessible on the component instance using the 'accessors' option in Svelte 4.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_23

LANGUAGE: svelte
CODE:
```
<svelte:options accessors={true} />

<script>
	// available via componentInstance.name
	export let name;
</script>
```

----------------------------------------

TITLE: Invalid Global Selector List Example
DESCRIPTION: Demonstrates an invalid CSS implementation where :global selector is mixed with scoped selectors in the same selector list. Shows why combining :global with scoped selectors x and y is problematic.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/style.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
:global, x {
    y {
        color: red;
    }
}
```

----------------------------------------

TITLE: Adjusting onMount for Asynchronous Return Functions (JavaScript)
DESCRIPTION: Highlights a change in `onMount` behavior in Svelte 4. Returning a function asynchronously from `onMount` (e.g., inside an `async` function) will now cause a type error because the returned cleanup function would not be registered correctly for component destruction. The fix involves ensuring the `onMount` callback itself is synchronous, potentially using `.then()` for asynchronous operations within it, and returning the cleanup function synchronously.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// @noErrors
// Example where this change reveals an actual bug
onMount(
---	// someCleanup() not called because function handed to onMount is async
	async () => {
		const something = await foo();---
+++	// someCleanup() is called because function handed to onMount is sync
	() => {
		foo().then(something => {...});
		// ...
		return () => someCleanup();
	}
);
```

----------------------------------------

TITLE: Updating Global State in Svelte Component
DESCRIPTION: Demonstrates how to update global state within a Svelte component, which can lead to issues in server-side rendering.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/02-context.md#2025-04-22_snippet_7

LANGUAGE: svelte
CODE:
```
<script>
	import { myGlobalState } from 'svelte';

	let { data } = $props();

	if (data.user) {
		myGlobalState.user = data.user;
	}
</script>
```

----------------------------------------

TITLE: Scope Change for Default Slot Bindings in Svelte 4
DESCRIPTION: Demonstrates that in Svelte 4, variables bound using `let:` on the default slot are no longer implicitly available within named slots (like `slot="bar"`) of the same component instance, and vice-versa. This change enforces more consistent and predictable scoping for slot bindings.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_7

LANGUAGE: svelte
CODE:
```
<script>
	import Nested from './Nested.svelte';
</script>

<Nested let:count>
	<p>
		count in default slot - is available: {count}
	</p>
	<p slot="bar">
		count in bar slot - is not available: {count}
	</p>
</Nested>
```

----------------------------------------

TITLE: Running Basic Test Suite in Svelte
DESCRIPTION: Command for running the entire test suite for the Svelte project using pnpm.
SOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
pnpm test
```

----------------------------------------

TITLE: Documenting Deprecated 'immutable' Option in Svelte
DESCRIPTION: This snippet explains that the 'immutable' option has been deprecated and will not have any effect when using runes mode in Svelte.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
## options_deprecated_immutable

> The `immutable` option has been deprecated. It will have no effect in runes mode
```

----------------------------------------

TITLE: Svelte-ignore Comments for Accessibility Warnings
DESCRIPTION: Shows how to use svelte-ignore comments to disable specific warnings, such as accessibility warnings.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_12

LANGUAGE: svelte
CODE:
```
<!-- svelte-ignore a11y_autofocus -->
<input bind:value={name} autofocus />
```

----------------------------------------

TITLE: HTML Self-Closing Tags Example
DESCRIPTION: Demonstrates the incorrect and correct parsing of self-closing tags in HTML, showing how browsers interpret self-closing span tags differently than expected.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/template.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<div>
	<span class="icon" /> some text!
</div>
```

LANGUAGE: html
CODE:
```
<div>
	<span class="icon"> some text! </span>
</div>
```

----------------------------------------

TITLE: Using $effect.tracking in Svelte Components
DESCRIPTION: Demonstrates how to use $effect.tracking to detect whether code is running inside a tracking context such as an effect or template. This is useful for implementing reactive abstractions.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/04-$effect.md#2025-04-22_snippet_6

LANGUAGE: svelte
CODE:
```
<script>
	console.log('in component setup:', $effect.tracking()); // false

	$effect(() => {
		console.log('in effect:', $effect.tracking()); // true
	});
</script>

<p>in template: {$effect.tracking()}</p> <!-- true -->
```

----------------------------------------

TITLE: Invalid Default Snippet Usage Example in Svelte Components
DESCRIPTION: Demonstrates the incorrect usage scenario where a parent component uses let: directives while a child component attempts to use {@render children(...)}. This combination of APIs is incompatible and will throw an error.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/shared-errors/errors.md#2025-04-23_snippet_0

LANGUAGE: svelte
CODE:
```
<!--- file: Parent.svelte --->
<List {items} let:entry>
    <span>{entry}</span>
</List>
```

LANGUAGE: svelte
CODE:
```
<!--- file: List.svelte --->
<script>
    let { items, children } = $props();
</script>

<ul>
    {#each items as item}
        <li>{@render children(item)}</li>
    {/each}
</ul>
```

----------------------------------------

TITLE: Using aria-activedescendant without tabindex in Svelte
DESCRIPTION: Shows an incorrect implementation where an element with aria-activedescendant is missing a tabindex attribute, which is required for proper accessibility.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<!-- A11y: Elements with attribute aria-activedescendant should have tabindex value -->
<div aria-activedescendant="some-id"></div>
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Dynamic Contenteditable Attribute
DESCRIPTION: Warns about using a dynamic 'contenteditable' attribute with two-way binding.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
> 'contenteditable' attribute cannot be dynamic if element uses two-way binding
```

----------------------------------------

TITLE: Using distracting marquee element in Svelte
DESCRIPTION: Illustrates the use of a marquee element, which should be avoided as it can be visually distracting and cause accessibility issues.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<!-- A11y: Avoid <marquee> elements -->
<marquee></marquee>
```

----------------------------------------

TITLE: Unquoted Attribute Values in Svelte
DESCRIPTION: Demonstrates that attribute values can be unquoted in Svelte, similar to HTML.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/01-basic-markup.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<input type=checkbox />
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Invalid Attribute Name
DESCRIPTION: Indicates that a specific attribute name is not valid.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_9

LANGUAGE: markdown
CODE:
```
> '%name%' is not a valid attribute name
```

----------------------------------------

TITLE: Removed Option Error Message
DESCRIPTION: Error message template shown when attempting to use a compiler option that has been removed
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/options.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
## options_removed

> Invalid compiler option: %details%
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Invalid Type Attribute
DESCRIPTION: Specifies that the 'type' attribute must be static when using two-way binding on an input element.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_11

LANGUAGE: markdown
CODE:
```
> 'type' attribute must be a static text value if input uses two-way binding
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Invalid Event Handler Attribute
DESCRIPTION: Explains that event attributes must be JavaScript expressions, not strings.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_7

LANGUAGE: markdown
CODE:
```
> Event attribute must be a JavaScript expression, not a string
```

----------------------------------------

TITLE: Demonstrating Legacy Each Block Reassignment and Binding in Svelte
DESCRIPTION: This snippet shows the legacy way of reassigning and binding to each block arguments, which is now considered buggy and unpredictable, especially with derived values.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/script.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	let array = [1, 2, 3];
</script>

{#each array as entry}
	<!-- reassignment -->
	<button on:click={() => entry = 4}>change</button>

	<!-- binding -->
	<input bind:value={entry}>
{/each}
```

----------------------------------------

TITLE: Demonstrating Uncloneable State Snapshot in Svelte
DESCRIPTION: Shows how $state.snapshot handles cloneable and uncloneable properties. While primitive values can be cloned, DOM elements like 'window' cannot be cloned and are returned as original references.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/shared-warnings/warnings.md#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const object = $state({ property: 'this is cloneable', window })
const snapshot = $state.snapshot(object);
```

----------------------------------------

TITLE: Demonstrating Redundant ARIA Roles in Svelte
DESCRIPTION: Examples showing elements with redundant ARIA roles that match their default implicit roles, triggering the a11y_no_redundant_roles rule. This includes button and img elements with their default roles explicitly defined.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_23

LANGUAGE: svelte
CODE:
```
<!-- A11y: Redundant role 'button' -->
<button role="button">...</button>

<!-- A11y: Redundant role 'img' -->
<img role="img" src="foo.jpg" />
```

----------------------------------------

TITLE: Demonstrating Unknown ARIA Attributes in Svelte
DESCRIPTION: Example showing an element with an unknown or misspelled ARIA attribute, triggering the a11y_unknown_aria_attribute rule that suggests the correct attribute name.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_28

LANGUAGE: svelte
CODE:
```
<!-- A11y: Unknown aria attribute 'aria-labeledby' (did you mean 'labelledby'?) -->
<input type="image" aria-labeledby="foo" />
```

----------------------------------------

TITLE: Replacing Deprecated SvelteComponentTyped (JavaScript/TypeScript)
DESCRIPTION: Shows how to replace the deprecated `SvelteComponentTyped` import and usage with `SvelteComponent`. The `SvelteComponent` type now incorporates the typing capabilities previously provided by `SvelteComponentTyped`. The migration script automates this change.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
---import { SvelteComponentTyped } from 'svelte';---
+++import { SvelteComponent } from 'svelte';+++

---export class Foo extends SvelteComponentTyped<{ aProp: string }> {}---
+++export class Foo extends SvelteComponent<{ aProp: string }> {}+++
```

----------------------------------------

TITLE: Demonstrating Non-interactive Elements with Interactive Roles in Svelte
DESCRIPTION: Example showing a non-interactive element (h3) incorrectly assigned an interactive ARIA role (searchbox), triggering the a11y_no_noninteractive_element_to_interactive_role rule.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_21

LANGUAGE: svelte
CODE:
```
<!-- A11y: Non-interactive element <h3> cannot have interactive role 'searchbox' -->
<h3 role="searchbox">Button</h3>
```

----------------------------------------

TITLE: Updating SvelteComponent Type Hint for Dynamic Components (Svelte)
DESCRIPTION: Illustrates a fix for a potential type error when using `typeof SvelteComponent` as a type hint for dynamically assigned components in Svelte 4. The type hint should be changed to `typeof SvelteComponent<any>` to resolve the issue. The migration script can perform this adjustment.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<script>
	import ComponentA from './ComponentA.svelte';
	import ComponentB from './ComponentB.svelte';
	import { SvelteComponent } from 'svelte';

	let component: typeof SvelteComponent+++<any>+++;

	function choseRandomly() {
		component = Math.random() > 0.5 ? ComponentA : ComponentB;
	}
</script>

<button on:click={choseRandomly}>random</button>
<svelte:element this={component} />
```

----------------------------------------

TITLE: Demonstrating Elements Missing Required Content in Svelte
DESCRIPTION: Examples showing elements that require content for accessibility but are empty, triggering the a11y_missing_content rule, including empty anchor tags and headings.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_17

LANGUAGE: svelte
CODE:
```
<!-- A11y: <a> element should have child content -->
<a href="/foo"></a>

<!-- A11y: <h1> element should have child content -->
<h1></h1>
```

----------------------------------------

TITLE: Demonstrating Elements with ARIA Roles Missing Required Attributes in Svelte
DESCRIPTION: Example showing an element with the ARIA role 'checkbox' but missing the required aria-checked attribute, triggering the a11y_role_has_required_aria_props rule.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_26

LANGUAGE: svelte
CODE:
```
<!-- A11y: A11y: Elements with the ARIA role "checkbox" must have the following attributes defined: "aria-checked" -->
<span role="checkbox" aria-labelledby="foo" tabindex="0"></span>
```

----------------------------------------

TITLE: Modifying Action Typing for Parameters in Svelte 4 (TypeScript)
DESCRIPTION: Shows the required change for typing Svelte Actions that accept parameters in Svelte 4. The `Action` and `ActionReturn` types now default the parameter type to `undefined`. If an action uses parameters, the generic must be explicitly typed (e.g., `Action<HTMLElement, string>`) to avoid type errors. The provided migration script can automate this update.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
// @noErrors
---const action: Action = (node, params) => { ... } // this is now an error if you use params in any way---
+++const action: Action<HTMLElement, string> = (node, params) => { ... } // params is of type string+++
```

----------------------------------------

TITLE: Mutating a Reactive Object Prop (Warning) (Svelte)
DESCRIPTION: Child component (`Child.svelte`) receiving a reactive object prop created with `$state` in the parent. Mutating the object's property (`object.count`) from within the child component *will* update the value displayed, but it triggers a runtime warning (`ownership_invalid_mutation`) because the child is mutating state it doesn't own. This practice is discouraged.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/02-runes/05-$props.md#2025-04-22_snippet_11

LANGUAGE: svelte
CODE:
```
<!--- file: Child.svelte --->
<script>
	let { object } = $props();
</script>

<button onclick={() => {
	// will cause the count below to update,
	// but with a warning. Don't mutate
	// objects you don't own!
	object.count += 1
}}>
	clicks: {object.count}
</button>
```

----------------------------------------

TITLE: Demonstrating Non-interactive Elements with Positive TabIndex in Svelte
DESCRIPTION: Example showing a non-interactive element (div) with a positive tabindex value, triggering the a11y_no_noninteractive_tabindex rule, which can create confusing keyboard navigation.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_22

LANGUAGE: svelte
CODE:
```
<!-- A11y: noninteractive element cannot have nonnegative tabIndex value -->
<div tabindex="0"></div>
```

----------------------------------------

TITLE: Misuse of scope attribute in Svelte
DESCRIPTION: Demonstrates the incorrect use of the scope attribute on a div element, which should only be used with th elements.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_15

LANGUAGE: svelte
CODE:
```
<!-- A11y: The scope attribute should only be used with <th> elements -->
<div scope="row" />
```

----------------------------------------

TITLE: Running Specific Test Suite in Svelte
DESCRIPTION: Command for running a specific test suite by name, using the validator example.
SOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
pnpm test validator
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Missing Animation Key
DESCRIPTION: Reminds the user to add a key to the each block when using the 'animate:' directive.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
> An element that uses the `animate:` directive must be the only child of a keyed `{#each ...}` block. Did you forget to add a key to your each block?
```

----------------------------------------

TITLE: Adjusting Preprocessor Order for MDsveX in Svelte 4 (JavaScript/Configuration)
DESCRIPTION: Provides a configuration example demonstrating the practical consequence of the Svelte 4 preprocessor order change. Preprocessors like MDsveX, which may transform script or style tags within markdown, should now typically be listed *before* other preprocessors (like `vitePreprocess`) that act on script or style content.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/06-v4-migration-guide.md#2025-04-22_snippet_9

LANGUAGE: javascript
CODE:
```
// @noErrors
preprocess: [
--- 	vitePreprocess(),
	mdsvex(mdsvexConfig)---
+++ 	mdsvex(mdsvexConfig),
	vitePreprocess()+++ 
]
```

----------------------------------------

TITLE: Documenting Deprecated 'accessors' Option in Svelte
DESCRIPTION: This snippet informs that the 'accessors' option has been deprecated and will not have any effect when using runes mode in Svelte.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
## options_deprecated_accessors

> The `accessors` option has been deprecated. It will have no effect in runes mode
```

----------------------------------------

TITLE: Demonstrating Invalid State Update in Svelte 5
DESCRIPTION: This snippet shows an incorrect attempt to update state inside a derived value, which is forbidden in Svelte 5. It demonstrates the 'state_unsafe_mutation' error and explains why it occurs.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/client-errors/errors.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<script>
	let count = $state(0);

	let even = $state(true);

	let odd = $derived.by(() => {
		even = count % 2 === 0;
		return !even;
	});
</script>

<button onclick={() => count++}>{count}</button>

<p>{count} is even: {even}</p>
<p>{count} is odd: {odd}</p>
```

----------------------------------------

TITLE: Invalid href attribute in Svelte
DESCRIPTION: Demonstrates an invalid (empty) href attribute on an anchor tag, which should have a valid value for accessibility.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/a11y.md#2025-04-22_snippet_11

LANGUAGE: svelte
CODE:
```
<!-- A11y: '' is not a valid href attribute -->
<a href="">invalid</a>
```

----------------------------------------

TITLE: Illustrating Invalid Snippet Export in Svelte
DESCRIPTION: This example shows an invalid snippet export where the snippet references a variable defined outside the module scope, which is not allowed in Svelte.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/script.md#2025-04-22_snippet_2

LANGUAGE: svelte
CODE:
```
<script module>
	export { greeting };
</script>

<script>
	let message = 'hello';
</script>

{#snippet greeting(name)}
	<p>{message} {name}!</p>
{/snippet}
```

----------------------------------------

TITLE: Invalid HTML Example in Svelte
DESCRIPTION: This snippet provides an example of invalid HTML usage with the `{@html ...}` tag, illustrating that non-standalone HTML like unclosed tags will not function correctly.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/03-template-syntax/08-@html.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
{@html '<div>'}content{@html '</div>'}
```

----------------------------------------

TITLE: Modifying Emitted CSS for Ancient Browser Support
DESCRIPTION: Demonstrates how to modify emitted CSS to support ancient browsers that don't implement :where, at the cost of unpredictable specificity changes.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/07-v5-migration-guide.md#2025-04-23_snippet_28

LANGUAGE: javascript
CODE:
```
css = css.replace(/:where\((.+?)\)/, '$1');
```

----------------------------------------

TITLE: Style Properties Example
DESCRIPTION: Example showing support for style properties on SVG components and svelte:component
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
--style-props
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Invalid Animation Placement
DESCRIPTION: Explains the correct usage of the 'animate:' directive within a keyed each block.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_1

LANGUAGE: markdown
CODE:
```
> An element that uses the `animate:` directive must be the only child of a keyed `{#each ...}` block
```

----------------------------------------

TITLE: Svelte Await Block Syntax
DESCRIPTION: Example of the {#await} block catch shorthand syntax supported in version 3.21.0.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_7

LANGUAGE: svelte
CODE:
```
{#await promise catch error}
  <p>{error.message}</p>
{/await}
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Unquoted Sequence in Attribute
DESCRIPTION: Reminds to enclose attribute values containing expressions in quote marks.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_12

LANGUAGE: markdown
CODE:
```
> Attribute values containing `{...}` must be enclosed in quote marks, unless the value only contains the expression
```

----------------------------------------

TITLE: Updating Test Snapshots in Svelte
DESCRIPTION: Command for updating test snapshots using the UPDATE_SNAPSHOTS environment variable, used for test suites like snapshot and parser.
SOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
UPDATE_SNAPSHOTS=true pnpm test
```

----------------------------------------

TITLE: Filtering Tests Within a Test Suite
DESCRIPTION: Command for filtering tests within a specific test suite using the -t flag to target a specific test.
SOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
pnpm test validator -- -t a11y-alt-text
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Missing Contenteditable Attribute
DESCRIPTION: Indicates the requirement of the 'contenteditable' attribute for certain two-way bindings.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_4

LANGUAGE: markdown
CODE:
```
> 'contenteditable' attribute is required for textContent, innerHTML and innerText two-way bindings
```

----------------------------------------

TITLE: Defining a Multiplier Function in Svelte
DESCRIPTION: Defines a multiplier function in JavaScript for use in Svelte applications, with an initial state and a set method for updating the multiplier value. Dependencies include a state management tool like $state.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/07-misc/02-testing.md#2025-04-22_snippet_3

LANGUAGE: js
CODE:
```
/**
 * @param {number} initial
 * @param {number} k
 */
export function multiplier(initial, k) {
	let count = $state(initial);

	return {
		get value() {
			return count * k;
		},
		/** @param {number} c */
		set: (c) => {
			count = c;
		}
	};
}
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Invalid Sequence Expression in Runes Mode
DESCRIPTION: Explains the limitation of using sequence expressions as attribute/directive values in runes mode.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_10

LANGUAGE: markdown
CODE:
```
> Sequence expressions are not allowed as attribute/directive values in runes mode, unless wrapped in parentheses
```

----------------------------------------

TITLE: Svelte Directive and Component Changes
DESCRIPTION: Collection of changes related to directives and component behavior, including ref directives preventing HTMLified content and store computed properties updating components immediately upon declaration.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_12

LANGUAGE: markdown
CODE:
```
- `ref` directives prevent HTMLified content
- Store computed properties update components immediately upon declaration
- Evaluate `each` key in child scope
- Only update dynamic component props
- Fix DOM event context
```

----------------------------------------

TITLE: Svelte Each Block Binding Example
DESCRIPTION: Example of contextual bind:this inside an {#each} block, which was fixed to properly handle bindings in version 3.24.0.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_6

LANGUAGE: svelte
CODE:
```
{#each items as item}
  <div bind:this={item.ref}></div>
{/each}
```

----------------------------------------

TITLE: Svelte Dynamic Component Binding Example
DESCRIPTION: Example of a dynamic component using {#if} block within a <slot>. This was fixed in version 3.21.0.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_5

LANGUAGE: svelte
CODE:
```
<slot>
  <svelte:component this={component}/>
</slot>
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Duplicate Attributes
DESCRIPTION: Reminds that attributes must be unique within an element.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_5

LANGUAGE: markdown
CODE:
```
> Attributes need to be unique
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Empty Attribute Shorthand
DESCRIPTION: Warns against using empty attribute shorthand syntax.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_6

LANGUAGE: markdown
CODE:
```
> Attribute shorthand cannot be empty
```

----------------------------------------

TITLE: Documenting Renamed 'generate' Options in Svelte
DESCRIPTION: This snippet informs that the 'generate' option values "dom" and "ssr" have been renamed to "client" and "server" respectively in Svelte compiler options.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_6

LANGUAGE: markdown
CODE:
```
## options_renamed_ssr_dom

> `generate: "dom"` and `generate: "ssr"` options have been renamed to "client" and "server" respectively
```

----------------------------------------

TITLE: Loop Guard Timeout
DESCRIPTION: Code protection feature added in version 3.14.0 to prevent infinite loops.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_11

LANGUAGE: javascript
CODE:
```
loopGuardTimeout
```

----------------------------------------

TITLE: Deprecated beforeUpdate and afterUpdate Hooks in Svelte 5
DESCRIPTION: Shows the deprecated beforeUpdate and afterUpdate lifecycle hooks from Svelte 4. These are shimmed in Svelte 5 for backward compatibility but not available in components using runes.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/06-runtime/03-lifecycle-hooks.md#2025-04-22_snippet_4

LANGUAGE: svelte
CODE:
```
<script>
	import { beforeUpdate, afterUpdate } from 'svelte';

	beforeUpdate(() => {
		console.log('the component is about to update');
	});

	afterUpdate(() => {
		console.log('the component just updated');
	});
</script>
```

----------------------------------------

TITLE: CSS Custom Properties Implementation Detail
DESCRIPTION: Shows how Svelte internally handles custom properties by wrapping the component in a svelte-css-wrapper element with the appropriate styles.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/03-custom-properties.md#2025-04-22_snippet_1

LANGUAGE: svelte
CODE:
```
<svelte-css-wrapper style="display: contents; --track-color: black; --thumb-color: rgb({r} {g} {b})">
	<Slider
		bind:value
		min={0}
		max={100}
	/>
</svelte-css-wrapper>
```

----------------------------------------

TITLE: Alternative Test Filtering Using Environment Variable
DESCRIPTION: Command for filtering tests using the FILTER environment variable, which removes other tests rather than skipping them for faster results.
SOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
FILTER=<test-name> pnpm test <suite-name>
```

----------------------------------------

TITLE: Inserting Unscoped Style Tags in Svelte
DESCRIPTION: This snippet demonstrates how to include a <style> tag within a <div> in a Svelte component. The styles declared will directly affect matching elements in the entire DOM, as there is no scoping or processing done by Svelte on the nested <style> tag. The main dependency is a Svelte environment capable of rendering DOM structures.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/04-styling/04-nested-style-elements.md#2025-04-22_snippet_0

LANGUAGE: svelte
CODE:
```
<div>\n\t<style>\n\t\t/* this style tag will be inserted as-is */\n\t\tdiv {\n\t\t\t/* this will apply to all `<div>` elements in the DOM */\n\t\t\tcolor: red;\n\t\t}\n\t</style>\n</div>
```

----------------------------------------

TITLE: CSS Layer Declaration
DESCRIPTION: Example showing support for CSS @layer functionality
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
@layer
```

----------------------------------------

TITLE: TypeScript Action Interface
DESCRIPTION: TypeScript interface definitions for Svelte actions
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_4

LANGUAGE: typescript
CODE:
```
ComponentEvents
SveltePreprocessor
ComponentType
ComponentProps
CompileOptions
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Invalid Multiple Attribute
DESCRIPTION: Specifies that the 'multiple' attribute must be static when using two-way binding on a select element.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_8

LANGUAGE: markdown
CODE:
```
> 'multiple' attribute must be static if select uses two-way binding
```

----------------------------------------

TITLE: Aria Hidden Attribute
DESCRIPTION: Example of accessibility improvement made in version 3.15.0 for resize-listener objects.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_9

LANGUAGE: html
CODE:
```
aria-hidden="true"
```

----------------------------------------

TITLE: HTML Banner Implementation for Svelte Website
DESCRIPTION: HTML code for responsive Svelte banner that adapts to light/dark mode preferences using the picture element with multiple sources.
SOURCE: https://github.com/sveltejs/svelte/blob/main/README.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<a href="https://svelte.dev">
	<picture>
		<source media="(prefers-color-scheme: dark)" srcset="assets/banner_dark.png">
		<img src="assets/banner.png" alt="Svelte - web development for the rest of us" />
	</picture>
</a>
```

----------------------------------------

TITLE: Self-Closing Tags Migration Command
DESCRIPTION: Command to automatically migrate self-closing tags in Svelte applications to explicit closing tags.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/template.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx sv migrate self-closing-tags
```

----------------------------------------

TITLE: Documenting Removed 'enableSourcemap' Option in Svelte
DESCRIPTION: This snippet informs that the 'enableSourcemap' option has been removed. Source maps are now always generated, and tooling can choose to ignore them if desired.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
## options_removed_enable_sourcemap

> The `enableSourcemap` option has been removed. Source maps are always generated now, and tooling can choose to ignore them
```

----------------------------------------

TITLE: Installing Svelte PR in Another Project for Testing
DESCRIPTION: Command for installing a specific Svelte pull request in another pnpm project for manual testing, targeting a specific branch.
SOURCE: https://github.com/sveltejs/svelte/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
pnpm add -D "github:sveltejs/svelte#path:packages/svelte&branch-name"
```

----------------------------------------

TITLE: Svelte Changelog Entry Block
DESCRIPTION: A markdown block containing version information and patch changes for Svelte releases. Includes version numbers, fix descriptions, and links to related pull requests.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
### Patch Changes

- fix: better ownership mutation validation ([#10673](https://github.com/sveltejs/svelte/pull/10673))

- fix: handle TypeScript's optional parameter syntax in snippets ([#10671](https://github.com/sveltejs/svelte/pull/10671))

- fix: deduplicate generated props and action arg names ([#10669](https://github.com/sveltejs/svelte/pull/10669))
```

----------------------------------------

TITLE: Defining Markdown Frontmatter in Svelte Documentation
DESCRIPTION: Simple markdown frontmatter that defines the title of a reference page in the Svelte documentation. This YAML-style metadata block appears at the top of the markdown file and sets the page title to 'Reference'.
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/98-reference/index.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: Reference
---
```

----------------------------------------

TITLE: Documenting Removed 'loopGuardTimeout' Option in Svelte
DESCRIPTION: This snippet simply states that the 'loopGuardTimeout' option has been removed from Svelte compiler options.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_5

LANGUAGE: markdown
CODE:
```
## options_removed_loop_guard_timeout

> The `loopGuardTimeout` option has been removed
```

----------------------------------------

TITLE: Defining Legacy Code Error Message in Svelte
DESCRIPTION: This snippet defines the error message template for legacy code in Svelte. It informs the user that a certain code pattern is no longer valid and suggests an alternative.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/misc.md#2025-04-22_snippet_0

LANGUAGE: plaintext
CODE:
```
> `%code%` is no longer valid — please use `%suggestion%` instead
```

----------------------------------------

TITLE: Svelte Changelog Entry Format
DESCRIPTION: Standard format for documenting patch changes in Svelte framework versions, including PR references and fix descriptions.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
### Patch Changes

- fix: ensure non-matching elements are scoped for `:not(...)` selector ([#13999](https://github.com/sveltejs/svelte/pull/13999))

- fix: ensure video elements autoplay in safari ([#14095](https://github.com/sveltejs/svelte/pull/14095))
```

----------------------------------------

TITLE: Error Message for Unavailable Lifecycle Function in Svelte
DESCRIPTION: This code snippet represents an error message template used when a lifecycle function is called in a server context where it's not available. It uses a placeholder %name% for the specific function name.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/server-errors/lifecycle.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
> `%name%(...)` is not available on the server
```

----------------------------------------

TITLE: Defining Markdown Frontmatter for Svelte Project
DESCRIPTION: Markdown frontmatter block that defines the title of the Svelte project documentation
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/index.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: Svelte
---
```

----------------------------------------

TITLE: Invalid Option Value Error Message
DESCRIPTION: Error message template displayed when a compiler option has an invalid value
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/options.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
## options_invalid_value

> Invalid compiler option: %details%
```

----------------------------------------

TITLE: Displaying Svelte Error Message for Animation Duplicate
DESCRIPTION: Shows the error message when an element has more than one 'animate' directive.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/template.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
> An element can only have one 'animate' directive
```

----------------------------------------

TITLE: Break Statement in Reactive Block
DESCRIPTION: Example of using break$ to exit a reactive block early, added in version 3.13.0.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
break $
```

----------------------------------------

TITLE: Unrecognized Option Error Message
DESCRIPTION: Error message template displayed when an unrecognized compiler option is specified
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-errors/options.md#2025-04-22_snippet_2

LANGUAGE: markdown
CODE:
```
## options_unrecognised

> Unrecognised compiler option %keypath%
```

----------------------------------------

TITLE: Documenting Removed 'hydratable' Option in Svelte
DESCRIPTION: This snippet explains that the 'hydratable' option has been removed, as Svelte components are now always hydratable.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/options.md#2025-04-22_snippet_4

LANGUAGE: markdown
CODE:
```
## options_removed_hydratable

> The `hydratable` option has been removed. Svelte components are always hydratable now
```

----------------------------------------

TITLE: Defining Unknown Code Error Messages in Svelte
DESCRIPTION: These snippets define error message templates for unknown code in Svelte. They inform the user that a code pattern is not recognized, with an optional suggestion for a similar valid code.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/messages/compile-warnings/misc.md#2025-04-22_snippet_1

LANGUAGE: plaintext
CODE:
```
> `%code%` is not a recognised code
```

LANGUAGE: plaintext
CODE:
```
> `%code%` is not a recognised code (did you mean `%suggestion%`?)
```

----------------------------------------

TITLE: Test Configuration Changes
DESCRIPTION: Code snippets showing regex and configuration adjustments needed for the new test environment
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/tests/README.md#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
- `compiler` options are different currently, a wrapper function in `helpers.js` was added and call sites rerouted to that
- regex in the loader was adjusted, a `$` was added to the `import * as ..` regex (because the new runtime does `import * as $ from ..` for the runtime)
- `vitest.config.js` was altered: `resolve-svelte` plugin also aliases `svelte` (the current runtime import) and `test.dir` was adjusted because the monorepo structure is different
```

----------------------------------------

TITLE: Component Event Dispatcher
DESCRIPTION: Error handling example from version 3.13.0 showing event dispatcher initialization.
SOURCE: https://github.com/sveltejs/svelte/blob/main/packages/svelte/CHANGELOG-pre-5.md#2025-04-22_snippet_10

LANGUAGE: javascript
CODE:
```
createEventDispatcher()
```

----------------------------------------

TITLE: Markdown Header for Svelte Transition Documentation
DESCRIPTION: Markdown frontmatter and module reference for the svelte/transition documentation
SOURCE: https://github.com/sveltejs/svelte/blob/main/documentation/docs/98-reference/21-svelte-transition.md#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: svelte/transition
---

> MODULE: svelte/transition
```